Search.setIndex({"alltitles": {"(Generalized) linear models": [[219, "generalized-linear-models"]], "1-way partial dependence with different models": [[192, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[103, "newsgroups-dataset"]], "2D interaction plots": [[192, "d-interaction-plots"]], "3D representation": [[192, "d-representation"]], "A constant prediction baseline": [[219, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[92, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "A demo of the Spectral Biclustering algorithm": [[57, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[58, "a-demo-of-the-spectral-co-clustering-algorithm"]], "A demo of the mean-shift clustering algorithm": [[97, "a-demo-of-the-mean-shift-clustering-algorithm"]], "A more flexible plotting API": [[330, "a-more-flexible-plotting-api"]], "A note on shuffling": [[419, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[51, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[391, "a-simple-algorithmic-trick-warm-restarts"]], "A simple example shipped with scikit-learn: iris dataset": [[1029, null]], "A tutorial on statistical-learning for scientific data processing": [[1026, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "A typical workflow for triaging issues": [[384, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[994, "aic-and-bic-criteria"]], "API Interface": [[406, "api-interface"]], "API Reference": [[1, "api-reference"]], "API changes": [[1046, "api-changes"]], "API changes summary": [[1039, "api-changes-summary"], [1039, "id4"], [1039, "id7"], [1039, "id10"], [1040, "api-changes-summary"], [1041, "api-changes-summary"], [1042, "api-changes-summary"], [1043, "api-changes-summary"], [1044, "api-changes-summary"], [1045, "api-changes-summary"], [1045, "id6"], [1046, "api-changes-summary"]], "API compatibility checkers": [[40, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[387, "apis-of-scikit-learn-objects"]], "ARDRegression": [[650, "ardregression"]], "ARFF parser": [[379, "arff-parser"]], "AWeber": [[1022, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[181, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Ablation study": [[256, "ablation-study"]], "About the project": [[397, "about-the-project"]], "About us": [[0, "about-us"]], "Access pipeline steps": [[416, "access-pipeline-steps"]], "Access to nested parameters": [[416, "access-to-nested-parameters"]], "Accuracy of the Model": [[193, "accuracy-of-the-model"]], "Accuracy score": [[998, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[363, "accuracy-vs-alpha-for-training-and-testing-sets"]], "AdaBoost": [[422, "adaboost"]], "AdaBoostClassifier": [[559, "adaboostclassifier"]], "AdaBoostRegressor": [[560, "adaboostregressor"]], "Add support for monotonic constraints in tree-based models": [[334, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[415, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[990, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[644, "additivechi2sampler"]], "Addressing the problem with a business metric": [[271, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[71, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Advanced Plotting With Partial Dependence": [[257, "advanced-plotting-with-partial-dependence"]], "Advantages:": [[415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null]], "Affinity Propagation": [[415, "affinity-propagation"]], "AffinityPropagation": [[446, "affinitypropagation"]], "Agglomerative clustering with and without structure": [[73, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[74, "agglomerative-clustering-with-different-metrics"]], "AgglomerativeClustering": [[447, "agglomerativeclustering"]], "Aggressive elimination of candidates": [[987, "aggressive-elimination-of-candidates"]], "Algorithms": [[1002, "algorithms"]], "Alpine Linux": [[403, "alpine-linux"]], "Alternative compilers": [[383, "alternative-compilers"]], "Alternatives to brute force parameter search": [[987, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[256, "ames-housing-dataset"]], "Amount of resource and number of candidates at each iteration": [[987, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "An example custom estimator implementing a simple classifier": [[136, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[93, "an-example-of-k-means-initialization"]], "An example of reshaping data would be the digits dataset": [[1029, null]], "An introduction to machine learning with scikit-learn": [[1023, "an-introduction-to-machine-learning-with-scikit-learn"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[403, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[138, "analysis"]], "Analysis of a bag-of-words document classifier": [[359, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[151, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[192, "analysis-of-the-plots"]], "Analysis of the results": [[63, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[987, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[51, "analyzing-the-bike-sharing-demand-dataset"]], "Application example: vector quantization": [[1031, null]], "Applications and examples": [[423, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[298, "approximate-nearest-neighbors-in-tsne"]], "Arch Linux": [[403, "arch-linux"]], "Architectural / general goals": [[1018, "architectural-general-goals"]], "Array API support (experimental)": [[411, "array-api-support-experimental"]], "Artwork": [[0, "artwork"]], "Attributes": [[399, "attributes"]], "Authors": [[1039, "authors"], [1039, "id20"]], "Automatic Relevance Determination (ARD)": [[203, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[994, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[398, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[40, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1036, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1035, "available-documentation-for-scikit-learn"]], "BIRCH": [[415, "birch"]], "BNP Paribas Cardif": [[1022, "id29"]], "Bagging meta-estimator": [[422, "bagging-meta-estimator"]], "BaggingClassifier": [[561, "baggingclassifier"]], "BaggingRegressor": [[562, "baggingregressor"]], "Bags of words": [[1032, "bags-of-words"]], "Balance model complexity and cross-validated score": [[276, "balance-model-complexity-and-cross-validated-score"]], "Balanced accuracy score": [[998, "balanced-accuracy-score"]], "Ball Tree": [[1001, "ball-tree"]], "BallTree": [[850, "balltree"]], "BaseEstimator": [[429, "baseestimator"]], "BaseEstimator and mixins:": [[387, null]], "Basic kernels": [[425, "basic-kernels"]], "Basic shrinkage": [[417, "basic-shrinkage"]], "Bayesian Regression": [[994, "bayesian-regression"]], "Bayesian Ridge Regression": [[994, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[198, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[24, "bayesian-regressors"]], "BayesianGaussianMixture": [[803, "bayesiangaussianmixture"]], "BayesianRidge": [[651, "bayesianridge"]], "Before a release": [[389, "before-a-release"]], "Benchmark and plot helper functions": [[48, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[48, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[45, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[48, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[48, "benchmark-throughput"]], "Benchmarking classifiers": [[359, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1000, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1003, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[845, "bernoullinb"]], "BernoulliRBM": [[866, "bernoullirbm"]], "Bestofmedia Group": [[1022, "id13"]], "BiclusterMixin": [[430, "biclustermixin"]], "Biclustering": [[55, "biclustering"], [188, "biclustering"], [381, "biclustering"], [412, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[56, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Biclustering evaluation": [[412, "biclustering-evaluation"]], "Biclustering metrics": [[26, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[192, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[873, "binarizer"]], "Binary Case": [[994, "binary-case"]], "Binary case": [[998, "binary-case"]], "Binary classification": [[998, "binary-classification"]], "Birch": [[448, "birch"]], "Birchbox": [[1022, "id12"]], "Bisecting K-Means": [[415, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[77, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "BisectingKMeans": [[449, "bisectingkmeans"]], "BisectingKMeans: divide and cluster": [[331, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[125, "blind-source-separation-using-fastica"]], "Boil down your script to something as small as possible": [[390, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[164, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1022, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[382, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[998, "brier-score-loss"]], "Brute Force": [[1001, "brute-force"]], "Bug Tracker": [[1021, "bug-tracker"]], "Bug fixes": [[1042, "bug-fixes"], [1042, "id1"], [1042, "id3"], [1043, "bug-fixes"], [1043, "id3"], [1044, "bug-fixes"], [1044, "id3"], [1045, "bug-fixes"], [1045, "id5"], [1046, "bug-fixes"], [1046, "id4"]], "Bug triaging and issue curation": [[384, "bug-triaging-and-issue-curation"]], "Build a pipeline": [[416, "build-a-pipeline"]], "Build dependencies": [[383, "build-dependencies"]], "Build the dataset": [[180, "build-the-dataset"]], "Building a pipeline": [[1032, "building-a-pipeline"]], "Building a specific version from a tag": [[383, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[393, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[383, "building-from-source"]], "Building the documentation": [[385, "building-the-documentation"]], "Bulk versus Atomic mode": [[372, "bulk-versus-atomic-mode"]], "Bunch": [[925, "bunch"]], "CCA": [[488, "cca"]], "CCA (PLS mode B with symmetric deflation)": [[116, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[368, "cv-splitters"], [368, "id3"]], "Caching nearest neighbors": [[300, "caching-nearest-neighbors"]], "Caching transformers within a Pipeline": [[105, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[416, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[443, "calibratedclassifiercv"]], "Calibrating a classifier": [[413, "calibrating-a-classifier"]], "Calibration": [[59, "calibration"], [188, "calibration"]], "Calibration curves": [[61, "calibration-curves"], [63, "calibration-curves"], [413, "calibration-curves"]], "Calibration of the confidence interval": [[151, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[444, "calibrationdisplay"]], "California Housing dataset": [[380, "california-housing-dataset"]], "Calinski-Harabasz Index": [[415, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[116, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[418, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[256, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[148, "categorical-feature-support-in-gradient-boosting"]], "Categorical Features Support": [[422, "categorical-features-support"]], "Categorical Naive Bayes": [[1000, "categorical-naive-bayes"]], "CategoricalNB": [[846, "categoricalnb"]], "Centering kernel matrices": [[1008, "centering-kernel-matrices"]], "Chain of binary classifiers": [[297, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[385, "change-the-default-value-of-a-parameter"]], "Change.org": [[1022, "id14"]], "Changed displays": [[1055, "changed-displays"]], "Changed models": [[1046, "changed-models"], [1047, "changed-models"], [1047, "id9"], [1047, "id22"], [1048, "changed-models"], [1048, "id6"], [1049, "changed-models"], [1050, "changed-models"], [1050, "id3"], [1051, "changed-models"], [1052, "changed-models"], [1053, "changed-models"], [1053, "id6"], [1054, "changed-models"], [1054, "id7"], [1055, "changed-models"], [1055, "id4"], [1056, "changed-models"], [1057, "changed-models"]], "Changelog": [[1039, "changelog"], [1039, "id1"], [1039, "id3"], [1039, "id6"], [1039, "id9"], [1039, "id12"], [1039, "id14"], [1039, "id16"], [1039, "id18"], [1039, "id19"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1042, "changelog"], [1043, "changelog"], [1043, "id2"], [1044, "changelog"], [1044, "id2"], [1045, "changelog"], [1045, "id1"], [1045, "id3"], [1046, "changelog"], [1046, "id2"], [1047, "changelog"], [1047, "id1"], [1047, "id5"], [1047, "id10"], [1047, "id23"], [1048, "changelog"], [1048, "id1"], [1048, "id2"], [1048, "id7"], [1049, "changelog"], [1049, "id1"], [1049, "id4"], [1050, "changelog"], [1050, "id1"], [1050, "id4"], [1051, "changelog"], [1051, "id1"], [1051, "id4"], [1052, "changelog"], [1052, "id6"], [1053, "changelog"], [1053, "id1"], [1053, "id7"], [1054, "changelog"], [1054, "id1"], [1054, "id9"], [1055, "changelog"], [1055, "id1"], [1055, "id6"], [1056, "changelog"], [1056, "id2"], [1057, "changelog"], [1058, "changelog"]], "Changes impacting all modules": [[1054, "changes-impacting-all-modules"], [1054, "id8"], [1055, "changes-impacting-all-modules"], [1055, "id5"], [1056, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1056, "changes-impacting-many-modules"], [1057, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1047, "changes-to-estimator-checks"], [1048, "changes-to-estimator-checks"], [1049, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[393, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[327, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[191, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[996, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[420, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[45, "choose-parameters"]], "Choosing a resource": [[987, "choosing-a-resource"]], "Choosing min_resources and the number of candidates": [[987, "choosing-min-resources-and-the-number-of-candidates"]], "Choosing the parameters of the model": [[1023, null]], "Choosing the right estimator": [[1025, "choosing-the-right-estimator"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[399, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[280, "class-likelihood-ratios-to-measure-classification-performance"]], "Class likelihood ratios": [[998, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[431, "classnameprefixfeaturesoutmixin"]], "Classical linear regressors": [[24, "classical-linear-regressors"]], "Classification": [[64, "classification"], [67, "classification"], [183, "classification"], [188, "classification"], [994, "classification"], [1001, "id4"], [1002, "classification"], [1012, "classification"], [1013, "classification"], [1014, "classification"], [1030, "classification"]], "Classification and ROC analysis": [[287, "classification-and-roc-analysis"]], "Classification criteria": [[1014, "classification-criteria"]], "Classification metrics": [[26, "classification-metrics"], [998, "classification-metrics"]], "Classification of text documents using sparse features": [[359, "classification-of-text-documents-using-sparse-features"]], "Classification pipeline": [[103, "classification-pipeline"]], "Classification report": [[998, "classification-report"]], "Classifier comparison": [[66, "classifier-comparison"]], "ClassifierChain": [[841, "classifierchain"], [999, "classifierchain"]], "ClassifierMixin": [[432, "classifiermixin"]], "Classifying irises:": [[1030, null]], "Clear definition of the public API": [[1049, "clear-definition-of-the-public-api"]], "Cloning": [[387, "cloning"]], "Closing issues: a tough call": [[384, null]], "Cluster centers - MiniBatchKMeans": [[124, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[433, "clustermixin"]], "Clustering": [[70, "clustering"], [188, "clustering"], [415, "clustering"]], "Clustering evaluation summary": [[360, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[420, null]], "Clustering metrics": [[26, "module-sklearn.metrics.cluster"], [998, "clustering-metrics"]], "Clustering performance evaluation": [[415, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[360, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[360, "clustering-text-documents-using-k-means"]], "Clustering using affinity propagation": [[50, "clustering-using-affinity-propagation"]], "Clustering: grouping observations together": [[1031, "clustering-grouping-observations-together"]], "Code Contributors": [[1043, "code-contributors"], [1044, "code-contributors"], [1045, "code-contributors"], [1045, "id7"]], "Code Review Guidelines": [[385, "code-review-guidelines"]], "Code and Documentation Contributors": [[1046, "code-and-documentation-contributors"], [1046, "id10"], [1047, "code-and-documentation-contributors"], [1047, "id8"], [1047, "id21"], [1047, "id41"]], "Coding guidelines": [[387, "coding-guidelines"]], "Cohen\u2019s kappa": [[998, "cohen-s-kappa"]], "Color Quantization using K-Means": [[82, "color-quantization-using-k-means"]], "Column Transformer with Heterogeneous Data Sources": [[103, "column-transformer-with-heterogeneous-data-sources"]], "Column Transformer with Mixed Types": [[104, "column-transformer-with-mixed-types"]], "ColumnTransformer": [[470, "columntransformer"]], "ColumnTransformer for heterogeneous data": [[416, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[335, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[159, "combine-predictors-using-stacking"]], "Combining the display objects into a single plot": [[247, "combining-the-display-objects-into-a-single-plot"]], "Common Vectorizer usage": [[423, "common-vectorizer-usage"]], "Common cases: predefined values": [[998, "common-cases-predefined-values"]], "Common estimator checks": [[411, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[368, "common-pitfalls-and-recommended-practices"]], "Common pitfalls and subtleties": [[368, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[191, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[248, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[76, "compare-birch-and-minibatchkmeans"]], "Compare Stochastic learning strategies for MLPClassifier": [[314, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Compare cross decomposition methods": [[116, "compare-cross-decomposition-methods"]], "Compare different approaches to setting the regularization parameter": [[110, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[62, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[318, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Compare times of SVR and Kernel Ridge Regression": [[252, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[169, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[198, "comparing-linear-bayesian-regressors"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[306, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Comparing QuantileRegressor and LinearRegression": [[221, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[144, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Comparing Target Encoder with Other Encoders": [[324, "comparing-target-encoder-with-other-encoders"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[246, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Comparing different clustering algorithms on toy datasets": [[78, "comparing-different-clustering-algorithms-on-toy-datasets"]], "Comparing different hierarchical linkage methods on toy datasets": [[96, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "Comparing random forests and the multi-output meta estimator": [[158, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Comparing randomized search and grid search for hyperparameter estimation": [[285, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Comparing the results": [[196, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[205, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[205, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[277, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[277, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[226, "comparing-various-online-solvers"]], "Comparison between grid search and successive halving": [[288, "comparison-between-grid-search-and-successive-halving"]], "Comparison of Calibration of Classifiers": [[63, "comparison-of-calibration-of-classifiers"]], "Comparison of F-test and mutual information": [[168, "comparison-of-f-test-and-mutual-information"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[132, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Comparison of LDA and QDA": [[69, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[239, "comparison-of-manifold-learning-methods"]], "Comparison of kernel ridge and Gaussian process regression": [[175, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Comparison of kernel ridge regression and SVR": [[252, "comparison-of-kernel-ridge-regression-and-svr"]], "Comparison of results": [[112, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[98, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Comparison with special purpose text vectorizers": [[361, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[994, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1000, "complement-naive-bayes"]], "ComplementNB": [[847, "complementnb"]], "Complexity": [[1001, "complexity"], [1002, "complexity"], [1012, "complexity"], [1013, "complexity"], [1014, "complexity"]], "Complexity analysis": [[279, "complexity-analysis"]], "Components and loadings": [[1031, null]], "Composite estimators and parameter spaces": [[987, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[618, "compoundkernel"]], "Compression via vector quantization": [[87, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[52, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Computation methods": [[1005, "computation-methods"]], "Computation times": [[1019, "computation-times"]], "Computational Performance": [[372, "computational-performance"]], "Compute Affinity Propagation": [[72, "compute-affinity-propagation"]], "Compute DBSCAN": [[83, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [101, "compute-clustering"], [101, "id1"]], "Compute clustering with KMeans": [[98, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[97, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[98, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[224, "compute-paths"]], "Compute regularization path": [[212, "compute-regularization-path"]], "Compute score and computation times": [[144, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[110, "compute-the-likelihood-on-test-data"]], "Compute train and test errors": [[290, "compute-train-and-test-errors"]], "Computing Centrality scores": [[54, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[54, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[419, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[54, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[371, "computing-with-scikit-learn"]], "Concatenating multiple feature extraction methods": [[107, "concatenating-multiple-feature-extraction-methods"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[262, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Concluding remarks": [[42, "concluding-remarks"], [243, "concluding-remarks"]], "Conclusion": [[45, "conclusion"], [51, "conclusion"], [208, "conclusion"], [295, "conclusion"], [301, "conclusion"], [325, "conclusion"], [352, "conclusion"]], "Conclusions": [[203, "conclusions"]], "Configuration switches": [[373, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[372, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[270, "confusion-matrix"], [998, "confusion-matrix"]], "ConfusionMatrixDisplay": [[703, "confusionmatrixdisplay"]], "Connectivity graph of an image": [[423, "connectivity-graph-of-an-image"]], "Connectivity-constrained clustering": [[1031, "connectivity-constrained-clustering"]], "Consideration regarding model refitting and cross-validation": [[271, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[619, "constantkernel"]], "Construct the kernel-based regression models": [[252, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[253, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[253, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[415, "contingency-matrix"]], "Continuous Integration (CI)": [[385, "continuous-integration-ci"]], "Contributing": [[385, "contributing"], [397, "contributing"]], "Contributing code": [[385, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[400, "contributors"]], "Controlling randomness": [[368, "controlling-randomness"]], "Controlling the tree size": [[422, "controlling-the-tree-size"]], "Conventions": [[1023, "conventions"]], "Convergence of the AdaBoostClassifier": [[138, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[577, "convergencewarning"]], "Core Contributors": [[400, "core-contributors"]], "Cosine similarity": [[996, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[271, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[271, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[594, "countvectorizer"]], "Covariance estimation": [[109, "covariance-estimation"], [188, "covariance-estimation"], [417, "covariance-estimation"]], "Coverage error": [[998, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[390, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Create ConfusionMatrixDisplay": [[247, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[247, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[247, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[325, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[284, "create-multi-label-data-fit-and-predict"]], "Create the data": [[131, "create-the-data"]], "Create the pipeline": [[351, "create-the-pipeline"]], "Creating a dataset": [[352, "creating-a-dataset"]], "Creating a non-noisy data set": [[223, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[138, "creating-the-dataset"]], "Creating transformers": [[103, "creating-transformers"]], "Cross decomposition": [[115, "cross-decomposition"], [188, "cross-decomposition"], [418, "cross-decomposition"]], "Cross validation and model selection": [[419, "cross-validation-and-model-selection"]], "Cross validation iterators": [[419, "cross-validation-iterators"]], "Cross validation of time series data": [[419, "cross-validation-of-time-series-data"]], "Cross-validated estimators": [[1027, "cross-validated-estimators"]], "Cross-validation generators": [[1027, "cross-validation-generators"]], "Cross-validation iterators for grouped data": [[419, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[419, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[419, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[280, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[164, "cross-validation-on-diabetes-dataset-exercise"]], "Cross-validation: evaluating estimator performance": [[419, "cross-validation-evaluating-estimator-performance"]], "Curve Fitting with Bayesian Ridge Regression": [[199, "curve-fitting-with-bayesian-ridge-regression"]], "Custom Kernels": [[1013, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[335, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[275, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "Custom transformers": [[1008, "custom-transformers"]], "Customizing the vectorizer classes": [[423, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[386, "cython-best-practices-conventions-and-knowledge"]], "DBSCAN": [[415, "dbscan"], [450, "dbscan"]], "DO NOT report your data unless it is extremely necessary": [[390, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[62, "data"]], "Data Considerations": [[380, null]], "Data Loading and Feature Engineering": [[193, "data-loading-and-feature-engineering"]], "Data Preparation": [[149, "data-preparation"]], "Data Publica": [[1022, "id21"]], "Data and sample properties": [[399, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[42, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[69, "data-generation"], [83, "data-generation"], [91, "data-generation"], [155, "data-generation"], [172, "data-generation"], [181, "data-generation"], [267, "data-generation"], [337, "data-generation"], [355, "data-generation"]], "Data generation and model fitting": [[145, "data-generation-and-model-fitting"]], "Data leakage": [[368, "data-leakage"]], "Data leakage during pre-processing": [[368, "data-leakage-during-pre-processing"]], "Data loading": [[278, "data-loading"]], "Data preprocessing": [[152, "data-preprocessing"]], "DataConversionWarning": [[578, "dataconversionwarning"]], "DataDimensionalityWarning": [[579, "datadimensionalitywarning"]], "DataFrame Support": [[1056, "dataframe-support"]], "DataRobot": [[1022, "id18"]], "Dataiku": [[1022, "id25"]], "Dataset": [[61, "dataset"], [63, "dataset"], [208, "dataset"], [283, "dataset"]], "Dataset Versions": [[379, "dataset-versions"]], "Dataset and Gaussian process generation": [[184, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[284, "dataset-and-model"]], "Dataset based latent variables model": [[116, "dataset-based-latent-variables-model"]], "Dataset examples": [[118, "dataset-examples"], [188, "dataset-examples"]], "Dataset generation": [[182, "dataset-generation"], [221, "dataset-generation"]], "Dataset loading utilities": [[378, "dataset-loading-utilities"], [390, "dataset-loading-utilities"]], "Dataset preparation": [[124, "dataset-preparation"], [239, "dataset-preparation"]], "Dataset preprocessing and model training": [[256, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[377, "dataset-transformations"]], "Datasets": [[1029, "datasets"]], "Datasets in svmlight / libsvm format": [[379, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[415, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[40, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[403, "debian-ubuntu"]], "Debugging memory errors in Cython with valgrind": [[393, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[400, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[251, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[365, "decision-tree-regression"]], "Decision Tree Regression with AdaBoost": [[139, "decision-tree-regression-with-adaboost"]], "Decision Trees": [[188, "decision-trees"], [362, "decision-trees"], [1014, "decision-trees"]], "Decision boundary": [[301, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[342, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "Decision path": [[367, "decision-path"]], "DecisionBoundaryDisplay": [[637, "decisionboundarydisplay"]], "DecisionTreeClassifier": [[918, "decisiontreeclassifier"]], "DecisionTreeRegressor": [[919, "decisiontreeregressor"]], "Decoding text files": [[423, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[420, "decomposing-signals-in-components-matrix-factorization-problems"]], "Decomposition": [[123, "decomposition"], [124, "decomposition"], [188, "decomposition"]], "Decomposition: Dictionary learning": [[124, "decomposition-dictionary-learning"]], "Decompositions: from a signal to components and loadings": [[1031, "decompositions-from-a-signal-to-components-and-loadings"]], "Define a function to visualize cross-validation behavior": [[272, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[239, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[92, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[275, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[361, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[274, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[71, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[998, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[83, "demo-of-dbscan-clustering-algorithm"]], "Demo of HDBSCAN clustering algorithm": [[89, "demo-of-hdbscan-clustering-algorithm"]], "Demo of OPTICS clustering algorithm": [[99, "demo-of-optics-clustering-algorithm"]], "Demo of affinity propagation clustering algorithm": [[72, "demo-of-affinity-propagation-clustering-algorithm"]], "Demonstrating the different strategies of KBinsDiscretizer": [[321, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Demonstration of k-means assumptions": [[91, "demonstration-of-k-means-assumptions"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[281, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Density Estimation": [[421, "density-estimation"]], "Density Estimation for a Gaussian mixture": [[266, "density-estimation-for-a-gaussian-mixture"]], "Density Estimation: Histograms": [[421, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1013, "density-estimation-novelty-detection"]], "DensityMixin": [[434, "densitymixin"]], "Dependencies": [[383, "dependencies"]], "Deprecation": [[385, "deprecation"]], "Deprecation / Default Value Change": [[253, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1049, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[190, "description-of-the-simulated-data"]], "Design the proper kernel": [[180, "design-the-proper-kernel"]], "DetCurveDisplay": [[704, "detcurvedisplay"]], "Detection error tradeoff (DET)": [[998, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[274, "detection-error-tradeoff-det-curve"]], "Developer API for HTML representation": [[387, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[387, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[387, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[393, "developers-tips-and-tricks"]], "Developer\u2019s Guide": [[388, "developer-s-guide"]], "Developing Estimators": [[135, "developing-estimators"], [188, "developing-estimators"]], "Developing scikit-learn estimators": [[387, "developing-scikit-learn-estimators"]], "Developing with the Plotting API": [[392, "developing-with-the-plotting-api"]], "Diabetes dataset": [[382, "diabetes-dataset"], [1030, null]], "DictVectorizer": [[361, "dictvectorizer"], [587, "dictvectorizer"]], "Dictionary Learning": [[420, "dictionary-learning"]], "Dictionary learning": [[124, "dictionary-learning"]], "Dictionary learning - positive code": [[124, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[124, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[124, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[537, "dictionarylearning"]], "Differences between solvers": [[994, "differences-between-solvers"]], "Different algorithms for the same problem": [[1030, null]], "Different label assignment strategies": [[415, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[415, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[387, "different-objects"]], "Different scenario and useful concepts": [[994, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[406, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[165, "digits-classification-exercise"]], "Digits dataset": [[67, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[307, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Dimensionality reduction": [[1001, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[992, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[40, "module-sklearn.utils.discovery"]], "Discretization": [[1008, "discretization"]], "Dispatching": [[395, "dispatching"]], "Display Objects": [[1036, "display-objects"]], "Display code coverage in pull requests": [[393, "display-code-coverage-in-pull-requests"]], "Display results": [[224, "display-results"]], "Display the distorted image": [[127, "display-the-distorted-image"]], "Displaying Pipelines": [[258, "displaying-pipelines"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[258, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[258, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[258, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[258, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[258, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[248, "displaying-estimators-and-complex-pipelines"]], "Distance metrics": [[26, "distance-metrics"]], "DistanceMetric": [[705, "distancemetric"]], "Do you plan to implement transform for target y in a pipeline?": [[397, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[397, "do-you-support-pypy"]], "Documentation": [[385, "documentation"], [1039, "documentation"]], "Documentation Resources": [[1021, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1042, "documentation-improvements"], [1043, "documentation-improvements"]], "Domain specific packages": [[1017, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[425, "dot-product-kernel"]], "Dot-product kernel": [[184, "dot-product-kernel"]], "DotProduct": [[620, "dotproduct"]], "Download data, if not already on disk": [[54, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[187, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[159, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[379, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null]], "Dummy estimators": [[998, "dummy-estimators"]], "DummyClassifier": [[557, "dummyclassifier"]], "DummyRegressor": [[558, "dummyregressor"]], "D\u00b2 score": [[998, "d2-score"]], "D\u00b2 score for classification": [[998, "d2-score-for-classification"]], "Earlier versions": [[1039, "earlier-versions"]], "Early stopping in Gradient Boosting": [[149, "early-stopping-in-gradient-boosting"]], "Early stopping of Stochastic Gradient Descent": [[227, "early-stopping-of-stochastic-gradient-descent"]], "Easy tag": [[385, null]], "Effect of number of trees and early stopping": [[154, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[323, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[323, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[323, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[108, "effect-of-transforming-the-targets-in-regression-model"]], "Effect of varying threshold for self-training": [[340, "effect-of-varying-threshold-for-self-training"]], "EfficiencyWarning": [[580, "efficiencywarning"]], "Efficient Linear Algebra & Array Operations": [[394, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[394, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[394, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[124, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[994, "elastic-net"]], "ElasticNet": [[203, "elasticnet"], [652, "elasticnet"]], "ElasticNetCV": [[653, "elasticnetcv"]], "EllipticEnvelope": [[475, "ellipticenvelope"]], "Embedding in 2D space": [[50, "embedding-in-2d-space"]], "Embedding techniques comparison": [[240, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Empirical covariance": [[417, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[95, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Empirical validation": [[250, "empirical-validation"]], "EmpiricalCovariance": [[476, "empiricalcovariance"]], "Encoding categorical features": [[1008, "encoding-categorical-features"]], "Encoding strategy": [[87, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1050, "enforcing-keyword-only-arguments"], [1052, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[400, "enhancement-proposals-sleps"]], "Enhancements": [[1042, "enhancements"], [1043, "enhancements"], [1044, "enhancements"], [1045, "enhancements"], [1045, "id4"], [1046, "enhancements"], [1046, "id3"]], "Enriched estimator displays": [[334, "enriched-estimator-displays"]], "Ensemble methods": [[137, "ensemble-methods"], [188, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[422, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Environment variables": [[373, "environment-variables"]], "Error Calculation": [[149, "error-calculation"]], "Error caused by file path length limit on Windows": [[403, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[138, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[196, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[98, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[196, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[196, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[114, "estimate-the-covariance"]], "Estimate the score": [[187, "estimate-the-score"]], "Estimated Attributes": [[387, "estimated-attributes"]], "Estimation algorithms": [[992, "estimation-algorithms"]], "Estimator Tags": [[387, "estimator-tags"]], "Estimator types": [[387, "estimator-types"]], "Estimators": [[368, "estimators"], [368, "id2"], [387, "estimators"], [411, "estimators"]], "Estimators objects": [[1029, "estimators-objects"]], "Estimators that handle NaN values": [[988, "estimators-that-handle-nan-values"]], "Evaluation": [[113, "evaluation"], [316, "evaluation"]], "Evaluation metrics": [[271, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[256, "evaluation-of-outlier-detection-estimators"]], "Evaluation of the calibration of predictions": [[219, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the performance on the test set": [[1032, "evaluation-of-the-performance-on-the-test-set"]], "Evaluation of the ranking power": [[219, "evaluation-of-the-ranking-power"]], "Evernote": [[1022, "id6"]], "Exact Kernel PCA": [[420, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[420, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[411, "example-usage"]], "Example with noise-free target": [[182, "example-with-noise-free-target"]], "Example with noisy targets": [[182, "example-with-noisy-targets"]], "Examples": [[188, "examples"], [374, "examples"], [414, "examples"], [1039, "examples"]], "Examples based on real world datasets": [[41, "examples-based-on-real-world-datasets"], [188, "examples-based-on-real-world-datasets"]], "Exercise": [[1027, null], [1027, null], [1030, null], [1030, null]], "Exercise 1: Language identification": [[1032, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1032, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1032, "exercise-3-cli-text-classification-utility"]], "Exercises": [[1032, "exercises"]], "Exhausting the available resources": [[987, "exhausting-the-available-resources"]], "Exhaustive Grid Search": [[987, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[184, "exp-sine-squared-kernel"], [425, "exp-sine-squared-kernel"]], "ExpSineSquared": [[621, "expsinesquared"]], "Experimental / Under Development": [[1055, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[332, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental features": [[389, "experimental-features"]], "Explained variance score": [[998, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[251, "explicit-feature-map-approximation-for-rbf-kernels"]], "Exponentiation": [[622, "exponentiation"]], "Exporting": [[39, "exporting"]], "External Resources, Videos and Talks": [[1016, "external-resources-videos-and-talks"]], "External Tutorials": [[1016, "external-tutorials"]], "External dependencies": [[1039, "external-dependencies"]], "ExtraTreeClassifier": [[920, "extratreeclassifier"]], "ExtraTreeRegressor": [[921, "extratreeregressor"]], "ExtraTreesClassifier": [[563, "extratreesclassifier"]], "ExtraTreesRegressor": [[564, "extratreesregressor"]], "Extract noisy patches and reconstruct them using the dictionary": [[127, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[127, "extract-reference-patches"]], "Extracting features": [[374, "extracting-features"]], "Extracting features from text files": [[1032, "extracting-features-from-text-files"]], "Extremely Randomized Trees": [[422, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[255, "face-completion-with-a-multi-output-estimators"]], "Face recognition with eigenfaces": [[1028, "face-recognition-with-eigenfaces"]], "Faces dataset decompositions": [[124, "faces-dataset-decompositions"]], "Faces recognition example using eigenfaces and SVMs": [[44, "faces-recognition-example-using-eigenfaces-and-svms"]], "Factor Analysis": [[420, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[134, "factor-analysis-with-rotation-to-visualize-patterns"]], "Factor Analysis components - FA": [[124, "factor-analysis-components-fa"]], "FactorAnalysis": [[538, "factoranalysis"]], "Failure of Machine Learning to infer causal effects": [[190, "failure-of-machine-learning-to-infer-causal-effects"]], "FastICA": [[539, "fastica"]], "FastICA on 2D point clouds": [[126, "fastica-on-2d-point-clouds"]], "Faster parser in fetch_openml": [[332, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[372, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[360, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[330, "feature-names-support"]], "Feature Selection": [[167, "feature-selection"], [188, "feature-selection"]], "Feature agglomeration": [[85, "feature-agglomeration"], [1015, "feature-agglomeration"], [1031, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[88, "feature-agglomeration-vs-univariate-selection"]], "Feature binarization": [[1008, "feature-binarization"]], "Feature discretization": [[320, "feature-discretization"]], "Feature extraction": [[423, "feature-extraction"]], "Feature hashing": [[423, "feature-hashing"]], "Feature importance based on feature permutation": [[145, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[145, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[146, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[422, "feature-importance-evaluation"]], "Feature importance from coefficients": [[173, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[145, "feature-importances-with-a-forest-of-trees"]], "Feature normalization": [[196, "feature-normalization"]], "Feature scaling": [[1015, null]], "Feature selection": [[424, "feature-selection"]], "Feature selection as part of a pipeline": [[424, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[424, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[424, null]], "Feature transformations with ensembles of trees": [[143, "feature-transformations-with-ensembles-of-trees"]], "FeatureAgglomeration": [[415, null], [451, "featureagglomeration"]], "FeatureHasher": [[361, "featurehasher"], [588, "featurehasher"]], "FeatureHasher and DictVectorizer Comparison": [[361, "featurehasher-and-dictvectorizer-comparison"]], "FeatureUnion": [[869, "featureunion"]], "FeatureUnion: composite feature spaces": [[416, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[154, "features-in-histogram-gradient-boosting-trees"]], "Fedora": [[403, "fedora"]], "Final conclusion": [[175, "final-conclusion"]], "Final remarks": [[91, "final-remarks"]], "Finding the Nearest Neighbors": [[1001, "finding-the-nearest-neighbors"]], "First example": [[47, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[71, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[125, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[199, "fit-by-cubic-polynomial"]], "Fit models": [[213, "fit-models"], [297, "fit-models"]], "Fit models and plot results": [[91, "fit-models-and-plot-results"]], "Fit regression model": [[152, "fit-regression-model"], [310, "fit-regression-model"], [354, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[305, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[131, "fit-the-models"]], "Fit the regressors": [[198, "fit-the-regressors"], [198, "id2"]], "FitFailedWarning": [[581, "fitfailedwarning"]], "Fitting": [[387, "fitting"]], "Fitting SpectralBiclustering": [[57, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[221, "fitting-a-quantileregressor"]], "Fitting additional trees": [[422, "fitting-additional-trees"]], "Fitting additional weak-learners": [[422, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[200, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "Fitting an elliptic envelope": [[1004, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[62, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[398, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[151, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1052, "fixed-models"]], "FixedThresholdClassifier": [[805, "fixedthresholdclassifier"]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[335, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1039, "fixes"]], "Flexibility of IterativeImputer": [[988, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[393, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[180, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Forest covertypes": [[380, "forest-covertypes"]], "Forest covertypes dataset": [[256, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[415, "fowlkes-mallows-scores"]], "FreeBSD": [[383, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[237, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[397, "frequently-asked-questions"]], "From binary to multiclass and multilabel": [[998, "from-binary-to-multiclass-and-multilabel"]], "From images": [[16, "module-sklearn.feature_extraction.image"]], "From occurrences to frequencies": [[1032, "from-occurrences-to-frequencies"]], "From text": [[16, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[384, null]], "FunctionTransformer": [[874, "functiontransformer"]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[265, "gmm-initialization-methods"]], "GMM covariances": [[264, "gmm-covariances"]], "GPC examples": [[425, "gpc-examples"]], "Gallery examples": [[429, "gallery-examples"], [432, "gallery-examples"], [435, "gallery-examples"], [438, "gallery-examples"], [439, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [459, "gallery-examples"], [460, "gallery-examples"], [461, "gallery-examples"], [464, "gallery-examples"], [466, "gallery-examples"], [468, "gallery-examples"], [470, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [478, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [485, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [494, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [504, "gallery-examples"], [505, "gallery-examples"], [506, "gallery-examples"], [507, "gallery-examples"], [508, "gallery-examples"], [510, "gallery-examples"], [512, "gallery-examples"], [516, "gallery-examples"], [517, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [533, "gallery-examples"], [536, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [550, "gallery-examples"], [555, "gallery-examples"], [556, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [575, "gallery-examples"], [576, "gallery-examples"], [587, "gallery-examples"], [588, "gallery-examples"], [590, "gallery-examples"], [593, "gallery-examples"], [594, "gallery-examples"], [595, "gallery-examples"], [596, "gallery-examples"], [597, "gallery-examples"], [599, "gallery-examples"], [600, "gallery-examples"], [603, "gallery-examples"], [605, "gallery-examples"], [606, "gallery-examples"], [608, "gallery-examples"], [610, "gallery-examples"], [611, "gallery-examples"], [612, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [616, "gallery-examples"], [617, "gallery-examples"], [619, "gallery-examples"], [620, "gallery-examples"], [621, "gallery-examples"], [623, "gallery-examples"], [624, "gallery-examples"], [625, "gallery-examples"], [628, "gallery-examples"], [629, "gallery-examples"], [631, "gallery-examples"], [633, "gallery-examples"], [634, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [645, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [655, "gallery-examples"], [658, "gallery-examples"], [659, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [663, "gallery-examples"], [664, "gallery-examples"], [665, "gallery-examples"], [668, "gallery-examples"], [670, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [687, "gallery-examples"], [688, "gallery-examples"], [690, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [699, "gallery-examples"], [703, "gallery-examples"], [704, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [712, "gallery-examples"], [713, "gallery-examples"], [715, "gallery-examples"], [718, "gallery-examples"], [719, "gallery-examples"], [723, "gallery-examples"], [724, "gallery-examples"], [725, "gallery-examples"], [733, "gallery-examples"], [735, "gallery-examples"], [738, "gallery-examples"], [740, "gallery-examples"], [741, "gallery-examples"], [743, "gallery-examples"], [744, "gallery-examples"], [747, "gallery-examples"], [748, "gallery-examples"], [751, "gallery-examples"], [752, "gallery-examples"], [754, "gallery-examples"], [755, "gallery-examples"], [756, "gallery-examples"], [758, "gallery-examples"], [759, "gallery-examples"], [761, "gallery-examples"], [763, "gallery-examples"], [767, "gallery-examples"], [784, "gallery-examples"], [785, "gallery-examples"], [788, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [795, "gallery-examples"], [796, "gallery-examples"], [798, "gallery-examples"], [799, "gallery-examples"], [801, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [811, "gallery-examples"], [812, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [840, "gallery-examples"], [841, "gallery-examples"], [843, "gallery-examples"], [845, "gallery-examples"], [847, "gallery-examples"], [848, "gallery-examples"], [849, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [858, "gallery-examples"], [859, "gallery-examples"], [863, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [870, "gallery-examples"], [871, "gallery-examples"], [874, "gallery-examples"], [875, "gallery-examples"], [877, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [890, "gallery-examples"], [891, "gallery-examples"], [894, "gallery-examples"], [896, "gallery-examples"], [899, "gallery-examples"], [903, "gallery-examples"], [904, "gallery-examples"], [906, "gallery-examples"], [907, "gallery-examples"], [908, "gallery-examples"], [910, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [918, "gallery-examples"], [919, "gallery-examples"], [924, "gallery-examples"], [925, "gallery-examples"], [933, "gallery-examples"], [942, "gallery-examples"], [944, "gallery-examples"], [951, "gallery-examples"], [955, "gallery-examples"], [956, "gallery-examples"], [957, "gallery-examples"], [958, "gallery-examples"], [959, "gallery-examples"], [972, "gallery-examples"], [982, "gallery-examples"]], "Gamma loss for gradient boosting": [[333, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[654, "gammaregressor"]], "Gaussian Mixture": [[997, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[263, "gaussian-mixture-model-ellipsoids"]], "Gaussian Mixture Model Selection": [[267, "gaussian-mixture-model-selection"]], "Gaussian Mixture Model Sine Curve": [[268, "gaussian-mixture-model-sine-curve"]], "Gaussian Mixture Models": [[188, "gaussian-mixture-models"], [261, "gaussian-mixture-models"]], "Gaussian Naive Bayes": [[61, "gaussian-naive-bayes"], [1000, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[60, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[425, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[425, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[174, "gaussian-process-for-machine-learning"], [188, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[425, "gaussian-processes"]], "Gaussian Processes regression: basic introductory example": [[182, "gaussian-processes-regression-basic-introductory-example"]], "Gaussian mixture models": [[997, "gaussian-mixture-models"]], "Gaussian process classification (GPC) on iris dataset": [[177, "gaussian-process-classification-gpc-on-iris-dataset"], [425, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[175, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[183, "gaussian-processes-on-discrete-data-structures"]], "Gaussian random projection": [[1010, "gaussian-random-projection"]], "GaussianMixture": [[804, "gaussianmixture"]], "GaussianNB": [[848, "gaussiannb"]], "GaussianProcessClassifier": [[616, "gaussianprocessclassifier"]], "GaussianProcessRegressor": [[617, "gaussianprocessregressor"]], "GaussianRandomProjection": [[902, "gaussianrandomprojection"]], "General Concepts": [[399, "general-concepts"]], "General recommendations": [[368, "general-recommendations"]], "Generalized Linear Models": [[188, "generalized-linear-models"], [197, "generalized-linear-models"], [994, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[328, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[24, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [101, "generate-data"], [112, "generate-data"], [213, "generate-data"], [316, "generate-data"]], "Generate data with outliers": [[305, "generate-data-with-outliers"]], "Generate distorted image": [[127, "generate-distorted-image"]], "Generate sample data": [[57, "generate-sample-data"], [72, "generate-sample-data"], [89, "generate-sample-data"], [97, "generate-sample-data"], [110, "generate-sample-data"], [125, "generate-sample-data"], [126, "generate-sample-data"], [169, "generate-sample-data"], [252, "generate-sample-data"], [290, "generate-sample-data"], [310, "generate-sample-data"], [354, "generate-sample-data"]], "Generate sinusoidal data with noise": [[199, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[274, "generate-synthetic-data"]], "Generate synthetic dataset": [[60, "generate-synthetic-dataset"], [198, "generate-synthetic-dataset"], [198, "id1"], [203, "generate-synthetic-dataset"]], "Generate the data": [[98, "generate-the-data"], [100, "generate-the-data"], [114, "generate-the-data"]], "Generated datasets": [[381, "generated-datasets"]], "Generated documentation on GitHub Actions": [[385, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[51, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[175, "generating-a-dataset"]], "Generating polynomial features": [[1008, "generating-polynomial-features"]], "Generators for classification and clustering": [[381, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[381, "generators-for-decomposition"]], "Generators for manifold learning": [[381, "generators-for-manifold-learning"]], "Generators for regression": [[381, "generators-for-regression"]], "Generic dictionary learning": [[420, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[598, "genericunivariateselect"]], "Getting Started": [[398, "getting-started"]], "Getting reproducible results across multiple executions": [[368, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1021, "gitter"]], "Glossary of Common Terms and API Elements": [[399, "glossary-of-common-terms-and-api-elements"]], "Good practices": [[390, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[400, "governance-model-changes"]], "Gradient Boosting": [[42, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[150, "gradient-boosting-out-of-bag-estimates"]], "Gradient Boosting Regression Trees for Poisson regression": [[219, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[152, "gradient-boosting-regression"]], "Gradient Boosting regularization": [[153, "gradient-boosting-regularization"]], "Gradient boosting": [[192, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[148, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[148, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[148, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[148, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[422, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[565, "gradientboostingclassifier"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[422, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[422, null]], "GradientBoostingRegressor": [[566, "gradientboostingregressor"]], "Graph Routines": [[394, "graph-routines"]], "Graphical model and parametrization": [[1003, "graphical-model-and-parametrization"]], "GraphicalLasso": [[477, "graphicallasso"]], "GraphicalLassoCV": [[478, "graphicallassocv"]], "Grid-search": [[1027, "grid-search"]], "Grid-search and cross-validated estimators": [[1027, "grid-search-and-cross-validated-estimators"]], "GridSearchCV": [[806, "gridsearchcv"]], "Group Shuffle Split": [[419, "group-shuffle-split"]], "Group k-fold": [[419, "group-k-fold"]], "GroupKFold": [[807, "groupkfold"]], "GroupShuffleSplit": [[808, "groupshufflesplit"]], "Grouping infrequent categories in OneHotEncoder": [[331, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[333, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[415, "hdbscan"], [452, "hdbscan"]], "HDBSCAN: hierarchical density-based clustering": [[333, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[809, "halvinggridsearchcv"]], "HalvingRandomSearchCV": [[810, "halvingrandomsearchcv"]], "Hamming loss": [[998, "hamming-loss"]], "Handling Multicollinear Features": [[194, "handling-multicollinear-features"]], "Hash Functions": [[394, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[157, "hashing-feature-transformation-using-totally-random-trees"]], "HashingVectorizer": [[360, "hashingvectorizer"], [595, "hashingvectorizer"]], "Helper Functions": [[394, "helper-functions"]], "Helper function": [[184, "helper-function"]], "Helper function to plot embedding": [[240, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[995, "hessian-eigenmapping"]], "Hierarchical Clustering": [[415, "id11"]], "Hierarchical agglomerative clustering: Ward": [[1031, "hierarchical-agglomerative-clustering-ward"]], "Hierarchical clustering": [[415, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[101, "hierarchical-clustering-structured-vs-unstructured-ward"]], "Higher-level parallelism with joblib": [[373, "higher-level-parallelism-with-joblib"]], "Highlights": [[1039, "highlights"], [1042, "highlights"], [1043, "highlights"], [1046, "highlights"], [1047, "highlights"]], "Hinge loss": [[998, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[334, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[567, "histgradientboostingclassifier"]], "HistGradientBoostingRegressor": [[568, "histgradientboostingregressor"]], "Histogram-Based Gradient Boosting": [[422, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[330, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[415, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[397, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[397, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[397, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[397, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[397, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[397, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[397, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[397, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[368, "how-to-avoid-data-leakage"]], "How to contribute": [[385, "how-to-contribute"]], "How to make a good bug report": [[385, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[391, "how-to-optimize-for-speed"]], "HowAboutWe": [[1022, "id16"]], "Huber Regression": [[994, "huber-regression"]], "HuberRegressor": [[655, "huberregressor"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[201, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Hugging Face": [[1022, "id5"]], "Hyper-parameter optimizers": [[28, "hyper-parameter-optimizers"]], "Hyperparameter": [[623, "hyperparameter"]], "Hyperparameter Robustness": [[89, "hyperparameter-robustness"]], "ICE vs. PDP": [[192, "ice-vs-pdp"]], "INFONEA": [[1022, "id24"]], "Illustration of GPC on the XOR dataset": [[425, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[179, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Illustration of Pipeline and GridSearchCV": [[105, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[184, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Image denoising using dictionary learning": [[127, "image-denoising-using-dictionary-learning"]], "Image denoising using kernel PCA": [[43, "image-denoising-using-kernel-pca"]], "Image feature extraction": [[423, "image-feature-extraction"]], "Implementation": [[1001, "implementation"]], "Implementation decisions": [[397, "implementation-decisions"]], "Implementation details": [[1012, "implementation-details"], [1013, "implementation-details"]], "Implementing your own scoring object": [[998, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[323, "importance-of-feature-scaling"]], "Important notes regarding the internal cross-validation": [[414, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[332, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[334, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[329, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[328, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[988, "imputation-of-missing-values"], [1008, "imputation-of-missing-values"]], "Impute missing values with mean": [[187, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[187, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[187, "imputing-missing-values-before-building-an-estimator"]], "Imputing missing values with variants of IterativeImputer": [[186, "imputing-missing-values-with-variants-of-iterativeimputer"]], "In binary classification settings": [[284, "in-binary-classification-settings"]], "In multi-label settings": [[284, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[190, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[190, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[368, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[582, "inconsistentversionwarning"]], "Incremental PCA": [[128, "incremental-pca"], [420, "incremental-pca"]], "Incremental learning": [[374, "incremental-learning"]], "IncrementalPCA": [[540, "incrementalpca"]], "Independent Component Analysis: ICA": [[1031, "independent-component-analysis-ica"]], "Independent component analysis (ICA)": [[420, "independent-component-analysis-ica"]], "Independent components - FastICA": [[124, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[329, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1005, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[90, "inductive-clustering"]], "Influence of the Input Data Representation": [[372, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[372, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[372, "influence-of-the-number-of-features"]], "Information Criterion": [[987, "information-criterion"]], "Information-criteria based model selection": [[994, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1008, "infrequent-categories"]], "Input and parameter validation": [[40, "module-sklearn.utils.validation"]], "Input data": [[415, null]], "Input validation": [[387, "input-validation"]], "Inria": [[1022, "id3"]], "Inspection": [[188, "inspection"], [189, "inspection"], [402, "inspection"]], "Installing nightly builds": [[383, "installing-nightly-builds"]], "Installing scikit-learn": [[403, "installing-scikit-learn"]], "Installing the development version of scikit-learn": [[383, "installing-the-development-version-of-scikit-learn"]], "Installing the latest release": [[403, "installing-the-latest-release"]], "Instantiation": [[387, "instantiation"]], "Intel Extension for Scikit-learn": [[403, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[422, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[332, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1017, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[180, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[422, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[191, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[191, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[223, "interpreting-the-plots"]], "Introducing the set_output API": [[260, "introducing-the-set-output-api"]], "Introduction": [[995, "introduction"]], "Invariance with respect to prevalence": [[280, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1010, "inverse-transform"]], "Iris plants dataset": [[382, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[178, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Isolation Forest": [[1004, "isolation-forest"]], "IsolationForest": [[569, "isolationforest"]], "IsolationForest example": [[155, "isolationforest-example"]], "Isomap": [[694, "isomap"], [995, "isomap"]], "Isomap Embedding": [[239, "isomap-embedding"]], "Isotonic": [[413, "isotonic"]], "Isotonic Regression": [[249, "isotonic-regression"]], "Isotonic regression": [[989, "isotonic-regression"]], "IsotonicRegression": [[641, "isotonicregression"]], "Issue Tracker Tags": [[385, "issue-tracker-tags"]], "Issues for New Contributors": [[385, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[187, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[633, "iterativeimputer"]], "J.P.Morgan": [[1022, "id1"]], "Jaccard similarity coefficient score": [[998, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[213, "joint-feature-selection-with-multi-task-lasso"]], "K-D Tree": [[1001, "k-d-tree"]], "K-bins discretization": [[1008, "k-bins-discretization"]], "K-fold": [[419, "k-fold"]], "K-means": [[415, "k-means"]], "K-means Clustering": [[79, "k-means-clustering"]], "K-means clustering": [[1031, "k-means-clustering"]], "K-means clustering on text features": [[360, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[301, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[875, "kbinsdiscretizer"]], "KDDCup99 - SA dataset": [[256, "kddcup99-sa-dataset"]], "KDTree": [[851, "kdtree"]], "KDTree and BallTree Classes": [[1001, "kdtree-and-balltree-classes"]], "KFold": [[811, "kfold"]], "KMeans": [[453, "kmeans"]], "KNN Based Imputation": [[327, "knn-based-imputation"]], "KNNImputer": [[634, "knnimputer"]], "KNeighborsClassifier": [[852, "kneighborsclassifier"]], "KNeighborsRegressor": [[853, "kneighborsregressor"]], "KNeighborsTransformer": [[854, "kneighborstransformer"]], "Kddcup 99 dataset": [[380, "kddcup-99-dataset"]], "Keeping the number of features constant": [[988, "keeping-the-number-of-features-constant"]], "Kernel": [[624, "kernel"]], "Kernel Approximation": [[188, "kernel-approximation"], [195, "kernel-approximation"], [990, "kernel-approximation"]], "Kernel Density Estimate of Species Distributions": [[311, "kernel-density-estimate-of-species-distributions"]], "Kernel Density Estimation": [[302, "kernel-density-estimation"], [421, "kernel-density-estimation"]], "Kernel PCA": [[129, "kernel-pca"]], "Kernel Principal Component Analysis (kPCA)": [[420, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[184, "kernel-cookbook"]], "Kernel functions": [[1013, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[175, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[425, "kernel-operators"]], "Kernel ridge": [[175, "kernel-ridge"]], "Kernel ridge regression": [[991, "kernel-ridge-regression"]], "KernelCenterer": [[876, "kernelcenterer"]], "KernelDensity": [[855, "kerneldensity"]], "KernelPCA": [[541, "kernelpca"]], "KernelRidge": [[649, "kernelridge"]], "Kernels": [[18, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[425, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[330, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1047, "known-major-bugs"], [1048, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[210, "l1-penalty-and-sparsity-in-logistic-regression"]], "L1-based feature selection": [[424, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[203, "l1-based-models-for-sparse-signals"]], "L1-penalty case": [[355, "l1-penalty-case"]], "L2-penalty case": [[355, "l2-penalty-case"]], "LARS Lasso": [[994, "lars-lasso"]], "LDA": [[992, "lda"]], "Label Propagation": [[1011, "label-propagation"]], "Label Propagation digits active learning": [[338, "label-propagation-digits-active-learning"]], "Label Propagation digits: Demonstrating performance": [[337, "label-propagation-digits-demonstrating-performance"]], "Label Propagation learning a complex structure": [[339, "label-propagation-learning-a-complex-structure"]], "Label binarization": [[1009, "label-binarization"]], "Label encoding": [[1009, "label-encoding"]], "Label ranking average precision": [[998, "label-ranking-average-precision"]], "LabelBinarizer": [[877, "labelbinarizer"], [1009, "labelbinarizer"]], "LabelEncoder": [[878, "labelencoder"]], "LabelPropagation": [[905, "labelpropagation"]], "LabelSpreading": [[906, "labelspreading"]], "Lagged features for time series forecasting": [[51, "lagged-features-for-time-series-forecasting"]], "Laplacian kernel": [[996, "laplacian-kernel"]], "Lars": [[656, "lars"]], "LarsCV": [[657, "larscv"]], "Lasso": [[203, "lasso"], [658, "lasso"], [994, "lasso"]], "Lasso and Elastic Net": [[204, "lasso-and-elastic-net"]], "Lasso model selection via information criteria": [[207, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[208, "lasso-model-selection-aic-bic-cross-validation"]], "Lasso on dense and sparse data": [[205, "lasso-on-dense-and-sparse-data"]], "Lasso path using LARS": [[206, "lasso-path-using-lars"]], "Lasso via coordinate descent": [[208, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[208, "lasso-via-least-angle-regression"]], "LassoCV": [[659, "lassocv"]], "LassoLars": [[660, "lassolars"]], "LassoLarsCV": [[661, "lassolarscv"]], "LassoLarsIC": [[662, "lassolarsic"]], "Latent Dirichlet Allocation (LDA)": [[420, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[542, "latentdirichletallocation"]], "Learn the PCA basis": [[43, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[127, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[84, "learn-the-dictionary-of-images"]], "Learning Curve": [[279, "learning-curve"]], "Learning a graph structure": [[50, "learning-a-graph-structure"]], "Learning an embedding": [[308, "learning-an-embedding"]], "Learning and predicting": [[1023, "learning-and-predicting"]], "Learning curve": [[993, "learning-curve"]], "Learning git:": [[385, null]], "LearningCurveDisplay": [[812, "learningcurvedisplay"]], "Least Angle Regression": [[994, "least-angle-regression"]], "Leave One Group Out": [[419, "leave-one-group-out"]], "Leave One Out (LOO)": [[419, "leave-one-out-loo"]], "Leave P Groups Out": [[419, "leave-p-groups-out"]], "Leave P Out (LPO)": [[419, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[813, "leaveonegroupout"]], "LeaveOneOut": [[814, "leaveoneout"]], "LeavePGroupsOut": [[815, "leavepgroupsout"]], "LeavePOut": [[816, "leavepout"]], "Ledoit-Wolf shrinkage": [[417, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[111, "ledoit-wolf-vs-oas-estimation"]], "LedoitWolf": [[479, "ledoitwolf"]], "Lessons learned": [[190, "lessons-learned"], [191, "lessons-learned"]], "Limitations of a simple linear model": [[175, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[423, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[372, "limiting-working-memory"]], "Limiting the number of splits": [[148, "limiting-the-number-of-splits"]], "Linear Models": [[994, "linear-models"]], "Linear Regression Example": [[215, "linear-regression-example"]], "Linear SVMs": [[1030, "linear-svms"]], "Linear algebra libraries": [[372, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[992, "linear-and-quadratic-discriminant-analysis"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[69, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Linear classifiers": [[24, "linear-classifiers"]], "Linear kernel": [[352, "linear-kernel"], [996, "linear-kernel"], [1030, "linear-kernel"]], "Linear model: from regression to sparsity": [[1030, "linear-model-from-regression-to-sparsity"]], "Linear models with regularization": [[191, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[191, "linear-models-with-sparse-coefficients"]], "Linear regression": [[1030, "linear-regression"]], "Linear support vector classifier": [[61, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[555, "lineardiscriminantanalysis"]], "LinearRegression": [[663, "linearregression"]], "LinearSVC": [[910, "linearsvc"]], "LinearSVR": [[911, "linearsvr"]], "Link to R\u00b2 score, the coefficient of determination": [[998, null]], "Links": [[372, "links"]], "Linnerrud dataset": [[382, "linnerrud-dataset"]], "Linux": [[383, "linux"]], "Linux compilers from conda-forge": [[383, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[383, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[148, "load-ames-housing-dataset"]], "Load Data": [[361, "load-data"]], "Load Data and Train a SVC": [[259, "load-data-and-train-a-svc"]], "Load Data and train model": [[247, "load-data-and-train-model"]], "Load and prepare data": [[286, "load-and-prepare-data"], [287, "load-and-prepare-data"], [323, "load-and-prepare-data"]], "Load and prepare data set": [[348, "load-and-prepare-data-set"]], "Load data": [[212, "load-data"]], "Load dataset": [[144, "load-dataset"]], "Load dataset and apply GridSearchCV": [[164, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[240, "load-digits-dataset"]], "Load some data to play with": [[351, "load-some-data-to-play-with"]], "Load the data": [[45, "load-the-data"], [84, "load-the-data"], [152, "load-the-data"], [301, "load-the-data"]], "Load the dataset": [[92, "load-the-dataset"]], "Load the dataset via OpenML": [[43, "load-the-dataset-via-openml"]], "Loaders": [[9, "loaders"]], "Loading Data from OpenML": [[324, "loading-data-from-openml"]], "Loading a dataset": [[297, "loading-a-dataset"]], "Loading an example dataset": [[1023, "loading-an-example-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[359, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[237, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[423, "loading-features-from-dicts"]], "Loading from external datasets": [[379, "loading-from-external-datasets"], [1023, null]], "Loading other datasets": [[379, "loading-other-datasets"]], "Loading text data": [[360, "loading-text-data"]], "Loading the 20 newsgroups dataset": [[1032, "loading-the-20-newsgroups-dataset"]], "Loading the data": [[173, "loading-the-data"]], "Loading the data and model fitting": [[146, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[120, "loading-the-iris-dataset"]], "Loading the redirect files": [[54, "loading-the-redirect-files"]], "Local Outlier Factor": [[1004, "local-outlier-factor"]], "Local Tangent Space Alignment": [[995, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[856, "localoutlierfactor"]], "Locally Linear Embedding": [[995, "locally-linear-embedding"]], "Locally Linear Embeddings": [[239, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[695, "locallylinearembedding"]], "Log loss": [[998, "log-loss"]], "Logistic Regression 3-class Classifier": [[202, "logistic-regression-3-class-classifier"]], "Logistic function": [[209, "logistic-function"]], "Logistic regression": [[994, "logistic-regression"]], "LogisticRegression": [[664, "logisticregression"]], "LogisticRegression wrapped by OneVsRestClassifier": [[297, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[665, "logisticregressioncv"]], "Look at the results": [[252, "look-at-the-results"], [354, "look-at-the-results"]], "Loss Functions": [[422, "loss-functions"]], "Lovely": [[1022, "id20"]], "Low-level parallelism": [[415, "low-level-parallelism"], [422, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[373, "lower-level-parallelism-with-openmp"]], "MARS": [[1022, "id28"]], "MDS": [[696, "mds"]], "MLPClassifier": [[867, "mlpclassifier"]], "MLPRegressor": [[868, "mlpregressor"]], "MNIST classification using multinomial logistic + L1": [[235, "mnist-classification-using-multinomial-logistic-l1"]], "MacPorts for Mac OSX": [[403, "macports-for-mac-osx"]], "Machinalis": [[1022, "id22"]], "Machine learning: the problem setting": [[1023, "machine-learning-the-problem-setting"]], "Mailing Lists": [[1021, "mailing-lists"]], "Main": [[46, "main"]], "Main takeaways": [[219, "main-takeaways"]], "Maintainer/Core-Developer Information": [[389, "maintainer-core-developer-information"]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[385, "maintaining-backwards-compatibility"]], "Major version release": [[389, "major-version-release"]], "Majority Class Labels (Majority/Hard Voting)": [[422, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[159, "make-pipeline-to-preprocess-the-data"]], "Making a release": [[389, "making-a-release"]], "Making predictions": [[162, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[241, "manifold-learning-methods-on-a-severed-sphere"]], "Manifold learning": [[188, "manifold-learning"], [238, "manifold-learning"], [995, "manifold-learning"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[240, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Manually setting the decision threshold": [[414, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[271, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[322, "map-data-to-a-normal-distribution"]], "Mapping to a Gaussian distribution": [[1008, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1008, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[988, "marking-imputed-values"]], "Matern": [[625, "matern"]], "Mathematical Definition": [[1005, "mathematical-definition"]], "Mathematical Details": [[990, "mathematical-details"]], "Mathematical formulation": [[412, "mathematical-formulation"], [412, "id3"], [422, "mathematical-formulation"], [1001, "mathematical-formulation"], [1012, "mathematical-formulation"], [1013, "mathematical-formulation"], [1014, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[992, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[992, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[998, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[184, "matern-kernel"], [425, "matern-kernel"]], "Max error": [[998, "max-error"]], "MaxAbsScaler": [[318, "maxabsscaler"], [879, "maxabsscaler"]], "Mean Poisson, Gamma, and Tweedie deviances": [[998, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[415, "mean-shift"]], "Mean absolute error": [[998, "mean-absolute-error"]], "Mean absolute percentage error": [[998, "mean-absolute-percentage-error"]], "Mean squared error": [[998, "mean-squared-error"]], "Mean squared logarithmic error": [[998, "mean-squared-logarithmic-error"]], "MeanShift": [[454, "meanshift"]], "Measure and plot the results": [[159, "measure-and-plot-the-results"]], "Median absolute error": [[998, "median-absolute-error"]], "Memory footprint": [[87, "memory-footprint"]], "Memory usage profiling": [[391, "memory-usage-profiling"]], "Merging Pull Requests": [[389, "merging-pull-requests"]], "Meta-estimators": [[40, "module-sklearn.utils.metaestimators"]], "MetaEstimatorMixin": [[435, "metaestimatormixin"]], "Metadata Routing": [[253, "metadata-routing"], [333, "metadata-routing"], [399, "metadata-routing"], [406, "metadata-routing"], [1056, "metadata-routing"], [1056, "id1"], [1057, "metadata-routing"], [1058, "metadata-routing"]], "Metadata Routing Support": [[334, "metadata-routing-support"]], "Metadata Routing Support Status": [[406, "metadata-routing-support-status"]], "Metadata routing": [[40, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[954, "metadatarequest"]], "MetadataRouter": [[955, "metadatarouter"]], "MethodMapping": [[956, "methodmapping"]], "Methods": [[399, "methods"]], "Metrics": [[411, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[998, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "MinCovDet": [[480, "mincovdet"]], "MinMaxScaler": [[318, "minmaxscaler"], [880, "minmaxscaler"]], "Mini Batch K-Means": [[415, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[420, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[420, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[543, "minibatchdictionarylearning"]], "MiniBatchKMeans": [[455, "minibatchkmeans"]], "MiniBatchNMF": [[544, "minibatchnmf"]], "MiniBatchNMF: an online version of NMF": [[331, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[545, "minibatchsparsepca"]], "Minimal Cost-Complexity Pruning": [[1014, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1052, "minimal-dependencies"], [1053, "minimal-dependencies"]], "Minimum Covariance Determinant": [[417, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[113, "minimum-covariance-determinant-estimator"]], "Minor version release (also known as bug-fix release)": [[389, "minor-version-release-also-known-as-bug-fix-release"]], "Misc": [[1039, "misc"]], "Miscellaneous": [[24, "miscellaneous"], [188, "miscellaneous"], [245, "miscellaneous"], [1047, "miscellaneous"], [1047, "id40"], [1048, "miscellaneous"], [1049, "miscellaneous"], [1050, "miscellaneous"], [1050, "id13"], [1051, "miscellaneous"], [1052, "miscellaneous"], [1055, "miscellaneous"]], "Misleading values on strongly correlated features": [[1006, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[185, "missing-value-imputation"], [188, "missing-value-imputation"]], "Missing Values Support": [[1014, "missing-values-support"]], "Missing information": [[187, "missing-information"]], "Missing value support for Random Forest": [[334, "missing-value-support-for-random-forest"]], "Missing values support": [[422, "missing-values-support"]], "Missing values support in decision trees": [[333, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[635, "missingindicator"]], "Model Complexity Influence": [[45, "model-complexity-influence"]], "Model Compression": [[372, "model-compression"]], "Model Reshaping": [[372, "model-reshaping"]], "Model Selection": [[188, "model-selection"], [269, "model-selection"]], "Model Selection Enhancements and API Changes": [[1045, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[149, "model-training-and-comparison"]], "Model comparison": [[148, "model-comparison"]], "Model evaluation": [[398, "model-evaluation"]], "Model fitting and extrapolation": [[180, "model-fitting-and-extrapolation"]], "Model persistence": [[409, "model-persistence"]], "Model selection and evaluation": [[410, "model-selection-and-evaluation"]], "Model selection interface": [[26, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[131, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Model selection: choosing estimators and their parameters": [[1027, "model-selection-choosing-estimators-and-their-parameters"]], "Model selection: development and evaluation": [[987, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[987, "model-specific-cross-validation"]], "Model training and selection": [[172, "model-training-and-selection"], [267, "model-training-and-selection"]], "Model validation": [[28, "model-validation"]], "Model with metadata stripping": [[359, "model-with-metadata-stripping"]], "Model without metadata stripping": [[359, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[173, "model-based-and-sequential-feature-selection"]], "Modeling non-linear feature interactions with kernels": [[42, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[42, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[51, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[316, "models-definition"]], "Models robustness to recover the ground truth weights": [[198, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[995, "modified-locally-linear-embedding"]], "Monitoring performance": [[385, "monitoring-performance"]], "Monotonic Constraints": [[156, "monotonic-constraints"], [422, "monotonic-constraints"]], "Monotonic constraints": [[154, "monotonic-constraints"]], "More control with warm_start": [[1002, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[89, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[138, "multi-class-adaboosted-decision-trees"]], "Multi-class case": [[998, "multi-class-case"]], "Multi-class classification": [[1013, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[391, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[995, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[242, "multi-dimensional-scaling"]], "Multi-label case": [[998, "multi-label-case"]], "Multi-label confusion matrix": [[998, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1002, "multi-layer-perceptron"]], "Multi-layer perceptron": [[192, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[366, "multi-output-decision-tree-regression"]], "Multi-output problems": [[1014, "multi-output-problems"]], "Multi-task Elastic-Net": [[994, "multi-task-elastic-net"]], "Multi-task Lasso": [[994, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[24, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[881, "multilabelbinarizer"], [1009, "multilabelbinarizer"]], "MultiOutputClassifier": [[842, "multioutputclassifier"], [999, "multioutputclassifier"]], "MultiOutputRegressor": [[843, "multioutputregressor"], [999, "multioutputregressor"]], "MultiTaskElasticNet": [[666, "multitaskelasticnet"]], "MultiTaskElasticNetCV": [[667, "multitaskelasticnetcv"]], "MultiTaskLasso": [[668, "multitasklasso"]], "MultiTaskLassoCV": [[669, "multitasklassocv"]], "Multiclass Receiver Operating Characteristic (ROC)": [[286, "multiclass-receiver-operating-characteristic-roc"]], "Multiclass and multilabel classification": [[998, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[394, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[999, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[999, "multiclass-classification"], [1030, null]], "Multiclass methods": [[188, "multiclass-methods"], [294, "multiclass-methods"]], "Multiclass sparse logistic regression on 20newgroups": [[234, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Multiclass support": [[413, "multiclass-support"]], "Multiclass vs. multilabel fitting": [[1023, "multiclass-vs-multilabel-fitting"]], "Multiclass-multioutput classification": [[999, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[239, "multidimensional-scaling"]], "Multilabel": [[381, "multilabel"]], "Multilabel classification": [[254, "multilabel-classification"], [999, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[297, "multilabel-classification-using-a-classifier-chain"]], "Multilabel ranking metrics": [[26, "multilabel-ranking-metrics"], [998, "multilabel-ranking-metrics"]], "Multinomial Case": [[994, "multinomial-case"]], "Multinomial Naive Bayes": [[1000, "multinomial-naive-bayes"]], "MultinomialNB": [[849, "multinomialnb"]], "Multioutput methods": [[188, "multioutput-methods"], [296, "multioutput-methods"]], "Multioutput regression": [[999, "multioutput-regression"]], "Multiple modules": [[1047, "multiple-modules"], [1048, "multiple-modules"]], "Multiple vs. Single Imputation": [[988, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[988, "multivariate-feature-imputation"]], "Mutual Information based scores": [[415, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[415, "mutual-reachability-graph"]], "NMF": [[546, "nmf"]], "NMF with a beta-divergence": [[420, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[420, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1000, "naive-bayes"]], "Naive evaluation of the next hour bike demand regression": [[51, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[42, "naive-linear-regression"]], "Native Categorical Feature Support": [[324, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[329, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[327, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[309, "nearest-centroid-classification"]], "Nearest Centroid Classifier": [[1001, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1001, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[188, "nearest-neighbors"], [299, "nearest-neighbors"], [1001, "nearest-neighbors"]], "Nearest Neighbors Classification": [[301, "nearest-neighbors-classification"], [1001, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1001, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1001, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[310, "nearest-neighbors-regression"]], "Nearest Shrunken Centroid": [[1001, "nearest-shrunken-centroid"]], "Nearest neighbor and the curse of dimensionality": [[1030, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Nearest neighbors imputation": [[988, "nearest-neighbors-imputation"]], "NearestCentroid": [[857, "nearestcentroid"]], "NearestNeighbors": [[858, "nearestneighbors"]], "Neighborhood Components Analysis": [[1001, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[308, "neighborhood-components-analysis-illustration"]], "NeighborhoodComponentsAnalysis": [[859, "neighborhoodcomponentsanalysis"]], "Nested cross-validation": [[1027, null]], "Nested versus non-nested cross-validation": [[282, "nested-versus-non-nested-cross-validation"]], "NetBSD": [[403, "netbsd"]], "Neural Networks": [[188, "neural-networks"], [312, "neural-networks"]], "Neural network models (supervised)": [[1002, "neural-network-models-supervised"]], "Neural network models (unsupervised)": [[1003, "neural-network-models-unsupervised"]], "New Estimator Classes": [[1040, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[329, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[329, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[329, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[332, "new-and-enhanced-displays"]], "New classes": [[1039, "new-classes"]], "New display ValidationCurveDisplay": [[333, "new-display-validationcurvedisplay"]], "New documentation improvements": [[329, "new-documentation-improvements"], [330, "new-documentation-improvements"]], "New features": [[1042, "new-features"], [1043, "new-features"], [1044, "new-features"], [1045, "new-features"], [1046, "new-features"]], "New plotting API": [[327, "new-plotting-api"]], "New self-training meta-estimator": [[329, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1016, "new-to-scientific-python"]], "Next steps": [[398, "next-steps"]], "Non-Negative Least Squares": [[994, "non-negative-least-squares"]], "Non-linear transformation": [[1008, "non-linear-transformation"]], "Non-negative components - NMF": [[124, "non-negative-components-nmf"]], "Non-negative least squares": [[214, "non-negative-least-squares"]], "Non-negative matrix factorization (NMF or NNMF)": [[420, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[68, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Normalization": [[1008, "normalization"]], "Normalized Discounted Cumulative Gain": [[998, "normalized-discounted-cumulative-gain"]], "Normalizer": [[318, "normalizer"], [882, "normalizer"]], "NotFittedError": [[583, "notfittederror"]], "Note on MPS device support": [[411, "note-on-mps-device-support"]], "Notes": [[374, "notes"]], "Novelty Detection": [[1004, "novelty-detection"]], "Novelty and Outlier Detection": [[1004, "novelty-and-outlier-detection"]], "Novelty detection with Local Outlier Factor": [[1004, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[304, "novelty-detection-with-local-outlier-factor-lof"]], "NuSVC": [[912, "nusvc"]], "NuSVR": [[913, "nusvr"]], "NumPy": [[390, "numpy"]], "Number of candidates and amount of resource at each iteration": [[289, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[387, "numerical-assertions-in-tests"]], "Nystroem": [[645, "nystroem"]], "Nystroem Method for Kernel Approximation": [[990, "nystroem-method-for-kernel-approximation"]], "OAS": [[481, "oas"]], "ONNX": [[409, "onnx"]], "OOB Errors for Random Forests": [[142, "oob-errors-for-random-forests"]], "OPTICS": [[415, "optics"], [456, "optics"]], "Obtaining predictions by cross-validation": [[419, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1022, "id19"]], "Older Versions": [[1039, "older-versions"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[233, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "One-class SVM with non-linear kernel (RBF)": [[347, "one-class-svm-with-non-linear-kernel-rbf"]], "One-vs-One multiclass ROC": [[286, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[286, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[914, "oneclasssvm"]], "OneHotEncoder": [[883, "onehotencoder"]], "OneToOneFeatureMixin": [[436, "onetoonefeaturemixin"]], "OneVsOneClassifier": [[838, "onevsoneclassifier"], [999, "onevsoneclassifier"]], "OneVsRestClassifier": [[839, "onevsrestclassifier"], [999, "onevsrestclassifier"]], "Online One-Class SVM": [[330, "online-one-class-svm"], [1012, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[84, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Open problem: Stock Market Structure": [[1028, "open-problem-stock-market-structure"]], "Optical recognition of handwritten digits dataset": [[382, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[40, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[181, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[387, "optional-arguments"]], "Options to tune the decision threshold": [[414, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[417, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[884, "ordinalencoder"]], "Ordinary Least Squares": [[994, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[994, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[217, "ordinary-least-squares-and-ridge-regression-variance"]], "Original data": [[283, "original-data"], [318, "original-data"]], "Original image": [[87, "original-image"]], "Original points": [[308, "original-points"]], "Orthogonal Matching Pursuit": [[218, "orthogonal-matching-pursuit"]], "Orthogonal Matching Pursuit (OMP)": [[994, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[670, "orthogonalmatchingpursuit"]], "OrthogonalMatchingPursuitCV": [[671, "orthogonalmatchingpursuitcv"]], "Other changes": [[1039, "other-changes"]], "Other estimators and tasks": [[1017, "other-estimators-and-tasks"]], "Otto Group": [[1022, "id26"]], "Our community, our values": [[385, null]], "Our vanilla classifier": [[291, "our-vanilla-classifier"]], "Out of Bag Estimates": [[987, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[46, "out-of-core-classification-of-text-documents"]], "Out-of-core naive Bayes model fitting": [[1000, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1004, "id1"]], "Outlier detection on a real data set": [[47, "outlier-detection-on-a-real-data-set"]], "Outlier detection with Local Outlier Factor (LOF)": [[305, "outlier-detection-with-local-outlier-factor-lof"]], "Outlier-robust regressors": [[24, "outlier-robust-regressors"]], "OutlierMixin": [[437, "outliermixin"]], "Outliers in the X direction": [[236, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[236, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1006, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[840, "outputcodeclassifier"], [999, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[373, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[415, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[295, "overview-of-multiclass-training-meta-estimators"]], "Overview of outlier detection methods": [[1004, "overview-of-outlier-detection-methods"]], "PCA": [[547, "pca"]], "PCA example with Iris Data-set": [[130, "pca-example-with-iris-data-set"]], "PCA using randomized SVD": [[420, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1015, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1022, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[116, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[116, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[418, "plscanonical"], [489, "plscanonical"]], "PLSRegression": [[418, "plsregression"], [490, "plsregression"]], "PLSSVD": [[418, "plssvd"], [491, "plssvd"]], "Packaging": [[1051, "packaging"]], "Pair Confusion Matrix": [[415, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[277, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[277, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[335, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[26, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[996, "pairwise-metrics-affinities-and-kernels"]], "PairwiseKernel": [[626, "pairwisekernel"]], "Pandas": [[390, "pandas"]], "Pandas output with set_output API": [[332, "pandas-output-with-set-output-api"]], "Parallel": [[964, "parallel"]], "Parallel NumPy and SciPy routines from numerical libraries": [[373, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[40, "module-sklearn.utils.parallel"]], "Parallelism": [[373, "parallelism"], [987, "parallelism"]], "Parallelism, resource management, and configuration": [[373, "parallelism-resource-management-and-configuration"]], "Parallelization": [[422, "parallelization"]], "Parameter tuning using grid search": [[1032, "parameter-tuning-using-grid-search"]], "ParameterGrid": [[817, "parametergrid"]], "ParameterSampler": [[818, "parametersampler"]], "Parameters": [[399, "parameters"], [422, "parameters"]], "Parameters and init": [[387, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1013, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[192, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial Dependence and Individual Conditional Expectation plots": [[1005, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[1005, "partial-dependence-plots"]], "PartialDependenceDisplay": [[638, "partialdependencedisplay"]], "Partitioning the data": [[196, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[994, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[672, "passiveaggressiveclassifier"]], "PassiveAggressiveRegressor": [[673, "passiveaggressiveregressor"]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[423, "patch-extraction"]], "PatchExtractor": [[589, "patchextractor"]], "PeerIndex": [[1022, "id17"]], "People": [[1039, "people"], [1039, "id2"], [1039, "id5"], [1039, "id8"], [1039, "id11"], [1039, "id13"], [1039, "id15"], [1039, "id17"], [1040, "people"], [1040, "id3"], [1041, "people"], [1042, "people"]], "Perceptron": [[674, "perceptron"], [994, "perceptron"]], "Performance improvements": [[331, "performance-improvements"]], "Performance improvements in PCA": [[335, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[360, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[220, "periodic-splines"]], "Periodic spline features": [[42, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[193, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[194, "permutation-importance-with-multicollinear-or-correlated-features"]], "Permutation feature importance": [[1006, "permutation-feature-importance"]], "Permutation test score": [[283, "permutation-test-score"], [419, "permutation-test-score"]], "Permutation-based feature importance": [[327, "permutation-based-feature-importance"]], "Pinball loss": [[998, "pinball-loss"]], "Pipeline": [[870, "pipeline"]], "Pipeline ANOVA SVM": [[170, "pipeline-anova-svm"]], "Pipeline compatibility": [[387, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[278, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[416, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[102, "pipelines-and-composite-estimators"], [188, "pipelines-and-composite-estimators"], [416, "pipelines-and-composite-estimators"]], "Pipelines: chaining pre-processors and estimators": [[398, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1015, null], [1028, "pipelining"]], "Pipelining: chaining a PCA and a logistic regression": [[106, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Pixel importances with a parallel forest of trees": [[146, "pixel-importances-with-a-parallel-forest-of-trees"]], "Platform-specific instructions": [[383, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[75, "plot-hierarchical-clustering-dendrogram"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[284, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[274, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[224, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Plot a PCA representation": [[120, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[359, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[286, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[286, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[203, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[256, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[161, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot classification boundaries with different SVM Kernels": [[352, "plot-classification-boundaries-with-different-svm-kernels"]], "Plot classification probability": [[65, "plot-classification-probability"]], "Plot data and the predicted probabilities": [[60, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[345, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot discrete decision boundary": [[155, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[164, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[152, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[162, "plot-individual-and-voting-regression-predictions"]], "Plot multi-class SGD on the iris dataset": [[228, "plot-multi-class-sgd-on-the-iris-dataset"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[211, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Plot number of features VS. cross-validation scores": [[172, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[155, "plot-path-length-decision-boundary"]], "Plot randomly generated classification dataset": [[121, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[122, "plot-randomly-generated-multilabel-dataset"]], "Plot regularization path": [[212, "plot-regularization-path"]], "Plot result": [[72, "plot-result"], [97, "plot-result"], [101, "plot-result"], [101, "id2"]], "Plot results": [[46, "plot-results"], [83, "plot-results"], [110, "plot-results"], [125, "plot-results"], [126, "plot-results"], [144, "plot-results"], [297, "plot-results"], [305, "plot-results"]], "Plot results functions": [[290, "plot-results-functions"]], "Plot support and time series": [[213, "plot-support-and-time-series"]], "Plot the BIC scores": [[267, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[284, "plot-the-precision-recall-curve"]], "Plot the best model": [[267, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[351, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[160, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot the decision surface of decision trees trained on the iris dataset": [[364, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[147, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Plot the marginal log-likelihood": [[198, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[284, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[337, "plot-the-most-uncertain-predictions"]], "Plot the results": [[84, "plot-the-results"], [114, "plot-the-results"], [162, "plot-the-results"], [187, "plot-the-results"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[346, "plot-the-support-vectors-in-linearsvc"]], "Plot the true and estimated coefficients": [[198, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[199, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[152, "plot-training-deviance"]], "Plotting": [[20, "plotting"], [26, "plotting"], [39, "plotting"], [316, "plotting"]], "Plotting API Overview": [[392, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[273, "plotting-cross-validated-predictions"]], "Plotting Functions": [[69, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[279, "plotting-learning-curves-and-checking-models-scalability"]], "Plotting Validation Curves": [[293, "plotting-validation-curves"]], "Plotting four circles": [[100, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[257, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[257, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[257, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[198, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[57, "plotting-results"]], "Plotting the ROC Curve": [[259, "plotting-the-roc-curve"]], "Plotting the Results": [[324, "plotting-the-results"]], "Plotting the result": [[281, "plotting-the-result"]], "Plotting the results": [[98, "plotting-the-results"], [139, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[223, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[100, "plotting-two-circles"]], "Plotting with Multiple Axes": [[392, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[219, "poisson-regression-and-non-normal-loss"]], "PoissonRegressor": [[675, "poissonregressor"]], "Polars output in set_output": [[334, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[990, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[220, "polynomial-and-spline-interpolation"]], "Polynomial features": [[1008, "polynomial-features"]], "Polynomial kernel": [[352, "polynomial-kernel"], [996, "polynomial-kernel"], [1030, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[994, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[646, "polynomialcountsketch"]], "PolynomialFeatures": [[885, "polynomialfeatures"]], "Possible solutions": [[91, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[363, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Post-fit model tuning": [[28, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[291, "post-hoc-tuning-the-cut-off-point-of-decision-function"]], "Post-tuning the decision threshold": [[414, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[271, "post-tuning-the-decision-threshold-for-cost-sensitive-learning"]], "PowerTransformer": [[318, "powertransformer"], [886, "powertransformer"]], "Pre-test vs. post-test analysis": [[280, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[998, "precision-recall-and-f-measures"]], "Precision-Recall": [[284, "precision-recall"]], "PrecisionRecallDisplay": [[706, "precisionrecalldisplay"]], "Precomputed sparse nearest neighbors graph": [[327, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[419, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[819, "predefinedsplit"]], "Prediction Intervals for Gradient Boosting Regression": [[151, "prediction-intervals-for-gradient-boosting-regression"]], "Prediction Latency": [[48, "prediction-latency"], [372, "prediction-latency"]], "Prediction Throughput": [[372, "prediction-throughput"]], "PredictionErrorDisplay": [[707, "predictionerrordisplay"]], "Preparing a release PR": [[389, "preparing-a-release-pr"]], "Preparing the data": [[139, "preparing-the-data"], [154, "preparing-the-data"], [196, "preparing-the-data"]], "Preprocessing": [[188, "preprocessing"], [317, "preprocessing"]], "Preprocessing data": [[1008, "preprocessing-data"]], "Preprocessing numerical variables": [[191, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[192, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[192, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[192, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[117, "principal-component-regression-vs-partial-least-squares-regression"]], "Principal component analysis (PCA)": [[420, "principal-component-analysis-pca"]], "Principal component analysis: PCA": [[1031, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1056, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[425, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[176, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Probability Calibration curves": [[61, "probability-calibration-curves"]], "Probability Calibration for 3-class classification": [[62, "probability-calibration-for-3-class-classification"]], "Probability calibration": [[413, "probability-calibration"]], "Probability calibration of classifiers": [[60, "probability-calibration-of-classifiers"]], "Processing the dataset": [[191, "processing-the-dataset"]], "Product": [[627, "product"]], "Productivity and sanity-preserving tips": [[393, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[391, "profiling-python-code"]], "Profiling compiled extensions": [[391, "profiling-compiled-extensions"]], "Project template:": [[387, null]], "Projecting data: PCA vs. KernelPCA": [[129, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[129, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[117, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[51, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[390, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[385, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[237, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1018, "purpose-of-this-document"]], "Purpose of this example": [[223, "purpose-of-this-example"]], "Putting it all together": [[1028, "putting-it-all-together"]], "PyTorch Support": [[411, "pytorch-support"]], "Python API": [[373, "python-api"]], "Python package and dataset imports, load dataset": [[251, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[391, "python-cython-or-c-c"]], "QDA": [[992, "qda"]], "QuadraticDiscriminantAnalysis": [[556, "quadraticdiscriminantanalysis"]], "Qualitative analysis of the impact of features on linear model predictions": [[42, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[360, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[994, "quantile-regression"]], "Quantile Regressor": [[330, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[331, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[221, "quantile-regression"]], "QuantileRegressor": [[676, "quantileregressor"]], "QuantileTransformer": [[887, "quantiletransformer"]], "QuantileTransformer (Gaussian output)": [[318, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[318, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[994, "ransac-random-sample-consensus"]], "RANSACRegressor": [[677, "ransacregressor"]], "RBF": [[628, "rbf"]], "RBF SVM parameters": [[348, "rbf-svm-parameters"]], "RBF kernel": [[352, "rbf-kernel"], [996, "rbf-kernel"]], "RBF kernel (Radial Basis Function)": [[1030, "rbf-kernel-radial-basis-function"]], "RBFSampler": [[647, "rbfsampler"]], "RCV1 dataset": [[380, "rcv1-dataset"]], "RFE": [[599, "rfe"]], "RFECV": [[600, "rfecv"]], "ROC AUC now supports multiclass classification": [[327, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[259, "roc-curve-with-visualization-api"]], "ROC curve showing a specific class": [[286, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[286, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[286, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[286, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[990, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[184, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[425, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[860, "radiusneighborsclassifier"]], "RadiusNeighborsRegressor": [[861, "radiusneighborsregressor"]], "RadiusNeighborsTransformer": [[862, "radiusneighborstransformer"]], "Rand index": [[415, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[194, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[422, "random-forests"]], "Random Numbers": [[387, "random-numbers"]], "Random Projection": [[1010, "random-projection"]], "Random data": [[283, "random-data"]], "Random forests and other randomized tree ensembles": [[422, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[419, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1015, "random-projections"]], "Random sampling": [[40, "module-sklearn.utils.random"]], "RandomForestClassifier": [[570, "randomforestclassifier"]], "RandomForestRegressor": [[571, "randomforestregressor"]], "RandomTreesEmbedding": [[572, "randomtreesembedding"]], "Randomized Parameter Optimization": [[987, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[820, "randomizedsearchcv"]], "Rangespan": [[1022, "id11"]], "Ranking loss": [[998, "ranking-loss"]], "Rational Quadradtic kernel": [[184, "rational-quadradtic-kernel"]], "Rational quadratic kernel": [[425, "rational-quadratic-kernel"]], "RationalQuadratic": [[629, "rationalquadratic"]], "Reading the existing code base": [[385, "reading-the-existing-code-base"]], "Real world datasets": [[380, "real-world-datasets"]], "Real-world data set": [[108, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[287, "receiver-operating-characteristic-roc-with-cross-validation"]], "Receiver operating characteristic (ROC)": [[998, "receiver-operating-characteristic-roc"]], "Recognizing hand-written digits": [[67, "recognizing-hand-written-digits"]], "Recommendation": [[380, null]], "Recommendation Engine packages": [[1017, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[43, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[171, "recursive-feature-elimination"], [424, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[172, "recursive-feature-elimination-with-cross-validation"]], "References": [[49, "references"], [61, "references"], [63, "references"], [113, "references"], [141, "references"], [196, "references"], [203, "references"], [295, "references"], [311, "references"], [425, "references"], [988, "references"]], "Refitting and updating parameters": [[1023, "refitting-and-updating-parameters"]], "Region of Practical Equivalence": [[277, "region-of-practical-equivalence"]], "Regression": [[183, "regression"], [994, "regression"], [1002, "regression"], [1012, "regression"], [1013, "regression"], [1014, "regression"]], "Regression criteria": [[1014, "regression-criteria"]], "Regression metrics": [[26, "regression-metrics"], [998, "regression-metrics"]], "RegressorChain": [[844, "regressorchain"], [999, "regressorchain"]], "RegressorMixin": [[438, "regressormixin"]], "Regressors with variable selection": [[24, "regressors-with-variable-selection"]], "Regularization": [[1002, "regularization"]], "Regularization path of L1- Logistic Regression": [[212, "regularization-path-of-l1-logistic-regression"]], "Related Projects": [[1017, "related-projects"]], "Related changes": [[1046, "related-changes"]], "Relation to impurity-based importance in trees": [[1006, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[188, "release-highlights"], [326, "release-highlights"]], "Release Highlights for scikit-learn 0.22": [[327, "release-highlights-for-scikit-learn-0-22"]], "Release Highlights for scikit-learn 0.23": [[328, "release-highlights-for-scikit-learn-0-23"]], "Release Highlights for scikit-learn 0.24": [[329, "release-highlights-for-scikit-learn-0-24"]], "Release Highlights for scikit-learn 1.0": [[330, "release-highlights-for-scikit-learn-1-0"]], "Release Highlights for scikit-learn 1.1": [[331, "release-highlights-for-scikit-learn-1-1"]], "Release Highlights for scikit-learn 1.2": [[332, "release-highlights-for-scikit-learn-1-2"]], "Release Highlights for scikit-learn 1.3": [[333, "release-highlights-for-scikit-learn-1-3"]], "Release Highlights for scikit-learn 1.4": [[334, "release-highlights-for-scikit-learn-1-4"]], "Release Highlights for scikit-learn 1.5": [[335, "release-highlights-for-scikit-learn-1-5"]], "Release History": [[1037, "release-history"]], "Release checklist": [[389, "release-checklist"]], "Releasing": [[389, "releasing"]], "Remarks": [[250, "remarks"]], "Removed modules": [[1039, "removed-modules"]], "Removing features with low variance": [[424, "removing-features-with-low-variance"]], "Repeated K-Fold": [[419, "repeated-k-fold"]], "RepeatedKFold": [[821, "repeatedkfold"]], "RepeatedStratifiedKFold": [[822, "repeatedstratifiedkfold"]], "Replace missing values by 0": [[187, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[409, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[316, "restricted-boltzmann-machine-features-for-digit-classification"]], "Restricted Boltzmann machines": [[1003, "restricted-boltzmann-machines"]], "Results interpretation": [[297, "results-interpretation"]], "Retrieve dataframes from OpenML": [[327, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[50, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[46, "reuters-dataset-related-routines"]], "Rich HTML representation": [[248, "rich-html-representation"]], "Rich visual representation of estimators": [[328, "rich-visual-representation-of-estimators"]], "Ridge": [[678, "ridge"]], "Ridge Complexity": [[994, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[223, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Ridge regression and classification": [[994, "ridge-regression-and-classification"]], "RidgeCV": [[679, "ridgecv"]], "RidgeClassifier": [[680, "ridgeclassifier"]], "RidgeClassifierCV": [[681, "ridgeclassifiercv"]], "Roadmap": [[1018, "roadmap"]], "Robust Covariance Estimation": [[417, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[112, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "Robust linear estimator fitting": [[225, "robust-linear-estimator-fitting"]], "Robust linear model estimation using RANSAC": [[222, "robust-linear-model-estimation-using-ransac"]], "Robust vs Empirical covariance estimate": [[113, "robust-vs-empirical-covariance-estimate"]], "RobustScaler": [[318, "robustscaler"], [888, "robustscaler"]], "Robustness of cross-validation results": [[368, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[994, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[987, "robustness-to-failure"]], "RocCurveDisplay": [[708, "roccurvedisplay"]], "Roles And Responsibilities": [[400, "roles-and-responsibilities"]], "Rolling your own estimator": [[387, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[253, "routing-meta-estimator"]], "Run the benchmark": [[92, "run-the-benchmark"]], "Run the code and plot the results": [[45, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[281, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[383, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[998, "r2-score-the-coefficient-of-determination"]], "SGD": [[1012, "id5"]], "SGD: Maximum margin separating hyperplane": [[231, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Penalties": [[230, "sgd-penalties"]], "SGD: Weighted samples": [[232, "sgd-weighted-samples"]], "SGD: convex loss functions": [[229, "sgd-convex-loss-functions"]], "SGDClassifier": [[682, "sgdclassifier"]], "SGDOneClassSVM": [[683, "sgdoneclasssvm"]], "SGDRegressor": [[684, "sgdregressor"]], "SKLEARN_ASSUME_FINITE": [[373, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[373, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[373, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[373, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[373, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[373, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[373, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[373, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[373, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[373, "sklearn-working-memory"]], "SVC": [[915, "svc"], [1013, "svc"]], "SVM Exercise": [[166, "svm-exercise"]], "SVM Margins Example": [[353, "svm-margins-example"]], "SVM Tie Breaking Example": [[356, "svm-tie-breaking-example"]], "SVM with custom kernel": [[344, "svm-with-custom-kernel"]], "SVM-Anova: SVM with univariate feature selection": [[351, "svm-anova-svm-with-univariate-feature-selection"]], "SVM: Maximum margin separating hyperplane": [[349, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[350, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM: Weighted samples": [[357, "svm-weighted-samples"]], "SVR": [[916, "svr"], [1013, "svr"]], "Sample generators": [[9, "sample-generators"]], "Sample images": [[379, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[278, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Sample weight support": [[422, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[328, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[328, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[196, "scalable-learning-with-polynomial-kernel-approximation"]], "Scale Invariance": [[89, "scale-invariance"]], "Scaling data with outliers": [[1008, "scaling-data-with-outliers"]], "Scaling features to a range": [[1008, "scaling-features-to-a-range"]], "Scaling sparse data": [[1008, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[355, "scaling-the-regularization-parameter-for-svcs"]], "Scaling up the One-Class SVM": [[1004, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[374, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[120, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[116, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[400, "scikit-learn-governance-and-decision-making"]], "Score, and cross-validated scores": [[1027, "score-and-cross-validated-scores"]], "Scores and probabilities": [[1013, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[987, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[47, "second-example"]], "Second experiment: varying number of classes and clusters": [[71, "second-experiment-varying-number-of-classes-and-clusters"]], "Section contents": [[1023, null]], "Security": [[1057, "security"]], "Security & Maintainability Limitations": [[409, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, "segmenting-the-picture-of-greek-coins-in-regions"]], "SelectFdr": [[601, "selectfdr"]], "SelectFpr": [[602, "selectfpr"]], "SelectFromModel": [[603, "selectfrommodel"]], "SelectFwe": [[604, "selectfwe"]], "SelectKBest": [[605, "selectkbest"]], "SelectPercentile": [[606, "selectpercentile"]], "Selecting Lasso via an information criterion": [[208, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[208, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[105, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Selecting features based on importance": [[173, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[173, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[94, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "SelectorMixin": [[607, "selectormixin"]], "Self Training": [[1011, "self-training"]], "SelfTrainingClassifier": [[907, "selftrainingclassifier"]], "Semi Supervised Classification": [[188, "semi-supervised-classification"], [336, "semi-supervised-classification"]], "Semi-supervised Classification on a Text Dataset": [[341, "semi-supervised-classification-on-a-text-dataset"]], "Semi-supervised learning": [[337, "semi-supervised-learning"], [1011, "semi-supervised-learning"]], "Sequence similarity matrix under the kernel": [[183, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[424, "sequential-feature-selection"]], "SequentialFeatureSelector": [[608, "sequentialfeatureselector"]], "Serving the model artifact": [[409, "serving-the-model-artifact"]], "Setting regularization parameter": [[994, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[994, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[237, "severity-model-gamma-distribution"]], "Shape of the data arrays": [[1023, null]], "Shrinkage": [[1030, "shrinkage"]], "Shrinkage and Covariance Estimator": [[992, "shrinkage-and-covariance-estimator"]], "Shrinkage and sparsity with logistic regression": [[1030, null]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[110, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Shrinkage via learning rate": [[422, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[417, "shrunk-covariance"]], "ShrunkCovariance": [[482, "shrunkcovariance"]], "ShuffleSplit": [[823, "shufflesplit"]], "Sigmoid": [[413, "sigmoid"]], "Sigmoid kernel": [[352, "sigmoid-kernel"], [996, "sigmoid-kernel"], [1030, "sigmoid-kernel"]], "Silhouette Coefficient": [[415, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[303, "simple-1d-kernel-density-estimation"]], "Simple Pipeline": [[253, "simple-pipeline"]], "SimpleImputer": [[636, "simpleimputer"]], "Single estimator versus bagging: bias-variance decomposition": [[141, "single-estimator-versus-bagging-bias-variance-decomposition"]], "Single label": [[381, "single-label"]], "Skewed Chi Squared Kernel": [[990, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[648, "skewedchi2sampler"]], "Social Media": [[1021, "social-media"]], "Solvers": [[994, "solvers"]], "Sparse coding with a precomputed dictionary": [[133, "sparse-coding-with-a-precomputed-dictionary"], [420, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[124, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1008, null]], "Sparse inverse covariance": [[417, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[114, "sparse-inverse-covariance-estimation"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[420, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1010, "sparse-random-projection"]], "SparseCoder": [[548, "sparsecoder"]], "SparsePCA": [[549, "sparsepca"]], "SparseRandomProjection": [[903, "sparserandomprojection"]], "Sparsity": [[423, "sparsity"], [1030, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[216, "sparsity-example-fitting-only-features-1-and-2"]], "Species distribution dataset": [[380, "species-distribution-dataset"]], "Species distribution modeling": [[49, "species-distribution-modeling"]], "Specific models": [[387, "specific-models"]], "Specifying an objective metric": [[987, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[987, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[412, "spectral-biclustering"]], "Spectral Clustering Graphs": [[415, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[412, "spectral-co-clustering"]], "Spectral Embedding": [[995, "spectral-embedding"]], "Spectral clustering": [[415, "spectral-clustering"]], "Spectral clustering for image segmentation": [[100, "spectral-clustering-for-image-segmentation"]], "Spectral embedding for non-linear dimensionality reduction": [[239, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[457, "spectralbiclustering"]], "SpectralClustering": [[458, "spectralclustering"]], "SpectralCoclustering": [[459, "spectralcoclustering"]], "SpectralEmbedding": [[697, "spectralembedding"]], "Sphinx version": [[385, null]], "Spline Transformers": [[330, "spline-transformers"]], "Spline transformer": [[1008, "spline-transformer"]], "SplineTransformer": [[889, "splinetransformer"]], "Splitters": [[28, "splitters"]], "Spotify": [[1022, "id2"]], "Sprints": [[0, "sprints"]], "Stack of predictors on a single data set": [[159, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[422, "stacked-generalization"]], "Stacking Classifier and Regressor": [[327, "stacking-classifier-and-regressor"]], "StackingClassifier": [[573, "stackingclassifier"]], "StackingRegressor": [[574, "stackingregressor"]], "Stalled and Unclaimed Issues": [[385, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[385, "stalled-pull-requests"]], "Standard replies for reviewing": [[393, "standard-replies-for-reviewing"]], "StandardScaler": [[318, "standardscaler"], [890, "standardscaler"]], "Standardization, or mean removal and variance scaling": [[1008, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1018, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[277, "statistical-comparison-of-models-using-grid-search"]], "Statistical learning": [[1026, null]], "Statistical learning with Python": [[1017, "statistical-learning-with-python"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1029, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Stochastic Gradient Descent": [[1012, "stochastic-gradient-descent"]], "Stochastic Gradient Descent - SGD": [[994, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1012, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1003, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1012, "stopping-criterion"]], "Strategies comparison": [[295, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[374, "strategies-to-scale-computationally-bigger-data"]], "Stratified Shuffle Split": [[419, "stratified-shuffle-split"]], "Stratified k-fold": [[419, "stratified-k-fold"]], "StratifiedGroupKFold": [[419, "stratifiedgroupkfold"], [824, "stratifiedgroupkfold"]], "StratifiedKFold": [[825, "stratifiedkfold"]], "StratifiedShuffleSplit": [[826, "stratifiedshufflesplit"]], "Streaming instances": [[374, "streaming-instances"]], "Submitting a bug report or a feature request": [[385, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1018, "subpackage-specific-goals"]], "Subsampling": [[422, "subsampling"]], "Successive Halving Iterations": [[289, "successive-halving-iterations"]], "Successive Halving estimators for tuning hyper-parameters": [[329, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[630, "sum"]], "Summarizing the key points": [[409, "summarizing-the-key-points"]], "Summary": [[61, "summary"], [149, "summary"], [361, "summary"]], "Summary of cross-validation approach": [[208, "summary-of-cross-validation-approach"]], "Supervised learning": [[1020, "supervised-learning"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1030, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "Support": [[1021, "support"]], "Support Vector Machines": [[188, "support-vector-machines"], [343, "support-vector-machines"], [1013, "support-vector-machines"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[354, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Support for Array API": [[1056, "support-for-array-api"], [1057, "support-for-array-api"], [1058, "support-for-array-api"]], "Support for Array API-compatible inputs": [[411, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1056, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1057, "support-for-building-with-meson"]], "Support for missing values": [[154, "support-for-missing-values"]], "Support for quantile loss": [[154, "support-for-quantile-loss"]], "Support vector machines (SVMs)": [[1030, "support-vector-machines-svms"]], "Swiss Roll": [[243, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[243, "swiss-roll-and-swiss-hole-reduction"]], "Swiss-Hole": [[243, "swiss-hole"]], "Synthetic dataset": [[390, "synthetic-dataset"]], "Synthetic example": [[108, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[239, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[698, "tsne"]], "Table of Contents": [[397, "table-of-contents"]], "Take-home messages": [[277, "take-home-messages"]], "Target Encoder": [[1008, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[325, "target-encoder-s-internal-cross-fitting"]], "Target Types": [[399, "target-types"]], "Target format": [[999, "target-format"], [999, "id5"], [999, "id8"], [999, "id10"]], "TargetEncoder": [[891, "targetencoder"]], "TargetEncoder: a new category encoding strategy": [[333, "targetencoder-a-new-category-encoding-strategy"]], "Technical Committee": [[400, "technical-committee"]], "Test dependencies": [[383, "test-dependencies"]], "Test with permutations the significance of a classification score": [[283, "test-with-permutations-the-significance-of-a-classification-score"]], "Testing Functions": [[394, "testing-functions"]], "Testing and improving test coverage": [[385, "testing-and-improving-test-coverage"]], "Text feature extraction": [[423, "text-feature-extraction"]], "TfidfTransformer": [[596, "tfidftransformer"]], "TfidfVectorizer": [[361, "tfidfvectorizer"], [597, "tfidfvectorizer"]], "Tf\u2013idf term weighting": [[423, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[380, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[423, "the-bag-of-words-representation"]], "The Digit Dataset": [[119, "the-digit-dataset"]], "The Dirichlet Process": [[997, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[219, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[120, "the-iris-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[250, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "The Johnson-Lindenstrauss lemma": [[1010, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[380, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[393, "the-meson-build-backend"]], "The Olivetti faces dataset": [[380, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[295, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[284, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[271, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[419, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The curse of dimensionality": [[1030, "the-curse-of-dimensionality"]], "The data": [[117, "the-data"]], "The dataset": [[275, "the-dataset"]], "The dataset: simulated hourly wages": [[190, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[191, "the-dataset-wages"]], "The diabetes dataset": [[291, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[295, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[191, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[191, "the-problem-of-correlated-variables"]], "The problem solved in clustering": [[1031, null]], "The problem solved in supervised learning": [[1030, null]], "The scikit-learn.org web site": [[389, "the-scikit-learn-org-web-site"]], "The scoring parameter: defining model evaluation rules": [[998, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[236, "theil-sen-regression"]], "Theil-Sen estimator: generalized-median-based estimator": [[994, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[685, "theilsenregressor"]], "Theoretical bounds": [[250, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[253, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[403, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[419, "time-series-split"]], "Time-based cross-validation": [[42, "time-based-cross-validation"]], "Time-related feature engineering": [[42, "time-related-feature-engineering"]], "Time-steps as categories": [[42, "time-steps-as-categories"]], "TimeSeriesSplit": [[827, "timeseriessplit"]], "Timing and accuracy plots": [[251, "timing-and-accuracy-plots"]], "Tips and Tricks": [[372, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[386, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[987, "tips-for-parameter-search"]], "Tips for performance": [[386, "tips-for-performance"]], "Tips on Practical Use": [[1002, "tips-on-practical-use"], [1012, "tips-on-practical-use"], [1013, "tips-on-practical-use"]], "Tips on practical use": [[995, "tips-on-practical-use"], [1014, "tips-on-practical-use"]], "Tips to ease development": [[386, "tips-to-ease-development"]], "Tokenizing text with scikit-learn": [[1032, "tokenizing-text-with-scikit-learn"]], "Tools": [[411, "tools"]], "Top terms per cluster": [[360, "top-terms-per-cluster"]], "Top-k accuracy score": [[998, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[53, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Total impurity of leaves vs effective alphas of pruned tree": [[363, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[422, "totally-random-trees-embedding"]], "Toy datasets": [[382, "toy-datasets"]], "Tracking feature names in a pipeline": [[416, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[994, null]], "Train and Persist the Model": [[409, "train-and-persist-the-model"]], "Train classifiers": [[348, "train-classifiers"]], "Train error vs Test error": [[290, "train-error-vs-test-error"]], "Train models on the diabetes dataset": [[257, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[367, "train-tree-classifier"]], "Training": [[316, "training"], [1001, "training"]], "Training SVC model and plotting decision boundaries": [[352, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[259, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[325, "training-a-ridge-regressor"]], "Training a classifier": [[1032, "training-a-classifier"]], "Training and Evaluating Pipelines with Different Encoders": [[324, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[139, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[162, "training-classifiers"]], "Training of the model": [[155, "training-of-the-model"]], "Training set and testing set": [[1023, null], [1030, null]], "Training the AdaBoostClassifier": [[138, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[223, "training-the-ridge-regressor"]], "Transform": [[1001, "transform"]], "Transform data": [[116, "transform-data"]], "TransformedTargetRegressor": [[471, "transformedtargetregressor"]], "TransformerMixin": [[439, "transformermixin"]], "Transformers and pre-processors": [[398, "transformers-and-pre-processors"]], "Transforming target in regression": [[416, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1009, "transforming-the-prediction-target-y"]], "Translations of scikit-learn documentation": [[1017, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1014, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[327, "tree-pruning"]], "Tree structure": [[367, "tree-structure"]], "Tree-based feature selection": [[424, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[193, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[384, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[42, "trigonometric-features"]], "Troubleshooting": [[403, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[420, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[550, "truncatedsvd"]], "TunedThresholdClassifierCV": [[828, "tunedthresholdclassifiercv"]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[335, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[275, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[271, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[271, "tuning-the-decision-threshold"], [291, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[414, "tuning-the-decision-threshold-for-class-prediction"]], "Tuning the hyper-parameters of an estimator": [[987, "tuning-the-hyper-parameters-of-an-estimator"]], "Tuning the hyper-parameters of the quantile regressors": [[151, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[163, "tutorial-exercises"], [188, "tutorial-exercises"]], "Tutorial setup": [[1032, "tutorial-setup"]], "Tweedie regression on insurance claims": [[237, "tweedie-regression-on-insurance-claims"]], "TweedieRegressor": [[686, "tweedieregressor"]], "Two-class AdaBoost": [[140, "two-class-adaboost"]], "Type casting": [[1023, "type-casting"]], "Type of return values and fitted attributes": [[411, "type-of-return-values-and-fitted-attributes"]], "Types": [[386, "types"]], "T\u00e9l\u00e9com ParisTech": [[1022, "id7"]], "Unbalanced problems": [[1013, "unbalanced-problems"]], "UndefinedMetricWarning": [[584, "undefinedmetricwarning"]], "Under Development": [[1034, "under-development"]], "Underfitting vs. Overfitting": [[292, "underfitting-vs-overfitting"]], "Understanding the decision tree structure": [[367, "understanding-the-decision-tree-structure"]], "Univariate Feature Selection": [[169, "univariate-feature-selection"]], "Univariate feature imputation": [[988, "univariate-feature-imputation"]], "Univariate feature selection": [[169, "id1"], [424, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[988, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[387, "universal-attributes"]], "Unlabeled entries in y": [[1011, null]], "Unsupervised Nearest Neighbors": [[1001, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1015, "unsupervised-dimensionality-reduction"]], "Unsupervised learning": [[1033, "unsupervised-learning"]], "Unsupervised learning: seeking representations of the data": [[1031, "unsupervised-learning-seeking-representations-of-the-data"]], "Unweighted feature selection": [[406, "unweighted-feature-selection"]], "Usage": [[413, "usage"], [416, "usage"], [416, "id1"], [422, "usage"], [422, "id24"], [422, "id25"], [422, "id27"], [422, "id35"], [994, "usage"]], "Usage Examples": [[406, "usage-examples"]], "Use markdown formatting": [[390, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[393, "useful-pytest-aliases-and-flags"]], "User Guide": [[1034, "user-guide"]], "User Questions": [[1021, "user-questions"]], "Using Cython": [[391, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[319, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Using None or RandomState instances, and repeated calls to fit and split": [[368, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[386, "using-openmp"]], "Using a debugger, gdb": [[391, "using-a-debugger-gdb"]], "Using cross-validation": [[994, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[419, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[156, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[391, "using-gprof"]], "Using kernels": [[1030, "using-kernels"]], "Using multiple metric evaluation": [[998, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[173, "using-negative-tolerance-values"]], "Using scikit-learn": [[397, "using-scikit-learn"]], "Using stop words": [[423, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[391, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[391, "using-yep-and-gperftools"]], "Utilities for Developers": [[394, "utilities-for-developers"]], "Validation Tools": [[394, "validation-tools"]], "Validation curve": [[993, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[993, "validation-curves-plotting-scores-to-evaluate-models"]], "ValidationCurveDisplay": [[829, "validationcurvedisplay"]], "Vanilla predictive model": [[271, "vanilla-predictive-model"]], "VarianceThreshold": [[609, "variancethreshold"]], "Variational Bayesian Gaussian Mixture": [[997, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[86, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Varying regularization in Multi-layer Perceptron": [[313, "varying-regularization-in-multi-layer-perceptron"]], "Varying the metric": [[415, "varying-the-metric"]], "Vector Quantization Example": [[87, "vector-quantization-example"]], "Vectorizing a large text corpus with the hashing trick": [[423, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1039, "version-0-10"]], "Version 0.11": [[1039, "version-0-11"]], "Version 0.12": [[1039, "version-0-12"]], "Version 0.12.1": [[1039, "version-0-12-1"]], "Version 0.13": [[1040, "version-0-13"], [1040, "changes-0-13"]], "Version 0.13.1": [[1040, "version-0-13-1"]], "Version 0.14": [[1041, "version-0-14"], [1041, "changes-0-14"]], "Version 0.15": [[1042, "version-0-15"], [1042, "changes-0-15"]], "Version 0.15.1": [[1042, "version-0-15-1"]], "Version 0.15.2": [[1042, "version-0-15-2"]], "Version 0.16": [[1043, "version-0-16"], [1043, "changes-0-16"]], "Version 0.16.1": [[1043, "version-0-16-1"]], "Version 0.17": [[1044, "version-0-17"], [1044, "changes-0-17"]], "Version 0.17.1": [[1044, "version-0-17-1"]], "Version 0.18": [[1045, "version-0-18"], [1045, "changes-0-18"]], "Version 0.18.1": [[1045, "version-0-18-1"]], "Version 0.18.2": [[1045, "version-0-18-2"]], "Version 0.19": [[1046, "version-0-19"], [1046, "id1"]], "Version 0.19.1": [[1046, "version-0-19-1"]], "Version 0.19.2": [[1046, "version-0-19-2"]], "Version 0.20": [[1047, "version-0-20"]], "Version 0.20.0": [[1047, "version-0-20-0"]], "Version 0.20.1": [[1047, "version-0-20-1"]], "Version 0.20.2": [[1047, "version-0-20-2"]], "Version 0.20.3": [[1047, "version-0-20-3"]], "Version 0.20.4": [[1047, "version-0-20-4"]], "Version 0.21": [[1048, "version-0-21"]], "Version 0.21.0": [[1048, "version-0-21-0"]], "Version 0.21.1": [[1048, "version-0-21-1"]], "Version 0.21.2": [[1048, "version-0-21-2"]], "Version 0.21.3": [[1048, "version-0-21-3"]], "Version 0.22": [[1049, "version-0-22"]], "Version 0.22.0": [[1049, "version-0-22-0"]], "Version 0.22.1": [[1049, "version-0-22-1"]], "Version 0.22.2.post1": [[1049, "version-0-22-2-post1"]], "Version 0.23": [[1050, "version-0-23"]], "Version 0.23.0": [[1050, "version-0-23-0"]], "Version 0.23.1": [[1050, "version-0-23-1"]], "Version 0.23.2": [[1050, "version-0-23-2"]], "Version 0.24": [[1051, "version-0-24"]], "Version 0.24.0": [[1051, "version-0-24-0"]], "Version 0.24.1": [[1051, "version-0-24-1"]], "Version 0.24.2": [[1051, "version-0-24-2"]], "Version 0.4": [[1039, "version-0-4"]], "Version 0.5": [[1039, "version-0-5"]], "Version 0.6": [[1039, "version-0-6"]], "Version 0.7": [[1039, "version-0-7"]], "Version 0.8": [[1039, "version-0-8"]], "Version 0.9": [[1039, "version-0-9"]], "Version 1.0": [[1052, "version-1-0"]], "Version 1.0.0": [[1052, "version-1-0-0"]], "Version 1.0.1": [[1052, "version-1-0-1"]], "Version 1.0.2": [[1052, "version-1-0-2"]], "Version 1.1": [[1053, "version-1-1"]], "Version 1.1.0": [[1053, "version-1-1-0"]], "Version 1.1.1": [[1053, "version-1-1-1"]], "Version 1.1.2": [[1053, "version-1-1-2"]], "Version 1.1.3": [[1053, "version-1-1-3"]], "Version 1.2": [[1054, "version-1-2"]], "Version 1.2.0": [[1054, "version-1-2-0"]], "Version 1.2.1": [[1054, "version-1-2-1"]], "Version 1.2.2": [[1054, "version-1-2-2"]], "Version 1.3": [[1055, "version-1-3"]], "Version 1.3.0": [[1055, "version-1-3-0"]], "Version 1.3.1": [[1055, "version-1-3-1"]], "Version 1.3.2": [[1055, "version-1-3-2"]], "Version 1.4": [[1056, "version-1-4"]], "Version 1.4.0": [[1056, "version-1-4-0"]], "Version 1.4.1": [[1056, "version-1-4-1"]], "Version 1.4.2": [[1056, "version-1-4-2"]], "Version 1.5": [[1057, "version-1-5"]], "Version 1.5.0": [[1057, "version-1-5-0"]], "Version 1.6": [[1058, "version-1-6"]], "Version 1.6.0": [[1058, "version-1-6-0"]], "Video resources": [[385, "video-resources"]], "Videos": [[1016, "videos"]], "Visual evaluation of regression models": [[998, "visual-evaluation-of-regression-models"]], "Visualization": [[4, "visualization"], [28, "visualization"], [50, "visualization"], [348, "visualization"]], "Visualization of MLP weights on MNIST": [[315, "visualization-of-mlp-weights-on-mnist"]], "Visualization of cluster hierarchy": [[415, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1036, "visualizations"]], "Visualizations with Display Objects": [[247, "visualizations-with-display-objects"]], "Visualize Comparison": [[149, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[272, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[272, "visualize-our-data"]], "Visualize the learning curves": [[252, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[92, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[252, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[416, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[272, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualizing the stock market structure": [[50, "visualizing-the-stock-market-structure"]], "Vocabulary: classification and regression": [[1030, null]], "Voting Classifier": [[422, "voting-classifier"]], "Voting Regressor": [[422, "voting-regressor"]], "VotingClassifier": [[575, "votingclassifier"]], "VotingRegressor": [[576, "votingregressor"]], "Warnings and Exceptions": [[394, "warnings-and-exceptions"]], "Ways to contribute": [[385, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[101, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1049, "website-update"]], "Weight handling based on class labels": [[40, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[422, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[406, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[406, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[397, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[397, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[367, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[397, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "Where to from here": [[1032, "where-to-from-here"]], "WhiteKernel": [[631, "whitekernel"]], "Who is using scikit-learn?": [[1022, "who-is-using-scikit-learn"]], "Why are there so many different estimators for linear models?": [[397, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[397, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[397, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[397, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[397, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[397, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[397, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[397, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[397, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[422, "why-it-s-faster"]], "Why scikit?": [[397, "why-scikit"]], "Wikipedia principal eigenvector": [[54, "wikipedia-principal-eigenvector"]], "Will you add GPU support?": [[397, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[397, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[403, "winpython-for-windows"]], "Windows": [[383, "windows"]], "Wine recognition dataset": [[382, "wine-recognition-dataset"]], "Workflow Overview": [[409, "workflow-overview"]], "Working With Text Data": [[1032, "working-with-text-data"]], "Working on PRs to help review": [[384, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[384, "working-on-issues-to-improve-them"]], "Working with graphs": [[40, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[40, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[188, "working-with-text-documents"], [358, "working-with-text-documents"]], "Wrong causal interpretation": [[191, "wrong-causal-interpretation"]], "XOR dataset": [[352, "xor-dataset"]], "Yhat": [[1022, "id10"]], "Zero one loss": [[998, "zero-one-loss"]], "Zopa": [[1022, "id27"]], "__sklearn_is_fitted__ as Developer API": [[136, "sklearn-is-fitted-as-developer-api"]], "_safe_indexing": [[926, "safe-indexing"]], "accuracy_score": [[709, "accuracy-score"]], "add_dummy_feature": [[892, "add-dummy-feature"]], "additive_chi2_kernel": [[764, "additive-chi2-kernel"]], "adjusted_mutual_info_score": [[710, "adjusted-mutual-info-score"]], "adjusted_rand_score": [[711, "adjusted-rand-score"]], "affinity_propagation": [[460, "affinity-propagation"]], "all_displays": [[938, "all-displays"]], "all_estimators": [[939, "all-estimators"]], "all_functions": [[940, "all-functions"]], "as_float_array": [[928, "as-float-array"]], "assert_all_finite": [[929, "assert-all-finite"]], "auc": [[712, "auc"]], "available_if": [[959, "available-if"]], "average_precision_score": [[713, "average-precision-score"]], "balanced_accuracy_score": [[714, "balanced-accuracy-score"]], "betaworks": [[1022, "id4"]], "binarize": [[893, "binarize"]], "brier_score_loss": [[715, "brier-score-loss"]], "calibration_curve": [[445, "calibration-curve"]], "calinski_harabasz_score": [[716, "calinski-harabasz-score"]], "check_X_y": [[930, "check-x-y"]], "check_array": [[931, "check-array"]], "check_consistent_length": [[932, "check-consistent-length"]], "check_cv": [[830, "check-cv"]], "check_estimator": [[941, "check-estimator"]], "check_increasing": [[642, "check-increasing"]], "check_is_fitted": [[982, "check-is-fitted"]], "check_memory": [[983, "check-memory"]], "check_random_state": [[933, "check-random-state"]], "check_scalar": [[934, "check-scalar"]], "check_scoring": [[717, "check-scoring"]], "check_symmetric": [[984, "check-symmetric"]], "chi2": [[610, "chi2"]], "chi2_kernel": [[765, "chi2-kernel"]], "class_likelihood_ratios": [[718, "class-likelihood-ratios"]], "classification_report": [[719, "classification-report"]], "clear_data_home": [[492, "clear-data-home"]], "clone": [[440, "clone"]], "cluster_optics_dbscan": [[461, "cluster-optics-dbscan"]], "cluster_optics_xi": [[462, "cluster-optics-xi"]], "cohen_kappa_score": [[722, "cohen-kappa-score"]], "column_or_1d": [[985, "column-or-1d"]], "completeness_score": [[723, "completeness-score"]], "compute_class_weight": [[935, "compute-class-weight"]], "compute_optics_graph": [[463, "compute-optics-graph"]], "compute_sample_weight": [[936, "compute-sample-weight"]], "config_context": [[474, "config-context"]], "confusion_matrix": [[724, "confusion-matrix"]], "consensus_score": [[725, "consensus-score"]], "contingency_matrix": [[720, "contingency-matrix"]], "cosine_distances": [[766, "cosine-distances"]], "cosine_similarity": [[767, "cosine-similarity"]], "coverage_error": [[726, "coverage-error"]], "cross_val_predict": [[831, "cross-val-predict"]], "cross_val_score": [[832, "cross-val-score"]], "cross_validate": [[833, "cross-validate"]], "d2_absolute_error_score": [[727, "d2-absolute-error-score"]], "d2_log_loss_score": [[728, "d2-log-loss-score"]], "d2_pinball_score": [[729, "d2-pinball-score"]], "d2_tweedie_score": [[730, "d2-tweedie-score"]], "davies_bouldin_score": [[731, "davies-bouldin-score"]], "dbscan": [[426, "dbscan"]], "dbscan_clustering": [[89, "dbscan-clustering"]], "dcg_score": [[732, "dcg-score"]], "delayed": [[965, "delayed"]], "density": [[944, "density"]], "deprecated": [[937, "deprecated"]], "det_curve": [[733, "det-curve"]], "dict_learning": [[551, "dict-learning"]], "dict_learning_online": [[552, "dict-learning-online"]], "distance_metrics": [[768, "distance-metrics"]], "dump_svmlight_file": [[493, "dump-svmlight-file"]], "empirical_covariance": [[483, "empirical-covariance"]], "enable_halving_search_cv": [[585, "module-sklearn.experimental.enable_halving_search_cv"]], "enable_iterative_imputer": [[586, "module-sklearn.experimental.enable_iterative_imputer"]], "enet_path": [[687, "enet-path"]], "estimate_bandwidth": [[464, "estimate-bandwidth"]], "estimator_html_repr": [[943, "estimator-html-repr"]], "euclidean_distances": [[769, "euclidean-distances"]], "explained_variance_score": [[734, "explained-variance-score"]], "export_graphviz": [[922, "export-graphviz"]], "export_text": [[923, "export-text"]], "extract_patches_2d": [[590, "extract-patches-2d"]], "f1_score": [[735, "f1-score"]], "f_classif": [[611, "f-classif"]], "f_regression": [[612, "f-regression"]], "fast_logdet": [[945, "fast-logdet"]], "fastica": [[427, "fastica"]], "fbeta_score": [[736, "fbeta-score"]], "fetch_20newsgroups": [[494, "fetch-20newsgroups"]], "fetch_20newsgroups_vectorized": [[495, "fetch-20newsgroups-vectorized"]], "fetch_california_housing": [[496, "fetch-california-housing"]], "fetch_covtype": [[497, "fetch-covtype"]], "fetch_kddcup99": [[498, "fetch-kddcup99"]], "fetch_lfw_pairs": [[499, "fetch-lfw-pairs"]], "fetch_lfw_people": [[500, "fetch-lfw-people"]], "fetch_olivetti_faces": [[501, "fetch-olivetti-faces"]], "fetch_openml": [[502, "fetch-openml"]], "fetch_rcv1": [[503, "fetch-rcv1"]], "fetch_species_distributions": [[504, "fetch-species-distributions"]], "fowlkes_mallows_score": [[737, "fowlkes-mallows-score"]], "gen_batches": [[950, "gen-batches"]], "gen_even_slices": [[951, "gen-even-slices"]], "get_config": [[632, "get-config"]], "get_data_home": [[505, "get-data-home"]], "get_feature_names_out Available in all Transformers": [[331, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[387, "get-params-and-set-params"]], "get_routing_for_object": [[957, "get-routing-for-object"]], "get_scorer": [[738, "get-scorer"]], "get_scorer_names": [[739, "get-scorer-names"]], "good first issue tag": [[385, null]], "graphical_lasso": [[484, "graphical-lasso"]], "grid_to_graph": [[591, "grid-to-graph"]], "hamming_loss": [[740, "hamming-loss"]], "has_fit_parameter": [[986, "has-fit-parameter"]], "haversine_distances": [[770, "haversine-distances"]], "help wanted tag": [[385, null]], "hinge_loss": [[741, "hinge-loss"]], "homogeneity_completeness_v_measure": [[742, "homogeneity-completeness-v-measure"]], "homogeneity_score": [[743, "homogeneity-score"]], "img_to_graph": [[592, "img-to-graph"]], "incr_mean_variance_axis": [[973, "incr-mean-variance-axis"]], "indexable": [[953, "indexable"]], "inplace_column_scale": [[974, "inplace-column-scale"]], "inplace_csr_column_scale": [[975, "inplace-csr-column-scale"]], "inplace_csr_row_normalize_l1": [[980, "inplace-csr-row-normalize-l1"]], "inplace_csr_row_normalize_l2": [[981, "inplace-csr-row-normalize-l2"]], "inplace_row_scale": [[976, "inplace-row-scale"]], "inplace_swap_column": [[977, "inplace-swap-column"]], "inplace_swap_row": [[978, "inplace-swap-row"]], "is_classifier": [[441, "is-classifier"]], "is_multilabel": [[960, "is-multilabel"]], "is_regressor": [[442, "is-regressor"]], "isotonic_regression": [[643, "isotonic-regression"]], "jaccard_score": [[744, "jaccard-score"]], "johnson_lindenstrauss_min_dim": [[904, "johnson-lindenstrauss-min-dim"]], "k-Nearest neighbors classifier": [[1030, "k-nearest-neighbors-classifier"]], "kNN-imputation of the missing values": [[187, "knn-imputation-of-the-missing-values"]], "k_means": [[465, "k-means"]], "kcachegrind": [[391, "kcachegrind"]], "kernel_metrics": [[771, "kernel-metrics"]], "kmeans_plusplus": [[466, "kmeans-plusplus"]], "kneighbors_graph": [[863, "kneighbors-graph"]], "l1_min_c": [[917, "l1-min-c"]], "label_binarize": [[894, "label-binarize"]], "label_ranking_average_precision_score": [[745, "label-ranking-average-precision-score"]], "label_ranking_loss": [[746, "label-ranking-loss"]], "laplacian_kernel": [[772, "laplacian-kernel"]], "lars_path": [[688, "lars-path"]], "lars_path_gram": [[689, "lars-path-gram"]], "lasso_path": [[690, "lasso-path"]], "learning_curve": [[834, "learning-curve"]], "ledoit_wolf": [[485, "ledoit-wolf"]], "ledoit_wolf_shrinkage": [[486, "ledoit-wolf-shrinkage"]], "linear_kernel": [[773, "linear-kernel"]], "load_breast_cancer": [[506, "load-breast-cancer"]], "load_diabetes": [[507, "load-diabetes"]], "load_digits": [[508, "load-digits"]], "load_files": [[509, "load-files"]], "load_iris": [[510, "load-iris"]], "load_linnerud": [[511, "load-linnerud"]], "load_sample_image": [[512, "load-sample-image"]], "load_sample_images": [[513, "load-sample-images"]], "load_svmlight_file": [[514, "load-svmlight-file"]], "load_svmlight_files": [[515, "load-svmlight-files"]], "load_wine": [[516, "load-wine"]], "locally_linear_embedding": [[699, "locally-linear-embedding"]], "log_loss": [[747, "log-loss"]], "macOS": [[383, "macos"]], "macOS compilers from Homebrew": [[383, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[383, "macos-compilers-from-conda-forge"]], "make_biclusters": [[517, "make-biclusters"]], "make_blobs": [[390, "make-blobs"], [518, "make-blobs"]], "make_checkerboard": [[519, "make-checkerboard"]], "make_circles": [[520, "make-circles"]], "make_classification": [[390, "make-classification"], [521, "make-classification"]], "make_column_selector": [[472, "make-column-selector"]], "make_column_transformer": [[473, "make-column-transformer"]], "make_friedman1": [[522, "make-friedman1"]], "make_friedman2": [[523, "make-friedman2"]], "make_friedman3": [[524, "make-friedman3"]], "make_gaussian_quantiles": [[525, "make-gaussian-quantiles"]], "make_hastie_10_2": [[526, "make-hastie-10-2"]], "make_low_rank_matrix": [[527, "make-low-rank-matrix"]], "make_moons": [[528, "make-moons"]], "make_multilabel_classification": [[529, "make-multilabel-classification"]], "make_pipeline": [[871, "make-pipeline"]], "make_regression": [[390, "make-regression"], [530, "make-regression"]], "make_s_curve": [[531, "make-s-curve"]], "make_scorer": [[748, "make-scorer"]], "make_sparse_coded_signal": [[532, "make-sparse-coded-signal"]], "make_sparse_spd_matrix": [[533, "make-sparse-spd-matrix"]], "make_sparse_uncorrelated": [[534, "make-sparse-uncorrelated"]], "make_spd_matrix": [[535, "make-spd-matrix"]], "make_swiss_roll": [[536, "make-swiss-roll"]], "make_union": [[872, "make-union"]], "manhattan_distances": [[774, "manhattan-distances"]], "matthews_corrcoef": [[749, "matthews-corrcoef"]], "max_error": [[750, "max-error"]], "maxabs_scale": [[895, "maxabs-scale"]], "mean_absolute_error": [[751, "mean-absolute-error"]], "mean_absolute_percentage_error": [[752, "mean-absolute-percentage-error"]], "mean_gamma_deviance": [[753, "mean-gamma-deviance"]], "mean_pinball_loss": [[754, "mean-pinball-loss"]], "mean_poisson_deviance": [[755, "mean-poisson-deviance"]], "mean_shift": [[467, "mean-shift"]], "mean_squared_error": [[756, "mean-squared-error"]], "mean_squared_log_error": [[757, "mean-squared-log-error"]], "mean_tweedie_deviance": [[758, "mean-tweedie-deviance"]], "mean_variance_axis": [[979, "mean-variance-axis"]], "median_absolute_error": [[759, "median-absolute-error"]], "min_cluster_size": [[89, "min-cluster-size"]], "min_pos": [[927, "min-pos"]], "min_samples": [[89, "min-samples"]], "minmax_scale": [[896, "minmax-scale"]], "multilabel_confusion_matrix": [[760, "multilabel-confusion-matrix"]], "murmurhash3_32": [[963, "murmurhash3-32"]], "mutual_info_classif": [[613, "mutual-info-classif"]], "mutual_info_regression": [[614, "mutual-info-regression"]], "mutual_info_score": [[761, "mutual-info-score"]], "nan_euclidean_distances": [[775, "nan-euclidean-distances"]], "ndcg_score": [[762, "ndcg-score"]], "non_negative_factorization": [[553, "non-negative-factorization"]], "normalize": [[897, "normalize"]], "normalized_mutual_info_score": [[763, "normalized-mutual-info-score"]], "oas": [[428, "oas"]], "orthogonal_mp": [[691, "orthogonal-mp"]], "orthogonal_mp_gram": [[692, "orthogonal-mp-gram"]], "pair_confusion_matrix": [[721, "pair-confusion-matrix"]], "paired_cosine_distances": [[776, "paired-cosine-distances"]], "paired_distances": [[777, "paired-distances"]], "paired_euclidean_distances": [[778, "paired-euclidean-distances"]], "paired_manhattan_distances": [[779, "paired-manhattan-distances"]], "pairwise_distances": [[784, "pairwise-distances"]], "pairwise_distances_argmin": [[785, "pairwise-distances-argmin"]], "pairwise_distances_argmin_min": [[786, "pairwise-distances-argmin-min"]], "pairwise_distances_chunked": [[787, "pairwise-distances-chunked"]], "pairwise_kernels": [[780, "pairwise-kernels"]], "parallel_backend": [[966, "parallel-backend"]], "parametrize_with_checks": [[942, "parametrize-with-checks"]], "partial_dependence": [[639, "partial-dependence"]], "permutation_importance": [[640, "permutation-importance"]], "permutation_test_score": [[835, "permutation-test-score"]], "pickle, joblib, and cloudpickle": [[409, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[924, "plot-tree"]], "polynomial_kernel": [[781, "polynomial-kernel"]], "power_transform": [[898, "power-transform"]], "precision_recall_curve": [[788, "precision-recall-curve"]], "precision_recall_fscore_support": [[789, "precision-recall-fscore-support"]], "precision_score": [[790, "precision-score"]], "process_routing": [[958, "process-routing"]], "quantile_transform": [[899, "quantile-transform"]], "r2_score": [[791, "r2-score"]], "r_regression": [[615, "r-regression"]], "radius_neighbors_graph": [[864, "radius-neighbors-graph"]], "rand_score": [[792, "rand-score"]], "randomized_range_finder": [[946, "randomized-range-finder"]], "randomized_svd": [[947, "randomized-svd"]], "rbf_kernel": [[782, "rbf-kernel"]], "recall_score": [[793, "recall-score"]], "reconstruct_from_patches_2d": [[593, "reconstruct-from-patches-2d"]], "register_parallel_backend": [[968, "register-parallel-backend"]], "resample": [[969, "resample"]], "ridge_regression": [[693, "ridge-regression"]], "robust_scale": [[900, "robust-scale"]], "roc_auc_score": [[794, "roc-auc-score"]], "roc_curve": [[795, "roc-curve"]], "root_mean_squared_error": [[796, "root-mean-squared-error"]], "root_mean_squared_log_error": [[797, "root-mean-squared-log-error"]], "safe_mask": [[970, "safe-mask"]], "safe_sparse_dot": [[948, "safe-sparse-dot"]], "safe_sqr": [[971, "safe-sqr"]], "sample_without_replacement": [[967, "sample-without-replacement"]], "scale": [[901, "scale"]], "scikit-learn Tutorials": [[1024, "scikit-learn-tutorials"]], "set_config": [[908, "set-config"]], "show_versions": [[909, "show-versions"]], "shrunk_covariance": [[487, "shrunk-covariance"]], "shuffle": [[972, "shuffle"]], "sigmoid_kernel": [[783, "sigmoid-kernel"]], "silhouette_samples": [[798, "silhouette-samples"]], "silhouette_score": [[799, "silhouette-score"]], "single_source_shortest_path_length": [[952, "single-source-shortest-path-length"]], "sklearn": [[2, "module-sklearn"], [1055, "sklearn"]], "sklearn.base": [[3, "module-sklearn.base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1051, "sklearn-base"], [1052, "sklearn-base"], [1053, "sklearn-base"], [1054, "sklearn-base"], [1054, "id2"], [1054, "id10"], [1055, "sklearn-base"], [1056, "sklearn-base"]], "sklearn.calibration": [[4, "module-sklearn.calibration"], [1048, "sklearn-calibration"], [1049, "sklearn-calibration"], [1051, "sklearn-calibration"], [1052, "sklearn-calibration"], [1052, "id7"], [1053, "sklearn-calibration"], [1054, "sklearn-calibration"], [1054, "id11"], [1055, "sklearn-calibration"], [1055, "id7"], [1056, "sklearn-calibration"], [1056, "id3"], [1057, "sklearn-calibration"]], "sklearn.cluster": [[5, "module-sklearn.cluster"], [1047, "sklearn-cluster"], [1047, "id2"], [1047, "id11"], [1047, "id24"], [1048, "sklearn-cluster"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id5"], [1050, "sklearn-cluster"], [1050, "id2"], [1050, "id5"], [1051, "sklearn-cluster"], [1052, "sklearn-cluster"], [1052, "id1"], [1052, "id8"], [1053, "sklearn-cluster"], [1053, "id8"], [1054, "sklearn-cluster"], [1054, "id12"], [1055, "sklearn-cluster"], [1055, "id8"], [1056, "sklearn-cluster"], [1056, "id4"], [1057, "sklearn-cluster"]], "sklearn.compose": [[6, "module-sklearn.compose"], [1047, "sklearn-compose"], [1047, "id3"], [1047, "id6"], [1047, "id12"], [1047, "id25"], [1048, "sklearn-compose"], [1048, "id9"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1051, "id5"], [1052, "sklearn-compose"], [1053, "sklearn-compose"], [1054, "sklearn-compose"], [1055, "sklearn-compose"], [1056, "sklearn-compose"], [1056, "id5"], [1057, "sklearn-compose"]], "sklearn.covariance": [[7, "module-sklearn.covariance"], [1047, "sklearn-covariance"], [1047, "id26"], [1051, "sklearn-covariance"], [1052, "sklearn-covariance"], [1053, "sklearn-covariance"], [1055, "sklearn-covariance"], [1056, "sklearn-covariance"]], "sklearn.cross_decomposition": [[8, "module-sklearn.cross_decomposition"], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"], [1051, "id6"], [1053, "sklearn-cross-decomposition"], [1055, "sklearn-cross-decomposition"], [1057, "sklearn-cross-decomposition"]], "sklearn.datasets": [[9, "module-sklearn.datasets"], [1047, "sklearn-datasets"], [1047, "id13"], [1047, "id27"], [1048, "sklearn-datasets"], [1048, "id10"], [1049, "sklearn-datasets"], [1050, "sklearn-datasets"], [1051, "sklearn-datasets"], [1052, "sklearn-datasets"], [1052, "id9"], [1053, "sklearn-datasets"], [1053, "id9"], [1054, "sklearn-datasets"], [1054, "id13"], [1055, "sklearn-datasets"], [1055, "id9"], [1056, "sklearn-datasets"], [1057, "sklearn-datasets"]], "sklearn.decomposition": [[10, "module-sklearn.decomposition"], [1047, "sklearn-decomposition"], [1047, "id4"], [1047, "id14"], [1047, "id28"], [1048, "sklearn-decomposition"], [1048, "id11"], [1049, "sklearn-decomposition"], [1050, "sklearn-decomposition"], [1050, "id6"], [1051, "sklearn-decomposition"], [1051, "id7"], [1052, "sklearn-decomposition"], [1052, "id10"], [1053, "sklearn-decomposition"], [1053, "id10"], [1054, "sklearn-decomposition"], [1054, "id14"], [1055, "sklearn-decomposition"], [1055, "id10"], [1056, "sklearn-decomposition"], [1057, "sklearn-decomposition"]], "sklearn.discriminant_analysis": [[11, "module-sklearn.discriminant_analysis"], [1047, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"], [1051, "sklearn-discriminant-analysis"], [1053, "sklearn-discriminant-analysis"], [1054, "sklearn-discriminant-analysis"], [1055, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[12, "module-sklearn.dummy"], [1047, "sklearn-dummy"], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1052, "sklearn-dummy"], [1053, "sklearn-dummy"], [1057, "sklearn-dummy"]], "sklearn.ensemble": [[13, "module-sklearn.ensemble"], [1047, "sklearn-ensemble"], [1047, "id29"], [1048, "sklearn-ensemble"], [1048, "id12"], [1049, "sklearn-ensemble"], [1050, "sklearn-ensemble"], [1050, "id7"], [1051, "sklearn-ensemble"], [1051, "id8"], [1052, "sklearn-ensemble"], [1052, "id2"], [1052, "id11"], [1053, "sklearn-ensemble"], [1054, "sklearn-ensemble"], [1054, "id3"], [1054, "id15"], [1055, "sklearn-ensemble"], [1055, "id11"], [1056, "sklearn-ensemble"], [1056, "id6"], [1057, "sklearn-ensemble"]], "sklearn.exceptions": [[14, "module-sklearn.exceptions"], [1051, "sklearn-exceptions"], [1055, "sklearn-exceptions"]], "sklearn.experimental": [[15, "module-sklearn.experimental"]], "sklearn.externals": [[1048, "sklearn-externals"]], "sklearn.feature_extraction": [[16, "module-sklearn.feature_extraction"], [1047, "sklearn-feature-extraction"], [1047, "id15"], [1047, "id30"], [1048, "sklearn-feature-extraction"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1050, "id8"], [1051, "sklearn-feature-extraction"], [1051, "id9"], [1052, "sklearn-feature-extraction"], [1052, "id12"], [1053, "sklearn-feature-extraction"], [1054, "sklearn-feature-extraction"], [1055, "sklearn-feature-extraction"], [1056, "sklearn-feature-extraction"], [1057, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[17, "module-sklearn.feature_selection"], [1047, "sklearn-feature-selection"], [1049, "sklearn-feature-selection"], [1050, "sklearn-feature-selection"], [1051, "sklearn-feature-selection"], [1052, "sklearn-feature-selection"], [1052, "id13"], [1053, "sklearn-feature-selection"], [1053, "id2"], [1053, "id11"], [1054, "sklearn-feature-selection"], [1054, "id16"], [1055, "sklearn-feature-selection"], [1055, "id12"], [1056, "sklearn-feature-selection"], [1057, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[18, "module-sklearn.gaussian_process"], [1047, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1051, "id10"], [1052, "sklearn-gaussian-process"], [1053, "sklearn-gaussian-process"], [1054, "sklearn-gaussian-process"], [1055, "sklearn-gaussian-process"]], "sklearn.impute": [[19, "module-sklearn.impute"], [1047, "sklearn-impute"], [1047, "id31"], [1048, "sklearn-impute"], [1048, "id13"], [1049, "sklearn-impute"], [1049, "id6"], [1050, "sklearn-impute"], [1051, "sklearn-impute"], [1052, "sklearn-impute"], [1053, "sklearn-impute"], [1053, "id12"], [1054, "sklearn-impute"], [1055, "sklearn-impute"], [1055, "id13"], [1056, "sklearn-impute"], [1057, "sklearn-impute"]], "sklearn.inspection": [[20, "module-sklearn.inspection"], [1048, "sklearn-inspection"], [1048, "id3"], [1048, "id14"], [1049, "sklearn-inspection"], [1049, "id7"], [1050, "sklearn-inspection"], [1050, "id11"], [1051, "sklearn-inspection"], [1052, "sklearn-inspection"], [1053, "sklearn-inspection"], [1054, "sklearn-inspection"], [1054, "id17"], [1055, "sklearn-inspection"], [1056, "sklearn-inspection"], [1056, "id7"], [1057, "sklearn-inspection"]], "sklearn.isotonic": [[21, "module-sklearn.isotonic"], [1047, "sklearn-isotonic"], [1048, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1051, "sklearn-isotonic"], [1053, "sklearn-isotonic"], [1054, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[22, "module-sklearn.kernel_approximation"], [1049, "sklearn-kernel-approximation"], [1051, "sklearn-kernel-approximation"], [1052, "sklearn-kernel-approximation"], [1053, "sklearn-kernel-approximation"], [1054, "sklearn-kernel-approximation"], [1055, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[23, "module-sklearn.kernel_ridge"], [1056, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[24, "module-sklearn.linear_model"], [1047, "sklearn-linear-model"], [1047, "id16"], [1047, "id32"], [1048, "sklearn-linear-model"], [1048, "id15"], [1049, "sklearn-linear-model"], [1050, "sklearn-linear-model"], [1050, "id9"], [1051, "sklearn-linear-model"], [1051, "id11"], [1052, "sklearn-linear-model"], [1052, "id3"], [1052, "id14"], [1053, "sklearn-linear-model"], [1053, "id13"], [1054, "sklearn-linear-model"], [1054, "id18"], [1055, "sklearn-linear-model"], [1056, "sklearn-linear-model"], [1056, "id8"], [1057, "sklearn-linear-model"]], "sklearn.manifold": [[25, "module-sklearn.manifold"], [1047, "sklearn-manifold"], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"], [1050, "sklearn-manifold"], [1051, "sklearn-manifold"], [1052, "sklearn-manifold"], [1052, "id15"], [1053, "sklearn-manifold"], [1053, "id14"], [1054, "sklearn-manifold"], [1054, "id19"], [1055, "sklearn-manifold"], [1057, "sklearn-manifold"]], "sklearn.metrics": [[26, "module-sklearn.metrics"], [1047, "sklearn-metrics"], [1047, "id17"], [1047, "id33"], [1048, "sklearn-metrics"], [1048, "id4"], [1048, "id16"], [1049, "sklearn-metrics"], [1049, "id2"], [1049, "id8"], [1050, "sklearn-metrics"], [1050, "id10"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id12"], [1052, "sklearn-metrics"], [1052, "id16"], [1053, "sklearn-metrics"], [1053, "id3"], [1053, "id15"], [1054, "sklearn-metrics"], [1055, "sklearn-metrics"], [1055, "id2"], [1055, "id14"], [1056, "sklearn-metrics"], [1057, "sklearn-metrics"]], "sklearn.mixture": [[27, "module-sklearn.mixture"], [1047, "sklearn-mixture"], [1047, "id34"], [1048, "sklearn-mixture"], [1052, "sklearn-mixture"], [1053, "sklearn-mixture"], [1055, "sklearn-mixture"], [1055, "id15"], [1057, "sklearn-mixture"]], "sklearn.model_selection": [[28, "module-sklearn.model_selection"], [1047, "sklearn-model-selection"], [1047, "id35"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1049, "id9"], [1049, "id13"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1051, "id13"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1054, "sklearn-model-selection"], [1054, "id20"], [1055, "sklearn-model-selection"], [1056, "sklearn-model-selection"], [1057, "sklearn-model-selection"]], "sklearn.multiclass": [[29, "module-sklearn.multiclass"], [1048, "sklearn-multiclass"], [1051, "sklearn-multiclass"], [1052, "sklearn-multiclass"], [1053, "sklearn-multiclass"]], "sklearn.multioutput": [[30, "module-sklearn.multioutput"], [1047, "sklearn-multioutput"], [1048, "sklearn-multioutput"], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1051, "id14"], [1054, "sklearn-multioutput"], [1055, "sklearn-multioutput"], [1056, "sklearn-multioutput"], [1057, "sklearn-multioutput"]], "sklearn.naive_bayes": [[31, "module-sklearn.naive_bayes"], [1047, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"], [1049, "id10"], [1050, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"], [1052, "sklearn-naive-bayes"], [1054, "sklearn-naive-bayes"], [1055, "sklearn-naive-bayes"]], "sklearn.neighbors": [[32, "module-sklearn.neighbors"], [1047, "sklearn-neighbors"], [1047, "id7"], [1047, "id18"], [1047, "id36"], [1048, "sklearn-neighbors"], [1048, "id5"], [1048, "id17"], [1049, "sklearn-neighbors"], [1049, "id11"], [1051, "sklearn-neighbors"], [1052, "sklearn-neighbors"], [1052, "id4"], [1052, "id17"], [1053, "sklearn-neighbors"], [1054, "sklearn-neighbors"], [1055, "sklearn-neighbors"], [1055, "id16"], [1056, "sklearn-neighbors"], [1057, "sklearn-neighbors"]], "sklearn.neural_network": [[33, "module-sklearn.neural_network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1052, "sklearn-neural-network"], [1053, "sklearn-neural-network"], [1054, "sklearn-neural-network"], [1054, "id21"], [1055, "sklearn-neural-network"]], "sklearn.pipeline": [[34, "module-sklearn.pipeline"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1052, "id18"], [1053, "sklearn-pipeline"], [1054, "sklearn-pipeline"], [1055, "sklearn-pipeline"], [1057, "sklearn-pipeline"]], "sklearn.preprocessing": [[35, "module-sklearn.preprocessing"], [1047, "sklearn-preprocessing"], [1047, "id19"], [1047, "id37"], [1048, "sklearn-preprocessing"], [1048, "id18"], [1049, "sklearn-preprocessing"], [1049, "id12"], [1050, "sklearn-preprocessing"], [1051, "sklearn-preprocessing"], [1051, "id15"], [1052, "sklearn-preprocessing"], [1052, "id19"], [1053, "sklearn-preprocessing"], [1053, "id4"], [1053, "id16"], [1054, "sklearn-preprocessing"], [1054, "id4"], [1054, "id22"], [1055, "sklearn-preprocessing"], [1055, "id17"], [1056, "sklearn-preprocessing"], [1056, "id9"], [1057, "sklearn-preprocessing"]], "sklearn.random_projection": [[36, "module-sklearn.random_projection"], [1053, "sklearn-random-projection"]], "sklearn.semi_supervised": [[37, "module-sklearn.semi_supervised"], [1049, "sklearn-semi-supervised"], [1050, "sklearn-semi-supervised"], [1051, "sklearn-semi-supervised"], [1051, "id3"], [1051, "id16"], [1055, "sklearn-semi-supervised"]], "sklearn.svm": [[38, "module-sklearn.svm"], [1047, "sklearn-svm"], [1047, "id38"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1052, "sklearn-svm"], [1052, "id20"], [1053, "sklearn-svm"], [1054, "sklearn-svm"], [1055, "sklearn-svm"]], "sklearn.tree": [[39, "module-sklearn.tree"], [1047, "sklearn-tree"], [1048, "sklearn-tree"], [1048, "id19"], [1049, "sklearn-tree"], [1050, "sklearn-tree"], [1051, "sklearn-tree"], [1051, "id17"], [1052, "sklearn-tree"], [1052, "id21"], [1053, "sklearn-tree"], [1053, "id5"], [1053, "id17"], [1054, "sklearn-tree"], [1054, "id5"], [1054, "id23"], [1055, "sklearn-tree"], [1055, "id3"], [1055, "id18"], [1056, "sklearn-tree"], [1056, "id10"], [1057, "sklearn-tree"]], "sklearn.utils": [[40, "module-sklearn.utils"], [1047, "sklearn-utils"], [1047, "id20"], [1047, "id39"], [1048, "sklearn-utils"], [1049, "sklearn-utils"], [1049, "id14"], [1050, "sklearn-utils"], [1050, "id12"], [1051, "sklearn-utils"], [1051, "id18"], [1052, "sklearn-utils"], [1052, "id5"], [1052, "id22"], [1053, "sklearn-utils"], [1053, "id18"], [1054, "sklearn-utils"], [1054, "id6"], [1054, "id24"], [1055, "sklearn-utils"], [1056, "sklearn-utils"], [1056, "id11"], [1057, "sklearn-utils"]], "sklearn.utils.sparsefuncs": [[1048, "sklearn-utils-sparsefuncs"]], "skops.io": [[409, "skops-io"]], "smacof": [[700, "smacof"]], "solido": [[1022, "id23"]], "sort_graph_by_row_values": [[865, "sort-graph-by-row-values"]], "sparse_encode": [[554, "sparse-encode"]], "spectral_clustering": [[468, "spectral-clustering"]], "spectral_embedding": [[701, "spectral-embedding"]], "t-SNE: The effect of various perplexity values on the shape": [[244, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[995, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[800, "top-k-accuracy-score"]], "train_test_split": [[836, "train-test-split"]], "transform and inverse_transform methods": [[1031, null]], "trustworthiness": [[702, "trustworthiness"]], "type_of_target": [[961, "type-of-target"]], "unique_labels": [[962, "unique-labels"]], "v_measure_score": [[801, "v-measure-score"]], "validation_curve": [[837, "validation-curve"]], "ward_tree": [[469, "ward-tree"]], "weighted_mode": [[949, "weighted-mode"]], "zero_one_loss": [[802, "zero-one-loss"]], "\u201cStatlog\u201d German credit dataset": [[271, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[399, "term-1d", true]], "1d array": [[399, "term-1d-array", true]], "2d": [[399, "term-2d", true]], "2d array": [[399, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[472, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[620, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[624, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[625, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[627, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[628, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[630, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[937, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[964, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[399, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[926, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[955, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[956, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[955, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[460, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[446, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[447, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[938, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[939, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[940, "sklearn.utils.discovery.all_functions", false]], "api": [[399, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[650, "sklearn.linear_model.ARDRegression", false]], "array-like": [[399, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[928, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[929, "sklearn.utils.assert_all_finite", false]], "attribute": [[399, "term-attribute", true]], "attributes": [[399, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[712, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[959, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[399, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[850, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[429, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[803, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[651, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[866, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[430, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[430, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[457, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[459, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.Binarizer", false]], "binary": [[399, "term-binary", true]], "birch (class in sklearn.cluster)": [[448, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[620, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[624, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[625, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[627, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[628, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[630, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[715, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[925, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[443, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[445, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[444, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[399, "term-callable", true]], "categorical feature": [[399, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[488, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[931, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[932, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[941, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[642, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[982, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[983, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[933, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[934, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[717, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[984, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[930, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[718, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[399, "term-class_weight", true]], "classes_": [[399, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[599, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[600, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[680, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[681, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[805, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[806, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[809, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[820, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[870, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[719, "sklearn.metrics.classification_report", false]], "classifier": [[399, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[841, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[432, "sklearn.base.ClassifierMixin", false]], "classifiers": [[399, "term-classifiers", true]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[431, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[492, "sklearn.datasets.clear_data_home", false]], "clone": [[399, "term-clone", true]], "clone() (in module sklearn.base)": [[440, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[620, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[624, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[625, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[627, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[628, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[630, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[399, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[461, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[462, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[399, "term-clusterer", true]], "clusterers": [[399, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[433, "sklearn.base.ClusterMixin", false]], "coef_": [[399, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[912, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[913, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[914, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[915, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[916, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[985, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[470, "sklearn.compose.ColumnTransformer", false]], "common tests": [[399, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[847, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.completeness_score", false]], "components_": [[399, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[935, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[463, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[936, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[474, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[724, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[399, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[954, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[955, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[720, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[399, "term-continuous", true]], "continuous multi-output": [[399, "term-continuous-multi-output", true]], "continuous multioutput": [[399, "term-continuous-multioutput", true]], "convergencewarning": [[577, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[594, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[726, "sklearn.metrics.coverage_error", false]], "cross fitting": [[399, "term-0", true]], "cross validation": [[399, "term-1", true]], "cross-fitting": [[399, "term-cross-fitting", true]], "cross-validation": [[399, "term-cross-validation", true]], "cross-validation estimator": [[399, "term-cross-validation-estimator", true]], "cross-validation generator": [[399, "term-cross-validation-generator", true]], "cross-validation splitter": [[399, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.cross_validate", false]], "cv": [[399, "term-cv", true]], "cv splitter": [[399, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[399, "term-data-leakage", true]], "data type": [[399, "term-data-type", true]], "dataconversionwarning": [[578, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[579, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[450, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[426, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.dcg_score", false]], "decision_function": [[399, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[637, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[918, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[919, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[965, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[399, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[944, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[434, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[937, "sklearn.utils.deprecated", false]], "deprecation": [[399, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[733, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[704, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[620, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[624, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[625, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[627, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[628, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[630, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[551, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[552, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[537, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[587, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[399, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[964, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[964, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[705, "sklearn.metrics.DistanceMetric", false]], "docstring": [[399, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[399, "term-double-underscore", true]], "double underscore notation": [[399, "term-double-underscore-notation", true]], "dtype": [[399, "term-dtype", true]], "duck typing": [[399, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[557, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[558, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[493, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[399, "term-early-stopping", true]], "efficiencywarning": [[580, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[652, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[475, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[399, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[483, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[476, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[464, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[399, "term-estimator", true]], "estimator instance": [[399, "term-estimator-instance", true]], "estimator tags": [[399, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[943, "sklearn.utils.estimator_html_repr", false]], "estimators": [[399, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[561, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[562, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[563, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[564, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[569, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[570, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[571, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[572, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[399, "term-evaluation-metric", true]], "evaluation metrics": [[399, "term-evaluation-metrics", true]], "examples": [[399, "term-examples", true]], "experimental": [[399, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[922, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[923, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[590, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[920, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[921, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[538, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[945, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[539, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[427, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.fbeta_score", false]], "feature": [[399, "term-feature", true]], "feature extractor": [[399, "term-feature-extractor", true]], "feature extractors": [[399, "term-feature-extractors", true]], "feature vector": [[399, "term-feature-vector", true]], "feature_importances_": [[399, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[559, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[560, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[563, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[564, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[565, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[566, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[570, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[571, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[572, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[918, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[919, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[920, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[921, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[869, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[870, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[451, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[588, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[399, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[869, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_covtype", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[503, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[504, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[399, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[696, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[697, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[399, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[451, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[433, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[437, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[399, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[439, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[607, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[696, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[697, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[581, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[399, "term-fitted", true]], "fitting": [[399, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[805, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[964, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[444, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[637, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[638, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[703, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[704, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[706, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[707, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[708, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[812, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[829, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[444, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[703, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[704, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[706, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[707, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[708, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.fromkeys", false]], "function": [[399, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[399, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[654, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[804, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[848, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[902, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[950, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[951, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[632, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[505, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[399, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[431, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[436, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[607, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[430, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[429, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[696, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[697, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[807, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[808, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[811, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[813, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[814, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[815, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[816, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[819, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[821, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[822, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[823, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[824, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[825, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[826, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[827, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[705, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[399, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[807, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[808, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[811, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[813, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[814, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[815, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[816, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[819, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[821, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[822, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[823, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[824, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[825, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[826, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[827, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[399, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[429, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[620, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[624, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[625, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[627, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[628, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[630, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[696, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[697, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[957, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[738, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[739, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[430, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[430, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[607, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[484, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[477, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[478, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[591, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[806, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[807, "sklearn.model_selection.GroupKFold", false]], "groups": [[399, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[808, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[809, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[810, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[740, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[986, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[595, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[452, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[742, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[743, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[655, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[399, "term-hyper-parameter", true]], "hyperparameter": [[399, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[620, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[624, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[625, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[627, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[628, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[630, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[592, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[399, "term-imputation", true]], "impute": [[399, "term-impute", true]], "inconsistentversionwarning": [[582, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[973, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[399, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[953, "sklearn.utils.indexable", false]], "induction": [[399, "term-induction", true]], "inductive": [[399, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[883, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[884, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[891, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[974, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[975, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[980, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[981, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[976, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[977, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[978, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[607, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[441, "sklearn.base.is_classifier", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[960, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[442, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[620, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[624, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[625, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[627, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[628, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[630, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[569, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[694, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[643, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[641, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[633, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[744, "sklearn.metrics.jaccard_score", false]], "joblib": [[399, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[904, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[465, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KDTree", false]], "kernel": [[399, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[855, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[649, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[811, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[453, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[466, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[863, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[853, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[854, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[634, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[917, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[399, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[745, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[746, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[905, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[399, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[906, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[656, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[658, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[542, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[399, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[814, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[815, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[816, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[485, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[486, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[479, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[910, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[911, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[515, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[516, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[699, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[695, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[856, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[747, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[664, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[665, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[472, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[473, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[871, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[748, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[535, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[536, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[872, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[749, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.max_error", false]], "max_iter": [[399, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[696, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[467, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[757, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[758, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[454, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[759, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[399, "term-memmapping", true]], "memory": [[399, "term-memory", true]], "memory map": [[399, "term-memory-map", true]], "memory mapping": [[399, "term-memory-mapping", true]], "meta-estimator": [[399, "term-meta-estimator", true]], "meta-estimators": [[399, "term-meta-estimators", true]], "metadata": [[399, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[954, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[955, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[399, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[435, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[399, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[956, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[399, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[927, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[480, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[455, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[544, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[545, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[399, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[635, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[867, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[868, "sklearn.neural_network.MLPRegressor", false]], "module": [[2, "module-sklearn", false], [3, "module-sklearn.base", false], [4, "module-sklearn.calibration", false], [5, "module-sklearn.cluster", false], [6, "module-sklearn.compose", false], [7, "module-sklearn.covariance", false], [8, "module-sklearn.cross_decomposition", false], [9, "module-sklearn.datasets", false], [10, "module-sklearn.decomposition", false], [11, "module-sklearn.discriminant_analysis", false], [12, "module-sklearn.dummy", false], [13, "module-sklearn.ensemble", false], [14, "module-sklearn.exceptions", false], [15, "module-sklearn.experimental", false], [16, "module-sklearn.feature_extraction", false], [16, "module-sklearn.feature_extraction.image", false], [16, "module-sklearn.feature_extraction.text", false], [17, "module-sklearn.feature_selection", false], [18, "module-sklearn.gaussian_process", false], [18, "module-sklearn.gaussian_process.kernels", false], [19, "module-sklearn.impute", false], [20, "module-sklearn.inspection", false], [21, "module-sklearn.isotonic", false], [22, "module-sklearn.kernel_approximation", false], [23, "module-sklearn.kernel_ridge", false], [24, "module-sklearn.linear_model", false], [25, "module-sklearn.manifold", false], [26, "module-sklearn.metrics", false], [26, "module-sklearn.metrics.cluster", false], [26, "module-sklearn.metrics.pairwise", false], [27, "module-sklearn.mixture", false], [28, "module-sklearn.model_selection", false], [29, "module-sklearn.multiclass", false], [30, "module-sklearn.multioutput", false], [31, "module-sklearn.naive_bayes", false], [32, "module-sklearn.neighbors", false], [33, "module-sklearn.neural_network", false], [34, "module-sklearn.pipeline", false], [35, "module-sklearn.preprocessing", false], [36, "module-sklearn.random_projection", false], [37, "module-sklearn.semi_supervised", false], [38, "module-sklearn.svm", false], [39, "module-sklearn.tree", false], [40, "module-sklearn.utils", false], [40, "module-sklearn.utils.arrayfuncs", false], [40, "module-sklearn.utils.class_weight", false], [40, "module-sklearn.utils.discovery", false], [40, "module-sklearn.utils.estimator_checks", false], [40, "module-sklearn.utils.extmath", false], [40, "module-sklearn.utils.graph", false], [40, "module-sklearn.utils.metadata_routing", false], [40, "module-sklearn.utils.metaestimators", false], [40, "module-sklearn.utils.multiclass", false], [40, "module-sklearn.utils.parallel", false], [40, "module-sklearn.utils.random", false], [40, "module-sklearn.utils.sparsefuncs", false], [40, "module-sklearn.utils.sparsefuncs_fast", false], [40, "module-sklearn.utils.validation", false], [585, "module-sklearn.experimental.enable_halving_search_cv", false], [586, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[399, "term-multi-class", true]], "multi-class multi-output": [[399, "term-multi-class-multi-output", true]], "multi-label": [[399, "term-multi-label", true]], "multi-output": [[399, "term-multi-output", true]], "multi-output continuous": [[399, "term-multi-output-continuous", true]], "multi-output multi-class": [[399, "term-multi-output-multi-class", true]], "multiclass": [[399, "term-multiclass", true]], "multiclass multioutput": [[399, "term-multiclass-multioutput", true]], "multilabel": [[399, "term-multilabel", true]], "multilabel indicator matrices": [[399, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[399, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[839, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[760, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[849, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[399, "term-multioutput", true]], "multioutput continuous": [[399, "term-multioutput-continuous", true]], "multioutput multiclass": [[399, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[842, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[843, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[668, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[669, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[963, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[614, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[838, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[839, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[399, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[548, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[620, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[624, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[625, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[627, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[628, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[630, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[399, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[471, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[548, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[573, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[574, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[575, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[576, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[603, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[806, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[809, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[820, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[869, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[870, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[399, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[399, "term-n_iter_no_change", true]], "n_jobs": [[399, "term-n_jobs", true]], "n_outputs": [[399, "term-n_outputs", true]], "n_samples": [[399, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[912, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[913, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[914, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[915, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[916, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[399, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[573, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[574, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[575, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[576, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[870, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[470, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[399, "term-narrative-docs", true]], "narrative documentation": [[399, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[762, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[857, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[858, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[546, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[553, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[763, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[583, "sklearn.exceptions.NotFittedError", false]], "np": [[399, "term-np", true]], "nusvc (class in sklearn.svm)": [[912, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[913, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[481, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[428, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[914, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[436, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[838, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[839, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[399, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[456, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[692, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[399, "term-out-of-core", true]], "outlier detector": [[399, "term-outlier-detector", true]], "outlier detectors": [[399, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[437, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[840, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[399, "term-outputs", true]], "pair": [[399, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[721, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[399, "term-pairwise-metric", true]], "pairwise metrics": [[399, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[785, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[786, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[787, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[964, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[966, "sklearn.utils.parallel_backend", false]], "param": [[399, "term-param", true]], "parameter": [[399, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[817, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[399, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[818, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[942, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[399, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[639, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[399, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[638, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[652, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[653, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[658, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[659, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[668, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[547, "sklearn.decomposition.PCA", false]], "pd": [[399, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[674, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[640, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[870, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[444, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[637, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[638, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[703, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[704, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[706, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[707, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[708, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[812, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[829, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[924, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[489, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[490, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[491, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[399, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[885, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[788, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[789, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[399, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[819, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[399, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[399, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[399, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[707, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[399, "term-predictor", true]], "predictors": [[399, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[964, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[912, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[915, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[912, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[915, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[958, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[615, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[864, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.rand_score", false]], "random_state": [[399, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[570, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[571, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[946, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[947, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[820, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[572, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[782, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[647, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[593, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[399, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[968, "sklearn.utils.register_parallel_backend", false]], "regressor": [[399, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[844, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[438, "sklearn.base.RegressorMixin", false]], "regressors": [[399, "term-regressors", true]], "repeatedkfold (class in sklearn.model_selection)": [[821, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[620, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[624, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[625, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[627, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[628, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[630, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[969, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[678, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[693, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[680, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[681, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[679, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[900, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[795, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[708, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[796, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[797, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[955, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[399, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[970, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[948, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[971, "sklearn.utils.safe_sqr", false]], "sample": [[399, "term-sample", true]], "sample properties": [[399, "term-sample-properties", true]], "sample property": [[399, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[399, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[967, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[399, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[901, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[399, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[399, "term-scikit-learn-contrib", true]], "score": [[399, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[432, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[434, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[438, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[399, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[399, "term-scorer", true]], "scoring": [[399, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[399, "term-semi-supervised", true]], "semi-supervised learning": [[399, "term-semi-supervised-learning", true]], "semisupervised": [[399, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[608, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[908, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[696, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[439, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[607, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[399, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[429, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[446, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[447, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[450, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[452, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[454, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[456, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[457, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[458, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[459, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[569, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[620, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[624, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[625, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[627, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[628, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[630, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[677, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[696, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[697, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[698, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[803, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[804, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[855, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[856, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[858, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[907, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[914, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[842, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[443, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[471, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[475, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[476, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[477, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[478, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[479, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[480, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[481, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[482, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[556, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[557, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[558, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[561, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[562, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[563, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[564, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[570, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[571, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[616, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[617, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[649, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[650, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[651, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[652, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[653, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[654, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[655, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[656, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[657, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[658, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[659, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[660, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[661, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[662, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[663, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[666, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[667, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[668, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[669, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[670, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[671, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[675, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[676, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[678, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[680, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[681, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[679, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[685, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[686, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[805, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[838, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[839, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[840, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[841, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[843, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[844, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[845, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[846, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[847, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[848, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[849, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[852, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[853, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[857, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[860, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[861, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[867, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[868, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[905, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[906, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[911, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[912, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[913, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[915, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[916, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[918, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[919, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[920, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[921, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[807, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[808, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[813, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[815, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[824, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[682, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[683, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[684, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[909, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[487, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[482, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[972, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[823, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[783, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[798, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[799, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[636, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[952, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[2, "module-sklearn", false]], "sklearn.base": [[3, "module-sklearn.base", false]], "sklearn.calibration": [[4, "module-sklearn.calibration", false]], "sklearn.cluster": [[5, "module-sklearn.cluster", false]], "sklearn.compose": [[6, "module-sklearn.compose", false]], "sklearn.covariance": [[7, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[8, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[9, "module-sklearn.datasets", false]], "sklearn.decomposition": [[10, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[11, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[12, "module-sklearn.dummy", false]], "sklearn.ensemble": [[13, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[14, "module-sklearn.exceptions", false]], "sklearn.experimental": [[15, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[585, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[586, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[16, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[16, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[16, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[17, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[18, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[18, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[19, "module-sklearn.impute", false]], "sklearn.inspection": [[20, "module-sklearn.inspection", false]], "sklearn.isotonic": [[21, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[22, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[23, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[24, "module-sklearn.linear_model", false]], "sklearn.manifold": [[25, "module-sklearn.manifold", false]], "sklearn.metrics": [[26, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[26, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[26, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[27, "module-sklearn.mixture", false]], "sklearn.model_selection": [[28, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[29, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[30, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[31, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[32, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[33, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[34, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[35, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[36, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[37, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[38, "module-sklearn.svm", false]], "sklearn.tree": [[39, "module-sklearn.tree", false]], "sklearn.utils": [[40, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[40, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[40, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[40, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[40, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[40, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[40, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[40, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[40, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[40, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[40, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[40, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[40, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[40, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[40, "module-sklearn.utils.validation", false]], "slep": [[399, "term-SLEP", true]], "sleps": [[399, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[700, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[865, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[399, "term-sparse-graph", true]], "sparse matrix": [[399, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[652, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[658, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[666, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[668, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[554, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[548, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[549, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[903, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[664, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[665, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[672, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[673, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[674, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[682, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[683, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[684, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[910, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[468, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[701, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[457, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[458, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[459, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[697, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.SplineTransformer", false]], "split": [[399, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[807, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[808, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[811, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[813, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[814, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[815, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[816, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[819, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[821, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[822, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[823, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[824, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[825, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[826, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[827, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[573, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[574, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[566, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[568, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[565, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[567, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[559, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[560, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[890, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[399, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[824, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[825, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[826, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[630, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[399, "term-supervised", true]], "supervised learning": [[399, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[915, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[916, "sklearn.svm.SVR", false]], "target": [[399, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[891, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[399, "term-targets", true]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[596, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[685, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[618, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[619, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[620, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[622, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[621, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[624, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[625, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[626, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[627, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[629, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[628, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[630, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[603, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[827, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[800, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[836, "sklearn.model_selection.train_test_split", false]], "transduction": [[399, "term-transduction", true]], "transductive": [[399, "term-transductive", true]], "transform": [[399, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[448, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[449, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[451, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[453, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[455, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[470, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[488, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[489, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[490, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[491, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[537, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[538, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[539, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[540, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[541, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[542, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[543, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[544, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[545, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[546, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[547, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[548, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[549, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[550, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[555, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[572, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[573, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[574, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[575, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[576, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[587, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[588, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[589, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[594, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[595, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[596, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[597, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[598, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[599, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[600, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[601, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[602, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[603, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[604, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[605, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[607, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[606, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[608, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[609, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[633, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[634, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[635, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[636, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[641, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[644, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[645, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[646, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[647, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[648, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[694, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[695, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[806, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[809, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[810, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[820, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[854, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[859, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[862, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[866, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[869, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[870, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[873, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[874, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[875, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[876, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[877, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[878, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[879, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[880, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[881, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[882, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[883, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[884, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[885, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[886, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[887, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[888, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[889, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[890, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[891, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[902, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[903, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[471, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[399, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[439, "sklearn.base.TransformerMixin", false]], "transformers": [[399, "term-transformers", true]], "truncatedsvd (class in sklearn.decomposition)": [[550, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[702, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[698, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[828, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[686, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[850, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[851, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[961, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[584, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[962, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[399, "term-unlabeled", true]], "unlabeled data": [[399, "term-unlabeled-data", true]], "unsupervised": [[399, "term-unsupervised", true]], "unsupervised learning": [[399, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[801, "sklearn.metrics.v_measure_score", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[955, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[837, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[829, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[623, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[925, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[609, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[399, "term-vectorizer", true]], "vectorizers": [[399, "term-vectorizers", true]], "verbose": [[399, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[575, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[576, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[469, "sklearn.cluster.ward_tree", false]], "warm_start": [[399, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[631, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[399, "term-X", true]], "xt": [[399, "term-Xt", true]], "y": [[399, "term-Y", true], [399, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[802, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[2, 0, 0, "-", "sklearn"]], "sklearn": [[3, 0, 0, "-", "base"], [4, 0, 0, "-", "calibration"], [5, 0, 0, "-", "cluster"], [6, 0, 0, "-", "compose"], [474, 4, 1, "", "config_context"], [7, 0, 0, "-", "covariance"], [8, 0, 0, "-", "cross_decomposition"], [9, 0, 0, "-", "datasets"], [10, 0, 0, "-", "decomposition"], [11, 0, 0, "-", "discriminant_analysis"], [12, 0, 0, "-", "dummy"], [13, 0, 0, "-", "ensemble"], [14, 0, 0, "-", "exceptions"], [15, 0, 0, "-", "experimental"], [16, 0, 0, "-", "feature_extraction"], [17, 0, 0, "-", "feature_selection"], [18, 0, 0, "-", "gaussian_process"], [632, 4, 1, "", "get_config"], [19, 0, 0, "-", "impute"], [20, 0, 0, "-", "inspection"], [21, 0, 0, "-", "isotonic"], [22, 0, 0, "-", "kernel_approximation"], [23, 0, 0, "-", "kernel_ridge"], [24, 0, 0, "-", "linear_model"], [25, 0, 0, "-", "manifold"], [26, 0, 0, "-", "metrics"], [27, 0, 0, "-", "mixture"], [28, 0, 0, "-", "model_selection"], [29, 0, 0, "-", "multiclass"], [30, 0, 0, "-", "multioutput"], [31, 0, 0, "-", "naive_bayes"], [32, 0, 0, "-", "neighbors"], [33, 0, 0, "-", "neural_network"], [34, 0, 0, "-", "pipeline"], [35, 0, 0, "-", "preprocessing"], [36, 0, 0, "-", "random_projection"], [37, 0, 0, "-", "semi_supervised"], [908, 4, 1, "", "set_config"], [909, 4, 1, "", "show_versions"], [38, 0, 0, "-", "svm"], [39, 0, 0, "-", "tree"], [40, 0, 0, "-", "utils"]], "sklearn.base": [[429, 1, 1, "", "BaseEstimator"], [430, 1, 1, "", "BiclusterMixin"], [431, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [432, 1, 1, "", "ClassifierMixin"], [433, 1, 1, "", "ClusterMixin"], [434, 1, 1, "", "DensityMixin"], [435, 1, 1, "", "MetaEstimatorMixin"], [436, 1, 1, "", "OneToOneFeatureMixin"], [437, 1, 1, "", "OutlierMixin"], [438, 1, 1, "", "RegressorMixin"], [439, 1, 1, "", "TransformerMixin"], [440, 4, 1, "", "clone"], [441, 4, 1, "", "is_classifier"], [442, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[429, 2, 1, "", "get_metadata_routing"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[430, 3, 1, "", "biclusters_"], [430, 2, 1, "", "get_indices"], [430, 2, 1, "", "get_shape"], [430, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[431, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[432, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[433, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[434, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[436, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[437, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[438, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "set_output"]], "sklearn.calibration": [[443, 1, 1, "", "CalibratedClassifierCV"], [444, 1, 1, "", "CalibrationDisplay"], [445, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "predict_proba"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[444, 2, 1, "", "from_estimator"], [444, 2, 1, "", "from_predictions"], [444, 2, 1, "", "plot"]], "sklearn.cluster": [[446, 1, 1, "", "AffinityPropagation"], [447, 1, 1, "", "AgglomerativeClustering"], [448, 1, 1, "", "Birch"], [449, 1, 1, "", "BisectingKMeans"], [450, 1, 1, "", "DBSCAN"], [451, 1, 1, "", "FeatureAgglomeration"], [452, 1, 1, "", "HDBSCAN"], [453, 1, 1, "", "KMeans"], [454, 1, 1, "", "MeanShift"], [455, 1, 1, "", "MiniBatchKMeans"], [456, 1, 1, "", "OPTICS"], [457, 1, 1, "", "SpectralBiclustering"], [458, 1, 1, "", "SpectralClustering"], [459, 1, 1, "", "SpectralCoclustering"], [460, 4, 1, "", "affinity_propagation"], [461, 4, 1, "", "cluster_optics_dbscan"], [462, 4, 1, "", "cluster_optics_xi"], [463, 4, 1, "", "compute_optics_graph"], [426, 4, 1, "", "dbscan"], [464, 4, 1, "", "estimate_bandwidth"], [465, 4, 1, "", "k_means"], [466, 4, 1, "", "kmeans_plusplus"], [467, 4, 1, "", "mean_shift"], [468, 4, 1, "", "spectral_clustering"], [469, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "partial_fit"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_fit_request"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[451, 2, 1, "", "fit"], [451, 3, 1, "", "fit_predict"], [451, 2, 1, "", "fit_transform"], [451, 2, 1, "", "get_feature_names_out"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "inverse_transform"], [451, 2, 1, "", "set_output"], [451, 2, 1, "", "set_params"], [451, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[452, 2, 1, "", "dbscan_clustering"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "fit_transform"], [453, 2, 1, "", "get_feature_names_out"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "predict"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_fit_request"], [453, 2, 1, "", "set_output"], [453, 2, 1, "", "set_params"], [453, 2, 1, "", "set_score_request"], [453, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "predict"], [454, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "fit_transform"], [455, 2, 1, "", "get_feature_names_out"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "partial_fit"], [455, 2, 1, "", "predict"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_fit_request"], [455, 2, 1, "", "set_output"], [455, 2, 1, "", "set_params"], [455, 2, 1, "", "set_partial_fit_request"], [455, 2, 1, "", "set_score_request"], [455, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_predict"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[457, 3, 1, "", "biclusters_"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_indices"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_shape"], [457, 2, 1, "", "get_submatrix"], [457, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_predict"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[459, 3, 1, "", "biclusters_"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_indices"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_shape"], [459, 2, 1, "", "get_submatrix"], [459, 2, 1, "", "set_params"]], "sklearn.compose": [[470, 1, 1, "", "ColumnTransformer"], [471, 1, 1, "", "TransformedTargetRegressor"], [472, 1, 1, "", "make_column_selector"], [473, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[470, 2, 1, "", "fit"], [470, 2, 1, "", "fit_transform"], [470, 2, 1, "", "get_feature_names_out"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 3, 1, "", "named_transformers_"], [470, 2, 1, "", "set_output"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 3, 1, "", "n_features_in_"], [471, 2, 1, "", "predict"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[472, 2, 1, "", "__call__"]], "sklearn.covariance": [[475, 1, 1, "", "EllipticEnvelope"], [476, 1, 1, "", "EmpiricalCovariance"], [477, 1, 1, "", "GraphicalLasso"], [478, 1, 1, "", "GraphicalLassoCV"], [479, 1, 1, "", "LedoitWolf"], [480, 1, 1, "", "MinCovDet"], [481, 1, 1, "", "OAS"], [482, 1, 1, "", "ShrunkCovariance"], [483, 4, 1, "", "empirical_covariance"], [484, 4, 1, "", "graphical_lasso"], [485, 4, 1, "", "ledoit_wolf"], [486, 4, 1, "", "ledoit_wolf_shrinkage"], [428, 4, 1, "", "oas"], [487, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[475, 2, 1, "", "correct_covariance"], [475, 2, 1, "", "decision_function"], [475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "fit_predict"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "predict"], [475, 2, 1, "", "reweight_covariance"], [475, 2, 1, "", "score"], [475, 2, 1, "", "score_samples"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[480, 2, 1, "", "correct_covariance"], [480, 2, 1, "", "error_norm"], [480, 2, 1, "", "fit"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "get_precision"], [480, 2, 1, "", "mahalanobis"], [480, 2, 1, "", "reweight_covariance"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[481, 2, 1, "", "error_norm"], [481, 2, 1, "", "fit"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "get_precision"], [481, 2, 1, "", "mahalanobis"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[482, 2, 1, "", "error_norm"], [482, 2, 1, "", "fit"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "get_precision"], [482, 2, 1, "", "mahalanobis"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[488, 1, 1, "", "CCA"], [489, 1, 1, "", "PLSCanonical"], [490, 1, 1, "", "PLSRegression"], [491, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[488, 2, 1, "", "fit"], [488, 2, 1, "", "fit_transform"], [488, 2, 1, "", "get_feature_names_out"], [488, 2, 1, "", "get_metadata_routing"], [488, 2, 1, "", "get_params"], [488, 2, 1, "", "inverse_transform"], [488, 2, 1, "", "predict"], [488, 2, 1, "", "score"], [488, 2, 1, "", "set_output"], [488, 2, 1, "", "set_params"], [488, 2, 1, "", "set_predict_request"], [488, 2, 1, "", "set_score_request"], [488, 2, 1, "", "set_transform_request"], [488, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_metadata_routing"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "inverse_transform"], [489, 2, 1, "", "predict"], [489, 2, 1, "", "score"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "set_predict_request"], [489, 2, 1, "", "set_score_request"], [489, 2, 1, "", "set_transform_request"], [489, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_metadata_routing"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "inverse_transform"], [490, 2, 1, "", "predict"], [490, 2, 1, "", "score"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "set_predict_request"], [490, 2, 1, "", "set_score_request"], [490, 2, 1, "", "set_transform_request"], [490, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[491, 2, 1, "", "fit"], [491, 2, 1, "", "fit_transform"], [491, 2, 1, "", "get_feature_names_out"], [491, 2, 1, "", "get_metadata_routing"], [491, 2, 1, "", "get_params"], [491, 2, 1, "", "set_output"], [491, 2, 1, "", "set_params"], [491, 2, 1, "", "transform"]], "sklearn.datasets": [[492, 4, 1, "", "clear_data_home"], [493, 4, 1, "", "dump_svmlight_file"], [494, 4, 1, "", "fetch_20newsgroups"], [495, 4, 1, "", "fetch_20newsgroups_vectorized"], [496, 4, 1, "", "fetch_california_housing"], [497, 4, 1, "", "fetch_covtype"], [498, 4, 1, "", "fetch_kddcup99"], [499, 4, 1, "", "fetch_lfw_pairs"], [500, 4, 1, "", "fetch_lfw_people"], [501, 4, 1, "", "fetch_olivetti_faces"], [502, 4, 1, "", "fetch_openml"], [503, 4, 1, "", "fetch_rcv1"], [504, 4, 1, "", "fetch_species_distributions"], [505, 4, 1, "", "get_data_home"], [506, 4, 1, "", "load_breast_cancer"], [507, 4, 1, "", "load_diabetes"], [508, 4, 1, "", "load_digits"], [509, 4, 1, "", "load_files"], [510, 4, 1, "", "load_iris"], [511, 4, 1, "", "load_linnerud"], [512, 4, 1, "", "load_sample_image"], [513, 4, 1, "", "load_sample_images"], [514, 4, 1, "", "load_svmlight_file"], [515, 4, 1, "", "load_svmlight_files"], [516, 4, 1, "", "load_wine"], [517, 4, 1, "", "make_biclusters"], [518, 4, 1, "", "make_blobs"], [519, 4, 1, "", "make_checkerboard"], [520, 4, 1, "", "make_circles"], [521, 4, 1, "", "make_classification"], [522, 4, 1, "", "make_friedman1"], [523, 4, 1, "", "make_friedman2"], [524, 4, 1, "", "make_friedman3"], [525, 4, 1, "", "make_gaussian_quantiles"], [526, 4, 1, "", "make_hastie_10_2"], [527, 4, 1, "", "make_low_rank_matrix"], [528, 4, 1, "", "make_moons"], [529, 4, 1, "", "make_multilabel_classification"], [530, 4, 1, "", "make_regression"], [531, 4, 1, "", "make_s_curve"], [532, 4, 1, "", "make_sparse_coded_signal"], [533, 4, 1, "", "make_sparse_spd_matrix"], [534, 4, 1, "", "make_sparse_uncorrelated"], [535, 4, 1, "", "make_spd_matrix"], [536, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[537, 1, 1, "", "DictionaryLearning"], [538, 1, 1, "", "FactorAnalysis"], [539, 1, 1, "", "FastICA"], [540, 1, 1, "", "IncrementalPCA"], [541, 1, 1, "", "KernelPCA"], [542, 1, 1, "", "LatentDirichletAllocation"], [543, 1, 1, "", "MiniBatchDictionaryLearning"], [544, 1, 1, "", "MiniBatchNMF"], [545, 1, 1, "", "MiniBatchSparsePCA"], [546, 1, 1, "", "NMF"], [547, 1, 1, "", "PCA"], [548, 1, 1, "", "SparseCoder"], [549, 1, 1, "", "SparsePCA"], [550, 1, 1, "", "TruncatedSVD"], [551, 4, 1, "", "dict_learning"], [552, 4, 1, "", "dict_learning_online"], [427, 4, 1, "", "fastica"], [553, 4, 1, "", "non_negative_factorization"], [554, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_covariance"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "get_precision"], [538, 2, 1, "", "score"], [538, 2, 1, "", "score_samples"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_inverse_transform_request"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "set_transform_request"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_covariance"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "get_precision"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "partial_fit"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "set_partial_fit_request"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "partial_fit"], [542, 2, 1, "", "perplexity"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "partial_fit"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "partial_fit"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_covariance"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "get_precision"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "score"], [547, 2, 1, "", "score_samples"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 3, 1, "", "n_components_"], [548, 3, 1, "", "n_features_in_"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "inverse_transform"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[555, 1, 1, "", "LinearDiscriminantAnalysis"], [556, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[555, 2, 1, "", "decision_function"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "fit_transform"], [555, 2, 1, "", "get_feature_names_out"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_output"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[556, 2, 1, "", "decision_function"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[557, 1, 1, "", "DummyClassifier"], [558, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_predict_request"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[559, 1, 1, "", "AdaBoostClassifier"], [560, 1, 1, "", "AdaBoostRegressor"], [561, 1, 1, "", "BaggingClassifier"], [562, 1, 1, "", "BaggingRegressor"], [563, 1, 1, "", "ExtraTreesClassifier"], [564, 1, 1, "", "ExtraTreesRegressor"], [565, 1, 1, "", "GradientBoostingClassifier"], [566, 1, 1, "", "GradientBoostingRegressor"], [567, 1, 1, "", "HistGradientBoostingClassifier"], [568, 1, 1, "", "HistGradientBoostingRegressor"], [569, 1, 1, "", "IsolationForest"], [570, 1, 1, "", "RandomForestClassifier"], [571, 1, 1, "", "RandomForestRegressor"], [572, 1, 1, "", "RandomTreesEmbedding"], [573, 1, 1, "", "StackingClassifier"], [574, 1, 1, "", "StackingRegressor"], [575, 1, 1, "", "VotingClassifier"], [576, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[559, 2, 1, "", "decision_function"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"], [559, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"], [560, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[561, 2, 1, "", "decision_function"], [561, 3, 1, "", "estimators_samples_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_log_proba"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[562, 3, 1, "", "estimators_samples_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_log_proba"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_function"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_log_proba"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "staged_decision_function"], [565, 2, 1, "", "staged_predict"], [565, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[566, 2, 1, "", "apply"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[567, 2, 1, "", "decision_function"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_iter_"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "staged_decision_function"], [567, 2, 1, "", "staged_predict"], [567, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_iter_"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[569, 2, 1, "", "decision_function"], [569, 3, 1, "", "estimators_samples_"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_predict"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score_samples"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[570, 2, 1, "", "apply"], [570, 2, 1, "", "decision_path"], [570, 3, 1, "", "estimators_samples_"], [570, 3, 1, "", "feature_importances_"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_log_proba"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[571, 2, 1, "", "apply"], [571, 2, 1, "", "decision_path"], [571, 3, 1, "", "estimators_samples_"], [571, 3, 1, "", "feature_importances_"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[572, 2, 1, "", "apply"], [572, 2, 1, "", "decision_path"], [572, 3, 1, "", "estimators_samples_"], [572, 3, 1, "", "feature_importances_"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[573, 2, 1, "", "decision_function"], [573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "n_features_in_"], [573, 3, 1, "", "named_estimators"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "predict_proba"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"], [573, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "n_features_in_"], [574, 3, 1, "", "named_estimators"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"], [574, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "n_features_in_"], [575, 3, 1, "", "named_estimators"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "predict_proba"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_fit_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_score_request"], [575, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "n_features_in_"], [576, 3, 1, "", "named_estimators"], [576, 2, 1, "", "predict"], [576, 2, 1, "", "score"], [576, 2, 1, "", "set_fit_request"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "set_score_request"], [576, 2, 1, "", "transform"]], "sklearn.exceptions": [[577, 5, 1, "", "ConvergenceWarning"], [578, 5, 1, "", "DataConversionWarning"], [579, 5, 1, "", "DataDimensionalityWarning"], [580, 5, 1, "", "EfficiencyWarning"], [581, 5, 1, "", "FitFailedWarning"], [582, 5, 1, "", "InconsistentVersionWarning"], [583, 5, 1, "", "NotFittedError"], [584, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[585, 0, 0, "-", "enable_halving_search_cv"], [586, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[587, 1, 1, "", "DictVectorizer"], [588, 1, 1, "", "FeatureHasher"], [16, 0, 0, "-", "image"], [16, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "restrict"], [587, 2, 1, "", "set_inverse_transform_request"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[589, 1, 1, "", "PatchExtractor"], [590, 4, 1, "", "extract_patches_2d"], [591, 4, 1, "", "grid_to_graph"], [592, 4, 1, "", "img_to_graph"], [593, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[594, 1, 1, "", "CountVectorizer"], [595, 1, 1, "", "HashingVectorizer"], [596, 1, 1, "", "TfidfTransformer"], [597, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[594, 2, 1, "", "build_analyzer"], [594, 2, 1, "", "build_preprocessor"], [594, 2, 1, "", "build_tokenizer"], [594, 2, 1, "", "decode"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_stop_words"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_fit_request"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "set_transform_request"], [594, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[595, 2, 1, "", "build_analyzer"], [595, 2, 1, "", "build_preprocessor"], [595, 2, 1, "", "build_tokenizer"], [595, 2, 1, "", "decode"], [595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_stop_words"], [595, 2, 1, "", "partial_fit"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "set_transform_request"], [596, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[597, 2, 1, "", "build_analyzer"], [597, 2, 1, "", "build_preprocessor"], [597, 2, 1, "", "build_tokenizer"], [597, 2, 1, "", "decode"], [597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_stop_words"], [597, 3, 1, "", "idf_"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_fit_request"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "set_transform_request"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection": [[598, 1, 1, "", "GenericUnivariateSelect"], [599, 1, 1, "", "RFE"], [600, 1, 1, "", "RFECV"], [601, 1, 1, "", "SelectFdr"], [602, 1, 1, "", "SelectFpr"], [603, 1, 1, "", "SelectFromModel"], [604, 1, 1, "", "SelectFwe"], [605, 1, 1, "", "SelectKBest"], [606, 1, 1, "", "SelectPercentile"], [607, 1, 1, "", "SelectorMixin"], [608, 1, 1, "", "SequentialFeatureSelector"], [609, 1, 1, "", "VarianceThreshold"], [610, 4, 1, "", "chi2"], [611, 4, 1, "", "f_classif"], [612, 4, 1, "", "f_regression"], [613, 4, 1, "", "mutual_info_classif"], [614, 4, 1, "", "mutual_info_regression"], [615, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[599, 3, 1, "", "classes_"], [599, 2, 1, "", "decision_function"], [599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "predict_log_proba"], [599, 2, 1, "", "predict_proba"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[600, 3, 1, "", "classes_"], [600, 2, 1, "", "decision_function"], [600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "predict"], [600, 2, 1, "", "predict_log_proba"], [600, 2, 1, "", "predict_proba"], [600, 2, 1, "", "score"], [600, 2, 1, "", "set_fit_request"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 3, 1, "", "n_features_in_"], [603, 2, 1, "", "partial_fit"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "threshold_"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "get_support"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "fit_transform"], [609, 2, 1, "", "get_feature_names_out"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "get_support"], [609, 2, 1, "", "inverse_transform"], [609, 2, 1, "", "set_output"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[616, 1, 1, "", "GaussianProcessClassifier"], [617, 1, 1, "", "GaussianProcessRegressor"], [18, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "get_metadata_routing"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "kernel_"], [616, 2, 1, "", "log_marginal_likelihood"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "predict_proba"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "get_metadata_routing"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "log_marginal_likelihood"], [617, 2, 1, "", "predict"], [617, 2, 1, "", "sample_y"], [617, 2, 1, "", "score"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "set_predict_request"], [617, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[618, 1, 1, "", "CompoundKernel"], [619, 1, 1, "", "ConstantKernel"], [620, 1, 1, "", "DotProduct"], [621, 1, 1, "", "ExpSineSquared"], [622, 1, 1, "", "Exponentiation"], [623, 1, 1, "", "Hyperparameter"], [624, 1, 1, "", "Kernel"], [625, 1, 1, "", "Matern"], [626, 1, 1, "", "PairwiseKernel"], [627, 1, 1, "", "Product"], [628, 1, 1, "", "RBF"], [629, 1, 1, "", "RationalQuadratic"], [630, 1, 1, "", "Sum"], [631, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameter_length_scale"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[623, 6, 1, "", "bounds"], [623, 2, 1, "", "count"], [623, 6, 1, "", "fixed"], [623, 2, 1, "", "index"], [623, 6, 1, "", "n_elements"], [623, 6, 1, "", "name"], [623, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[630, 2, 1, "", "__call__"], [630, 3, 1, "", "bounds"], [630, 2, 1, "", "clone_with_theta"], [630, 2, 1, "", "diag"], [630, 2, 1, "", "get_params"], [630, 3, 1, "", "hyperparameters"], [630, 2, 1, "", "is_stationary"], [630, 3, 1, "", "n_dims"], [630, 3, 1, "", "requires_vector_input"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[631, 2, 1, "", "__call__"], [631, 3, 1, "", "bounds"], [631, 2, 1, "", "clone_with_theta"], [631, 2, 1, "", "diag"], [631, 2, 1, "", "get_params"], [631, 3, 1, "", "hyperparameters"], [631, 2, 1, "", "is_stationary"], [631, 3, 1, "", "n_dims"], [631, 3, 1, "", "requires_vector_input"], [631, 2, 1, "", "set_params"], [631, 3, 1, "", "theta"]], "sklearn.impute": [[633, 1, 1, "", "IterativeImputer"], [634, 1, 1, "", "KNNImputer"], [635, 1, 1, "", "MissingIndicator"], [636, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "inverse_transform"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.inspection": [[637, 1, 1, "", "DecisionBoundaryDisplay"], [638, 1, 1, "", "PartialDependenceDisplay"], [639, 4, 1, "", "partial_dependence"], [640, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[637, 2, 1, "", "from_estimator"], [637, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[638, 2, 1, "", "from_estimator"], [638, 2, 1, "", "plot"]], "sklearn.isotonic": [[641, 1, 1, "", "IsotonicRegression"], [642, 4, 1, "", "check_increasing"], [643, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_predict_request"], [641, 2, 1, "", "set_score_request"], [641, 2, 1, "", "set_transform_request"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[644, 1, 1, "", "AdditiveChi2Sampler"], [645, 1, 1, "", "Nystroem"], [646, 1, 1, "", "PolynomialCountSketch"], [647, 1, 1, "", "RBFSampler"], [648, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "fit_transform"], [647, 2, 1, "", "get_feature_names_out"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "set_output"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "fit_transform"], [648, 2, 1, "", "get_feature_names_out"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "set_output"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[649, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[650, 1, 1, "", "ARDRegression"], [651, 1, 1, "", "BayesianRidge"], [652, 1, 1, "", "ElasticNet"], [653, 1, 1, "", "ElasticNetCV"], [654, 1, 1, "", "GammaRegressor"], [655, 1, 1, "", "HuberRegressor"], [656, 1, 1, "", "Lars"], [657, 1, 1, "", "LarsCV"], [658, 1, 1, "", "Lasso"], [659, 1, 1, "", "LassoCV"], [660, 1, 1, "", "LassoLars"], [661, 1, 1, "", "LassoLarsCV"], [662, 1, 1, "", "LassoLarsIC"], [663, 1, 1, "", "LinearRegression"], [664, 1, 1, "", "LogisticRegression"], [665, 1, 1, "", "LogisticRegressionCV"], [666, 1, 1, "", "MultiTaskElasticNet"], [667, 1, 1, "", "MultiTaskElasticNetCV"], [668, 1, 1, "", "MultiTaskLasso"], [669, 1, 1, "", "MultiTaskLassoCV"], [670, 1, 1, "", "OrthogonalMatchingPursuit"], [671, 1, 1, "", "OrthogonalMatchingPursuitCV"], [672, 1, 1, "", "PassiveAggressiveClassifier"], [673, 1, 1, "", "PassiveAggressiveRegressor"], [674, 1, 1, "", "Perceptron"], [675, 1, 1, "", "PoissonRegressor"], [676, 1, 1, "", "QuantileRegressor"], [677, 1, 1, "", "RANSACRegressor"], [678, 1, 1, "", "Ridge"], [679, 1, 1, "", "RidgeCV"], [680, 1, 1, "", "RidgeClassifier"], [681, 1, 1, "", "RidgeClassifierCV"], [682, 1, 1, "", "SGDClassifier"], [683, 1, 1, "", "SGDOneClassSVM"], [684, 1, 1, "", "SGDRegressor"], [685, 1, 1, "", "TheilSenRegressor"], [686, 1, 1, "", "TweedieRegressor"], [687, 4, 1, "", "enet_path"], [688, 4, 1, "", "lars_path"], [689, 4, 1, "", "lars_path_gram"], [690, 4, 1, "", "lasso_path"], [691, 4, 1, "", "orthogonal_mp"], [692, 4, 1, "", "orthogonal_mp_gram"], [693, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_predict_request"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_predict_request"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "path"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"], [652, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[664, 2, 1, "", "decision_function"], [664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "predict_log_proba"], [664, 2, 1, "", "predict_proba"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[665, 2, 1, "", "decision_function"], [665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "predict_log_proba"], [665, 2, 1, "", "predict_proba"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"], [666, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "path"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "path"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"], [668, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "path"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[672, 2, 1, "", "decision_function"], [672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[673, 2, 1, "", "densify"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "partial_fit"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_partial_fit_request"], [673, 2, 1, "", "set_score_request"], [673, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[674, 2, 1, "", "decision_function"], [674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "set_score_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[680, 3, 1, "", "classes_"], [680, 2, 1, "", "decision_function"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[681, 3, 1, "", "classes_"], [681, 2, 1, "", "decision_function"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[682, 2, 1, "", "decision_function"], [682, 2, 1, "", "densify"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "partial_fit"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "predict_log_proba"], [682, 2, 1, "", "predict_proba"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_partial_fit_request"], [682, 2, 1, "", "set_score_request"], [682, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[683, 2, 1, "", "decision_function"], [683, 2, 1, "", "densify"], [683, 2, 1, "", "fit"], [683, 2, 1, "", "fit_predict"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "partial_fit"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score_samples"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_partial_fit_request"], [683, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[684, 2, 1, "", "densify"], [684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "partial_fit"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_partial_fit_request"], [684, 2, 1, "", "set_score_request"], [684, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "predict"], [685, 2, 1, "", "score"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "predict"], [686, 2, 1, "", "score"], [686, 2, 1, "", "set_fit_request"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[694, 1, 1, "", "Isomap"], [695, 1, 1, "", "LocallyLinearEmbedding"], [696, 1, 1, "", "MDS"], [697, 1, 1, "", "SpectralEmbedding"], [698, 1, 1, "", "TSNE"], [699, 4, 1, "", "locally_linear_embedding"], [700, 4, 1, "", "smacof"], [701, 4, 1, "", "spectral_embedding"], [702, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_feature_names_out"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "reconstruction_error"], [694, 2, 1, "", "set_output"], [694, 2, 1, "", "set_params"], [694, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_feature_names_out"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_output"], [695, 2, 1, "", "set_params"], [695, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "set_fit_request"], [696, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[697, 2, 1, "", "fit"], [697, 2, 1, "", "fit_transform"], [697, 2, 1, "", "get_metadata_routing"], [697, 2, 1, "", "get_params"], [697, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[698, 2, 1, "", "fit"], [698, 2, 1, "", "fit_transform"], [698, 2, 1, "", "get_feature_names_out"], [698, 2, 1, "", "get_metadata_routing"], [698, 2, 1, "", "get_params"], [698, 2, 1, "", "set_output"], [698, 2, 1, "", "set_params"]], "sklearn.metrics": [[703, 1, 1, "", "ConfusionMatrixDisplay"], [704, 1, 1, "", "DetCurveDisplay"], [705, 1, 1, "", "DistanceMetric"], [706, 1, 1, "", "PrecisionRecallDisplay"], [707, 1, 1, "", "PredictionErrorDisplay"], [708, 1, 1, "", "RocCurveDisplay"], [709, 4, 1, "", "accuracy_score"], [710, 4, 1, "", "adjusted_mutual_info_score"], [711, 4, 1, "", "adjusted_rand_score"], [712, 4, 1, "", "auc"], [713, 4, 1, "", "average_precision_score"], [714, 4, 1, "", "balanced_accuracy_score"], [715, 4, 1, "", "brier_score_loss"], [716, 4, 1, "", "calinski_harabasz_score"], [717, 4, 1, "", "check_scoring"], [718, 4, 1, "", "class_likelihood_ratios"], [719, 4, 1, "", "classification_report"], [26, 0, 0, "-", "cluster"], [722, 4, 1, "", "cohen_kappa_score"], [723, 4, 1, "", "completeness_score"], [724, 4, 1, "", "confusion_matrix"], [725, 4, 1, "", "consensus_score"], [726, 4, 1, "", "coverage_error"], [727, 4, 1, "", "d2_absolute_error_score"], [728, 4, 1, "", "d2_log_loss_score"], [729, 4, 1, "", "d2_pinball_score"], [730, 4, 1, "", "d2_tweedie_score"], [731, 4, 1, "", "davies_bouldin_score"], [732, 4, 1, "", "dcg_score"], [733, 4, 1, "", "det_curve"], [734, 4, 1, "", "explained_variance_score"], [735, 4, 1, "", "f1_score"], [736, 4, 1, "", "fbeta_score"], [737, 4, 1, "", "fowlkes_mallows_score"], [738, 4, 1, "", "get_scorer"], [739, 4, 1, "", "get_scorer_names"], [740, 4, 1, "", "hamming_loss"], [741, 4, 1, "", "hinge_loss"], [742, 4, 1, "", "homogeneity_completeness_v_measure"], [743, 4, 1, "", "homogeneity_score"], [744, 4, 1, "", "jaccard_score"], [745, 4, 1, "", "label_ranking_average_precision_score"], [746, 4, 1, "", "label_ranking_loss"], [747, 4, 1, "", "log_loss"], [748, 4, 1, "", "make_scorer"], [749, 4, 1, "", "matthews_corrcoef"], [750, 4, 1, "", "max_error"], [751, 4, 1, "", "mean_absolute_error"], [752, 4, 1, "", "mean_absolute_percentage_error"], [753, 4, 1, "", "mean_gamma_deviance"], [754, 4, 1, "", "mean_pinball_loss"], [755, 4, 1, "", "mean_poisson_deviance"], [756, 4, 1, "", "mean_squared_error"], [757, 4, 1, "", "mean_squared_log_error"], [758, 4, 1, "", "mean_tweedie_deviance"], [759, 4, 1, "", "median_absolute_error"], [760, 4, 1, "", "multilabel_confusion_matrix"], [761, 4, 1, "", "mutual_info_score"], [762, 4, 1, "", "ndcg_score"], [763, 4, 1, "", "normalized_mutual_info_score"], [26, 0, 0, "-", "pairwise"], [784, 4, 1, "", "pairwise_distances"], [785, 4, 1, "", "pairwise_distances_argmin"], [786, 4, 1, "", "pairwise_distances_argmin_min"], [787, 4, 1, "", "pairwise_distances_chunked"], [788, 4, 1, "", "precision_recall_curve"], [789, 4, 1, "", "precision_recall_fscore_support"], [790, 4, 1, "", "precision_score"], [791, 4, 1, "", "r2_score"], [792, 4, 1, "", "rand_score"], [793, 4, 1, "", "recall_score"], [794, 4, 1, "", "roc_auc_score"], [795, 4, 1, "", "roc_curve"], [796, 4, 1, "", "root_mean_squared_error"], [797, 4, 1, "", "root_mean_squared_log_error"], [798, 4, 1, "", "silhouette_samples"], [799, 4, 1, "", "silhouette_score"], [800, 4, 1, "", "top_k_accuracy_score"], [801, 4, 1, "", "v_measure_score"], [802, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[704, 2, 1, "", "from_estimator"], [704, 2, 1, "", "from_predictions"], [704, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[705, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[707, 2, 1, "", "from_estimator"], [707, 2, 1, "", "from_predictions"], [707, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[708, 2, 1, "", "from_estimator"], [708, 2, 1, "", "from_predictions"], [708, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[720, 4, 1, "", "contingency_matrix"], [721, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[764, 4, 1, "", "additive_chi2_kernel"], [765, 4, 1, "", "chi2_kernel"], [766, 4, 1, "", "cosine_distances"], [767, 4, 1, "", "cosine_similarity"], [768, 4, 1, "", "distance_metrics"], [769, 4, 1, "", "euclidean_distances"], [770, 4, 1, "", "haversine_distances"], [771, 4, 1, "", "kernel_metrics"], [772, 4, 1, "", "laplacian_kernel"], [773, 4, 1, "", "linear_kernel"], [774, 4, 1, "", "manhattan_distances"], [775, 4, 1, "", "nan_euclidean_distances"], [776, 4, 1, "", "paired_cosine_distances"], [777, 4, 1, "", "paired_distances"], [778, 4, 1, "", "paired_euclidean_distances"], [779, 4, 1, "", "paired_manhattan_distances"], [780, 4, 1, "", "pairwise_kernels"], [781, 4, 1, "", "polynomial_kernel"], [782, 4, 1, "", "rbf_kernel"], [783, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[803, 1, 1, "", "BayesianGaussianMixture"], [804, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[803, 2, 1, "", "fit"], [803, 2, 1, "", "fit_predict"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "sample"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[804, 2, 1, "", "aic"], [804, 2, 1, "", "bic"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "fit_predict"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "sample"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"]], "sklearn.model_selection": [[805, 1, 1, "", "FixedThresholdClassifier"], [806, 1, 1, "", "GridSearchCV"], [807, 1, 1, "", "GroupKFold"], [808, 1, 1, "", "GroupShuffleSplit"], [809, 1, 1, "", "HalvingGridSearchCV"], [810, 1, 1, "", "HalvingRandomSearchCV"], [811, 1, 1, "", "KFold"], [812, 1, 1, "", "LearningCurveDisplay"], [813, 1, 1, "", "LeaveOneGroupOut"], [814, 1, 1, "", "LeaveOneOut"], [815, 1, 1, "", "LeavePGroupsOut"], [816, 1, 1, "", "LeavePOut"], [817, 1, 1, "", "ParameterGrid"], [818, 1, 1, "", "ParameterSampler"], [819, 1, 1, "", "PredefinedSplit"], [820, 1, 1, "", "RandomizedSearchCV"], [821, 1, 1, "", "RepeatedKFold"], [822, 1, 1, "", "RepeatedStratifiedKFold"], [823, 1, 1, "", "ShuffleSplit"], [824, 1, 1, "", "StratifiedGroupKFold"], [825, 1, 1, "", "StratifiedKFold"], [826, 1, 1, "", "StratifiedShuffleSplit"], [827, 1, 1, "", "TimeSeriesSplit"], [828, 1, 1, "", "TunedThresholdClassifierCV"], [829, 1, 1, "", "ValidationCurveDisplay"], [830, 4, 1, "", "check_cv"], [831, 4, 1, "", "cross_val_predict"], [832, 4, 1, "", "cross_val_score"], [833, 4, 1, "", "cross_validate"], [834, 4, 1, "", "learning_curve"], [835, 4, 1, "", "permutation_test_score"], [836, 4, 1, "", "train_test_split"], [837, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[805, 3, 1, "", "classes_"], [805, 2, 1, "", "decision_function"], [805, 2, 1, "", "fit"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_log_proba"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "set_params"], [805, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[806, 3, 1, "", "classes_"], [806, 2, 1, "", "decision_function"], [806, 2, 1, "", "fit"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "inverse_transform"], [806, 3, 1, "", "n_features_in_"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "score_samples"], [806, 2, 1, "", "set_params"], [806, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "set_split_request"], [807, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "set_split_request"], [808, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[809, 3, 1, "", "classes_"], [809, 2, 1, "", "decision_function"], [809, 2, 1, "", "fit"], [809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "inverse_transform"], [809, 3, 1, "", "n_features_in_"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "score_samples"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[810, 3, 1, "", "classes_"], [810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "inverse_transform"], [810, 3, 1, "", "n_features_in_"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_log_proba"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "score_samples"], [810, 2, 1, "", "set_params"], [810, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[812, 2, 1, "", "from_estimator"], [812, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "set_split_request"], [813, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "set_split_request"], [815, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[820, 3, 1, "", "classes_"], [820, 2, 1, "", "decision_function"], [820, 2, 1, "", "fit"], [820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "inverse_transform"], [820, 3, 1, "", "n_features_in_"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "predict_log_proba"], [820, 2, 1, "", "predict_proba"], [820, 2, 1, "", "score"], [820, 2, 1, "", "score_samples"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "set_split_request"], [824, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_n_splits"], [826, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_n_splits"], [827, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[828, 3, 1, "", "classes_"], [828, 2, 1, "", "decision_function"], [828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_log_proba"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[829, 2, 1, "", "from_estimator"], [829, 2, 1, "", "plot"]], "sklearn.multiclass": [[838, 1, 1, "", "OneVsOneClassifier"], [839, 1, 1, "", "OneVsRestClassifier"], [840, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[838, 2, 1, "", "decision_function"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 3, 1, "", "n_classes_"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[839, 2, 1, "", "decision_function"], [839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 3, 1, "", "multilabel_"], [839, 3, 1, "", "n_classes_"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"], [839, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[841, 1, 1, "", "ClassifierChain"], [842, 1, 1, "", "MultiOutputClassifier"], [843, 1, 1, "", "MultiOutputRegressor"], [844, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[841, 2, 1, "", "decision_function"], [841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[845, 1, 1, "", "BernoulliNB"], [846, 1, 1, "", "CategoricalNB"], [847, 1, 1, "", "ComplementNB"], [848, 1, 1, "", "GaussianNB"], [849, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_joint_log_proba"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_fit_request"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_joint_log_proba"], [848, 2, 1, "", "predict_log_proba"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_fit_request"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_partial_fit_request"], [848, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_joint_log_proba"], [849, 2, 1, "", "predict_log_proba"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_partial_fit_request"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[850, 1, 1, "", "BallTree"], [851, 1, 1, "", "KDTree"], [852, 1, 1, "", "KNeighborsClassifier"], [853, 1, 1, "", "KNeighborsRegressor"], [854, 1, 1, "", "KNeighborsTransformer"], [855, 1, 1, "", "KernelDensity"], [856, 1, 1, "", "LocalOutlierFactor"], [857, 1, 1, "", "NearestCentroid"], [858, 1, 1, "", "NearestNeighbors"], [859, 1, 1, "", "NeighborhoodComponentsAnalysis"], [860, 1, 1, "", "RadiusNeighborsClassifier"], [861, 1, 1, "", "RadiusNeighborsRegressor"], [862, 1, 1, "", "RadiusNeighborsTransformer"], [863, 4, 1, "", "kneighbors_graph"], [864, 4, 1, "", "radius_neighbors_graph"], [865, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[850, 2, 1, "", "get_arrays"], [850, 2, 1, "", "get_n_calls"], [850, 2, 1, "", "get_tree_stats"], [850, 2, 1, "", "kernel_density"], [850, 2, 1, "", "query"], [850, 2, 1, "", "query_radius"], [850, 2, 1, "", "reset_n_calls"], [850, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[851, 2, 1, "", "get_arrays"], [851, 2, 1, "", "get_n_calls"], [851, 2, 1, "", "get_tree_stats"], [851, 2, 1, "", "kernel_density"], [851, 2, 1, "", "query"], [851, 2, 1, "", "query_radius"], [851, 2, 1, "", "reset_n_calls"], [851, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "kneighbors"], [852, 2, 1, "", "kneighbors_graph"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "predict_proba"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "score"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "kneighbors"], [854, 2, 1, "", "kneighbors_graph"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "sample"], [855, 2, 1, "", "score"], [855, 2, 1, "", "score_samples"], [855, 2, 1, "", "set_fit_request"], [855, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[856, 2, 1, "", "decision_function"], [856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_predict"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "kneighbors"], [856, 2, 1, "", "kneighbors_graph"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "score_samples"], [856, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "kneighbors"], [858, 2, 1, "", "kneighbors_graph"], [858, 2, 1, "", "radius_neighbors"], [858, 2, 1, "", "radius_neighbors_graph"], [858, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "predict"], [860, 2, 1, "", "predict_proba"], [860, 2, 1, "", "radius_neighbors"], [860, 2, 1, "", "radius_neighbors_graph"], [860, 2, 1, "", "score"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "radius_neighbors"], [861, 2, 1, "", "radius_neighbors_graph"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "radius_neighbors"], [862, 2, 1, "", "radius_neighbors_graph"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.neural_network": [[866, 1, 1, "", "BernoulliRBM"], [867, 1, 1, "", "MLPClassifier"], [868, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "gibbs"], [866, 2, 1, "", "partial_fit"], [866, 2, 1, "", "score_samples"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "partial_fit"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "predict_log_proba"], [867, 2, 1, "", "predict_proba"], [867, 2, 1, "", "score"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_partial_fit_request"], [867, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "score"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[869, 1, 1, "", "FeatureUnion"], [870, 1, 1, "", "Pipeline"], [871, 4, 1, "", "make_pipeline"], [872, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[869, 3, 1, "", "feature_names_in_"], [869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 3, 1, "", "n_features_in_"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[870, 3, 1, "", "classes_"], [870, 2, 1, "", "decision_function"], [870, 3, 1, "", "feature_names_in_"], [870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_predict"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 3, 1, "", "n_features_in_"], [870, 3, 1, "", "named_steps"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "predict_log_proba"], [870, 2, 1, "", "predict_proba"], [870, 2, 1, "", "score"], [870, 2, 1, "", "score_samples"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_score_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing": [[873, 1, 1, "", "Binarizer"], [874, 1, 1, "", "FunctionTransformer"], [875, 1, 1, "", "KBinsDiscretizer"], [876, 1, 1, "", "KernelCenterer"], [877, 1, 1, "", "LabelBinarizer"], [878, 1, 1, "", "LabelEncoder"], [879, 1, 1, "", "MaxAbsScaler"], [880, 1, 1, "", "MinMaxScaler"], [881, 1, 1, "", "MultiLabelBinarizer"], [882, 1, 1, "", "Normalizer"], [883, 1, 1, "", "OneHotEncoder"], [884, 1, 1, "", "OrdinalEncoder"], [885, 1, 1, "", "PolynomialFeatures"], [886, 1, 1, "", "PowerTransformer"], [887, 1, 1, "", "QuantileTransformer"], [888, 1, 1, "", "RobustScaler"], [889, 1, 1, "", "SplineTransformer"], [890, 1, 1, "", "StandardScaler"], [891, 1, 1, "", "TargetEncoder"], [892, 4, 1, "", "add_dummy_feature"], [893, 4, 1, "", "binarize"], [894, 4, 1, "", "label_binarize"], [895, 4, 1, "", "maxabs_scale"], [896, 4, 1, "", "minmax_scale"], [897, 4, 1, "", "normalize"], [898, 4, 1, "", "power_transform"], [899, 4, 1, "", "quantile_transform"], [900, 4, 1, "", "robust_scale"], [901, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_transform_request"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_fit_request"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "set_fit_request"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_transform_request"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_inverse_transform_request"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "partial_fit"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "partial_fit"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "set_transform_request"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "infrequent_categories_"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 3, 1, "", "infrequent_categories_"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "powers_"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "inverse_transform"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "inverse_transform"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "set_fit_request"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "inverse_transform"], [890, 2, 1, "", "partial_fit"], [890, 2, 1, "", "set_fit_request"], [890, 2, 1, "", "set_inverse_transform_request"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "set_partial_fit_request"], [890, 2, 1, "", "set_transform_request"], [890, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 3, 1, "", "infrequent_categories_"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "transform"]], "sklearn.random_projection": [[902, 1, 1, "", "GaussianRandomProjection"], [903, 1, 1, "", "SparseRandomProjection"], [904, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[902, 2, 1, "", "fit"], [902, 2, 1, "", "fit_transform"], [902, 2, 1, "", "get_feature_names_out"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "inverse_transform"], [902, 2, 1, "", "set_output"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[903, 2, 1, "", "fit"], [903, 2, 1, "", "fit_transform"], [903, 2, 1, "", "get_feature_names_out"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "inverse_transform"], [903, 2, 1, "", "set_output"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[905, 1, 1, "", "LabelPropagation"], [906, 1, 1, "", "LabelSpreading"], [907, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "predict_proba"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_proba"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[907, 2, 1, "", "decision_function"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_log_proba"], [907, 2, 1, "", "predict_proba"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_params"]], "sklearn.svm": [[910, 1, 1, "", "LinearSVC"], [911, 1, 1, "", "LinearSVR"], [912, 1, 1, "", "NuSVC"], [913, 1, 1, "", "NuSVR"], [914, 1, 1, "", "OneClassSVM"], [915, 1, 1, "", "SVC"], [916, 1, 1, "", "SVR"], [917, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[910, 2, 1, "", "decision_function"], [910, 2, 1, "", "densify"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"], [910, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "decision_function"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "predict_log_proba"], [912, 2, 1, "", "predict_proba"], [912, 3, 1, "", "probA_"], [912, 3, 1, "", "probB_"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[914, 3, 1, "", "coef_"], [914, 2, 1, "", "decision_function"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "fit_predict"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 3, 1, "", "n_support_"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score_samples"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[915, 3, 1, "", "coef_"], [915, 2, 1, "", "decision_function"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_params"], [915, 3, 1, "", "n_support_"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "predict_log_proba"], [915, 2, 1, "", "predict_proba"], [915, 3, 1, "", "probA_"], [915, 3, 1, "", "probB_"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[916, 3, 1, "", "coef_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_params"], [916, 3, 1, "", "n_support_"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_score_request"]], "sklearn.tree": [[918, 1, 1, "", "DecisionTreeClassifier"], [919, 1, 1, "", "DecisionTreeRegressor"], [920, 1, 1, "", "ExtraTreeClassifier"], [921, 1, 1, "", "ExtraTreeRegressor"], [922, 4, 1, "", "export_graphviz"], [923, 4, 1, "", "export_text"], [924, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[918, 2, 1, "", "apply"], [918, 2, 1, "", "cost_complexity_pruning_path"], [918, 2, 1, "", "decision_path"], [918, 3, 1, "", "feature_importances_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_depth"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_n_leaves"], [918, 2, 1, "", "get_params"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "predict_log_proba"], [918, 2, 1, "", "predict_proba"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_predict_proba_request"], [918, 2, 1, "", "set_predict_request"], [918, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[919, 2, 1, "", "apply"], [919, 2, 1, "", "cost_complexity_pruning_path"], [919, 2, 1, "", "decision_path"], [919, 3, 1, "", "feature_importances_"], [919, 2, 1, "", "fit"], [919, 2, 1, "", "get_depth"], [919, 2, 1, "", "get_metadata_routing"], [919, 2, 1, "", "get_n_leaves"], [919, 2, 1, "", "get_params"], [919, 2, 1, "", "predict"], [919, 2, 1, "", "score"], [919, 2, 1, "", "set_fit_request"], [919, 2, 1, "", "set_params"], [919, 2, 1, "", "set_predict_request"], [919, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[920, 2, 1, "", "apply"], [920, 2, 1, "", "cost_complexity_pruning_path"], [920, 2, 1, "", "decision_path"], [920, 3, 1, "", "feature_importances_"], [920, 2, 1, "", "fit"], [920, 2, 1, "", "get_depth"], [920, 2, 1, "", "get_metadata_routing"], [920, 2, 1, "", "get_n_leaves"], [920, 2, 1, "", "get_params"], [920, 2, 1, "", "predict"], [920, 2, 1, "", "predict_log_proba"], [920, 2, 1, "", "predict_proba"], [920, 2, 1, "", "score"], [920, 2, 1, "", "set_fit_request"], [920, 2, 1, "", "set_params"], [920, 2, 1, "", "set_predict_proba_request"], [920, 2, 1, "", "set_predict_request"], [920, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[921, 2, 1, "", "apply"], [921, 2, 1, "", "cost_complexity_pruning_path"], [921, 2, 1, "", "decision_path"], [921, 3, 1, "", "feature_importances_"], [921, 2, 1, "", "fit"], [921, 2, 1, "", "get_depth"], [921, 2, 1, "", "get_metadata_routing"], [921, 2, 1, "", "get_n_leaves"], [921, 2, 1, "", "get_params"], [921, 2, 1, "", "predict"], [921, 2, 1, "", "score"], [921, 2, 1, "", "set_fit_request"], [921, 2, 1, "", "set_params"], [921, 2, 1, "", "set_predict_request"], [921, 2, 1, "", "set_score_request"]], "sklearn.utils": [[925, 1, 1, "", "Bunch"], [926, 4, 1, "", "_safe_indexing"], [40, 0, 0, "-", "arrayfuncs"], [928, 4, 1, "", "as_float_array"], [929, 4, 1, "", "assert_all_finite"], [930, 4, 1, "", "check_X_y"], [931, 4, 1, "", "check_array"], [932, 4, 1, "", "check_consistent_length"], [933, 4, 1, "", "check_random_state"], [934, 4, 1, "", "check_scalar"], [40, 0, 0, "-", "class_weight"], [937, 1, 1, "", "deprecated"], [40, 0, 0, "-", "discovery"], [40, 0, 0, "-", "estimator_checks"], [943, 4, 1, "", "estimator_html_repr"], [40, 0, 0, "-", "extmath"], [950, 4, 1, "", "gen_batches"], [951, 4, 1, "", "gen_even_slices"], [40, 0, 0, "-", "graph"], [953, 4, 1, "", "indexable"], [40, 0, 0, "-", "metadata_routing"], [40, 0, 0, "-", "metaestimators"], [40, 0, 0, "-", "multiclass"], [963, 4, 1, "", "murmurhash3_32"], [40, 0, 0, "-", "parallel"], [966, 1, 1, "", "parallel_backend"], [40, 0, 0, "-", "random"], [968, 4, 1, "", "register_parallel_backend"], [969, 4, 1, "", "resample"], [970, 4, 1, "", "safe_mask"], [971, 4, 1, "", "safe_sqr"], [972, 4, 1, "", "shuffle"], [40, 0, 0, "-", "sparsefuncs"], [40, 0, 0, "-", "sparsefuncs_fast"], [40, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[925, 2, 1, "", "clear"], [925, 2, 1, "", "copy"], [925, 2, 1, "", "fromkeys"], [925, 2, 1, "", "get"], [925, 2, 1, "", "items"], [925, 2, 1, "", "keys"], [925, 2, 1, "", "pop"], [925, 2, 1, "", "popitem"], [925, 2, 1, "", "setdefault"], [925, 2, 1, "", "update"], [925, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[927, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[935, 4, 1, "", "compute_class_weight"], [936, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[937, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[938, 4, 1, "", "all_displays"], [939, 4, 1, "", "all_estimators"], [940, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[941, 4, 1, "", "check_estimator"], [942, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[944, 4, 1, "", "density"], [945, 4, 1, "", "fast_logdet"], [946, 4, 1, "", "randomized_range_finder"], [947, 4, 1, "", "randomized_svd"], [948, 4, 1, "", "safe_sparse_dot"], [949, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[952, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[954, 1, 1, "", "MetadataRequest"], [955, 1, 1, "", "MetadataRouter"], [956, 1, 1, "", "MethodMapping"], [957, 4, 1, "", "get_routing_for_object"], [958, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[954, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[955, 2, 1, "", "add"], [955, 2, 1, "", "add_self_request"], [955, 2, 1, "", "consumes"], [955, 2, 1, "", "route_params"], [955, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[956, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[959, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[960, 4, 1, "", "is_multilabel"], [961, 4, 1, "", "type_of_target"], [962, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[964, 1, 1, "", "Parallel"], [965, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[964, 2, 1, "", "__call__"], [964, 2, 1, "", "dispatch_next"], [964, 2, 1, "", "dispatch_one_batch"], [964, 2, 1, "", "format"], [964, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[967, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[973, 4, 1, "", "incr_mean_variance_axis"], [974, 4, 1, "", "inplace_column_scale"], [975, 4, 1, "", "inplace_csr_column_scale"], [976, 4, 1, "", "inplace_row_scale"], [977, 4, 1, "", "inplace_swap_column"], [978, 4, 1, "", "inplace_swap_row"], [979, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[980, 4, 1, "", "inplace_csr_row_normalize_l1"], [981, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[982, 4, 1, "", "check_is_fitted"], [983, 4, 1, "", "check_memory"], [984, 4, 1, "", "check_symmetric"], [985, 4, 1, "", "column_or_1d"], [986, 4, 1, "", "has_fit_parameter"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 1, 42, 43, 44, 45, 46, 48, 49, 50, 51, 54, 56, 57, 60, 63, 69, 72, 73, 74, 76, 77, 78, 80, 81, 82, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 110, 111, 114, 116, 120, 121, 122, 124, 125, 126, 129, 132, 133, 134, 136, 138, 140, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 166, 168, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 192, 194, 196, 199, 200, 201, 203, 205, 207, 208, 209, 210, 211, 217, 219, 221, 223, 225, 226, 228, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 250, 252, 253, 254, 256, 262, 264, 265, 267, 271, 272, 277, 278, 279, 280, 281, 284, 288, 290, 292, 298, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 317, 318, 321, 324, 327, 329, 330, 331, 332, 333, 334, 335, 338, 339, 345, 346, 347, 348, 349, 352, 353, 354, 357, 359, 360, 361, 364, 365, 366, 367, 368, 372, 373, 374, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 427, 429, 436, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 466, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 495, 497, 502, 504, 506, 510, 516, 517, 525, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 695, 696, 697, 698, 699, 706, 707, 708, 714, 717, 722, 726, 728, 741, 747, 764, 765, 785, 786, 803, 804, 805, 806, 808, 809, 810, 815, 820, 824, 825, 828, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 928, 930, 931, 934, 947, 949, 955, 956, 958, 982, 986, 987, 989, 990, 992, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "0": [1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 935, 936, 938, 939, 940, 941, 942, 944, 946, 947, 949, 950, 951, 952, 959, 960, 961, 963, 964, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 987, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1019, 1020, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "00": [46, 51, 67, 112, 127, 191, 192, 210, 237, 250, 275, 278, 316, 334, 337, 338, 360, 379, 382, 391, 415, 422, 423, 611, 612, 719, 721, 794, 806, 820, 834, 919, 994, 998, 1008, 1010, 1012, 1019, 1031], "000": [42, 43, 58, 61, 63, 76, 107, 176, 193, 196, 250, 271, 275, 277, 279, 323, 330, 359, 360, 368, 380, 391, 422, 423, 496, 567, 568, 650, 683, 1012, 1019, 1032, 1050], "0000": [42, 332], "000000": [78, 191, 208, 237, 277, 322, 743], "00000000": 178, "000000e": 237, "000024": 372, "000045": 191, "00005": 53, "0000ff": [66, 306, 313], "0001": [48, 173, 227, 275, 387, 427, 449, 453, 465, 477, 478, 484, 539, 544, 546, 553, 555, 556, 565, 566, 652, 653, 654, 655, 658, 659, 664, 665, 666, 667, 668, 669, 674, 675, 678, 680, 682, 684, 686, 693, 695, 699, 867, 868, 910, 911, 987], "000178": 45, "000198": 191, "000219": 45, "000241": 45, "0002652948464431897": 290, "000268": 45, "000279": 45, "0003": 141, "000359": 45, "0004": [141, 323, 610], "000410": 45, "000411": 45, "000488": 359, "00061": 359, "000619": 359, "000626": 359, "000648": 45, "00067": 359, "0008": 393, "000846": 45, "000968": 359, "000977": 277, "00099547": 178, "000e": 423, "001": [45, 52, 67, 78, 96, 149, 173, 175, 191, 203, 228, 246, 256, 262, 275, 277, 279, 340, 360, 382, 391, 419, 542, 543, 545, 552, 633, 650, 651, 652, 653, 658, 659, 666, 667, 668, 669, 672, 673, 674, 682, 683, 684, 685, 687, 690, 695, 696, 699, 700, 803, 804, 867, 868, 905, 906, 912, 913, 914, 915, 916, 987, 1023, 1032], "0012": [42, 700], "0013": 42, "0014": 42, "0015": 42, "001540": 51, "00166409": 667, "00171412": [764, 765, 996], "001727": 271, "00173": 359, "00175": 359, "001882": [207, 208], "002": [42, 50, 173, 175, 360, 382], "00259": 359, "002592": [207, 208], "00274": 219, "0028": 42, "002861": [207, 208], "003": 42, "0032": 42, "0034189458230957995": 44, "003533": 208, "003586": 542, "00360392": 542, "0036211": 542, "00362644": 542, "00364": 331, "00368320": 51, "00375": 1027, "00393284e": 200, "003935": [207, 208], "003e": 423, "004": 42, "0044": 917, "004577621581492997": 325, "00462428": 757, "0049896314219659565": 325, "005": [42, 145, 277, 281, 303, 318, 360, 391], "005027": 280, "005115": 275, "005383": [207, 208], "005422": 277, "005670": [207, 208], "0057717": 51, "005840": 280, "005861": 280, "006": [42, 44, 285, 391], "006360": 280, "007": [262, 285, 298, 360], "0072b2": 262, "0075": [479, 547], "00755": 547, "007581": 282, "00768662e": 200, "0077": 1027, "007822": 291, "007833": 282, "008": [173, 360, 382, 391], "008142": [207, 208], "0083899664": 770, "008449": [207, 208], "00860051": 664, "008915": 280, "009": [42, 391], "009075": 191, "00911944e": 200, "0092": 141, "009362": [207, 208], "009747": 291, "009778": 280, "009788": 291, "0098": 141, "00ff00": 306, "01": [44, 46, 48, 51, 52, 74, 78, 85, 96, 124, 126, 127, 141, 150, 152, 154, 156, 157, 173, 180, 184, 191, 192, 200, 203, 210, 226, 231, 232, 237, 239, 240, 246, 250, 251, 252, 256, 257, 264, 268, 270, 276, 277, 278, 282, 284, 285, 286, 303, 314, 316, 318, 328, 334, 350, 360, 365, 366, 380, 382, 390, 415, 424, 455, 477, 521, 527, 538, 545, 549, 551, 601, 602, 604, 611, 648, 652, 660, 664, 684, 702, 721, 806, 820, 904, 967, 994, 998, 1002, 1008, 1010, 1012, 1019, 1028, 1032], "010": [51, 360, 391, 835, 1006], "0106": 655, "010877306503748912": 285, "011": [42, 285, 298, 360, 391], "011595": [207, 208], "0116": 610, "011e": 423, "012": [51, 194, 196, 360], "012191": [207, 208], "012521": 208, "012831": 208, "0129126": 379, "013": [42, 51, 92, 170, 203, 285, 360, 1019], "01327": 380, "013519": 191, "014": [42, 77, 285, 391, 1019], "0144": 621, "015": [360, 363, 1006], "0152": 141, "015347e": 237, "015414e": 237, "015579": 291, "015587e": 237, "015596": [207, 208], "0157": 550, "015716e": 237, "016": 360, "01621459": 415, "016445": 277, "017": [391, 477, 478], "017379": 51, "017646": [207, 208], "018": [51, 80, 277, 330, 478, 1019], "0182": 903, "018727": 191, "0188ff": 322, "018900": 208, "019": [173, 382, 391, 477], "019023": 277, "019069": 208, "01915283": 134, "019163": [207, 208], "0193": [476, 482], "0195": [428, 481], "0196": 141, "0198e1": 122, "019907": [207, 208], "01e": 205, "02": [42, 50, 51, 65, 78, 84, 86, 92, 96, 98, 114, 116, 124, 127, 140, 147, 173, 177, 182, 190, 191, 200, 237, 246, 254, 256, 271, 272, 278, 284, 303, 313, 316, 318, 320, 342, 344, 360, 364, 379, 382, 390, 414, 419, 447, 451, 603, 611, 664, 682, 806, 820, 889, 905, 919, 994, 1019], "020": [42, 51, 281, 1006, 1019], "02069427": 87, "021849": 332, "021872": [207, 208], "022": [56, 360, 1006, 1019], "022594": 191, "0226": 655, "022688": [207, 208], "023": [51, 285, 911, 1006], "02306214": 673, "02449161": 134, "02456369": 203, "024991": [207, 208], "025": [66, 221, 256, 274, 696, 700], "025102": 191, "025118864315095794": 1030, "025422": 277, "0255": 141, "0256": 178, "02564103": 367, "025930": [207, 208], "026": [117, 248, 283, 315, 360, 1019], "026328": [207, 208], "026711": 88, "027": [51, 173, 360, 382], "027400": 372, "0276": 359, "028": 275, "02818216": 116, "02891072": 999, "029": 1006, "0292": 359, "02d": 208, "03": [50, 51, 86, 112, 124, 154, 173, 180, 191, 200, 237, 250, 262, 268, 278, 338, 360, 382, 423, 754, 806, 994, 998, 1019], "030": [154, 360], "030462": 104, "030498": 104, "030585": 291, "030677e": 237, "030867": 191, "031": [82, 173, 360, 382], "031020": 104, "031025": 191, "031255": 191, "031555": 208, "03162278": 50, "031988": [207, 208], "032": [44, 1019], "0321": 841, "032179": 208, "03228": 628, "03228706": 616, "032356": [207, 208], "03237920e": 200, "032405": 191, "03260883": 999, "033": 1006, "033764e": 237, "033823": 191, "034": [154, 175, 477], "034077": 208, "034194": [207, 208], "034278": 280, "0343": 359, "034309": [207, 208], "03433306456": 44, "034821": [207, 208], "03498585": 999, "035005": 191, "03531816": [832, 833], "035445": 291, "0358": 45, "035914": 291, "036": [92, 391, 478], "036038": [207, 208], "036385": [207, 208], "036445": 277, "036592": 291, "036656": [207, 208], "0367": 180, "0368": 625, "037": 715, "0370": 856, "037600e": 237, "038": [205, 477, 478, 867], "038076": [207, 208], "03812219": 999, "038159": 818, "03823144": 178, "038689": 267, "0387": 610, "038851": 45, "039": [275, 757, 787, 998], "039493": [207, 208], "039497": 260, "039771": 45, "03f": 275, "04": [51, 65, 74, 76, 88, 101, 116, 126, 133, 173, 180, 191, 200, 218, 237, 254, 256, 262, 268, 277, 278, 290, 311, 335, 354, 382, 422, 424, 477, 478, 652, 653, 658, 666, 667, 668, 687, 794, 806, 820, 994, 998, 1002, 1012, 1019], "040530e": 237, "041": [51, 215, 1019], "041297": 314, "0416": 414, "042": [82, 92, 391], "0427": [237, 475, 480], "042898": 314, "043": [256, 391, 1019], "043401": [207, 208], "044": [42, 275, 335, 757, 998, 1019], "044223": [207, 208], "044451": [207, 208], "044642": [207, 208], "0448": 237, "045": [253, 729, 1019], "04520": 164, "0453": 550, "045311": 314, "045390e": 237, "045599": [207, 208], "045934": 314, "046010e": 237, "046636": 191, "046641": [207, 208], "047": [44, 71, 391, 1019], "0479": 550, "048": 1006, "049": 477, "049530": 314, "049540": 314, "0499": 550, "04995982": 116, "05": [45, 46, 51, 53, 60, 62, 71, 78, 86, 94, 96, 98, 99, 101, 108, 116, 121, 129, 141, 144, 151, 154, 157, 164, 169, 173, 183, 184, 191, 199, 200, 218, 221, 233, 243, 244, 246, 256, 262, 264, 265, 268, 277, 278, 286, 288, 303, 306, 311, 318, 320, 327, 331, 338, 340, 353, 382, 424, 456, 462, 484, 531, 536, 537, 552, 598, 601, 602, 604, 619, 620, 621, 625, 626, 628, 629, 631, 638, 639, 655, 696, 700, 762, 806, 859, 910, 911, 994, 1002, 1008, 1019], "050": [51, 1006], "05063247886572012": 285, "050680": [207, 208], "051": [202, 241, 478, 1019], "051061": 45, "0511": 359, "0512": 550, "051474": [207, 208], "0517578125e": 45, "052": 543, "05216586": 116, "052506": 332, "053": [42, 173, 360, 382, 391], "05306648": 132, "05317": 180, "054045": 280, "054699": 191, "0547": 914, "055": [173, 382, 998], "05518": 629, "05532": 626, "05534985": 315, "0556": 914, "056": [51, 761, 1006], "0561": 914, "0566": 629, "05663": 626, "0568": 753, "057": [119, 241, 391, 835, 1019], "057122": 208, "05752333": 134, "057711": 208, "058": [173, 275, 382], "05840206": 134, "059": 360, "0595": 479, "05968": 164, "05994843": 50, "05e": 184, "06": [51, 86, 101, 184, 191, 210, 218, 219, 256, 277, 278, 285, 316, 320, 354, 391, 414, 488, 489, 490, 650, 651, 695, 699, 803, 804, 806, 820, 919, 994, 1008, 1010, 1019], "060": [42, 51, 360, 757], "0602": 45, "061": 275, "0614": 629, "06165": 626, "061696": [207, 208], "062": 360, "0622": [476, 482], "0626": 841, "063": [275, 277, 443], "0631": 51, "064": [276, 391, 1006, 1019], "064106": 45, "065": [214, 275, 391, 1019], "06506307": 315, "0652": 628, "06525643": 616, "066": [76, 173, 275, 654, 1019], "06686804": 234, "06694199": 134, "06695631e": 112, "067": 184, "067109": 208, "067528": 208, "068": [42, 51, 277], "068332": [207, 208], "06880943": 116, "06896552": 455, "069": [192, 275, 349, 1019], "069196": 275, "0693": 625, "07": [51, 116, 133, 191, 215, 237, 271, 286, 368, 380, 415, 567, 568, 698, 700, 998, 1012, 1019], "070": [165, 1019], "0707": 629, "07073": 626, "071": [173, 335, 382, 443], "071964": 191, "072": [443, 654], "073": [48, 275, 353, 477, 478, 1019], "074": [93, 275, 322, 1019], "074412": [207, 208], "075": [127, 231, 232, 1019], "07582983e": 200, "075887": 208, "076": [42, 206, 898, 1019], "077": 298, "077846": 277, "0779": 45, "078": 42, "07846529": 315, "07880": 164, "079": [173, 382], "079297": 277, "07963978e": 200, "07993421": 234, "08": [42, 78, 84, 127, 191, 192, 203, 316, 382, 484, 537, 549, 551, 569, 647, 664, 806, 867, 868, 889, 1004, 1019], "08022103": [832, 833], "080295": 208, "081": 1006, "0813": [475, 480], "082": 42, "0825": 323, "083": [130, 275, 360, 1019], "08333333": 367, "08377444": 757, "084": 60, "085299": [207, 208], "08533159": 222, "085711": 88, "08604995": 116, "086944": 260, "08699432": 223, "0872422": 666, "088": [82, 675, 1006], "089": 44, "089063": [207, 208], "08d": 54, "08t16": 379, "09": [126, 127, 133, 191, 250, 254, 290, 415, 535, 613, 741, 848, 998, 1008, 1012, 1019], "090": [45, 1019], "09000": 219, "090528": 191, "0907": 359, "090808": 191, "091": [175, 1019], "091053": 191, "091621": 88, "092": [53, 361], "092204": [207, 208], "093": [258, 477, 1019], "094": [344, 478, 1019], "09443967": 315, "095": [222, 365, 1019], "09517222": 1030, "09541846": 542, "09684337": 234, "096950": 314, "097": [42, 173, 382], "098": [241, 360], "098332": 61, "0986": [423, 874], "09861229": [618, 1008], "098758": 61, "098776": 277, "098932": 61, "099": [42, 53, 75, 1019], "099820": 61, "09999999999999999": [252, 285, 348], "0d": 1040, "0e": [288, 555, 556], "0e4": 226, "0f": [56, 92], "0min": 88, "0rc1": 389, "0x": 933, "0x7f95e9fb8910": 337, "0x7f95ff865d30": 275, "0x7f95ff99b580": 257, "0x7f9600c669d0": 267, "0x7f9614694340": 289, "0x7f9614d25610": 219, "0x7f96157f7640": 284, "0x7f9615b05700": 143, "0x7f9615b05c10": 143, "0x7f9615eb9e80": 289, "0x7f96162ff240": 289, "0x7f9616875eb0": 289, "0x7f9617021220": 159, "0x7f9617021910": 159, "0x7f961712da60": 104, "0x7f961712de20": 104, "0x7f963f92b820": 105, "0x7f963f935310": 104, "1": [0, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 398, 399, 400, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 941, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1035, 1037, 1041], "10": [1, 42, 43, 44, 45, 46, 48, 50, 51, 53, 54, 57, 61, 62, 63, 65, 66, 67, 71, 73, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 110, 111, 112, 113, 114, 116, 117, 122, 126, 127, 128, 129, 133, 134, 138, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 154, 156, 157, 160, 162, 166, 170, 173, 176, 177, 179, 181, 182, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 203, 209, 210, 212, 213, 217, 219, 220, 221, 222, 223, 224, 225, 226, 230, 231, 232, 235, 236, 237, 240, 241, 246, 249, 250, 251, 252, 253, 255, 256, 257, 259, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 288, 291, 292, 295, 297, 303, 313, 314, 315, 316, 318, 319, 321, 322, 323, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 341, 346, 347, 348, 350, 351, 353, 354, 355, 357, 359, 360, 361, 368, 372, 379, 380, 381, 382, 383, 385, 387, 390, 391, 397, 398, 399, 403, 406, 407, 408, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 444, 449, 453, 455, 457, 458, 459, 465, 466, 468, 481, 494, 498, 499, 502, 506, 507, 508, 510, 516, 517, 518, 519, 522, 526, 527, 530, 532, 534, 537, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 554, 558, 561, 562, 563, 564, 567, 568, 570, 571, 572, 573, 574, 576, 588, 589, 593, 599, 600, 605, 606, 611, 613, 617, 623, 625, 633, 636, 638, 640, 641, 642, 643, 646, 648, 649, 650, 652, 653, 655, 658, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 678, 679, 681, 682, 683, 684, 687, 691, 692, 697, 698, 701, 702, 705, 711, 721, 732, 748, 762, 775, 803, 804, 806, 807, 808, 809, 810, 817, 820, 821, 822, 823, 824, 826, 827, 829, 834, 836, 837, 838, 839, 845, 846, 847, 849, 850, 851, 857, 866, 867, 868, 870, 876, 880, 883, 884, 887, 899, 907, 913, 916, 918, 919, 923, 934, 944, 947, 951, 962, 967, 968, 974, 975, 984, 987, 988, 993, 994, 995, 996, 998, 999, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1019, 1023, 1027, 1028, 1030, 1031, 1032, 1036, 1037, 1040, 1041, 1042, 1047, 1049, 1050, 1051, 1053, 1054], "100": [42, 43, 45, 48, 50, 51, 54, 56, 61, 63, 71, 76, 84, 87, 91, 95, 100, 104, 105, 108, 111, 112, 124, 126, 127, 133, 139, 144, 154, 155, 158, 161, 176, 180, 183, 184, 191, 192, 194, 196, 198, 199, 201, 203, 205, 207, 209, 210, 211, 213, 218, 219, 220, 221, 223, 228, 229, 230, 232, 234, 235, 237, 241, 242, 244, 249, 250, 251, 252, 253, 257, 262, 264, 268, 271, 272, 273, 275, 277, 280, 282, 287, 288, 292, 303, 304, 305, 316, 319, 320, 322, 324, 325, 330, 334, 335, 341, 342, 346, 347, 349, 350, 351, 354, 355, 357, 359, 360, 363, 366, 367, 372, 374, 380, 382, 385, 387, 390, 391, 406, 412, 415, 416, 419, 420, 421, 422, 423, 443, 447, 451, 455, 477, 478, 484, 496, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 536, 540, 542, 545, 550, 551, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 613, 616, 637, 638, 639, 645, 646, 647, 648, 652, 653, 654, 655, 658, 659, 664, 665, 666, 667, 668, 669, 671, 673, 675, 677, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 752, 803, 804, 808, 828, 834, 835, 840, 845, 846, 847, 849, 850, 851, 855, 867, 868, 886, 888, 891, 900, 917, 987, 988, 991, 995, 998, 999, 1005, 1008, 1010, 1019, 1023, 1027, 1031, 1032, 1047, 1048, 1049, 1052, 1053], "1000": [42, 45, 46, 53, 62, 66, 71, 84, 105, 108, 116, 133, 141, 143, 145, 149, 150, 151, 156, 161, 165, 168, 181, 196, 205, 211, 222, 241, 249, 250, 252, 262, 266, 271, 275, 277, 283, 286, 288, 303, 305, 319, 322, 328, 329, 331, 333, 334, 349, 350, 356, 359, 360, 390, 391, 398, 413, 423, 443, 479, 485, 486, 537, 538, 543, 545, 547, 548, 549, 551, 552, 554, 559, 570, 638, 652, 653, 657, 658, 659, 661, 666, 667, 668, 669, 672, 673, 674, 678, 682, 683, 684, 693, 698, 704, 707, 770, 887, 899, 905, 910, 911, 987, 991, 1013, 1027, 1030, 1046, 1048, 1057], "10000": [42, 49, 51, 65, 77, 97, 105, 106, 152, 164, 205, 212, 219, 227, 235, 250, 252, 290, 329, 345, 347, 368, 374, 422, 423, 567, 568, 650, 685, 887, 916, 1010, 1028, 1032], "100000": [179, 252, 262, 385, 619, 620, 621, 625, 626, 628, 629, 631, 899, 991, 1030, 1032], "1000000": [54, 542], "10005": 1047, "1000x": 1045, "1001": [230, 260], "10027": 1052, "10045": 1047, "1005": 1013, "10058": 1048, "10059": 1047, "10065": 256, "1007": 711, "10070308464041304": 219, "10071": 1047, "10093": 1047, "10095": 1047, "10096": 1052, "100_000": [61, 63, 191], "100k": [250, 1025], "100ksampl": 1025, "100x": [1039, 1042, 1056], "101": [63, 173, 295, 382, 856, 1040], "10101": 1047, "10112": 1047, "1013": 1006, "10142": 1047, "10153": 1047, "10168": 1054, "10181": 1047, "10192": 1047, "10195": 1047, "101alexmartin": [1056, 1057], "102": [391, 1030, 1041], "10210": 1047, "10229": 1047, "1024": [87, 133, 455, 474, 544, 908, 1052], "10280": 1047, "10297": 1047, "103": [53, 154, 205, 297, 298, 380, 422, 503, 561, 562, 1039], "10306": 1047, "10325": 1047, "10336": 1047, "10346": 1047, "10377": 1047, "1038": 415, "10397": 1047, "104": [42, 60], "10403": 237, "10412": 1047, "10428": 1047, "10437": 1047, "10440": 1048, "10441": 1047, "1045": 104, "10452": 1047, "10458": 1047, "1046": [104, 267], "10463": 1018, "10468": 1054, "10469096": 178, "1047": 104, "10471": 1047, "10474": 1047, "10478008": 415, "10482": 1049, "1048576": [588, 595], "10493": 1051, "105": 322, "10500": 1047, "10521": 1047, "10526": 415, "10536": 1047, "10580": 1048, "10581": 1047, "10584743": 178, "10587": 1047, "10591": 1051, "10593": 1047, "106": [173, 229, 260, 382, 886, 992, 1019, 1040], "10606655": 234, "10610": 1047, "10655": 1047, "10663": 1047, "10677": 1047, "10687": 1047, "107": [154, 304, 332, 415, 905, 999, 1019, 1041], "10708": 1051, "10711": 1051, "10723": [1046, 1047], "10727": 1048, "1073": [380, 494], "10733": 1018, "10740": 1047, "1076": 341, "10774": 1047, "10795": 1047, "108": [0, 46, 212, 1019, 1040], "1080": [379, 415], "10805": 1053, "10811": 1047, "10815": 1049, "10827": 1047, "10829": 1047, "10834": 237, "10836": 1047, "1084": 267, "10845": 1047, "10869": 1047, "1088": 260, "10881": 1047, "108843": 280, "10887": 1047, "108880": 61, "10898": 1047, "10899": 1047, "109": [60, 87, 999, 1041], "10908": 1047, "10913": 1047, "10914094": 234, "10928": 1047, "10933": 1047, "10982": 1047, "10992": 1047, "10998": 1047, "10999": 1047, "10_000": [45, 61, 108, 143, 151, 190, 196, 250, 280, 298, 335, 565, 566, 570, 571, 887], "10_fold": [380, 499], "10e": [198, 203], "10k": [328, 453, 1025], "10ksampl": 1025, "10x": 1039, "10x10": 224, "10\u2079": 1047, "11": [42, 51, 53, 56, 107, 113, 126, 173, 178, 191, 192, 203, 219, 220, 221, 224, 241, 250, 256, 271, 274, 282, 283, 289, 301, 302, 304, 322, 329, 332, 333, 347, 351, 355, 359, 361, 379, 382, 383, 391, 398, 415, 418, 419, 422, 456, 463, 488, 489, 490, 491, 502, 507, 523, 524, 618, 656, 662, 676, 721, 727, 729, 730, 784, 785, 786, 807, 810, 824, 827, 835, 862, 919, 948, 962, 990, 994, 996, 1008, 1012, 1013, 1019, 1023, 1030, 1032, 1037, 1041, 1045, 1047, 1048, 1050, 1053, 1054], "110": [120, 198, 216, 226, 249, 305, 324, 334, 367, 443, 992, 993, 1019], "1100": 84, "11000": 1048, "11005": 1047, "11006": 1047, "11010": 1047, "11011": 1047, "11021": 154, "11042": 1047, "11047": [1018, 1049], "11064": 1051, "11082": 1047, "110923": 208, "11099": 770, "111": [42, 45, 46, 101, 120, 130, 216, 234, 243, 277, 298, 862, 1031, 1042], "1111": [656, 662], "1111111111111111": 285, "11124": 1047, "1112658": [904, 1010], "11135": 1047, "11136": 1047, "1114": 267, "11144": [1047, 1048], "11144673": 234, "11160": 1047, "11166": 1047, "1117": 625, "11176": 1047, "11179": 1048, "1118": 104, "112": [88, 173, 201, 228, 313, 380, 382, 1019, 1041], "11206": 1047, "11211": 1047, "112141": 391, "11232": 1049, "11235": 1047, "112589990684262": 752, "11272": 1047, "11293": 1047, "11295": 1047, "11296": 1050, "113": [209, 295, 341, 391, 1019, 1042], "11306": 1047, "11308": 1047, "11310": 1047, "11314": 380, "11315": 1047, "11327": 1047, "113516": 280, "11353": 1047, "11354": 1048, "11364": 1048, "11364637": 50, "113781": 332, "11378556": 315, "114": [192, 332, 716, 1039], "1140": 380, "11413": 42, "11420": 1047, "1145": [196, 415, 682], "11452112": 234, "11458": 1048, "11464": 1047, "11466": 1047, "11467": 1047, "1148": 267, "115": [192, 1006], "11505": 1047, "11514": 1050, "11520": 1047, "11526": 1048, "11528972": 234, "11542": 1047, "11553": 1047, "11556": 1047, "11557": 1047, "11558": 1047, "11576": 1047, "11585": 1047, "11596": 1047, "116": 1039, "1162": 415, "11635": 1049, "11646": 1048, "11650": 1048, "11679": 1047, "11680": 46, "11682": 1051, "11682692": 234, "11693539": 116, "11699": 1048, "117": [252, 1040], "11705": 1048, "117154": 191, "11724": 1047, "11727": 1048, "11741": 1047, "11754": 1048, "11756": [1047, 1048], "117608": 61, "11774": 1047, "1179": 267, "118": 596, "11805": 1018, "11841": [904, 1010], "1185": 391, "11860": 1054, "1189": 422, "119": [73, 252, 992, 1019, 1042], "11901": 1047, "11905": 1047, "11912": 1047, "11915045": 368, "11924": 1047, "11931": 219, "11932": 219, "11933": 219, "11935": 219, "11950": 1050, "11951": 1047, "11958": 180, "11973": 1048, "11977": 1018, "12": [0, 42, 44, 57, 69, 74, 76, 77, 87, 89, 90, 91, 106, 107, 116, 147, 148, 149, 152, 154, 173, 178, 179, 180, 187, 191, 192, 194, 199, 203, 205, 219, 227, 237, 239, 242, 243, 246, 247, 249, 257, 260, 264, 265, 271, 276, 277, 279, 280, 283, 289, 291, 301, 322, 323, 324, 329, 332, 335, 355, 361, 382, 383, 390, 398, 400, 403, 407, 408, 409, 415, 419, 423, 449, 453, 455, 463, 488, 489, 490, 491, 502, 538, 540, 547, 576, 652, 653, 658, 666, 667, 668, 670, 675, 677, 687, 691, 692, 695, 698, 699, 731, 736, 803, 804, 807, 824, 827, 841, 862, 878, 979, 987, 988, 990, 994, 996, 999, 1008, 1012, 1013, 1019, 1023, 1028, 1037, 1040, 1042, 1046, 1047, 1049, 1050, 1055, 1056], "120": [155, 240, 334, 424, 596, 1039], "1200": [84, 150, 318, 422], "12000": 526, "12068": 1049, "12069": 1052, "121": [101, 140, 153, 187, 251, 624, 675, 1008, 1019], "12105": 1047, "1211": 272, "12116": 1048, "1212": 504, "12122": 1047, "121351": 208, "12143": 1048, "12145": 1049, "12147": 1018, "12159": 1047, "12165": 1047, "12165031": 999, "1217": 219, "12171": 1047, "12174": 1048, "12177": 1048, "12190903": 116, "12196": 219, "12197": 1048, "122": [0, 140, 180, 187, 192, 251, 391, 999], "1220": 625, "12211": 1047, "12222": 1048, "12232": 1048, "12234": 1047, "12246": 1047, "12251": 1048, "12258": 1049, "12274212": 999, "12279": 1048, "12285": 1054, "1229": 523, "123": [142, 161, 162, 368, 422, 522, 523, 524, 561, 562, 843, 999, 1006, 1019], "12300": 1048, "12303": 1049, "12304": 1047, "12317": [180, 1047], "1232": 422, "12326": 42, "12327": 42, "12328": [42, 1048], "12329": 42, "12330": [42, 1047], "12334": 1048, "12338": 1047, "12339": 1047, "1234": [199, 265, 280, 385], "12344": 1048, "12345": 1047, "12350": 1047, "1236": 324, "12360": 1047, "12365": 1047, "12379": 42, "12380": 42, "12381": 42, "12382": 42, "123828": 280, "12383": 42, "12388": 1047, "12393": 1047, "124": [45, 422, 1041], "124225": 208, "12436": 1048, "12441": 1047, "12451": 1047, "12462": 1047, "12467": 1047, "12471": 1047, "12481": 1047, "125": [42, 87, 112, 127, 146, 330, 360, 540, 987, 998, 1008], "12513": 1048, "12514": 1047, "125140": 280, "12517": 1047, "12518": 1047, "12522": 1047, "125247168": 51, "12543": 1048, "12557": 1049, "12568": 1048, "12569": 1049, "12582": 1048, "12583": 1048, "1259": 56, "12599": 1048, "126": 422, "12612": 1047, "12613": 1048, "12625": 1047, "1263": 391, "12638": 1051, "12650": 1049, "126502": 208, "12669": 1048, "1268187": 234, "12685": 1047, "12699": 1047, "127": [150, 1039], "12701": 1047, "12704": 1047, "127128": 151, "12715": 1048, "12732": 1048, "1276": 46, "12789": 1049, "128": [52, 53, 219, 372, 542], "12800": 1018, "12807": 1048, "12821": 1048, "12834": 1048, "12852": [1018, 1049], "12855": 1048, "12860": [237, 1048], "12861": 1048, "12866": 1018, "1288": [44, 380], "12881": 1047, "12883823": 419, "12887": 1049, "129": [221, 1028, 1039], "12908": 1048, "12914884": 999, "12916": 1048, "12927": 1049, "12946": 1047, "12949": 1047, "12955": 1048, "12972": 1048, "12983": 1048, "12988": 1048, "1299": [876, 1008], "12th": 1010, "13": [42, 44, 48, 49, 51, 78, 107, 129, 133, 147, 150, 152, 186, 191, 196, 205, 228, 244, 270, 271, 278, 281, 283, 316, 318, 322, 335, 348, 380, 382, 385, 391, 398, 419, 427, 502, 516, 519, 538, 539, 557, 558, 588, 612, 641, 645, 740, 765, 824, 854, 869, 876, 902, 903, 994, 998, 999, 1004, 1005, 1008, 1013, 1023, 1037, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1051], "130": [297, 391, 1019], "1300": 84, "13003": 1051, "13005": 1047, "13007": 1048, "130107": [234, 250, 495], "13013": 1049, "13042": 1054, "13046": 1047, "13077794": 368, "13086": 1048, "131": [42, 52, 90, 391, 998, 1040], "13124": [1047, 1048], "13134": 1047, "13142": 1048, "13146": [1018, 1049], "13151": 1048, "13157": 1048, "13164": 1048, "13165": 1047, "13170937": 1030, "13174": 1048, "1319": [876, 1008], "131900": 103, "13193": 1048, "132": [42, 46, 52, 90, 422], "13204": 1051, "13213": 1049, "1322": 628, "13221": 1047, "13222543": 616, "13227": 1018, "1323": 219, "13231": 1049, "13233": [380, 499, 500], "13240": 1048, "13241": 1048, "13250": 1048, "13251": 1048, "13253": 1048, "13260": 1048, "13266": 1048, "13276": 1047, "13279": 1048, "13283": 1048, "13286": 988, "13290": 1049, "133": [52, 90, 266, 1019], "13312": 1047, "13317": 1048, "13328": 1048, "13333": 1048, "13336": 1048, "13350": 1048, "13363": 1048, "13366": 1048, "13374": 42, "13375": 42, "13376": 42, "13377": 42, "13378": 42, "1338": 272, "13382": 1048, "13389": 1048, "13392": 1049, "13393": 1049, "13397": 1048, "134": [42, 79, 87, 130, 150, 260, 271, 277, 1019, 1042], "13422": 1048, "13427": 1048, "13439": 1048, "13447": 1048, "13459": 1048, "13467": 1049, "13485": 1048, "13486": 1048, "13496": 1048, "135": [127, 173, 332, 382, 1019], "13511": 1050, "13524": 1048, "1353": 359, "13531": 1048, "13545": 1048, "13549": 1048, "13554": 1048, "13562": 1048, "13575": 1049, "1358": 46, "136": [122, 1019], "13601": 1048, "13607": 1048, "13609": 1049, "13618": 1049, "13620": 1048, "13628": 1048, "13636": [994, 1048], "1364": 46, "13641": 1048, "13649": 1056, "13651": 1048, "137": [256, 391, 1040], "13704": 1049, "13707": 1049, "1371": 540, "13726": 1049, "1373": 995, "1374": 540, "13741": 1048, "13769": 1049, "13772": [1047, 1048], "13773": 1049, "13779": 1048, "1378": 237, "13780": 1048, "1379": 237, "138": [391, 422, 998], "13806": 1049, "1382": 530, "13822072286080167": 285, "1383": 46, "13835": 1048, "1385": 480, "13864": 1048, "13875": 1049, "13877": 1048, "13894": 1048, "13896": 1049, "139": [237, 298, 391, 422, 458, 468, 697, 701, 999], "13900": 1051, "13902": [1018, 1049], "13903": [1047, 1048], "13910": 1048, "13911": [1018, 1049], "1392": 46, "13925": 1049, "13933": 1049, "13938": 1049, "13947": 1048, "1396": 995, "13960": 1049, "1397": 391, "13974": 1048, "13983521": 315, "13987": 1049, "13988486": 234, "13995": 1049, "13th": 63, "14": [42, 49, 51, 72, 83, 94, 96, 97, 100, 107, 113, 129, 168, 192, 203, 208, 210, 237, 241, 246, 251, 256, 271, 276, 282, 283, 292, 297, 298, 321, 322, 332, 354, 357, 373, 380, 382, 383, 398, 403, 407, 408, 415, 419, 502, 504, 516, 559, 560, 641, 649, 698, 820, 824, 876, 991, 994, 998, 1008, 1013, 1019, 1023, 1037, 1039, 1040, 1042, 1043, 1047, 1052], "140": [87, 334, 422, 516, 522, 523, 524, 561, 562, 999, 1019], "1400": [84, 480], "14012": 1049, "14024": 1048, "14028": 1049, "14035": 1049, "14048": 1050, "14053": 1048, "14067": 1048, "14075": 1050, "14087": 1048, "14092": 1048, "141": [85, 295, 507, 540, 910, 999, 1019], "14108": 1049, "14114": 1049, "14156": 237, "14170": 1049, "14180": [1018, 1050], "1419": 42, "14194": 1049, "14197": 1048, "142": [42, 422], "1422": 42, "14228": 373, "14237": [1047, 1048], "14259": 1049, "14264": 1050, "142857": 237, "14286": 1049, "14287": 1049, "14294": 1049, "14296": 1049, "143": [173, 178, 347, 382, 477, 478, 1010, 1019, 1039, 1040], "14300": 1050, "14302": 256, "14305": 1049, "14309": 1048, "14336": 1049, "14338": 988, "14356": 1049, "14357": 1049, "14378": 1049, "14381": 1049, "14393": 1048, "144": [44, 249, 277, 391, 1019, 1039], "1440": 42, "14406": 1049, "1441": 628, "14410151": 616, "14417": 1049, "144204": 151, "1443": 1004, "14430": 1049, "14446": 1051, "14458": 1049, "14464": 1049, "14475": 1049, "144943": 61, "14496": [391, 1048], "145": [51, 415], "14510": 1049, "14516": 1050, "14520": 1049, "14538": 1049, "14544": 1049, "14549": 1049, "1456": 237, "14582": 1018, "14591": 1049, "14593": 1049, "14595": 1049, "145957": 151, "146": [44, 422], "1460": [148, 159], "14602": 1049, "14603365": 234, "14623": 1049, "14625": 46, "14629": 1049, "1464": 247, "14646": 1049, "14647": 1049, "14680": 1049, "14682": 1049, "14696": 1050, "147": 999, "14702": 1049, "147022": 208, "14704": 1049, "14706": 1049, "1471": 1004, "14710": 1049, "14732": 1049, "14736": 1054, "1474": 391, "14740": 1049, "14764": 1049, "148": 1042, "14800": 1051, "14810": 324, "14848": 1050, "14849": 1049, "14862": 1054, "14864": 1049, "14865": 1049, "14869": 1049, "14872": 1049, "14884": 1049, "14890": 1049, "14894": 1049, "14898": 1049, "149": [999, 1039], "14900": 1049, "14902": 1049, "14907": 1049, "14908": 1049, "14933": 1049, "14936": 1049, "14971": 1049, "14975": 1053, "14982": 1051, "1499": 46, "15": [42, 44, 45, 50, 51, 52, 53, 65, 66, 69, 74, 78, 87, 88, 89, 95, 96, 100, 106, 107, 112, 114, 122, 133, 142, 144, 147, 148, 151, 154, 168, 170, 172, 175, 179, 186, 190, 191, 192, 208, 216, 221, 233, 237, 241, 244, 246, 264, 265, 271, 272, 280, 282, 285, 288, 289, 292, 302, 306, 313, 314, 316, 318, 320, 322, 333, 338, 346, 348, 351, 354, 357, 364, 379, 380, 383, 385, 398, 403, 407, 408, 419, 422, 423, 446, 460, 496, 502, 503, 504, 537, 543, 551, 552, 561, 562, 604, 610, 615, 650, 658, 667, 669, 674, 682, 684, 698, 824, 839, 862, 891, 987, 993, 994, 995, 998, 1001, 1002, 1008, 1013, 1019, 1023, 1028, 1035, 1037, 1041, 1051, 1053, 1054], "150": [42, 44, 120, 122, 142, 151, 164, 240, 244, 246, 290, 334, 352, 355, 382, 419, 424, 510, 607, 608, 831, 832, 833, 998, 1027, 1028, 1029], "1500": [73, 84, 91, 96, 101, 122, 239, 243, 262], "15000": [678, 693, 867, 868], "15005": [1050, 1052], "15007": 1051, "15010": 1049, "1502": 1032, "15028": 1049, "15038": 1049, "150407": 391, "15044": 1049, "15049": 1049, "150527": 314, "15053": 1049, "15057": 1049, "1506": 393, "15080": 1049, "15082": 1049, "15083": 1049, "15084": 1049, "15086": 1049, "15094": 1049, "15096": 1049, "15099": 1049, "150x4": 120, "151": [91, 332, 391, 422, 507, 1010, 1019], "15100": 1049, "1511007": 260, "151101": 260, "15119": 1049, "15120": 1049, "15126": 1051, "15138": 1049, "15160": 1049, "1517": 316, "15179": 1050, "152": [92, 391], "15257": 1049, "1527": 866, "15274": 1049, "15297572": 542, "153": 669, "15304": 1049, "15319": 1018, "153244303321897735": 415, "15361": 1051, "15375": 1049, "15380": 1050, "15382": 1049, "15393": 1049, "154": [259, 316, 657, 999, 1019], "1542": 391, "15427": 1051, "15429": 1049, "15436": 1050, "154453": 314, "15463": 1049, "15488": 1049, "15490": 1049, "15503": 1050, "15521": 164, "15524": 1049, "1553374": 415, "1553511": 415, "1554": 866, "15550": 1018, "15557": 1049, "15558": 1050, "15582": 1050, "156": [173, 191, 382], "15611": 988, "15622": 1050, "15625": 1049, "156252": 208, "15636": 1051, "15652": 1050, "15655": 1050, "15661": 1049, "15669": 1050, "15699552": 999, "157": 391, "15707": 1050, "15709": 1050, "15730": 1050, "157334": 314, "15751": 1049, "15760": 1049, "15762": 1050, "15763": 1051, "15773": 1050, "15782": 1050, "15785": 1050, "15797": 1049, "158": [76, 422, 675], "15806": 1050, "15810": 1049, "15834": 1050, "15863": 1049, "15864": 1050, "15868": 1049, "15879": 1049, "15888": 1049, "15898": 1049, "159": [87, 380, 1039], "15918": 1050, "1592": 504, "15926": 1050, "15930": 1049, "15933": 1049, "15936": 1049, "15937": 1049, "159419": 260, "15946": 1050, "15947": 1049, "15948": 1053, "15950": 1050, "15953": 1050, "15959": 1050, "15963": 1050, "1597": 271, "15980": 1050, "15984": 1053, "15996": 1049, "15e": 124, "16": [42, 43, 51, 56, 63, 77, 84, 85, 88, 100, 107, 112, 124, 127, 168, 192, 212, 218, 219, 220, 234, 237, 239, 240, 241, 244, 251, 255, 271, 279, 280, 281, 302, 316, 318, 322, 327, 352, 360, 365, 380, 382, 383, 391, 398, 403, 407, 408, 419, 420, 423, 448, 463, 465, 477, 478, 484, 485, 503, 504, 508, 522, 540, 541, 576, 595, 601, 602, 613, 614, 645, 656, 657, 660, 661, 662, 663, 688, 689, 819, 824, 836, 885, 911, 919, 974, 975, 976, 987, 994, 998, 1008, 1013, 1019, 1023, 1032, 1035, 1037, 1039, 1040, 1044, 1045, 1047, 1048], "160": [254, 339, 987, 1019, 1030], "1600": 84, "160030": 208, "16006": 1050, "1600x1600": 88, "16018": 1053, "16021": 1050, "16052385": 134, "16061": 1053, "16066": 1051, "16069": 1050, "16075": 1050, "16076": 1049, "16084": 1050, "16090": 1050, "16103": 1050, "16111": 1050, "16112": 1050, "16117": 1050, "161245": 88, "16132": 1050, "16144": 391, "16147": 382, "16149": 1050, "16159": [391, 1050], "1616": 479, "16182": 1050, "16183": 1050, "162": [92, 382], "16224": 1050, "1623": 56, "1624": 504, "16245": 1050, "16257": 1050, "1626": 1018, "16261": 1050, "16266": 1050, "16280": 1050, "16289": 1051, "163": [173, 295, 382, 1006], "163224": 208, "16323": 1050, "16326": [42, 1051], "16327": 42, "16328": 42, "16329": 42, "16330": 42, "16331": 1050, "16335": 1051, "16352": 1051, "16362": 1050, "16379": 42, "1638": 360, "16380": 42, "16381": 42, "16382": 42, "16383": 42, "16392": 1051, "16397": [1049, 1050], "164": 422, "164009": 280, "16401": 1050, "16403": 1050, "16431": 1050, "16437": 1050, "16442": 1050, "16443186": 999, "16449": 1052, "16451": 1050, "16466": 1050, "16484": 1050, "16493": 1051, "165": 999, "16500": 1049, "16505": 1049, "16508": 1050, "16530": 1051, "16531": 154, "16539": 1050, "16585": 1050, "166": [42, 316, 350, 391, 998, 1019, 1039], "16605": 1053, "16619": 1051, "16622": 1050, "16625": 1051, "16632": 1050, "16655": 1050, "16663": 1050, "166667315173": 51, "16692": 1050, "16695": 1054, "167": [74, 391, 1019, 1039], "16718": 1050, "16726": 1050, "16728": 1050, "16747": 1054, "16748": 1053, "168": [81, 1039], "1680": 382, "16801": 1050, "16837": 1050, "16841": 1050, "16849": 1050, "1689": 360, "169": [83, 92, 316, 1019], "16906": 1051, "1691": 994, "169106": 277, "1693": 910, "16935": 1051, "16948": 1053, "16950": 1050, "169504": 237, "16979946": 999, "1698": 655, "16981": 1050, "16985": 1051, "16993": 1050, "169mb": 359, "17": [51, 56, 73, 86, 107, 112, 127, 154, 176, 191, 218, 243, 250, 271, 280, 313, 316, 322, 380, 383, 390, 403, 407, 408, 415, 419, 450, 467, 493, 503, 504, 506, 529, 537, 542, 546, 553, 555, 556, 561, 565, 566, 575, 576, 603, 634, 655, 663, 664, 665, 672, 675, 678, 680, 693, 698, 735, 736, 746, 767, 772, 790, 793, 795, 824, 848, 859, 874, 879, 880, 888, 890, 896, 912, 915, 918, 919, 920, 921, 948, 987, 988, 999, 1001, 1008, 1019, 1035, 1037, 1039, 1040, 1041, 1042, 1045, 1048, 1053], "170": [78, 91, 92, 96, 192, 391], "1700": 84, "170087": 314, "17021": 1050, "17032": 1050, "17036": 1052, "17038": 1051, "170388": 999, "1706": 341, "17061": 1050, "17090": 1051, "17095": 1051, "171": [87, 173, 382, 391, 794, 998], "17107": 1051, "1714": 994, "17148": 1051, "17159": 1051, "17169": 1052, "17187": 1051, "17192": 1051, "17193": 1051, "172": [391, 499, 500, 655, 994], "17204": 1050, "17205": 1050, "17210": [51, 1050], "17225": 1051, "17226834": 87, "1723": 45, "17233": 1051, "17235": 1050, "17236387": 222, "17266": 1053, "17289014": 178, "1729": 192, "173": [216, 391, 590, 1019], "17309": 1050, "17317": 1051, "17357": 1050, "17360": [46, 1050], "17367": 1051, "17370318": 234, "17374": 42, "17375": 42, "17376": 42, "17377": 42, "17378": 42, "17379": [42, 51, 1051], "1738": 998, "17386": 1051, "17388": 1055, "17396": 1051, "174": [150, 316, 391, 590], "17406": 1051, "17412": 1051, "17414": 1051, "17427": 1051, "17433": 1050, "17443": 1052, "17448": 1051, "1747": 192, "17474": 237, "17478": 1051, "17491": 1051, "17499": 1051, "175": [240, 391, 1008, 1019], "17526": 1051, "175298": 280, "17546": 1051, "17569": 1051, "17578": 1051, "17598": 1051, "176": [359, 391, 843, 999, 1006], "17603": 1051, "17604": 1051, "17606": 1051, "17608": 1051, "17609": 1051, "17610": 1051, "17612": 1051, "17614": 1051, "17616": 1051, "17622": 1052, "17633": 1051, "17644": 1051, "17651": 1051, "17661": 1051, "17662": 1051, "17679": 1051, "17694": 1050, "177": 391, "17702": 1051, "1771": 360, "17742": 1050, "17743": 1052, "17746": 1052, "17750": 1052, "17759": 1051, "17769": 1052, "17772": 1052, "17777": 1051, "17785": 1052, "178": [45, 382, 391, 516, 854], "178000": 320, "17804": 1051, "17812": 1050, "17819": 1053, "17826": 1051, "17833": 1051, "17848": 1050, "17856": 1051, "17864": 1051, "17876": 1051, "17878": 1051, "179": [382, 391, 422, 1039], "17914": 1050, "17928620": 379, "17932": 1051, "17935": 1051, "17937": 1051, "17959": 1050, "1797": [92, 119, 275, 316, 337, 382, 427, 451, 508, 538, 539, 540, 541, 605, 606, 694, 695, 696, 697, 699, 1001, 1029], "17984": 1051, "17985": 1050, "17985197": 234, "17987": 1051, "17992": 1051, "17995": 1050, "17997": 1051, "17_760": 154, "17t14": 379, "18": [42, 45, 46, 48, 49, 56, 74, 78, 83, 87, 94, 96, 107, 131, 151, 184, 191, 230, 246, 251, 271, 277, 316, 322, 324, 338, 359, 360, 361, 385, 391, 419, 420, 423, 453, 465, 498, 506, 507, 508, 510, 511, 516, 541, 542, 544, 546, 547, 563, 564, 565, 566, 569, 570, 571, 572, 575, 577, 578, 579, 580, 581, 583, 584, 595, 600, 605, 606, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 652, 655, 664, 665, 677, 720, 724, 737, 740, 741, 747, 749, 766, 776, 803, 804, 827, 843, 866, 867, 868, 874, 880, 888, 889, 900, 910, 911, 918, 919, 920, 921, 922, 946, 947, 987, 996, 998, 1008, 1019, 1035, 1037, 1039, 1040, 1043, 1044, 1046, 1047, 1049, 1050], "180": [69, 262, 263, 264, 267, 268, 307, 311, 391, 508], "1800": 84, "18000": [361, 380], "18010": 1052, "18016": 1050, "18020": 1054, "1804243": 379, "18052": 1051, "18094": 1054, "181": [205, 295, 316, 391], "18114": 1051, "18121": 1051, "18124": 1051, "18149": 1051, "18167": 1051, "18170": 1053, "18176": 1051, "18197458": 368, "182": [175, 274, 316, 391, 422, 1019], "18222": 1051, "18256": 1051, "18266": 1051, "18269": 1051, "18278": 1051, "18280": 1051, "18293": 1051, "18298": 1054, "183": [338, 391, 999, 1039], "18302": 1051, "18310": 1053, "18326": 1051, "18328": 1052, "18334": 1051, "18341": 1051, "18343": 1051, "18368": 1052, "18370": 1051, "18393": 1052, "18394": 1051, "184": [42, 219, 242, 287, 316, 391, 805, 1019, 1030], "18405": 1051, "18406": 1051, "18410": 1051, "18429": 1051, "18433": 1052, "18444": 1052, "18447": 1051, "18459": 1052, "1847": 45, "18482": 1053, "18488": 1055, "185": [87, 173, 184, 382, 391, 867, 868], "1850": [44, 380], "18508": 1051, "18510": 1051, "18525": 1051, "18527": 1051, "18528": 1051, "18543": 1052, "18545": 1051, "18555": 1057, "185654": 280, "18565811e": 1031, "185659": 208, "18595": 1051, "186": [219, 244, 316, 391, 794, 998, 1019], "18607": 1051, "18612": 1051, "18622": 1051, "18639": 1051, "18649": 1052, "1865": 46, "18682": 1051, "18689": 1056, "18691": 1051, "187": [277, 308, 391, 590, 999, 1019, 1030, 1041], "1871": 1013, "18723": 1055, "18736": 1052, "1874": 1013, "18746": 1051, "1875": 979, "18768": 1051, "188": [173, 180, 273, 382, 391, 590, 1019], "1880": 391, "18805": 1054, "18815268": 260, "188153": 260, "18818427": 673, "18832": 1053, "18842": 1052, "18843": 1057, "18846": [380, 494, 495], "1887": 360, "18898": 1052, "189": [219, 391, 907, 1011], "18925": 1052, "189267": 280, "18959": 1052, "189631": 208, "18964": 1052, "18975": 1053, "189830": 332, "18987": 1051, "19": [42, 51, 180, 191, 223, 267, 271, 295, 322, 323, 338, 355, 360, 382, 383, 389, 399, 403, 407, 408, 415, 423, 426, 450, 498, 522, 523, 524, 542, 546, 547, 553, 555, 556, 563, 564, 565, 566, 570, 571, 572, 588, 595, 613, 654, 664, 665, 672, 673, 674, 677, 678, 680, 682, 684, 693, 713, 787, 791, 805, 806, 820, 833, 838, 839, 841, 842, 856, 857, 876, 887, 908, 912, 915, 918, 919, 920, 921, 987, 998, 1008, 1019, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1047, 1056], "190": [49, 150, 237, 286, 309, 311, 380, 391, 504, 1019], "1900": 84, "19002": 1052, "19004": 1052, "19011": 1052, "19024": 1052, "19035": 1052, "1903908407869": 222, "19041": 1052, "19046": 1052, "19047631514961908949361222113": 51, "1905": [173, 382], "19052": 1052, "19055": 1052, "19069": 1052, "19075": 1054, "19085": 1053, "191": [391, 999], "19112072e": 200, "19126": 1051, "19145": 361, "19158": 1053, "19159": 1052, "19162": 1052, "19172": 1052, "19174891": 315, "19179": 1051, "19182": 1051, "19198": 1052, "192": [120, 150, 254, 280, 391, 1019, 1039], "19210": 1052, "19211": 1051, "19234": 1051, "19244": 1052, "19263": 1052, "19271": 1051, "19278": 1052, "192913": 280, "192938": 51, "19296": 1052, "19297": 1052, "193": [237, 391, 422, 721, 792, 1011, 1019], "19308": 1051, "1931": 112, "19310": 1052, "19317": 180, "19336": 1052, "19346747e": 1031, "193548": 237, "19356": 1052, "1936": 382, "19365": 1052, "19390": 1052, "19391": 1052, "193949": 280, "194": [211, 270, 316, 1019], "1940": 237, "19401": 1052, "19407": 1051, "19411": 1052, "19415": 1052, "19417": 1051, "194239": 391, "19426": 1052, "19428": 1052, "19438": 1053, "19459": 1052, "1946": 46, "19472": 1052, "19473": 1052, "1948": 56, "19483": 1052, "1949": 46, "19490": 1053, "19491": 1052, "19499": 1052, "195": [499, 500], "1950": [382, 998], "1951": 237, "195133": 391, "19520": 1052, "19522393": 234, "19527": 1052, "19564": 1052, "19568": 1052, "19571": 1052, "19579": 1051, "1958": [46, 180, 420, 422, 538], "19580": 1051, "196": [218, 907, 1011, 1019], "1960": [633, 722], "1961": 46, "19616": 1052, "19631": 1052, "1964": [696, 700, 886, 898, 995], "19641": 1052, "19643": 1052, "19646": 1051, "19659": 1051, "19662693": [850, 851], "19664": 1055, "19669": 1052, "196795181": 51, "19680": 1053, "196861": 208, "19689": 1053, "197": 252, "19703": 1051, "1972": 382, "19721": 1051, "19727": 1051, "1973": [382, 413], "19732": 1051, "19733": 1052, "19734": 1052, "1974": [415, 423, 716], "19747": 1053, "1975": 1001, "19752": 1052, "19766": 1052, "197666": 280, "1977": 641, "1978": [237, 994], "19784": 1052, "19788": 1052, "1979": [415, 731, 775], "19790": 1052, "19794": 1053, "19799": 1052, "198": 1039, "1980": 382, "19803308": 116, "1981": [237, 994], "19829832": 234, "1983": [415, 737, 890], "19836": 1052, "1984": [112, 113, 417, 480, 918, 919, 1014], "19847": 1051, "1985": [191, 415, 711, 721, 792], "1986": [988, 1014], "19869": 1052, "1987": [415, 613, 614, 798, 799], "198766": 280, "19879": 1052, "1988": 382, "19883": 1052, "19888": 1051, "1989": [286, 641, 794, 867, 868, 994, 1001], "199": [653, 797, 1013], "1990": 380, "19906": 1052, "19908": 1052, "1990a": 413, "1991": [522, 523, 524], "19916": 1053, "1992": [46, 173, 380, 382, 419, 422, 573, 574, 651, 994], "19922": 1051, "19924": 1051, "1993": [46, 173, 382, 480, 670, 691, 692, 1014], "19934": 1052, "19939": 1051, "1993apr6": 103, "1994": [173, 380, 382, 650], "19948": 1052, "1995": [173, 277, 382, 413, 422, 559, 560, 840, 907, 999], "1996": [46, 63, 154, 415, 422, 426, 450, 522, 523, 524, 561, 562, 1008], "1997": [139, 380, 420, 422, 541, 560, 696, 700, 994, 995, 998], "1998": [154, 277, 380, 382, 420, 422, 561, 562, 840, 845, 876, 999, 1000, 1002, 1008, 1012], "19982": 1051, "1999": [183, 380, 413, 415, 417, 420, 422, 443, 456, 463, 475, 480, 540, 547, 561, 562, 565, 566, 729, 904, 912, 913, 915, 916, 1004, 1010], "19th": 415, "1_": 1008, "1_000": [43, 63, 69, 82, 105, 129, 154, 175, 180, 182, 192, 250, 274, 355, 414, 543, 545, 707, 805, 828, 829, 837], "1d": [1, 139, 141, 188, 192, 220, 250, 299, 302, 311, 335, 354, 365, 385, 392, 394, 398, 399, 416, 421, 470, 473, 623, 636, 639, 659, 663, 666, 669, 690, 709, 718, 719, 725, 735, 736, 740, 744, 748, 789, 790, 793, 802, 852, 853, 854, 855, 856, 858, 860, 861, 862, 875, 926, 930, 931, 961, 985, 999, 1019, 1023, 1030, 1039, 1044, 1045, 1046, 1048, 1052, 1053, 1057], "1dlabel": 387, "1e": [43, 44, 45, 48, 54, 62, 80, 124, 173, 175, 178, 180, 181, 182, 183, 184, 186, 191, 199, 212, 219, 220, 226, 233, 237, 242, 246, 252, 257, 262, 265, 268, 275, 285, 288, 315, 325, 330, 333, 341, 346, 348, 355, 359, 391, 427, 449, 453, 458, 465, 468, 477, 478, 484, 488, 489, 490, 537, 538, 539, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 565, 566, 567, 568, 598, 603, 612, 614, 615, 617, 619, 620, 621, 625, 626, 628, 629, 631, 633, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 695, 696, 697, 698, 699, 700, 701, 734, 791, 803, 804, 820, 845, 846, 847, 848, 849, 850, 851, 859, 867, 868, 875, 905, 906, 910, 911, 912, 913, 914, 915, 916, 984, 987, 998, 1002, 1006, 1008, 1012, 1028, 1032, 1047, 1052, 1053, 1054], "1e0": [175, 252, 268, 285, 987], "1e1": [175, 181, 219, 252, 348], "1e15": 184, "1e2": [48, 175, 182, 252, 268, 348, 752], "1e3": [44, 45, 48, 175, 181, 186, 252, 288, 333, 987, 1028], "1e4": [288, 665, 685, 904, 1010], "1e5": [44, 180, 200, 202, 209, 288, 619, 620, 621, 625, 626, 628, 629, 631, 899, 904, 1010, 1028, 1030], "1e6": [46, 48, 212, 250, 335, 359, 361, 372, 542, 904, 998, 1010], "1e7": 391, "1er": 423, "1f": [51, 57, 84, 87, 127, 199, 219, 250, 262, 264, 284, 327, 334, 360, 361], "1gb": 372, "1kastner": 1046, "1m": 964, "1mb": [373, 1044], "1mo": 180, "1nn": 382, "1or": 423, "1px": 316, "1qlettinn8oi": 359, "1st": [0, 42, 94, 120, 183, 220, 323, 888, 889], "1x": 334, "1x4": 423, "1x5": 423, "1x6": 423, "1z": 423, "2": [1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 164, 166, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 379, 380, 382, 383, 385, 387, 389, 390, 391, 392, 394, 397, 398, 399, 403, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 478, 479, 480, 481, 484, 485, 486, 488, 489, 490, 491, 499, 502, 506, 507, 510, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 587, 588, 590, 591, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 709, 710, 711, 712, 713, 714, 717, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 769, 770, 773, 774, 775, 777, 779, 780, 781, 782, 784, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 903, 904, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 925, 926, 927, 928, 930, 931, 932, 936, 939, 945, 946, 947, 948, 949, 950, 951, 952, 953, 959, 960, 961, 962, 963, 964, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1057], "20": [1, 42, 45, 46, 51, 53, 56, 61, 62, 63, 68, 69, 73, 74, 77, 80, 81, 84, 88, 89, 95, 101, 110, 114, 122, 124, 127, 131, 133, 140, 144, 147, 148, 151, 155, 159, 160, 162, 166, 168, 169, 170, 173, 181, 190, 192, 193, 196, 201, 208, 209, 211, 215, 216, 218, 219, 220, 223, 228, 231, 232, 233, 234, 236, 242, 250, 256, 264, 266, 267, 271, 277, 278, 280, 281, 283, 288, 289, 292, 295, 298, 302, 303, 304, 305, 306, 309, 316, 322, 323, 324, 328, 329, 330, 331, 333, 337, 338, 341, 345, 347, 351, 353, 357, 360, 361, 365, 366, 378, 382, 383, 385, 387, 389, 390, 391, 403, 407, 408, 415, 422, 423, 447, 452, 453, 455, 470, 471, 475, 477, 478, 484, 494, 495, 496, 497, 498, 500, 502, 503, 506, 508, 510, 511, 517, 518, 521, 522, 529, 537, 542, 543, 548, 551, 552, 554, 558, 561, 562, 565, 566, 567, 568, 569, 575, 576, 588, 595, 596, 598, 600, 603, 605, 635, 636, 651, 655, 664, 672, 673, 674, 682, 684, 702, 710, 714, 719, 722, 731, 732, 745, 762, 763, 773, 798, 799, 803, 804, 805, 806, 820, 832, 833, 834, 837, 839, 842, 843, 844, 847, 848, 855, 856, 867, 868, 869, 870, 872, 874, 875, 883, 884, 885, 886, 891, 905, 906, 908, 909, 914, 917, 922, 928, 930, 931, 934, 976, 987, 994, 998, 1001, 1004, 1005, 1008, 1011, 1019, 1021, 1022, 1024, 1030, 1034, 1035, 1037, 1039, 1045, 1048, 1051, 1053, 1054], "200": [68, 69, 78, 84, 88, 94, 108, 127, 140, 151, 158, 179, 205, 214, 220, 223, 224, 225, 231, 236, 240, 258, 262, 278, 284, 286, 287, 318, 321, 339, 347, 348, 366, 368, 380, 387, 397, 420, 422, 427, 446, 460, 474, 477, 478, 528, 539, 540, 541, 544, 545, 546, 549, 553, 590, 655, 657, 677, 685, 698, 820, 867, 868, 908, 912, 913, 914, 915, 916, 1013, 1019], "2000": [53, 62, 74, 84, 108, 125, 131, 196, 265, 268, 277, 295, 313, 331, 360, 380, 382, 415, 416, 422, 427, 458, 468, 539, 540, 565, 695, 697, 699, 749, 794, 803, 856, 886, 898, 995, 998, 1004, 1010, 1023, 1031], "20000": [56, 126], "200000": [237, 875], "20002": 1052, "2001": [1, 63, 180, 193, 271, 276, 412, 415, 422, 443, 457, 458, 459, 468, 517, 565, 566, 570, 571, 634, 640, 645, 651, 697, 702, 741, 794, 891, 903, 935, 988, 990, 994, 998, 1004, 1006, 1008, 1010, 1013], "2002": [97, 413, 415, 422, 443, 454, 599, 600, 732, 762, 857, 905, 990, 998], "20023": 1052, "2003": [1, 50, 180, 412, 415, 420, 423, 457, 458, 468, 519, 521, 695, 699, 845, 847, 994, 995, 1000, 1010, 1047], "20030": 1052, "20031": 1053, "2004": [43, 173, 277, 295, 380, 382, 415, 417, 420, 479, 541, 613, 614, 695, 699, 711, 749, 789, 906, 992, 994, 995, 1000, 1013, 1030], "2005": [61, 63, 113, 382, 413, 443, 445, 859, 994, 1001, 1011], "20056": 1052, "2006": [1, 49, 311, 380, 422, 425, 468, 504, 563, 564, 571, 572, 616, 617, 620, 625, 628, 655, 672, 673, 747, 794, 795, 803, 845, 903, 920, 921, 994, 998, 1000, 1003, 1010, 1011], "2007": [0, 72, 207, 380, 415, 424, 446, 458, 460, 466, 468, 572, 662, 697, 723, 740, 743, 764, 765, 801, 990, 994, 996, 998], "20072": 1052, "2008": [50, 417, 419, 420, 484, 540, 569, 596, 651, 670, 691, 692, 698, 722, 732, 762, 840, 845, 849, 866, 992, 995, 996, 998, 999, 1000, 1003, 1004, 1013], "20087": 1052, "2009": [1, 138, 141, 142, 153, 203, 415, 419, 420, 422, 423, 525, 526, 534, 537, 543, 544, 546, 547, 550, 553, 559, 565, 566, 641, 677, 685, 702, 841, 918, 919, 946, 947, 994, 998, 999, 1005, 1014], "200_000": [875, 1055], "200j": 166, "200m": 380, "200x": 1039, "201": [150, 173, 382, 590], "2010": [0, 81, 101, 111, 192, 282, 283, 412, 415, 417, 419, 420, 428, 481, 542, 710, 714, 725, 726, 746, 835, 867, 868, 990, 994, 998, 1002, 1012, 1016, 1039], "2011": [0, 81, 192, 240, 391, 420, 423, 541, 544, 546, 547, 553, 596, 633, 644, 664, 736, 988, 1002, 1012, 1016, 1039], "20117": 1052, "2012": [0, 113, 413, 422, 561, 562, 569, 645, 749, 987, 991, 998, 1016, 1039], "2013": [0, 196, 382, 415, 419, 420, 542, 732, 762, 990, 998, 1016, 1040, 1041], "2014": [0, 86, 379, 409, 420, 422, 425, 536, 613, 614, 628, 629, 664, 698, 867, 868, 946, 947, 995, 1002, 1022, 1042], "20145": 1053, "2015": [0, 192, 379, 714, 727, 729, 730, 867, 868, 998, 1005, 1022, 1043, 1044], "201520": 208, "20155": 1052, "20159": 1052, "2016": [0, 244, 379, 415, 987, 1044, 1045], "20161": 1052, "20165": 1052, "2017": [0, 277, 379, 413, 415, 426, 450, 998, 1045, 1046], "2018": [0, 219, 237, 423, 456, 987, 998, 1022, 1046, 1047], "2019": [0, 192, 383, 415, 458, 468, 698, 995, 998, 1005, 1008, 1047, 1048, 1049], "202": [292, 1019], "2020": [0, 46, 380, 1049, 1050, 1051, 1052], "20200": 1052, "20207": 1052, "20209": 1052, "2021": [0, 46, 383, 385, 677, 1051, 1052], "2022": [0, 373, 422, 711, 1008, 1053, 1054], "2023": [0, 397, 409, 413, 1054, 1055], "20231": 1052, "2024": [46, 1056, 1057], "20240": 1052, "2025": 46, "20250": 1052, "20272": 1052, "20297": 1052, "203": [87, 290, 1019], "20312": 1052, "203174": 208, "20326": 1052, "20331": 1054, "2034": [359, 380], "20380": 1052, "20385": 1052, "2039": 280, "204": [1006, 1011], "20408": 1053, "20415": 1054, "20416": 1052, "20431": 1052, "20477": 1052, "20512": 1052, "20515": 1052, "20521": 1052, "20524": 1055, "20526": 1052, "20528": 1052, "20531": 1052, "20534": 1052, "20552": 1052, "20554": 1052, "2056": 46, "20560": 1052, "20567": 1053, "2058": 46, "20583": 1052, "2059": 46, "20597": 1052, "20617": 1054, "20619": 1052, "20638": 1052, "20640": [144, 187, 380, 496], "20652": 1052, "20653": 1053, "20657": 1052, "20673": 1052, "20683": 1052, "207": [173, 316, 345, 1019, 1039], "2071716": [850, 851], "20727": 1052, "20729": 1052, "20752": 1052, "2075215": 234, "20753": 1053, "20761": 1052, "207667": 280, "2079": 282, "208": [173, 298, 382], "20802": 1054, "20803": 1053, "20811": 1053, "2084": 46, "20842": 1052, "20843": 1052, "2086": 46, "20860": 1053, "20880": 1052, "208864": 208, "20899": 1052, "209": [747, 886], "2090": 46, "20904": 1052, "2091": 46, "2093": 46, "2095": 46, "20959": 1052, "2096": 46, "20960": 1052, "20961": 1052, "20_000": 298, "20new": [380, 1032], "20newgroup": [65, 188, 197, 211, 235, 316, 495, 664, 836, 839, 994, 1019], "20news_hom": 380, "20newsgroup": [234, 378, 1039], "20th": 714, "21": [42, 51, 106, 154, 173, 191, 192, 208, 220, 237, 267, 271, 298, 316, 320, 322, 333, 382, 383, 387, 389, 403, 412, 422, 423, 447, 451, 480, 484, 535, 538, 567, 568, 569, 575, 576, 594, 595, 597, 633, 675, 693, 760, 806, 808, 820, 833, 876, 883, 885, 891, 908, 924, 946, 990, 994, 999, 1008, 1019, 1035, 1037, 1039, 1040, 1042, 1046, 1047, 1049], "210": 53, "2100": [84, 330], "2102": 550, "21020": 1054, "21026": 1053, "21032": 1053, "21038": 1053, "2107": 282, "21078": 1053, "21079": 1053, "21080": 1052, "21086": 1053, "21093": 1052, "211": [282, 332, 340, 360, 886, 898], "21109": 1053, "21114": 1053, "211217613": 1047, "21130": 1052, "21145": 1052, "21148": 1053, "2117": 341, "21177": 1053, "21179": 1052, "21194": [80, 1052], "21195": 1052, "21199": 1052, "212": [150, 173, 282, 340, 382, 475, 506, 1004, 1030], "21219": 1053, "212197e": 237, "21243": 80, "21251": 1052, "2126": 256, "21271": 1052, "21278": 1053, "21295": 1052, "21298": 1053, "21301203": 178, "213056e": 237, "21310": 1053, "21316": 1053, "21330": 1053, "21334": 1053, "21336": 1052, "21340": 1052, "21341": 1053, "21351": 1052, "21389": 1052, "2139": [219, 237], "214": [176, 590], "21408": 1053, "21425": 1053, "21430": 1053, "21432": 1053, "21434": 1053, "21436": 1053, "21443888": 234, "21445": 1053, "21448": 1053, "21469": 1054, "21481": [1052, 1053], "21482": 1053, "21493": 1052, "215": [219, 590, 1019], "21517": 1052, "21534": 1053, "21542": 1053, "21544347": 50, "21552": 1052, "21565": 1053, "2156660": 334, "21567": 1053, "21569": 1053, "21573": 1053, "21576": 1053, "21578": [46, 1052], "2159048": [659, 669, 690], "216": [169, 1011, 1019], "21606": 1053, "21616": 747, "21617": 1053, "21632": 1053, "21694": 1052, "217": [541, 547, 805], "21701": 1053, "21705": 1053, "2171": 45, "21713": 1053, "21724": 1053, "2173": [207, 662, 994], "21735": 1053, "21741": 1052, "21762": 1053, "21767": 1053, "2179": 46, "218": [382, 477, 721, 792], "2180": 56, "21800": 1053, "21805": 1053, "21807": 1056, "21808": 1053, "21809": 1055, "21814": 1053, "21832": 1053, "21833": 1052, "21837": 1053, "21845": 1052, "21871": 1052, "21873": 1053, "21880": 1053, "21881": 1053, "21888": 1053, "218997": 208, "219": 276, "21901": 1053, "21915": 1052, "21917": 1052, "2192": [207, 662, 994], "21938": 1054, "21954": 1053, "21987": 1053, "21988": 1053, "21991": 1052, "21998": 1053, "22": [42, 46, 51, 76, 84, 122, 142, 143, 186, 187, 188, 191, 192, 193, 236, 244, 256, 259, 267, 271, 295, 300, 316, 318, 322, 326, 329, 332, 335, 338, 341, 361, 385, 390, 403, 412, 443, 454, 478, 484, 494, 495, 501, 502, 510, 521, 530, 537, 543, 548, 551, 552, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 600, 615, 633, 634, 638, 640, 651, 653, 657, 659, 661, 664, 665, 667, 669, 671, 675, 694, 698, 708, 710, 719, 763, 775, 784, 789, 790, 794, 806, 807, 811, 820, 825, 827, 830, 831, 832, 833, 834, 835, 836, 837, 854, 856, 858, 860, 861, 862, 867, 868, 869, 871, 874, 890, 901, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 941, 942, 990, 998, 1008, 1019, 1035, 1037, 1039, 1042, 1047, 1050, 1052], "220": [78, 271, 1039], "2200": [84, 380, 499], "22002": 1053, "22014": 1054, "22015": 1053, "22016": 1053, "22027": 1053, "220446049250313e": [477, 478, 484, 656, 657, 660, 661, 662, 688, 689], "22050": 1052, "22054": 1054, "22058": 1053, "22059": 1053, "22062": 1053, "22063": 1053, "22064": 1053, "22065": 1053, "221": [98, 116, 132, 157, 271, 1019, 1042], "22106": 1053, "22108": 1053, "2211": 640, "22111": 1053, "22114": 1053, "22118": 1053, "22119": 1053, "22120": 1053, "22137": 1053, "22148": 1053, "22149": 1053, "22150": 1053, "22154": 1053, "22159": 1053, "22181": 1053, "22188": 1053, "22191": 1053, "22199": 1053, "222": [116, 157, 341, 1013], "22203": 1053, "22206": 1053, "22212": 1053, "22215": 1053, "22217": 1053, "22218": 1053, "2222": 662, "22223": 1053, "22235": 1053, "22237": 1053, "2224": 1041, "22240": 1053, "22248": 1053, "22249": 1053, "22254": 1053, "22255": 1053, "22268": 1054, "22269": 1054, "22284": 1053, "22288": 1053, "223": [116, 157, 173, 382], "22300": 1053, "22314355": 596, "22318": 1053, "22320": 1053, "22356": 1053, "22361": 382, "22370": 1053, "223745": 219, "224": [87, 116, 157, 319, 415, 731, 828, 1019], "22409": 1055, "22410": 1053, "22412": 1053, "22435592": 334, "22438": 397, "2246": 237, "22476": 1053, "22486": 1053, "22493": 1053, "22498": 1053, "225": [94, 422, 1019], "22504": 415, "22506": 1055, "22508": 1053, "22518": 1054, "22525": 1053, "22526": 1053, "22527": 1054, "22537": 1053, "22548": 1053, "22553": 1053, "22554": 1054, "22562": 1054, "22566": 1053, "2257": 1032, "22578": 1053, "225806": 237, "22595": 1053, "226": [415, 426, 450], "22604": 1053, "22629": 1054, "22635": 1053, "22665": 1054, "22685": 1053, "22687": 1053, "22692": 127, "22694": 1053, "22695": 1053, "22696": 1053, "22697": 1053, "227": [277, 415, 731], "22710": 1054, "22735": 1053, "22747343e": 112, "22775": 1053, "22784907": 833, "22806": 1053, "22808": 1053, "22830": 1053, "2284": 192, "22856": 1053, "2286": 380, "22866": 1053, "22868": 1053, "2287": 380, "2288": 380, "22891": 1053, "22898": 1054, "22899": 1053, "229": 998, "22908": 1053, "22913": 1053, "22950": 1053, "22953": 1053, "22965": 1054, "22968": 1054, "22982": 1053, "22993": 1054, "22nd": 445, "23": [42, 46, 56, 62, 69, 84, 127, 156, 159, 173, 188, 219, 244, 248, 256, 258, 260, 267, 271, 316, 322, 326, 329, 330, 331, 333, 334, 338, 382, 383, 391, 403, 407, 408, 422, 428, 438, 446, 453, 458, 460, 468, 471, 473, 474, 481, 484, 485, 486, 488, 489, 490, 496, 498, 506, 507, 508, 510, 511, 516, 518, 520, 528, 530, 544, 545, 546, 549, 553, 560, 562, 564, 566, 567, 568, 571, 574, 575, 576, 613, 614, 617, 633, 636, 638, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 681, 684, 685, 686, 687, 723, 736, 784, 836, 842, 843, 844, 853, 861, 868, 871, 883, 890, 898, 899, 908, 911, 913, 916, 919, 921, 928, 930, 931, 941, 942, 947, 998, 1019, 1035, 1037, 1039, 1040, 1046, 1047, 1048, 1051], "230": 590, "2300": [84, 208], "23023": 1053, "23033": 1053, "23034": 1053, "23036": 1053, "23038": 1054, "23040": 1053, "23046": 1053, "23047": 1053, "23077": 1053, "23079": 1053, "23095": 1053, "23097": 1053, "23098": 1053, "23099": 1055, "231": [49, 311, 380, 415, 426, 450, 504, 590], "23101": 1054, "23113": 1053, "23115": 1053, "23127": 1054, "23139": 1054, "23149": [380, 503, 1053], "23194": 1053, "23197": 1054, "23198": 1053, "232": [271, 998], "23210": 1054, "23214": 1053, "2323": [695, 699, 995], "23252": 1054, "23256": 1053, "23264": 1053, "23271": 1053, "23273": 1053, "23275": 1054, "2328": 272, "23299": 1053, "233": 250, "2331": 42, "23317": 1056, "2332": 42, "2333": 42, "2334": 42, "2335": 42, "23358": 1053, "2336": 391, "23370": 1053, "23395": 1053, "233mb": [44, 1028], "234": [87, 845, 849, 867, 868, 1000], "2341": 530, "23410": 1053, "234137": 208, "23442": 1054, "23446": 1054, "23461": 1054, "23470": 1054, "23471": 1053, "23480": 1054, "235": 324, "235430": 280, "23548": 1053, "2357juan": [1053, 1054, 1055], "23585": 1054, "23595": 1055, "23604": 1054, "23608": 1053, "23619": 1054, "23636": 1053, "23637": 1054, "23668876": [659, 669, 690], "236720": 208, "23683": 1054, "23689075": [659, 669, 690], "237": [263, 1019, 1030], "23726": 1054, "23731": 1055, "23734": 1054, "237703": 208, "23773583": 112, "23786125": 215, "23798": 1054, "238": [264, 1019], "23819": [1054, 1055], "23833": 1053, "23834": 1054, "23865": 1054, "23874": 1054, "238744": 208, "23877": 1054, "238955": 280, "239": 1039, "23905": 1054, "23935": 1054, "23977": 1054, "23990": 1053, "23993": 1054, "24": [42, 43, 46, 51, 100, 154, 173, 188, 192, 196, 203, 227, 244, 271, 289, 298, 326, 327, 328, 330, 333, 334, 337, 338, 383, 385, 389, 403, 407, 408, 415, 422, 423, 443, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 466, 468, 470, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 498, 502, 510, 521, 522, 523, 524, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 587, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 619, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 704, 705, 706, 708, 714, 720, 733, 752, 759, 803, 804, 806, 809, 810, 820, 827, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 871, 873, 874, 875, 876, 879, 880, 882, 884, 885, 886, 887, 888, 890, 900, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 941, 942, 946, 973, 979, 987, 1005, 1008, 1019, 1035, 1037, 1039, 1047, 1048, 1049, 1050, 1052], "240": [42, 51, 78, 1006, 1039], "2400": 84, "24000": 526, "24015": 1053, "24017": 1053, "24027": 1055, "24051": 1054, "24058": 1054, "24075": 1054, "24076": 1055, "24083": 1055, "24084": 1054, "24087": 1053, "241": [422, 573, 574], "2410": 550, "24140": 1055, "24141": 1054, "24145": 1055, "24146": 1054, "24160": 332, "2417047": 334, "242": [310, 890, 1019, 1039], "24218": 1054, "24230": 1055, "24245": 1054, "24258": 1054, "24264": 1054, "24283": 1054, "243": 590, "2431": 481, "24317": 1054, "24338": 1054, "24350": 1054, "24354": 1054, "24365": 1054, "243802": 314, "244": [128, 295, 590, 1019], "24404831511191221642141021252626109": 51, "24405": 1054, "2441": 237, "24412": 1054, "24421": 1054, "24433": 1054, "24446": 1053, "244466": 260, "24465": 1054, "2449": 391, "245": [1010, 1041], "24512": 1054, "24523": 1054, "24528": 1054, "24538": 1054, "24539": 1054, "24543": 1054, "24556": 1054, "24568": 1055, "245961": 151, "245mb": 361, "246": [203, 1006, 1039], "24617": 1054, "2463": 994, "24630": 1054, "24631": 1053, "24637": 1054, "24640578": 112, "24645": 1054, "24667": 1054, "24668": 1055, "24677": 1055, "24683": 1054, "24688": 1054, "24699": 1054, "247": [183, 213, 890, 1019], "24714": 1054, "24747": 1054, "24750": 1054, "24755": 1054, "24767": 1054, "24769": 1055, "24838": 1056, "24849": 1054, "24855": 1054, "24856": 1054, "24871": 1055, "24873": 1054, "2487575": 196, "2487591": 196, "24882": 1055, "24889": 1054, "24894": 1054, "249": [243, 1019], "24935": 1055, "24951": 1054, "25": [42, 43, 44, 45, 47, 48, 49, 51, 56, 60, 62, 76, 79, 88, 89, 112, 116, 121, 131, 133, 142, 151, 169, 170, 176, 186, 191, 199, 209, 223, 244, 246, 264, 271, 277, 311, 313, 316, 318, 320, 332, 337, 338, 359, 366, 368, 372, 391, 419, 422, 423, 426, 450, 483, 487, 507, 510, 527, 576, 603, 624, 684, 740, 802, 823, 836, 862, 880, 885, 887, 888, 891, 899, 900, 902, 903, 944, 948, 979, 994, 998, 999, 1001, 1008, 1028, 1039, 1041, 1047, 1050], "250": [48, 99, 151, 196, 239, 499, 698, 828, 987, 1010, 1046], "2500": 998, "25000": 76, "2501": [173, 382], "25044": 1055, "250639": 208, "25067": 1054, "25077": 1054, "25080": 1054, "25089": 1054, "25093": 1055, "25094": 1054, "251": [116, 173, 241, 382, 1019], "25102": 1055, "25120": 1055, "25129": 1054, "25147": 1054, "25163598": 393, "25172": 1054, "25174": 1054, "25177": 1055, "25183501383331797": 285, "25186": 1055, "25188": 1054, "25190": 1055, "25193977": 999, "25196": 1055, "252": [173, 241, 359, 382, 540, 886, 898], "25209": 1055, "25214": 1055, "25220": 1055, "25232": 1055, "25250": 1054, "25251": 1055, "25257": 1055, "25274": 1054, "25275": 1056, "25291": 1055, "25291366": 368, "25294": 1055, "25295": 1054, "25296": 1054, "25297": 1055, "25299": 1055, "253": [150, 540], "25308": 1055, "25312": 1054, "25334": 1055, "25341": 1054, "253445": 151, "25349312e": 200, "2535": [475, 480], "25354": 1054, "2536": 482, "25363": 1054, "25367": 1055, "25370": 1054, "25387": 1055, "25402": 1055, "25417": 1055, "25432": 1055, "25438": 1055, "25443": 1055, "25477": 1054, "2548": 215, "25490": 1055, "25499205": 542, "255": [82, 127, 298, 315, 324, 330, 380, 422, 499, 500, 567, 568], "25500": 1054, "25506": 1055, "25511": 1054, "25531": 1055, "25563": 1054, "25570": 1054, "25587": 1055, "25589": 1054, "256": [76, 82, 87, 150, 275, 324, 373, 380, 415, 422, 455, 474, 543, 552, 569, 866, 898, 908, 1019, 1032, 1053], "25601": 1055, "25619": 1054, "25629": 1055, "25638": 1054, "25659": 1055, "25664": 1054, "25672": 1055, "25677": 1055, "2568": 1048, "25694": 1054, "25697": 1055, "257": [241, 275], "25704": 1054, "25713": 1055, "25719016": 999, "25732": 1055, "25733": 1055, "25744": 1054, "25747": 1054, "25752": 1055, "25774": 1054, "25784": 1055, "2579": 698, "258": [131, 241, 1019], "25805": 1055, "25813": 1055, "25814": 1055, "25815": 1055, "259": [49, 241, 311, 380, 422, 504, 573, 574], "259031": 208, "259297": 208, "25931": 1055, "25956": 1055, "25973": 1055, "25987": 1055, "25991": 1057, "25th": [42, 256, 888], "26": [42, 46, 76, 80, 88, 112, 126, 180, 191, 244, 255, 271, 290, 324, 338, 391, 576, 654, 735, 789, 828, 886, 898, 947, 998, 1008, 1019, 1039, 1042, 1043, 1051, 1057], "260": [271, 276, 1052], "26019": 1055, "26021": 1055, "26033": 1055, "2605": 698, "26082": 1055, "26093": 1055, "26106": 1055, "26108": 1055, "26113448": 170, "26120": 1057, "26121": 1055, "26163": 1056, "26194": 1055, "262": [272, 1019, 1039], "26207": 1055, "26242": 1055, "26243": 1056, "26253567e": 112, "26264": 1055, "26267": 1056, "26278": 1056, "26286": 1055, "26286057": 234, "26289": 1055, "26299": 1056, "26315": 1056, "26316": 180, "26318": 1055, "26323": 1055, "263234": 260, "26323428": 260, "26325": 1055, "26333": 1055, "26337": 1055, "26362917": 234, "26366": 1056, "263758": [589, 593], "26376": 1055, "26385": 1055, "26386": 1055, "26386883": 178, "26391": 1056, "2640": 841, "26400": 1055, "26410": 1056, "26411": 1056, "26416": 1055, "26424": 1055, "26433": 1055, "26454": 1055, "26459": 1056, "26464": 1056, "26466": 1055, "265": [346, 741, 845, 849, 1000, 1019], "26503": 1055, "26506": 1056, "26521": 1055, "2652124": 821, "26525": 1056, "26551": 1055, "26566": 1055, "26579": 1055, "26593496": 234, "26600": 1055, "26602": 1055, "26616": 1056, "26634": 1056, "26642044": 672, "26644": 1055, "26648": 1056, "26653": 1055, "26657": 1055, "2666": 998, "2667": 504, "26674": 1056, "26683": 1056, "267": 1039, "2671": 1008, "26721": 1056, "26734": 1056, "26736": 1056, "26744": 1056, "26748": 1055, "2675": 45, "26754": 1055, "26760": 1055, "26765": 1056, "267703": 88, "26772": 1055, "26786": 1056, "26789": 1056, "268": [112, 250, 271, 291, 1019], "26814": 1055, "268147": 280, "26828": 1056, "26830": 1056, "26831": 1056, "26837": 1057, "26840": 1056, "26855": 1056, "26862": 1056, "26893": 1055, "26896": 1056, "269": 517, "26903": 1055, "26909": 1056, "26913": 1055, "2692": 1008, "26931": 1055, "26934744": 134, "26940": 1055, "26944": 1056, "26957": 1056, "26th": [415, 732, 762, 998], "27": [42, 44, 46, 51, 56, 66, 81, 88, 127, 244, 271, 279, 337, 338, 356, 382, 415, 423, 523, 530, 611, 719, 794, 795, 891, 911, 998, 1008, 1019, 1031, 1039, 1041], "270": [203, 217, 230, 263, 338, 1019], "27000": 237, "27002": 1055, "27005": 1056, "27006": 1056, "27017": 1056, "27018": 1056, "27044": 1055, "27054655": 234, "27058": 1056, "27098": 1056, "271": [366, 1019], "27100": 1056, "27104": 1056, "27110": 1056, "27137": 1056, "27139": 1056, "2714": 256, "271411": 260, "27161": 1056, "27161955": 170, "27166": 1056, "27167": 1055, "27179": 1056, "27185": 1056, "272": 53, "27204": 1056, "27219": 1056, "272214": 590, "27239": 1056, "27240": 1056, "27243": 1055, "27250": 1056, "27252": 1056, "2727": 564, "27274": 1056, "27277": 1056, "27291": 1056, "27292": 1055, "27301": 1056, "27308": 1056, "27309": 1056, "27311": 1055, "27314": 1056, "27315": 1056, "27328": 1056, "27336": 1056, "2734": 391, "27344": 1057, "27372": 1056, "27381": 1058, "27389": 1056, "274": [53, 517], "27417": 1056, "27431": 1056, "27438": 1056, "27456": 1057, "27468": 1055, "27478": 1056, "27490": 1056, "27491": 1057, "27499706": 50, "275": [42, 282, 338, 1019, 1042], "27500": 1056, "27526": 1057, "27538": 1056, "27544": 1056, "27556": 1056, "27558": 1056, "27560": 1057, "27566": 1057, "275706": 88, "27573": 1055, "27576": 1057, "27577": 1056, "27580": 1055, "27583": 1055, "27584": 1057, "275851": 260, "2759": [902, 903], "27597342": 116, "276": 277, "27601": 1056, "27614": 1056, "27624": 1056, "2763": [428, 481], "27636": 1057, "27645": 1056, "27650": 1056, "27651": 1056, "27657": 1057, "27668": 1056, "27670": 1056, "27675": 1056, "27678": 1056, "277": [1006, 1041], "27700": 1057, "27702": 1056, "27710": 1056, "27718": 1056, "27720": 1056, "27721": 1056, "27734": 1056, "27736": 1058, "27757": 1056, "27760": 1056, "27772182": 51, "278": [133, 382, 850, 851, 1019], "2780": 391, "27800": 1057, "27801": 1056, "27817": 1056, "27821": 1056, "27828": 1056, "27834": 1056, "27835": 1056, "27841": 1056, "27844": 1057, "27865": 1056, "27898": 1056, "27899": 1056, "279": [184, 994], "27904": 1057, "27937": 1057, "27979": 1056, "27990": 1057, "28": [42, 100, 151, 173, 191, 235, 244, 256, 271, 286, 315, 337, 338, 382, 391, 415, 419, 456, 463, 1008, 1028, 1039, 1042, 1045], "280": [168, 338, 1019], "28009951": 833, "2802": 56, "28040": 1057, "28048": 1056, "28051": 1057, "28053": 1057, "28074": 1056, "28085": 1057, "28090": 1056, "28092": 1057, "28095": 1056, "28102": 1057, "28106": 1058, "28111": 1056, "28121": 1056, "28136": 1057, "28160": 1057, "28165": 1056, "28167": 1056, "2818": 476, "28184": 1056, "28187": 1057, "28188": 1056, "28191": 1056, "28195": 1056, "28198": 1056, "282": [1028, 1039], "28205": 1057, "28207552": 234, "28210": 1057, "28222": 1056, "28225276": 87, "2823": 341, "28233": 1056, "28235": 1056, "28240": 1056, "28241": 1056, "28247": 1056, "2825": 0, "28256": 1056, "28261": 1057, "28262": 1056, "28263": 1056, "28295": 1056, "2830": 0, "28306": 1057, "28327": 1056, "2833": 391, "28351": 1057, "28352": 1057, "28360": 1057, "28365": 1056, "28377": 1056, "28385": 1056, "28399": 1057, "284": [66, 655, 1019], "28407": 1057, "28425": 1057, "284315": 271, "28432": 1057, "28435": 1057, "28471": 1057, "284806": 271, "284807": 271, "28483": 1057, "28491": 1057, "28498": 1057, "285": [260, 338, 730], "28521": 1057, "28552": 1057, "28557": 1057, "28582": 1057, "286": [327, 422, 1019], "28604": 1057, "28612": 1057, "28651": 1057, "28664": 1057, "28670": 1057, "28692": 1057, "287": [192, 1010], "28701": 1058, "28703": 1057, "28712": 1057, "28718": 1057, "28722": 1057, "28756": 1057, "28763": 1057, "28768": 1057, "2879": 1046, "288": [541, 547], "28808734": 223, "28822": 1057, "28823": 1057, "28843": 1057, "28847": 1057, "289": 191, "28915": 1057, "28925": 1057, "28951": 1057, "28975": [1052, 1058], "28988": 1057, "28x28": 315, "29": [113, 122, 176, 180, 210, 219, 223, 234, 236, 271, 278, 332, 338, 382, 422, 565, 566, 696, 700, 787, 803, 862, 994, 995, 1012], "290": [338, 360, 694, 695, 699, 995], "290075": 208, "29014": 1058, "290584": 314, "291": [173, 360, 380, 382], "2914": 500, "292": [403, 422, 741], "2928359": 234, "293": [250, 1019], "29316": 180, "2939931": 334, "29473397": [850, 851], "295": [262, 1019], "295040e": 237, "295505e": 237, "296": 1010, "2961": 657, "296575": 208, "297": [199, 380, 1019], "298": 1006, "298688": 277, "29898468": 234, "299": [139, 686], "299546e": 237, "2_": 990, "2_000": 138, "2_2": [652, 653, 658, 659, 660, 661, 662, 666, 667, 668, 669, 678, 687, 688, 689, 690], "2_f": 658, "2_fro": [659, 668, 669, 690], "2_poli": 277, "2_y": 1000, "2c": [649, 658, 678, 679, 680, 681, 693, 990], "2d": [1, 42, 68, 70, 73, 78, 81, 82, 83, 87, 95, 96, 119, 120, 123, 125, 128, 134, 157, 188, 213, 220, 225, 239, 240, 241, 244, 246, 249, 250, 307, 337, 338, 345, 348, 367, 379, 381, 385, 387, 394, 399, 415, 416, 420, 423, 425, 447, 458, 468, 470, 473, 487, 494, 496, 497, 498, 499, 500, 506, 507, 508, 510, 516, 520, 539, 547, 555, 590, 592, 641, 649, 663, 678, 697, 744, 785, 831, 835, 839, 877, 926, 930, 931, 946, 961, 984, 985, 992, 994, 995, 998, 1005, 1009, 1014, 1019, 1023, 1029, 1039, 1043, 1046, 1047, 1048, 1051, 1053, 1057], "2darrai": 387, "2dlabel": 387, "2e": [205, 292], "2e6": 998, "2ec5ac": 322, "2f": [43, 46, 49, 51, 56, 66, 73, 76, 78, 80, 84, 86, 96, 98, 101, 116, 122, 127, 133, 151, 154, 158, 159, 168, 191, 192, 196, 199, 208, 210, 215, 219, 234, 235, 236, 237, 246, 250, 256, 271, 276, 280, 281, 283, 285, 286, 287, 291, 306, 307, 313, 320, 323, 331, 335, 348, 359, 360, 368, 416, 419, 422, 702, 834, 837], "2fbf01908075": 711, "2fx": 265, "2g": [241, 244, 703, 1050], "2h": 421, "2k": 186, "2l": [425, 628], "2n": [702, 990, 1002], "2n_": 994, "2nd": [94, 120, 183, 323, 415, 426, 450, 536, 1008, 1054], "2t_p": 284, "2x": 1039, "2x2": [345, 415, 760], "2x_iy_im": 380, "31": [42, 103, 111, 237, 271, 278, 303, 330, 337, 338, 412, 423, 506, 567, 568, 603, 655, 677, 685, 963, 999, 1019, 1039], "310": [72, 1019], "3109306": 178, "311": 360, "312": [147, 154, 171, 1019, 1042], "3121": 714, "313": [79, 1019, 1030], "313276e": 237, "315": [298, 382], "316": [180, 184, 617, 620, 631, 886], "31622776601683794": 164, "3164764": [219, 237], "317": 180, "31760": 994, "318": [360, 456], "318387": 314, "319": [121, 176, 1019, 1032], "31958": 180, "31973683": 234, "31bit": 1050, "31st": [220, 889], "32": [42, 43, 51, 85, 122, 190, 193, 255, 291, 331, 338, 379, 383, 390, 399, 412, 422, 423, 451, 570, 571, 588, 595, 640, 682, 889, 891, 930, 931, 963, 1006, 1008, 1019, 1031, 1039, 1042, 1045, 1047, 1048, 1051, 1052, 1053, 1056], "320": [104, 142, 360, 380, 987, 1012, 1019, 1039], "3204": 1045, "321": 121, "321301": 61, "322": [44, 121, 477, 478], "3221": [698, 995], "323": [121, 250], "323200": 61, "324": [121, 380], "324084": 208, "3245": [698, 995], "325": 121, "325198e": 237, "3252": 603, "326": [121, 325, 1019], "32634568": 223, "3264": 45, "327": [62, 736, 1030], "3272984419327777": 363, "3273": 752, "327407": 260, "327605": 260, "32767": 1050, "32782448": 178, "3279": 45, "328": [337, 736, 1019], "3288": 550, "329": 456, "329616": 208, "32987858": 571, "32bit": [1, 372, 963], "32x32": 382, "33": [42, 112, 219, 332, 338, 380, 382, 389, 390, 391, 415, 423, 467, 538, 643, 654, 718, 719, 735, 736, 744, 749, 789, 790, 793, 812, 834, 836, 838, 897, 921, 980, 994, 998, 1008, 1028, 1039, 1047], "330": 338, "33035714": 367, "331": [247, 1019], "331263": 208, "3315057": [832, 833], "3317": 219, "332": [360, 898], "333": 852, "3333": 504, "333333": 237, "33333333": [860, 1008], "334": 178, "334795": 280, "335": 42, "335919": 314, "336": [154, 391, 1008], "336188": 314, "3367": 1046, "337": [316, 391, 1019], "3375": 332, "338": [250, 256, 351, 1019], "3383": 45, "3384": 360, "3387": 360, "3397": [670, 691, 692], "33rd": [907, 1011], "34": [42, 56, 151, 173, 175, 303, 316, 337, 338, 367, 382, 419, 526, 535, 576, 603, 655, 673, 722, 770, 1019, 1028, 1039], "340": [60, 252, 337, 360, 1019], "34078072": 334, "34118": 380, "34125758": 234, "3415": [670, 691, 692], "341523": 314, "3419": 280, "341949": 208, "342": [360, 828], "34279478": 234, "3433": 45, "34346583": 87, "344": [95, 1019], "3445": 45, "345": [173, 382], "34545455": 994, "3456": 45, "34586917": 234, "346": [84, 300, 422, 507, 561, 562, 1019], "3467": 621, "347": [224, 1019], "347717": 151, "348": [149, 1019], "34867495": 999, "349": [138, 391, 559], "34990341": 116, "35": [42, 44, 45, 47, 49, 89, 104, 140, 161, 191, 192, 198, 207, 246, 295, 323, 337, 338, 550, 654, 655, 662, 708, 712, 713, 733, 747, 762, 788, 795, 843, 987, 994, 998, 1004, 1005, 1008, 1028, 1032, 1039, 1041], "350": [191, 360], "351": [58, 1019], "351390": 277, "352": [277, 360, 391], "352124": 208, "35278655": 234, "353": [81, 1019, 1032], "3534": 56, "3539": 103, "354": 360, "354394": 151, "355": [49, 1019], "3551": 45, "355440": 277, "355445": 151, "356": 1006, "356497": 151, "3565178": 963, "357": [173, 382, 506, 911], "3573": 833, "3577618906572577": 328, "35788": 1032, "358": [348, 1019], "3582": 45, "358295": 208, "358990": 208, "359": [175, 360], "3591": 1048, "36": [42, 44, 45, 51, 52, 126, 173, 181, 191, 237, 256, 351, 382, 391, 422, 423, 561, 562, 576, 741, 765, 998, 1032, 1039], "360": [138, 559], "360000": 314, "36047253": 234, "361": [176, 196, 380, 422, 561, 562, 1019], "362176": 332, "363": [51, 157, 1019], "3635": 833, "364": [360, 477, 478, 1040], "365": [417, 479], "3659": 1044, "366": [101, 1019], "36607143": 367, "367": [360, 422, 1039], "36787944": 996, "3680": [617, 620, 631], "3684": 841, "36851234": 822, "368896": 61, "3690483151908911912247722318110": 51, "3696": 619, "3697": 856, "3697178": 51, "37": [42, 203, 280, 291, 337, 367, 380, 422, 530, 722, 890, 901, 1008, 1039], "370000e": 237, "370039": 208, "370738": 61, "37257991": 116, "373": [333, 1019], "373333": 280, "374": [284, 1019], "375": [87, 173, 455, 756, 998, 1019], "376": 1006, "37647423": 51, "376999": 61, "377": 360, "37741762": 134, "377eb8": [74, 78, 96, 97, 246], "378": [126, 191, 422, 1019, 1032, 1039], "37815029": 234, "37845099": 368, "37967282": 999, "379710": 191, "379763": 151, "38": [122, 192, 210, 218, 223, 270, 286, 303, 333, 422, 638, 891, 946, 998, 1008, 1039, 1040, 1041], "380": 1032, "3800": 208, "3803": 361, "381": [159, 1019], "381327": 380, "382005": 151, "382120e": 237, "38353048": 234, "383973": 280, "383mb": 359, "384": [702, 911], "3840": 1047, "384338": 208, "384616559": 394, "385000e": 237, "3854": [670, 671], "3855": 1018, "386": 886, "3862": 874, "38629436": 1008, "38690531511642143152471231333333107": 51, "387": 1039, "387580e": 237, "387599": 51, "387830e": 237, "388": [61, 1019], "3889": 481, "3889873516666431": 51, "389": [599, 600, 1032], "3894": 621, "39": [42, 51, 173, 260, 380, 382, 383, 389, 415, 423, 501, 901, 919, 948], "3908844": 833, "391": [352, 359, 702, 1019], "3910350737": 394, "3911": 46, "3928": 476, "393297": 260, "39329747": 260, "394": [103, 184], "3947": 1010, "395": [42, 360, 361, 1019], "39568399": 542, "396": [103, 173, 382, 1032], "3964": [428, 481], "397": 380, "3972": 661, "398": [653, 1032], "3986": 237, "3996": 657, "3_": 990, "3_poli": 277, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 46, "3c479a6885bfa0438971388283a1ce32": 379, "3d": [79, 82, 101, 120, 130, 216, 239, 241, 243, 367, 423, 512, 592, 961, 1031, 1046, 1047, 1049], "3f": [42, 44, 46, 49, 51, 53, 54, 58, 60, 62, 72, 74, 81, 82, 83, 92, 104, 106, 108, 117, 138, 145, 146, 154, 169, 173, 175, 176, 177, 179, 184, 190, 192, 193, 199, 203, 205, 211, 219, 221, 225, 234, 235, 237, 240, 250, 252, 271, 275, 277, 278, 280, 283, 285, 288, 298, 313, 335, 341, 359, 360, 361, 828, 835, 1006, 1028], "3k": 702, "3l": 425, "3llobo": 1054, "3m": 50, "3rd": [120, 183, 845, 888, 1000, 1008], "3ssnporch": 148, "3x1": 953, "3x2": [969, 972], "3x3": 984, "4": [42, 43, 44, 45, 46, 47, 48, 50, 51, 54, 56, 57, 61, 62, 63, 66, 67, 68, 69, 72, 73, 74, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 96, 98, 99, 100, 103, 104, 105, 106, 107, 113, 114, 116, 117, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 133, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 169, 173, 175, 178, 180, 181, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 223, 225, 226, 227, 229, 232, 233, 237, 239, 246, 250, 251, 252, 253, 254, 255, 256, 258, 260, 262, 263, 264, 265, 267, 268, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 284, 285, 286, 288, 289, 291, 292, 297, 298, 300, 302, 303, 304, 305, 308, 313, 315, 316, 318, 319, 321, 322, 324, 326, 327, 328, 329, 330, 332, 333, 335, 337, 338, 339, 340, 341, 345, 347, 351, 352, 353, 355, 356, 357, 359, 360, 367, 368, 373, 379, 380, 382, 383, 385, 390, 391, 394, 397, 398, 399, 403, 406, 407, 408, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 497, 502, 510, 518, 519, 522, 523, 524, 530, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 587, 588, 589, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 620, 623, 624, 625, 628, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 682, 683, 685, 686, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 704, 705, 708, 712, 713, 721, 722, 731, 732, 733, 738, 740, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 762, 774, 775, 787, 788, 794, 795, 796, 797, 800, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 832, 833, 834, 836, 838, 839, 840, 841, 844, 845, 846, 847, 849, 854, 858, 859, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 897, 898, 902, 903, 904, 908, 910, 911, 914, 918, 919, 920, 921, 926, 927, 929, 930, 931, 932, 936, 946, 947, 948, 949, 951, 952, 953, 954, 955, 962, 969, 970, 971, 973, 974, 975, 976, 979, 980, 981, 987, 988, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1008, 1009, 1012, 1013, 1019, 1023, 1027, 1028, 1029, 1030, 1032, 1035, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1052, 1053, 1054, 1057], "40": [42, 53, 88, 100, 110, 120, 124, 155, 161, 175, 203, 210, 211, 213, 236, 241, 243, 254, 256, 266, 278, 304, 310, 315, 320, 337, 338, 346, 347, 349, 351, 353, 354, 367, 373, 380, 419, 452, 501, 523, 524, 805, 850, 851, 855, 867, 868, 987, 999, 1008, 1039, 1040], "400": [43, 62, 84, 124, 153, 158, 175, 187, 225, 244, 289, 314, 360, 380, 420, 501, 1032], "4000": [93, 153, 265], "400000e": 237, "401": [193, 1019], "4017": 530, "4018260": 334, "402": [145, 281], "402344": 391, "4025": 1044, "403": [161, 233, 281, 288, 360, 1019], "404": [53, 150, 237, 1019], "40597": 297, "406": [152, 360, 695, 699, 995, 1019], "4066": 45, "407": [173, 382], "408": [360, 1019], "40842387": 50, "40887718": 91, "409": 360, "40945": 104, "4096": [124, 380, 420, 501], "40966": 379, "409717": 280, "41": [51, 173, 219, 256, 367, 380, 382, 463, 475, 487, 498, 627, 630, 641, 652, 653, 658, 664, 666, 667, 668, 670, 687, 691, 692, 705, 787, 845, 1000, 1004], "41075698": 421, "41076071": 421, "41082": 43, "411": [191, 341, 354, 417, 427, 479, 539, 1019], "4110": 482, "41187": 180, "412": [502, 994], "412021": 151, "41214": [219, 237], "41215": 237, "412304": 208, "414": [237, 416, 732, 762, 886, 898, 998], "41421356": [769, 775, 1001], "4143": 397, "414810": 260, "414912": 154, "416": [745, 998], "416010": 332, "41666667": 756, "41691605": 134, "417": 297, "41726413": 134, "41888636": 668, "419": [360, 622], "4194": 382, "42": [42, 43, 44, 51, 57, 60, 61, 62, 63, 66, 78, 80, 90, 110, 116, 126, 131, 138, 145, 146, 148, 149, 151, 152, 154, 155, 159, 169, 170, 187, 191, 193, 194, 196, 198, 208, 211, 213, 214, 221, 225, 226, 227, 233, 234, 236, 239, 240, 241, 246, 251, 252, 253, 256, 259, 271, 276, 278, 281, 291, 298, 304, 305, 306, 313, 318, 319, 320, 321, 323, 325, 327, 329, 331, 340, 346, 348, 359, 360, 368, 373, 387, 390, 391, 399, 406, 415, 419, 422, 423, 426, 443, 450, 484, 494, 498, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 533, 535, 537, 543, 550, 551, 552, 563, 564, 571, 572, 573, 574, 576, 611, 612, 613, 614, 615, 683, 700, 701, 702, 766, 798, 799, 803, 805, 808, 828, 834, 836, 850, 851, 855, 859, 862, 902, 903, 905, 906, 907, 917, 920, 921, 933, 946, 963, 967, 1001, 1008, 1028, 1032, 1035, 1036, 1039], "42074": 324, "421": [134, 732, 762, 998, 1019], "421087": 280, "42165": 148, "422": [599, 600, 732, 762, 998], "4226193151": 51, "4232": [42, 51], "423641": 208, "424": 237, "4242": [42, 51], "42425183539869404": 328, "425": [240, 360, 621], "4254": [173, 382], "4260": [755, 758], "427": [173, 239, 382, 512, 513, 589, 590, 593, 1019], "427329": 260, "4285714285714286": 998, "429": 295, "4294": 1045, "43": [46, 51, 173, 182, 216, 250, 271, 277, 298, 382, 390, 806, 820, 891, 1019], "430": [427, 539], "43026679e": 1031, "431": 382, "4310090": 775, "43131013": 334, "432": [125, 277, 417, 1019], "4325": 56, "433": [89, 382, 1019], "43348936": 234, "4337": 994, "434": [203, 1019], "43475": 884, "436": 250, "4362": 1044, "437362": 208, "438": [177, 191, 1006, 1019], "43847489": 134, "43873": 361, "4387766": 51, "4394": 1047, "44": [42, 46, 180, 191, 192, 203, 295, 302, 485, 787, 891, 911, 914, 981, 998, 1005, 1039], "440": 191, "440409": 208, "4406": 479, "4409": [42, 51], "44139186": 315, "4415": 56, "442": [78, 173, 183, 187, 382, 507, 1019, 1030], "4425765": [659, 669, 690], "44300751539296973": 51, "44300752": 51, "443238": 280, "44373091": 999, "44381023": 223, "44412786": 542, "445": [97, 271, 1006, 1019], "445978": 208, "446": [360, 732, 762, 998], "447": 360, "447268": 88, "4472869": 134, "4474": 391, "4478": 1044, "448": 298, "4486": 550, "449": [43, 420, 541, 1019], "4496": [42, 51], "4497": 1018, "45": [74, 98, 105, 106, 116, 154, 169, 180, 193, 208, 219, 237, 284, 288, 289, 338, 348, 419, 422, 423, 570, 571, 633, 640, 652, 653, 658, 666, 667, 668, 687, 688, 689, 794, 803, 914, 988, 998, 1006, 1016, 1019, 1028, 1035, 1039, 1042], "4500": 234, "45070924": 672, "451": 652, "45192": 164, "451933": 88, "452": [179, 181], "45333333": 367, "4544": 42, "455": [110, 324, 1019], "4550": 379, "456": [43, 146, 155, 420, 541, 1019], "45612256": 666, "45663524": 666, "457": 621, "4576": 841, "458333315172": 51, "459": [68, 415, 448, 1019], "459074": 260, "46": [42, 51, 87, 122, 219, 256, 368, 391, 599, 600, 688, 689, 722, 828, 914, 919, 1008, 1035], "46033": 502, "46043": 502, "46081961": 999, "461": [50, 69, 391, 1019], "462234": 260, "463": [237, 295], "463088": 51, "464": [47, 190, 220, 1019], "46428631511221642143151251232633109": 51, "465660": 61, "465730": 208, "466": 1005, "4666": 640, "46779927": 50, "468": 92, "46858513287221654": 333, "46874778": [659, 669, 690], "469": [92, 107, 1019], "4690": 1032, "46915237": [659, 669, 690], "4694": 530, "469474": 208, "46958558": 667, "4697": 81, "47": [42, 184, 215, 380, 499, 500, 541, 547], "470": [67, 139, 1019], "471": 382, "47140": 415, "47236": [380, 503], "4733": 152, "47330339": 423, "4738": 1044, "474": [210, 1019], "475": [138, 324, 1019], "47668": 361, "477": 184, "478": [267, 1019], "478522": 208, "47885": 361, "4792": 237, "47922861": 260, "479229": 260, "47928": 361, "4794": 208, "4795": 208, "4796": 208, "4798": 208, "47985": 502, "47987268e": 200, "4799": 208, "48": [42, 51, 79, 116, 130, 154, 180, 260, 324, 382, 391, 415, 516, 603, 705, 752, 834, 845, 987, 1000, 1008, 1035], "480": [203, 320, 360, 1019], "4801": 208, "4802": 208, "4803": 208, "4804": 208, "4805": 208, "4806": 208, "4807": 208, "4809": [208, 280], "481": [184, 192], "4810": 208, "4812": 45, "4815": 208, "48204257": 999, "4828": 208, "483": 654, "4830": 208, "4831": [208, 661], "4832": 208, "4836": 208, "484": 184, "4841": 208, "484109": 208, "4846": 208, "485": 702, "4852": 208, "4855": 208, "4857596147013469": 94, "486": 221, "4860": 208, "4866": 208, "4867": 208, "4869": 208, "487": [51, 730], "4872": 208, "48736655": 673, "4874": 208, "4876": 208, "4880": 208, "4881": [208, 1044], "48841": 502, "48842": 502, "4885": 208, "48858": 391, "4888": 208, "489": [357, 1019], "4891": 208, "48938813e": 200, "4894": 208, "48979592": 455, "4898431": [380, 498], "49": [42, 173, 211, 223, 256, 285, 379, 380, 382, 390, 415, 456, 463, 719, 732, 762, 770, 799, 803, 806, 891, 998, 1008, 1042], "491": 702, "492": [271, 649, 991, 1030], "4923": 655, "4928": 208, "493": [649, 910, 991], "4936": 208, "4939": 1046, "494021": 498, "4948": 45, "4951": 659, "49530882": 334, "495761": 391, "49665188": 223, "4967": 530, "4976": 603, "499": [173, 382, 391], "4995": 1045, "49999993": 994, "4daf4a": [78, 96], "4dbd33": 122, "4e": 240, "4e9a06": [93, 98], "4eacc5": [93, 98], "4f": [45, 46, 56, 141, 150, 152, 234, 235, 237, 323, 917], "4gb": 1032, "4i": 84, "4th": [173, 183, 382], "4x": [391, 1054], "4x10": 423, "4x1048576": 423, "4x11": 302, "4x4": [382, 420, 423], "4x9": 423, "5": [42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 66, 67, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 103, 104, 106, 107, 108, 111, 112, 113, 114, 116, 117, 122, 124, 125, 126, 127, 128, 130, 131, 133, 136, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 221, 222, 225, 227, 230, 231, 232, 233, 234, 235, 237, 240, 241, 242, 244, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 313, 314, 315, 316, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 342, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 380, 382, 383, 385, 387, 390, 391, 393, 397, 398, 399, 403, 407, 408, 409, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 430, 443, 444, 445, 446, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 475, 478, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 510, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 534, 537, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 558, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 588, 598, 599, 600, 603, 608, 610, 611, 612, 613, 614, 616, 619, 620, 621, 622, 625, 626, 628, 629, 631, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 647, 649, 652, 653, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 694, 695, 697, 698, 699, 701, 702, 703, 705, 709, 711, 713, 715, 718, 719, 724, 726, 727, 728, 729, 730, 732, 733, 734, 736, 738, 741, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 775, 776, 784, 787, 788, 790, 791, 793, 794, 795, 796, 797, 800, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 904, 910, 911, 912, 913, 914, 915, 916, 918, 920, 926, 927, 930, 931, 935, 936, 945, 946, 947, 948, 949, 951, 952, 953, 961, 962, 967, 969, 970, 973, 974, 975, 976, 977, 978, 979, 987, 988, 990, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1019, 1020, 1023, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1049, 1053, 1054, 1055, 1058], "50": [0, 42, 45, 48, 51, 53, 60, 67, 68, 72, 84, 86, 93, 94, 99, 100, 103, 104, 116, 122, 124, 127, 133, 138, 141, 144, 151, 154, 157, 158, 173, 176, 178, 179, 180, 181, 190, 191, 192, 199, 203, 214, 219, 222, 226, 227, 231, 233, 235, 237, 239, 243, 244, 249, 250, 252, 256, 260, 271, 272, 277, 279, 280, 290, 298, 316, 318, 322, 329, 331, 338, 340, 342, 346, 354, 360, 380, 382, 385, 390, 419, 422, 423, 424, 427, 448, 479, 485, 486, 506, 510, 527, 529, 532, 539, 545, 550, 559, 560, 575, 599, 600, 612, 614, 615, 621, 623, 664, 665, 672, 673, 674, 676, 682, 683, 684, 698, 719, 798, 806, 820, 839, 859, 910, 919, 993, 994, 998, 999, 1001, 1004, 1008, 1019, 1021, 1025, 1039, 1056], "500": [48, 78, 84, 91, 94, 95, 97, 116, 117, 131, 133, 142, 144, 152, 172, 175, 196, 232, 233, 240, 257, 258, 262, 263, 267, 271, 277, 280, 290, 291, 298, 304, 310, 322, 328, 333, 334, 352, 357, 372, 422, 428, 475, 476, 480, 481, 482, 487, 488, 489, 490, 617, 619, 620, 622, 627, 630, 631, 656, 657, 660, 661, 662, 686, 688, 689, 868, 987, 1013], "5000": [90, 205, 234, 235, 237, 329, 891], "50000": 60, "500000": 314, "5000000": 54, "50000000": 178, "50000013": 994, "5000083": 51, "500526": 154, "500x500": 547, "5012": 1045, "5016": [417, 428, 481], "502": [106, 173, 1019], "5025616": 51, "5029": [417, 428, 481], "503": [246, 1019], "503452": 314, "5036": 1046, "504185": 314, "50447799": 999, "505": [141, 835, 1019], "506": [268, 1019], "507": 416, "50755672": 472, "507943": 280, "508": 1030, "5082": 1018, "50941682": 999, "50_000": [325, 360], "50sampl": 1025, "51": [60, 180, 237, 295, 298, 415, 416, 772, 782, 787, 994, 1035], "510": [182, 1019, 1030], "51082562": 596, "511": [99, 1019], "512": 218, "512281": 267, "512595": 314, "51292546": 618, "513": [859, 1001], "513034": 314, "5131": [45, 1044], "51341712": 996, "5141": 1045, "51462041": 855, "5149": 45, "515": 42, "515390": 391, "5166": 679, "5166646": 770, "517": [46, 458, 468, 1030], "517272": 267, "518": [338, 1019], "5182": 1044, "5186": 1044, "519": [186, 252, 1019], "5193": 45, "51958": 180, "51961675": 1030, "51963999": 112, "52": [42, 51, 180, 219, 537, 639, 803, 946, 1039], "520": [363, 634, 859, 988, 1001, 1019], "52003279": 999, "5208": 208, "521": [62, 158, 1019], "52106591": 134, "5211": 1046, "5212": 208, "522": [172, 911, 1019], "5224167": 51, "5229": 1046, "523": 530, "524": 51, "5243": 423, "52433293": 423, "5244": 208, "525": [445, 634, 988], "5251": 1045, "526": 910, "526599": 208, "5279": 1046, "5282": 1044, "52875032": 667, "5289": 45, "5291": 1045, "5295": 1046, "52955942": 855, "5299": 1045, "53": [42, 87, 256, 415, 422, 541, 547, 552, 798, 799, 1019], "530": [65, 1019], "53060544": 1030, "5315170": 51, "5316": 359, "532": [359, 1019], "53284267": 260, "532843": 260, "533": 191, "5337": 1044, "534": 191, "535": [88, 1019], "5355": 1044, "5359": 1046, "536": [100, 180, 298, 1019], "5360": 1044, "53777511": 51, "538": [179, 1019], "53844117956": 770, "539": [144, 1019], "5395559": 234, "53959628e": 200, "54": [122, 173, 196, 203, 219, 222, 256, 380, 382, 415, 497, 1040, 1041], "540": [51, 1019], "54035582": 770, "541": [361, 458, 468], "5415": 995, "5417": 237, "542": [173, 382], "5420": 550, "542052": 208, "54209": 164, "5425": 530, "543": 203, "5431": 1044, "543841": 208, "54434690031882": 106, "54488318": 394, "5460": 1045, "546068": 260, "54606834": 260, "54666667": 367, "5467523": 51, "5469": 382, "547": [57, 1019], "5488135": 394, "549": 62, "5495": 1044, "54980": 547, "55": [191, 196, 214, 219, 237, 241, 338, 390, 415, 419, 497, 603, 806, 812, 820, 834, 998, 1039], "5500": [332, 694, 995], "550213": 208, "55102041": 455, "5515": 752, "552": [332, 998, 1019], "55212743": 368, "5523": 1018, "55249": 603, "553": [164, 192, 236, 1019], "55390036": 134, "554": [227, 235, 315], "5540": 1045, "55422893": 423, "555": 722, "5555555555555556": 285, "5557": 280, "5558": 45, "557": 361, "55800226": 234, "559": [82, 285, 622, 1019], "5591": [695, 699, 995], "55968825": 652, "56": [42, 144, 228, 237, 250, 341, 391, 652, 653, 658, 666, 667, 668, 687, 719, 741, 998, 1008, 1019, 1035, 1039], "560": [219, 523, 524], "561": 415, "561464362648773": 94, "562": [111, 1019], "564": 219, "56479934": 368, "56485654": 134, "565": 277, "566": 219, "568": [114, 1019], "569": [173, 340, 382, 506, 598, 601, 602, 604], "5697": 1046, "56b4e9": 262, "57": [175, 191, 235, 286, 316, 382, 383, 403, 407, 408, 416, 711, 767, 787, 843, 998, 1008, 1039], "570": [173, 382, 1030], "570655": 208, "571": [46, 103, 1019], "5713": 669, "57142857": 727, "573": 423, "5732": 1046, "57320793": 423, "573491": 208, "574": [92, 271, 540, 547, 1019], "5748": 500, "5749": [380, 499, 500], "575": [103, 219, 227, 1019], "576": [221, 1019], "5762": 1045, "576989": 260, "577": [173, 382], "579": 530, "58": [76, 100, 111, 382, 417, 428, 481, 613, 770, 1008, 1028], "580": [360, 850, 851], "5804131": 134, "5805": 1045, "5807": 1001, "581": [196, 361], "581012": [380, 497], "5814": 1046, "58149261": 423, "58195950e": 200, "582": 911, "5828": [380, 499, 500], "583": [86, 234, 415, 1019, 1030], "5833": [744, 998], "583333315172": 51, "58364548": 996, "585": 1030, "5853": 1018, "5854": 1030, "5855": 1030, "5857": 1044, "5863": 391, "58667835e": 200, "586798": 208, "5871": 685, "5874": 1045, "588": [148, 1019], "5882004012129721": 94, "589715": 208, "59": [42, 76, 196, 203, 237, 353, 382, 391, 415, 416, 516, 828, 998, 1035, 1039], "59122734": 673, "592": [617, 620, 631, 1005], "592373": 332, "5925110": 51, "5929": 1045, "593": 142, "594": [184, 219], "594754": 208, "59489497": 234, "595": [129, 219, 1019], "5956": 1047, "596": 722, "5960": 234, "5963": 1049, "597": 219, "598": [92, 124, 131, 176, 547, 1019], "5981": 550, "598533": 208, "599": [173, 686], "5991": 1046, "5_000": 196, "5a": 890, "5d": 46, "5e": [43, 124, 204, 601, 602, 604], "5e5": 219, "5f": [164, 331], "5m": 54, "5n_": 113, "5th": [51, 151, 154, 183, 415], "5x": 1056, "6": [42, 44, 45, 47, 48, 49, 50, 51, 56, 62, 63, 66, 67, 74, 78, 80, 83, 84, 86, 90, 91, 94, 95, 96, 97, 98, 99, 101, 106, 107, 108, 110, 111, 112, 114, 116, 120, 124, 126, 133, 139, 151, 152, 154, 156, 158, 164, 168, 173, 175, 178, 180, 182, 183, 186, 187, 191, 192, 194, 196, 198, 199, 200, 203, 208, 212, 217, 219, 220, 221, 223, 233, 237, 239, 240, 243, 246, 249, 250, 254, 257, 258, 262, 263, 264, 265, 267, 268, 270, 271, 272, 276, 277, 278, 279, 280, 282, 286, 287, 288, 289, 293, 297, 300, 303, 311, 313, 315, 316, 318, 320, 322, 323, 325, 327, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 348, 349, 351, 353, 355, 357, 359, 360, 361, 366, 368, 379, 380, 382, 383, 385, 390, 391, 398, 403, 407, 408, 413, 415, 416, 419, 420, 422, 423, 424, 430, 447, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 488, 489, 490, 491, 496, 502, 511, 523, 530, 533, 536, 543, 544, 545, 546, 547, 551, 552, 553, 559, 567, 568, 569, 573, 574, 575, 576, 599, 600, 610, 611, 612, 614, 617, 620, 621, 631, 633, 634, 636, 642, 643, 650, 651, 676, 682, 683, 695, 699, 705, 727, 734, 744, 748, 751, 752, 756, 757, 759, 775, 791, 794, 796, 803, 804, 805, 807, 808, 813, 815, 816, 818, 823, 824, 827, 831, 832, 833, 834, 836, 845, 846, 847, 849, 850, 851, 858, 860, 861, 862, 877, 878, 880, 883, 885, 888, 889, 893, 894, 925, 926, 930, 931, 946, 947, 948, 950, 952, 953, 961, 973, 976, 984, 987, 988, 992, 994, 995, 998, 1008, 1009, 1012, 1013, 1014, 1021, 1023, 1027, 1028, 1030, 1035, 1037, 1040, 1041, 1042, 1045, 1047, 1052, 1056, 1057], "60": [42, 44, 93, 106, 114, 127, 219, 231, 237, 239, 240, 260, 265, 285, 290, 338, 351, 359, 379, 415, 419, 456, 463, 719, 806, 998, 1008, 1028, 1039, 1042], "600": [62, 84, 92, 149, 158, 159, 380, 686], "6000": [316, 633], "601": [241, 1019], "601052": 314, "601707": 208, "60244657": 855, "60276338": 394, "603": [97, 301, 454, 1019], "604": [131, 547], "606": [619, 840, 999], "60648906": 1030, "607": [291, 1019], "607275806426107": 175, "607752": 151, "608": [108, 1019], "60809415": 668, "60834549": 91, "60836363e": 200, "609": [184, 391], "61": [113, 192, 237, 379, 382, 391, 416, 464, 547, 566, 652, 653, 658, 666, 667, 668, 687, 719, 828, 948], "6101": 1046, "611": [275, 277, 547], "6114": 833, "6114326": 219, "6114327": 219, "6114328": 219, "6114329": 219, "6114330": 219, "611676": 208, "612": 796, "6121": 1045, "6126": 1046, "6147": 1044, "615": 82, "615373": 191, "616": [847, 1000, 1008], "61611719": 178, "617": [92, 194, 280, 415, 775, 1019], "617050e": 237, "6173": 1045, "617715": 151, "6178": 1045, "618": [92, 275], "6181": 1046, "6182": 1045, "618263": 208, "619": [97, 454], "619052": 380, "61958": 180, "6196": [280, 1044], "6198": 752, "62": [51, 192, 196, 237, 270, 332, 338, 368, 380, 499, 500, 850, 851, 1035, 1042], "620": 504, "621": [92, 775], "621645": 208, "622": [92, 547], "62241605": 203, "622811": 151, "623": [847, 1000], "6231": 1018, "6237": 237, "624": 1005, "625": [87, 219, 624, 714], "6250": 1046, "6258": 1044, "626": [83, 205, 328, 1019], "6261": 1048, "626286": 208, "62717609": 234, "62722912": 51, "62745778": 999, "628": [293, 360, 1019], "6282": 1045, "6284": 1018, "6288": 1046, "6291456": 87, "63": [44, 271, 382, 422, 563, 564, 571, 572, 652, 653, 658, 666, 667, 668, 687, 705, 732, 806, 820, 828, 920, 921, 998], "630": 730, "63035731": 423, "630382": 332, "631": [166, 1019], "6312": 51, "632": 324, "6323": 1018, "6331": 42, "6332": 42, "63327171": 203, "6333": 42, "6334": 42, "6335": 42, "6338211367102258": 325, "63394388": 203, "635": [42, 279, 622, 1019], "636": [203, 391], "63667341": 91, "6371000": 770, "6374": 1047, "6375861597263857": 945, "638": [360, 391], "638768": 88, "638843": 314, "63931533": 1030, "63bit": 1050, "64": [42, 51, 67, 82, 87, 92, 119, 124, 180, 191, 240, 250, 251, 255, 275, 286, 302, 307, 359, 364, 372, 373, 382, 383, 391, 399, 403, 416, 420, 427, 501, 504, 508, 605, 606, 652, 664, 694, 695, 696, 697, 699, 911, 1001, 1029, 1035, 1039, 1041, 1047, 1048, 1051, 1052, 1053, 1056], "640": [277, 413, 496, 512, 513, 589, 590, 593, 987, 1019], "640000e": 237, "640770e": 237, "640880e": 237, "641": [314, 1019], "64185414": 672, "64236448": 542, "6424": 1018, "6425": 1018, "643": [192, 275], "644": 341, "6440": 234, "64447187": 87, "645": [92, 286, 1019], "6451": 1018, "6452": 1047, "646": 183, "6463": 1048, "647": 92, "6472": 1045, "6476": 530, "647689": 208, "648": 192, "648026": 151, "6497": 1045, "64bit": 1039, "64x64": [124, 380, 420], "65": [42, 68, 192, 219, 286, 324, 415, 445, 508, 523, 603, 705, 747, 798, 799, 828, 1005, 1028, 1039, 1040, 1041], "650": [340, 413, 1019], "6505186632729437": 94, "6507": 1046, "651": 391, "652": [234, 360, 1019], "652739": 208, "653": [391, 617, 620, 631], "6545": 1051, "655": 192, "656": 380, "6567": 857, "657": [260, 265, 277, 1019], "6572": 857, "6573": 1046, "65799352e": 200, "658": 117, "6586": 1045, "659": [154, 184, 1019], "6599": 1018, "65e": 205, "66": [42, 46, 243, 324, 382, 415, 432, 467, 538, 638, 718, 789, 790, 801, 889, 897, 980, 998, 1010], "660": [260, 318, 1019], "660797": 260, "661086": 280, "6624": 1051, "662409": 208, "663": [311, 904, 1006, 1010, 1019], "664": [173, 382], "665": 42, "6650": 51, "6651": 1045, "666": [178, 415, 852, 988], "6660": 1045, "6666": [744, 998, 1045], "66666667": [735, 788, 860, 1008], "666667315174": 51, "6667": 1045, "66670169e": 200, "667": [726, 746, 998], "667219": 151, "668": 271, "6689": 1047, "6691": 1045, "6697": 1045, "669930e": 237, "67": [46, 100, 191, 237, 382, 504, 522, 523, 524, 633, 673, 719, 820, 988, 998, 1012, 1035, 1039], "670": [221, 271], "671": 1010, "6715": 1018, "67251877": 672, "673": [117, 360, 391], "67443065": 134, "67451144e": 200, "675": 175, "675318": 88, "676": 675, "6764": 1045, "678008": 219, "678009": 219, "678010": 219, "678011": 219, "678012": 219, "678013": [219, 237], "678359": 208, "679": [221, 910], "68": [42, 184, 210, 316, 337, 415, 484, 541, 547, 596, 691, 692, 1039], "681": [92, 223, 391, 1019], "6817": 1045, "682": 391, "6821": 46, "682880e": 237, "683980e": 237, "684": [104, 112], "6846": 1045, "6848": 1048, "685": [726, 746, 998], "6852": 277, "6860": 150, "687": 1010, "6875": 722, "688": 112, "689": [198, 1019], "689015": 314, "689143": 314, "689751": 314, "69": [44, 46, 210, 271, 323, 338, 415, 477, 478, 613, 614, 762, 998, 1008, 1030], "690": 221, "6902": 1045, "691": 727, "6913": 1045, "692": 138, "692270e": 237, "692470": 314, "6929": 1018, "692901": 151, "693": 998, "6931": 874, "69314718": [425, 618, 1008], "695": 275, "69513": 92, "6954": 1045, "69545": 92, "695740e": 237, "69735": 92, "698": 92, "6984743": 178, "69892343": 223, "699691": 380, "6d": 46, "6f": [54, 128, 282, 743, 801], "6ppm": 180, "6th": 183, "6x3": 423, "7": [42, 44, 46, 49, 50, 51, 52, 53, 56, 62, 65, 67, 69, 73, 76, 78, 80, 87, 88, 89, 90, 94, 98, 99, 101, 104, 105, 107, 112, 114, 127, 138, 141, 147, 151, 154, 155, 159, 160, 173, 184, 190, 191, 192, 194, 196, 200, 201, 218, 219, 220, 221, 235, 237, 239, 241, 246, 251, 252, 258, 260, 262, 263, 266, 267, 271, 272, 277, 281, 283, 284, 288, 290, 295, 297, 298, 300, 303, 304, 306, 315, 316, 318, 322, 327, 330, 331, 332, 334, 337, 338, 340, 341, 345, 352, 355, 356, 360, 361, 368, 380, 382, 383, 389, 390, 391, 403, 407, 408, 413, 419, 420, 422, 423, 424, 426, 427, 430, 445, 450, 451, 454, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 473, 477, 478, 488, 489, 490, 491, 497, 502, 504, 538, 539, 540, 541, 542, 544, 546, 550, 567, 568, 594, 597, 606, 611, 612, 633, 634, 636, 643, 652, 653, 655, 658, 664, 665, 666, 667, 668, 679, 681, 687, 688, 689, 698, 705, 713, 715, 727, 729, 730, 732, 734, 750, 751, 752, 756, 757, 759, 788, 791, 796, 797, 800, 803, 805, 806, 807, 808, 809, 810, 813, 816, 820, 823, 824, 827, 833, 836, 840, 850, 851, 859, 868, 869, 870, 875, 882, 883, 905, 906, 946, 947, 950, 951, 953, 962, 967, 987, 988, 993, 994, 996, 998, 999, 1001, 1002, 1004, 1008, 1012, 1013, 1023, 1027, 1030, 1035, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1052, 1057], "70": [42, 44, 46, 49, 100, 104, 106, 127, 138, 192, 256, 262, 277, 338, 380, 382, 419, 499, 500, 688, 689, 719, 732, 762, 806, 820, 897, 987, 1008, 1028], "700": [84, 271, 329], "7000": 237, "701": 92, "702266": 208, "703": [187, 413, 519, 1019], "70359377": 203, "704": 359, "70432034": 116, "7049": 1045, "7049787496083262": 94, "706026": 208, "707": [886, 898], "7071": 1047, "70763101": 87, "708": [544, 546, 553, 756], "70814003": 368, "7083": 998, "708333315174": 51, "7089": 1046, "709": 278, "7091072911505115": 328, "70x": 1056, "71": [42, 46, 122, 173, 223, 237, 241, 382, 516, 736, 742, 772, 782, 998, 1030, 1035, 1041], "710": 413, "7101": 1045, "711": [226, 1019], "712": [117, 143, 321, 1019], "714": 329, "715": [140, 1019], "71518937": 394, "7152": 1045, "7154": 1045, "715413": 151, "7159": 1045, "716": [156, 519, 1019], "7187": 1045, "718747": 208, "7194": 1045, "72": [42, 44, 45, 51, 144, 178, 390, 828, 834], "7200": 655, "721": [544, 546, 553], "722": [105, 1019], "722128e": 237, "72295655": 116, "723": [92, 252], "723665": 291, "7239": 1045, "7242": 1018, "724702": 280, "7248": 1045, "7256": 641, "726": 1006, "7260": 1045, "7261": 1045, "726573": 191, "72667194": 999, "7271482064048191": 285, "72850319": 999, "7295": 1045, "7298221281347033": 42, "73": [56, 122, 140, 281, 338, 398, 487, 742, 806, 820, 856, 919, 1008, 1028, 1039, 1041], "7301": 1045, "730119e": 237, "731249e": 237, "7313": 45, "73153": 391, "732": [151, 184, 221, 1019], "7321432711315247203224138160467097": 51, "7323": 1045, "7325": 1045, "732913": 291, "733": 298, "7331": 1046, "7332": 914, "7337046907": 184, "7350": 1045, "7353": 1045, "7356": 1046, "7364": 329, "7365": 1046, "73654189": 51, "73698041": 1030, "737": [252, 530], "7376": 1046, "7382": 1018, "7387": 482, "7388": 1046, "739865e": 237, "739950": 291, "74": [42, 235, 337, 338, 382, 596, 700, 806, 820, 889, 1035], "7411": [475, 480, 1045], "7419": 1045, "742": [252, 1019], "743": [275, 1030], "74310541": 178, "7436926291700353": 214, "744": [275, 298], "744029": 291, "744042e": 237, "7441": 1046, "744497e": 237, "74495357": 203, "7459": 1046, "746": 382, "7464": 1046, "746492": 277, "748": [359, 391], "7490": [1045, 1046], "75": [42, 44, 45, 48, 51, 68, 78, 89, 114, 141, 170, 182, 183, 187, 191, 196, 198, 201, 210, 226, 237, 260, 264, 265, 271, 277, 286, 290, 303, 318, 330, 357, 359, 368, 455, 507, 557, 643, 664, 700, 712, 718, 740, 745, 746, 751, 759, 762, 800, 806, 888, 896, 900, 907, 923, 935, 936, 979, 998, 1000, 1008, 1014, 1016, 1028, 1041], "750": [83, 89, 146, 255, 277, 1019], "75000": 219, "7501": 1046, "750348": 151, "750389": 208, "7506": 1046, "752": 359, "752470": 291, "752867": 208, "753": [72, 359], "7532": 495, "7533": [428, 481, 1046], "75474165": 999, "7548": 1046, "7548291": 334, "7553": 1045, "7565": 1046, "756687e": 237, "7567": 1046, "756746e": 237, "7569": 476, "757": [173, 275, 298, 382], "7573": 1046, "75747153": 223, "7578": [280, 1046], "75788833": 170, "757915": 291, "759": 298, "7593": 1045, "7594": 1045, "75949622": 223, "75th": [256, 888], "76": [42, 196, 219, 338, 359, 368, 382, 391, 783, 787, 870, 1030], "760": [42, 154, 361], "7608": 1018, "76195467e": 200, "762": 359, "7621951219512195": 260, "7632": 1045, "7638": 994, "764": [727, 998], "7646": 1018, "764779": 208, "765012": 332, "7655": 1046, "765671": 208, "7660": 1045, "7661": 1046, "7668": 1047, "7674": [530, 1046], "767498": 151, "7676": 1045, "768": 87, "7680": 1045, "76823": 44, "7685": 1046, "769": 298, "76995": 380, "77": [42, 44, 51, 78, 173, 196, 286, 338, 379, 382, 540, 713, 742, 781, 828], "77000": 219, "7702": 1046, "770926": 291, "772": [359, 361, 729], "7721": 1046, "7723": 1046, "7724": 1045, "773": [277, 341, 654, 848], "77310": 380, "7732": 1045, "77322639": 116, "7738": 1047, "7739": 1046, "77426368": 50, "775": [56, 250], "7750": 1045, "775047": 682, "775151": 682, "7756": 1045, "77630514": 423, "7768366": 996, "777": 391, "7771": 1046, "77764": 411, "77777215": 116, "778": [251, 1019], "7786": 1045, "779": 359, "7794": 1046, "779751": 291, "7798": 914, "7799": 1045, "78": [42, 87, 122, 196, 237, 286, 320, 338, 499, 500, 652, 653, 658, 659, 661, 666, 667, 668, 670, 671, 687, 691, 692, 806, 812, 828, 834, 998, 1018, 1028], "780": 275, "781": [323, 1019], "7812": 1046, "781265": [380, 503], "7814": 1046, "7816": 51, "7819": [415, 1046], "782": [160, 1019], "7823": [1046, 1047], "7825": 1046, "7825594": 50, "7826": 382, "782755": 61, "7831": 359, "783149": 104, "7833": 481, "783392": 277, "7838": 1046, "784": 315, "7840": 88, "7849": 1046, "785063": 104, "78571427112143152472031331383346104": 51, "786": [52, 87, 104, 257, 1019], "786015": 104, "7863": 1046, "786432": 87, "78681467": 87, "787": 271, "7872": 1046, "7880": 1046, "7887550": 51, "788808": 332, "789": [169, 422], "7894": [904, 1010], "79": [42, 44, 65, 67, 112, 113, 127, 173, 196, 316, 338, 382, 390, 417, 480, 530, 603, 700, 828, 848, 1039, 1041], "790": [42, 103, 303, 1019], "7906": [628, 655], "79064206": 616, "79084103": 368, "791": 184, "7914": 1046, "791667315161908911936472223112": 51, "79269019073225": 302, "7927845601690917": 325, "7929": [360, 1046], "7943": 1049, "7944": 1046, "7946": 1045, "795": 654, "7954": 1046, "796": 151, "797": [200, 306, 1019], "7970": 1046, "7971": 669, "7972": 560, "79769376": 116, "798": [104, 422], "7983": 1046, "798301": 260, "7986": 1046, "7986499491396727": 175, "798982054": 998, "799": [184, 360], "7990": 1046, "7998": 1046, "7_qbz5n2kfra8p0": 403, "8": [42, 43, 44, 45, 46, 47, 50, 51, 52, 56, 61, 62, 63, 66, 67, 68, 69, 71, 77, 78, 79, 82, 84, 87, 89, 94, 96, 98, 99, 103, 105, 107, 108, 113, 116, 120, 121, 122, 124, 125, 128, 129, 132, 134, 138, 141, 143, 144, 148, 150, 151, 153, 157, 160, 161, 164, 172, 173, 176, 178, 180, 181, 183, 184, 187, 190, 191, 192, 194, 196, 198, 199, 204, 205, 210, 213, 219, 220, 223, 226, 227, 229, 235, 237, 239, 240, 241, 243, 244, 247, 250, 251, 252, 254, 258, 259, 260, 262, 263, 264, 266, 267, 268, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 287, 288, 295, 297, 300, 302, 306, 310, 313, 315, 316, 318, 320, 321, 322, 323, 324, 327, 332, 337, 338, 339, 341, 342, 345, 348, 352, 353, 354, 355, 356, 359, 360, 361, 366, 368, 373, 379, 380, 382, 383, 385, 390, 391, 403, 409, 413, 415, 419, 420, 422, 423, 424, 426, 428, 445, 449, 450, 453, 455, 456, 458, 461, 462, 463, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 493, 496, 502, 504, 508, 509, 520, 522, 537, 540, 544, 546, 549, 551, 553, 555, 556, 561, 562, 571, 576, 588, 594, 595, 596, 597, 610, 611, 634, 635, 642, 643, 654, 664, 676, 682, 695, 698, 699, 700, 701, 705, 708, 712, 713, 715, 716, 721, 727, 733, 734, 735, 747, 751, 752, 756, 757, 759, 788, 789, 791, 794, 795, 796, 797, 801, 803, 805, 807, 808, 813, 816, 823, 824, 827, 828, 829, 836, 837, 839, 848, 850, 851, 857, 867, 868, 869, 875, 882, 889, 891, 912, 915, 945, 946, 947, 951, 967, 973, 974, 975, 976, 977, 978, 979, 987, 988, 994, 995, 996, 998, 1001, 1006, 1008, 1012, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1040, 1041, 1042, 1046, 1047, 1052, 1053, 1055], "80": [42, 44, 49, 63, 80, 101, 113, 159, 166, 170, 192, 198, 254, 320, 324, 337, 351, 353, 359, 365, 368, 380, 382, 385, 413, 419, 424, 426, 450, 485, 516, 547, 719, 806, 820, 828, 891, 904, 923, 987, 993, 994, 998, 1005, 1011, 1014, 1032], "800": [84, 330, 380, 590, 698], "8000": [237, 280, 281], "800000011920929": 367, "8000184677460305": 325, "8002": 1046, "8003": 1047, "8005": 1046, "8006": 1046, "801": [355, 1019], "8010": 1046, "801770e": 237, "802": [45, 173, 382], "8022": [45, 399, 479, 1048], "802601": 208, "8028": 1046, "803483": 151, "803882e": 237, "8040": 1045, "804414": [380, 503], "805": 221, "8053": 1046, "8059798": 203, "806": 655, "8061": 1046, "8065": 1046, "8066": 1047, "8068": 1046, "807": [275, 277], "8075": 1047, "8086": [625, 1046], "8087": 1046, "8093": 1046, "8094": 1046, "80956739": 999, "80_000": 143, "81": [42, 84, 260, 337, 338, 415, 705, 767, 794, 806, 820, 837, 998, 999, 1001, 1008], "810": [193, 205, 835], "8100": 1018, "8102": 1047, "810596": 380, "8117": 1046, "8120": 1046, "8125": 727, "812526": 208, "8129": 1047, "8133333333333334": 309, "81355169": 423, "8137": 1046, "8139": 1046, "814": [193, 1030], "81458798": 1030, "815": 271, "815476315189119122164721021826110": 51, "8157": 1018, "8159": 1046, "816": [278, 477, 478], "8160": 1046, "8174": 1046, "817724": 208, "8181": 1046, "819": 423, "8190": 1047, "81940995": 423, "8198": 1046, "82": [42, 65, 87, 92, 147, 170, 222, 309, 337, 794, 806, 820, 946, 998, 1001, 1028, 1039], "820": [42, 51, 850, 851], "820705": 208, "8216": 1048, "822": 796, "822097": 191, "8224": 1046, "8225220806196525": 214, "823": 298, "8243": 1018, "825": [278, 756], "8251": 1046, "8253": 235, "8259": 1046, "827917": 151, "828": 298, "8282": 1046, "829429": 267, "8295": 1046, "83": [44, 65, 69, 73, 337, 382, 387, 700, 713, 792, 993, 998, 1028, 1032, 1042], "830": [225, 1019], "830000": 314, "8306": 1046, "8316": 1046, "832": [193, 422, 561, 562], "83236428": 423, "83281226": [850, 851], "8333": 504, "83333": 770, "833333": 191, "8335": 1046, "834": 341, "834310": 208, "8344": 1046, "8345": 603, "8348": 1032, "835": [278, 1019], "8353": 45, "8354": [628, 1046], "83548752": 616, "8355": 1045, "8361": 1047, "836224": 61, "8363": 1046, "8370": 1018, "8377": 1046, "83816048": 652, "83822343": 996, "83833": 391, "8387": 841, "839": 686, "84": [42, 44, 103, 170, 210, 237, 320, 337, 368, 382, 422, 423, 794, 820, 998, 1008, 1028], "840": 391, "84000": 219, "840000": 314, "8407": 103, "84077985": 203, "841": 104, "84127814": 672, "84253": 999, "844": [422, 561, 562], "8446": 1046, "8449": 1046, "847": 271, "847222222222214": 214, "8473": 423, "8478": 1048, "848": 272, "8480": 1018, "8481": 1046, "8484": 1047, "84845219": 1030, "848743": 61, "849835": 88, "85": [44, 46, 54, 67, 84, 89, 103, 127, 170, 234, 237, 288, 316, 338, 368, 422, 445, 504, 506, 561, 562, 603, 658, 664, 751, 759, 794, 806, 834, 998, 999, 1028, 1039], "850": 235, "850000": 314, "850031": 208, "8508": 1048, "851": 277, "8512": 1046, "8513": 625, "851348": 61, "8515": [423, 1046], "85151335": 423, "851792": 61, "85253229": 91, "852774": 151, "853174": 61, "853846": 208, "854": 275, "85418642": 368, "8549": 1046, "855": 46, "8554": 1047, "855465": 314, "857": [278, 360], "857400": 61, "858486250088675": 325, "85857475": 134, "8586": 1046, "859007": 61, "8591": 1046, "86": [46, 51, 67, 80, 103, 170, 210, 320, 337, 338, 414, 794, 918, 998, 1028, 1035], "860000": 314, "861": [173, 382, 794, 795, 998], "861053": 61, "861106": 61, "8614": 1018, "861533": 61, "8617": 1047, "861868": 61, "8626621": 334, "8628": 641, "8640": 192, "865400": 61, "866": 1006, "866161": 61, "866571": 61, "867": 107, "8672": 1046, "8676": [626, 1046], "8678": 629, "868": [151, 169], "868443": 49, "8698": 1046, "87": [44, 67, 103, 184, 275, 338, 603, 673, 783, 794, 806, 828, 886, 898, 998, 1032], "870": [173, 191, 329, 382, 1019], "871": [72, 112, 113, 417, 480], "871277": 61, "871965": 61, "872": [72, 1006], "8720": [562, 1047], "872186": 61, "873": [173, 382], "873724": 61, "87382323": 668, "874": [106, 794, 795, 998], "87421f": 122, "874771": 151, "875": [87, 176, 675], "875315171": 51, "875315173": 51, "875941": 61, "87600388": 178, "8768": 1046, "8769": 1048, "877": [46, 275], "877206": 275, "8773": 1048, "877981": 61, "878": 46, "878051": 208, "878964": 818, "87mb": 359, "88": [42, 44, 67, 210, 223, 276, 316, 335, 337, 338, 363, 380, 382, 385, 414, 417, 479, 652, 653, 658, 666, 667, 668, 687, 870, 946, 1028, 1039], "880": [42, 180, 1019], "880191": 208, "880298": 208, "88089948": 423, "88096009": 134, "882": 277, "88213": 380, "882561": 277, "883": 83, "883065": 61, "8833": 504, "8835": 1046, "884": 298, "8845": 1046, "885": [46, 173, 341, 382], "8854": 1046, "8874": 1046, "8878": 841, "8880": 626, "8881": 629, "889": [275, 443], "88978285": 999, "89": [42, 67, 180, 210, 337, 338, 981, 993, 998, 1008, 1032, 1039, 1042, 1050], "890": 275, "891": 46, "8922": 1046, "893055": 208, "8931": 1046, "8936": 1046, "894264": 260, "8947": 920, "8948018": 51, "89483932": 996, "8948621": 999, "896": [173, 654], "8963": 280, "8965": 422, "8973": 1046, "898": 271, "89856": 818, "899": [67, 275], "8992": 1046, "8995": 1046, "8pt": 1008, "8x8": [67, 119, 210, 250, 307, 316, 382, 508, 1029], "9": [42, 45, 46, 47, 50, 51, 52, 60, 62, 63, 66, 67, 69, 76, 78, 84, 89, 92, 96, 98, 107, 114, 116, 121, 124, 127, 147, 148, 150, 151, 157, 159, 164, 165, 166, 173, 178, 182, 187, 190, 191, 192, 200, 201, 210, 219, 232, 233, 236, 237, 239, 242, 250, 251, 260, 262, 263, 264, 265, 270, 271, 280, 284, 286, 297, 300, 302, 303, 306, 307, 308, 313, 314, 316, 318, 320, 321, 322, 324, 325, 332, 333, 335, 337, 338, 340, 341, 342, 348, 352, 357, 368, 382, 383, 391, 398, 403, 407, 408, 413, 414, 416, 417, 419, 422, 423, 445, 449, 456, 463, 469, 488, 489, 490, 491, 496, 502, 504, 522, 524, 526, 533, 540, 544, 545, 546, 553, 566, 573, 576, 589, 597, 610, 611, 613, 614, 633, 636, 640, 643, 645, 652, 653, 658, 664, 666, 667, 668, 687, 688, 689, 693, 698, 705, 715, 729, 732, 747, 754, 775, 784, 785, 786, 803, 805, 807, 809, 810, 824, 827, 828, 834, 836, 839, 847, 848, 852, 853, 858, 861, 867, 868, 876, 882, 885, 946, 947, 951, 971, 987, 993, 994, 998, 1002, 1008, 1012, 1013, 1023, 1027, 1032, 1035, 1037, 1040, 1041, 1042, 1044, 1053, 1055], "90": [44, 48, 51, 53, 67, 107, 133, 134, 150, 151, 152, 154, 170, 180, 194, 199, 210, 216, 218, 221, 226, 237, 262, 286, 288, 320, 324, 333, 337, 338, 368, 372, 385, 391, 419, 569, 787, 806, 834, 839, 891, 993, 998, 1028, 1032, 1054, 1055], "900": [46, 84, 107, 108], "9000": 237, "900000e": 237, "9010": 1045, "9012": 1047, "9015": [669, 1047], "9019": 1046, "9022": 1046, "9024": 1046, "9026666666666666": 151, "903": [46, 271], "904": [192, 275, 416], "9041": 1047, "9043": 1047, "9044": [277, 1046], "90453403": 472, "904556e": 237, "904558e": 237, "904747e": 237, "904751e": 237, "905": [145, 275, 1019], "905206": 88, "9067": 1046, "9069": 1048, "9078": 1046, "908": 998, "90809432": 134, "9085": 1047, "9087": 1053, "90885631": 87, "909": 46, "909293": 314, "909909": 151, "91": [44, 67, 85, 180, 272, 316, 337, 338, 422, 993, 1028, 1032], "910": [42, 63, 1019], "9100": 1046, "9101": [1032, 1047], "9105": 1046, "9108": 1046, "911": [289, 1019], "912": 72, "912632": 314, "913": [235, 342, 422, 565, 1019], "914370e": 237, "914387e": 237, "9144052": 51, "9145": 1046, "914538e": 237, "914573e": 237, "9147": 1047, "9149": 1045, "915": 46, "9151": 1047, "9157": 1047, "916": 83, "91629073": 596, "916555e": 237, "91666667": 367, "9167": 332, "917": 83, "917281": 151, "9173": 1018, "917618e": 237, "92": [51, 67, 84, 127, 170, 196, 275, 316, 337, 338, 348, 380, 382, 544, 546, 553, 568, 603, 702, 806, 820, 828, 993, 1032], "9206": 1046, "9219": 1046, "922": 1027, "9221": 655, "9222": 1047, "92222222": 1027, "9226260871125187": 285, "923223": 818, "92329566": 134, "9234": 1047, "9239": 1046, "924": 46, "92461872": 132, "925": [998, 1027], "9250": 1049, "92529176": 999, "9257": 1047, "9259": 1046, "926": [53, 1019], "9266666666666666": 147, "927": 443, "92708922": 1027, "9274": 1049, "9277": 1046, "9278": 1046, "928": [113, 443], "9283930699938637": 334, "9284": 1046, "928571": 237, "9288": 1049, "9289": 1046, "93": [44, 67, 173, 219, 260, 275, 338, 359, 382, 652, 653, 658, 666, 667, 668, 687, 783, 794, 806, 828, 834, 918, 993, 998, 1028, 1032], "930": [331, 1019, 1027], "9300": 277, "930000": 314, "9302": 1046, "93036212": 1027, "9304": 1047, "93192644": 1027, "932": [46, 92, 1019], "9326": 1018, "93271427": 178, "933": [46, 107, 419], "933197": 260, "933253": 151, "9333": 419, "933333": [165, 859], "934": 1027, "935": 1046, "9354": 1047, "936": [46, 443, 998], "936480": 61, "9372": 1047, "937443": 61, "937532": 61, "937597": 61, "9378": 1047, "938": [46, 215, 791, 998, 1027], "938613": 61, "939": [674, 1027], "9399": 1047, "93fletcher": 994, "93goldfarb": 994, "93lindenstrauss_lemma": 904, "93shanno_algorithm": 994, "94": [42, 67, 69, 88, 126, 147, 218, 254, 290, 320, 337, 338, 414, 422, 669, 794, 828, 993, 998, 999, 1008, 1032, 1039], "940": 42, "9400": 277, "940000": 314, "940184": 151, "940201": 61, "940374": 61, "9403917": 116, "941": 46, "94114649": [850, 851], "9416": 51, "9417": 677, "942": [250, 356, 1019], "943": 1027, "9431": 841, "944": [46, 1027], "9456": 1047, "94592424": 668, "946": 113, "947": [307, 1019], "94731329": 673, "9473684210526315": 327, "947958": 987, "948": [791, 998], "9484": 1047, "949": [46, 192, 1019], "9490": 382, "9492": 1047, "9497": 1047, "9499": 644, "95": [44, 51, 53, 67, 78, 86, 91, 101, 121, 130, 147, 151, 154, 182, 191, 198, 219, 221, 226, 237, 256, 264, 265, 268, 277, 278, 303, 311, 320, 324, 331, 338, 348, 368, 422, 533, 638, 639, 642, 653, 667, 754, 828, 907, 994, 998, 999, 1011, 1032, 1042], "950": 46, "950000047683716": 367, "9502547": 203, "9507": 1046, "9515": 1047, "951751e": 237, "951958": 987, "952": [46, 83, 96, 1019], "9521": 1047, "952289": 208, "9524": 1047, "953": [46, 83], "953061": 315, "95373": 380, "954": [886, 898], "95433992": 116, "955": [181, 298, 302, 419, 660, 1019], "9558": 1046, "955989": 987, "956": [46, 1027], "956038": 314, "9565": 382, "9569": 1047, "957": [46, 323, 734, 998], "9579": 1047, "958": 46, "9583": 414, "9584": [633, 1046], "959": [886, 898], "9593": 1046, "9595": 680, "9597": 1049, "9599": 1047, "95th": [51, 151, 154, 754], "96": [42, 51, 67, 80, 82, 96, 182, 246, 256, 275, 316, 320, 323, 324, 337, 338, 382, 419, 559, 688, 689, 717, 828, 987, 993, 998, 1008, 1039], "9600": 1046, "9604": 1046, "961": 867, "961009": 987, "961111": 165, "9612": 1047, "961904": 859, "96190476": 1001, "962": 46, "96228895": 134, "9623": 1046, "963": 1027, "9630": 681, "96362897": 1027, "9637883": 1027, "96388889": 1027, "964": [138, 1019], "9641": 1046, "9647": 1047, "965": [46, 998], "9655": 1047, "9656": 1047, "96578289": 1027, "966": 44, "9666": 549, "96681476": 1027, "966981": 208, "967": [107, 113, 998, 1002, 1019], "9677": 1046, "968": [180, 190, 275], "9681": 1047, "9686": 1047, "969": 379, "9693": 1046, "9694149248180188": 333, "9697": 1046, "97": [67, 133, 173, 194, 254, 268, 338, 348, 382, 391, 398, 419, 652, 653, 658, 664, 666, 667, 668, 687, 688, 689, 993, 999, 1008, 1039], "9701": 1047, "9707": 1047, "9711": 1046, "9717": 1046, "9723": 1047, "9726": 1047, "973": [208, 360, 419, 1019], "9731": 1047, "9733": [626, 629], "973554": 332, "973770": 208, "97435897": 367, "974e": 423, "975": [173, 190, 1013], "9750": 1046, "97545464": 260, "975455": 260, "9759": 46, "976": [43, 211, 285, 1019], "976158": 380, "977": [42, 419], "9771": 560, "9772": 1047, "9775": 1047, "977890": 267, "978": [364, 1019], "9781605585161": 415, "978444": 314, "9786": 1047, "9788": 1046, "98": [67, 76, 78, 88, 96, 98, 114, 127, 173, 246, 275, 313, 320, 338, 382, 389, 419, 422, 665, 845, 901, 993, 998, 1000, 1027, 1032], "980000": 314, "9802": 1046, "981": [173, 382, 998], "9815": 1046, "9816": 1047, "9821": 856, "983": 734, "9830": 1046, "9832": 1047, "9833": 504, "98350372e": 200, "983667": 987, "9837": 1047, "9843": 1052, "9847": 1046, "984ea3": [78, 96], "9850": 219, "9851": 1047, "9858": 1047, "98633022": 134, "986429": 315, "9865": 1046, "9866": [616, 625, 628], "9866666666666667": 147, "9868": [904, 1010], "986989": 280, "987": [285, 360], "9875": 1047, "987691452991453": 327, "98809919e": 200, "9884": 685, "9885": 677, "9886": 1047, "989341": 208, "98mb": 359, "99": [44, 46, 51, 61, 67, 78, 85, 96, 124, 237, 246, 250, 256, 262, 264, 275, 278, 318, 338, 373, 378, 382, 389, 419, 422, 423, 498, 653, 667, 677, 688, 689, 794, 828, 857, 967, 993, 998, 1008, 1012, 1028, 1034, 1041], "990": [675, 998], "9900": 237, "9907": 1048, "9908": 1047, "991": [285, 295, 998, 1019], "9915849773450223": 175, "991653": 314, "9922": 1046, "9924": 547, "99244": 547, "992766": 314, "993": [285, 334, 360, 1019], "9933333333333333": 147, "9935": 841, "993879": 314, "9939": 1047, "993919": 49, "994": 298, "9945": 1046, "995": 211, "9951": 1049, "9969977": 51, "997": [45, 74, 173], "9978": 1052, "9979": 42, "9979281": 51, "998": [90, 173, 1002, 1019], "9980": [42, 1047], "9981": 42, "998142": 51, "998273": 271, "9987": 645, "99891212e": 200, "999": [237, 271, 277, 389, 422, 723, 867, 868], "9990": 237, "9991": [670, 671, 1047], "99918858": 134, "9993": [42, 659, 661, 1047], "9994": 669, "9995": 42, "9996": 657, "999791942438998": 328, "9998": [49, 311], "9999": [49, 237, 311, 340, 504, 633, 1047], "99999": 340, "999999": [78, 96], "999999999999999e": 164, "A": [0, 1, 18, 24, 40, 52, 54, 55, 61, 63, 66, 70, 72, 73, 74, 75, 78, 79, 80, 82, 83, 87, 88, 93, 94, 95, 96, 98, 101, 108, 110, 113, 117, 122, 125, 126, 127, 131, 139, 140, 145, 146, 148, 158, 162, 164, 165, 166, 170, 172, 175, 178, 180, 182, 183, 184, 188, 191, 192, 203, 207, 220, 223, 229, 233, 234, 237, 240, 253, 256, 265, 271, 277, 278, 280, 284, 292, 295, 313, 318, 320, 323, 327, 329, 332, 338, 339, 340, 342, 348, 352, 353, 359, 360, 361, 365, 367, 368, 372, 374, 379, 380, 382, 383, 385, 387, 388, 390, 393, 397, 398, 399, 400, 402, 406, 410, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 496, 497, 498, 500, 503, 506, 507, 508, 509, 510, 514, 516, 517, 518, 519, 520, 526, 528, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 613, 614, 616, 617, 623, 626, 633, 634, 635, 636, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 710, 711, 716, 717, 718, 722, 723, 725, 727, 728, 729, 730, 731, 732, 737, 742, 743, 746, 748, 749, 750, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 770, 772, 773, 780, 781, 782, 783, 784, 787, 794, 796, 797, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 898, 899, 900, 901, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 945, 946, 947, 954, 955, 957, 958, 983, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1030, 1031, 1032, 1034, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "AND": 741, "AS": 427, "AT": [1, 380, 501], "And": [51, 188, 238, 239, 244, 253, 277, 359, 393, 409, 415, 419, 423, 536, 594, 595, 597, 698, 699, 994, 998, 1019, 1046], "As": [0, 29, 42, 45, 57, 61, 65, 74, 77, 87, 89, 91, 92, 100, 114, 117, 129, 138, 139, 145, 148, 149, 150, 152, 154, 158, 168, 171, 175, 180, 187, 191, 193, 194, 196, 198, 201, 203, 208, 210, 219, 223, 227, 237, 244, 253, 265, 271, 272, 274, 275, 277, 278, 280, 290, 297, 303, 319, 330, 335, 340, 348, 352, 360, 361, 363, 365, 366, 368, 372, 373, 380, 384, 385, 387, 389, 390, 397, 398, 399, 409, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 452, 499, 560, 568, 572, 625, 638, 661, 662, 678, 680, 693, 741, 764, 770, 852, 853, 854, 856, 858, 889, 987, 992, 994, 995, 997, 998, 999, 1001, 1005, 1008, 1012, 1013, 1014, 1017, 1018, 1022, 1023, 1027, 1030, 1032, 1039, 1045, 1050, 1055, 1057], "At": [51, 108, 138, 224, 253, 271, 289, 295, 297, 337, 340, 372, 373, 389, 400, 406, 411, 418, 422, 443, 446, 471, 594, 595, 597, 608, 838, 840, 877, 962, 987, 994, 997, 999, 1003, 1012, 1022], "Be": [170, 184, 359, 385, 417, 573, 574, 654, 660, 661, 662, 664, 665, 675, 686, 710, 824, 825, 885, 1008, 1036, 1040], "Being": [385, 399, 400, 994, 1001], "But": [42, 47, 87, 190, 220, 221, 277, 298, 318, 385, 397, 415, 418, 421, 422, 468, 752, 918, 919, 987, 998, 1013, 1018], "By": [56, 79, 124, 154, 155, 156, 198, 223, 253, 271, 286, 295, 318, 327, 333, 334, 352, 359, 373, 385, 387, 391, 392, 399, 406, 414, 415, 416, 418, 419, 420, 421, 422, 424, 444, 447, 451, 452, 456, 470, 473, 474, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 530, 555, 556, 563, 564, 565, 566, 570, 571, 591, 592, 594, 595, 597, 612, 615, 638, 639, 677, 679, 681, 683, 696, 698, 700, 703, 705, 706, 708, 709, 724, 735, 736, 740, 744, 789, 790, 793, 800, 802, 809, 810, 856, 870, 871, 883, 884, 886, 888, 898, 900, 908, 913, 914, 918, 919, 920, 921, 930, 931, 987, 988, 990, 994, 998, 1005, 1006, 1008, 1010, 1014, 1023, 1027, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1056, 1057], "For": [1, 29, 42, 46, 47, 50, 51, 52, 56, 63, 67, 71, 74, 78, 80, 82, 83, 87, 89, 91, 92, 94, 101, 106, 112, 117, 121, 125, 141, 143, 146, 151, 152, 154, 155, 157, 169, 170, 173, 175, 177, 182, 186, 187, 191, 192, 203, 207, 208, 219, 220, 223, 224, 227, 236, 237, 239, 241, 244, 246, 247, 249, 250, 251, 253, 260, 267, 271, 274, 277, 278, 284, 291, 293, 297, 298, 308, 313, 315, 316, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 348, 350, 352, 355, 359, 360, 361, 363, 364, 367, 368, 372, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 406, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 431, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 478, 480, 488, 489, 490, 491, 495, 500, 502, 504, 509, 518, 520, 521, 525, 529, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 587, 588, 589, 590, 594, 595, 597, 598, 599, 600, 603, 608, 613, 614, 615, 616, 617, 620, 625, 628, 629, 633, 634, 635, 636, 637, 638, 639, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 694, 695, 696, 698, 699, 701, 707, 710, 712, 713, 735, 736, 744, 747, 748, 769, 775, 784, 789, 790, 793, 794, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 900, 901, 902, 903, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 930, 936, 961, 982, 987, 988, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1016, 1021, 1022, 1023, 1030, 1031, 1032, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "If": [0, 42, 49, 51, 63, 67, 76, 83, 89, 104, 114, 127, 136, 146, 151, 154, 159, 184, 187, 191, 200, 219, 234, 236, 237, 253, 256, 271, 277, 284, 291, 293, 303, 311, 318, 323, 324, 348, 352, 355, 356, 359, 360, 361, 367, 368, 372, 373, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 399, 400, 403, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 436, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 520, 521, 525, 528, 529, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 717, 718, 719, 720, 722, 723, 724, 728, 732, 733, 734, 735, 736, 737, 738, 742, 744, 747, 748, 751, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 772, 773, 774, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 818, 820, 823, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 939, 945, 947, 949, 951, 955, 957, 961, 964, 967, 969, 972, 973, 979, 982, 983, 984, 985, 987, 988, 990, 992, 993, 994, 995, 996, 998, 1001, 1002, 1004, 1005, 1008, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1023, 1024, 1030, 1031, 1032, 1039, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1055, 1057], "In": [0, 6, 36, 42, 43, 45, 47, 49, 50, 51, 52, 53, 61, 62, 63, 69, 71, 73, 82, 83, 87, 89, 91, 92, 94, 100, 101, 104, 105, 107, 108, 110, 112, 113, 114, 117, 119, 120, 124, 126, 129, 131, 132, 136, 138, 141, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 159, 162, 169, 170, 172, 173, 175, 179, 180, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 203, 207, 208, 210, 214, 219, 220, 221, 222, 223, 224, 227, 236, 237, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 265, 267, 270, 271, 274, 275, 277, 278, 279, 280, 282, 283, 286, 287, 289, 291, 292, 293, 295, 298, 301, 304, 305, 307, 316, 318, 319, 320, 323, 324, 325, 327, 328, 329, 331, 332, 334, 335, 339, 341, 348, 352, 355, 359, 360, 361, 363, 367, 368, 372, 373, 374, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 397, 398, 399, 400, 402, 403, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 443, 446, 447, 448, 449, 450, 453, 454, 455, 458, 468, 469, 470, 475, 478, 481, 499, 502, 509, 514, 515, 517, 529, 540, 542, 544, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 597, 608, 612, 615, 616, 617, 636, 638, 639, 640, 642, 649, 650, 651, 653, 654, 655, 657, 659, 661, 664, 665, 667, 669, 671, 672, 674, 675, 680, 681, 682, 685, 686, 690, 691, 692, 702, 705, 709, 718, 724, 726, 732, 734, 735, 740, 741, 744, 746, 748, 760, 762, 763, 787, 789, 791, 794, 800, 802, 803, 804, 805, 806, 809, 810, 812, 820, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 857, 858, 860, 861, 862, 867, 875, 877, 883, 884, 888, 889, 891, 895, 896, 898, 899, 900, 901, 902, 903, 905, 906, 907, 910, 911, 912, 915, 918, 920, 925, 929, 931, 947, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1022, 1023, 1030, 1031, 1032, 1036, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "Ines": 1056, "It": [0, 29, 42, 45, 46, 47, 51, 57, 61, 69, 71, 74, 87, 89, 92, 105, 110, 112, 114, 124, 127, 128, 133, 138, 141, 143, 144, 147, 149, 151, 159, 173, 180, 181, 182, 186, 187, 191, 192, 193, 199, 203, 207, 208, 216, 219, 223, 233, 236, 237, 239, 240, 246, 251, 253, 256, 271, 272, 273, 275, 277, 278, 280, 283, 284, 291, 295, 298, 304, 305, 306, 308, 309, 311, 318, 322, 323, 325, 327, 333, 335, 344, 348, 352, 355, 359, 360, 361, 368, 372, 373, 374, 378, 380, 382, 383, 385, 387, 389, 390, 391, 393, 394, 397, 398, 399, 403, 406, 409, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 440, 443, 444, 447, 448, 449, 450, 451, 453, 454, 455, 458, 465, 468, 473, 474, 475, 480, 484, 491, 493, 502, 514, 521, 530, 539, 541, 542, 544, 546, 547, 555, 556, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 595, 602, 608, 612, 613, 614, 617, 620, 621, 625, 626, 628, 629, 633, 636, 637, 638, 639, 647, 648, 649, 652, 653, 656, 658, 659, 660, 661, 664, 666, 667, 668, 669, 672, 673, 674, 676, 677, 678, 680, 682, 683, 684, 687, 688, 689, 690, 693, 695, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 710, 714, 715, 716, 722, 729, 740, 748, 749, 753, 764, 765, 768, 771, 787, 789, 794, 805, 806, 808, 809, 810, 812, 818, 819, 820, 828, 829, 831, 834, 837, 846, 847, 852, 853, 854, 856, 859, 860, 861, 862, 866, 867, 868, 872, 873, 874, 878, 879, 880, 884, 887, 889, 899, 902, 903, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 934, 947, 955, 956, 969, 972, 974, 975, 976, 977, 978, 979, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1017, 1022, 1023, 1029, 1030, 1031, 1032, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "Its": [110, 275, 279, 381, 387, 399, 420, 425, 544, 993, 994, 1003, 1006, 1012, 1017, 1022, 1042, 1056], "NOT": [253, 304, 382, 388, 816, 850, 851], "Nearness": 633, "No": [60, 140, 153, 203, 211, 225, 227, 228, 253, 271, 338, 353, 355, 364, 382, 393, 403, 415, 480, 565, 566, 596, 597, 641, 651, 670, 682, 684, 691, 692, 803, 994, 1056], "Not": [89, 164, 192, 372, 397, 415, 433, 434, 437, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 475, 476, 477, 478, 479, 480, 481, 482, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 569, 572, 575, 576, 587, 588, 589, 594, 595, 597, 633, 634, 635, 636, 683, 694, 695, 696, 697, 699, 800, 803, 804, 806, 809, 810, 820, 847, 850, 851, 854, 855, 856, 858, 862, 874, 882, 885, 886, 888, 891, 902, 903, 914, 998, 1004, 1017, 1048], "OF": 382, "ON": 332, "ONE": [379, 613, 614], "OR": [318, 415, 426, 450, 1050], "Of": [47, 61, 63, 186, 291, 372, 387, 415, 423, 988], "On": [42, 50, 51, 54, 62, 101, 104, 105, 116, 117, 129, 138, 141, 143, 145, 146, 151, 155, 156, 159, 162, 168, 170, 179, 180, 191, 192, 193, 200, 207, 208, 221, 223, 247, 248, 249, 250, 252, 253, 256, 257, 258, 259, 260, 262, 264, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 284, 289, 291, 316, 318, 320, 322, 323, 324, 328, 329, 331, 332, 334, 339, 348, 355, 367, 372, 383, 386, 387, 389, 397, 399, 411, 413, 415, 419, 420, 422, 424, 425, 649, 662, 697, 741, 767, 875, 891, 987, 991, 994, 997, 998, 1000, 1004, 1006, 1011, 1013, 1027, 1030], "One": [1, 42, 47, 50, 60, 65, 83, 89, 121, 129, 131, 146, 148, 151, 154, 155, 188, 191, 194, 197, 223, 228, 234, 246, 257, 267, 271, 277, 284, 287, 295, 304, 307, 319, 334, 343, 345, 356, 360, 372, 382, 385, 398, 399, 409, 414, 415, 418, 420, 421, 422, 423, 424, 426, 450, 455, 478, 480, 484, 518, 572, 637, 645, 664, 672, 674, 679, 681, 682, 683, 794, 813, 814, 838, 839, 840, 871, 872, 883, 914, 961, 988, 990, 994, 995, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1008, 1013, 1019, 1020, 1034, 1043, 1045, 1052, 1054], "Or": [359, 367, 419, 420, 883, 998, 1004, 1012], "Such": [52, 155, 175, 180, 190, 198, 203, 208, 220, 271, 280, 359, 399, 400, 409, 419, 420, 422, 561, 562, 662, 988, 998, 1001, 1008, 1014, 1030, 1049, 1054, 1056], "THE": 382, "That": [51, 63, 124, 138, 154, 173, 191, 208, 246, 277, 281, 360, 361, 373, 379, 393, 399, 414, 419, 424, 425, 449, 452, 453, 563, 570, 599, 824, 918, 919, 987, 995, 996, 1004, 1014, 1048, 1049], "The": [1, 15, 24, 26, 29, 30, 32, 36, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 62, 63, 65, 66, 67, 69, 71, 73, 74, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 91, 92, 94, 95, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 118, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 227, 228, 236, 237, 238, 241, 242, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 267, 268, 270, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 345, 346, 348, 352, 353, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 397, 398, 399, 400, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 758, 759, 760, 761, 762, 763, 764, 765, 768, 770, 771, 772, 773, 776, 777, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 941, 942, 943, 944, 945, 946, 947, 949, 950, 954, 955, 958, 961, 963, 964, 965, 967, 968, 969, 972, 980, 981, 982, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "Their": [191, 380, 382, 400, 415, 650, 1039], "Then": [104, 139, 143, 146, 154, 159, 162, 170, 191, 196, 203, 207, 219, 223, 243, 247, 253, 259, 271, 279, 280, 295, 359, 379, 389, 391, 393, 403, 412, 413, 415, 418, 420, 423, 424, 576, 599, 725, 762, 806, 820, 910, 911, 988, 997, 998, 1004, 1013, 1032, 1048], "There": [73, 80, 144, 175, 237, 243, 253, 268, 272, 274, 277, 297, 359, 378, 380, 382, 385, 386, 387, 390, 397, 399, 400, 403, 412, 415, 420, 422, 423, 424, 452, 458, 468, 540, 559, 560, 565, 566, 594, 595, 597, 612, 651, 988, 994, 995, 996, 997, 998, 1001, 1005, 1008, 1012, 1013, 1014, 1016, 1021, 1031, 1039, 1047], "These": [10, 17, 24, 31, 37, 42, 43, 45, 63, 85, 124, 126, 143, 147, 188, 192, 208, 219, 220, 221, 247, 271, 284, 295, 298, 302, 316, 318, 325, 326, 331, 338, 340, 368, 372, 373, 378, 381, 382, 385, 387, 389, 392, 394, 397, 399, 403, 406, 409, 412, 413, 414, 415, 418, 420, 422, 423, 424, 425, 448, 452, 454, 504, 514, 515, 521, 544, 573, 574, 608, 609, 674, 682, 683, 705, 712, 739, 784, 800, 806, 809, 810, 812, 820, 829, 831, 832, 833, 834, 835, 837, 855, 856, 875, 987, 989, 992, 994, 995, 998, 999, 1009, 1011, 1013, 1017, 1023, 1027, 1032, 1039, 1045, 1047, 1048, 1049, 1052, 1056], "To": [42, 46, 62, 63, 67, 80, 89, 91, 110, 112, 114, 117, 129, 138, 148, 151, 152, 161, 164, 173, 180, 181, 184, 186, 187, 190, 191, 196, 200, 203, 207, 219, 220, 221, 223, 227, 237, 250, 251, 253, 256, 258, 260, 267, 271, 272, 274, 275, 277, 279, 280, 282, 284, 291, 295, 297, 315, 318, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 357, 360, 363, 368, 372, 373, 378, 379, 383, 385, 386, 387, 389, 390, 391, 393, 397, 399, 400, 403, 409, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 452, 454, 455, 456, 467, 470, 473, 498, 502, 508, 509, 513, 514, 515, 537, 543, 544, 545, 547, 549, 550, 551, 552, 563, 564, 565, 566, 570, 571, 575, 603, 617, 633, 638, 652, 653, 658, 659, 662, 664, 665, 666, 667, 668, 669, 690, 706, 718, 734, 769, 791, 799, 809, 810, 832, 839, 870, 881, 886, 900, 901, 910, 911, 915, 918, 919, 920, 921, 937, 947, 985, 987, 988, 990, 993, 994, 995, 996, 998, 999, 1000, 1001, 1004, 1005, 1008, 1012, 1013, 1014, 1022, 1023, 1027, 1029, 1030, 1032, 1039, 1042, 1044, 1045, 1046, 1048, 1050], "Will": [385, 503, 540, 633, 650, 651, 652, 658, 662, 663, 666, 667, 668, 669, 670, 671, 679, 681, 713, 720, 794, 875, 879, 889, 890, 1042, 1043, 1045, 1047, 1057], "Willing": [1045, 1046], "With": [60, 69, 78, 101, 108, 120, 129, 154, 156, 169, 188, 192, 219, 221, 245, 247, 252, 254, 260, 277, 302, 372, 380, 383, 385, 387, 399, 406, 415, 416, 419, 422, 424, 443, 445, 507, 547, 588, 638, 639, 664, 868, 871, 873, 884, 890, 891, 917, 919, 991, 994, 995, 998, 999, 1001, 1002, 1005, 1012, 1014, 1019, 1023, 1024, 1031, 1036, 1042, 1046, 1047, 1049, 1051, 1053], "_": [42, 43, 45, 46, 47, 49, 50, 51, 53, 57, 61, 62, 63, 65, 67, 68, 74, 77, 84, 87, 89, 92, 97, 101, 103, 114, 120, 122, 124, 129, 131, 133, 141, 142, 143, 154, 168, 175, 180, 181, 182, 190, 191, 192, 194, 196, 198, 202, 203, 204, 206, 207, 208, 211, 216, 217, 219, 221, 223, 232, 233, 236, 240, 243, 247, 252, 256, 260, 271, 272, 277, 279, 280, 281, 283, 284, 286, 291, 295, 301, 306, 309, 316, 320, 323, 324, 325, 328, 331, 332, 333, 335, 338, 339, 347, 352, 355, 359, 361, 364, 387, 391, 399, 420, 422, 423, 427, 452, 484, 538, 539, 540, 541, 542, 544, 545, 546, 549, 551, 552, 553, 572, 603, 652, 653, 658, 659, 666, 667, 668, 669, 687, 688, 689, 690, 694, 695, 696, 697, 699, 701, 702, 704, 706, 716, 770, 806, 812, 820, 829, 854, 862, 883, 884, 891, 988, 994, 995, 998, 1000, 1001, 1002, 1005, 1006, 1008, 1013, 1014, 1030, 1031, 1046], "_0": [218, 691, 994, 998, 1013], "_1": [330, 352, 417, 420, 423, 537, 543, 544, 546, 551, 552, 553, 652, 653, 658, 659, 660, 661, 662, 666, 667, 668, 669, 687, 688, 689, 690, 772, 994, 996, 998, 1013], "_11": 658, "_2": [113, 180, 352, 420, 423, 537, 543, 551, 552, 652, 658, 994, 1002, 1012, 1013], "_21": [652, 653, 658, 659, 666, 667, 668, 669, 687, 690], "__": [106, 278, 399, 416, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 1028, 1047, 1048], "______________________________________________________________________": 338, "________________________________________________________________________________": [49, 88, 359], "__________________________________________________________________________________": 92, "________________________________________________________ward_tre": 88, "_____________________________________________________f_regress": 88, "__add__": [425, 630], "__array__": [1042, 1049], "__array_function__": [1018, 1049], "__c": 387, "__call__": [183, 348, 399, 423, 425, 472, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 937, 964, 1046], "__class__": [186, 219, 221, 253, 256, 279, 320, 359, 360, 361, 392], "__class_weight": 387, "__dataframe__": [567, 568], "__doc__": [77, 108, 180, 265, 399], "__file__": [46, 48, 1052], "__getattr__": 387, "__getitem__": 1057, "__getstate__": [1046, 1054], "__init__": [46, 90, 136, 183, 253, 298, 348, 385, 387, 389, 390, 391, 392, 399, 423, 429, 432, 435, 438, 439, 624, 959, 1040, 1045, 1047, 1052, 1053, 1054, 1055], "__init_subclass__": 387, "__len__": 1048, "__main__": [341, 397], "__metadata_request__fit": 253, "__mul__": 627, "__mul___": 425, "__name__": [45, 61, 95, 186, 219, 221, 253, 256, 260, 272, 279, 320, 341, 359, 360, 361, 392, 397, 883], "__pow__": [425, 622], "__repr__": [387, 1018, 1048], "__sklearn_clone__": [387, 440, 1055], "__sklearn_is_fitted__": [46, 90, 135, 183, 188, 253, 298, 387, 429, 432, 982, 1019, 1052, 1053], "__version__": 389, "_agglom": 88, "_array_api": 411, "_bag": 939, "_base": [263, 387], "_basehmm": 1039, "_bay": 939, "_birch": 1049, "_breast_cancer_dataset": 173, "_build": 385, "_c_step": 1046, "_cfnode": 448, "_check_bounds_param": 1051, "_check_param_grid": 1045, "_check_sample_weight": 1052, "_check_stop_list": 597, "_check_target": 1046, "_check_x": 1049, "_class": 998, "_class_cov": 1047, "_class_mean": 1047, "_classif": 316, "_classifier_ha": 90, "_column_transform": [104, 159], "_compon": [250, 542], "_coo": [591, 592], "_count_nonzero_coeffici": 45, "_criterion": 1047, "_csr": 883, "_cython_bla": 386, "_devianc": 998, "_diabetes_dataset": 173, "_distn_infrastructur": 289, "_doc_link_modul": 387, "_doc_link_templ": 387, "_doc_link_url_param_gener": 387, "_dotbla": 391, "_encod": 1047, "_error": 998, "_estimator_html_repr": 943, "_estimator_typ": [387, 399, 432, 433, 434, 437, 438, 1044], "_estimator_with_converted_arrai": 411, "_f": [183, 994], "_featur": [420, 544, 546, 553], "_fit_and_scor": 1047, "_fit_stag": [565, 566], "_fro": [537, 543, 551, 552, 652, 653, 658, 666, 667, 668, 687], "_g": 183, "_gb": 1049, "_generate_center_coordin": 52, "_get_support_mask": 607, "_get_tag": [387, 1050], "_get_warnings_filters_info_list": 373, "_gpr": 184, "_h": [544, 546, 553], "_hist_gradient_boost": 389, "_i": [413, 422, 989, 994, 998, 1002, 1013], "_idx": 399, "_init": 199, "_init_t": 1012, "_initialize_nmf": 391, "_is_fit": 136, "_iter": 389, "_j": [413, 989], "_k": [417, 992, 994], "_l": 998, "_learntselectormixin": 1044, "_level": [425, 631], "_lfw": 1028, "_logist": 385, "_loss": [399, 998], "_m": 1014, "_mean": 324, "_mean_frequency_by_risk_group": 219, "_method": 958, "_more_tag": 387, "_my": 385, "_n": [423, 998], "_n_cluster": 385, "_n_compon": 553, "_n_features_out": 431, "_name_estim": 1049, "_neg": 391, "_newton_cg": 1050, "_nls_subproblem": 391, "_nmf": 391, "_not_in_sphinx": [46, 48], "_num_thread": 373, "_obj": 958, "_openmp_help": 386, "_pairwis": [1049, 1051], "_pairwise_cal": 634, "_plain_sgd": 1054, "_plot": 337, "_po": 391, "_posterior_mod": 616, "_preprocess_data": 693, "_pvalu": 1039, "_rand": 368, "_ratio": [544, 546, 553], "_request": [253, 406, 1057], "_required_paramet": [387, 435], "_reset": 46, "_run_search": 1047, "_safe_index": [1, 1052, 1056, 1057], "_safe_split": 387, "_safe_tag": 1050, "_sag": 1048, "_sampl": [250, 420, 544, 546, 553], "_samples_gener": 265, "_score": [399, 806, 820, 833, 998, 1039, 1052], "_search": 1045, "_serial": 253, "_sgd_fast": 1054, "_skip_test": 387, "_spars": 391, "_sparse_fit": 1049, "_split": 272, "_std": 324, "_t": 1012, "_test": [227, 320, 373, 387, 1052], "_test_scor": [277, 478, 600, 1052], "_transform_select": 1045, "_tree": [918, 919, 920, 921, 1040, 1042], "_typedef": 386, "_univariate_select": 88, "_valu": [425, 619], "_w": [544, 546, 553], "_weight": [52, 237], "_weight_boost": 939, "_weighted_percentil": 1052, "_x_is_even": 959, "_xfail_check": 387, "a16": [1049, 1050], "a65628": [78, 96], "a674e682c281": 390, "a_": [125, 412, 415, 544, 546, 553, 994, 1031], "a_column": 725, "a_i": 415, "a_mask": 286, "a_n": 412, "a_row": 725, "a_tru": 286, "aaa": 183, "aaaaff": [303, 306], "aaai": [415, 426, 450, 845, 1000], "aact": 183, "aaffaa": 306, "aagaard": 1043, "aakanksha": 1047, "aapl": 50, "aarch64": 393, "aaron": [500, 994, 1042, 1043, 1044, 1049], "aarshai": [1046, 1047], "aashil": 1046, "ab": [50, 54, 74, 108, 128, 134, 140, 148, 159, 169, 173, 194, 206, 210, 230, 232, 235, 237, 242, 277, 318, 335, 346, 357, 415, 544, 546, 553, 633, 752, 850, 851, 885, 998], "ab_mask": 286, "abadi": [1045, 1046], "abandon": 385, "abati": [1054, 1056, 1057, 1058], "abbi": [1049, 1050], "abbrevi": 705, "abdela": 1048, "abdulaziz": 1057, "abdulelah": 1052, "abdur": 1049, "abenbihi": 1049, "abhijeet": 1041, "abhinav": [1049, 1052], "abhishek": [1042, 1043, 1049, 1053, 1055, 1056], "abhyudai": 1046, "abi": 389, "abid": 385, "abil": [47, 51, 95, 112, 151, 174, 175, 176, 180, 182, 184, 186, 188, 190, 191, 193, 219, 223, 237, 246, 359, 374, 403, 422, 423, 425, 617, 628, 631, 788, 789, 790, 793, 794, 995, 998, 1001, 1004, 1014, 1018, 1019, 1039, 1041, 1046, 1048, 1052, 1053], "abirami": 415, "abl": [42, 43, 47, 60, 81, 89, 95, 114, 117, 128, 129, 154, 156, 181, 191, 194, 203, 208, 219, 235, 237, 243, 283, 288, 334, 335, 348, 368, 372, 373, 374, 379, 383, 385, 387, 389, 390, 397, 409, 415, 417, 419, 423, 491, 509, 540, 835, 882, 987, 988, 994, 997, 998, 999, 1004, 1008, 1011, 1014, 1015, 1018, 1023, 1031, 1032, 1045, 1046, 1050, 1057], "ablin": 1054, "abnorm": [233, 246, 304, 347, 380, 498, 569, 856, 1004, 1047], "abnormal_termination_in_lnsrch": 184, "abo7atm": 1051, "abort": 698, "about": [2, 45, 49, 64, 78, 87, 91, 96, 103, 117, 119, 147, 170, 184, 188, 190, 194, 223, 236, 246, 253, 271, 274, 275, 277, 279, 284, 297, 303, 323, 327, 329, 330, 331, 332, 333, 338, 359, 361, 367, 368, 372, 373, 378, 380, 384, 385, 389, 390, 391, 393, 398, 399, 400, 409, 414, 419, 420, 423, 425, 444, 498, 500, 501, 502, 503, 506, 507, 508, 510, 511, 516, 521, 567, 568, 599, 600, 613, 614, 620, 646, 682, 684, 749, 806, 812, 820, 829, 839, 889, 931, 988, 994, 995, 997, 999, 1001, 1004, 1005, 1008, 1009, 1011, 1013, 1014, 1017, 1021, 1022, 1023, 1024, 1030, 1032, 1044, 1045, 1055, 1057], "abov": [42, 61, 62, 63, 71, 78, 100, 103, 140, 143, 144, 151, 154, 162, 172, 173, 191, 192, 205, 219, 221, 225, 230, 250, 253, 254, 271, 277, 283, 295, 303, 320, 323, 324, 328, 330, 334, 352, 360, 361, 367, 368, 372, 373, 374, 379, 380, 382, 383, 384, 385, 387, 389, 391, 397, 399, 400, 413, 415, 416, 417, 419, 420, 421, 422, 423, 425, 447, 451, 470, 473, 495, 501, 502, 503, 529, 596, 640, 710, 761, 806, 810, 818, 820, 831, 873, 874, 887, 893, 899, 907, 961, 987, 988, 990, 992, 994, 995, 998, 1001, 1003, 1005, 1008, 1012, 1013, 1014, 1018, 1023, 1024, 1030, 1031, 1032, 1045, 1057], "abraham": [1039, 1040, 1045, 1049], "abrahamowicz": 1008, "absenc": [246, 280, 399, 718, 873, 997, 998], "absent": [399, 423, 735, 760, 831], "absgrad": 1050, "absher": 1041, "absolut": [1, 42, 51, 108, 128, 148, 173, 191, 219, 221, 225, 237, 335, 387, 409, 415, 417, 419, 420, 422, 423, 424, 425, 426, 450, 456, 462, 463, 537, 543, 548, 551, 552, 554, 555, 556, 564, 566, 567, 568, 571, 594, 596, 597, 599, 603, 608, 625, 633, 638, 652, 655, 656, 658, 660, 662, 677, 678, 680, 682, 684, 688, 689, 710, 723, 727, 742, 743, 751, 752, 754, 759, 761, 763, 801, 808, 812, 823, 826, 834, 836, 848, 850, 851, 855, 874, 879, 882, 895, 919, 921, 984, 994, 995, 1008, 1012, 1014, 1030, 1031, 1040, 1045, 1050, 1051, 1052, 1053, 1056], "absolute_error": [51, 422, 564, 566, 568, 571, 677, 919, 921, 1052], "absolute_loss": 1052, "absolutelynowarranti": 1047, "absp": 866, "abstain": 540, "abstract": [399, 420, 425, 624, 775, 1017, 1039], "abstractmethod": 1049, "absurd": 1005, "abund": 380, "ac": [256, 536, 670, 691, 692, 994, 1011, 1032], "acad": [695, 699, 995], "academ": [419, 1022], "academi": [112, 857], "acategorypredict": 1025, "acc": 150, "acc_clf1": 68, "acc_clf2": 68, "acc_clf3": 68, "acc_histori": 46, "acc_knn": 307, "acceler": [251, 332, 372, 397, 411, 415, 474, 698, 908, 995, 1017, 1022, 1048, 1052, 1054, 1056], "accent": [356, 594, 595, 597, 1049], "accept": [173, 175, 253, 271, 274, 327, 335, 348, 359, 361, 368, 372, 373, 379, 385, 387, 394, 397, 398, 399, 400, 406, 411, 415, 423, 443, 447, 450, 451, 454, 467, 470, 473, 514, 515, 561, 562, 567, 568, 575, 576, 587, 588, 599, 600, 603, 634, 641, 645, 649, 652, 653, 658, 659, 685, 733, 748, 784, 803, 804, 805, 809, 810, 828, 852, 853, 860, 861, 870, 874, 928, 930, 931, 934, 994, 996, 998, 1001, 1006, 1008, 1013, 1017, 1018, 1027, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "accept_large_spars": [930, 931, 1047], "accept_spars": [874, 930, 931, 1046, 1056], "access": [42, 83, 110, 149, 256, 263, 268, 334, 335, 359, 367, 372, 373, 385, 386, 387, 393, 397, 399, 400, 411, 415, 417, 418, 422, 423, 425, 456, 463, 470, 473, 542, 573, 574, 575, 576, 623, 868, 869, 870, 925, 987, 994, 997, 998, 1004, 1005, 1006, 1012, 1013, 1018, 1022, 1023, 1031, 1032, 1039, 1041, 1045, 1046, 1047, 1048, 1051, 1053, 1054, 1055], "accid": [219, 237], "accident": [1039, 1043, 1048], "accommod": [180, 1047], "accompani": [277, 1047], "accomplish": [253, 387, 413, 552, 995, 999, 1001, 1022, 1056], "accord": [1, 54, 60, 62, 71, 83, 110, 144, 150, 173, 176, 202, 219, 237, 250, 327, 352, 360, 368, 385, 387, 397, 398, 399, 400, 409, 412, 413, 415, 417, 419, 420, 422, 423, 425, 443, 456, 458, 462, 466, 468, 471, 475, 510, 522, 523, 524, 531, 536, 538, 541, 542, 544, 546, 556, 559, 560, 567, 568, 569, 572, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 647, 648, 650, 651, 655, 664, 665, 676, 686, 697, 701, 741, 785, 786, 806, 807, 808, 809, 810, 813, 814, 815, 820, 831, 845, 846, 847, 848, 849, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 873, 880, 888, 900, 902, 903, 910, 911, 912, 913, 915, 916, 992, 994, 998, 1000, 1001, 1008, 1011, 1012, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "accordingli": [154, 192, 256, 352, 385, 389, 390, 1046, 1047, 1054], "account": [51, 52, 89, 126, 132, 138, 154, 180, 186, 191, 237, 253, 271, 277, 301, 307, 355, 357, 360, 372, 381, 385, 399, 400, 406, 415, 418, 419, 420, 422, 423, 469, 567, 568, 573, 574, 633, 634, 636, 638, 639, 655, 679, 685, 710, 713, 734, 735, 736, 744, 749, 762, 789, 790, 793, 794, 807, 811, 824, 884, 990, 992, 996, 998, 999, 1000, 1001, 1008, 1012, 1014, 1044, 1046, 1047, 1048, 1051, 1052, 1054, 1056, 1057], "acctactagaagtt": 397, "acctcctagaag": 397, "accumul": [46, 84, 145, 146, 208, 389, 391, 415, 423, 998, 1040, 1047], "accur": [42, 47, 51, 58, 61, 62, 112, 124, 153, 175, 182, 191, 192, 223, 234, 237, 277, 284, 288, 295, 331, 359, 360, 368, 384, 399, 413, 415, 417, 420, 422, 423, 424, 443, 449, 453, 457, 459, 465, 537, 544, 546, 548, 549, 551, 552, 553, 613, 614, 640, 809, 810, 850, 851, 946, 947, 990, 995, 998, 1014, 1053], "accuraci": [1, 29, 36, 42, 44, 45, 46, 61, 65, 66, 67, 68, 103, 104, 105, 106, 138, 144, 145, 149, 150, 157, 169, 170, 172, 176, 194, 196, 219, 223, 227, 234, 235, 264, 271, 275, 276, 277, 278, 279, 281, 283, 291, 293, 295, 300, 306, 307, 308, 316, 320, 323, 333, 337, 338, 340, 348, 351, 352, 355, 368, 372, 387, 398, 399, 414, 415, 419, 422, 423, 424, 432, 443, 455, 475, 477, 478, 484, 538, 540, 547, 555, 556, 557, 559, 561, 563, 564, 565, 567, 570, 571, 573, 575, 616, 640, 664, 665, 672, 674, 677, 680, 681, 682, 698, 703, 709, 714, 717, 719, 724, 738, 739, 740, 744, 749, 760, 769, 793, 800, 802, 805, 828, 834, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 852, 857, 859, 860, 867, 905, 906, 910, 912, 915, 918, 920, 946, 947, 987, 992, 993, 994, 995, 999, 1001, 1002, 1006, 1010, 1012, 1014, 1027, 1032, 1047, 1048, 1057], "accuracy_histori": 46, "accuracy_scor": [1, 65, 138, 176, 281, 323, 340, 359, 368, 398, 406, 411, 432, 563, 570, 714, 735, 736, 740, 744, 789, 790, 793, 800, 802, 940, 987, 998, 1040, 1041, 1042, 1051, 1056], "acf": 148, "achar": [1046, 1047, 1048, 1049], "achiev": [42, 50, 54, 56, 63, 66, 127, 138, 147, 149, 154, 157, 183, 196, 219, 227, 274, 277, 284, 323, 335, 340, 348, 351, 352, 355, 359, 368, 372, 374, 379, 380, 382, 387, 391, 397, 399, 412, 413, 414, 415, 419, 420, 422, 423, 559, 564, 571, 646, 655, 682, 684, 713, 735, 736, 744, 746, 769, 789, 790, 793, 809, 810, 846, 890, 987, 988, 990, 994, 998, 1008, 1011, 1013, 1032, 1052], "achin": 1022, "achliopta": [250, 903, 904, 1010], "acid": [323, 382], "acknowledg": [384, 615, 1056], "acl": [907, 1011, 1012], "acm": [379, 380, 415, 426, 450, 456, 463, 466, 517, 569, 682, 732, 762, 856, 998, 1001, 1004, 1010], "acoust": 998, "acq": 46, "acquaint": 385, "acquir": [52, 146, 279, 1051], "acquisit": [412, 725], "acronym": 389, "across": [0, 1, 14, 42, 51, 89, 95, 101, 116, 120, 144, 164, 191, 208, 213, 240, 272, 274, 277, 291, 298, 318, 323, 352, 386, 387, 394, 399, 409, 415, 419, 422, 423, 424, 427, 443, 446, 456, 458, 460, 463, 466, 468, 475, 478, 480, 494, 497, 498, 501, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 573, 574, 594, 597, 600, 608, 613, 614, 616, 617, 638, 639, 640, 645, 646, 647, 648, 652, 653, 656, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 682, 684, 685, 691, 692, 695, 696, 697, 698, 699, 700, 701, 710, 711, 723, 737, 763, 794, 799, 801, 803, 804, 806, 807, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 855, 859, 866, 867, 868, 875, 879, 880, 887, 888, 890, 891, 899, 902, 903, 905, 906, 910, 911, 912, 915, 918, 919, 946, 947, 969, 972, 987, 994, 996, 998, 1008, 1012, 1014, 1018, 1022, 1032, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1057], "act": [348, 359, 385, 398, 421, 422, 719, 735, 736, 744, 789, 790, 793, 885, 889, 995, 998, 1001, 1013, 1047], "action": [330, 359, 384, 388, 389, 403, 414, 1008, 1049], "activ": [0, 67, 188, 227, 262, 268, 278, 336, 337, 361, 379, 380, 383, 385, 386, 391, 393, 397, 399, 400, 403, 406, 416, 502, 508, 532, 638, 641, 643, 656, 657, 659, 660, 661, 669, 670, 671, 688, 689, 690, 691, 692, 719, 724, 803, 866, 867, 868, 906, 964, 994, 995, 996, 997, 1001, 1002, 1003, 1011, 1019, 1021, 1050], "active_": [656, 657, 660, 661], "active_features_": 1047, "actual": [42, 51, 63, 80, 94, 108, 117, 144, 154, 173, 191, 196, 208, 219, 223, 227, 264, 273, 280, 361, 368, 372, 374, 382, 385, 387, 390, 391, 397, 398, 399, 413, 415, 420, 422, 423, 424, 440, 515, 521, 522, 533, 541, 544, 546, 553, 568, 569, 650, 651, 654, 664, 665, 672, 673, 674, 675, 676, 678, 680, 682, 683, 684, 686, 693, 697, 701, 707, 710, 715, 721, 727, 728, 729, 730, 791, 803, 809, 810, 825, 826, 856, 887, 910, 916, 938, 939, 940, 973, 990, 997, 998, 1001, 1005, 1006, 1021, 1046, 1047, 1053, 1054, 1055], "actual_vs_predict": [42, 108, 159, 191, 273, 332, 707], "actuari": 413, "ad": [42, 52, 57, 108, 131, 133, 138, 144, 154, 169, 175, 181, 182, 198, 203, 221, 223, 243, 252, 253, 277, 278, 279, 318, 328, 329, 330, 331, 332, 333, 334, 335, 341, 352, 360, 384, 385, 387, 389, 391, 397, 399, 400, 420, 422, 423, 424, 425, 426, 427, 433, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 516, 518, 520, 528, 529, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 710, 714, 719, 720, 724, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 740, 745, 746, 747, 748, 749, 752, 759, 760, 763, 767, 772, 773, 775, 781, 783, 784, 788, 789, 790, 791, 793, 795, 796, 797, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 819, 820, 824, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 899, 900, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 928, 930, 931, 937, 941, 942, 946, 947, 954, 955, 956, 957, 958, 961, 964, 968, 973, 979, 985, 987, 991, 993, 994, 995, 999, 1001, 1002, 1004, 1018, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "adaboost": [1, 66, 121, 137, 141, 147, 155, 158, 159, 162, 178, 188, 365, 366, 525, 557, 559, 560, 565, 637, 709, 836, 918, 919, 1019, 1020, 1034, 1041], "adaboost_clf": 138, "adaboostclassifi": [1, 66, 140, 147, 406, 422, 560, 565, 567, 939, 1041, 1042, 1045, 1046, 1048, 1049, 1052, 1054, 1055, 1056], "adaboostregressor": [1, 139, 406, 422, 559, 568, 939, 1041, 1042, 1045, 1048, 1049, 1052, 1054, 1055], "adagrad": 1017, "adam": [297, 314, 867, 868, 1002, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "adamgonzo": 1053, "adamson": 1051, "adanhawth": [1047, 1048], "adapt": [87, 89, 138, 150, 151, 178, 262, 263, 271, 320, 352, 373, 383, 384, 385, 394, 415, 422, 425, 521, 522, 523, 524, 682, 683, 684, 867, 868, 994, 1000, 1002, 1008, 1012, 1017, 1018, 1047, 1048, 1055, 1056], "adarsh": [1056, 1057], "add": [43, 50, 51, 54, 57, 61, 62, 63, 67, 68, 74, 78, 88, 108, 112, 113, 117, 125, 147, 150, 169, 171, 173, 175, 180, 181, 182, 186, 187, 201, 208, 214, 220, 222, 223, 234, 242, 246, 250, 252, 253, 284, 286, 287, 298, 310, 320, 322, 327, 329, 330, 351, 352, 354, 355, 360, 372, 383, 384, 385, 386, 387, 389, 391, 393, 399, 403, 411, 413, 419, 422, 423, 424, 521, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 608, 633, 634, 636, 638, 664, 665, 700, 703, 827, 850, 851, 907, 937, 955, 956, 987, 988, 997, 1004, 1008, 1011, 1012, 1018, 1031, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "add_2d_scatt": 239, "add_artist": [69, 240, 262, 263, 264, 267, 268], "add_ax": [192, 243, 288], "add_categori": 256, "add_collect": [50, 242, 249], "add_dummy_featur": 1, "add_ind": [159, 187, 633, 634, 636, 988, 1048, 1051, 1055], "add_missing_valu": 187, "add_nois": 181, "add_self_request": [253, 955], "add_subplot": [45, 61, 63, 76, 79, 98, 101, 120, 130, 192, 216, 234, 241, 243, 337, 338, 392, 1031], "add_trac": 144, "adddatapointbatch": 298, "addep": 1050, "addison": [596, 736], "addit": [1, 6, 36, 42, 43, 45, 50, 52, 53, 100, 104, 114, 120, 124, 127, 138, 142, 144, 145, 148, 149, 172, 180, 181, 182, 187, 191, 192, 198, 203, 208, 220, 221, 223, 243, 257, 271, 279, 286, 292, 297, 318, 328, 329, 334, 339, 352, 361, 365, 368, 372, 373, 377, 378, 379, 380, 381, 383, 384, 385, 387, 390, 391, 393, 397, 398, 399, 400, 403, 409, 414, 415, 417, 419, 420, 423, 424, 425, 426, 439, 447, 448, 450, 451, 452, 456, 463, 475, 480, 502, 509, 538, 540, 542, 543, 545, 547, 548, 549, 555, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 618, 625, 634, 636, 637, 641, 644, 645, 646, 647, 648, 649, 650, 651, 676, 693, 694, 698, 704, 705, 708, 748, 764, 765, 794, 798, 803, 804, 812, 829, 839, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 892, 902, 903, 910, 911, 941, 947, 987, 992, 994, 998, 999, 1001, 1002, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1023, 1034, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "addition": [87, 105, 140, 154, 191, 219, 237, 253, 328, 330, 360, 385, 397, 413, 423, 616, 617, 652, 658, 677, 887, 987, 988, 998, 1006, 1017, 1045, 1056], "additional_nois": 74, "additive_chi2": [626, 644, 771, 780], "additive_chi2_kernel": [1, 644, 765, 771, 990], "additivechi2sampl": [1, 645, 646, 647, 648, 764, 765, 990, 1053, 1055], "address": [42, 82, 223, 253, 359, 380, 385, 414, 415, 423, 453, 663, 994, 995, 1000, 1001, 1002, 1003, 1004, 1008, 1022, 1030, 1047], "adelr": 1047, "adequ": [373, 391, 573, 1023, 1052], "adher": [1, 372, 387, 399, 941, 942, 1039, 1040], "adien": 1055, "adijohar": 1053, "adil": 1054, "adimension": 191, "adithya": 1044, "aditya": [1045, 1047, 1048, 1049, 1053, 1054], "adityadaflapurkar": 1047, "adjac": [415, 420, 458, 468, 591, 592, 641, 697, 701, 952, 995, 1001, 1031], "adjacency_matrix": 415, "adjust": [1, 42, 47, 54, 70, 72, 83, 92, 110, 138, 151, 168, 188, 223, 246, 251, 259, 278, 295, 327, 341, 355, 360, 392, 415, 416, 420, 422, 423, 530, 559, 560, 563, 565, 567, 568, 570, 664, 665, 672, 674, 680, 681, 682, 710, 711, 714, 720, 721, 761, 763, 792, 801, 845, 846, 848, 849, 880, 902, 903, 910, 911, 912, 915, 918, 920, 936, 997, 998, 1002, 1008, 1019, 1030, 1036, 1039, 1045, 1055], "adjusted_mutual_info_scor": [1, 71, 72, 83, 92, 415, 711, 721, 739, 761, 763, 792, 998, 1039, 1047, 1051, 1055], "adjusted_rand_index": 711, "adjusted_rand_scor": [1, 71, 72, 83, 92, 360, 415, 710, 721, 739, 763, 792, 998, 1052], "administr": 403, "admir": [1054, 1055], "admiss": [250, 373], "adopt": [387, 397, 399, 906, 998, 1012, 1047, 1054, 1056], "adoublet": [1054, 1055], "adpot": 333, "adrian": [1052, 1053, 1054], "adrien": 1039, "adrin": [0, 99, 356, 400, 404, 409, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "adrinjalali": [1042, 1051], "adult": [334, 502, 1008], "advanc": [43, 156, 188, 192, 245, 247, 277, 297, 374, 415, 420, 495, 507, 541, 638, 645, 789, 803, 859, 868, 871, 890, 919, 990, 998, 1001, 1008, 1019, 1022, 1036, 1041], "advani": 1051, "advantag": [42, 43, 73, 89, 91, 124, 129, 152, 219, 220, 246, 263, 278, 297, 331, 335, 368, 399, 413, 419, 420, 423, 425, 447, 451, 466, 540, 595, 655, 680, 681, 769, 838, 839, 840, 870, 871, 910, 911, 912, 913, 914, 915, 916, 987, 990, 993, 994, 995, 998, 999, 1001, 1002, 1006, 1008, 1012, 1013, 1014, 1042], "advic": [393, 425, 628, 629], "advik": [1056, 1057], "advis": [51, 220, 253, 368, 383, 385, 415, 423, 443, 652, 658, 660, 666, 668, 678, 693, 990, 994, 1000, 1002, 1013, 1053], "advoc": 999, "aeberhard": 382, "aesthet": [318, 1014, 1044], "af": 72, "affan": 1045, "affanv14": 1046, "affect": [45, 61, 112, 154, 182, 190, 191, 223, 243, 256, 257, 280, 287, 323, 333, 368, 372, 373, 374, 381, 399, 402, 413, 415, 418, 419, 421, 423, 426, 428, 450, 456, 463, 479, 481, 485, 555, 556, 575, 705, 718, 794, 806, 809, 810, 811, 820, 824, 825, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 890, 891, 901, 915, 997, 1001, 1013, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "affili": 380, "affin": [1, 26, 70, 71, 78, 83, 97, 98, 188, 318, 339, 377, 387, 399, 420, 446, 447, 458, 460, 468, 518, 541, 697, 701, 710, 711, 723, 743, 799, 801, 906, 992, 995, 998, 1019, 1033, 1034, 1039, 1040, 1043, 1049, 1050, 1052, 1054], "affinity_matrix": [697, 701], "affinity_matrix_": [446, 458, 697], "affinity_propag": [1, 50, 78], "affinitypropag": [1, 72, 78, 331, 415, 1039, 1042, 1043, 1047, 1050, 1052, 1053, 1054, 1055, 1056], "affirm": 42, "afnlp": 1012, "afor": [902, 903], "aforement": [373, 999], "afraid": 403, "africa": 1008, "afroj": 1056, "aft": [324, 1042], "aftab": 1048, "after": [42, 54, 57, 58, 62, 80, 87, 89, 103, 104, 108, 113, 126, 138, 149, 154, 157, 159, 162, 169, 173, 180, 182, 184, 186, 191, 196, 212, 219, 256, 257, 260, 265, 277, 286, 297, 298, 306, 308, 318, 319, 322, 323, 359, 360, 374, 380, 382, 384, 385, 387, 389, 391, 392, 393, 397, 399, 409, 411, 412, 413, 415, 416, 419, 420, 423, 424, 427, 448, 453, 456, 457, 458, 459, 462, 468, 521, 538, 542, 559, 560, 565, 566, 567, 568, 603, 633, 636, 664, 665, 672, 673, 674, 679, 681, 682, 683, 684, 698, 718, 732, 762, 800, 803, 804, 809, 810, 859, 866, 870, 883, 889, 910, 915, 916, 987, 988, 992, 994, 998, 1002, 1003, 1008, 1010, 1012, 1013, 1014, 1018, 1023, 1030, 1032, 1039, 1042, 1046, 1047, 1050, 1051, 1054, 1057], "afterward": [57, 389, 541, 547, 834], "ag": [104, 173, 191, 193, 207, 208, 219, 237, 257, 258, 260, 271, 318, 330, 331, 332, 334, 380, 382, 502, 1022, 1023, 1030], "again": [42, 57, 101, 105, 151, 179, 181, 183, 191, 243, 278, 359, 368, 389, 394, 399, 400, 415, 416, 417, 422, 423, 478, 573, 574, 640, 653, 657, 659, 661, 667, 669, 671, 698, 987, 994, 998, 1012, 1036, 1039, 1047, 1056], "against": [63, 71, 117, 133, 141, 152, 168, 196, 210, 211, 228, 236, 253, 286, 324, 327, 348, 380, 385, 400, 409, 413, 415, 419, 423, 444, 515, 548, 554, 557, 682, 684, 761, 763, 794, 808, 813, 815, 835, 839, 964, 990, 994, 998, 999, 1001, 1013, 1016, 1023], "agamemnon": [1046, 1047, 1048, 1049, 1051, 1052], "agarw": [1046, 1047, 1049], "agath": 1053, "agc": 183, "agct": 183, "agent": 1022, "agg": 180, "aggfunc": 288, "agglo": [85, 451, 1031], "agglom": [1, 50, 57, 70, 71, 76, 78, 81, 94, 96, 100, 101, 119, 188, 240, 242, 337, 338, 415, 447, 451, 508, 697, 784, 863, 1019, 1042], "agglomer": [1, 43, 67, 70, 81, 84, 119, 169, 171, 188, 201, 218, 255, 290, 377, 415, 423, 451, 508, 606, 612, 651, 806, 811, 870, 1019, 1034], "agglomerativeclust": [1, 73, 74, 75, 78, 81, 86, 90, 96, 101, 399, 415, 446, 448, 451, 1031, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056], "aggreg": [94, 142, 237, 280, 286, 291, 331, 333, 415, 422, 424, 540, 561, 562, 600, 727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 796, 797, 999, 1001, 1008, 1055], "aggress": [1, 46, 226, 672, 673, 809, 810, 1020, 1034, 1040], "aggressive_elimin": [809, 810, 987], "agnost": [997, 1006], "ago": [50, 1018], "agraw": [1042, 1047, 1053, 1054], "agre": [24, 168, 393, 400, 415, 792, 1023], "agreement": [0, 1, 415, 710, 722, 761, 763, 801, 998], "agricultur": 994, "aguiar": 424, "agundez": 1047, "ahead": 894, "ahmadi": 1050, "ahmadjubair33": 1053, "ahmedbgh": [1054, 1055], "ahn": 1051, "ahuja": [1046, 1053, 1054], "ai": [107, 142, 210, 251, 339, 355, 419], "ai8rahim": 1042, "aic": [1, 164, 188, 197, 203, 205, 207, 213, 227, 267, 507, 657, 659, 660, 661, 662, 804, 871, 890, 987, 1019, 1039, 1046, 1052, 1053], "aic_criterion": 207, "aid": [274, 415, 798, 799, 995, 1022, 1039, 1051], "aidan": 1047, "aidar": 1053, "aig": 50, "aiko": 1054, "aim": [51, 57, 113, 154, 187, 223, 271, 306, 339, 352, 374, 380, 383, 385, 399, 409, 415, 417, 423, 454, 994, 998, 1001, 1008, 1013, 1017, 1023, 1031, 1053], "air": [180, 770], "airport": 770, "airspe": 385, "aishgrt1": 1047, "aishwarya": 1047, "aishwaryark": 1046, "aistat": 1011, "aivision2020": 1046, "aj": [500, 1053], "ak": [413, 1053, 1054], "aka": [1, 44, 313, 359, 397, 423, 458, 542, 544, 546, 550, 553, 587, 588, 621, 628, 657, 658, 660, 661, 662, 664, 665, 668, 672, 673, 674, 676, 682, 683, 684, 747, 877, 881, 883, 994, 1002, 1012, 1023, 1028, 1041, 1053], "akai": 1052, "akaik": [207, 208, 267, 662, 804, 987, 994], "akash": [1047, 1057], "aki": [1053, 1054, 1055], "akihiro": 1057, "akin": [42, 220, 399], "akinkunl": 1049, "akitti": 1044, "akshai": [1043, 1046, 1051], "akshay0724": 1046, "akshayah3": 1043, "akshita": 1054, "al": [0, 1, 49, 110, 111, 138, 153, 207, 311, 380, 382, 412, 415, 417, 420, 422, 423, 424, 457, 504, 525, 526, 534, 541, 547, 550, 569, 688, 689, 725, 726, 845, 847, 867, 868, 903, 946, 947, 994, 995, 998, 1004, 1008, 1010, 1013, 1014, 1047, 1052, 1055, 1056], "ala": [1054, 1055], "aladago": 1049, "alam": [1054, 1055], "alan": [1046, 1047, 1050, 1052, 1053, 1057], "alastuei": 1042, "albeit": 61, "albert": [0, 246, 375, 1046, 1047, 1048, 1051, 1052], "alberto": [1048, 1052, 1053], "alcalin": 382, "alcohol": [323, 382], "alcorn": 1047, "aldrian": 1043, "aleator": 51, "alec": 1049, "alejandro": [1040, 1045, 1056], "alek": [1052, 1053], "aleksandr": 1046, "aleksandra": 1050, "alemagnani": 1042, "alert": 1046, "alessandro": [1049, 1051, 1054], "alessia": 1052, "alex": [409, 423, 1013, 1039, 1042, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "alexand": [0, 405, 415, 420, 541, 876, 1041, 1042, 1043, 1045, 1046, 1047, 1051, 1052, 1053, 1056], "alexandercbooth": 1046, "alexandr": [0, 60, 61, 65, 76, 81, 88, 101, 124, 126, 131, 204, 206, 207, 208, 210, 212, 213, 246, 249, 283, 290, 310, 400, 404, 405, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "alexandracraciun": 1051, "alexandru": 445, "alexanmv": 1053, "alexei": 1044, "alexfield": 1045, "alexgoryainov": 1049, "alexi": [1039, 1042, 1043, 1046, 1056, 1057], "alexl": [1055, 1056], "alexryndin": 1047, "alexshack": [1049, 1050, 1051], "alfalfa": 56, "alfano": 1046, "alfaro": [0, 375, 1050, 1051, 1052, 1053, 1054], "alfr": 0, "algebra": [373, 383, 388, 397, 420, 423, 468, 876, 1008], "algesheim": 415, "algo": [77, 133], "algo_param": [78, 96], "algorithm": [1, 5, 7, 8, 10, 17, 27, 29, 31, 32, 37, 38, 40, 47, 52, 54, 55, 64, 66, 70, 71, 76, 77, 79, 80, 84, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 111, 112, 116, 124, 126, 138, 139, 140, 144, 147, 155, 188, 196, 206, 208, 222, 233, 235, 241, 243, 245, 249, 250, 256, 263, 264, 265, 268, 274, 277, 286, 298, 304, 305, 307, 311, 318, 320, 323, 327, 328, 329, 332, 334, 339, 340, 341, 347, 359, 360, 361, 368, 372, 374, 378, 379, 380, 381, 382, 385, 386, 387, 388, 393, 394, 398, 399, 402, 411, 412, 415, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 480, 481, 484, 488, 489, 490, 494, 509, 517, 518, 519, 520, 521, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 559, 560, 561, 562, 565, 566, 569, 597, 609, 610, 616, 617, 641, 643, 645, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 710, 711, 714, 723, 725, 741, 743, 749, 780, 784, 785, 799, 801, 803, 804, 838, 847, 848, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 866, 871, 875, 877, 890, 894, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 930, 946, 947, 949, 963, 967, 973, 988, 990, 993, 995, 996, 997, 998, 1000, 1003, 1004, 1008, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1026, 1027, 1029, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "algorithm_nam": 77, "ali": [1044, 1047, 1048, 1051, 1052, 1054, 1055, 1056], "alia": [51, 253, 386, 389, 393, 399, 406, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 616, 617, 623, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 972, 1004, 1018, 1039, 1053], "alias": [80, 81, 253, 383, 385, 388, 406, 603, 1039, 1043, 1053], "aliased_sample_weight": 253, "align": [69, 152, 154, 187, 239, 262, 288, 361, 399, 695, 699, 990, 1001, 1012, 1033, 1034, 1055, 1056], "alihan": 1052, "alik": [420, 996], "alin": 1052, "alison": 1046, "all": [0, 1, 3, 29, 42, 43, 45, 46, 49, 52, 56, 60, 61, 63, 69, 72, 73, 74, 76, 77, 82, 86, 87, 88, 89, 94, 98, 108, 114, 121, 124, 126, 127, 136, 143, 144, 146, 147, 151, 154, 161, 162, 173, 180, 181, 183, 188, 190, 191, 192, 194, 198, 203, 205, 211, 212, 213, 219, 220, 221, 222, 223, 228, 230, 234, 236, 237, 239, 240, 246, 252, 253, 256, 257, 260, 263, 265, 267, 271, 275, 278, 279, 280, 281, 283, 284, 285, 287, 289, 295, 298, 301, 303, 315, 318, 319, 323, 327, 328, 329, 330, 332, 333, 334, 335, 337, 339, 340, 341, 345, 348, 352, 353, 355, 356, 359, 360, 361, 364, 367, 368, 372, 373, 374, 378, 380, 381, 382, 383, 385, 387, 389, 390, 391, 393, 394, 397, 398, 399, 400, 406, 409, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 514, 515, 521, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 711, 715, 719, 720, 721, 722, 723, 724, 726, 727, 729, 732, 734, 735, 736, 738, 739, 741, 742, 743, 744, 748, 751, 752, 754, 756, 757, 759, 762, 767, 775, 780, 784, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 812, 813, 815, 816, 818, 820, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 936, 938, 939, 940, 941, 952, 955, 961, 973, 982, 987, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057, 1058], "all_class": 46, "all_displai": [1, 394, 1054], "all_estim": [1, 394, 1049, 1050, 1054], "all_funct": [1, 394, 1054], "all_label": 907, "all_model": 151, "all_or_ani": [982, 1049], "all_scor": 739, "all_split": [42, 51], "all_uppercas": 423, "allan": [359, 413, 1051], "allclos": [125, 156, 1010, 1031], "allefeld": 1052, "allen": [332, 1042, 1044, 1046, 1049], "allend": [1050, 1052], "allevi": [91, 154, 198, 203, 415, 1000], "allison": 332, "alloc": [1, 41, 44, 61, 95, 188, 289, 329, 381, 385, 386, 415, 423, 449, 453, 465, 494, 542, 544, 546, 590, 594, 597, 652, 658, 666, 668, 809, 810, 812, 829, 834, 837, 987, 1008, 1017, 1019, 1033, 1034, 1043, 1044, 1049, 1050, 1056], "allow": [24, 42, 57, 90, 92, 107, 108, 120, 128, 129, 141, 142, 149, 157, 175, 180, 182, 184, 213, 219, 223, 237, 240, 247, 250, 257, 259, 260, 262, 271, 277, 291, 297, 327, 328, 329, 330, 332, 335, 352, 353, 359, 367, 368, 372, 379, 380, 385, 386, 387, 389, 392, 394, 397, 399, 400, 406, 409, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 443, 449, 450, 452, 453, 455, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 502, 529, 530, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 599, 600, 603, 609, 616, 617, 621, 633, 634, 636, 640, 641, 644, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 696, 698, 705, 748, 768, 771, 780, 784, 787, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 817, 820, 824, 827, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 860, 861, 865, 867, 868, 870, 872, 873, 875, 876, 877, 882, 889, 890, 894, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 928, 930, 931, 941, 942, 962, 987, 988, 990, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1023, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "allow_nan": [387, 929, 931, 1055], "allow_nd": [930, 931], "allow_non": 717, "allow_single_clust": [78, 452], "allow_unlabel": [122, 254, 529], "allowed_extens": 509, "allwein": 295, "almeida": [1040, 1041, 1052], "almeidayoel": 1053, "almer": 1046, "almost": [42, 69, 144, 150, 221, 227, 253, 256, 271, 292, 323, 335, 340, 368, 378, 380, 389, 391, 397, 398, 399, 406, 415, 419, 420, 476, 477, 478, 479, 481, 482, 483, 803, 987, 993, 994, 997, 998, 1013, 1031, 1032, 1047, 1052], "almubarak": [1052, 1053], "alon": [191, 223, 283, 348, 399, 413, 654, 675, 686, 748, 1046, 1048], "along": [1, 50, 52, 90, 93, 100, 117, 145, 151, 154, 180, 206, 219, 251, 253, 281, 327, 360, 361, 368, 380, 385, 389, 391, 393, 394, 399, 403, 406, 409, 412, 420, 422, 423, 424, 427, 539, 556, 593, 617, 618, 636, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 682, 684, 687, 688, 689, 690, 691, 692, 785, 786, 798, 806, 820, 879, 880, 883, 884, 887, 888, 889, 890, 895, 896, 897, 899, 900, 901, 926, 949, 973, 979, 987, 994, 1001, 1008, 1011, 1022, 1039, 1044, 1045, 1047, 1051, 1052], "alongsid": [82, 385, 391, 399, 403, 424, 831, 832, 833, 834, 998, 1005, 1017, 1018], "alonso": [1050, 1052], "aloqe": 1057, "alpaydin": 382, "alpha": [1, 42, 43, 45, 46, 48, 50, 51, 52, 54, 60, 62, 66, 69, 71, 74, 76, 79, 86, 90, 94, 99, 108, 114, 117, 124, 126, 127, 129, 130, 132, 133, 138, 140, 141, 147, 151, 154, 155, 156, 158, 159, 160, 173, 175, 178, 180, 181, 182, 183, 184, 186, 187, 191, 198, 199, 200, 201, 203, 204, 205, 207, 208, 213, 214, 216, 217, 219, 220, 221, 223, 224, 228, 231, 232, 237, 239, 240, 243, 251, 252, 259, 262, 277, 278, 279, 280, 281, 284, 285, 287, 289, 290, 297, 298, 301, 303, 306, 308, 313, 315, 318, 319, 320, 321, 323, 325, 328, 330, 331, 334, 339, 341, 345, 346, 349, 350, 352, 353, 355, 356, 357, 359, 372, 380, 387, 391, 397, 417, 418, 420, 422, 424, 425, 427, 452, 477, 478, 484, 533, 537, 539, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 566, 601, 602, 604, 617, 619, 621, 622, 629, 637, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 693, 729, 754, 845, 846, 847, 849, 867, 868, 906, 918, 919, 920, 921, 987, 994, 998, 1000, 1002, 1006, 1011, 1012, 1013, 1014, 1027, 1030, 1032, 1036, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1051, 1052, 1053, 1054, 1055, 1057], "alpha_": [42, 114, 164, 191, 199, 207, 208, 478, 617, 650, 651, 653, 657, 659, 661, 662, 667, 669, 679, 681, 994, 1014, 1027, 1039, 1046], "alpha_1": [650, 651, 994], "alpha_2": [650, 651, 994], "alpha_a": 208, "alpha_b": 208, "alpha_bound": [184, 629], "alpha_h": [53, 420, 544, 546, 553, 1052], "alpha_i": [1000, 1013], "alpha_init": [199, 651, 994, 1049], "alpha_max": [652, 653, 658, 659, 666, 667, 668, 669, 687, 690], "alpha_min": [652, 653, 656, 658, 659, 660, 662, 666, 667, 668, 669, 687, 688, 689, 690], "alpha_optim": 290, "alpha_per_target": [679, 1051], "alpha_w": [53, 420, 544, 546, 553, 1052], "alphabet": [105, 399, 728, 747], "alphalpha": 56, "alphanumer": [399, 594, 595, 597], "alphas_": [207, 208, 653, 656, 657, 659, 660, 661, 662, 667, 669, 688, 689, 1039, 1042, 1052], "alphas_enet": 204, "alphas_lasso": 204, "alphas_positive_enet": 204, "alphas_positive_lasso": 204, "alphavantag": 50, "alphonsu": 1049, "alreadi": [42, 44, 48, 89, 92, 120, 129, 138, 154, 159, 173, 191, 247, 254, 256, 259, 271, 278, 284, 298, 330, 333, 385, 386, 390, 397, 399, 413, 414, 417, 419, 421, 422, 427, 443, 505, 529, 539, 573, 574, 640, 652, 655, 670, 671, 672, 673, 674, 680, 682, 683, 684, 691, 692, 774, 784, 845, 865, 873, 879, 880, 882, 887, 907, 910, 911, 933, 957, 987, 990, 1004, 1008, 1009, 1018, 1023, 1028, 1032, 1036, 1040, 1044, 1047, 1051, 1052, 1053, 1054], "alsadi": 1047, "alsaedi": 1052, "alsalhi": [0, 1042, 1043], "alsawadi": 1052, "also": [0, 1, 24, 29, 42, 45, 49, 51, 54, 56, 57, 60, 61, 62, 63, 67, 80, 82, 87, 91, 92, 94, 98, 103, 104, 110, 112, 116, 117, 124, 131, 133, 138, 141, 144, 146, 148, 149, 150, 151, 152, 154, 157, 159, 169, 170, 171, 173, 175, 177, 180, 187, 188, 191, 192, 193, 194, 196, 199, 200, 202, 208, 211, 212, 215, 219, 220, 221, 223, 224, 228, 236, 237, 239, 249, 251, 253, 256, 257, 268, 271, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 291, 295, 297, 298, 306, 309, 311, 313, 318, 319, 320, 322, 323, 327, 328, 329, 330, 334, 335, 342, 344, 345, 346, 348, 350, 352, 359, 360, 361, 363, 364, 367, 368, 372, 373, 374, 378, 379, 380, 382, 383, 384, 385, 387, 388, 391, 393, 394, 397, 398, 399, 400, 403, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 443, 444, 445, 447, 448, 451, 452, 453, 454, 456, 458, 468, 469, 471, 473, 488, 490, 498, 502, 504, 509, 514, 538, 539, 541, 542, 547, 552, 555, 557, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 628, 638, 639, 641, 649, 650, 651, 652, 653, 656, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 678, 682, 684, 687, 690, 693, 697, 700, 701, 705, 716, 719, 729, 735, 736, 744, 749, 769, 785, 786, 789, 790, 793, 803, 804, 806, 809, 810, 820, 823, 826, 832, 833, 834, 835, 836, 837, 839, 849, 852, 853, 854, 856, 857, 858, 860, 861, 862, 866, 867, 868, 870, 872, 873, 878, 879, 883, 887, 890, 895, 899, 912, 915, 918, 919, 920, 921, 930, 949, 955, 962, 987, 988, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1023, 1025, 1028, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "alt": [56, 278, 341, 359, 360, 361, 380, 393, 494, 1032], "altai": 1049, "alter": [61, 187, 387, 399, 735, 736, 744, 789, 790, 793, 1044, 1048, 1051], "altern": [42, 62, 104, 117, 145, 146, 152, 154, 159, 193, 203, 219, 237, 247, 265, 268, 271, 286, 327, 352, 359, 360, 361, 368, 380, 388, 389, 391, 397, 399, 400, 403, 409, 410, 412, 413, 415, 416, 417, 419, 420, 422, 423, 425, 447, 448, 451, 452, 453, 458, 464, 469, 505, 544, 546, 547, 553, 559, 560, 563, 564, 565, 566, 570, 571, 572, 588, 594, 595, 597, 623, 626, 649, 698, 712, 714, 777, 780, 784, 787, 808, 839, 874, 880, 883, 896, 903, 905, 918, 919, 920, 921, 965, 992, 994, 995, 997, 998, 1001, 1002, 1006, 1008, 1010, 1011, 1013, 1014, 1018, 1027, 1032, 1034, 1044, 1046, 1052, 1053, 1057], "alternate_sign": [46, 423, 588, 595, 1046], "although": [42, 47, 61, 145, 159, 190, 216, 237, 246, 264, 297, 352, 368, 374, 387, 399, 415, 416, 420, 423, 502, 823, 826, 881, 997, 999, 1000, 1001, 1004, 1014, 1023, 1030, 1031, 1032, 1039, 1047, 1054], "altman": [634, 988], "altogeth": [148, 391, 1047], "alva": 1049, "alvaro": [1045, 1047], "alvin": 1047, "alwai": [144, 148, 151, 191, 198, 219, 237, 244, 250, 271, 280, 283, 287, 325, 345, 352, 355, 360, 368, 372, 373, 379, 383, 385, 386, 387, 391, 398, 399, 403, 409, 413, 415, 416, 419, 422, 423, 424, 425, 432, 438, 449, 455, 470, 471, 473, 475, 488, 489, 490, 494, 502, 514, 515, 550, 555, 557, 558, 560, 562, 564, 565, 566, 567, 568, 570, 571, 574, 576, 587, 594, 595, 597, 600, 617, 633, 634, 636, 638, 639, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 678, 679, 682, 684, 685, 701, 711, 715, 721, 727, 728, 729, 730, 738, 740, 741, 745, 788, 791, 792, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 843, 844, 853, 854, 861, 862, 868, 875, 883, 888, 890, 893, 895, 896, 897, 898, 899, 900, 901, 903, 911, 912, 913, 915, 916, 918, 919, 921, 948, 957, 958, 987, 988, 990, 992, 994, 997, 998, 1001, 1004, 1006, 1010, 1011, 1013, 1014, 1022, 1023, 1030, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "alyssa": [1042, 1046], "alyssaq": 1045, "am": [103, 108, 112, 159, 192, 359, 390, 417, 480, 499, 1046], "amai": 1055, "aman": [1045, 1046, 1047, 1053, 1054], "amanda": [1047, 1050, 1051, 1052, 1053], "amar": [1053, 1054, 1055, 1057], "amax": 110, "amazon": 50, "amber": 399, "ambient": 243, "ambigu": [278, 390, 423, 578, 718, 947, 1001, 1048, 1050, 1052], "ambival": 94, "ambrosio": 1046, "ambroz": [1049, 1050], "amelia": 988, "amen": [391, 397, 425, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 987], "america": [49, 50, 112, 311, 380, 857, 1008], "american": [49, 50, 103, 113, 380, 415, 417, 421, 422, 423, 475, 480, 737, 890], "ames_h": 256, "amg": [80, 100, 415, 458, 468, 697, 701, 1049, 1053, 1054], "amherst": 380, "ami": [71, 83, 92, 415, 710], "amicel": [1039, 1042], "amin": 110, "aminaka": 1043, "amit": [1039, 1053, 1054], "amlan": 1045, "amo": 1042, "amol": 1052, "among": [1, 63, 183, 192, 194, 196, 219, 267, 297, 367, 374, 380, 387, 399, 400, 413, 418, 453, 455, 518, 525, 800, 835, 853, 858, 860, 912, 915, 918, 919, 920, 921, 987, 990, 998, 999, 1005, 1008, 1013, 1039, 1045, 1046, 1049, 1056], "amongst": [50, 1014], "amor": [0, 71, 91, 144, 154, 198, 203, 256, 278, 280, 323, 359, 360, 361, 396, 1053, 1054, 1055, 1056, 1057], "amormachin": 1042, "amort": 1001, "amount": [36, 37, 46, 50, 79, 87, 100, 110, 113, 124, 128, 139, 141, 181, 191, 203, 223, 237, 251, 271, 329, 335, 337, 340, 342, 348, 355, 361, 372, 373, 374, 397, 415, 417, 420, 422, 423, 424, 449, 460, 475, 544, 545, 547, 549, 569, 602, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 671, 687, 690, 698, 809, 810, 850, 851, 856, 891, 906, 907, 920, 921, 993, 994, 997, 1000, 1002, 1008, 1010, 1011, 1012, 1013, 1030, 1031, 1052, 1056], "amount_fraud": 271, "amount_iter": 340, "amount_label": 340, "amount_test": 271, "amount_train": 271, "amourav": 1048, "amplitud": [151, 180, 182, 213, 994], "amplitude_nois": 74, "amput": 1018, "amrcod": 1053, "amsterdam": [409, 878, 1009], "amuel": [107, 142, 210, 251, 339, 355], "amy12xx": 1051, "amzn": 50, "an": [0, 1, 24, 28, 36, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 68, 69, 70, 71, 73, 74, 75, 77, 78, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 119, 124, 125, 126, 127, 128, 129, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 165, 166, 169, 173, 175, 176, 177, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 193, 196, 197, 198, 199, 202, 203, 207, 214, 219, 220, 221, 223, 224, 226, 227, 233, 235, 236, 237, 239, 240, 241, 242, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 260, 262, 263, 265, 267, 268, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 290, 293, 297, 298, 301, 304, 305, 306, 309, 311, 318, 323, 324, 325, 328, 329, 330, 332, 333, 334, 335, 338, 342, 344, 345, 347, 348, 350, 351, 352, 359, 360, 361, 363, 366, 367, 368, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 398, 399, 400, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 436, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 581, 582, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 618, 625, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 715, 717, 718, 724, 726, 727, 733, 735, 736, 740, 741, 743, 748, 749, 751, 752, 754, 756, 757, 759, 762, 764, 765, 769, 770, 772, 773, 774, 775, 776, 779, 781, 782, 783, 784, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 925, 927, 928, 930, 931, 933, 934, 937, 941, 942, 943, 945, 946, 947, 949, 951, 954, 955, 956, 957, 958, 959, 961, 962, 963, 968, 969, 972, 973, 979, 982, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1026, 1027, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "ana": [1050, 1052, 1057], "anaconda": [0, 373, 383, 389], "anak": 1051, "analog": [42, 56, 153, 391, 422, 998, 999, 1013, 1048], "analogi": [997, 998], "analys": [239, 367, 420, 809, 810, 995, 1017, 1022], "analysen": 456, "analysi": [1, 11, 26, 43, 45, 47, 48, 57, 61, 64, 70, 91, 97, 99, 110, 111, 112, 113, 114, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 148, 165, 187, 188, 191, 208, 240, 261, 263, 267, 268, 271, 274, 277, 278, 282, 288, 299, 300, 301, 309, 310, 318, 323, 355, 360, 377, 380, 382, 385, 387, 400, 412, 415, 417, 422, 423, 427, 445, 453, 454, 479, 481, 482, 488, 489, 491, 508, 510, 518, 521, 537, 538, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 561, 562, 637, 644, 694, 696, 697, 698, 699, 716, 725, 731, 732, 762, 794, 795, 798, 799, 803, 806, 832, 836, 852, 859, 870, 871, 876, 886, 890, 898, 946, 947, 988, 994, 995, 997, 998, 1008, 1016, 1017, 1019, 1020, 1022, 1024, 1033, 1034, 1039, 1040, 1041, 1043, 1048], "analyst": 873, "analyt": [129, 420, 425, 538, 626, 714, 988, 992, 998, 1016, 1022], "analyz": [42, 45, 54, 203, 279, 286, 332, 359, 361, 390, 391, 415, 423, 509, 594, 595, 597, 794, 995, 998, 1005, 1006, 1014, 1032, 1039, 1048], "anam": 1056, "anand": [1047, 1051], "ananiad": 1012, "anantharam": 1053, "anavelyz": 1052, "ana\u00ebl": 1049, "anbari": 534, "anchor": 288, "ander": [1043, 1049], "andersen": [749, 1053], "anderson": [49, 311, 380, 504, 1045, 1051, 1057], "andi": [1039, 1046], "ando": 1044, "andr": [1046, 1053], "andrea": [0, 66, 107, 129, 142, 210, 251, 319, 320, 339, 355, 356, 400, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "andreh7": 1046, "andrei": [1054, 1056, 1057], "andrew": [80, 415, 468, 697, 701, 723, 743, 801, 885, 1002, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "andrewww": 1047, "andrii": 1053, "andriushchenko": [1045, 1046], "androutsopoulo": [845, 1000], "andrzej": [544, 546, 553], "andr\u00e1": [1052, 1053, 1054, 1055], "andr\u00e9": [1052, 1053, 1055], "ands": 881, "andyscanzio": 1056, "ang": 1046, "angel": [0, 405], "angela": [1049, 1050, 1054], "angelaambroz": 1050, "angermuel": [1043, 1044], "angl": [1, 52, 69, 127, 173, 262, 263, 264, 267, 268, 382, 420, 537, 543, 545, 548, 549, 551, 552, 554, 656, 657, 658, 659, 660, 661, 662, 669, 670, 671, 684, 688, 689, 690, 691, 692, 698, 995, 996, 1020, 1034, 1039], "angmar": 56, "angu": [1046, 1047, 1053], "angular": [421, 698, 770], "anh": [544, 546, 553], "ani": [1, 24, 36, 42, 46, 47, 51, 52, 56, 78, 80, 89, 91, 101, 156, 168, 173, 181, 182, 190, 191, 192, 193, 194, 208, 219, 223, 237, 246, 249, 250, 253, 263, 267, 268, 271, 277, 278, 280, 283, 286, 295, 311, 318, 319, 322, 327, 329, 330, 332, 335, 348, 352, 361, 368, 372, 373, 374, 379, 380, 382, 383, 385, 387, 389, 390, 391, 393, 398, 399, 400, 403, 406, 409, 411, 412, 413, 415, 416, 419, 420, 421, 422, 423, 424, 440, 446, 452, 454, 455, 456, 458, 460, 462, 463, 467, 470, 473, 494, 495, 514, 515, 529, 540, 543, 545, 552, 557, 563, 564, 565, 566, 570, 571, 572, 573, 574, 575, 576, 585, 586, 588, 594, 595, 597, 599, 609, 616, 617, 626, 633, 638, 639, 651, 654, 664, 665, 672, 673, 674, 675, 682, 683, 684, 685, 686, 698, 702, 705, 706, 710, 722, 723, 725, 730, 742, 743, 758, 761, 763, 780, 784, 785, 786, 787, 798, 799, 801, 806, 809, 810, 818, 819, 839, 842, 850, 851, 856, 860, 869, 870, 874, 875, 879, 881, 883, 884, 891, 900, 901, 904, 907, 910, 911, 918, 919, 920, 921, 922, 924, 926, 930, 931, 968, 982, 987, 988, 990, 993, 994, 995, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1021, 1023, 1025, 1029, 1030, 1032, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "aniket": [1054, 1056], "anil": [415, 458, 468], "anim": [359, 423], "anirban": 423, "aniruddha": 1047, "anish": [1044, 1045], "anisha": 1049, "aniso": [78, 96], "anisotrop": [91, 177, 425, 623, 625, 628], "anisotropicli": [78, 96], "anjirbag": 1047, "ankan": 1044, "ankerst": [415, 456, 463], "ankit": [1042, 1049, 1051, 1053], "ankit810": 1050, "ankita": 1047, "ankur": [1044, 1055], "ann": [1039, 1051, 1053], "anna": 1047, "annaayzenshtat": 1047, "annal": [173, 203, 207, 382, 422, 480, 522, 523, 524, 565, 566, 662, 994], "annau": 1052, "annegnx": 1055, "anno": [698, 995], "annoi": 373, "annot": [1, 42, 47, 62, 161, 171, 196, 240, 281, 284, 359, 385, 386, 387, 415, 722, 924, 998, 1014, 1048], "annotationbbox": 240, "announc": [327, 328, 329, 330, 331, 332, 333, 334, 335, 389], "annual": [382, 415, 732, 762, 907, 998, 1011], "anomali": [13, 47, 112, 155, 188, 233, 245, 256, 304, 305, 380, 475, 518, 528, 569, 645, 683, 856, 871, 914, 1004, 1017, 1019, 1045, 1046], "anomaly_algorithm": 246, "anomaly_frac": 256, "anoth": [42, 71, 124, 129, 138, 149, 153, 173, 175, 183, 187, 191, 208, 223, 227, 244, 246, 253, 257, 263, 271, 277, 279, 280, 283, 287, 291, 308, 359, 361, 363, 368, 372, 374, 379, 380, 383, 385, 387, 391, 397, 399, 409, 412, 415, 419, 420, 422, 423, 424, 426, 448, 450, 458, 461, 468, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 514, 544, 546, 553, 679, 682, 698, 715, 725, 812, 828, 829, 869, 870, 891, 987, 988, 993, 994, 995, 998, 999, 1001, 1004, 1008, 1012, 1013, 1023, 1030, 1031, 1032, 1048, 1049, 1056], "anova": [1, 48, 88, 107, 167, 169, 172, 173, 188, 343, 416, 510, 521, 598, 601, 602, 604, 605, 606, 610, 611, 612, 615, 719, 832, 836, 870, 871, 890, 910, 915, 1013, 1019], "anova__percentil": [88, 351], "anova_filt": 170, "anova_svm": 170, "ansam": 1055, "answer": [164, 190, 277, 385, 397, 409, 414, 732, 762, 998, 1022], "ant": [724, 760, 998], "anthoni": [1044, 1046, 1047], "anthony22": [1054, 1055], "anti": [203, 368, 612, 845, 1000], "anti_alias": [80, 81, 1031], "anticip": 51, "antoin": [1039, 1041, 1042, 1043, 1046], "antoni": [1043, 1045, 1051, 1054], "antonin": 1046, "antonio": [1047, 1049], "anubhav": 1047, "anuja": 1049, "anulekh": 1054, "anupam": [904, 1010, 1054], "any_method": 958, "anymor": [154, 193, 219, 279, 327, 328, 348, 368, 389, 416, 676, 1045, 1048, 1051, 1052, 1053, 1055, 1056], "anyon": [385, 400, 414, 1021, 1022], "anyth": [361, 389, 391, 399, 406, 416, 419, 958, 962, 1053], "anywai": [47, 359, 387, 671, 691, 692], "anywher": 319, "anz": 1040, "aoif": [714, 998], "ap": [1, 284, 713, 714, 998], "apart": [191, 330, 348, 397, 399, 406, 416, 418, 424, 731, 1013, 1022, 1047], "api": [0, 46, 50, 84, 90, 135, 143, 183, 188, 245, 247, 253, 257, 258, 274, 279, 286, 287, 298, 334, 335, 360, 361, 374, 378, 379, 385, 386, 388, 389, 394, 395, 397, 398, 400, 403, 409, 414, 420, 422, 423, 425, 429, 432, 433, 434, 437, 439, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 502, 510, 514, 516, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 569, 570, 572, 573, 574, 575, 576, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 664, 677, 683, 694, 695, 696, 697, 698, 708, 803, 804, 809, 810, 812, 829, 836, 854, 856, 858, 859, 862, 866, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 908, 914, 915, 964, 982, 987, 996, 997, 998, 1001, 1008, 1012, 1017, 1018, 1019, 1022, 1023, 1027, 1029, 1034, 1036, 1037, 1038, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "apk": 403, "apostolo": 1054, "appar": [116, 1000, 1022], "appdata": 403, "appeal": 400, "appear": [0, 46, 80, 82, 141, 191, 194, 272, 274, 275, 304, 305, 313, 315, 319, 338, 352, 359, 360, 361, 380, 383, 385, 390, 399, 417, 420, 494, 495, 561, 573, 574, 585, 616, 633, 634, 636, 703, 706, 708, 718, 722, 724, 788, 795, 807, 824, 845, 846, 847, 848, 849, 912, 915, 949, 994, 1000, 1004, 1039, 1047, 1051, 1052], "append": [45, 46, 47, 50, 51, 54, 61, 68, 71, 74, 78, 84, 95, 104, 131, 141, 142, 144, 149, 151, 154, 187, 194, 212, 223, 224, 226, 227, 234, 237, 251, 252, 277, 280, 286, 287, 290, 313, 314, 324, 340, 348, 351, 359, 360, 361, 363, 367, 391, 399, 416, 423, 664, 665, 910, 911, 917, 937, 1008, 1027], "appendix": [651, 682, 994, 1008], "appl": [50, 372, 383, 397, 999], "appli": [1, 31, 47, 53, 56, 61, 63, 67, 74, 78, 80, 81, 89, 90, 92, 96, 104, 108, 117, 120, 124, 125, 130, 132, 134, 143, 144, 149, 151, 169, 175, 191, 193, 203, 208, 223, 224, 233, 239, 240, 241, 246, 251, 253, 277, 278, 280, 289, 291, 297, 307, 318, 322, 323, 328, 348, 352, 361, 367, 368, 372, 377, 385, 387, 393, 397, 398, 399, 406, 412, 413, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 446, 452, 458, 468, 470, 471, 473, 475, 480, 488, 489, 490, 491, 514, 515, 522, 523, 524, 530, 537, 538, 539, 540, 541, 543, 545, 547, 548, 549, 554, 555, 556, 559, 560, 563, 564, 565, 566, 570, 571, 572, 594, 595, 596, 597, 633, 638, 639, 644, 645, 647, 648, 664, 665, 674, 682, 683, 684, 697, 705, 707, 713, 732, 762, 764, 765, 787, 794, 798, 799, 806, 820, 836, 839, 845, 846, 847, 848, 849, 859, 869, 870, 879, 886, 887, 890, 895, 896, 898, 899, 900, 901, 906, 917, 918, 919, 920, 921, 930, 936, 939, 946, 947, 970, 988, 990, 994, 995, 996, 997, 998, 1000, 1002, 1004, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1022, 1040, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053], "applic": [41, 43, 56, 83, 89, 112, 188, 196, 219, 236, 241, 270, 271, 280, 318, 335, 372, 374, 380, 382, 385, 387, 391, 393, 394, 397, 399, 413, 414, 415, 419, 420, 421, 422, 425, 427, 450, 452, 458, 502, 504, 538, 539, 540, 559, 560, 635, 694, 695, 696, 700, 718, 735, 736, 744, 789, 790, 793, 836, 987, 994, 995, 996, 997, 998, 1002, 1004, 1010, 1014, 1017, 1018, 1019, 1021, 1022, 1030, 1032, 1039, 1040, 1045, 1047, 1050], "apply_along_axi": 316, "appr": 625, "appreci": [0, 385, 397], "approach": [43, 46, 92, 97, 100, 128, 173, 175, 186, 191, 194, 201, 207, 219, 221, 227, 237, 239, 271, 295, 324, 352, 359, 360, 361, 374, 384, 385, 391, 394, 399, 403, 409, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 443, 449, 452, 454, 458, 468, 526, 538, 588, 595, 617, 641, 664, 665, 680, 681, 839, 855, 947, 987, 988, 994, 995, 998, 999, 1001, 1002, 1008, 1012, 1013, 1016, 1017, 1022, 1025, 1030, 1031, 1043, 1055], "appropri": [24, 89, 91, 131, 180, 191, 223, 253, 286, 291, 335, 363, 368, 383, 385, 387, 393, 399, 409, 413, 415, 419, 421, 422, 426, 450, 456, 463, 495, 496, 497, 502, 506, 507, 508, 510, 511, 516, 583, 588, 597, 598, 601, 602, 604, 605, 606, 678, 680, 693, 715, 852, 853, 854, 856, 858, 860, 861, 862, 982, 994, 997, 998, 1008, 1043, 1046, 1052, 1055, 1057], "approv": [385, 400, 422], "approx": [63, 124, 251, 420, 422, 423, 998, 1005, 1012], "approxim": [0, 1, 22, 42, 43, 63, 68, 80, 87, 112, 128, 129, 133, 142, 150, 151, 173, 176, 191, 199, 215, 219, 220, 233, 237, 241, 244, 245, 246, 249, 252, 268, 277, 282, 292, 299, 300, 307, 318, 320, 321, 323, 327, 330, 359, 361, 365, 366, 368, 377, 382, 394, 397, 399, 412, 413, 416, 418, 419, 420, 422, 425, 427, 428, 429, 439, 455, 475, 476, 479, 480, 481, 482, 488, 489, 490, 497, 502, 508, 527, 530, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 565, 566, 588, 595, 616, 617, 625, 644, 645, 646, 647, 648, 651, 663, 664, 665, 678, 680, 682, 683, 685, 693, 698, 764, 765, 770, 803, 807, 824, 831, 835, 836, 850, 851, 854, 858, 860, 861, 862, 866, 870, 871, 876, 880, 882, 883, 887, 899, 910, 915, 916, 946, 947, 972, 991, 992, 993, 994, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1032, 1034, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "approximate_nearest_neighbor": [298, 1019], "approximateident": 1040, "april": [380, 670, 691, 692, 1043, 1051, 1056], "apriori": 237, "apt": [383, 393, 403], "aptitud": 191, "aqua": 286, "aquantitypredict": 1025, "ar": [0, 1, 15, 24, 29, 30, 31, 36, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 67, 69, 71, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 100, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 116, 117, 120, 122, 124, 126, 129, 131, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 161, 169, 170, 172, 173, 175, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 207, 208, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 223, 228, 230, 237, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 263, 264, 265, 267, 270, 272, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 300, 303, 304, 308, 311, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 346, 348, 350, 352, 355, 356, 359, 360, 361, 363, 367, 368, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 398, 399, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 436, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 514, 515, 516, 518, 521, 522, 523, 524, 525, 526, 529, 530, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 715, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 746, 747, 748, 749, 751, 752, 754, 756, 757, 759, 760, 762, 763, 767, 768, 769, 771, 773, 774, 775, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 818, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 934, 935, 936, 939, 941, 946, 947, 948, 951, 952, 954, 955, 958, 961, 962, 964, 969, 972, 973, 977, 978, 979, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "arab": 633, "arabi": [415, 711, 721, 792], "aradwad": 1050, "arafat": 1045, "arai": 1049, "arang": [42, 49, 51, 52, 74, 92, 94, 99, 106, 111, 112, 131, 134, 147, 148, 150, 152, 153, 157, 161, 169, 175, 177, 182, 183, 186, 187, 194, 203, 219, 222, 224, 228, 242, 249, 251, 272, 277, 280, 285, 288, 297, 298, 311, 313, 320, 330, 337, 338, 340, 342, 348, 354, 359, 361, 365, 366, 367, 368, 397, 412, 419, 423, 471, 550, 836, 885, 889, 993, 994, 1002, 1008, 1012, 1028], "aravindh": 1054, "arbitarili": 359, "arbitrari": [1, 42, 89, 117, 124, 125, 126, 143, 182, 198, 219, 236, 237, 275, 318, 322, 324, 329, 335, 359, 367, 373, 385, 397, 399, 409, 416, 419, 420, 422, 423, 427, 452, 456, 461, 463, 471, 538, 539, 565, 566, 587, 645, 654, 675, 686, 694, 748, 795, 807, 808, 813, 815, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 874, 876, 889, 987, 989, 990, 994, 995, 998, 1001, 1008, 1018, 1032, 1039, 1040, 1043, 1045, 1046, 1047, 1049, 1053, 1055], "arbitrarili": [176, 263, 268, 359, 399, 425, 438, 471, 488, 489, 490, 558, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 684, 685, 686, 727, 728, 729, 730, 752, 791, 795, 843, 844, 853, 861, 868, 891, 911, 913, 916, 919, 921, 998, 1001, 1008, 1014], "arc": [382, 422], "archana": [1049, 1051], "archit": 1045, "architectur": [383, 387, 393, 397, 403, 409, 474, 908, 1002, 1022, 1039, 1056], "archiv": [46, 295, 379, 380, 382, 383, 415, 448, 506, 508, 516, 764, 765, 996, 1013, 1032], "archive_filenam": 46, "archive_path": 46, "archive_sha256": 46, "arci": [714, 998], "arcidiacono": [1053, 1054, 1056, 1057], "arcsin": [705, 770], "arctan": [69, 263, 268, 381, 524], "arctan2": [262, 264, 267], "ard": [1, 198, 650, 651], "ard_poli": 198, "ard_scor": 198, "ardregress": [1, 198, 203, 651, 939, 994, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056], "area": [1, 49, 51, 155, 173, 219, 237, 256, 274, 277, 284, 286, 287, 348, 352, 353, 356, 382, 385, 389, 397, 415, 423, 708, 712, 713, 714, 748, 794, 795, 995, 998, 1001, 1016, 1041], "aren": [15, 253, 359, 380, 389, 403, 732, 762, 1003, 1049, 1051], "arezki": 1039, "arfa": 1045, "arff": [332, 385, 502, 1051, 1054, 1055], "arg": [253, 314, 352, 386, 399, 420, 422, 429, 705, 874, 964, 966, 994, 1000, 1001], "arg1": 1032, "arg2": 1032, "arg3": 1032, "arg_sort_bi": 51, "argentina": 770, "argmax": [62, 131, 276, 290, 387, 422, 575, 838, 918, 1013, 1052], "argmin": [50, 150, 276, 387, 417, 537, 543, 551, 552, 691, 785, 786, 1014], "argpartit": 1046, "argsort": [53, 54, 56, 57, 58, 150, 152, 193, 194, 219, 237, 327, 337, 338, 359, 360, 380, 1006], "argument": [1, 105, 220, 247, 250, 253, 373, 379, 380, 385, 386, 388, 390, 391, 393, 394, 397, 399, 415, 416, 419, 420, 422, 424, 426, 427, 429, 433, 437, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 463, 465, 467, 469, 474, 475, 499, 502, 509, 514, 539, 541, 542, 544, 546, 557, 565, 566, 569, 573, 574, 575, 576, 583, 587, 588, 594, 595, 597, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 637, 645, 649, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 672, 674, 682, 683, 687, 690, 694, 698, 702, 704, 705, 706, 707, 708, 720, 725, 741, 748, 769, 785, 786, 812, 829, 831, 832, 833, 834, 838, 839, 842, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 867, 870, 874, 908, 914, 924, 928, 937, 942, 965, 967, 968, 982, 987, 990, 994, 995, 996, 998, 1001, 1005, 1006, 1013, 1014, 1023, 1027, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "argv": 250, "ari": [71, 92, 360, 415, 711, 1044, 1050], "aria": [1047, 1048, 1054], "aric": 54, "arida": [90, 1048, 1049, 1051, 1053, 1056], "ariel": [44, 380, 1039, 1045], "ariga": 1045, "arik": 1047, "arima": 1017, "aris": [1, 191, 280, 355, 373, 390, 415, 721, 994, 995, 1051], "arisa": [1053, 1054], "arithmet": [252, 391, 393, 415, 557, 654, 675, 686, 710, 723, 742, 743, 763, 801, 857, 998, 1047], "ari\u00f1o": 1042, "arjona": 1048, "arka204": [1052, 1054], "arm": [383, 385, 393, 987], "arm64": [383, 388], "arm64v8": 393, "armstrong": 1051, "arnaud": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045, 1057], "arnaudov": [1051, 1053], "arnaudstiegl": 1049, "arnold": [1039, 1040], "arnoldi": [694, 695, 699], "aroma": 324, "arora": [1047, 1054], "around": [0, 42, 62, 71, 86, 116, 138, 141, 151, 181, 192, 196, 253, 256, 271, 280, 291, 316, 337, 339, 340, 348, 351, 352, 359, 360, 361, 368, 380, 382, 385, 391, 397, 414, 415, 419, 420, 423, 477, 478, 521, 550, 626, 646, 655, 674, 710, 748, 803, 812, 829, 856, 858, 860, 861, 862, 890, 994, 995, 997, 998, 1004, 1008, 1012, 1017, 1018, 1021, 1022, 1025, 1030, 1032, 1043, 1044], "arpack": [50, 56, 78, 80, 100, 103, 240, 334, 420, 457, 458, 459, 468, 541, 547, 550, 694, 695, 697, 699, 701, 995, 1045, 1046, 1051, 1055, 1056, 1057], "arpanchowdhri": 1049, "arr": 335, "arrai": [1, 44, 45, 46, 48, 49, 50, 51, 52, 56, 67, 68, 69, 74, 78, 80, 82, 87, 88, 95, 96, 98, 103, 105, 113, 116, 122, 125, 126, 150, 152, 154, 155, 158, 161, 170, 173, 176, 177, 178, 183, 191, 198, 200, 203, 212, 213, 216, 219, 220, 226, 236, 240, 241, 246, 250, 253, 256, 257, 260, 262, 263, 264, 266, 267, 271, 272, 273, 275, 277, 278, 281, 282, 286, 297, 311, 321, 327, 330, 331, 333, 334, 338, 344, 351, 352, 359, 366, 368, 372, 373, 378, 379, 380, 385, 386, 387, 388, 390, 391, 393, 395, 397, 398, 399, 409, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 521, 525, 529, 530, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 587, 588, 589, 590, 592, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 935, 936, 945, 946, 947, 948, 949, 951, 952, 953, 960, 961, 962, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 988, 993, 994, 996, 998, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "arrang": [1, 57, 297, 638, 841, 842, 843, 844, 998], "array_api": 411, "array_api_compat": 411, "array_api_dispatch": [411, 474, 908], "array_api_support": [387, 411], "array_convert": 931, "array_equ": [575, 1046], "array_lik": 945, "array_paramet": 385, "array_split": 1027, "array_sym": 984, "arrayfunc": [1, 394, 927], "arrow": [62, 1053], "arrow_arg": 47, "arrowprop": [47, 62], "arrowstyl": 47, "arroyo": 1053, "art": [329, 391, 655, 698, 1017, 1022], "artem": [1043, 1046, 1056], "arth": 1053, "arthur": [234, 235, 415, 453, 466, 1044, 1045, 1046, 1047, 1048, 1051, 1053], "arthurmello": 1053, "articl": [0, 54, 103, 359, 380, 384, 385, 393, 419, 428, 481, 711, 994, 998, 1032, 1052], "artiem": 1047, "artifact": [42, 52, 80, 81, 318, 374, 389, 1034], "artifici": [9, 145, 148, 156, 173, 187, 223, 239, 252, 271, 316, 359, 380, 381, 382, 390, 412, 415, 419, 420, 541, 702, 840, 867, 868, 991, 995, 997, 999, 1005, 1010, 1014, 1018, 1022, 1039], "artist": [392, 444, 638, 704, 706, 707, 708, 812, 829, 924], "artsiom": 1046, "artsion": 1045, "artstein": 722, "artur": [1054, 1055], "arturo": [0, 71, 91, 144, 154, 198, 203, 256, 278, 280, 323, 359, 360, 361, 396, 1053, 1054, 1055, 1056, 1057], "arturoamor": 1053, "aruku": [1047, 1048], "arunav": 1050, "arunava": 1047, "arxiv": [385, 468], "arya": 1047, "as_float_arrai": [1, 394], "as_fram": [42, 43, 51, 104, 108, 144, 148, 154, 159, 180, 191, 192, 193, 194, 207, 208, 219, 227, 235, 237, 256, 260, 271, 291, 295, 298, 301, 315, 323, 324, 327, 329, 331, 332, 379, 380, 495, 496, 497, 498, 502, 506, 507, 508, 510, 511, 516, 1049, 1050, 1051, 1052, 1055], "asanyarrai": 387, "asarrai": [46, 54, 219, 237, 316, 339, 359, 360, 387, 399, 411, 732, 762, 858, 860, 861, 862, 1008, 1013, 1056], "ascend": [57, 104, 193, 324, 422, 456, 462, 600, 633, 641, 922, 923, 924, 1012, 1049, 1055], "ascent": [180, 425], "ascii": [49, 311, 423, 493, 594, 595, 597], "ascontiguousarrai": 547, "asctim": 124, "aseem": 1046, "asgd": [226, 1012], "ash": [47, 382, 1042, 1045], "ashah002": [1054, 1055, 1056], "ashim": 1049, "ashimb9": 1049, "ashimin": 1052, "ashish": [1052, 1055], "ashra": 650, "ashutosh": [1046, 1047, 1049, 1051], "ashvith": 1052, "ashwin": [1054, 1055], "asia": [277, 1008], "asian": 423, "asid": [149, 227, 409, 565, 566, 567, 568, 672, 673, 674, 682, 684, 867, 868], "asish": [1045, 1046], "ask": [0, 186, 187, 277, 384, 385, 389, 390, 393, 399, 400, 409, 424, 852, 853, 854, 856, 858, 860, 861, 862, 1021, 1055], "asnt": 1045, "aspect": [45, 92, 117, 124, 179, 192, 239, 246, 286, 291, 307, 372, 373, 374, 385, 399, 400, 415, 497, 664, 665, 1014, 1022, 1056], "aspir": [173, 382, 385], "ass": [112, 113, 417, 480], "assembl": [297, 325, 361, 870], "assert": [46, 54, 82, 125, 250, 277, 286, 373, 388, 1018], "assert_all_finit": [1, 372, 394, 474], "assert_allclos": 387, "assert_array_equ": 423, "assert_warn": 1052, "assert_warns_messag": 1052, "assertionerror": 1046, "assess": [43, 51, 71, 94, 138, 149, 151, 191, 219, 237, 256, 273, 274, 276, 280, 413, 422, 707, 749, 997, 998, 1004, 1018, 1054], "assia": 1048, "assiaben": 1048, "assign": [46, 54, 57, 69, 71, 80, 83, 91, 92, 94, 138, 143, 155, 157, 169, 171, 177, 232, 237, 246, 251, 254, 271, 313, 320, 325, 335, 342, 355, 360, 380, 385, 387, 399, 412, 419, 420, 422, 423, 424, 425, 446, 447, 448, 449, 451, 452, 453, 454, 455, 458, 460, 462, 465, 466, 467, 468, 521, 542, 567, 568, 599, 600, 613, 614, 616, 664, 665, 672, 673, 674, 682, 683, 684, 710, 711, 721, 722, 723, 726, 735, 736, 737, 744, 745, 749, 761, 763, 789, 790, 792, 793, 799, 800, 801, 806, 809, 810, 812, 815, 820, 829, 831, 832, 833, 834, 837, 854, 860, 862, 863, 864, 877, 905, 906, 910, 911, 912, 913, 914, 915, 916, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1011, 1022, 1023, 1032, 1039, 1044, 1046, 1047, 1056, 1057], "assign_label": [80, 415, 458, 468], "assist": [0, 385, 397, 414, 1008, 1021, 1022], "associ": [0, 49, 60, 61, 112, 138, 175, 190, 191, 223, 265, 271, 324, 337, 339, 359, 393, 415, 417, 419, 420, 422, 423, 433, 452, 455, 475, 476, 477, 478, 479, 480, 481, 482, 499, 500, 501, 530, 563, 567, 570, 611, 612, 636, 651, 664, 665, 672, 674, 680, 681, 682, 695, 701, 705, 737, 745, 828, 833, 853, 861, 875, 887, 899, 907, 916, 918, 920, 936, 997, 998, 1001, 1008, 1011, 1022, 1031, 1039, 1051, 1055], "assum": [47, 69, 89, 91, 182, 187, 190, 191, 208, 219, 237, 246, 249, 256, 268, 277, 286, 318, 355, 361, 373, 384, 385, 387, 389, 391, 397, 398, 399, 402, 409, 412, 413, 415, 417, 419, 420, 422, 423, 425, 426, 431, 436, 443, 445, 450, 452, 456, 463, 469, 475, 476, 477, 478, 479, 480, 481, 482, 509, 514, 515, 538, 548, 554, 555, 567, 568, 573, 574, 593, 594, 595, 597, 626, 638, 649, 650, 652, 653, 658, 664, 665, 666, 667, 668, 672, 673, 674, 677, 678, 682, 683, 684, 687, 691, 693, 694, 698, 715, 728, 732, 741, 747, 762, 770, 775, 780, 784, 787, 806, 809, 810, 820, 846, 852, 853, 856, 858, 860, 861, 866, 877, 890, 958, 974, 975, 976, 988, 992, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1008, 1012, 1014, 1045, 1051], "assume_cent": [68, 111, 417, 428, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "assume_finit": [372, 373, 474, 908], "assumpt": [31, 42, 47, 51, 61, 63, 70, 77, 110, 111, 127, 180, 184, 188, 190, 219, 221, 246, 273, 297, 318, 391, 397, 398, 402, 413, 415, 417, 419, 420, 423, 425, 453, 457, 459, 494, 509, 518, 538, 540, 547, 656, 660, 804, 806, 809, 810, 820, 847, 902, 903, 992, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1011, 1014, 1019, 1046, 1052], "assur": [0, 399, 803, 804, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "astel": 1047, "astolfi": 1039, "astrai": 399, "astro": [49, 182, 239, 265], "astroml": 1017, "astronom": 1016, "astronomi": 1017, "astropi": 385, "astyp": [42, 52, 71, 75, 78, 79, 87, 94, 96, 100, 113, 130, 148, 150, 166, 190, 192, 209, 210, 237, 242, 252, 256, 271, 288, 298, 325, 409, 423, 988, 994, 1046], "asv": 385, "asv_benchmark": 385, "aswathavicki": 1057, "asymmetr": [151, 221, 399, 1044], "asymmetri": [221, 359], "asymptot": [110, 111, 208, 372, 417, 480, 542, 736, 994, 997, 1049], "atag": 183, "atariah": 1048, "ateif": 1052, "atharva": 1053, "atheism": [56, 278, 341, 359, 360, 361, 380, 494, 1032], "atheist": 359, "athena": 1022, "ation": 423, "atla": [372, 383], "atleast_2d": [151, 387], "atmospher": 180, "atol": [387, 678, 680, 850, 851, 855], "atom": [127, 133, 420, 537, 543, 545, 548, 549, 551, 552, 659, 669, 690, 994, 1039, 1052], "atomic_benchmark": 48, "atomic_benchmark_estim": 48, "atomic_runtim": 48, "atsushi": [1051, 1052], "attach": [46, 359, 440, 855, 1040, 1050], "attack": [256, 380], "attalla": 1053, "attard": 1052, "attempt": [42, 88, 192, 215, 225, 272, 359, 372, 384, 399, 415, 427, 452, 456, 463, 470, 474, 637, 694, 695, 699, 824, 852, 853, 854, 856, 858, 860, 861, 862, 888, 890, 908, 930, 931, 994, 995, 1001, 1014, 1023, 1046, 1051, 1056], "attenberg": 423, "attend": 0, "attent": [393, 613, 614, 1012], "attenu": 175, "attia": 803, "attr": [46, 90], "attract": [426, 450, 992, 1001, 1017], "attractador": [1046, 1047], "attrgett": [599, 603], "attribut": [1, 46, 61, 67, 83, 104, 132, 136, 138, 145, 146, 149, 169, 173, 219, 227, 253, 267, 275, 276, 281, 289, 307, 311, 330, 352, 361, 367, 374, 378, 379, 380, 382, 385, 388, 392, 397, 409, 412, 413, 415, 416, 417, 418, 420, 422, 423, 424, 425, 430, 431, 432, 433, 434, 437, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 516, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 586, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 623, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 703, 704, 706, 707, 708, 742, 801, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 925, 959, 982, 990, 992, 994, 999, 1001, 1002, 1004, 1008, 1011, 1012, 1013, 1014, 1022, 1023, 1029, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "attributeerror": [416, 565, 583, 959, 1031, 1048, 1049, 1051, 1055, 1056], "attrselect": 1039, "atukorala": 1054, "atuo": [1055, 1056], "aubert": 1046, "auc": [1, 49, 61, 173, 219, 237, 256, 274, 277, 281, 284, 286, 287, 334, 413, 708, 714, 794, 998, 1044, 1047, 1051], "auc_scor": [1039, 1041], "audio": [379, 509], "aufarkari": 1053, "aug": 1013, "augment": [1, 340, 636, 892, 1006, 1022], "augspurg": [1047, 1049], "august": [173, 382, 415, 517, 540, 1013, 1039, 1041, 1042, 1046, 1053], "aura": 1051, "auroc": 998, "aur\u00e9lien": [1046, 1047, 1048, 1052, 1053], "austin": 1046, "australian": [154, 403], "author": [0, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 67, 71, 73, 74, 76, 80, 81, 82, 86, 87, 88, 90, 91, 95, 99, 100, 101, 103, 104, 105, 107, 108, 114, 124, 126, 128, 129, 131, 134, 136, 139, 140, 141, 142, 143, 144, 150, 152, 153, 154, 158, 159, 173, 175, 176, 178, 179, 180, 181, 182, 184, 187, 196, 198, 199, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 220, 221, 223, 224, 226, 227, 234, 235, 236, 239, 240, 241, 242, 244, 246, 249, 251, 252, 254, 256, 262, 264, 265, 271, 276, 278, 280, 281, 283, 290, 297, 298, 300, 303, 310, 311, 313, 316, 318, 319, 321, 322, 323, 337, 338, 339, 340, 342, 355, 359, 360, 361, 379, 385, 389, 393, 397, 399, 400, 419, 457, 540, 877, 990, 1017, 1042], "authorit": 400, "authorship": 389, "auto": [56, 68, 91, 92, 122, 173, 179, 202, 239, 244, 258, 298, 301, 306, 327, 328, 329, 330, 331, 332, 335, 344, 345, 351, 354, 361, 379, 380, 387, 422, 425, 426, 447, 450, 451, 452, 453, 455, 456, 458, 461, 462, 463, 465, 468, 502, 514, 515, 541, 544, 546, 547, 550, 553, 555, 563, 564, 567, 568, 569, 570, 571, 573, 599, 600, 603, 608, 613, 614, 635, 637, 638, 639, 641, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 678, 679, 680, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 706, 708, 805, 809, 810, 828, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 867, 868, 883, 884, 891, 902, 903, 907, 910, 911, 912, 913, 914, 915, 916, 920, 921, 946, 947, 964, 967, 989, 992, 994, 995, 1001, 1008, 1017, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "auto_examples_jupyt": 188, "auto_examples_python": 188, "auto_viml": 1051, "auto_wrap_output_kei": 387, "autoclass": 382, "autocorrel": 419, "autolabel": 46, "autom": [278, 389, 403, 698, 987, 994, 995, 998, 1017, 1022], "automat": [1, 42, 46, 50, 51, 63, 80, 97, 99, 104, 131, 154, 164, 172, 198, 222, 262, 263, 271, 275, 278, 318, 325, 328, 332, 341, 350, 352, 373, 380, 383, 385, 387, 389, 393, 399, 403, 409, 411, 415, 416, 417, 420, 422, 423, 424, 439, 456, 458, 462, 468, 470, 471, 473, 502, 505, 521, 544, 546, 547, 553, 555, 557, 563, 567, 570, 589, 594, 597, 600, 608, 649, 651, 652, 653, 658, 659, 664, 665, 666, 667, 668, 669, 672, 673, 674, 678, 680, 681, 682, 684, 687, 690, 693, 694, 697, 701, 808, 823, 826, 836, 846, 867, 868, 871, 872, 874, 883, 884, 891, 902, 903, 910, 911, 912, 915, 918, 920, 924, 936, 969, 972, 987, 989, 992, 997, 1002, 1008, 1012, 1014, 1017, 1018, 1027, 1039, 1042, 1043, 1044, 1050, 1053, 1054, 1055, 1056, 1057], "automl": [998, 1017], "automobil": 1022, "autoregress": 380, "autoviml": 1017, "autoviz": 1051, "auxiliari": [187, 335, 383, 1022, 1054], "av": 1047, "avail": [0, 1, 43, 49, 50, 52, 75, 90, 91, 127, 146, 150, 154, 173, 175, 180, 184, 190, 191, 192, 208, 219, 227, 237, 240, 253, 256, 271, 274, 275, 280, 281, 284, 291, 303, 304, 305, 311, 323, 327, 328, 329, 330, 332, 333, 340, 342, 368, 372, 379, 380, 382, 383, 384, 385, 386, 390, 394, 398, 399, 403, 409, 412, 415, 416, 419, 420, 421, 422, 423, 424, 426, 453, 456, 457, 458, 459, 475, 476, 477, 478, 479, 480, 481, 482, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 514, 541, 555, 561, 562, 563, 564, 565, 566, 570, 571, 573, 574, 575, 576, 599, 600, 616, 617, 633, 638, 639, 653, 657, 659, 661, 663, 667, 669, 671, 674, 676, 677, 678, 679, 680, 681, 682, 695, 702, 705, 738, 739, 806, 809, 810, 820, 832, 833, 838, 839, 840, 841, 842, 843, 844, 856, 867, 868, 870, 877, 886, 889, 894, 898, 903, 954, 959, 988, 992, 995, 997, 998, 999, 1000, 1001, 1004, 1008, 1011, 1012, 1013, 1016, 1017, 1018, 1021, 1022, 1023, 1027, 1032, 1034, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055], "available_if": [1, 90, 399, 1052, 1053, 1056], "avebedrm": [318, 380, 496], "aventi": 50, "aveoccup": [318, 329, 380, 496], "averag": [1, 42, 51, 61, 63, 71, 73, 74, 78, 86, 94, 96, 141, 142, 147, 151, 154, 155, 160, 161, 162, 173, 180, 192, 200, 208, 219, 226, 237, 256, 271, 280, 282, 285, 287, 291, 297, 318, 327, 333, 335, 341, 359, 368, 372, 380, 382, 387, 397, 412, 413, 417, 419, 423, 424, 426, 427, 443, 444, 447, 450, 451, 452, 453, 455, 496, 499, 500, 529, 537, 538, 539, 543, 544, 546, 547, 551, 552, 553, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 576, 593, 600, 638, 639, 654, 664, 665, 672, 673, 675, 678, 680, 682, 683, 684, 686, 693, 706, 709, 710, 712, 713, 714, 719, 726, 727, 729, 731, 732, 734, 735, 736, 740, 741, 742, 744, 745, 746, 749, 751, 752, 754, 756, 757, 759, 762, 770, 787, 788, 789, 790, 791, 793, 794, 796, 797, 801, 802, 803, 804, 834, 837, 856, 876, 891, 984, 988, 993, 994, 999, 1002, 1004, 1005, 1012, 1013, 1014, 1030, 1032, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057], "average_bike_rent": 192, "average_coef_": 1050, "average_feature_effect": 359, "average_intercept_": 1050, "average_linkag": 78, "average_method": [415, 710, 763, 1047], "average_pr": 154, "average_precis": [284, 706, 713, 748, 998], "average_precision_scor": [1, 284, 706, 712, 714, 788, 794, 998, 1039, 1042, 1046, 1047, 1053, 1055], "average_week_demand": [42, 154], "averoom": [318, 329, 380, 496], "avg": [44, 67, 103, 170, 275, 316, 337, 338, 575, 710, 719, 828, 998, 1028, 1032, 1055], "avg_dist": [74, 787], "avgclaim": 237, "avgclaimamount": 237, "avi": [1051, 1052], "avidar": 1055, "avinash": 1051, "avm19": [1053, 1054, 1056], "avoid": [42, 45, 50, 51, 78, 91, 96, 105, 143, 144, 149, 154, 191, 192, 221, 223, 228, 237, 242, 253, 256, 271, 272, 278, 282, 306, 308, 309, 322, 323, 334, 344, 345, 360, 373, 383, 385, 386, 387, 389, 390, 391, 397, 399, 400, 403, 409, 413, 415, 417, 419, 422, 423, 426, 446, 448, 450, 458, 468, 474, 499, 500, 501, 505, 514, 515, 540, 545, 549, 640, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 695, 697, 699, 701, 718, 798, 806, 807, 811, 817, 820, 831, 832, 833, 870, 873, 879, 880, 882, 887, 888, 889, 890, 893, 895, 896, 897, 898, 899, 900, 901, 903, 908, 947, 992, 995, 997, 998, 1001, 1002, 1004, 1006, 1008, 1013, 1014, 1018, 1021, 1032, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "aw": 393, "awai": [61, 62, 63, 94, 110, 147, 175, 176, 180, 222, 352, 353, 380, 413, 425, 634, 852, 853, 860, 861, 997, 998, 1013, 1030], "await": 328, "awalei": 1047, "awar": [47, 53, 170, 184, 271, 345, 359, 383, 385, 387, 397, 400, 414, 419, 423, 573, 574, 654, 660, 661, 662, 664, 665, 675, 686, 856, 885, 1004, 1008, 1014, 1036, 1039, 1040, 1053], "awesom": 1022, "ax": [42, 43, 45, 46, 47, 48, 50, 51, 53, 61, 63, 65, 66, 67, 69, 74, 76, 77, 79, 87, 89, 90, 91, 98, 100, 105, 108, 112, 114, 117, 120, 122, 124, 130, 134, 138, 140, 143, 145, 148, 149, 154, 156, 157, 159, 160, 161, 178, 179, 184, 186, 190, 191, 192, 193, 194, 196, 198, 199, 202, 203, 208, 210, 211, 214, 216, 217, 219, 220, 221, 223, 224, 227, 228, 230, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 247, 252, 256, 257, 259, 262, 264, 267, 271, 272, 273, 274, 277, 279, 280, 281, 283, 284, 286, 287, 288, 289, 291, 292, 295, 297, 298, 300, 301, 302, 303, 306, 308, 309, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 334, 344, 345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 359, 360, 361, 363, 364, 387, 388, 420, 425, 444, 540, 547, 556, 637, 638, 703, 704, 706, 707, 708, 724, 812, 829, 924, 998, 1001, 1005, 1031, 1036, 1049, 1055], "ax0": [106, 108, 219, 249, 360, 1028], "ax1": [45, 48, 91, 94, 99, 101, 106, 108, 112, 122, 148, 187, 194, 219, 247, 249, 257, 262, 280, 288, 319, 323, 324, 340, 359, 360, 1028], "ax2": [45, 91, 94, 99, 101, 112, 122, 148, 187, 194, 219, 247, 257, 262, 280, 288, 308, 319, 323, 324, 340, 359], "ax3": [99, 340], "ax4": 99, "ax_": [155, 270, 280, 284, 286, 293, 301, 323, 327, 392, 444, 637, 703, 704, 706, 707, 708, 812, 829], "ax_bc": 322, "ax_bottom": 392, "ax_calibration_curv": [61, 63], "ax_colorbar": 318, "ax_det": 274, "ax_histi": 318, "ax_histx": 318, "ax_histx_zoom": 318, "ax_histy_zoom": 318, "ax_idx": 279, "ax_origin": 322, "ax_qt": 322, "ax_roc": 274, "ax_row": 69, "ax_scatt": 318, "ax_scatter_zoom": 318, "ax_top_left": 392, "ax_top_right": 392, "ax_yj": 322, "ax_zoom_in": 318, "ax_zoom_out": 318, "axa": 0, "axarr": [160, 318], "axes_": [154, 156, 257, 328, 334, 392, 638], "axes_idx": 322, "axes_list": 322, "axes_row": 210, "axesimag": 703, "axhlin": [131, 164, 209, 276, 280], "axi": [1, 42, 43, 45, 49, 50, 52, 53, 54, 56, 61, 62, 71, 73, 74, 81, 82, 84, 86, 87, 88, 89, 95, 104, 105, 108, 114, 117, 121, 122, 124, 125, 126, 127, 128, 133, 140, 141, 145, 147, 155, 158, 162, 166, 169, 179, 184, 186, 190, 191, 200, 204, 206, 208, 211, 212, 213, 219, 224, 228, 231, 233, 234, 236, 237, 240, 241, 244, 246, 250, 251, 255, 262, 264, 266, 267, 273, 274, 278, 279, 284, 286, 287, 297, 298, 303, 304, 305, 308, 309, 310, 316, 318, 322, 325, 334, 338, 340, 342, 344, 347, 348, 351, 353, 354, 355, 357, 359, 360, 364, 365, 366, 367, 380, 387, 394, 399, 413, 415, 423, 427, 444, 451, 470, 473, 537, 539, 542, 543, 545, 547, 549, 551, 552, 556, 591, 618, 637, 638, 691, 692, 707, 769, 785, 786, 787, 788, 812, 829, 838, 879, 880, 887, 888, 890, 895, 896, 897, 899, 900, 901, 924, 926, 930, 931, 949, 973, 979, 988, 998, 1005, 1008, 1013, 1029, 1031, 1047, 1049, 1051, 1056, 1057], "axis_idx": 42, "axis_list": 126, "axp": 50, "axvlin": [87, 94, 106, 114, 131, 150, 161, 191, 193, 194, 208, 283, 291, 355, 1028], "ayako": 1051, "ayan": 1053, "ayc\u0131": 1057, "aydor": [1046, 1047, 1050], "ayerdi": 1043, "aymer": 1040, "aymericbasset": 1055, "ayomid": 1049, "ayush": [1047, 1052], "ayzenshtat": [1022, 1047], "azaria": [1054, 1055], "azencott": 1053, "azim": [79, 101, 120, 130, 192, 216, 239, 243], "azur": [0, 385], "b": [0, 1, 46, 48, 60, 62, 93, 99, 112, 131, 140, 141, 147, 151, 152, 162, 164, 176, 177, 178, 183, 187, 201, 203, 204, 219, 220, 225, 237, 254, 256, 271, 276, 280, 282, 287, 292, 297, 330, 340, 368, 380, 382, 385, 389, 390, 391, 412, 413, 415, 418, 419, 420, 423, 443, 488, 504, 506, 547, 572, 594, 595, 596, 597, 613, 614, 616, 617, 634, 652, 653, 654, 655, 664, 675, 678, 680, 682, 686, 693, 694, 711, 725, 736, 737, 798, 799, 817, 818, 857, 883, 884, 885, 886, 889, 890, 898, 925, 932, 947, 948, 961, 963, 988, 990, 994, 995, 996, 998, 1001, 1003, 1008, 1012, 1013, 1027, 1039, 1047, 1050, 1052, 1053, 1054], "b0noi": 1045, "b0rxington": 1054, "b1": [233, 304, 347], "b12": [219, 237], "b1996": 422, "b1998": 422, "b1999": 422, "b2": [233, 304, 347], "b2001": 422, "b2011": 415, "b2c": 1022, "b30065": 320, "b5": 332, "b7a2ff": 322, "b_1": 1002, "b_2": 1002, "b_column": 725, "b_i": 1003, "b_iv_i": 1003, "b_j": 415, "b_k": 415, "b_mask": 286, "b_row": 725, "b_true": 286, "ba": [50, 867, 868, 1002], "baak": 1053, "baam": [1052, 1053], "babino": [1052, 1053], "bac": 50, "bach": [420, 537, 542, 543, 544, 664, 994], "bachant": 1046, "back": [42, 129, 258, 373, 383, 385, 387, 399, 400, 409, 416, 423, 440, 449, 452, 453, 465, 488, 489, 490, 514, 515, 539, 540, 541, 544, 546, 547, 550, 587, 636, 664, 665, 672, 673, 674, 682, 683, 684, 734, 875, 877, 878, 879, 883, 884, 885, 887, 888, 890, 902, 903, 910, 994, 998, 1002, 1018, 1023, 1032, 1042, 1047, 1049, 1050, 1053], "backend": [1, 373, 388, 399, 474, 908, 964, 968, 998, 1042, 1047, 1048, 1049, 1050], "background": [43, 49, 81, 100, 155, 316, 320, 380, 385, 393, 415, 499, 500, 995, 1003, 1012, 1049], "background_point": 49, "backlink": 1044, "backport": [389, 394, 1046], "backprop": [1002, 1012], "backpropag": 1002, "backslash": 1054, "backtick": [385, 390], "backup": [514, 1039], "backward": [173, 253, 329, 388, 399, 424, 502, 583, 608, 620, 621, 624, 625, 626, 628, 629, 923, 926, 1002, 1018, 1039, 1042, 1047, 1048, 1049, 1051, 1053, 1055], "bad": [79, 94, 95, 176, 191, 271, 335, 359, 368, 385, 415, 425, 698, 752, 987, 994, 995, 1000, 1006, 1031, 1039], "badaracco": 1052, "badli": [208, 219, 359, 374, 890, 994, 1008], "badr": 1054, "baeza": [596, 736, 1042], "bag": [1, 13, 63, 103, 126, 137, 142, 144, 152, 153, 188, 193, 295, 360, 361, 381, 413, 522, 523, 524, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 747, 811, 836, 919, 996, 999, 1019, 1020, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1052, 1053, 1055], "bagai": 1052, "baggingclassifi": [1, 399, 406, 422, 562, 920, 939, 988, 1042, 1045, 1046, 1047, 1050, 1054, 1055, 1057], "baggingregressor": [1, 141, 406, 422, 561, 921, 988, 1042, 1045, 1047, 1050, 1054, 1055, 1057], "baharev": 1044, "bahavior": 359, "bahaviour": 359, "baibak": [1047, 1048], "bail": 1050, "bailei": [415, 710], "bajic": 1054, "baji\u0107": 1054, "bakir2003": 420, "bakiri": [840, 999], "bak\u0131r": [43, 420, 541], "bala": [1039, 1042], "balakumaran": [1046, 1047], "balanc": [1, 42, 44, 51, 63, 87, 100, 105, 138, 144, 149, 172, 188, 223, 224, 269, 271, 275, 278, 280, 281, 291, 318, 374, 397, 399, 413, 414, 419, 420, 422, 508, 521, 540, 546, 547, 553, 563, 567, 570, 646, 664, 665, 672, 674, 680, 681, 682, 709, 714, 735, 749, 788, 793, 806, 807, 824, 870, 910, 912, 915, 918, 920, 935, 936, 987, 1013, 1014, 1019, 1028, 1039, 1041, 1044, 1045, 1048, 1049, 1053], "balanced_accuraci": [271, 291, 714, 828, 998, 1047], "balanced_accuracy_scor": [1, 271, 709, 793, 998, 1047], "balanced_subsampl": [563, 570, 1047], "balaz": [60, 1043], "baldi": 749, "ball": [103, 303, 311, 415, 421, 454, 698, 850, 851, 855, 858, 860, 861, 862, 1039, 1041, 1044, 1050], "ball_tre": [311, 426, 450, 452, 456, 463, 694, 695, 852, 853, 854, 855, 856, 858, 860, 861, 862, 1001, 1039, 1056], "balltre": [1, 426, 450, 452, 456, 463, 694, 695, 705, 852, 853, 854, 855, 856, 858, 860, 861, 862, 995, 1039, 1041, 1043, 1047, 1052, 1055, 1056], "baloo": 995, "baluyot": 1048, "bamidel": 1049, "banana": [47, 998], "band": [51, 280, 320, 1008], "bandit": 987, "bandol": 324, "bandwidth": [1, 47, 78, 97, 252, 302, 303, 311, 397, 399, 415, 421, 454, 464, 467, 850, 851, 855, 991, 1004, 1050, 1054], "bandwidth_": 855, "bangda": 1047, "banik": 1057, "banilo": [1043, 1044], "bank": [50, 56, 1022], "bannerje": [1055, 1056], "bansal": 1046, "bansod": [1044, 1045, 1046], "bao": [1045, 1053], "baod": 415, "baptbillard": 1052, "baptist": [1042, 1050], "bar": [46, 48, 53, 105, 144, 145, 148, 149, 152, 161, 169, 173, 183, 186, 192, 198, 262, 267, 276, 278, 282, 297, 323, 324, 331, 332, 360, 387, 418, 587, 638, 654, 675, 686, 998, 1005, 1012, 1014, 1045, 1046, 1047, 1048], "bar_color": 46, "bar_kw": 638, "bar_siz": 359, "baran": 1049, "barang": 1055, "baraniuk": 424, "barankaraku": 1051, "barata": 1055, "barber": 538, "barberogaston": 1051, "bardiya": [1053, 1054], "bare": [380, 995, 1032], "barh": [53, 152, 186, 187, 190, 191, 193, 194, 260, 325, 359, 360, 361], "barikbin": 1055, "barkhorn": 1047, "barklei": 1049, "barmalei": [1043, 1044], "barn": [698, 995, 1044, 1046, 1049, 1057], "barnes_hut": [298, 698, 1046, 1047], "barnett": 1047, "barnhil": [599, 600], "barnowski": [1053, 1054], "barreca": [891, 1008], "barreto": 1053, "barri": [380, 1047], "barrier": 423, "barrycg": 1049, "bars_": 638, "bartelheim": 1050, "barth\u00e9lemi": [1055, 1056], "bartosz": 1048, "bart\u0142omiej": 1054, "barycent": [310, 1039], "basbug": 1046, "base": [1, 13, 18, 22, 29, 30, 31, 33, 39, 43, 50, 51, 52, 53, 54, 57, 61, 62, 63, 69, 83, 90, 91, 92, 101, 103, 104, 108, 112, 120, 124, 125, 136, 138, 139, 144, 149, 150, 151, 152, 154, 157, 159, 162, 167, 170, 171, 175, 180, 181, 183, 190, 192, 193, 194, 197, 198, 204, 205, 207, 208, 213, 214, 219, 220, 227, 236, 237, 239, 246, 253, 254, 256, 274, 275, 280, 295, 297, 298, 311, 316, 318, 319, 321, 323, 329, 331, 335, 342, 346, 352, 360, 363, 372, 373, 379, 380, 381, 382, 383, 386, 387, 388, 393, 397, 399, 400, 402, 409, 413, 414, 416, 420, 421, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 450, 452, 453, 454, 455, 456, 458, 462, 463, 467, 469, 470, 471, 472, 473, 493, 506, 507, 514, 515, 538, 539, 541, 542, 543, 544, 545, 547, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 584, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 622, 623, 624, 627, 630, 638, 639, 641, 642, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 670, 675, 677, 678, 679, 680, 681, 686, 688, 689, 691, 692, 693, 696, 698, 710, 723, 732, 741, 742, 743, 745, 747, 761, 762, 763, 791, 794, 801, 805, 806, 808, 809, 810, 812, 813, 815, 820, 824, 825, 826, 827, 834, 836, 840, 841, 844, 852, 853, 854, 856, 858, 860, 861, 862, 867, 868, 871, 872, 875, 882, 883, 885, 889, 890, 891, 899, 902, 903, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 933, 941, 967, 987, 989, 990, 992, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1027, 1032, 1034, 1035, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1057], "base_classifi": [340, 342, 1011], "base_clf": 443, "base_estim": [329, 387, 413, 559, 560, 561, 562, 841, 844, 907, 987, 1050, 1052, 1053, 1054, 1055], "base_estimator_": [559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 616, 907, 1054], "base_estimator__": 1054, "base_lr": [297, 841], "base_model": 414, "base_x_test": 110, "base_x_train": 110, "basebag": [1045, 1047], "basebal": [56, 380], "basedecisiontre": [1047, 1048, 1051], "basedictionarylearn": 1039, "baseensembl": [1046, 1049], "baseestim": [1, 90, 136, 253, 298, 385, 398, 399, 425, 430, 432, 433, 437, 438, 439, 607, 638, 639, 939, 1039, 1046, 1049, 1051, 1053, 1054], "basegradientboost": 1040, "baselabelpropag": 1046, "baselibsvm": 1049, "baselin": [61, 138, 148, 151, 162, 173, 194, 198, 237, 271, 287, 297, 329, 360, 382, 415, 424, 557, 558, 640, 998, 1001, 1032, 1055], "baseline_similar": 183, "baseline_similarity_bound": 183, "basemap": [49, 311], "basemixtur": [1047, 1048], "basemultilayerperceptron": [1047, 1049], "basenb": 1049, "baserandomproject": [902, 903], "basesearchcv": [1046, 1047], "basesgd": 1012, "basesgdclassifi": 1048, "baseshufflesplit": 1052, "bash": [373, 393], "bashrc": 393, "basi": [1, 42, 44, 52, 129, 175, 180, 182, 220, 315, 330, 348, 352, 377, 383, 386, 415, 420, 422, 458, 540, 628, 638, 645, 697, 889, 996, 1008, 1013, 1020, 1027, 1028, 1031, 1034, 1047, 1049, 1052], "basic": [151, 174, 175, 180, 181, 184, 187, 188, 217, 291, 325, 353, 372, 374, 385, 387, 389, 397, 399, 415, 419, 420, 422, 617, 628, 906, 918, 919, 920, 921, 987, 988, 1001, 1012, 1016, 1017, 1018, 1019, 1022, 1030], "basicconfig": 124, "basil": 1046, "basis_1": 220, "basis_2": 220, "basri": 519, "bassett": 994, "bastiaan": [1040, 1041], "bastian": 1047, "bat": 383, "batch": [1, 46, 49, 98, 124, 128, 311, 331, 374, 394, 399, 423, 446, 448, 453, 455, 457, 459, 537, 539, 540, 542, 543, 544, 545, 546, 548, 549, 551, 552, 670, 691, 692, 811, 824, 825, 845, 846, 847, 848, 849, 867, 868, 879, 880, 890, 903, 950, 964, 1002, 1003, 1012, 1039, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1054, 1055], "batch_dict_estim": 124, "batch_pca_estim": 124, "batch_siz": [1, 53, 56, 76, 98, 124, 127, 128, 360, 420, 455, 540, 542, 543, 544, 545, 552, 866, 867, 868, 950, 951, 964, 1040, 1047, 1050, 1052, 1053], "batch_size_": 540, "batchkarov": [1040, 1044], "batiss": 1050, "batista": [1047, 1048, 1052], "batistaki": 415, "batoul": 1052, "battista": 1050, "batula": 1046, "bauk": [1047, 1048], "baum": 452, "baumgartn": 1046, "baxlei": 1046, "bay": [1, 31, 63, 66, 141, 157, 175, 208, 267, 279, 359, 380, 413, 420, 422, 423, 542, 555, 556, 662, 845, 846, 847, 848, 849, 891, 992, 993, 994, 1008, 1020, 1032, 1034, 1039, 1040, 1041, 1042, 1047, 1049, 1052, 1054], "bayer": [0, 1039, 1040, 1044, 1057], "bayesian": [1, 45, 63, 88, 99, 122, 187, 188, 197, 203, 207, 220, 225, 261, 263, 267, 268, 280, 288, 292, 303, 308, 319, 322, 323, 420, 443, 530, 534, 538, 617, 650, 651, 662, 663, 803, 804, 871, 873, 885, 890, 987, 1017, 1019, 1020, 1033, 1034, 1045, 1052], "bayesiangaussianmixtur": [1, 262, 263, 268, 804, 997, 1045, 1047, 1048, 1052, 1053, 1057], "bayesianridg": [1, 88, 186, 198, 199, 203, 329, 633, 650, 994, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056], "baz": [387, 587], "baze": 1048, "bbbbbb": 98, "bbox": [47, 50, 69, 79, 130, 262, 263, 264, 267, 268, 320], "bbox_arg": 47, "bbox_to_anchor": [42, 71, 184, 282, 354], "bc": 322, "bcde": 148, "bcross_val": 1039, "bde": 148, "bdegraaff": 1054, "bdt": 140, "beach": 1047, "beam": [141, 1039], "bear": [422, 1017], "bearer": 1047, "beat": 271, "beatrizsmg": 1051, "beauchamp": [1040, 1043], "beaugnon": 1049, "becam": [159, 400, 1047], "becaus": [42, 43, 51, 56, 61, 63, 74, 81, 84, 104, 114, 117, 138, 143, 146, 151, 154, 173, 176, 179, 182, 191, 192, 194, 199, 205, 212, 219, 223, 225, 227, 237, 252, 253, 263, 271, 274, 277, 278, 283, 297, 298, 314, 315, 316, 318, 322, 323, 324, 325, 339, 348, 352, 359, 360, 361, 363, 367, 368, 372, 373, 380, 387, 390, 393, 397, 398, 399, 406, 409, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 428, 438, 453, 454, 467, 471, 481, 488, 489, 490, 540, 542, 558, 560, 562, 564, 566, 568, 571, 574, 576, 613, 614, 617, 638, 639, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 682, 683, 684, 685, 686, 695, 705, 715, 718, 719, 727, 728, 729, 730, 752, 769, 791, 794, 800, 806, 820, 834, 838, 843, 844, 853, 856, 858, 860, 861, 862, 868, 879, 880, 888, 890, 891, 895, 896, 898, 899, 900, 901, 911, 913, 916, 919, 921, 962, 988, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001, 1003, 1005, 1008, 1013, 1014, 1022, 1031, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1055], "becker": [415, 1022, 1042, 1051], "becom": [84, 89, 91, 105, 112, 149, 191, 221, 223, 253, 256, 279, 298, 319, 323, 348, 352, 359, 368, 379, 385, 387, 389, 393, 399, 400, 415, 417, 422, 423, 425, 446, 456, 460, 461, 463, 559, 587, 594, 595, 597, 625, 633, 664, 665, 682, 684, 884, 910, 911, 917, 993, 994, 995, 997, 1001, 1008, 1013, 1030, 1032, 1040, 1047, 1048, 1051, 1052, 1053, 1054, 1056], "bednar": 1046, "bedroom": [318, 380], "been": [0, 42, 47, 62, 78, 87, 94, 113, 129, 136, 138, 173, 175, 180, 182, 191, 243, 246, 248, 253, 254, 275, 277, 283, 327, 328, 329, 330, 331, 333, 334, 335, 339, 359, 368, 373, 379, 380, 382, 383, 384, 385, 387, 389, 391, 393, 394, 397, 398, 399, 400, 406, 409, 412, 413, 414, 415, 417, 419, 420, 422, 425, 440, 443, 475, 477, 478, 480, 484, 493, 529, 540, 542, 555, 556, 573, 574, 587, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 639, 640, 664, 665, 672, 673, 674, 679, 681, 682, 683, 684, 726, 784, 785, 786, 799, 806, 809, 810, 812, 820, 828, 829, 834, 835, 859, 907, 910, 988, 990, 991, 993, 994, 995, 998, 999, 1001, 1004, 1008, 1010, 1012, 1013, 1018, 1022, 1023, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "befor": [1, 46, 50, 61, 76, 103, 105, 108, 117, 149, 154, 159, 169, 182, 184, 185, 186, 188, 191, 192, 194, 200, 203, 207, 208, 212, 253, 271, 277, 284, 300, 301, 319, 322, 323, 325, 330, 351, 368, 372, 373, 380, 383, 385, 387, 388, 390, 391, 393, 394, 397, 399, 400, 402, 403, 409, 411, 413, 415, 416, 417, 419, 420, 422, 424, 427, 428, 449, 453, 454, 455, 465, 467, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 496, 507, 540, 543, 544, 545, 546, 547, 550, 552, 553, 567, 568, 571, 573, 575, 576, 583, 594, 595, 597, 617, 633, 634, 636, 651, 672, 673, 674, 677, 682, 684, 693, 698, 700, 803, 804, 811, 812, 824, 825, 827, 832, 834, 836, 850, 851, 858, 859, 860, 861, 862, 865, 870, 871, 874, 877, 884, 888, 889, 890, 891, 895, 896, 898, 899, 900, 901, 907, 918, 919, 947, 982, 988, 994, 995, 998, 1004, 1008, 1012, 1013, 1014, 1018, 1019, 1032, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "beforehand": [301, 1014], "begin": [56, 136, 173, 175, 272, 279, 297, 330, 359, 368, 385, 390, 391, 399, 412, 415, 422, 559, 560, 565, 567, 568, 672, 673, 682, 683, 684, 987, 990, 994, 998, 1008, 1010, 1012, 1047, 1053, 1054], "beginn": 1018, "behav": [42, 50, 86, 91, 223, 271, 272, 318, 329, 348, 368, 385, 391, 397, 398, 415, 416, 419, 890, 994, 1008, 1013, 1015, 1018, 1032, 1039, 1046, 1048, 1052, 1053], "behavior": [61, 71, 73, 86, 186, 188, 191, 192, 219, 237, 253, 268, 269, 271, 280, 282, 315, 316, 318, 320, 325, 348, 368, 373, 379, 382, 385, 387, 389, 393, 394, 399, 413, 414, 415, 419, 422, 423, 542, 557, 572, 672, 673, 674, 682, 683, 684, 705, 707, 735, 736, 789, 790, 793, 807, 808, 811, 823, 824, 825, 826, 827, 847, 883, 910, 911, 987, 994, 998, 999, 1004, 1008, 1013, 1019, 1022, 1023, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "behaviour": [73, 129, 154, 220, 221, 237, 350, 385, 399, 409, 415, 422, 565, 566, 570, 571, 608, 748, 807, 808, 811, 823, 824, 825, 826, 827, 908, 918, 919, 971, 987, 988, 998, 1008, 1047, 1050, 1051, 1054, 1055], "behind": [36, 87, 112, 138, 295, 387, 389, 393, 417, 422, 997, 1001, 1010, 1055], "behrend": 1049, "behrouz": 1053, "behzad": 1045, "beier": 1050, "beimportantfew": 1025, "being": [60, 63, 69, 79, 86, 89, 114, 117, 120, 129, 138, 142, 154, 156, 175, 180, 193, 196, 213, 253, 256, 270, 277, 316, 322, 323, 348, 352, 359, 361, 383, 384, 385, 387, 389, 390, 397, 399, 400, 414, 415, 417, 419, 422, 423, 424, 425, 426, 428, 447, 448, 450, 451, 456, 462, 475, 481, 499, 529, 575, 646, 655, 662, 678, 680, 693, 696, 700, 718, 724, 740, 742, 789, 795, 803, 850, 851, 856, 858, 860, 861, 862, 885, 903, 948, 987, 988, 994, 997, 998, 1001, 1004, 1005, 1008, 1010, 1012, 1013, 1014, 1039, 1040, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "beings": 359, "beirouti": 1046, "belatedli": 1046, "belief": [56, 277, 866, 1003], "believ": [359, 360, 393, 397, 1022], "belkin": 995, "belkina": [698, 995], "bell": [1, 527, 1047, 1049, 1051, 1052], "bella": 998, "bella2012": 998, "bellet": [1046, 1047, 1048], "belmont": [918, 919, 1014], "belong": [60, 63, 65, 89, 94, 256, 277, 327, 333, 339, 379, 380, 412, 413, 415, 416, 418, 419, 422, 430, 446, 449, 453, 454, 455, 457, 459, 529, 718, 737, 813, 819, 831, 877, 891, 954, 955, 994, 997, 998, 1000, 1001, 1002, 1004, 1013, 1017, 1023, 1030], "below": [0, 1, 47, 51, 61, 62, 63, 67, 69, 89, 94, 103, 108, 112, 119, 120, 124, 136, 142, 145, 146, 151, 168, 190, 192, 202, 215, 216, 219, 221, 235, 236, 240, 244, 248, 253, 256, 258, 260, 272, 275, 280, 282, 283, 284, 318, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 353, 359, 367, 368, 373, 378, 379, 383, 385, 387, 389, 390, 394, 399, 400, 403, 415, 417, 418, 419, 420, 422, 423, 424, 425, 450, 452, 454, 477, 478, 484, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 516, 537, 543, 548, 554, 588, 601, 602, 603, 604, 605, 606, 639, 652, 658, 664, 665, 673, 674, 679, 681, 698, 705, 711, 749, 769, 803, 804, 806, 817, 820, 839, 870, 873, 883, 884, 887, 893, 899, 987, 988, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1015, 1017, 1025, 1032, 1035, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "beltran": 1057, "ben": [1041, 1042, 1043, 1046, 1047, 1048, 1051, 1056], "ben3940": 1053, "benavoli": 277, "benbihi": 1048, "bench_k_mean": 92, "benchmark": [298, 329, 360, 361, 372, 378, 380, 385, 397, 403, 408, 413, 474, 521, 908], "benchmark_estim": 48, "benchmark_influ": 45, "benchmark_throughput": 48, "bend": 352, "benedek": 1055, "benedikt": 1043, "benediktsson": [1039, 1040, 1041], "benefici": [105, 107, 110, 124, 157, 271, 318, 319, 335, 409, 414, 995], "benefit": [42, 80, 90, 107, 108, 138, 139, 149, 154, 191, 233, 243, 249, 251, 271, 300, 331, 372, 385, 394, 399, 413, 415, 454, 467, 474, 514, 573, 574, 664, 665, 672, 673, 674, 682, 683, 684, 841, 908, 910, 987, 993, 1001, 1008, 1018, 1022, 1039, 1042, 1043, 1044, 1051, 1052, 1053, 1054], "benefit_cost": 271, "benfield": 1046, "bengio": [277, 867, 868, 987, 1011], "bengtsson": 1043, "benhel": 386, "benhur": 1052, "benign": [173, 382, 506], "benjamin": [647, 1041, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "benjamini": [601, 1045, 1046], "benjaminirv": 1044, "benjastudio": [1047, 1048], "benn": 1047, "bennett": [173, 382, 998], "benni": 1053, "benoit": 1056, "beno\u00eet": 1052, "benson": 56, "bentlei": 1001, "bera": 1054, "berei": 1053, "beren": 698, "berenbaum": 1055, "bereng": 1052, "berg": [380, 1040, 1041, 1051, 1056], "bergman": [1056, 1057], "bergstra": [987, 1039, 1040], "berk": 1039, "berkecanrizai": 1054, "berkelei": [647, 918, 919], "berlin": [180, 415, 420, 541, 702, 732, 762, 998], "bernardo": 1045, "bernd": 1054, "bernhard": [43, 420, 541, 841, 876, 906, 999, 1004, 1013, 1045], "bernhardsson": 1022, "berni": 1050, "bernoulli": [1, 316, 423, 424, 845, 846, 847, 848, 849, 866, 867, 868, 873, 994, 1008, 1020, 1034, 1039], "bernoullinb": [1, 157, 374, 846, 847, 848, 849, 999, 1000, 1040, 1041, 1043, 1046, 1051, 1052, 1054], "bernoullirbm": [1, 316, 867, 868, 1003, 1008, 1041, 1042, 1051, 1053, 1056], "bertin": 1022, "bertoncelj": 1050, "bertrand": [0, 404, 1039, 1045, 1046, 1051, 1052], "bertrandhaut": [1047, 1048], "besid": [159, 249, 291, 385, 390, 595, 987, 1047], "bessel": [425, 625], "bessi": 332, "besson": [1044, 1045], "best": [0, 42, 44, 46, 50, 51, 52, 56, 60, 62, 63, 74, 80, 88, 89, 95, 103, 104, 105, 106, 110, 116, 124, 128, 131, 132, 133, 141, 144, 148, 150, 151, 152, 154, 159, 162, 173, 175, 176, 181, 186, 191, 198, 203, 207, 208, 215, 233, 234, 235, 239, 242, 246, 251, 252, 256, 263, 264, 268, 270, 271, 275, 276, 277, 278, 281, 284, 285, 288, 289, 292, 297, 302, 307, 319, 324, 329, 330, 335, 348, 351, 352, 359, 360, 361, 366, 372, 373, 379, 382, 384, 385, 388, 391, 398, 399, 403, 406, 409, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 438, 449, 452, 453, 455, 457, 458, 459, 465, 468, 471, 478, 488, 489, 490, 544, 551, 552, 558, 560, 562, 563, 564, 565, 566, 568, 570, 571, 572, 574, 576, 599, 600, 603, 608, 616, 617, 641, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 694, 695, 696, 699, 700, 709, 714, 725, 726, 727, 728, 729, 730, 734, 735, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 789, 790, 791, 793, 796, 797, 798, 799, 800, 802, 803, 804, 806, 809, 810, 820, 833, 835, 838, 843, 844, 853, 861, 867, 868, 911, 913, 916, 918, 919, 920, 921, 987, 992, 993, 994, 995, 998, 1001, 1002, 1004, 1012, 1014, 1017, 1018, 1022, 1023, 1028, 1032, 1039, 1042, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1057], "best_alpha": [1030, 1039], "best_c": 355, "best_c_scal": 355, "best_clf": 106, "best_estim": [806, 809, 810, 820], "best_estimator_": [44, 88, 105, 106, 107, 110, 131, 252, 267, 271, 275, 277, 278, 281, 289, 302, 806, 809, 810, 820, 987, 1027, 1028, 1046], "best_idx": [56, 276], "best_index": [275, 281], "best_index_": [276, 281, 806, 809, 810, 820], "best_loss": [682, 684], "best_loss_": [867, 868, 1054], "best_low_complex": 276, "best_n_it": 465, "best_paramet": 278, "best_parameters_": 267, "best_params_": [104, 106, 151, 175, 252, 267, 275, 281, 329, 348, 398, 806, 809, 810, 820, 987, 1028, 1032], "best_recal": 275, "best_recall_std": 275, "best_recall_threshold": 275, "best_scor": 281, "best_score_": [104, 106, 252, 271, 278, 281, 282, 348, 414, 679, 681, 806, 809, 810, 820, 828, 1027, 1028, 1032, 1050], "best_score_idx": 276, "best_threshold_": [271, 291, 335, 828], "best_validation_score_": [867, 868, 1054], "beta": [1, 80, 116, 190, 223, 391, 413, 415, 418, 542, 544, 546, 553, 650, 735, 736, 742, 748, 789, 801, 803, 998, 1030, 1041, 1044, 1046, 1048, 1049], "beta_": [223, 420], "beta_1": [867, 868], "beta_2": [867, 868], "beta_k": 420, "beta_loss": [53, 544, 546, 553, 1046], "betatim": [143, 158, 1054], "better": [42, 43, 47, 51, 56, 57, 60, 66, 84, 89, 107, 108, 110, 111, 112, 113, 117, 120, 124, 127, 141, 144, 149, 150, 151, 154, 159, 168, 179, 180, 181, 183, 186, 191, 193, 199, 203, 205, 208, 219, 220, 221, 227, 234, 236, 237, 243, 251, 252, 253, 256, 267, 270, 271, 277, 279, 280, 283, 286, 287, 295, 297, 316, 322, 323, 331, 332, 348, 355, 359, 360, 361, 363, 368, 372, 380, 384, 385, 386, 387, 389, 390, 391, 393, 399, 402, 411, 413, 415, 417, 419, 420, 421, 422, 423, 425, 455, 456, 544, 546, 553, 565, 566, 567, 568, 613, 614, 636, 677, 683, 698, 715, 731, 740, 745, 748, 769, 804, 835, 845, 846, 847, 848, 849, 850, 851, 856, 867, 868, 887, 888, 891, 899, 902, 903, 910, 911, 987, 988, 990, 991, 992, 994, 995, 997, 998, 1000, 1001, 1002, 1006, 1008, 1011, 1012, 1014, 1018, 1022, 1025, 1027, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "better_prob": 277, "between": [1, 24, 36, 42, 43, 46, 47, 49, 50, 51, 57, 69, 71, 72, 73, 74, 76, 77, 87, 94, 95, 100, 116, 120, 127, 129, 132, 138, 141, 144, 148, 149, 151, 154, 168, 175, 180, 181, 183, 188, 190, 191, 192, 193, 198, 203, 205, 210, 214, 215, 219, 220, 221, 223, 224, 227, 237, 239, 246, 251, 253, 256, 269, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 289, 291, 295, 297, 300, 304, 305, 307, 308, 318, 323, 325, 330, 335, 340, 348, 352, 354, 355, 359, 360, 361, 367, 368, 372, 373, 380, 385, 387, 394, 397, 398, 399, 400, 406, 409, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 436, 446, 447, 450, 451, 452, 453, 456, 458, 459, 460, 462, 463, 464, 469, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 520, 521, 527, 530, 533, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 555, 556, 559, 560, 565, 566, 568, 569, 570, 571, 590, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 617, 626, 633, 638, 639, 640, 645, 648, 651, 652, 653, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 682, 684, 685, 687, 690, 694, 696, 698, 700, 701, 702, 705, 707, 709, 710, 711, 713, 715, 716, 720, 721, 722, 723, 725, 730, 731, 732, 735, 736, 737, 740, 742, 743, 749, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 793, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 811, 815, 823, 824, 825, 826, 827, 835, 836, 838, 840, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 867, 868, 874, 877, 878, 880, 881, 883, 884, 887, 888, 889, 891, 896, 899, 900, 904, 910, 911, 915, 918, 919, 920, 921, 923, 944, 955, 956, 967, 987, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1019, 1030, 1031, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "bewar": 424, "beyond": [42, 63, 220, 221, 271, 372, 374, 384, 385, 397, 413, 422, 735, 736, 744, 789, 790, 793, 915, 995, 999, 1008, 1013, 1018, 1047], "beyst": 1053, "bezuidenhout": 1052, "bf5fff": 122, "bfg": [314, 616, 617, 654, 655, 664, 675, 678, 680, 686, 693, 1001, 1002, 1054], "bgm": 803, "bharat": [419, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "bharathi": 1050, "bhardwaj": [1046, 1047], "bhargav": 1045, "bhaskaran": [1046, 1047], "bhat": [1052, 1054, 1055, 1056], "bhattacharya": 1047, "bhattarai": 1049, "bhavika": 1051, "bhoomika": 1054, "bhsu": 1043, "bhtsne": [698, 1046], "bi": [89, 423], "bia": [42, 63, 110, 126, 137, 145, 146, 151, 154, 188, 191, 193, 198, 199, 201, 282, 313, 352, 355, 368, 380, 387, 399, 413, 417, 421, 422, 425, 530, 562, 565, 566, 613, 614, 620, 648, 654, 655, 664, 665, 675, 676, 686, 867, 868, 883, 885, 889, 895, 896, 898, 899, 900, 901, 919, 993, 994, 997, 998, 1002, 1003, 1006, 1012, 1019, 1030], "bianca": 63, "bianp": 391, "bias": [47, 114, 127, 151, 158, 190, 191, 193, 282, 380, 402, 413, 422, 530, 555, 866, 890, 901, 993, 997, 1006, 1012, 1014], "bibhash": [1049, 1050], "bibl": 360, "bibliograph": 385, "bibtex": 0, "bic": [1, 164, 188, 197, 203, 205, 207, 213, 227, 424, 507, 657, 659, 660, 661, 662, 804, 871, 890, 987, 997, 1019, 1039, 1046, 1052, 1053], "bic_criterion": 207, "bicker": 1049, "biclust": [1, 5, 58, 103, 339, 341, 359, 360, 361, 423, 430, 455, 457, 459, 494, 517, 519, 597, 725, 801, 998, 1019, 1033, 1034, 1041, 1045], "bicluster_ncut": 56, "biclustermixin": 1, "biclusters_": [57, 58, 430, 457, 459], "bidu": [1052, 1053], "biernat": 1051, "big": [42, 78, 94, 96, 224, 240, 256, 268, 373, 385, 391, 400, 417, 423, 427, 544, 567, 568, 570, 571, 812, 834, 845, 846, 847, 848, 849, 1018, 1022, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "bigg": [425, 625], "bigger": [46, 74, 94, 232, 277, 316, 352, 357, 360, 371, 373, 423, 444, 445, 514, 544, 856, 1027, 1034], "biggest": [415, 418, 420, 449], "biggest_inertia": [415, 449], "biggio": 1050, "bigram": [278, 423, 594, 595, 597, 1032], "bigram_vector": 423, "bijil": 1053, "bike": 1005, "bike_shar": [42, 51], "bike_sharing_demand": [42, 51, 192], "bilbro": 1046, "bill": [1049, 1050], "billaud": 1047, "billi": 1043, "billing": [1042, 1043, 1044], "billion": 1022, "bimod": [322, 421], "bin": [1, 42, 60, 61, 63, 87, 108, 140, 144, 219, 250, 256, 271, 283, 303, 318, 319, 320, 321, 322, 324, 325, 383, 393, 403, 413, 421, 422, 444, 445, 454, 467, 567, 568, 873, 875, 889, 949, 1031, 1047, 1048, 1049, 1053, 1057], "bin_cent": [87, 219], "bin_edg": 87, "bin_edges_": [87, 319, 875], "bin_seed": [78, 97, 454, 467, 1050], "binar": [1, 35, 284, 286, 287, 377, 379, 760, 845, 874, 875, 877, 881, 883, 891, 894, 998, 1000, 1023, 1034, 1053, 1055], "binari": [1, 29, 46, 52, 61, 63, 142, 144, 155, 157, 170, 183, 191, 196, 210, 212, 219, 227, 240, 247, 256, 259, 271, 274, 275, 280, 286, 291, 293, 295, 302, 348, 352, 367, 368, 379, 380, 381, 387, 389, 390, 399, 403, 409, 412, 413, 414, 415, 422, 423, 425, 443, 444, 445, 458, 493, 506, 514, 515, 526, 529, 555, 556, 559, 561, 565, 567, 572, 573, 574, 587, 594, 595, 597, 599, 600, 608, 616, 633, 634, 635, 636, 637, 638, 639, 664, 665, 672, 674, 679, 680, 681, 682, 706, 709, 713, 714, 715, 718, 719, 721, 724, 726, 728, 733, 735, 736, 740, 741, 744, 745, 746, 747, 748, 749, 788, 789, 790, 793, 794, 795, 800, 802, 805, 806, 807, 809, 810, 811, 812, 820, 824, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 845, 856, 866, 877, 881, 883, 891, 894, 910, 912, 915, 961, 988, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1023, 1036, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1053, 1054, 1056, 1057], "binary_crossentropi": 1053, "binary_eros": 52, "binary_onli": [387, 1049, 1050], "binarytre": [855, 1043, 1047, 1051], "bincount": [399, 419, 563, 567, 570, 664, 665, 672, 674, 680, 681, 682, 910, 912, 915, 918, 920, 935, 936, 1046], "bind": [403, 1017, 1039, 1046, 1047], "binder": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367], "binesh": [1055, 1056], "binet": [1049, 1054], "bing": [1045, 1046], "bingham": 1010, "binned_numer": [219, 237], "binom": 994, "binomi": [150, 153, 422, 559, 565, 567, 994, 1053, 1056], "bio": 280, "bioinformat": [634, 988], "biologi": 49, "biometrika": [886, 898], "biostatist": [417, 484], "bipartit": [412, 459, 517, 1003], "biprateep": 1051, "birch": [1, 70, 78, 98, 121, 188, 331, 374, 399, 452, 455, 518, 1019, 1033, 1034, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "birch_model": 76, "bird": [588, 724, 760, 998], "birodkar": [1044, 1045, 1047], "bischl": 379, "bisect": [1, 70, 74, 91, 93, 94, 95, 184, 188, 273, 449, 453, 518, 1019, 1053], "bisect_km": 331, "bisect_mean": 449, "bisecting_strategi": [415, 449], "bisectingkmean": [1, 77, 415, 1053, 1054, 1055], "bisector": 69, "bishop": [538, 540, 547, 747, 803, 994, 999, 1013], "bistochast": [412, 457], "biswadip": 1049, "biswaroop": 1054, "bit": [42, 51, 63, 82, 87, 110, 127, 217, 221, 295, 318, 348, 360, 368, 372, 380, 383, 399, 403, 422, 423, 588, 595, 664, 840, 930, 931, 995, 999, 1016, 1025, 1032, 1039, 1042, 1045, 1047, 1048, 1051, 1052, 1053, 1056, 1057], "bithash": 646, "bithash_": 646, "bitli": 1022, "bitmap": 382, "bittarello": 1052, "bjerr": 1047, "bla": [372, 373, 383, 386, 391, 784, 1039, 1047, 1048, 1050, 1051, 1057], "black": [42, 47, 48, 49, 51, 62, 69, 78, 83, 89, 90, 112, 113, 122, 124, 147, 168, 171, 175, 176, 180, 181, 184, 187, 191, 192, 198, 207, 208, 209, 211, 215, 219, 220, 221, 225, 228, 231, 232, 237, 246, 256, 262, 265, 303, 313, 314, 316, 342, 357, 364, 365, 366, 385, 403, 408, 415, 422, 425, 561, 562, 637, 1004, 1005, 1014, 1017, 1023], "blackberri": 324, "blackburn": [1042, 1045], "blackd0t": 1049, "blair": [44, 380], "blakeflei": 1045, "blame": 385, "blanc": 324, "blanchard": [1043, 1044], "blank": [94, 390, 988, 1014], "bldgtype": 148, "bleed": 1022, "blei": [420, 542, 803], "bleich": [192, 1005], "bleki": 1051, "blend": [147, 159, 324, 399, 419, 1017], "bli": [373, 383, 397], "blind": [123, 126, 188, 218, 359, 420, 539, 547, 1019], "blindli": 389, "blink": 348, "blis_num_thread": 373, "blob": [1, 60, 68, 69, 76, 78, 91, 96, 98, 121, 415, 454, 518], "blobs_param": 246, "block": [1, 303, 318, 331, 380, 382, 385, 390, 393, 399, 412, 415, 418, 421, 458, 459, 468, 479, 485, 486, 494, 495, 517, 519, 701, 1001, 1003], "block_siz": [479, 485, 486, 1043], "blocker": [389, 1057], "blocknum": 46, "blockwis": [412, 994], "blog": [331, 372, 385, 391, 393, 400, 1050], "blogpost": 390, "blondel": [0, 60, 82, 129, 210, 220, 240, 254, 278, 359, 405, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1052], "blood": [173, 247, 382, 1030], "bloom": [394, 963], "blown": 351, "blue": [45, 47, 51, 57, 58, 62, 69, 112, 122, 124, 138, 141, 145, 153, 154, 156, 159, 161, 171, 180, 182, 196, 199, 207, 208, 215, 217, 242, 250, 270, 271, 272, 277, 314, 323, 328, 334, 339, 382, 415, 420, 1056], "blueviolet": [233, 304, 347], "blum": 1046, "blyston": [1049, 1050], "bmaisonn": 1051, "bmalezieux": 1052, "bmatrix": [412, 990], "bmc": 1008, "bmi": [173, 207, 208, 257, 382, 1006], "bmreinig": 1053, "bmug": 56, "bmva": 677, "bmvc": [677, 994], "bo": [62, 1051], "board": 0, "boat": 332, "bob": [1040, 1046], "bobyrev": 1046, "boca": 994, "bodega": 324, "bodenhof": [412, 725], "bodi": [46, 103, 173, 257, 332, 382], "body_bow": 103, "body_stat": 103, "boe": 50, "boechat": 1046, "boenisch": 1050, "boerner": 1053, "boersma": 1045, "bogazici": 382, "bogdan": 1039, "boggavarapu": 1051, "bohl": [1051, 1053], "bohn\u00e9": 1052, "boil": [138, 388, 399, 417], "boilerpl": [253, 387, 1022, 1032], "boisberrang": [0, 404, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "bold": [94, 151, 208, 214, 385], "boll": 994, "bolmier": [1050, 1051, 1055], "boltzmann": [1, 106, 116, 188, 209, 312, 508, 664, 719, 836, 866, 867, 868, 870, 896, 1019, 1033, 1034, 1041], "bommarito": [1042, 1043], "bonald": 1054, "bone": [232, 357], "bonferroni": 277, "bonn": [107, 142, 210, 251, 339, 355], "bonu": [237, 383, 385, 1027, 1032], "bonusmalu": [219, 237], "boo": [173, 382], "book": [82, 103, 449, 453, 455, 840, 845, 849, 994, 995, 996, 999, 1051], "booktitl": 0, "bool": [83, 100, 113, 187, 237, 367, 385, 427, 428, 429, 430, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 525, 528, 529, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 708, 709, 713, 714, 715, 717, 718, 719, 720, 732, 733, 734, 735, 736, 737, 744, 747, 748, 756, 757, 760, 762, 767, 769, 773, 775, 780, 784, 788, 789, 790, 791, 793, 795, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 820, 824, 825, 828, 829, 830, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 941, 947, 948, 960, 963, 969, 971, 979, 984, 985, 986, 988, 1048, 1051, 1052], "bool_": 221, "boolean": [1, 136, 253, 367, 380, 385, 387, 394, 416, 422, 423, 424, 470, 567, 568, 587, 588, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 635, 638, 639, 642, 655, 677, 705, 784, 839, 845, 866, 873, 893, 926, 982, 988, 994, 1000, 1005, 1008, 1014, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1057], "boom": 1057, "boost": [1, 13, 45, 51, 104, 137, 138, 139, 142, 143, 145, 146, 156, 159, 162, 188, 194, 199, 221, 227, 242, 276, 278, 314, 322, 324, 331, 334, 386, 391, 399, 414, 424, 454, 472, 473, 496, 502, 507, 526, 559, 560, 565, 566, 567, 568, 570, 571, 638, 639, 640, 641, 747, 748, 754, 756, 796, 806, 809, 810, 811, 827, 833, 836, 871, 883, 884, 994, 998, 1017, 1019, 1020, 1034, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1052], "booster": 1044, "boosting_error": 138, "boostingdecis": 422, "booth": 1046, "bootstrap": [141, 142, 150, 186, 280, 289, 329, 419, 422, 560, 561, 562, 563, 564, 569, 570, 571, 936, 969, 994, 1039, 1040, 1042, 1044, 1047, 1049, 1052], "bootstrap_featur": [422, 561, 562], "bootstrap_indic": 280, "borchmann": 1054, "border": [452, 1049], "borderaxespad": 112, "borderpad": 364, "borderwidth": 144, "borg": [696, 700, 995], "borgn": 1052, "bori": [1043, 1051, 1055], "borja": 1043, "born": 1045, "borovec": 1053, "borovikova": 1050, "bosch": 1052, "bossan": [1051, 1053, 1054, 1055, 1057], "bossch": [0, 404, 1046, 1047, 1048, 1052], "boston": 1022, "bot": [389, 1003, 1053, 1056, 1057], "botelho": 1051, "both": [29, 42, 43, 45, 47, 48, 51, 53, 57, 61, 62, 63, 69, 76, 88, 89, 98, 104, 110, 112, 116, 117, 129, 131, 136, 141, 144, 145, 148, 149, 154, 158, 159, 162, 168, 169, 171, 173, 175, 182, 184, 190, 191, 192, 193, 198, 203, 205, 207, 208, 219, 220, 221, 223, 224, 225, 227, 237, 243, 252, 253, 254, 262, 263, 264, 265, 266, 267, 271, 277, 278, 279, 280, 284, 286, 288, 293, 298, 310, 318, 322, 323, 327, 329, 333, 339, 340, 345, 350, 352, 359, 360, 361, 367, 368, 372, 373, 374, 378, 379, 380, 381, 383, 385, 387, 391, 392, 394, 397, 398, 399, 400, 403, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 428, 443, 452, 458, 468, 474, 481, 488, 489, 490, 491, 494, 495, 502, 503, 506, 508, 511, 513, 514, 515, 540, 544, 546, 553, 557, 561, 562, 563, 569, 570, 571, 572, 573, 583, 594, 595, 597, 603, 613, 614, 633, 638, 639, 649, 663, 664, 665, 678, 680, 682, 684, 693, 705, 710, 718, 722, 735, 736, 737, 742, 744, 763, 767, 773, 780, 784, 789, 790, 793, 794, 795, 801, 809, 810, 812, 829, 839, 867, 868, 882, 884, 886, 898, 903, 908, 910, 911, 918, 920, 934, 939, 948, 961, 973, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1027, 1031, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "botstein": [634, 988], "bottleneck": [372, 391, 422, 454, 867, 868], "bottom": [44, 46, 50, 52, 53, 69, 71, 73, 76, 78, 79, 85, 87, 96, 98, 121, 122, 149, 157, 162, 219, 230, 246, 262, 264, 265, 268, 274, 277, 288, 303, 318, 338, 340, 348, 385, 413, 415, 421, 593, 922, 992, 994, 998, 1006, 1018, 1028, 1031], "bottom_h": 318, "bottou": [682, 683, 684, 1002, 1012], "bou": [1054, 1055], "boucaud": 1047, "boucher": 1046, "bouckaert": 277, "boukhobza": 1057, "boulard": 1056, "bould": 415, "bouldin": [1, 731], "boulogn": 1042, "boun": 382, "bound": [1, 63, 89, 179, 181, 183, 188, 221, 237, 245, 276, 392, 415, 420, 423, 425, 426, 450, 495, 508, 518, 529, 542, 601, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 641, 643, 656, 660, 664, 683, 711, 741, 794, 803, 804, 850, 851, 887, 899, 902, 903, 904, 912, 913, 914, 917, 934, 994, 997, 998, 1001, 1010, 1012, 1013, 1015, 1019, 1047, 1050, 1051, 1053], "bound_": 542, "boundari": [1, 49, 52, 61, 62, 63, 66, 69, 92, 94, 137, 140, 147, 157, 161, 166, 176, 177, 179, 188, 192, 202, 220, 228, 246, 251, 254, 280, 292, 293, 306, 308, 309, 311, 313, 318, 320, 323, 336, 341, 343, 345, 346, 347, 348, 350, 356, 357, 364, 381, 413, 422, 423, 425, 456, 462, 510, 542, 555, 556, 575, 594, 595, 597, 637, 741, 767, 806, 839, 852, 858, 860, 861, 862, 885, 889, 906, 907, 912, 914, 915, 918, 934, 992, 1001, 1004, 1008, 1011, 1012, 1013, 1019, 1039, 1041, 1043, 1052, 1053, 1054, 1056], "bounding_ax_": [392, 638], "boundscheck": [373, 386], "bourassa": 422, "bourbeau": [1046, 1047, 1048], "bourboux": 1050, "bourguignat": 1044, "bournhonesqu": 1049, "bousquet": 906, "boutili": 1010, "boutsidi": 420, "bow": 416, "bown": 1045, "bowyer": 1057, "box": [42, 48, 65, 89, 192, 193, 240, 295, 318, 322, 392, 420, 422, 518, 561, 562, 886, 898, 922, 924, 998, 999, 1005, 1008, 1014, 1017, 1023, 1047, 1055], "boxplot": [48, 112, 152, 191, 194, 291, 327], "boxplot_runtim": 48, "boxstyl": [47, 320], "boy": 1053, "boyd": 994, "boyl": [1056, 1057], "boyuan": [1043, 1044, 1045], "bp": [48, 152, 173, 207, 208, 382, 1006], "bpo": 884, "br": 140, "br_estim": 186, "bracket": [385, 994], "bradi": 1046, "bradlei": [173, 382, 994], "bradshaw": [1042, 1043, 1046], "bradypu": [49, 311, 380, 504], "bradypus_variegatus_0": 49, "brain": 379, "branch": [372, 383, 385, 388, 389, 415, 422, 448, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 918, 919, 920, 921, 923, 1001, 1005, 1014], "branching_factor": 448, "brand": [400, 403], "brandon": [1045, 1046, 1053, 1054], "brandt": 1050, "brandyn": 1039, "brault": 1046, "braun": 1047, "bravi": 1045, "braycurti": [456, 463, 705, 784, 785, 786, 1001], "braycurtisdist": 705, "brc": [415, 448], "bre": [1, 640, 1014], "bread": 1022, "breadth": [850, 851, 855, 1022, 1041], "breadth_first": [850, 851, 855], "break": [1, 54, 73, 80, 103, 113, 188, 208, 211, 225, 253, 264, 295, 330, 338, 343, 359, 361, 385, 387, 389, 391, 398, 415, 475, 518, 645, 780, 784, 787, 803, 883, 890, 895, 912, 915, 994, 997, 1006, 1008, 1013, 1018, 1019, 1039, 1040, 1046, 1047, 1049, 1051, 1055], "break_ti": [356, 912, 915, 1013, 1049], "breakdown": [112, 113, 236, 685, 994], "breakdown_": 685, "breast": [1, 173, 378, 506, 1006, 1034, 1044], "breast_canc": 340, "breast_cancer_data": 173, "brecht": 647, "bredin": 1043, "breiman": [193, 419, 422, 522, 523, 524, 561, 562, 570, 571, 640, 918, 919, 1006, 1014], "brekk": 1054, "bremen": [60, 61, 62, 63, 175, 176, 178, 179, 180, 181, 182, 184, 252], "brendan": [72, 446, 460, 1055, 1056, 1057], "brenden": 1053, "brenner": 998, "breno": [1046, 1047], "brent": [1043, 1047, 1048], "brentfagan": 1048, "brett": [1042, 1044, 1045, 1046, 1047, 1054], "brettingen": 1045, "breuer": 1050, "breunig": [415, 456, 463, 856, 1004], "breve": 1055, "brevin": [1055, 1056], "brew": [150, 383, 403], "brian": [0, 80, 405, 714, 998, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053], "brice": [1051, 1052], "bridg": [397, 995, 1017], "brief": 996, "briefli": [286, 384, 398, 422, 987, 1049], "brier": [1, 60, 61, 63, 413, 715], "brier1950": 998, "brier_scor": 60, "brier_score_loss": [1, 60, 61, 413, 998, 1047, 1048, 1049, 1057], "brigata": 382, "bright": 348, "brighter": 183, "brigi": [1050, 1051], "brigitta": [1049, 1050, 1051, 1055], "bring": [191, 318, 420, 682, 684, 995, 1017, 1022], "british": 423, "brittl": [73, 415], "broad": [385, 399, 1017], "broadcast": 633, "broader": [320, 994, 1021], "broadli": [399, 415], "brocchini": 1051, "brochart": 1056, "brockherd": 1041, "brodersen": 714, "broke": 1046, "broken": [403, 419, 605, 606, 641, 726, 926, 998, 1014, 1042, 1046, 1047, 1048, 1050, 1053], "brook": [1042, 1043, 1051], "brought": [190, 559, 560, 563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "brown": [49, 122, 311, 380, 504, 634, 988, 1044, 1046, 1047, 1048, 1051], "brows": 389, "browser": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 385, 393, 1008, 1056], "broyden": 994, "brr": 198, "brr_poli": 198, "brr_score": 198, "bruce": [1049, 1050], "brucher": [0, 405, 1039], "brummitt": [1046, 1047], "brunak": 749, "brunner": 1043, "bruno": [1050, 1051, 1052, 1057], "brutal": 348, "brute": [298, 397, 410, 419, 426, 450, 452, 456, 463, 638, 639, 694, 695, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 1005, 1034, 1043, 1047, 1051, 1054, 1055, 1056, 1057], "bry": [211, 228], "bryan": [1039, 1042, 1048, 1049, 1052], "br\u00f6mmel": [1053, 1054], "br\u00fblade": 324, "bsa": 770, "bsas_in_radian": 770, "bscikit": 1039, "bsd": [43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 66, 67, 71, 73, 74, 76, 79, 80, 81, 82, 85, 86, 87, 88, 91, 95, 99, 100, 101, 103, 104, 106, 107, 108, 114, 119, 120, 124, 126, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 149, 150, 152, 153, 154, 158, 159, 173, 175, 176, 178, 179, 180, 181, 182, 184, 187, 196, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 220, 221, 224, 226, 227, 235, 236, 240, 241, 242, 244, 246, 249, 251, 252, 254, 256, 262, 264, 278, 281, 283, 290, 297, 298, 300, 306, 307, 308, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 337, 338, 339, 340, 342, 352, 353, 355, 356, 359, 360, 361, 391, 397], "bsh": 1054, "bsmtfinsf1": [148, 159], "bsmtfinsf2": 148, "bsmthalfbath": 148, "bsmtunfsf": 159, "bspline": 889, "bsplines_": [220, 889], "bsr": [930, 931, 1052], "bt": 423, "btol": [678, 680], "buck": 633, "budarz": 1052, "buddha": 1044, "budget": [0, 148, 845, 846, 847, 848, 849, 987], "bueno": 770, "buffer": [84, 1052], "buffer_mb": 1039, "bug": [253, 327, 328, 329, 330, 331, 332, 333, 334, 335, 383, 387, 388, 390, 393, 397, 399, 1018, 1039, 1040, 1041, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "bugfix": [389, 1039, 1053], "buguen": 1039, "buhmann": 714, "build": [0, 1, 6, 16, 34, 42, 45, 54, 67, 77, 89, 101, 107, 128, 138, 147, 149, 156, 162, 170, 172, 185, 186, 188, 191, 227, 282, 285, 295, 297, 298, 315, 316, 319, 324, 325, 361, 368, 372, 373, 374, 381, 387, 388, 389, 390, 391, 399, 403, 408, 415, 419, 422, 423, 448, 496, 507, 509, 530, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 591, 592, 594, 595, 597, 633, 634, 636, 697, 719, 720, 807, 811, 815, 824, 830, 832, 871, 888, 890, 918, 919, 920, 921, 923, 943, 987, 988, 995, 998, 1002, 1004, 1008, 1013, 1014, 1017, 1018, 1019, 1021, 1022, 1024, 1026, 1030, 1031, 1039, 1042, 1044, 1045, 1046, 1048, 1051], "build_analyz": [423, 594, 595, 597, 1049], "build_clib": 383, "build_ext": [383, 391], "build_numb": 373, "build_preprocessor": [423, 594, 595, 597, 1049], "build_projection_oper": 52, "build_token": [56, 423, 594, 595, 597], "build_tool": 389, "builder": [46, 48, 355, 389], "buildtool": 383, "built": [1, 24, 65, 117, 136, 138, 139, 147, 149, 193, 227, 280, 295, 311, 327, 364, 367, 372, 380, 383, 385, 386, 387, 389, 391, 393, 394, 397, 398, 399, 403, 409, 415, 416, 419, 422, 424, 451, 509, 559, 560, 561, 562, 565, 566, 567, 568, 594, 595, 599, 603, 645, 646, 647, 648, 649, 652, 653, 658, 664, 666, 667, 668, 669, 678, 679, 680, 681, 687, 809, 810, 817, 841, 844, 850, 851, 920, 921, 982, 994, 998, 999, 1011, 1012, 1014, 1017, 1022, 1032, 1039, 1042, 1043, 1045, 1051], "builtin": 1013, "buitinck": [0, 53, 359, 360, 361, 405, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "bulk": [286, 426, 450], "bulk_benchmark": 48, "bulk_benchmark_estim": 48, "bulk_runtim": 48, "bull": 1046, "buluttekin": 1049, "bumblebe": 1052, "bunch": [1, 49, 253, 378, 379, 380, 470, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 516, 573, 574, 575, 576, 638, 639, 640, 869, 870, 918, 919, 920, 921, 955, 958, 1022, 1032, 1044, 1046, 1049, 1051, 1055], "bundl": [1047, 1048], "bupu": 192, "burden": [385, 882, 1018], "bureau": 380, "buri": 385, "burjek": 1039, "burk": [0, 369, 1054], "burn": [1046, 1047], "burst": 998, "busch": [1047, 1048, 1050], "bush": [44, 380], "busi": [42, 219, 277, 335, 393, 397, 414, 794, 994, 998, 1022], "business_metr": 271, "business_scor": 271, "bussonni": [1039, 1051], "butler": [480, 1042, 1050, 1051], "butlerdavi": 480, "butter": 1022, "button": [385, 393], "butyugina": 1055, "buuren": [633, 988], "buzenet": [1054, 1055], "bv_bunch": 49, "bwignal": 1042, "bydat": 1032, "bypass": [414, 416, 605, 652, 658, 828, 918, 919, 920, 921, 1055], "byproduct": 243, "byrd": 664, "byron": 1051, "byte": [82, 87, 423, 493, 509, 514, 515, 588, 594, 595, 597, 963, 1030, 1032, 1039, 1046, 1047, 1054, 1057], "bz2": [54, 514, 515], "bz2file": 54, "bzip2": 1039, "b\u00e9gude": 324, "c": [1, 42, 44, 45, 46, 49, 50, 51, 56, 60, 61, 63, 65, 66, 69, 73, 74, 76, 77, 79, 86, 90, 91, 93, 94, 95, 99, 104, 105, 107, 117, 120, 121, 122, 129, 130, 138, 140, 141, 147, 148, 155, 157, 158, 160, 161, 166, 173, 176, 177, 178, 179, 183, 196, 202, 204, 209, 210, 211, 212, 214, 216, 217, 226, 228, 230, 231, 232, 233, 235, 236, 239, 240, 241, 243, 244, 251, 252, 254, 258, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 280, 282, 286, 288, 298, 301, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 316, 318, 319, 320, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 364, 365, 366, 372, 373, 379, 380, 382, 383, 385, 386, 387, 388, 390, 393, 394, 397, 403, 406, 412, 413, 415, 416, 417, 418, 419, 420, 422, 424, 428, 443, 448, 449, 452, 453, 455, 465, 474, 481, 529, 534, 540, 544, 546, 547, 553, 555, 556, 596, 613, 614, 616, 637, 645, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 679, 685, 691, 692, 694, 695, 698, 699, 714, 720, 721, 724, 737, 741, 747, 748, 764, 765, 806, 820, 829, 835, 837, 845, 846, 847, 848, 849, 850, 851, 857, 859, 866, 881, 883, 884, 885, 889, 891, 905, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 925, 930, 931, 961, 987, 990, 991, 993, 994, 995, 996, 998, 1000, 1001, 1003, 1005, 1008, 1010, 1012, 1013, 1014, 1017, 1022, 1023, 1027, 1028, 1030, 1031, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1055], "c0": [148, 249, 324], "c1": [99, 148, 183, 249, 324], "c2": [99, 148, 183, 249, 324], "c22": 332, "c26": 332, "c3": [99, 148, 324], "c4": [99, 324, 1020, 1034], "c5": [99, 1020, 1034], "c56poni": 1049, "c6": 99, "c99": 1017, "c_": [49, 61, 62, 63, 92, 112, 125, 147, 150, 156, 157, 166, 177, 217, 232, 235, 246, 304, 321, 323, 342, 348, 356, 357, 415, 665, 720, 721, 724, 998, 1027, 1030, 1031], "c_0": [990, 996], "c_1": 995, "c_2": [415, 995], "c_2d_rang": 348, "c_e": 415, "c_i": [415, 1001], "c_j": [415, 1003], "c_jh_j": 1003, "c_k": 555, "c_option": 105, "c_p": 994, "c_q": 415, "c_rang": 348, "c_scale": 355, "ca": [173, 382, 415, 448, 918, 919, 1010, 1014], "cabernet": 324, "cabin": 332, "cablevis": 50, "cabrera": 1049, "cach": [1, 51, 88, 100, 188, 278, 298, 299, 301, 306, 310, 372, 373, 380, 399, 447, 451, 456, 474, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 514, 515, 806, 852, 854, 870, 871, 908, 912, 913, 914, 915, 916, 983, 1001, 1013, 1019, 1042, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1057], "cache_path": 1001, "cache_s": [474, 908, 912, 913, 914, 915, 916, 1013], "cached_pip": [105, 416], "cachedir": [88, 105, 394, 416], "caching_dir": 983, "caherrera": 1052, "cai": 1052, "caicedo": 1039, "caio": [1045, 1047, 1049], "caj": 50, "caje": 1040, "cal_clf": 62, "cal_clf_prob": 62, "cal_hous": 380, "cal_scor": 62, "calcot": 1052, "calcsiz": 383, "calcul": [1, 45, 60, 62, 68, 80, 93, 112, 136, 137, 138, 142, 160, 187, 188, 194, 215, 223, 224, 236, 251, 253, 276, 277, 283, 287, 292, 297, 346, 352, 353, 368, 372, 392, 399, 406, 412, 413, 415, 419, 420, 422, 426, 444, 449, 450, 452, 454, 456, 457, 459, 461, 462, 477, 478, 484, 487, 542, 553, 559, 570, 575, 603, 617, 626, 638, 639, 640, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 685, 687, 690, 694, 696, 698, 700, 713, 722, 735, 736, 741, 742, 744, 750, 756, 757, 760, 770, 775, 777, 778, 779, 780, 784, 787, 789, 790, 793, 794, 795, 798, 799, 801, 813, 815, 831, 835, 848, 850, 851, 888, 889, 890, 896, 900, 910, 911, 936, 949, 990, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1006, 1008, 1011, 1013, 1019, 1027, 1030, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "cald": 905, "caleb": 1051, "calibr": [1, 51, 65, 141, 154, 161, 237, 249, 271, 277, 279, 399, 406, 443, 444, 445, 518, 521, 570, 575, 664, 665, 682, 715, 735, 747, 790, 793, 794, 805, 828, 836, 848, 907, 910, 938, 987, 994, 998, 1011, 1013, 1019, 1020, 1034, 1036, 1043, 1045], "calibrated_classifi": 62, "calibrated_classifiers_": [62, 413, 443], "calibrated_clf": 443, "calibrated_df": [61, 63], "calibrated_forest": 987, "calibratedclassifiercv": [1, 60, 61, 62, 368, 399, 406, 413, 682, 805, 828, 987, 1013, 1018, 1043, 1045, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "calibratedclassifiercvifittedcalibratedclassifiercv": 62, "calibration_curv": [1, 60, 413, 443, 444, 1048, 1053, 1057], "calibration_displai": [61, 63], "calibrationdisplai": [1, 61, 63, 413, 938, 1052, 1053, 1057], "california": [1, 149, 183, 186, 187, 318, 324, 329, 378, 382, 496, 1034], "calinski": [1, 716, 1045], "calinski_harabasz_scor": [1, 415, 1047], "calinski_harabaz_scor": [1045, 1047], "cali\u0144ski": 415, "call": [51, 52, 54, 80, 82, 84, 88, 104, 122, 136, 143, 150, 170, 175, 179, 181, 183, 190, 192, 207, 219, 220, 223, 237, 253, 257, 259, 260, 271, 277, 278, 286, 292, 293, 295, 298, 300, 323, 325, 329, 330, 359, 360, 361, 367, 372, 373, 374, 380, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 403, 406, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 427, 438, 446, 449, 452, 453, 455, 456, 457, 458, 459, 460, 463, 466, 468, 470, 471, 474, 475, 480, 488, 489, 490, 494, 497, 498, 501, 503, 509, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 583, 588, 589, 594, 595, 597, 603, 608, 613, 614, 616, 617, 620, 626, 633, 634, 635, 636, 637, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 710, 738, 748, 761, 777, 780, 784, 785, 786, 787, 799, 803, 804, 806, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 859, 861, 866, 867, 868, 869, 870, 873, 874, 875, 877, 879, 880, 882, 887, 890, 891, 894, 899, 900, 901, 902, 903, 907, 910, 911, 912, 913, 915, 916, 919, 921, 937, 941, 946, 947, 955, 956, 958, 964, 965, 969, 972, 982, 987, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1010, 1011, 1013, 1014, 1017, 1022, 1023, 1027, 1030, 1031, 1032, 1034, 1036, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "callabl": [1, 267, 281, 335, 399, 419, 422, 423, 424, 426, 427, 447, 449, 450, 451, 452, 453, 455, 456, 458, 463, 465, 466, 470, 471, 472, 473, 537, 539, 541, 543, 545, 551, 552, 563, 564, 565, 566, 567, 568, 570, 571, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 616, 617, 626, 634, 636, 640, 645, 649, 665, 672, 677, 679, 681, 694, 697, 698, 702, 717, 725, 738, 748, 777, 780, 784, 785, 786, 787, 798, 799, 806, 809, 810, 812, 820, 828, 829, 832, 833, 834, 835, 837, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 874, 883, 905, 906, 912, 913, 914, 915, 916, 959, 965, 968, 982, 987, 998, 1008, 1039, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1055], "callback": [537, 543, 545, 551, 552, 859, 964, 1018, 1055], "callbl": 852, "calle": [1, 253, 956], "caller": [1, 253, 416, 652, 653, 658, 666, 667, 668, 687, 900, 901, 955, 956, 974, 975, 976, 1048], "callgrin": 391, "callgrind": 388, "calm": 50, "caltech": 359, "calvin": [1042, 1043], "calvo": [1047, 1048], "cambridg": [380, 420, 596, 845, 849, 994, 996, 1000], "came": 997, "camera_ind": 52, "camil": [1047, 1055, 1056], "camila": 1049, "camilaagw": 1049, "camilo": 1045, "campello": [415, 452], "campustrampu": 1046, "can": [0, 10, 18, 24, 36, 42, 43, 45, 46, 47, 48, 50, 51, 53, 56, 57, 60, 61, 62, 63, 66, 67, 68, 71, 74, 76, 77, 80, 82, 83, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 103, 104, 105, 106, 110, 111, 112, 113, 114, 117, 120, 125, 127, 128, 129, 131, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 169, 170, 171, 172, 173, 175, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 203, 204, 207, 208, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 227, 235, 236, 237, 239, 240, 241, 246, 247, 248, 249, 250, 252, 253, 256, 257, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 284, 286, 288, 289, 291, 292, 293, 295, 297, 298, 300, 302, 303, 304, 305, 307, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 342, 345, 346, 348, 351, 352, 355, 359, 360, 361, 365, 366, 367, 368, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 438, 440, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 478, 488, 489, 490, 493, 502, 505, 509, 514, 515, 518, 527, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 585, 586, 587, 588, 589, 590, 594, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 640, 641, 644, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 695, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 710, 713, 715, 717, 718, 724, 726, 727, 728, 729, 730, 732, 733, 735, 736, 738, 739, 743, 744, 745, 746, 748, 749, 752, 758, 761, 762, 763, 764, 765, 769, 785, 786, 788, 789, 790, 791, 793, 794, 795, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 883, 884, 885, 888, 889, 890, 895, 902, 903, 908, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 922, 923, 926, 928, 930, 934, 936, 941, 944, 946, 947, 953, 955, 958, 961, 964, 968, 969, 972, 979, 982, 983, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "canberra": [456, 463, 705, 784, 785, 786, 1001], "canberradist": 705, "cancel": [422, 423, 769], "cancer": [1, 173, 378, 414, 506, 599, 600, 857, 1006, 1034, 1044], "candela": 382, "candid": [107, 267, 275, 278, 285, 329, 374, 385, 389, 415, 422, 454, 456, 806, 809, 810, 818, 820, 994, 1001, 1014, 1045], "candidate_idx": 276, "cannon": 1054, "cannot": [42, 51, 74, 90, 108, 114, 124, 129, 146, 191, 192, 203, 219, 237, 253, 318, 348, 355, 374, 384, 386, 391, 397, 399, 400, 409, 415, 416, 417, 419, 420, 422, 423, 425, 471, 527, 544, 545, 546, 549, 553, 616, 619, 620, 621, 623, 625, 626, 628, 629, 631, 657, 661, 688, 698, 717, 723, 784, 809, 810, 857, 858, 860, 861, 862, 870, 871, 875, 880, 881, 892, 928, 930, 931, 987, 988, 992, 994, 995, 998, 999, 1004, 1008, 1013, 1014, 1018, 1022, 1025, 1027, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "canon": [1, 50, 399, 413, 422, 488, 489, 491, 774, 1018, 1020, 1034], "canonic": 399, "cant": [1056, 1057], "cantor": [634, 988], "canuma": 1052, "canva": 50, "cao": 415, "cap": [412, 415, 761, 998, 1048], "capabl": [89, 90, 117, 154, 180, 223, 243, 387, 399, 403, 999, 1002, 1013, 1014, 1022, 1039, 1048, 1056], "capac": [154, 175, 193], "capit": [48, 61, 334, 502, 812, 829], "capitain": 1057, "cappion": [698, 995], "cappuzzo": 1056, "capsiz": 340, "caption": 103, "captur": [1, 42, 47, 50, 51, 71, 73, 117, 151, 156, 168, 180, 191, 198, 203, 219, 223, 268, 297, 328, 348, 352, 393, 415, 422, 423, 424, 577, 594, 595, 597, 856, 965, 998, 1003, 1011, 1015, 1030, 1051], "car": 219, "carbal": 1056, "card": 1047, "cardin": [71, 145, 146, 152, 193, 194, 324, 325, 333, 415, 422, 469, 559, 560, 563, 564, 565, 566, 570, 571, 572, 685, 883, 884, 891, 918, 919, 920, 921, 998, 999, 1006, 1008, 1053, 1054], "cardiotocogram": 256, "care": [46, 89, 152, 191, 271, 295, 352, 372, 374, 389, 391, 397, 399, 400, 409, 414, 415, 417, 423, 443, 466, 475, 646, 664, 665, 672, 673, 674, 682, 683, 684, 701, 910, 995, 1013, 1022, 1055], "carefulli": [291, 372, 420, 1013], "carei": [1042, 1043, 1044, 1045, 1046], "carett": 1046, "cari": 1051, "carl": [180, 425, 616, 617, 620, 625, 628], "carla": 1055, "carlo": [0, 251, 375, 422, 425, 617, 647, 648, 990, 1003, 1039, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "carlson": 1046, "carlsson": 1042, "carmen": 324, "carnegi": 905, "caro": 1044, "carodorum": 324, "carol": [1045, 1046], "carolin": 1002, "carrascosa": [1022, 1043], "carre\u00f1o": 1054, "carri": [50, 66, 138, 187, 271, 277, 280, 285, 314, 320, 361, 400, 423, 563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 1022, 1031], "carrillo": 1044, "carsten": 1052, "cart": [1020, 1034], "carter": [1045, 1046, 1054], "cartesian": [104, 412, 639, 1001, 1054], "cartman_nabana": 1049, "cartograph": 196, "cartographi": 994, "caruana": [61, 63, 413, 443, 445], "carvaj": 1039, "casado": 1050, "casagrand": [1047, 1048], "casalegno": 1051, "cascad": 382, "case": [1, 29, 42, 45, 46, 51, 61, 63, 69, 71, 83, 86, 89, 91, 95, 100, 104, 105, 113, 117, 129, 131, 141, 143, 144, 151, 152, 159, 170, 172, 173, 175, 182, 191, 192, 194, 203, 205, 208, 210, 219, 220, 221, 223, 224, 227, 233, 235, 236, 237, 246, 250, 251, 252, 253, 256, 257, 267, 270, 271, 274, 276, 277, 278, 280, 283, 284, 286, 295, 298, 301, 305, 315, 318, 320, 323, 325, 327, 330, 335, 352, 359, 360, 361, 367, 368, 372, 373, 374, 379, 380, 385, 386, 387, 389, 390, 391, 392, 394, 397, 398, 399, 400, 403, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 443, 446, 449, 450, 452, 453, 457, 459, 469, 470, 471, 473, 480, 502, 514, 515, 521, 545, 547, 548, 549, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 588, 594, 597, 599, 600, 603, 608, 612, 615, 616, 617, 631, 633, 634, 636, 638, 653, 654, 659, 662, 663, 664, 665, 667, 669, 672, 674, 675, 678, 680, 681, 682, 686, 688, 689, 690, 691, 692, 693, 705, 709, 714, 715, 718, 724, 726, 727, 729, 732, 734, 735, 736, 740, 741, 744, 748, 749, 751, 752, 754, 756, 759, 760, 762, 769, 784, 787, 789, 790, 791, 793, 794, 795, 796, 800, 802, 804, 806, 809, 810, 812, 820, 824, 829, 830, 831, 832, 833, 834, 835, 837, 839, 847, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 870, 877, 879, 880, 883, 884, 885, 888, 889, 890, 891, 894, 900, 901, 902, 903, 910, 912, 915, 918, 919, 925, 926, 936, 947, 948, 987, 988, 990, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1014, 1017, 1018, 1022, 1023, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "caselli": [1047, 1048], "cash": 994, "cashman": 1049, "casino": [1053, 1054], "cass": 1045, "cassi": 324, "cast": [49, 51, 87, 219, 240, 379, 400, 423, 502, 650, 651, 652, 658, 662, 663, 666, 667, 668, 669, 670, 671, 679, 681, 963, 1046, 1047, 1048, 1049, 1052, 1054, 1056], "castachick": 1050, "castello": 1043, "castor": 1050, "caswel": [1052, 1055], "cat": [50, 104, 192, 193, 256, 330, 331, 332, 333, 334, 335, 380, 423, 494, 588, 718, 724, 760, 789, 891, 998, 1008, 1048, 1049, 1051], "cat_column": 256, "cat_linear_processor": 159, "cat_proc": [248, 328], "cat_selector": 159, "cat_str": 56, "cat_tree_processor": 159, "catajara": 1049, "catalfo": 1047, "catalin": 648, "catastroph": [325, 769, 1018], "catch": [78, 96, 315, 373, 393, 394], "catch_warn": [78, 96, 253, 314, 315], "categor": [1, 42, 104, 137, 143, 154, 159, 188, 191, 192, 193, 219, 237, 256, 258, 260, 271, 325, 330, 332, 333, 374, 377, 379, 380, 387, 390, 399, 416, 423, 472, 473, 495, 496, 502, 511, 567, 568, 587, 588, 613, 614, 638, 639, 654, 664, 665, 675, 686, 715, 833, 845, 846, 847, 848, 849, 871, 873, 877, 878, 881, 883, 884, 891, 905, 906, 988, 994, 1005, 1006, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1032, 1034, 1039, 1040, 1043, 1044, 1047, 1049, 1051, 1054, 1055, 1056, 1057], "categori": [1, 24, 56, 78, 96, 103, 104, 148, 159, 191, 192, 219, 227, 234, 256, 271, 278, 314, 315, 320, 324, 325, 329, 332, 334, 341, 359, 360, 361, 379, 380, 394, 415, 416, 422, 423, 425, 494, 502, 503, 509, 567, 568, 654, 664, 665, 675, 686, 749, 764, 765, 846, 883, 884, 891, 988, 994, 995, 996, 1000, 1006, 1023, 1032, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "categorical_column": [42, 148, 191, 193, 256, 473], "categorical_columns_selector": 256, "categorical_columns_subset": 148, "categorical_crossentropi": [1049, 1053], "categorical_encod": 193, "categorical_featur": [42, 104, 148, 154, 192, 271, 324, 329, 330, 331, 332, 334, 390, 422, 567, 568, 638, 639, 1005, 1047, 1051, 1054, 1056], "categorical_preprocessor": [258, 324], "categorical_transform": 104, "categoricalnb": [1, 845, 847, 848, 849, 1000, 1049, 1050, 1051, 1052, 1054], "categories_": [883, 884, 891, 1008, 1047, 1054], "category_1_fold": 509, "category_2_fold": 509, "category_count_": 846, "category_s": 360, "categr": 1006, "caterpillar": 50, "cathi": [1043, 1049], "catindex": 192, "catplot": 267, "caught": [385, 393, 409], "caus": [42, 61, 63, 151, 176, 191, 217, 219, 223, 224, 237, 297, 325, 352, 361, 368, 383, 390, 413, 415, 420, 421, 423, 425, 449, 453, 455, 465, 515, 538, 588, 595, 616, 617, 784, 845, 846, 847, 849, 874, 883, 885, 888, 889, 930, 931, 987, 988, 994, 998, 1006, 1008, 1011, 1018, 1023, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056], "causal": [188, 189, 214, 663, 791, 836, 1019], "causat": 191, "caution": [191, 271, 389, 446, 460, 1047], "cautiou": 1046, "caveat": [419, 425], "cawlei": [282, 998], "cax": [65, 178, 288], "ca\u00f1ardo": 1042, "cb": [178, 250, 266], "cbar_ax": 288, "cbar_kw": [198, 203], "cc": [74, 383], "cc18": 379, "cc_home": [918, 919], "cca": [1, 254, 418, 489, 491, 999, 1043, 1047, 1048, 1049, 1051, 1053, 1057], "ccat": 380, "ccf2002": 990, "cclauss": 1047, "cco": 359, "ccp_alpha": [327, 363, 563, 564, 565, 566, 570, 571, 918, 919, 920, 921, 1014, 1049], "ccp_path": [918, 919, 920, 921], "cd": [124, 173, 382, 383, 385, 389, 391, 420, 477, 478, 484, 537, 543, 545, 546, 549, 551, 552, 553, 994, 1032, 1044, 1054], "cdef": 386, "cdf": 277, "cdist": 1052, "cdivis": 386, "cdot": [277, 352, 412, 415, 420, 421, 425, 620, 621, 625, 628, 629, 876, 990, 992, 998, 1002, 1008], "cdrig": 1053, "cdt": 56, "cea": [845, 1000], "ceballo": 1053, "ceder": [794, 998], "ceethinwa": [1051, 1052], "ceh": 1054, "ceil": [154, 256, 563, 564, 565, 566, 569, 570, 571, 572, 600, 677, 809, 810, 918, 919, 920, 921, 1012], "celelibi": 1048, "celeo": 1043, "celeux": 534, "cell": [49, 50, 57, 62, 67, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 173, 180, 191, 192, 193, 200, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 311, 316, 324, 328, 329, 331, 332, 334, 339, 367, 382, 390, 698, 998, 999, 1045, 1053], "cellular": 52, "celsiu": [192, 1005], "cemlyn": 1057, "cen": 749, "censor": 1017, "censu": 380, "center": [0, 1, 35, 42, 45, 46, 47, 52, 60, 62, 68, 69, 71, 72, 74, 76, 77, 79, 82, 83, 84, 87, 89, 90, 93, 94, 95, 97, 98, 113, 121, 129, 130, 133, 149, 150, 151, 152, 171, 173, 187, 192, 200, 211, 213, 219, 220, 230, 231, 242, 243, 246, 247, 256, 262, 265, 266, 272, 278, 288, 303, 306, 308, 314, 318, 320, 321, 331, 339, 346, 348, 349, 350, 354, 360, 361, 380, 381, 382, 390, 415, 417, 418, 420, 421, 422, 428, 446, 448, 449, 452, 453, 454, 455, 458, 460, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 507, 518, 530, 540, 541, 547, 550, 556, 612, 615, 616, 617, 638, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 684, 696, 700, 702, 803, 875, 876, 879, 888, 890, 900, 901, 910, 911, 992, 994, 995, 997, 1005, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1056], "center1": 100, "center2": 100, "center3": 100, "center4": 100, "center_": 888, "center_box": [94, 518], "centers_0": 321, "centers_1": 321, "centers_init": 93, "cento": 383, "centr": 158, "central": [0, 52, 221, 380, 386, 415, 1004, 1017], "centrality_scor": 54, "centroid": [1, 76, 79, 91, 92, 110, 188, 299, 306, 321, 331, 360, 381, 406, 415, 448, 449, 452, 453, 454, 455, 458, 465, 466, 468, 510, 555, 637, 857, 1019, 1020, 1034, 1039, 1043, 1046, 1051, 1055], "centroids_": [448, 452, 857], "ceo": 1022, "cerda": 1053, "certain": [51, 89, 149, 154, 191, 224, 236, 253, 277, 298, 322, 352, 368, 380, 381, 389, 399, 402, 409, 415, 420, 424, 644, 655, 659, 664, 669, 690, 870, 875, 910, 987, 990, 994, 995, 998, 999, 1002, 1008, 1013, 1017, 1023, 1027, 1044, 1048, 1051, 1054], "certainli": [87, 103, 191, 360, 414], "certainti": [277, 387, 748, 998], "ceshin": 1045, "cetina": 1051, "cf": [325, 414, 415, 418, 448, 706, 994, 1008, 1018], "cflag": 383, "cft": 415, "cftree": 448, "cg": [316, 664, 665, 678, 680, 693, 994, 1043, 1044, 1046, 1050, 1052, 1053, 1056, 1057], "cga": 183, "cgi": 903, "cgohlk": [1042, 1043], "cgroup": [1052, 1053], "cgsavard": [1049, 1050], "ch": [221, 340, 342], "ch6": 536, "chacon": 711, "chac\u00f3n": 711, "chad": 1056, "chadi": 1047, "chai": [1051, 1054, 1055], "chain": [1, 34, 102, 108, 138, 165, 188, 249, 285, 288, 296, 298, 301, 316, 368, 377, 397, 399, 425, 502, 508, 547, 617, 633, 664, 744, 806, 836, 839, 841, 842, 843, 844, 870, 871, 890, 987, 988, 999, 1003, 1015, 1017, 1019, 1022, 1032, 1034], "chain_jaccard_scor": 297, "chain_method": [841, 1057], "chain_method_": 841, "chaitanya": 1050, "chaitanyamog": 1051, "chakhchoukh": 113, "chakravarti": [641, 643], "chalearn": 998, "challeng": [50, 159, 175, 192, 198, 237, 246, 374, 380, 381, 409, 415, 417, 468, 478, 998, 1004, 1022, 1023], "chalmer": 1053, "chalmerlow": 1042, "chalulu": 1054, "chan": [0, 848, 890], "chanc": [1, 54, 70, 72, 83, 138, 168, 188, 194, 219, 227, 234, 237, 277, 283, 286, 287, 324, 355, 360, 368, 384, 414, 415, 419, 706, 708, 710, 711, 714, 722, 761, 763, 792, 801, 835, 998, 1006, 1014, 1019, 1055], "chance_level_": [706, 708, 1055], "chance_level_kw": [256, 706, 708, 1055], "chandra": [1049, 1050, 1053], "chang": [1, 45, 61, 62, 63, 124, 128, 129, 141, 144, 152, 176, 186, 190, 191, 194, 220, 221, 223, 224, 257, 258, 271, 272, 277, 284, 287, 291, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 348, 352, 361, 367, 368, 372, 373, 374, 380, 387, 388, 389, 390, 393, 397, 399, 406, 415, 419, 422, 423, 425, 427, 440, 443, 446, 449, 450, 453, 455, 458, 460, 465, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 499, 500, 502, 510, 514, 515, 518, 519, 520, 528, 533, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 594, 595, 596, 597, 599, 600, 603, 608, 616, 617, 619, 620, 621, 623, 625, 626, 628, 629, 631, 633, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 696, 698, 700, 706, 710, 713, 718, 722, 723, 735, 736, 742, 743, 761, 763, 784, 790, 791, 793, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 820, 824, 825, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 860, 861, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 882, 883, 889, 890, 891, 898, 899, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 928, 930, 931, 942, 947, 957, 964, 965, 968, 987, 988, 989, 997, 998, 999, 1001, 1008, 1011, 1012, 1013, 1014, 1018, 1023, 1032, 1037, 1038, 1058], "changed_onli": 1050, "changedbehaviorwarn": 1051, "changedbehaviourwarn": 1048, "changelog": [332, 389, 399, 1037], "changing_param": 45, "changing_param_valu": 45, "changyao": [1054, 1055], "channel": [373, 380, 383, 403, 423, 499, 500, 589, 590, 592, 593, 1021], "channel_prior": 383, "chapman": 994, "chapter": [124, 368, 387, 415, 420, 422, 425, 536, 538, 540, 620, 625, 628, 649, 988, 991, 994, 1013, 1014], "char": [423, 594, 595, 597, 1039], "char_wb": [423, 594, 595, 597], "charact": [361, 385, 390, 399, 423, 509, 514, 515, 594, 595, 597, 922, 1003, 1032, 1039, 1052, 1054], "character": [74, 237, 363, 415, 419, 995], "characteris": 1001, "characterist": [1, 78, 96, 173, 180, 188, 246, 247, 259, 269, 271, 272, 274, 318, 368, 380, 382, 390, 413, 414, 419, 422, 425, 509, 510, 629, 644, 664, 708, 712, 714, 733, 788, 794, 795, 825, 836, 839, 877, 915, 994, 1019], "chardet": 423, "chardetect": 423, "charg": [0, 271, 385], "charikar": 990, "charl": [63, 271, 770, 1039, 1042, 1045, 1049, 1051, 1054], "charli": [1046, 1047, 1055], "charlton": 1046, "charra": [1054, 1056, 1057], "charron": [1022, 1042, 1043, 1050, 1051, 1052], "charset": [1039, 1041], "charset_error": 1041, "chart": [71, 149, 282, 999, 1025, 1042], "chartbeat": 1022, "chase": [50, 1039], "chasnovski": 1050, "chat": 1022, "chatterje": 1050, "chaudhuri": 452, "chauhan": [1047, 1048, 1054, 1055], "chaumond": [1022, 1047], "chauvin": 749, "chavez": [44, 380], "chawla": 1049, "chayant": 1046, "chazalon": 1053, "cheaper": [192, 415, 425, 679, 990, 994], "cheat": [51, 348, 1002, 1012, 1025, 1041], "chebee7i": 1043, "chebyshev": [456, 463, 705, 784, 785, 786, 1001], "chebyshevdist": 705, "check": [1, 40, 42, 43, 46, 54, 80, 87, 90, 128, 136, 144, 159, 175, 188, 190, 192, 193, 205, 207, 208, 219, 240, 253, 263, 269, 271, 286, 295, 330, 339, 367, 372, 373, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 397, 399, 403, 406, 409, 416, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 497, 508, 514, 515, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 693, 694, 695, 696, 697, 698, 699, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 930, 931, 932, 941, 942, 953, 954, 955, 959, 960, 982, 983, 984, 986, 993, 994, 995, 998, 1013, 1014, 1018, 1019, 1022, 1034, 1039, 1040, 1042, 1046, 1050, 1051, 1052, 1053, 1054, 1056], "check_arrai": [1, 387, 394, 474, 540, 908, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "check_classifier_multioutput": 1049, "check_consistent_length": 1, "check_cv": [1, 399, 1044], "check_decision_proba_consist": 1046, "check_estim": [1, 327, 387, 399, 942, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "check_estimator_sparse_arrai": 1057, "check_estimator_sparse_data": 1057, "check_estimator_sparse_matrix": 1057, "check_estimators_fit_returns_self": 942, "check_estimators_pickl": 1056, "check_fit_idempot": 1048, "check_increas": 1, "check_input": [540, 554, 652, 653, 658, 666, 667, 668, 687, 693, 918, 919, 920, 921, 1047], "check_invers": [416, 471, 874, 1008, 1047, 1053, 1054], "check_is_fit": [1, 90, 136, 253, 388, 394, 399, 1049, 1052, 1053], "check_memori": [1, 394, 399, 1046], "check_metadata": 253, "check_methods_sample_order_invari": [1051, 1053], "check_methods_subset_invari": [1047, 1053], "check_nam": 387, "check_pairwise_arrai": 1048, "check_random_st": [1, 95, 235, 241, 249, 255, 387, 394, 399], "check_regressor_multioutput": 1049, "check_requires_y_non": 1053, "check_sample_weights_pandas_seri": 1047, "check_scalar": [1, 1053], "check_scor": [1, 399, 1057], "check_set_param": 1047, "check_symmetr": 1, "check_transformer_data_not_an_arrai": 1049, "check_transformers_unfitted_stateless": 1055, "check_x_i": [1, 387, 394, 1043, 1047, 1048, 1053], "checked_cv": 830, "checker": [1, 389, 830], "checkerboard": [1, 57, 412, 457, 459, 517, 519], "checking_statu": 271, "checkingclassifi": 1049, "checklist": 388, "checkout": [383, 385, 389, 393], "checkpoint": 1017, "checks_gener": 941, "checksum": 1051, "cheeseman": 382, "chege": 1053, "chemic": 382, "chemometr": 382, "chen": [110, 111, 417, 422, 428, 481, 732, 762, 990, 998, 1042, 1045, 1046, 1047, 1049, 1052, 1053, 1054, 1055], "chenal": [1048, 1049, 1051], "cherkasski": 994, "chernyi": 1053, "cherri": 389, "cherti": 1043, "cherubin": 1045, "chestervil": 332, "cheuk": [1047, 1048], "cheung": [80, 1040], "chevali": 1051, "chevalli": 1056, "chevron": 50, "chi": [1, 104, 112, 138, 322, 377, 424, 525, 598, 601, 602, 604, 605, 606, 610, 611, 612, 615, 644, 645, 646, 647, 648, 764, 765, 1034, 1039, 1044, 1045], "chi2": [1, 104, 423, 424, 458, 587, 598, 601, 602, 604, 605, 606, 611, 612, 615, 626, 644, 645, 646, 647, 648, 649, 765, 771, 780, 1039, 1046, 1053], "chi2_featur": 648, "chi2_kernel": [1, 644, 648, 764, 771, 996, 1040], "chi2_stat": 610, "chi2sampl": 644, "chiang": 1047, "chiara": [0, 376, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "chibuik": 1052, "chief": 1022, "chieh": [1046, 1047], "chigurupati": 1051, "chih": [664, 1044], "chilamkurthi": 1045, "child": [154, 253, 359, 367, 373, 397, 399, 406, 415, 422, 448, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 918, 919, 920, 921, 955, 956, 958, 1014, 1046], "child_idx": 75, "children": [367, 415, 422, 447, 451, 469, 572, 1043, 1056], "children_": [75, 447, 451, 469], "children_left": 367, "children_right": 367, "chime": 384, "chin": [382, 1043], "china": [82, 415, 512, 513, 590, 593], "chines": 1017, "chinmaya": 1046, "chinthala": 1046, "chiotelli": 1048, "chip": [411, 1022], "chirag": 90, "chisquar": 322, "chitteti": 1053, "chkoar": 1046, "chloe": 1053, "cho": 1050, "choe": 1048, "choi": [994, 1057], "choic": [1, 42, 45, 63, 74, 80, 89, 99, 103, 110, 131, 154, 175, 176, 182, 186, 208, 220, 256, 270, 275, 277, 280, 291, 303, 325, 329, 359, 360, 368, 372, 383, 387, 390, 399, 403, 415, 417, 419, 421, 422, 424, 425, 458, 468, 477, 478, 479, 480, 481, 482, 484, 544, 546, 547, 553, 565, 644, 653, 654, 662, 664, 665, 667, 675, 686, 698, 711, 748, 839, 852, 853, 858, 860, 861, 887, 890, 899, 901, 910, 911, 934, 987, 992, 994, 995, 996, 997, 998, 999, 1001, 1004, 1006, 1011, 1012, 1013, 1014, 1046, 1049, 1050, 1054, 1055], "choleski": [111, 219, 237, 394, 477, 478, 484, 533, 617, 654, 656, 657, 660, 661, 662, 664, 665, 675, 678, 680, 686, 688, 689, 693, 803, 804, 994, 1042, 1046, 1048, 1051, 1054, 1055], "cholesky_delet": 394, "cholesterol": [173, 382], "chong": 542, "choo": [1054, 1055], "choos": [42, 49, 50, 78, 80, 84, 87, 94, 96, 100, 110, 130, 147, 159, 164, 173, 191, 194, 212, 254, 271, 272, 282, 289, 363, 368, 372, 373, 374, 387, 390, 393, 399, 409, 414, 415, 417, 419, 422, 423, 426, 449, 450, 453, 455, 465, 529, 538, 544, 565, 566, 588, 608, 664, 665, 678, 680, 685, 693, 694, 695, 699, 732, 762, 806, 809, 810, 820, 877, 910, 911, 918, 919, 920, 921, 988, 989, 993, 994, 995, 996, 997, 1001, 1008, 1011, 1012, 1013, 1024, 1026, 1030, 1031, 1041, 1042, 1046, 1048, 1050], "choose_check_classifiers_label": 1049, "choose_random_sampl": 387, "choraria": 1051, "chose": [76, 191, 1027], "chosen": [46, 57, 80, 106, 159, 176, 191, 192, 208, 220, 236, 254, 270, 271, 272, 274, 280, 291, 360, 368, 372, 397, 414, 415, 417, 418, 422, 425, 446, 452, 455, 457, 459, 460, 466, 502, 529, 541, 563, 564, 565, 566, 567, 568, 570, 571, 653, 659, 662, 664, 665, 667, 669, 677, 682, 683, 684, 685, 686, 696, 700, 800, 803, 804, 806, 809, 810, 820, 840, 859, 910, 911, 918, 919, 920, 921, 947, 987, 990, 992, 994, 995, 997, 999, 1004, 1005, 1012, 1027, 1028, 1030, 1031, 1047, 1055, 1056], "chou": [1046, 1047], "choudhari": [1043, 1044, 1053, 1055], "choudhri": 1057, "chowdhuri": [1047, 1053], "choyal": [1046, 1047], "chri": [0, 405, 1039, 1042, 1047, 1048, 1049, 1050, 1053], "chrissobel": 1052, "christ": 56, "christian": [0, 56, 220, 221, 359, 360, 380, 404, 1022, 1032, 1039, 1040, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "christianwaldmann": 1054, "christin": [1054, 1055], "christo": [90, 1048, 1049, 1051, 1053, 1056], "christof": [1043, 1044], "christoph": [192, 420, 425, 538, 616, 617, 620, 625, 628, 803, 994, 999, 1040, 1044, 1047, 1050, 1051, 1052, 1053, 1054], "christopherlim98": 1053, "chrome": 1008, "chronolog": [380, 503], "chu": [857, 1055], "chuan": 1002, "chugh": 1051, "chuliang": 1052, "chun": [1050, 1051, 1053, 1054, 1055], "chung": [1046, 1047], "chunk": [1, 46, 84, 372, 373, 415, 420, 426, 450, 455, 474, 544, 784, 787, 838, 839, 845, 846, 847, 848, 849, 908, 1000, 1046, 1047, 1048, 1049, 1050], "chunk_siz": 1040, "chunker": 423, "church": [903, 1010], "chyi": [53, 1042, 1043, 1044, 1045, 1046], "chyikwei": 53, "ci": [89, 373, 388, 389, 393, 1000, 1045, 1047], "ciccolella": [698, 995], "cice": [1005, 1053], "cichocki": [420, 544, 546, 553], "cimport": [386, 394, 1047], "cindi": [1044, 1052, 1056, 1057], "cio": 379, "cipri\u00e1n": 1053, "circl": [1, 69, 94, 129, 157, 158, 166, 244, 254, 305, 308, 314, 318, 320, 339, 352, 366, 381, 389, 393, 415, 458, 468, 520, 528, 770, 1013], "circle1": 100, "circle2": 100, "circle3": 100, "circle4": 100, "circleci": [140, 179, 181, 183, 184, 211, 228, 263, 272, 316, 353, 364, 385], "circlecl": 0, "circuit": [56, 995], "circular": 52, "circumst": [131, 237, 1001, 1017], "circumstanti": 219, "cirru": [0, 385], "cisco": 50, "citat": [0, 379, 382, 397], "cite": [379, 397, 415], "citi": [416, 423, 472, 1032], "citizen": 1008, "city_categori": 416, "city_london": 416, "city_pari": 416, "city_sallisaw": 416, "cityblock": [74, 78, 415, 456, 463, 768, 784, 785, 786, 1001], "cividi": 74, "ciyou": 664, "cj": [1000, 1042, 1043, 1044, 1045, 1046], "cjlin": [196, 379, 493, 514, 515, 664, 1042], "ckdtree": [426, 450, 1041], "cl": [0, 46, 50, 392, 399, 920], "cla": 130, "clabel": [178, 230], "clae": 1047, "clai": [337, 338, 339, 342, 1039], "claim": [188, 197, 385, 470, 502, 558, 654, 675, 686, 712, 751, 756, 758, 836, 871, 874, 875, 883, 890, 994, 1019], "claimamount": 237, "claimnb": [219, 237], "clair": 1039, "clamp": [906, 1011], "clang": [383, 386], "clara": [379, 1051], "clare": 1049, "clarifi": [393, 400, 799], "clariti": [171, 385, 393], "clark": 50, "class": [1, 3, 26, 29, 42, 46, 47, 48, 49, 52, 56, 59, 60, 61, 63, 65, 69, 74, 88, 89, 90, 92, 104, 105, 120, 121, 122, 129, 132, 134, 136, 137, 144, 146, 154, 155, 160, 173, 175, 176, 178, 179, 183, 184, 186, 188, 191, 192, 196, 197, 209, 210, 211, 227, 231, 234, 235, 240, 246, 253, 254, 256, 262, 263, 264, 269, 270, 271, 272, 277, 279, 283, 287, 288, 291, 295, 297, 298, 301, 303, 304, 306, 307, 308, 309, 323, 327, 331, 333, 334, 335, 337, 339, 340, 343, 344, 346, 348, 349, 352, 356, 359, 360, 361, 364, 367, 374, 377, 379, 380, 381, 382, 385, 386, 387, 389, 390, 391, 392, 394, 397, 398, 403, 406, 409, 410, 411, 413, 415, 416, 418, 420, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 506, 508, 509, 510, 514, 515, 516, 518, 520, 521, 525, 528, 529, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 581, 583, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 726, 728, 733, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 760, 761, 763, 788, 789, 790, 792, 793, 794, 795, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 935, 936, 937, 938, 939, 941, 942, 954, 955, 956, 959, 964, 966, 968, 969, 982, 984, 987, 988, 989, 990, 992, 993, 994, 995, 997, 999, 1000, 1002, 1005, 1006, 1008, 1009, 1011, 1014, 1018, 1019, 1020, 1022, 1023, 1027, 1030, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "class1_1": 161, "class2_1": 161, "class_0": [227, 382, 516], "class_1": [227, 382, 516], "class_2": [382, 516], "class_count_": [845, 846, 847, 848, 849], "class_id": [286, 287], "class_index": 89, "class_label": [399, 563, 567, 570, 664, 665, 672, 674, 680, 681, 682, 805, 828, 918, 920, 936, 1013], "class_likelihood_ratio": [1, 280, 998, 1054], "class_log_prior_": [845, 846, 847, 849], "class_memb": 72, "class_member_mask": 83, "class_nam": [140, 270, 891, 922, 923, 924, 1014, 1055], "class_name0": [431, 448, 449, 451, 453, 455, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 876, 902, 903], "class_name1": [431, 448, 449, 451, 453, 455, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 876, 902, 903], "class_name2": [431, 448, 449, 451, 453, 455, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 876, 902, 903], "class_of_interest": [65, 286, 637, 1056], "class_prior": [380, 845, 846, 847, 849, 1040, 1043], "class_prior_": [557, 848], "class_protein_loc": 295, "class_sep": [172, 308, 521, 805, 828], "class_weight": [1, 44, 350, 399, 563, 567, 570, 664, 665, 672, 674, 680, 681, 682, 683, 910, 912, 915, 917, 918, 920, 935, 936, 987, 1012, 1013, 1028, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1053, 1054], "class_weight_": [912, 915, 1054], "class_weight_vect": 935, "classes_": [136, 211, 228, 247, 253, 286, 337, 338, 385, 387, 399, 440, 443, 444, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 599, 600, 616, 637, 664, 665, 672, 674, 680, 681, 682, 703, 706, 708, 794, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 852, 857, 860, 867, 870, 877, 878, 881, 891, 905, 906, 907, 910, 912, 915, 918, 920, 923, 998, 1009, 1012, 1040, 1043, 1044, 1046, 1049, 1051], "classic": [54, 214, 243, 262, 268, 352, 382, 389, 417, 419, 420, 449, 453, 455, 465, 498, 506, 510, 516, 547, 638, 639, 920, 921, 992, 994, 997, 1000, 1008, 1017, 1026, 1039, 1040, 1044, 1053], "classif": [1, 13, 18, 29, 30, 37, 39, 41, 44, 45, 48, 56, 59, 60, 61, 63, 66, 69, 79, 90, 104, 105, 106, 110, 111, 116, 118, 122, 127, 136, 138, 140, 142, 144, 145, 146, 147, 152, 154, 155, 157, 161, 163, 166, 168, 169, 170, 172, 173, 174, 180, 181, 182, 191, 192, 196, 197, 209, 210, 211, 212, 219, 227, 229, 231, 232, 234, 245, 247, 251, 252, 253, 256, 259, 265, 266, 269, 270, 274, 275, 276, 277, 278, 286, 291, 292, 293, 295, 296, 299, 300, 306, 307, 308, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 337, 342, 343, 344, 348, 351, 353, 354, 355, 356, 358, 360, 361, 368, 372, 374, 378, 379, 380, 382, 387, 390, 394, 398, 399, 410, 413, 414, 415, 416, 419, 420, 422, 423, 424, 432, 443, 475, 481, 488, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 516, 518, 520, 521, 525, 526, 528, 529, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 575, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 615, 616, 617, 619, 620, 628, 637, 638, 639, 649, 664, 665, 672, 674, 680, 681, 682, 703, 709, 711, 714, 718, 719, 721, 722, 724, 732, 733, 735, 736, 740, 741, 744, 747, 748, 749, 760, 762, 764, 765, 767, 788, 789, 790, 792, 793, 794, 795, 800, 802, 805, 806, 807, 809, 810, 811, 812, 820, 824, 825, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 852, 857, 859, 860, 866, 867, 868, 870, 874, 877, 882, 883, 884, 885, 890, 891, 894, 896, 905, 906, 907, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 933, 936, 944, 987, 988, 990, 991, 992, 995, 996, 1000, 1003, 1005, 1006, 1008, 1009, 1011, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "classifi": [1, 29, 44, 45, 46, 47, 59, 62, 64, 65, 67, 69, 90, 103, 104, 105, 106, 107, 120, 129, 134, 138, 139, 140, 141, 142, 145, 146, 147, 150, 157, 160, 161, 166, 169, 170, 171, 172, 177, 188, 193, 194, 196, 197, 209, 210, 211, 217, 219, 226, 228, 231, 234, 237, 246, 249, 251, 253, 259, 270, 271, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 293, 295, 296, 300, 306, 307, 309, 313, 316, 320, 329, 330, 334, 336, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 351, 352, 356, 357, 361, 380, 382, 385, 387, 390, 397, 399, 406, 414, 415, 416, 419, 423, 424, 425, 432, 440, 441, 442, 443, 444, 445, 494, 495, 502, 510, 518, 520, 521, 528, 537, 542, 543, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 572, 573, 574, 575, 576, 599, 600, 608, 612, 616, 628, 635, 637, 638, 639, 655, 664, 665, 672, 674, 677, 678, 679, 680, 681, 682, 703, 704, 706, 708, 709, 713, 714, 715, 717, 718, 719, 724, 726, 728, 732, 733, 735, 736, 738, 740, 741, 744, 745, 746, 747, 748, 749, 760, 762, 788, 789, 790, 793, 794, 795, 800, 802, 805, 806, 809, 810, 812, 820, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 857, 858, 860, 861, 866, 867, 868, 870, 871, 877, 890, 891, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 939, 941, 987, 988, 990, 993, 994, 995, 998, 999, 1000, 1003, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "classification_data": 45, "classification_report": [1, 44, 67, 103, 170, 275, 316, 337, 338, 828, 998, 1028, 1032, 1041, 1043, 1047, 1048, 1049, 1051, 1055, 1057], "classificationcriterion": 1047, "classifier_": [90, 253], "classifier_01": 335, "classifier_05": 335, "classifier__c": 104, "classifier__criterion": 258, "classifier__max_depth": 258, "classifier__max_featur": 258, "classifier__min_samples_leaf": 193, "classifier__n_estim": 258, "classifier__n_neighbor": 300, "classifier_idx": 65, "classifier_model": 300, "classifier_other_threshold": 805, "classifier_tun": 828, "classifierchain": [1, 297, 399, 406, 842, 844, 1046, 1051, 1054, 1056, 1057], "classifiermixin": [1, 136, 253, 385, 387, 399, 419, 1050], "classify__c": 105, "classmethod": [392, 444, 637, 638, 703, 704, 705, 706, 707, 708, 812, 829], "classnameprefixfeaturesoutmixin": [1, 387, 439, 1054], "claudio": [382, 1053, 1054, 1056, 1057], "claus": [43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 61, 63, 65, 66, 67, 71, 73, 74, 76, 79, 80, 81, 82, 85, 86, 87, 88, 91, 95, 99, 100, 101, 103, 104, 106, 107, 108, 114, 119, 120, 124, 126, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 149, 150, 152, 153, 154, 158, 159, 173, 175, 176, 178, 179, 180, 181, 182, 184, 187, 196, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 220, 221, 224, 226, 227, 235, 236, 240, 241, 246, 251, 252, 254, 256, 262, 264, 278, 283, 290, 297, 298, 300, 306, 307, 308, 310, 311, 313, 318, 319, 320, 321, 322, 323, 352, 353, 355, 356, 359, 360, 361, 397], "clauss": 1056, "clb": 192, "clean": [86, 104, 218, 368, 377, 383, 421, 1004, 1008, 1049], "cleaner": 100, "cleanli": [96, 1039], "cleanup": [385, 1039], "clear": [42, 89, 94, 105, 191, 192, 323, 380, 384, 385, 387, 397, 398, 399, 413, 416, 421, 924, 925, 987, 992, 1050, 1051, 1052, 1057], "clear_data_hom": 1, "clearer": [244, 1013], "clearli": [42, 94, 127, 192, 251, 352, 384, 385, 397, 399, 420, 422, 999, 1005], "clegg": 1042, "clemen": 1043, "clement": [1046, 1047, 1051], "clenaghan": [1044, 1045], "cleveland": 380, "cleverless": 1041, "clf": [44, 48, 49, 50, 60, 61, 62, 63, 66, 67, 72, 82, 85, 88, 92, 97, 104, 130, 142, 150, 153, 155, 160, 164, 166, 169, 170, 172, 177, 179, 194, 209, 211, 212, 216, 217, 223, 226, 228, 231, 232, 233, 234, 235, 242, 247, 248, 251, 254, 260, 266, 274, 278, 282, 283, 285, 288, 289, 301, 304, 305, 306, 309, 313, 320, 323, 327, 328, 329, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 363, 364, 367, 372, 380, 398, 399, 409, 416, 419, 422, 424, 444, 555, 556, 559, 561, 563, 565, 567, 569, 570, 573, 599, 600, 603, 638, 640, 644, 645, 646, 647, 648, 650, 651, 654, 658, 664, 665, 666, 667, 668, 672, 674, 675, 678, 679, 680, 681, 682, 683, 686, 703, 704, 706, 708, 794, 806, 809, 810, 820, 838, 839, 840, 842, 845, 846, 847, 848, 849, 856, 857, 867, 910, 912, 914, 915, 918, 922, 924, 988, 990, 994, 998, 999, 1001, 1002, 1004, 1005, 1012, 1013, 1014, 1023, 1027, 1028, 1032], "clf1": [68, 160, 161, 422, 575], "clf2": [68, 160, 161, 387, 422, 575], "clf3": [68, 160, 161, 387, 422, 575], "clf__": 278, "clf__alpha": [278, 1032], "clf__c": 416, "clf_descr": 359, "clf_en_lr": 210, "clf_err": 142, "clf_isoton": 60, "clf_isotonic_scor": 60, "clf_l1_lr": 210, "clf_l2_lr": 210, "clf_list": [61, 63], "clf_name": [48, 359], "clf_no_weight": 357, "clf_pf": 848, "clf_prob": 62, "clf_sample_weight": 253, "clf_score": 60, "clf_sel": 194, "clf_select": 169, "clf_sgd": 233, "clf_sigmoid": 60, "clf_sigmoid_scor": 60, "clf_weight": 357, "cli": 1024, "click": [248, 258, 278, 328, 334, 385, 387, 393, 1022, 1023, 1025], "clickabl": 1053, "client": 387, "clifford": 1052, "cliffordemmanuel": 1052, "clim": 178, "climatologi": 413, "climb": [415, 454, 467], "clinton": 56, "clip": [61, 63, 237, 249, 318, 348, 641, 682, 747, 880, 1008, 1043, 1050, 1051], "clmbst": 1051, "clock": 42, "clone": [1, 90, 151, 183, 192, 253, 316, 334, 368, 383, 385, 388, 389, 391, 393, 399, 413, 416, 425, 443, 471, 575, 576, 603, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 812, 829, 834, 837, 841, 844, 870, 871, 907, 1018, 1039, 1045, 1047, 1051, 1055, 1056], "clone_kernel": [616, 617, 1049], "clone_with_theta": [183, 425, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "cloned_classifi": 440, "close": [7, 46, 50, 54, 60, 61, 63, 72, 73, 80, 88, 94, 100, 110, 111, 114, 129, 141, 148, 151, 155, 159, 175, 176, 179, 180, 181, 182, 183, 191, 193, 203, 223, 225, 240, 246, 252, 256, 262, 268, 277, 278, 291, 304, 305, 318, 327, 348, 352, 353, 360, 368, 380, 385, 387, 393, 397, 399, 400, 413, 415, 418, 419, 422, 425, 456, 461, 478, 514, 515, 538, 569, 634, 649, 653, 667, 678, 680, 693, 711, 752, 803, 824, 825, 845, 846, 847, 849, 856, 931, 987, 991, 992, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1008, 1013, 1017, 1022, 1030, 1042, 1046, 1047, 1048], "close_pric": 50, "closer": [42, 71, 127, 129, 158, 173, 175, 192, 198, 223, 352, 361, 413, 415, 420, 455, 559, 634, 718, 852, 853, 858, 860, 861, 862, 1013, 1046], "closest": [63, 80, 98, 223, 387, 415, 446, 448, 449, 453, 454, 455, 465, 659, 785, 786, 840, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 989, 992, 999, 1001, 1030], "closur": 54, "cloud": [77, 116, 123, 125, 188, 393, 420, 539, 547, 698, 998, 1016, 1017, 1019, 1031], "cloudpickl": 1034, "clouldpickl": 409, "cls_info": 48, "cls_name": [46, 48], "cls_runtim": 46, "cls_stat": 46, "cls_valu": 48, "club": 382, "clue": [380, 393, 995], "clump": 243, "clust": [99, 456, 463], "cluster": [1, 46, 47, 52, 53, 54, 55, 57, 60, 63, 76, 77, 80, 82, 84, 85, 87, 88, 91, 93, 95, 96, 103, 112, 119, 120, 121, 130, 136, 140, 147, 155, 168, 183, 194, 216, 240, 242, 243, 244, 250, 253, 256, 262, 263, 264, 265, 278, 298, 304, 305, 307, 321, 328, 332, 337, 338, 339, 340, 341, 350, 358, 359, 361, 367, 374, 378, 380, 382, 385, 387, 390, 397, 399, 410, 416, 421, 423, 426, 429, 430, 433, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 494, 508, 509, 510, 517, 518, 519, 520, 521, 528, 536, 547, 550, 559, 570, 572, 595, 596, 597, 637, 697, 698, 701, 710, 711, 716, 720, 721, 723, 725, 731, 737, 742, 743, 761, 763, 784, 785, 792, 798, 799, 801, 803, 804, 862, 863, 871, 875, 882, 890, 939, 941, 959, 982, 988, 995, 997, 1001, 1004, 1006, 1008, 1011, 1015, 1017, 1018, 1019, 1022, 1023, 1026, 1029, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "cluster_1": 155, "cluster_2": 155, "cluster_al": [454, 467], "cluster_cent": [72, 95, 97, 98, 467], "cluster_center_indic": [446, 460], "cluster_centers_": [76, 77, 82, 84, 92, 94, 95, 97, 98, 124, 331, 360, 446, 449, 453, 454, 455, 1031], "cluster_centers_indic": [72, 460], "cluster_centers_indices_": [72, 446], "cluster_data": 93, "cluster_doc": 56, "cluster_hierarchy_": [415, 456], "cluster_id": [194, 360], "cluster_id_to_feature_id": 194, "cluster_label": [90, 94], "cluster_method": 456, "cluster_optics_dbscan": [1, 99, 415], "cluster_optics_xi": 1, "cluster_qr": [80, 415, 458, 468, 1053], "cluster_s": 360, "cluster_selection_epsilon": 452, "cluster_selection_method": 452, "cluster_std": [62, 72, 78, 83, 89, 90, 91, 93, 94, 96, 97, 98, 231, 246, 265, 321, 350, 518], "cluster_word": 56, "clusterer_": 90, "clustering_algorithm": [77, 78, 96], "clustering_metr": 92, "clustermixin": [1, 387, 1056], "clusters_std": 350, "clyde": 1044, "cl\u00e9ment": [1048, 1052, 1054], "cm": [42, 44, 49, 50, 52, 57, 58, 60, 65, 66, 67, 72, 73, 80, 81, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 101, 112, 114, 119, 124, 127, 130, 140, 146, 147, 166, 171, 178, 179, 192, 202, 211, 228, 231, 232, 235, 240, 241, 242, 247, 250, 251, 255, 260, 270, 271, 272, 298, 301, 302, 304, 308, 311, 313, 315, 316, 318, 320, 329, 332, 337, 338, 342, 344, 345, 346, 348, 349, 350, 356, 357, 364, 382, 416, 703, 923, 998, 1008, 1014, 1028, 1029], "cm2013": 415, "cm_bright": [66, 313, 320], "cm_displai": 247, "cm_piyg": 320, "cmap": [42, 43, 44, 49, 50, 52, 57, 58, 65, 66, 67, 69, 73, 74, 80, 81, 84, 85, 87, 88, 92, 112, 114, 119, 124, 127, 130, 134, 140, 146, 147, 166, 171, 178, 179, 192, 198, 202, 203, 210, 211, 228, 231, 232, 233, 235, 240, 241, 242, 250, 251, 255, 270, 272, 298, 302, 304, 306, 307, 309, 311, 313, 315, 316, 318, 320, 337, 338, 342, 344, 345, 346, 347, 348, 349, 350, 353, 356, 357, 364, 703, 1028, 1029], "cmap_bold": [306, 309], "cmap_cv": 272, "cmap_data": 272, "cmap_light": [306, 309], "cmcsa": 50, "cmd": 383, "cmu": 905, "cname": 76, "cnb": 1000, "cnp": 386, "cnx": 1047, "co": [1, 42, 50, 52, 55, 57, 73, 74, 103, 156, 158, 180, 188, 191, 220, 241, 277, 292, 331, 341, 359, 360, 361, 366, 389, 421, 423, 455, 457, 459, 494, 517, 597, 705, 725, 770, 801, 993, 1008, 1019, 1022, 1033, 1034], "co2": [174, 182, 188, 425, 502, 617, 621, 628, 629, 631, 1019, 1046], "co2_data": 180, "co2_kernel": 180, "coars": [42, 147, 391, 454, 467], "coarser": [147, 151], "coast": [49, 311], "coastlin": [49, 173, 311, 382], "coca": 50, "cock": [159, 1048], "cockburn": 1041, "coclust": [56, 412, 457, 519], "cocoa": 1022, "code": [0, 1, 29, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 379, 383, 384, 386, 388, 389, 394, 397, 399, 400, 403, 406, 409, 411, 414, 415, 422, 423, 448, 449, 453, 455, 465, 502, 532, 536, 537, 543, 544, 548, 549, 551, 552, 554, 572, 578, 587, 588, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 671, 688, 689, 691, 692, 838, 839, 840, 877, 884, 995, 999, 1008, 1010, 1012, 1013, 1017, 1018, 1019, 1021, 1022, 1024, 1032, 1039, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "code_book_": 840, "code_init": [537, 551], "code_s": [295, 840, 999], "codebas": [333, 368, 385, 386, 387, 423, 1039, 1045], "codebook": [82, 295, 572, 840], "codebook_random": 82, "codecov": 393, "codeofconduct": 385, "coder": [133, 548, 722], "codevig": 1045, "coef": [48, 88, 133, 190, 191, 198, 203, 206, 210, 211, 213, 218, 222, 223, 224, 228, 234, 235, 260, 290, 315, 333, 356, 530, 652, 653, 655, 658, 659, 665, 666, 667, 668, 669, 675, 678, 680, 686, 687, 688, 689, 690, 691, 692, 693, 1002], "coef0": [196, 352, 354, 458, 541, 645, 646, 649, 781, 783, 912, 913, 914, 915, 916, 996, 1013], "coef_": [45, 48, 52, 88, 116, 169, 170, 173, 190, 191, 198, 201, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 218, 222, 223, 224, 228, 234, 235, 254, 260, 290, 291, 325, 331, 346, 353, 356, 359, 368, 380, 387, 399, 418, 424, 471, 488, 489, 490, 555, 599, 600, 603, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 910, 911, 912, 913, 914, 915, 916, 982, 992, 994, 1012, 1013, 1030, 1039, 1041, 1044, 1046, 1051, 1053, 1056, 1057], "coef_agglomeration_": 88, "coef_en_lr": 210, "coef_i": 191, "coef_init": [652, 653, 658, 659, 666, 667, 668, 669, 672, 673, 674, 682, 683, 684, 687, 690], "coef_l": 204, "coef_l1_lr": 210, "coef_l2_lr": 210, "coef_lasso_": 213, "coef_multi_task_lasso_": 213, "coef_p": 204, "coef_path": [659, 669, 690], "coef_path_": [656, 657, 660, 661, 994], "coef_path_continu": [659, 669, 690], "coef_path_lar": [659, 669, 690], "coef_pl": 204, "coef_ridg": 201, "coef_selection_": 88, "coeff": 686, "coeff_diff": 205, "coeffeci": 1048, "coeffici": [1, 24, 45, 48, 72, 83, 92, 94, 110, 111, 114, 124, 127, 164, 170, 175, 188, 189, 190, 197, 201, 203, 204, 205, 206, 210, 212, 213, 214, 215, 216, 217, 221, 222, 234, 237, 260, 277, 290, 291, 315, 325, 329, 330, 331, 352, 355, 359, 360, 361, 372, 381, 385, 387, 399, 402, 417, 418, 420, 424, 425, 428, 438, 458, 471, 473, 479, 481, 482, 484, 485, 486, 487, 488, 489, 490, 502, 530, 532, 533, 537, 541, 543, 545, 548, 549, 554, 558, 560, 562, 564, 566, 568, 571, 574, 576, 588, 595, 599, 603, 615, 617, 620, 633, 641, 642, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 707, 709, 722, 725, 735, 740, 744, 749, 756, 759, 781, 783, 791, 792, 794, 798, 799, 802, 821, 833, 836, 843, 844, 853, 861, 868, 871, 883, 890, 910, 911, 912, 913, 914, 915, 916, 919, 921, 989, 992, 994, 1012, 1013, 1019, 1030, 1039, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1056], "coefs_": [212, 315, 867, 868, 1002, 1044], "coefs_cf": 325, "coefs_enet": 204, "coefs_lasso": 204, "coefs_no_cf": 325, "coefs_path": 665, "coefs_paths_": [665, 1049], "coefs_positive_enet": 204, "coefs_positive_lasso": 204, "coelho": [1040, 1042, 1043, 1047], "coelhudo": 1051, "cognit": [173, 382], "cohen": [1, 722, 1047], "cohen_kappa_scor": [1, 998, 1044, 1046], "coher": 415, "cohort": 162, "coin": [50, 52, 54, 58, 70, 73, 74, 75, 78, 82, 87, 88, 96, 100, 101, 188, 415, 423, 447, 468, 1010, 1019, 1031], "coincid": [179, 221, 425], "col": [51, 56, 61, 63, 72, 76, 83, 89, 93, 97, 98, 103, 106, 144, 160, 180, 239, 256, 356, 517, 519], "col_compl": 56, "col_idx": 58, "col_idx_shuffl": 57, "col_ind": [430, 457, 459], "col_indic": 154, "col_nam": 51, "col_split": 51, "cola": 50, "cold": 298, "cole": 1048, "coleman": [1040, 1041], "colgat": [50, 54], "colin": [44, 380, 1045], "colin_powel": 1028, "colinear": 556, "collabor": 385, "collaps": [42, 192, 256, 318, 348, 397], "colleagu": 277, "collect": [1, 40, 45, 48, 50, 51, 56, 61, 106, 142, 154, 155, 162, 173, 180, 187, 194, 207, 212, 242, 249, 280, 284, 360, 361, 372, 380, 382, 389, 403, 419, 420, 422, 423, 452, 470, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 575, 576, 587, 589, 590, 594, 595, 596, 597, 638, 735, 736, 744, 784, 789, 790, 793, 808, 812, 813, 815, 829, 956, 969, 972, 987, 993, 994, 998, 1004, 1009, 1018, 1022, 1027, 1032, 1041, 1051], "colleg": [0, 190], "college_degre": 190, "collid": 423, "collier": 1032, "collin": 1042, "collinear": [191, 194, 224, 237, 422, 573, 654, 675, 686, 883, 994, 1039], "collis": [360, 361, 423, 588, 595], "collot": [1053, 1054], "colombia": [49, 311, 380, 504], "colon": 385, "coloni": 380, "color": [42, 44, 45, 46, 47, 48, 49, 50, 51, 57, 60, 61, 62, 63, 66, 68, 69, 70, 72, 74, 76, 78, 80, 81, 83, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 110, 111, 112, 113, 114, 117, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 138, 139, 144, 147, 148, 150, 153, 154, 155, 156, 157, 159, 161, 164, 166, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 191, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 211, 213, 215, 217, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 233, 236, 237, 240, 241, 242, 244, 246, 250, 251, 252, 254, 257, 262, 263, 264, 265, 266, 267, 268, 271, 272, 276, 278, 280, 281, 282, 283, 284, 286, 287, 288, 290, 291, 297, 300, 303, 304, 305, 306, 309, 310, 311, 313, 318, 319, 320, 322, 323, 324, 328, 334, 339, 340, 342, 346, 347, 348, 349, 350, 352, 354, 355, 356, 364, 365, 379, 380, 382, 393, 415, 422, 423, 453, 499, 500, 512, 589, 590, 785, 972, 1012, 1014, 1019, 1044, 1049, 1051, 1056], "color_continuous_scal": 278, "color_intens": 47, "color_it": [263, 267, 268], "color_map": 342, "color_palett": [71, 139, 154, 267], "colorbar": [42, 49, 65, 74, 124, 134, 146, 155, 171, 176, 178, 179, 181, 192, 239, 250, 266, 288, 318, 348, 703, 1051], "colorbarbas": 318, "colorblind": [71, 139, 154], "coloring_matrix": [110, 111], "colormap": [124, 140, 183, 211, 228, 348, 353, 364, 703, 1052], "colors_": 76, "colors_list": 144, "colour": [265, 382, 423, 593, 999], "colt": [732, 762, 998], "colton": 990, "columbia": 0, "column": [1, 42, 51, 57, 58, 94, 102, 105, 108, 120, 145, 147, 148, 151, 154, 156, 159, 173, 180, 186, 188, 190, 191, 192, 193, 194, 208, 219, 220, 223, 227, 237, 248, 255, 256, 257, 260, 267, 271, 277, 278, 288, 289, 291, 297, 315, 323, 324, 325, 329, 330, 331, 332, 334, 335, 359, 360, 361, 372, 379, 380, 382, 385, 387, 391, 394, 397, 398, 399, 412, 415, 416, 418, 420, 422, 423, 424, 427, 430, 457, 459, 470, 472, 473, 477, 478, 484, 493, 494, 495, 496, 497, 498, 500, 502, 506, 507, 508, 510, 511, 514, 515, 516, 517, 519, 521, 532, 537, 540, 543, 547, 548, 554, 561, 563, 564, 567, 568, 570, 571, 572, 573, 587, 588, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 633, 636, 638, 639, 640, 652, 654, 658, 664, 666, 668, 670, 671, 675, 686, 691, 692, 703, 719, 724, 725, 735, 736, 744, 760, 769, 774, 775, 776, 779, 789, 790, 793, 794, 806, 809, 810, 820, 831, 836, 841, 844, 845, 846, 847, 848, 849, 850, 851, 870, 874, 875, 876, 877, 883, 884, 885, 889, 890, 891, 892, 894, 895, 896, 900, 901, 910, 912, 915, 918, 920, 926, 930, 931, 936, 947, 961, 974, 975, 977, 985, 987, 988, 990, 994, 996, 998, 999, 1006, 1008, 1013, 1018, 1019, 1039, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "column_labels_": [57, 58, 412, 457, 459], "column_nam": 237, "column_or_1d": [1, 394, 1050, 1054], "column_result": 278, "column_stack": [75, 313, 320], "column_to_drop": 191, "column_tran": [237, 416], "column_transform": 335, "columnar": [379, 470, 1017], "columns_": [56, 412, 430, 457, 459], "columns_to_drop": 271, "columntransform": [1, 42, 103, 104, 159, 191, 192, 193, 219, 237, 248, 256, 258, 260, 324, 328, 330, 331, 332, 334, 377, 379, 397, 398, 406, 472, 473, 635, 875, 987, 988, 1018, 1034, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "columntransformercolumntransform": [104, 159, 191, 193, 248, 258, 324, 328, 331], "columntransformerinot": [159, 192], "columnwis": 420, "com": [45, 46, 49, 50, 53, 57, 58, 60, 76, 82, 91, 99, 103, 104, 136, 138, 139, 140, 141, 142, 143, 150, 152, 153, 158, 159, 175, 178, 180, 182, 184, 187, 199, 221, 226, 236, 240, 242, 244, 249, 262, 264, 265, 278, 281, 298, 318, 319, 322, 323, 359, 360, 380, 383, 385, 389, 390, 391, 393, 397, 415, 448, 540, 547, 677, 711, 1046, 1049], "coma": 1022, "comaniciu": [97, 415, 454], "comapar": 415, "comb": 1053, "combat": [313, 420], "combin": [1, 18, 42, 50, 51, 57, 61, 63, 95, 103, 104, 106, 107, 108, 120, 124, 132, 133, 137, 148, 149, 153, 154, 162, 175, 181, 186, 187, 188, 191, 203, 219, 223, 236, 237, 243, 246, 248, 251, 277, 278, 286, 288, 289, 307, 314, 324, 329, 330, 332, 351, 352, 361, 364, 372, 377, 381, 382, 385, 390, 398, 399, 412, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 427, 428, 451, 470, 472, 473, 479, 481, 482, 485, 486, 487, 495, 502, 514, 515, 521, 527, 530, 532, 537, 543, 544, 546, 548, 553, 555, 566, 568, 571, 573, 574, 616, 620, 622, 627, 630, 636, 640, 649, 652, 653, 658, 659, 664, 665, 666, 667, 668, 669, 672, 674, 678, 679, 680, 681, 682, 684, 685, 687, 690, 698, 707, 736, 794, 806, 809, 810, 817, 818, 831, 833, 837, 854, 869, 870, 871, 875, 883, 884, 885, 890, 910, 972, 987, 990, 991, 994, 998, 999, 1001, 1004, 1008, 1011, 1012, 1014, 1015, 1019, 1022, 1028, 1030, 1032, 1039, 1044, 1047, 1050, 1051, 1052, 1054, 1055], "combinator": 816, "combined_featur": 107, "combsccod": 1053, "comcast": 50, "come": [83, 101, 103, 112, 117, 129, 173, 175, 251, 291, 327, 359, 360, 372, 374, 378, 382, 385, 386, 389, 393, 397, 399, 403, 409, 414, 415, 419, 422, 423, 445, 456, 462, 478, 556, 711, 801, 827, 912, 915, 987, 988, 992, 995, 997, 1001, 1004, 1013, 1023, 1039, 1050, 1053, 1055], "comedi": 881, "comfort": [89, 422], "command": [250, 372, 373, 383, 385, 389, 391, 393, 403, 423, 514, 1017, 1032, 1041], "comment": [80, 359, 383, 384, 385, 386, 388, 389, 393, 493, 585, 998], "commerc": 1022, "commerci": [419, 1022], "commit": [385, 389, 393, 1021, 1039, 1040, 1041, 1042], "committ": [385, 1039], "commod": 998, "common": [1, 51, 53, 54, 56, 127, 170, 173, 188, 189, 190, 215, 223, 224, 272, 277, 284, 295, 329, 352, 359, 361, 367, 372, 379, 385, 387, 393, 395, 397, 398, 402, 403, 406, 412, 413, 415, 416, 419, 421, 424, 425, 453, 471, 473, 502, 596, 638, 659, 678, 679, 707, 752, 759, 775, 807, 808, 811, 821, 823, 824, 825, 826, 827, 833, 836, 871, 873, 881, 882, 883, 888, 890, 895, 896, 898, 899, 900, 901, 949, 987, 988, 994, 1001, 1004, 1008, 1013, 1014, 1017, 1018, 1019, 1022, 1023, 1034, 1039, 1047, 1049, 1050, 1054], "common_nod": 367, "common_node_id": 367, "common_param": [91, 151, 154, 192, 252, 279, 280, 352], "commonli": [219, 274, 352, 378, 399, 415, 416, 425, 620, 764, 765, 803, 839, 882, 995, 996, 998, 999, 1001, 1055], "commun": [253, 378, 384, 390, 393, 399, 400, 415, 422, 544, 546, 553, 698, 716, 882, 988, 995, 1001, 1008, 1012, 1017, 1021, 1022, 1047, 1048], "commut": [42, 51], "comp": [56, 116, 117, 127, 134, 316, 341, 359, 360, 361, 380, 1032], "comp_cov": [475, 476, 477, 478, 479, 480, 481, 482], "compact": [173, 196, 318, 372, 382, 850, 851, 1014, 1041], "compani": [219, 237, 414, 415, 1022], "companion": [385, 1008], "companioni": 1039, "compar": [42, 43, 47, 51, 56, 57, 60, 61, 63, 69, 70, 71, 73, 74, 75, 77, 81, 83, 86, 88, 89, 91, 92, 98, 101, 104, 105, 106, 107, 112, 113, 115, 117, 121, 122, 127, 131, 133, 137, 138, 139, 141, 143, 147, 148, 149, 151, 153, 154, 155, 157, 159, 162, 165, 173, 179, 186, 187, 188, 191, 192, 193, 194, 197, 199, 201, 203, 207, 208, 214, 216, 219, 220, 222, 223, 225, 227, 229, 233, 236, 237, 239, 240, 243, 245, 248, 251, 254, 256, 257, 259, 264, 265, 269, 271, 272, 274, 275, 276, 278, 280, 282, 284, 286, 288, 289, 292, 295, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 312, 315, 317, 319, 322, 323, 325, 329, 352, 359, 360, 361, 366, 367, 368, 374, 380, 382, 385, 387, 409, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 425, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 464, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 496, 502, 508, 510, 518, 520, 528, 530, 534, 537, 543, 545, 547, 551, 552, 557, 558, 567, 568, 569, 570, 571, 637, 645, 650, 651, 659, 661, 663, 664, 669, 672, 674, 682, 683, 690, 701, 711, 718, 721, 737, 744, 749, 792, 804, 806, 811, 820, 833, 836, 843, 852, 856, 859, 863, 867, 868, 870, 871, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 895, 896, 897, 898, 899, 900, 901, 910, 911, 912, 914, 915, 987, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1019, 1030, 1031, 1039, 1041, 1046, 1047, 1052], "comparison": [50, 52, 56, 59, 60, 61, 62, 64, 68, 70, 72, 74, 76, 82, 84, 91, 92, 93, 94, 95, 97, 103, 111, 120, 123, 125, 126, 128, 134, 138, 141, 144, 151, 154, 157, 161, 162, 167, 174, 180, 182, 184, 188, 193, 201, 203, 205, 207, 210, 217, 219, 223, 234, 237, 238, 241, 242, 243, 244, 245, 249, 250, 264, 269, 271, 272, 273, 274, 281, 289, 291, 297, 307, 313, 320, 322, 323, 327, 329, 342, 345, 354, 358, 359, 360, 368, 380, 382, 399, 413, 415, 417, 418, 420, 424, 425, 443, 444, 449, 452, 453, 455, 488, 489, 490, 494, 510, 518, 520, 521, 528, 531, 541, 547, 555, 556, 559, 570, 571, 587, 588, 594, 595, 596, 597, 612, 614, 616, 617, 621, 628, 631, 637, 645, 649, 665, 678, 694, 695, 696, 697, 698, 710, 744, 749, 785, 794, 806, 807, 808, 809, 811, 812, 820, 822, 823, 824, 825, 826, 827, 836, 845, 848, 852, 867, 868, 871, 883, 884, 888, 890, 891, 895, 896, 897, 898, 899, 900, 901, 910, 912, 913, 915, 916, 918, 987, 991, 992, 995, 998, 1000, 1001, 1004, 1013, 1019, 1036], "compat": [253, 280, 298, 328, 379, 388, 394, 395, 397, 399, 403, 406, 409, 423, 469, 475, 514, 572, 583, 595, 609, 620, 621, 624, 625, 626, 628, 629, 638, 639, 640, 664, 665, 679, 681, 780, 784, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 854, 855, 870, 875, 883, 884, 922, 923, 926, 961, 995, 1001, 1003, 1017, 1018, 1022, 1034, 1039, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "compens": [113, 190, 192, 196, 219, 237, 278, 417, 420], "compet": [42, 191], "competit": [42, 151, 359, 422, 650, 1001], "compil": [159, 298, 361, 372, 373, 386, 387, 388, 393, 394, 397, 1017, 1039], "compl": 92, "complement": [1, 192, 287, 359, 638, 639, 808, 823, 826, 836, 845, 846, 847, 848, 849, 1005, 1020, 1034, 1047], "complementari": [42, 423], "complementnb": [1, 278, 359, 845, 846, 848, 849, 1000, 1047, 1051, 1052, 1054], "complementnbcomplementnb": 278, "complet": [0, 1, 42, 71, 72, 73, 78, 83, 86, 92, 96, 117, 154, 157, 168, 170, 173, 188, 193, 194, 225, 245, 246, 253, 256, 271, 275, 323, 325, 327, 360, 368, 380, 385, 389, 390, 393, 397, 416, 419, 420, 422, 423, 447, 451, 455, 458, 468, 469, 470, 473, 501, 542, 543, 544, 545, 550, 552, 564, 575, 576, 587, 593, 594, 595, 597, 633, 634, 635, 636, 651, 655, 663, 677, 679, 710, 711, 721, 722, 723, 735, 737, 742, 743, 763, 792, 801, 838, 841, 844, 853, 869, 870, 871, 872, 933, 983, 987, 992, 994, 998, 999, 1001, 1013, 1014, 1019, 1023, 1032, 1039, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "completed_fac": 255, "completeness_scor": [1, 72, 83, 92, 328, 360, 415, 742, 743, 801, 998], "complex": [41, 47, 48, 53, 57, 105, 144, 159, 172, 175, 180, 186, 188, 223, 233, 236, 245, 252, 253, 256, 269, 275, 278, 281, 286, 319, 327, 330, 331, 335, 336, 348, 352, 361, 362, 367, 381, 385, 390, 397, 415, 416, 420, 422, 426, 446, 450, 453, 454, 456, 473, 495, 506, 507, 508, 520, 540, 547, 557, 563, 564, 565, 566, 568, 570, 571, 610, 636, 644, 662, 664, 682, 683, 740, 756, 806, 836, 838, 866, 870, 871, 875, 883, 890, 906, 910, 913, 916, 918, 919, 920, 921, 987, 988, 990, 991, 993, 995, 997, 999, 1004, 1008, 1011, 1018, 1019, 1020, 1022, 1034, 1040, 1042, 1048, 1049, 1052], "complexity_comput": [45, 48], "complexity_label": [45, 48], "compli": [385, 399, 941, 1018], "complianc": [0, 154], "compliant": [332, 385, 1057, 1058], "complic": [63, 253, 313, 391, 425, 700, 1001], "compon": [1, 10, 42, 43, 54, 78, 92, 96, 103, 106, 115, 116, 120, 125, 126, 128, 129, 130, 131, 132, 134, 157, 165, 180, 188, 190, 203, 239, 250, 251, 254, 262, 263, 266, 267, 268, 276, 278, 299, 300, 301, 309, 310, 316, 323, 329, 372, 377, 380, 385, 387, 391, 394, 397, 409, 411, 415, 416, 418, 423, 425, 427, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 508, 510, 521, 527, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 579, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 701, 803, 804, 805, 806, 809, 810, 820, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 946, 947, 990, 995, 997, 1008, 1010, 1013, 1017, 1018, 1019, 1020, 1022, 1026, 1032, 1033, 1034, 1039, 1041, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "component_1": 267, "component_2": 267, "component_indices_": [645, 1052], "components_": [44, 53, 92, 117, 124, 126, 127, 134, 250, 251, 316, 323, 331, 399, 416, 420, 450, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 645, 859, 866, 902, 903, 990, 1010, 1028, 1043, 1045, 1051, 1054, 1057], "components_col": 106, "compos": [1, 42, 43, 61, 102, 103, 104, 108, 117, 140, 148, 159, 188, 191, 192, 193, 219, 221, 237, 248, 256, 258, 260, 291, 295, 324, 328, 330, 331, 332, 334, 335, 398, 406, 415, 416, 419, 470, 471, 472, 473, 521, 559, 618, 997, 999, 1019, 1039], "composit": [6, 34, 248, 328, 377, 419, 664, 794, 988, 994, 1007, 1034, 1040], "compound": [42, 237, 423, 616, 618, 686, 730, 758, 994, 1032], "compoundkernel": [1, 616, 1053], "comprehens": [352, 423, 764, 765, 996, 1022, 1047], "compress": [41, 49, 54, 82, 100, 188, 295, 318, 380, 409, 415, 420, 423, 424, 658, 678, 698, 840, 883, 969, 972, 984, 994, 1008, 1019, 1031, 1039, 1048], "compressed_raccoon_kmean": 87, "compressed_raccoon_uniform": 87, "compris": [103, 151, 275, 359, 360, 361, 380, 397, 420, 422, 521, 813, 995], "compromis": [47, 63, 192, 372, 385, 653, 685, 1001, 1042], "comput": [0, 1, 26, 42, 44, 45, 49, 51, 52, 57, 62, 71, 73, 75, 76, 80, 86, 88, 91, 92, 94, 95, 103, 105, 111, 112, 113, 114, 125, 133, 141, 145, 146, 149, 150, 151, 152, 153, 154, 172, 173, 175, 180, 182, 183, 186, 191, 192, 193, 194, 196, 199, 200, 203, 204, 205, 206, 207, 208, 219, 221, 223, 227, 233, 236, 237, 240, 243, 247, 249, 250, 252, 256, 257, 259, 271, 273, 275, 277, 278, 279, 280, 284, 286, 288, 298, 300, 302, 304, 305, 307, 308, 311, 318, 327, 331, 332, 335, 338, 340, 348, 352, 355, 359, 360, 361, 367, 373, 374, 379, 380, 382, 385, 390, 391, 392, 394, 397, 398, 399, 402, 403, 409, 410, 411, 412, 413, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 463, 465, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 522, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 588, 591, 592, 595, 596, 597, 599, 600, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 731, 732, 733, 735, 736, 737, 740, 742, 744, 745, 746, 748, 749, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 802, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 875, 876, 879, 880, 885, 886, 887, 888, 889, 890, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 915, 917, 918, 919, 920, 921, 944, 945, 946, 947, 963, 964, 971, 973, 979, 987, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1027, 1028, 1031, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "computation": [36, 52, 110, 124, 144, 150, 159, 175, 298, 352, 359, 371, 386, 397, 415, 416, 419, 420, 422, 425, 544, 638, 639, 677, 769, 806, 808, 809, 810, 820, 833, 994, 995, 997, 1005, 1006, 1010, 1031, 1034, 1043], "compute_class_weight": [1, 399, 1042, 1053], "compute_corrected_ttest": 277, "compute_dist": [447, 451, 1051], "compute_full_tre": [447, 451, 1043], "compute_import": 1041, "compute_inverse_compon": [902, 903, 1010], "compute_inverse_transform": 1053, "compute_label": [448, 455], "compute_node_depth": 367, "compute_optics_graph": [1, 461, 462, 1056], "compute_sample_weight": [1, 1053], "compute_scor": [108, 131, 198, 199, 650, 651, 1048], "compute_sourc": 427, "computed_scor": 651, "con": [595, 997], "concat": [42, 186, 190, 208, 237, 883], "concaten": [1, 62, 69, 73, 84, 95, 102, 105, 113, 140, 155, 169, 183, 188, 198, 201, 211, 233, 234, 240, 246, 262, 266, 267, 273, 282, 283, 284, 285, 286, 287, 303, 316, 322, 325, 338, 347, 351, 359, 416, 470, 473, 510, 515, 537, 543, 547, 548, 605, 787, 806, 869, 870, 872, 875, 883, 915, 999, 1019, 1027, 1031, 1040], "concav": [173, 335, 382], "concentr": [45, 47, 99, 122, 129, 138, 157, 180, 187, 188, 244, 261, 263, 268, 288, 308, 320, 339, 381, 385, 422, 449, 525, 803, 997, 1004, 1019], "concentrations_prior": 262, "concept": [1, 113, 144, 149, 253, 286, 385, 397, 415, 421, 423, 990, 998, 1001, 1014, 1022], "conceptu": [382, 422, 996], "concern": [36, 55, 70, 109, 115, 118, 123, 135, 137, 167, 174, 185, 188, 195, 197, 238, 261, 267, 271, 294, 296, 299, 312, 317, 336, 343, 358, 362, 372, 387, 409, 995, 1010], "concis": [63, 219, 385, 390, 1050, 1052], "conclud": [138, 191, 199, 237, 277, 361, 368, 400, 870], "conclus": [42, 129, 191, 193, 219, 221, 277, 279, 368, 422, 1026], "concomit": [655, 994], "concret": [223, 386, 400, 414, 424, 674, 680, 681, 682, 683, 902, 903, 994, 1012, 1017], "concurr": [399, 423, 964, 1051, 1053], "conda": [327, 328, 329, 330, 331, 332, 333, 334, 335, 373, 385, 386, 388, 389, 391, 393, 403, 408, 409, 1014], "conda_prefix": 391, "condarc": 383, "condens": [196, 452], "condit": [1, 42, 50, 51, 61, 63, 114, 146, 151, 188, 189, 191, 208, 221, 224, 237, 253, 257, 280, 330, 367, 391, 397, 402, 412, 413, 414, 415, 417, 420, 422, 424, 457, 470, 477, 478, 479, 484, 502, 519, 529, 530, 542, 545, 546, 547, 549, 551, 553, 555, 556, 568, 633, 638, 639, 649, 656, 657, 658, 660, 661, 662, 676, 678, 679, 680, 681, 688, 689, 693, 703, 718, 723, 724, 742, 743, 801, 845, 846, 847, 848, 849, 868, 871, 874, 883, 884, 887, 891, 947, 970, 992, 994, 995, 996, 998, 1000, 1001, 1003, 1008, 1014, 1017, 1019, 1030, 1034, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1051, 1053, 1054, 1055, 1057], "condition": [50, 63, 219, 413, 417, 764, 992], "condition2": 159, "conduct": [190, 277, 425, 1021, 1053], "conf": [45, 63, 389, 413, 419, 845, 1000, 1053], "confer": [271, 277, 380, 415, 420, 426, 445, 450, 456, 517, 541, 569, 702, 714, 732, 762, 866, 867, 868, 998, 1004, 1010, 1014], "confid": [51, 60, 61, 62, 63, 154, 180, 182, 263, 277, 280, 340, 400, 413, 425, 642, 664, 665, 672, 674, 677, 680, 681, 682, 704, 708, 713, 726, 732, 733, 745, 746, 762, 795, 838, 877, 910, 912, 915, 994, 997, 998, 999, 1004, 1011, 1012, 1013, 1022, 1032, 1049], "config": [51, 373, 383, 385, 386, 393, 632, 1047], "config_context": [1, 260, 372, 373, 411, 632, 908, 1046, 1052, 1055], "configur": [1, 2, 45, 48, 63, 104, 105, 192, 253, 258, 260, 291, 325, 359, 371, 383, 385, 387, 391, 393, 397, 399, 403, 406, 411, 416, 423, 424, 439, 448, 449, 451, 453, 455, 458, 468, 470, 474, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 632, 633, 634, 635, 636, 638, 641, 644, 645, 646, 647, 648, 694, 695, 696, 697, 698, 700, 701, 794, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 908, 964, 965, 995, 998, 1008, 1013, 1017, 1032, 1034, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056], "confirm": [42, 51, 117, 141, 148, 151, 154, 193, 219, 221, 271, 280, 283, 286, 323, 361, 389, 987, 1008, 1047], "conflict": [383, 385, 389, 393, 403, 1046, 1047], "conform": [51, 587, 634, 838, 839, 998, 1017, 1018, 1046, 1052], "confound": [190, 191], "confus": [1, 67, 188, 247, 269, 271, 286, 337, 338, 359, 399, 474, 510, 637, 658, 703, 719, 721, 724, 735, 736, 744, 760, 790, 793, 836, 908, 915, 1019, 1032, 1039, 1040, 1044, 1048, 1049, 1051, 1052, 1053, 1054], "confusingli": 383, "confusion_matrix": [1, 67, 247, 270, 271, 335, 337, 338, 703, 719, 760, 805, 833, 998, 1032, 1040, 1045, 1046, 1049, 1050, 1052, 1056], "confusion_matrix_scor": 998, "confusionmatrixdisplai": [1, 44, 67, 270, 330, 335, 337, 359, 637, 724, 998, 1028, 1049, 1050, 1052, 1053, 1054], "congruenc": [660, 661, 662, 688, 689], "conjug": [277, 458, 468, 678, 680, 693, 701, 994], "conjunct": [406, 415, 600, 812, 828, 829, 831, 832, 833, 834, 837, 965, 988, 994, 1054], "connect": [1, 50, 73, 78, 81, 85, 88, 96, 100, 101, 383, 385, 394, 399, 417, 447, 451, 458, 468, 469, 591, 592, 701, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 996, 1001, 1003, 1011, 1021, 1043, 1052, 1056], "connected_compon": 1046, "connectionist": [867, 868], "conner": 1052, "connor": [1047, 1052, 1056, 1057], "connossor": [1047, 1048], "conocophillip": 50, "conort": 1022, "conquer": 947, "conrad": [1039, 1040, 1054, 1057], "conroi": 1054, "consecut": [138, 149, 220, 397, 413, 419, 423, 449, 453, 455, 456, 458, 462, 465, 468, 543, 544, 545, 552, 608, 651, 672, 673, 674, 682, 683, 684, 803, 804, 811, 845, 846, 847, 848, 849, 867, 868, 987, 1008, 1032, 1047], "consensu": [1, 57, 58, 71, 384, 385, 400, 412, 415, 655, 677, 684, 685, 725, 998], "consensus_scor": [1, 57, 58, 412, 1041], "consequ": [91, 131, 237, 277, 278, 318, 345, 368, 413, 414, 420, 422, 567, 568, 572, 661, 662, 988, 994, 998, 1006, 1014, 1048, 1050, 1055, 1057], "conserv": [49, 399, 588, 595, 902, 903, 997, 1010], "consid": [0, 42, 50, 51, 52, 57, 61, 73, 89, 100, 104, 113, 120, 124, 128, 148, 151, 168, 172, 173, 187, 192, 219, 221, 253, 271, 277, 280, 284, 288, 291, 298, 301, 304, 305, 318, 329, 335, 345, 352, 353, 355, 359, 368, 372, 373, 374, 377, 384, 385, 387, 391, 393, 397, 399, 400, 406, 409, 411, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 444, 450, 452, 456, 463, 480, 514, 515, 527, 539, 547, 555, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 591, 592, 594, 595, 597, 599, 613, 614, 626, 637, 638, 639, 652, 658, 664, 665, 666, 668, 677, 685, 694, 695, 696, 698, 699, 700, 702, 706, 708, 711, 713, 715, 721, 732, 736, 740, 762, 792, 794, 800, 852, 853, 854, 856, 858, 860, 861, 862, 865, 867, 868, 873, 883, 884, 891, 905, 906, 915, 916, 918, 919, 920, 921, 982, 987, 993, 994, 995, 996, 998, 999, 1001, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1018, 1023, 1030, 1042, 1043, 1047, 1051, 1052, 1054, 1055, 1056], "consider": [153, 154, 176, 179, 256, 272, 278, 284, 385, 414, 425, 625, 806, 820, 828, 987, 994, 1000, 1004, 1012, 1022, 1056], "consist": [1, 42, 45, 62, 67, 71, 90, 91, 103, 112, 120, 122, 124, 144, 148, 154, 155, 162, 173, 178, 180, 183, 187, 194, 219, 237, 252, 256, 283, 286, 315, 323, 327, 330, 355, 360, 368, 372, 378, 380, 382, 385, 387, 391, 392, 393, 394, 398, 399, 400, 413, 415, 417, 421, 422, 423, 433, 434, 437, 438, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 496, 503, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 597, 617, 633, 634, 635, 636, 641, 644, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 680, 683, 684, 685, 693, 694, 695, 696, 697, 706, 741, 803, 804, 813, 838, 839, 840, 842, 843, 844, 845, 853, 854, 856, 858, 861, 862, 868, 873, 874, 875, 877, 881, 882, 885, 886, 888, 889, 891, 902, 903, 906, 910, 911, 913, 914, 916, 919, 921, 930, 932, 953, 969, 972, 987, 990, 991, 992, 994, 995, 997, 998, 999, 1001, 1002, 1008, 1011, 1013, 1014, 1016, 1018, 1022, 1023, 1030, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "consol": [147, 383, 1024], "consolid": [0, 399, 400, 1039], "consolidate_scor": 51, "consortium": [0, 1022], "constant": [1, 42, 133, 141, 154, 178, 182, 187, 191, 207, 220, 221, 223, 237, 248, 253, 258, 280, 310, 314, 316, 319, 321, 328, 355, 357, 368, 377, 387, 394, 399, 412, 422, 425, 438, 452, 471, 488, 489, 490, 517, 519, 540, 544, 546, 553, 555, 556, 557, 558, 560, 562, 564, 566, 568, 571, 574, 576, 596, 612, 615, 617, 619, 633, 636, 638, 639, 641, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 693, 695, 699, 701, 727, 729, 730, 734, 738, 781, 783, 791, 805, 828, 843, 844, 853, 861, 867, 868, 875, 886, 889, 898, 910, 911, 912, 913, 914, 915, 916, 917, 919, 921, 990, 992, 994, 995, 998, 1000, 1001, 1008, 1012, 1014, 1034, 1042, 1047, 1049, 1051, 1052, 1053, 1055, 1057], "constant_": 558, "constant_valu": [425, 619, 623], "constant_value_bound": [425, 617, 619, 623], "constantini": 1055, "constantkernel": [1, 178, 184, 425, 617, 623, 627, 630], "constantli": [71, 219, 1022], "constitu": 382, "constitut": [84, 399, 419, 422, 456, 462, 594, 595, 597, 1002], "constrain": [24, 81, 124, 148, 154, 156, 192, 210, 313, 328, 334, 346, 348, 378, 399, 415, 420, 422, 515, 567, 568, 641, 664, 665, 696, 700, 828, 835, 994, 997, 1043], "constrained_layout": [124, 192, 239, 324, 325, 332], "constraint": [89, 91, 101, 124, 137, 188, 214, 223, 256, 257, 272, 314, 315, 316, 328, 385, 397, 420, 423, 493, 514, 515, 563, 564, 567, 568, 570, 571, 638, 641, 824, 825, 918, 919, 920, 921, 967, 987, 989, 994, 995, 1012, 1019, 1043, 1046, 1047, 1050, 1052, 1054, 1056], "constru": 423, "construct": [1, 42, 49, 103, 105, 138, 140, 142, 146, 159, 173, 237, 247, 253, 258, 260, 311, 319, 321, 328, 331, 379, 382, 387, 394, 399, 415, 416, 419, 420, 422, 423, 426, 440, 447, 448, 450, 451, 456, 458, 463, 469, 471, 473, 525, 541, 547, 550, 561, 562, 587, 593, 645, 694, 696, 697, 820, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 869, 870, 871, 872, 874, 915, 929, 931, 946, 947, 957, 961, 987, 988, 990, 994, 995, 998, 999, 1001, 1008, 1011, 1013, 1014, 1018, 1023, 1027, 1044, 1046, 1047, 1050, 1053], "construct_grid": [49, 311], "constructor": [29, 30, 105, 249, 373, 387, 399, 416, 423, 470, 473, 555, 556, 561, 573, 574, 575, 576, 587, 588, 594, 595, 603, 674, 682, 683, 852, 853, 854, 856, 858, 860, 861, 862, 869, 870, 871, 872, 987, 999, 1008, 1013, 1018, 1023, 1039, 1040, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "consult": 998, "consum": [1, 124, 368, 379, 387, 399, 406, 415, 419, 422, 455, 809, 810, 870, 871, 954, 955, 964, 994, 1022, 1044, 1056], "consumpt": [46, 372, 399, 415, 540, 563, 564, 570, 571, 806, 820, 831, 832, 833, 918, 919, 920, 921, 964, 1023, 1039, 1041, 1045, 1047, 1048, 1053], "contact": [322, 397, 1017], "contain": [1, 48, 56, 60, 63, 68, 74, 83, 90, 92, 103, 104, 140, 142, 146, 154, 155, 181, 191, 192, 194, 196, 210, 223, 237, 246, 253, 256, 257, 260, 267, 271, 275, 277, 283, 286, 287, 297, 304, 305, 307, 318, 330, 338, 341, 359, 360, 378, 379, 380, 382, 385, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 409, 411, 413, 415, 416, 418, 419, 420, 422, 423, 424, 425, 427, 429, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 506, 508, 509, 510, 514, 515, 516, 520, 521, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 697, 698, 702, 703, 704, 706, 707, 708, 715, 718, 741, 742, 743, 778, 785, 786, 794, 800, 803, 804, 805, 806, 809, 810, 812, 820, 824, 825, 828, 829, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 930, 931, 950, 951, 953, 954, 961, 964, 965, 967, 987, 988, 990, 996, 999, 1002, 1004, 1006, 1008, 1009, 1011, 1014, 1017, 1021, 1023, 1032, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "container": 409, "container_fold": 509, "container_path": 509, "contamin": [47, 112, 113, 246, 256, 304, 305, 475, 569, 856, 1004, 1047, 1055, 1056], "content": [1, 6, 54, 323, 359, 361, 380, 385, 389, 391, 409, 423, 492, 509, 514, 515, 594, 595, 597, 677, 924, 1007, 1022, 1032, 1040, 1049], "context": [1, 92, 260, 271, 298, 335, 372, 373, 379, 384, 386, 398, 399, 415, 416, 421, 422, 423, 425, 426, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 474, 478, 537, 541, 542, 543, 545, 548, 549, 550, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 600, 608, 613, 614, 616, 632, 633, 636, 638, 640, 645, 653, 657, 659, 661, 663, 664, 665, 667, 669, 671, 672, 674, 682, 685, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 856, 858, 860, 861, 863, 864, 869, 872, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 988, 994, 998, 1004, 1008, 1012, 1018, 1021, 1022, 1030, 1039, 1046, 1047, 1052, 1055], "contigu": [42, 58, 387, 397, 412, 419, 423, 449, 453, 455, 465, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 787, 825, 850, 851, 910, 912, 913, 914, 915, 916, 1013, 1042, 1049, 1053, 1057], "contin": [421, 720, 1008], "conting": [1, 720, 721, 737, 761, 1045], "contingency_matrix": [1, 415, 761, 1047], "continu": [0, 1, 51, 54, 56, 76, 122, 148, 175, 188, 192, 199, 220, 227, 237, 240, 243, 256, 257, 259, 263, 267, 268, 315, 317, 323, 324, 329, 330, 367, 373, 380, 383, 387, 388, 389, 390, 393, 397, 399, 400, 403, 415, 420, 422, 474, 498, 598, 601, 602, 605, 606, 613, 614, 615, 638, 652, 653, 658, 659, 663, 666, 667, 668, 669, 732, 748, 762, 818, 820, 873, 875, 877, 879, 880, 889, 890, 891, 907, 908, 919, 961, 987, 994, 995, 998, 999, 1001, 1002, 1008, 1014, 1018, 1019, 1022, 1023, 1030, 1036, 1039, 1041, 1042, 1047, 1052, 1053, 1054, 1056], "continuous_featur": 390, "contour": [47, 49, 69, 80, 81, 112, 147, 166, 173, 178, 179, 181, 230, 231, 232, 233, 246, 251, 266, 304, 311, 346, 347, 349, 350, 352, 353, 382, 392, 637, 638, 1004, 1012], "contour_kw": 638, "contourf": [49, 147, 233, 251, 304, 311, 313, 320, 321, 342, 347, 353, 357, 637, 638], "contours_": [392, 638], "contract": [219, 237, 352, 373, 399, 1018], "contradict": [194, 1018], "contrari": [42, 52, 191, 240, 244, 256, 262, 280, 318, 359, 379, 415, 502, 550, 612, 823, 891, 994, 1000, 1004], "contrast": [132, 192, 221, 252, 256, 277, 279, 307, 323, 360, 399, 413, 415, 418, 422, 425, 455, 458, 468, 625, 649, 820, 866, 988, 991, 993, 994, 998, 1001, 1003, 1006, 1008, 1011, 1012, 1014, 1049], "contrib": [333, 385, 387, 393, 397, 399, 415, 452, 1017, 1018, 1055], "contribut": [0, 52, 57, 152, 180, 203, 223, 286, 323, 382, 383, 387, 388, 389, 393, 399, 400, 403, 420, 421, 422, 453, 455, 559, 560, 565, 566, 732, 735, 762, 992, 998, 1001, 1006, 1013, 1017, 1018, 1021, 1022, 1030, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "contributor": [373, 388, 389, 390, 393, 397, 399, 998, 1018, 1040, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "control": [36, 50, 69, 95, 128, 129, 144, 164, 180, 182, 203, 220, 223, 227, 249, 250, 278, 280, 295, 300, 316, 328, 330, 352, 363, 365, 366, 372, 373, 378, 381, 385, 387, 390, 393, 397, 399, 403, 414, 415, 418, 419, 420, 421, 424, 425, 440, 446, 455, 460, 477, 478, 484, 537, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 599, 600, 602, 620, 625, 631, 633, 638, 640, 645, 647, 648, 652, 653, 655, 656, 657, 658, 660, 661, 662, 678, 680, 682, 683, 688, 689, 693, 698, 707, 715, 803, 804, 806, 808, 809, 810, 811, 812, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 836, 837, 840, 841, 844, 867, 868, 889, 891, 902, 903, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 924, 964, 985, 987, 994, 995, 997, 998, 999, 1001, 1004, 1005, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1020, 1030, 1034, 1039, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "convei": [66, 244, 320, 1030], "conveni": [89, 223, 256, 377, 393, 397, 416, 419, 423, 425, 430, 449, 453, 455, 457, 459, 470, 495, 617, 682, 684, 705, 734, 791, 869, 870, 972, 988, 990, 994, 995, 1005, 1022, 1032, 1039], "convent": [1, 136, 154, 271, 277, 385, 387, 388, 389, 391, 399, 411, 433, 434, 437, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 475, 476, 477, 478, 479, 480, 481, 482, 514, 515, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 553, 569, 572, 575, 576, 587, 588, 589, 594, 595, 597, 633, 634, 635, 636, 683, 694, 695, 696, 697, 724, 803, 804, 838, 839, 854, 856, 858, 862, 874, 882, 885, 886, 888, 891, 902, 903, 914, 941, 942, 998, 1024, 1039, 1046, 1047, 1050, 1052, 1053, 1055, 1056], "convention": [346, 399, 906], "converg": [1, 54, 91, 95, 110, 111, 149, 151, 154, 175, 181, 184, 212, 221, 227, 235, 263, 265, 314, 315, 318, 323, 338, 374, 394, 399, 412, 415, 420, 423, 425, 427, 446, 449, 452, 453, 454, 455, 458, 460, 465, 466, 467, 468, 477, 478, 484, 488, 489, 490, 539, 541, 542, 543, 544, 545, 552, 559, 577, 616, 650, 651, 652, 653, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 674, 678, 680, 682, 684, 688, 689, 693, 694, 696, 697, 700, 701, 803, 804, 859, 867, 868, 905, 906, 912, 988, 993, 994, 995, 997, 1002, 1012, 1039, 1042, 1043, 1044, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "converged_": [803, 804, 1057], "convergence_it": [446, 460], "convergencewarn": [1, 179, 181, 183, 184, 227, 234, 263, 314, 315, 320, 394, 399, 803, 804, 1047, 1048, 1051], "convers": [1, 54, 151, 210, 359, 368, 374, 379, 385, 387, 393, 397, 399, 409, 423, 578, 865, 874, 882, 930, 931, 984, 995, 1018, 1022, 1047, 1048, 1049, 1052, 1055], "convert": [1, 51, 54, 69, 80, 82, 100, 104, 127, 180, 194, 219, 239, 256, 259, 263, 264, 267, 268, 291, 311, 335, 372, 379, 380, 394, 397, 399, 409, 423, 446, 449, 450, 453, 455, 456, 457, 458, 465, 470, 471, 502, 540, 547, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 578, 587, 588, 594, 595, 596, 597, 599, 600, 612, 633, 634, 635, 636, 652, 658, 664, 665, 666, 668, 672, 673, 674, 676, 680, 682, 683, 684, 698, 784, 805, 828, 865, 874, 875, 877, 881, 883, 884, 885, 887, 910, 918, 919, 920, 921, 928, 930, 931, 953, 983, 984, 987, 994, 995, 996, 998, 1008, 1009, 1013, 1014, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1054, 1055, 1056], "convex": [133, 150, 151, 188, 197, 226, 239, 356, 360, 415, 417, 420, 428, 452, 458, 468, 479, 481, 482, 485, 486, 487, 664, 682, 698, 994, 995, 1001, 1002, 1012, 1019, 1052], "convinc": 191, "convolut": [44, 183, 1028], "convolv": 316, "coo": [399, 559, 560, 698, 877, 926, 930, 931, 1001, 1040, 1056], "coo_matrix": [52, 205, 458, 591, 592, 969, 972], "cook": [382, 500, 1039, 1045], "cookbook": [425, 628, 629], "cool": [423, 1039], "coolwarm": [272, 345], "cooman": 382, "coordin": [1, 49, 50, 52, 88, 129, 158, 179, 204, 239, 278, 311, 372, 380, 420, 425, 449, 453, 454, 455, 467, 477, 478, 484, 537, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 556, 620, 652, 653, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 687, 688, 689, 690, 694, 695, 696, 699, 700, 712, 770, 775, 910, 994, 995, 1013, 1030, 1039, 1042, 1043, 1044, 1048, 1050, 1052, 1053, 1054], "cop": 50, "cope": [246, 374, 380, 994], "copeland": [1047, 1048], "copi": [43, 50, 54, 78, 96, 108, 127, 141, 154, 173, 186, 187, 191, 192, 193, 205, 212, 225, 235, 237, 240, 253, 298, 337, 338, 340, 342, 360, 364, 373, 382, 385, 387, 389, 390, 391, 397, 399, 440, 443, 446, 448, 449, 450, 452, 453, 455, 460, 465, 488, 489, 490, 491, 506, 508, 516, 538, 539, 540, 541, 547, 554, 559, 560, 565, 567, 568, 578, 596, 603, 613, 614, 616, 617, 634, 636, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 677, 678, 680, 685, 687, 690, 691, 692, 738, 775, 798, 806, 820, 850, 851, 865, 873, 876, 879, 880, 881, 882, 886, 887, 888, 890, 893, 895, 896, 897, 898, 899, 900, 901, 905, 906, 910, 912, 913, 914, 915, 916, 925, 928, 930, 931, 957, 969, 971, 972, 1008, 1013, 1014, 1018, 1024, 1027, 1032, 1039, 1042, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "copy_": 1039, "copy_cov": 554, "copy_gram": [688, 689, 692], "copy_x": [449, 453, 465, 541, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 678, 680, 685, 687, 688, 689, 690, 691, 1041, 1047, 1048], "copy_x_train": [616, 617], "copy_xi": 692, "copybutton": [385, 403, 408], "copyright": [54, 114], "corani": 277, "cordier": 1046, "core": [41, 48, 83, 89, 90, 99, 104, 136, 138, 144, 146, 147, 183, 188, 191, 192, 253, 271, 332, 371, 373, 385, 388, 393, 399, 403, 409, 415, 420, 422, 423, 426, 450, 452, 455, 456, 461, 463, 502, 505, 544, 595, 600, 664, 665, 672, 674, 682, 845, 846, 847, 848, 849, 854, 862, 994, 1001, 1004, 1013, 1018, 1019, 1020, 1022, 1030, 1032, 1034, 1041, 1043, 1044, 1046, 1049, 1053, 1054, 1055], "core_dist": [99, 461, 462, 463], "core_distances_": [99, 456, 461, 463], "core_sampl": 426, "core_sample_indices_": [83, 450], "core_samples_mask": 83, "corei": [1040, 1047, 1048], "corentin": 1053, "cori": 1044, "corneil": 1052, "corner": [49, 52, 62, 87, 190, 274, 278, 286, 287, 311, 334, 380, 385, 504, 922, 924, 998, 1053], "cornerston": 1022, "cornflowerblu": [158, 213, 222, 229, 263, 265, 268, 284, 286, 303, 309, 365, 366], "corollari": 387, "corona": 1052, "corpora": 420, "corpu": [53, 360, 361, 380, 420, 594, 595, 596, 597, 1032, 1040], "corr": [116, 194, 277], "corrcoef": [116, 134], "correct": [1, 29, 51, 62, 63, 91, 113, 138, 149, 183, 191, 203, 208, 219, 237, 262, 270, 271, 277, 284, 286, 295, 297, 348, 350, 359, 368, 382, 385, 387, 389, 400, 413, 415, 419, 420, 422, 423, 432, 438, 456, 462, 475, 480, 494, 507, 509, 641, 673, 682, 684, 709, 710, 714, 718, 719, 724, 727, 729, 730, 734, 735, 736, 740, 744, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 789, 790, 791, 793, 796, 797, 800, 802, 838, 839, 840, 847, 855, 881, 983, 994, 998, 999, 1013, 1023, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "correct_covari": [475, 480], "corrected_std": 277, "corrected_var": 277, "correctli": [1, 168, 172, 219, 237, 253, 284, 286, 292, 308, 325, 339, 348, 385, 394, 420, 422, 432, 443, 475, 499, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 664, 672, 674, 680, 681, 682, 709, 800, 802, 805, 828, 838, 839, 840, 841, 845, 846, 847, 848, 849, 852, 857, 860, 867, 890, 905, 906, 910, 912, 913, 914, 915, 916, 918, 920, 948, 995, 998, 1001, 1002, 1008, 1013, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "correl": [1, 50, 63, 114, 116, 117, 134, 145, 146, 154, 156, 169, 172, 180, 188, 189, 190, 192, 193, 203, 208, 214, 237, 277, 297, 324, 328, 329, 340, 378, 381, 382, 390, 399, 402, 412, 417, 419, 424, 456, 463, 488, 489, 491, 499, 500, 506, 530, 570, 612, 615, 633, 640, 641, 642, 688, 689, 749, 763, 784, 785, 786, 836, 850, 851, 887, 888, 890, 899, 989, 994, 999, 1005, 1008, 1012, 1014, 1018, 1019, 1020, 1034, 1039, 1040, 1041, 1052, 1053], "correlation_coeffici": 615, "correlation_model": 1046, "correspond": [1, 49, 51, 52, 57, 62, 63, 67, 75, 87, 99, 110, 114, 126, 138, 141, 144, 145, 147, 155, 169, 172, 173, 176, 181, 184, 191, 208, 211, 219, 220, 223, 228, 237, 247, 252, 253, 260, 267, 271, 276, 278, 280, 281, 286, 287, 291, 311, 323, 329, 330, 331, 360, 363, 364, 368, 373, 379, 380, 381, 384, 385, 387, 389, 392, 393, 398, 399, 400, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 430, 436, 443, 445, 447, 451, 454, 457, 459, 465, 467, 469, 470, 473, 478, 488, 489, 490, 496, 497, 498, 499, 500, 501, 502, 540, 547, 550, 551, 552, 555, 556, 558, 561, 563, 565, 566, 567, 570, 588, 590, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 623, 636, 638, 639, 641, 649, 652, 653, 654, 658, 664, 665, 666, 667, 668, 674, 675, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 689, 693, 696, 697, 698, 700, 709, 716, 719, 730, 731, 740, 744, 748, 758, 760, 780, 784, 788, 794, 795, 800, 802, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 831, 839, 841, 842, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 867, 868, 877, 880, 881, 883, 884, 887, 891, 899, 910, 911, 912, 915, 918, 919, 920, 921, 935, 941, 955, 958, 973, 987, 988, 990, 991, 992, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1023, 1029, 1032, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "correspondingli": 1056, "corri": 1050, "corrobor": 397, "corrupt": [43, 131, 203, 225, 236, 397, 866, 994, 1006], "cort": [1050, 1051, 1054, 1055], "cortex": 420, "cos_transform": 42, "cosin": [1, 42, 74, 292, 298, 303, 377, 380, 399, 415, 420, 421, 447, 451, 456, 463, 541, 596, 597, 626, 702, 766, 767, 768, 771, 776, 777, 780, 784, 785, 786, 850, 851, 855, 882, 1001, 1014, 1034, 1049], "cosine_dist": [1, 702, 768, 1001, 1045], "cosine_similar": [1, 352, 411, 766, 771, 996, 1044, 1058], "cosinesimil": 298, "cosmo": 56, "cost": [42, 73, 127, 144, 154, 175, 188, 196, 239, 247, 251, 269, 279, 281, 284, 286, 291, 327, 335, 348, 360, 361, 362, 367, 385, 391, 393, 397, 414, 415, 422, 484, 502, 506, 543, 544, 545, 552, 557, 563, 564, 565, 566, 567, 570, 571, 608, 616, 625, 633, 652, 653, 658, 659, 664, 666, 667, 668, 669, 674, 678, 680, 682, 684, 693, 694, 698, 706, 708, 724, 738, 748, 790, 793, 805, 806, 828, 836, 871, 890, 908, 910, 911, 912, 915, 918, 919, 920, 921, 947, 990, 994, 995, 998, 1001, 1011, 1012, 1013, 1019, 1020, 1034, 1045, 1048, 1049], "cost_complexity_pruning_path": [363, 918, 919, 920, 921], "cost_gain": 271, "costa": [1047, 1052], "costin": 1039, "costli": [105, 110, 145, 186, 271, 278, 356, 373, 386, 391, 415, 449, 633, 814, 816, 902, 903, 947, 998, 1001, 1010, 1018], "costlier": 677, "costs_": [477, 478, 1055], "could": [0, 42, 47, 51, 52, 63, 71, 76, 87, 104, 105, 124, 127, 139, 140, 148, 151, 154, 170, 175, 180, 187, 190, 191, 192, 219, 220, 223, 228, 237, 243, 251, 252, 253, 270, 271, 277, 297, 306, 309, 330, 344, 345, 359, 363, 374, 385, 391, 393, 399, 403, 409, 413, 419, 422, 423, 427, 480, 539, 544, 613, 614, 635, 677, 808, 813, 815, 987, 988, 994, 995, 1005, 1006, 1008, 1013, 1018, 1031, 1036, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "couldn": [1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "count": [1, 22, 42, 51, 53, 61, 63, 75, 83, 87, 103, 104, 122, 160, 161, 191, 192, 219, 221, 237, 250, 260, 271, 286, 291, 295, 298, 328, 329, 360, 361, 367, 380, 382, 389, 394, 399, 400, 413, 415, 420, 422, 423, 452, 455, 495, 502, 542, 550, 587, 594, 595, 596, 597, 600, 610, 623, 646, 703, 711, 721, 724, 735, 736, 744, 760, 789, 790, 792, 793, 845, 849, 850, 851, 859, 862, 873, 922, 924, 949, 963, 987, 990, 994, 998, 1000, 1001, 1008, 1014, 1022, 1032, 1039, 1042, 1044, 1047, 1048, 1050, 1051], "count_nonzero": [45, 48, 372], "count_onli": [850, 851], "count_vect": 1032, "counter": [56, 138, 284, 415, 682, 683, 684, 1052], "counterpart": [383, 987, 995, 1013, 1027], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 51, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 51, "countri": [324, 334, 502, 995], "counts_": 1051, "countvector": [1, 53, 341, 361, 380, 390, 416, 420, 423, 470, 495, 542, 588, 595, 596, 597, 1032, 1039, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "coupl": [53, 86, 87, 89, 240, 379, 380, 412, 413, 415, 424, 595, 916, 987, 1013], "cournapeau": [0, 405, 1039, 1042], "cours": [46, 47, 196, 291, 372, 385, 387, 414, 420, 423, 424, 988, 993, 994, 1022], "coursecentr": [415, 448], "courtesi": 385, "couvreur": [1048, 1049], "cov": [69, 114, 117, 140, 267, 385, 399, 403, 408, 418, 428, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 525, 538, 540, 547, 554], "cov_": [49, 114], "cov_class_1": 69, "cov_class_2": 69, "cov_init": 1055, "cov_test": 49, "cov_train": 49, "cov_typ": [264, 497], "covar": [262, 263, 268], "covari": [1, 47, 50, 64, 68, 111, 116, 131, 134, 153, 155, 175, 182, 222, 246, 261, 263, 265, 266, 267, 268, 284, 309, 334, 394, 399, 406, 415, 418, 420, 425, 428, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 510, 521, 525, 533, 538, 540, 547, 554, 555, 556, 569, 616, 617, 619, 628, 629, 637, 650, 651, 656, 660, 662, 688, 689, 692, 695, 699, 803, 804, 806, 825, 997, 1004, 1008, 1019, 1020, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1046, 1048], "covariance_": [50, 69, 112, 114, 475, 476, 477, 478, 479, 480, 481, 482, 555, 556, 992, 1046], "covariance_correct": [475, 480], "covariance_eigh": [335, 547, 1057], "covariance_estim": [68, 555, 992, 1051], "covariance_prior": [268, 803], "covariance_prior_": 803, "covariance_reweight": [475, 480], "covariance_typ": [78, 263, 264, 266, 267, 268, 803, 804, 1055], "covariances_": [262, 263, 264, 267, 268, 803, 804, 1046], "cover": [0, 86, 196, 219, 237, 368, 377, 380, 385, 398, 641, 726, 800, 998, 999, 1016], "coverag": [1, 49, 51, 151, 154, 219, 237, 311, 380, 388, 411, 504, 633, 726], "coverage_error": [1, 998, 1043, 1053], "coverage_fract": 151, "coverages_land": 49, "covertyp": [1, 378, 497, 1034], "covtyp": 196, "cow": 1040, "cowlei": 1049, "cowton": 1053, "cox": [318, 322, 886, 898, 1008, 1047, 1055], "cp": 1032, "cpickl": 1032, "cpo": [173, 382], "cpp": 391, "cppflag": 383, "cpu": [0, 95, 278, 298, 332, 372, 373, 391, 399, 403, 411, 423, 502, 638, 653, 657, 659, 661, 664, 665, 667, 669, 671, 672, 674, 682, 685, 806, 820, 831, 832, 833, 854, 862, 903, 998, 1023, 1027, 1032, 1044, 1053, 1054, 1056], "cpu_count": [76, 144, 298], "cpuexecutionprovid": 409, "cpython": [385, 386, 391, 1054], "craft": 388, "craig": [1010, 1042, 1047], "crall": [1046, 1052], "crammer": [672, 673, 741, 994, 998, 1013], "crammer06a": [672, 673], "crammer_sing": [910, 999, 1013, 1039], "cranenburgh": 1043, "crash": [50, 385, 409, 474, 900, 901, 908, 1008, 1043, 1047, 1055, 1056], "crawl": [527, 939], "craze": 1046, "crc": 994, "creat": [1, 42, 43, 46, 49, 57, 58, 62, 63, 65, 67, 69, 71, 73, 75, 77, 78, 80, 83, 86, 92, 94, 96, 104, 105, 112, 117, 120, 126, 129, 140, 143, 147, 148, 149, 151, 155, 158, 172, 175, 177, 180, 181, 182, 184, 187, 190, 192, 198, 200, 202, 205, 215, 220, 221, 231, 232, 241, 251, 253, 256, 257, 259, 267, 271, 272, 273, 275, 277, 287, 291, 306, 308, 309, 320, 322, 323, 327, 330, 331, 342, 344, 345, 349, 350, 353, 355, 356, 357, 361, 363, 365, 366, 368, 373, 380, 381, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 398, 399, 403, 409, 413, 415, 416, 419, 421, 422, 423, 425, 444, 457, 459, 471, 472, 505, 521, 522, 523, 524, 552, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 594, 595, 597, 603, 634, 636, 637, 638, 639, 703, 704, 706, 707, 708, 788, 795, 806, 808, 812, 816, 820, 824, 828, 829, 831, 832, 840, 871, 883, 912, 915, 918, 919, 920, 921, 925, 928, 950, 951, 957, 971, 983, 988, 994, 997, 998, 999, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1022, 1028, 1030, 1031, 1036, 1039, 1040, 1042, 1045, 1049, 1052, 1053, 1054, 1055, 1056, 1057], "create_ax": 318, "create_species_bunch": 49, "createindex": 298, "creation": [387, 517, 518, 519, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 662, 850, 851, 1022, 1046, 1047, 1048, 1052], "creativ": 379, "creator": [173, 379, 382], "cred_int_df": 277, "cred_interv": 277, "credibl": 277, "credit": [380, 393, 422, 994, 1022], "credit_amount": 271, "credit_card": 271, "credit_gain_scor": 271, "credit_histori": 271, "creighton": 332, "crfsuit": 1017, "crispinlogan": [1051, 1054, 1055, 1057], "cristian": 648, "cristina": 1051, "criteria": [91, 144, 188, 197, 208, 227, 267, 277, 393, 415, 424, 447, 472, 488, 489, 490, 507, 563, 564, 565, 566, 570, 571, 652, 658, 662, 664, 665, 677, 698, 871, 890, 910, 911, 918, 919, 920, 921, 988, 997, 1002, 1012, 1019, 1031, 1042, 1047, 1050], "criterion": [63, 110, 111, 194, 207, 227, 267, 289, 328, 387, 394, 399, 415, 420, 447, 451, 455, 458, 465, 468, 538, 543, 545, 552, 559, 560, 563, 564, 565, 566, 570, 571, 572, 612, 633, 650, 651, 654, 662, 672, 673, 674, 675, 677, 678, 680, 682, 683, 684, 686, 697, 701, 716, 804, 907, 912, 913, 914, 915, 916, 918, 919, 920, 921, 994, 997, 998, 1006, 1011, 1014, 1020, 1031, 1034, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "criterion_": [207, 208, 662], "critic": [379, 385, 398, 422, 698, 995, 998, 1006, 1013, 1022, 1050], "crockett": 1054, "crombach": 1041, "crop": [393, 1054], "cross": [1, 8, 28, 51, 52, 63, 69, 88, 91, 92, 104, 105, 107, 108, 110, 114, 117, 122, 131, 144, 147, 148, 150, 151, 154, 163, 167, 170, 171, 173, 191, 192, 197, 203, 205, 207, 213, 219, 221, 227, 237, 254, 259, 264, 265, 267, 269, 274, 277, 278, 279, 281, 283, 284, 285, 286, 289, 290, 291, 292, 295, 302, 316, 317, 319, 324, 327, 329, 334, 340, 348, 355, 380, 385, 387, 394, 397, 398, 399, 409, 410, 413, 416, 417, 420, 422, 423, 424, 425, 443, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 499, 507, 508, 510, 521, 547, 573, 574, 581, 599, 600, 603, 608, 612, 615, 648, 649, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 707, 708, 712, 719, 734, 747, 791, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 844, 870, 871, 875, 890, 891, 908, 910, 912, 915, 953, 997, 998, 1001, 1002, 1006, 1008, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1026, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "cross_decomposit": [1, 115, 116, 117, 188, 254, 488, 489, 490, 491, 999, 1019, 1043, 1044, 1046, 1047, 1048], "cross_val": 1039, "cross_val_predict": [1, 159, 273, 327, 406, 413, 419, 422, 443, 573, 574, 832, 833, 1043, 1044, 1045, 1046, 1048, 1050, 1052, 1056], "cross_val_scor": [1, 51, 131, 186, 187, 188, 269, 273, 282, 292, 333, 351, 368, 385, 387, 397, 406, 419, 422, 478, 526, 581, 709, 748, 806, 831, 833, 918, 919, 987, 998, 1019, 1027, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1051, 1052, 1055, 1056], "cross_valid": [1, 42, 51, 148, 154, 159, 191, 221, 253, 273, 280, 291, 295, 324, 334, 385, 398, 406, 581, 831, 832, 998, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056], "crossentropi": 567, "crossvalid": [277, 292], "crowd": [393, 400, 995, 1018], "crucial": [50, 154, 190, 223, 272, 372, 384, 385, 399, 400, 415, 425, 1013], "crude": 1050, "crunch": 391, "cruz": 183, "crypt": [56, 380], "cryptograph": 394, "cs_": 665, "cs_note": 424, "cs_point": 147, "csail": [415, 672, 673, 682, 847], "csc": [1, 372, 397, 399, 423, 533, 557, 559, 560, 676, 698, 877, 879, 885, 890, 893, 895, 901, 926, 930, 931, 961, 973, 974, 976, 977, 978, 979, 1001, 1008, 1047, 1048, 1050, 1053], "csc_matrix": [458, 563, 564, 569, 570, 571, 572, 887, 918, 919, 920, 921, 988, 1008, 1014, 1044], "csco": 50, "csgraph": [399, 1052], "csie": [196, 379, 493, 514, 515, 664], "csizsek": 1046, "csr": [1, 54, 335, 361, 372, 379, 380, 394, 397, 399, 423, 426, 449, 452, 453, 455, 456, 465, 503, 514, 529, 533, 559, 560, 563, 564, 570, 571, 572, 596, 636, 664, 698, 720, 774, 798, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 865, 873, 877, 879, 881, 882, 883, 885, 888, 889, 890, 893, 894, 895, 897, 900, 903, 918, 919, 920, 921, 926, 930, 931, 953, 961, 973, 974, 975, 976, 977, 978, 979, 980, 981, 1001, 1008, 1012, 1039, 1040, 1045, 1047, 1048, 1054, 1055, 1056], "csr_arrai": 980, "csr_matrix": [298, 328, 446, 450, 458, 502, 540, 550, 563, 564, 565, 566, 569, 570, 571, 572, 594, 599, 600, 720, 836, 865, 883, 885, 912, 913, 915, 916, 918, 919, 920, 921, 948, 953, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 999, 1008, 1012, 1013, 1014, 1054], "css": 1051, "cst": 992, "cstr": 848, "cstride": 192, "csv": [50, 379, 382, 390, 1047, 1052], "csytraci": 1042, "ct": [52, 183, 260, 416, 470, 472, 473], "ctc": 183, "cttt": 183, "cube": [427, 539], "cubic": [112, 425], "cuda": [397, 411], "cue": 997, "culprit": 397, "cultiv": 382, "cultur": 380, "cum_claim": [219, 237], "cum_exposur": 219, "cumsum": [150, 219, 237, 1046], "cumtim": 391, "cumul": [1, 150, 219, 237, 415, 732, 741, 762, 887, 899, 1008, 1012, 1046, 1048, 1049], "cumulated_claim": 219, "cumulated_claim_amount": 237, "cumulated_exposur": 219, "cumulated_sampl": 237, "cunha": [1040, 1041], "cup": [380, 998], "cupi": [332, 335, 397, 411, 1056, 1057], "cupy_to_ndarrai": 411, "curat": [385, 388, 389], "cure": 994, "curic": [1047, 1048], "current": [0, 1, 6, 46, 80, 138, 180, 191, 237, 318, 327, 373, 374, 380, 383, 385, 386, 387, 390, 394, 397, 399, 400, 411, 412, 415, 419, 422, 423, 424, 425, 446, 452, 456, 474, 475, 476, 477, 478, 479, 480, 481, 482, 538, 541, 547, 559, 560, 563, 564, 565, 566, 568, 570, 571, 572, 582, 597, 599, 616, 623, 632, 633, 652, 664, 673, 677, 681, 682, 683, 684, 794, 803, 804, 855, 859, 867, 868, 886, 898, 908, 918, 919, 920, 921, 924, 965, 973, 987, 992, 994, 998, 1001, 1002, 1008, 1018, 1021, 1030, 1047, 1051, 1053, 1054, 1055], "current_count": 75, "current_month": 180, "current_sklearn_vers": 582, "current_sz_mb": 46, "currentcontrolset": 403, "currentmodul": 385, "curs": [359, 360, 415, 421, 1000, 1001, 1026, 1031], "cursor": [144, 278], "curv": [1, 28, 46, 49, 59, 60, 62, 71, 108, 110, 141, 143, 144, 150, 155, 188, 197, 198, 209, 219, 237, 239, 241, 244, 245, 247, 249, 256, 257, 261, 262, 263, 264, 266, 267, 269, 271, 277, 287, 314, 319, 322, 327, 335, 348, 352, 365, 392, 410, 414, 419, 421, 443, 444, 445, 508, 516, 521, 527, 531, 570, 638, 651, 664, 704, 706, 708, 712, 713, 714, 715, 733, 735, 747, 748, 788, 790, 793, 794, 795, 803, 804, 812, 823, 829, 834, 836, 837, 848, 871, 890, 910, 915, 994, 995, 997, 998, 1004, 1014, 1019, 1020, 1022, 1034, 1036, 1041, 1042, 1045, 1049, 1051, 1052, 1053, 1054, 1055], "curvatur": 313, "cusick": 1049, "custom": [1, 14, 29, 40, 135, 170, 172, 188, 202, 228, 257, 269, 271, 276, 278, 281, 284, 285, 289, 300, 305, 309, 327, 343, 345, 346, 348, 349, 351, 359, 361, 377, 380, 383, 387, 392, 393, 394, 397, 398, 399, 406, 409, 415, 416, 419, 425, 474, 495, 499, 500, 508, 510, 544, 546, 553, 555, 563, 564, 570, 571, 577, 579, 608, 636, 637, 696, 705, 719, 784, 806, 836, 874, 908, 915, 982, 987, 992, 998, 1001, 1017, 1018, 1019, 1022, 1032, 1034, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057], "custom_combin": 883, "custom_cv": 419, "custom_cv_2fold": 419, "custom_fnames_enc": 883, "custom_nam": 359, "custom_scor": 335, "custom_scorer_modul": 998, "custom_scoring_funct": 998, "customestim": 136, "customkernel": 624, "customvector": 423, "cut": [56, 77, 80, 99, 100, 172, 173, 188, 241, 269, 280, 295, 335, 340, 389, 397, 412, 414, 415, 452, 458, 459, 468, 502, 594, 597, 664, 697, 701, 822, 828, 833, 871, 890, 1008, 1019], "cut_dist": [89, 452], "cutler": [918, 919], "cutoff": [198, 952, 1008, 1048], "cutoffs_x0": 318, "cutoffs_x1": 318, "cv": [1, 42, 50, 51, 60, 61, 62, 63, 88, 104, 105, 106, 107, 110, 131, 144, 148, 150, 154, 164, 172, 186, 187, 191, 208, 218, 221, 253, 271, 273, 275, 276, 277, 278, 279, 280, 282, 283, 287, 291, 292, 295, 324, 332, 334, 335, 348, 355, 398, 399, 406, 413, 414, 419, 422, 424, 443, 478, 573, 574, 600, 608, 653, 657, 659, 661, 665, 667, 669, 671, 679, 681, 806, 808, 809, 810, 811, 812, 820, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 841, 844, 891, 918, 919, 987, 990, 993, 994, 998, 1008, 1018, 1027, 1028, 1032, 1041, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1055, 1056, 1057, 1058], "cv_alpha": [657, 661], "cv_alphas_": [208, 657, 661, 1051], "cv_best_it": 150, "cv_clf": 150, "cv_color": 150, "cv_estim": 150, "cv_line": 150, "cv_mape_scor": 51, "cv_model": 191, "cv_result": [42, 51, 104, 144, 154, 172, 275, 276, 278, 280, 406, 820, 833, 998], "cv_results_": [104, 105, 106, 114, 144, 164, 172, 267, 271, 275, 276, 277, 278, 281, 285, 288, 289, 300, 348, 478, 600, 679, 681, 806, 809, 810, 820, 828, 1032, 1045, 1049, 1051, 1052, 1057], "cv_results_ecoc": 295, "cv_results_lr": 221, "cv_results_ovo": 295, "cv_results_ovr": 295, "cv_results_qr": 221, "cv_results_tre": 295, "cv_results_tuned_model": 291, "cv_results_vanilla_model": 291, "cv_score": [150, 291], "cv_test_scor": 834, "cv_train_scor": 834, "cv_valu": 1047, "cv_values_": [679, 681, 1057], "cvc": 50, "cve": 1052, "cvx": 50, "cwitt": 1047, "cxx": 383, "cxxflag": 383, "cyan": [110, 141, 191, 309], "cybernet": 775, "cycl": [0, 15, 42, 76, 78, 84, 96, 124, 204, 263, 268, 284, 286, 330, 331, 385, 389, 406, 420, 585, 586, 633, 809, 810, 926, 987, 988, 1047, 1048, 1049, 1051, 1052, 1053, 1054], "cycler": 72, "cyclic": [42, 652, 653, 658, 659, 666, 667, 668, 669, 1051], "cyclic_cossin_linear_pipelin": 42, "cyclic_cossin_linear_predict": 42, "cyclic_cossin_transform": 42, "cyclic_hour": 42, "cyclic_month": 42, "cyclic_spline_interactions_pipelin": 42, "cyclic_spline_linear_pipelin": 42, "cyclic_spline_linear_predict": 42, "cyclic_spline_poly_pipelin": 42, "cyclic_spline_poly_predict": 42, "cyclic_spline_transform": 42, "cyclic_weekdai": 42, "cyl": [49, 311], "cynthias13w": 1056, "cyt": 295, "cython": [40, 331, 372, 373, 383, 385, 388, 394, 397, 403, 408, 411, 415, 422, 514, 1008, 1009, 1012, 1013, 1017, 1018, 1039, 1042, 1043, 1045, 1051, 1054, 1055, 1056], "cython3": 383, "cythonx": 386, "c\u00e8sar": 998, "d": [0, 1, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 66, 67, 71, 72, 76, 82, 83, 84, 94, 95, 97, 103, 104, 114, 119, 122, 124, 127, 131, 133, 175, 183, 191, 219, 227, 235, 237, 244, 247, 249, 250, 251, 252, 265, 276, 277, 285, 291, 297, 304, 305, 311, 315, 337, 338, 341, 348, 352, 353, 361, 379, 380, 382, 387, 391, 397, 413, 415, 417, 418, 420, 422, 423, 425, 426, 450, 452, 453, 458, 466, 469, 494, 499, 509, 532, 540, 542, 563, 564, 571, 572, 587, 588, 596, 620, 621, 625, 628, 629, 650, 651, 654, 675, 676, 677, 686, 694, 695, 698, 699, 703, 705, 711, 714, 727, 728, 729, 730, 732, 762, 770, 784, 787, 794, 818, 845, 847, 849, 850, 851, 866, 877, 881, 883, 884, 886, 898, 903, 920, 921, 925, 990, 992, 994, 995, 996, 997, 998, 1000, 1006, 1008, 1010, 1013, 1014, 1028, 1029, 1030, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1057], "d1997": 422, "d2": [728, 729, 998], "d2_absolute_error_scor": [1, 729, 998, 1053], "d2_log_loss_scor": [1, 998, 1057], "d2_pinball_scor": [1, 998, 1053], "d2_pinball_score_08": 998, "d2_tweedie_scor": [1, 998, 1052], "d2_tweedie_score_15": 998, "d55e00": 262, "d81b60": 322, "d83": 382, "d_": [112, 415, 420, 654, 675, 686, 784, 995, 1000], "d_c": 415, "d_chunk": 787, "d_fit": 694, "d_fix": 133, "d_m": 415, "d_multi": 133, "da": [380, 1054, 1055, 1057], "dae": 994, "dagm": 990, "dagstuhl": 998, "dai": [42, 50, 51, 154, 180, 192, 220, 373, 382, 385, 889, 1022, 1045, 1046, 1053, 1054], "daiki": 1043, "daili": [50, 154, 1022], "dakota": 1049, "dale": [221, 1052], "dalla": 1047, "dalmia": [1045, 1046, 1047], "damag": 423, "damicelli": 1054, "damink": 1056, "daml": [415, 458, 468], "damp": [78, 415, 446, 460], "dan": [54, 1039, 1043, 1044, 1045, 1047, 1048], "danfrankj": 1043, "dang": [685, 994, 1057], "danger": [220, 419], "dangi": 1056, "dangl": 54, "dangonite57": [1054, 1055], "daniel": [196, 332, 372, 891, 1008, 1022, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1056], "daniela": [1053, 1054], "danielgaerb": 1054, "danielsen": 1046, "danielweitzenfeld": 1042, "daniil": 1046, "danil": 1047, "dani\u00ebl": 1050, "danna": 1049, "danni": [1042, 1043, 1044], "dantzig": 355, "danylo": 1048, "dao": 1047, "daphn": 1050, "dare": 1049, "darioka": [1051, 1053, 1054], "dariu": [1046, 1047], "dark": [141, 191, 348, 380, 1056], "dark2": [61, 63, 240], "darkblu": 309, "darkorang": [111, 128, 132, 133, 220, 230, 242, 263, 264, 265, 268, 284, 286, 303, 309, 310, 339, 365], "darkorchid": 229, "darkr": [233, 304, 347], "darpa": 380, "darren": [1053, 1054], "darshan": 1051, "dart": 1017, "dartmouth": 0, "dasarathi": 382, "dasgupta": [423, 452, 904, 1010], "dash": [68, 112, 138, 150, 161, 175, 178, 180, 191, 206, 211, 214, 220, 221, 228, 231, 232, 256, 271, 277, 287, 350, 1012], "dashdot": [150, 175, 178, 256], "dask": [1018, 1047], "data": [0, 1, 9, 16, 21, 25, 35, 36, 37, 41, 44, 46, 49, 51, 52, 53, 56, 58, 61, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 90, 93, 94, 95, 96, 99, 102, 104, 105, 107, 111, 113, 120, 122, 123, 124, 127, 128, 132, 134, 136, 138, 140, 141, 143, 144, 147, 148, 150, 151, 156, 157, 158, 160, 162, 164, 165, 166, 170, 174, 175, 176, 177, 179, 180, 182, 184, 186, 188, 191, 192, 197, 198, 201, 202, 203, 204, 208, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 246, 249, 250, 251, 253, 255, 256, 257, 260, 262, 263, 264, 265, 266, 268, 270, 271, 275, 277, 279, 280, 281, 282, 285, 291, 292, 295, 297, 298, 302, 304, 306, 307, 308, 309, 311, 314, 315, 317, 319, 320, 321, 325, 327, 329, 331, 332, 333, 335, 338, 339, 341, 342, 344, 345, 347, 352, 353, 359, 364, 365, 366, 367, 371, 373, 377, 378, 379, 381, 382, 385, 387, 388, 391, 392, 393, 394, 398, 403, 406, 409, 411, 412, 413, 414, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 521, 526, 527, 528, 529, 530, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 623, 624, 628, 631, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 716, 717, 719, 723, 724, 726, 731, 733, 734, 735, 736, 737, 740, 742, 743, 744, 746, 747, 760, 761, 763, 767, 769, 770, 775, 784, 789, 790, 791, 793, 794, 795, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 934, 935, 936, 944, 946, 947, 961, 964, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1027, 1028, 1030, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "data1010": 1044, "data_filenam": [507, 511], "data_hom": [492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 1046, 1055], "data_home_path": 505, "data_id": [43, 148, 180, 191, 219, 237, 247, 271, 291, 295, 324, 379, 502], "data_ind": 52, "data_max": 1044, "data_max_": [880, 1044], "data_min": 1044, "data_min_": [880, 1044], "data_nam": 403, "data_path": 46, "data_rang": 1044, "data_range_": [880, 1044], "data_sampl": 53, "data_set": 314, "data_size_mb": 361, "data_stream": 46, "data_test": [251, 271, 278, 359, 515], "data_test_size_mb": 359, "data_train": [251, 271, 278, 359, 515], "data_train_size_mb": 359, "data_transform": 645, "data_transpos": [1053, 1055], "data_unravel_indic": 52, "data_vers": 403, "databas": [46, 173, 323, 372, 374, 380, 382, 415, 420, 422, 423, 426, 448, 450, 516, 561, 562, 903, 1010], "dataconversionwarn": 1, "datadimensionalitywarn": 1, "datafram": [1, 42, 51, 61, 103, 104, 105, 138, 144, 148, 151, 156, 172, 180, 186, 190, 191, 192, 193, 198, 203, 208, 223, 227, 237, 257, 260, 267, 271, 275, 277, 278, 280, 288, 289, 291, 295, 323, 324, 325, 330, 331, 332, 355, 359, 360, 379, 380, 385, 387, 390, 399, 416, 422, 439, 448, 449, 451, 453, 455, 470, 472, 473, 474, 488, 489, 490, 491, 495, 496, 497, 498, 502, 506, 507, 508, 510, 511, 516, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 567, 568, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 694, 695, 698, 806, 809, 810, 820, 836, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 908, 926, 953, 969, 972, 987, 988, 1018, 1032, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "dataia": 0, "datalim": 264, "datapoint": [42, 76, 86, 90, 179, 182, 202, 251, 252, 256, 272, 277, 297, 425, 452, 508, 563, 564, 565, 566, 570, 571, 572, 617, 918, 919, 920, 921, 991], "dataset": [1, 36, 44, 45, 47, 48, 49, 52, 53, 54, 56, 57, 58, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 104, 105, 106, 107, 108, 112, 113, 114, 117, 123, 126, 127, 128, 129, 130, 131, 133, 134, 137, 139, 140, 141, 142, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 171, 172, 173, 174, 176, 178, 181, 183, 186, 187, 193, 194, 196, 197, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 215, 216, 217, 218, 222, 223, 224, 226, 227, 229, 231, 232, 233, 234, 235, 236, 241, 243, 244, 245, 247, 250, 252, 254, 255, 259, 260, 262, 264, 265, 266, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 293, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 348, 349, 350, 351, 353, 355, 356, 357, 360, 361, 362, 363, 365, 366, 367, 368, 373, 374, 387, 388, 389, 391, 398, 399, 402, 403, 409, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 427, 430, 435, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 475, 476, 479, 480, 481, 482, 484, 487, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 589, 590, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 634, 637, 638, 639, 640, 641, 644, 645, 646, 649, 651, 652, 653, 655, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 714, 716, 717, 735, 761, 763, 793, 794, 798, 799, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 871, 874, 875, 883, 884, 888, 890, 892, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 931, 935, 936, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1024, 1026, 1027, 1028, 1031, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "dataset_nam": [256, 298], "datasets_nam": 256, "datastructur": [411, 1047, 1051], "datastuctur": 1056, "datatyp": [470, 472, 1046, 1049], "date": [42, 103, 154, 173, 180, 192, 380, 382, 385, 389, 400, 416, 1018], "dateco2datef641958": 180, "daten": [456, 1047, 1048], "datenbergwerk": 1049, "datetim": [42, 54, 180, 192], "dauphin": [316, 1041], "dave": [1039, 1046, 1047, 1053, 1055], "davi": [1, 480, 731, 998, 1043], "david": [0, 71, 91, 113, 144, 154, 198, 203, 221, 256, 278, 280, 323, 359, 360, 361, 380, 405, 415, 422, 425, 468, 538, 542, 573, 574, 628, 629, 634, 731, 803, 907, 988, 994, 1002, 1011, 1022, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "davidblnc": [1054, 1055], "davidleon123": 1057, "davies_bouldin_scor": [1, 415, 1047], "davis2006": 998, "daw": [0, 138, 139, 140, 405, 1039, 1040, 1041, 1042, 1043], "dawson": 1043, "dayn": [1054, 1055], "db": [83, 89, 415], "dbauer9": 1050, "dberenbaum": 1055, "dbg": 391, "dbpedia": 54, "dbpedia_resource_prefix_len": 54, "dbscan": [1, 70, 71, 72, 78, 89, 94, 97, 99, 188, 333, 339, 397, 399, 452, 456, 458, 461, 518, 710, 711, 723, 743, 799, 801, 862, 890, 1001, 1019, 1033, 1034, 1039, 1041, 1043, 1044, 1046, 1047, 1048, 1055, 1056], "dbscan_clust": 452, "dcc": 380, "dcg": [732, 762, 998, 1046], "dcg_score": [1, 762, 998, 1046, 1049], "dd": [49, 50, 157, 311, 504], "ddof": [277, 890, 901], "de": [0, 50, 60, 61, 62, 63, 107, 142, 159, 175, 176, 178, 179, 180, 181, 182, 184, 210, 251, 252, 324, 339, 355, 382, 641, 694, 770, 994, 995, 1018, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "dea": [1053, 1054, 1055], "deactiv": [258, 379, 386, 391, 403, 416, 809, 810, 1053], "dead": 1057, "deadlock": 400, "deal": [61, 91, 104, 154, 186, 191, 203, 243, 291, 295, 352, 361, 385, 390, 416, 423, 424, 425, 480, 502, 709, 714, 769, 793, 876, 947, 994, 1022, 1029, 1042, 1054, 1055], "dealloc": 1056, "dean": [159, 1047, 1053, 1055, 1057], "deap": 1017, "death": 380, "debian": [0, 372, 383, 391], "debias": 133, "deborah": [1045, 1046, 1056], "debug": [1, 368, 373, 386, 388, 391, 399, 402, 633, 909, 1017, 1032, 1047, 1051], "debugg": [388, 393], "dec": [220, 295, 683, 889, 914, 1013], "decad": [191, 1018], "decai": [180, 550, 867, 868, 947, 998, 1012, 1043], "decal": 1051, "decemb": [113, 154, 180, 380, 670, 691, 692, 1039, 1047, 1049, 1051, 1052, 1054], "decent": [246, 271, 276, 380, 1000], "deci": 286, "decid": [42, 49, 91, 94, 104, 149, 154, 268, 274, 277, 284, 380, 385, 400, 409, 414, 423, 425, 456, 463, 565, 566, 617, 641, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 677, 687, 690, 803, 852, 853, 854, 856, 858, 860, 861, 862, 873, 997, 1004, 1022, 1052, 1055], "decil": [638, 1050], "deciles_hlines_": 638, "deciles_vlines_": 638, "decim": [61, 181, 477, 478, 923, 1046, 1047], "decis": [0, 1, 39, 42, 61, 63, 66, 69, 75, 90, 92, 94, 128, 137, 140, 141, 142, 143, 149, 157, 158, 159, 161, 162, 166, 172, 173, 177, 179, 191, 201, 202, 211, 228, 229, 232, 246, 247, 249, 257, 269, 280, 281, 283, 284, 295, 306, 309, 313, 318, 319, 320, 323, 336, 340, 341, 344, 345, 346, 347, 348, 349, 350, 356, 357, 359, 372, 381, 382, 385, 399, 409, 410, 413, 415, 422, 443, 475, 502, 506, 510, 525, 542, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 599, 600, 637, 638, 639, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 704, 706, 708, 709, 713, 724, 726, 732, 733, 738, 741, 745, 746, 748, 762, 788, 790, 793, 794, 795, 800, 805, 806, 809, 810, 820, 822, 828, 833, 836, 838, 839, 841, 852, 871, 890, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1011, 1012, 1013, 1017, 1018, 1019, 1020, 1022, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "decision_funct": [47, 49, 61, 63, 90, 140, 155, 166, 231, 232, 233, 247, 256, 271, 284, 291, 304, 305, 313, 320, 334, 346, 347, 348, 352, 353, 357, 387, 399, 413, 414, 422, 443, 475, 555, 556, 559, 561, 565, 567, 569, 573, 599, 600, 637, 638, 639, 664, 665, 672, 674, 680, 681, 682, 683, 704, 706, 708, 713, 726, 732, 733, 741, 745, 746, 748, 762, 788, 794, 795, 800, 805, 806, 809, 810, 820, 828, 831, 838, 839, 840, 841, 856, 870, 877, 907, 910, 912, 914, 915, 994, 998, 1004, 1005, 1012, 1013, 1030, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1056], "decision_function_shap": [327, 356, 912, 915, 1013, 1044, 1045, 1048, 1049], "decision_path": [367, 563, 564, 570, 571, 572, 918, 919, 920, 921, 1045, 1050], "decision_threshold": [271, 291], "decision_tre": [922, 923, 924, 1014], "decision_tree_learn": [918, 919, 1014], "decisionboundarydisplai": [1, 47, 65, 66, 69, 90, 140, 155, 160, 202, 211, 228, 233, 280, 301, 306, 309, 323, 344, 345, 346, 347, 349, 350, 352, 364, 1053, 1054, 1056, 1057], "decisiontre": [147, 559, 1044], "decisiontreeclassifi": [1, 66, 138, 140, 147, 160, 281, 295, 333, 363, 364, 367, 399, 414, 422, 559, 561, 563, 565, 567, 570, 637, 717, 812, 834, 919, 920, 922, 923, 924, 988, 999, 1014, 1040, 1041, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "decisiontreeclassifierifitteddecisiontreeclassifi": 367, "decisiontreeregressor": [1, 139, 141, 257, 319, 327, 333, 365, 366, 390, 560, 562, 564, 565, 566, 568, 570, 571, 638, 639, 918, 921, 923, 942, 988, 999, 1014, 1040, 1041, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "decisiontreeregressorifitteddecisiontreeregressor": 329, "declan": 1051, "declar": [90, 240, 253, 368, 385, 386, 387, 391, 399, 449, 452, 453, 465, 477, 478, 484, 696, 700, 1046, 1050], "decod": [46, 311, 380, 399, 509, 575, 594, 595, 597, 1039, 1040], "decode_error": [46, 423, 509, 594, 595, 597, 1041], "decompos": [10, 124, 128, 141, 320, 540, 544, 715, 831, 947, 993, 994, 998, 1015, 1033, 1034], "decomposit": [1, 8, 43, 44, 53, 54, 84, 92, 103, 105, 106, 107, 117, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 157, 196, 239, 240, 242, 251, 254, 255, 258, 276, 302, 307, 323, 331, 334, 335, 360, 374, 378, 391, 394, 399, 411, 412, 413, 416, 422, 427, 455, 457, 458, 459, 468, 488, 489, 490, 501, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 562, 617, 656, 657, 658, 659, 660, 661, 662, 669, 670, 671, 678, 679, 680, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 803, 804, 859, 866, 869, 872, 888, 919, 946, 947, 994, 995, 998, 1015, 1017, 1019, 1020, 1026, 1028, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "decompress": [409, 1039], "decor": [1, 192, 327, 385, 386, 387, 394, 812, 829, 937, 941, 942, 959, 965, 1049, 1052, 1055, 1057], "decoupl": [422, 1000], "decreas": [62, 73, 80, 89, 92, 100, 108, 154, 156, 172, 173, 183, 191, 192, 194, 227, 249, 250, 279, 284, 290, 313, 320, 323, 327, 363, 372, 374, 385, 413, 415, 422, 447, 451, 469, 527, 540, 541, 547, 563, 564, 565, 566, 567, 568, 570, 571, 572, 608, 641, 642, 643, 682, 683, 684, 712, 718, 733, 788, 795, 867, 868, 918, 919, 920, 921, 987, 989, 990, 994, 995, 998, 1001, 1002, 1005, 1006, 1012, 1013, 1022, 1030, 1041, 1046, 1049, 1052], "dede00": [78, 96, 97], "dedic": [42, 275, 357, 383, 389, 391, 397, 400, 411, 415, 590, 678, 680, 693, 987, 994, 1017, 1023, 1047, 1056], "deduc": 45, "deduct": 1002, "dedupl": 1043, "deeksha": 1051, "deem": [285, 286, 540, 1006, 1052], "deep": [219, 387, 399, 409, 422, 429, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 775, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 1002, 1003, 1017, 1018, 1022, 1044, 1050, 1051, 1053], "deepcopi": 387, "deeper": [359, 1014], "deepest": [567, 568, 1050], "deeplook": 1049, "deeppink": 286, "def": [42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 61, 63, 68, 69, 71, 74, 75, 82, 86, 89, 90, 92, 95, 103, 108, 122, 124, 126, 127, 131, 133, 136, 138, 141, 143, 148, 150, 151, 154, 159, 178, 181, 183, 184, 187, 194, 199, 207, 208, 211, 216, 219, 220, 227, 228, 229, 237, 239, 240, 253, 254, 256, 262, 263, 264, 265, 267, 268, 271, 272, 275, 276, 277, 278, 280, 285, 288, 292, 298, 303, 305, 308, 311, 314, 316, 318, 320, 323, 324, 327, 335, 341, 344, 348, 352, 357, 359, 360, 361, 372, 380, 385, 387, 391, 392, 397, 416, 419, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 514, 515, 539, 603, 607, 616, 617, 624, 787, 883, 937, 942, 959, 998, 1005, 1013, 1028], "default": [1, 42, 51, 53, 61, 65, 76, 79, 80, 82, 89, 93, 124, 144, 169, 175, 186, 192, 198, 199, 208, 219, 220, 237, 248, 250, 256, 258, 260, 265, 271, 272, 280, 286, 291, 297, 298, 318, 322, 325, 327, 328, 332, 334, 335, 352, 355, 356, 359, 360, 361, 363, 368, 372, 373, 379, 380, 383, 387, 388, 389, 390, 391, 392, 394, 397, 398, 399, 403, 406, 409, 413, 414, 415, 416, 419, 420, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 740, 741, 742, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 934, 936, 937, 939, 941, 946, 947, 948, 949, 950, 951, 952, 961, 963, 964, 967, 968, 969, 971, 972, 973, 979, 982, 984, 985, 987, 988, 990, 992, 994, 997, 998, 999, 1001, 1002, 1004, 1005, 1008, 1010, 1012, 1013, 1014, 1023, 1027, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "default_bas": [78, 96], "default_rng": 280, "default_scor": 390, "default_target_attribut": 379, "default_tim": [234, 265], "defaultdict": [48, 51, 56, 61, 194, 280, 360, 361], "defazio": [664, 994], "defens": 295, "defer": 385, "defici": [995, 1012], "defin": [7, 26, 45, 50, 63, 69, 87, 89, 91, 100, 103, 104, 106, 117, 124, 129, 136, 138, 139, 159, 173, 175, 182, 183, 184, 192, 193, 194, 198, 220, 227, 236, 237, 246, 250, 253, 257, 259, 262, 267, 271, 277, 278, 280, 284, 286, 287, 288, 289, 291, 295, 298, 316, 318, 328, 334, 335, 348, 352, 355, 359, 360, 372, 381, 384, 385, 386, 387, 391, 392, 394, 397, 398, 399, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 430, 431, 432, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 495, 525, 526, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 633, 634, 635, 636, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 702, 703, 705, 714, 716, 717, 722, 727, 728, 729, 730, 731, 734, 737, 744, 747, 751, 752, 754, 756, 757, 759, 760, 763, 766, 772, 787, 791, 796, 797, 798, 799, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 897, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 934, 936, 939, 945, 956, 958, 982, 987, 988, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1018, 1028, 1031, 1034, 1036, 1041, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "definit": [1, 92, 113, 207, 219, 284, 298, 360, 385, 386, 387, 399, 402, 415, 417, 418, 420, 533, 535, 541, 617, 634, 698, 714, 724, 734, 764, 803, 804, 987, 990, 992, 994, 996, 998, 1001, 1012, 1016, 1034, 1043, 1047, 1054], "definitelyuncertain": 1045, "deflat": [191, 418, 427, 539], "defoi": 1052, "deform": [155, 267, 357], "degener": [122, 263, 427, 446, 460, 539, 726, 994, 998, 1048, 1052, 1053], "degrad": [154, 192, 246, 318, 355, 360, 421, 784, 1006], "degre": [42, 69, 126, 140, 180, 186, 190, 191, 192, 196, 198, 203, 207, 208, 220, 223, 252, 258, 262, 263, 264, 267, 268, 277, 292, 316, 329, 330, 345, 352, 354, 420, 424, 452, 458, 504, 541, 547, 645, 646, 649, 662, 781, 803, 806, 856, 885, 889, 912, 913, 914, 915, 916, 990, 991, 993, 994, 995, 996, 998, 999, 1001, 1004, 1005, 1008, 1011, 1013, 1030, 1042, 1048, 1052, 1053, 1056], "degrees_of_freedom_": 803, "degrees_of_freedom_prior": 803, "degrees_of_freedom_prior_": 803, "dei": 1051, "deil": [1040, 1050, 1051], "dein": 423, "dekel": [672, 673, 994], "del": [54, 391, 1051, 1052], "delai": [1, 385, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 806, 820, 831, 832, 1053, 1054, 1057], "delalleau": 1011, "delanou": 1050, "delattr": 1051, "delayed_funct": 964, "delbert": [72, 446, 460], "deleg": [90, 391, 439, 440, 923, 1043, 1045, 1051], "delet": [1, 105, 338, 340, 389, 390, 475, 480, 492], "delete_index": 338, "delete_indic": 338, "deleteri": 1046, "deli": 409, "deliber": 994, "delimit": [385, 1004, 1054], "deliv": [79, 372, 1022], "deliveri": 389, "dell": 50, "delong": [1051, 1052], "delta": [418, 458], "delta_": 995, "delta_k": 418, "delteil": 1043, "delv": [867, 868], "demand": [150, 154, 399, 423, 806, 820, 831, 832], "demarc": 94, "demiraj": [1054, 1055], "demo": [51, 52, 55, 70, 71, 73, 74, 75, 78, 79, 80, 82, 87, 88, 93, 94, 95, 96, 98, 101, 155, 188, 194, 203, 225, 250, 265, 267, 278, 286, 323, 339, 340, 359, 360, 387, 412, 415, 423, 446, 447, 450, 452, 453, 454, 456, 457, 459, 461, 464, 508, 517, 518, 519, 547, 710, 711, 723, 725, 743, 799, 801, 871, 890, 891, 1019], "demo_param": 387, "demonstr": [45, 51, 56, 57, 58, 61, 67, 70, 74, 77, 89, 95, 103, 105, 119, 138, 142, 149, 152, 170, 171, 183, 184, 188, 194, 220, 221, 253, 259, 260, 264, 268, 269, 273, 280, 283, 286, 292, 300, 303, 310, 317, 319, 320, 322, 325, 329, 336, 338, 339, 342, 346, 352, 359, 360, 361, 368, 374, 380, 381, 385, 390, 397, 406, 411, 415, 419, 422, 453, 508, 518, 526, 703, 709, 719, 748, 804, 806, 875, 906, 918, 987, 988, 992, 998, 999, 1000, 1001, 1008, 1011, 1014, 1016, 1019], "dem\u0161ar": 277, "den": [0, 404, 1040, 1041, 1046, 1047, 1048, 1051, 1052], "dendrit": [415, 716], "dendro": 194, "dendro_idx": 194, "dendrogram": [70, 101, 188, 194, 367, 415, 447, 451, 510, 1019, 1051], "denero": 741, "deng": [1043, 1044, 1045], "dengemann": 1040, "dengyong": 906, "deni": [131, 1041, 1042, 1046, 1047, 1048, 1054, 1055], "denni": 1053, "denois": [41, 82, 84, 85, 87, 123, 129, 188, 420, 502, 541, 543, 547, 590, 593, 836, 880, 1019], "denomin": [284, 422, 423, 428, 481, 596, 710, 763, 992], "denot": [171, 394, 399, 403, 413, 415, 419, 422, 594, 595, 597, 806, 812, 820, 829, 883, 884, 983, 987, 990, 994, 996, 998, 999, 1008, 1011, 1023, 1056], "dens": [50, 89, 188, 197, 203, 213, 331, 332, 341, 372, 394, 399, 415, 420, 422, 424, 449, 452, 453, 455, 470, 473, 502, 529, 530, 533, 540, 541, 550, 572, 613, 614, 635, 636, 658, 663, 664, 665, 672, 673, 674, 678, 679, 682, 683, 684, 693, 694, 695, 698, 699, 766, 767, 773, 785, 798, 867, 868, 875, 882, 883, 885, 887, 888, 889, 890, 899, 900, 901, 902, 903, 910, 911, 912, 913, 915, 916, 948, 969, 972, 988, 991, 994, 995, 998, 999, 1001, 1004, 1008, 1010, 1011, 1012, 1013, 1014, 1019, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "dense_lasso": 205, "dense_output": [767, 773, 903, 948, 1047], "denser": 450, "densif": 1048, "densifi": [399, 664, 665, 672, 673, 674, 682, 683, 684, 910, 988, 1041], "densiti": [1, 49, 83, 89, 94, 99, 108, 133, 171, 173, 188, 205, 219, 234, 237, 243, 246, 250, 261, 262, 268, 277, 283, 295, 299, 304, 305, 318, 348, 359, 380, 382, 394, 399, 415, 422, 426, 434, 450, 452, 454, 456, 458, 470, 473, 504, 508, 542, 547, 555, 556, 803, 804, 806, 850, 851, 855, 856, 903, 992, 994, 997, 1001, 1003, 1004, 1010, 1017, 1019, 1020, 1023, 1033, 1034, 1041, 1043, 1047, 1048, 1054, 1055], "density_": 903, "densityestim": 434, "densitymixin": 1, "denton": 1041, "deodhar": 1051, "deoli": 1052, "depart": [183, 415], "depedend": 1056, "depend": [1, 24, 42, 43, 45, 51, 63, 71, 87, 108, 128, 144, 148, 151, 152, 154, 156, 159, 168, 172, 181, 186, 188, 189, 191, 194, 196, 199, 203, 237, 240, 245, 246, 252, 256, 267, 271, 277, 278, 282, 283, 284, 291, 298, 314, 318, 323, 329, 332, 335, 345, 352, 355, 360, 361, 368, 372, 373, 374, 378, 385, 387, 388, 393, 394, 397, 398, 399, 400, 402, 403, 408, 409, 411, 415, 417, 419, 420, 422, 423, 424, 425, 426, 444, 445, 446, 450, 452, 453, 455, 456, 458, 460, 463, 465, 466, 468, 470, 475, 490, 495, 496, 497, 499, 502, 506, 507, 508, 510, 511, 516, 540, 541, 547, 550, 557, 565, 566, 568, 594, 595, 596, 597, 608, 610, 613, 614, 617, 633, 638, 639, 644, 646, 654, 664, 665, 675, 677, 679, 682, 683, 684, 686, 693, 696, 697, 700, 701, 717, 735, 736, 744, 784, 787, 789, 790, 793, 798, 799, 803, 804, 825, 835, 852, 853, 854, 856, 858, 859, 860, 861, 862, 868, 869, 871, 883, 884, 887, 890, 904, 911, 912, 915, 919, 928, 987, 988, 990, 991, 992, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1006, 1010, 1012, 1013, 1014, 1019, 1023, 1030, 1032, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1054, 1055, 1056], "dependen": 355, "depict": [138, 279, 422, 997], "deploi": [271, 335, 372, 402, 409, 414, 1018, 1022], "deploy": [393, 409, 1017, 1018, 1022], "depot": 50, "deprec": [1, 15, 330, 373, 387, 388, 389, 394, 399, 406, 447, 451, 452, 453, 456, 463, 465, 488, 489, 490, 491, 533, 542, 543, 544, 545, 546, 552, 559, 575, 576, 585, 586, 588, 633, 664, 665, 679, 681, 682, 683, 698, 715, 748, 756, 757, 784, 785, 786, 788, 806, 809, 810, 820, 831, 832, 833, 834, 857, 869, 870, 875, 912, 915, 926, 941, 942, 987, 988, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "deprecationwarn": 1049, "dept": 382, "depth": [42, 143, 148, 152, 155, 160, 295, 363, 365, 366, 367, 372, 383, 385, 389, 398, 422, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 850, 851, 855, 918, 919, 920, 921, 922, 924, 952, 1003, 1004, 1014, 1041, 1042, 1050], "der": [698, 702, 995, 1042, 1043, 1047], "derek": 1047, "deriv": [42, 56, 133, 134, 150, 180, 183, 193, 207, 208, 212, 220, 373, 380, 387, 417, 419, 421, 422, 423, 425, 427, 447, 451, 452, 471, 539, 612, 623, 628, 654, 675, 682, 686, 867, 868, 883, 889, 910, 911, 992, 994, 995, 998, 1002, 1004, 1013, 1039, 1040, 1041, 1046, 1047, 1048, 1054], "deros": 1050, "derouich": 1039, "derweh": 1057, "desai": [1046, 1048, 1051, 1052, 1054, 1055], "desalvo": 987, "descamp": 1047, "descend": [147, 633, 1049], "descent": [1, 45, 52, 149, 188, 197, 204, 207, 246, 251, 304, 330, 347, 420, 422, 477, 478, 484, 494, 502, 509, 537, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 637, 645, 652, 653, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 674, 678, 680, 682, 683, 684, 687, 688, 689, 690, 693, 700, 836, 867, 868, 871, 910, 914, 972, 995, 1002, 1004, 1013, 1019, 1020, 1030, 1034, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1052, 1053, 1054], "descr": [173, 378, 379, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 513, 516, 1029, 1047], "describ": [1, 42, 51, 90, 159, 173, 191, 237, 251, 277, 286, 368, 372, 373, 378, 380, 382, 384, 385, 387, 390, 393, 399, 400, 412, 415, 417, 418, 419, 420, 422, 423, 468, 475, 479, 480, 497, 499, 501, 502, 503, 506, 507, 508, 509, 510, 511, 516, 522, 523, 524, 534, 613, 614, 651, 665, 674, 720, 803, 804, 845, 847, 885, 947, 987, 990, 993, 994, 997, 998, 1000, 1004, 1012, 1013, 1014, 1021, 1023, 1029, 1030, 1047, 1049], "descript": [1, 51, 173, 191, 324, 378, 379, 384, 385, 389, 390, 393, 399, 415, 423, 458, 468, 470, 473, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 513, 516, 550, 636, 682, 768, 771, 784, 998, 1012, 1013, 1018, 1021, 1032, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "descriptor": [399, 514, 515], "deseri": 409, "deserv": [385, 391], "deshmukh": 1052, "deshpand": [1044, 1045], "design": [0, 1, 52, 57, 112, 138, 159, 178, 190, 191, 200, 253, 267, 271, 318, 324, 367, 374, 379, 385, 390, 397, 398, 399, 400, 402, 403, 408, 409, 415, 422, 424, 521, 534, 638, 639, 654, 671, 675, 682, 686, 691, 806, 824, 825, 845, 847, 988, 994, 995, 998, 999, 1008, 1017, 1018, 1022, 1025, 1041, 1048, 1057], "desir": [49, 60, 140, 173, 187, 219, 221, 318, 322, 335, 378, 385, 387, 389, 393, 409, 412, 415, 418, 419, 420, 424, 509, 544, 546, 550, 553, 573, 599, 608, 609, 670, 676, 691, 692, 705, 714, 742, 850, 851, 855, 870, 875, 877, 880, 881, 883, 884, 886, 887, 891, 894, 896, 898, 899, 934, 967, 990, 992, 995, 1001, 1008, 1012, 1013, 1014, 1023, 1039, 1047, 1048, 1049, 1052], "desislava": 1053, "desktop": 383, "despit": [63, 117, 217, 219, 237, 252, 307, 399, 406, 417, 633, 634, 636, 994, 1001, 1022, 1047, 1048], "dessyvv": 1053, "dest": 332, "destin": 1022, "destroi": [283, 423, 801, 879, 1008], "det": [1, 188, 259, 269, 286, 287, 385, 417, 521, 570, 704, 708, 733, 795, 836, 871, 890, 910, 945, 1019, 1051], "det_curv": [1, 274, 704, 788, 795, 998, 1051, 1052, 1057], "detail": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 63, 91, 138, 139, 141, 145, 147, 152, 159, 188, 192, 207, 208, 223, 244, 248, 251, 252, 256, 258, 260, 268, 271, 275, 284, 291, 301, 304, 305, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 363, 365, 366, 368, 372, 373, 374, 377, 378, 379, 380, 383, 385, 387, 389, 390, 391, 393, 397, 398, 399, 400, 403, 409, 411, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 439, 440, 443, 449, 450, 452, 453, 454, 456, 458, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 478, 502, 510, 530, 537, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 554, 555, 559, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 600, 603, 608, 613, 614, 616, 620, 625, 628, 633, 634, 636, 637, 638, 640, 645, 646, 651, 652, 653, 657, 659, 661, 662, 663, 664, 665, 667, 669, 671, 672, 674, 677, 678, 679, 680, 681, 682, 684, 685, 693, 694, 695, 696, 697, 698, 699, 700, 701, 707, 719, 780, 784, 785, 786, 787, 804, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 848, 852, 853, 855, 856, 858, 860, 861, 863, 864, 866, 869, 870, 872, 874, 875, 887, 891, 899, 905, 906, 908, 912, 915, 918, 919, 920, 921, 941, 964, 987, 988, 992, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1006, 1011, 1020, 1021, 1022, 1023, 1029, 1032, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "detcurvedisplai": [1, 274, 330, 733, 1051, 1052, 1056, 1057], "detect": [1, 13, 41, 46, 48, 57, 69, 97, 99, 112, 113, 114, 145, 148, 155, 188, 200, 223, 233, 245, 259, 269, 271, 277, 280, 286, 287, 299, 318, 324, 335, 347, 380, 383, 385, 389, 397, 399, 413, 414, 415, 417, 419, 423, 437, 452, 455, 470, 472, 475, 476, 479, 480, 481, 482, 494, 495, 497, 498, 502, 516, 518, 521, 528, 543, 544, 545, 552, 569, 570, 594, 597, 602, 637, 645, 683, 704, 708, 733, 795, 836, 856, 860, 871, 880, 883, 884, 888, 889, 890, 910, 914, 990, 994, 1017, 1018, 1019, 1020, 1022, 1027, 1032, 1033, 1034, 1039, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1054, 1055], "detection_error_tradeoff": 998, "detector": [380, 399, 856], "determin": [1, 47, 49, 52, 56, 80, 89, 112, 138, 140, 144, 154, 171, 180, 191, 198, 199, 215, 222, 277, 318, 323, 352, 361, 367, 368, 384, 385, 387, 394, 398, 399, 412, 413, 415, 419, 420, 422, 423, 424, 425, 438, 443, 447, 448, 449, 451, 453, 455, 456, 462, 465, 466, 467, 471, 475, 476, 478, 479, 480, 481, 482, 488, 489, 490, 494, 497, 498, 501, 503, 509, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 543, 545, 548, 549, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 571, 573, 574, 576, 588, 589, 590, 594, 597, 600, 608, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 641, 642, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 693, 695, 696, 698, 699, 700, 713, 717, 729, 735, 736, 744, 789, 790, 791, 793, 794, 799, 806, 808, 809, 810, 812, 820, 828, 829, 830, 831, 832, 833, 834, 835, 837, 841, 843, 844, 846, 853, 855, 856, 861, 866, 867, 868, 874, 875, 883, 884, 885, 887, 891, 899, 910, 911, 913, 916, 919, 921, 924, 945, 961, 967, 969, 972, 987, 990, 992, 997, 1001, 1003, 1004, 1006, 1008, 1011, 1012, 1014, 1023, 1039, 1044, 1047, 1048, 1050, 1051, 1052], "determinist": [92, 151, 373, 381, 387, 399, 415, 449, 453, 455, 457, 458, 459, 464, 465, 468, 557, 565, 566, 570, 571, 589, 590, 697, 701, 817, 818, 866, 918, 919, 990, 994, 1040, 1043, 1045, 1047, 1048, 1051, 1054, 1055], "detlefsen": 1053, "detomaso": 1046, "detriment": [45, 172, 291, 373, 424, 994], "dev": [184, 191, 237, 282, 287, 383, 385, 389, 391, 393, 998, 1022, 1035, 1046, 1051, 1054, 1055], "dev0": [383, 389, 1021, 1035], "dev514": 1053, "devansh": [1046, 1047], "devanshkyada27": 1056, "devashish": 1045, "devel": 383, "develop": [40, 46, 90, 183, 237, 271, 275, 277, 295, 298, 327, 333, 359, 372, 380, 384, 385, 391, 397, 399, 400, 402, 406, 409, 412, 417, 418, 422, 423, 429, 432, 439, 499, 806, 982, 994, 998, 1001, 1014, 1017, 1018, 1019, 1021, 1022, 1030, 1039, 1047, 1048, 1049, 1054, 1057, 1058], "developing_estim": 1019, "devi": 1051, "devianc": [1, 150, 153, 219, 237, 333, 422, 559, 564, 565, 567, 568, 571, 654, 675, 686, 727, 729, 730, 753, 755, 758, 919, 921, 994, 1014, 1040, 1049, 1050, 1052, 1053, 1055], "deviant": [225, 1004], "deviat": [51, 57, 69, 95, 112, 141, 144, 145, 146, 147, 149, 173, 175, 180, 182, 184, 191, 198, 225, 256, 274, 275, 276, 277, 278, 280, 304, 305, 318, 323, 377, 381, 382, 390, 394, 399, 419, 422, 425, 456, 478, 507, 517, 518, 519, 520, 522, 523, 524, 528, 530, 531, 536, 558, 600, 617, 640, 650, 651, 677, 730, 758, 812, 829, 856, 879, 880, 890, 899, 900, 901, 994, 998, 1004, 1008, 1030, 1045, 1046, 1047, 1050, 1051, 1052], "devic": [419, 588, 1017], "devnani": 1051, "deweight": 949, "dexter": 1049, "dezub": 1046, "df": [42, 51, 61, 63, 154, 159, 190, 192, 198, 203, 219, 237, 267, 277, 322, 324, 334, 360, 390, 423, 472, 596, 597, 987, 988, 1056], "df_": 237, "df_freq": 237, "df_max_": [61, 63], "df_min_": [61, 63], "df_out": 334, "df_sev": 237, "df_std": 360, "df_test": [219, 237], "df_train": [219, 237], "dfrac": [1002, 1008], "dgemm": 372, "dgesdd": 391, "dhanshre": 1054, "dhillon": [1, 56, 412, 457, 459, 517], "dhingra": [1047, 1048, 1051, 1056], "di": [399, 415, 420, 537, 543, 670, 691, 692, 903, 1043, 1052], "dia": 1056, "diabet": [1, 45, 152, 162, 163, 173, 187, 188, 206, 207, 208, 215, 216, 273, 290, 378, 422, 507, 658, 659, 806, 811, 831, 832, 833, 1006, 1019, 1023, 1027, 1034], "diabetes_i": [215, 1030], "diabetes_x": [215, 1030], "diabetes_x_test": [215, 1030], "diabetes_x_train": [215, 1030], "diabetes_y_pr": 215, "diabetes_y_test": [215, 1030], "diabetes_y_train": [215, 1030], "diadochokinet": 1054, "diag": [50, 114, 183, 264, 267, 420, 425, 538, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 803, 804, 994, 1054], "diag_kind": [190, 191], "diagnos": [173, 280, 382, 393, 402, 416], "diagnosi": [173, 280, 382, 857], "diagnost": [173, 194, 280, 378, 399, 414, 506, 718, 832, 833, 998, 1006, 1017, 1018, 1034], "diagon": [1, 42, 61, 63, 74, 114, 116, 237, 256, 264, 267, 268, 270, 348, 412, 415, 417, 425, 459, 477, 478, 484, 487, 517, 519, 533, 538, 556, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 656, 657, 660, 661, 662, 688, 689, 707, 721, 798, 803, 804, 854, 862, 990, 992, 994, 997, 998, 1001, 1008, 1045, 1047, 1048, 1049], "diagram": [1, 61, 63, 104, 258, 328, 334, 387, 413, 415, 444, 445, 474, 908, 1008, 1050, 1051, 1056, 1057], "diamet": 415, "diamond": 265, "diaz": 1047, "dice": [456, 463, 705, 784, 785, 786, 1001], "dicedist": 705, "dichotomis": 1014, "dickerson": 1040, "dickson": 1046, "dico": 127, "dict": [47, 48, 49, 50, 54, 62, 73, 79, 103, 106, 107, 130, 144, 149, 151, 153, 217, 225, 246, 255, 264, 275, 276, 278, 281, 284, 286, 298, 302, 320, 324, 331, 341, 348, 352, 360, 361, 374, 377, 379, 387, 397, 399, 416, 419, 426, 427, 429, 433, 437, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 502, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 703, 704, 706, 707, 708, 717, 719, 768, 771, 777, 785, 786, 803, 804, 805, 806, 809, 810, 812, 817, 818, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 935, 936, 952, 955, 958, 987, 998, 1008, 1027, 1028, 1032, 1034, 1039, 1045, 1046, 1055, 1056, 1057], "dict_count_vector": 361, "dict_init": [537, 543, 551, 552], "dict_kei": 632, "dict_learn": [1, 394, 537, 543, 552, 1040, 1047, 1049, 1052, 1053, 1055], "dict_learning_onlin": [1, 551, 1040, 1049, 1052, 1053, 1056], "dict_pos_code_estim": 124, "dict_pos_dict_estim": 124, "dict_pos_estim": 124, "dict_typ": 587, "dictat": 415, "dictionari": [1, 43, 45, 46, 70, 82, 85, 87, 123, 125, 154, 156, 188, 218, 253, 255, 271, 360, 361, 378, 379, 380, 387, 397, 399, 415, 423, 455, 470, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 516, 532, 537, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 573, 574, 575, 576, 587, 588, 590, 593, 594, 595, 600, 638, 639, 640, 670, 691, 692, 707, 717, 719, 806, 809, 810, 817, 818, 820, 828, 833, 869, 874, 883, 918, 919, 920, 921, 925, 935, 955, 958, 987, 994, 998, 1013, 1019, 1023, 1032, 1033, 1034, 1039, 1047, 1050, 1051, 1052, 1053, 1054], "dictionarylearn": [1, 420, 543, 545, 546, 548, 549, 550, 551, 552, 1040, 1044, 1046, 1049, 1052, 1053, 1054, 1055], "dictlearn": 1044, "dictvector": [1, 56, 103, 188, 358, 359, 360, 380, 423, 494, 588, 594, 595, 596, 597, 883, 1019, 1039, 1040, 1043, 1049, 1051, 1052, 1055, 1056], "did": [151, 175, 191, 194, 219, 227, 237, 263, 271, 325, 380, 409, 633, 718, 825, 912, 1031, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "didact": [385, 1018], "didi": [1045, 1046, 1047, 1048], "didn": [253, 368, 399, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "die": 995, "diebold": 277, "diederik": [867, 868, 1002, 1054], "diederikwp": 1054, "diego": [1040, 1041], "diegodlh": [1046, 1047], "diemert": [45, 46, 48, 1022, 1041, 1042], "diesel": [219, 237], "dietterich": [277, 840, 999], "diff": [388, 998], "diff_embed": 308, "differ": [1, 24, 42, 43, 45, 48, 50, 52, 53, 57, 60, 63, 65, 66, 69, 70, 71, 73, 75, 76, 77, 79, 80, 81, 83, 86, 87, 89, 91, 92, 94, 98, 99, 100, 101, 103, 104, 105, 107, 112, 116, 117, 120, 121, 122, 124, 126, 127, 129, 131, 132, 133, 138, 141, 143, 144, 147, 148, 149, 151, 153, 154, 159, 160, 161, 162, 164, 166, 168, 173, 174, 175, 176, 177, 180, 181, 182, 186, 187, 188, 190, 191, 193, 196, 198, 199, 202, 205, 206, 207, 208, 210, 216, 219, 220, 221, 223, 224, 225, 226, 227, 236, 237, 239, 240, 241, 242, 244, 246, 248, 251, 252, 253, 256, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 291, 292, 293, 295, 297, 298, 301, 304, 305, 307, 313, 314, 317, 319, 320, 322, 323, 327, 335, 342, 343, 344, 346, 347, 348, 350, 351, 355, 356, 359, 360, 361, 368, 372, 373, 374, 379, 380, 382, 383, 384, 385, 388, 390, 392, 394, 398, 399, 403, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 440, 443, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 468, 470, 481, 484, 496, 499, 500, 502, 509, 510, 514, 515, 518, 520, 528, 543, 544, 545, 546, 552, 553, 555, 556, 561, 562, 569, 587, 588, 594, 595, 596, 597, 600, 617, 619, 620, 621, 625, 628, 629, 633, 637, 638, 639, 640, 644, 649, 650, 651, 653, 655, 657, 659, 661, 664, 667, 672, 673, 674, 678, 680, 682, 683, 684, 686, 696, 698, 700, 704, 706, 707, 710, 711, 712, 713, 715, 721, 723, 724, 733, 734, 735, 736, 737, 740, 741, 743, 749, 763, 764, 765, 767, 784, 788, 789, 790, 792, 793, 795, 798, 799, 801, 804, 806, 808, 809, 810, 811, 812, 815, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 833, 834, 837, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 860, 863, 866, 870, 875, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 895, 896, 897, 898, 899, 900, 901, 910, 911, 912, 915, 918, 919, 920, 921, 955, 962, 987, 988, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1025, 1026, 1027, 1031, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "difference_plot": 282, "differenti": [120, 284, 422, 425, 565, 566, 625, 628], "difficult": [89, 138, 191, 227, 256, 385, 393, 413, 420, 422, 559, 560, 565, 567, 568, 993, 995, 997, 1001, 1003, 1005, 1014, 1022, 1039, 1053], "difficulti": [47, 63, 237, 318, 374, 385, 413, 867, 868, 997, 1001], "diffus": 180, "digest": [385, 1054], "digg": [1022, 1046], "digicosm": 0, "digit": [1, 43, 50, 51, 64, 70, 73, 79, 82, 85, 87, 93, 95, 96, 105, 106, 116, 118, 127, 143, 163, 171, 173, 188, 209, 210, 226, 235, 238, 239, 241, 243, 250, 251, 265, 270, 275, 276, 279, 302, 307, 308, 312, 314, 315, 333, 336, 339, 360, 378, 385, 391, 415, 421, 422, 424, 447, 451, 453, 508, 547, 550, 555, 572, 664, 694, 695, 696, 697, 698, 703, 710, 711, 719, 723, 724, 743, 799, 801, 836, 852, 859, 866, 870, 871, 880, 890, 896, 903, 906, 915, 922, 923, 924, 987, 993, 995, 998, 1001, 1003, 1011, 1019, 1023, 1027, 1030, 1031, 1034, 1043], "digraph": 922, "dijkstra": [394, 694, 995], "dilemma": 993, "dillon": [1047, 1048, 1049], "dilut": [194, 382], "dilutedsauc": 1047, "dim": [228, 250, 306, 307, 309, 344, 345, 533, 705, 1056], "dim_reduction_method": 307, "dimens": [1, 36, 47, 50, 51, 53, 71, 74, 87, 114, 116, 120, 124, 173, 177, 179, 181, 183, 192, 202, 203, 217, 241, 243, 246, 250, 251, 257, 263, 264, 302, 303, 307, 321, 352, 359, 360, 361, 380, 382, 386, 399, 415, 420, 421, 425, 427, 448, 449, 451, 453, 454, 455, 458, 470, 471, 488, 489, 490, 499, 500, 521, 530, 531, 535, 536, 539, 547, 555, 588, 589, 590, 591, 593, 595, 603, 617, 625, 628, 647, 650, 665, 696, 697, 698, 700, 701, 705, 770, 831, 850, 851, 855, 869, 902, 903, 904, 912, 913, 914, 915, 916, 930, 931, 932, 961, 969, 972, 988, 990, 992, 994, 995, 996, 999, 1001, 1002, 1004, 1010, 1013, 1023, 1030, 1031, 1046, 1048, 1049, 1051], "dimension": [1, 10, 36, 44, 47, 48, 56, 66, 74, 78, 88, 89, 91, 92, 96, 102, 104, 106, 107, 116, 117, 122, 124, 131, 132, 138, 143, 157, 165, 166, 173, 175, 177, 178, 182, 188, 203, 215, 220, 236, 238, 240, 241, 243, 246, 250, 251, 254, 263, 264, 299, 302, 306, 308, 320, 345, 352, 359, 368, 372, 377, 380, 381, 382, 385, 394, 399, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 451, 453, 455, 471, 475, 479, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 503, 506, 507, 508, 510, 511, 516, 521, 525, 538, 540, 541, 544, 545, 546, 547, 550, 553, 555, 569, 572, 579, 605, 613, 637, 646, 647, 648, 658, 694, 695, 696, 697, 698, 699, 700, 702, 705, 716, 731, 803, 804, 806, 836, 850, 851, 852, 855, 858, 859, 866, 870, 871, 874, 880, 885, 890, 902, 903, 904, 910, 914, 947, 984, 989, 990, 993, 994, 999, 1000, 1004, 1010, 1011, 1012, 1013, 1014, 1019, 1020, 1022, 1023, 1024, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1051, 1054, 1055], "dimensionalityreduct": 382, "dimensionalityreductiondimension": 1025, "diminish": 423, "dimitri": [1052, 1053, 1054, 1055, 1056], "dimmick": 382, "dingwal": 1046, "dionisi": 1053, "diop": 1049, "dipan": 1057, "direct": [50, 116, 117, 124, 126, 132, 173, 225, 262, 268, 274, 307, 316, 323, 348, 353, 383, 385, 386, 389, 393, 400, 403, 415, 418, 420, 423, 424, 458, 468, 477, 478, 484, 540, 547, 555, 594, 595, 597, 608, 647, 694, 859, 992, 993, 994, 999, 1001, 1003, 1018, 1031, 1039, 1042], "direction": 1057, "direction_vector": 316, "directli": [0, 44, 56, 63, 79, 80, 90, 104, 143, 148, 173, 183, 203, 207, 219, 225, 237, 247, 282, 316, 318, 331, 334, 335, 361, 368, 372, 383, 385, 386, 387, 389, 391, 398, 399, 400, 411, 412, 413, 415, 416, 417, 418, 419, 423, 425, 448, 458, 468, 470, 475, 480, 533, 573, 574, 575, 576, 603, 617, 626, 638, 649, 652, 653, 658, 659, 666, 667, 668, 669, 670, 683, 687, 690, 696, 780, 784, 787, 798, 799, 806, 809, 810, 820, 834, 853, 855, 869, 870, 871, 877, 887, 889, 892, 899, 987, 994, 996, 1001, 1003, 1005, 1008, 1013, 1014, 1018, 1024, 1027, 1028, 1039, 1047, 1048, 1050, 1051, 1052, 1055, 1056], "director": 1022, "directori": [0, 1, 46, 300, 379, 383, 385, 387, 391, 393, 399, 403, 416, 447, 451, 456, 492, 505, 870, 871, 1053], "direr": [1042, 1043, 1046, 1047], "dirichlet": [1, 41, 44, 188, 262, 263, 268, 272, 423, 494, 542, 544, 546, 594, 597, 803, 1017, 1019, 1033, 1034, 1039, 1044, 1045], "dirichlet_distribut": [262, 803, 997, 1045], "dirichlet_process": [262, 268, 803, 997, 1045], "disabl": [142, 253, 271, 325, 334, 359, 383, 385, 406, 423, 455, 466, 474, 543, 544, 545, 552, 565, 566, 567, 568, 869, 887, 899, 908, 930, 931, 1008, 1045, 1048, 1052, 1054, 1057], "disadvantag": [420, 425, 994, 995, 1002, 1012, 1013, 1014], "disagre": [741, 1005], "disambigu": [385, 838, 907, 1011, 1054], "disappear": [994, 1039], "disappoint": 42, "discard": [46, 89, 200, 280, 372, 412, 417, 424, 514, 515, 555, 603, 633, 636, 650, 883, 887, 899, 988, 994, 1047, 1051, 1057], "disclaim": 1017, "disclos": 398, "disconnect": 1052, "discontinu": [42, 397], "discord": [711, 1021], "discount": [1, 380, 415, 732, 762, 1046, 1049], "discounted_cumulative_gain": 732, "discourag": [223, 397, 403, 695], "discov": [360, 415, 420, 423, 426, 450, 454, 1023, 1054, 1057], "discoveri": [1, 277, 380, 391, 394, 415, 422, 424, 426, 450, 517, 561, 562, 569, 598, 601, 602, 604, 605, 606, 612, 726, 746, 789, 938, 939, 940, 998, 1010, 1022, 1053, 1054], "discrep": [423, 1032, 1043], "discret": [1, 42, 46, 66, 80, 90, 122, 133, 136, 138, 157, 174, 188, 192, 199, 219, 237, 253, 257, 295, 313, 317, 321, 374, 377, 380, 381, 389, 398, 399, 415, 420, 423, 425, 444, 445, 454, 458, 466, 467, 468, 498, 520, 521, 528, 559, 565, 594, 595, 598, 601, 602, 605, 606, 613, 614, 616, 617, 618, 622, 623, 624, 663, 664, 748, 806, 817, 828, 836, 845, 846, 849, 871, 875, 883, 884, 887, 890, 899, 910, 915, 919, 961, 987, 994, 995, 996, 998, 999, 1001, 1014, 1017, 1019, 1023, 1034, 1041, 1044, 1052, 1053, 1054], "discrete_featur": [613, 614], "discrim": 219, "discrimin": [1, 11, 47, 48, 64, 110, 111, 112, 113, 114, 132, 168, 170, 173, 188, 196, 234, 240, 254, 267, 307, 382, 413, 422, 481, 518, 555, 556, 572, 637, 789, 859, 987, 995, 998, 1001, 1012, 1014, 1019, 1020, 1030, 1034, 1042], "discriminant_analysi": [1, 66, 68, 69, 132, 240, 307, 368, 411, 542, 555, 556, 859, 992, 999, 1039, 1042, 1043, 1044, 1045, 1046], "discriminatori": 413, "discuss": [42, 87, 92, 173, 191, 208, 239, 244, 271, 280, 295, 359, 368, 374, 380, 382, 385, 390, 391, 393, 397, 399, 400, 414, 415, 417, 421, 422, 425, 504, 688, 689, 852, 853, 858, 860, 861, 988, 992, 994, 995, 998, 1001, 1008, 1015, 1018, 1021, 1042], "diseas": [45, 162, 173, 187, 280, 382, 718, 998, 1030], "disentangl": 995, "disjoint": [413, 415, 416, 443, 710, 737, 761, 763, 995], "disk": [44, 52, 380, 385, 390, 399, 409, 1028], "disp": [42, 65, 67, 140, 154, 155, 156, 270, 280, 293, 301, 323, 328, 334, 345, 350, 444, 637, 703, 706, 707, 859], "disp1": 638, "disp2": 638, "dispar": [696, 700, 995], "dispatch": [104, 271, 399, 411, 474, 806, 820, 831, 832, 833, 908, 964, 965, 1027, 1034, 1054], "dispatch_next": 964, "dispatch_one_batch": 964, "dispers": [69, 291, 415, 716, 731, 994], "displai": [1, 50, 61, 63, 69, 71, 80, 82, 94, 104, 113, 114, 116, 117, 119, 124, 144, 155, 156, 159, 186, 188, 191, 192, 204, 206, 237, 245, 246, 256, 260, 266, 274, 278, 279, 284, 286, 287, 292, 308, 324, 328, 329, 347, 364, 372, 385, 387, 388, 392, 394, 403, 416, 420, 423, 424, 429, 444, 470, 473, 474, 502, 547, 570, 636, 637, 638, 664, 693, 703, 704, 706, 707, 708, 719, 724, 788, 795, 806, 812, 820, 829, 836, 870, 871, 883, 885, 890, 908, 915, 922, 923, 924, 938, 964, 985, 998, 1002, 1017, 1019, 1025, 1034, 1048, 1050, 1051, 1053, 1054], "display_label": [44, 270, 703, 1028, 1051], "dispos": [987, 1032], "disproportion": 421, "disput": 144, "disregard": [359, 399, 423, 438, 471, 488, 489, 490, 558, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 727, 728, 729, 730, 791, 843, 844, 853, 861, 868, 879, 880, 886, 887, 890, 895, 898, 899, 901, 911, 913, 916, 919, 921, 998, 1047], "disrupt": [373, 383], "dissemin": 1017, "dissimilar": [242, 352, 399, 412, 458, 696, 700, 995, 1045, 1055], "dissimilarity_matrix_": 696, "dist": [112, 240, 250, 389, 475, 476, 477, 478, 479, 480, 481, 482, 705, 769, 775, 850, 851], "dist_": [475, 480], "dist_embed": 308, "dist_linkag": 194, "dist_matrix": 458, "dist_matrix_": 694, "distanc": [1, 36, 73, 74, 89, 91, 94, 95, 99, 101, 109, 113, 129, 173, 186, 188, 194, 205, 220, 222, 239, 241, 244, 250, 256, 298, 300, 301, 306, 308, 310, 311, 318, 323, 327, 331, 332, 352, 359, 360, 372, 382, 394, 397, 399, 412, 415, 417, 420, 421, 425, 426, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 461, 462, 463, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 544, 546, 553, 613, 614, 621, 625, 626, 628, 629, 634, 664, 665, 672, 674, 680, 681, 682, 683, 684, 694, 695, 696, 698, 699, 700, 701, 702, 705, 709, 731, 740, 764, 766, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 784, 785, 786, 787, 798, 799, 802, 839, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 889, 904, 908, 910, 912, 914, 915, 916, 918, 919, 920, 921, 988, 992, 995, 996, 998, 1001, 1004, 1008, 1010, 1012, 1013, 1018, 1019, 1030, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "distance_matrix": 194, "distance_metr": [1, 784, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864], "distance_threshold": [75, 447, 451, 1048, 1051], "distancemetr": [1, 399, 421, 853, 1001, 1047, 1051, 1052, 1053, 1056], "distancemetric64": [850, 851], "distances_": [75, 447, 451, 1051], "distant": [415, 698, 715, 1001], "distil": 244, "distinct": [94, 277, 339, 359, 361, 380, 387, 390, 399, 400, 419, 422, 423, 595, 807, 816, 824, 884, 885, 905, 906, 987, 994, 1001, 1004, 1032, 1047], "distinguish": [42, 57, 74, 112, 122, 129, 221, 274, 295, 380, 387, 399, 400, 425, 987, 998, 1001, 1004], "distort": [36, 218, 250, 382, 413, 887, 899, 904, 995, 1008, 1010], "distribut": [1, 24, 36, 41, 42, 46, 47, 48, 51, 57, 63, 69, 71, 73, 78, 86, 87, 89, 91, 96, 108, 111, 112, 113, 117, 122, 138, 140, 151, 155, 168, 173, 175, 184, 188, 190, 191, 194, 196, 198, 219, 221, 223, 241, 243, 246, 250, 256, 262, 267, 268, 271, 273, 277, 283, 285, 291, 295, 299, 303, 317, 318, 320, 323, 333, 337, 338, 353, 355, 359, 372, 373, 378, 381, 382, 383, 385, 386, 389, 390, 391, 399, 413, 415, 417, 419, 420, 421, 427, 453, 455, 475, 476, 477, 478, 479, 480, 481, 482, 494, 504, 509, 521, 522, 523, 524, 525, 529, 538, 539, 542, 556, 557, 558, 569, 617, 631, 646, 648, 650, 651, 654, 664, 665, 675, 685, 686, 694, 695, 696, 698, 712, 714, 730, 758, 795, 803, 804, 810, 811, 818, 820, 824, 825, 836, 846, 849, 855, 859, 866, 873, 886, 887, 888, 889, 890, 898, 899, 900, 905, 906, 914, 925, 949, 987, 992, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1010, 1011, 1017, 1018, 1019, 1023, 1027, 1031, 1033, 1034, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "district": [187, 380], "distutils_use_sdk": 383, "ditenberg": 1046, "div": [256, 943], "dive": [117, 385, 391], "diverg": [53, 150, 239, 244, 303, 544, 546, 553, 698, 866, 995, 997, 998, 1003, 1005, 1046, 1047, 1052], "divers": [399, 422], "divid": [71, 77, 82, 121, 124, 170, 180, 219, 256, 262, 360, 368, 381, 382, 412, 414, 415, 419, 420, 422, 475, 476, 477, 478, 479, 480, 481, 482, 518, 525, 540, 547, 682, 683, 684, 725, 732, 740, 744, 762, 800, 802, 867, 868, 912, 915, 947, 950, 951, 987, 995, 997, 998, 1001, 1008, 1012, 1032, 1039, 1046, 1047, 1050], "dividend": 998, "divis": [331, 415, 423, 596, 597, 600, 718, 719, 735, 736, 744, 752, 789, 790, 793, 998, 1031, 1043, 1047, 1048, 1051, 1055, 1056], "divisor": 998, "divo": 1049, "divyanshu": 1052, "divyaprabha": 1050, "diwakar": 1053, "dixon": [775, 1049, 1050], "dizietasahi": 1049, "di\u1ec5n": 1054, "djipei": [1044, 1045], "dl": 682, "dlabal": 1043, "dll": 1053, "dlovel": 1047, "dmallia17": 1052, "dmitri": [1044, 1046, 1047, 1048, 1052, 1055, 1056], "dmitrij": 1043, "dmytro": 1052, "dn": [0, 1001], "dna": [397, 634, 988], "dnf": 403, "do": [0, 29, 42, 48, 51, 61, 63, 76, 89, 95, 101, 107, 120, 128, 130, 133, 142, 145, 147, 151, 152, 154, 159, 170, 180, 186, 191, 192, 193, 216, 219, 223, 237, 239, 241, 253, 254, 256, 268, 271, 272, 275, 278, 280, 297, 298, 300, 304, 330, 334, 342, 345, 348, 352, 353, 355, 359, 360, 361, 367, 368, 372, 373, 374, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 399, 400, 409, 413, 415, 416, 417, 418, 419, 422, 423, 424, 434, 456, 467, 470, 473, 509, 542, 544, 548, 550, 558, 561, 587, 588, 594, 595, 597, 638, 639, 651, 652, 658, 661, 662, 664, 665, 672, 674, 682, 743, 769, 784, 788, 823, 826, 842, 843, 847, 874, 875, 877, 884, 888, 890, 895, 896, 898, 899, 900, 901, 918, 919, 920, 921, 929, 972, 987, 990, 992, 994, 995, 998, 999, 1001, 1002, 1006, 1008, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1030, 1031, 1032, 1039, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "do_early_stopping_": [567, 568], "doc": [0, 42, 46, 51, 56, 359, 361, 373, 385, 389, 390, 393, 399, 403, 408, 423, 594, 595, 597, 784, 787, 798, 799, 833, 1032, 1039, 1043, 1053], "doc_it": 46, "doc_topic_distr": [542, 1046], "doc_topic_prior": [420, 542], "doc_topic_prior_": 542, "docker": [393, 409, 1052, 1053], "dock\u00e8": [1048, 1049, 1050, 1056, 1057], "docs_new": 1032, "docs_test": 1032, "docstr": [385, 387, 391, 399, 454, 467, 478, 705, 707, 937, 987, 998, 1001, 1002, 1012, 1039, 1046, 1047, 1052, 1053, 1056], "doctest": [385, 399, 1024, 1039], "doctest_mod": 1024, "document": [1, 16, 41, 44, 45, 48, 50, 53, 55, 58, 62, 66, 71, 79, 85, 90, 91, 92, 94, 95, 103, 104, 105, 106, 119, 120, 122, 124, 136, 143, 145, 146, 155, 156, 159, 162, 170, 180, 183, 191, 192, 193, 200, 202, 216, 217, 234, 247, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 315, 316, 324, 328, 331, 332, 334, 339, 341, 353, 355, 361, 367, 372, 373, 374, 379, 380, 381, 383, 384, 386, 387, 388, 389, 390, 391, 393, 397, 399, 400, 403, 406, 409, 412, 415, 420, 423, 426, 450, 453, 454, 455, 456, 459, 463, 470, 494, 495, 505, 507, 517, 527, 529, 542, 550, 570, 594, 595, 596, 597, 600, 610, 637, 645, 649, 664, 665, 672, 674, 680, 682, 702, 703, 705, 709, 711, 723, 743, 764, 765, 775, 784, 785, 786, 799, 801, 806, 809, 810, 812, 820, 828, 829, 840, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 871, 882, 910, 915, 926, 929, 931, 944, 964, 987, 994, 996, 998, 999, 1000, 1001, 1002, 1006, 1012, 1015, 1016, 1019, 1022, 1025, 1030, 1032, 1040, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "document_clust": 1045, "document_nam": 56, "doddington": 998, "doe": [26, 42, 45, 46, 47, 50, 51, 60, 61, 66, 69, 74, 80, 87, 89, 91, 103, 105, 106, 117, 134, 138, 143, 144, 147, 148, 149, 153, 154, 159, 173, 181, 191, 192, 203, 216, 219, 225, 237, 239, 240, 241, 244, 246, 249, 250, 251, 253, 254, 256, 264, 265, 271, 272, 277, 279, 280, 284, 286, 287, 297, 298, 311, 318, 320, 322, 324, 325, 330, 331, 340, 341, 346, 348, 355, 357, 359, 360, 361, 372, 373, 379, 383, 385, 386, 387, 389, 393, 398, 399, 406, 409, 413, 415, 416, 419, 420, 422, 423, 424, 425, 440, 446, 448, 452, 453, 455, 456, 460, 462, 471, 473, 479, 485, 493, 505, 509, 514, 533, 541, 543, 544, 545, 550, 552, 555, 556, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 587, 588, 589, 594, 595, 597, 599, 600, 603, 608, 612, 616, 638, 644, 655, 656, 657, 660, 661, 662, 665, 677, 688, 689, 704, 706, 708, 713, 734, 735, 736, 740, 742, 744, 749, 752, 784, 789, 790, 793, 794, 800, 806, 809, 810, 820, 867, 871, 872, 873, 875, 877, 879, 882, 883, 884, 887, 890, 891, 899, 902, 903, 907, 910, 911, 918, 919, 920, 921, 925, 930, 934, 947, 950, 951, 964, 982, 987, 988, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1012, 1013, 1014, 1032, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "doepk": 1046, "doesn": [46, 191, 219, 253, 263, 297, 315, 348, 393, 399, 403, 409, 415, 423, 424, 428, 440, 481, 638, 639, 672, 674, 682, 722, 834, 837, 842, 852, 853, 867, 879, 880, 997, 998, 1014, 1043, 1056], "dog": [330, 331, 333, 334, 335, 588, 789, 891, 1008], "dohmatob": [1044, 1045, 1046], "dohri": [1056, 1057], "doi": [196, 219, 237, 385, 415, 682], "dok": [559, 560, 877, 1052], "dokato": 1046, "dolan": 380, "dollar": [191, 380], "dolmatov": 1049, "dolphin": 359, "domain": [154, 219, 291, 324, 399, 402, 419, 641, 727, 729, 730, 807, 808, 813, 814, 815, 994, 1018], "domin": [144, 187, 194, 219, 224, 256, 286, 323, 380, 391, 413, 890, 1000, 1008, 1014, 1055], "domingo": [63, 794, 998], "dominik": [1046, 1055], "don": [50, 63, 88, 103, 154, 191, 240, 253, 254, 271, 277, 298, 340, 345, 349, 359, 360, 372, 379, 385, 387, 389, 391, 393, 398, 403, 406, 416, 423, 652, 658, 838, 918, 919, 920, 921, 962, 987, 994, 997, 999, 1002, 1004, 1012, 1032, 1043, 1048, 1055, 1056, 1057], "don86": 1046, "donald": [44, 380, 415, 731, 988], "donald_rumsfeld": 1028, "donat": 247, "done": [44, 46, 47, 49, 51, 53, 54, 56, 82, 84, 86, 87, 127, 154, 170, 173, 180, 191, 192, 196, 198, 203, 205, 223, 236, 252, 253, 267, 275, 278, 281, 286, 298, 321, 329, 359, 360, 361, 368, 373, 379, 383, 385, 387, 389, 392, 393, 394, 397, 399, 406, 415, 417, 419, 420, 422, 447, 448, 451, 456, 458, 478, 488, 489, 490, 491, 495, 541, 567, 568, 588, 612, 613, 614, 634, 636, 638, 640, 649, 650, 651, 665, 728, 747, 803, 804, 806, 820, 825, 826, 828, 874, 888, 983, 987, 988, 991, 994, 995, 998, 1000, 1001, 1002, 1008, 1011, 1012, 1013, 1014, 1018, 1023, 1027, 1028, 1030, 1032, 1039, 1041, 1046, 1049, 1051, 1055], "dong": 1049, "donn": 1044, "donoho": [695, 699, 995], "donor": [173, 382], "donovan": 1045, "dor": 1047, "dorin": [97, 454], "dormagen": 1049, "dot": [1, 54, 67, 68, 78, 83, 88, 91, 96, 110, 111, 112, 114, 116, 117, 125, 126, 127, 131, 133, 138, 141, 175, 176, 182, 183, 191, 200, 203, 211, 213, 214, 226, 251, 263, 264, 266, 267, 271, 281, 344, 346, 352, 372, 387, 391, 394, 399, 412, 420, 423, 539, 544, 546, 553, 596, 597, 620, 652, 653, 656, 658, 659, 660, 663, 666, 667, 668, 669, 687, 690, 693, 767, 769, 882, 922, 948, 996, 1000, 1008, 1012, 1013, 1031, 1048], "dot_data": [922, 1014], "dot_product": 948, "dotproduct": [1, 178, 179, 184, 425, 617, 631], "dotson": 1044, "doubl": [69, 144, 289, 385, 399, 420, 544, 546, 547, 553, 850, 851, 861, 982, 988, 1013, 1014, 1039, 1049, 1050], "doubt": [385, 386, 389, 994, 1004, 1017], "doucet": 1053, "douetteau": 1022, "doug": [1040, 1041, 1051], "dougal": [1041, 1043, 1044, 1046, 1047, 1048, 1049], "dougla": 1047, "douillard": 1046, "doumouro": 1048, "douriez": [1049, 1050], "dowl": 1045, "down": [80, 81, 113, 138, 234, 235, 241, 250, 251, 253, 280, 295, 316, 318, 352, 368, 379, 388, 393, 399, 417, 420, 449, 456, 462, 596, 599, 600, 645, 655, 780, 784, 787, 879, 880, 885, 888, 889, 900, 912, 915, 922, 994, 1023, 1031, 1047], "downarrow": 1000, "download": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 378, 380, 382, 383, 389, 390, 393, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 516, 1014, 1025, 1028, 1030, 1032, 1034, 1043, 1044, 1047, 1051, 1052, 1053], "download_20newsgroup": 1043, "download_if_miss": [494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 1046], "download_url": 46, "downsampl": 127, "downscal": 1032, "downsid": 361, "downstream": [42, 112, 325, 361, 423, 537, 540, 543, 547, 548, 612, 883, 1008, 1049], "downweight": [417, 542], "dowon": [1047, 1048], "dozen": [398, 425], "do\u0161ilovi\u0107": [1056, 1057], "dp": [263, 268], "dpgmm": [263, 268, 1039, 1043, 1045], "dpi": [230, 924, 1052], "dpy_debug": 391, "dqd": 391, "dr": [0, 173, 382, 415, 1053], "draft": [389, 400], "drag": 1025, "dragon": 1008, "drama": 423, "dramat": 374, "dramsch": 1049, "drastic": [175, 250, 285, 415, 419, 1001, 1011], "draw": [42, 45, 94, 184, 191, 215, 257, 279, 284, 348, 392, 418, 420, 421, 422, 561, 562, 563, 564, 569, 570, 571, 572, 617, 640, 707, 812, 829, 922, 924, 997, 1017, 1026, 1052, 1053], "drawback": [146, 236, 990, 993], "drawcoastlin": [49, 311], "drawcountri": [49, 311], "drawn": [45, 86, 112, 141, 172, 175, 184, 190, 257, 284, 302, 359, 381, 415, 421, 422, 425, 427, 475, 476, 477, 478, 479, 480, 481, 482, 521, 529, 539, 561, 562, 563, 564, 569, 570, 571, 572, 617, 633, 638, 647, 846, 902, 903, 920, 921, 994, 1008, 1010, 1042], "drawstyl": [363, 706], "draxu": 1039, "drew": 1048, "drewhogg": 1054, "drewmjohnston": 1048, "drgfreeman": 1049, "driessen": [417, 475, 480, 1004], "drift": 1018, "drivag": [219, 237], "drive": [374, 420, 421, 555, 1012, 1022, 1032], "driven": [0, 194, 1022], "driver": [219, 237, 1054], "drop": [42, 43, 51, 104, 108, 117, 154, 180, 190, 191, 192, 194, 219, 223, 237, 256, 260, 271, 287, 324, 329, 332, 334, 360, 389, 393, 416, 420, 422, 470, 473, 573, 574, 575, 576, 701, 706, 708, 788, 795, 869, 883, 889, 988, 994, 998, 1008, 1017, 1039, 1040, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "drop_binary_enc": 883, "drop_dupl": 289, "drop_enc": [883, 1008], "drop_first": 701, "drop_idx": 883, "drop_idx_": [883, 1050, 1054], "drop_intermedi": [706, 708, 788, 795, 1055], "drop_nul": [51, 180], "dropdown": [173, 385], "dropped_result": 148, "dropper": 148, "dror": 1048, "dross": 540, "dro\u017cd\u017c": 1042, "drskd": 1053, "druck": 1053, "drucker": [139, 422, 560], "drug": 994, "dry": 192, "dryden": 103, "ds_ana": 1052, "ds_cnt": [66, 320, 321], "dschult": 54, "dscullei": 455, "dseg": 103, "dsouza": [1050, 1051, 1052, 1053], "dsquareindia": 1045, "dss": 1022, "dt": [84, 127, 160, 180, 422, 423, 1014], "dtreeviz": 1017, "dtype": [42, 46, 48, 49, 54, 82, 83, 87, 99, 103, 104, 148, 150, 152, 153, 155, 176, 177, 178, 187, 191, 192, 221, 237, 260, 262, 271, 275, 281, 285, 291, 295, 305, 311, 324, 330, 331, 333, 338, 367, 379, 380, 385, 387, 397, 399, 411, 416, 419, 422, 430, 431, 433, 436, 448, 449, 453, 454, 455, 456, 457, 459, 465, 470, 472, 473, 475, 478, 480, 494, 495, 496, 497, 502, 503, 504, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 520, 528, 548, 554, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 591, 592, 594, 595, 597, 599, 600, 607, 608, 612, 633, 634, 635, 636, 638, 639, 646, 647, 650, 651, 652, 658, 662, 663, 666, 667, 668, 669, 670, 671, 677, 679, 681, 703, 705, 711, 720, 721, 737, 744, 747, 761, 792, 812, 831, 833, 834, 846, 850, 851, 853, 861, 875, 881, 883, 884, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 904, 912, 913, 914, 915, 916, 918, 919, 920, 921, 927, 928, 930, 931, 963, 973, 974, 975, 976, 979, 985, 988, 1008, 1011, 1013, 1023, 1040, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "dtype_exclud": [104, 472], "dtype_includ": [104, 148, 159, 256, 416, 472], "du": [0, 404, 405, 1039, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "dua": 1048, "dual": [103, 105, 327, 355, 359, 423, 424, 477, 478, 484, 617, 652, 653, 658, 659, 664, 665, 666, 667, 668, 669, 687, 690, 850, 851, 910, 911, 912, 915, 1013, 1041, 1050, 1053, 1055], "dual_coef_": [541, 649, 912, 913, 914, 915, 916, 1013, 1043], "dual_gap": [477, 478, 484, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690], "dual_gap_": [652, 653, 658, 659, 666, 667, 668, 669, 1052], "dualiti": [478, 994], "dualtre": [850, 851], "duan": [1048, 1050], "duart": [1044, 1052, 1054, 1057], "dubai": 423, "duboi": [1045, 1047], "dubou": 1049, "dubourg": [0, 178, 182, 405, 1022, 1039, 1043], "duchesnai": [0, 405, 1039], "duck": [387, 399, 1049], "ducktyp": [1043, 1056], "duckworth": 1039, "ducout": 1053, "duda": [382, 992], "due": [47, 51, 62, 63, 87, 89, 94, 108, 138, 141, 175, 191, 192, 198, 203, 210, 217, 219, 221, 236, 237, 250, 256, 263, 285, 286, 291, 297, 298, 323, 324, 352, 355, 359, 360, 361, 385, 391, 399, 403, 413, 414, 415, 419, 420, 422, 425, 449, 452, 453, 465, 541, 545, 549, 550, 580, 677, 806, 809, 810, 814, 816, 820, 831, 832, 835, 838, 842, 843, 875, 879, 880, 890, 988, 994, 995, 997, 998, 999, 1001, 1005, 1012, 1013, 1018, 1031, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "dueck": [72, 446, 460], "dugnat": 1053, "duhaim": 1047, "dummi": [1, 138, 139, 219, 237, 253, 271, 280, 387, 390, 410, 557, 558, 738, 883, 892, 999, 1008, 1014, 1034, 1040, 1042, 1043, 1044, 1046], "dummy_classifiers_misclassification_error": 138, "dummy_clf": [138, 557], "dummy_leaf_": 448, "dummy_regr": 558, "dummy_sev": 237, "dummybiclust": 430, "dummyclassifi": [1, 138, 271, 280, 558, 738, 998, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1057], "dummyestim": [565, 566], "dummyregressor": [1, 219, 237, 557, 998, 999, 1040, 1042, 1043, 1046, 1047, 1049, 1052, 1053, 1057], "dumont": 1014, "dump": [1, 54, 409, 493, 850, 851], "dump_svmlight_fil": [1, 1039, 1040, 1044, 1054, 1056], "duong": [1056, 1057], "duplic": [373, 384, 385, 386, 399, 415, 426, 450, 454, 455, 521, 641, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 834, 881, 984, 1001, 1039, 1042, 1051, 1053, 1055, 1056], "dupont": 50, "dupr": [211, 227, 298, 300, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "dupr\u00e9": [0, 320, 321, 404, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "duqu": 1052, "durat": [42, 46, 219, 237, 256, 271, 300, 361, 373, 964, 965, 994], "duration_sec": 48, "duration_test": 359, "duration_train": 359, "dure": [0, 42, 43, 50, 51, 84, 89, 92, 105, 108, 117, 129, 142, 148, 149, 154, 156, 170, 175, 180, 191, 192, 194, 208, 220, 227, 271, 275, 279, 291, 298, 329, 330, 352, 372, 374, 383, 385, 387, 390, 399, 400, 415, 416, 420, 422, 423, 425, 426, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 619, 620, 621, 623, 625, 626, 628, 629, 631, 633, 634, 635, 636, 638, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 706, 795, 803, 804, 805, 806, 809, 810, 820, 828, 831, 832, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 901, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 988, 990, 994, 995, 1001, 1008, 1010, 1014, 1027, 1032, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "duron": 1053, "duti": 400, "dutt": 1055, "dutta": [1056, 1057], "duv2014": 425, "duvenaud": [425, 628, 629], "dwight": 1054, "dx": [50, 52, 705], "dx_c": 1005, "dy": [50, 705], "dye": 1052, "dylan": [1046, 1049], "dynam": [50, 51, 192, 561, 562, 563, 564, 569, 570, 571, 572, 585, 586, 682, 683, 684, 1014, 1022, 1045, 1051, 1056], "dzi": 1057, "dziki": 1042, "d\u00b2": 237, "d\u00f6pfert": 1047, "e": [0, 24, 42, 46, 48, 49, 51, 61, 62, 63, 67, 69, 87, 89, 91, 95, 103, 110, 112, 113, 114, 116, 117, 120, 127, 129, 138, 141, 148, 150, 151, 154, 155, 164, 169, 172, 173, 183, 190, 191, 192, 196, 199, 203, 208, 209, 219, 220, 221, 223, 237, 239, 240, 252, 253, 271, 273, 277, 278, 280, 282, 283, 292, 293, 295, 297, 304, 311, 320, 323, 327, 329, 335, 355, 361, 365, 366, 367, 368, 372, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 397, 398, 399, 403, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 445, 447, 449, 450, 451, 453, 455, 456, 460, 469, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 502, 504, 506, 507, 508, 509, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 587, 588, 594, 595, 596, 597, 599, 600, 603, 609, 610, 611, 612, 613, 614, 615, 616, 617, 623, 628, 629, 636, 639, 640, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 696, 698, 700, 703, 705, 707, 710, 711, 714, 715, 734, 735, 736, 737, 744, 747, 748, 761, 769, 773, 784, 791, 794, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 819, 820, 824, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 866, 867, 868, 870, 873, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 905, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 925, 941, 946, 947, 949, 952, 953, 955, 958, 973, 984, 987, 988, 990, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1018, 1021, 1022, 1030, 1031, 1032, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "e0129126": 379, "e11": 380, "e2": [904, 994], "e41a1c": [78, 96], "e501": [173, 359], "e_": 420, "each": [1, 26, 42, 45, 46, 48, 49, 50, 51, 53, 54, 57, 61, 62, 63, 67, 69, 71, 75, 77, 78, 81, 83, 87, 89, 92, 94, 95, 103, 104, 106, 107, 108, 116, 117, 119, 120, 121, 122, 124, 125, 129, 131, 132, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 169, 173, 177, 179, 184, 186, 187, 190, 191, 192, 194, 196, 198, 205, 206, 208, 213, 217, 219, 220, 221, 223, 224, 227, 234, 237, 240, 246, 247, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 265, 267, 270, 271, 272, 273, 275, 277, 278, 280, 282, 283, 286, 287, 291, 295, 297, 298, 301, 303, 307, 309, 311, 313, 314, 316, 318, 319, 320, 321, 323, 324, 325, 327, 329, 330, 331, 333, 334, 335, 337, 338, 339, 342, 348, 352, 355, 360, 361, 363, 364, 367, 368, 372, 373, 374, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 433, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 525, 528, 529, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 713, 714, 716, 719, 725, 731, 734, 735, 736, 744, 745, 751, 752, 754, 756, 757, 759, 760, 764, 765, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 782, 784, 785, 786, 787, 789, 790, 791, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 899, 900, 901, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 936, 941, 942, 947, 949, 950, 954, 955, 974, 975, 976, 979, 988, 990, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "eager": 271, "eargl": 1053, "earl": 1042, "earli": [42, 45, 53, 78, 96, 137, 138, 144, 147, 188, 197, 207, 322, 328, 399, 422, 447, 451, 455, 469, 496, 502, 542, 543, 544, 545, 552, 559, 560, 565, 566, 567, 568, 633, 651, 662, 672, 673, 674, 682, 684, 698, 756, 836, 867, 868, 972, 995, 1001, 1008, 1016, 1018, 1019, 1022, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1056], "earlier": [144, 192, 223, 379, 385, 418, 841, 844, 1008, 1037, 1040, 1052, 1054], "earliest": [379, 995], "early_exager": 1046, "early_exagger": 698, "early_stop": [144, 154, 192, 227, 313, 330, 359, 399, 422, 567, 568, 672, 673, 674, 682, 683, 684, 867, 868, 1012, 1047, 1050, 1053, 1054], "earn": [190, 191, 400], "earth": [241, 360, 770, 1017], "eas": [105, 194, 267, 323, 385, 388, 391, 994, 1012, 1017, 1018, 1022, 1050, 1051, 1053], "easi": [121, 192, 227, 237, 265, 271, 275, 277, 348, 359, 368, 380, 391, 393, 397, 398, 409, 415, 422, 506, 510, 516, 877, 987, 993, 997, 1005, 1008, 1017, 1018, 1022, 1032, 1049, 1054, 1055], "easier": [78, 96, 100, 114, 148, 198, 204, 248, 256, 274, 275, 318, 348, 359, 368, 380, 385, 387, 390, 393, 397, 403, 417, 419, 474, 521, 908, 941, 993, 998, 1005, 1014, 1018, 1022, 1032, 1048, 1053], "easiest": [387, 393, 416, 995], "easili": [42, 47, 66, 120, 170, 194, 222, 235, 251, 253, 257, 260, 277, 279, 286, 303, 320, 385, 387, 399, 400, 409, 416, 422, 423, 425, 455, 992, 994, 995, 1008, 1012, 1013, 1014, 1021, 1024, 1027, 1032, 1045], "easlii": 247, "easy_going_classifi": 271, "ec": [318, 536], "ecat": 380, "echo": [383, 389], "eckert": 1044, "eckhart": 500, "eclf": [160, 161, 422], "eclf1": 575, "eclf2": 575, "eclf3": 575, "ecml": 0, "ecoc": 295, "ecolog": [49, 311, 380, 504], "econom": [190, 191, 277], "econometr": 994, "econometrica": 994, "ecosystem": [385, 393, 988, 1016, 1022], "ecuador": [49, 311, 380, 504], "ed": [142, 153, 415, 422, 526, 565, 566, 1010, 1039, 1046], "eddi": [1042, 1056, 1057], "eden": 1054, "edern": [1054, 1055], "edg": [50, 62, 80, 100, 127, 148, 171, 242, 284, 393, 399, 412, 415, 417, 459, 567, 568, 591, 592, 594, 595, 597, 803, 847, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 875, 923, 1008, 1011, 1022, 1045, 1047, 1050, 1053], "edge_model": 50, "edgecolor": [50, 60, 65, 66, 69, 76, 79, 90, 94, 101, 121, 122, 130, 140, 147, 155, 157, 158, 160, 161, 166, 168, 176, 177, 179, 183, 192, 202, 211, 221, 228, 231, 232, 233, 250, 251, 252, 254, 256, 262, 265, 277, 280, 292, 301, 304, 305, 306, 309, 313, 320, 321, 323, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357, 364, 365, 366, 637], "edit": [76, 382, 383, 384, 385, 389, 393, 397, 403, 536, 540, 840, 992, 994, 999, 1005, 1032], "editor": [385, 393, 397], "edm": 994, "edoardo": [1054, 1056, 1057, 1058], "edouard": [0, 405, 1039], "edson": [998, 1044], "edu": [44, 46, 49, 54, 80, 173, 182, 196, 201, 239, 265, 276, 295, 303, 311, 322, 359, 379, 380, 382, 415, 455, 493, 506, 508, 514, 515, 516, 540, 647, 650, 655, 664, 672, 673, 682, 685, 688, 689, 845, 847, 848, 849, 859, 866, 903, 905, 918, 919, 994, 996, 1028], "eduardo": [1042, 1044, 1052, 1053], "educ": [190, 191, 334, 385, 502, 722, 999], "edvardlindelof": 1049, "edward": [180, 620, 625, 628, 1042, 1047, 1048, 1049, 1050, 1054, 1057], "edwinensa": 1045, "edwinwenink": 1052, "eec": [455, 647], "ef": 1054, "eff": 1014, "effect": [42, 44, 63, 71, 73, 74, 79, 80, 87, 91, 96, 99, 102, 106, 117, 127, 129, 138, 149, 151, 153, 156, 172, 175, 176, 180, 182, 188, 189, 191, 192, 194, 203, 214, 219, 220, 221, 223, 224, 225, 236, 238, 241, 243, 249, 256, 260, 263, 267, 271, 273, 277, 278, 279, 282, 285, 286, 291, 298, 316, 317, 319, 322, 328, 336, 348, 352, 353, 355, 356, 357, 359, 360, 361, 368, 373, 385, 387, 390, 397, 399, 413, 415, 416, 420, 421, 422, 423, 425, 426, 443, 449, 450, 452, 453, 455, 456, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 496, 502, 506, 520, 530, 531, 539, 540, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 600, 612, 615, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 696, 697, 698, 707, 709, 759, 791, 803, 805, 807, 808, 811, 813, 815, 817, 824, 825, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 860, 861, 867, 868, 870, 873, 874, 875, 876, 877, 879, 880, 882, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 900, 901, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 930, 931, 947, 964, 972, 987, 992, 994, 995, 997, 998, 999, 1001, 1005, 1006, 1008, 1011, 1013, 1014, 1019, 1028, 1030, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "effective_learning_r": [867, 868], "effective_metric_": [852, 853, 854, 856, 858, 860, 861, 862, 1001], "effective_metric_params_": [852, 853, 854, 856, 858, 860, 861, 862], "effective_rank": [527, 530], "efficaci": 208, "effici": [36, 42, 43, 50, 52, 76, 80, 87, 89, 124, 139, 144, 149, 157, 196, 208, 212, 221, 227, 303, 335, 359, 372, 377, 379, 385, 387, 388, 390, 391, 397, 399, 409, 412, 415, 420, 421, 422, 425, 427, 448, 449, 452, 453, 455, 456, 458, 460, 463, 465, 467, 468, 502, 539, 540, 541, 544, 546, 547, 550, 569, 572, 580, 587, 588, 594, 595, 597, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 640, 644, 646, 661, 664, 665, 670, 672, 673, 674, 679, 681, 682, 683, 684, 685, 691, 692, 694, 732, 762, 769, 785, 786, 803, 804, 806, 820, 839, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 875, 887, 899, 903, 910, 919, 921, 947, 987, 990, 992, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1022, 1023, 1027, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "efficiencywarn": [1, 865, 1054], "effort": [329, 385, 391, 1017, 1022, 1050, 1052], "efron": [173, 382, 688, 689, 994], "eg": 982, "egashira": 1054, "egehan": 1057, "egg": 1047, "egger": 1057, "egin": 415, "egli": [1046, 1056], "egor": 1051, "ehrenheim": [1046, 1047], "eib": [841, 999], "eickenberg": [1039, 1041, 1042, 1043, 1044], "eig": 1046, "eig_tol": 1040, "eig_val": 262, "eig_vec": 262, "eigen": [458, 555, 679, 697, 701, 992, 1045, 1048], "eigen_solv": [50, 78, 80, 100, 239, 240, 420, 458, 468, 541, 694, 695, 697, 699, 701, 995, 1040, 1049, 1052, 1053, 1054], "eigen_tol": [80, 458, 468, 697, 701, 1040, 1053, 1054], "eigendecompos": 420, "eigendecomposit": [468, 679, 697, 701, 876, 990], "eigenfac": [41, 53, 188, 252, 255, 380, 420, 500, 547, 703, 719, 820, 836, 890, 915, 1015, 1019, 1026, 1039], "eigenface_titl": [44, 1028], "eigenmap": [239, 695, 697, 699, 701, 1033, 1034, 1040], "eigensolv": [420, 458, 468, 541, 550, 701, 995], "eigenvalu": [120, 267, 334, 412, 415, 417, 458, 468, 475, 476, 477, 478, 479, 480, 481, 482, 541, 547, 555, 679, 694, 695, 697, 699, 701, 876, 990, 995, 1008, 1041, 1045, 1048, 1049, 1050, 1051], "eigenvalues_": [541, 1052], "eigenvector": [1, 41, 80, 117, 120, 188, 262, 415, 458, 468, 540, 541, 547, 556, 694, 695, 697, 701, 995, 1019, 1039, 1043, 1053], "eigenvector_centr": 54, "eigenvectors_": [541, 1052], "eigh": [69, 262, 263, 264, 267, 268, 420, 427, 539, 541, 1054], "eight": 1032, "eighteenth": 415, "eighth": [569, 1004], "eigsh": [420, 541, 1045, 1046], "eiler": 1008, "einsum": 308, "eitan": 1056, "either": [42, 48, 63, 104, 144, 147, 148, 191, 207, 209, 247, 256, 271, 272, 281, 286, 291, 303, 355, 359, 367, 372, 373, 377, 380, 383, 385, 386, 387, 391, 399, 406, 409, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 448, 453, 458, 493, 502, 518, 530, 539, 540, 542, 550, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 588, 589, 590, 594, 595, 596, 597, 599, 600, 603, 608, 613, 614, 616, 617, 628, 633, 636, 638, 639, 656, 660, 662, 670, 682, 684, 688, 689, 696, 703, 704, 708, 712, 713, 717, 718, 726, 730, 732, 733, 734, 735, 736, 741, 744, 745, 746, 748, 758, 762, 775, 780, 784, 788, 789, 790, 791, 793, 794, 795, 800, 806, 809, 810, 812, 820, 829, 830, 831, 832, 833, 834, 835, 837, 840, 870, 900, 901, 907, 910, 911, 918, 919, 920, 921, 925, 955, 959, 987, 994, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1012, 1013, 1023, 1031, 1032, 1039, 1042, 1048, 1049, 1050, 1053, 1057], "ekaterina": [1045, 1046, 1047, 1048, 1050, 1055], "ekman": [1041, 1045], "el": [534, 1052, 1054, 1055], "elabonga": [1055, 1056], "elabor": 999, "elad": [670, 691, 692], "elaps": [49, 81, 101, 144, 145, 146, 372, 470, 473, 575, 576, 869, 870, 871, 872], "elapsed_tim": [45, 73, 101, 145, 146, 159, 236], "elast": [1, 24, 188, 197, 203, 206, 210, 230, 250, 290, 477, 478, 484, 507, 530, 652, 653, 658, 663, 664, 665, 666, 667, 668, 669, 674, 682, 684, 687, 690, 987, 998, 1012, 1019, 1020, 1034, 1039, 1044, 1048, 1049], "elastic_net": 230, "elastic_net_color": 230, "elastic_net_contour": 230, "elasticnet": [1, 45, 48, 200, 210, 285, 290, 372, 391, 397, 420, 653, 658, 663, 664, 665, 666, 667, 668, 669, 674, 682, 684, 687, 994, 999, 1012, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1057], "elasticnetcv": [1, 203, 399, 406, 652, 658, 666, 667, 668, 669, 687, 994, 1039, 1042, 1050, 1052, 1053, 1056, 1057], "elasticnetifittedelasticnet": 200, "elbo": 420, "eldar": [417, 428, 481], "eleanor": 1054, "elec2": 154, "electr": [50, 154, 382, 415], "electron": [56, 173, 380, 382, 544, 546, 553, 633], "element": [1, 88, 124, 141, 142, 153, 248, 270, 276, 284, 286, 328, 360, 363, 367, 382, 384, 385, 387, 394, 400, 412, 415, 419, 420, 422, 423, 426, 450, 452, 458, 470, 493, 514, 518, 520, 526, 528, 532, 533, 537, 543, 544, 546, 556, 563, 564, 565, 566, 570, 571, 572, 573, 574, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 623, 638, 664, 665, 672, 673, 674, 682, 683, 684, 713, 723, 733, 740, 742, 752, 769, 775, 784, 788, 794, 795, 840, 850, 851, 852, 853, 854, 856, 858, 860, 861, 865, 867, 868, 873, 889, 890, 893, 897, 910, 915, 918, 919, 920, 921, 949, 950, 951, 969, 971, 972, 984, 992, 994, 998, 999, 1002, 1005, 1008, 1009, 1010, 1014, 1022, 1023, 1044, 1045, 1047, 1049, 1050, 1051, 1053, 1055], "elementari": [904, 1010], "elementwis": [420, 544, 546, 553], "elena": 1046, "eleni": 1052, "eleph": 588, "elev": [79, 101, 120, 130, 192, 216, 239, 243, 497], "eleven": 1018, "elfner": 1053, "eli5": 1017, "elia": 1045, "eliaschiavon": 1054, "eliasi": [1054, 1055, 1056], "elicit": 998, "elif": [45, 46, 199, 221, 254, 264, 303, 886], "elimin": [1, 17, 164, 167, 170, 173, 188, 272, 275, 276, 282, 291, 302, 415, 419, 454, 508, 521, 599, 600, 603, 608, 664, 809, 810, 825, 870, 880, 984, 998, 1019, 1020, 1022, 1034, 1039], "elisabeth": [332, 1056], "elizabeth": [1046, 1048, 1051], "elkan": [63, 271, 328, 413, 443, 449, 453, 465, 682, 1045, 1049, 1050, 1052, 1053], "ell": [69, 262, 263, 264, 268, 412], "ell_": 994, "ell_0": [994, 998], "ell_1": [420, 994], "ell_2": 994, "ella": 1010, "ellen": 1046, "elli": [1045, 1048], "elliot": [1056, 1057], "elliott": 1046, "ellips": [69, 246, 262, 263, 264, 267, 268, 1004], "ellipsoid": [47, 64, 68, 112, 113, 114, 188, 261, 262, 264, 265, 266, 267, 268, 555, 556, 637, 803, 804, 992, 997, 1019], "ellipt": [91, 994], "ellipticenvelop": [1, 47, 246, 476, 479, 480, 481, 482, 569, 1004, 1039, 1042, 1046, 1047, 1052], "eln": 1050, "elong": 415, "els": [1, 42, 46, 49, 50, 51, 56, 69, 75, 78, 83, 89, 90, 96, 114, 128, 141, 147, 148, 151, 183, 191, 192, 208, 211, 221, 234, 237, 240, 246, 250, 252, 253, 254, 255, 256, 277, 278, 281, 288, 298, 303, 311, 313, 314, 320, 352, 359, 360, 367, 385, 389, 391, 422, 423, 425, 427, 435, 443, 455, 514, 526, 539, 575, 624, 631, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 678, 679, 680, 682, 685, 687, 688, 689, 690, 709, 715, 794, 800, 802, 809, 810, 836, 874, 886, 889, 897, 910, 911, 925, 960, 962, 964, 985, 1014], "elsewher": [399, 468, 469, 477, 478, 484], "eltermann": 1042, "elucid": 990, "elvezio": [655, 994], "elvi": [1044, 1045, 1046], "em": [263, 264, 268, 449, 453, 465, 542, 803, 804, 997, 1053], "emad": 1057, "email": [0, 359, 385, 397, 423, 845, 1000, 1022], "emami": 1053, "emanuel": 1040, "emb": [175, 240, 250, 307, 378, 379, 468, 701, 995], "embark": [104, 193, 260, 327, 331, 332], "embed": [1, 25, 36, 70, 73, 78, 80, 89, 96, 119, 143, 175, 188, 238, 241, 243, 245, 298, 307, 337, 338, 391, 399, 415, 447, 458, 468, 495, 508, 550, 555, 572, 588, 645, 694, 695, 696, 697, 698, 699, 700, 701, 702, 859, 871, 880, 902, 903, 904, 990, 1001, 1004, 1010, 1015, 1017, 1019, 1033, 1034, 1039, 1040, 1050, 1051, 1053], "embedding_": [242, 399, 694, 695, 696, 697, 698], "emerg": [415, 1022], "emeritu": 400, "emiko": 1053, "emil": 1053, "emili": [1050, 1051], "emipr": 803, "emir": [1054, 1055], "emit": [1050, 1057], "emlearn": 1017, "emma": 1056, "emmanouil": 1053, "emmanuel": [52, 100, 1039, 1046, 1047, 1048, 1056], "emp_cov": [110, 112, 114, 484, 487], "emp_cov_contour": 112, "emp_mah": 112, "emphas": [191, 357, 391, 420, 998], "emphasi": [357, 414, 418, 912, 913, 914, 915, 916, 1005, 1017], "empir": [1, 47, 51, 60, 61, 69, 70, 76, 77, 98, 109, 111, 112, 114, 154, 188, 199, 237, 283, 318, 413, 419, 422, 425, 453, 455, 466, 475, 476, 477, 480, 483, 484, 538, 540, 545, 547, 549, 555, 557, 571, 596, 609, 645, 655, 673, 677, 684, 685, 722, 727, 729, 730, 835, 845, 846, 847, 849, 868, 891, 933, 972, 990, 992, 998, 1000, 1002, 1008, 1010, 1012, 1019, 1033, 1034], "empirical_covari": [1, 110, 417, 484, 485, 487, 1055], "empiricalcovari": [1, 110, 112, 113, 417, 475, 479, 480, 481, 482, 1004], "emploi": [50, 175, 252, 399, 417, 423, 456, 484, 588, 595, 1022, 1031, 1045], "employ": [191, 271], "empti": [95, 103, 133, 231, 340, 372, 380, 387, 389, 415, 427, 489, 539, 567, 568, 637, 817, 875, 915, 917, 925, 930, 931, 937, 957, 958, 988, 1013, 1030, 1041, 1043, 1047, 1048, 1050, 1051, 1053, 1054, 1055], "emptyset": 998, "emul": [191, 393], "en": [54, 60, 393, 537, 543, 601, 642, 670, 674, 677, 691, 692, 701, 711, 852, 853, 858, 859, 860, 861, 888, 904, 918, 919, 994, 998, 1013, 1014], "enabl": [1, 15, 51, 65, 84, 105, 154, 192, 227, 241, 253, 320, 328, 330, 331, 333, 334, 335, 356, 383, 385, 390, 393, 397, 399, 403, 406, 411, 415, 416, 420, 422, 423, 455, 470, 474, 540, 541, 547, 565, 566, 567, 568, 569, 585, 586, 596, 597, 608, 616, 803, 804, 806, 809, 831, 832, 833, 834, 870, 871, 883, 884, 907, 908, 910, 911, 912, 913, 914, 915, 916, 925, 958, 965, 988, 990, 995, 997, 998, 1001, 1008, 1009, 1012, 1013, 1018, 1022, 1039, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "enable_cython_pairwise_dist": [474, 908], "enable_halving_search_cv": [1, 151, 288, 289, 329, 389, 809, 810, 987], "enable_hist_gradient_boost": [389, 1048], "enable_iterative_imput": [1, 186, 187, 389, 633, 988, 1048], "enable_metadata_rout": [253, 271, 334, 406, 443, 449, 450, 453, 455, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 603, 616, 617, 633, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 806, 807, 808, 809, 810, 813, 815, 820, 824, 828, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 869, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 1055], "enable_my_experimental_featur": 389, "enc": [319, 321, 331, 333, 883, 884, 1008], "enc_auto": 891, "enc_high_smooth": 891, "enc_low_smooth": 891, "encapsul": [392, 416, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921], "enclos": 987, "encod": [1, 42, 46, 49, 82, 89, 104, 124, 143, 154, 159, 188, 191, 192, 193, 218, 219, 256, 271, 286, 291, 317, 319, 320, 321, 329, 331, 332, 348, 359, 361, 377, 379, 381, 387, 390, 397, 399, 416, 419, 420, 422, 423, 425, 470, 493, 502, 509, 532, 537, 543, 545, 546, 548, 550, 551, 552, 554, 557, 567, 568, 572, 573, 575, 587, 594, 595, 597, 636, 654, 664, 665, 675, 678, 686, 741, 808, 813, 815, 833, 836, 870, 871, 873, 875, 877, 878, 881, 883, 884, 891, 894, 908, 987, 988, 994, 995, 998, 1000, 1001, 1003, 1012, 1017, 1018, 1019, 1034, 1040, 1041, 1047, 1051, 1053, 1054, 1055, 1056, 1057], "encoded_missing_valu": [159, 193, 884, 1008, 1053, 1054], "encodings_": [333, 891, 1008], "encompass": [399, 456, 462, 561, 562, 995], "encount": [373, 383, 403, 409, 415, 422, 423, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 567, 568, 587, 845, 846, 847, 849, 883, 973, 1008, 1012, 1017, 1021, 1022, 1032, 1047, 1050], "encourag": [191, 223, 313, 348, 384, 385, 397, 1013, 1017, 1057], "encrypt": 1017, "encyclopedia": 998, "end": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 383, 385, 387, 389, 397, 399, 400, 403, 406, 412, 415, 416, 418, 422, 456, 462, 474, 494, 495, 514, 515, 543, 552, 563, 564, 565, 566, 570, 571, 572, 651, 652, 653, 656, 657, 658, 659, 660, 661, 666, 667, 668, 669, 687, 688, 689, 690, 806, 809, 810, 820, 827, 831, 868, 870, 908, 918, 919, 920, 921, 951, 952, 982, 987, 990, 994, 995, 997, 998, 1008, 1010, 1012, 1017, 1022, 1029, 1032, 1044, 1046, 1049, 1052, 1053], "end_": 46, "end_bodi": 46, "end_d": 46, "end_idx": [50, 242], "end_reut": 46, "end_titl": 46, "end_top": 46, "endian": 1051, "endo": 1052, "endpoint": [52, 319, 351, 641], "enemi": 385, "energi": [50, 154, 393, 866, 1003, 1030], "enet": [203, 290], "enet_path": [1, 204, 399, 652, 653, 658, 666, 667, 668, 1041, 1043, 1052], "enet_tol": [477, 478, 484, 1044], "enforc": [42, 50, 69, 87, 124, 154, 180, 213, 307, 372, 385, 417, 420, 422, 432, 438, 514, 533, 537, 543, 545, 548, 549, 551, 552, 554, 563, 564, 567, 568, 570, 571, 874, 889, 918, 919, 920, 921, 930, 931, 988, 995, 1041, 1047, 1049, 1051, 1055], "enforce_estimator_tags_i": 1049, "eng": 1047, "engag": [391, 400], "engemann": [131, 1041, 1042, 1046], "engin": [41, 74, 143, 148, 154, 180, 188, 191, 192, 220, 372, 379, 382, 415, 421, 423, 470, 502, 568, 645, 679, 707, 827, 833, 868, 869, 871, 874, 875, 880, 883, 885, 889, 988, 990, 998, 1008, 1019, 1045], "english": [53, 56, 103, 359, 360, 361, 390, 423, 594, 595, 597, 1017, 1018, 1032, 1052], "enh": 389, "enhanc": [124, 223, 384, 385, 389, 397, 399, 415, 998, 1037, 1038, 1039, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "enjoi": [76, 271], "enough": [1, 42, 51, 63, 71, 78, 96, 144, 147, 154, 175, 186, 192, 193, 208, 219, 251, 254, 256, 271, 322, 359, 361, 368, 383, 385, 389, 400, 413, 415, 417, 419, 422, 573, 574, 595, 806, 809, 810, 812, 820, 834, 947, 987, 992, 995, 997, 1004, 1008, 1013, 1017, 1022, 1045, 1055, 1056], "enrich": 352, "ensembl": [1, 42, 45, 48, 51, 62, 63, 66, 90, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 186, 187, 192, 193, 194, 219, 240, 246, 255, 256, 258, 259, 271, 274, 289, 295, 297, 320, 324, 327, 328, 329, 330, 331, 332, 333, 334, 359, 364, 365, 368, 372, 389, 390, 398, 399, 406, 409, 413, 415, 419, 424, 443, 510, 521, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 638, 639, 641, 664, 708, 809, 810, 828, 836, 840, 841, 871, 874, 883, 914, 918, 920, 921, 939, 987, 998, 999, 1004, 1005, 1014, 1017, 1018, 1019, 1020, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1058], "ensemble_clf": 142, "ensemble_jaccard_scor": 297, "ensembleregressorsensembl": 1025, "ensta": [53, 54, 71, 82, 95, 240, 278, 280, 359, 360, 361], "ensur": [0, 57, 75, 91, 114, 122, 138, 144, 145, 154, 194, 219, 240, 272, 280, 315, 367, 368, 372, 373, 385, 387, 389, 390, 391, 400, 403, 406, 413, 415, 416, 419, 427, 475, 539, 540, 547, 617, 633, 702, 711, 788, 794, 795, 831, 903, 930, 931, 947, 953, 964, 994, 995, 998, 1008, 1014, 1027, 1041, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "ensure_2d": [930, 931], "ensure_min_featur": [930, 931], "ensure_min_sampl": [930, 931], "entail": [398, 888, 890, 1012], "enter": [386, 389, 415, 448, 1005], "entertain": 994, "entic": 191, "entir": [67, 186, 219, 227, 271, 316, 318, 328, 352, 367, 368, 379, 386, 387, 399, 409, 415, 419, 421, 423, 478, 498, 540, 594, 595, 596, 597, 653, 657, 659, 661, 664, 665, 667, 669, 671, 672, 674, 682, 688, 689, 740, 802, 828, 838, 839, 842, 867, 869, 870, 883, 895, 896, 898, 899, 900, 901, 967, 987, 988, 998, 1008, 1012, 1014, 1030, 1048, 1049], "entireti": 399, "entiti": [400, 732, 762], "entitl": [291, 301, 414, 453, 617, 852, 990], "entri": [0, 104, 108, 154, 159, 187, 191, 192, 271, 273, 327, 360, 368, 389, 391, 393, 398, 399, 412, 413, 415, 420, 422, 425, 469, 470, 473, 478, 502, 537, 538, 543, 551, 552, 567, 568, 594, 597, 600, 617, 626, 638, 644, 646, 653, 657, 659, 661, 662, 665, 667, 669, 670, 671, 679, 681, 688, 689, 691, 692, 705, 710, 713, 715, 718, 721, 722, 724, 732, 735, 736, 737, 740, 741, 744, 749, 762, 764, 765, 789, 791, 794, 795, 798, 799, 819, 834, 850, 851, 858, 859, 860, 861, 862, 881, 887, 899, 984, 987, 988, 994, 998, 1001, 1008, 1013, 1018, 1023, 1046, 1049, 1050, 1052, 1056], "entropi": [1, 49, 63, 258, 289, 311, 329, 337, 338, 368, 380, 415, 422, 427, 504, 539, 563, 570, 613, 614, 664, 723, 742, 743, 747, 801, 918, 920, 994, 995, 998, 1002, 1014, 1041, 1043, 1047, 1048, 1053, 1055, 1056], "entrypoint_to_bug_reproduc": 386, "enumer": [42, 46, 48, 49, 50, 52, 53, 54, 56, 61, 63, 65, 66, 71, 73, 74, 75, 76, 77, 78, 79, 84, 89, 93, 94, 95, 96, 99, 103, 111, 113, 114, 117, 125, 127, 133, 141, 144, 149, 150, 152, 153, 154, 164, 177, 179, 184, 194, 199, 201, 210, 219, 240, 241, 244, 246, 251, 255, 256, 262, 263, 264, 265, 267, 268, 271, 272, 279, 280, 286, 287, 303, 307, 308, 310, 316, 320, 321, 337, 338, 340, 342, 346, 348, 354, 355, 359, 364, 380, 565, 566, 570, 571, 787, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827], "env": [383, 393, 403], "environ": [0, 2, 50, 62, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 372, 380, 382, 383, 385, 387, 391, 393, 397, 403, 411, 416, 505, 1018, 1022, 1034, 1046, 1047, 1056], "environment": [49, 203, 237], "environmenterror": 1055, "eom": 452, "ep": [66, 78, 80, 83, 89, 99, 202, 204, 242, 250, 397, 415, 426, 450, 456, 461, 477, 478, 484, 637, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 687, 688, 689, 690, 696, 700, 720, 747, 862, 902, 903, 904, 1010, 1054, 1055], "epanechnikov": [303, 421, 850, 851, 855], "ephemer": 393, "ephrem": 1054, "epimorph": 1056, "epistem": 51, "epoch": [234, 399, 542, 672, 673, 674, 682, 683, 684, 867, 868, 1012, 1046, 1047, 1052], "epp": [415, 710], "eps_": [666, 668], "eps_rang": 250, "epsilon": [1, 89, 99, 201, 242, 252, 333, 354, 420, 452, 461, 649, 655, 673, 682, 684, 752, 867, 868, 911, 913, 916, 991, 994, 998, 1002, 1012, 1013, 1030, 1039], "epsilon_": 848, "epsilon_i": 998, "epsilon_insensit": [673, 682, 684, 911, 994, 1012], "epsilon_valu": 201, "eq": [271, 428, 481, 727, 729, 730], "equal": [42, 49, 50, 62, 69, 71, 73, 87, 94, 112, 117, 138, 151, 178, 191, 220, 221, 230, 236, 257, 264, 267, 270, 275, 277, 286, 308, 320, 324, 348, 350, 356, 360, 380, 381, 385, 387, 399, 412, 413, 415, 419, 420, 422, 423, 428, 443, 446, 447, 448, 449, 451, 453, 455, 460, 465, 466, 469, 475, 480, 485, 486, 509, 518, 521, 525, 538, 539, 540, 545, 547, 549, 550, 555, 556, 557, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 594, 599, 600, 603, 605, 606, 613, 614, 631, 634, 635, 638, 639, 640, 641, 643, 647, 648, 655, 664, 665, 677, 705, 724, 726, 735, 789, 793, 794, 800, 802, 806, 807, 809, 810, 819, 820, 824, 831, 838, 842, 843, 850, 851, 852, 853, 858, 859, 860, 861, 862, 867, 868, 873, 874, 875, 882, 885, 888, 889, 890, 891, 893, 900, 907, 910, 911, 917, 918, 919, 920, 921, 936, 947, 973, 979, 992, 994, 998, 999, 1001, 1002, 1004, 1008, 1012, 1013, 1014, 1031, 1032, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "equat": [1, 63, 355, 385, 415, 420, 422, 563, 564, 565, 566, 570, 571, 572, 596, 633, 664, 665, 688, 689, 693, 769, 890, 918, 919, 920, 921, 988, 995, 998, 1003, 1047], "equi": 997, "equiangular": 994, "equidist": [148, 698], "equip": 1022, "equiv": [990, 1013], "equival": [42, 53, 69, 89, 91, 148, 155, 172, 175, 180, 191, 203, 237, 267, 286, 298, 323, 352, 361, 368, 372, 391, 394, 398, 399, 409, 415, 416, 417, 418, 419, 420, 422, 424, 425, 447, 449, 450, 451, 452, 453, 455, 456, 463, 470, 475, 480, 515, 540, 547, 564, 567, 568, 569, 570, 571, 594, 597, 619, 622, 625, 627, 630, 652, 653, 654, 658, 660, 664, 665, 672, 673, 674, 675, 678, 682, 683, 686, 689, 693, 694, 699, 714, 715, 729, 740, 748, 753, 754, 755, 767, 776, 785, 786, 803, 804, 809, 810, 814, 816, 841, 844, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 867, 873, 879, 880, 882, 885, 886, 887, 888, 890, 898, 900, 901, 934, 945, 984, 987, 992, 994, 995, 996, 998, 1004, 1008, 1012, 1013, 1014, 1047, 1048, 1049, 1050, 1052, 1053, 1056], "er": 576, "era": 1018, "eras": [565, 566, 652, 658, 664, 666, 668, 672, 673, 674, 682, 683, 684, 867, 868], "ereg": [162, 422], "eren": [0, 57, 58, 1041, 1042], "eric": [322, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "ericchang2017": 322, "ericellwang": [1052, 1053], "erich": [456, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1057], "erick": 1044, "erik": [380, 1022, 1042], "eriksson": 1046, "erin": [295, 1051], "erl": 295, "erlbaum": 271, "erling": 1044, "ermolaevpa": [1053, 1054], "ernst": [422, 563, 564, 571, 572, 920, 921], "err": [54, 116, 128, 138], "err_cov_emp_ful": 113, "err_cov_emp_pur": 113, "err_cov_mcd": 113, "err_loc_emp_ful": 113, "err_loc_emp_pur": 113, "err_loc_mcd": 113, "errno": 403, "erron": [112, 113, 420, 994, 1040, 1047, 1051], "error": [1, 14, 24, 29, 42, 43, 45, 51, 52, 54, 63, 88, 108, 110, 111, 113, 128, 133, 137, 141, 144, 145, 148, 150, 152, 154, 173, 175, 186, 188, 191, 203, 208, 215, 218, 219, 221, 225, 226, 233, 237, 249, 252, 253, 259, 268, 269, 271, 273, 277, 278, 282, 286, 287, 292, 295, 304, 305, 331, 334, 347, 355, 359, 360, 373, 382, 383, 385, 387, 388, 389, 390, 394, 397, 399, 406, 409, 413, 415, 416, 417, 419, 420, 422, 423, 424, 443, 449, 450, 453, 455, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 521, 530, 537, 539, 540, 543, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 581, 587, 588, 594, 596, 597, 598, 600, 601, 602, 604, 605, 606, 612, 616, 617, 635, 638, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 694, 695, 696, 698, 699, 702, 704, 707, 708, 715, 717, 718, 726, 727, 729, 733, 746, 749, 750, 751, 752, 753, 754, 756, 757, 759, 770, 784, 788, 794, 795, 796, 797, 805, 806, 807, 808, 809, 810, 812, 813, 815, 820, 824, 828, 829, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 860, 861, 862, 865, 867, 868, 869, 870, 871, 873, 875, 876, 877, 882, 883, 884, 889, 890, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 928, 929, 930, 931, 934, 961, 982, 985, 987, 988, 989, 991, 992, 993, 995, 999, 1002, 1006, 1008, 1012, 1013, 1014, 1019, 1020, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "error_": [537, 549], "error_i": [144, 278], "error_norm": [111, 113, 475, 476, 477, 478, 479, 480, 481, 482], "error_on_new": 635, "error_r": 142, "error_scor": [806, 809, 810, 812, 820, 829, 832, 833, 834, 837, 987, 1043, 1047, 1051, 1054], "error_x": [144, 278], "errorbar": [71, 95, 106, 111, 113, 172, 181, 182, 300, 340, 351, 812, 829], "errorbar_": [812, 829], "errorbar_kw": [812, 829], "errorbarcontain": [812, 829], "errors_coef": 223, "errors_lines_": 707, "erwan": 1056, "erwin": 1042, "escal": 400, "escalant": 998, "escalera": 998, "escap": [1052, 1054], "eschibli": 1051, "eschlbeck": 1053, "esdi": 56, "esp": [415, 1039], "especi": [42, 46, 51, 89, 90, 148, 151, 154, 191, 219, 253, 324, 332, 360, 368, 373, 379, 385, 393, 397, 399, 413, 415, 423, 449, 455, 507, 544, 563, 564, 565, 566, 570, 571, 572, 652, 653, 654, 656, 658, 659, 660, 664, 665, 666, 667, 668, 669, 675, 686, 701, 711, 752, 845, 846, 847, 848, 849, 918, 919, 920, 921, 994, 1000, 1001, 1008, 1022, 1042, 1047, 1051, 1052, 1053], "espinoza": [1040, 1041], "essenc": [613, 614, 749, 995, 998], "essenti": [277, 332, 383, 387, 415, 419, 420, 515, 998, 1001, 1018, 1022, 1047], "est": [79, 159, 191, 211, 234, 253, 255, 271, 291, 320, 329, 368, 409, 422, 568, 741, 875, 987, 998, 1008, 1012, 1050, 1051], "est1": [399, 638], "est2": [399, 638], "est_freq": 237, "est_idx": 320, "est_sev": 237, "establish": [393, 397, 400, 988], "estefania": 1053, "ester": [415, 426, 450], "estev": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "estim": [1, 3, 6, 7, 12, 15, 24, 28, 29, 30, 34, 42, 44, 45, 46, 47, 48, 49, 50, 51, 60, 62, 63, 65, 68, 69, 71, 72, 78, 79, 83, 88, 89, 90, 91, 92, 95, 97, 104, 105, 106, 107, 116, 117, 124, 125, 126, 131, 133, 137, 138, 142, 143, 144, 145, 147, 149, 151, 152, 153, 154, 156, 159, 160, 161, 162, 164, 171, 172, 173, 174, 175, 176, 180, 182, 184, 185, 186, 190, 191, 197, 200, 203, 207, 208, 209, 214, 219, 221, 223, 224, 226, 227, 236, 237, 245, 246, 247, 252, 258, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 274, 275, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 294, 297, 298, 299, 305, 309, 318, 320, 330, 331, 333, 335, 351, 352, 355, 360, 361, 364, 366, 372, 373, 374, 377, 383, 385, 388, 389, 392, 393, 394, 395, 403, 406, 409, 410, 413, 414, 415, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 497, 498, 501, 502, 504, 507, 508, 530, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 581, 582, 583, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 693, 694, 695, 696, 697, 698, 703, 704, 706, 707, 708, 713, 714, 717, 718, 719, 722, 724, 726, 727, 729, 730, 732, 733, 734, 735, 736, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 788, 789, 790, 791, 793, 794, 795, 796, 797, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 820, 822, 824, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 898, 899, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 929, 930, 931, 933, 935, 936, 939, 941, 942, 943, 954, 955, 956, 958, 982, 986, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "estimate_bandwidth": [1, 78, 97, 415, 454, 467], "estimated_coef": [652, 653, 658, 666, 667, 668, 687, 688, 689], "estimated_param_": 1029, "estimator_": [222, 253, 291, 435, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 599, 600, 603, 677, 805, 828, 982, 1054], "estimator__alpha": 151, "estimator__max_depth": [399, 987], "estimator_alpha": 147, "estimator_check": [1, 327, 387, 399, 941, 942, 1046, 1047, 1049, 1050, 1053, 1054, 1055, 1057], "estimator_conf": 48, "estimator_config": 48, "estimator_dict": 227, "estimator_errors_": [138, 559, 560], "estimator_html_repr": [1, 387, 416, 1050, 1051, 1052, 1053, 1056], "estimator_modul": 387, "estimator_nam": [48, 227, 387, 392, 444, 582, 704, 706, 708, 929], "estimator_samples_": 1050, "estimator_weights_": [138, 559, 560], "estimatorcv": [399, 1018], "estimators_": [145, 147, 211, 234, 254, 327, 399, 422, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 838, 839, 840, 841, 842, 843, 844, 1040, 1046, 1053], "estimators_early_stop": 149, "estimators_features_": [561, 562, 569], "estimators_samples_": [561, 562, 563, 564, 569, 570, 571, 572, 1045, 1047, 1050, 1056], "est\u00e8v": [0, 404, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "esuli": [1046, 1051], "esvhd": 1048, "et": [0, 1, 49, 110, 111, 138, 153, 207, 311, 380, 382, 412, 415, 417, 420, 422, 423, 424, 457, 504, 525, 526, 534, 541, 547, 550, 569, 688, 689, 725, 726, 845, 847, 867, 868, 903, 946, 947, 994, 995, 998, 1004, 1008, 1010, 1013, 1014, 1047, 1055], "eta": [420, 542, 682, 683, 684, 1002, 1012, 1044], "eta0": [674, 682, 683, 684, 1012], "eta_0": 1012, "etc": [1, 148, 219, 237, 272, 281, 282, 335, 368, 372, 374, 385, 387, 389, 390, 397, 398, 399, 406, 409, 412, 416, 419, 423, 495, 509, 533, 563, 564, 570, 571, 674, 682, 698, 724, 777, 806, 820, 841, 844, 874, 885, 918, 919, 920, 921, 922, 924, 930, 931, 941, 987, 988, 992, 998, 1001, 1017, 1018, 1022, 1039, 1046, 1048, 1049], "eth": 1049, "ethan": [1042, 1045], "ethic": 154, "ethz": [340, 342], "etiquett": 385, "etl": [1018, 1022], "euclidean": [1, 36, 74, 91, 92, 205, 250, 256, 298, 301, 306, 327, 332, 352, 360, 412, 415, 420, 421, 422, 423, 425, 446, 447, 450, 451, 452, 456, 458, 463, 466, 469, 537, 543, 551, 552, 595, 621, 625, 628, 629, 682, 684, 696, 698, 701, 702, 705, 768, 769, 775, 776, 777, 778, 784, 785, 786, 787, 798, 799, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 904, 988, 992, 996, 999, 1001, 1010, 1018, 1043, 1046, 1047, 1048, 1049, 1055, 1056], "euclidean_dist": [1, 242, 250, 387, 456, 460, 463, 694, 700, 768, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 1039, 1044, 1047, 1048, 1056], "euclideandist": 705, "eugen": [382, 1040, 1045], "eunji": 1047, "eunseop": 1049, "euro": 335, "europ": [423, 1008], "european": [732, 762, 998], "eustach": [45, 46, 48, 1022, 1041, 1042], "eval_and_print_metr": 341, "eval_gradi": [183, 425, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "evalml": 1017, "evalu": [1, 26, 28, 42, 43, 44, 48, 49, 54, 60, 67, 70, 72, 76, 77, 83, 89, 98, 104, 105, 127, 138, 144, 145, 146, 148, 149, 151, 154, 168, 169, 178, 188, 194, 196, 199, 208, 221, 226, 237, 245, 269, 270, 274, 275, 276, 277, 280, 282, 283, 284, 286, 288, 289, 291, 292, 297, 305, 307, 311, 318, 323, 325, 329, 333, 334, 341, 348, 352, 359, 368, 378, 380, 387, 391, 399, 402, 416, 423, 424, 425, 453, 455, 470, 472, 494, 497, 498, 499, 502, 515, 526, 542, 557, 567, 568, 569, 573, 574, 597, 600, 608, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 637, 638, 639, 640, 653, 659, 665, 679, 681, 703, 705, 707, 708, 709, 710, 711, 717, 719, 720, 721, 723, 724, 732, 733, 742, 743, 748, 760, 761, 762, 763, 792, 801, 803, 804, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 836, 837, 841, 847, 850, 851, 856, 868, 870, 871, 877, 880, 883, 884, 888, 889, 890, 895, 896, 898, 899, 900, 901, 912, 915, 918, 933, 941, 972, 990, 994, 996, 1000, 1001, 1004, 1005, 1006, 1009, 1012, 1014, 1017, 1019, 1022, 1023, 1024, 1027, 1028, 1030, 1033, 1034, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "evaluate_everi": 542, "evaluate_model_and_stor": 324, "evaluation_std": 360, "evaluations_std": 360, "even": [36, 42, 51, 52, 63, 74, 76, 86, 108, 117, 127, 144, 151, 181, 191, 192, 193, 208, 219, 220, 227, 237, 243, 244, 252, 253, 263, 283, 295, 318, 320, 322, 323, 342, 355, 359, 360, 361, 368, 374, 380, 384, 385, 386, 387, 389, 390, 393, 397, 399, 409, 413, 415, 416, 417, 419, 420, 422, 423, 425, 447, 449, 451, 452, 453, 454, 455, 465, 467, 538, 541, 563, 564, 565, 566, 570, 571, 588, 595, 600, 633, 634, 636, 645, 664, 665, 701, 706, 711, 718, 749, 767, 773, 780, 784, 787, 792, 794, 833, 870, 871, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 918, 919, 920, 921, 947, 967, 987, 988, 990, 992, 994, 997, 998, 1001, 1003, 1004, 1006, 1008, 1010, 1012, 1013, 1014, 1022, 1032, 1046, 1047, 1048, 1051, 1053, 1056], "evenli": [1, 46, 73, 86, 151, 194, 223, 272, 423, 951, 1032], "event": [0, 42, 219, 237, 280, 413, 415, 594, 595, 642, 845, 935, 994, 999, 1000, 1017, 1022, 1045], "eventu": [6, 265, 271, 415, 424, 599, 1022], "ever": [144, 158, 394, 422, 1022], "everi": [42, 124, 154, 180, 186, 217, 220, 240, 252, 263, 268, 286, 330, 334, 368, 380, 385, 387, 389, 393, 399, 415, 417, 419, 420, 423, 446, 460, 514, 537, 542, 545, 551, 563, 565, 566, 567, 568, 570, 596, 597, 609, 652, 653, 655, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 674, 678, 679, 680, 681, 682, 691, 692, 693, 698, 702, 760, 777, 785, 786, 819, 859, 918, 920, 922, 924, 936, 991, 993, 998, 999, 1000, 1008, 1014, 1022, 1027, 1039, 1043, 1045, 1048, 1052, 1056], "everingham": 998, "everingham2010": 998, "everybodi": [379, 385], "everyon": [385, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "everyth": [337, 368, 389, 391, 397, 409, 470, 953, 1017, 1018, 1039], "everywher": 399, "evgeni": 1050, "evid": [283, 359, 393, 415, 419, 420, 422, 650, 803, 997], "evol": 998, "evolut": [46, 48, 289, 372, 374], "evolutionari": 1017, "evolv": [394, 1054], "ex": [103, 383, 386, 403, 1043, 1044], "exabyt": 1030, "exact": [43, 45, 114, 129, 144, 180, 223, 251, 271, 298, 334, 368, 372, 373, 379, 385, 387, 394, 397, 398, 399, 415, 422, 424, 440, 488, 489, 490, 494, 502, 540, 541, 547, 567, 568, 644, 648, 652, 698, 806, 820, 831, 832, 833, 912, 915, 987, 990, 994, 995, 1004, 1008, 1012, 1013, 1046, 1047, 1049], "exactli": [104, 138, 190, 198, 203, 212, 219, 223, 268, 271, 285, 319, 355, 359, 385, 387, 412, 415, 419, 420, 423, 428, 452, 459, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 521, 532, 596, 597, 621, 682, 684, 709, 711, 769, 807, 824, 831, 990, 994, 995, 996, 998, 999, 1014, 1031, 1032, 1039, 1045, 1046, 1052], "exagger": [73, 191, 698, 995], "examin": [169, 391, 393, 415, 859], "exampl": [1, 29, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 398, 399, 402, 403, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 427, 428, 430, 431, 433, 434, 436, 437, 440, 441, 442, 445, 462, 463, 465, 467, 469, 477, 484, 486, 487, 491, 492, 493, 499, 503, 509, 511, 513, 514, 515, 522, 523, 524, 534, 535, 537, 551, 552, 553, 554, 561, 578, 579, 583, 589, 591, 592, 598, 601, 602, 604, 607, 609, 615, 618, 622, 626, 627, 630, 632, 635, 642, 643, 644, 648, 656, 657, 660, 666, 667, 669, 673, 681, 689, 691, 692, 693, 700, 701, 702, 705, 714, 716, 717, 720, 721, 722, 726, 727, 729, 730, 731, 732, 734, 736, 737, 739, 742, 745, 746, 749, 750, 753, 757, 760, 762, 764, 765, 766, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 789, 797, 800, 802, 813, 814, 815, 816, 817, 818, 819, 830, 842, 844, 846, 850, 851, 860, 861, 862, 864, 865, 872, 873, 876, 878, 881, 892, 893, 895, 897, 898, 900, 901, 902, 905, 909, 911, 912, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 947, 948, 949, 950, 952, 953, 960, 961, 962, 963, 967, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1022, 1024, 1027, 1028, 1030, 1032, 1034, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1052, 1054, 1055, 1056], "example_funct": 385, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1039, "example_gaussian_process_plot_gp_regress": 1039, "exampleclassifi": 253, "exampleclassifierexampleclassifi": 253, "exampleestim": 385, "exampleregressor": 253, "examples_pattern": 385, "exampletransform": 253, "exc": [295, 982], "exce": [116, 297, 328, 425, 448, 521, 608, 655, 664, 1048, 1051, 1053], "exceed": [809, 810, 1045], "excel": [157, 379, 385, 422, 696, 700, 994, 1022], "except": [1, 49, 78, 87, 127, 136, 144, 154, 227, 234, 246, 253, 285, 298, 311, 314, 315, 318, 320, 332, 378, 385, 387, 388, 389, 390, 397, 399, 406, 409, 412, 416, 419, 420, 422, 423, 425, 438, 466, 471, 474, 488, 489, 490, 515, 560, 562, 563, 564, 566, 568, 570, 571, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 617, 633, 636, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 693, 717, 784, 813, 843, 844, 850, 851, 853, 856, 861, 867, 868, 874, 888, 890, 908, 911, 913, 916, 919, 921, 929, 951, 982, 984, 994, 998, 1013, 1023, 1031, 1032, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1056, 1057], "exception": 237, "excerpt": [44, 1010, 1028], "excess": [223, 452, 1008, 1046], "exchang": [409, 1021], "excit": 1046, "exclud": [46, 56, 190, 318, 385, 389, 399, 452, 470, 472, 735, 736, 744, 789, 790, 793, 819, 827, 885, 973, 998, 1001, 1048, 1055], "exclus": [373, 397, 399, 420, 422, 633, 634, 636, 987, 994, 998, 999, 1022, 1046, 1050], "exec": 397, "execut": [63, 186, 203, 208, 252, 282, 373, 383, 385, 391, 409, 411, 415, 420, 426, 449, 467, 806, 812, 820, 829, 831, 832, 833, 834, 837, 855, 964, 965, 1008, 1011, 1019, 1024, 1032, 1041, 1044, 1047], "exemplar": [415, 446, 460, 1031], "exemplari": [160, 161], "exemplifi": 399, "exercis": [1, 106, 147, 157, 177, 179, 229, 232, 290, 313, 314, 342, 353, 356, 357, 374, 382, 385, 507, 508, 510, 511, 658, 659, 664, 806, 811, 852, 915, 1019, 1024, 1042], "exercise_01_language_train_model": 1032, "exercise_02_senti": 1032, "exercise_xx_script": 1032, "exhaust": [1, 173, 278, 327, 328, 329, 330, 331, 332, 333, 334, 335, 372, 382, 390, 398, 410, 415, 422, 806, 809, 810, 820, 900, 901, 903, 994, 1032, 1034], "exhibit": [176, 224, 352, 359, 402, 419, 420, 422, 425, 1006], "exist": [46, 47, 51, 54, 56, 87, 237, 277, 315, 318, 352, 379, 384, 387, 388, 391, 397, 399, 400, 403, 409, 415, 419, 420, 422, 423, 430, 440, 443, 449, 450, 453, 455, 457, 459, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 505, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 591, 594, 595, 596, 597, 600, 603, 609, 616, 617, 638, 639, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 704, 706, 708, 768, 771, 775, 805, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 883, 884, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 982, 990, 995, 997, 998, 1002, 1004, 1005, 1008, 1022, 1031, 1039, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "exist_ok": 46, "existing_credit": 271, "exit": [105, 298, 389, 393, 474], "exp": [1, 80, 88, 100, 133, 141, 151, 176, 203, 229, 303, 308, 311, 328, 329, 333, 352, 413, 415, 416, 421, 427, 458, 471, 527, 539, 542, 621, 622, 628, 647, 765, 772, 782, 867, 868, 886, 992, 994, 996, 1000, 1001, 1002, 1011, 1012, 1013, 1030], "exp10": 191, "exp_dirichlet_component_": 542, "exp_dist_embed": 308, "expand": [42, 83, 99, 248, 324, 328, 368, 377, 422, 450, 456, 505, 563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 998, 1040, 1047, 1048, 1055], "expand_frame_repr": 237, "expans": [42, 186, 329, 456, 885, 1048], "expect": [42, 43, 48, 51, 60, 71, 78, 87, 117, 122, 129, 138, 141, 143, 145, 148, 151, 154, 170, 171, 175, 181, 188, 189, 193, 205, 210, 219, 220, 221, 223, 227, 237, 250, 253, 256, 257, 263, 264, 267, 268, 271, 284, 298, 323, 355, 359, 360, 368, 372, 373, 385, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 402, 406, 411, 413, 415, 416, 417, 419, 422, 423, 424, 438, 470, 471, 473, 474, 475, 488, 489, 490, 502, 529, 538, 542, 544, 547, 558, 560, 561, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 574, 576, 578, 594, 595, 597, 601, 603, 612, 617, 633, 638, 639, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 680, 681, 684, 685, 701, 710, 711, 722, 741, 794, 800, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 860, 861, 862, 863, 868, 871, 876, 883, 884, 887, 890, 891, 900, 901, 908, 910, 911, 912, 913, 914, 915, 916, 919, 921, 961, 987, 994, 997, 998, 1000, 1004, 1008, 1012, 1013, 1014, 1019, 1021, 1028, 1031, 1032, 1034, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "expected_anomaly_fract": 256, "expected_i": 151, "expected_n_anomali": 256, "expected_ri": 711, "expectedli": 359, "expens": [0, 90, 144, 159, 175, 190, 192, 247, 274, 286, 348, 352, 359, 360, 361, 374, 391, 399, 415, 416, 419, 422, 423, 455, 474, 514, 806, 809, 810, 820, 833, 908, 910, 995, 997, 1008, 1013, 1017, 1022, 1032, 1043], "experi": [29, 138, 178, 182, 190, 191, 192, 193, 196, 221, 271, 295, 323, 355, 360, 361, 373, 379, 385, 388, 400, 419, 521, 734, 791, 994, 999, 1010, 1016, 1017, 1022, 1030, 1032], "experienc": 385, "experiment": [1, 151, 186, 187, 219, 288, 289, 329, 330, 335, 385, 387, 388, 395, 397, 399, 406, 419, 502, 555, 585, 586, 633, 702, 809, 810, 968, 987, 988, 994, 997, 998, 1017, 1018, 1026, 1034, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "expert_r": 416, "expertis": [384, 385, 397], "expit": [150, 209, 422, 567, 994, 1046], "explain": [1, 42, 43, 50, 63, 90, 106, 116, 117, 132, 151, 175, 180, 181, 192, 193, 219, 237, 246, 253, 268, 287, 290, 324, 335, 359, 360, 373, 383, 385, 389, 397, 409, 411, 418, 420, 425, 499, 527, 530, 540, 547, 550, 555, 631, 654, 662, 675, 686, 727, 728, 729, 730, 734, 791, 994, 1001, 1014, 1016, 1017, 1028, 1030, 1031, 1050, 1052, 1053], "explained_vari": [360, 998], "explained_variance_": [117, 540, 547, 550, 1031, 1046], "explained_variance_ratio": 1045, "explained_variance_ratio_": [106, 132, 335, 360, 420, 540, 547, 550, 555, 1028, 1042, 1045], "explained_variance_scor": [1, 998, 1042, 1046, 1053], "explan": [63, 117, 253, 372, 384, 385, 413, 423, 987, 997, 999, 1014, 1022, 1042], "explic": 1010, "explicit": [42, 154, 188, 192, 196, 245, 253, 291, 352, 372, 373, 374, 384, 386, 397, 399, 400, 406, 416, 423, 429, 478, 505, 507, 508, 547, 557, 558, 637, 644, 645, 647, 682, 806, 807, 814, 854, 862, 870, 910, 915, 962, 990, 992, 994, 998, 1008, 1014, 1017, 1019, 1039, 1043, 1048, 1049, 1052, 1056], "explicitli": [42, 80, 145, 175, 182, 186, 187, 220, 249, 253, 334, 352, 361, 368, 373, 379, 381, 385, 386, 387, 389, 397, 399, 406, 409, 411, 419, 423, 425, 541, 555, 556, 585, 586, 603, 633, 654, 664, 665, 675, 686, 715, 733, 788, 794, 795, 809, 810, 841, 844, 850, 851, 876, 900, 901, 987, 988, 990, 992, 994, 995, 998, 1000, 1001, 1008, 1022, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1057], "explod": 324, "exploit": [61, 297, 409, 999, 1018, 1042], "exploit_incremental_learn": [812, 834], "explor": [51, 71, 141, 142, 154, 194, 243, 244, 256, 271, 278, 279, 285, 286, 295, 325, 329, 348, 360, 368, 379, 382, 384, 391, 415, 422, 478, 806, 809, 817, 891, 987, 994, 995, 997, 1003, 1005, 1008, 1022, 1026, 1032, 1045], "exploratori": [191, 1022], "explos": [806, 820, 831, 832, 833], "expm1": 108, "expon": [425, 622, 682, 683, 684, 818, 867, 868, 885, 987], "exponenti": [1, 80, 108, 175, 180, 303, 308, 421, 422, 425, 455, 542, 560, 565, 620, 625, 628, 645, 649, 764, 765, 850, 851, 855, 867, 868, 885, 990, 994, 998, 1013, 1030, 1046, 1052], "export": [1, 383, 386, 387, 403, 922, 923, 1014, 1017, 1048], "export_graphviz": [1, 1014, 1044, 1046, 1052, 1054, 1055], "export_text": [1, 1014, 1048, 1055], "expos": [1, 173, 253, 295, 330, 332, 373, 378, 382, 399, 406, 413, 416, 422, 424, 425, 443, 470, 559, 560, 567, 568, 573, 574, 575, 576, 599, 600, 608, 617, 805, 806, 809, 810, 820, 828, 839, 840, 841, 842, 843, 844, 925, 994, 998, 1000, 1027, 1029, 1031, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "exposur": [219, 237, 994], "express": [42, 45, 50, 51, 138, 144, 175, 180, 191, 277, 278, 324, 329, 345, 352, 361, 379, 380, 385, 386, 391, 397, 409, 415, 420, 421, 422, 423, 456, 462, 463, 594, 595, 597, 722, 794, 806, 812, 820, 829, 831, 832, 833, 834, 837, 857, 990, 994, 998, 1002, 1008, 1009, 1014, 1047], "expsinesquar": [1, 175, 180, 184, 425], "exstrac": 998, "ext": 652, "extend": [30, 51, 89, 90, 101, 136, 220, 266, 271, 284, 348, 382, 383, 397, 399, 413, 415, 420, 422, 637, 726, 827, 839, 842, 843, 875, 877, 894, 910, 911, 925, 990, 998, 999, 1013, 1018, 1020, 1034, 1044, 1045, 1046, 1047, 1049, 1054], "extens": [284, 286, 303, 372, 373, 379, 380, 383, 386, 388, 389, 393, 394, 397, 409, 415, 420, 502, 509, 540, 747, 941, 949, 995, 997, 998, 1016, 1017, 1022, 1039, 1045, 1052, 1053, 1055, 1056], "extent": [1, 47, 92, 177, 178, 179, 250, 356, 446, 541, 702, 803, 998], "extercond": 148, "extern": [164, 175, 271, 374, 378, 382, 385, 387, 390, 397, 399, 412, 415, 423, 424, 425, 599, 616, 617, 723, 743, 801, 994, 997, 998, 1001, 1014, 1018, 1024, 1030, 1034, 1047, 1051], "exterqu": [148, 159], "extmath": [1, 265, 359, 394, 459, 944, 945, 946, 947, 948, 949, 1039, 1040, 1045, 1046, 1049, 1053, 1054, 1056], "extr": 46, "extra": [1, 80, 147, 154, 255, 298, 334, 361, 383, 384, 386, 389, 399, 409, 422, 423, 444, 449, 453, 465, 470, 538, 563, 564, 572, 596, 597, 706, 707, 708, 831, 854, 920, 921, 937, 997, 998, 1001, 1039, 1042, 1044, 1045, 1047, 1052, 1054], "extra_cflag": 391, "extra_tre": [920, 921], "extract": [1, 16, 41, 42, 44, 46, 49, 50, 54, 84, 89, 102, 103, 104, 105, 116, 124, 144, 169, 173, 188, 234, 269, 276, 277, 282, 283, 285, 316, 341, 351, 359, 361, 368, 377, 380, 382, 387, 391, 394, 397, 415, 416, 419, 420, 456, 458, 461, 462, 468, 470, 494, 495, 499, 500, 509, 510, 537, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 589, 590, 594, 595, 597, 599, 600, 603, 605, 637, 724, 794, 806, 820, 847, 869, 870, 915, 947, 955, 962, 987, 995, 999, 1003, 1008, 1012, 1017, 1019, 1022, 1024, 1028, 1029, 1034, 1039, 1040, 1048, 1051], "extract_dbscan": 415, "extract_patches_2d": [1, 84, 127, 423, 593, 1047], "extract_scor": 280, "extractal": 46, "extractor": [219, 316, 374, 380, 399, 423, 509, 587, 588, 594, 595, 597, 987, 1039], "extran": 385, "extrapol": [42, 175, 198, 220, 249, 280, 889, 998, 1008, 1014, 1052, 1054], "extratre": [147, 157, 372, 1042], "extratreeclassifi": [1, 563, 572, 921, 999, 1043, 1048, 1049, 1050, 1052, 1053, 1054, 1056], "extratreeregressor": [1, 564, 569, 572, 920, 999, 1004, 1048, 1049, 1050, 1052, 1053, 1054, 1056], "extratreesclassifi": [1, 147, 157, 422, 424, 564, 570, 572, 920, 921, 999, 1042, 1043, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "extratreesregressor": [1, 255, 422, 563, 571, 572, 920, 921, 999, 1042, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "extrem": [1, 151, 219, 221, 255, 256, 318, 325, 340, 360, 385, 388, 414, 415, 420, 563, 564, 570, 571, 572, 638, 639, 685, 730, 758, 920, 921, 922, 924, 998, 1000], "extrema": 992, "exxon": 50, "ey": [112, 113, 264, 268, 348, 380, 540, 547, 556], "eyast": 1053, "ezebunandu": 1051, "ezeiza": 770, "ezri": 1052, "f": [0, 1, 42, 43, 45, 49, 50, 51, 53, 54, 57, 62, 65, 67, 71, 77, 81, 82, 83, 86, 87, 89, 92, 98, 101, 104, 108, 117, 127, 138, 141, 144, 145, 146, 148, 149, 151, 154, 159, 160, 165, 167, 169, 172, 173, 175, 181, 182, 184, 188, 190, 191, 192, 193, 194, 196, 203, 205, 208, 210, 219, 220, 221, 223, 229, 233, 237, 240, 250, 252, 253, 256, 260, 267, 271, 275, 277, 278, 279, 280, 283, 284, 286, 287, 289, 291, 298, 301, 313, 314, 315, 320, 323, 324, 327, 329, 331, 333, 334, 335, 337, 338, 347, 352, 355, 359, 360, 361, 368, 380, 385, 386, 387, 389, 391, 397, 409, 413, 416, 420, 422, 423, 424, 425, 493, 514, 515, 537, 538, 543, 544, 572, 587, 588, 589, 593, 598, 601, 602, 604, 605, 606, 610, 611, 612, 613, 614, 615, 623, 633, 638, 641, 664, 702, 719, 729, 732, 735, 736, 762, 789, 790, 793, 794, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 834, 835, 837, 867, 868, 872, 881, 884, 885, 889, 890, 891, 917, 925, 930, 931, 982, 990, 993, 1002, 1005, 1006, 1008, 1012, 1019, 1041, 1047, 1048, 1049, 1051, 1053], "f0_c0": 891, "f0_c1": 891, "f0_c2": 891, "f0e442": 262, "f1": [1, 44, 61, 67, 103, 170, 275, 316, 337, 338, 341, 419, 719, 735, 736, 744, 789, 828, 998, 999, 1028, 1032, 1043, 1055], "f1_c0": 891, "f1_c1": 891, "f1_c2": 891, "f1_macro": [419, 998, 1043], "f1_micro": [998, 1043], "f1_sampl": 998, "f1_score": [1, 61, 284, 341, 380, 414, 744, 998, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1055, 1056], "f1_weight": [998, 1043], "f2": [389, 999], "f2001": 998, "f2006": 998, "f3": 999, "f4": 504, "f401": [79, 101, 120, 130, 192, 216, 239, 241], "f781bf": [74, 78, 96, 97], "f7bd01": 74, "f_": [422, 641, 736, 998], "f_0": 156, "f_1": [156, 284, 998], "f_beta": 998, "f_classif": [1, 169, 170, 351, 424, 598, 601, 602, 604, 605, 606, 610, 612, 615], "f_i": 413, "f_idx": 156, "f_j": [413, 1006], "f_m": 422, "f_n": 284, "f_p": 284, "f_regress": [1, 88, 168, 424, 598, 601, 602, 604, 605, 606, 610, 611, 615, 1042, 1046, 1053, 1056], "f_score": 284, "f_statist": [611, 612], "f_test": 168, "fa": [1, 123, 133, 134, 188, 391, 420, 479, 482, 538, 547, 806, 832, 1019], "fa_estim": 124, "fa_scor": 131, "fab": [1022, 1049, 1050], "fabia": [412, 725], "fabian": [0, 206, 224, 240, 310, 405, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1056], "fabiana": 1050, "fabio": 1045, "fabisch": [0, 405, 1041, 1042, 1043, 1045], "fabrizio": 1054, "face": [1, 41, 43, 53, 70, 85, 87, 123, 127, 129, 131, 133, 146, 188, 196, 245, 252, 378, 385, 389, 415, 420, 422, 424, 455, 478, 499, 500, 501, 527, 538, 539, 543, 545, 546, 547, 549, 564, 590, 663, 679, 703, 719, 820, 836, 853, 890, 915, 933, 1001, 1014, 1015, 1019, 1026, 1031, 1034, 1039, 1047], "face_compress": 1031, "face_id": 255, "facecolor": [50, 62, 69, 79, 94, 124, 130, 140, 166, 183, 239, 254, 277, 305, 320, 346, 349, 352, 353, 354], "faces_cent": 124, "facial": 380, "facil": 997, "facilit": [372, 399, 409, 1017, 1018, 1045, 1048], "fact": [42, 49, 56, 61, 113, 117, 138, 149, 151, 193, 250, 260, 295, 297, 359, 379, 392, 397, 399, 418, 420, 421, 422, 423, 655, 674, 676, 710, 992, 994, 1001, 1008, 1012, 1013, 1018, 1022, 1053], "facto": 1049, "factor": [1, 10, 41, 44, 47, 62, 66, 78, 80, 87, 89, 96, 123, 129, 133, 157, 188, 191, 233, 244, 246, 256, 271, 288, 289, 298, 299, 313, 314, 318, 320, 329, 331, 347, 372, 373, 385, 391, 394, 399, 412, 415, 422, 423, 425, 446, 448, 460, 475, 477, 478, 479, 480, 482, 484, 494, 510, 520, 521, 533, 538, 541, 542, 544, 546, 547, 550, 551, 552, 553, 555, 556, 567, 568, 569, 594, 597, 603, 619, 655, 656, 657, 660, 661, 662, 688, 689, 698, 725, 789, 806, 809, 810, 832, 856, 890, 904, 906, 914, 946, 947, 987, 994, 995, 1001, 1008, 1011, 1015, 1017, 1019, 1033, 1034, 1039, 1040, 1042, 1043, 1045, 1053, 1055], "factoranalysi": [1, 124, 131, 134, 420, 550, 1040, 1042, 1051, 1053], "factori": [1, 95, 271, 277, 423, 968, 998], "facundo": [1050, 1053], "fagan": 1048, "fail": [42, 88, 100, 125, 131, 183, 184, 198, 203, 223, 253, 277, 327, 373, 383, 385, 387, 388, 393, 400, 403, 418, 419, 446, 478, 480, 682, 683, 684, 867, 868, 929, 941, 987, 995, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "failur": [188, 189, 191, 214, 385, 393, 403, 663, 791, 836, 930, 931, 1019, 1021, 1022, 1052, 1053, 1057], "fair": [50, 63, 422, 696, 700, 839, 999, 1022], "fairer": 368, "fairli": [114, 150, 241, 293, 314, 393, 415, 565, 566, 705, 999, 1030], "faith": [56, 181, 353], "fake": 423, "falak": 1048, "fall": [24, 29, 42, 51, 151, 154, 182, 276, 277, 385, 387, 415, 423, 440, 452, 453, 514, 515, 733, 734, 800, 887, 899, 997, 998, 1008, 1023, 1031, 1048], "fallback": [400, 403, 838, 839, 998], "fals": [1, 42, 43, 45, 46, 48, 49, 52, 53, 57, 58, 60, 62, 63, 67, 68, 69, 73, 76, 78, 80, 81, 88, 89, 98, 101, 103, 104, 105, 111, 113, 122, 128, 132, 133, 138, 144, 145, 148, 151, 152, 154, 162, 164, 175, 180, 181, 182, 183, 191, 192, 193, 194, 198, 199, 203, 205, 219, 220, 224, 225, 227, 235, 237, 239, 242, 253, 254, 256, 260, 262, 271, 274, 275, 277, 280, 281, 284, 285, 286, 287, 288, 289, 290, 292, 298, 302, 308, 311, 314, 315, 318, 319, 324, 325, 327, 329, 330, 331, 332, 334, 335, 339, 348, 350, 352, 355, 356, 359, 360, 379, 385, 386, 387, 390, 399, 406, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 428, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 519, 521, 529, 530, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 641, 642, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 700, 701, 703, 704, 705, 706, 707, 708, 709, 714, 715, 717, 718, 719, 720, 721, 724, 725, 732, 733, 734, 735, 736, 737, 744, 748, 749, 756, 757, 760, 762, 767, 769, 773, 775, 780, 784, 788, 789, 790, 791, 793, 795, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 928, 929, 930, 931, 941, 948, 959, 960, 963, 964, 968, 969, 970, 972, 979, 984, 985, 987, 988, 994, 998, 1001, 1008, 1012, 1013, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "false_discovery_r": 601, "famili": [1, 44, 271, 372, 374, 399, 415, 418, 420, 423, 424, 598, 601, 602, 604, 605, 606, 612, 867, 868, 886, 898, 994, 1008, 1012, 1028, 1030, 1043, 1053], "familiar": [385, 421, 1047], "famou": [380, 382, 422, 1013], "famous": 1000, "fan": [0, 373, 400, 404, 1013, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "fanci": 423, "fancybox": 354, "fanelli": [1054, 1055], "fang": [664, 1046, 1047], "fanni": 1049, "fantasi": 1003, "fantast": 1022, "faouzi": [1049, 1050], "faq": [0, 393, 419, 698, 995, 1008], "far": [61, 94, 114, 148, 176, 182, 191, 219, 237, 348, 352, 359, 361, 385, 394, 425, 726, 890, 973, 1003, 1004, 1013, 1022, 1030], "farach": 990, "farahsae": 1047, "farawai": 1001, "fare": [104, 193, 260, 331, 332, 1043, 1044], "fargo": 50, "farhan": 1055, "farlei": [0, 405, 1039], "farouk": [1047, 1048], "farther": 731, "farthest": 415, "fashion": [1, 45, 143, 149, 227, 286, 373, 399, 412, 413, 415, 420, 422, 559, 563, 564, 565, 566, 570, 571, 572, 608, 633, 836, 859, 874, 877, 883, 894, 918, 919, 920, 921, 969, 988, 994, 998, 1008, 1048], "fast": [1, 51, 63, 96, 196, 203, 208, 234, 235, 251, 252, 319, 361, 372, 380, 385, 394, 415, 417, 419, 420, 422, 423, 427, 452, 453, 475, 480, 514, 538, 539, 541, 544, 546, 550, 553, 570, 571, 572, 594, 595, 597, 638, 639, 646, 664, 665, 678, 680, 693, 705, 806, 820, 831, 832, 842, 843, 850, 851, 855, 866, 947, 967, 990, 994, 997, 1000, 1001, 1003, 1004, 1014, 1017, 1022, 1032, 1039, 1040, 1045, 1046, 1049, 1050], "fast_dict": 1049, "fast_dot": 1046, "fast_logdet": [1, 394], "fast_svd": 1039, "faster": [36, 45, 56, 73, 98, 106, 124, 143, 144, 148, 149, 151, 154, 173, 192, 196, 205, 219, 221, 234, 235, 237, 252, 256, 271, 298, 300, 315, 328, 330, 331, 335, 359, 360, 361, 372, 379, 385, 393, 394, 399, 409, 415, 420, 424, 425, 427, 449, 453, 455, 457, 458, 459, 468, 514, 537, 538, 539, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 559, 565, 566, 567, 568, 649, 652, 653, 658, 659, 664, 665, 666, 667, 668, 669, 678, 680, 690, 693, 697, 701, 732, 762, 784, 785, 786, 850, 851, 855, 867, 868, 885, 887, 889, 899, 903, 947, 967, 987, 991, 994, 999, 1001, 1002, 1005, 1010, 1012, 1013, 1014, 1017, 1028, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "fastest": [91, 275, 361, 453, 676, 678, 680, 693, 946, 947, 997], "fastest_top_recall_high_precision_index": 275, "fastfm": 1017, "fastica": [1, 123, 188, 218, 420, 538, 541, 547, 1019, 1031, 1039, 1041, 1047, 1053, 1054], "fastkmean": 455, "fastmcd": [417, 475, 480], "fastnc": 866, "fat": [527, 530], "fatima": [1053, 1056], "fato": 1052, "fauchereau": 1052, "fault": [393, 1047, 1049, 1051], "faulti": [222, 1039], "faust": 1057, "favor": [43, 114, 144, 262, 268, 397, 417, 422, 679, 681, 736, 814, 816, 869, 987, 1006, 1041, 1043, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "favorit": [385, 397, 1022], "favour": [798, 995, 997, 1048], "fawcett": [794, 795, 998], "fazlul": 1041, "fbeta_scor": [1, 735, 748, 789, 998, 1041, 1042, 1043, 1044, 1049, 1055], "fc": [47, 303, 380], "fc2009": 998, "fcd116": 122, "fcharra": 1054, "fcluster": 194, "fcostin": 1039, "fd": 46, "fdr": 598, "fear": 1032, "feasibl": [385, 879, 880, 890], "feast": 416, "feat": [46, 48, 389, 423], "feat0": [248, 328], "feat1": [248, 328, 423], "feat2": [248, 328, 423], "feat3": [248, 328, 423], "feat_idx": 633, "featur": [1, 7, 15, 16, 17, 22, 24, 31, 41, 43, 44, 45, 46, 48, 49, 53, 56, 57, 61, 62, 63, 65, 66, 67, 68, 70, 76, 79, 81, 84, 92, 94, 97, 102, 103, 104, 105, 106, 112, 113, 116, 117, 119, 120, 121, 122, 124, 126, 128, 130, 131, 132, 134, 137, 139, 142, 144, 147, 151, 153, 158, 159, 160, 162, 164, 168, 170, 175, 176, 177, 180, 181, 183, 186, 187, 189, 190, 191, 192, 197, 199, 201, 202, 203, 205, 206, 208, 209, 215, 218, 219, 220, 221, 223, 224, 227, 228, 234, 235, 236, 240, 245, 248, 250, 254, 255, 256, 259, 260, 269, 271, 272, 274, 275, 276, 277, 280, 282, 283, 284, 285, 286, 287, 290, 291, 292, 297, 301, 302, 303, 306, 307, 309, 312, 313, 315, 317, 318, 321, 325, 326, 328, 331, 332, 333, 334, 335, 340, 341, 343, 344, 345, 348, 352, 355, 358, 361, 364, 366, 367, 368, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 392, 393, 394, 397, 398, 399, 400, 402, 403, 409, 413, 415, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 431, 436, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 585, 586, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 624, 625, 626, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 693, 694, 695, 696, 697, 698, 703, 707, 708, 709, 719, 727, 728, 729, 730, 747, 748, 751, 752, 754, 764, 765, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 787, 791, 794, 796, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 931, 944, 963, 973, 974, 975, 979, 987, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "feature_0": 923, "feature_1": [637, 923], "feature_2": 637, "feature_all_": 847, "feature_count_": [845, 847, 849], "feature_extract": [1, 46, 53, 56, 80, 81, 84, 85, 88, 100, 103, 127, 188, 278, 341, 358, 359, 360, 361, 374, 380, 415, 416, 423, 470, 550, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 883, 996, 1031, 1032, 1039, 1040, 1041, 1042, 1045, 1046], "feature_import": 152, "feature_importances_": [145, 146, 152, 173, 193, 194, 399, 422, 424, 559, 560, 563, 564, 565, 566, 570, 571, 572, 599, 600, 603, 918, 919, 920, 921, 1041, 1044, 1048], "feature_index": 423, "feature_indices_": 1047, "feature_log_prob_": [845, 846, 847, 849], "feature_map": [251, 318], "feature_map__n_compon": 251, "feature_map_fouri": 251, "feature_map_nystroem": [251, 645], "feature_nam": [53, 56, 120, 134, 145, 152, 156, 173, 191, 193, 228, 257, 291, 301, 318, 327, 328, 329, 334, 345, 359, 364, 378, 380, 390, 416, 496, 497, 498, 502, 506, 507, 508, 510, 511, 516, 588, 637, 638, 639, 891, 922, 923, 924, 1006, 1014, 1055], "feature_name_combin": [883, 1055], "feature_names_": 587, "feature_names_in": 1053, "feature_names_in_": [260, 325, 330, 399, 436, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 633, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 1052, 1053, 1054, 1055, 1057], "feature_names_out": [431, 436, 448, 449, 451, 453, 455, 470, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 572, 573, 574, 575, 576, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 1053, 1056], "feature_rang": [316, 880, 896, 1008, 1041, 1051], "feature_select": [1, 88, 104, 105, 107, 167, 168, 169, 170, 171, 172, 173, 188, 260, 329, 331, 351, 368, 399, 406, 416, 424, 587, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 987, 1019, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "feature_selector": 173, "feature_to_plot": 213, "feature_union": 1055, "featureagglomer": [1, 85, 88, 446, 447, 1015, 1031, 1042, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "featureforg": 1022, "featurehash": [1, 56, 103, 188, 358, 359, 360, 374, 380, 423, 494, 587, 594, 595, 596, 597, 883, 1019, 1040, 1045, 1046, 1047, 1053, 1054], "featureheash": 361, "features_": [635, 988], "features__pca__n_compon": 107, "features__univ_select__k": 107, "features_idx": 318, "features_info": 192, "features_nam": [190, 1046], "features_samples_ratio": 68, "featureselector": 607, "featuresshould": 1025, "featuretool": 1017, "featureunion": [1, 6, 42, 107, 377, 399, 406, 470, 635, 872, 988, 1018, 1022, 1034, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057], "featurewis": [1, 886], "feb": [72, 446, 460], "februari": [0, 417, 479, 998, 1040, 1044, 1056], "fed": [46, 159, 368, 380, 423, 987, 1003, 1008, 1050], "feda": [1047, 1048], "feder": 1017, "federico": [1041, 1042, 1047, 1048, 1053], "federicopisanu": 1049, "federicov": 46, "feed": [46, 117, 220, 253, 361, 380, 383, 390, 397, 415, 423, 748, 883, 999], "feedback": [274, 384, 385, 386, 400, 1017, 1021, 1047], "feedforward": [867, 868], "feedstock": 389, "feel": [63, 187, 318, 384, 385, 393, 415, 452, 1014], "feel_temp": [42, 192], "feghali": 1056, "fei": [569, 1004], "feld": [1043, 1055], "feldbauer": [1047, 1048, 1049, 1050, 1053], "feldman": [1041, 1046, 1047, 1048, 1049], "felip": [1052, 1053, 1054, 1055], "felix": [1041, 1046, 1047, 1049, 1051, 1052, 1053], "femal": [104, 191, 332, 390, 883, 884, 1008], "fenc": 390, "feng": [1049, 1051, 1052, 1053], "fenil": 1052, "fenx": 1047, "ferdman": 1056, "ferenc": 1022, "fernand": [1047, 1053, 1054], "fernandez": 1048, "fernando": [1044, 1051], "fern\u00e1ndez": 1053, "ferrando": 1049, "ferrari": 1047, "ferreira": [1047, 1052, 1053], "ferri": [424, 998], "ferria": 1046, "ferrin": 1053, "ferriss": 1046, "ferr\u00e9": 1053, "ferr\u00edn": 1050, "fetal": 256, "fetch": [1, 50, 54, 159, 191, 237, 271, 291, 378, 379, 380, 385, 389, 390, 393, 420, 502, 561, 562, 563, 564, 569, 570, 571, 572, 594, 595, 597, 1047, 1055], "fetch_": 1046, "fetch_20newsgroup": [1, 53, 56, 103, 278, 341, 359, 360, 361, 380, 495, 1032, 1044, 1049, 1057], "fetch_20newsgroups_vector": [1, 45, 234, 250, 380, 1039, 1049, 1051, 1056, 1057], "fetch_california_h": [1, 144, 149, 186, 187, 318, 329, 380, 398, 416, 1048, 1050, 1057], "fetch_covtyp": [1, 196, 256, 329, 380, 1048, 1051, 1053, 1057], "fetch_data": 1032, "fetch_kddcup99": [1, 256, 380, 1046, 1047, 1048, 1051, 1052, 1057], "fetch_lfw_pair": [1, 380, 1044, 1054, 1057], "fetch_lfw_peopl": [1, 44, 380, 1028, 1054, 1057], "fetch_mldata": 1047, "fetch_olivetti_fac": [1, 84, 124, 146, 255, 380, 1047, 1048, 1049, 1057], "fetch_openml": [1, 42, 43, 51, 104, 108, 148, 154, 159, 180, 191, 192, 193, 219, 227, 235, 237, 247, 256, 260, 271, 291, 295, 297, 298, 315, 324, 327, 331, 334, 379, 389, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "fetch_rcv1": [1, 380, 1044, 1048, 1057], "fetch_species_distribut": [1, 49, 311, 1048, 1057], "fetcher": [378, 1044, 1046, 1055], "feth": 1039, "feurer": [1042, 1047], "fevott": [420, 544, 546, 553], "few": [0, 45, 53, 56, 73, 80, 86, 128, 148, 154, 178, 181, 182, 208, 217, 219, 221, 237, 252, 253, 262, 279, 280, 284, 315, 318, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 355, 361, 372, 380, 381, 382, 385, 387, 398, 400, 406, 409, 412, 413, 415, 419, 420, 422, 424, 425, 443, 455, 567, 568, 661, 698, 701, 903, 947, 994, 995, 997, 998, 1001, 1002, 1011, 1013, 1014, 1022, 1023, 1030, 1031, 1032, 1045, 1055], "fewer": [42, 52, 62, 89, 138, 147, 149, 219, 372, 386, 415, 424, 425, 454, 467, 547, 559, 600, 702, 840, 951, 994, 999, 1001, 1044, 1045, 1046], "fewest": [276, 633], "ff": 393, "ff0000": [66, 306, 313], "ff3333": 122, "ff7216": 122, "ff7f00": [78, 96, 246], "ff9c34": [93, 98], "ffaaaa": 306, "ffc107": 322, "fft": 646, "fhaselbeck": 1051, "fhoang7": 1048, "fhr": 256, "fi": 881, "fibins": [1047, 1048], "fidel": 52, "fidor": 1055, "fiedler": 1045, "fiegel": [1051, 1052, 1054], "field": [173, 237, 382, 412, 415, 416, 423, 504, 507, 623, 994, 996, 1005, 1013, 1017, 1021, 1032, 1040], "fifth": [252, 991, 1023], "fig": [42, 43, 45, 46, 47, 48, 51, 53, 61, 63, 65, 69, 76, 77, 79, 87, 89, 91, 94, 98, 100, 106, 110, 112, 117, 120, 124, 129, 130, 134, 138, 144, 145, 148, 149, 151, 152, 154, 156, 157, 159, 161, 178, 184, 186, 192, 194, 196, 199, 207, 210, 213, 214, 216, 217, 219, 220, 223, 227, 232, 234, 237, 239, 240, 241, 242, 243, 244, 247, 249, 256, 257, 267, 271, 272, 273, 274, 277, 278, 279, 280, 283, 286, 287, 288, 291, 297, 298, 300, 302, 303, 311, 314, 315, 318, 319, 320, 322, 323, 324, 327, 331, 332, 345, 352, 354, 355, 356, 357, 359, 360, 361, 363, 392, 1028, 1031], "fig1": 101, "fig2": 101, "fig_num": 216, "figaspect": 322, "fight": [73, 223, 1022], "fighter": 103, "fignum": 353, "figsiz": [42, 43, 44, 48, 50, 51, 52, 53, 61, 62, 63, 65, 66, 67, 69, 73, 74, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 96, 98, 99, 100, 106, 108, 112, 114, 116, 117, 119, 120, 121, 122, 124, 127, 128, 129, 130, 133, 134, 138, 140, 141, 148, 149, 150, 151, 152, 154, 157, 159, 160, 168, 177, 179, 183, 184, 186, 187, 191, 192, 194, 196, 198, 199, 202, 203, 209, 213, 216, 217, 218, 219, 220, 221, 223, 225, 227, 230, 233, 235, 237, 239, 240, 241, 243, 244, 246, 247, 249, 251, 254, 255, 256, 257, 262, 264, 265, 268, 271, 272, 273, 274, 279, 280, 281, 284, 286, 287, 291, 292, 297, 298, 300, 301, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 331, 332, 337, 339, 346, 348, 352, 353, 354, 355, 356, 357, 359, 360, 361, 924, 1028], "figur": [44, 45, 46, 48, 50, 52, 60, 61, 62, 63, 66, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 99, 101, 110, 114, 116, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 150, 151, 152, 153, 154, 157, 158, 162, 164, 166, 168, 169, 172, 176, 177, 178, 179, 182, 183, 187, 191, 192, 193, 194, 198, 203, 204, 209, 212, 213, 216, 218, 220, 221, 225, 230, 234, 235, 236, 241, 242, 243, 246, 250, 251, 252, 254, 255, 257, 262, 264, 265, 268, 270, 276, 281, 282, 292, 303, 307, 308, 311, 313, 316, 318, 320, 321, 325, 327, 329, 337, 338, 339, 346, 348, 353, 364, 365, 366, 385, 415, 421, 422, 423, 425, 444, 637, 638, 703, 704, 706, 707, 708, 812, 829, 924, 987, 991, 994, 997, 998, 1001, 1002, 1005, 1006, 1012, 1013, 1014, 1027, 1028, 1030, 1031, 1052], "figure_": [67, 192, 257, 327, 329, 392, 444, 637, 638, 703, 704, 706, 707, 708, 812, 829], "figure_titl": 148, "filali": 1047, "file": [1, 46, 50, 67, 82, 359, 360, 372, 373, 374, 379, 380, 382, 383, 385, 389, 390, 391, 393, 397, 409, 416, 420, 493, 499, 500, 502, 509, 514, 515, 540, 585, 586, 594, 595, 597, 922, 1001, 1014, 1019, 1021, 1024, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055], "file_1": 509, "file_2": 509, "file_42": 509, "file_43": 509, "file_44": 509, "file_id": 379, "filenam": [1, 46, 54, 341, 380, 391, 409, 494, 506, 509, 510, 513, 594, 595, 597, 1032, 1039, 1044, 1047, 1048], "filesystem": [393, 403, 1052], "filho": 413, "filip": [1056, 1057], "filipj8": [1046, 1047], "fill": [69, 147, 164, 193, 272, 303, 364, 399, 416, 420, 521, 533, 544, 546, 553, 593, 636, 922, 924, 988, 1001, 1014], "fill_between": [51, 151, 154, 164, 175, 180, 182, 184, 198, 199, 237, 277, 279, 280, 281, 287, 812, 829], "fill_between_": [812, 829], "fill_between_kw": [812, 829], "fill_betweenx": 94, "fill_diagon": [194, 242], "fill_legend": 237, "fill_valu": [187, 248, 258, 328, 429, 432, 438, 439, 633, 636, 1008, 1047, 1055, 1056], "fillna": [237, 256], "filo": [1039, 1042], "filter": [1, 17, 46, 53, 80, 81, 106, 225, 237, 275, 277, 300, 359, 373, 380, 391, 394, 415, 423, 454, 494, 495, 509, 594, 597, 601, 602, 603, 604, 605, 606, 780, 845, 939, 963, 1000, 1001, 1029, 1032, 1049], "filter_param": 780, "filtered_cv_result": 275, "filterwarn": [78, 96, 234, 314, 315, 385, 1008], "final": [1, 42, 51, 62, 63, 69, 74, 76, 89, 103, 104, 112, 114, 117, 121, 129, 138, 139, 141, 143, 148, 149, 152, 159, 162, 170, 180, 187, 190, 192, 194, 196, 198, 203, 207, 208, 216, 219, 221, 236, 237, 240, 246, 260, 266, 271, 275, 283, 295, 298, 324, 325, 327, 328, 348, 352, 372, 374, 380, 383, 385, 386, 387, 389, 398, 399, 412, 413, 415, 416, 419, 422, 423, 424, 443, 448, 453, 454, 458, 465, 468, 470, 542, 561, 562, 573, 574, 576, 600, 633, 653, 659, 665, 685, 696, 700, 725, 806, 838, 839, 870, 871, 907, 910, 987, 988, 990, 994, 995, 998, 1001, 1004, 1005, 1008, 1011, 1022, 1030, 1044, 1047, 1048, 1049, 1050, 1052], "final_estim": [159, 327, 422, 573, 574], "final_estimator_": [573, 574], "final_lay": 422, "final_layer_gbr": 422, "final_layer_rfr": 422, "final_step": 76, "financ": [271, 999], "financi": [0, 50, 415, 422, 994], "find": [1, 42, 43, 44, 50, 54, 63, 74, 80, 81, 82, 83, 86, 87, 89, 91, 99, 106, 112, 113, 124, 126, 128, 129, 134, 149, 159, 175, 179, 181, 183, 192, 203, 207, 208, 221, 227, 239, 241, 243, 244, 249, 256, 267, 271, 276, 277, 278, 288, 301, 306, 307, 308, 323, 327, 333, 335, 350, 351, 352, 355, 359, 360, 363, 373, 382, 383, 385, 386, 387, 390, 391, 394, 397, 398, 399, 400, 412, 414, 415, 417, 418, 420, 422, 423, 424, 426, 447, 450, 451, 452, 456, 457, 458, 459, 468, 537, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 564, 571, 588, 595, 616, 617, 653, 656, 659, 660, 661, 662, 664, 665, 677, 694, 713, 735, 736, 744, 788, 789, 790, 793, 794, 800, 805, 806, 820, 828, 852, 853, 854, 856, 858, 860, 861, 862, 883, 884, 889, 902, 903, 904, 918, 919, 921, 927, 946, 947, 949, 987, 988, 990, 993, 994, 995, 997, 998, 999, 1002, 1004, 1008, 1012, 1013, 1014, 1016, 1018, 1021, 1022, 1023, 1025, 1027, 1028, 1030, 1031, 1032, 1039, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1057], "findal": 361, "fine": [42, 71, 147, 173, 223, 235, 268, 275, 352, 365, 366, 382, 389, 399, 423, 452, 947, 1001, 1004, 1013, 1018, 1049], "finer": [42, 51, 71, 300, 348, 373, 415, 419, 987, 1001, 1049], "finfo": [242, 477, 478, 484, 612, 656, 657, 660, 661, 662, 688, 689, 1054], "finish": [173, 265, 995], "finit": [63, 262, 268, 372, 380, 399, 474, 544, 557, 588, 612, 615, 616, 617, 664, 734, 784, 791, 803, 831, 908, 928, 929, 930, 931, 994, 997, 998, 1022, 1023, 1030, 1046, 1047, 1051, 1053, 1054], "finn": [1047, 1048], "fire": 1032, "firefox": 1008, "fireplac": 148, "fireplacequ": 148, "firm": [50, 415], "first": [0, 1, 42, 43, 45, 46, 49, 51, 54, 57, 61, 62, 65, 66, 67, 69, 73, 89, 90, 92, 95, 98, 99, 100, 101, 103, 104, 105, 108, 112, 116, 117, 119, 120, 121, 129, 132, 138, 139, 143, 145, 146, 147, 148, 149, 150, 152, 154, 156, 159, 160, 161, 162, 169, 170, 173, 175, 176, 177, 180, 181, 182, 183, 187, 190, 191, 192, 194, 196, 198, 200, 202, 208, 215, 216, 217, 220, 221, 227, 228, 233, 240, 243, 250, 251, 253, 254, 255, 257, 259, 260, 264, 268, 271, 272, 277, 279, 280, 284, 286, 288, 289, 295, 297, 298, 300, 303, 307, 308, 309, 313, 315, 318, 320, 323, 324, 325, 328, 329, 338, 341, 344, 345, 348, 350, 359, 360, 361, 363, 364, 367, 368, 373, 374, 379, 380, 382, 383, 384, 387, 389, 390, 391, 393, 397, 399, 409, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 427, 449, 452, 453, 456, 465, 466, 470, 478, 489, 493, 494, 496, 497, 498, 500, 503, 506, 508, 510, 514, 515, 516, 534, 539, 540, 544, 547, 559, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 588, 590, 594, 595, 596, 597, 599, 600, 607, 616, 617, 623, 627, 630, 637, 638, 639, 640, 652, 658, 665, 672, 674, 680, 682, 694, 701, 704, 705, 706, 708, 718, 722, 742, 748, 769, 770, 788, 800, 803, 804, 809, 810, 811, 812, 813, 818, 820, 827, 829, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 875, 883, 887, 888, 889, 891, 892, 899, 900, 912, 915, 918, 919, 920, 921, 923, 925, 926, 930, 931, 932, 949, 951, 965, 969, 972, 984, 987, 988, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1005, 1008, 1009, 1012, 1013, 1014, 1022, 1023, 1029, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "first_img_data": 513, "first_pca_compon": 323, "first_quart": 133, "first_week": 154, "firstli": [127, 372, 397, 663, 1032], "fisach": 1045, "fiscal": 0, "fischer": [1044, 1045], "fischler": 994, "fischoff": 1051, "fish": 330, "fisher": [382, 422, 510, 642, 1017], "fisher1958": 422, "fisher_transform": 642, "fit": [1, 21, 24, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 60, 61, 63, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 124, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 196, 197, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 242, 246, 247, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 295, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 355, 356, 357, 359, 360, 363, 364, 365, 366, 367, 372, 374, 377, 380, 382, 385, 388, 390, 391, 394, 397, 399, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 507, 515, 516, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 581, 583, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 700, 703, 704, 706, 707, 708, 716, 717, 729, 738, 741, 756, 794, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 939, 955, 958, 982, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "fit_": 1052, "fit_algorithm": [124, 537, 543, 1054, 1055], "fit_and_evalu": 360, "fit_and_plot_model": 323, "fit_and_scor": 227, "fit_data": 58, "fit_dur": 298, "fit_ecoc": 1043, "fit_grid_point": 1050, "fit_intercept": [45, 198, 199, 205, 224, 233, 246, 285, 325, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 910, 911, 917, 994, 1012, 1043, 1047, 1048, 1049, 1051, 1052, 1053], "fit_inverse_transform": [43, 129, 541, 1048], "fit_ovo": 1043, "fit_ovr": 1043, "fit_param": [253, 399, 439, 443, 448, 451, 471, 538, 540, 542, 543, 545, 548, 549, 555, 561, 562, 573, 574, 575, 576, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 636, 641, 644, 645, 646, 647, 648, 671, 677, 812, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 854, 859, 862, 866, 869, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 902, 903, 958, 1046, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058], "fit_path": [656, 660, 661, 662, 688, 689], "fit_predict": [56, 90, 91, 94, 246, 256, 305, 387, 399, 415, 433, 437, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 475, 569, 683, 798, 799, 803, 804, 856, 862, 870, 914, 1004, 1044, 1047, 1048, 1052, 1054, 1056], "fit_prior": [380, 845, 846, 847, 849], "fit_status_": [912, 913, 914, 915, 916], "fit_tim": [51, 92, 148, 208, 227, 279, 419, 833, 834], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 51, "fit_times_nb": 279, "fit_times_svm": 279, "fit_transform": [42, 43, 44, 48, 50, 53, 56, 78, 83, 86, 87, 92, 96, 120, 125, 128, 134, 157, 196, 210, 235, 237, 239, 240, 241, 242, 243, 244, 249, 250, 253, 254, 260, 298, 302, 314, 318, 319, 323, 324, 325, 327, 330, 332, 333, 334, 335, 348, 359, 360, 361, 368, 377, 380, 387, 390, 391, 399, 411, 416, 420, 423, 424, 431, 439, 448, 449, 451, 453, 455, 470, 472, 474, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 694, 695, 696, 697, 698, 702, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 908, 988, 990, 994, 999, 1001, 1008, 1009, 1010, 1023, 1028, 1031, 1032, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1053, 1055, 1056, 1057], "fitfailedwarn": [1, 806, 809, 810, 812, 820, 829, 832, 833, 834, 837], "fitted_transform": [387, 470], "fittedcolumntransform": [159, 192], "fittedgridsearchcv": 258, "fittedpipelin": [159, 248, 258, 278, 291, 324, 328], "fittedrandomforestclassifi": 334, "fittedrandomizedsearchcv": 104, "fittedstackingregressor": 159, "fitter": 1014, "fitting_weight": 406, "fitzgerald": 1047, "fitzk": 1022, "five": [146, 154, 263, 271, 338, 341, 380, 537, 545, 551, 995, 1001, 1013, 1022, 1039], "five_imag": 423, "fix": [1, 42, 46, 57, 61, 69, 80, 104, 133, 143, 144, 147, 154, 175, 176, 180, 183, 191, 203, 221, 237, 256, 268, 280, 313, 327, 328, 329, 330, 331, 332, 333, 334, 335, 360, 372, 373, 379, 381, 383, 384, 385, 387, 388, 393, 397, 399, 400, 406, 415, 416, 419, 420, 422, 423, 425, 458, 468, 478, 510, 518, 537, 543, 546, 548, 554, 555, 565, 566, 570, 571, 594, 597, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 636, 659, 669, 674, 676, 690, 693, 697, 701, 713, 791, 803, 820, 827, 852, 853, 855, 858, 860, 861, 877, 880, 894, 918, 919, 947, 965, 987, 994, 997, 998, 1001, 1008, 1018, 1032, 1037, 1038, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "fixed_classes_uniform_labelings_scor": 71, "fixed_vocabulary_": [594, 597], "fixedthresholdclassifi": [1, 271, 414, 828, 1057], "fixm": [389, 399], "fixtur": [373, 385], "fkaren27": 1053, "flach": [413, 998], "flach2008": 998, "flach2015": 998, "flag": [180, 253, 256, 334, 383, 385, 386, 388, 406, 411, 470, 616, 617, 633, 679, 681, 734, 791, 1013, 1045, 1049, 1050, 1052, 1053, 1054, 1055], "flair": 1000, "flak": 1054, "flake8": 585, "flanagan": [1048, 1049], "flat": [1, 77, 124, 192, 239, 240, 241, 275, 415, 422, 423, 446, 452, 454, 467, 515, 1005, 1031, 1039, 1040, 1055], "flat_grid": 251, "flatnonzero": [133, 207, 276, 285, 286, 787], "flatten": [53, 67, 242, 251, 275, 322, 345, 356, 391, 508, 575, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 859], "flatten_transform": [575, 1046], "flatter": [42, 61], "flavanoid": [47, 382], "flaviomorelli": 1049, "flavor": [385, 1001], "flavour": 422, "flaw": [399, 422], "flaxman": [1041, 1043], "fledg": [374, 423], "fleet": 42, "fleme": 1054, "flennerhag": 1047, "fletcher": [994, 1039, 1043], "flexibl": [42, 61, 148, 186, 219, 319, 345, 361, 387, 392, 397, 409, 419, 425, 680, 910, 911, 987, 992, 994, 998, 1002, 1008, 1017, 1018, 1022, 1048, 1052], "flier": 48, "flink": 103, "flip": [128, 588, 748, 947, 1000, 1043, 1052], "flip_i": 521, "flip_sign": 947, "float": [1, 45, 48, 50, 56, 75, 79, 80, 81, 82, 87, 94, 95, 99, 100, 101, 104, 127, 130, 166, 183, 191, 205, 209, 242, 271, 276, 277, 281, 285, 355, 361, 372, 379, 380, 385, 394, 399, 411, 414, 415, 416, 423, 424, 426, 427, 428, 432, 434, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 589, 590, 594, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 616, 617, 619, 620, 621, 622, 623, 625, 626, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 772, 775, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 820, 823, 826, 828, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 870, 873, 876, 877, 883, 884, 886, 888, 890, 891, 892, 893, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 927, 928, 930, 931, 934, 944, 945, 961, 973, 979, 984, 988, 998, 999, 1001, 1002, 1008, 1013, 1014, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "float16": 1048, "float32": [54, 150, 242, 316, 332, 373, 380, 385, 386, 387, 399, 409, 411, 563, 564, 565, 566, 569, 570, 571, 572, 599, 600, 646, 647, 664, 705, 769, 875, 918, 919, 920, 921, 928, 974, 975, 976, 1014, 1023, 1032, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "float64": [49, 51, 52, 82, 87, 104, 150, 152, 153, 191, 192, 271, 288, 331, 332, 373, 379, 385, 386, 387, 399, 423, 477, 478, 484, 502, 503, 514, 515, 548, 554, 587, 588, 595, 597, 647, 664, 679, 681, 705, 744, 875, 883, 884, 912, 913, 915, 916, 919, 921, 928, 930, 969, 972, 974, 975, 976, 1013, 1023, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "float_info": 56, "floch": 1056, "floor": 52, "floor_x": 52, "flore": 1052, "florian": [236, 1022, 1039, 1043, 1045, 1049, 1056], "florin": 1057, "flow": 387, "flowchart": [419, 1025], "flower": [120, 132, 286, 512, 513, 998, 1017], "floyd": [380, 694, 995], "floydsoft": 1043, "fluctuat": [50, 94, 154, 219, 284, 1047], "flush": 227, "fly": [150, 390, 393, 514, 515, 588, 1039, 1041, 1048], "flyingdutchman23": 1052, "flyingimmidev": 1039, "flynn": [1052, 1054], "fmax": 237, "fmi": [415, 737], "fmin_l_bfgs_b": [616, 617], "fmt": [95, 230], "fn": [335, 415, 718, 724, 735, 736, 737, 788, 789, 790, 793, 998, 999], "fn_c": 286, "fna": [173, 382], "fnlwgt": [334, 502], "fnr": [274, 704, 733], "fo": 423, "focu": [42, 47, 124, 138, 175, 268, 308, 372, 390, 413, 422, 559, 560, 565, 567, 568, 684, 995, 1001, 1008, 1017, 1018, 1021], "focus": [61, 110, 208, 295, 380, 397, 995, 1008, 1017], "fokow": 1056, "fold": [1, 42, 101, 107, 110, 144, 147, 150, 164, 172, 191, 208, 264, 271, 272, 273, 275, 277, 278, 280, 287, 291, 325, 340, 355, 368, 380, 385, 388, 389, 398, 399, 406, 414, 415, 424, 443, 478, 499, 542, 573, 574, 600, 608, 653, 657, 659, 661, 665, 667, 669, 671, 679, 681, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 841, 844, 891, 912, 915, 987, 994, 998, 1008, 1013, 1027, 1039, 1041, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1056], "folder": [105, 380, 383, 385, 389, 393, 403, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 1001, 1032], "folkman": 1046, "folloni": 1050, "follow": [0, 24, 42, 45, 56, 62, 63, 67, 71, 79, 88, 89, 91, 97, 101, 104, 105, 122, 124, 133, 138, 141, 151, 156, 168, 180, 186, 190, 191, 192, 193, 194, 198, 200, 203, 207, 208, 217, 219, 220, 234, 237, 247, 253, 254, 256, 268, 271, 277, 284, 286, 287, 291, 295, 318, 324, 325, 327, 328, 330, 331, 332, 335, 345, 355, 359, 360, 361, 363, 367, 368, 372, 373, 379, 380, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 430, 432, 434, 435, 436, 437, 438, 439, 447, 449, 451, 452, 453, 454, 455, 459, 467, 469, 470, 471, 474, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 521, 540, 544, 546, 547, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 637, 639, 640, 652, 658, 664, 665, 676, 677, 686, 698, 700, 705, 711, 715, 719, 724, 794, 825, 847, 852, 853, 854, 856, 858, 860, 861, 862, 869, 873, 874, 875, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 908, 910, 911, 915, 918, 919, 920, 921, 925, 926, 946, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1023, 1032, 1036, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "folwarczn\u00fd": 1056, "fonari": [1051, 1052], "fond": [0, 1022], "fondat": 1022, "font": [151, 208, 233, 251, 922, 924], "font_manag": [113, 304, 347], "font_prop": 113, "font_siz": 322, "fontdict": [53, 73], "fontnam": [922, 1052], "fontproperti": [113, 304, 347], "fontsiz": [43, 46, 48, 53, 69, 84, 94, 121, 127, 147, 168, 178, 179, 181, 184, 192, 199, 209, 218, 230, 240, 241, 265, 272, 281, 282, 283, 288, 289, 316, 322, 354, 924], "fontweight": [94, 214], "foo": [387, 587, 1002], "food": 382, "foot": 1016, "footer": [53, 103, 278, 359, 360, 380, 494, 495], "footnot": [1005, 1017], "footprint": [329, 332, 372, 374, 415, 420, 547, 561, 562, 563, 564, 569, 570, 571, 572, 1041, 1044, 1045, 1050, 1051, 1054], "fopenmp": [383, 386], "foral": [415, 425, 619], "forbid": [415, 422], "forbidden": [192, 422], "forc": [138, 175, 204, 223, 298, 322, 359, 379, 383, 389, 410, 419, 422, 456, 463, 470, 473, 502, 612, 615, 652, 653, 658, 659, 663, 666, 667, 668, 669, 678, 679, 680, 687, 690, 693, 760, 784, 787, 828, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 912, 913, 914, 915, 916, 928, 930, 931, 1008, 1034, 1044, 1047, 1048, 1049, 1051, 1052, 1053, 1055], "force_all_finit": [784, 928, 930, 931, 1050, 1053], "force_alpha": [845, 846, 847, 849, 1054], "force_finit": [612, 615, 734, 791, 998, 1053], "force_int_remainder_col": [470, 473], "ford": 50, "forecast": [41, 42, 151, 154, 174, 182, 188, 221, 237, 277, 413, 414, 425, 502, 568, 617, 621, 628, 629, 631, 707, 748, 751, 752, 754, 796, 827, 832, 833, 836, 998, 1017, 1019], "foreground": [74, 100], "foreign_work": 271, "foreman": 1046, "forese": 397, "forest": [1, 13, 49, 63, 66, 137, 143, 147, 149, 150, 152, 153, 154, 155, 157, 159, 162, 186, 188, 189, 196, 246, 274, 276, 278, 311, 329, 359, 366, 368, 378, 398, 399, 413, 424, 469, 470, 496, 497, 501, 502, 504, 521, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 636, 640, 806, 811, 836, 843, 870, 884, 914, 918, 919, 920, 987, 988, 999, 1006, 1018, 1019, 1020, 1034, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1056], "forest_import": 145, "forestclassifi": 1044, "forestcov": 256, "forg": [327, 328, 329, 330, 331, 332, 333, 334, 335, 373, 386, 388, 389, 393, 403], "forget": [192, 368, 373, 379, 389, 397, 420, 995], "forget_factor": [420, 544], "forgiv": 740, "forina": 382, "fork": [383, 385, 389, 393, 397], "forkserv": 397, "form": [1, 42, 47, 56, 67, 76, 94, 101, 124, 162, 182, 183, 188, 191, 252, 253, 268, 277, 337, 368, 379, 382, 385, 387, 389, 399, 400, 412, 415, 418, 419, 420, 421, 422, 423, 425, 427, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 705, 803, 804, 805, 806, 809, 810, 811, 814, 816, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 936, 955, 958, 987, 989, 991, 992, 994, 995, 998, 999, 1002, 1003, 1004, 1008, 1013, 1017, 1023, 1030, 1045, 1049, 1051], "formal": [399, 400, 415, 422, 850, 851, 995, 998, 999, 1002], "format": [1, 46, 49, 50, 51, 56, 58, 82, 88, 92, 95, 103, 112, 124, 133, 141, 147, 150, 152, 164, 168, 169, 196, 199, 205, 219, 237, 272, 282, 284, 285, 288, 292, 302, 303, 306, 307, 322, 327, 335, 354, 363, 367, 372, 378, 384, 385, 387, 388, 393, 394, 398, 399, 409, 416, 419, 422, 423, 439, 448, 449, 451, 453, 455, 456, 458, 465, 470, 474, 488, 489, 490, 491, 493, 495, 502, 503, 504, 514, 515, 516, 529, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 557, 563, 564, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 593, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 652, 658, 664, 665, 666, 668, 672, 673, 674, 682, 683, 684, 694, 695, 698, 703, 719, 726, 745, 746, 757, 774, 797, 798, 839, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 897, 902, 903, 908, 910, 922, 930, 931, 952, 960, 964, 969, 972, 974, 975, 976, 977, 978, 979, 984, 988, 998, 1001, 1006, 1008, 1009, 1012, 1014, 1017, 1023, 1024, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1054, 1056, 1057], "format_func": 303, "formatter_result": 92, "former": [50, 361, 414, 422, 423, 571, 808, 815, 824, 1000, 1039, 1045, 1048], "formerli": [223, 1040, 1043, 1045, 1046], "formul": [138, 175, 184, 223, 286, 385, 415, 417, 420, 423, 425, 428, 481, 555, 556, 563, 570, 656, 657, 660, 661, 662, 664, 665, 671, 676, 769, 775, 804, 912, 915, 918, 920, 994, 998, 999, 1002, 1008, 1020, 1034, 1056], "formula": [110, 111, 284, 412, 415, 417, 428, 479, 481, 522, 523, 524, 596, 649, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 682, 684, 710, 735, 736, 761, 770, 987, 992, 994, 998, 1003, 1004, 1008, 1012, 1044, 1046, 1048], "forrest": [1050, 1051], "forsal": [56, 361, 380], "forsyth": 1047, "forth": 393, "fortin": [1039, 1041, 1042, 1043], "fortran": [427, 547, 652, 653, 658, 659, 666, 667, 668, 669, 671, 687, 690, 691, 692, 930, 931, 1039, 1042, 1043, 1047], "fortun": [391, 422, 1032, 1052, 1053], "forward": [45, 138, 173, 253, 329, 372, 385, 406, 409, 424, 514, 515, 545, 549, 559, 565, 566, 608, 674, 691, 692, 870, 874, 994, 1018, 1051], "foster": [0, 1047], "fouchet": 1045, "found": [0, 44, 56, 57, 58, 134, 145, 172, 175, 179, 181, 183, 223, 254, 271, 275, 278, 279, 280, 323, 327, 330, 332, 333, 348, 361, 372, 374, 379, 382, 384, 385, 387, 397, 399, 400, 409, 412, 414, 415, 418, 419, 420, 422, 423, 425, 440, 447, 450, 451, 465, 478, 563, 564, 565, 566, 570, 571, 594, 596, 616, 617, 634, 642, 653, 657, 659, 661, 667, 669, 671, 677, 678, 680, 682, 684, 693, 694, 718, 725, 806, 809, 810, 820, 828, 847, 852, 853, 859, 881, 883, 884, 918, 919, 920, 921, 925, 927, 982, 986, 987, 990, 994, 995, 997, 999, 1000, 1001, 1002, 1008, 1012, 1013, 1014, 1018, 1023, 1028, 1032, 1039, 1042, 1043, 1046, 1047, 1049, 1053, 1056], "foundat": [0, 159, 271, 385, 413, 1001], "founder": 1022, "fouqu": 1039, "fouquet": [1055, 1056], "four": [63, 169, 183, 196, 201, 220, 264, 265, 271, 338, 345, 381, 385, 399, 563, 570, 725, 918, 920, 936, 994, 996, 997, 998, 1008, 1016], "fourier": [1, 22, 251, 644, 645, 646, 647, 648, 764, 765, 990], "fourier_approx_svm": 251, "fourier_scor": 251, "fourier_tim": 251, "fournier": 1048, "fourth": [147, 1023], "fowkl": [415, 737], "fowlk": [737, 1045], "fowlkes_mallows_scor": [1, 415, 998, 1045, 1047], "fox": [335, 423, 1055], "fp": [46, 271, 335, 415, 718, 724, 735, 736, 737, 788, 789, 790, 793, 998], "fp_c": 286, "fpgawesom": 1053, "fpr": [1, 49, 247, 256, 271, 274, 286, 287, 392, 598, 602, 704, 708, 712, 733, 795, 998, 1036, 1039, 1055], "fpr_a": 286, "fpr_b": 286, "fpr_grid": 286, "fpr_score": 271, "fr": [43, 45, 46, 47, 48, 60, 61, 65, 71, 76, 88, 91, 108, 114, 144, 154, 181, 198, 203, 204, 206, 210, 212, 213, 224, 240, 241, 246, 249, 256, 278, 280, 283, 290, 310, 323, 355, 359, 360, 361, 537, 543, 664, 670, 691, 692, 764, 765, 996, 998], "fraa\u00df": 1056, "frac": [62, 112, 113, 138, 277, 284, 286, 330, 412, 413, 415, 417, 420, 421, 422, 423, 425, 438, 469, 471, 488, 489, 490, 560, 562, 564, 566, 568, 571, 574, 576, 617, 621, 625, 628, 629, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 684, 685, 686, 702, 735, 736, 761, 775, 843, 844, 853, 861, 868, 911, 913, 916, 919, 921, 990, 992, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1030], "frac12": [422, 990], "fractal": [173, 382], "fraction": [1, 42, 61, 63, 151, 154, 219, 227, 237, 271, 355, 360, 413, 419, 422, 444, 445, 455, 456, 462, 463, 521, 533, 563, 564, 565, 566, 570, 571, 572, 596, 599, 608, 672, 673, 674, 677, 682, 683, 684, 709, 727, 728, 729, 730, 740, 800, 802, 808, 812, 834, 835, 849, 877, 912, 913, 914, 918, 919, 920, 921, 964, 994, 998, 1001, 1005, 1006, 1008, 1013, 1014, 1018, 1040, 1041, 1042, 1053], "fragil": 661, "fragment": [89, 127], "frame": [42, 51, 104, 154, 180, 191, 192, 219, 271, 324, 334, 380, 385, 397, 400, 495, 496, 497, 498, 502, 506, 507, 508, 510, 511, 516, 1017, 1028, 1051], "frameon": [45, 225], "framework": [277, 372, 387, 397, 399, 409, 415, 643, 694, 803, 994, 995, 1002, 1018, 1022, 1039, 1045], "fran": [1051, 1052, 1053], "franc": [324, 770], "francesco": [1051, 1054], "franci": [542, 664, 994, 1045], "francia": 1053, "francidona": 1049, "francisco": [423, 1010], "franck": [1054, 1056, 1057], "franco": 1049, "francoi": [1039, 1052], "francoisgoupil": 1053, "frank": [277, 841, 999, 1044, 1048, 1049], "frankhui": 1047, "franki": 1052, "franz": 1047, "franziska": 1050, "fran\u00e7oi": [0, 369, 1042], "fraud": [271, 335, 994, 1022], "fraudul": [271, 994, 1022], "fraudulent_accept": 271, "fraudulent_refus": 271, "fred": [103, 1039, 1052], "freder": 1049, "frederick": 1052, "fredrik": 1047, "free": [0, 43, 63, 89, 180, 181, 187, 218, 267, 318, 379, 384, 385, 386, 393, 397, 403, 423, 458, 615, 677, 866, 916, 987, 990, 994, 998, 1018, 1047], "freebsd": 388, "freedom": [42, 126, 180, 207, 208, 210, 277, 547, 662, 803, 994, 1042], "freeland": 1054, "freestand": 387, "freez": [389, 403, 409, 1018, 1022, 1047], "frei": [72, 446, 460, 1049], "freija": 1047, "freita": [1044, 1046, 1047], "frellwan": 1052, "fremtpl2": 237, "fremtpl2freq": 237, "fremtpl2sev": 237, "french": [0, 237, 324], "freq": [191, 203, 361], "frequenc": [56, 63, 175, 192, 203, 213, 219, 250, 328, 329, 359, 360, 361, 380, 397, 413, 419, 420, 422, 423, 424, 557, 563, 565, 566, 567, 570, 594, 595, 596, 597, 610, 664, 665, 670, 672, 674, 680, 681, 682, 691, 692, 839, 874, 883, 884, 910, 912, 915, 918, 920, 936, 994, 995, 1000, 1008, 1012, 1014, 1041, 1043, 1044, 1050, 1057], "frequent": [71, 138, 187, 280, 286, 287, 291, 360, 382, 385, 423, 557, 596, 636, 860, 883, 884, 887, 899, 988, 990, 998, 1012, 1018, 1057], "frequentist": 534, "fresh": [544, 1018, 1049], "fresh_restart": 544, "fresh_restarts_max_it": 544, "freund": [422, 559, 560], "fri": [42, 154, 192, 380], "frid": [1022, 1042], "friedman": [1, 141, 142, 153, 276, 417, 419, 422, 484, 522, 523, 524, 526, 564, 565, 566, 571, 599, 600, 840, 918, 919, 921, 992, 994, 999, 1005, 1014], "friedman2001": 422, "friedman2002": 422, "friedman_ms": [564, 565, 566, 571, 919, 921, 1014, 1055, 1056], "friend": [429, 1043], "friendli": [124, 373, 385, 393, 420, 903, 1010, 1011, 1017, 1018], "fring": [86, 415], "fritsch": [0, 47, 405, 1039, 1040, 1042], "fritzk": 1054, "fro": [420, 544, 546, 553, 699, 994], "fro_2": [667, 669], "frobeniu": [53, 127, 449, 453, 465, 475, 476, 477, 478, 479, 480, 481, 482, 537, 543, 544, 546, 551, 552, 553, 994, 1046], "frobenius_norm": 694, "from": [0, 1, 36, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 374, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 957, 959, 960, 961, 962, 963, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1024, 1026, 1027, 1028, 1029, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "from_dtyp": [42, 148, 271, 334, 422, 567, 568, 1056], "from_estim": [44, 47, 61, 63, 65, 66, 69, 90, 140, 143, 154, 155, 156, 160, 192, 202, 211, 228, 233, 252, 257, 259, 270, 271, 274, 279, 280, 284, 287, 293, 301, 306, 309, 323, 327, 328, 329, 330, 332, 333, 334, 335, 344, 345, 346, 347, 349, 350, 352, 364, 392, 413, 444, 637, 638, 639, 703, 704, 706, 707, 708, 724, 733, 788, 790, 793, 794, 795, 812, 829, 993, 998, 1005, 1028, 1036, 1052, 1053, 1054, 1055, 1056, 1057], "from_predict": [42, 51, 67, 108, 159, 191, 256, 273, 284, 286, 330, 337, 359, 392, 444, 637, 703, 704, 706, 707, 708, 724, 733, 788, 790, 793, 794, 795, 998, 1036, 1052, 1053, 1054, 1055, 1056, 1057], "frombuffer_empti": 1046, "fromkei": [278, 925], "fromnumer": 391, "front": [389, 1046], "frontal": 380, "frontend": 391, "frontier": [47, 233, 304, 347, 1004, 1030], "frozen": 387, "frozentransform": 387, "frsi": 1047, "fruit": [385, 999], "fr\u00e9minvil": [1056, 1057], "fs1995": 422, "ftfy": 423, "ftorres16": [1053, 1054], "ftp": [173, 382, 688, 689], "ftwo_scor": [748, 998], "fu": [664, 1043], "fuck": [1051, 1052], "fuent": [1040, 1041], "fugled": 1056, "fujikawa": 1046, "fukatani": 1046, "fulfil": [385, 415, 422, 806, 809, 810, 820, 870, 874, 994], "full": [0, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 372, 373, 374, 378, 380, 383, 385, 387, 390, 393, 397, 399, 400, 403, 411, 415, 417, 419, 420, 423, 429, 432, 438, 439, 447, 451, 453, 455, 465, 494, 495, 498, 502, 503, 506, 507, 508, 509, 510, 511, 513, 516, 541, 543, 547, 565, 566, 573, 574, 638, 654, 656, 660, 675, 686, 727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 796, 797, 803, 804, 817, 847, 936, 987, 994, 997, 1000, 1001, 1005, 1008, 1011, 1018, 1030, 1039, 1043, 1045, 1047, 1049, 1050, 1052, 1053, 1055, 1056, 1057], "full_data": 198, "full_lik": 99, "full_model": 300, "full_scor": 187, "fulli": [51, 78, 89, 145, 151, 372, 379, 380, 399, 415, 421, 422, 424, 449, 453, 563, 564, 570, 571, 918, 919, 920, 921, 922, 924, 987, 988, 994, 1003, 1011, 1017, 1052, 1053], "fullpap": 1011, "fultz": 1052, "fun": [427, 539, 1022], "fun_arg": [427, 539], "func": [49, 108, 143, 191, 199, 237, 311, 385, 416, 471, 705, 874, 1008, 1043, 1045, 1047, 1048, 1056, 1057], "func_min": [616, 617], "funcformatt": 303, "function": [1, 3, 26, 42, 43, 44, 45, 46, 51, 53, 57, 58, 63, 71, 80, 87, 88, 89, 91, 93, 100, 103, 104, 105, 108, 124, 127, 129, 133, 136, 143, 144, 148, 149, 150, 151, 152, 153, 154, 164, 169, 172, 173, 175, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 197, 198, 201, 203, 206, 212, 214, 215, 216, 217, 219, 220, 225, 226, 227, 232, 235, 236, 237, 239, 247, 249, 252, 253, 256, 257, 259, 260, 267, 269, 271, 275, 277, 278, 279, 280, 285, 286, 292, 295, 298, 313, 316, 318, 325, 327, 328, 330, 331, 333, 335, 340, 342, 345, 346, 347, 348, 349, 350, 352, 355, 357, 359, 360, 364, 368, 372, 373, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 397, 398, 399, 403, 406, 409, 411, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 426, 427, 430, 432, 434, 435, 437, 438, 439, 443, 446, 449, 450, 451, 453, 454, 456, 458, 460, 463, 464, 465, 466, 467, 470, 471, 474, 475, 477, 478, 480, 484, 494, 495, 497, 498, 501, 502, 503, 509, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 578, 581, 587, 588, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 610, 613, 614, 615, 616, 617, 621, 625, 626, 628, 629, 633, 634, 637, 638, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 708, 709, 710, 712, 717, 718, 722, 725, 727, 728, 729, 730, 734, 738, 740, 741, 744, 746, 747, 748, 756, 761, 763, 767, 768, 769, 771, 774, 777, 780, 784, 785, 786, 787, 788, 789, 791, 795, 798, 799, 800, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 882, 886, 887, 888, 889, 890, 891, 894, 896, 899, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 928, 937, 939, 940, 941, 946, 947, 957, 958, 964, 965, 968, 969, 972, 973, 982, 987, 988, 989, 991, 993, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1026, 1027, 1028, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "functiontransform": [1, 42, 103, 143, 219, 237, 341, 409, 470, 471, 1008, 1044, 1045, 1047, 1052, 1053, 1054, 1056], "functiontransformerfunctiontransform": 143, "functool": 237, "fundament": [71, 83, 113, 360, 397, 398, 418, 502, 544, 546, 553, 714, 994, 998], "funder": 0, "fung": 419, "funki": 1017, "funnel": [44, 499, 500, 1028], "funni": 103, "furlanello": 749, "furrer": 1056, "further": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 61, 76, 104, 110, 117, 124, 141, 147, 149, 172, 175, 180, 191, 193, 198, 203, 239, 244, 253, 271, 274, 277, 278, 284, 332, 348, 360, 367, 372, 385, 397, 399, 409, 414, 415, 417, 420, 422, 423, 425, 450, 458, 468, 521, 538, 541, 588, 620, 628, 634, 664, 665, 672, 673, 674, 682, 683, 684, 697, 701, 743, 780, 784, 787, 798, 799, 846, 852, 853, 860, 861, 888, 890, 910, 912, 915, 947, 997, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1012, 1013, 1030, 1032, 1048, 1052], "furthermor": [42, 51, 71, 144, 181, 192, 193, 256, 257, 259, 298, 359, 360, 372, 374, 392, 415, 420, 422, 423, 568, 596, 612, 625, 710, 742, 752, 761, 763, 801, 910, 994, 1006, 1042, 1046], "fuse": [386, 1045, 1055], "fusion": 397, "futur": [51, 180, 220, 259, 330, 333, 385, 387, 389, 399, 400, 409, 419, 423, 502, 540, 641, 968, 999, 1013, 1014, 1022, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "futurewarn": [385, 393, 1046, 1047, 1048, 1050, 1052, 1055, 1056], "fuxin": 648, "fw": 694, "fwe": 598, "f\u00e9lix": [1039, 1041, 1042, 1043, 1047], "g": [0, 24, 42, 45, 46, 48, 50, 60, 61, 62, 63, 67, 87, 89, 99, 103, 114, 117, 131, 138, 141, 142, 150, 151, 159, 175, 176, 177, 178, 180, 182, 183, 184, 187, 190, 191, 201, 204, 219, 220, 221, 223, 237, 240, 244, 252, 253, 262, 271, 277, 281, 282, 288, 297, 304, 318, 323, 335, 340, 354, 355, 361, 368, 372, 377, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 397, 399, 406, 409, 411, 413, 415, 417, 419, 420, 422, 423, 424, 425, 427, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 509, 534, 537, 539, 540, 543, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 599, 600, 603, 610, 616, 617, 623, 628, 629, 636, 639, 640, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 692, 696, 698, 703, 726, 734, 744, 746, 769, 784, 791, 794, 805, 807, 808, 809, 810, 812, 813, 815, 824, 828, 829, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 857, 859, 860, 861, 862, 866, 867, 868, 870, 873, 875, 876, 877, 880, 882, 883, 886, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 946, 947, 958, 987, 988, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1013, 1014, 1018, 1021, 1022, 1027, 1032, 1039, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "g0g0gadget": 1049, "g2015": 1005, "g_": 415, "g_i": [422, 655], "g_j": [654, 675, 686], "ga": 0, "gaaca": 183, "gaatattaggccga": 397, "gabor": 1053, "gabriel": [316, 1047, 1048, 1049, 1052, 1053], "gael": [0, 50, 67, 73, 74, 80, 86, 87, 100, 101, 114, 126, 208, 209, 240, 251, 264, 404, 1016, 1018, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "gaido": 1048, "gaidon": 1039, "gain": [1, 87, 154, 241, 284, 298, 300, 334, 335, 338, 359, 360, 367, 384, 391, 393, 422, 502, 538, 563, 567, 568, 570, 732, 762, 803, 804, 839, 918, 920, 999, 1003, 1011, 1014, 1042, 1046, 1049], "gain_matrix": 271, "galleri": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 380, 385, 387, 399, 403, 408, 1019, 1028, 1039, 1043, 1046], "galli": 1051, "gallopoulo": 420, "galvez": 1044, "gambl": 50, "gameiro": 1053, "gamma": [1, 42, 43, 44, 45, 47, 49, 66, 67, 129, 160, 166, 196, 233, 246, 251, 252, 275, 277, 279, 282, 288, 293, 329, 337, 338, 340, 342, 345, 347, 348, 351, 352, 354, 357, 418, 420, 422, 425, 458, 541, 568, 625, 626, 645, 646, 647, 649, 650, 651, 654, 686, 691, 697, 730, 753, 758, 765, 772, 781, 782, 783, 803, 817, 820, 905, 906, 907, 912, 913, 914, 915, 916, 987, 990, 993, 994, 996, 1011, 1013, 1023, 1027, 1028, 1030, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1053, 1054, 1055], "gamma_": [541, 1055], "gamma_0": [262, 268], "gamma_2d_rang": 348, "gamma_bound": 626, "gamma_k": 418, "gamma_rang": 348, "gammaregressor": [1, 237, 328, 331, 686, 994, 1050, 1053, 1054], "gandenberg": 1048, "ganesh": [1044, 1056], "ganevgv": 1049, "gangesh": 1051, "gangwar": 1046, "ganiev": [1044, 1045, 1046], "ganssl": 1046, "gap": [42, 51, 154, 359, 380, 419, 477, 478, 484, 594, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 827, 918, 919, 920, 921, 994, 995, 1047, 1051, 1053], "garagecar": [148, 159], "garagefinish": 148, "garagetyp": 159, "garageyrblt": 108, "garbag": 1051, "garcia": 1052, "garc\u00eda": [1048, 1049, 1054], "gardin": 379, "gardner": [1047, 1048], "garg": [1049, 1050], "gargsya": 1049, "gari": [380, 1046], "garret": 1043, "garreta": [1041, 1042], "garrett": 1043, "garri": 382, "garriga": [283, 419, 835], "gasmi": 1053, "gasquez": 1046, "gate": [382, 1052], "gather": [331, 333, 393, 400, 415, 1008, 1022], "gatsbi": 1011, "gaug": 191, "gaull": 770, "gaurav": [1047, 1048, 1049, 1050, 1051, 1053], "gauravahlawat": [1047, 1048], "gaussian": [1, 7, 18, 27, 42, 43, 45, 46, 47, 63, 65, 66, 69, 78, 80, 81, 89, 90, 91, 95, 99, 110, 111, 112, 113, 114, 121, 122, 125, 126, 127, 133, 136, 139, 140, 147, 151, 155, 157, 166, 187, 198, 201, 203, 207, 209, 229, 231, 232, 246, 250, 252, 253, 264, 265, 288, 303, 308, 311, 313, 320, 321, 322, 342, 345, 352, 353, 377, 381, 387, 390, 399, 415, 417, 420, 421, 427, 458, 475, 476, 477, 478, 479, 480, 481, 482, 502, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 536, 538, 550, 555, 556, 559, 569, 616, 617, 619, 620, 621, 623, 624, 625, 628, 629, 631, 633, 649, 650, 678, 683, 686, 709, 730, 747, 758, 782, 803, 804, 806, 820, 845, 846, 847, 848, 849, 850, 851, 855, 886, 890, 898, 902, 903, 904, 992, 994, 995, 996, 1004, 1019, 1020, 1022, 1031, 1033, 1034, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1051, 1053], "gaussian_filt": [52, 80, 81, 88, 1031], "gaussian_process": [1, 65, 66, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 399, 425, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 649, 999, 1019, 1042, 1045, 1046], "gaussianhmm": 1039, "gaussianmixtur": [1, 78, 91, 263, 264, 265, 266, 267, 268, 421, 803, 997, 1045, 1047, 1048, 1052, 1053, 1055, 1057], "gaussianmixturegaussianmixtur": 267, "gaussiannb": [1, 60, 61, 63, 66, 161, 279, 368, 413, 422, 443, 575, 845, 846, 847, 849, 871, 992, 999, 1000, 1043, 1044, 1045, 1047, 1052, 1055], "gaussiannois": 387, "gaussianprocessclassifi": [1, 65, 66, 176, 177, 178, 179, 183, 399, 425, 617, 625, 626, 628, 629, 999, 1045, 1047, 1049, 1053], "gaussianprocessregressor": [1, 175, 180, 181, 182, 183, 184, 425, 616, 619, 620, 621, 622, 623, 627, 630, 631, 649, 999, 1042, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "gaussianprocessregressorifittedgaussianprocessregressor": 180, "gaussianrandomproject": [1, 903, 1010, 1040, 1053, 1055, 1056], "gauthier": 1053, "gauz": 1047, "gave": [63, 413, 806, 809, 810, 820, 877], "gavin": [634, 988], "gaynor": 409, "ga\u00ebl": [66, 79, 85, 106, 119, 120, 130, 202, 216, 217, 320, 352, 353, 400, 1022], "gb": [162, 422, 559, 639], "gbc": 368, "gbdt": [143, 192, 271, 327, 328, 333, 390, 422], "gbdt_appli": 143, "gbdt_cst": 328, "gbdt_leaves_yield": 143, "gbdt_model": 143, "gbdt_no_cst": [156, 328], "gbdt_pipelin": 159, "gbdt_with_monotonic_cst": 156, "gbdt_with_monotonic_cst_df": 156, "gbm": [150, 422, 1042], "gbm_early_stop": 149, "gbm_full": 149, "gbp": 1022, "gbr": 151, "gbr_l": 151, "gbrt": [42, 51, 219, 422], "gbrt_mean_poisson": 51, "gbrt_median": 51, "gbrt_percentile_5": 51, "gbrt_percentile_95": 51, "gbrt_predict": 42, "gbt": 372, "gc": 48, "gca": [46, 78, 96, 117, 178, 224, 228, 230, 246, 259, 281, 306, 308, 319, 344, 346, 349, 350, 1005, 1036], "gcc": [383, 386, 391, 397], "gcf": [46, 1005], "gcv": [679, 681], "gcv_mode": [679, 1041], "gd": [50, 162], "gdb": [386, 388, 1021], "gdex1": 1049, "ge": [50, 989, 1000, 1051], "ge0": 1014, "gear": 1016, "geb": 56, "gebremichael": [1054, 1055], "gedeck": 1046, "geevarghes": 1054, "gefel": 998, "gegr": 423, "gei": 1041, "geiger": [1056, 1057], "geist": 382, "gelavizh": 1050, "gelder": 1050, "gemm": 1057, "gen": 787, "gen_batch": [1, 394, 951], "gen_cov": 112, "gen_even_slic": [1, 219, 394, 950], "gender": [258, 883, 1008], "gender_femal": 883, "gender_mal": 883, "gene": [183, 379, 412, 457, 519, 599, 600, 857, 890], "gener": [0, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 99, 103, 104, 105, 106, 107, 108, 111, 113, 116, 117, 118, 119, 120, 124, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 173, 176, 177, 178, 179, 180, 183, 186, 187, 190, 191, 192, 193, 194, 196, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 372, 373, 377, 378, 380, 382, 386, 387, 388, 389, 390, 391, 393, 394, 397, 398, 409, 412, 413, 415, 419, 421, 423, 424, 425, 427, 431, 436, 438, 443, 446, 449, 452, 453, 455, 458, 460, 464, 465, 466, 468, 470, 471, 473, 475, 478, 480, 488, 489, 490, 494, 497, 498, 501, 502, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 544, 546, 547, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 617, 620, 621, 624, 625, 626, 628, 629, 633, 634, 635, 636, 638, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 691, 692, 695, 696, 697, 698, 699, 700, 701, 707, 710, 712, 723, 727, 729, 730, 743, 749, 763, 784, 787, 791, 799, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 843, 844, 850, 851, 853, 855, 856, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 910, 911, 912, 913, 915, 916, 919, 921, 922, 923, 924, 941, 942, 946, 947, 950, 951, 963, 967, 969, 972, 987, 988, 990, 992, 993, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1010, 1011, 1013, 1014, 1017, 1019, 1020, 1021, 1022, 1023, 1026, 1030, 1031, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "generalis": [794, 998, 1018], "generaliz": [352, 422], "generate_data": [45, 68], "generate_dataset": 48, "generate_missing_valu": 154, "generate_onli": [941, 1049], "generate_synthetic_data": 52, "generickernelmixin": [183, 1049], "genericunivariateselect": [1, 424, 601, 602, 604, 605, 606, 608, 1053, 1055, 1056], "generos": 385, "genesi": [1053, 1055], "genet": 1017, "genoa": 382, "genom": [57, 519], "genotyp": 379, "gensim": 1017, "gentil": [382, 1051], "gentli": 420, "genvalen": [1051, 1052, 1053, 1054, 1055], "geodes": [239, 694, 995], "geoff": [841, 999], "geoffrei": [867, 868, 1002, 1050, 1051, 1052, 1053, 1055], "geograph": [42, 49, 311, 380, 504], "geometr": [126, 415, 694, 710, 737, 763, 995, 1047], "geometri": [73, 415, 995, 1001], "geomspac": 333, "georg": [44, 380, 415, 1045, 1051, 1052, 1053, 1054], "george_w_bush": 1028, "georgi": [1047, 1050], "georgiamaydai": 1054, "geospati": [311, 421], "geovan": [1052, 1053], "geq": [250, 413, 420, 422, 994, 998, 1008, 1012, 1013], "ger": 423, "gerhard": [44, 380], "gerhard_schroed": 1028, "german_credit": 271, "germer": [1054, 1055], "geroldcsend": 1052, "geron": [1047, 1052, 1053], "gerstein": 519, "gertrud": 1046, "gertz": 456, "gervai": [1041, 1042], "gesa": 1051, "gesdd": 947, "gesvd": 947, "get": [1, 2, 42, 43, 47, 50, 51, 54, 56, 71, 82, 86, 90, 125, 129, 151, 154, 161, 170, 173, 175, 180, 181, 186, 191, 192, 193, 194, 212, 221, 234, 237, 239, 253, 254, 275, 278, 279, 281, 285, 288, 295, 298, 303, 311, 319, 327, 334, 338, 341, 345, 348, 350, 353, 357, 359, 361, 363, 373, 378, 379, 380, 383, 385, 386, 387, 390, 391, 392, 393, 399, 403, 409, 411, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 429, 430, 431, 436, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 701, 705, 727, 728, 729, 730, 732, 738, 739, 748, 762, 769, 770, 775, 791, 794, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 938, 939, 940, 946, 947, 957, 987, 993, 994, 995, 997, 998, 1008, 1011, 1012, 1013, 1014, 1018, 1027, 1030, 1031, 1032, 1036, 1039, 1042, 1045, 1047, 1050, 1052, 1053, 1056], "get_adjacency_matrix": 54, "get_arrai": [850, 851], "get_bin_se": 454, "get_cmap": [61, 63, 353], "get_color": 45, "get_config": [1, 474, 787, 908, 965, 1054], "get_config_var": 383, "get_covari": [538, 540, 547], "get_data": [514, 515], "get_data_hom": [1, 46], "get_depth": [918, 919, 920, 921, 1048], "get_feature_nam": [330, 1047, 1048, 1050, 1051, 1052], "get_feature_names_out": [1, 53, 56, 191, 193, 330, 359, 360, 361, 380, 387, 399, 416, 423, 431, 436, 439, 448, 449, 451, 453, 455, 470, 473, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 572, 573, 574, 575, 576, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 1008, 1052, 1053, 1054, 1055, 1056, 1057], "get_figur": 138, "get_full_scor": 187, "get_height": [46, 149], "get_impute_it": 187, "get_impute_knn_scor": 187, "get_impute_mean": 187, "get_impute_zero_scor": 187, "get_indic": [56, 430, 457, 459], "get_initial_mean": 265, "get_legend_handles_label": [154, 252, 279, 284], "get_lin": 314, "get_metadata_rout": [253, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 954, 955, 956, 957, 958, 998, 1056], "get_metr": 705, "get_minibatch": 46, "get_n_cal": [850, 851], "get_n_leav": [918, 919, 920, 921, 1048], "get_n_split": [399, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827], "get_nam": 320, "get_output_feature_nam": 1053, "get_param": [278, 388, 399, 425, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 1049, 1050, 1051, 1053, 1054], "get_precis": [475, 476, 477, 478, 479, 480, 481, 482, 538, 540, 547], "get_redirect": 54, "get_routing_for_object": [1, 253, 955], "get_scor": [1, 271, 334, 399, 739, 1046, 1055], "get_scorer_nam": [1, 414, 738, 998, 1053, 1056], "get_scores_for_imput": 187, "get_shap": [56, 430, 457, 459], "get_stop_word": [594, 595, 597], "get_submatrix": [430, 457, 459], "get_subplotspec": 392, "get_support": [169, 173, 329, 587, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 1041], "get_tree_stat": [850, 851], "get_untrusted_typ": 409, "get_width": [46, 149], "get_x": [46, 149], "get_xaxi": [262, 308, 318], "get_xlim": [112, 214, 224, 318], "get_xticklabel": 288, "get_yaxi": [308, 318], "get_ybound": 87, "get_ylim": [214, 318, 319], "getattr": [42, 46, 271, 318, 387, 399, 1055], "getgaurav2": 1049, "getmoredataget": 1025, "gettempdir": 1001, "getter": [475, 476, 477, 478, 479, 480, 481, 482, 599, 600, 603], "geurt": [422, 561, 562, 563, 564, 571, 572, 920, 921], "gewili": [1054, 1055], "gh": 385, "ghahramani": 905, "gharibi": 1049, "ghg": 1045, "ghislain": 1051, "gholdman1": 1050, "ghorai": 1047, "ghosh": [0, 405, 415, 1039, 1040, 1056, 1057], "gia": 1050, "giancarlo": 1053, "gianr": 1054, "gibb": [866, 1003, 1017], "gideon": 1049, "giessel": 1045, "gif": 82, "gigant": [1047, 1049, 1054, 1055], "gijsber": 1053, "gil": [372, 373, 386, 1042, 1047, 1048, 1051, 1052, 1056], "gilad": 1022, "gilberto": 1047, "gilbertson": [1053, 1054], "gilch": 1046, "gile": [1042, 1043], "gill": [0, 141, 142, 405, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "gilliam": 1046, "gilmor": 1043, "gim": 1051, "gini": [63, 194, 219, 237, 258, 289, 329, 559, 560, 563, 564, 565, 566, 570, 571, 572, 794, 918, 919, 920, 921, 987, 1006, 1014, 1047, 1048, 1055, 1056], "gionanidi": 1053, "giorgio": [1044, 1045, 1046], "giorgiop": 1044, "giotto": 1017, "giovanni": [1045, 1047], "gist": [385, 393, 1021], "git": [383, 387, 389, 391, 393, 1021, 1035, 1039, 1055], "github": [0, 45, 46, 50, 62, 104, 105, 143, 145, 146, 152, 155, 156, 159, 162, 170, 180, 187, 191, 192, 193, 200, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 298, 316, 324, 328, 329, 331, 332, 334, 339, 367, 383, 384, 388, 389, 390, 391, 393, 397, 399, 400, 409, 411, 698, 1016, 1017, 1021, 1032, 1049], "githubusercont": 50, "gitter": [1046, 1047], "giudic": 1051, "giusepp": [1047, 1048], "give": [1, 42, 50, 51, 52, 60, 61, 73, 78, 83, 94, 96, 98, 103, 104, 108, 126, 150, 175, 180, 184, 186, 191, 192, 208, 210, 216, 219, 220, 221, 246, 268, 271, 274, 279, 286, 300, 304, 307, 316, 330, 331, 335, 341, 372, 374, 380, 382, 384, 385, 387, 391, 393, 397, 398, 399, 400, 409, 412, 413, 415, 416, 417, 420, 422, 423, 425, 427, 440, 452, 453, 455, 457, 465, 478, 502, 505, 509, 539, 544, 555, 556, 557, 558, 563, 564, 570, 571, 572, 599, 600, 603, 613, 614, 644, 653, 667, 671, 682, 726, 736, 742, 745, 800, 806, 809, 810, 820, 831, 832, 833, 835, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 887, 888, 890, 891, 899, 994, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1012, 1013, 1014, 1017, 1022, 1023, 1025, 1030, 1031, 1032, 1039, 1043, 1046, 1047, 1049, 1050, 1051, 1053, 1055], "given": [1, 7, 29, 45, 48, 49, 51, 63, 65, 71, 83, 92, 94, 110, 116, 125, 129, 144, 154, 155, 157, 159, 175, 182, 191, 192, 203, 219, 220, 223, 237, 240, 246, 250, 251, 253, 255, 256, 257, 271, 273, 277, 278, 279, 280, 286, 291, 301, 304, 305, 306, 320, 324, 330, 335, 359, 360, 361, 366, 372, 374, 380, 384, 385, 387, 389, 391, 393, 394, 397, 399, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 462, 464, 465, 466, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 487, 488, 489, 490, 493, 502, 507, 509, 511, 529, 539, 540, 542, 544, 545, 546, 549, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 599, 600, 607, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 637, 638, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 693, 694, 696, 697, 703, 704, 705, 706, 707, 708, 710, 711, 712, 718, 720, 723, 724, 726, 730, 732, 733, 740, 742, 743, 746, 758, 761, 762, 764, 765, 770, 780, 784, 787, 788, 790, 793, 794, 795, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 818, 820, 824, 828, 829, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 896, 897, 899, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 934, 935, 936, 954, 955, 957, 982, 986, 987, 990, 992, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "gkevinyen5418": 1047, "gkf": 419, "gkiasta": 1052, "gl": [173, 382], "glad": 385, "glanc": [295, 384], "glaser": [1047, 1048], "glass": 380, "glasso": [417, 484], "glaxosmithklin": 50, "gleb": [1052, 1054, 1055, 1056], "glemaitr": [1048, 1049, 1051], "glemaitre58": 221, "glen": 1052, "glenn": 1045, "glennfrutiz": 1053, "glibc": 393, "glm": [219, 237, 328, 654, 675, 686, 994, 1039, 1050], "glm_freq": 237, "glm_pure_premium": 237, "glm_sev": 237, "glmnet": [652, 653, 1039], "glob": 46, "global": [1, 2, 46, 48, 76, 91, 124, 219, 239, 240, 260, 286, 315, 328, 368, 372, 373, 391, 397, 399, 415, 425, 448, 458, 468, 474, 596, 632, 638, 694, 697, 698, 701, 713, 735, 736, 744, 789, 790, 793, 794, 824, 891, 906, 908, 968, 987, 995, 998, 1004, 1008, 1014, 1022, 1047, 1054], "global_dtyp": 373, "global_random_se": 373, "globular": [96, 415], "glorot": [867, 868], "glossari": [1, 368, 385, 387, 391, 426, 427, 443, 446, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 470, 473, 475, 478, 480, 494, 497, 498, 501, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 600, 608, 613, 614, 616, 617, 633, 638, 640, 645, 646, 647, 648, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 693, 694, 695, 696, 697, 698, 699, 700, 701, 707, 780, 784, 787, 799, 803, 804, 806, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 852, 853, 855, 856, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 872, 875, 887, 891, 899, 902, 903, 905, 906, 910, 911, 912, 915, 918, 919, 920, 921, 946, 947, 969, 972, 987, 988, 994, 1023, 1047], "glu": [173, 382], "glushchenkov": 1053, "gl\u00f2ria": [1052, 1054], "gm": 804, "gmail": [45, 49, 53, 60, 76, 82, 91, 99, 103, 104, 136, 138, 139, 140, 141, 142, 143, 150, 152, 153, 158, 159, 175, 178, 180, 182, 184, 199, 221, 236, 240, 242, 249, 262, 264, 265, 278, 281, 318, 323, 359, 360], "gmil": 380, "gmm": [78, 93, 188, 261, 263, 266, 267, 268, 510, 518, 804, 825, 997, 1019, 1039, 1040, 1043, 1044, 1045], "gmm_": 1040, "gmm_bic_scor": 267, "gmmgmm": 1025, "gmmhmm": [1039, 1040], "gnb": [60, 61, 63, 161, 422, 575, 1000], "gnb_isoton": 61, "gnb_sigmoid": 61, "gnu": 383, "go": [0, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 380, 385, 387, 389, 390, 394, 400, 403, 416, 420, 422, 424, 449, 567, 568, 726, 889, 950, 951, 1008, 1014, 1017, 1018, 1023, 1032, 1050], "goadrich": 998, "goal": [48, 54, 57, 63, 86, 91, 117, 154, 186, 192, 196, 219, 234, 237, 255, 256, 271, 274, 275, 359, 373, 374, 380, 387, 390, 391, 399, 400, 402, 406, 420, 424, 548, 554, 596, 599, 745, 998, 1001, 1003, 1004, 1012, 1013, 1014, 1022, 1023, 1026, 1030, 1032, 1047], "god": [56, 359, 360, 1032], "godbol": 789, "goe": [42, 71, 143, 191, 367, 385, 422, 477, 478, 484, 563, 564, 570, 571, 572, 918, 919, 920, 921, 1008, 1012], "goetz": [1046, 1047], "goh": 1056, "gohlk": 1044, "goix": [0, 1043, 1045, 1046, 1047, 1048], "gold": [68, 213, 220, 222, 225, 229, 233, 236, 263, 268, 284, 304, 347, 391], "goldbaum": 1057, "goldberg": [859, 1001], "goldfarb": 994, "goldman": 50, "goldstein": [192, 1005], "goldszmidt": 1010, "gollonet": [0, 405], "goltermann": 1051, "golub": [540, 848, 890], "golubin": 1046, "gome": [1052, 1053, 1057], "gomez": [1047, 1054, 1056], "gommer": [1042, 1045, 1046, 1054, 1055, 1057], "goncalo": [1046, 1047], "gone": [1039, 1040], "gonthier": 1050, "goo": [173, 382], "good": [42, 47, 57, 61, 63, 74, 78, 80, 83, 86, 87, 89, 92, 107, 113, 117, 133, 144, 147, 150, 151, 154, 176, 180, 186, 191, 203, 208, 219, 220, 225, 234, 244, 246, 250, 253, 256, 263, 265, 270, 271, 277, 283, 293, 316, 323, 324, 329, 335, 337, 342, 348, 359, 360, 368, 372, 373, 374, 384, 386, 387, 388, 389, 391, 393, 397, 399, 412, 413, 415, 417, 419, 420, 422, 423, 424, 425, 443, 445, 450, 540, 565, 567, 568, 596, 636, 646, 653, 654, 662, 664, 665, 667, 675, 686, 696, 700, 729, 737, 748, 770, 835, 904, 947, 987, 993, 994, 995, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1012, 1013, 1014, 1018, 1022, 1023, 1027, 1030, 1032, 1045], "goodby": 385, "goodman": [1039, 1044], "googl": [0, 54, 397, 415, 448, 1016, 1028, 1039], "gool": 998, "gorb": 1051, "gordon": [56, 265, 1045, 1049, 1051, 1053], "gorelli": [1047, 1048, 1052, 1054, 1057], "gorgolewski": [0, 405, 1039, 1042], "gorilla": 359, "gorinevski": 994, "gorodkin": 749, "gorro\u00f1o": [1050, 1052, 1053], "got": [253, 284, 368, 390, 557, 655, 671, 1052, 1054, 1056], "gotten": [994, 1008], "gou": 415, "gouillart": [52, 100, 1039], "goupil": [0, 369], "gov": [54, 382], "govern": [191, 368, 372, 385, 399, 1022], "govin": 1045, "go\u0144da": 1054, "gp": [178, 183, 425, 616, 617, 628, 1045], "gp_fix": 176, "gp_opt": 176, "gpapadok": [1049, 1053], "gpassino": 1043, "gpc": [1, 65, 121, 147, 157, 166, 174, 180, 181, 182, 188, 229, 231, 232, 252, 266, 313, 320, 321, 342, 353, 510, 616, 617, 619, 620, 625, 626, 628, 629, 709, 747, 1019, 1020, 1034, 1049], "gpc_rbf_anisotrop": 177, "gpc_rbf_isotrop": 177, "gperftool": 388, "gplearn": 1017, "gpr": [1, 174, 175, 176, 182, 184, 188, 502, 616, 617, 619, 620, 621, 622, 627, 628, 629, 630, 631, 1019, 1020, 1034, 1049], "gpr_model": 184, "gprof": 388, "gpu": [332, 335, 411, 1002, 1018, 1032, 1056], "gr": 903, "grab": 385, "gracefulli": [1042, 1043], "grad": [391, 1022], "gradd": 391, "grade": 998, "gradi": 1049, "gradient": [1, 13, 45, 51, 80, 100, 104, 137, 138, 139, 142, 143, 145, 146, 156, 159, 162, 180, 181, 188, 194, 197, 199, 207, 221, 242, 246, 251, 276, 278, 304, 314, 318, 322, 324, 331, 334, 347, 399, 414, 415, 425, 458, 468, 472, 473, 494, 496, 502, 507, 509, 526, 559, 560, 565, 566, 567, 568, 570, 571, 592, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 637, 638, 640, 641, 645, 654, 655, 664, 665, 674, 675, 678, 680, 682, 683, 684, 686, 693, 698, 700, 701, 747, 748, 754, 756, 796, 806, 809, 810, 811, 827, 833, 836, 866, 867, 868, 871, 883, 884, 914, 972, 995, 998, 1001, 1002, 1003, 1004, 1017, 1019, 1020, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1054, 1056], "gradient_boost": [143, 1041, 1042, 1048], "gradientboost": 1044, "gradientboostingclassifi": [1, 143, 150, 153, 320, 368, 397, 559, 567, 638, 639, 999, 1005, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "gradientboostingclassifier__learning_r": 320, "gradientboostingregressor": [1, 45, 149, 151, 152, 159, 162, 372, 390, 397, 560, 568, 638, 639, 994, 998, 999, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "gradientboostingregressorgradientboostingregressor": 162, "gradual": [223, 867, 868, 1012], "graduat": 382, "graham": [1044, 1045], "grai": [44, 52, 80, 81, 84, 85, 87, 124, 127, 153, 173, 217, 219, 237, 250, 254, 255, 284, 315, 382, 420, 499, 500, 508, 527, 1028, 1031, 1050], "grain": [42, 66, 71, 251, 268, 320, 391, 423, 452, 1018], "gram": [1, 188, 197, 387, 420, 423, 495, 530, 554, 594, 595, 596, 597, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 671, 687, 688, 689, 690, 691, 692, 773, 987, 994, 1008, 1013, 1019, 1032, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1052, 1053], "gram_test": 1013, "gram_train": 1013, "gramfort": [0, 60, 61, 65, 76, 81, 88, 101, 124, 126, 131, 204, 206, 207, 208, 210, 212, 213, 246, 249, 283, 290, 310, 400, 404, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "grammar": 385, "granada": 0, "grant": [0, 256, 271, 385], "grape": 416, "graph": [1, 54, 61, 73, 78, 80, 100, 101, 183, 239, 274, 298, 300, 340, 372, 385, 388, 399, 412, 417, 426, 447, 450, 451, 458, 459, 463, 468, 469, 477, 478, 484, 517, 591, 592, 694, 697, 698, 701, 788, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 865, 906, 952, 995, 998, 1001, 1003, 1011, 1014, 1017, 1022, 1028, 1031, 1039, 1046, 1047, 1049, 1052, 1054], "graph_laplacian": 1046, "graph_lasso": [484, 1047], "graph_model": 300, "graph_shortest_path": [394, 1052], "graphic": [7, 56, 113, 192, 341, 359, 360, 361, 380, 391, 415, 417, 420, 798, 799, 803, 840, 922, 998, 999, 1005, 1017, 1032], "graphical_lasso": [1, 394, 477, 478, 1047, 1055], "graphicallasso": [1, 114, 417, 475, 476, 478, 479, 480, 481, 482, 484, 1047, 1055], "graphicallassocv": [1, 50, 114, 406, 417, 477, 479, 480, 481, 482, 484, 1047, 1051, 1053, 1055, 1057], "graphicallassocvifittedgraphicallassocv": 50, "graphlasso": [477, 1044, 1047], "graphlassocv": [478, 1041, 1047], "graphviz": [922, 1014], "grasp": [291, 1013, 1018], "grassberg": [613, 614], "grate": 1022, "graviton": 393, "gray_r": [67, 119, 127, 178, 240, 316, 337, 338, 1029], "grayscal": 67, "greasemonkei": 393, "great": [89, 190, 191, 217, 368, 385, 397, 420, 770, 1018, 1022, 1039, 1046], "greater": [61, 122, 138, 140, 191, 236, 251, 256, 265, 271, 283, 297, 304, 305, 363, 372, 381, 390, 399, 413, 414, 415, 418, 422, 447, 451, 452, 455, 458, 469, 478, 542, 547, 563, 564, 565, 566, 567, 568, 570, 571, 572, 599, 600, 603, 616, 617, 634, 646, 648, 670, 672, 673, 677, 682, 683, 684, 698, 715, 718, 726, 741, 742, 745, 748, 794, 801, 803, 804, 840, 852, 853, 860, 861, 867, 868, 873, 888, 900, 904, 907, 910, 911, 918, 919, 920, 921, 947, 967, 987, 993, 994, 995, 998, 999, 1004, 1008, 1013, 1014, 1042, 1047, 1050, 1052, 1053, 1054, 1056], "greater_is_bett": [151, 335, 748, 998], "greatest": [89, 403, 415, 877, 1047], "greatli": [217, 251, 332, 385, 393, 458, 1001, 1014, 1045, 1053], "greedi": [173, 422, 424, 453, 455, 466, 565, 566, 608, 994, 1014], "greedili": [117, 173, 415, 419, 424, 466], "greek": [50, 54, 58, 70, 82, 100, 188, 415, 468, 1019], "green": [62, 113, 122, 141, 156, 161, 175, 196, 244, 314, 319, 323, 328, 334, 399, 999, 1047, 1048, 1050, 1051], "greenhal": 1047, "greg": [1022, 1045, 1046, 1048, 1049], "gregori": [1045, 1049, 1050, 1051, 1052], "gregorystrubel": 1052, "gregov": 1047, "grei": [43, 287, 318, 355, 380], "grep": 385, "greyscal": 316, "grid": [1, 44, 46, 48, 49, 57, 61, 62, 63, 76, 88, 95, 104, 105, 106, 107, 110, 114, 147, 157, 168, 170, 172, 179, 188, 190, 191, 192, 208, 237, 244, 251, 252, 253, 257, 262, 267, 269, 271, 274, 276, 278, 281, 282, 284, 289, 297, 300, 302, 303, 311, 316, 320, 321, 323, 345, 347, 348, 354, 359, 380, 387, 392, 397, 399, 410, 416, 419, 421, 422, 423, 454, 467, 470, 478, 504, 508, 521, 528, 637, 638, 639, 653, 656, 659, 660, 662, 665, 667, 669, 682, 719, 734, 748, 791, 794, 806, 809, 810, 817, 820, 822, 836, 837, 870, 915, 991, 993, 998, 1001, 1005, 1018, 1019, 1023, 1024, 1026, 1028, 1030, 1034, 1039, 1042, 1043, 1044, 1046, 1047, 1053, 1055, 1056], "grid_encod": 321, "grid_model": 300, "grid_posit": [61, 63], "grid_resolut": [192, 329, 346, 637, 638, 639], "grid_scores_": [1045, 1051, 1052], "grid_search": [107, 144, 258, 267, 275, 285, 334, 416, 1041, 1042, 1043, 1044, 1045, 1046], "grid_siz": [49, 95, 311, 380, 504], "grid_to_graph": [1, 81, 85, 88, 415, 423, 1031, 1052], "grid_tograph": 1042, "grid_valu": [192, 639, 1005, 1055], "gridsearch": [88, 110, 288, 1017], "gridsearchcv": [1, 42, 88, 102, 104, 106, 107, 110, 131, 144, 188, 252, 258, 267, 269, 271, 275, 276, 277, 278, 282, 285, 288, 295, 300, 302, 316, 320, 329, 333, 334, 348, 352, 368, 373, 387, 397, 399, 406, 416, 419, 422, 425, 429, 508, 526, 546, 547, 581, 605, 613, 659, 709, 748, 817, 820, 870, 880, 910, 918, 987, 994, 998, 1002, 1012, 1013, 1017, 1018, 1019, 1027, 1028, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057], "gridsearchcvifittedgridsearchcv": [105, 267, 275, 277], "gridsearchcvinot": 258, "gridsiz": 250, "gridspec": [61, 63, 99, 262, 392], "gridspecfromsubplotspec": 392, "griffith": [1047, 1048], "grigorev": 1044, "grigorio": 740, "grigsbi": 99, "grime": [695, 699, 995], "grinsztajn": 1056, "grisel": [0, 53, 54, 71, 82, 95, 208, 240, 278, 280, 359, 360, 361, 400, 404, 1016, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "griva": [1053, 1054], "grlivarea": 148, "grobler": [0, 66, 79, 85, 87, 106, 119, 120, 202, 215, 216, 217, 241, 353, 355, 405, 1039, 1040, 1041, 1042], "groceryheist": 1052, "groenen": [696, 700, 995], "grok": 493, "groothui": [633, 988], "grother": 382, "ground": [1, 26, 57, 67, 74, 79, 83, 91, 92, 95, 110, 114, 117, 127, 155, 183, 203, 213, 219, 220, 256, 268, 280, 360, 399, 415, 709, 710, 711, 714, 718, 719, 720, 721, 723, 724, 727, 729, 730, 732, 734, 735, 736, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 789, 790, 791, 792, 793, 796, 797, 801, 802, 998, 1011, 1023, 1031, 1047], "ground_truth": [89, 305], "group": [0, 1, 50, 71, 74, 89, 92, 94, 161, 192, 194, 219, 240, 253, 268, 272, 324, 334, 339, 360, 367, 380, 390, 399, 400, 406, 415, 421, 422, 423, 440, 452, 501, 594, 595, 597, 600, 724, 794, 806, 807, 808, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 837, 883, 884, 920, 921, 994, 995, 997, 998, 999, 1008, 1014, 1015, 1017, 1023, 1026, 1027, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1055, 1056, 1057], "group_1": 883, "group_2": 883, "group_3": 883, "group_by_dynam": 180, "group_df": 227, "group_kfold": 807, "group_prior": 272, "groupbi": [42, 154, 192, 227, 237], "groupkfold": [1, 272, 282, 334, 406, 419, 600, 811, 812, 813, 814, 815, 824, 829, 831, 832, 833, 834, 837, 1027, 1045, 1052], "groupshufflesplit": [1, 272, 419, 1027, 1045], "grow": [42, 51, 73, 196, 203, 300, 355, 361, 372, 397, 411, 417, 422, 423, 563, 564, 565, 566, 570, 571, 572, 816, 850, 851, 918, 919, 920, 921, 987, 998, 1001, 1014, 1022, 1026, 1030, 1042, 1043], "grower": [154, 422, 567, 568], "grown": [382, 422, 559, 560, 561, 562, 563, 564, 570, 571, 918, 919, 920, 921, 1014], "growth": [998, 1044, 1045], "grumman": 50, "grusak": 1049, "gryllo": [1044, 1047], "gryze": [1041, 1044], "grzegorz": [1046, 1049], "gs_clf": 1032, "gs_time": 288, "gsh": 288, "gsh_time": 288, "gsiisg": 1054, "gsk": 50, "gss": [419, 808], "gt": [67, 104, 105, 143, 159, 191, 267, 275, 289, 383, 385, 389, 1025], "gu": [1050, 1051, 1053], "guan": 1049, "guangguo": 1045, "guarante": [45, 46, 63, 112, 113, 154, 191, 227, 250, 297, 298, 318, 360, 368, 374, 379, 393, 394, 409, 415, 419, 420, 423, 452, 542, 651, 664, 665, 674, 678, 680, 682, 684, 693, 700, 823, 826, 850, 851, 888, 890, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 917, 990, 994, 995, 997, 1001, 1006, 1010, 1014, 1031, 1049], "gubri": [1047, 1048], "gudmalwar": 1051, "gued": 1057, "guerin": [1045, 1046], "guess": [54, 138, 147, 419, 422, 423, 538, 544, 546, 547, 553, 794, 998, 1012], "guestrin": 422, "guha": 1054, "gui": [1040, 1050], "guid": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 51, 61, 63, 89, 102, 124, 144, 184, 188, 191, 192, 207, 239, 284, 304, 305, 308, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 383, 384, 385, 390, 391, 392, 393, 398, 399, 400, 406, 416, 422, 426, 427, 428, 429, 432, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 943, 998, 999, 1025, 1032, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1056, 1057, 1058], "guidanc": [397, 425], "guidelin": [1, 24, 384, 388, 390, 391, 393, 415, 422], "guiel": 500, "guilherm": 1042, "guillaum": [0, 43, 45, 105, 108, 129, 159, 175, 180, 181, 182, 184, 207, 208, 221, 240, 318, 404, 1022, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "guillem": [1048, 1049, 1054], "guillemot": [0, 262, 264, 1045, 1046], "guillermo": 1053, "guiniol": 1046, "guitar": 1054, "guitton": 1051, "guiweb": 1052, "gulati": [1044, 1045, 1046], "gun": [56, 380], "gunduz": 1057, "gunesbayir": [1054, 1055], "gunnar": [541, 947], "guo": 1052, "guoci": 1046, "gupta": [904, 1010, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1056], "gustafson": [1054, 1055], "gustav": 1045, "gustavo": [1047, 1048, 1053], "gutierrez": 1049, "guttman": 700, "guyon": [521, 599, 600, 998], "guyon2015": 998, "gwulf": [1043, 1044], "gyeongja": 1057, "gz": [46, 389, 403, 514, 515], "gzip": 1039, "g\u00e9ron": 1047, "g\u00f3rski": [1050, 1051], "g\u00f6khan": [43, 420, 541], "g\u00f6n\u00fcl": 1057, "g\u00fcnther": [1052, 1056], "h": [43, 44, 51, 82, 92, 124, 125, 138, 139, 157, 173, 177, 191, 264, 303, 306, 313, 320, 331, 342, 344, 361, 382, 391, 413, 415, 417, 420, 421, 422, 423, 426, 450, 525, 538, 541, 544, 546, 553, 559, 573, 574, 588, 596, 613, 614, 695, 699, 710, 714, 763, 845, 849, 850, 851, 856, 866, 881, 890, 990, 992, 994, 995, 996, 998, 1000, 1002, 1003, 1012, 1014, 1028, 1045, 1050, 1054, 1055, 1056], "h1998": 422, "h2009": 1005, "h4dr1en": 1049, "h5py": 379, "h_": 994, "h_i": [420, 1003], "h_init": 391, "h_j": 1003, "h_l": 992, "h_m": 422, "h_pad": [124, 147, 364], "h_samples_": 866, "ha": [0, 42, 43, 46, 49, 50, 51, 61, 65, 69, 71, 78, 84, 89, 90, 91, 94, 107, 112, 113, 117, 124, 136, 143, 147, 149, 151, 154, 156, 161, 171, 172, 175, 180, 181, 182, 187, 191, 192, 193, 194, 196, 212, 216, 219, 220, 221, 225, 236, 237, 239, 246, 250, 252, 253, 256, 257, 260, 262, 263, 265, 267, 268, 271, 272, 275, 276, 277, 280, 281, 283, 288, 289, 297, 301, 304, 305, 306, 308, 315, 318, 319, 321, 323, 327, 328, 329, 330, 331, 333, 335, 337, 340, 348, 352, 353, 354, 359, 367, 368, 372, 373, 374, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 393, 394, 397, 398, 399, 400, 403, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 427, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 499, 500, 503, 504, 514, 515, 522, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 625, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 695, 696, 697, 698, 701, 717, 719, 726, 728, 747, 769, 780, 784, 785, 786, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 820, 824, 827, 828, 829, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 929, 930, 931, 949, 967, 983, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1018, 1021, 1022, 1023, 1027, 1030, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "haan": 1048, "haar": [52, 1056], "haas": 1049, "habchi": 1049, "haberland": [1054, 1055], "haberth\u00fcr": 1046, "hack": [46, 48], "had": [42, 47, 81, 151, 154, 180, 253, 318, 324, 330, 368, 385, 386, 406, 423, 426, 450, 988, 998, 1022, 1023, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1054], "hadamard": 387, "haddad": 1046, "hadrien": [1046, 1049], "hadshirt": 1049, "haenel": 1042, "haesun": [1051, 1054, 1055], "hafner": 1052, "hagai": 803, "hagberg": 54, "hahn": [1046, 1047], "haiat": 1051, "haidar": [1052, 1053], "hail": 324, "hailei": [1049, 1050], "hain": 380, "haitz": [1050, 1052, 1053], "hakaa1": [1046, 1047], "hal": [553, 664, 764, 765, 996], "halchenko": [0, 404, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1055], "hale": [1041, 1053], "half": [1, 42, 60, 127, 154, 251, 255, 275, 277, 289, 380, 381, 420, 422, 469, 528, 568, 599, 603, 608, 776, 869, 877, 998, 1001, 1014], "half_cal": 603, "half_selector": 603, "halfbath": 148, "halford": [1047, 1054, 1055], "halkidi": 415, "halko": [420, 541, 547, 550, 946, 947], "hall": [994, 1046, 1050], "hallock": 1045, "halpert": [698, 995], "halv": [1, 168, 188, 269, 281, 285, 354, 410, 521, 570, 585, 806, 809, 810, 915, 1019, 1034, 1051], "halvic": 1051, "halvinggridsearchcv": [1, 288, 289, 329, 406, 585, 810, 987, 1051, 1053, 1054, 1056, 1057], "halvingrandomsearchcv": [1, 151, 289, 329, 406, 585, 809, 987, 1051, 1053, 1054, 1055, 1056, 1057], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 289, "halwai": 1045, "ham": [1, 45, 456, 463, 587, 705, 709, 715, 740, 747, 784, 785, 786, 802, 1001], "hamada": 1051, "hamdi": [1056, 1057], "hammerbach": 1043, "hamming_loss": [1, 45, 709, 802, 998, 1041, 1045, 1048], "hammingdist": 705, "hammoudeh": 1048, "hamoumi": 1052, "hampton": 1032, "hampu": 1043, "hamzeh": [0, 1042, 1043], "han": [415, 448, 456, 463, 1039, 1047, 1048, 1052], "hancock": 1049, "hand": [43, 64, 85, 87, 117, 119, 126, 127, 129, 144, 151, 168, 171, 180, 188, 191, 192, 212, 223, 226, 243, 249, 250, 252, 253, 256, 270, 271, 274, 279, 286, 291, 302, 337, 338, 348, 372, 379, 380, 382, 385, 387, 391, 393, 398, 420, 421, 422, 424, 432, 438, 508, 649, 703, 719, 794, 836, 891, 915, 987, 991, 994, 998, 1000, 1002, 1006, 1011, 1013, 1019, 1022, 1023, 1026, 1029, 1030], "handbook": [726, 746, 998], "handi": [83, 104, 360, 361, 386, 1055], "handk": 1055, "handl": [0, 1, 42, 47, 104, 144, 148, 154, 155, 159, 196, 203, 252, 253, 271, 279, 284, 286, 295, 297, 298, 305, 324, 327, 334, 359, 361, 367, 372, 377, 379, 383, 385, 386, 387, 394, 397, 399, 422, 423, 425, 502, 550, 583, 587, 588, 594, 595, 597, 616, 641, 652, 653, 658, 664, 665, 666, 667, 668, 674, 681, 682, 684, 687, 726, 794, 874, 883, 884, 910, 911, 915, 922, 948, 955, 958, 995, 998, 999, 1000, 1001, 1004, 1006, 1013, 1014, 1017, 1018, 1022, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "handle_data": 46, "handle_endtag": 46, "handle_starttag": 46, "handle_unknown": [42, 104, 143, 148, 159, 192, 193, 248, 256, 258, 260, 324, 328, 331, 883, 884, 1008, 1043, 1047, 1051, 1052], "handler": 1050, "handler_map": 305, "handlerpathcollect": 305, "handletextpad": 364, "handpick": 246, "handprint": 382, "handwritten": [50, 70, 79, 82, 86, 93, 95, 143, 171, 188, 238, 239, 241, 243, 250, 265, 275, 308, 315, 316, 337, 338, 360, 378, 415, 422, 453, 508, 547, 550, 555, 572, 694, 695, 696, 697, 698, 710, 711, 723, 743, 799, 801, 859, 871, 880, 890, 903, 995, 1001, 1019, 1023, 1034], "hang": [385, 1049, 1050], "hank": 1042, "hanmin": [0, 319, 404, 1046, 1047, 1048, 1049, 1050], "hann": 1039, "hanna": [1043, 1044, 1050], "hannah": [1049, 1051, 1053], "hannel": [1047, 1048], "hansen": 1047, "hansin": [1053, 1054], "hanu\u0161": 1056, "hanxiang": [685, 994], "hao": [1050, 1051, 1053, 1054], "haoi": 1056, "haoran": 1047, "haoyin": [1050, 1052, 1053], "happen": [1, 43, 63, 143, 207, 271, 318, 324, 360, 368, 372, 373, 383, 384, 385, 389, 390, 391, 397, 399, 400, 403, 409, 415, 417, 419, 422, 443, 521, 578, 664, 791, 888, 890, 910, 994, 998, 999, 1013, 1018, 1032, 1047, 1051, 1052, 1054, 1055, 1056, 1057], "happi": [191, 271, 359, 397, 400, 824, 825], "haqu": [1041, 1042, 1043], "harabasz": [1, 716], "harabaz": 1045, "hard": [47, 219, 246, 250, 277, 279, 374, 384, 397, 399, 414, 415, 420, 423, 540, 547, 575, 682, 912, 913, 914, 915, 916, 994, 1011, 1013, 1014, 1018, 1030, 1031, 1032, 1048, 1049], "hardcod": [446, 460, 1047], "harder": [286, 287, 322, 380, 384, 387, 393, 397, 415, 521, 567, 568], "hardest": 1025, "hardin": 113, "hardli": [89, 613, 614], "hardwar": [56, 341, 361, 372, 373, 380, 383, 397, 403, 409, 411, 1017, 1053, 1054], "hare": 994, "harfouch": 1055, "harikrishnan": 1041, "harizo": [1045, 1046], "harm": [271, 359, 387, 423, 801], "harmanan": [1056, 1057], "harmon": [42, 71, 284, 360, 415, 541, 547, 735, 736, 742, 789, 801, 998], "haroldfox": [1047, 1048], "harper": 1046, "harri": [1043, 1045, 1051, 1052], "harsanyi": 1055, "harsh": [432, 443, 475, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 616, 664, 672, 674, 680, 681, 682, 805, 828, 838, 839, 840, 841, 845, 846, 847, 848, 849, 852, 857, 860, 867, 905, 906, 910, 912, 915, 918, 920, 1049, 1051, 1054], "harshit5674": 1054, "hart": [382, 992, 1047], "hartong": 1050, "harutaka": 1052, "harvest": 324, "harwar": 397, "has_fit_paramet": [1, 394], "hasan": 1054, "hasattr": [78, 90, 96, 114, 136, 147, 237, 250, 313, 320, 359, 399, 430, 434, 440, 959, 1049], "haseeb": [1052, 1053], "hash": [1, 46, 137, 188, 254, 360, 361, 372, 374, 377, 385, 388, 397, 422, 520, 550, 563, 572, 587, 588, 595, 646, 845, 963, 990, 1019, 1032, 1034, 1040, 1043, 1046], "hashabl": [399, 878, 881, 1009], "hashcode55": 1045, "hasher": [157, 361, 423], "hashingvector": [1, 46, 361, 374, 423, 495, 594, 596, 597, 1040, 1046, 1047, 1048, 1049, 1052], "hashlib": 46, "hasil": 1043, "haskel": 1017, "hasn": 406, "hassaan": [1047, 1048], "hassan": 1052, "hassen": 1039, "hassoun": 1054, "hasti": [1, 138, 141, 142, 153, 173, 207, 276, 382, 419, 422, 525, 526, 559, 565, 566, 634, 662, 727, 729, 730, 840, 857, 903, 918, 919, 988, 992, 994, 999, 1005, 1010, 1012, 1014], "hat": [113, 133, 273, 277, 303, 330, 383, 413, 417, 421, 422, 989, 994, 995, 998, 1000, 1002], "hathidara": 1051, "hatwar": [1047, 1048], "hauck": 1045, "hausamann": [1047, 1048], "haussler": 183, "hav": 1025, "have": [0, 1, 24, 42, 43, 45, 46, 47, 49, 50, 51, 52, 60, 61, 62, 63, 71, 73, 76, 77, 80, 81, 84, 87, 89, 91, 94, 96, 98, 99, 103, 104, 110, 112, 117, 119, 121, 122, 129, 130, 138, 145, 147, 148, 149, 151, 154, 169, 170, 173, 175, 176, 180, 181, 182, 187, 190, 191, 192, 193, 194, 196, 198, 203, 219, 220, 221, 223, 237, 243, 246, 248, 253, 254, 256, 257, 263, 264, 265, 267, 270, 271, 277, 278, 280, 283, 284, 291, 292, 295, 298, 300, 301, 304, 305, 318, 323, 324, 325, 327, 329, 330, 334, 338, 339, 340, 345, 351, 352, 353, 355, 359, 360, 367, 368, 372, 373, 374, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 498, 500, 501, 502, 514, 515, 520, 529, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 695, 696, 697, 698, 705, 710, 711, 718, 721, 726, 732, 737, 742, 748, 762, 763, 764, 765, 788, 791, 792, 798, 801, 803, 804, 805, 806, 809, 810, 811, 812, 817, 820, 824, 828, 829, 831, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 930, 932, 934, 936, 947, 973, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "havelabeleddatado": 1025, "haversin": [1, 311, 421, 705, 768, 770, 1001, 1048, 1051], "haversine_dist": [1, 768, 1048], "haversinedist": 705, "hawaii": 180, "haxbi": 0, "haya": 1053, "hayashi": 1047, "hbgt": 154, "hd": 50, "hdb": [89, 452], "hdbscan": [1, 70, 78, 83, 99, 188, 250, 450, 518, 890, 988, 1017, 1019, 1033, 1034, 1055, 1056, 1057], "hdbscan_min_cluster_s": 78, "hdbscan_min_sampl": 78, "hdf5": 379, "hdl": [173, 382], "hdmetor": 1045, "he": [385, 732, 762, 867, 868, 900, 901, 998, 1032, 1046, 1053, 1054], "head": [0, 51, 62, 104, 143, 158, 180, 191, 207, 208, 237, 260, 267, 324, 327, 332, 385, 393, 404, 420, 1022, 1044, 1045, 1054, 1055, 1056, 1057], "head_width": 62, "header": [53, 103, 278, 359, 360, 380, 383, 423, 494, 495, 806, 809, 810, 820], "heali": 415, "health": 335, "heap": 456, "heapq": 469, "heard": 385, "heart": 256, "heat": [159, 348, 415, 458, 468, 701], "heatingqc": 159, "heatmap": [192, 194, 198, 203, 288, 332, 348, 638, 1005], "heatmap_kw": 638, "heatmaps_": 638, "heavei": 1047, "heavi": [221, 397, 412, 1018], "heavier": [133, 417, 994], "heavili": [208, 372, 373, 385, 393, 655, 661, 784, 1015], "heavy_rain": [42, 192], "hebei": 415, "hedlund": 1055, "hedyati": 1043, "hee": [1046, 1049], "heer": 1050, "hegd": 1056, "heidelberg": [180, 415, 420, 541, 702, 732, 762, 998], "height": [46, 53, 87, 127, 148, 149, 173, 318, 324, 334, 359, 421, 452, 499, 500, 512, 592], "heightpet_catpet_dogf64f64f64": 334, "heikki": 1010, "heilman": [1043, 1044], "heitz": 324, "held": [42, 46, 104, 131, 152, 193, 227, 264, 280, 285, 297, 419, 422, 565, 566, 567, 568, 707, 806, 809, 810, 820, 867, 868, 880, 987, 988, 997, 1006, 1032], "helder": [1043, 1052, 1053], "heldout": 226, "heldout_scor": 150, "helen": 332, "heli": 1046, "hello": [385, 393, 959, 963], "helloifeven": 959, "helmu": 1043, "help": [0, 40, 42, 47, 49, 89, 103, 107, 129, 134, 192, 203, 237, 239, 271, 278, 280, 295, 316, 345, 348, 360, 361, 368, 372, 373, 383, 386, 387, 388, 389, 390, 391, 393, 394, 399, 400, 402, 409, 415, 416, 419, 423, 425, 439, 542, 583, 633, 656, 660, 671, 691, 692, 698, 720, 846, 918, 919, 920, 921, 988, 992, 993, 995, 997, 998, 1000, 1002, 1008, 1009, 1014, 1016, 1017, 1018, 1021, 1022, 1032, 1045, 1046, 1047, 1050, 1053, 1057], "helper": [43, 44, 127, 237, 288, 378, 387, 388, 398, 399, 419, 474, 581, 908, 1027, 1028, 1039, 1046, 1047, 1048, 1052], "helvetica": [922, 924], "heme": 1056, "hempstalk": 1046, "henc": [71, 94, 105, 191, 223, 250, 271, 286, 348, 359, 360, 372, 380, 387, 389, 391, 399, 403, 415, 419, 422, 423, 493, 514, 545, 547, 548, 549, 569, 596, 649, 652, 658, 666, 668, 678, 693, 710, 711, 715, 721, 737, 763, 792, 801, 825, 826, 845, 846, 847, 848, 849, 885, 955, 995, 997, 998, 999, 1004, 1005, 1008, 1018, 1046, 1047, 1050, 1051, 1053], "hendrik": [0, 60, 61, 62, 63, 175, 176, 178, 179, 180, 181, 182, 184, 252, 404, 1039, 1042, 1043, 1044, 1045], "henri": [1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054], "henrymooresc": [1053, 1054], "hepe": [685, 994], "here": [42, 46, 47, 50, 51, 52, 54, 60, 63, 91, 92, 100, 110, 114, 119, 120, 122, 126, 127, 129, 130, 131, 132, 134, 138, 141, 144, 148, 152, 154, 159, 170, 173, 175, 183, 184, 191, 192, 193, 196, 198, 203, 208, 212, 219, 223, 225, 234, 235, 237, 239, 241, 246, 251, 253, 256, 257, 263, 264, 265, 270, 271, 274, 275, 277, 279, 280, 282, 286, 287, 289, 291, 295, 298, 300, 307, 314, 315, 316, 320, 323, 329, 331, 334, 337, 339, 348, 352, 355, 357, 361, 363, 368, 372, 373, 374, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 393, 397, 398, 406, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 428, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 470, 478, 481, 542, 544, 545, 549, 550, 573, 574, 575, 576, 587, 588, 590, 594, 597, 600, 608, 634, 636, 653, 657, 659, 661, 667, 669, 671, 679, 681, 695, 697, 701, 705, 718, 732, 752, 762, 800, 805, 806, 809, 810, 812, 820, 828, 829, 830, 831, 832, 833, 834, 835, 837, 846, 850, 851, 874, 882, 885, 888, 891, 902, 903, 913, 964, 987, 990, 994, 995, 996, 997, 998, 1001, 1004, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1021, 1022, 1023, 1024, 1030, 1039, 1047, 1052], "hereaft": 400, "hereund": 1004, "herilalaina": [1046, 1047, 1049], "hermano": [1054, 1055], "hermida": [1048, 1052], "hernandez": 998, "hern\u00e1ndez": 998, "hero": [417, 428, 481], "herrou": 1053, "hershei": 998, "hertel": 1056, "herv": 1043, "hervieu": 1039, "herv\u00e9": 1043, "heryanto": 1046, "hesit": 385, "hessian": [239, 240, 241, 422, 567, 568, 654, 664, 665, 675, 686, 695, 699, 994, 1002, 1033, 1034, 1054], "hessian_tol": [695, 699], "heterogen": [42, 47, 60, 89, 102, 104, 188, 192, 219, 260, 323, 327, 377, 379, 397, 470, 494, 547, 587, 597, 719, 870, 874, 910, 995, 1005, 1008, 1017, 1019, 1034, 1043, 1047, 1049, 1050], "heteroscedast": [124, 131, 151, 221, 420, 886, 898], "heteroschedast": 998, "heuer": 1042, "heurist": [50, 53, 150, 256, 359, 373, 415, 424, 455, 458, 467, 468, 514, 515, 543, 545, 552, 682, 683, 684, 697, 701, 809, 810, 912, 913, 914, 915, 916, 935, 995, 996, 1001, 1012, 1014, 1022, 1030, 1039, 1040, 1044, 1048, 1051, 1052], "hexbin": 250, "hexdigest": 46, "hgbdt": 144, "hgbdt_model": 192, "hgbdt_model_without_interact": 192, "hgbdt_preprocessor": 192, "hgbt": [144, 154, 422], "hgbt_cst": 154, "hgbt_no_cst": 154, "hgbt_quantil": 154, "hhu": [655, 1048], "hi": [0, 416, 998, 1032], "hibon": 1046, "hida": [1054, 1055], "hidden": [42, 192, 315, 316, 385, 393, 412, 420, 866, 867, 868, 1002, 1003, 1017, 1039, 1050], "hidden_layer_s": [192, 257, 313, 315, 867, 868, 1002], "hide": [77, 385, 393, 845, 846, 847, 848, 849, 1042, 1047, 1055], "hideaki": 1053, "hierarch": [1, 52, 58, 70, 73, 74, 78, 80, 86, 87, 88, 91, 188, 194, 243, 331, 367, 399, 423, 447, 449, 451, 452, 510, 518, 520, 528, 536, 553, 737, 863, 890, 1015, 1018, 1019, 1033, 1034, 1039, 1042, 1043, 1055], "hierarchi": [75, 194, 385, 456, 462, 469, 1003, 1031], "higgin": [1056, 1057], "high": [0, 36, 42, 47, 49, 50, 61, 63, 66, 71, 74, 78, 83, 89, 91, 96, 99, 103, 107, 112, 113, 126, 127, 141, 143, 144, 145, 146, 151, 152, 154, 155, 157, 165, 166, 173, 175, 181, 187, 190, 192, 193, 194, 203, 214, 220, 221, 223, 233, 239, 240, 241, 246, 250, 262, 268, 275, 279, 283, 284, 293, 304, 305, 313, 315, 320, 322, 323, 324, 325, 333, 340, 345, 347, 348, 359, 360, 365, 366, 372, 380, 382, 385, 390, 393, 394, 397, 398, 412, 413, 414, 415, 419, 421, 422, 423, 424, 425, 450, 453, 455, 456, 458, 475, 488, 489, 490, 559, 560, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 650, 676, 677, 685, 695, 698, 699, 732, 737, 748, 752, 762, 795, 798, 814, 816, 850, 851, 855, 884, 885, 889, 891, 912, 914, 915, 918, 919, 920, 921, 967, 987, 992, 993, 994, 995, 997, 998, 1001, 1002, 1004, 1006, 1008, 1010, 1013, 1014, 1015, 1017, 1018, 1023, 1024, 1026, 1032, 1039, 1040, 1042, 1043, 1047, 1050, 1051, 1052, 1053, 1054], "high_cardin": 324, "high_cardinality_featur": 324, "high_cardinalityindex": 324, "high_i": 214, "high_precision_cv_result": 275, "high_recall_cv_result": 275, "high_x": 214, "higher": [42, 51, 91, 112, 127, 131, 138, 141, 143, 144, 151, 155, 171, 175, 177, 182, 183, 191, 192, 193, 196, 219, 220, 223, 237, 243, 244, 268, 270, 271, 275, 277, 280, 292, 303, 323, 348, 352, 359, 360, 361, 368, 372, 380, 383, 387, 412, 414, 415, 417, 422, 424, 425, 426, 450, 454, 455, 477, 484, 515, 538, 545, 549, 554, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 579, 594, 597, 613, 614, 625, 633, 637, 641, 643, 652, 653, 658, 659, 666, 667, 668, 669, 682, 684, 685, 710, 730, 734, 758, 791, 803, 806, 809, 810, 812, 820, 827, 829, 834, 837, 856, 859, 885, 902, 903, 904, 910, 911, 912, 913, 914, 915, 916, 923, 990, 994, 995, 997, 998, 1001, 1005, 1008, 1012, 1013, 1030, 1032, 1040, 1045, 1047, 1054, 1056], "highest": [1, 54, 56, 62, 114, 169, 173, 223, 275, 277, 288, 329, 359, 385, 397, 413, 415, 419, 422, 424, 443, 561, 563, 570, 598, 601, 602, 604, 605, 606, 609, 610, 612, 641, 643, 732, 762, 800, 803, 806, 809, 810, 820, 907, 918, 949, 987, 994, 998, 999, 1002, 1012, 1014, 1051], "highest_protocol": 409, "highli": [42, 47, 63, 105, 112, 113, 126, 134, 155, 203, 214, 224, 271, 277, 280, 286, 314, 352, 360, 372, 373, 385, 387, 391, 397, 413, 415, 419, 422, 423, 458, 468, 502, 569, 677, 698, 818, 820, 866, 994, 998, 1001, 1002, 1004, 1012, 1013, 1016, 1017], "highlight": [42, 53, 89, 104, 112, 122, 142, 143, 156, 173, 175, 176, 181, 186, 187, 192, 193, 196, 219, 220, 221, 237, 248, 258, 259, 260, 271, 272, 289, 291, 295, 300, 322, 324, 340, 359, 361, 367, 385, 389, 390, 393, 397, 425, 449, 452, 453, 470, 473, 496, 497, 502, 507, 508, 510, 518, 521, 527, 530, 544, 547, 567, 568, 570, 571, 573, 605, 608, 634, 636, 638, 640, 646, 652, 654, 658, 664, 675, 686, 694, 703, 707, 708, 723, 724, 738, 748, 754, 784, 794, 801, 805, 806, 807, 809, 810, 812, 820, 828, 829, 832, 833, 836, 852, 854, 871, 875, 880, 883, 884, 885, 889, 890, 891, 907, 908, 910, 915, 918, 919, 942, 995, 998, 1006, 1008, 1013, 1019, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "highlight_min": [151, 208], "higuera": 379, "hila": 415, "hilbert": [224, 876, 990, 1008], "hilferti": 112, "hill": [415, 454, 467, 1049], "him": 423, "himanshu": [1050, 1053], "hind": 1053, "hinder": 1049, "hing": [1, 61, 226, 229, 231, 285, 345, 346, 350, 352, 399, 672, 682, 741, 910, 917, 994, 1012, 1013, 1032], "hinge_loss": [1, 352, 998, 1043, 1051, 1052], "hinrich": 420, "hint": [191, 372, 386, 390, 406, 454, 998, 1030], "hinton": [698, 859, 866, 867, 868, 995, 1001, 1002, 1003], "hintz": 1045, "hiramatsu": 1056, "hirofumi": [1050, 1051], "hirsch": 1047, "hirschberg": [415, 723, 743, 801], "hirzel": 1052, "hispan": 191, "hist": [42, 61, 63, 87, 108, 140, 144, 219, 221, 250, 256, 271, 283, 303, 318, 322, 324, 331, 334, 422], "hist_drop": 148, "hist_n": 148, "hist_nbin": 318, "hist_no_interact": 332, "hist_one_hot": 148, "hist_ordin": 148, "hist_quantil": 331, "hist_x0": 318, "hist_x1": 318, "histgradientboost": 1051, "histgradientboostingclassifi": [1, 143, 144, 271, 327, 328, 329, 330, 332, 334, 373, 409, 565, 570, 638, 639, 988, 1017, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "histgradientboostingclassifierhistgradientboostingclassifi": 271, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 271, "histgradientboostingregressor": [1, 42, 45, 51, 139, 144, 148, 151, 152, 154, 156, 159, 186, 192, 219, 324, 327, 328, 329, 330, 332, 333, 334, 389, 422, 566, 571, 638, 639, 641, 988, 1005, 1017, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "histgradientboostingregressor__interaction_cst": 192, "histgradientboostingregressor__max_depth": 148, "histgradientboostingregressor__max_it": 148, "histgradientboostingregressorhistgradientboostingregressor": [159, 324], "histgradientboostingregressorifittedhistgradientboostingregressor": [156, 332], "histogram": [1, 51, 61, 63, 87, 137, 139, 143, 148, 149, 151, 152, 156, 188, 219, 227, 250, 276, 278, 283, 303, 318, 329, 331, 333, 334, 413, 496, 502, 565, 566, 567, 568, 570, 571, 638, 648, 748, 754, 764, 765, 796, 806, 811, 827, 833, 836, 990, 996, 1008, 1019, 1033, 1034, 1051, 1054, 1056], "histor": [50, 219, 271, 1018], "histori": [50, 565, 566, 1039], "hit": [221, 391], "hitesh": 1051, "hjortkj\u00e6r": 1053, "hkey_local_machin": 403, "hline": 126, "hlle": 995, "hmasdev": 1053, "hmc": 50, "hmm": [1039, 1040, 1041, 1042, 1044], "hmmlearn": 1017, "hn": 391, "hnyk": [1045, 1046], "ho": [142, 422, 561, 562, 998, 1044, 1047, 1048, 1053], "hoang": [1048, 1049], "hobson": 1045, "hoc": [172, 173, 188, 269, 271, 280, 295, 335, 340, 399, 414, 502, 664, 822, 828, 833, 871, 890, 1019], "hochberg": [601, 1045, 1046], "hochreit": [412, 725], "hockei": [56, 380], "hoctor": 1051, "hoda1394": 1051, "hoenig": 1039, "hoesli": 422, "hoffman": [420, 542, 1044, 1051], "hogan": 1047, "hoh": 1047, "hold": [46, 51, 62, 63, 219, 223, 253, 271, 278, 367, 378, 385, 386, 387, 399, 413, 415, 419, 422, 423, 425, 509, 563, 567, 570, 595, 638, 639, 640, 742, 806, 809, 810, 820, 846, 877, 878, 883, 884, 891, 894, 918, 920, 988, 992, 998, 1002, 1012, 1013, 1014, 1023, 1032, 1047, 1051, 1057], "holder": 1032, "holdgraf": 1047, "holdselig": 423, "hole": [188, 238, 239, 244, 536, 698, 699, 1019, 1053], "holger": 1046, "holidai": [42, 192], "holm": [841, 999, 1056], "holman": 1054, "holmstr\u00f6m": 1041, "holohan": [1054, 1056], "holt": [0, 405, 1039], "holub": 540, "home": [0, 1, 6, 50, 140, 159, 179, 181, 183, 184, 211, 228, 263, 272, 316, 332, 353, 364, 380, 383, 393, 403, 492, 505, 685, 1022], "homebrew": [388, 403], "homepag": [380, 536, 1014], "homm": 1054, "homo": 92, "homogen": [1, 71, 72, 73, 78, 80, 83, 89, 92, 360, 380, 397, 399, 417, 422, 425, 452, 620, 710, 723, 737, 742, 743, 763, 801, 995, 996, 998, 1048], "homogeneity_completeness_v_measur": [1, 415, 1048], "homogeneity_scor": [1, 72, 83, 92, 360, 415, 723, 742, 801, 998], "homomorph": 1017, "homoscedast": [131, 249, 322, 998, 1047], "homoschedast": 998, "honda": 50, "honei": 992, "hong": [1045, 1047, 1051, 1052, 1053, 1055, 1057], "hongh": 1047, "hongkahjun": 1046, "honglu": 1049, "hongshaoyang": 1054, "honl": [1051, 1052], "honolulu": 998, "honor": 324, "hood": [409, 994, 1013], "hoover": [1044, 1045, 1046, 1048], "hope": [29, 43, 237, 399, 1048], "hopefulli": [280, 393, 1039], "hopfensperg": [1056, 1057], "hopper": 1044, "horizont": [65, 124, 239, 251, 318, 321, 390, 399, 470, 521, 703, 707], "horizontal_distance_to_hydrologi": 497, "horizontalalign": [50, 62, 66, 74, 78, 79, 96, 130, 246, 262, 313, 320], "hornik": 641, "hornstein": 1054, "horrel": 1046, "hoshia": 1053, "hossein": [1047, 1048, 1049], "host": [0, 144, 333, 359, 380, 385, 389, 393, 394, 903, 1032, 1055], "hot": [1, 42, 104, 143, 146, 159, 191, 219, 286, 319, 320, 324, 329, 348, 399, 422, 423, 557, 572, 587, 654, 664, 665, 675, 686, 873, 875, 877, 878, 881, 883, 884, 891, 994, 1008, 1047, 1053, 1054], "hot_r": [50, 318], "hotel": 1022, "hotspot": 391, "hotter": 146, "hour": [42, 154, 191, 192, 334, 385, 391, 502, 995, 1016], "hour_co": 42, "hour_df": 42, "hour_sin": 42, "hour_workday_interact": 42, "hourli": [42, 154, 191], "hourly_wag": 190, "hous": [1, 108, 149, 159, 186, 187, 271, 318, 329, 378, 496, 1034], "house_pric": [108, 159], "houseag": [318, 329, 380, 496], "household": 380, "housestyl": [148, 159], "hover": 334, "hover_data": [144, 278], "how": [0, 42, 43, 45, 46, 47, 48, 51, 57, 58, 61, 62, 63, 67, 68, 71, 84, 85, 86, 87, 91, 94, 102, 103, 104, 107, 110, 112, 117, 133, 138, 139, 142, 146, 147, 148, 149, 151, 152, 154, 157, 159, 170, 171, 182, 188, 191, 192, 193, 194, 196, 200, 208, 209, 215, 220, 221, 222, 223, 226, 227, 233, 237, 243, 244, 248, 251, 253, 255, 256, 257, 259, 268, 271, 272, 273, 275, 277, 278, 279, 284, 286, 287, 289, 290, 291, 292, 297, 298, 300, 301, 302, 304, 305, 315, 323, 325, 328, 329, 330, 333, 334, 345, 346, 348, 351, 352, 355, 359, 360, 363, 367, 372, 373, 374, 380, 383, 384, 386, 387, 388, 390, 393, 398, 399, 400, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 510, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 628, 629, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 710, 726, 763, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 982, 987, 988, 992, 993, 994, 995, 997, 998, 1004, 1005, 1006, 1008, 1010, 1011, 1013, 1014, 1016, 1018, 1022, 1023, 1025, 1027, 1032, 1034, 1039, 1041, 1044, 1050, 1053, 1054, 1055], "howel": 1046, "howev": [0, 42, 43, 45, 51, 52, 60, 61, 63, 71, 81, 83, 87, 89, 94, 105, 108, 110, 114, 116, 129, 131, 141, 143, 144, 148, 151, 152, 159, 170, 173, 175, 180, 181, 192, 193, 200, 208, 219, 223, 240, 243, 244, 246, 252, 253, 256, 271, 277, 284, 291, 292, 295, 297, 298, 303, 314, 318, 329, 335, 352, 355, 359, 360, 368, 372, 373, 374, 379, 380, 382, 384, 385, 387, 391, 393, 397, 399, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 446, 449, 453, 455, 457, 460, 465, 502, 514, 538, 547, 557, 573, 587, 588, 589, 595, 612, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 638, 639, 644, 649, 661, 662, 678, 693, 698, 701, 706, 769, 771, 806, 809, 810, 820, 833, 837, 838, 849, 867, 868, 873, 882, 883, 888, 912, 913, 915, 926, 967, 987, 988, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1012, 1013, 1014, 1023, 1027, 1030, 1048, 1049, 1051, 1052, 1055], "hoyer": [420, 1042], "hp": [50, 1032], "hpq": 50, "hrishikesh": [1040, 1041], "hristo": [1047, 1054], "hsiang": [664, 1043], "hsieh": 1045, "hspace": [44, 52, 53, 78, 79, 96, 124, 237, 246, 262, 264, 265, 268, 303, 329, 338, 345, 1028], "hstack": [52, 68, 76, 161, 169, 244, 255, 272, 351, 419, 869], "hsuan": 1044, "ht2001": 998, "htf": 422, "htm": [918, 919], "html": [1, 42, 46, 50, 62, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 173, 180, 184, 191, 192, 193, 196, 200, 247, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 380, 382, 385, 386, 388, 389, 393, 416, 419, 423, 429, 493, 514, 515, 664, 845, 849, 943, 996, 1017, 1018, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "htmledit": [845, 849, 996], "htmlparser": 46, "htsedebenham": 1054, "http": [42, 44, 45, 46, 50, 51, 54, 60, 104, 152, 159, 173, 184, 187, 196, 219, 227, 235, 237, 244, 247, 291, 295, 297, 298, 315, 379, 380, 382, 383, 385, 389, 390, 391, 393, 397, 399, 403, 415, 419, 424, 448, 455, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 514, 515, 516, 536, 537, 540, 543, 547, 601, 642, 647, 650, 655, 664, 670, 672, 673, 674, 677, 682, 685, 688, 689, 691, 692, 698, 701, 711, 727, 729, 730, 764, 765, 775, 845, 847, 848, 849, 852, 853, 858, 859, 860, 861, 866, 888, 903, 904, 905, 918, 919, 994, 996, 998, 1011, 1014, 1028, 1049], "hu": [1044, 1047, 1049], "hua": [569, 1004], "huang": [380, 664, 1045, 1050], "huangk10": 1050, "huard": 1039, "huber": [24, 201, 229, 422, 566, 655, 682, 684, 1012, 1039, 1041, 1042, 1051], "huberlossfunct": 1052, "huberregressor": [1, 88, 175, 188, 197, 217, 223, 224, 225, 325, 530, 676, 677, 678, 684, 685, 994, 1019, 1045, 1046, 1047, 1048], "hubert": [415, 711, 721, 792], "hubert1985": 711, "hudson": 332, "hue": [154, 267, 277, 323, 382], "huerta": 1049, "hug": [0, 173, 322, 404, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "huge": [221, 224, 372, 391, 633, 1042], "hugh": [885, 1041, 1052], "hugo": [44, 380, 1045, 1050, 1051, 1052, 1053], "hugorichard": 1051, "hugu": 1043, "hui": [142, 207, 544, 546, 553, 662, 994], "huiginn": 1039, "huilgolkar": [1040, 1041], "hujiahong726": 1055, "hull": 1056, "humahn": 1054, "human": [124, 192, 359, 415, 420, 867, 868, 998, 1005, 1048], "humid": [42, 192, 1005], "hunan": 1047, "hundr": [76, 150, 240, 322, 380, 419, 422, 567, 568, 995, 1050], "hungarian": [412, 725], "hunt": 1054, "hunter": 1048, "hurt": [372, 540, 1047], "husak": 1053, "huszar": 1022, "hut": [698, 995, 1044, 1046, 1049], "huynh": [1049, 1051], "hv": 423, "hvassard": 1053, "hwan": 1050, "hwang": 1045, "hybrid": [452, 655, 1017], "hye": 1050, "hyper": [1, 42, 63, 104, 144, 270, 277, 282, 316, 348, 368, 387, 397, 398, 399, 410, 419, 422, 424, 474, 650, 651, 810, 818, 820, 866, 908, 993, 994, 998, 1001, 1012, 1013, 1023, 1034, 1039, 1053], "hyperband": 987, "hyperbol": [352, 648, 867, 868, 996, 1002], "hypercub": [246, 521], "hyperlink": 1041, "hyperparamet": [1, 104, 106, 107, 154, 175, 176, 182, 183, 186, 188, 192, 198, 203, 208, 233, 237, 246, 256, 269, 275, 280, 282, 288, 289, 300, 316, 359, 387, 399, 415, 419, 420, 422, 425, 508, 541, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 649, 659, 665, 671, 679, 682, 734, 791, 806, 820, 915, 987, 992, 993, 994, 997, 998, 1000, 1002, 1004, 1012, 1018, 1019, 1032, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055], "hyperparameter_baseline_similar": 183, "hyperparameter_grid": 334, "hyperparameter_length_scal": 621, "hyperplan": [121, 140, 178, 188, 197, 211, 228, 254, 280, 343, 344, 345, 346, 347, 348, 352, 353, 518, 637, 664, 665, 672, 674, 680, 681, 682, 683, 910, 912, 914, 915, 1012, 1013, 1019], "hyperspher": [381, 1017], "hypothes": 994, "hypothesi": [151, 277, 283, 419, 696, 700, 835, 995], "hypothet": 63, "hyunjin": 1039, "hyvarinen": [427, 539], "h\u00e9lion": 1050, "i": [0, 1, 7, 29, 36, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 346, 347, 348, 352, 353, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 368, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 945, 946, 947, 949, 952, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 973, 979, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "i_alpha_optim": 290, "i_ax": 298, "i_dataset": [78, 96, 246], "i_j": 1006, "iain": [173, 382, 994], "iampat": 1047, "ian": [1041, 1043, 1048, 1049, 1051, 1054, 1055, 1057], "iasoon": 1053, "ibay": 1039, "ibieta": 1052, "ibm": [50, 56, 341, 361, 380], "ibn": 1039, "ibnukhsein": 1056, "ibraheem": 1048, "ibrahima": 1049, "ibraim": [1044, 1045, 1046], "ib\u00e1\u00f1ez": [1047, 1048, 1051], "ic": [46, 295, 329, 379, 382, 402, 506, 508, 516, 638, 639, 1034, 1051, 1052], "ica": [10, 126, 427, 1014, 1033, 1034], "ica_estim": 124, "icann": 702, "icassp": 998, "icdm": [569, 1004], "icdmw": 415, "ice_lines_kw": 638, "icml": [61, 63, 413, 415, 423, 443, 445, 845, 847, 866, 998, 1000, 1012, 1016], "icml03": 847, "icml09": [537, 543], "icon": [334, 387], "icyblad": 1046, "id": [1, 44, 56, 237, 311, 367, 379, 380, 385, 393, 417, 419, 423, 429, 500, 501, 502, 922, 924, 942, 1028, 1032, 1047, 1048, 1051], "id3": [1020, 1034], "idea": [43, 87, 112, 113, 144, 173, 180, 191, 220, 239, 271, 303, 348, 363, 372, 373, 385, 390, 391, 417, 418, 419, 420, 421, 422, 424, 613, 614, 994, 995, 998, 1001, 1004, 1016, 1022, 1032], "ideal": [219, 221, 237, 271, 274, 277, 284, 286, 287, 368, 384, 385, 386, 389, 390, 393, 397, 399, 413, 414, 732, 762, 987, 997, 1012, 1013, 1018, 1021], "idelberg": 1056, "ident": [51, 56, 98, 150, 214, 219, 237, 246, 250, 342, 359, 380, 387, 399, 412, 415, 416, 417, 419, 425, 428, 444, 445, 458, 470, 471, 479, 481, 482, 485, 486, 487, 494, 509, 557, 565, 566, 570, 571, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 649, 685, 686, 705, 710, 711, 742, 791, 801, 808, 811, 821, 822, 825, 826, 852, 853, 859, 867, 868, 874, 875, 887, 899, 918, 919, 991, 992, 995, 998, 1001, 1002, 1013, 1043, 1047, 1048, 1049, 1053, 1057], "identif": [380, 385, 415, 503, 987, 1024], "identifi": [57, 120, 126, 132, 151, 152, 190, 191, 219, 222, 223, 265, 267, 275, 280, 286, 307, 325, 329, 352, 359, 360, 379, 380, 384, 385, 389, 390, 399, 414, 415, 416, 419, 422, 423, 452, 456, 463, 493, 502, 514, 515, 561, 562, 563, 564, 569, 570, 571, 572, 612, 649, 655, 705, 718, 780, 835, 856, 875, 905, 906, 987, 994, 998, 1004, 1011, 1022, 1030, 1046, 1048, 1053, 1054], "idf": [1, 53, 56, 250, 359, 360, 361, 380, 420, 527, 550, 594, 595, 596, 597, 849, 857, 882, 987, 996, 1000, 1008, 1032, 1039], "idf_": [423, 596, 597, 1047], "idier": [420, 544, 546, 553], "idiom": 391, "idiosyncrat": 387, "idl": 1050, "ido": [1054, 1055], "idpol": [219, 237], "idx": [49, 56, 79, 89, 133, 140, 144, 147, 154, 160, 184, 192, 194, 203, 211, 218, 219, 228, 240, 271, 364, 416, 419], "idx_a": 286, "idx_b": 286, "idx_r": 218, "idx_sort": 219, "idxmax": 355, "idxmin": 275, "ie": [74, 100, 125, 446, 710, 994, 1008], "ieee": [97, 111, 113, 382, 415, 417, 424, 428, 454, 481, 540, 569, 670, 691, 692, 731, 775, 994, 998, 1004], "ieeexplor": 775, "ieic": [544, 546, 553], "iem": 664, "if_binari": [191, 260, 883, 1008, 1050], "if_delegate_has_method": [1052, 1053], "iff": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 881], "iforest": 256, "iforest_kw": 256, "iglesi": 1054, "ignacio": 1042, "ignor": [1, 42, 44, 46, 54, 78, 83, 89, 96, 104, 138, 140, 143, 148, 156, 159, 192, 207, 211, 219, 228, 234, 248, 253, 258, 260, 268, 271, 272, 314, 315, 323, 324, 328, 331, 352, 353, 360, 364, 373, 385, 387, 389, 391, 399, 403, 406, 415, 416, 422, 423, 433, 434, 437, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 466, 467, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 509, 514, 515, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 587, 588, 589, 594, 595, 596, 597, 600, 603, 608, 609, 616, 617, 633, 634, 635, 636, 638, 639, 641, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 713, 719, 720, 732, 735, 736, 744, 761, 762, 769, 775, 780, 784, 789, 790, 793, 794, 803, 804, 805, 807, 808, 809, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 869, 870, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 973, 994, 995, 998, 1000, 1004, 1008, 1013, 1028, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "ignore_attribut": 379, "ignore_error": 88, "ignore_implicit_zero": [887, 899], "ignore_ti": [732, 762], "ignore_warn": [227, 320, 1045], "ignored_new_col": 416, "ignorerevsfil": 385, "igor": [1045, 1046, 1052], "ih": 303, "ii": [49, 125, 192, 226, 272, 382, 423, 588, 589, 595, 644, 672, 673, 873, 882, 994, 1008, 1016, 1056], "iid": 1047, "iii": [1032, 1053, 1056], "iijima": 1048, "iinfo": 1054, "ij": [277, 308, 412, 415, 420, 544, 546, 553, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 994, 995, 998, 1000, 1003, 1008, 1013], "ijcnn": 998, "ijcv": 998, "ijet": 415, "ik": [994, 998], "ikeda": 1051, "ikko": 1052, "il": [48, 670, 691, 692, 994, 998], "ilambharathi": [1042, 1043], "ili": [1055, 1056], "ilic": 1052, "ilion": 1053, "iliya": 1054, "iljin": [1054, 1055], "ill": [74, 114, 224, 316, 477, 478, 484, 656, 657, 660, 661, 662, 688, 689, 994, 997, 1031, 1049], "illustr": [47, 59, 60, 62, 66, 68, 86, 90, 91, 103, 104, 107, 108, 110, 112, 117, 122, 126, 138, 141, 146, 153, 154, 156, 158, 159, 168, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 188, 190, 192, 193, 196, 208, 215, 216, 219, 221, 223, 227, 229, 232, 233, 236, 237, 239, 240, 242, 244, 246, 248, 249, 251, 252, 253, 255, 266, 271, 277, 284, 289, 290, 291, 299, 307, 321, 323, 326, 327, 329, 335, 340, 348, 349, 353, 355, 356, 360, 361, 366, 368, 372, 382, 385, 390, 393, 398, 414, 418, 420, 422, 423, 521, 616, 617, 619, 620, 621, 625, 628, 629, 859, 987, 994, 998, 1001, 1004, 1010, 1011, 1012, 1013, 1019, 1022, 1023], "iloc": [42, 154, 159, 191, 192, 237, 277, 301], "ilya": 1046, "im": [124, 134, 288, 302], "im_": 703, "im_kw": [703, 1053], "imacul": 1045, "imag": [1, 41, 44, 52, 57, 58, 67, 70, 73, 74, 75, 78, 80, 82, 85, 88, 92, 96, 101, 103, 119, 123, 124, 129, 146, 171, 173, 179, 188, 210, 240, 248, 251, 255, 275, 307, 315, 316, 328, 337, 338, 359, 360, 377, 378, 380, 382, 385, 390, 393, 399, 403, 408, 414, 415, 420, 447, 451, 458, 468, 499, 500, 501, 502, 508, 509, 512, 513, 540, 541, 543, 547, 589, 590, 591, 592, 593, 613, 614, 697, 703, 744, 836, 880, 994, 998, 999, 1001, 1003, 1010, 1014, 1017, 1019, 1022, 1023, 1028, 1029, 1031, 1032, 1034, 1039, 1042, 1047, 1048, 1052, 1054, 1055], "image_arrai": 82, "image_array_sampl": 82, "image_height": [589, 590, 593], "image_index": [337, 338], "image_nam": 512, "image_patch": 593, "image_reconstruct": 593, "image_s": 593, "image_shap": [124, 255], "image_width": [589, 590, 593], "imagebox": 240, "imageio": 379, "imagenet": [867, 868], "images_approx": 1031, "images_restor": 85, "imagin": [125, 175, 253, 352, 419, 420, 423, 994], "imamura": 1053, "imbal": [270, 280, 291, 419, 713, 735, 736, 744, 789, 790, 793, 794, 998], "imbalanc": [219, 271, 280, 284, 286, 291, 360, 397, 413, 419, 709, 714, 793, 807, 811, 847, 998, 1000, 1006, 1017], "imbert": [1046, 1048, 1051, 1053, 1056, 1057], "img": [43, 84, 100, 512, 592], "img_height": 589, "img_shap": 146, "img_to_graph": [1, 80, 100, 423, 1042, 1052], "img_width": 589, "imit": 359, "immanuel": [0, 1039, 1040, 1044], "immedi": [89, 385, 397, 806, 820, 831, 832, 1047], "immens": 1022, "immensu": 1047, "immers": [696, 700], "immobil": 42, "immut": 409, "imp": 988, "imp_mean": [633, 636], "imp_reshap": 146, "impact": [50, 51, 61, 70, 71, 76, 77, 98, 108, 138, 169, 188, 190, 191, 192, 199, 221, 223, 237, 256, 270, 271, 295, 301, 323, 332, 355, 360, 368, 372, 373, 378, 397, 400, 413, 415, 420, 453, 455, 542, 546, 553, 596, 672, 673, 674, 678, 680, 682, 683, 684, 698, 800, 806, 809, 810, 820, 833, 850, 851, 852, 887, 899, 910, 911, 933, 947, 969, 972, 987, 997, 1005, 1013, 1019, 1046, 1049, 1052], "imped": 393, "imperfect": [734, 791, 998, 1041], "imperfectli": [709, 740, 998], "implant": 58, "implement": [1, 12, 29, 44, 45, 51, 52, 54, 80, 90, 113, 124, 144, 154, 187, 194, 196, 203, 204, 208, 233, 237, 239, 246, 252, 253, 271, 275, 277, 286, 295, 297, 298, 300, 303, 321, 327, 328, 329, 330, 331, 333, 359, 361, 372, 373, 374, 379, 380, 382, 383, 385, 386, 387, 390, 391, 393, 394, 399, 403, 406, 411, 412, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 443, 448, 449, 450, 452, 453, 454, 455, 456, 481, 499, 502, 514, 538, 539, 540, 541, 542, 544, 547, 548, 549, 559, 560, 561, 563, 564, 567, 568, 569, 573, 578, 588, 594, 595, 597, 599, 603, 607, 616, 617, 638, 639, 646, 647, 651, 652, 659, 663, 664, 665, 669, 670, 674, 677, 678, 680, 681, 682, 683, 684, 690, 691, 692, 693, 694, 697, 698, 701, 713, 717, 726, 741, 744, 748, 784, 788, 794, 795, 803, 805, 806, 809, 810, 812, 820, 824, 825, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 852, 853, 855, 858, 860, 861, 866, 867, 868, 870, 892, 900, 901, 907, 910, 911, 912, 913, 914, 915, 916, 946, 947, 955, 958, 963, 967, 969, 987, 988, 990, 992, 994, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1008, 1010, 1011, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "impli": [42, 175, 191, 359, 360, 361, 420, 422, 425, 480, 579, 588, 616, 617, 628, 741, 934, 994, 995, 1032, 1050], "implic": [368, 385], "implicit": [1, 219, 399, 422, 423, 578, 688, 689, 992, 997, 1017, 1048], "implicitli": [361, 394, 422, 603, 638, 639, 889, 988, 990, 1005, 1008, 1013], "import": [1, 15, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 379, 380, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 402, 403, 406, 409, 411, 412, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 959, 960, 961, 962, 963, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054], "importance_gett": [424, 599, 600, 603, 1051], "importances_mean": [145, 152, 193, 194, 327, 640, 1006], "importances_std": [145, 640, 1006], "important_word": 56, "importantli": [42, 52, 125, 192, 196, 318, 415, 1057], "importerror": [49, 87, 127, 298, 311, 393], "importlib": 1052, "impos": [73, 91, 156, 213, 223, 324, 397, 415, 420, 422, 423, 533, 663, 994], "imposs": [151, 361, 1018], "impract": 915, "impress": 1022, "improp": [399, 1046], "improv": [0, 29, 42, 60, 61, 68, 110, 111, 114, 129, 134, 138, 139, 144, 147, 149, 150, 151, 153, 154, 159, 169, 187, 191, 196, 205, 219, 227, 237, 271, 278, 280, 295, 298, 301, 316, 323, 333, 351, 352, 360, 368, 373, 383, 388, 390, 391, 393, 394, 397, 399, 400, 409, 420, 422, 424, 455, 456, 537, 538, 540, 543, 544, 545, 547, 548, 549, 552, 560, 563, 564, 565, 566, 567, 568, 570, 571, 616, 617, 649, 658, 670, 672, 673, 674, 678, 679, 680, 681, 682, 684, 691, 693, 698, 735, 736, 790, 793, 794, 859, 867, 868, 884, 886, 898, 918, 919, 921, 947, 992, 994, 995, 998, 1001, 1002, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1030, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "improvis": [49, 311], "impur": [152, 194, 367, 402, 422, 424, 559, 560, 563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 922, 924, 1014, 1034, 1044, 1045, 1046, 1047], "imput": [1, 104, 154, 159, 193, 248, 258, 260, 328, 331, 377, 389, 398, 399, 406, 416, 422, 496, 507, 571, 586, 633, 634, 635, 636, 645, 651, 678, 832, 853, 871, 929, 931, 1017, 1018, 1019, 1034, 1041, 1042], "imputation_const": 258, "imputation_mean": 258, "imputation_ord": [633, 1049], "imputation_sequence_": 633, "impute_estim": 186, "impute_scor": 187, "imran": [1041, 1042, 1043], "imread": 67, "imshow": [43, 44, 52, 67, 74, 80, 81, 82, 84, 85, 87, 88, 92, 114, 119, 124, 127, 134, 177, 178, 179, 183, 194, 210, 235, 240, 255, 288, 302, 316, 337, 338, 348, 356, 379, 638, 703, 1028, 1029, 1053], "in1d": 1046, "in_bodi": 46, "in_titl": 46, "in_top": 46, "in_topic_d": 46, "inaccess": 89, "inact": [361, 379, 385], "inadvert": [190, 399], "inadvis": 409, "inappropri": [380, 419, 425, 715, 827], "inbuilt": 419, "inc": [0, 103, 276, 988, 1010, 1022], "incap": 89, "incentiv": 389, "incept": 1018, "includ": [10, 17, 42, 67, 69, 89, 112, 144, 148, 149, 150, 190, 191, 193, 203, 219, 223, 237, 253, 278, 295, 298, 314, 318, 330, 331, 333, 348, 353, 359, 361, 368, 372, 373, 379, 381, 383, 385, 386, 387, 389, 390, 391, 393, 394, 399, 400, 403, 409, 412, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 450, 452, 456, 462, 472, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 502, 506, 507, 508, 510, 511, 516, 540, 547, 563, 570, 580, 638, 644, 652, 653, 658, 666, 667, 668, 671, 687, 694, 695, 703, 719, 735, 736, 741, 743, 744, 777, 789, 790, 793, 801, 806, 808, 809, 810, 819, 820, 823, 826, 833, 836, 858, 860, 861, 862, 883, 884, 885, 889, 907, 910, 911, 918, 920, 922, 924, 930, 931, 934, 936, 939, 955, 987, 994, 997, 998, 999, 1001, 1002, 1008, 1012, 1013, 1014, 1017, 1018, 1021, 1022, 1030, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "include_bia": [42, 198, 292, 885, 889, 1053], "include_boundari": [934, 1053], "include_self": [73, 78, 101, 701, 863, 864, 1043], "include_valu": 703, "inclus": [385, 387, 393, 456, 462, 760, 792, 998, 999, 1039, 1053], "incom": [318, 380, 446], "incoming_count": 54, "incompat": [221, 389, 502, 988, 1047, 1048], "incomplet": [385, 403, 411, 415, 711, 801, 988, 995, 1032, 1043, 1045], "inconsist": [1, 399, 409, 423, 514, 515, 582, 912, 915, 934, 1004, 1013, 1034, 1039, 1044, 1045, 1046, 1047, 1049, 1052, 1054, 1055, 1056], "inconsistentversionwarn": [1, 409, 1055], "incorpor": [333, 385, 416, 422, 997, 1017, 1022], "incorrect": [138, 190, 284, 340, 368, 385, 415, 613, 614, 638, 639, 740, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "incorrectli": [200, 422, 423, 559, 565, 567, 740, 746, 998, 1040, 1045, 1047, 1048, 1050, 1055], "incr_mean_variance_axi": [1, 1045, 1051], "increas": [1, 42, 45, 53, 62, 71, 77, 89, 91, 92, 95, 108, 127, 138, 139, 141, 144, 147, 149, 154, 156, 169, 173, 175, 179, 180, 181, 184, 191, 192, 196, 199, 201, 210, 219, 220, 221, 223, 237, 244, 250, 263, 264, 271, 277, 278, 279, 284, 290, 291, 313, 319, 320, 323, 329, 335, 338, 348, 355, 360, 361, 363, 372, 373, 374, 384, 393, 394, 399, 413, 415, 417, 420, 422, 423, 426, 446, 450, 452, 458, 469, 477, 478, 484, 538, 542, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 633, 641, 642, 643, 651, 656, 657, 660, 661, 662, 664, 665, 672, 673, 674, 682, 683, 684, 688, 689, 691, 692, 698, 712, 713, 718, 784, 788, 795, 809, 810, 839, 858, 860, 861, 862, 865, 867, 868, 884, 910, 918, 919, 920, 921, 947, 987, 989, 993, 994, 995, 997, 998, 1001, 1008, 1012, 1013, 1014, 1022, 1039, 1041, 1044, 1048, 1050, 1051, 1054], "increasing_": 641, "increasing_bool": 642, "increment": [1, 105, 123, 129, 130, 131, 132, 188, 280, 389, 391, 448, 453, 469, 510, 539, 540, 541, 542, 545, 547, 550, 608, 652, 664, 672, 812, 834, 842, 843, 845, 846, 847, 848, 849, 879, 880, 890, 910, 911, 973, 994, 1000, 1019, 1042, 1043], "incrementalpca": [1, 128, 374, 420, 539, 541, 545, 547, 550, 1043, 1046, 1047, 1049, 1050, 1053], "incur": [62, 625, 910, 1013, 1047], "ind": [52, 76, 150, 161, 360, 850, 851], "inde": [43, 45, 61, 63, 69, 73, 74, 87, 89, 92, 114, 117, 129, 138, 141, 172, 173, 175, 191, 193, 198, 203, 207, 208, 219, 221, 279, 280, 284, 286, 295, 298, 318, 323, 355, 360, 368, 372, 384, 390, 398, 399, 400, 415, 417, 422, 573, 574, 994, 1008, 1012, 1053], "indecisiveus": [1050, 1051], "indefinit": 389, "indent": [387, 964], "independ": [1, 31, 51, 61, 63, 71, 80, 125, 126, 128, 143, 147, 182, 192, 255, 256, 277, 280, 282, 286, 297, 318, 325, 327, 360, 368, 372, 373, 381, 387, 389, 398, 399, 403, 412, 413, 415, 416, 417, 418, 419, 423, 427, 455, 470, 494, 509, 521, 522, 523, 524, 526, 538, 539, 541, 543, 545, 546, 552, 553, 557, 558, 610, 613, 614, 631, 646, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 678, 679, 680, 681, 710, 711, 723, 742, 743, 761, 763, 801, 808, 835, 839, 841, 843, 844, 882, 886, 887, 888, 890, 894, 895, 896, 897, 899, 900, 901, 904, 912, 913, 914, 915, 916, 941, 987, 990, 992, 994, 995, 998, 999, 1000, 1003, 1005, 1008, 1013, 1014, 1033, 1034, 1039, 1040, 1045, 1047, 1049, 1054], "inder128": 1049, "inderjeet": 1050, "inderjit": [412, 459], "indeterminaci": 550, "index": [1, 50, 53, 54, 71, 72, 73, 74, 75, 83, 84, 92, 104, 105, 138, 143, 145, 154, 170, 173, 186, 190, 191, 192, 193, 194, 219, 223, 237, 257, 260, 263, 264, 268, 272, 275, 276, 277, 278, 280, 288, 289, 291, 298, 318, 323, 324, 325, 331, 335, 337, 338, 360, 361, 380, 382, 383, 385, 387, 389, 394, 397, 399, 412, 416, 419, 420, 422, 423, 430, 449, 453, 454, 455, 456, 457, 459, 460, 463, 465, 466, 470, 473, 509, 515, 563, 564, 565, 566, 570, 571, 572, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 623, 638, 639, 646, 703, 710, 711, 718, 722, 724, 737, 744, 763, 785, 786, 792, 794, 800, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 836, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 883, 918, 919, 920, 921, 951, 969, 972, 977, 978, 998, 1000, 1001, 1002, 1012, 1014, 1017, 1030, 1032, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "index_alpha_path_a": 207, "index_alpha_path_b": 207, "index_map": 54, "indexerror": [1047, 1048], "indexhash": 646, "indexhash_": 646, "indian": 380, "indic": [1, 50, 56, 57, 61, 62, 82, 93, 94, 100, 108, 117, 120, 124, 138, 143, 149, 180, 183, 187, 190, 192, 216, 241, 250, 253, 270, 271, 279, 280, 283, 284, 298, 311, 337, 338, 341, 359, 360, 361, 367, 373, 380, 385, 386, 387, 389, 393, 394, 397, 399, 411, 412, 413, 415, 417, 419, 420, 422, 423, 426, 430, 443, 446, 450, 456, 457, 458, 459, 461, 462, 463, 466, 470, 473, 478, 493, 514, 515, 517, 518, 519, 529, 538, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 587, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 626, 633, 634, 635, 636, 638, 639, 645, 652, 653, 656, 657, 658, 659, 660, 661, 667, 669, 671, 679, 681, 688, 689, 696, 698, 700, 702, 709, 713, 718, 719, 724, 725, 726, 728, 731, 734, 735, 736, 737, 740, 744, 745, 746, 747, 760, 777, 784, 785, 786, 787, 789, 790, 791, 793, 794, 798, 799, 800, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 843, 844, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 874, 877, 881, 883, 891, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 926, 930, 931, 936, 951, 961, 962, 973, 974, 975, 976, 977, 978, 979, 988, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1005, 1008, 1009, 1012, 1013, 1018, 1023, 1027, 1030, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1052, 1054, 1055, 1056, 1057], "indicator_": [633, 634, 636], "indicator_matrix_": 1044, "indigo": 236, "indirect": [280, 386, 399], "indirectli": [237, 352], "indispens": 1022, "indistinguish": 318, "individu": [1, 42, 80, 94, 112, 137, 139, 141, 159, 168, 171, 184, 188, 189, 191, 194, 219, 237, 247, 256, 257, 271, 280, 282, 297, 327, 334, 335, 352, 355, 373, 386, 389, 392, 394, 399, 402, 406, 412, 416, 419, 422, 423, 443, 458, 468, 470, 502, 507, 509, 515, 561, 562, 565, 566, 568, 569, 571, 573, 574, 575, 576, 609, 615, 616, 638, 639, 649, 651, 663, 664, 665, 674, 677, 678, 679, 680, 681, 682, 683, 684, 693, 718, 725, 734, 740, 756, 757, 791, 796, 797, 806, 820, 838, 842, 843, 845, 846, 847, 848, 849, 868, 871, 879, 880, 882, 883, 884, 887, 889, 890, 895, 896, 897, 910, 911, 998, 999, 1008, 1013, 1019, 1027, 1032, 1034, 1040, 1043, 1045, 1051, 1053, 1055], "indptr": [54, 298, 367, 973, 974, 975, 976, 977, 978, 979, 1047, 1055], "induc": [24, 62, 90, 191, 203, 210, 212, 217, 220, 234, 252, 256, 355, 361, 412, 420, 422, 452, 455, 545, 549, 559, 563, 564, 565, 566, 570, 571, 572, 649, 732, 762, 883, 918, 919, 920, 921, 991, 998, 1012, 1030], "induct": [42, 46, 63, 70, 136, 151, 183, 188, 253, 298, 399, 415, 422, 429, 447, 518, 570, 633, 637, 905, 906, 959, 982, 994, 1011, 1019, 1041], "inductive_learn": 90, "inductivecluster": 90, "industri": [415, 1017], "ineffect": [322, 1008, 1047, 1048], "ineffici": [1, 422, 449, 580, 838, 839, 1001, 1003], "inequ": [367, 399, 415, 449, 453, 465, 705, 995, 996, 1001], "inertia": [91, 92, 95, 360, 415, 449, 453, 455, 458, 465, 466, 468, 469, 1050], "inertia_": [92, 95, 98, 449, 453, 455, 1050], "inf": [108, 178, 308, 394, 415, 425, 452, 456, 461, 462, 463, 467, 477, 478, 484, 559, 560, 565, 566, 599, 600, 603, 612, 613, 614, 625, 633, 641, 643, 654, 655, 656, 658, 675, 677, 678, 682, 683, 684, 686, 693, 734, 736, 752, 784, 791, 795, 866, 875, 882, 928, 929, 930, 931, 945, 998, 1008, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "infant": 1008, "infeas": [994, 1001, 1003], "infer": [24, 188, 189, 191, 214, 263, 267, 268, 277, 364, 379, 387, 397, 409, 419, 420, 502, 514, 515, 521, 540, 542, 544, 546, 553, 555, 556, 559, 565, 566, 638, 641, 663, 715, 728, 729, 747, 791, 803, 804, 812, 829, 836, 846, 884, 891, 905, 906, 918, 919, 920, 921, 961, 988, 994, 997, 998, 1003, 1008, 1011, 1014, 1017, 1018, 1019, 1026, 1040, 1044, 1045, 1050, 1053, 1056], "inferencesess": 409, "inferenti": 90, "inferior": [447, 451, 1050], "infin": [1, 277, 355, 547, 688, 689, 718, 831, 917, 929, 1001], "infinit": [63, 220, 262, 280, 352, 372, 425, 452, 628, 629, 784, 803, 928, 930, 931, 990, 997, 1008, 1013, 1047, 1049, 1052, 1053, 1054, 1056, 1057], "inflammatori": 380, "inflat": [91, 190, 191, 193, 415, 419, 998, 1008], "inflect": 279, "influenc": [41, 47, 51, 112, 113, 138, 188, 191, 201, 262, 285, 318, 325, 348, 352, 355, 368, 374, 417, 420, 422, 438, 446, 460, 471, 488, 489, 490, 495, 507, 560, 562, 564, 566, 568, 571, 574, 576, 617, 634, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 682, 684, 685, 740, 756, 836, 843, 844, 852, 853, 860, 861, 868, 887, 888, 899, 911, 913, 916, 919, 921, 930, 987, 992, 993, 994, 1001, 1004, 1008, 1012, 1013, 1019, 1022, 1042, 1047, 1048], "influenti": [223, 360, 1022], "info": [1, 44, 76, 104, 124, 191, 192, 253, 271, 275, 382, 384, 389, 399, 423, 502, 954, 1028], "inform": [1, 2, 42, 43, 46, 49, 50, 51, 52, 61, 63, 68, 69, 71, 72, 83, 87, 92, 100, 101, 103, 104, 117, 119, 120, 121, 130, 144, 145, 146, 167, 169, 170, 172, 173, 175, 180, 188, 191, 192, 194, 196, 197, 198, 199, 203, 220, 223, 234, 236, 237, 253, 257, 264, 265, 267, 271, 272, 274, 277, 278, 279, 282, 284, 286, 301, 304, 305, 308, 325, 330, 334, 351, 355, 359, 360, 361, 364, 367, 368, 372, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 390, 391, 393, 397, 398, 399, 400, 406, 409, 412, 414, 419, 420, 422, 423, 424, 425, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 498, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 516, 521, 530, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 612, 613, 614, 615, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 696, 697, 698, 701, 703, 707, 710, 711, 721, 732, 736, 749, 761, 762, 763, 792, 794, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 955, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1012, 1014, 1018, 1019, 1021, 1022, 1029, 1030, 1031, 1032, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "informatik": [60, 61, 62, 63, 175, 176, 178, 179, 180, 181, 182, 184, 252, 998], "informed": 998, "infrastructur": [315, 333, 1017, 1018], "infrequ": [883, 884, 891, 998, 1039, 1053, 1054, 1055], "infrequent_categories_": [331, 333, 883, 884, 891, 1008], "infrequent_if_exist": [883, 1008], "infrequent_sklearn": [883, 1008], "infti": [237, 425, 625, 994, 1008, 1046], "ing": 423, "ingela": 1053, "ingest": 423, "ingredi": 425, "ingrid": 1049, "inher": [134, 214, 368, 415, 420, 988, 990, 992, 993, 995, 999], "inherit": [253, 385, 387, 398, 399, 429, 583, 682, 939, 941, 994, 1039, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1054, 1055, 1056], "inhibit": [426, 450], "inhomogen": [425, 620], "ini": 265, "init": [1, 53, 76, 79, 92, 93, 95, 98, 192, 199, 239, 240, 242, 243, 244, 263, 265, 298, 360, 388, 393, 415, 420, 422, 449, 453, 455, 457, 459, 465, 466, 544, 546, 553, 554, 565, 566, 638, 639, 696, 698, 700, 859, 995, 1039, 1048, 1051, 1053, 1054, 1055], "init_": [565, 566], "init_param": [262, 265, 268, 803, 804], "init_s": [95, 360, 455], "init_size_": 1051, "init_tim": 265, "initi": [0, 45, 50, 54, 70, 76, 77, 79, 91, 92, 94, 97, 98, 113, 152, 160, 161, 162, 176, 181, 188, 191, 199, 212, 234, 239, 240, 244, 261, 263, 264, 277, 298, 329, 339, 348, 360, 368, 373, 380, 385, 387, 393, 394, 397, 399, 415, 420, 422, 424, 425, 427, 448, 449, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 518, 521, 537, 538, 539, 543, 544, 546, 549, 551, 552, 553, 554, 559, 560, 565, 566, 599, 613, 614, 616, 617, 625, 626, 633, 646, 651, 652, 653, 654, 658, 659, 664, 666, 667, 668, 669, 672, 673, 674, 675, 677, 682, 683, 684, 686, 687, 690, 696, 697, 698, 700, 701, 803, 804, 840, 859, 866, 867, 868, 906, 933, 946, 947, 967, 972, 973, 990, 994, 995, 997, 1002, 1003, 1004, 1012, 1014, 1017, 1019, 1029, 1031, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "initial_imputer_": 633, "initial_strategi": 633, "initial_theta": [616, 617], "initialis": [124, 544, 546, 553, 1039, 1047, 1048], "initializedcheck": 386, "inject": [256, 380, 422], "inki": 1045, "inli": [246, 994, 1004], "inlier": [112, 155, 222, 246, 256, 318, 399, 417, 437, 475, 569, 677, 683, 856, 887, 899, 913, 914, 916, 994, 1004, 1046, 1047, 1052], "inlier_mask": 222, "inlier_mask_": [222, 677], "inlier_plot": 112, "inliers_mask": 113, "inlin": [230, 385, 386, 1014], "inner": [63, 129, 151, 154, 278, 282, 297, 339, 372, 423, 449, 520, 588, 595, 624, 654, 675, 686, 781, 783, 990, 998, 1008, 1013, 1040, 1043, 1053, 1056], "inner_clf": 998, "inner_cv": [282, 334], "inner_it": 391, "inner_numb": 339, "inner_stat": 1053, "inner_stats_": 1053, "inpaint": 420, "inplac": [1, 237, 256, 289, 460, 488, 489, 490, 491, 865, 873, 876, 879, 880, 882, 886, 887, 888, 890, 971, 974, 975, 976, 980, 981, 1048], "inplace_column_scal": 1, "inplace_csr_column_scal": [1, 394], "inplace_csr_row_normalize_l1": [1, 394], "inplace_csr_row_normalize_l2": [1, 394], "inplace_row_scal": 1, "inplace_swap_column": 1, "inplace_swap_row": 1, "inproceed": 0, "input": [1, 42, 44, 48, 63, 66, 68, 106, 124, 128, 147, 151, 152, 181, 182, 183, 191, 196, 198, 219, 222, 223, 227, 234, 237, 249, 250, 252, 253, 260, 272, 295, 302, 303, 315, 319, 320, 321, 322, 327, 330, 332, 335, 348, 352, 356, 361, 379, 382, 385, 388, 390, 394, 395, 397, 398, 399, 409, 412, 413, 416, 419, 420, 421, 422, 423, 424, 425, 427, 433, 436, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 451, 454, 455, 456, 460, 463, 464, 467, 470, 471, 473, 474, 475, 477, 478, 488, 489, 490, 495, 509, 515, 522, 523, 524, 526, 530, 534, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 626, 628, 633, 634, 635, 636, 637, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 691, 692, 693, 694, 695, 696, 698, 699, 702, 703, 704, 705, 706, 707, 708, 727, 728, 729, 730, 734, 751, 752, 754, 756, 757, 759, 760, 767, 773, 777, 778, 780, 784, 785, 786, 787, 791, 796, 797, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 897, 898, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 927, 928, 929, 930, 931, 932, 936, 941, 944, 946, 955, 957, 958, 962, 971, 973, 979, 980, 981, 984, 985, 988, 990, 992, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1023, 1027, 1028, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "input_featur": [198, 387, 399, 431, 436, 448, 449, 451, 453, 455, 470, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 572, 573, 574, 575, 576, 587, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 1055], "input_nam": [929, 931, 961, 1053], "input_typ": [361, 423, 588], "inria": [0, 43, 47, 65, 71, 86, 88, 91, 108, 114, 144, 154, 181, 198, 203, 204, 206, 210, 212, 213, 224, 240, 241, 246, 249, 256, 278, 280, 283, 290, 310, 323, 355, 359, 360, 361, 664, 1039], "insensit": [252, 649, 682, 684, 794, 911, 991, 1012, 1013, 1039], "insepar": [173, 382], "insert": [94, 191, 219, 397, 415, 493, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 925], "insid": [1, 54, 56, 62, 192, 221, 253, 277, 339, 348, 374, 379, 380, 387, 391, 406, 415, 423, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 600, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 955, 958, 1005, 1022, 1056], "insight": [42, 45, 191, 192, 220, 221, 237, 271, 315, 318, 359, 367, 413, 414, 806, 809, 810, 820, 833, 1005, 1014, 1022], "insist": 103, "inspect": [1, 42, 47, 65, 66, 69, 90, 95, 140, 145, 152, 154, 155, 156, 160, 170, 175, 180, 181, 191, 192, 193, 194, 202, 211, 228, 233, 257, 271, 277, 280, 289, 301, 306, 309, 323, 327, 328, 329, 330, 332, 334, 344, 345, 346, 347, 349, 350, 352, 359, 364, 373, 387, 399, 415, 416, 422, 423, 470, 559, 560, 563, 564, 565, 566, 570, 571, 572, 637, 638, 639, 640, 839, 870, 871, 918, 919, 920, 921, 986, 998, 999, 1002, 1005, 1006, 1013, 1017, 1019, 1032, 1034, 1042], "inspir": [111, 156, 192, 237, 385, 397, 422, 567, 568, 935, 988, 1017, 1048], "instabl": [73, 191, 308, 425, 458, 541, 545, 549, 701, 1046, 1049, 1052], "instal": [87, 260, 298, 327, 328, 329, 330, 331, 332, 333, 334, 335, 372, 373, 385, 386, 388, 389, 391, 393, 397, 398, 408, 409, 411, 415, 423, 458, 468, 502, 697, 701, 1014, 1032, 1046, 1047, 1048, 1052, 1053], "installment_commit": 271, "instanc": [1, 42, 46, 48, 51, 60, 62, 63, 87, 90, 92, 141, 154, 170, 173, 187, 192, 193, 202, 203, 248, 253, 256, 271, 273, 275, 286, 288, 289, 309, 327, 334, 342, 344, 345, 351, 352, 359, 360, 361, 371, 372, 373, 379, 380, 382, 383, 384, 385, 387, 389, 390, 391, 393, 394, 397, 399, 403, 406, 409, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 429, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 468, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 497, 498, 501, 502, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 617, 626, 633, 634, 635, 636, 638, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 713, 726, 735, 736, 744, 777, 780, 784, 785, 786, 787, 789, 790, 793, 794, 795, 798, 799, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 815, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 930, 931, 933, 941, 942, 946, 947, 954, 955, 956, 957, 967, 968, 969, 972, 982, 983, 987, 988, 994, 995, 998, 1000, 1001, 1004, 1006, 1008, 1012, 1013, 1014, 1018, 1023, 1030, 1031, 1032, 1034, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "instanci": 1048, "instant": 213, "instantan": 514, "instanti": [105, 178, 330, 388, 406, 422, 456, 573, 574, 608, 636, 806, 809, 810, 812, 820, 829, 831, 832, 833, 834, 835, 837, 937, 1004, 1029, 1039, 1047, 1051, 1055], "instead": [0, 42, 43, 44, 51, 57, 82, 87, 89, 90, 91, 104, 129, 141, 146, 156, 170, 173, 175, 219, 221, 234, 237, 243, 256, 268, 273, 274, 278, 279, 297, 303, 318, 327, 328, 329, 330, 331, 348, 350, 352, 359, 361, 367, 368, 372, 373, 379, 380, 383, 384, 385, 386, 387, 389, 390, 393, 394, 397, 398, 399, 406, 409, 411, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 462, 465, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 515, 516, 539, 540, 541, 543, 544, 545, 546, 547, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 600, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 636, 638, 641, 644, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 696, 698, 700, 713, 715, 748, 752, 756, 757, 780, 784, 785, 786, 788, 789, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 818, 820, 824, 825, 826, 828, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 871, 872, 873, 875, 876, 877, 882, 883, 888, 889, 890, 900, 901, 904, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 924, 936, 942, 947, 955, 973, 987, 988, 990, 994, 995, 997, 998, 999, 1002, 1003, 1008, 1012, 1013, 1014, 1017, 1028, 1030, 1032, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "instinct": 359, "institut": [0, 271, 382, 1001], "instruct": [372, 385, 386, 387, 388, 389, 390, 393, 397, 398, 399, 509, 594, 595, 597, 1021, 1023, 1032, 1039], "instrument": [50, 103, 125, 190], "insuffici": [402, 997, 1031], "insur": [188, 197, 219, 414, 470, 502, 558, 654, 675, 686, 712, 751, 756, 758, 836, 871, 874, 875, 883, 890, 994, 1019], "int": [46, 48, 51, 52, 54, 56, 71, 78, 96, 113, 141, 150, 154, 155, 165, 166, 176, 177, 178, 184, 187, 190, 200, 210, 212, 219, 237, 244, 246, 252, 256, 262, 271, 272, 275, 276, 277, 298, 303, 305, 311, 325, 338, 361, 380, 385, 387, 397, 399, 413, 416, 419, 423, 426, 427, 430, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 509, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 613, 614, 616, 617, 623, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 711, 713, 715, 719, 732, 733, 735, 736, 737, 740, 744, 762, 763, 775, 780, 784, 785, 786, 787, 788, 789, 790, 793, 795, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 926, 930, 931, 933, 934, 946, 947, 949, 950, 951, 952, 963, 967, 969, 972, 977, 978, 994, 1005, 1039, 1045, 1049, 1050], "int32": [256, 298, 325, 385, 399, 449, 453, 455, 457, 459, 465, 912, 913, 914, 915, 916, 963, 1013, 1048, 1054, 1055, 1056], "int64": [42, 52, 88, 104, 191, 192, 271, 291, 295, 324, 334, 367, 399, 423, 433, 448, 454, 456, 502, 594, 646, 652, 653, 658, 659, 720, 721, 846, 875, 928, 984, 1047, 1050, 1052, 1054, 1055, 1056], "int64dtyp": 1056, "intact": [883, 1032], "integ": [1, 42, 54, 82, 87, 104, 191, 219, 237, 328, 329, 368, 372, 379, 380, 382, 387, 390, 394, 398, 399, 415, 416, 419, 420, 422, 423, 440, 443, 468, 470, 473, 478, 493, 502, 504, 507, 508, 509, 511, 514, 515, 518, 520, 521, 525, 528, 556, 565, 566, 567, 568, 569, 573, 574, 578, 588, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 638, 639, 650, 657, 661, 665, 671, 679, 681, 682, 684, 705, 720, 741, 806, 808, 809, 810, 811, 813, 815, 820, 821, 822, 825, 826, 828, 830, 833, 841, 844, 846, 849, 850, 851, 875, 883, 884, 889, 890, 891, 894, 904, 906, 918, 919, 920, 921, 926, 961, 962, 963, 967, 988, 994, 999, 1001, 1008, 1011, 1013, 1014, 1023, 1030, 1032, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "integr": [0, 76, 104, 170, 183, 208, 315, 329, 373, 383, 387, 388, 389, 391, 393, 399, 403, 420, 425, 452, 721, 761, 792, 973, 997, 1005, 1022, 1026, 1040, 1042, 1043, 1051, 1052, 1056], "intel": [998, 1017], "intelex": [403, 1017], "intellectu": 190, "intellig": [97, 173, 271, 359, 382, 415, 422, 454, 561, 562, 644, 702, 731, 840, 867, 868, 999, 1010, 1018, 1022], "intend": [91, 92, 128, 220, 352, 359, 385, 386, 387, 392, 397, 399, 419, 474, 588, 679, 705, 879, 880, 890, 908, 993, 994, 998, 1002, 1009], "intens": [100, 127, 298, 382, 386, 397, 399, 420, 449, 453, 465, 613, 614, 638, 639, 808, 987, 1005, 1022, 1047], "intention": 63, "inter": [1, 74, 145, 368, 422, 722], "interact": [1, 41, 152, 154, 188, 219, 244, 248, 278, 328, 384, 386, 387, 389, 391, 397, 399, 400, 409, 416, 565, 566, 567, 568, 638, 639, 885, 889, 987, 990, 994, 995, 996, 1003, 1005, 1008, 1016, 1018, 1041, 1046, 1053, 1054], "interaction_cst": [192, 332, 422, 567, 568, 1054], "interaction_onli": [42, 885, 994, 1008], "interactiveshellapp": 391, "intercept": [127, 211, 228, 236, 356, 399, 488, 489, 490, 555, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 885, 889, 892, 910, 911, 917, 994, 996, 998, 1003, 1012, 1013, 1042, 1044, 1048, 1049], "intercept_": [201, 209, 211, 228, 254, 346, 353, 356, 387, 399, 488, 489, 490, 555, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 910, 911, 912, 913, 914, 915, 916, 992, 994, 1012, 1013, 1039, 1046, 1051, 1053, 1056], "intercept_hidden_": 866, "intercept_init": [672, 673, 674, 682, 684], "intercept_sc": [212, 664, 665, 910, 911, 917, 994, 1013], "intercept_visible_": 866, "intercepts_": [867, 868, 1002], "interchang": [1017, 1056], "interclass": 74, "interdepend": 521, "interest": [0, 42, 44, 51, 76, 78, 84, 89, 96, 100, 105, 138, 146, 151, 159, 170, 173, 180, 186, 191, 192, 193, 208, 219, 220, 221, 237, 240, 251, 270, 271, 274, 277, 278, 280, 286, 291, 295, 335, 348, 355, 360, 367, 372, 380, 382, 385, 390, 391, 393, 397, 400, 414, 415, 417, 420, 423, 425, 499, 500, 506, 510, 516, 652, 653, 910, 988, 994, 995, 998, 1003, 1004, 1005, 1018, 1022, 1028, 1030, 1031, 1039, 1056], "interestingli": [110, 173, 1008], "interfac": [1, 41, 138, 188, 378, 379, 386, 387, 394, 397, 399, 419, 425, 426, 447, 451, 456, 502, 559, 705, 806, 809, 810, 820, 870, 871, 896, 983, 987, 1001, 1013, 1017, 1018, 1022, 1039, 1041, 1044, 1045, 1047, 1048, 1053, 1055], "interfer": [334, 1049], "interim": 1046, "interior": [221, 676, 994, 1054], "interleav": [1, 381, 397, 528], "intermedi": [42, 45, 86, 89, 143, 151, 256, 348, 397, 423, 565, 566, 625, 870, 998, 1051, 1057], "intern": [0, 42, 62, 104, 114, 129, 144, 149, 152, 154, 164, 173, 176, 186, 188, 219, 253, 271, 291, 298, 300, 317, 324, 339, 361, 368, 373, 380, 382, 387, 391, 394, 397, 399, 406, 411, 412, 415, 419, 420, 422, 423, 424, 425, 426, 443, 445, 450, 471, 474, 517, 540, 541, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 599, 600, 616, 617, 646, 649, 652, 658, 674, 678, 682, 684, 702, 714, 737, 740, 764, 765, 789, 836, 850, 851, 866, 867, 868, 870, 871, 875, 889, 891, 905, 906, 908, 910, 911, 912, 915, 918, 919, 920, 921, 994, 995, 996, 998, 1001, 1004, 1008, 1010, 1013, 1014, 1019, 1022, 1039, 1042, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "internet": [380, 390, 1008, 1030], "interoper": [409, 425, 1018], "interp": [286, 287, 348], "interp1d": [659, 669, 690], "interp_tpr": 287, "interpol": [42, 52, 67, 74, 84, 85, 88, 92, 114, 119, 124, 127, 179, 182, 188, 197, 198, 210, 235, 249, 255, 286, 292, 302, 303, 310, 316, 338, 348, 425, 641, 651, 659, 669, 678, 690, 706, 713, 853, 861, 871, 885, 889, 989, 994, 998, 1008, 1019, 1046, 1051], "interpret": [42, 63, 154, 173, 182, 188, 189, 190, 192, 215, 219, 220, 224, 235, 237, 270, 277, 279, 280, 291, 316, 319, 322, 329, 359, 361, 372, 383, 385, 386, 391, 393, 394, 399, 402, 413, 415, 416, 421, 423, 458, 470, 471, 473, 502, 547, 578, 617, 645, 649, 659, 678, 679, 697, 698, 701, 707, 735, 759, 764, 765, 789, 798, 799, 812, 821, 833, 834, 836, 839, 871, 883, 890, 992, 994, 998, 999, 1005, 1006, 1008, 1014, 1017, 1019, 1023, 1031, 1039, 1040, 1044, 1047, 1052, 1053, 1054], "interquartil": [256, 888, 900], "interquartile_rang": 888, "interrog": 423, "interrupt": 994, "intersect": [278, 345, 412, 415, 744], "interv": [1, 51, 63, 137, 154, 182, 188, 203, 219, 220, 221, 237, 277, 380, 399, 413, 419, 422, 425, 444, 445, 522, 523, 524, 563, 564, 566, 568, 570, 571, 641, 642, 644, 683, 748, 754, 756, 810, 827, 836, 873, 875, 889, 912, 913, 914, 934, 990, 994, 998, 1008, 1014, 1019, 1046, 1050], "intervent": [89, 191], "intl": [63, 419], "intoler": 271, "intolerant_classifi": 271, "intp": [430, 457, 459], "intra": [42, 594, 597, 798, 799], "intract": [90, 420, 995, 1003], "intric": [223, 518], "intricaci": 385, "intrins": [198, 399, 420, 422, 1001, 1006, 1012, 1051], "introduc": [42, 110, 112, 113, 129, 154, 172, 188, 193, 198, 203, 223, 245, 250, 253, 256, 258, 284, 332, 333, 361, 378, 381, 383, 385, 387, 389, 390, 393, 397, 399, 406, 413, 415, 417, 419, 420, 422, 423, 439, 447, 448, 449, 451, 453, 455, 465, 470, 474, 488, 489, 490, 491, 502, 510, 521, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 561, 562, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 664, 670, 691, 692, 694, 695, 698, 836, 854, 859, 862, 866, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 904, 908, 992, 994, 997, 1000, 1001, 1004, 1008, 1010, 1012, 1013, 1019, 1023, 1030, 1039, 1040, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1057], "introduct": [172, 237, 275, 385, 414, 419, 420, 423, 596, 794, 795, 845, 849, 994, 996, 998, 1000, 1016, 1024, 1030, 1033, 1034], "introductori": [151, 174, 175, 180, 181, 184, 188, 245, 425, 617, 628, 1019, 1022], "introspect": [42, 44, 104, 391, 565, 566, 595, 1008, 1028], "intrus": 380, "intuit": [42, 51, 66, 78, 86, 96, 129, 138, 141, 148, 168, 175, 191, 192, 220, 221, 241, 246, 278, 295, 303, 320, 323, 345, 348, 352, 360, 385, 399, 413, 415, 417, 419, 421, 651, 788, 789, 790, 793, 881, 910, 912, 913, 915, 916, 990, 994, 995, 998, 999, 1005, 1008, 1009, 1013, 1022, 1030, 1032, 1039], "inv": [110, 114, 314], "inv_kw_arg": 874, "invalid": [1, 46, 219, 399, 452, 584, 677, 718, 780, 994, 998, 1045, 1047, 1049, 1050, 1052, 1053, 1055], "invalidparametererror": 998, "invalu": 1022, "invari": [74, 382, 399, 415, 425, 620, 695, 753, 824, 825, 994, 995, 998, 1013, 1018, 1047, 1050, 1051, 1052], "invent": 1001, "inventor": 1000, "inventori": 1022, "invers": [1, 7, 50, 88, 109, 110, 111, 138, 188, 267, 284, 286, 293, 301, 348, 360, 361, 377, 399, 416, 418, 419, 420, 422, 423, 427, 451, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 533, 539, 540, 541, 545, 547, 549, 563, 567, 570, 595, 596, 597, 634, 650, 651, 664, 665, 672, 674, 680, 681, 682, 683, 684, 686, 730, 749, 758, 803, 804, 852, 853, 860, 861, 867, 868, 870, 874, 877, 883, 884, 886, 902, 903, 910, 911, 912, 915, 916, 918, 920, 936, 992, 994, 998, 1001, 1002, 1008, 1012, 1013, 1019, 1030, 1032, 1033, 1034, 1039, 1042, 1047, 1050, 1051, 1053, 1057], "inverse_components_": [902, 903, 1010, 1053], "inverse_func": [108, 191, 416, 471, 874, 1008, 1047, 1057], "inverse_transform": [43, 85, 88, 129, 170, 302, 360, 406, 420, 423, 451, 471, 488, 489, 490, 539, 540, 541, 544, 545, 546, 547, 549, 550, 587, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 636, 806, 809, 810, 820, 870, 874, 875, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 890, 902, 903, 1008, 1009, 1010, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "invert": [114, 129, 170, 240, 360, 361, 397, 417, 423, 636, 695, 699, 1008, 1048], "invert_yaxi": [187, 361], "invest": [391, 1022], "investig": [129, 134, 138, 187, 355, 385, 409, 994], "invit": 389, "invok": [387, 537, 543, 545, 551, 552, 573, 575, 576, 805, 828, 831, 907, 1051, 1056], "involv": [323, 325, 327, 335, 348, 352, 372, 374, 380, 385, 389, 399, 400, 409, 418, 425, 705, 838, 839, 995, 999, 1001, 1005, 1006, 1013, 1017, 1022, 1030, 1047], "invscal": [314, 682, 683, 684, 867, 868, 1012], "io": [379, 382, 385, 389, 391, 393, 399, 698, 1017, 1034, 1037], "ioangatop": 1056, "ioanni": 740, "ioerror": 1055, "iofal": 1053, "ion": 1054, "ionescu": [648, 990, 1049], "iowa": [148, 159, 256], "ipca": [1, 128, 539, 540], "ipdb": [393, 1032], "ipm": 676, "ipynb": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367], "ipython": [387, 390, 391, 393, 1024, 1032], "ipython_config": 391, "iq": 190, "iqbal": 1051, "iqr": [256, 888, 900], "ir": [249, 420, 596, 732, 762, 845, 849, 996, 998], "iren": [1054, 1055], "iri": [1, 49, 54, 65, 66, 68, 75, 79, 107, 118, 123, 126, 128, 134, 137, 138, 139, 140, 142, 157, 160, 166, 169, 174, 176, 179, 188, 196, 197, 202, 211, 212, 216, 251, 260, 264, 270, 282, 283, 286, 287, 293, 301, 307, 309, 313, 314, 320, 329, 336, 341, 343, 344, 346, 348, 350, 351, 352, 362, 363, 365, 366, 367, 378, 379, 398, 409, 415, 416, 419, 420, 422, 453, 502, 510, 547, 555, 559, 563, 570, 616, 628, 637, 682, 806, 820, 905, 906, 907, 910, 915, 918, 922, 923, 924, 987, 988, 992, 997, 998, 1001, 1005, 1008, 1011, 1012, 1013, 1014, 1019, 1023, 1030, 1031, 1034, 1052], "iris": [120, 283, 284, 1029], "iris_61": 379, "iris_969": 379, "iris_i": 1030, "iris_version_3": 379, "iris_x": 1030, "iris_x_test": 1030, "iris_x_train": 1030, "iris_y_test": 1030, "iris_y_train": 1030, "irreduc": [141, 998], "irregular": [180, 352, 415, 1001], "irregularities_kernel": 180, "irrelev": [168, 203, 368, 391, 417, 422, 424, 610, 746, 998], "irrespect": [219, 250, 286, 298, 612], "irvin": 382, "is_categor": 638, "is_categorical_": [567, 568], "is_classifi": [1, 387, 399], "is_data_valid": [677, 994], "is_fit": [1, 982], "is_fitted_": [429, 432, 434, 437, 438], "is_inli": [475, 569, 856], "is_leav": 367, "is_max_test_scor": 106, "is_model_valid": [677, 994], "is_multilabel": [1, 394, 1056], "is_paramet": 986, "is_pypi": 1057, "is_regressor": [1, 399], "is_scalar_nan": 1052, "is_sh": 288, "is_split_nod": 367, "is_stationari": [183, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "isa": 56, "isaac": [1045, 1046, 1048, 1049, 1056], "isaack": 1052, "isaactrost": 1056, "isakov": 1051, "isbn": [382, 415, 994], "isclos": 54, "isdigit": [56, 423], "ish": 68, "ishaan": 1052, "ishan": [1052, 1053], "ishank": [1044, 1045, 1046], "ishikawa": [1051, 1052], "isin": [293, 338], "isinst": [69, 147, 237, 399], "islic": [46, 78, 96], "ism": 1043, "isn": [173, 327, 359, 361, 368, 373, 385, 393, 521, 567, 568, 600, 800, 809, 810, 883, 1001, 1013, 1049], "iso": [121, 174, 188, 231, 241, 616, 619, 620, 1019], "iso_reg": 641, "isoformat": 54, "isol": [1, 148, 155, 246, 256, 360, 383, 391, 403, 569, 856, 914, 1048, 1049], "isolationforest": [1, 137, 188, 222, 246, 256, 293, 637, 836, 914, 1004, 1019, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056], "isolationforestifittedisolationforest": 155, "isomap": [1, 50, 86, 143, 188, 238, 241, 243, 250, 308, 327, 331, 422, 508, 550, 555, 572, 695, 696, 697, 698, 859, 871, 880, 903, 1001, 1019, 1033, 1034, 1047, 1049, 1052, 1053, 1054, 1055, 1056], "isomap__n_neighbor": 327, "isometr": [239, 694, 696, 697, 698, 995], "isoton": [1, 60, 61, 108, 188, 245, 443, 641, 642, 643, 663, 933, 1019, 1020, 1034, 1040, 1041, 1042, 1043, 1045, 1052, 1055], "isotonic_regress": [1, 641, 1052], "isotonicregress": [1, 249, 989, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1053, 1054, 1055], "isotonicregression0": 641, "isotrop": [1, 69, 89, 91, 95, 129, 177, 179, 239, 241, 415, 417, 425, 518, 525, 538, 621, 625, 626, 628, 629], "isotropi": 420, "isr": 424, "issam": [0, 313, 1045], "issu": [0, 1, 42, 61, 111, 117, 219, 237, 282, 325, 373, 379, 388, 389, 390, 393, 394, 397, 399, 400, 402, 403, 406, 409, 411, 415, 417, 418, 423, 455, 458, 468, 479, 488, 489, 490, 540, 545, 549, 579, 594, 595, 597, 617, 633, 697, 701, 775, 881, 886, 898, 937, 987, 988, 995, 1006, 1008, 1013, 1017, 1018, 1021, 1031, 1032, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1056, 1057], "issuenumb": 393, "ist": 424, "isupp": 423, "isuru": 1051, "itakura": [420, 544, 546, 553, 1046], "itali": 382, "item": [1, 46, 47, 48, 49, 50, 51, 54, 56, 65, 77, 89, 108, 142, 144, 148, 151, 159, 191, 217, 221, 227, 240, 252, 253, 255, 264, 274, 280, 331, 338, 360, 378, 385, 386, 387, 394, 416, 470, 532, 567, 568, 594, 595, 597, 638, 818, 883, 905, 906, 925, 926, 952, 990, 1011, 1018, 1023], "item_idx": 318, "itemgett": 56, "iter": [1, 46, 53, 54, 66, 80, 105, 114, 124, 127, 138, 141, 144, 147, 149, 150, 152, 153, 154, 173, 184, 186, 188, 198, 199, 227, 234, 264, 265, 269, 272, 285, 288, 313, 315, 316, 320, 329, 338, 340, 341, 348, 385, 387, 391, 393, 394, 398, 399, 410, 415, 418, 420, 422, 424, 427, 443, 446, 447, 449, 451, 453, 454, 455, 458, 460, 465, 467, 468, 469, 477, 478, 484, 488, 489, 490, 521, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 559, 560, 565, 566, 567, 568, 570, 573, 574, 587, 588, 594, 595, 597, 599, 600, 608, 616, 633, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 844, 859, 866, 867, 868, 869, 870, 874, 881, 883, 885, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 925, 946, 947, 953, 954, 955, 956, 964, 988, 994, 995, 997, 998, 1001, 1002, 1003, 1011, 1012, 1013, 1014, 1018, 1019, 1022, 1027, 1031, 1032, 1034, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "iter_minibatch": 46, "iter_offset": 1053, "iter_offset_": 1053, "iterated_pow": [105, 538, 541, 547, 1045], "iterative_impute_scor": 187, "iterativeimput": [1, 185, 187, 188, 406, 496, 571, 586, 634, 635, 636, 645, 651, 678, 832, 853, 871, 1019, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "itergrid": 1041, "itertool": [46, 76, 78, 96, 160, 192, 204, 263, 268, 277, 284, 286, 422], "ith": [502, 780, 784, 846, 867, 868, 883, 884], "ith_cluster_silhouette_valu": 94, "itk": [1049, 1050, 1051], "its": [0, 1, 6, 24, 42, 47, 50, 51, 52, 56, 62, 63, 69, 71, 89, 99, 100, 110, 112, 114, 117, 120, 121, 122, 129, 136, 138, 144, 147, 149, 151, 154, 164, 173, 175, 180, 182, 191, 192, 194, 196, 198, 208, 232, 236, 237, 241, 246, 253, 255, 256, 258, 260, 262, 267, 268, 276, 280, 282, 284, 286, 291, 298, 300, 304, 305, 320, 330, 340, 345, 352, 357, 359, 360, 363, 367, 368, 373, 374, 378, 379, 380, 381, 385, 386, 387, 389, 390, 393, 397, 398, 399, 400, 403, 406, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 431, 446, 448, 450, 452, 456, 460, 462, 466, 469, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 503, 509, 529, 537, 539, 540, 541, 543, 544, 546, 547, 548, 550, 556, 559, 561, 562, 563, 564, 565, 566, 570, 571, 572, 589, 593, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 650, 651, 677, 678, 680, 691, 692, 693, 694, 698, 702, 705, 714, 731, 735, 736, 742, 743, 747, 784, 787, 789, 803, 804, 806, 831, 838, 839, 841, 852, 853, 854, 856, 857, 858, 860, 861, 862, 869, 870, 874, 879, 882, 883, 885, 902, 903, 906, 910, 911, 918, 920, 930, 931, 936, 942, 968, 987, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1017, 1022, 1023, 1025, 1027, 1030, 1031, 1032, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "itsaphel": 1057, "itself": [26, 60, 63, 83, 89, 138, 151, 155, 192, 203, 217, 253, 259, 271, 286, 298, 325, 348, 360, 372, 374, 384, 385, 387, 389, 399, 406, 409, 413, 415, 426, 446, 447, 450, 451, 452, 475, 476, 477, 478, 479, 480, 481, 482, 533, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 557, 572, 575, 589, 598, 601, 602, 604, 605, 606, 608, 609, 645, 646, 647, 648, 649, 651, 661, 695, 697, 798, 799, 845, 846, 847, 848, 849, 850, 851, 855, 863, 864, 875, 876, 877, 905, 906, 955, 990, 994, 995, 997, 1001, 1002, 1006, 1017, 1043, 1054], "iv": [190, 998], "ivan": [1047, 1048, 1051, 1054, 1057], "ivanllt": 1054, "iver": 1045, "iverson": 994, "ivicajov": 1042, "ivl": 194, "ivt": 540, "iv\u00e1n": [1046, 1052], "iwhalv": 1052, "iwona": 1056, "ix": [49, 286, 354], "iy_j": 1008, "iyer": 1050, "izadifar": 1057, "j": [0, 49, 54, 71, 72, 74, 77, 95, 103, 111, 112, 113, 138, 141, 142, 153, 171, 176, 187, 192, 231, 242, 255, 262, 276, 277, 282, 288, 302, 308, 311, 322, 332, 367, 373, 379, 380, 382, 389, 391, 397, 404, 412, 413, 415, 417, 419, 420, 422, 423, 425, 426, 443, 446, 450, 452, 459, 460, 475, 480, 504, 519, 522, 523, 524, 526, 534, 537, 540, 542, 543, 544, 546, 547, 553, 559, 565, 566, 599, 600, 638, 639, 643, 650, 651, 654, 655, 672, 673, 675, 686, 694, 695, 696, 698, 699, 700, 702, 711, 714, 716, 720, 722, 724, 727, 729, 730, 732, 761, 762, 764, 765, 780, 784, 794, 795, 798, 799, 839, 840, 847, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 881, 890, 891, 918, 919, 987, 988, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1032, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "j0rd1smit": 1051, "ja": [418, 1046], "jaccard": [1, 297, 412, 456, 463, 705, 709, 725, 735, 740, 744, 784, 785, 786, 802, 1001, 1047, 1048], "jaccard_scor": [1, 297, 709, 735, 740, 802, 998, 1048, 1051], "jaccard_similarity_scor": [1041, 1043, 1048], "jaccarddist": 705, "jack": [1041, 1044, 1052, 1053, 1054, 1055, 1057], "jacklangerman": [1047, 1048], "jackman": 1040, "jackmartin": 1045, "jackson": [1045, 1046, 1048], "jacob": [0, 405, 1044, 1045, 1046], "jacobi": 1054, "jacobsen": 1042, "jacopo": [1047, 1048], "jacqu": [1040, 1042], "jaehong": 1049, "jaehyun": 1051, "jaewon": 1047, "jai": [1049, 1053], "jaidev": 1044, "jaim": 1049, "jain": [1045, 1046, 1047, 1051, 1053, 1054], "jair": 1046, "jake": [0, 49, 182, 220, 239, 265, 303, 311, 405, 1016, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1053], "jakemick": 1041, "jakevdp": [303, 311], "jakhar": 1051, "jakirkham": [1046, 1047, 1048, 1054, 1055], "jakub": 1056, "jakubek": [1052, 1053], "jalali": [0, 99, 356, 400, 404, 409, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "jalexand3r": 1053, "jamaoui": [1047, 1048, 1051], "jame": [0, 382, 419, 840, 999, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1055, 1056], "jamestwebb": [1041, 1042], "jami": 1047, "jamieson": 987, "jan": [0, 60, 61, 62, 63, 175, 176, 178, 179, 180, 181, 182, 184, 220, 252, 295, 404, 889, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1055], "jana": 1049, "janet": 382, "jane\u017e": [1040, 1041], "janfidor": [1054, 1055], "janhang": 1049, "janin": 1046, "janna": 1045, "jannik": 1052, "janso": 1039, "jansson": [1042, 1054], "januari": [383, 385, 1039, 1040, 1049, 1051, 1054, 1056], "janvanrijn": [1047, 1048], "jaqu": [0, 66, 79, 85, 87, 106, 119, 120, 202, 215, 216, 217, 241, 353, 355, 405, 1039, 1040, 1041, 1042], "jardim": 1052, "jare": 1054, "jarfa": 1045, "jarir": 1052, "jarkko": 702, "jarosch": 1041, "jaroslaw": 1046, "jarrod": [0, 405, 1048, 1055, 1056], "jarvelin": [732, 762, 998], "jaskowiak": 452, "jason": [43, 420, 541, 906, 1045, 1047, 1051, 1054], "jatin": [1043, 1045], "jauhar": 1053, "jauvin": 1040, "java": [415, 448, 1017], "javascript": 1017, "javier": [1043, 1057], "jawahar": 990, "jax": 1056, "jay": 1046, "jaya": 1053, "jayaratn": [1050, 1051, 1054, 1055], "jayratn": 1051, "jayzed82": 1046, "jb": [1055, 1056], "jbdelafoss": 1046, "jbirch": [415, 448], "jblackburn": 1045, "jc": [1046, 1047], "jdcaballero": 1043, "jdethuren": [1047, 1048], "je": 1053, "jean": [1039, 1042, 1043, 1044, 1045, 1046, 1052], "jeann": 1053, "jeanselm": 1049, "jeb": 1047, "jeevan": 1051, "jeff": [1043, 1045, 1052, 1053], "jeffrei": [1042, 1045], "jeffrey04": [1044, 1045], "jelfner": 1053, "jell": 1042, "jen": [664, 1047], "jen09": 420, "jenatton": 420, "jenni": 1053, "jennif": 1052, "jensen": [1045, 1051], "jeong": 1049, "jeremi": [1022, 1044, 1045, 1046, 1047, 1050, 1051], "jeremiedbb": [1047, 1048, 1049], "jeremynixon": 1045, "jeroen": 1045, "jeroenpeterbo": 1051, "jeroko": 1046, "jeromedock": 1049, "jerphanion": [0, 404, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "jerryzhu": 905, "jesper": 1049, "jess": [841, 999, 1052], "jess010": 1042, "jessica": 1045, "jessicakk0711": 1055, "jesu": [56, 359, 360], "jet": 101, "jevnik": 1044, "jewalikar": 1045, "jf": 1048, "jfraj": 1044, "jha": [1043, 1049, 1053], "jhay": 1051, "jhm": [60, 61, 62, 63, 175, 176, 178, 179, 180, 181, 182, 184, 252], "jhun": 480, "jia": 1045, "jiacheng": 1046, "jiali": 1044, "jian": 415, "jianbo": [415, 458, 468, 697], "jiang": [413, 1043, 1050], "jianzhu": 1052, "jiawei": [1055, 1056, 1057], "jiaxiang": 1051, "jie": [1047, 1048, 1051], "jiefangxuanyan": 1052, "jigna": 1051, "jihan": 1053, "jill": 1045, "jim": 1041, "jim0421": 1051, "jimenez": [1052, 1053], "jimmi": [867, 868, 1002, 1045, 1047], "jim\u00e9nez": [0, 375, 1047, 1050, 1051, 1052, 1053, 1054], "jin": [645, 1050, 1051], "jindal": 1051, "jinkun": 1047, "jiongyan": 1047, "jiquan": 1002, "jirka": 1053, "jiten": 1054, "jitendra": [415, 458, 468, 697], "jitter": [138, 656, 660, 1050], "jiyuan": 1045, "jjabl": 1047, "jjmistri": 1050, "jk": 995, "jkarolczak": 1054, "jkleint": [1046, 1047], "jl": [250, 903], "jmlr": [0, 415, 672, 673, 682, 710, 994, 1013], "jmlr_2014": 698, "jmontoyam": 1046, "jnboehm": 1052, "jnt": 419, "joaak": [1047, 1048], "joan": [1046, 1047, 1048, 1049], "joanna": 1049, "joaquin": 1051, "job": [146, 154, 191, 265, 271, 385, 389, 393, 422, 426, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 474, 478, 537, 541, 542, 543, 545, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 608, 613, 614, 616, 640, 645, 663, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 869, 872, 905, 906, 908, 964, 1022, 1025], "joblib": [1, 40, 76, 88, 105, 144, 298, 328, 380, 383, 385, 388, 394, 397, 399, 403, 408, 416, 426, 443, 447, 450, 451, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 514, 515, 537, 541, 542, 543, 545, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 600, 608, 613, 614, 616, 638, 640, 645, 653, 657, 659, 661, 663, 664, 665, 667, 669, 671, 672, 674, 682, 685, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 856, 858, 860, 861, 863, 864, 869, 870, 871, 872, 905, 906, 964, 965, 968, 983, 998, 1018, 1034, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1054, 1056, 1057], "joblib_start_method": 397, "jochen": 1041, "jock": 103, "joe": 1044, "joei": 1055, "joel": [0, 105, 400, 404, 423, 541, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "johann": [1041, 1042, 1047, 1049, 1050, 1053], "johanna": [113, 1057], "johannah": 1045, "johanwork": 1052, "john": [382, 423, 542, 714, 741, 775, 885, 912, 913, 915, 916, 988, 994, 998, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1052, 1054, 1055, 1056, 1057], "johnathanpi": [1054, 1055], "johnson": [36, 89, 188, 245, 318, 322, 377, 495, 508, 886, 898, 902, 903, 904, 1008, 1015, 1019, 1034, 1047, 1053, 1055], "johnson_lindenstrauss_min_dim": [1, 250, 1010, 1040], "johnston": [173, 382, 994, 1048], "johnstott": 1047, "johnthagen": 1054, "johnwon": 322, "join": [49, 50, 56, 89, 186, 237, 277, 320, 380, 400, 469, 1021, 1032, 1039, 1047], "joint": [151, 188, 192, 197, 203, 205, 206, 208, 218, 239, 271, 416, 617, 658, 668, 698, 845, 846, 847, 848, 849, 910, 994, 995, 999, 1003, 1005, 1009, 1019, 1039], "jointli": [24, 213, 284, 415, 420, 994], "joli": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045], "jon": [359, 1046, 1049, 1050, 1052, 1053, 1056], "jona": [134, 1051, 1056], "jonatan": 1047, "jonathan": [380, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1055], "joncral": 1045, "jone": [0, 380, 405, 1039], "jong": 1046, "joona": 1039, "jordal": 1045, "jordan": [415, 420, 697, 803, 1049, 1050, 1053, 1054], "jordi": 1045, "jorg": [664, 1042, 1051, 1053], "jori": [0, 404, 1046, 1047, 1048, 1051, 1052], "jose": [173, 382, 664, 998, 1047, 1049], "joseph": [1042, 1043, 1044, 1045, 1051, 1053, 1054], "josephsalmon": [1046, 1047, 1048], "josh": [423, 1046], "joshi": [1045, 1047, 1053, 1056, 1057], "joshua": [332, 380, 1041, 1042, 1044, 1045, 1051, 1054, 1055], "joshuakennethjon": 1048, "jos\u00e9": [729, 1042, 1052, 1057], "jotasi": 1047, "joudet": [1046, 1047], "journal": [0, 113, 192, 277, 283, 295, 379, 380, 382, 413, 415, 417, 422, 458, 468, 479, 540, 547, 633, 641, 651, 695, 698, 699, 711, 721, 737, 740, 741, 764, 765, 792, 835, 840, 886, 898, 987, 988, 992, 994, 995, 996, 999, 1005, 1010, 1012, 1013], "jovan": [1053, 1054], "joydeep": 415, "jo\u00e3o": 1054, "jo\u00ebl": 1047, "jpcar": 1057, "jpeg": [379, 380, 499, 500], "jpfrancoia": [1045, 1046], "jpg": [82, 512, 590, 593], "jpienaar": 1057, "jpm": 50, "jpmml": 1017, "jpmorgan": [50, 1022], "jr": 994, "jrenni": 847, "jrfiedler": 1045, "jschendel": [1046, 1047], "jschuerz": 1053, "json": [379, 385, 403], "jth": [780, 784], "juan": [0, 375, 1039, 1050, 1051, 1052, 1053, 1054], "juanfe88": 1054, "judg": [92, 225, 415, 1027], "judgment": [268, 998], "judithabk6": 1050, "juergen": [1049, 1054], "jul": 286, "juli": [173, 382, 424, 740, 891, 1008, 1042, 1046, 1047, 1048], "julia": [415, 723, 743, 801], "julian": [1046, 1047, 1057], "juliankahnert": 1045, "juliaschoepp": [1054, 1055], "juliathebrav": 1045, "julien": [0, 404, 664, 994, 1022, 1039, 1042, 1046, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "juliet": 1047, "julietcl": 1047, "julio": 1052, "julyrashchenko": 1052, "jumon": 1050, "jump": [42, 220, 318, 382, 385, 423, 889], "jumpi": 423, "june": [415, 995, 1045, 1055], "jung": [1046, 1050, 1054], "jungkook": 1044, "jungl": 995, "jupyt": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 386, 387, 416, 474, 908, 1014, 1017, 1018, 1050, 1053], "jupyterlit": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367], "jurgen": 1022, "juri": 572, "jurman": 749, "just": [42, 51, 66, 103, 117, 124, 144, 148, 154, 173, 209, 216, 240, 251, 271, 277, 284, 288, 298, 313, 348, 359, 360, 367, 368, 380, 384, 385, 386, 387, 389, 390, 393, 397, 398, 399, 412, 414, 415, 416, 419, 422, 424, 427, 474, 539, 541, 548, 552, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 585, 590, 616, 617, 652, 658, 663, 664, 666, 668, 672, 673, 674, 682, 683, 684, 812, 829, 859, 867, 868, 987, 994, 997, 998, 999, 1002, 1006, 1008, 1012, 1018, 1030, 1039, 1043, 1045, 1047, 1051, 1055], "justglow": 1048, "justif": 682, "justifi": [385, 391, 413, 571], "justin": [1041, 1047, 1051], "jvm": 1052, "jygerardi": [1054, 1055], "j\u00e9r\u00e9mie": [0, 404, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "j\u00e9r\u00f4me": [1048, 1049, 1050, 1056, 1057], "j\u00eann": 1045, "j\u00f6rg": [415, 456, 463, 1047], "j\u00f6rn": 1046, "j\u00f8rgensen": [994, 1056], "k": [1, 32, 44, 49, 50, 53, 54, 56, 60, 62, 65, 66, 70, 71, 72, 74, 76, 80, 83, 84, 87, 89, 90, 94, 97, 99, 107, 108, 112, 120, 121, 122, 124, 127, 130, 131, 138, 140, 147, 151, 155, 157, 158, 160, 161, 164, 166, 169, 170, 173, 176, 178, 179, 183, 184, 187, 188, 191, 192, 193, 194, 199, 201, 202, 204, 213, 216, 221, 223, 231, 233, 250, 252, 254, 255, 256, 262, 265, 273, 277, 280, 281, 286, 287, 290, 291, 298, 300, 303, 304, 305, 306, 307, 309, 310, 311, 319, 320, 321, 322, 325, 327, 331, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 358, 359, 361, 367, 368, 373, 379, 380, 382, 385, 393, 394, 397, 399, 406, 411, 412, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 446, 449, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 468, 475, 478, 494, 508, 510, 512, 518, 529, 537, 543, 547, 550, 551, 552, 555, 556, 559, 561, 563, 564, 565, 587, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 637, 645, 646, 654, 656, 657, 659, 660, 661, 662, 664, 665, 669, 670, 671, 672, 673, 675, 685, 686, 688, 689, 690, 691, 692, 694, 697, 701, 702, 710, 711, 714, 723, 732, 743, 749, 762, 764, 765, 767, 772, 775, 780, 781, 782, 783, 785, 799, 800, 801, 803, 804, 807, 811, 813, 814, 815, 818, 821, 822, 824, 825, 827, 828, 834, 845, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 871, 875, 876, 877, 881, 882, 883, 885, 886, 890, 898, 903, 917, 925, 933, 942, 947, 972, 987, 988, 990, 991, 992, 994, 995, 996, 997, 1000, 1002, 1003, 1004, 1006, 1011, 1012, 1013, 1014, 1017, 1019, 1027, 1033, 1034, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "k0": 992, "k1": [425, 627, 630], "k1__": 425, "k1__constant_valu": 179, "k1__k1": 425, "k1__k1__constant_valu": 425, "k1__k1__constant_value_bound": 425, "k1__k2": 425, "k1__k2__length_scal": [181, 425], "k1__k2__length_scale_bound": 425, "k2": [425, 627, 630], "k2__": 425, "k2__length_scal": 425, "k2__length_scale_bound": 425, "k_": [412, 425, 622, 625, 627, 630, 780, 990, 1008], "k_1": [1, 425, 627, 630], "k_2": [1, 425, 627, 630], "k_best": [598, 907, 1011, 1056], "k_diag": [618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "k_fit_all_": 876, "k_fit_rows_": 876, "k_fold": [164, 1027], "k_gradient": [618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631], "k_init": [449, 465], "k_mean": [1, 98, 394, 399, 1031, 1047, 1055], "k_means_cluster_cent": 98, "k_means_elkan": 1047, "k_means_iris_3": 79, "k_means_iris_8": 79, "k_means_iris_bad_init": 79, "k_means_label": 98, "k_new": 876, "k_ret": [850, 851], "k_true": [850, 851], "ka00ri": [1054, 1055], "kachaiev": 1056, "kaczmarzyk": 1056, "kadatatlu": 1052, "kadota": 1053, "kaggl": [159, 398], "kahni": 1051, "kai": [382, 569, 1004, 1046], "kaicheng": 1043, "kaichogami": 1045, "kailasa": [1053, 1054], "kaim": [867, 868], "kaiser": [420, 538], "kakati": 1054, "kalli": [1047, 1048], "kalyan": 1045, "kamalakerdadi": [1044, 1045], "kamar": 1047, "kamchyev": 1056, "kamel": 1039, "kamishima": [1045, 1046], "kamm": 998, "kanai": [1045, 1046, 1047], "kanazu": [1054, 1055], "kanchimo": 1057, "kang": [1047, 1049], "kania": [1054, 1055], "kanika": 1049, "kanishk": 1054, "kanissh": 1054, "kanji": 1052, "kanniah": [1042, 1043], "kansal": 1045, "kapadni": 1054, "kapeln": [192, 1005], "kapoor": [1047, 1048], "kappa": [1, 542, 722], "kapur": 1046, "kar": 1045, "karan": [1046, 1047, 1048], "karayev": 1041, "karbownik": 1052, "karen": 1052, "karger": [847, 1000], "karhunen": 540, "karin": [633, 988], "karl": 1047, "karlo": [1056, 1057], "karnofski": 1046, "karnowski": 1051, "karol": 1042, "kartik": 1051, "karypi": 415, "kaseorg": 1049, "kashif": 1044, "kasim": 1043, "kaski": 702, "kasper": 1047, "kassa": [1054, 1055], "kastner": [0, 128, 405, 1041, 1042, 1043, 1050, 1051], "kat": 1046, "kataev": [1047, 1048], "kataki": [726, 740, 746, 998], "katarina": [1049, 1051], "katheleen": 379, "kathi": [1046, 1049], "kathleen": 1046, "kathryn": 1050, "kati": 1046, "katotten": 1053, "katrin": [1047, 1048], "katrina": [152, 1050], "katriopla": 1047, "katyal": 1049, "katz": [1044, 1051, 1052], "kaufmann": [1010, 1014, 1051], "kaushik": [1046, 1053, 1054, 1055, 1057], "kaushik94": 1042, "kawamura": 1052, "kawwa": 1052, "kayawari": 1052, "kaylani2": 1051, "kaynak": 382, "kazmar": 1043, "kb": [104, 191, 192, 271], "kbest": [105, 598], "kbin": [325, 332], "kbinsdiscret": [1, 42, 87, 122, 188, 199, 219, 237, 257, 317, 320, 325, 332, 518, 663, 873, 889, 919, 1008, 1019, 1047, 1051, 1052, 1053, 1055, 1057], "kbinsdiscretizer__n_bin": 320, "kcachegrind": 388, "kd": [303, 415, 421, 1001, 1047, 1048, 1049], "kd_tree": [426, 450, 452, 456, 463, 694, 695, 852, 853, 854, 855, 856, 858, 860, 861, 862, 1001, 1052, 1056], "kdd": [196, 380, 413, 443, 1010], "kdd06_rp": 903, "kddcup": [256, 378, 498, 1034], "kddcup99": [1, 380, 498], "kde": [190, 191, 291, 295, 302, 303, 311, 421, 855], "kdt": 1001, "kdtree": [1, 452, 456, 463, 694, 695, 850, 852, 853, 854, 855, 856, 858, 860, 861, 862, 1041, 1043, 1047, 1051, 1052, 1055, 1056], "ke": [422, 1050, 1051], "kearn": 1042, "keat": [1054, 1055], "keep": [0, 44, 51, 63, 76, 108, 127, 129, 144, 154, 172, 186, 190, 191, 192, 193, 194, 203, 219, 220, 221, 227, 237, 267, 272, 275, 322, 323, 330, 338, 348, 359, 360, 363, 368, 372, 373, 377, 385, 389, 398, 399, 413, 415, 416, 417, 418, 419, 420, 438, 456, 471, 488, 489, 490, 491, 499, 500, 540, 546, 547, 550, 553, 560, 562, 564, 566, 568, 571, 574, 576, 601, 604, 606, 609, 617, 640, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 682, 683, 684, 685, 714, 824, 843, 844, 853, 861, 867, 868, 906, 911, 913, 916, 919, 921, 994, 999, 1003, 1006, 1008, 1018, 1021, 1022, 1023, 1028, 1030, 1032, 1034, 1039, 1044, 1047, 1048, 1052, 1053, 1055, 1057], "keep_empty_featur": [633, 634, 636, 988, 1054], "keerti": 1054, "kegl": [60, 1043], "kei": [1, 46, 48, 51, 54, 56, 76, 144, 148, 159, 186, 190, 237, 253, 256, 259, 278, 280, 281, 328, 329, 330, 331, 332, 333, 334, 335, 374, 378, 387, 390, 391, 392, 397, 399, 400, 403, 406, 415, 416, 419, 425, 470, 478, 567, 568, 573, 574, 575, 576, 594, 597, 600, 623, 632, 638, 640, 665, 717, 806, 809, 810, 818, 820, 828, 833, 869, 870, 925, 935, 963, 1006, 1018, 1032, 1034, 1036, 1045, 1051, 1052, 1054, 1055, 1057], "keith": [359, 1039, 1044], "kekalainen": [732, 762, 998], "kelkar": [1046, 1047, 1049], "kelleh": [714, 998], "kelleher2015": 998, "kellei": [380, 1041, 1042], "keller": 1051, "kellogg": 50, "kellycarmodi": 1049, "kemal": [0, 57, 58, 1041, 1042], "kemaleren": [57, 58], "kemenad": 1050, "kemk": 1050, "ken": [382, 1032, 1041, 1048], "ken4git": 1053, "kendal": 1054, "kendrick": 1051, "kennedi": [1046, 1049, 1056], "kennel": 1050, "kenneth": [1010, 1039, 1040, 1045, 1046, 1053, 1054], "kenni": 1051, "kensuk": 1049, "kent": 56, "kenta": 1042, "kento": [1054, 1055], "kept": [63, 267, 298, 355, 379, 389, 409, 425, 502, 541, 544, 546, 547, 553, 603, 616, 617, 625, 626, 650, 701, 803, 804, 931, 1008, 1047, 1048], "kera": [397, 1017], "kerimov": [1046, 1047], "kernal": 129, "kernc": [1039, 1053, 1054], "kernel": [1, 22, 23, 26, 41, 44, 47, 48, 49, 65, 66, 85, 91, 107, 117, 123, 125, 133, 160, 166, 171, 174, 176, 177, 178, 179, 182, 186, 201, 202, 220, 228, 233, 245, 246, 254, 258, 270, 275, 277, 279, 282, 283, 287, 292, 293, 299, 304, 309, 323, 330, 339, 342, 343, 345, 346, 348, 349, 350, 351, 353, 356, 368, 372, 377, 387, 397, 399, 413, 415, 416, 419, 422, 423, 438, 446, 454, 458, 467, 468, 471, 488, 489, 490, 497, 502, 504, 508, 510, 520, 539, 540, 541, 547, 550, 560, 562, 564, 566, 568, 571, 574, 576, 599, 600, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 637, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 682, 683, 684, 685, 694, 696, 697, 698, 701, 741, 764, 765, 767, 772, 773, 780, 781, 782, 783, 806, 812, 817, 820, 836, 838, 843, 844, 850, 851, 853, 855, 861, 868, 870, 871, 876, 880, 882, 883, 885, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 919, 921, 987, 993, 994, 995, 998, 999, 1001, 1004, 1011, 1012, 1019, 1020, 1023, 1025, 1027, 1028, 1033, 1034, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "kernel_": [175, 176, 177, 178, 179, 180, 181, 182, 184, 616, 617], "kernel__length_scal": 175, "kernel__period": 175, "kernel_approxim": [1, 42, 186, 188, 195, 196, 233, 246, 251, 329, 644, 645, 646, 647, 648, 683, 764, 765, 876, 990, 1019, 1023, 1040, 1046, 1056], "kernel_dens": [850, 851], "kernel_label": 354, "kernel_metr": [1, 645, 646, 647, 648], "kernel_param": [458, 541, 645, 649], "kernel_pca": [43, 129, 416], "kernel_pca_": 694, "kernel_pca_back_proj_ax": 129, "kernel_pca_proj_ax": 129, "kernel_ridg": [1, 175, 252, 649, 999, 1043], "kernel_ridge_tun": 175, "kernel_svm": 251, "kernel_svm_scor": 251, "kernel_svm_tim": 251, "kernelapproximationkernel": 1025, "kernelcenter": [1, 411, 1008, 1049, 1053, 1055, 1056], "kerneldens": [1, 302, 303, 311, 421, 1041, 1047, 1048, 1052, 1053, 1054], "kernelpca": [1, 43, 416, 420, 539, 540, 547, 550, 694, 696, 698, 876, 1008, 1040, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "kernelridg": [1, 129, 175, 252, 678, 991, 999, 1043, 1056], "kertesz": 1053, "keshat": [672, 673, 994], "keshavan": 1049, "kesshi": [1049, 1050], "kevad": 1049, "kevin": [649, 1041, 1043, 1045, 1046, 1049, 1050, 1051, 1053, 1054, 1056], "kevlani": 1047, "keyber": 1057, "keyerror": [925, 1049], "keyword": [359, 379, 385, 387, 390, 392, 399, 415, 426, 429, 444, 450, 451, 456, 458, 463, 470, 473, 502, 509, 541, 544, 546, 565, 566, 573, 574, 575, 576, 626, 634, 637, 638, 645, 649, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 694, 698, 703, 704, 705, 706, 707, 708, 780, 784, 785, 786, 787, 798, 799, 812, 829, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 870, 874, 942, 965, 987, 995, 998, 1001, 1011, 1039, 1043, 1045, 1046, 1047, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "kf": [419, 811], "kfold": [1, 88, 144, 150, 164, 272, 282, 368, 419, 443, 478, 573, 574, 600, 608, 653, 657, 659, 661, 667, 669, 671, 679, 806, 809, 810, 812, 814, 816, 820, 825, 827, 829, 830, 831, 832, 833, 834, 835, 837, 841, 844, 891, 1027, 1040, 1041, 1042, 1044, 1045, 1047, 1049], "khaja": 1054, "khan": [1054, 1055], "khandelw": 1051, "khanduja": 1042, "khant": 1054, "kharsa": 1053, "khedkar": 1053, "khine": 1053, "kho": 1054, "khoo": 1051, "khosasi": 1052, "khosrow": 998, "khoual": 1052, "khwaja": 1054, "ki": 998, "kian": [142, 1044, 1054, 1055, 1056], "kid": 1008, "kieker": [1047, 1048], "kielczewski": [223, 1045], "kie\u00dfl": 1050, "kilian": [423, 1054, 1055], "kill": [359, 397], "killer": [385, 1022], "kilobyt": 87, "kilomet": 770, "kim": [994, 1047, 1048, 1049, 1053], "kimayoung": 1053, "kimberli": 50, "kimbinyi": 1051, "kind": [42, 47, 50, 51, 60, 61, 108, 132, 144, 159, 168, 191, 192, 267, 270, 271, 273, 286, 325, 329, 332, 345, 348, 359, 373, 374, 378, 380, 385, 387, 391, 397, 398, 413, 415, 418, 419, 420, 422, 423, 424, 494, 495, 509, 514, 515, 527, 530, 594, 638, 639, 707, 939, 994, 1000, 1005, 1014, 1042, 1051, 1053, 1054, 1055], "kindli": 0, "king": 935, "kingjr": 1045, "kingma": [867, 868, 1002], "kink": 208, "kiragu": 1051, "kiran": 1051, "kirandevraj": 1054, "kiril": [1046, 1047, 1049, 1051], "kirkbi": [1046, 1047], "kirkham": [1044, 1045, 1047], "kirthi": 1049, "kishan": 1056, "kishimoto": 1051, "kishor": 1052, "kislovskii": 1056, "kit": 397, "kitchen": [647, 990], "kj": [379, 1000], "kjell": 1045, "kk": 998, "kl": [420, 995, 1047], "kl_divergence_": [698, 1046], "klarup": 1046, "klass": 99, "klau": [420, 541, 876], "kleczewski": [297, 1046, 1047], "kleiber": 1053, "klevebr": 1047, "klima": 1054, "klopfer": 1048, "kluge": [1054, 1055], "kluger": [1, 412, 457, 519], "klusacek": 998, "km": [95, 331, 360], "kmatt10": 1052, "kmb": 50, "kmean": [1, 56, 57, 70, 77, 79, 80, 82, 84, 87, 91, 92, 95, 188, 265, 268, 321, 331, 360, 394, 406, 415, 446, 449, 454, 455, 458, 468, 518, 716, 798, 799, 803, 804, 875, 1001, 1008, 1018, 1019, 1031, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "kmeans_estim": 124, "kmeans_model": 415, "kmeans_plusplu": [1, 93, 415, 1051, 1056], "kmitl": 256, "kmode": 1017, "kms15": [1047, 1048], "knee": 415, "kneighbor": [323, 331, 852, 853, 854, 856, 858, 1001, 1043, 1048, 1052, 1053, 1054, 1055], "kneighbors_graph": [1, 73, 78, 96, 101, 298, 399, 415, 447, 451, 701, 852, 853, 854, 856, 858, 860, 861, 862, 864, 1001, 1039, 1043, 1048], "kneighborsclassifi": [1, 66, 160, 165, 300, 301, 306, 307, 323, 329, 331, 359, 422, 608, 853, 857, 858, 859, 860, 861, 999, 1001, 1030, 1039, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "kneighborsclassifierkneighbor": 1025, "kneighborsregressor": [1, 186, 255, 310, 331, 422, 576, 852, 858, 860, 861, 999, 1001, 1039, 1041, 1043, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "kneighborstransform": [1, 298, 300, 327, 698, 862, 1001, 1049, 1053, 1054], "knew": 1031, "knight": 324, "knit": 1026, "knn": [141, 160, 165, 186, 301, 306, 307, 310, 323, 329, 339, 359, 422, 608, 859, 905, 906, 1001, 1011, 1030, 1045], "knn__weight": 301, "knn_graph": 73, "knn_impute_scor": 187, "knnimput": [1, 187, 327, 633, 636, 988, 1049, 1050, 1053, 1054, 1055, 1056], "knnquerybatch": 298, "knot": [42, 220, 330, 889, 1008, 1052], "know": [87, 100, 170, 173, 175, 184, 191, 237, 253, 254, 271, 277, 295, 297, 331, 337, 355, 360, 372, 385, 397, 406, 409, 415, 418, 419, 420, 423, 506, 510, 516, 652, 658, 664, 665, 732, 762, 806, 820, 895, 896, 898, 899, 900, 901, 918, 919, 920, 921, 987, 997, 998, 999, 1001, 1010, 1045, 1046, 1049, 1051], "knowledg": [91, 146, 154, 191, 236, 256, 271, 277, 291, 380, 385, 388, 391, 398, 399, 415, 419, 422, 426, 450, 517, 561, 562, 569, 726, 742, 746, 789, 839, 998, 999, 1010, 1032, 1057], "known": [1, 49, 54, 61, 63, 73, 83, 91, 92, 113, 132, 133, 159, 180, 182, 187, 203, 219, 220, 237, 246, 271, 277, 279, 286, 307, 311, 319, 330, 335, 337, 345, 352, 360, 374, 380, 382, 383, 385, 388, 393, 397, 399, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 444, 469, 488, 490, 504, 514, 515, 550, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 594, 595, 597, 600, 615, 628, 639, 664, 665, 678, 688, 689, 700, 710, 716, 719, 724, 735, 749, 761, 763, 801, 839, 845, 846, 847, 848, 849, 852, 857, 860, 866, 894, 918, 919, 920, 921, 988, 990, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1013, 1014, 1023, 1028, 1030, 1031], "known_val": 633, "knox": 1051, "knp": 633, "knr": 422, "knyazev": [80, 415, 458, 468, 701, 1049, 1052, 1053], "ko": [50, 62, 176], "kobak": [698, 1052], "kobaski": 1052, "kobayashi": [1051, 1052], "kober": 1047, "kobi": 741, "koch": [1041, 1047, 1048, 1050, 1051], "kocot": 1050, "koehler": 1043, "koen": [1047, 1048], "koenker": [729, 994], "koh": [994, 1022], "kohavi": 419, "kohli": [1056, 1057], "koi8": 423, "koivunen": 113, "kokhlikyan": [244, 1046, 1047], "koki": 1051, "koko": [1047, 1053, 1054], "kolawol": 1052, "kolganov": 1044, "kolh": 1041, "kolstad": 56, "komey": [1053, 1054], "kommireddi": 1053, "kondratyev": 1053, "kong": 1052, "konstantin": [1044, 1045, 1046], "konstantino": [1047, 1056], "konwar": 1050, "koonc": 1047, "korba": 380, "korean": 1017, "kornel": [223, 1045], "kornev": 1054, "korobko": 1056, "korobov": [1040, 1041, 1042, 1045, 1046], "korolev": 1049, "kosic": 1051, "kosobrodov": 1047, "kossaifi": [1039, 1043, 1044], "kossen": [1054, 1055], "kossori": [1047, 1048], "kostelac": [1054, 1055], "kot271828": 1052, "kothari": 1050, "kotwalia": [1047, 1048], "koumenti": 1054, "koushik": 1053, "koustav": [1056, 1057], "kovalevskyi": 1045, "kowalski87": 1042, "koyama": 1053, "kozachenko": [613, 614], "kozynet": [1051, 1053], "kpca": [1, 539, 540, 541, 1033, 1034, 1039], "kr": [252, 277, 1053], "kr_fit": 252, "kr_predict": 252, "kraig": 1054, "kraktu": 1057, "kranthi": 1053, "kranz": 1022, "kraskov": [613, 614], "krasouli": [1046, 1047, 1048, 1049, 1051, 1052], "kratzwald": 1045, "krawczyk": 1053, "krawutschk": [1054, 1055], "krell": [1043, 1045], "kriegel": [415, 426, 450, 456, 463, 856, 1004], "krinitsyn": 1047, "krishna": [1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054], "krishnachaitanya9": 1050, "krishnakalyan3": 1045, "krishnan": 1049, "krivich": [1045, 1046, 1048], "kronovet": 1044, "krr": [252, 649, 991], "krsto": 1057, "krum": [1051, 1053], "krumetoft": 1053, "krump": 1044, "kruskal": [641, 696, 700, 995], "krzeminski": 1046, "krzysztof": 379, "ksemb": 1047, "kshitij": [1054, 1055, 1057], "ksvd": [670, 691, 692, 994], "ksvm": 196, "ksvm_score": 196, "ksvm_time": 196, "kth": [56, 827], "ku": [1043, 1044], "kuai": [1047, 1048], "kubin": 1050, "kuhlmann": [1046, 1047], "kulbear": 1048, "kulkarni": 1047, "kull": [413, 998], "kullback": [53, 239, 420, 544, 546, 553, 698, 995, 1046], "kulsinski": [456, 463, 705, 784, 785, 786], "kulsinskidist": [705, 1055], "kumar": [0, 76, 173, 201, 380, 405, 415, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "kumaresshan": [1047, 1048, 1051], "kumawat": 1053, "kund": [1055, 1056], "kunj": 1052, "kuno": 1057, "kuo": 1043, "kurumeyuta": 1052, "kurz": [1053, 1054], "kusanagi": [1050, 1052], "kusanagi2": 1051, "kushal": [1047, 1048], "kushan": [136, 1056], "kushansharma1": 136, "kushwah": [1055, 1056], "kushwaha": 1051, "kusterl": 1049, "kuth": 1045, "kvam": [1040, 1042], "kvle": 1045, "kw_arg": [143, 874, 1008, 1045], "kwarg": [75, 127, 253, 387, 392, 429, 433, 437, 444, 448, 454, 456, 470, 475, 541, 544, 546, 569, 637, 652, 653, 658, 659, 666, 667, 668, 669, 683, 687, 690, 704, 705, 706, 708, 748, 869, 870, 874, 914, 925, 958, 964, 966, 1046, 1050, 1052, 1056], "kwd": [634, 777, 780, 784, 787, 798, 799], "kwei": [53, 1042, 1043, 1044, 1045, 1046], "kxytim": 1052, "kybernetika": 382, "kye": 1047, "kyeongpil": 1047, "kyle": [0, 128, 405, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "kyledrogo": 1047, "kyler": 1044, "k\u00e4rkk\u00e4inen": 994, "l": [0, 45, 52, 54, 74, 80, 81, 100, 101, 113, 141, 173, 193, 211, 214, 223, 228, 229, 282, 283, 284, 295, 314, 322, 355, 382, 383, 391, 393, 412, 413, 415, 419, 420, 422, 425, 480, 522, 523, 524, 544, 546, 553, 561, 562, 563, 564, 571, 572, 596, 613, 614, 616, 617, 621, 625, 628, 629, 640, 654, 655, 664, 675, 678, 680, 686, 693, 695, 698, 699, 711, 721, 731, 732, 737, 762, 792, 847, 881, 918, 919, 920, 921, 987, 992, 994, 995, 998, 1000, 1001, 1002, 1006, 1010, 1012, 1014, 1031, 1042, 1047, 1051, 1052, 1053, 1054, 1056], "l1": [1, 24, 41, 45, 54, 65, 74, 100, 114, 116, 188, 190, 197, 198, 204, 205, 206, 207, 208, 213, 214, 223, 230, 234, 248, 278, 298, 315, 330, 394, 397, 415, 417, 420, 447, 451, 456, 463, 470, 475, 476, 477, 478, 479, 480, 481, 482, 484, 502, 508, 510, 537, 543, 544, 545, 546, 548, 549, 553, 554, 564, 571, 595, 596, 597, 603, 650, 651, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 678, 682, 683, 684, 685, 687, 694, 741, 768, 774, 779, 784, 785, 786, 791, 820, 827, 836, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 882, 890, 897, 910, 911, 917, 919, 921, 933, 980, 994, 996, 998, 1001, 1008, 1012, 1013, 1014, 1019, 1030, 1044, 1046, 1052, 1055], "l1_color": 230, "l1_contour": 230, "l1_distanc": 1039, "l1_min_c": [1, 212, 994, 1013, 1039], "l1_plot": 235, "l1_ratio": [45, 48, 53, 203, 204, 210, 285, 290, 372, 397, 420, 544, 546, 553, 652, 653, 658, 664, 665, 666, 667, 668, 669, 674, 682, 684, 687, 994, 1012, 1040, 1042, 1044, 1051, 1053], "l1_ratio_": [653, 665, 667], "l1_ratios_": 665, "l2": [1, 52, 65, 74, 114, 116, 188, 190, 191, 197, 198, 203, 204, 210, 212, 215, 219, 224, 230, 234, 235, 237, 278, 290, 298, 318, 325, 341, 359, 360, 387, 394, 397, 415, 417, 420, 422, 423, 447, 451, 456, 463, 530, 544, 546, 553, 564, 567, 568, 571, 595, 596, 597, 649, 652, 653, 654, 655, 658, 663, 664, 665, 666, 667, 668, 669, 674, 675, 678, 682, 684, 686, 687, 692, 693, 694, 741, 756, 767, 768, 784, 785, 786, 820, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 867, 868, 882, 890, 897, 910, 911, 915, 916, 917, 919, 921, 981, 987, 991, 994, 996, 1001, 1002, 1008, 1012, 1014, 1019, 1030, 1032, 1041, 1043, 1044, 1046, 1048], "l2014": 422, "l2_color": 230, "l2_contour": 230, "l2_regular": [330, 422, 567, 568], "l_": [412, 617, 658, 747, 998], "l_i": 1008, "l_inf": 54, "l_m": 422, "l_p": [456, 463, 694, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864], "l_x": 52, "la": [0, 211, 227, 298, 300, 320, 321, 324, 382, 404, 1022, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "lab": [0, 380, 474, 542, 908, 1022, 1050], "labb\u00e9": 1057, "label": [1, 29, 37, 42, 44, 45, 47, 49, 50, 51, 52, 57, 60, 61, 62, 63, 65, 67, 68, 72, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 89, 90, 92, 94, 97, 98, 99, 100, 101, 106, 108, 110, 111, 112, 113, 116, 117, 119, 121, 122, 126, 128, 130, 131, 132, 133, 138, 139, 140, 141, 142, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 162, 169, 175, 176, 180, 181, 182, 183, 184, 186, 188, 191, 194, 196, 198, 199, 201, 202, 203, 207, 208, 209, 213, 219, 220, 221, 222, 225, 226, 227, 228, 229, 233, 234, 236, 237, 240, 241, 242, 246, 251, 252, 254, 256, 257, 264, 270, 271, 272, 275, 276, 278, 279, 280, 281, 283, 286, 287, 288, 289, 290, 291, 292, 297, 303, 305, 307, 310, 314, 316, 318, 319, 323, 327, 328, 331, 334, 336, 340, 341, 342, 350, 352, 354, 355, 359, 360, 363, 364, 365, 366, 374, 377, 378, 379, 384, 385, 387, 390, 394, 399, 400, 412, 413, 414, 425, 426, 432, 433, 437, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 471, 475, 493, 494, 495, 499, 500, 501, 502, 508, 509, 514, 515, 518, 520, 521, 525, 528, 529, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 573, 575, 576, 598, 599, 600, 601, 602, 604, 605, 606, 610, 611, 612, 615, 616, 637, 664, 665, 672, 673, 674, 679, 680, 681, 682, 683, 684, 703, 704, 706, 708, 709, 710, 711, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 728, 731, 732, 733, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 749, 760, 761, 762, 763, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 820, 821, 822, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 857, 859, 860, 867, 868, 870, 874, 877, 878, 881, 883, 884, 891, 894, 905, 906, 907, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 930, 935, 936, 961, 962, 969, 987, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1014, 1017, 1019, 1020, 1023, 1027, 1028, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "label1": 399, "label2": 399, "label_a": 286, "label_b": 286, "label_binar": [1, 284, 286, 877, 1043], "label_binarizer_": 839, "label_distributions_": [337, 338, 905, 906, 1050], "label_im": 100, "label_out": 77, "label_pr": [723, 742, 743, 761, 763, 801], "label_prop_model": [905, 906], "label_propag": 1040, "label_ranking_average_precision_scor": [1, 998, 1043, 1047, 1048, 1054], "label_ranking_loss": [1, 998, 1044], "label_spread": 339, "label_tru": [710, 723, 743, 761, 763, 801], "labelbinar": [1, 286, 399, 728, 747, 839, 874, 883, 891, 894, 999, 1023, 1042, 1043, 1044, 1048, 1053], "labelbottom": [162, 277], "labeled_iter_": [340, 907], "labelencod": [1, 399, 575, 884, 1009, 1039, 1047, 1054, 1055, 1058], "labelkfold": [1044, 1045], "labelleft": 262, "labelpad": 277, "labelpropag": [1, 331, 339, 906, 907, 999, 1011, 1040, 1045, 1046, 1049, 1050, 1051, 1053, 1054, 1055], "labels": [53, 322], "labels_": [72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 85, 86, 89, 92, 95, 96, 97, 99, 101, 331, 333, 360, 385, 399, 415, 433, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 716, 1031, 1044], "labels_050": 99, "labels_200": 99, "labels_a": 71, "labels_b": 71, "labels_pr": [415, 710, 711, 720, 721, 723, 737, 742, 743, 761, 763, 792, 801], "labels_random": 82, "labels_tru": [72, 83, 89, 98, 415, 710, 711, 720, 721, 723, 737, 742, 743, 761, 763, 792, 801], "labels_uniqu": 97, "labelshufflesplit": [1044, 1045], "labelspread": [1, 331, 337, 338, 339, 341, 342, 905, 907, 999, 1011, 1040, 1045, 1046, 1049, 1050, 1053, 1054, 1055], "labelspreadingifittedlabelspread": 339, "labex": 0, "labl": 154, "laboratori": [380, 1017], "lacchia": 1046, "lack": [42, 63, 352, 385, 387, 397, 419, 835, 925, 1013, 1053], "lacost": [664, 994], "lacouth": 1052, "lacrosse91": 1052, "lad": 1052, "lag": [41, 42, 151, 154, 188, 221, 237, 502, 568, 707, 748, 751, 752, 754, 796, 827, 832, 833, 836, 1019], "lagacheri": 1043, "lagard": 1042, "lagat": 1049, "lagged_count_": 51, "lagged_count_1d": 51, "lagged_count_1d_1h": 51, "lagged_count_7d": 51, "lagged_count_7d_1h": 51, "lagged_df": 51, "lagged_max_24h": 51, "lagged_max_7d": 51, "lagged_mean_24h": 51, "lagged_mean_7d": 51, "lagged_min_24h": 51, "lagged_min_7d": 51, "lai": [50, 323, 352, 1004], "laid": [0, 190, 385], "lakhotia": [1049, 1050], "lakshmi": 1049, "lakshmikanth": 1046, "lakshya": [1047, 1048, 1049], "lal": 906, "lalliacqua": [1049, 1052], "lam": [328, 329, 1050, 1057], "lama": 500, "lamb": [1044, 1052], "lambda": [42, 45, 46, 48, 56, 90, 150, 199, 237, 277, 278, 322, 341, 409, 411, 415, 420, 422, 423, 650, 651, 652, 653, 874, 886, 990, 994, 1008, 1027, 1047, 1053], "lambda_": [199, 650, 651, 886, 994, 1046], "lambda_1": [650, 651, 994], "lambda_2": [650, 651, 994], "lambda_i": [994, 1008], "lambda_init": [198, 199, 651, 994, 1049], "lambdas_": [322, 886, 1052, 1055], "lami": 1047, "lamond": 1043, "lamp": 1022, "lamu": 1045, "lan": [664, 1054, 1055], "land": [49, 311, 400, 422], "land_mask": 311, "land_refer": [49, 311], "landeau": 1056, "landmark": [887, 899, 1008], "landscap": 176, "lane": 1045, "lang": 1032, "langford": [423, 694, 995], "langl": [990, 998, 1012, 1013], "languag": [0, 361, 390, 420, 423, 1012, 1017, 1018, 1022, 1024], "language_level": 386, "lanigan": [323, 1046], "lanl": 54, "lannuzel": 1051, "lanterni": 1053, "lanzani": 1045, "lapack": [372, 373, 383, 538, 541, 547, 694, 1054], "lapack_lit": 391, "lapack_svd_driv": 1054, "laplac": [1, 176, 425, 616, 617, 845, 846, 847, 849, 1000], "laplacian": [1, 239, 377, 412, 446, 458, 468, 626, 645, 649, 697, 701, 771, 772, 780, 906, 994, 995, 1011, 1034, 1040, 1045], "laplacian_kernel": [1, 771, 996, 1044], "laptop": [51, 393, 474, 908, 1053, 1054, 1055], "lar": [0, 1, 53, 127, 173, 188, 197, 204, 205, 208, 212, 213, 224, 359, 360, 361, 382, 405, 477, 478, 484, 507, 537, 543, 545, 548, 549, 551, 552, 554, 657, 658, 659, 660, 661, 662, 669, 670, 671, 684, 688, 689, 690, 691, 692, 999, 1019, 1020, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052], "laradji": [0, 313, 1045], "larg": [0, 1, 37, 42, 50, 51, 52, 58, 62, 63, 71, 73, 77, 81, 83, 84, 86, 87, 89, 106, 108, 124, 128, 141, 143, 144, 151, 154, 155, 157, 169, 180, 181, 193, 194, 198, 199, 208, 210, 219, 221, 223, 224, 225, 237, 251, 256, 271, 274, 280, 283, 286, 300, 307, 315, 318, 320, 330, 331, 334, 348, 353, 355, 360, 361, 372, 380, 385, 391, 394, 397, 398, 399, 403, 409, 415, 417, 419, 420, 421, 422, 424, 426, 428, 448, 450, 452, 453, 456, 457, 458, 459, 464, 468, 479, 481, 505, 520, 540, 542, 544, 546, 547, 550, 553, 555, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 588, 595, 640, 647, 649, 652, 653, 656, 658, 659, 660, 663, 664, 665, 670, 677, 678, 680, 683, 685, 691, 693, 695, 697, 698, 699, 701, 752, 785, 786, 806, 814, 816, 820, 824, 835, 845, 846, 847, 848, 849, 850, 851, 856, 867, 868, 875, 879, 880, 888, 890, 902, 903, 910, 911, 915, 916, 918, 919, 920, 921, 946, 947, 987, 990, 992, 994, 995, 997, 1000, 1001, 1002, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1028, 1030, 1031, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "larger": [42, 45, 63, 71, 73, 76, 81, 89, 112, 114, 122, 133, 141, 152, 154, 176, 181, 182, 187, 191, 192, 196, 199, 203, 234, 235, 236, 244, 250, 252, 262, 268, 271, 278, 280, 286, 287, 295, 298, 300, 313, 314, 316, 318, 348, 352, 360, 361, 378, 380, 385, 391, 399, 412, 413, 415, 416, 417, 419, 420, 422, 423, 425, 446, 449, 455, 456, 458, 460, 462, 521, 533, 547, 550, 567, 568, 569, 573, 574, 588, 595, 649, 658, 678, 679, 680, 681, 685, 693, 698, 710, 725, 742, 803, 855, 856, 887, 889, 890, 891, 899, 904, 946, 947, 969, 972, 990, 991, 994, 995, 997, 998, 1001, 1002, 1006, 1008, 1012, 1013, 1030, 1032, 1043, 1044, 1047, 1048, 1049, 1052, 1053, 1056, 1057], "largest": [114, 126, 144, 173, 221, 382, 415, 417, 420, 449, 533, 547, 563, 564, 565, 566, 570, 571, 594, 715, 803, 804, 825, 848, 880, 918, 919, 920, 921, 947, 995, 998, 1008, 1013, 1014], "largest_clust": [415, 449], "largest_coef": [114, 533], "larrald": 1056, "lars_path": [1, 206, 394, 537, 543, 545, 548, 549, 551, 552, 554, 656, 657, 658, 659, 660, 661, 662, 669, 670, 671, 689, 690, 691, 692, 994, 1039, 1041, 1044, 1048, 1050], "lars_path_gram": [1, 688, 994, 1048], "larscv": [1, 406, 656, 671, 688, 689, 1046, 1052, 1056], "larson": [1044, 1048, 1049, 1051, 1053], "larsson": [1051, 1052, 1053], "lasagna": 1045, "laserjet": 1032, "laska": 1045, "lasso": [1, 41, 54, 100, 133, 159, 164, 188, 191, 197, 200, 210, 212, 218, 224, 227, 230, 250, 267, 330, 334, 355, 372, 397, 417, 418, 420, 422, 423, 424, 477, 478, 484, 507, 530, 537, 543, 545, 548, 549, 551, 552, 554, 603, 652, 653, 655, 656, 657, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 676, 678, 684, 687, 688, 689, 690, 691, 692, 727, 729, 730, 831, 832, 833, 871, 890, 987, 998, 999, 1012, 1019, 1020, 1027, 1030, 1034, 1039, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1053, 1057], "lasso_cd": [537, 543, 548, 554], "lasso_cv": 164, "lasso_lar": [133, 537, 543, 548, 554, 1049], "lasso_lars_": [207, 208], "lasso_path": [1, 204, 657, 658, 659, 660, 661, 662, 669, 688, 689, 994, 1039, 1041, 1043, 1052], "lasso_pipelin": 159, "lassocv": [1, 52, 159, 164, 191, 203, 208, 406, 422, 424, 657, 658, 660, 661, 662, 669, 690, 994, 1027, 1039, 1042, 1046, 1049, 1050, 1052, 1053, 1056, 1057], "lassocvlassocv": 159, "lassolar": [1, 657, 658, 659, 661, 662, 669, 670, 671, 688, 689, 690, 994, 999, 1030, 1039, 1040, 1042, 1046, 1049, 1050, 1052], "lassolars": [1, 207, 208, 424, 657, 660, 661, 994, 1039, 1046, 1048, 1052, 1053], "lassolarscv": [1, 208, 406, 424, 658, 659, 660, 662, 669, 671, 688, 689, 690, 994, 1039, 1046, 1052, 1056], "lassolarsic__criterion": [207, 208], "last": [42, 57, 78, 92, 119, 151, 191, 198, 219, 220, 227, 232, 246, 268, 280, 288, 289, 323, 329, 331, 340, 363, 372, 380, 383, 387, 389, 390, 393, 399, 403, 409, 415, 416, 423, 427, 444, 448, 453, 465, 470, 473, 474, 521, 539, 565, 566, 567, 568, 589, 590, 593, 599, 600, 603, 616, 688, 689, 691, 692, 703, 704, 706, 707, 708, 713, 788, 803, 804, 809, 810, 825, 850, 851, 855, 870, 871, 875, 883, 889, 925, 950, 973, 987, 993, 994, 995, 997, 999, 1002, 1012, 1018, 1023, 1030, 1039, 1045, 1046, 1047, 1048, 1053, 1055, 1056], "last_hour": [42, 51], "last_mean": 973, "last_n": 973, "last_var": 973, "lat": [49, 311, 504, 770], "late": [324, 374], "latenc": [41, 45, 188, 371, 530, 571, 678, 684, 836, 890, 916, 963, 972, 1017, 1019, 1034, 1042], "latent": [1, 41, 44, 54, 134, 188, 316, 360, 418, 423, 425, 494, 538, 542, 544, 545, 546, 549, 550, 594, 597, 866, 997, 1017, 1019, 1032, 1033, 1034, 1041, 1044], "latentdirichletalloc": [1, 53, 374, 390, 420, 1017, 1044, 1046, 1053, 1054], "later": [0, 49, 87, 138, 143, 152, 175, 192, 196, 198, 256, 271, 295, 311, 361, 368, 383, 391, 397, 398, 409, 856, 879, 880, 888, 890, 990, 1008, 1027, 1032, 1042, 1045, 1047, 1051], "latest": [327, 328, 329, 330, 331, 332, 333, 334, 335, 383, 385, 389, 391, 393, 1014, 1053], "latestst": 389, "latex": 1039, "latexpdf": 385, "latin": [46, 423], "latitud": [311, 318, 380, 504, 705, 770], "lattarini": 1041, "latter": [42, 53, 267, 277, 286, 287, 306, 323, 355, 374, 382, 399, 414, 419, 422, 423, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 748, 803, 804, 805, 806, 809, 810, 815, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 965, 1001, 1006, 1048], "laughlin": 1046, "launch": [359, 360, 403, 1022], "laur": 1039, "lauren": [0, 369, 698, 702, 995, 1051, 1054], "laurent": [1042, 1043, 1046, 1047, 1054, 1055], "laurenz": 1051, "lauritzen": 1047, "laveen": 1052, "law": 1022, "lawrenc": 271, "lawson": [1046, 1047, 1048], "lawton": 1047, "layer": [1, 42, 66, 147, 157, 166, 177, 179, 188, 226, 235, 257, 312, 315, 316, 320, 321, 342, 353, 357, 372, 393, 422, 520, 521, 528, 573, 836, 866, 867, 868, 871, 890, 1003, 1019, 1020, 1034, 1045], "layout": [138, 318, 397, 910, 911, 912, 915, 931, 1013, 1042, 1044, 1056], "layton": [0, 82, 405, 1039, 1040, 1041, 1042, 1044], "lazaru": 1057, "lazebnik": [764, 765, 996], "lazi": [51, 400, 423, 1012, 1043], "lazyfram": 106, "lazz": 1054, "lb": [877, 1009], "lbfg": [184, 313, 387, 654, 655, 664, 665, 675, 678, 680, 686, 693, 841, 844, 867, 868, 994, 1002, 1043, 1044, 1046, 1047, 1052, 1053, 1054, 1056], "lbfgsb": 664, "lbfin": 1049, "lc": [50, 242, 249], "lceil": [412, 1004], "lda": [53, 68, 120, 123, 126, 128, 134, 188, 307, 368, 382, 411, 510, 542, 547, 555, 556, 859, 1017, 1019, 1020, 1033, 1034, 1044], "lda_featur": 390, "lda_model": 390, "lda_np": 411, "ldavid": 1045, "ldflag": 383, "ldirer": 1046, "ldl": [173, 382], "ldot": [994, 998, 1000, 1002, 1012], "ldwy4": [1056, 1057], "le": [664, 878, 989, 994, 1001, 1009, 1011, 1047, 1051, 1052, 1056], "le_": 575, "lead": [0, 45, 61, 63, 66, 71, 86, 89, 95, 105, 144, 148, 149, 151, 172, 173, 191, 192, 193, 198, 203, 208, 210, 219, 223, 251, 253, 256, 271, 277, 278, 280, 284, 303, 304, 315, 318, 320, 323, 324, 329, 348, 355, 360, 363, 368, 372, 373, 379, 384, 393, 394, 398, 399, 412, 413, 414, 415, 417, 419, 420, 421, 422, 424, 458, 468, 471, 474, 502, 521, 533, 541, 544, 545, 546, 549, 553, 557, 563, 564, 565, 566, 569, 570, 571, 572, 612, 636, 652, 653, 656, 658, 659, 660, 666, 667, 668, 669, 685, 697, 701, 752, 803, 809, 810, 838, 850, 851, 855, 874, 881, 891, 902, 903, 908, 910, 918, 919, 920, 921, 987, 992, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1006, 1008, 1011, 1012, 1014, 1022, 1023, 1042, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057], "leader": [385, 1022], "leadership": 0, "leaf": [75, 143, 155, 157, 363, 367, 415, 422, 426, 447, 448, 449, 450, 451, 452, 456, 463, 469, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 918, 919, 920, 921, 922, 923, 1001, 1014, 1042, 1044, 1046, 1050, 1053], "leaf_id": 367, "leaf_rot": 194, "leaf_siz": [426, 450, 452, 456, 461, 462, 463, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 1001], "leagu": 380, "leak": [143, 282, 359, 368, 416, 419, 870, 895, 896, 898, 899, 900, 901, 1008, 1039, 1046, 1049, 1055, 1056, 1057], "leakag": [398, 399, 416, 1034], "lean": 409, "leandro": [1048, 1052], "lear": 1022, "learn": [1, 14, 25, 28, 29, 31, 37, 42, 44, 45, 46, 47, 48, 51, 53, 54, 57, 61, 62, 63, 66, 67, 69, 70, 71, 82, 83, 85, 86, 87, 89, 90, 101, 103, 104, 108, 113, 114, 123, 129, 133, 136, 138, 141, 142, 143, 144, 146, 147, 153, 154, 156, 157, 158, 159, 164, 165, 166, 170, 173, 175, 178, 180, 184, 186, 187, 189, 193, 194, 195, 205, 207, 208, 214, 219, 220, 221, 223, 233, 237, 242, 243, 244, 245, 246, 247, 248, 250, 251, 254, 255, 256, 258, 259, 260, 269, 274, 276, 277, 280, 281, 282, 283, 284, 285, 289, 291, 292, 295, 298, 300, 302, 303, 304, 305, 306, 311, 312, 315, 316, 318, 319, 323, 324, 325, 326, 336, 340, 342, 347, 352, 355, 359, 360, 361, 363, 364, 365, 366, 367, 368, 373, 377, 378, 379, 380, 382, 384, 388, 391, 392, 393, 394, 398, 399, 402, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 423, 424, 425, 429, 430, 432, 433, 434, 435, 437, 438, 439, 443, 444, 445, 448, 449, 452, 453, 455, 456, 463, 470, 471, 473, 474, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 514, 515, 516, 518, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 582, 587, 588, 589, 590, 593, 594, 595, 596, 597, 599, 600, 605, 608, 609, 616, 617, 620, 625, 628, 632, 634, 636, 638, 640, 644, 646, 647, 649, 650, 651, 652, 654, 658, 663, 664, 674, 675, 682, 683, 684, 686, 694, 695, 696, 697, 698, 702, 703, 706, 707, 708, 714, 719, 723, 724, 727, 729, 730, 732, 738, 741, 747, 748, 749, 754, 762, 784, 785, 786, 790, 791, 793, 794, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 852, 854, 859, 866, 867, 868, 869, 870, 871, 873, 875, 877, 880, 882, 883, 884, 885, 888, 889, 890, 891, 894, 902, 903, 905, 906, 907, 908, 910, 911, 912, 915, 918, 919, 920, 921, 933, 941, 942, 964, 965, 987, 988, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1019, 1021, 1025, 1027, 1028, 1034, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "learn_rat": 1040, "learnalgorithm": 1025, "learner": [1, 46, 139, 149, 159, 374, 565, 566, 567, 568, 588, 595, 636, 852, 853, 858, 860, 861, 1000, 1003, 1014, 1017, 1018, 1032, 1055], "learning_curv": [1, 279, 332, 406, 812, 993, 1042, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1056, 1058], "learning_decai": 542, "learning_method": [53, 390, 542], "learning_offset": [53, 542], "learning_r": [45, 138, 149, 150, 151, 152, 153, 154, 244, 298, 314, 316, 328, 330, 422, 559, 560, 565, 566, 567, 568, 674, 682, 683, 684, 698, 866, 867, 868, 995, 1005, 1012, 1040, 1048, 1052], "learning_rate_": [698, 868], "learning_rate_init": [192, 314, 315, 867, 868], "learningcurvedisplai": [1, 252, 279, 332, 993, 1054, 1055], "learnt": [154, 191, 325, 368, 399, 419, 891, 987, 1008], "least": [1, 36, 43, 51, 53, 112, 113, 115, 116, 126, 127, 152, 171, 173, 183, 188, 190, 197, 198, 201, 203, 209, 212, 215, 219, 221, 223, 224, 227, 236, 237, 250, 256, 277, 295, 297, 323, 329, 330, 348, 360, 361, 372, 378, 380, 382, 384, 385, 389, 391, 393, 397, 399, 400, 406, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 450, 454, 456, 462, 463, 464, 467, 480, 487, 488, 489, 490, 491, 500, 522, 537, 543, 545, 547, 548, 549, 551, 552, 553, 554, 555, 563, 564, 565, 566, 568, 570, 571, 572, 599, 600, 608, 641, 649, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 698, 703, 718, 722, 724, 791, 807, 811, 812, 818, 820, 821, 822, 824, 825, 827, 831, 834, 835, 836, 867, 868, 871, 882, 890, 915, 918, 919, 920, 921, 939, 961, 988, 991, 995, 998, 1001, 1010, 1012, 1013, 1014, 1018, 1019, 1020, 1022, 1030, 1034, 1039, 1041, 1042, 1045, 1046, 1050], "least_absolute_devi": [1049, 1051, 1052], "least_angl": 394, "least_squar": 1052, "leastangle_2002": [173, 382], "leastsquareserror": 1048, "leav": [1, 87, 138, 143, 152, 192, 194, 237, 284, 323, 367, 368, 372, 382, 384, 390, 399, 415, 422, 447, 448, 451, 452, 469, 509, 563, 564, 565, 566, 567, 568, 570, 571, 572, 679, 681, 808, 813, 814, 815, 816, 824, 825, 850, 851, 918, 919, 920, 921, 987, 995, 1001, 1005, 1014, 1027, 1030, 1039, 1046, 1048, 1050, 1051, 1055], "leaveonegroupout": [1, 282, 419, 807, 814, 815, 1027, 1045], "leaveonelabelout": 1045, "leaveoneout": [1, 282, 419, 1027], "leavepgroupsout": [1, 419, 808, 1027, 1045], "leaveplabelout": 1045, "leaveplabelsout": 1045, "leavepout": [1, 419, 814, 1027], "leaves_parallel": 922, "lebedev": [1045, 1046], "lebel": 1054, "lebourgeoi": 1022, "lectur": [415, 650, 990, 1016], "lecture2": 650, "lecun": [1002, 1012], "led": 1039, "ledoit": [1, 48, 64, 69, 109, 110, 113, 114, 188, 307, 479, 481, 485, 486, 518, 555, 992, 1019], "ledoit_wolf": [1, 114, 417, 1052], "ledoit_wolf_shrinkag": [1, 1052], "ledoitwolf": [1, 68, 109, 111, 114, 131, 153, 188, 309, 417, 475, 476, 480, 481, 482, 483, 806, 1019, 1043], "lee": [420, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1054], "leepei": 1043, "leereev": 1046, "leeuw": 641, "lefebvr": [1052, 1053], "lefevr": [420, 544], "left": [44, 45, 50, 52, 53, 60, 68, 69, 73, 76, 78, 79, 85, 89, 96, 98, 105, 108, 113, 114, 121, 122, 126, 127, 138, 141, 143, 144, 145, 148, 151, 154, 159, 161, 178, 184, 187, 191, 194, 204, 212, 219, 220, 221, 223, 230, 232, 233, 236, 237, 246, 250, 254, 256, 257, 262, 264, 265, 268, 273, 274, 275, 276, 278, 286, 287, 289, 301, 303, 304, 311, 313, 316, 318, 331, 333, 334, 338, 347, 348, 352, 367, 380, 385, 387, 389, 412, 415, 418, 419, 421, 422, 423, 425, 432, 438, 452, 478, 488, 489, 490, 491, 499, 504, 555, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 593, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 641, 645, 649, 657, 661, 803, 804, 806, 809, 810, 813, 820, 883, 890, 918, 919, 920, 921, 922, 934, 947, 969, 972, 987, 990, 992, 994, 996, 998, 1000, 1005, 1010, 1012, 1014, 1027, 1028, 1030, 1031, 1046, 1048, 1053], "left_h": 318, "left_impur": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "leftarrow": [415, 1002, 1012], "leftmost": 1002, "legaci": [379, 389, 399, 1039, 1046, 1051], "legarreta": [1050, 1052, 1053], "legend": [42, 45, 46, 47, 49, 51, 60, 62, 68, 71, 74, 95, 105, 106, 108, 110, 111, 112, 113, 116, 117, 120, 126, 128, 131, 132, 133, 138, 139, 140, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 169, 175, 176, 180, 181, 182, 183, 184, 191, 192, 196, 198, 199, 201, 204, 207, 208, 209, 213, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 236, 237, 242, 249, 250, 251, 252, 254, 257, 264, 271, 272, 274, 276, 277, 279, 280, 281, 282, 284, 287, 289, 290, 291, 292, 295, 301, 303, 304, 305, 310, 314, 319, 323, 328, 331, 334, 339, 347, 350, 352, 354, 359, 363, 364, 365, 366, 706, 1028, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "legend_el": [120, 155, 232, 280, 301, 352], "legend_handl": 305, "legend_lin": 47, "legend_titl": 225, "legitim": [271, 995], "legitimate_accept": 271, "legitimate_refus": 271, "lego": 1017, "lehoucq": 420, "leibler": [53, 239, 420, 544, 546, 553, 698, 995, 1046], "leibniz": 998, "leig": 1045, "leightonzhang": 1045, "leinweb": [1047, 1048], "leisur": 42, "lejeun": 1046, "lekhwani": 1048, "leland": [1045, 1046, 1047, 1049, 1050, 1055], "lemaitr": [0, 43, 45, 105, 108, 129, 159, 175, 180, 181, 182, 184, 207, 208, 221, 240, 318, 404, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "lemaitre58": [45, 159, 175, 180, 182, 184, 240, 318], "lemir": 1050, "lemma": [36, 250, 377, 540, 547, 555, 902, 903, 904, 992, 1034, 1042], "lemmat": 423, "lemmatoken": 423, "lemo": [1055, 1056], "len": [45, 46, 48, 49, 54, 56, 65, 66, 67, 71, 72, 75, 77, 78, 83, 84, 85, 89, 94, 95, 96, 97, 98, 99, 103, 105, 127, 133, 134, 136, 141, 144, 147, 148, 154, 165, 166, 171, 175, 183, 187, 192, 194, 218, 219, 237, 242, 246, 249, 250, 251, 253, 255, 256, 262, 264, 265, 272, 275, 277, 278, 285, 286, 288, 292, 297, 298, 305, 307, 308, 313, 319, 320, 321, 324, 333, 335, 337, 338, 341, 348, 354, 357, 359, 360, 361, 367, 397, 399, 422, 425, 433, 437, 439, 443, 451, 456, 462, 470, 513, 521, 556, 575, 576, 588, 603, 638, 639, 788, 806, 820, 832, 836, 838, 840, 841, 891, 905, 906, 1030, 1031, 1032, 1048, 1051], "lenail": [1047, 1051], "lend": 1022, "lene": 1055, "length": [1, 79, 103, 119, 120, 122, 132, 134, 147, 173, 175, 176, 177, 180, 181, 183, 196, 202, 253, 254, 257, 260, 301, 329, 332, 345, 361, 378, 382, 385, 393, 394, 399, 416, 420, 422, 423, 425, 451, 496, 514, 515, 518, 521, 529, 557, 569, 587, 588, 595, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 638, 652, 653, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 687, 690, 787, 806, 809, 810, 820, 836, 838, 841, 842, 844, 852, 853, 854, 856, 858, 897, 923, 930, 932, 936, 952, 953, 969, 972, 997, 1004, 1008, 1023, 1029, 1030, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1055], "length_scal": [175, 176, 179, 180, 181, 182, 184, 425, 618, 621, 624, 625, 627, 628, 629, 630], "length_scale_bound": [175, 181, 182, 184, 425, 617, 621, 625, 628, 629], "length_scale_grid": 181, "lengthi": [385, 397], "lenient": [884, 1018, 1056], "lenz": [1050, 1054], "leo": 1056, "leogrin": 1057, "leon": [682, 683, 684, 1039, 1057], "leonardo": 1052, "leonenko": [613, 614], "leonieborn": 1045, "leopoldo": 1052, "leq": [178, 420, 422, 994, 998, 1001, 1012, 1013, 1014], "lera": 1046, "leriqu": [1045, 1047], "lernen": 456, "lesne": 1053, "less": [42, 43, 46, 63, 86, 87, 94, 122, 124, 127, 134, 138, 145, 151, 152, 154, 175, 182, 191, 201, 203, 219, 221, 223, 252, 256, 263, 265, 271, 277, 278, 286, 288, 291, 292, 319, 322, 323, 324, 329, 331, 335, 352, 359, 360, 368, 372, 374, 380, 385, 387, 397, 399, 409, 415, 419, 420, 422, 423, 427, 445, 447, 449, 451, 454, 456, 458, 463, 466, 468, 469, 488, 489, 490, 502, 521, 537, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 596, 602, 625, 633, 640, 653, 667, 682, 684, 698, 707, 727, 728, 729, 730, 731, 742, 758, 770, 785, 786, 791, 801, 803, 804, 808, 809, 810, 816, 834, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 873, 885, 887, 888, 890, 893, 899, 900, 910, 911, 918, 919, 920, 921, 936, 950, 987, 988, 990, 991, 992, 995, 997, 998, 1001, 1003, 1008, 1012, 1013, 1014, 1017, 1030, 1032, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1053, 1054, 1056], "lessen": [225, 664, 665], "lesser": [313, 399, 448, 547, 994], "let": [42, 43, 51, 87, 89, 98, 104, 108, 120, 124, 129, 145, 148, 151, 152, 154, 156, 175, 181, 182, 187, 191, 192, 193, 200, 208, 219, 221, 237, 239, 243, 253, 260, 271, 272, 277, 280, 284, 291, 335, 359, 361, 367, 368, 380, 385, 387, 391, 397, 409, 412, 414, 415, 419, 422, 423, 447, 451, 497, 506, 510, 516, 540, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 687, 690, 876, 883, 884, 994, 995, 996, 997, 998, 1005, 1006, 1008, 1013, 1014, 1022, 1030, 1031, 1032, 1049], "letelli": 1045, "letter": [173, 183, 380, 382, 389, 423, 794, 795, 812, 829, 998], "leu": 1053, "leung": 1050, "lev_metr": 397, "levarag": 334, "level": [42, 47, 49, 50, 63, 69, 75, 87, 124, 143, 147, 166, 173, 174, 175, 176, 179, 182, 184, 188, 191, 192, 230, 231, 232, 233, 234, 237, 246, 250, 251, 266, 271, 277, 280, 286, 287, 304, 311, 346, 347, 349, 350, 352, 355, 360, 367, 372, 380, 382, 385, 387, 391, 397, 399, 402, 403, 406, 413, 420, 423, 425, 429, 460, 474, 499, 500, 502, 509, 527, 537, 542, 543, 551, 552, 553, 567, 568, 573, 574, 617, 621, 628, 629, 631, 672, 673, 674, 682, 683, 684, 693, 696, 698, 700, 706, 708, 722, 729, 734, 791, 831, 832, 833, 835, 838, 839, 866, 867, 868, 908, 923, 987, 994, 998, 999, 1001, 1006, 1012, 1014, 1017, 1018, 1019, 1032, 1042, 1050, 1053, 1054, 1055], "levelnam": 124, "leven": 397, "levenshtein": [335, 397], "levenshtein_dist": 335, "levequ": [848, 890], "leverag": [42, 46, 71, 83, 117, 237, 335, 359, 360, 372, 373, 383, 399, 419, 422, 885, 987, 994, 1023, 1042, 1054, 1057], "levesqu": 1045, "levi": [540, 1046], "levinson": [1047, 1048], "levitski": [1054, 1055, 1056], "levitskii": 1052, "lewi": [380, 1046, 1050], "lex": [415, 458, 468], "lexicograph": [399, 573, 794, 800, 852, 860], "lexicon": 1008, "lexsort": 60, "lf": 393, "lfw": [1, 44, 380, 499, 500, 1028, 1039], "lfw_": 1028, "lfw_home": 380, "lfw_pairs_train": [380, 499], "lfw_peopl": [44, 380, 500, 1028], "lg2012": 422, "lgtm": 1046, "li": [0, 340, 380, 405, 645, 648, 702, 732, 762, 903, 987, 990, 998, 1001, 1008, 1010, 1013, 1039, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "liabil": 237, "liac": [332, 379, 385, 502, 1054, 1055], "liam": [1047, 1048], "liang": [1045, 1050, 1051, 1056, 1057], "liau": 1042, "lib": [373, 383, 403, 1017], "liberti": 268, "libisel": 1057, "liblinear": [212, 346, 391, 664, 665, 794, 910, 911, 912, 915, 916, 994, 998, 1013, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1055], "libomp": [383, 1051], "librari": [44, 271, 277, 330, 332, 365, 368, 377, 379, 380, 383, 384, 385, 386, 391, 397, 398, 399, 403, 409, 411, 664, 910, 911, 912, 913, 915, 916, 994, 998, 1013, 1014, 1017, 1018, 1022, 1028, 1032, 1037, 1042, 1046, 1047, 1048, 1049, 1050, 1052, 1056], "libsvm": [1, 196, 346, 378, 391, 493, 514, 569, 910, 911, 912, 913, 914, 915, 916, 1013, 1034, 1039, 1041, 1047, 1050, 1053], "libsvmtool": [196, 379, 493, 514, 515], "licenc": [43, 379], "licens": [45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 66, 67, 71, 73, 74, 76, 79, 80, 81, 82, 85, 86, 87, 88, 91, 95, 99, 100, 101, 103, 104, 106, 107, 108, 114, 119, 120, 124, 126, 128, 129, 130, 131, 134, 136, 138, 139, 140, 141, 142, 143, 144, 149, 150, 152, 153, 154, 158, 159, 173, 175, 176, 178, 179, 180, 181, 182, 184, 187, 196, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 220, 221, 224, 226, 227, 235, 236, 240, 241, 242, 244, 246, 249, 251, 252, 254, 256, 262, 264, 278, 281, 283, 290, 297, 298, 300, 306, 307, 308, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 337, 338, 339, 340, 342, 352, 353, 355, 356, 359, 360, 361, 379, 397, 399, 1014, 1022], "lichman": 382, "liddel": 1047, "lidston": [845, 846, 847, 849, 1000], "lie": [51, 94, 116, 172, 191, 251, 318, 339, 346, 348, 420, 422, 612, 858, 860, 861, 862, 910, 911, 992, 995, 998, 1008, 1013], "lieg": 422, "lieret": 1054, "lieu": [1045, 1046], "life": [51, 154, 270, 335, 393, 995], "lifecycl": [1017, 1018], "lifo": 925, "lift": 403, "light": [141, 380], "lighter": [372, 706, 708, 788, 795, 1055], "lightfm": 1017, "lightgbm": [154, 422, 567, 568, 1017, 1048, 1055], "lightgreen": [161, 225, 236], "lightgrei": 48, "lightn": 1017, "lightweight": [386, 806, 820, 831, 832, 1017], "ligo": 1046, "lihaitao": 1057, "lik_max": 110, "lik_min": 110, "like": [0, 1, 42, 50, 51, 56, 86, 89, 92, 94, 103, 119, 122, 127, 131, 133, 136, 138, 140, 145, 151, 154, 155, 175, 181, 191, 199, 219, 253, 268, 271, 277, 280, 281, 284, 285, 292, 307, 316, 318, 323, 324, 327, 340, 348, 352, 359, 360, 368, 372, 374, 377, 379, 380, 384, 385, 387, 389, 392, 393, 394, 397, 398, 399, 406, 409, 411, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 521, 525, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 935, 936, 949, 952, 961, 962, 969, 970, 971, 983, 985, 987, 990, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1004, 1005, 1008, 1013, 1014, 1017, 1018, 1022, 1023, 1030, 1032, 1036, 1039, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "likelihood": [1, 68, 91, 109, 111, 112, 113, 114, 131, 153, 175, 176, 177, 179, 180, 181, 182, 184, 188, 207, 237, 266, 269, 277, 283, 309, 316, 318, 387, 399, 413, 417, 420, 422, 425, 443, 475, 476, 477, 478, 479, 480, 481, 482, 483, 521, 538, 542, 547, 555, 556, 557, 616, 617, 637, 651, 664, 718, 747, 803, 804, 806, 833, 836, 855, 866, 886, 898, 912, 913, 915, 916, 994, 997, 1000, 1008, 1013, 1019, 1042, 1043, 1048, 1054], "likewis": [254, 415, 529], "lil": [399, 559, 560, 877, 926, 952, 1001], "lil_matrix": 54, "lili": [1047, 1048], "lilian": [1044, 1045, 1056], "lim": [178, 540], "lima": [1052, 1053], "limit": [42, 46, 54, 63, 71, 76, 91, 100, 114, 138, 145, 146, 152, 159, 186, 191, 192, 193, 198, 219, 220, 236, 250, 284, 320, 324, 330, 355, 361, 368, 373, 386, 387, 390, 397, 399, 400, 413, 414, 415, 418, 420, 424, 452, 469, 474, 565, 566, 567, 568, 638, 656, 685, 688, 689, 694, 784, 827, 858, 860, 861, 862, 883, 884, 908, 912, 913, 914, 915, 916, 987, 994, 995, 997, 998, 1005, 1006, 1008, 1018, 1023, 1034, 1047, 1049, 1052, 1053, 1056], "limits_": 1001, "lin": [0, 540, 664, 1013, 1044, 1045, 1046, 1047], "lin_clf": 1013, "linalg": [69, 88, 110, 111, 114, 131, 133, 205, 262, 263, 264, 267, 268, 334, 385, 391, 420, 457, 458, 459, 468, 527, 538, 541, 547, 550, 663, 678, 680, 693, 697, 701, 945], "linalgerror": 1049, "lincoln": 380, "lindenbaum": 540, "lindenstrauss": [36, 89, 188, 245, 377, 495, 508, 902, 903, 904, 1015, 1019, 1034], "lindgren": 1057, "lindquist": 1054, "line": [47, 49, 51, 54, 74, 77, 94, 103, 112, 121, 124, 129, 138, 144, 150, 174, 186, 187, 188, 191, 192, 207, 208, 209, 211, 214, 215, 217, 220, 221, 222, 227, 228, 230, 231, 233, 246, 250, 251, 254, 256, 274, 281, 283, 284, 304, 308, 311, 319, 329, 347, 350, 352, 353, 356, 357, 359, 379, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 397, 420, 421, 422, 444, 493, 494, 495, 514, 515, 548, 559, 560, 561, 562, 616, 619, 620, 638, 676, 692, 706, 707, 708, 812, 829, 992, 998, 1002, 1005, 1012, 1017, 1019, 1021, 1030, 1032, 1041, 1050, 1052, 1055, 1056], "line0": [50, 242], "line1": [45, 50, 242], "line2": [45, 50, 242, 356], "line2d": [47, 112, 233, 304, 347, 350, 812, 829], "line_": [392, 444, 704, 706, 707, 708, 812, 829], "line_bin": 319, "line_fig": 144, "line_i": 222, "line_kw": [154, 156, 257, 279, 328, 334, 638, 812, 829], "line_kwarg": [159, 707], "line_profil": 391, "line_trac": 144, "line_x": [222, 236], "line_y_ransac": 222, "linea": 1025, "linear": [1, 11, 43, 47, 48, 50, 51, 52, 63, 64, 65, 66, 71, 86, 91, 107, 108, 110, 111, 112, 113, 114, 117, 120, 124, 129, 132, 141, 143, 157, 159, 162, 164, 166, 168, 173, 179, 181, 186, 187, 189, 190, 192, 196, 199, 201, 203, 205, 207, 208, 209, 214, 216, 217, 220, 221, 223, 224, 227, 231, 233, 235, 236, 237, 238, 241, 243, 249, 250, 252, 254, 255, 258, 267, 270, 273, 274, 275, 277, 280, 282, 283, 284, 285, 286, 287, 292, 303, 304, 306, 307, 308, 316, 318, 319, 320, 323, 325, 329, 330, 343, 345, 348, 349, 350, 353, 355, 356, 359, 365, 366, 373, 377, 381, 382, 383, 387, 388, 390, 399, 402, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 427, 448, 450, 461, 471, 473, 481, 488, 489, 490, 502, 507, 508, 518, 521, 527, 530, 538, 539, 540, 541, 542, 545, 547, 549, 550, 554, 555, 556, 560, 572, 588, 595, 599, 600, 612, 615, 620, 626, 637, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 694, 695, 696, 697, 698, 699, 707, 713, 722, 756, 759, 771, 773, 780, 791, 806, 817, 821, 833, 836, 850, 851, 855, 859, 866, 867, 868, 871, 875, 876, 877, 880, 883, 885, 887, 888, 889, 890, 899, 903, 910, 911, 912, 913, 914, 915, 916, 987, 989, 990, 991, 993, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1012, 1013, 1017, 1019, 1020, 1022, 1023, 1025, 1026, 1027, 1032, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "linear_baselin": 329, "linear_kernel": [1, 767, 771, 996, 1047], "linear_model": [1, 42, 45, 46, 48, 52, 61, 63, 65, 88, 104, 106, 108, 117, 143, 159, 161, 162, 164, 165, 171, 172, 173, 175, 186, 188, 190, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 246, 247, 248, 249, 253, 255, 258, 260, 271, 273, 280, 285, 286, 290, 291, 292, 297, 316, 319, 320, 323, 325, 327, 328, 329, 330, 331, 333, 334, 335, 341, 359, 368, 372, 374, 384, 385, 387, 391, 393, 394, 398, 399, 406, 411, 414, 416, 422, 435, 440, 444, 471, 543, 545, 548, 549, 551, 552, 554, 573, 574, 575, 576, 603, 637, 638, 640, 641, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 706, 707, 794, 805, 820, 829, 831, 832, 833, 835, 837, 841, 842, 843, 844, 868, 885, 889, 910, 911, 914, 917, 939, 941, 942, 943, 982, 990, 994, 998, 999, 1004, 1006, 1008, 1012, 1019, 1027, 1028, 1030, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "linear_model_preprocessor": 219, "linear_pca": 416, "linear_preprocessor": 159, "linear_regress": [221, 292], "linear_svc": 1013, "linear_svm": 251, "linear_svm_scor": 251, "linear_svm_tim": 251, "lineardiscriminantanalysi": [1, 68, 69, 132, 240, 307, 368, 411, 542, 556, 859, 992, 999, 1001, 1039, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1053, 1054, 1055], "linearli": [66, 129, 140, 173, 191, 198, 233, 240, 246, 286, 287, 320, 323, 352, 359, 372, 382, 397, 420, 422, 521, 559, 648, 713, 879, 880, 998, 1001, 1004, 1013, 1030, 1046, 1055], "linearly_separ": [66, 313], "linearmodel": 1052, "linearoper": [334, 693], "linearregress": [1, 117, 162, 190, 198, 209, 214, 215, 216, 217, 222, 225, 236, 249, 253, 255, 273, 292, 319, 368, 385, 397, 398, 416, 422, 471, 576, 638, 641, 652, 655, 658, 660, 677, 678, 693, 994, 998, 999, 1008, 1030, 1043, 1044, 1048, 1051, 1052, 1053, 1055], "linearregressionifittedlinearregress": 249, "linearregressionlinearregress": 162, "linearsvc": [1, 61, 63, 103, 105, 169, 170, 188, 196, 251, 274, 276, 284, 320, 327, 343, 345, 349, 350, 355, 359, 372, 387, 391, 413, 423, 424, 443, 518, 573, 583, 637, 645, 649, 658, 678, 679, 680, 681, 682, 693, 741, 748, 833, 838, 911, 912, 915, 917, 994, 998, 999, 1013, 1019, 1039, 1040, 1041, 1045, 1047, 1050, 1055], "linearsvc__c": 320, "linearsvclinearsvc": [105, 170, 284], "linearsvr": [1, 574, 916, 1013, 1043, 1045, 1050, 1055], "linecollect": [50, 242, 249, 638], "linen": [50, 242], "lineno": 391, "lineplot": [154, 277], "liner": [387, 836], "lines_": [392, 638, 812, 829], "linestyl": [48, 49, 68, 94, 106, 112, 131, 133, 138, 150, 161, 164, 166, 175, 178, 180, 182, 184, 193, 194, 204, 206, 207, 208, 219, 220, 221, 225, 229, 231, 232, 237, 254, 256, 271, 274, 276, 280, 281, 286, 291, 303, 311, 314, 319, 346, 349, 350, 352, 353, 355, 1028], "linewidth": [60, 68, 69, 71, 74, 92, 106, 110, 117, 122, 139, 151, 154, 156, 175, 179, 183, 208, 209, 213, 214, 215, 217, 220, 222, 225, 233, 236, 246, 254, 256, 286, 290, 304, 308, 319, 328, 334, 346, 347, 349, 365, 1028], "linger": 221, "linguist": [722, 907, 1011], "lingyi1110": 1054, "link": [50, 54, 138, 191, 192, 198, 219, 223, 237, 262, 271, 280, 308, 363, 373, 379, 384, 385, 386, 387, 389, 393, 399, 413, 415, 417, 420, 422, 425, 567, 568, 616, 654, 675, 686, 694, 711, 929, 931, 994, 1001, 1014, 1015, 1017, 1021, 1026, 1030, 1032, 1037, 1039, 1042, 1043, 1046, 1047, 1050, 1056], "link_thickness_i": 308, "linkag": [70, 73, 74, 75, 78, 81, 86, 89, 90, 91, 101, 188, 194, 446, 447, 451, 452, 469, 518, 520, 528, 890, 1017, 1019, 1031, 1042, 1047, 1050], "linkage_matrix": 75, "linkage_tre": 1043, "linkedin": 389, "linker": [383, 386], "linnerrud": [378, 1034], "linnerud": [1, 382, 511], "linprog": [676, 994], "linspac": [42, 46, 48, 49, 52, 60, 62, 71, 72, 74, 76, 83, 89, 112, 113, 125, 133, 139, 151, 175, 176, 178, 179, 180, 181, 182, 184, 192, 198, 199, 201, 203, 209, 213, 219, 220, 221, 225, 229, 230, 231, 232, 233, 237, 244, 246, 249, 250, 252, 254, 266, 277, 279, 280, 284, 285, 286, 287, 292, 303, 304, 310, 311, 319, 321, 331, 332, 347, 348, 351, 352, 353, 355, 356, 357, 637, 638, 812, 834, 850, 851, 1031], "lint": [385, 393], "linter": 585, "linthresh": [198, 203], "linu": [1055, 1056, 1057], "linux": [385, 387, 388, 393, 1017, 1039], "lipoprotein": [173, 382], "lippert": 994, "lippmann": 380, "lipschitz": [36, 1010], "lisa": [1047, 1048, 1050, 1051, 1053, 1054], "lise": 1053, "list": [0, 1, 42, 46, 48, 50, 51, 52, 54, 56, 57, 61, 67, 74, 78, 83, 96, 103, 133, 134, 142, 144, 150, 159, 194, 223, 256, 257, 272, 275, 277, 278, 280, 281, 286, 290, 307, 320, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 351, 360, 361, 374, 379, 380, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 403, 406, 413, 415, 416, 419, 421, 422, 423, 438, 440, 443, 456, 462, 463, 470, 471, 472, 473, 477, 478, 484, 488, 489, 490, 494, 495, 496, 497, 498, 499, 502, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 529, 538, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 597, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 638, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 687, 690, 692, 693, 698, 702, 703, 705, 716, 717, 718, 719, 722, 724, 731, 739, 748, 752, 760, 784, 787, 789, 794, 800, 803, 804, 806, 809, 810, 812, 817, 818, 820, 829, 831, 832, 833, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 874, 878, 881, 883, 884, 889, 891, 907, 911, 913, 916, 918, 919, 920, 921, 924, 926, 930, 931, 932, 936, 938, 939, 940, 942, 950, 951, 953, 964, 969, 972, 982, 987, 988, 994, 998, 1000, 1001, 1002, 1005, 1006, 1009, 1014, 1017, 1018, 1022, 1023, 1027, 1029, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "list_param": 385, "listedcolormap": [66, 69, 147, 306, 309, 313, 320], "listen": 359, "listinfo": 393, "lite": 1039, "liter": [385, 389, 1022], "literatur": [82, 180, 277, 295, 360, 382, 385, 391, 393, 397, 398, 415, 418, 420, 422, 449, 453, 455, 507, 542, 544, 546, 553, 561, 562, 594, 597, 714, 803, 987, 990, 994, 998, 1049], "litsidi": [1054, 1055], "littl": [191, 192, 193, 194, 246, 380, 423, 468, 650, 806, 820, 947, 988, 995, 997, 1013, 1014, 1030, 1040, 1051, 1056], "lituiev": 1052, "liu": [0, 283, 375, 396, 569, 732, 762, 998, 1004, 1042, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "liutong": 1047, "live": [49, 103, 191, 271, 311, 380, 385, 415, 504, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 1021], "livesei": 359, "livni": [415, 448], "lizao": 1047, "lizsz": 1045, "lj2017": 415, "lk": 1042, "lkjcalc": 1047, "lkubin": 1050, "ll": [49, 89, 146, 272, 311, 385, 397, 538, 547, 990, 1001, 1014, 1023], "llcrnrlat": [49, 311], "llcrnrlon": [49, 311], "lle": [239, 240, 241, 243, 536, 695, 699, 995, 1051], "lle_hessian": 239, "lle_ltsa": 239, "lle_method": 239, "lle_mod": 239, "lle_standard": 239, "lloyd": [415, 449, 453, 455, 465, 1053, 1054], "llvm": 383, "lm": 200, "lmbda": 322, "lmbda_bc": 322, "lmbda_yj": 322, "lml": [176, 177, 181, 425], "ln": [389, 994, 1002, 1008], "loa": [174, 182, 188, 425, 502, 617, 621, 628, 629, 631, 1019], "load": [1, 9, 42, 44, 49, 50, 51, 53, 62, 67, 80, 82, 87, 104, 105, 119, 124, 134, 143, 145, 147, 149, 155, 156, 159, 160, 162, 170, 171, 180, 191, 192, 196, 200, 215, 216, 219, 227, 235, 248, 249, 253, 255, 256, 257, 258, 260, 267, 271, 273, 275, 277, 282, 284, 289, 291, 295, 298, 302, 307, 314, 315, 316, 328, 329, 331, 332, 334, 339, 340, 341, 364, 367, 372, 377, 380, 382, 388, 391, 398, 409, 418, 419, 420, 422, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 538, 540, 549, 850, 851, 947, 1008, 1018, 1024, 1026, 1028, 1034, 1039, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "load_ames_h": 159, "load_boston": [1045, 1047, 1052], "load_breast_canc": [1, 173, 194, 340, 363, 390, 598, 601, 602, 604, 680, 681, 794, 998, 1044, 1045, 1050], "load_cont": 509, "load_dataset": 359, "load_diabet": [1, 45, 152, 162, 164, 173, 187, 204, 206, 207, 208, 215, 216, 257, 273, 332, 422, 564, 568, 574, 679, 707, 831, 832, 833, 919, 921, 1006, 1027, 1030, 1045, 1050, 1053], "load_digit": [1, 67, 85, 86, 92, 105, 106, 119, 165, 171, 210, 226, 240, 250, 251, 275, 276, 279, 285, 293, 300, 302, 307, 314, 316, 333, 337, 338, 391, 416, 427, 451, 452, 538, 539, 540, 541, 605, 606, 644, 645, 674, 694, 695, 696, 697, 699, 701, 1023, 1027, 1028, 1029, 1030, 1031, 1045, 1050], "load_fil": [1, 379, 380, 1032, 1041, 1053], "load_iri": [1, 65, 75, 79, 107, 120, 128, 130, 132, 134, 147, 160, 166, 169, 177, 202, 212, 228, 260, 264, 270, 282, 283, 284, 286, 287, 301, 306, 309, 314, 327, 329, 332, 342, 344, 345, 348, 351, 364, 367, 398, 409, 415, 416, 419, 422, 424, 435, 567, 573, 607, 608, 616, 625, 626, 628, 629, 637, 664, 665, 717, 794, 806, 809, 810, 812, 820, 838, 859, 905, 906, 907, 918, 920, 922, 923, 924, 988, 993, 998, 999, 1000, 1001, 1005, 1008, 1014, 1023, 1029, 1030, 1031, 1045, 1047, 1050], "load_lfw_pair": 1044, "load_linnerud": [1, 843, 1045, 1050], "load_mnist": [227, 298], "load_mtpl2": 237, "load_sample_imag": [1, 82, 589, 590, 593, 1048], "load_svmlight_fil": [1, 379, 1039, 1040, 1045, 1046, 1047, 1054], "load_win": [1, 47, 259, 323, 854, 862, 1036, 1050], "loader": [1, 278, 341, 359, 378, 379, 380, 504, 505, 514, 1018, 1032, 1039, 1044, 1046, 1047, 1050], "loan": [422, 540, 994, 1022], "loayza": 1053, "lobpcg": [80, 458, 468, 694, 697, 701, 1049, 1052, 1053, 1054], "loc": [42, 45, 46, 47, 60, 62, 68, 74, 105, 108, 111, 112, 113, 116, 120, 126, 128, 131, 132, 133, 138, 140, 141, 142, 150, 151, 152, 153, 154, 156, 159, 161, 162, 169, 175, 176, 182, 184, 191, 192, 201, 204, 209, 213, 219, 220, 221, 222, 225, 226, 229, 232, 233, 236, 237, 242, 249, 250, 251, 252, 254, 256, 264, 265, 272, 275, 276, 277, 280, 281, 284, 287, 290, 291, 292, 301, 303, 304, 314, 319, 322, 323, 328, 331, 334, 339, 347, 350, 352, 354, 355, 359, 364, 366, 820, 887, 899, 1027], "loc_a": 322, "loc_b": 322, "local": [1, 42, 47, 50, 57, 73, 86, 91, 95, 124, 127, 143, 144, 156, 173, 180, 181, 188, 192, 220, 233, 238, 241, 243, 246, 250, 256, 299, 308, 347, 365, 366, 373, 382, 383, 385, 389, 391, 393, 403, 415, 420, 422, 423, 425, 453, 458, 468, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 508, 544, 546, 550, 553, 555, 565, 566, 569, 572, 616, 617, 694, 695, 696, 697, 698, 699, 701, 702, 764, 765, 853, 856, 859, 861, 871, 880, 903, 906, 914, 964, 996, 997, 1001, 1002, 1014, 1019, 1021, 1031, 1033, 1034, 1043, 1047, 1051, 1054, 1057], "localcach": 403, "locally_linear_embed": [1, 243, 995], "locallylinearembed": [1, 50, 239, 240, 241, 331, 694, 696, 698, 995, 1001, 1044, 1045, 1053, 1054, 1055], "localoutlierfactor": [1, 246, 256, 304, 305, 331, 399, 569, 914, 1004, 1046, 1047, 1049, 1053, 1054, 1055, 1056], "localoutlierfactor__n_neighbor": 256, "locat": [47, 61, 87, 88, 105, 112, 113, 213, 311, 329, 348, 378, 380, 383, 385, 389, 390, 393, 394, 403, 415, 417, 421, 454, 466, 467, 475, 476, 477, 478, 479, 480, 481, 482, 494, 506, 507, 510, 511, 518, 521, 983, 988, 994, 999, 1004, 1008, 1014, 1047], "location_": [112, 113, 475, 476, 477, 478, 479, 480, 481, 482], "location_reweight": [475, 480], "lock": [403, 408, 409, 964, 1057], "loev": 540, "lof": [1, 47, 188, 233, 246, 256, 299, 347, 569, 856, 914, 1004, 1019], "lof_kw": 256, "lofti": [1049, 1050], "log": [1, 42, 57, 61, 62, 63, 110, 124, 138, 149, 151, 159, 169, 173, 176, 177, 179, 180, 181, 184, 204, 207, 208, 212, 219, 224, 229, 237, 250, 252, 266, 308, 323, 359, 380, 382, 383, 385, 389, 393, 394, 399, 412, 413, 415, 416, 417, 420, 422, 423, 425, 454, 457, 466, 471, 476, 477, 478, 479, 480, 481, 482, 538, 542, 547, 555, 556, 557, 559, 561, 563, 565, 568, 570, 596, 597, 599, 600, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 648, 651, 654, 664, 665, 675, 677, 682, 686, 728, 747, 757, 761, 803, 804, 806, 809, 810, 820, 845, 846, 847, 848, 849, 850, 851, 855, 866, 867, 874, 875, 904, 907, 912, 915, 917, 918, 920, 945, 987, 990, 992, 994, 995, 1000, 1001, 1003, 1006, 1008, 1012, 1014, 1017, 1018, 1030, 1041, 1042, 1043, 1048, 1049, 1050, 1053, 1056, 1057], "log10": [169, 181, 191, 204, 212, 278, 348], "log1p": [108, 249, 874, 998, 1008], "log2": [142, 229, 258, 563, 564, 565, 566, 570, 571, 918, 919, 920, 921, 999], "log_": 998, "log_2": [412, 569, 1004], "log_bas": 732, "log_den": 303, "log_dens": 855, "log_likelihood": [110, 616, 617, 803, 804], "log_likelihood_gradi": [616, 617], "log_logist": 1056, "log_loss": [1, 61, 62, 150, 153, 176, 323, 341, 359, 399, 413, 422, 563, 565, 567, 570, 652, 664, 682, 918, 920, 987, 994, 998, 1012, 1014, 1041, 1043, 1045, 1053, 1054, 1055, 1056], "log_marginal_likelihood": [176, 177, 179, 181, 184, 425, 616, 617, 1049], "log_marginal_likelihood_value_": [616, 617], "log_prob": [803, 804, 805, 828], "log_reg": [260, 331], "log_reg_input_featur": 331, "log_scal": 1055, "log_scale_transform": [219, 237], "log_scaled_numer": [219, 237], "log_y_prob": 867, "logaddexp": 1056, "logan": [1053, 1054, 1055], "logarithm": [1, 108, 159, 191, 223, 250, 278, 348, 399, 424, 466, 596, 664, 665, 682, 710, 732, 747, 757, 761, 762, 763, 797, 805, 828, 841, 850, 851, 945, 1014, 1027, 1046], "logcosh": [427, 539], "logdet": 945, "logged_in": 380, "logger": 1050, "logic": [136, 373, 386, 387, 392, 411, 422, 1014, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "logical_and": [52, 151], "logical_not": [56, 98, 133, 222], "logical_or": [221, 227, 286, 391], "logical_xor": [52, 179, 352], "loginov": 1045, "logist": [1, 61, 63, 65, 102, 104, 108, 120, 134, 143, 165, 171, 188, 197, 204, 206, 214, 216, 217, 223, 225, 228, 230, 236, 247, 249, 260, 271, 285, 288, 291, 297, 315, 316, 323, 331, 344, 355, 356, 359, 399, 400, 413, 416, 422, 424, 425, 443, 495, 502, 508, 510, 518, 547, 565, 567, 616, 637, 652, 663, 664, 665, 672, 674, 682, 747, 806, 820, 836, 839, 866, 867, 868, 870, 890, 917, 933, 935, 998, 1002, 1003, 1012, 1013, 1019, 1020, 1022, 1028, 1034, 1043, 1046, 1047, 1049, 1050], "logistic__c": [106, 1028], "logistic_regress": [271, 829, 837], "logistic_regression_path": [1047, 1048], "logisticregress": [1, 61, 65, 104, 106, 143, 161, 165, 171, 172, 173, 202, 209, 210, 211, 212, 226, 234, 235, 247, 248, 258, 260, 271, 280, 286, 291, 316, 320, 327, 328, 329, 330, 331, 333, 335, 359, 372, 385, 387, 391, 393, 398, 406, 413, 414, 416, 422, 424, 435, 440, 444, 573, 575, 603, 637, 640, 649, 658, 665, 678, 679, 680, 681, 682, 693, 706, 794, 805, 820, 829, 835, 837, 841, 842, 844, 895, 896, 898, 899, 900, 901, 917, 941, 942, 943, 982, 994, 998, 999, 1008, 1012, 1013, 1028, 1030, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "logisticregression__c": [271, 320], "logisticregressioncv": [1, 63, 323, 399, 406, 664, 994, 999, 1043, 1044, 1045, 1047, 1048, 1049, 1053, 1054, 1056, 1057], "logisticregressionifittedlogisticregress": 316, "logisticregressionlogisticregress": [104, 143, 247, 248, 258, 260, 271, 291, 328, 331], "logit": [1, 413, 425, 664, 665, 994], "loglik_lw": 110, "loglik_oa": 110, "loglik_r": 110, "loglike_": 538, "loglog": [110, 250], "logloss": 1050, "lognorm": [151, 181, 200, 266, 322, 1008], "logo": [0, 419, 813], "logprob": 855, "logreg": [202, 844], "logspac": [42, 50, 63, 106, 110, 131, 164, 173, 176, 181, 191, 212, 223, 224, 250, 252, 266, 271, 278, 290, 293, 302, 313, 320, 323, 348, 355, 829, 837, 993, 994, 1027, 1028, 1030], "logsumexp": [308, 1046], "loguniform": [44, 175, 285, 987, 1028, 1049], "logx": [223, 355], "lohit": 1056, "loic": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "loki": [373, 998, 1047, 1050], "lomp": 383, "lon": 770, "london": [416, 423, 472], "londschien": [220, 1052, 1056], "lone": [1054, 1055], "long": [29, 42, 49, 50, 78, 96, 151, 180, 187, 191, 193, 219, 253, 254, 256, 280, 311, 318, 328, 359, 360, 368, 373, 383, 385, 393, 397, 399, 400, 409, 415, 459, 504, 544, 682, 683, 684, 809, 810, 845, 846, 847, 848, 849, 867, 868, 878, 998, 1004, 1008, 1009, 1011, 1012, 1016, 1041, 1045, 1051, 1053], "long_term_trend_kernel": 180, "long_titl": 352, "longer": [0, 42, 69, 87, 141, 191, 192, 204, 315, 330, 385, 387, 415, 419, 422, 423, 455, 542, 569, 993, 997, 998, 1000, 1003, 1013, 1021, 1022, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "longest": 298, "longitud": [311, 318, 380, 504, 705, 770], "longpathsen": 403, "longstand": [1040, 1046], "loo": [399, 814, 1050], "look": [42, 43, 63, 87, 89, 124, 127, 129, 151, 152, 175, 180, 181, 187, 191, 192, 221, 239, 243, 246, 253, 268, 271, 272, 277, 279, 291, 315, 334, 359, 360, 368, 373, 374, 379, 380, 385, 386, 387, 389, 391, 393, 397, 398, 415, 418, 420, 421, 422, 423, 454, 494, 495, 563, 564, 565, 566, 570, 571, 608, 609, 637, 665, 698, 890, 918, 919, 920, 921, 994, 995, 1008, 1012, 1013, 1015, 1031, 1032, 1039, 1047, 1049], "lookup": [394, 963, 1048], "loop": [45, 46, 141, 151, 191, 272, 282, 359, 367, 372, 385, 386, 391, 415, 419, 424, 652, 653, 658, 659, 665, 666, 667, 668, 669, 987, 1011, 1012, 1027, 1042, 1043, 1046, 1051, 1052, 1055, 1056], "loopym": 1049, "loos": [268, 274, 1013, 1047], "looser": 212, "lope": 196, "lopez": 196, "lopusz": 1050, "lorain": 332, "lorek": 1046, "lorentzen": [0, 220, 221, 404, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "lorenz": [219, 237, 1044, 1056], "lorenz_curv": [219, 237], "lose": [223, 236, 361, 380, 399, 418, 423, 425, 946, 947, 988, 994, 1032], "losi": [0, 405, 1039], "loss": [1, 24, 45, 51, 60, 61, 62, 63, 133, 144, 150, 151, 152, 153, 175, 176, 188, 197, 201, 209, 212, 221, 223, 224, 226, 227, 231, 237, 252, 271, 285, 314, 315, 323, 330, 334, 335, 341, 345, 346, 350, 352, 355, 359, 397, 399, 413, 420, 425, 470, 471, 502, 514, 515, 538, 544, 545, 546, 549, 553, 558, 559, 560, 564, 565, 566, 567, 568, 571, 649, 652, 655, 664, 665, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 709, 712, 715, 728, 729, 740, 741, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 796, 797, 802, 806, 809, 810, 820, 832, 833, 836, 867, 868, 870, 871, 874, 875, 883, 884, 885, 890, 910, 911, 916, 917, 919, 921, 947, 951, 991, 994, 1002, 1006, 1011, 1012, 1013, 1014, 1019, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "loss_": [314, 867, 868, 1002, 1053], "loss_curve_": [314, 867, 868], "loss_func": 51, "loss_funct": 51, "loss_function_": [672, 674, 682, 683, 1056], "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 51, "lossfunct": [674, 682, 683, 1048], "lossi": 415, "lossili": 399, "lost": [57, 91, 114, 380, 386, 397, 995, 998], "lostanlen": 1049, "lostcoast": 1049, "lot": [42, 114, 154, 191, 223, 380, 385, 386, 387, 393, 420, 422, 809, 810, 902, 903, 987, 1010, 1012, 1013, 1017, 1018, 1022, 1031, 1032, 1039, 1044, 1046, 1047, 1048, 1049, 1051], "lot_area": 256, "lotan": 1022, "lotconfig": 148, "lotfrontag": 108, "loui": [332, 1044, 1045, 1049, 1051, 1053, 1055, 1056], "louib": [1047, 1048], "loupp": [0, 141, 142, 405, 422, 561, 562, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lourida": 1045, "love": 1032, "low": [1, 36, 42, 49, 50, 71, 84, 113, 117, 126, 128, 131, 138, 141, 155, 173, 193, 212, 214, 219, 221, 223, 233, 239, 241, 246, 250, 256, 262, 263, 265, 268, 270, 271, 277, 279, 283, 284, 293, 304, 305, 315, 322, 324, 325, 333, 340, 347, 348, 359, 367, 381, 382, 385, 390, 393, 397, 399, 403, 412, 413, 414, 419, 420, 423, 448, 450, 455, 474, 527, 530, 541, 588, 595, 609, 685, 698, 702, 711, 732, 748, 795, 855, 884, 891, 908, 947, 963, 987, 993, 994, 995, 997, 998, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1013, 1014, 1020, 1034, 1040, 1043, 1044, 1045, 1047, 1048, 1053, 1054], "low_cardin": 324, "low_cardinality_featur": 324, "low_cardinalityindex": 324, "low_i": 214, "low_x": 214, "lower": [36, 43, 51, 62, 63, 66, 68, 92, 111, 117, 120, 124, 126, 131, 138, 141, 144, 147, 151, 154, 155, 171, 175, 177, 179, 181, 183, 191, 192, 193, 203, 204, 205, 209, 219, 220, 221, 222, 232, 239, 243, 249, 250, 255, 264, 268, 271, 276, 277, 279, 280, 284, 285, 287, 290, 291, 301, 302, 304, 305, 320, 323, 331, 335, 340, 348, 359, 360, 361, 364, 380, 385, 399, 413, 414, 415, 418, 419, 420, 421, 422, 423, 426, 450, 454, 470, 473, 504, 515, 538, 540, 547, 550, 559, 565, 566, 567, 568, 569, 594, 595, 597, 609, 617, 619, 620, 621, 623, 625, 626, 628, 629, 631, 638, 639, 641, 643, 683, 685, 718, 722, 731, 734, 740, 745, 803, 804, 856, 858, 860, 861, 862, 864, 891, 910, 911, 912, 913, 914, 917, 934, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1013, 1014, 1030, 1041, 1042, 1047, 1054, 1056], "lower_bound": 276, "lower_bound_": [803, 804, 1047], "lowercas": [423, 431, 448, 449, 451, 453, 455, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 594, 595, 597, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 871, 876, 902, 903, 1052], "lowest": [1, 108, 117, 192, 203, 267, 379, 415, 419, 641, 643, 809, 810, 813, 917, 918, 995, 998, 1014, 1054], "loyal": 1044, "loyola": [0, 375, 1052, 1053], "lo\u00efc": [0, 404, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "lp_model": [337, 338], "lpgo": [419, 815], "lpo": 816, "lprun": 391, "lr": [61, 63, 143, 161, 162, 222, 248, 249, 273, 280, 398, 406, 422, 574, 575, 576, 718, 982], "lr_": 998, "lr__c": 422, "lr_base": 280, "lrap": [745, 998], "lrjball": [1049, 1050], "ls100": 342, "ls2010": 990, "ls30": 342, "ls50": 342, "ls_pipelin": 341, "lsa": [1, 420, 550, 1041], "lsa_vector": 360, "lshforest": [1043, 1046], "lsi": 420, "lsqr": [68, 325, 555, 678, 680, 693, 992, 1040, 1046, 1053], "lstrip": [66, 78, 96, 246, 313, 320], "lstsq": [133, 385, 663, 676], "lsturtew": 1052, "lsvc": 424, "lsvm": 196, "lsvm_score": 196, "lsvm_time": 196, "lt": [104, 105, 143, 159, 191, 267, 275, 289, 383, 385, 1025], "ltd": [271, 380], "ltg": [173, 382, 507], "ltorgo": 380, "ltsa": [239, 240, 241, 695, 699, 995], "lu": [547, 550, 946, 947, 1045, 1046, 1047, 1048, 1055, 1056, 1057], "luangkot": 1046, "luca": [1039, 1049, 1050, 1051, 1052], "lucca": 1052, "luce": 1042, "lucen": 423, "lucgiffon": 1050, "luci": [0, 283, 375, 396, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "luciano": [1047, 1054], "lucieclair": 1053, "lucija": 1047, "lucio": 1048, "lucki": 368, "lucyleeow": 1050, "ludwig": 1039, "luessi": 1041, "lui": [664, 1040, 1042, 1043, 1047, 1056], "luiz": 1053, "luk": 1048, "luka": [1043, 1050, 1056, 1057], "luke": 1047, "lukowski": 1054, "luk\u00e1\u0161": 1056, "luna": 1053, "lunt": 1042, "luo": 1043, "lupo": 1051, "luqi": 1048, "luqu": 1049, "lurk": 1039, "lustig": 994, "lutz": [1045, 1049, 1052, 1056], "luxburg": [415, 458, 468, 697], "luzgin": 1049, "lv_ep": 251, "lvdmaaten": [698, 1046], "lw": [94, 110, 111, 113, 128, 132, 133, 213, 220, 222, 225, 229, 236, 242, 265, 272, 287, 303, 318, 339, 354], "lw_cov_": 114, "lw_mse": 111, "lw_prec_": 114, "lw_score": 131, "lw_shrinkag": 111, "lwda": 456, "lx": 1001, "ly": [251, 858, 860, 861, 862, 1043], "ly648499246": 1052, "lynch": [1040, 1046], "lyon": [1045, 1046], "lyra": [1040, 1043, 1044], "lyrl2004": [380, 503], "l\u00e9o": 1047, "l\u00e9on": [1012, 1053, 1054, 1055], "l\u00e9onard": [1049, 1054], "l\u00e9one": 1045, "l\u00e9oni": 1045, "l\u00f3pez": [1043, 1047, 1048, 1051], "l\u00f6fstedt": 1046, "l\u00f6ning": 1051, "m": [0, 42, 46, 49, 56, 62, 63, 78, 92, 93, 97, 98, 99, 112, 113, 124, 138, 162, 201, 219, 237, 277, 281, 311, 334, 341, 344, 354, 359, 372, 373, 379, 380, 382, 383, 389, 391, 399, 403, 412, 413, 415, 417, 420, 422, 424, 426, 450, 451, 452, 456, 463, 479, 480, 506, 519, 534, 538, 540, 542, 547, 645, 651, 655, 670, 677, 691, 692, 695, 699, 714, 722, 732, 747, 762, 764, 765, 803, 804, 856, 881, 947, 977, 978, 988, 990, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1006, 1008, 1012, 1014, 1022, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056], "m1": [383, 411], "m11": 380, "m2": 411, "m2012": 991, "m2019": 1005, "m2cgen": 1017, "m4x": [211, 235], "m_max": 177, "ma": [114, 324, 348, 994, 1045, 1050], "maascha": 1054, "maaten": [698, 702, 995], "mabel": [1047, 1051], "mabu": 1052, "mac": [56, 324, 341, 380, 385, 714, 998], "macaulei": 324, "macbook": 1047, "macdonald": [1049, 1050], "mach": [282, 413, 419, 599, 600], "machado": [413, 729], "machin": [0, 1, 38, 42, 44, 46, 47, 51, 63, 97, 106, 116, 144, 169, 170, 173, 175, 180, 189, 193, 209, 214, 231, 259, 271, 277, 280, 283, 295, 312, 318, 323, 325, 329, 332, 335, 344, 349, 352, 355, 359, 361, 372, 373, 378, 379, 380, 382, 385, 388, 391, 392, 397, 398, 399, 402, 409, 413, 415, 419, 420, 422, 423, 425, 443, 445, 454, 477, 478, 484, 508, 510, 516, 522, 523, 524, 536, 538, 540, 547, 550, 561, 562, 563, 564, 565, 566, 570, 571, 572, 599, 600, 616, 617, 620, 625, 628, 640, 644, 645, 647, 649, 650, 651, 656, 657, 660, 661, 662, 663, 664, 665, 682, 688, 689, 698, 714, 719, 731, 741, 747, 749, 791, 794, 803, 835, 836, 850, 851, 856, 859, 866, 867, 868, 870, 888, 890, 896, 910, 911, 912, 913, 915, 916, 920, 921, 987, 988, 990, 991, 994, 995, 996, 998, 999, 1001, 1004, 1005, 1006, 1008, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1032, 1033, 1034, 1036, 1039, 1041, 1051, 1052, 1053, 1054, 1056], "maciej": 1050, "maci\u00e0": [998, 1052, 1054], "mackai": [650, 651, 994], "mackenbach": 1050, "maco": [386, 388, 403, 411, 1047, 1051, 1053], "macosx": 1039, "macro": [44, 67, 103, 170, 275, 316, 327, 337, 338, 380, 419, 713, 719, 735, 736, 744, 789, 790, 793, 794, 828, 998, 1032, 1039, 1047, 1055], "macro_roc_auc_ovo": 286, "macro_roc_auc_ovr": 286, "macroscop": 415, "macsween": [1048, 1049], "mad": [677, 1045], "madan": 1051, "made": [0, 51, 63, 103, 113, 119, 129, 138, 144, 162, 182, 191, 192, 219, 237, 256, 268, 281, 324, 328, 348, 364, 372, 380, 382, 385, 389, 399, 400, 406, 415, 422, 423, 427, 449, 452, 453, 455, 465, 502, 509, 594, 595, 597, 636, 637, 662, 671, 691, 692, 741, 789, 806, 809, 810, 820, 824, 825, 826, 847, 850, 851, 999, 1004, 1014, 1017, 1022, 1029, 1031, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1052, 1053], "madelon": 521, "madhura": [1048, 1050, 1051, 1054, 1055], "madinak": 1054, "madsen": [1045, 1047], "mae": [42, 51, 159, 219, 221, 564, 571, 751, 919, 921, 998, 1014, 1046, 1047, 1051, 1052], "mae_test": 191, "mae_train": 191, "maennel": 1054, "magali": 1053, "magazin": [113, 424], "magda": 1050, "magenta": [110, 153], "maggi": 1053, "maggiecheg": [1049, 1053], "maggio": [1050, 1051, 1052], "magic": [253, 386, 391, 425, 622, 627, 630], "magnesium": 382, "magnitud": [42, 133, 140, 176, 187, 191, 236, 256, 282, 318, 323, 330, 335, 372, 380, 391, 415, 422, 425, 619, 658, 710, 890, 994, 998, 1002, 1008, 1012, 1014, 1041, 1048, 1057], "mahajan": [1047, 1049, 1056], "mahal": 112, "mahal_emp_cov": 112, "mahal_robust_cov": 112, "mahalanobi": [109, 113, 188, 222, 415, 417, 456, 463, 475, 476, 477, 478, 479, 480, 481, 482, 705, 784, 785, 786, 992, 1001, 1004, 1019, 1047, 1050, 1051], "mahalanobisdist": 705, "mahapatra": 1046, "mahdavi": 645, "maheshakya": [0, 1042, 1043, 1044], "mahieux": 1022, "mahimkar": 1057, "mahmood": 1057, "mahout": 847, "mai": [0, 1, 24, 46, 56, 61, 73, 78, 80, 90, 104, 117, 124, 148, 149, 154, 173, 179, 181, 183, 191, 194, 196, 199, 203, 208, 223, 225, 244, 253, 256, 280, 282, 284, 285, 291, 313, 323, 338, 348, 352, 355, 359, 360, 361, 368, 372, 373, 374, 377, 379, 380, 381, 382, 384, 385, 387, 389, 390, 393, 397, 399, 400, 403, 406, 409, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 438, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 465, 468, 471, 475, 478, 488, 489, 490, 493, 494, 495, 502, 514, 515, 521, 540, 541, 544, 546, 547, 550, 553, 554, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 580, 587, 600, 603, 608, 616, 617, 623, 626, 640, 641, 643, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 682, 683, 684, 685, 687, 690, 692, 694, 695, 697, 698, 699, 701, 703, 711, 717, 718, 721, 722, 724, 725, 727, 728, 729, 730, 732, 744, 762, 769, 791, 792, 806, 808, 809, 810, 811, 820, 821, 822, 825, 826, 831, 835, 838, 843, 844, 845, 846, 847, 849, 852, 853, 854, 856, 858, 860, 861, 862, 868, 869, 870, 873, 875, 885, 887, 888, 889, 890, 891, 893, 899, 902, 903, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 928, 950, 951, 987, 988, 990, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1023, 1029, 1030, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "maikia": [45, 152, 159, 187, 1047, 1048, 1050, 1051], "mail": [221, 323, 380, 385, 389, 393, 397, 400, 1047, 1048], "mailhot": 1039, "mailman": 393, "main": [1, 36, 47, 67, 96, 117, 128, 148, 188, 246, 286, 297, 326, 355, 359, 372, 373, 374, 378, 383, 385, 387, 389, 391, 393, 397, 398, 399, 402, 403, 413, 415, 420, 422, 423, 425, 509, 531, 536, 555, 556, 631, 719, 840, 910, 911, 987, 995, 997, 998, 1005, 1010, 1018, 1021, 1029, 1032, 1039, 1042, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "mainak": 1046, "maingret": 1050, "mainli": [63, 87, 138, 141, 175, 286, 295, 372, 387, 413, 617, 1000, 1005], "maint": 389, "maint_tool": 389, "maintain": [89, 224, 237, 239, 253, 277, 373, 384, 388, 391, 392, 393, 397, 399, 400, 403, 415, 422, 446, 448, 879, 880, 886, 887, 890, 895, 898, 899, 901, 994, 995, 1008, 1017, 1018, 1023, 1034, 1054], "mainten": [0, 385, 393, 397, 403, 408, 994, 1018, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "mainy": 1051, "mair": 641, "mairal": [420, 537, 543], "maisonneuv": 1051, "maithreyi": 1049, "maj": 575, "major": [1, 48, 53, 69, 144, 284, 318, 322, 327, 328, 329, 330, 331, 332, 333, 334, 352, 361, 372, 380, 384, 385, 388, 391, 397, 400, 409, 415, 419, 421, 423, 557, 575, 576, 700, 922, 924, 998, 1001, 1012, 1018, 1022, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "make": [0, 1, 42, 45, 46, 49, 51, 53, 54, 57, 58, 61, 62, 63, 73, 74, 77, 78, 90, 95, 96, 101, 106, 129, 138, 144, 148, 151, 154, 157, 170, 173, 175, 180, 183, 190, 191, 192, 193, 198, 203, 205, 208, 211, 212, 213, 215, 219, 220, 221, 223, 225, 237, 240, 248, 250, 252, 253, 254, 256, 262, 264, 267, 268, 271, 272, 277, 279, 280, 286, 287, 288, 291, 297, 307, 315, 318, 319, 324, 331, 333, 335, 348, 357, 359, 360, 361, 368, 372, 373, 374, 379, 380, 383, 384, 386, 387, 388, 390, 391, 393, 397, 399, 403, 406, 409, 412, 413, 415, 416, 417, 419, 420, 422, 423, 424, 427, 446, 447, 448, 449, 451, 453, 455, 457, 458, 459, 464, 465, 466, 468, 494, 509, 520, 521, 528, 529, 533, 538, 540, 547, 557, 558, 561, 562, 567, 568, 589, 590, 613, 614, 637, 655, 661, 662, 677, 697, 701, 736, 743, 748, 774, 775, 787, 803, 804, 806, 808, 811, 817, 821, 822, 825, 826, 832, 833, 840, 841, 844, 877, 886, 889, 890, 894, 898, 900, 901, 902, 903, 916, 924, 930, 931, 941, 947, 953, 959, 984, 987, 988, 990, 992, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1023, 1028, 1030, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "make_": 1048, "make_biclust": [1, 58, 519, 1041], "make_blob": [1, 60, 62, 68, 72, 76, 77, 78, 83, 89, 90, 91, 93, 94, 96, 97, 98, 121, 211, 231, 246, 265, 321, 328, 331, 346, 349, 350, 356, 381, 387, 388, 422, 521, 702, 716, 798, 799, 1047, 1050, 1053], "make_cbar": 288, "make_checkerboard": [1, 57, 517, 1041], "make_circl": [1, 66, 78, 96, 129, 157, 244, 313, 314, 320, 339, 381, 1040, 1047, 1050], "make_classif": [1, 61, 63, 66, 121, 142, 143, 145, 170, 172, 274, 280, 288, 289, 308, 313, 320, 327, 329, 333, 335, 355, 368, 381, 388, 411, 414, 422, 443, 444, 493, 518, 559, 561, 563, 570, 611, 613, 672, 703, 704, 706, 708, 805, 828, 829, 834, 835, 837, 840, 867, 870, 910, 917, 987, 998, 999, 1008, 1013, 1045, 1046, 1047, 1049], "make_column_selector": [1, 104, 148, 159, 256, 416, 470, 473, 1049], "make_column_transform": [1, 148, 159, 191, 248, 328, 416, 470, 472, 1047], "make_data": [69, 95], "make_dataset": 1048, "make_default": 968, "make_ellips": 264, "make_estim": 256, "make_friedman1": [1, 381, 422, 545, 549, 599, 600, 638], "make_friedman2": [1, 381, 617, 619, 620, 621, 622, 623, 627, 630, 631], "make_friedman3": [1, 381], "make_gaussian_quantil": [1, 121, 138, 140, 381, 476, 480, 481, 482, 487, 526], "make_hastie_10_2": [1, 153, 281, 381, 422, 565, 1005], "make_heatmap": 288, "make_low_rank_matrix": [1, 333, 335, 530], "make_ml_clf": 122, "make_moon": [1, 66, 78, 96, 246, 277, 313, 314, 320, 381, 987, 1046, 1050], "make_multilabel_classif": [1, 122, 254, 381, 521, 542, 794, 841, 842, 998, 1041, 1042, 1044, 1050], "make_pipelin": [1, 42, 66, 92, 117, 143, 148, 159, 169, 170, 173, 186, 187, 191, 192, 196, 198, 207, 208, 219, 220, 225, 233, 237, 240, 246, 247, 248, 256, 257, 258, 260, 271, 274, 284, 291, 298, 307, 313, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 360, 368, 398, 406, 416, 419, 573, 682, 684, 862, 870, 895, 896, 898, 899, 900, 901, 910, 911, 912, 913, 915, 916, 988, 1001, 1008, 1012, 1013, 1042, 1049, 1052], "make_plot": 318, "make_regress": [1, 48, 108, 198, 200, 201, 205, 222, 223, 290, 328, 334, 368, 381, 387, 388, 398, 560, 562, 566, 571, 612, 614, 615, 641, 652, 653, 655, 657, 658, 659, 661, 666, 667, 668, 669, 670, 671, 673, 677, 685, 687, 688, 689, 691, 692, 693, 868, 911, 998, 999, 1001], "make_s_curv": [1, 239, 244], "make_scor": [1, 51, 151, 154, 271, 281, 335, 406, 414, 419, 806, 828, 832, 833, 998, 1048, 1056], "make_sparse_coded_sign": [1, 218, 537, 543, 551, 552, 1053, 1055], "make_sparse_spd_matrix": [1, 114, 484, 535, 1056], "make_sparse_uncorrel": [1, 381], "make_spd_matrix": [1, 533], "make_subplot": 144, "make_swiss_rol": [1, 101, 243, 1053], "make_union": [1, 416, 869, 1042, 1046], "makedir": 1046, "maker": [190, 191], "makhija": 1054, "makoeppel": 1052, "maksym": 1054, "maladier": 1054, "maladi\u00e8r": [1054, 1055], "malcolm": 1047, "maldonado": [1049, 1052], "male": [104, 191, 332, 390, 883, 884, 1008], "malem": 1056, "malet": 1039, "malform": [54, 1043], "malic": [323, 382], "malic_acid": 47, "malici": 409, "malign": [173, 382, 506], "malik": [415, 458, 468, 697], "mallat": [670, 691, 692, 994], "mallatpursuit93": [670, 691, 692], "mallow": [737, 1045], "maloo": [1047, 1048], "malt": [220, 1052, 1053, 1054, 1056], "maltimor": 1049, "malu": 237, "malzer": 452, "mal\u00e9zieux": 1052, "mamba": 409, "mame": 1056, "mammal": 49, "mammalian": 420, "man": [420, 596, 775, 845, 849, 996, 998, 1000], "manag": [0, 1, 117, 260, 371, 379, 383, 386, 387, 389, 393, 397, 399, 400, 409, 422, 456, 474, 632, 908, 992, 1014, 1017, 1018, 1022, 1032, 1034, 1052, 1055], "manaileng": 1052, "manasimj": 1057, "mandal": 1049, "mandatori": [385, 423, 435, 637], "mandatorili": 1046, "mandera": 1042, "mandi": [1050, 1053], "mandjev": 1053, "mandyam": 1049, "mangasarian": [173, 382], "mangipudi": 1045, "manh": 1047, "manhattan": [415, 447, 451, 456, 463, 705, 768, 777, 784, 785, 786, 857, 996, 1001, 1043, 1048, 1055], "manhattan_dist": [1, 456, 463, 694, 768, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 1039, 1049, 1054, 1055], "manhattandist": 705, "mani": [42, 45, 48, 56, 89, 90, 107, 110, 114, 138, 144, 145, 146, 147, 152, 169, 173, 193, 219, 239, 250, 263, 270, 271, 277, 284, 285, 289, 298, 318, 323, 324, 327, 328, 329, 330, 331, 333, 334, 335, 359, 368, 372, 374, 380, 382, 384, 385, 398, 399, 400, 403, 409, 412, 413, 415, 416, 417, 420, 422, 423, 424, 425, 427, 509, 547, 559, 560, 563, 564, 565, 566, 570, 571, 572, 612, 615, 633, 645, 656, 660, 664, 665, 672, 673, 674, 682, 683, 684, 698, 701, 780, 784, 806, 810, 820, 867, 868, 883, 888, 890, 910, 918, 919, 920, 921, 987, 988, 990, 994, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1011, 1013, 1015, 1016, 1017, 1018, 1022, 1030, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1054, 1055], "manideep": 1057, "manifest": [393, 995, 1001], "manifold": [1, 50, 73, 86, 101, 143, 242, 243, 244, 250, 298, 308, 327, 331, 332, 339, 378, 399, 415, 420, 422, 508, 531, 536, 550, 555, 572, 694, 695, 696, 697, 698, 699, 700, 701, 702, 859, 871, 880, 903, 933, 1001, 1019, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1056], "manimaran": [1048, 1050, 1051, 1052, 1053], "manipul": [1, 379, 411, 513, 1017, 1045], "manish": 1050, "maniteja": [1045, 1046, 1047], "mankoo": 1054, "mann": 1049, "mannbi": 1047, "manner": [42, 108, 124, 170, 192, 196, 264, 331, 332, 373, 385, 391, 415, 420, 422, 423, 715, 850, 851, 987, 998, 1014, 1042, 1049], "mannila": 1010, "manning2008": 998, "manoharan": [1046, 1047], "manoj": [0, 76, 173, 201, 405, 1042, 1043, 1044, 1045, 1046], "manojkumarsivaraj334": 76, "manraj": 1046, "mansi": 1054, "mansingh": 1053, "mansouri": 1055, "mantovani": 1054, "manu": 380, "manual": [1, 42, 80, 89, 191, 192, 194, 220, 230, 279, 298, 340, 346, 359, 361, 372, 373, 380, 385, 389, 390, 397, 398, 403, 409, 415, 419, 420, 421, 443, 455, 573, 805, 828, 860, 883, 889, 987, 992, 993, 994, 997, 998, 1001, 1008, 1018, 1023, 1024, 1032, 1047, 1049, 1055, 1057], "manuel": [1039, 1043, 1047, 1048, 1051, 1052, 1057], "manufactur": [191, 422], "manvendra": [1045, 1046], "maocx": 1049, "map": [1, 22, 36, 42, 43, 48, 49, 54, 56, 62, 87, 117, 129, 142, 150, 153, 157, 175, 188, 196, 219, 237, 239, 241, 245, 253, 256, 278, 281, 286, 306, 309, 311, 317, 318, 341, 348, 352, 360, 361, 379, 380, 386, 397, 399, 406, 409, 413, 415, 416, 419, 420, 422, 423, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 502, 504, 508, 515, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 768, 771, 803, 804, 805, 806, 809, 810, 817, 818, 820, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 898, 899, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 952, 955, 956, 987, 990, 995, 998, 1000, 1010, 1013, 1014, 1019, 1027, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056], "mapd": 998, "mape": [1, 51, 752, 998], "mape_cv_mean": 148, "mape_cv_std": 148, "mapi": 51, "mar": 50, "marc": [1046, 1048, 1049, 1055], "march": [180, 732, 762, 998, 1039, 1043, 1047, 1049, 1054], "marchand": 1053, "marchman": [1040, 1041], "marco": [1045, 1047, 1048, 1052, 1053, 1054, 1057], "marcofalk": 1046, "marcogorelli": [1047, 1048], "marcolini": 1052, "marcom": 1053, "marcu": [1047, 1056], "mare": 1056, "marek": [1039, 1056], "maren": [0, 375, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "margeta": 1047, "margin": [29, 42, 50, 61, 63, 121, 140, 176, 177, 178, 179, 180, 181, 188, 191, 192, 197, 229, 230, 232, 254, 256, 277, 295, 318, 321, 324, 343, 344, 346, 347, 348, 350, 352, 356, 357, 382, 413, 420, 422, 425, 518, 616, 617, 637, 651, 682, 741, 839, 887, 899, 912, 915, 994, 998, 1000, 1004, 1005, 1008, 1012, 1013, 1019, 1030, 1046, 1048], "marguli": 1049, "mari": [103, 1047, 1048, 1049, 1050, 1053], "maria": [45, 152, 159, 173, 187, 415, 1050, 1051, 1052, 1053, 1054], "mariam": 1051, "mariana": 1050, "mariangela": 1052, "mariano": 277, "mariel": 1050, "marielaraj": 1052, "marija": [1050, 1051, 1057], "marijn": 1051, "marin": [534, 1057], "marina": 415, "marinelm": 1048, "mario": [413, 1043, 1045, 1053, 1054, 1055], "marit": [334, 502], "mari\u00e9": [0, 375, 1048, 1049, 1050, 1051, 1052, 1053], "mark": [1, 69, 92, 122, 168, 187, 281, 288, 377, 385, 387, 389, 393, 394, 399, 415, 541, 613, 614, 617, 638, 664, 863, 864, 905, 906, 923, 937, 942, 947, 994, 1022, 1034, 1039, 1040, 1045, 1047, 1048, 1055, 1056, 1057], "markdown": 388, "marker": [48, 49, 54, 63, 65, 69, 71, 72, 76, 86, 89, 92, 93, 94, 97, 98, 116, 121, 122, 126, 144, 158, 182, 183, 196, 207, 212, 214, 216, 217, 219, 221, 222, 234, 236, 240, 262, 264, 265, 271, 272, 277, 279, 280, 281, 305, 318, 323, 339, 363, 385, 389, 423, 1047, 1049, 1050, 1055], "markeredgecolor": [83, 89, 95, 97, 98], "markeredgewidth": [112, 281], "markerfacecolor": [83, 89, 95, 97, 98], "markers": [83, 89, 92, 95, 97, 98, 151, 178, 182, 249, 271, 331], "markerstyl": 271, "market": [41, 80, 154, 188, 239, 240, 415, 417, 460, 478, 695, 1019, 1022, 1026], "marketplac": 1022, "markham": [1043, 1050, 1051], "markiwanchyshyn": 1047, "marko": [1039, 1048, 1049, 1055], "markou": 1052, "markov": [425, 617, 1003, 1017, 1039], "markovtsev": 1047, "marktab": 1044, "marku": [415, 456, 463, 1047, 1049, 1050, 1051], "marmo": [0, 376, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "maron": [415, 448], "marr": 191, "marr_unmarri": 191, "marreddi": 1053, "marri": 191, "marriott": 50, "marsgui": 1047, "marsh": 1050, "marshal": 382, "marsi": 1042, "marsland": 536, "marslast": 536, "marszalek": [764, 765, 996], "mart": [50, 1049], "martel": 1053, "martha": 324, "martian": 1049, "martin": [0, 375, 727, 729, 730, 994, 998, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056], "martin1997": 998, "martina": [1049, 1051], "martinbpr": [1044, 1045], "martinez": 1046, "martino": 1044, "martinosorb": 1044, "martinsson": [54, 541, 547, 947], "martynov": 1052, "mart\u00edn": [1052, 1053], "marufo": 1054, "marufur": 1046, "marvin": [1054, 1055], "marwaha": 1047, "marx": 1008, "maryanmorel": [1044, 1045], "marzinotto": [1047, 1048], "mar\u00eda": [1053, 1054, 1055], "mas_vnr_typ": 256, "masafumi": 1044, "masanori": [1054, 1055], "masashi": [1049, 1051], "masecchia": 1039, "mash": 423, "mask": [1, 52, 76, 100, 146, 219, 227, 256, 275, 276, 341, 394, 399, 416, 422, 470, 475, 480, 567, 568, 587, 591, 592, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 635, 636, 638, 639, 655, 677, 806, 809, 810, 820, 970, 988, 1005, 1039, 1042, 1044, 1045, 1047, 1049, 1057], "mask_al": 988, "mask_false_neg": 271, "mask_false_posit": 271, "mask_missing_values_onli": 988, "mask_out": 52, "mask_test": 237, "mask_train": [192, 237], "mask_true_neg": 271, "mask_true_posit": 271, "mask_y_pr": 65, "maskani": [1047, 1049, 1050, 1051], "masked_arrai": [348, 806, 820], "masked_equ": 114, "maskedarrai": [281, 1045], "mason": 1043, "mass": [173, 257, 382, 452, 803, 994, 1005], "massachusett": 380, "massia": [0, 1050, 1052, 1053], "massich": [1046, 1047, 1048, 1049], "massil": 1045, "masstran": 1048, "master": [50, 298, 332, 385, 389, 1022], "masurel": 1040, "masvnrarea": [108, 159], "masvnrtyp": [148, 159], "mat": [379, 423], "match": [1, 42, 57, 71, 124, 125, 127, 130, 133, 144, 188, 196, 197, 219, 241, 249, 256, 290, 352, 361, 380, 383, 387, 389, 415, 420, 422, 423, 436, 455, 470, 472, 514, 515, 521, 532, 537, 543, 548, 554, 557, 573, 574, 578, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 664, 670, 671, 691, 692, 705, 709, 710, 711, 719, 721, 725, 740, 784, 785, 786, 792, 850, 851, 855, 859, 873, 874, 875, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 910, 917, 923, 934, 995, 997, 998, 1000, 1001, 1019, 1020, 1023, 1032, 1034, 1039, 1045, 1046, 1047, 1049, 1051, 1052, 1055], "matchingdist": 705, "matchmak": 1022, "matcovici": 1049, "mate": 359, "matem\u00e1tica": 994, "mateo": 1052, "materi": [52, 191, 334, 400, 547, 587, 900, 901, 1016], "matern": [1, 184, 425, 1050, 1054], "mateusz": [1043, 1050, 1051, 1056, 1057], "math": [83, 103, 154, 173, 256, 277, 278, 382, 403, 770], "mathbb": [124, 141, 178, 418, 998, 1005, 1013], "mathbf": [178, 352, 420, 994, 998, 1002, 1003, 1012], "mathcal": [223, 355, 420, 422, 633, 702, 990, 992, 994, 998, 1012, 1052], "mathemat": [36, 138, 191, 207, 236, 280, 377, 382, 385, 399, 402, 415, 417, 420, 421, 425, 555, 556, 563, 570, 641, 652, 662, 798, 799, 804, 868, 912, 915, 918, 920, 994, 998, 1002, 1008, 1010, 1020, 1022, 1030, 1034, 1053], "matheu": 1045, "mathew": 1054, "mathi": 1052, "mathia": 1053, "mathieu": [0, 60, 82, 129, 210, 220, 240, 254, 278, 359, 405, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1052], "mathrm": [415, 417, 420, 424, 994, 1014], "mathschi": 1051, "mathur": [1046, 1048, 1049, 1054, 1055, 1057], "mathurin": [0, 1050, 1052, 1053], "mathurinm": [1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "matjansen": 1053, "mato": 1051, "matplotlib": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 334, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 379, 385, 392, 403, 408, 444, 508, 637, 638, 703, 704, 706, 707, 708, 812, 829, 924, 993, 1017, 1026, 1027, 1028, 1029, 1030, 1031, 1036, 1048, 1051, 1052, 1053, 1054, 1057], "matric": [1, 36, 69, 73, 74, 112, 114, 124, 224, 263, 264, 266, 267, 268, 298, 311, 328, 334, 341, 359, 360, 377, 379, 387, 388, 397, 398, 399, 415, 416, 417, 418, 420, 423, 424, 430, 456, 457, 459, 470, 479, 487, 488, 489, 490, 532, 540, 541, 544, 546, 547, 550, 553, 555, 556, 561, 562, 569, 572, 587, 588, 595, 649, 652, 653, 658, 659, 664, 670, 678, 680, 693, 760, 766, 774, 780, 784, 785, 786, 787, 798, 803, 804, 836, 854, 857, 862, 873, 877, 879, 882, 885, 887, 888, 890, 893, 895, 897, 899, 900, 901, 902, 903, 912, 913, 915, 916, 926, 947, 953, 962, 969, 971, 972, 988, 990, 992, 995, 996, 997, 999, 1001, 1002, 1010, 1012, 1013, 1017, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "matrix": [1, 7, 10, 41, 44, 45, 47, 51, 52, 56, 57, 58, 67, 69, 73, 75, 78, 88, 96, 103, 111, 112, 113, 114, 116, 124, 125, 126, 134, 182, 188, 194, 197, 205, 220, 224, 247, 250, 251, 267, 269, 271, 284, 315, 331, 334, 337, 338, 352, 359, 360, 361, 367, 372, 380, 381, 382, 385, 387, 391, 394, 397, 398, 399, 412, 416, 417, 418, 423, 424, 425, 426, 427, 437, 438, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 460, 463, 465, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 498, 502, 503, 506, 507, 508, 509, 510, 511, 514, 515, 516, 525, 527, 529, 530, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 592, 594, 595, 596, 597, 599, 600, 609, 610, 611, 612, 613, 614, 615, 617, 626, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 718, 719, 720, 721, 722, 724, 728, 735, 736, 737, 740, 744, 745, 746, 747, 760, 761, 764, 765, 766, 767, 769, 770, 772, 773, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 793, 794, 798, 799, 802, 803, 804, 805, 806, 809, 810, 820, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 876, 877, 879, 881, 882, 883, 885, 887, 888, 889, 890, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 928, 929, 930, 931, 936, 944, 945, 946, 947, 948, 951, 952, 953, 961, 962, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 988, 990, 992, 994, 995, 999, 1000, 1001, 1002, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1031, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "matrixorz": 1042, "matshow": [57, 58, 100, 146, 171, 315, 508], "matsubara": 998, "matt": [103, 1042, 1043, 1044, 1049, 1050, 1054, 1055], "matteo": [1043, 1045, 1053], "matter": [133, 268, 352, 368, 415, 416, 422, 573, 674, 682, 684, 994, 1043], "matthew": [1, 384, 390, 542, 749, 1039, 1042, 1046, 1048, 1052, 1053], "matthews_corrcoef": [1, 998, 1039, 1045, 1046, 1053], "matthia": [1039, 1041, 1042, 1045, 1046, 1047, 1051, 1054], "matthieu": [0, 405, 1039, 1043, 1054], "matti": [1040, 1043, 1044], "matur": [385, 1017, 1018], "mat\u00e9rn": 625, "mat\u00eda": 1053, "maud": 1042, "mauna": 180, "maura": 1050, "mauroantonioserrano": 1054, "mav": 1057, "mavani": 1047, "mavroforaki": [1043, 1045], "max": [42, 46, 48, 49, 50, 51, 54, 56, 61, 63, 66, 68, 74, 78, 86, 92, 96, 101, 105, 106, 109, 111, 114, 124, 127, 131, 134, 138, 140, 147, 153, 157, 164, 165, 166, 168, 169, 173, 177, 179, 180, 187, 188, 191, 201, 206, 207, 208, 212, 214, 221, 222, 225, 233, 235, 237, 242, 250, 254, 275, 276, 277, 288, 290, 297, 298, 300, 304, 305, 309, 311, 313, 315, 318, 320, 321, 323, 330, 335, 340, 342, 356, 372, 415, 417, 420, 475, 476, 477, 478, 479, 480, 481, 482, 483, 518, 542, 561, 562, 563, 564, 565, 566, 569, 570, 571, 612, 633, 637, 638, 654, 655, 675, 678, 680, 686, 697, 698, 702, 705, 710, 711, 763, 798, 799, 806, 867, 868, 879, 880, 882, 889, 896, 897, 918, 919, 920, 921, 994, 996, 1001, 1008, 1012, 1013, 1019, 1030, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "max_": [415, 998], "max_abs_": 879, "max_abs_scal": 1008, "max_bin": [330, 331, 422, 567, 568, 1056], "max_categori": [324, 331, 333, 883, 884, 1008, 1053, 1055], "max_cluster_s": 452, "max_column": 237, "max_degre": [885, 1052], "max_depth": [45, 66, 139, 140, 143, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 186, 240, 274, 289, 295, 329, 330, 363, 365, 366, 367, 398, 399, 414, 422, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 717, 809, 810, 834, 918, 919, 920, 921, 922, 923, 924, 987, 1005, 1014, 1048, 1050], "max_df": [53, 278, 341, 359, 360, 594, 597, 1050, 1057], "max_dist": 250, "max_doc_update_it": 542, "max_ep": [415, 456, 461, 462, 463], "max_error": [1, 998, 1048], "max_estim": 142, "max_featur": [53, 66, 142, 153, 255, 274, 289, 329, 422, 424, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 594, 597, 603, 918, 919, 920, 921, 987, 994, 1039, 1041, 1042, 1046, 1047, 1050, 1053, 1056], "max_features_": [565, 566, 603, 918, 919, 920, 921, 1053], "max_fpr": [794, 998, 1047], "max_fun": [867, 868, 1049], "max_i": [254, 1000], "max_idf": 1052, "max_it": [42, 46, 51, 53, 54, 61, 63, 65, 66, 105, 106, 124, 127, 143, 144, 148, 154, 161, 164, 165, 184, 186, 187, 191, 192, 198, 205, 211, 212, 226, 227, 228, 231, 232, 234, 239, 240, 241, 242, 244, 257, 258, 262, 263, 264, 265, 268, 290, 308, 313, 314, 315, 324, 329, 330, 331, 337, 338, 345, 359, 360, 391, 399, 422, 427, 446, 449, 453, 454, 455, 460, 465, 467, 477, 478, 484, 488, 489, 490, 537, 538, 539, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 567, 568, 633, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 678, 680, 682, 683, 684, 685, 686, 688, 689, 693, 694, 695, 696, 698, 699, 700, 803, 804, 820, 859, 867, 868, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 988, 990, 994, 1001, 1002, 1011, 1012, 1028, 1032, 1040, 1043, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "max_iter": 338, "max_iter_list": 154, "max_iter_predict": 616, "max_j": [652, 658], "max_leaf_nod": [138, 144, 153, 219, 330, 367, 422, 563, 564, 565, 566, 567, 568, 570, 571, 572, 918, 919, 920, 921, 1042, 1048, 1050], "max_n": [594, 595, 597, 1039], "max_n_alpha": [657, 661], "max_nbyt": 964, "max_no_improv": [76, 95, 98, 455, 543, 544, 545, 552, 1053, 1054], "max_patch": [84, 423, 589, 590, 1047], "max_resourc": [151, 809, 810, 987], "max_resources_": [809, 810], "max_sampl": [155, 186, 422, 561, 562, 563, 564, 569, 570, 571, 640, 1049, 1052, 1055], "max_samples_": 569, "max_skip": 677, "max_subpopul": [236, 685, 1053], "max_thread": [373, 386], "max_train_s": [42, 51, 419, 827, 1046], "max_trial": [677, 994], "max_val": 934, "max_valu": [633, 1050, 1051], "max_x": 254, "maxabs_scal": [1, 399, 879, 1047], "maxabsscal": [1, 374, 411, 874, 895, 988, 1008, 1044, 1047, 1048, 1049, 1050, 1055, 1056], "maxent": [1, 664, 665, 994], "maxent_du": 664, "maxi": 1054, "maxim": [116, 117, 120, 124, 134, 151, 198, 267, 268, 271, 278, 282, 286, 287, 291, 308, 323, 329, 348, 352, 363, 367, 382, 399, 412, 414, 415, 418, 420, 422, 424, 425, 555, 600, 616, 617, 650, 651, 654, 675, 685, 686, 726, 806, 809, 810, 820, 879, 885, 895, 992, 994, 997, 998, 1001, 1003, 1013, 1027, 1030, 1042, 1044, 1049, 1052, 1054, 1057], "maxima": 415, "maximesaur": [1054, 1055], "maximis": [164, 263, 306, 992, 1001], "maximum": [1, 42, 46, 49, 63, 68, 71, 91, 110, 111, 112, 113, 114, 121, 126, 138, 140, 143, 144, 147, 154, 176, 178, 182, 188, 197, 207, 256, 271, 287, 300, 304, 305, 311, 318, 343, 344, 346, 347, 350, 352, 360, 363, 365, 366, 372, 380, 390, 391, 398, 399, 412, 413, 415, 417, 418, 420, 422, 423, 425, 426, 427, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 460, 463, 465, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 489, 490, 504, 515, 517, 518, 519, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 589, 590, 603, 616, 633, 637, 638, 641, 643, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 680, 682, 683, 684, 685, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 722, 750, 787, 803, 806, 809, 810, 812, 820, 827, 834, 859, 866, 867, 868, 874, 875, 879, 880, 882, 885, 886, 887, 889, 898, 899, 904, 905, 906, 907, 910, 911, 915, 918, 919, 920, 921, 922, 924, 927, 934, 987, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1004, 1008, 1012, 1013, 1014, 1019, 1031, 1046, 1047, 1049, 1050, 1053, 1054, 1056], "maxin": [1049, 1050], "maxsiz": 623, "maxval": [517, 519], "maxwel": [0, 375, 1049, 1052, 1053, 1054, 1055], "maxwelllzh": 1054, "may_share_memori": 1056, "mayb": [107, 315, 399, 423, 1013, 1018], "mayer": [422, 1051, 1053, 1056, 1057], "mayer2022": 422, "mayilvahanan": 415, "mayorov": [1042, 1043, 1044, 1045], "mayur": 1047, "mazari": 1047, "mb": [46, 250, 271, 359, 361, 380, 391, 502, 912, 913, 914, 915, 916, 1013, 1019, 1035], "mbilling": 1044, "mbillingr": 1049, "mbk": [76, 98], "mbk_means_cluster_cent": 98, "mbk_means_label": 98, "mbk_means_labels_uniqu": 76, "mblondel": [60, 82, 210, 240, 278, 359, 379, 514], "mbnmf": 53, "mc4229": 1050, "mc_clf": 1005, "mcar": 154, "mcc": [1, 749, 998, 1053], "mccall": 103, "mccallum": [845, 1000], "mccarthi": [1039, 1047], "mcclish": [286, 794], "mcconaghi": 1022, "mccullagh": 994, "mcculloh": [1044, 1045], "mcd": [1, 50, 112, 113, 417, 475, 480], "mcdermott": [1041, 1056], "mcdonald": 50, "mcdowel": 1047, "mcfadden": 998, "mcfee": [1044, 1045], "mcgibbon": [105, 1041, 1042, 1045], "mcgushion": 1048, "mcinn": [415, 1045, 1046, 1047, 1049, 1050, 1055], "mcivor": [1054, 1055], "mcm": [760, 998], "mcm_": 760, "mcmahon": 1056, "mcsherri": [732, 762, 998], "mctiernan": [1053, 1054], "mcve": [390, 397], "md": [1, 239, 240, 241, 242, 389, 694, 698, 700, 1033, 1034, 1039, 1051, 1054], "md5": 1051, "md5_checksum": 379, "md_scale": 239, "mdarii": 1055, "mdbecker": 1022, "mdi": [145, 152, 188, 189, 194, 422, 470, 502, 570, 636, 640, 836, 870, 884, 1006, 1019], "mdi_import": [193, 194], "mds_result": 700, "me": 359, "me1": 295, "me2": 295, "me3": 295, "mea": 92, "mean": [1, 42, 43, 44, 46, 49, 51, 52, 53, 56, 60, 61, 63, 69, 70, 71, 72, 74, 76, 78, 80, 83, 84, 87, 88, 89, 94, 104, 111, 112, 113, 114, 117, 120, 122, 124, 127, 128, 129, 130, 131, 138, 140, 141, 144, 147, 148, 151, 152, 154, 159, 160, 161, 172, 173, 175, 180, 182, 184, 186, 188, 191, 192, 199, 201, 208, 210, 212, 215, 216, 219, 221, 225, 226, 228, 234, 235, 236, 237, 242, 244, 246, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 263, 264, 265, 267, 268, 271, 273, 274, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 297, 298, 309, 318, 321, 323, 324, 325, 327, 330, 333, 335, 340, 348, 351, 352, 355, 357, 358, 359, 361, 368, 372, 377, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 406, 412, 413, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 438, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 507, 508, 510, 512, 518, 525, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 594, 595, 596, 597, 600, 603, 608, 612, 613, 614, 615, 616, 617, 619, 628, 633, 634, 636, 638, 639, 640, 641, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 690, 694, 695, 696, 697, 698, 699, 700, 701, 710, 711, 713, 715, 718, 719, 722, 723, 730, 732, 735, 736, 737, 742, 743, 744, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 763, 780, 784, 785, 787, 789, 790, 791, 793, 794, 796, 797, 798, 799, 801, 803, 804, 805, 806, 809, 810, 812, 820, 824, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 856, 857, 858, 860, 861, 863, 864, 866, 867, 868, 869, 871, 872, 874, 875, 879, 880, 882, 886, 888, 890, 891, 896, 898, 899, 901, 903, 905, 906, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 926, 930, 931, 933, 972, 973, 979, 983, 987, 988, 989, 992, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1011, 1012, 1013, 1014, 1017, 1019, 1022, 1027, 1030, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "mean_": [125, 281, 538, 539, 540, 545, 547, 549, 890, 1008, 1031, 1047], "mean_absolute_error": [1, 51, 219, 221, 237, 411, 998, 1040, 1042, 1058], "mean_absolute_percentage_error": [1, 51, 148, 998, 1051, 1053], "mean_auc": 287, "mean_change_tol": 542, "mean_fit_tim": [144, 300, 806, 820], "mean_fpr": 287, "mean_gamma_devi": [1, 998, 1049], "mean_impute_scor": 187, "mean_l1_ratio": 1042, "mean_pinball_loss": [1, 51, 151, 154, 330, 994, 998, 1052], "mean_pinball_loss_95p": 998, "mean_poisson_devi": [1, 219, 998, 1049], "mean_precis": 275, "mean_precision_": 803, "mean_precision_prior": [262, 268, 803], "mean_precision_prior_": 803, "mean_predict": [51, 182], "mean_predictions_gpr": 175, "mean_prior": 803, "mean_prior_": 803, "mean_recal": 275, "mean_scor": [105, 286, 289, 360, 1052], "mean_score_tim": [144, 275, 278, 806, 820], "mean_shift": [1, 1044, 1047], "mean_square_error": 1040, "mean_squared_error": [1, 45, 149, 151, 152, 215, 219, 221, 223, 225, 237, 368, 422, 758, 998, 1040, 1042, 1049, 1050, 1056], "mean_squared_log_error": [1, 998, 1046, 1052, 1056], "mean_test_": 281, "mean_test_precis": [275, 281], "mean_test_recal": 275, "mean_test_scor": [104, 105, 106, 114, 144, 164, 172, 267, 276, 277, 278, 285, 288, 289, 300, 348, 478, 600, 806, 820, 987, 1045, 1052], "mean_tim": 1045, "mean_tpr": [286, 287], "mean_train_precis": [806, 820], "mean_train_scor": [806, 820, 1045], "mean_tweedie_devi": [1, 237, 411, 998, 1049, 1058], "mean_variance_axi": [1, 394, 1045, 1052], "mean_y_pr": 180, "meaning": [71, 194, 244, 307, 335, 361, 412, 414, 419, 423, 424, 554, 735, 736, 744, 789, 790, 793, 859, 1002, 1012, 1013, 1039, 1055], "meaningfulli": [219, 998], "meaningless": [192, 423, 912, 915, 1042], "means_": [69, 262, 263, 264, 265, 267, 268, 555, 556, 803, 804], "means_init": [264, 265, 804], "meanshift": [1, 78, 331, 415, 446, 1042, 1043, 1044, 1047, 1049, 1050, 1053, 1054, 1055, 1057], "meant": [91, 154, 173, 256, 335, 380, 387, 394, 480, 499, 683, 856, 964, 965, 988, 1002, 1004, 1008, 1040], "meanwhil": [397, 1013], "measur": [1, 26, 42, 45, 46, 48, 49, 51, 56, 61, 71, 72, 83, 92, 94, 95, 125, 141, 142, 151, 155, 162, 173, 175, 180, 188, 190, 191, 192, 196, 208, 213, 218, 219, 223, 225, 237, 269, 275, 277, 283, 284, 290, 323, 352, 359, 360, 372, 380, 382, 387, 391, 399, 412, 417, 419, 420, 421, 422, 423, 455, 458, 468, 504, 521, 544, 546, 553, 557, 563, 564, 565, 566, 569, 570, 571, 610, 613, 614, 617, 633, 637, 664, 696, 698, 704, 708, 710, 711, 713, 715, 718, 719, 722, 723, 726, 731, 732, 733, 735, 737, 742, 743, 745, 746, 749, 753, 761, 762, 763, 788, 789, 790, 792, 793, 794, 795, 798, 801, 831, 833, 836, 856, 887, 899, 918, 919, 920, 921, 988, 994, 996, 1001, 1003, 1004, 1006, 1012, 1014, 1019, 1027, 1030, 1039, 1042, 1044, 1045, 1047, 1049], "mechan": [73, 253, 356, 359, 373, 385, 387, 409, 413, 415, 423, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 996, 1014, 1022], "mecopur": 1056, "med": [56, 103, 286, 380, 1008, 1032], "meda": [108, 191, 998], "media": [415, 1022], "median": [1, 42, 51, 71, 104, 108, 112, 113, 151, 186, 187, 191, 221, 225, 236, 248, 256, 318, 328, 330, 331, 380, 417, 422, 424, 446, 460, 464, 467, 480, 558, 560, 564, 571, 603, 633, 636, 641, 676, 677, 685, 727, 759, 857, 888, 900, 919, 921, 988, 1008, 1014, 1042, 1043], "median_absolute_error": [1, 108, 191, 998, 1043, 1049, 1051], "median_predict": 51, "medic": [280, 419, 718, 994, 1022], "medicin": [280, 718, 998], "medina": [1039, 1041], "medinc": [318, 329, 380, 496], "medium": [41, 188, 252, 293, 325, 348, 415, 649, 884, 991, 994], "medoid": 452, "medoids_": 452, "medri": 1042, "meekail": [0, 404, 1053, 1054, 1055, 1056], "meer": [97, 415, 454], "meet": [385, 397, 400, 424, 578, 609, 867, 868, 907, 998, 1011, 1022, 1047, 1048, 1049], "megabyt": 1053, "megasari": 1051, "meghann": [1047, 1049], "mehak": 1046, "mehdi": [1043, 1052], "mehgarg": 1054, "mehmet": [1046, 1052], "mehmetcanakbai": 1054, "mehrdad": 1053, "mehta": [1043, 1044, 1045, 1047, 1048, 1049, 1050, 1054, 1055], "mehul": 1046, "mei": [1044, 1049], "meier": 1046, "meila": 415, "mein": 423, "meinshausen": 203, "meirel": 1050, "meketon": 1046, "melani": [1022, 1046, 1047], "melderi": 1047, "melemo2": 1053, "meli": [1052, 1053, 1054], "melissa": 1047, "mellon": 905, "melnik": 1054, "melsyt": [1047, 1048], "mem": [88, 391, 514, 515, 1019], "member": [0, 359, 360, 380, 385, 388, 400, 415, 430, 448, 452, 454, 457, 459, 498, 561, 562, 563, 564, 569, 570, 571, 572, 587, 664, 665, 672, 673, 674, 682, 683, 684, 710, 711, 721, 723, 737, 742, 743, 763, 792, 801, 806, 910, 994, 1001, 1023, 1039, 1051, 1054], "membership": [29, 90, 400, 412, 415, 517, 518, 519, 520, 521, 525, 528, 1013], "memit": 391, "memmap": [373, 380, 399, 420, 514, 540, 1047, 1056], "memoiz": [105, 380, 399], "memor": 193, "memori": [1, 46, 88, 104, 105, 128, 191, 192, 271, 300, 324, 327, 329, 331, 332, 335, 359, 360, 361, 373, 374, 379, 385, 388, 394, 397, 399, 409, 415, 416, 419, 420, 423, 426, 427, 447, 448, 449, 450, 451, 452, 453, 455, 456, 460, 463, 465, 474, 479, 485, 502, 509, 514, 515, 539, 540, 541, 544, 547, 561, 562, 563, 564, 569, 570, 571, 572, 587, 588, 594, 595, 597, 652, 653, 654, 658, 659, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 682, 683, 684, 685, 686, 687, 690, 784, 785, 786, 787, 806, 812, 820, 829, 831, 832, 833, 834, 837, 838, 839, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 870, 871, 888, 890, 900, 901, 903, 908, 910, 911, 918, 919, 920, 921, 931, 967, 983, 994, 1000, 1001, 1008, 1010, 1011, 1013, 1014, 1018, 1022, 1023, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "memory_profil": [391, 403, 408], "memoryerror": [1047, 1051], "memoryview": 386, "memorywis": 409, "men": 382, "menes": 1054, "meng": [1039, 1040, 1043, 1045, 1046], "menoci": 1057, "menon": 413, "mensch": [234, 235, 1044, 1045, 1046, 1047], "mention": [89, 117, 138, 237, 291, 328, 368, 372, 385, 389, 390, 397, 415, 702, 902, 903, 987, 992, 994, 1018, 1021, 1022, 1032, 1046, 1047, 1048], "menu": 403, "menuet": 1048, "mercer": 990, "mere": [42, 277, 399, 837, 1012], "merg": [73, 75, 80, 85, 330, 383, 385, 388, 393, 397, 400, 415, 446, 447, 448, 451, 452, 469, 826, 1031, 1039, 1046], "merit": [385, 389, 400], "meritocrat": 400, "merritt": 1045, "mersenn": 1050, "merz": 413, "mesfer": 1052, "mesh": [92, 147, 157, 177, 251, 306, 313, 320, 342, 344], "meshgrid": [49, 62, 76, 92, 112, 147, 157, 176, 177, 178, 179, 181, 192, 230, 231, 232, 233, 244, 246, 266, 304, 311, 313, 320, 321, 342, 347, 348, 352, 353, 356, 357, 637], "meshulam": 1042, "meson": [383, 388, 403, 408], "mess": 1053, "messag": [72, 78, 96, 103, 124, 253, 359, 360, 380, 383, 384, 385, 389, 390, 393, 394, 415, 446, 460, 474, 545, 549, 554, 580, 633, 718, 806, 809, 810, 812, 820, 829, 834, 837, 839, 859, 867, 868, 908, 929, 930, 931, 934, 937, 961, 982, 998, 1008, 1039, 1043, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "met": [146, 253, 387, 424, 540, 547, 633, 677, 994, 998, 1047], "meta": [1, 6, 29, 30, 90, 103, 137, 162, 188, 219, 282, 286, 291, 294, 297, 333, 334, 366, 368, 379, 383, 387, 389, 397, 399, 406, 411, 413, 424, 425, 435, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 502, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 581, 587, 588, 594, 596, 597, 600, 603, 609, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 806, 807, 808, 813, 815, 822, 824, 828, 833, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 958, 987, 999, 1018, 1019, 1020, 1034, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1056], "meta_clf_sample_weight": 253, "meta_est": 253, "meta_meta_est": 253, "metaclassifi": [253, 254], "metaclassifierifittedmetaclassifi": 253, "metadata": [1, 46, 90, 136, 183, 188, 200, 245, 271, 335, 360, 379, 380, 409, 429, 432, 435, 438, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 502, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 954, 955, 956, 957, 958, 982, 998, 1017, 1018, 1019, 1023, 1034, 1055], "metadata_rout": [1, 253, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 954, 955, 956, 957, 958], "metadatarequest": [1, 253, 429, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 475, 476, 477, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 563, 564, 565, 566, 567, 568, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 604, 605, 606, 609, 616, 617, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 660, 662, 663, 664, 666, 668, 670, 672, 673, 674, 675, 676, 678, 680, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 955, 957, 1056], "metadatarout": [1, 253, 443, 470, 478, 561, 562, 569, 573, 574, 575, 576, 603, 633, 653, 657, 659, 661, 665, 667, 669, 671, 677, 679, 681, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 869, 870, 957, 1056], "metaestim": [1, 90, 387, 399, 907, 959, 1043, 1052, 1053, 1056], "metaestimatormixin": [1, 253], "metaireau": [1039, 1042], "metal": 411, "metaregressor": 253, "metatransfom": 1044, "meteorologi": 413, "meth_nam": 322, "method": [1, 4, 7, 13, 17, 29, 31, 35, 42, 46, 50, 51, 54, 56, 57, 60, 61, 62, 63, 70, 71, 73, 74, 75, 78, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 99, 102, 105, 111, 112, 115, 117, 122, 124, 127, 129, 132, 133, 134, 136, 138, 143, 145, 146, 152, 159, 168, 169, 173, 186, 196, 206, 208, 220, 227, 236, 238, 240, 242, 243, 244, 246, 250, 252, 253, 254, 256, 260, 261, 264, 271, 279, 282, 283, 284, 285, 286, 291, 295, 298, 304, 305, 307, 318, 322, 325, 327, 329, 330, 351, 359, 360, 361, 367, 368, 372, 373, 374, 377, 382, 383, 385, 386, 387, 391, 392, 394, 397, 398, 402, 406, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 434, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 465, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 510, 518, 520, 528, 531, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 711, 716, 717, 728, 737, 738, 741, 742, 747, 748, 769, 774, 775, 780, 784, 789, 794, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 898, 899, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 925, 933, 937, 947, 954, 955, 956, 957, 958, 959, 964, 967, 982, 983, 986, 987, 988, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1023, 1027, 1029, 1030, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "method_map": [253, 955], "method_max_it": [551, 552, 1049], "method_nam": [253, 955, 958], "methodmap": [1, 253, 955], "methodmetadatarequest": 954, "methodol": 1008, "methodolog": [419, 1021], "methodologi": [547, 883, 988, 998, 1022], "methodpair": 956, "metric": [1, 12, 42, 44, 45, 49, 51, 56, 57, 58, 60, 61, 62, 65, 67, 70, 72, 76, 78, 81, 82, 83, 86, 92, 94, 98, 103, 108, 114, 138, 143, 149, 150, 152, 153, 154, 159, 170, 173, 176, 186, 188, 190, 191, 193, 203, 208, 214, 215, 219, 221, 223, 225, 237, 242, 247, 250, 251, 256, 259, 269, 270, 273, 274, 275, 277, 278, 280, 284, 286, 287, 291, 297, 298, 300, 308, 311, 316, 318, 323, 327, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 359, 360, 368, 372, 377, 380, 385, 387, 397, 398, 399, 402, 406, 410, 413, 414, 420, 421, 422, 425, 426, 432, 443, 447, 450, 451, 452, 456, 460, 461, 462, 463, 468, 475, 526, 541, 555, 556, 557, 559, 561, 563, 564, 565, 567, 568, 570, 571, 573, 575, 584, 608, 616, 626, 634, 637, 640, 644, 645, 646, 647, 648, 649, 664, 665, 669, 672, 674, 680, 681, 682, 694, 696, 698, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 835, 838, 839, 840, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 876, 882, 905, 906, 910, 912, 915, 918, 920, 988, 990, 993, 995, 999, 1001, 1004, 1006, 1017, 1018, 1019, 1027, 1028, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1058], "metric_kwarg": [785, 786], "metric_obj": 705, "metric_param": [426, 450, 452, 456, 461, 462, 463, 694, 698, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 1043, 1046, 1053], "metsi": [845, 1000], "metzen": [0, 60, 61, 62, 63, 175, 176, 178, 179, 180, 181, 182, 184, 252, 404, 1039, 1042, 1043, 1044, 1045], "mexican": 133, "meyer89": 1050, "mferrari3": [1047, 1048], "mgrid": [52, 166], "mhg": 1044, "mi": [63, 71, 168, 415, 613, 614, 710, 761, 763, 988, 998, 1012], "mia": 1054, "miao": 1052, "mib": [372, 474, 908], "mic": [891, 1008], "micah": 1049, "micci": [891, 1008], "mice": [379, 633, 988], "miceprotein": 379, "michael": [382, 413, 415, 456, 634, 643, 697, 803, 988, 994, 1022, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1056, 1057], "michal": [1043, 1046, 1052, 1053], "michali": 415, "michalkrawczyk": [1052, 1053], "micha\u0142": 1050, "micha\u0142owski": 1048, "michel": [0, 81, 101, 405, 1039, 1041, 1042, 1044, 1046, 1053, 1054], "michelbach": 1043, "michiaki": 1045, "micka\u00ebl": [1047, 1048], "micky774": [1053, 1054], "micro": [48, 311, 341, 372, 713, 719, 735, 736, 744, 789, 790, 793, 794, 998, 1039, 1047, 1048, 1054, 1057], "micro_roc_auc_ovr": 286, "microarrai": [412, 457, 519, 634, 988], "microcontrol": 1017, "microml": 1017, "micromlgen": 1017, "microphon": 125, "microryzomi": [49, 311, 380, 504], "microryzomys_minutu": 504, "microryzomys_minutus_0": 49, "microsoft": [0, 50, 383, 386, 403], "mid": [62, 348, 998, 1000], "middl": [42, 60, 69, 94, 129, 203, 356, 382, 1005, 1008], "mideast": [56, 380], "midina": 1046, "midnight": 42, "midpoint": 348, "midpointnorm": 348, "midvidi": 1052, "midwest": [173, 382], "might": [0, 42, 43, 51, 66, 76, 78, 94, 96, 103, 147, 154, 157, 170, 181, 187, 191, 192, 193, 196, 219, 237, 246, 271, 277, 279, 291, 301, 314, 329, 335, 352, 357, 368, 372, 373, 379, 383, 385, 386, 387, 389, 390, 391, 393, 397, 399, 400, 403, 409, 413, 414, 416, 419, 420, 421, 422, 423, 425, 440, 449, 494, 502, 507, 509, 514, 521, 529, 542, 561, 562, 563, 567, 568, 570, 585, 586, 588, 616, 617, 633, 656, 660, 661, 662, 664, 665, 682, 684, 698, 763, 800, 809, 810, 834, 859, 875, 890, 903, 922, 924, 926, 930, 931, 947, 967, 987, 988, 990, 992, 994, 995, 997, 998, 1000, 1001, 1005, 1006, 1008, 1013, 1014, 1032, 1040, 1042, 1047, 1048, 1050, 1053, 1054, 1055, 1056], "mignon": [1039, 1042, 1043, 1046], "migrat": [385, 1039], "miguel": [1049, 1057], "miguelbarao": 1049, "miguelcsilva": 1057, "mihael": [415, 456, 463], "mihevc": 1049, "mike": 1046, "mikebenfield": 1046, "miketip": [540, 547], "mikhail": [1040, 1041, 1042, 1045, 1046, 1054, 1055], "miki": [1056, 1057], "mikulski": 1050, "milajev": 1043, "milan": 1051, "milana2": 1053, "mileag": 372, "milen": 1046, "mileston": 389, "militari": 103, "mill": 1049, "millawel": 1053, "miller": [380, 1047, 1048, 1052], "million": [76, 90, 180, 196, 423, 698, 995, 1013, 1022, 1053, 1054], "millman": [0, 405, 1048, 1055, 1056], "milman": 1047, "miln": 380, "miltenberg": 1054, "milton": 1056, "milutinov": 1048, "mimic": [186, 219, 359, 824], "mimicri": 359, "min": [42, 48, 49, 50, 51, 52, 61, 63, 66, 86, 92, 108, 124, 127, 138, 140, 147, 150, 151, 157, 166, 173, 177, 179, 180, 181, 187, 191, 201, 207, 208, 214, 221, 222, 225, 240, 250, 251, 254, 297, 304, 305, 311, 313, 315, 318, 320, 321, 323, 335, 342, 356, 394, 415, 418, 420, 488, 489, 491, 518, 540, 541, 544, 546, 547, 555, 556, 569, 633, 637, 638, 660, 661, 662, 663, 688, 689, 710, 763, 786, 809, 810, 859, 867, 868, 880, 889, 896, 947, 963, 989, 994, 998, 1001, 1008, 1045, 1048, 1050, 1051, 1054], "min_": [330, 415, 422, 880, 994, 1008, 1012, 1013, 1014], "min_arg": 51, "min_batch_s": 950, "min_bin_freq": [454, 467], "min_c": 1000, "min_categori": [846, 1051], "min_cluster_s": [78, 99, 333, 415, 452, 456, 462, 1048], "min_degre": [885, 1052], "min_df": [53, 56, 103, 278, 341, 359, 360, 423, 594, 597, 1039, 1041, 1050, 1057], "min_dist": 250, "min_estim": 142, "min_faces_per_person": [44, 380, 500, 1028], "min_features_to_select": [172, 600, 1047], "min_frequ": [331, 333, 883, 884, 1008, 1053, 1055], "min_grad_norm": [698, 1045], "min_i": 254, "min_idf": 1052, "min_impurity_decreas": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 1014, 1046], "min_impurity_split": 1046, "min_max_axi": 1048, "min_max_scal": 1008, "min_n": [594, 595, 597, 1039], "min_n_compon": 250, "min_po": [1, 394], "min_resourc": [151, 809, 810], "min_resources_": [809, 810], "min_sampl": [78, 83, 99, 397, 399, 415, 426, 450, 452, 456, 461, 462, 463, 677, 994, 1048, 1052], "min_sample_split": 1054, "min_samples_leaf": [144, 150, 151, 193, 327, 330, 363, 422, 563, 564, 565, 566, 567, 568, 570, 571, 572, 918, 919, 920, 921, 1014, 1045], "min_samples_split": [151, 152, 153, 281, 289, 319, 329, 422, 563, 564, 565, 566, 570, 571, 572, 809, 810, 918, 919, 920, 921, 987, 1014, 1045], "min_val": [927, 934], "min_valu": [633, 1050, 1051], "min_w": 994, "min_weight_fraction_leaf": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 1014, 1042, 1045, 1046], "min_x": 254, "mina": [1049, 1050], "mincovdet": [1, 112, 113, 417, 475, 476, 479, 481, 482, 1004, 1039, 1046], "mind": [129, 154, 190, 191, 192, 237, 322, 323, 359, 360, 368, 385, 409, 417, 419, 422, 652, 653, 710, 994, 1013, 1017, 1023, 1030], "minden": [415, 458, 468], "mine": [0, 277, 360, 380, 415, 426, 450, 517, 569, 726, 740, 746, 789, 994, 998, 1004, 1010], "ming": [569, 1004, 1043, 1047, 1048, 1049, 1053], "minghui": [1046, 1047], "mingw": 1042, "minh": 1047, "mini": [1, 46, 98, 124, 331, 374, 399, 423, 446, 448, 453, 455, 457, 459, 537, 539, 542, 543, 544, 545, 546, 548, 549, 551, 552, 1002, 1003, 1039, 1050, 1052], "mini_batch": [457, 459], "minibatch": [46, 78, 415, 420, 455, 540, 682, 866, 867, 868, 1017, 1039], "minibatch_iter": 46, "minibatch_kmean": 360, "minibatch_s": [46, 374], "minibatchdictionarylearn": [1, 124, 127, 374, 420, 537, 544, 548, 551, 552, 1040, 1042, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "minibatchkmean": [1, 56, 70, 72, 77, 78, 84, 92, 93, 95, 97, 121, 188, 360, 374, 415, 420, 446, 448, 453, 518, 785, 1019, 1040, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "minibatchnmf": [1, 53, 374, 420, 1053, 1055, 1056, 1057], "minibatchsparsepca": [1, 537, 539, 543, 546, 548, 549, 551, 552, 1039, 1040, 1050, 1052, 1053, 1054, 1055, 1056], "miniconda": 403, "miniforg": [383, 393, 403], "miniforge3": [383, 393], "minim": [1, 42, 50, 51, 63, 91, 100, 110, 111, 151, 175, 183, 198, 215, 217, 219, 221, 223, 227, 237, 239, 249, 250, 262, 267, 271, 278, 286, 287, 318, 327, 330, 345, 352, 355, 363, 384, 385, 388, 393, 397, 399, 409, 413, 415, 417, 420, 422, 446, 447, 451, 452, 456, 469, 544, 546, 553, 563, 564, 565, 566, 570, 571, 615, 616, 617, 647, 652, 655, 663, 664, 673, 677, 678, 680, 684, 685, 693, 698, 700, 701, 754, 786, 857, 859, 868, 886, 898, 904, 918, 919, 920, 921, 994, 995, 998, 1001, 1002, 1008, 1010, 1011, 1012, 1013, 1017, 1020, 1030, 1031, 1034, 1043, 1048, 1049], "minima": [181, 207, 420, 453, 698, 995, 1031, 1047], "minimal_reproduc": 393, "minimalist": [390, 423, 1021], "minimis": [51, 276, 415, 419, 664, 665, 1014], "minimum": [1, 47, 89, 91, 112, 151, 152, 154, 172, 208, 229, 250, 256, 287, 304, 305, 387, 394, 403, 408, 412, 415, 422, 423, 447, 451, 452, 456, 460, 462, 475, 476, 479, 480, 481, 482, 517, 519, 547, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 600, 633, 637, 638, 641, 643, 674, 677, 682, 684, 685, 688, 689, 698, 711, 731, 785, 786, 809, 810, 831, 846, 867, 868, 879, 880, 883, 884, 885, 889, 903, 904, 917, 918, 919, 920, 921, 927, 930, 931, 934, 950, 995, 998, 1002, 1004, 1008, 1010, 1014, 1039, 1042, 1046, 1047, 1051, 1052, 1056], "minimum_cluster_s": 415, "minka": [131, 547, 994], "minknowski": 1052, "minkowski": [426, 450, 456, 461, 462, 463, 694, 705, 784, 785, 786, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 1001, 1039, 1042, 1053, 1054, 1055], "minkowski_dist": [456, 463, 694, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864], "minkowskidist": [705, 1052], "minmax_scal": [1, 316, 318, 880, 1044, 1047], "minmaxscal": [1, 42, 43, 105, 169, 171, 196, 240, 256, 314, 329, 374, 411, 416, 470, 896, 988, 1008, 1041, 1044, 1047, 1049, 1050, 1051, 1055, 1056], "minmaxscalerminmaxscal": 105, "minnesota": 415, "minor": [256, 271, 280, 284, 380, 388, 400, 502, 998, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "minu": [277, 766, 998], "minut": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 380, 385, 995, 1016], "minutu": [49, 311, 380, 504], "minval": [517, 519], "minwoo": 1039, "minyushkin": 1045, "miola": 1054, "miott": [1039, 1042], "miotto": 1050, "mir": 423, "miroslav": [1040, 1041, 1044], "mirror": [847, 987], "mirza": 1052, "misa": 1054, "misc": [56, 87, 127, 278, 341, 359, 360, 361, 380, 1031], "misc_featur": 256, "miscalibr": 63, "miscellan": [378, 379, 1019, 1045, 1046, 1053, 1054, 1056, 1057, 1058], "miscfeatur": 159, "misclassif": [45, 138, 271, 352, 802, 1012, 1013, 1014, 1040], "misclassifi": [69, 138, 270, 271, 352, 359, 1013], "misclassification_error": 138, "misdetect": 1056, "mise": 1017, "mish": 423, "mishra": [1051, 1052], "mislabel": [270, 422, 1000], "mislead": [71, 145, 146, 152, 191, 386, 402, 422, 559, 560, 563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 1034, 1052], "mismatch": [78, 997, 1048], "misread": 244, "miss": [1, 19, 104, 159, 173, 193, 248, 258, 271, 277, 298, 328, 332, 335, 368, 372, 377, 380, 382, 384, 385, 387, 389, 390, 399, 411, 414, 415, 416, 417, 452, 478, 496, 502, 504, 507, 563, 564, 567, 568, 570, 571, 572, 633, 634, 635, 636, 645, 651, 678, 696, 700, 733, 775, 832, 853, 871, 879, 880, 884, 886, 887, 890, 891, 895, 898, 899, 901, 918, 919, 920, 921, 994, 995, 998, 1017, 1018, 1019, 1020, 1022, 1034, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "missclassif": 138, "missforest": [186, 988], "missing": [154, 422, 633, 634, 636, 1048], "missing_featur": [186, 187], "missing_fract": 154, "missing_fraction_list": 154, "missing_r": 187, "missing_sampl": [186, 187], "missing_valu": [186, 187, 258, 399, 633, 634, 635, 636, 775, 988, 1047, 1048], "missingind": [1, 633, 634, 636, 988, 1047, 1048, 1049, 1053, 1055], "mission": [0, 360, 1022], "misspecifi": 63, "misspel": 423, "mistak": [138, 170, 291, 338, 368, 415, 419, 741, 881, 895, 896, 898, 899, 900, 901, 994, 999], "misti": [42, 192], "mit": [295, 380, 391, 415, 425, 616, 617, 620, 625, 628, 649, 672, 673, 682, 847, 991], "mitar": 1048, "mitig": [63, 89, 154, 193, 325, 373, 374, 995, 1014, 1030, 1031, 1051], "mitra": [1049, 1050, 1054], "mitrov": 1048, "mitzi": [1052, 1053], "miwojc": 1053, "mix": [1, 42, 96, 102, 103, 125, 126, 148, 188, 191, 219, 248, 258, 260, 278, 318, 324, 379, 387, 397, 399, 416, 420, 427, 470, 472, 473, 502, 539, 544, 546, 553, 606, 610, 636, 652, 653, 658, 664, 665, 666, 667, 668, 669, 674, 682, 684, 687, 806, 820, 836, 870, 883, 884, 890, 891, 962, 969, 972, 994, 1003, 1019, 1031, 1051, 1053, 1054], "mixed_encoded_preprocessor": 324, "mixed_pip": 324, "mixed_target": 324, "mixin": [1, 385, 399, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 607, 941, 1041, 1050, 1054], "mixing_": [125, 126, 539, 1031], "mixtur": [1, 45, 47, 69, 78, 89, 91, 99, 122, 187, 207, 264, 265, 288, 308, 311, 334, 380, 381, 399, 415, 420, 421, 425, 629, 803, 804, 806, 1017, 1018, 1019, 1033, 1034, 1039, 1043, 1044, 1045, 1046], "mizil": [61, 63, 413, 443, 445], "mizuki": 1053, "mk": 1014, "mkdir": [46, 391, 393], "mkdtemp": [88, 416], "mkl": [372, 373, 383, 397, 1039], "mkl_num_thread": 373, "mks542": 201, "mksol": 103, "ml": [46, 173, 295, 379, 382, 390, 506, 508, 516, 994, 996, 1017, 1018, 1022], "ml_map": 1025, "mlant": 1053, "mlb": [380, 881], "mlc": 382, "mlcomp": 1039, "mld": 46, "mldata": [1039, 1047], "mle": [112, 131, 547, 1047, 1050], "mlewis1729": 1046, "mlflow": 1017, "mlg": 1043, "mlinari\u0107": 1054, "mline": [47, 112, 233, 304, 347, 350], "mlle": [695, 699, 995], "mlliou112": 1046, "mlo": 180, "mlondschien": 1052, "mlop": 1017, "mlp": [188, 192, 257, 312, 314, 502, 836, 867, 868, 1002, 1019], "mlp_disp": 257, "mlp_model": 192, "mlp_preprocessor": 192, "mlpclassifi": [1, 66, 153, 165, 188, 312, 313, 315, 374, 508, 510, 520, 528, 866, 868, 880, 999, 1002, 1019, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mlpregressor": [1, 42, 192, 257, 374, 866, 867, 1002, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "mlpregressormlpregressor": 257, "mlxtend": 1017, "mm": 196, "mm_bunch": 49, "mmap_mod": [409, 964], "mmm": 50, "mmse": [111, 417, 428, 481], "mn193": 1056, "mnb": 1000, "mnist": [65, 188, 197, 210, 227, 234, 298, 312, 314, 502, 664, 836, 867, 890, 933, 994, 1002, 1019], "mnist_10000": 298, "mnist_20000": 298, "mnist_784": [227, 235, 298, 315], "mo": [332, 1050], "mobil": 393, "mock": 1049, "mockdatafram": 1049, "modal": [1, 246, 480, 949], "mode": [1, 47, 48, 80, 81, 112, 219, 246, 298, 300, 316, 327, 383, 385, 393, 394, 397, 412, 418, 422, 426, 449, 450, 453, 455, 458, 465, 468, 477, 478, 484, 488, 493, 514, 515, 563, 567, 570, 598, 601, 602, 604, 605, 606, 616, 633, 650, 651, 664, 665, 672, 674, 679, 680, 681, 682, 685, 688, 689, 695, 699, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 866, 910, 912, 915, 918, 920, 936, 946, 947, 949, 1001, 1004, 1017, 1023, 1024, 1031, 1040, 1048, 1053, 1056], "model": [1, 6, 7, 20, 27, 33, 36, 39, 41, 43, 44, 47, 48, 50, 52, 53, 57, 58, 60, 61, 63, 69, 73, 74, 75, 82, 83, 88, 89, 90, 92, 95, 102, 104, 105, 106, 110, 114, 117, 123, 124, 133, 134, 137, 138, 139, 141, 143, 147, 150, 151, 153, 154, 156, 158, 159, 162, 164, 166, 167, 169, 170, 178, 179, 181, 182, 183, 184, 187, 189, 190, 194, 199, 201, 204, 205, 209, 210, 212, 214, 215, 216, 220, 221, 223, 224, 225, 227, 231, 232, 234, 235, 236, 246, 249, 254, 262, 264, 265, 266, 270, 272, 273, 275, 278, 280, 281, 282, 283, 285, 286, 290, 291, 292, 295, 298, 300, 301, 302, 304, 307, 311, 319, 322, 324, 325, 327, 329, 331, 332, 333, 335, 337, 338, 345, 347, 348, 349, 350, 351, 353, 355, 357, 360, 361, 364, 365, 366, 368, 377, 379, 380, 388, 391, 399, 402, 406, 411, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 434, 438, 440, 443, 448, 455, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 502, 504, 506, 507, 508, 509, 515, 528, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 594, 595, 599, 600, 603, 608, 612, 615, 616, 617, 621, 633, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 707, 712, 717, 727, 728, 729, 730, 740, 741, 747, 756, 759, 791, 794, 795, 798, 803, 804, 806, 809, 810, 811, 812, 820, 821, 822, 823, 827, 828, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 855, 856, 857, 859, 861, 866, 867, 868, 870, 871, 873, 875, 877, 882, 883, 885, 886, 887, 889, 890, 891, 895, 896, 898, 899, 900, 901, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 925, 982, 988, 990, 991, 992, 995, 996, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1024, 1026, 1028, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1058], "model_1": 277, "model_1_scor": 277, "model_2": 277, "model_2_scor": 277, "model__estimator__max_depth": 987, "model_coef": 190, "model_color": 354, "model_detail": 147, "model_displai": 143, "model_fixed_threshold": 271, "model_from_prevision_vers": 409, "model_i": 277, "model_i_scor": 277, "model_idx": 256, "model_k": 277, "model_k_scor": 277, "model_l1": 355, "model_l2": 355, "model_nam": [144, 256, 297], "model_no_cf": 325, "model_param": 234, "model_prop": 42, "model_scor": [277, 297], "model_select": [1, 42, 43, 44, 45, 48, 51, 60, 61, 63, 66, 67, 88, 104, 105, 106, 107, 108, 110, 117, 129, 131, 138, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 164, 169, 170, 172, 175, 186, 187, 188, 190, 191, 193, 194, 196, 203, 214, 219, 221, 226, 227, 234, 235, 237, 247, 252, 253, 256, 258, 259, 260, 264, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 301, 302, 306, 307, 313, 315, 316, 320, 322, 323, 324, 325, 327, 328, 329, 332, 333, 334, 335, 340, 341, 348, 351, 355, 363, 367, 368, 385, 387, 390, 398, 399, 406, 411, 414, 416, 419, 422, 443, 444, 564, 566, 573, 574, 585, 665, 703, 704, 706, 708, 748, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 859, 867, 868, 870, 918, 919, 920, 921, 987, 988, 993, 998, 1000, 1001, 1006, 1008, 1013, 1018, 1019, 1027, 1028, 1032, 1036, 1043, 1045, 1046, 1058], "model_step": 42, "model_titl": 147, "model_with_cf": 325, "moder": [277, 385, 425, 460, 1004], "modern": [42, 154, 423, 474, 509, 596, 696, 700, 736, 908, 995, 1017, 1018, 1055], "modif": [385, 418, 422, 423, 452, 1011, 1056, 1057], "modifi": [66, 79, 85, 106, 108, 119, 120, 202, 203, 216, 217, 229, 239, 240, 241, 253, 256, 264, 333, 353, 357, 385, 387, 389, 399, 415, 422, 425, 449, 453, 460, 465, 474, 488, 489, 490, 491, 501, 516, 587, 616, 617, 619, 625, 682, 684, 695, 699, 735, 736, 774, 789, 790, 793, 928, 980, 981, 994, 1011, 1012, 1018, 1029, 1033, 1034, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054], "modified_fil": 385, "modified_hub": [45, 682, 1012], "modified_huber_loss": 229, "modified_tol": [695, 699], "modrak": [1054, 1055], "modroiu": 998, "modul": [6, 10, 15, 29, 30, 70, 71, 83, 87, 109, 115, 118, 123, 124, 137, 167, 174, 184, 185, 188, 189, 195, 197, 234, 238, 239, 261, 269, 294, 295, 296, 299, 312, 314, 315, 317, 336, 343, 358, 362, 365, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 399, 402, 403, 409, 413, 415, 418, 422, 423, 424, 426, 450, 509, 541, 585, 586, 665, 939, 987, 992, 994, 996, 998, 999, 1002, 1004, 1005, 1008, 1010, 1012, 1014, 1015, 1022, 1026, 1027, 1032, 1040, 1041, 1042, 1044, 1045, 1049, 1053], "modulo": [423, 1050], "moeller": 1045, "mogavero": 1049, "moham": [1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "mohamedbsh": 1054, "mohammad": [1047, 1048], "mohit": [1053, 1056], "mohn": [1047, 1051], "mohr": 1045, "moin": 1051, "mois\u00e9": 1010, "moitra": [1039, 1040, 1041], "mojca": 1050, "mojdeh": 1056, "mola": [1050, 1056], "molden": 1041, "molecul": 995, "molin": 1054, "molla": [1040, 1041], "molnar": [192, 1005], "moment": [372, 420, 425, 446, 621, 629, 867, 868, 962, 1002, 1003], "momentum": [314, 867, 868, 1002], "mon": [42, 154, 192], "mona": [174, 182, 188, 425, 502, 617, 621, 628, 629, 631, 1019], "monaf": 1054, "monei": [0, 237, 1022], "monitor": [149, 203, 227, 388, 399, 559, 560, 565, 566, 567, 568, 1002, 1021, 1042, 1047, 1049, 1051], "mono": [652, 653, 658, 659, 666, 667, 668, 669, 687, 690], "monografia": 994, "monomi": 220, "monotoinc": 328, "monoton": [1, 21, 42, 61, 137, 188, 192, 237, 249, 257, 328, 413, 563, 564, 567, 568, 570, 571, 638, 641, 642, 700, 712, 886, 898, 912, 915, 918, 919, 920, 921, 995, 999, 1008, 1013, 1019, 1046, 1050, 1054, 1056], "monotonic_cst": [154, 156, 328, 330, 334, 422, 563, 564, 567, 568, 570, 571, 918, 919, 920, 921, 1054, 1057], "mont": [251, 425, 617, 647, 648, 990, 1003], "montecchio": 1043, "montesel": 1057, "month": [0, 42, 180, 192, 324, 380, 385, 389, 400, 1039], "month_co": 42, "month_sin": 42, "monthli": [180, 400, 998], "montoya": 1046, "montreal": 332, "moodi": 1044, "moon": [277, 314, 320, 359, 360, 528], "moonkyung94": 1053, "moor": [0, 741, 998, 1022, 1056], "moosmann": 572, "moradizadeh": 1053, "moral": [56, 104, 359, 664, 1047, 1051, 1052, 1057], "morawiec": [1046, 1047], "more": [0, 1, 10, 35, 42, 44, 45, 46, 49, 50, 51, 52, 56, 61, 62, 63, 65, 66, 71, 73, 74, 77, 78, 80, 83, 86, 87, 89, 91, 94, 101, 108, 112, 119, 120, 122, 124, 127, 130, 131, 138, 139, 141, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 159, 171, 173, 175, 181, 184, 187, 188, 191, 192, 194, 196, 198, 199, 203, 205, 208, 210, 213, 217, 219, 220, 221, 223, 234, 235, 236, 237, 239, 243, 246, 251, 252, 253, 254, 256, 258, 262, 264, 265, 267, 268, 270, 271, 275, 277, 278, 279, 280, 284, 286, 291, 295, 297, 298, 300, 301, 308, 313, 314, 316, 318, 319, 320, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 338, 345, 348, 352, 353, 355, 357, 359, 360, 361, 363, 364, 368, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 398, 399, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 580, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 943, 945, 947, 949, 961, 964, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1020, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "moreau": [1045, 1046, 1047, 1048, 1049], "moreov": [164, 181, 320, 331, 368, 389, 415, 419, 425, 903, 968, 998, 1006, 1022, 1047, 1053, 1054], "moreyra": 1052, "morgan": [1010, 1014], "mori": 1054, "morikko": 1046, "morina": 1052, "moritz": [1052, 1054], "morn": 42, "moroz": 1045, "morril": 1039, "mors": 1050, "mortem": 1032, "moslei": 998, "mosley2013": 998, "mosold": 159, "most": [1, 10, 42, 44, 46, 50, 52, 56, 60, 63, 86, 87, 89, 96, 110, 116, 117, 132, 138, 144, 145, 152, 154, 159, 168, 169, 170, 172, 173, 180, 187, 190, 191, 192, 193, 194, 196, 203, 219, 220, 237, 253, 257, 262, 268, 271, 274, 275, 280, 284, 285, 287, 291, 295, 297, 307, 318, 324, 325, 327, 330, 333, 335, 338, 348, 352, 359, 360, 361, 368, 372, 373, 374, 380, 381, 383, 385, 386, 387, 389, 390, 391, 393, 397, 399, 400, 403, 406, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 449, 450, 452, 456, 462, 463, 466, 474, 502, 509, 527, 530, 538, 540, 545, 549, 555, 557, 567, 568, 572, 573, 594, 595, 597, 599, 610, 617, 633, 636, 655, 664, 678, 680, 682, 684, 693, 694, 698, 701, 731, 734, 752, 764, 765, 769, 791, 800, 803, 804, 809, 810, 825, 838, 839, 852, 853, 854, 856, 858, 859, 860, 861, 862, 885, 887, 895, 896, 898, 899, 900, 901, 908, 946, 947, 949, 961, 987, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1028, 1030, 1031, 1032, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1056], "most_common": 56, "most_frequ": [280, 557, 633, 636, 860, 988, 998, 1047, 1049, 1051], "mostli": [0, 1, 80, 103, 219, 237, 323, 393, 397, 399, 420, 422, 423, 527, 785, 786, 1013, 1017, 1022, 1047, 1048, 1049, 1055], "mother": 995, "motiv": [133, 385, 387, 399, 990, 998, 1008, 1022, 1052], "motmoti": 1049, "motoda": 415, "motor": 237, "motorcycl": [56, 380], "mottl": [1047, 1048], "moudgalya": [1055, 1056], "moufad": 1054, "moulavi": [415, 452], "mount": 393, "mountain": 1047, "mountford": [1055, 1056], "mous": 379, "mouseid": 379, "moussa": 1045, "move": [63, 147, 278, 316, 348, 384, 385, 389, 391, 413, 415, 555, 556, 577, 578, 579, 581, 583, 584, 965, 1031, 1039, 1040, 1044, 1047, 1049, 1052, 1053], "moveabl": 416, "movelikeriv": 1048, "movement": 380, "movi": [423, 1024], "movie_entri": 423, "movie_review": 1032, "moya": 1051, "mp": 994, "mpce": 56, "mpl": [69, 262, 263, 264, 268, 318], "mpl_toolkit": [49, 79, 101, 120, 130, 192, 216, 239, 241, 311], "mplot3d": [79, 101, 120, 130, 192, 216, 239, 241], "mpoemsl": 1053, "mppca": [540, 547], "mprun": 391, "mpy": 423, "mr": [91, 332, 1040, 1043, 1053], "mrandrewandrad": 1045, "mrastgoo": [1054, 1056], "mrg": [385, 393], "mridul": 1045, "mrinal": 1053, "mrinaltyagi": 1053, "mrl09": 420, "mrmjauh": 1046, "mro": [387, 432, 438, 1049, 1050], "mrs2008": 596, "msabati": 1053, "msc": 382, "mschaffenroth": 1049, "mse": [43, 45, 110, 111, 149, 151, 152, 186, 187, 219, 221, 223, 225, 292, 334, 653, 659, 756, 998, 1014, 1050, 1052], "mse_path_": [208, 653, 657, 659, 661, 667, 669], "mse_valu": 45, "mses_california": 187, "mses_diabet": 187, "msft": 50, "msg": [298, 982], "msle": [757, 998], "msm": [173, 382], "mssubclass": 159, "mst": 415, "msvc": 1042, "msvcp140": 1053, "mt19937": [284, 289, 933, 1050], "mthorrel": [1046, 1049], "mtrand": 368, "mtse": 685, "mu": [53, 112, 113, 277, 420, 428, 479, 481, 482, 485, 486, 487, 546, 553, 992, 994, 1046, 1049], "mu_i": 1000, "mu_j": 415, "mu_k": 992, "muayyad": 1047, "much": [36, 42, 44, 45, 47, 51, 56, 61, 74, 89, 112, 114, 122, 127, 133, 143, 151, 152, 159, 160, 161, 175, 186, 187, 191, 192, 193, 194, 196, 216, 217, 221, 250, 253, 256, 271, 277, 279, 280, 283, 288, 315, 319, 323, 324, 325, 329, 330, 332, 348, 353, 359, 360, 368, 372, 373, 374, 380, 385, 386, 387, 390, 393, 397, 398, 403, 409, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 453, 454, 502, 540, 541, 542, 544, 565, 566, 567, 568, 664, 665, 672, 673, 674, 682, 683, 684, 698, 785, 786, 809, 810, 824, 885, 903, 910, 987, 990, 993, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1006, 1010, 1011, 1013, 1014, 1018, 1022, 1027, 1028, 1030, 1031, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "mudd": 1052, "mueller": [0, 107, 129, 142, 210, 251, 339, 355, 356, 404, 1022, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "muhammad": [1047, 1048, 1052], "mukherje": 1050, "mula": 1051, "multi": [1, 49, 66, 121, 137, 139, 141, 147, 157, 160, 162, 166, 177, 179, 188, 197, 203, 205, 206, 208, 211, 218, 226, 235, 238, 241, 245, 246, 254, 257, 269, 274, 286, 297, 312, 319, 320, 321, 327, 332, 342, 344, 353, 357, 359, 362, 363, 364, 365, 367, 373, 380, 382, 387, 388, 394, 399, 403, 415, 422, 423, 425, 432, 443, 458, 468, 475, 480, 501, 502, 510, 511, 516, 520, 521, 525, 526, 528, 547, 555, 556, 557, 559, 561, 563, 564, 565, 567, 570, 571, 573, 575, 616, 637, 639, 649, 652, 653, 658, 659, 663, 664, 666, 667, 668, 669, 672, 674, 678, 679, 680, 681, 682, 687, 690, 696, 709, 719, 726, 740, 746, 748, 789, 805, 806, 820, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 857, 858, 860, 866, 867, 868, 871, 877, 890, 894, 905, 906, 910, 912, 915, 918, 919, 920, 922, 923, 924, 930, 933, 936, 987, 999, 1001, 1005, 1008, 1012, 1017, 1018, 1019, 1020, 1023, 1029, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "multi_class": [211, 286, 327, 616, 664, 665, 794, 910, 994, 999, 1013, 1039, 1043, 1047, 1052, 1054, 1057], "multi_confus": 760, "multi_layer_regressor": 422, "multi_output": [394, 930], "multi_target_forest": 999, "multialign": 289, "multiarch": 393, "multiclass": [1, 30, 62, 65, 144, 197, 211, 235, 247, 254, 256, 259, 269, 274, 282, 284, 287, 297, 316, 345, 356, 380, 381, 387, 388, 390, 399, 406, 415, 422, 443, 458, 468, 495, 502, 510, 563, 565, 567, 570, 573, 574, 600, 608, 616, 637, 638, 639, 664, 665, 672, 674, 679, 680, 681, 682, 708, 712, 714, 735, 736, 740, 741, 744, 749, 760, 789, 790, 793, 794, 795, 800, 806, 807, 809, 810, 811, 812, 820, 822, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 877, 891, 910, 912, 915, 918, 920, 960, 961, 962, 992, 994, 1008, 1009, 1013, 1014, 1019, 1020, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1054, 1055, 1056], "multicollinear": [145, 146, 188, 189, 193, 340, 418, 506, 570, 640, 661, 836, 994, 1006, 1019], "multicor": [1051, 1052], "multidimension": [1, 418, 694, 696, 698, 700, 995, 1001], "multigrid": 468, "multiindex": 1053, "multilabel": [1, 29, 30, 116, 118, 188, 245, 284, 296, 380, 387, 388, 399, 410, 488, 493, 502, 503, 514, 515, 521, 529, 547, 563, 570, 573, 664, 680, 681, 709, 713, 719, 732, 735, 736, 740, 741, 744, 745, 760, 762, 789, 790, 793, 794, 800, 802, 836, 839, 841, 843, 867, 874, 877, 881, 883, 894, 915, 918, 920, 936, 960, 961, 962, 1009, 1019, 1020, 1032, 1034, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "multilabel_": [839, 1044], "multilabel_confusion_matrix": [1, 719, 735, 736, 744, 790, 793, 998, 1048], "multilabelbinar": [1, 399, 839, 874, 883, 999, 1023, 1042, 1044, 1045, 1047, 1048], "multilay": [397, 996], "multilearn": 1017, "multimetr": [987, 1049, 1054], "multimetric_": [806, 809, 810, 820], "multimod": 246, "multinomi": [1, 46, 65, 188, 197, 210, 228, 234, 254, 272, 286, 315, 356, 380, 381, 385, 420, 422, 502, 518, 529, 557, 559, 565, 567, 637, 664, 665, 747, 836, 839, 845, 846, 847, 848, 849, 890, 933, 998, 1014, 1019, 1020, 1032, 1034, 1039, 1043, 1045, 1046, 1047, 1052, 1053, 1057], "multinomialdevi": 1050, "multinomialhmm": 1039, "multinomialnb": [1, 46, 374, 380, 423, 845, 846, 847, 848, 1000, 1032, 1041, 1043, 1046, 1047, 1051, 1052, 1054], "multiouput": 1049, "multioutput": [1, 40, 158, 286, 297, 387, 399, 406, 438, 471, 488, 489, 490, 557, 560, 562, 563, 564, 566, 568, 570, 571, 574, 576, 617, 638, 639, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 794, 796, 797, 831, 839, 841, 842, 843, 844, 853, 861, 868, 877, 911, 913, 916, 918, 919, 920, 921, 936, 961, 962, 998, 1019, 1020, 1034, 1039, 1040, 1041, 1045, 1046, 1052, 1053], "multioutput_arrai": 385, "multioutput_onli": 387, "multioutputclassifi": [1, 406, 794, 839, 841, 843, 998, 1046, 1048, 1049, 1050, 1051, 1055, 1056], "multioutputregressor": [1, 158, 406, 438, 471, 488, 489, 490, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 842, 844, 853, 861, 868, 911, 913, 916, 919, 921, 1045, 1046, 1048, 1050, 1051, 1055, 1056], "multipl": [1, 24, 51, 80, 102, 105, 122, 133, 138, 144, 146, 147, 149, 169, 188, 191, 213, 251, 271, 277, 282, 283, 285, 289, 295, 297, 300, 327, 333, 351, 372, 373, 374, 379, 381, 382, 385, 387, 388, 389, 390, 397, 399, 409, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 450, 466, 470, 472, 473, 475, 480, 494, 497, 498, 501, 502, 503, 509, 510, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 587, 605, 613, 614, 616, 617, 633, 638, 640, 645, 646, 647, 648, 652, 653, 656, 658, 659, 660, 663, 666, 667, 668, 669, 672, 673, 674, 677, 679, 682, 684, 685, 695, 696, 698, 699, 700, 717, 727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 794, 796, 797, 799, 803, 804, 806, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 832, 833, 834, 836, 840, 841, 842, 843, 844, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 872, 875, 887, 891, 899, 902, 903, 910, 911, 912, 915, 926, 941, 946, 947, 969, 972, 990, 993, 994, 995, 999, 1000, 1001, 1005, 1006, 1011, 1012, 1014, 1017, 1018, 1019, 1023, 1032, 1039, 1040, 1042, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "multipleloc": [239, 303], "multiplex": 1014, "multipli": [191, 223, 237, 277, 372, 394, 399, 420, 422, 423, 428, 470, 481, 521, 544, 546, 547, 553, 563, 567, 570, 652, 654, 658, 660, 664, 665, 666, 668, 674, 675, 676, 678, 682, 683, 684, 686, 692, 693, 695, 699, 770, 912, 915, 918, 920, 936, 974, 975, 976, 987, 990, 994, 998, 1012, 1050], "multiprocess": [397, 399, 964, 1001, 1039, 1047, 1053], "multirespons": 994, "multiscal": 468, "multisurfac": [173, 382], "multitarget": 394, "multitask": [297, 423, 999], "multitaskelasticnet": [1, 652, 653, 658, 667, 668, 669, 687, 994, 999, 1039, 1046, 1047, 1050, 1052], "multitaskelasticnetcv": [1, 406, 652, 653, 658, 666, 668, 669, 687, 994, 999, 1042, 1049, 1050, 1052, 1056], "multitasklasso": [1, 213, 658, 666, 669, 994, 999, 1039, 1047, 1050, 1052], "multitasklassocv": [1, 406, 667, 668, 999, 1042, 1049, 1050, 1052, 1056], "multithread": [372, 415, 784, 910, 911, 912, 913, 914, 915, 916], "multivari": [1, 124, 191, 377, 417, 420, 423, 479, 522, 523, 524, 633, 634, 635, 636, 655, 677, 684, 685, 845, 846, 847, 848, 849, 992, 994, 997, 1000, 1017, 1023, 1031, 1034], "multivariate_norm": [114, 117, 262, 428, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487], "multiwai": 1014, "muma": 113, "mungui": 1052, "munoz": [1045, 1051], "muoki": 1051, "murad": 1042, "murashkin": 1043, "murata": [1052, 1053], "murder": 359, "murezzda": 1055, "murmurhash": 394, "murmurhash3": [1, 423, 588, 595, 963], "murmurhash3_32": [1, 394], "murmurhash3_x86_32": [394, 963], "murphi": [413, 649, 991], "murrai": [1045, 1046], "music": 1022, "must": [89, 191, 192, 194, 200, 203, 236, 237, 246, 257, 272, 304, 319, 324, 359, 368, 380, 384, 385, 386, 387, 389, 391, 393, 399, 400, 406, 411, 413, 415, 416, 419, 420, 422, 423, 424, 425, 426, 436, 444, 447, 450, 451, 452, 453, 455, 456, 457, 461, 463, 465, 467, 468, 470, 472, 473, 475, 480, 493, 514, 515, 518, 529, 537, 543, 544, 545, 546, 547, 549, 550, 553, 559, 560, 565, 566, 567, 568, 573, 574, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 616, 617, 623, 626, 633, 634, 635, 636, 638, 639, 644, 648, 649, 654, 655, 658, 664, 665, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 705, 709, 712, 715, 741, 752, 770, 777, 780, 784, 787, 794, 798, 799, 800, 802, 803, 804, 806, 807, 809, 810, 811, 813, 815, 816, 818, 820, 821, 822, 824, 825, 827, 831, 834, 836, 837, 845, 846, 847, 848, 849, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 866, 867, 868, 870, 873, 874, 875, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 910, 911, 912, 913, 914, 915, 916, 917, 923, 973, 982, 984, 987, 988, 994, 995, 996, 998, 1001, 1002, 1004, 1005, 1012, 1013, 1014, 1023, 1032, 1039, 1042, 1046, 1050, 1052, 1053, 1056], "mutat": [368, 1047], "mutual": [1, 71, 72, 83, 89, 92, 167, 188, 399, 422, 424, 452, 598, 601, 602, 605, 606, 612, 613, 614, 615, 710, 711, 721, 761, 763, 792, 801, 987, 994, 998, 999, 1019, 1039, 1045, 1055], "mutual_info_classif": [1, 105, 424, 598, 601, 602, 605, 606, 1045, 1051, 1054, 1057], "mutual_info_regress": [1, 168, 331, 424, 598, 601, 602, 605, 606, 615, 1045, 1046, 1051, 1053, 1054, 1055, 1057], "mutual_info_scor": [1, 71, 415, 710, 998, 1047, 1050, 1051], "mu\u00f1oz": [1052, 1054], "mwestt": 1048, "my": [379, 385, 390, 393, 502], "my_custom_loss_func": 998, "my_data": 390, "my_dataset": 493, "my_estim": [387, 416], "my_extra_param": 387, "my_featur": 385, "my_fil": 391, "my_func": [386, 391], "my_g": [427, 539], "my_group": [253, 406], "my_kernel": [344, 1013], "my_memb": [95, 97, 98], "my_other_weight": [253, 406], "my_pipelin": 1048, "my_script": 373, "my_test_script": 393, "my_token": 423, "my_weight": [253, 406], "myatt": [1048, 1049], "mycach": [514, 515], "mycluster": 433, "myenugula": 1057, "myer": [1042, 1046], "myestim": [387, 429, 431, 432, 434, 435, 436, 437, 438], "myestimator0": 431, "myestimator1": 431, "mymultioutputestim": 387, "mypi": [385, 389, 403, 408, 1050], "myself": 385, "mysvmlightfil": 514, "mytransform": [387, 439], "m\u00e9hault": [1047, 1048], "m\u00f6rtberg": 1045, "m\u00fcller": [0, 66, 319, 320, 400, 420, 541, 876, 1002, 1008, 1012, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "n": [1, 42, 43, 45, 46, 48, 49, 53, 54, 56, 67, 68, 71, 73, 74, 92, 103, 108, 112, 116, 122, 124, 127, 129, 131, 133, 134, 138, 140, 141, 145, 161, 168, 171, 173, 175, 179, 184, 192, 194, 199, 203, 215, 219, 220, 223, 234, 236, 237, 239, 249, 250, 251, 254, 262, 264, 265, 275, 277, 280, 282, 283, 284, 286, 287, 298, 301, 303, 316, 320, 322, 323, 329, 332, 334, 338, 352, 355, 367, 372, 379, 382, 383, 385, 389, 391, 394, 399, 403, 406, 412, 413, 415, 418, 419, 420, 421, 422, 423, 425, 426, 450, 451, 453, 454, 456, 475, 477, 480, 484, 495, 521, 522, 523, 524, 529, 534, 544, 546, 547, 553, 563, 564, 565, 566, 569, 570, 571, 572, 594, 595, 596, 597, 613, 614, 620, 633, 655, 677, 685, 698, 702, 705, 712, 713, 761, 811, 814, 816, 821, 822, 825, 846, 850, 851, 855, 875, 902, 904, 918, 919, 920, 921, 927, 945, 950, 951, 973, 977, 978, 987, 990, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1012, 1013, 1014, 1023, 1030, 1032, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "n1": 127, "n2": 127, "n4": 127, "n_": [112, 113, 194, 277, 330, 415, 420, 422, 652, 658, 691, 702, 990, 994, 998, 1000, 1001, 1005, 1008, 1010, 1013, 1014], "n_alpha": [224, 478, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 679, 681, 687, 688, 689, 690, 1042], "n_atom": 1040, "n_averag": 68, "n_bar": 187, "n_batch_iter_": 542, "n_best": 457, "n_bin": [60, 61, 63, 87, 219, 237, 319, 321, 325, 444, 445, 875, 1008], "n_bins_": 875, "n_bootstrap": [280, 1040], "n_bulk_repeat": 48, "n_byte": 250, "n_c": [415, 665], "n_call": [850, 851], "n_candid": [809, 810, 987], "n_candidates_": [289, 809, 810, 987], "n_candidates_0": 987, "n_candidates_i": 987, "n_categori": [325, 846, 884, 1008], "n_categorical_featur": [148, 567, 568, 638, 639], "n_categories_": 846, "n_center": [76, 518], "n_channel": [589, 590, 593], "n_class": [1, 44, 71, 121, 122, 138, 140, 145, 147, 170, 172, 234, 240, 251, 254, 264, 284, 285, 286, 307, 308, 327, 364, 367, 368, 385, 387, 399, 422, 443, 494, 495, 508, 521, 525, 529, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 599, 600, 610, 616, 640, 645, 664, 665, 672, 673, 674, 680, 681, 682, 683, 703, 713, 722, 724, 728, 741, 744, 747, 760, 794, 800, 805, 806, 809, 810, 820, 828, 831, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 852, 857, 859, 860, 867, 870, 877, 878, 881, 884, 891, 894, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 920, 922, 923, 935, 936, 994, 998, 999, 1002, 1009, 1012, 1013, 1028, 1044, 1045, 1046, 1048, 1049, 1050, 1056], "n_classes_": [557, 559, 561, 563, 565, 570, 616, 838, 839, 918, 920, 1040, 1049, 1051], "n_classes_pr": [720, 761], "n_classes_tru": [720, 761], "n_classifi": [65, 575, 576], "n_cluster": [1, 56, 57, 58, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 124, 331, 360, 385, 399, 415, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 468, 469, 517, 519, 716, 798, 799, 1031, 1039, 1043, 1045, 1047, 1048, 1050, 1053], "n_clusters_": [72, 83, 89, 97, 447, 451], "n_clusters_list": 77, "n_clusters_per_class": [66, 121, 142, 170, 172, 274, 308, 313, 320, 390, 521, 611, 613], "n_clusters_rang": 71, "n_clusters_tru": 95, "n_col": [44, 56, 124, 255, 430, 457, 459, 517, 519, 638, 1028], "n_color": 82, "n_column": [412, 457, 459], "n_column_clust": [457, 459, 519], "n_comp": [134, 196], "n_comparison": 277, "n_compon": [42, 43, 44, 50, 53, 78, 86, 91, 92, 93, 103, 105, 106, 107, 116, 117, 120, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 157, 196, 218, 239, 240, 241, 242, 243, 244, 246, 250, 251, 254, 258, 262, 263, 264, 265, 266, 267, 268, 276, 302, 307, 316, 323, 329, 331, 334, 335, 360, 387, 390, 391, 399, 416, 418, 420, 427, 457, 458, 468, 470, 488, 489, 490, 491, 532, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 645, 646, 647, 648, 694, 695, 696, 697, 698, 699, 700, 701, 702, 803, 804, 859, 866, 869, 902, 903, 904, 947, 990, 992, 995, 997, 1001, 1028, 1031, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057], "n_components_": [106, 131, 399, 447, 451, 540, 544, 545, 546, 547, 548, 549, 902, 903, 1028, 1048, 1050], "n_components_fa": 131, "n_components_pca": 131, "n_components_pca_ml": 131, "n_components_rang": 250, "n_connected_compon": 469, "n_connected_components_": [447, 451, 1048], "n_core": 144, "n_core_sampl": [426, 450], "n_cpu": [373, 399], "n_cv": [419, 443], "n_cv_alpha": [657, 661], "n_cv_fold": [148, 324, 812, 829, 834, 837], "n_digit": 92, "n_dim": [484, 533, 535, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 1056], "n_dimens": [803, 804], "n_dimensions_of_x": [912, 913, 914, 915, 916], "n_dir": 52, "n_e": 415, "n_element": [425, 623], "n_encoded_featur": [883, 884], "n_error": 305, "n_error_outli": [233, 304, 347], "n_error_outliers_sgd": 233, "n_error_test": [233, 304, 347], "n_error_test_sgd": 233, "n_error_train": [233, 347], "n_error_train_sgd": 233, "n_estim": [45, 48, 62, 66, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 157, 158, 161, 186, 194, 240, 255, 259, 264, 274, 289, 320, 327, 329, 372, 398, 399, 422, 424, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 638, 809, 810, 987, 1004, 1005, 1036, 1047, 1055], "n_estimators_": [149, 565, 566], "n_estimators_ful": 149, "n_exampl": 46, "n_face": 255, "n_featur": [44, 46, 53, 61, 62, 63, 65, 66, 67, 68, 69, 74, 86, 92, 94, 95, 110, 111, 112, 113, 114, 121, 122, 124, 131, 138, 140, 142, 144, 145, 170, 172, 173, 186, 187, 196, 198, 201, 203, 205, 213, 214, 218, 222, 223, 234, 236, 240, 246, 250, 251, 253, 262, 267, 274, 280, 284, 286, 287, 289, 290, 308, 313, 320, 327, 328, 329, 331, 333, 334, 335, 355, 359, 360, 361, 368, 372, 378, 379, 385, 387, 390, 397, 398, 399, 406, 415, 417, 418, 420, 422, 423, 426, 427, 428, 430, 432, 433, 434, 437, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 500, 507, 510, 514, 515, 518, 521, 522, 525, 527, 529, 530, 532, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 706, 707, 708, 716, 731, 764, 765, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 947, 973, 974, 975, 976, 977, 978, 979, 980, 981, 990, 994, 999, 1001, 1002, 1008, 1012, 1013, 1014, 1023, 1028, 1029, 1031, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "n_feature_influ": 48, "n_features_": [172, 599, 600, 1052, 1054], "n_features_a": 859, "n_features_b": 859, "n_features_in_": [387, 399, 436, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 633, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 1050, 1052, 1054, 1057], "n_features_max": 68, "n_features_missing_ind": 636, "n_features_new": [439, 448, 451, 538, 540, 542, 543, 545, 548, 549, 555, 573, 575, 576, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 634, 636, 641, 644, 645, 646, 647, 648, 859, 866, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 902, 903], "n_features_opt": 105, "n_features_out": 636, "n_features_out_": 889, "n_features_rang": 68, "n_features_to_comput": 1047, "n_features_to_select": [171, 173, 329, 424, 599, 608, 1051, 1053], "n_features_to_select_": 608, "n_features_with_miss": 635, "n_features_with_missing_": 633, "n_fold": [164, 653, 657, 659, 661, 665, 667, 669, 1040, 1041, 1045], "n_gram_rang": 1039, "n_group": [419, 815, 1027, 1045], "n_i": [1000, 1008], "n_imag": 275, "n_index": [852, 853, 854, 856, 858, 860, 861], "n_inform": [61, 63, 66, 121, 142, 145, 170, 172, 198, 203, 222, 223, 274, 280, 290, 308, 313, 320, 327, 355, 387, 390, 521, 530, 559, 560, 561, 562, 570, 571, 611, 612, 613, 614, 615, 652, 653, 658, 666, 667, 668, 671, 687, 688, 689, 840, 999, 1047], "n_init": [56, 76, 77, 79, 84, 91, 92, 95, 98, 239, 240, 241, 242, 328, 331, 360, 415, 449, 453, 455, 457, 458, 459, 465, 468, 696, 700, 803, 804, 1031, 1039, 1047, 1053, 1054, 1055], "n_init_rang": 95, "n_inlier": 246, "n_input_features_": 1052, "n_instanc": [48, 639], "n_iter": [44, 54, 104, 154, 175, 227, 278, 285, 298, 316, 350, 387, 391, 398, 427, 460, 484, 538, 539, 550, 551, 552, 553, 652, 653, 658, 659, 666, 667, 668, 669, 687, 688, 689, 690, 691, 692, 693, 698, 700, 809, 810, 818, 820, 866, 868, 946, 947, 987, 1012, 1028, 1040, 1045, 1046, 1047, 1051, 1053, 1054, 1055, 1057], "n_iter_": [42, 127, 154, 227, 265, 399, 446, 453, 454, 455, 477, 478, 488, 489, 490, 537, 538, 539, 542, 543, 544, 545, 546, 549, 567, 568, 633, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 682, 683, 684, 685, 686, 696, 698, 803, 804, 859, 867, 868, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 1043, 1046, 1047, 1049, 1052, 1053, 1055], "n_iter_no_chang": [45, 144, 149, 154, 227, 330, 359, 390, 399, 422, 565, 566, 567, 568, 672, 673, 674, 682, 683, 684, 867, 868, 1012, 1047, 1050], "n_iter_search": 285, "n_iter_without_progress": [240, 698, 1044, 1045], "n_iterations_": [289, 809, 810], "n_iters_": 1045, "n_job": [51, 88, 105, 106, 144, 145, 146, 151, 152, 159, 172, 173, 186, 191, 192, 193, 194, 240, 242, 258, 271, 276, 278, 279, 281, 293, 295, 298, 327, 328, 329, 332, 355, 373, 385, 399, 422, 426, 443, 450, 452, 454, 456, 458, 461, 462, 463, 464, 467, 470, 473, 478, 537, 541, 542, 543, 545, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 600, 608, 613, 614, 616, 638, 640, 645, 653, 657, 659, 661, 663, 664, 665, 667, 669, 671, 672, 674, 682, 685, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 869, 872, 905, 906, 964, 987, 998, 999, 1001, 1027, 1028, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1057], "n_k": [415, 556], "n_kernel": 618, "n_kernel_param": [616, 617], "n_knot": [42, 220, 330, 889, 1008, 1052], "n_l1_ratio": [653, 665, 667, 1042], "n_l1_ratios_": 665, "n_label": [50, 122, 254, 399, 493, 529, 719, 726, 732, 745, 746, 760, 762, 798, 799, 826, 998, 1045, 1047], "n_labeled_point": [337, 338], "n_layer": [867, 868], "n_layers_": [867, 868], "n_leav": [469, 918, 919, 920, 921], "n_leaves_": [447, 451], "n_left": 569, "n_local_tri": 466, "n_m": 1014, "n_mask": 219, "n_missing_featur": 635, "n_missing_sampl": 187, "n_nearest_featur": [187, 633], "n_neighbor": [50, 78, 96, 101, 160, 186, 239, 240, 241, 243, 246, 256, 298, 300, 301, 304, 305, 306, 307, 310, 323, 327, 329, 359, 422, 458, 608, 613, 614, 634, 694, 695, 697, 699, 701, 702, 852, 853, 854, 856, 858, 859, 863, 905, 906, 988, 995, 1001, 1004, 1011, 1046, 1053, 1055, 1056], "n_neighbors_": [697, 856], "n_neighbors_list": [256, 300], "n_neighbour": 1053, "n_node": [367, 447, 451, 469, 563, 564, 570, 571, 572, 918, 919, 920, 921, 952], "n_node_sampl": 367, "n_nodes_ptr": [563, 564, 570, 571, 572], "n_noise_": 83, "n_nonzero": 133, "n_nonzero_coef": [218, 532, 537, 543, 548, 551, 552, 554, 656, 670, 691, 692, 1057], "n_nonzero_coefs_": [670, 671, 1057], "n_nonzero_column": 361, "n_numerical_featur": 148, "n_order": 199, "n_original_featur": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609], "n_out": 572, "n_outlier": [112, 113, 155, 222, 246, 305], "n_output": [367, 399, 422, 432, 438, 439, 443, 448, 451, 471, 475, 488, 489, 490, 538, 540, 542, 543, 545, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 634, 636, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 684, 685, 727, 729, 734, 751, 752, 754, 756, 757, 759, 760, 791, 794, 796, 797, 805, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 857, 859, 860, 861, 866, 867, 868, 869, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 902, 903, 905, 906, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 936, 969, 998, 999, 1014, 1046, 1049], "n_output_featur": 634, "n_output_features_": 885, "n_outputs_": [557, 558, 563, 564, 570, 571, 572, 867, 868, 918, 919, 920, 921], "n_oversampl": [457, 459, 547, 550, 947, 1053], "n_pack": [1, 950, 951], "n_patch": [589, 590, 593], "n_permut": [283, 419, 835], "n_pixel": [255, 275], "n_point": [272, 850, 851], "n_points_per_clust": 99, "n_popul": [394, 967], "n_possible_iterations_": [809, 810], "n_predict": 48, "n_pt": 52, "n_q": 415, "n_quantil": [108, 192, 322, 887, 899, 1048], "n_quantiles_": 887, "n_queri": [694, 852, 853, 854, 856, 858, 860, 861, 862], "n_random_featur": 208, "n_redund": [61, 63, 66, 121, 145, 170, 172, 274, 280, 308, 313, 320, 390, 443, 521, 559, 561, 570, 840], "n_refin": 478, "n_region": 80, "n_regions_plu": 80, "n_regressor": 576, "n_relevant_featur": 213, "n_remaining_candidates_": [809, 810], "n_repeat": [141, 145, 152, 172, 191, 193, 194, 277, 291, 295, 327, 419, 521, 640, 821, 822, 1006], "n_required_iterations_": [809, 810], "n_resourc": 987, "n_resources_": [289, 809, 810, 987], "n_resources_0": 987, "n_resources_i": 987, "n_restarts_optim": [182, 425, 616, 617], "n_retri": [494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 1053, 1057], "n_row": [44, 56, 124, 412, 430, 457, 459, 517, 519, 1028], "n_row_clust": [457, 459, 519], "n_run": [71, 95, 196, 360], "n_sampl": [44, 45, 48, 53, 60, 61, 62, 63, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 103, 108, 110, 111, 112, 113, 114, 117, 122, 124, 125, 129, 131, 138, 140, 141, 142, 143, 144, 145, 150, 151, 152, 153, 155, 156, 165, 166, 172, 173, 184, 186, 187, 190, 198, 200, 201, 203, 205, 207, 209, 211, 213, 214, 218, 219, 220, 222, 223, 227, 231, 234, 236, 237, 239, 240, 241, 242, 243, 244, 246, 250, 251, 253, 256, 263, 265, 266, 267, 268, 274, 275, 277, 280, 281, 284, 286, 287, 288, 289, 290, 292, 298, 308, 320, 321, 322, 325, 328, 329, 331, 333, 334, 335, 339, 346, 349, 350, 355, 359, 360, 368, 378, 382, 385, 387, 390, 394, 397, 398, 399, 406, 414, 415, 417, 418, 419, 420, 422, 426, 427, 428, 430, 432, 433, 434, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 507, 510, 514, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 627, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 776, 777, 778, 779, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 935, 936, 947, 949, 951, 960, 967, 969, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 990, 994, 998, 999, 1001, 1002, 1008, 1009, 1010, 1012, 1013, 1014, 1023, 1028, 1029, 1030, 1031, 1032, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "n_samples1": 876, "n_samples2": 876, "n_samples_": 547, "n_samples_1": [350, 1013], "n_samples_2": [350, 1013], "n_samples_a": [798, 799], "n_samples_fit": [438, 471, 488, 489, 490, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 694, 843, 844, 852, 853, 854, 856, 858, 860, 861, 862, 868, 911, 913, 916, 919, 921], "n_samples_fit_": [298, 852, 853, 854, 856, 858, 860, 861, 862], "n_samples_i": [618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 780, 781, 782, 783, 784, 785, 786, 787], "n_samples_per_cent": 95, "n_samples_rang": [111, 250], "n_samples_seen": 890, "n_samples_seen_": [540, 879, 880, 890, 1047], "n_samples_test": [290, 912, 913, 914, 915, 916, 1001, 1008], "n_samples_train": [290, 912, 913, 914, 915, 916], "n_samples_transform": [298, 854, 862], "n_samples_x": [617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 780, 781, 782, 783, 784, 785, 786, 787], "n_seed": 467, "n_selected_featur": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609], "n_skips_": 1046, "n_skips_invalid_data_": 677, "n_skips_invalid_model_": 677, "n_skips_no_inliers_": 677, "n_spline": [42, 889], "n_split": [42, 51, 144, 150, 154, 186, 187, 191, 264, 272, 277, 279, 282, 287, 291, 295, 334, 340, 348, 355, 368, 419, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 833, 1027, 1045, 1047], "n_splits_": [806, 809, 810, 820], "n_steps_": [127, 455, 543, 544, 1052], "n_subpopulation_": 685, "n_subsampl": [685, 936], "n_subsets_of_featur": 600, "n_support_": [912, 913, 914, 915, 916, 1013, 1049], "n_support_vector": 45, "n_sv": [912, 913, 914, 915, 916, 1013, 1049], "n_svd_vec": [457, 459], "n_t": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "n_t_l": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "n_t_r": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "n_target": [399, 418, 488, 489, 490, 491, 530, 562, 617, 649, 652, 653, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 677, 678, 679, 680, 681, 687, 690, 691, 692, 693, 999, 1051, 1053, 1055], "n_task": [213, 994], "n_test": [46, 48, 68, 141, 277, 1039, 1042], "n_test_docu": 46, "n_test_po": 46, "n_threshold": [641, 733, 788, 795], "n_tick": [812, 829, 834, 837], "n_top": 285, "n_top_word": 53, "n_topic": [390, 542, 1046], "n_tot": 705, "n_total_sampl": [337, 338], "n_train": [46, 48, 68, 141, 277, 1039, 1042], "n_train_po": 46, "n_transformed_featur": 870, "n_tree": 45, "n_trees_per_iter": 567, "n_trees_per_iteration_": [565, 566, 567, 568], "n_trials_": 677, "n_uncorrelated_featur": 283, "n_unequ": 705, "n_unique_categori": 324, "n_unique_label": [735, 736, 744, 789, 790, 793, 962], "n_unique_tick": [812, 834], "n_valu": [829, 837, 1047], "n_values_": 1047, "n_values_feature_j": 639, "n_x": [88, 591], "n_y": [88, 591, 1000, 1008], "n_z": 591, "na": [633, 634, 635, 636, 775, 784, 928, 930, 931, 1049, 1050, 1053, 1054, 1055, 1056], "nabarun": 1047, "nabla": 1002, "nabsolut": 225, "nacross": 291, "nada": 56, "nadeau": [277, 1047], "nadia": 1051, "nadim": 1052, "nadirhan": 1053, "nadya": 1045, "nagarajan": [651, 994], "nagarjuna": [1046, 1047], "nagasaka": 1052, "naghshhnejad": [1049, 1050], "nagpal": 90, "naipawat": [1053, 1054], "naiv": [1, 31, 63, 66, 157, 277, 279, 297, 359, 361, 380, 413, 422, 423, 443, 550, 845, 846, 847, 848, 849, 992, 993, 1001, 1006, 1020, 1034, 1039, 1040, 1041, 1042, 1047, 1049, 1052, 1054], "naive_bay": [1, 46, 60, 61, 63, 66, 157, 161, 278, 279, 359, 368, 374, 380, 422, 443, 575, 845, 846, 847, 848, 849, 871, 992, 999, 1000, 1032, 1040, 1041, 1043, 1044, 1045, 1046], "naive_linear_pipelin": 42, "naive_linear_predict": 42, "naivebay": 374, "naivebayesna": 1025, "naivelycalibratedlinearsvc": [61, 63], "najera": 1046, "najork": [732, 762, 998], "naka": 1052, "nakamura": 1053, "nakano": [1046, 1047], "nalepa": 1046, "naman": 1056, "name": [1, 42, 44, 45, 47, 48, 49, 50, 54, 56, 61, 63, 65, 66, 71, 78, 79, 92, 96, 104, 106, 108, 114, 125, 130, 141, 142, 143, 144, 148, 151, 154, 159, 191, 192, 193, 208, 217, 219, 221, 223, 225, 226, 234, 236, 237, 239, 240, 246, 252, 253, 255, 256, 260, 264, 271, 272, 274, 275, 278, 280, 281, 284, 286, 287, 291, 295, 298, 306, 307, 313, 314, 320, 322, 324, 331, 332, 335, 341, 353, 359, 360, 361, 373, 374, 379, 380, 383, 385, 387, 389, 390, 392, 393, 399, 403, 406, 412, 415, 419, 422, 423, 425, 429, 431, 436, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 516, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 696, 697, 698, 703, 704, 705, 706, 708, 714, 715, 717, 719, 738, 739, 748, 785, 786, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 818, 820, 824, 828, 829, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 929, 930, 931, 934, 938, 939, 940, 942, 954, 955, 956, 958, 961, 968, 982, 986, 987, 992, 994, 998, 999, 1005, 1006, 1008, 1014, 1018, 1027, 1028, 1030, 1032, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "name_to_color": 324, "named_estim": [573, 574, 575, 576], "named_estimators_": [573, 574, 575, 576, 1047, 1049], "named_step": [106, 117, 171, 416, 599, 600, 603, 870, 871, 910, 911, 994, 1028, 1046, 1048], "named_transform": [869, 1054], "named_transformers_": 470, "namedtupl": [1, 623, 956, 1055], "namespac": 411, "namiya": 1046, "nan": [1, 108, 148, 154, 186, 187, 191, 237, 256, 258, 260, 272, 280, 324, 327, 332, 333, 334, 335, 372, 377, 387, 394, 399, 422, 452, 474, 502, 561, 562, 563, 567, 568, 570, 599, 600, 603, 609, 612, 615, 633, 634, 635, 636, 641, 718, 719, 720, 727, 728, 729, 730, 734, 735, 736, 775, 784, 789, 790, 791, 793, 806, 809, 810, 812, 820, 829, 832, 833, 834, 837, 879, 880, 884, 886, 887, 890, 891, 895, 898, 899, 901, 928, 929, 930, 931, 973, 987, 998, 1008, 1014, 1034, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "nan_euclidean": [634, 768, 784], "nan_euclidean_dist": [1, 327, 768, 988, 1049], "nandana": [1045, 1046, 1047], "nanshan": 1052, "nanta": 1042, "nanxin": 1047, "nanyang": 382, "naois": [1054, 1056], "naoki": [1041, 1051], "naoya": [1045, 1046, 1047, 1048], "naozin555": 1052, "napa": 324, "narasimhan": 857, "nardelli": 1042, "narendra": [1050, 1056], "narendramukherje": 1050, "narendran": 1047, "narin": [244, 1046, 1047], "narinek": [1046, 1047], "narr": [385, 399, 664, 910, 915, 1039, 1040], "narrai": 600, "narrow": [51, 141, 151, 318, 320, 390, 850, 851], "nartayxd": 1053, "nasa": [103, 359, 360, 382], "nasdaq": 50, "naser": 1049, "nasir": 1047, "nass": 1054, "nastegiano": 1053, "nat": [613, 614, 710, 761, 763, 1053], "natasha": 1049, "natchiappan": [1052, 1053], "nate": [1045, 1046, 1052], "nath": 1047, "nathan": [541, 1047, 1051, 1054, 1057], "nathaniel": [1046, 1047, 1049], "nathansquan": 1053, "nati": 1054, "nation": [49, 112, 311, 380, 857], "nativ": [42, 51, 154, 158, 180, 186, 271, 373, 380, 399, 409, 422, 502, 567, 568, 842, 843, 994, 998, 999, 1017, 1049, 1051], "native_result": 148, "natl": [695, 699, 995], "natur": [42, 63, 66, 144, 151, 182, 191, 192, 196, 203, 219, 220, 236, 237, 243, 256, 262, 268, 286, 297, 359, 385, 387, 399, 420, 422, 423, 426, 450, 456, 463, 557, 596, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 698, 710, 747, 761, 763, 852, 853, 854, 856, 858, 860, 861, 862, 889, 945, 994, 995, 997, 998, 1001, 1003, 1008, 1012, 1017, 1039, 1047], "naul": [1044, 1045], "nav": 50, "navarret": [1047, 1048, 1049], "navarro": 1054, "navi": [68, 103, 111, 128, 132, 133, 158, 198, 222, 230, 242, 263, 264, 265, 268, 284, 286, 303, 310, 339, 366], "navig": [393, 1041], "navin": 906, "navistar": 50, "navkal": 1047, "navractil": 998, "navratil2007": 998, "nawazish": [1054, 1055], "naziya": 1057, "na\u00efv": 1032, "nb": [46, 131, 157, 368, 847, 1000], "nbclaim": 237, "nber": 48, "nbr": [858, 1001], "nbrs_": [694, 695], "nbsp": [50, 62, 104, 105, 143, 145, 146, 151, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 208, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367], "nbviewer": [50, 62, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367], "nbyte": [87, 250], "nca": [240, 306, 307, 308, 859, 1001], "nca_pip": 1001, "ncall": 391, "ncanip": 859, "nclass": 272, "ncluster": 78, "ncol": [42, 43, 51, 65, 67, 69, 87, 91, 100, 124, 129, 134, 149, 192, 219, 220, 221, 227, 237, 239, 240, 249, 256, 271, 273, 279, 280, 288, 291, 298, 301, 314, 319, 320, 322, 323, 332, 354, 355, 360], "ncorrect": 277, "ncsu": [173, 382], "ncv": [457, 459], "nd": [1052, 1056], "ndarrai": [87, 92, 120, 219, 260, 275, 276, 277, 385, 386, 387, 391, 392, 411, 423, 426, 427, 430, 431, 433, 436, 437, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 503, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 721, 724, 727, 728, 729, 730, 733, 734, 744, 751, 752, 754, 756, 757, 759, 760, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 795, 796, 797, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 927, 928, 929, 930, 935, 936, 944, 946, 947, 948, 949, 953, 960, 962, 963, 967, 970, 971, 973, 974, 975, 976, 979, 984, 985, 998, 1013, 1018, 1042, 1046, 1049, 1050, 1053, 1054, 1055, 1056], "ndata": 283, "ndataset": [234, 320], "ndbscan": 99, "ndcg": [732, 762, 998, 1046], "ndcg_score": [1, 732, 998, 1046, 1049, 1054, 1055], "ndenumer": 231, "ndepend": 192, "ndim": [652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 930, 931], "ndimag": [52, 80, 81, 88, 316, 1031], "ndingwal": 1046, "ndirangu": [1049, 1053], "ne": [998, 1001], "neal": [994, 1052], "near_uniqu": 325, "nearbi": [415, 1001], "nearer": [1, 854, 862, 1001], "nearest": [1, 32, 50, 52, 66, 67, 73, 74, 84, 85, 88, 92, 95, 100, 105, 110, 114, 119, 124, 127, 155, 165, 179, 187, 210, 231, 235, 241, 244, 255, 256, 270, 280, 302, 304, 307, 308, 315, 316, 323, 348, 353, 357, 377, 382, 394, 397, 399, 415, 421, 422, 426, 429, 439, 450, 452, 454, 456, 458, 463, 467, 468, 502, 508, 510, 613, 614, 633, 634, 636, 637, 641, 694, 695, 697, 698, 702, 798, 799, 806, 836, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 875, 890, 972, 995, 1004, 1013, 1018, 1019, 1020, 1026, 1034, 1039, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1051], "nearest_neighbor": [78, 458, 697], "nearest_neighbor_algorithm": [852, 860, 861], "nearest_neighbors_algorithm": [853, 858], "nearestcentroid": [1, 309, 359, 999, 1001, 1039, 1043, 1046, 1051, 1054], "nearestneighbor": [1, 298, 331, 403, 415, 426, 450, 452, 454, 467, 694, 695, 699, 852, 853, 854, 856, 860, 861, 862, 1001, 1039, 1043, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "nearli": [36, 61, 280, 380, 399, 770, 998, 1001, 1010, 1032], "neat": [1017, 1039], "necess": [995, 1001], "necessari": [45, 52, 142, 203, 219, 224, 262, 271, 277, 278, 284, 300, 352, 365, 372, 380, 383, 384, 385, 386, 387, 388, 389, 393, 397, 415, 417, 422, 458, 468, 494, 495, 497, 498, 499, 500, 501, 503, 540, 650, 651, 652, 658, 662, 663, 666, 667, 668, 669, 670, 671, 677, 679, 681, 682, 697, 701, 801, 873, 882, 893, 897, 903, 987, 990, 994, 997, 1000, 1008, 1014, 1032, 1039, 1047], "necessarili": [42, 66, 105, 127, 191, 219, 227, 237, 251, 252, 263, 271, 320, 359, 360, 379, 389, 409, 411, 413, 415, 422, 633, 858, 860, 861, 862, 992, 995, 997, 998], "need": [0, 29, 42, 47, 50, 67, 80, 82, 87, 89, 91, 114, 126, 136, 144, 148, 150, 151, 152, 154, 159, 173, 175, 180, 186, 187, 191, 207, 221, 236, 237, 240, 246, 249, 251, 253, 256, 257, 262, 263, 267, 268, 271, 275, 277, 279, 280, 282, 295, 297, 298, 300, 323, 327, 334, 340, 348, 359, 360, 368, 372, 373, 374, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 431, 443, 447, 451, 455, 470, 471, 473, 509, 547, 557, 578, 588, 589, 594, 595, 596, 597, 633, 641, 644, 645, 646, 648, 655, 672, 674, 677, 682, 685, 698, 726, 727, 728, 729, 730, 787, 791, 803, 804, 806, 809, 810, 820, 821, 822, 831, 839, 842, 850, 851, 867, 870, 873, 877, 882, 883, 887, 905, 912, 915, 955, 987, 988, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1022, 1029, 1030, 1031, 1032, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "needl": [173, 382], "needs_proba": [748, 1048, 1056], "needs_threshold": [748, 1056], "neeraj": 1046, "neg": [1, 41, 42, 44, 60, 94, 108, 110, 117, 144, 150, 151, 156, 188, 190, 191, 197, 209, 215, 219, 237, 266, 267, 271, 274, 277, 280, 284, 286, 287, 291, 298, 318, 322, 331, 335, 359, 391, 399, 400, 415, 419, 422, 423, 424, 426, 427, 438, 446, 450, 458, 471, 475, 488, 489, 490, 494, 537, 539, 541, 542, 543, 544, 546, 548, 550, 553, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 594, 597, 598, 601, 602, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 683, 684, 685, 686, 693, 704, 705, 710, 711, 718, 719, 721, 722, 724, 725, 727, 728, 729, 730, 733, 735, 736, 737, 741, 744, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 788, 789, 790, 791, 793, 796, 797, 799, 803, 804, 812, 829, 831, 836, 843, 844, 853, 856, 861, 868, 877, 886, 888, 889, 894, 898, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 945, 947, 996, 998, 999, 1001, 1002, 1003, 1004, 1012, 1013, 1019, 1032, 1033, 1034, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "neg_": [812, 829, 1045], "neg_brier_scor": [998, 1049], "neg_label": [271, 291, 877, 894], "neg_log_alphas_enet": 204, "neg_log_alphas_lasso": 204, "neg_log_alphas_positive_enet": 204, "neg_log_alphas_positive_lasso": 204, "neg_log_loss": [63, 271, 998], "neg_lr": 280, "neg_lr_bas": 280, "neg_lr_base_std": 280, "neg_mean_absolute_error": [42, 159, 221, 998], "neg_mean_absolute_percentage_error": [51, 148, 998, 1006], "neg_mean_gamma_devi": 998, "neg_mean_pinball_loss_05p_scor": 151, "neg_mean_pinball_loss_95p_scor": 151, "neg_mean_poisson_devi": 998, "neg_mean_squared_error": [186, 187, 221, 252, 292, 334, 833, 998, 1006, 1045], "neg_mean_squared_log_error": 998, "neg_median_absolute_error": 998, "neg_root_mean_squared_error": [42, 154, 324, 998], "neg_root_mean_squared_log_error": 998, "neg_root_mean_squared_log_error_scor": 1056, "negat": [399, 812, 829, 998], "negate_scor": [252, 812, 829], "negative_class": 718, "negative_likelihood_ratio": [280, 718], "negative_linestyl": 246, "negative_loglik": 110, "negative_mahal_dist": 475, "negative_outlier_factor": 856, "negative_outlier_factor_": [256, 305, 856, 1004], "neglig": [191, 1001, 1042, 1056], "neigh": [787, 852, 853, 854, 856, 858, 860, 861, 862], "neigh_dist": [852, 853, 854, 856, 858, 860, 861, 862], "neigh_ind": [852, 853, 854, 856, 858, 860, 861, 862], "neighbor": [1, 50, 66, 73, 78, 81, 94, 100, 105, 154, 155, 157, 160, 165, 186, 187, 240, 241, 243, 244, 246, 255, 256, 270, 280, 302, 303, 304, 305, 307, 308, 309, 311, 315, 329, 331, 332, 359, 377, 382, 394, 397, 399, 403, 415, 421, 422, 423, 426, 429, 439, 447, 450, 451, 454, 456, 458, 463, 464, 467, 469, 502, 508, 510, 569, 576, 608, 613, 614, 633, 634, 637, 694, 695, 696, 697, 698, 699, 701, 702, 787, 806, 836, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 871, 890, 906, 914, 972, 999, 1004, 1018, 1019, 1020, 1026, 1031, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046], "neighbor_feat_idx": 633, "neighborhood": [1, 89, 114, 132, 165, 188, 239, 299, 300, 301, 309, 310, 382, 399, 415, 420, 426, 450, 452, 456, 463, 508, 510, 521, 547, 555, 634, 637, 702, 836, 852, 853, 856, 858, 859, 860, 861, 862, 864, 870, 871, 890, 995, 1004, 1019, 1020, 1034, 1048], "neighborhoodcomponentanalysi": 307, "neighborhoodcomponentsanalysi": [1, 240, 306, 307, 308, 1001, 1048, 1053, 1057], "neighbors_algorithm": [694, 695], "neighborsbas": [1051, 1054], "neighborsclassifi": [858, 860, 861, 862, 1039], "neighborsregressor": 1039, "neighbour": [452, 468, 698, 1003], "neighbourhood": [859, 1001], "neighbourhood_components_analysi": 859, "neil": 1051, "neill": 1051, "neither": [187, 191, 327, 359, 368, 397, 413, 443, 600, 634, 934, 1001, 1014], "nelder": 994, "nell": [0, 73, 242, 249, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051], "nelson": [0, 1045, 1046, 1051, 1057], "nemour": 50, "neo": 1047, "nep": 1049, "neptun": 1017, "neq": [415, 998, 1000, 1008], "ness": [187, 237], "nest": [129, 138, 188, 208, 253, 269, 271, 272, 295, 334, 373, 391, 399, 403, 415, 419, 425, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 468, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 510, 525, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 811, 820, 828, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 998, 1001, 1019, 1039, 1040, 1043, 1045, 1046, 1047, 1053], "nested_lin": 282, "nested_scor": 282, "nesterov": [314, 867, 868, 1002, 1055, 1056], "nesterovs_momentum": [314, 867, 868], "nestor": 1054, "net": [1, 24, 66, 188, 197, 203, 206, 210, 230, 250, 290, 391, 419, 477, 478, 484, 507, 530, 563, 564, 565, 566, 570, 571, 572, 652, 653, 658, 663, 664, 665, 666, 667, 668, 669, 674, 682, 684, 687, 690, 866, 918, 919, 920, 921, 987, 998, 1003, 1012, 1019, 1020, 1022, 1034, 1039, 1044, 1048, 1049, 1051], "netbsd": 1039, "netnew": 1032, "neto": [596, 736, 1057], "nettei": 1052, "network": [33, 44, 256, 315, 372, 373, 374, 379, 380, 399, 400, 409, 415, 420, 422, 427, 502, 539, 541, 573, 574, 702, 747, 867, 868, 994, 996, 998, 1012, 1014, 1017, 1020, 1028, 1033, 1034, 1039, 1053, 1057], "networkx": [54, 394], "neural": [33, 43, 44, 66, 277, 315, 399, 409, 419, 420, 422, 427, 539, 541, 544, 546, 553, 573, 574, 645, 651, 702, 747, 803, 859, 866, 867, 868, 876, 990, 994, 995, 996, 998, 1001, 1004, 1008, 1012, 1014, 1017, 1020, 1022, 1028, 1033, 1034, 1039, 1051], "neural_network": [1, 66, 188, 192, 257, 312, 313, 314, 315, 316, 374, 397, 866, 867, 868, 999, 1002, 1019, 1041, 1056], "neuraxl": 1017, "neuro": 1017, "neurodebian": 0, "neuroimag": [1016, 1022], "neuron": [867, 868, 996, 1002], "neutral": 722, "nevalu": 159, "never": [144, 254, 335, 368, 385, 394, 397, 409, 414, 415, 416, 418, 419, 456, 463, 529, 561, 562, 563, 570, 870, 871, 990, 1008, 1049, 1052], "nevertheless": [42, 194, 422], "new": [1, 42, 45, 46, 48, 84, 90, 92, 94, 103, 104, 120, 131, 138, 140, 142, 143, 144, 149, 151, 154, 158, 159, 170, 173, 175, 181, 187, 193, 194, 219, 225, 233, 246, 253, 271, 276, 279, 284, 297, 302, 304, 324, 328, 331, 334, 335, 338, 341, 347, 352, 368, 373, 374, 379, 380, 382, 383, 384, 387, 388, 389, 391, 393, 394, 398, 399, 400, 403, 409, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 440, 443, 444, 446, 448, 449, 451, 453, 454, 455, 458, 468, 469, 478, 488, 489, 490, 510, 514, 515, 540, 547, 550, 561, 562, 563, 564, 569, 570, 571, 572, 587, 608, 636, 637, 641, 646, 647, 648, 651, 652, 658, 694, 695, 696, 703, 704, 706, 707, 708, 794, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 840, 856, 879, 880, 885, 886, 887, 889, 890, 891, 898, 899, 907, 925, 928, 933, 968, 973, 987, 988, 990, 994, 998, 999, 1001, 1002, 1003, 1004, 1008, 1010, 1011, 1012, 1013, 1018, 1022, 1023, 1024, 1027, 1030, 1032, 1037, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "new_data": [302, 387], "new_valu": [573, 574, 575, 576], "newaxi": [50, 52, 56, 60, 76, 114, 133, 139, 176, 200, 209, 215, 220, 221, 222, 224, 225, 236, 249, 251, 292, 303, 310, 365, 366, 412, 542, 994], "newei": 1047, "newer": [175, 384, 403, 420], "newgroups20": 234, "newli": [383, 398, 422, 469, 1005, 1045, 1046, 1054], "newsgroup": [1, 45, 53, 56, 250, 278, 341, 360, 361, 378, 412, 423, 494, 495, 1024, 1034], "newsgroups_test": 380, "newsgroups_train": [380, 494], "newsgroups_vector": 495, "newshap": 181, "newsl": [891, 1008], "newslett": 379, "newsweed": 1032, "newswir": 380, "newton": [219, 237, 316, 616, 654, 664, 665, 675, 686, 867, 868, 994, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "newton_cg": 1049, "next": [45, 61, 94, 112, 147, 148, 152, 162, 182, 190, 194, 212, 216, 219, 247, 253, 255, 259, 260, 264, 272, 283, 297, 323, 324, 325, 329, 338, 359, 363, 367, 368, 383, 385, 387, 389, 409, 412, 415, 416, 419, 422, 514, 515, 616, 640, 698, 704, 706, 708, 787, 803, 804, 836, 964, 987, 991, 997, 998, 1008, 1022, 1036, 1039, 1052, 1053], "nezar": 1049, "nff": 705, "nfit": 338, "nfkd": [594, 595, 597, 1049], "nfor": 254, "nfrom": 180, "nft": 705, "ng": [415, 420, 697, 856, 1002, 1004, 1050], "ngiam": 1002, "ngo": 1051, "ngram_rang": [278, 341, 423, 594, 595, 597], "ngram_vector": 423, "ngroup": 272, "ngshya": 1050, "nguyen": [1049, 1050, 1053, 1054], "nguy\u1ec5n": 1054, "ni": [152, 1045, 1050], "nic": 1052, "nice": [42, 101, 220, 253, 318, 372, 420, 1032], "nicer": 637, "nichol": 1043, "nichola": [1047, 1048, 1050], "nicholson": [1045, 1046, 1047], "nick": [173, 382, 1039, 1045, 1046, 1047, 1048], "nicki": 1053, "nickledav": 1045, "nicknam": 380, "nico": [1045, 1052], "nicol": 1046, "nicola": [0, 173, 322, 404, 664, 994, 1011, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "nicolashug": 1048, "nicolasservel": 1050, "nicolau": 1047, "nicula": [0, 124, 254, 316, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "niculescu": [61, 63, 413, 443, 445], "nidhin": 1049, "niederb\u00fchl": 1047, "niederhut": [1047, 1049], "nielsen": [749, 1047], "nielsenmarkus11": [1046, 1047], "nigam": [845, 1000], "nigel": 1052, "night": 51, "nightli": [0, 373, 388, 389], "nightwalkx": 1055, "nihal": 1054, "nihar": 1047, "niket": 1053, "nikhil": 1053, "nikita": [1046, 1047, 1049, 1052, 1053, 1054], "nikla": [1049, 1050], "nikolai": [1042, 1043, 1044, 1045, 1047, 1048, 1053, 1055], "nil": 1051, "nilearn": 1017, "nilesh": 1047, "nilichen": 152, "nilotp": [641, 643], "nima": 1054, "nima10khodaveisi": 1054, "nimbus1after2a1sun7show": 199, "nine": 1023, "ninertia": 98, "ningchi": 1045, "ninh": 196, "ninja": [383, 1022], "nip": [131, 382, 521, 547, 572, 647, 998], "nipal": [418, 489, 490], "nipy_spectr": [50, 73, 80, 81, 85, 86, 94, 95, 130], "nirvan": [1047, 1051], "nishan": 1049, "nishihara": 1051, "nishu": 1055, "nist": [382, 998], "nistir": 382, "nit": 385, "nitinramvelraj": 1054, "nitish": 1046, "nitya": 1049, "niuk": 1055, "niyogi": 995, "nizam": 1047, "nizhibitski": 1040, "nk": 702, "nkish": 1050, "nkmean": 78, "nl": 391, "nl1_ratio": 210, "nlasso": 203, "nlathia": 1045, "nlearn": 314, "nlog": 181, "nlogn": 698, "nlp": [380, 420, 423, 845, 849, 996, 1022], "nls_max_it": 1044, "nltk": [423, 1016, 1017], "nm": 372, "nmcd": 112, "nmd": 242, "nmean": 128, "nmf": [1, 10, 53, 105, 391, 423, 541, 544, 550, 553, 1033, 1034, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "nmf_estim": 124, "nmi": [71, 415, 723, 742, 743, 763], "nmixtur": 78, "nmle": 112, "nmse": [43, 292], "nmslib": 298, "nmslib_": 298, "nmslibtransform": 298, "nn": [255, 423, 701, 1030], "nn_candid": 289, "nn_compon": [250, 251], "nn_sampl": [250, 289], "nndsvd": [420, 544, 546, 553, 1048, 1051], "nndsvda": [53, 420, 544, 546, 553, 1048, 1051], "nndsvdar": [420, 544, 546, 553, 1048], "nneq": 705, "nnl": [214, 663], "nnlnr": [1054, 1055], "nnmf": [423, 1033, 1034, 1039], "nntp": [359, 380, 1032], "nnz": [205, 360, 380, 705], "no_chang": 907, "no_interact": [567, 568, 1054], "no_mathjax": 385, "no_structur": [78, 96], "no_valid": 387, "no_weight": 232, "no_weights_handl": 232, "noa": [1050, 1056], "noah": 994, "noc": 50, "noced": 664, "nodar": 1052, "node": [1, 50, 75, 148, 152, 203, 327, 333, 334, 363, 367, 393, 394, 415, 417, 420, 422, 447, 448, 451, 469, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 656, 660, 662, 688, 689, 698, 850, 851, 918, 919, 920, 921, 922, 924, 952, 1001, 1003, 1004, 1005, 1014, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1056], "node_count": [327, 363, 367, 918, 919, 920, 921], "node_depth": 367, "node_id": [367, 922, 924], "node_ind": 367, "node_index": 367, "node_position_model": 50, "noel": [0, 138, 139, 140, 405, 1039, 1040, 1041, 1042, 1043, 1051], "noelano": 1051, "nof": 155, "nogil": [385, 386], "noinfo": 256, "noir": 324, "nois": [43, 48, 52, 57, 58, 63, 66, 68, 74, 78, 83, 86, 88, 89, 95, 96, 101, 108, 117, 124, 125, 127, 129, 131, 139, 141, 151, 156, 157, 174, 175, 176, 180, 184, 188, 198, 200, 201, 203, 208, 209, 214, 217, 218, 221, 222, 223, 224, 236, 242, 244, 246, 248, 249, 252, 277, 285, 290, 292, 310, 313, 314, 320, 325, 328, 334, 354, 365, 366, 368, 381, 387, 390, 413, 415, 420, 422, 424, 425, 426, 450, 452, 458, 517, 519, 520, 521, 522, 523, 524, 528, 530, 531, 536, 538, 540, 547, 612, 613, 614, 615, 617, 619, 620, 621, 622, 623, 627, 628, 630, 631, 650, 651, 655, 656, 657, 659, 660, 661, 662, 669, 670, 671, 677, 685, 691, 692, 698, 887, 899, 905, 991, 993, 994, 995, 998, 1001, 1011, 1019, 1030, 1031, 1040, 1045, 1050, 1052, 1053], "noise_coef": 88, "noise_kernel": 180, "noise_level": [175, 180, 181, 618, 631], "noise_level_bound": [180, 181, 631], "noise_level_grid": 181, "noise_std": 182, "noise_vari": [207, 538, 662, 994, 1053], "noise_variance_": [124, 207, 538, 540, 547, 662, 1046, 1053], "noise_variance_init": 538, "noiseless": [127, 996], "noisi": [43, 68, 83, 89, 96, 125, 138, 169, 175, 181, 203, 218, 221, 242, 249, 268, 278, 284, 286, 287, 323, 365, 366, 368, 415, 423, 425, 426, 450, 452, 456, 527, 530, 947, 993, 995, 1001, 1013, 1017], "noisier": 995, "noisili": 192, "noisy_circl": [78, 96], "noisy_moon": [78, 96], "noiz": 116, "nolan": 1056, "noll": [219, 237], "nomenclatur": [994, 1045], "nomin": [192, 379, 399, 400, 422, 423, 587, 588, 722, 1008, 1018], "non": [0, 1, 24, 41, 43, 44, 47, 48, 51, 52, 60, 61, 63, 68, 69, 71, 83, 91, 96, 104, 108, 112, 114, 125, 126, 127, 129, 140, 148, 156, 157, 159, 169, 170, 172, 179, 181, 187, 188, 190, 191, 192, 193, 194, 197, 198, 203, 205, 209, 212, 213, 215, 218, 220, 221, 225, 233, 234, 235, 237, 242, 243, 247, 248, 249, 250, 252, 256, 262, 264, 268, 269, 270, 271, 272, 277, 286, 295, 298, 302, 304, 316, 318, 320, 322, 323, 328, 329, 330, 331, 333, 334, 341, 343, 345, 350, 351, 352, 355, 356, 359, 360, 361, 367, 368, 372, 373, 377, 380, 381, 385, 386, 387, 390, 391, 393, 394, 397, 399, 400, 413, 415, 416, 419, 421, 422, 423, 424, 425, 427, 443, 447, 451, 452, 456, 458, 462, 468, 469, 470, 471, 473, 474, 494, 502, 503, 509, 510, 514, 532, 538, 541, 542, 544, 546, 550, 553, 555, 557, 558, 559, 563, 564, 565, 566, 567, 568, 570, 571, 572, 578, 594, 595, 597, 598, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 637, 641, 644, 649, 656, 658, 663, 664, 665, 666, 670, 671, 672, 673, 674, 675, 678, 682, 683, 684, 691, 692, 693, 694, 695, 696, 697, 698, 700, 704, 705, 708, 712, 713, 718, 721, 723, 725, 726, 732, 733, 734, 741, 743, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 765, 784, 788, 791, 794, 795, 796, 797, 800, 803, 804, 806, 807, 811, 813, 814, 815, 816, 818, 824, 832, 836, 839, 858, 860, 861, 862, 865, 870, 871, 873, 874, 875, 878, 882, 883, 884, 885, 886, 887, 889, 890, 897, 898, 899, 900, 901, 903, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 929, 930, 931, 945, 947, 951, 953, 961, 987, 988, 989, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1019, 1030, 1031, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "non_determinist": [387, 1053], "non_neg": [588, 1046], "non_negative_factor": [1, 1048, 1050, 1051, 1052, 1056], "non_nest": 282, "non_nested_scor": 282, "non_nested_scores_lin": 282, "non_noisy_label": 333, "non_outliers_mask": 318, "non_zero": [45, 50], "nonblasdotwarn": 1051, "none": [42, 46, 47, 48, 51, 54, 62, 65, 68, 73, 75, 76, 78, 86, 88, 89, 90, 96, 126, 129, 133, 142, 147, 148, 150, 153, 154, 166, 173, 176, 182, 183, 194, 198, 219, 220, 227, 230, 237, 239, 252, 253, 254, 256, 270, 277, 278, 289, 303, 305, 309, 322, 325, 329, 330, 338, 341, 346, 348, 349, 352, 353, 354, 359, 360, 380, 382, 385, 387, 392, 394, 399, 406, 409, 415, 419, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 713, 714, 715, 717, 718, 719, 720, 722, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 740, 741, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 930, 931, 933, 934, 935, 936, 939, 941, 946, 947, 950, 951, 952, 953, 957, 958, 961, 964, 967, 969, 972, 973, 979, 982, 983, 985, 987, 994, 998, 1008, 1011, 1014, 1023, 1027, 1032, 1034, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "nonecheck": 386, "nonetheless": [399, 998], "nonexist": 638, "nonflavanoid": 382, "nonlinear": [292, 330, 650, 694, 695, 699, 702, 876, 994, 995, 1003, 1008], "nonmetr": [696, 700, 995], "nonneg": [415, 420, 459, 544, 546, 553, 887], "nonner": 1050, "nono": 1025, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 1025, "nonoisomapisomapspectralembeddingspectr": 1025, "nonojustlookingjust": 1025, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 1025, "nonolinearsvclinear": 1025, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 1025, "nonopredict": 1025, "nonopredictingstructurepredict": 1025, "nonosvcsvcensembleclassifiersensembl": 1025, "nonosvr": 1025, "nonotoughlucktough": 1025, "nonoverlap": 382, "nonparametr": [424, 425, 613, 614], "nonzero": [54, 56, 133, 218, 250, 281, 361, 412, 426, 450, 529, 530, 537, 543, 548, 554, 594, 597, 691, 692, 705, 852, 853, 856, 858, 860, 861, 998], "nonzero_coef": 994, "noptic": 99, "noptimum": 181, "noqa": [79, 101, 120, 130, 151, 173, 186, 187, 192, 216, 239, 241, 288, 289, 329, 359, 389, 585, 586, 633, 809, 810, 987, 1048], "nor": [151, 280, 359, 368, 372, 390, 397, 413, 423, 443, 452, 600, 934, 1002, 1014, 1050], "norbert": [0, 375, 1041, 1051, 1052, 1053], "nordbi": 1056, "nore\u00f1a": 1052, "norm": [1, 50, 52, 53, 54, 65, 69, 74, 88, 127, 178, 181, 198, 203, 205, 210, 242, 262, 263, 264, 266, 268, 274, 278, 303, 318, 348, 360, 391, 394, 399, 415, 423, 424, 448, 449, 453, 465, 466, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 495, 537, 540, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 595, 596, 597, 603, 649, 652, 653, 658, 659, 663, 664, 665, 666, 667, 668, 669, 670, 678, 680, 682, 684, 687, 690, 691, 692, 696, 698, 699, 700, 776, 847, 882, 897, 910, 912, 915, 980, 981, 991, 994, 996, 998, 1008, 1012, 1042, 1044, 1046, 1050], "norm1": 470, "norm2": 470, "norm_diag": 533, "norm_laplacian": 701, "norm_ord": [603, 1046], "norm_y_weight": 1051, "normal": [1, 24, 35, 43, 48, 50, 54, 56, 57, 62, 64, 69, 71, 74, 78, 80, 91, 95, 96, 100, 106, 108, 110, 111, 112, 116, 117, 125, 138, 139, 141, 144, 150, 151, 154, 155, 156, 168, 178, 181, 182, 187, 188, 190, 191, 197, 198, 199, 200, 201, 203, 209, 212, 214, 217, 221, 222, 223, 225, 233, 237, 242, 256, 262, 267, 268, 270, 271, 274, 277, 283, 303, 304, 307, 317, 319, 323, 328, 331, 334, 335, 340, 348, 360, 361, 368, 377, 380, 381, 382, 385, 390, 394, 398, 399, 411, 412, 413, 415, 416, 418, 421, 422, 423, 427, 446, 455, 457, 458, 459, 468, 470, 471, 481, 488, 489, 490, 495, 502, 518, 521, 525, 532, 533, 539, 542, 547, 548, 550, 554, 555, 558, 559, 560, 563, 564, 565, 566, 568, 569, 570, 571, 572, 585, 586, 588, 594, 595, 596, 597, 617, 631, 633, 645, 664, 665, 675, 678, 682, 686, 693, 697, 701, 703, 709, 710, 712, 724, 730, 732, 740, 742, 747, 751, 755, 756, 758, 761, 762, 763, 767, 776, 800, 801, 802, 809, 810, 836, 838, 847, 849, 855, 856, 859, 870, 871, 874, 875, 878, 880, 883, 884, 885, 886, 887, 888, 890, 895, 896, 898, 899, 900, 901, 905, 906, 918, 919, 920, 921, 946, 947, 951, 974, 975, 980, 981, 987, 990, 992, 994, 995, 996, 997, 1000, 1004, 1009, 1011, 1013, 1014, 1019, 1028, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "normalesup": [50, 67, 80, 100, 251], "normalis": [191, 617, 794, 1032], "normalization_": [645, 990], "normalize_compon": [1047, 1049], "normalize_i": [180, 425, 617, 1053], "normalized_discounted_cumulative_gain": 762, "normalized_mutual_info_scor": [1, 71, 415, 742, 761, 801, 998, 1047, 1053], "normalized_stress": [239, 696, 700, 995, 1054], "normalized_weight": 200, "norms_squar": 692, "north": [382, 415], "northern": 324, "northrop": 50, "northwestern": [322, 664], "norvan": 1049, "nose": [382, 1042, 1046], "nosetest": 1041, "not_memb": 191, "notabl": [253, 318, 379, 399, 414, 502, 734, 883, 995, 997, 1001, 1043, 1046, 1053], "notarstefano": [1047, 1048], "notat": [155, 399, 416, 420, 423, 596, 718, 994, 998, 1023, 1048, 1055], "notch": 1022, "note": [0, 29, 42, 43, 45, 46, 49, 50, 52, 56, 57, 62, 63, 67, 71, 87, 100, 104, 105, 112, 114, 116, 117, 122, 127, 141, 142, 144, 147, 151, 152, 156, 173, 175, 182, 186, 190, 191, 192, 193, 194, 196, 207, 208, 212, 219, 220, 221, 223, 227, 233, 235, 237, 239, 240, 241, 243, 246, 247, 249, 251, 252, 253, 254, 256, 263, 271, 272, 273, 277, 280, 283, 284, 285, 291, 297, 298, 300, 304, 305, 314, 318, 319, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 342, 348, 352, 359, 367, 372, 373, 379, 382, 383, 385, 386, 387, 389, 391, 392, 397, 398, 399, 403, 406, 409, 410, 413, 415, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 438, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 496, 502, 504, 510, 515, 521, 525, 533, 536, 539, 540, 544, 545, 546, 547, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 603, 605, 606, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 638, 639, 641, 642, 644, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 705, 706, 713, 714, 719, 721, 726, 727, 728, 729, 730, 734, 735, 736, 738, 740, 744, 747, 752, 760, 761, 764, 769, 770, 774, 776, 780, 784, 788, 789, 790, 791, 793, 794, 795, 798, 799, 800, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 926, 936, 937, 946, 947, 958, 961, 973, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1023, 1030, 1031, 1032, 1034, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "notebook": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 386, 387, 391, 416, 474, 908, 1014, 1016, 1017, 1018, 1050, 1053], "notes_neighbor": 1039, "notfittederror": [1, 136, 399, 859, 982, 1043, 1045, 1048, 1049, 1055, 1056], "noth": [56, 103, 335, 359, 360, 390, 548, 720, 873, 882, 931, 1008], "nothman": [0, 105, 400, 404, 423, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "notic": [45, 51, 61, 62, 69, 87, 91, 112, 141, 143, 144, 151, 154, 172, 198, 203, 246, 259, 274, 275, 277, 278, 280, 286, 287, 298, 323, 352, 359, 360, 361, 368, 387, 390, 400, 414, 419, 422, 502, 547, 569, 987, 997, 998, 1004, 1032, 1036, 1052], "notifi": [1, 578, 579, 580, 1037, 1049], "notimplementederror": [471, 559, 560, 599, 600, 608, 897, 907, 1046, 1056], "notin": 415, "notion": [286, 352, 360, 374, 397, 415, 420, 422, 994, 998], "notmatthancock": [1047, 1049], "noto": 1052, "noun": 399, "nouri": [372, 1040, 1042], "novak": 1042, "novarti": 50, "novaya": [1049, 1052], "novel": [233, 304, 347, 368, 413, 987], "novelti": [188, 233, 246, 256, 299, 305, 347, 856, 1019, 1020, 1033, 1034, 1039, 1047], "novemb": [173, 219, 237, 382, 1044, 1045, 1047], "novic": 1041, "now": [42, 43, 45, 51, 54, 57, 87, 91, 104, 117, 129, 138, 139, 143, 145, 147, 148, 151, 152, 159, 162, 173, 175, 180, 181, 182, 187, 190, 191, 192, 193, 196, 198, 200, 205, 207, 208, 220, 221, 223, 243, 251, 253, 271, 273, 277, 280, 288, 289, 291, 295, 301, 323, 328, 329, 331, 332, 333, 334, 335, 339, 348, 359, 360, 361, 368, 372, 374, 380, 385, 386, 387, 391, 397, 398, 399, 403, 412, 415, 419, 420, 422, 423, 427, 499, 514, 515, 518, 542, 555, 585, 586, 588, 633, 636, 655, 659, 664, 669, 690, 732, 762, 803, 804, 809, 810, 842, 857, 869, 870, 973, 987, 988, 994, 998, 1004, 1007, 1008, 1013, 1014, 1016, 1018, 1023, 1030, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "nowadai": 385, "nozawa": [1054, 1055], "np": [1, 42, 43, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 122, 125, 126, 127, 128, 130, 131, 133, 134, 139, 140, 141, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 166, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 297, 298, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 364, 365, 366, 367, 368, 372, 379, 380, 385, 387, 390, 391, 394, 397, 399, 406, 412, 415, 416, 419, 420, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 491, 502, 503, 514, 515, 526, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 563, 564, 565, 566, 567, 569, 570, 571, 572, 575, 576, 587, 588, 591, 592, 594, 595, 599, 600, 603, 607, 610, 612, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 678, 680, 681, 682, 683, 684, 687, 688, 689, 690, 693, 697, 698, 700, 701, 705, 708, 709, 712, 713, 715, 718, 719, 720, 721, 732, 733, 735, 736, 738, 740, 741, 744, 745, 760, 762, 769, 775, 779, 784, 787, 788, 789, 790, 793, 794, 795, 800, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 832, 833, 834, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 860, 861, 862, 866, 867, 874, 875, 877, 883, 884, 885, 886, 887, 889, 890, 891, 898, 899, 902, 903, 905, 906, 907, 910, 912, 913, 915, 916, 918, 919, 920, 921, 926, 927, 928, 929, 930, 931, 933, 935, 936, 945, 946, 947, 952, 953, 960, 961, 963, 967, 969, 972, 973, 974, 975, 976, 977, 978, 979, 984, 987, 988, 993, 994, 996, 998, 999, 1001, 1002, 1004, 1008, 1009, 1010, 1012, 1013, 1014, 1023, 1027, 1028, 1030, 1031, 1032, 1040, 1042, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "npach": [1054, 1055], "npo": 242, "npolynomi": 42, "nprior": 262, "npropag": 78, "nqy18": 423, "nreceiv": 286, "nrow": [42, 43, 65, 67, 69, 91, 100, 106, 124, 154, 184, 192, 219, 221, 227, 237, 239, 240, 243, 256, 271, 279, 280, 298, 320, 322, 323, 332, 338, 354, 355, 1028], "nsampl": [387, 803, 804], "nsup": 52, "nswdemand": 154, "nswprice": 154, "nt": 54, "nt_uri": 54, "ntest": 307, "ntf": 705, "nth": [284, 713, 998], "nthe": [192, 275, 367], "ntime": [49, 288], "nto": [225, 286], "ntol": 173, "ntrain": 84, "ntree": 42, "ntrue": [44, 337, 338, 1028], "ntt": 705, "ntu": [196, 379, 493, 514, 515, 664], "nu": [1, 45, 47, 49, 184, 233, 246, 347, 372, 422, 425, 625, 683, 912, 913, 914, 1004, 1012, 1013, 1050, 1054], "nuanc": 399, "nuc": 295, "nuclear": [173, 382], "nuclei": [173, 382], "nudge_dataset": 316, "nuff": 1046, "nugmanov": [1047, 1048], "nuisanc": 425, "nukariya": [1051, 1052], "null": [78, 104, 191, 192, 193, 271, 277, 283, 415, 419, 502, 654, 675, 686, 710, 737, 763, 801, 835, 994, 995, 998, 1013, 1049], "null_count": 51, "nullabl": [633, 634, 635, 636, 1050, 1054], "nullformatt": [239, 241, 244, 298], "nullloc": 303, "num": [42, 50, 104, 173, 175, 180, 181, 182, 192, 193, 221, 284, 285, 331, 333, 334, 422, 502, 638], "num_col": 260, "num_cor": 391, "num_depend": 271, "num_featur": [996, 1054], "num_linear_processor": 159, "num_missing_cel": 154, "num_pip": 260, "num_preprocess": 470, "num_proc": [248, 328], "num_sampl": [806, 820, 1054], "num_selector": 159, "num_sent": 103, "num_thread": 298, "num_tree_processor": 159, "num_trial": 282, "numba": [298, 1018], "number": [1, 42, 43, 45, 46, 48, 50, 51, 52, 56, 57, 61, 62, 63, 67, 68, 70, 72, 73, 75, 77, 78, 80, 81, 82, 83, 84, 87, 88, 89, 91, 95, 96, 97, 101, 103, 104, 105, 106, 108, 114, 116, 117, 121, 122, 124, 126, 128, 129, 131, 138, 139, 141, 144, 146, 147, 149, 150, 151, 152, 155, 159, 161, 169, 170, 171, 173, 183, 184, 187, 188, 191, 192, 196, 203, 208, 218, 219, 220, 221, 226, 227, 233, 234, 235, 236, 237, 239, 246, 250, 254, 256, 257, 262, 263, 265, 267, 268, 270, 271, 272, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 295, 298, 300, 304, 305, 318, 320, 321, 324, 327, 328, 329, 330, 331, 332, 333, 335, 341, 348, 353, 355, 360, 361, 363, 367, 368, 373, 374, 377, 379, 380, 381, 382, 383, 385, 388, 389, 391, 392, 393, 394, 397, 398, 399, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 589, 590, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 709, 710, 711, 713, 718, 719, 720, 722, 724, 726, 730, 734, 735, 736, 737, 740, 741, 744, 746, 758, 761, 780, 784, 787, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 931, 934, 946, 947, 950, 951, 967, 969, 972, 973, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1023, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "number_norm": 56, "numbernormalizingvector": 56, "numer": [1, 42, 51, 56, 100, 104, 108, 146, 148, 159, 173, 180, 183, 192, 193, 208, 219, 237, 256, 258, 260, 308, 324, 330, 334, 361, 379, 380, 382, 388, 390, 391, 397, 398, 399, 415, 417, 422, 423, 424, 425, 427, 428, 446, 449, 453, 465, 477, 478, 481, 484, 495, 496, 497, 502, 506, 507, 508, 510, 511, 516, 537, 539, 541, 546, 547, 553, 567, 568, 573, 587, 596, 617, 623, 626, 633, 636, 638, 639, 652, 658, 660, 678, 693, 696, 700, 720, 784, 794, 800, 806, 809, 810, 812, 820, 829, 832, 833, 834, 837, 845, 846, 847, 848, 849, 867, 868, 873, 878, 883, 884, 891, 922, 923, 924, 930, 931, 946, 947, 987, 988, 994, 995, 999, 1006, 1008, 1009, 1014, 1021, 1022, 1023, 1032, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "numeric_featur": [104, 331], "numeric_onli": 192, "numeric_preprocessor": 258, "numeric_transform": [104, 331], "numerical_column": [191, 193, 473], "numerical_columns_subset": 148, "numerical_featur": [192, 324], "numerical_pip": 193, "numerical_transform": 104, "numfocu": 0, "numpi": [1, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 120, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 139, 140, 141, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 166, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 297, 298, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 364, 365, 366, 367, 368, 372, 378, 379, 380, 383, 385, 386, 387, 388, 389, 391, 393, 394, 397, 398, 399, 403, 406, 408, 409, 411, 412, 415, 416, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 491, 496, 499, 500, 502, 509, 512, 514, 515, 527, 533, 537, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 575, 576, 587, 588, 591, 592, 594, 595, 597, 607, 610, 624, 633, 634, 635, 636, 637, 638, 639, 649, 652, 653, 655, 658, 659, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 678, 682, 683, 684, 690, 693, 694, 697, 698, 699, 700, 701, 705, 708, 709, 712, 713, 715, 718, 720, 732, 733, 735, 736, 738, 740, 741, 744, 745, 760, 762, 779, 785, 787, 788, 789, 790, 793, 794, 795, 800, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 833, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 910, 912, 913, 915, 916, 918, 926, 927, 928, 929, 933, 935, 944, 945, 946, 947, 951, 952, 953, 960, 961, 967, 969, 972, 973, 974, 975, 976, 977, 978, 979, 984, 985, 987, 988, 993, 994, 996, 998, 999, 1001, 1004, 1008, 1010, 1013, 1014, 1016, 1018, 1023, 1026, 1027, 1028, 1030, 1031, 1032, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "numpydoc": [385, 399, 403, 408], "nune": 1040, "nuniformli": 155, "nuniqu": 324, "nurseit": 1056, "nusvc": [1, 372, 443, 913, 999, 1013, 1039, 1040, 1041, 1044, 1047, 1049, 1050, 1051, 1053], "nusvr": [1, 45, 372, 916, 1013, 1041, 1047, 1049, 1050, 1051, 1053, 1054], "nutshel": 996, "nv": 50, "nvidia": [0, 397], "nvirginica": 286, "nwanna": 1054, "nweight": 161, "nwith": [71, 91, 95, 172, 360], "nx": [49, 311, 380, 504], "nxorabl": 1049, "ny": [49, 51, 276, 311, 380, 382, 504, 988, 1010], "nyc": [1016, 1022], "nymark": 1054, "nystroem": [1, 42, 186, 233, 246, 251, 377, 646, 647, 648, 683, 876, 915, 916, 1034, 1040, 1046, 1049, 1051, 1052, 1053], "nystroem_approx_svm": 251, "nystroem_scor": 251, "nystroem_tim": 251, "nystrom": [885, 1048, 1049], "nystr\u00f6m": [42, 990], "nyu": [0, 201, 859], "nz": 536, "nzw": 1047, "n\u00e1jera": [1043, 1044, 1045, 1046], "n\u00e1pole": 1052, "o": [0, 54, 56, 63, 65, 72, 83, 89, 94, 95, 97, 98, 114, 116, 121, 126, 156, 173, 183, 207, 212, 217, 219, 234, 252, 262, 271, 277, 279, 286, 318, 319, 323, 328, 331, 334, 341, 352, 363, 372, 380, 382, 385, 403, 415, 417, 420, 422, 426, 428, 450, 453, 454, 456, 479, 481, 505, 540, 610, 633, 672, 673, 698, 838, 866, 881, 922, 967, 990, 992, 994, 995, 998, 999, 1001, 1002, 1012, 1013, 1014, 1039, 1042, 1045, 1047, 1048, 1051, 1052, 1054, 1055, 1056], "oa": [1, 48, 64, 69, 109, 113, 114, 131, 153, 188, 307, 309, 417, 475, 476, 479, 480, 482, 483, 518, 555, 806, 992, 1019], "oa_ms": 111, "oa_shrinkag": 111, "oak": 324, "oarc": 994, "ob2019": 998, "obaja": 1043, "obatin": 323, "obei": [399, 996], "obj": [253, 409, 573, 574, 937, 955, 957, 958, 959, 964], "obj_func": [616, 617], "object": [1, 42, 49, 52, 53, 56, 62, 63, 78, 84, 96, 100, 103, 104, 127, 136, 154, 159, 164, 172, 180, 188, 192, 203, 215, 219, 235, 237, 245, 253, 257, 259, 260, 271, 275, 284, 286, 287, 289, 311, 324, 330, 331, 333, 334, 337, 360, 361, 368, 378, 379, 380, 385, 386, 388, 390, 391, 392, 394, 398, 399, 400, 406, 409, 415, 416, 417, 420, 423, 424, 425, 429, 431, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 717, 724, 738, 739, 748, 764, 765, 787, 788, 795, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 925, 930, 931, 932, 933, 934, 937, 941, 943, 953, 954, 955, 956, 957, 958, 959, 961, 963, 964, 983, 984, 986, 994, 995, 996, 997, 1001, 1004, 1005, 1008, 1011, 1012, 1013, 1017, 1018, 1019, 1023, 1024, 1026, 1027, 1030, 1032, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "object_nam": [253, 955, 958], "obozinski": 420, "obscur": [1005, 1055], "observ": [1, 42, 43, 45, 47, 49, 51, 52, 57, 60, 63, 69, 71, 74, 77, 87, 96, 104, 110, 112, 113, 114, 125, 126, 129, 131, 138, 141, 142, 144, 145, 151, 154, 155, 158, 165, 166, 173, 175, 178, 180, 181, 182, 184, 191, 192, 193, 198, 199, 214, 215, 217, 219, 220, 221, 223, 233, 237, 243, 244, 249, 250, 256, 271, 273, 277, 279, 280, 284, 291, 298, 301, 304, 311, 323, 333, 335, 340, 347, 348, 352, 353, 359, 360, 361, 365, 366, 380, 382, 399, 403, 413, 415, 417, 418, 419, 420, 421, 424, 425, 447, 449, 451, 452, 453, 455, 465, 466, 475, 476, 477, 478, 479, 480, 481, 482, 530, 538, 557, 558, 569, 616, 617, 652, 658, 663, 707, 722, 724, 764, 827, 848, 856, 889, 891, 994, 997, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1021, 1024, 1026, 1027, 1029, 1040, 1052, 1053, 1054, 1055], "observatori": 180, "obsolet": [1039, 1055], "obstruct": 1046, "obtain": [21, 42, 45, 47, 50, 51, 57, 63, 82, 89, 91, 92, 104, 107, 108, 129, 131, 138, 148, 151, 152, 157, 164, 173, 177, 179, 191, 192, 203, 219, 221, 223, 233, 243, 256, 262, 263, 264, 271, 273, 277, 278, 279, 283, 286, 301, 323, 330, 346, 352, 360, 361, 367, 368, 380, 382, 387, 399, 409, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 443, 448, 475, 502, 538, 539, 561, 562, 563, 564, 565, 566, 569, 570, 571, 599, 612, 620, 651, 665, 667, 672, 674, 678, 680, 682, 683, 693, 714, 718, 732, 745, 762, 799, 812, 829, 835, 838, 839, 842, 856, 867, 887, 899, 912, 915, 918, 919, 947, 988, 990, 992, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1045, 1047, 1050, 1052, 1053, 1054, 1055, 1056], "obviat": 990, "obviou": [191, 352, 368, 372, 412, 420], "obvious": [187, 372, 1032], "oc": 1054, "occam": 1030, "occas": 385, "occasion": [400, 733, 1048], "occup": [191, 318, 334, 502], "occupation_cler": 191, "occupation_manag": 191, "occupation_oth": 191, "occupation_profession": 191, "occupation_sal": 191, "occupation_servic": 191, "occupi": [415, 998], "occur": [53, 103, 149, 219, 223, 237, 355, 368, 385, 387, 393, 400, 412, 415, 417, 419, 423, 450, 514, 515, 578, 587, 596, 633, 677, 804, 806, 809, 810, 812, 820, 829, 832, 833, 834, 837, 880, 935, 998, 1000, 1008, 1032, 1039, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "occurr": [1, 219, 324, 360, 361, 380, 385, 415, 423, 575, 576, 587, 595, 596, 623, 633, 634, 635, 636, 789, 845, 873, 1000, 1040, 1045], "ocean": 311, "ocsvm": [47, 233], "oct": [698, 775, 995, 1001], "octob": [111, 380, 1039, 1046, 1052, 1053, 1055], "od280": 382, "od315": 382, "odd": [280, 422, 520, 718, 998, 1046, 1047], "ofcategoriesknownnumb": 1025, "off": [43, 50, 52, 71, 73, 74, 81, 82, 86, 87, 110, 114, 116, 124, 144, 154, 172, 173, 188, 223, 240, 251, 255, 269, 270, 276, 278, 279, 280, 295, 318, 335, 338, 340, 342, 348, 357, 359, 380, 385, 387, 399, 414, 415, 417, 424, 448, 502, 559, 560, 565, 566, 594, 597, 640, 662, 664, 698, 721, 803, 804, 806, 809, 810, 820, 822, 828, 833, 871, 890, 951, 997, 1003, 1013, 1018, 1019, 1039, 1043, 1044, 1046], "offer": [42, 144, 387, 393, 397, 398, 399, 403, 409, 419, 420, 422, 423, 987, 988, 999, 1002, 1014, 1017, 1018, 1022, 1045, 1057], "offic": 1022, "offici": [380, 387, 399, 403, 499, 503, 1017, 1032, 1047, 1048, 1051], "offlin": [271, 372, 385], "offset": [141, 196, 397, 417, 420, 475, 514, 515, 569, 638, 639, 647, 648, 650, 651, 683, 734, 781, 783, 856, 914, 998, 1012, 1030, 1047], "offset_": [475, 569, 683, 856, 914, 1047], "offset_init": 683, "offsetbox": 240, "offsetimag": 240, "ofmulticlass": 1013, "often": [42, 56, 60, 61, 63, 68, 103, 107, 144, 154, 157, 179, 186, 191, 192, 220, 237, 240, 256, 264, 279, 282, 318, 323, 348, 357, 359, 360, 361, 372, 373, 379, 380, 382, 385, 387, 390, 393, 397, 398, 399, 402, 409, 413, 415, 416, 417, 419, 420, 422, 423, 425, 427, 474, 527, 530, 539, 542, 638, 652, 653, 658, 659, 666, 667, 668, 669, 678, 680, 693, 734, 880, 888, 896, 908, 987, 988, 990, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1008, 1011, 1012, 1014, 1023, 1025, 1030, 1031, 1032, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "og": 423, "ogbonna": 1052, "ogordon100": 1052, "ogrid": 52, "ogu": 423, "ogura": 1054, "oh": [883, 1049], "ohad": 1053, "ohayon": [1047, 1048, 1055], "ohio": 380, "ohno": 413, "oj_lappi": 1051, "oja": [427, 539], "ojala": [283, 419, 835], "ojeda": 1053, "ok": [48, 385, 1004], "okal": 1043, "okbalefthand": 1045, "okhlopkov": [1045, 1046], "okon": 1053, "okroshiashvili": 1052, "ol": [198, 209, 214, 216, 217, 225, 236, 330, 662, 994], "ol2001": 988, "olatunji": 1054, "old": [237, 385, 389, 391, 415, 474, 542, 652, 658, 908, 995, 1018, 1039, 1044, 1045, 1047, 1052, 1053, 1054], "olden": 1047, "older": [221, 253, 384, 389, 409, 470, 1021, 1037, 1042, 1049, 1051], "oldest": [389, 502], "oldid": 998, "oldja": 1051, "oleg": 1049, "oleggio": 1043, "olegovich": 1046, "oleh": [1051, 1053], "oleksandr": [1047, 1048, 1049, 1050, 1053], "oleksii": 1056, "olemiss": 685, "olga": [634, 988], "oli": 1046, "oliblum90": [1046, 1047], "olicairn": 1050, "olimpio": 1047, "oliph": 1039, "oliv": [340, 342, 1047, 1048, 1050, 1051, 1052], "oliveira": [1045, 1047, 1049, 1053], "olivetti": [1, 124, 146, 378, 420, 501, 1034, 1039, 1047], "olivetti_fac": 501, "olivi": [0, 53, 54, 71, 82, 95, 208, 240, 278, 280, 359, 360, 361, 400, 404, 906, 1011, 1016, 1018, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "oll": 1054, "olr": 198, "olsen": 1046, "olshen": [918, 919, 1014], "olson": 1045, "olszewski": 1052, "olvi": [173, 382], "om": 1046, "omar": [0, 404, 1049, 1054, 1055, 1056, 1057, 1058], "omarmanzoor": 1055, "omega": [355, 418, 992], "omega_": 992, "omega_k": [418, 992], "omer": 1044, "omit": [145, 190, 191, 342, 390, 428, 481, 540, 672, 674, 682, 813, 815, 838, 839, 842, 845, 846, 847, 848, 849, 867, 996, 1003], "omohundro": 1001, "omp": [1, 127, 133, 218, 420, 537, 543, 548, 554, 670, 671, 691, 692, 1020, 1034, 1039, 1047], "omp_cv": 218, "omp_get_max_thread": 386, "omp_num_thread": 373, "omtcyfz": 1046, "onc": [1, 42, 46, 51, 84, 170, 173, 175, 180, 240, 253, 256, 271, 275, 278, 291, 295, 298, 324, 327, 331, 359, 361, 367, 368, 372, 374, 379, 380, 383, 385, 389, 390, 391, 392, 393, 398, 399, 400, 409, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 455, 457, 459, 478, 514, 515, 544, 550, 557, 565, 566, 596, 597, 603, 617, 625, 633, 653, 657, 659, 661, 667, 669, 671, 672, 673, 674, 682, 683, 684, 703, 718, 722, 724, 742, 787, 807, 811, 814, 824, 828, 845, 846, 847, 848, 849, 922, 994, 995, 1001, 1008, 1012, 1013, 1014, 1023, 1032, 1036, 1039, 1047, 1049, 1050, 1051, 1052, 1056], "one": [0, 1, 29, 42, 46, 47, 48, 51, 53, 54, 61, 62, 63, 67, 68, 69, 71, 74, 81, 87, 89, 91, 92, 94, 95, 98, 100, 104, 113, 119, 120, 121, 124, 127, 129, 133, 143, 144, 149, 151, 154, 155, 159, 162, 172, 173, 175, 182, 183, 186, 190, 191, 192, 193, 194, 196, 198, 199, 203, 208, 209, 211, 212, 213, 215, 219, 221, 228, 229, 234, 237, 241, 246, 253, 254, 256, 264, 267, 271, 273, 274, 275, 277, 278, 280, 281, 284, 285, 286, 287, 295, 297, 298, 303, 316, 319, 320, 323, 324, 327, 329, 330, 331, 335, 340, 347, 348, 356, 359, 360, 361, 363, 367, 368, 372, 373, 374, 379, 380, 381, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 399, 400, 402, 403, 406, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 466, 468, 470, 475, 480, 493, 494, 496, 497, 498, 499, 500, 501, 502, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 520, 540, 545, 546, 547, 549, 553, 557, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 587, 589, 590, 594, 595, 596, 597, 616, 617, 621, 622, 626, 633, 636, 638, 639, 640, 641, 649, 653, 654, 655, 656, 660, 663, 664, 665, 667, 672, 674, 675, 677, 679, 680, 681, 682, 684, 686, 694, 698, 701, 705, 709, 715, 717, 726, 735, 736, 740, 744, 756, 757, 760, 769, 777, 780, 784, 785, 786, 787, 789, 790, 793, 794, 796, 797, 798, 799, 802, 803, 804, 805, 806, 809, 810, 812, 813, 814, 816, 818, 820, 824, 825, 828, 829, 831, 833, 834, 836, 837, 838, 839, 840, 842, 843, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 866, 870, 873, 874, 875, 877, 878, 880, 881, 882, 883, 884, 889, 890, 891, 894, 896, 910, 912, 913, 914, 915, 916, 918, 919, 920, 921, 926, 936, 939, 949, 969, 987, 988, 990, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "one_class": 254, "one_hot": [324, 335], "one_hot_encod": [42, 148], "one_hot_encoder_": 572, "one_hot_linear_pipelin": 42, "one_hot_linear_predict": 42, "one_hot_poly_pipelin": 42, "one_hot_poly_predict": 42, "one_hot_result": 148, "one_hot_tim": 42, "one_imag": [423, 590, 593], "one_vs_on": [425, 616, 999], "one_vs_rest": [616, 999], "oneclasssvm": [1, 47, 49, 233, 246, 330, 347, 569, 683, 856, 1004, 1012, 1013, 1041, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "oned": 403, "onehot": [258, 319, 320, 416, 875, 1008], "onehot_categor": [219, 237], "onehotencod": [1, 42, 104, 143, 148, 159, 191, 192, 219, 237, 248, 256, 258, 260, 324, 328, 330, 333, 334, 335, 379, 399, 416, 422, 472, 473, 572, 587, 588, 873, 877, 878, 881, 884, 891, 988, 1008, 1040, 1043, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "onehotencoderonehotencod": [104, 143, 159, 191, 192, 248, 258, 328, 331], "ones": [42, 49, 69, 77, 89, 104, 113, 149, 155, 175, 196, 203, 223, 224, 246, 249, 253, 277, 285, 288, 305, 322, 338, 357, 372, 373, 385, 393, 399, 415, 417, 419, 422, 430, 433, 437, 456, 538, 572, 587, 616, 617, 624, 650, 651, 664, 665, 676, 682, 709, 802, 808, 813, 824, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 885, 889, 952, 994, 998, 1003, 1004, 1008, 1013, 1030, 1039, 1047, 1048, 1049], "onetoonefeaturemixin": [1, 387, 439], "onevsoneclassifi": [1, 295, 406, 839, 840, 1040, 1042, 1043, 1045, 1046, 1048, 1051, 1053, 1056], "onevsrestclassifi": [1, 65, 211, 234, 254, 284, 286, 295, 406, 413, 664, 665, 838, 840, 910, 1023, 1040, 1041, 1043, 1045, 1046, 1052, 1053, 1056, 1057], "ong": 714, "ongari": 1056, "onggo": 1055, "ongo": [333, 386, 400], "onli": [1, 24, 29, 42, 45, 49, 52, 53, 57, 60, 61, 62, 63, 65, 68, 69, 71, 73, 74, 79, 83, 87, 89, 92, 100, 103, 104, 105, 107, 108, 113, 120, 127, 128, 130, 134, 138, 140, 145, 146, 147, 148, 150, 158, 159, 168, 169, 170, 173, 175, 177, 182, 184, 187, 188, 190, 191, 192, 196, 197, 202, 203, 208, 215, 219, 220, 222, 225, 227, 228, 237, 239, 240, 246, 248, 250, 252, 253, 257, 260, 262, 263, 264, 267, 268, 271, 273, 275, 277, 279, 280, 283, 284, 285, 286, 288, 289, 291, 295, 297, 298, 304, 306, 309, 311, 315, 318, 319, 323, 324, 329, 330, 337, 338, 340, 344, 345, 348, 352, 353, 355, 356, 359, 360, 361, 363, 364, 367, 368, 372, 373, 374, 378, 379, 380, 382, 383, 385, 387, 389, 390, 391, 392, 393, 394, 397, 399, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 495, 496, 497, 498, 500, 502, 503, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 522, 525, 529, 530, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 705, 713, 715, 719, 732, 735, 736, 740, 742, 743, 744, 747, 748, 749, 762, 764, 766, 780, 784, 785, 786, 787, 789, 790, 793, 794, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 820, 824, 828, 829, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 934, 936, 939, 947, 949, 952, 954, 959, 964, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "onlin": [1, 43, 46, 53, 70, 85, 124, 127, 188, 197, 227, 233, 255, 271, 314, 374, 380, 384, 390, 399, 415, 420, 423, 425, 448, 452, 453, 455, 501, 508, 537, 542, 543, 544, 545, 551, 552, 588, 590, 664, 672, 673, 674, 682, 684, 836, 845, 846, 847, 848, 849, 852, 853, 858, 860, 861, 879, 880, 890, 910, 911, 990, 994, 1002, 1004, 1016, 1019, 1020, 1022, 1030, 1034, 1039, 1043, 1044, 1046, 1054], "onlineldavb": 542, "only_non_neg": 1052, "only_physical_cor": 144, "onnx": [1017, 1018, 1034], "onnxruntim": 409, "onto": [117, 240, 241, 251, 318, 397, 420, 423, 427, 452, 454, 467, 539, 545, 549, 633, 634, 636, 694, 992, 996, 1001], "onward": [884, 1043, 1057], "onx": 409, "oob": [137, 150, 188, 422, 521, 570, 1018, 1019, 1041, 1052, 1056], "oob_best_it": 150, "oob_color": 150, "oob_decision_function_": [561, 563, 570], "oob_error": 142, "oob_improvement_": [150, 422, 565, 566, 1041], "oob_lin": 150, "oob_prediction_": [562, 564, 571], "oob_scor": [142, 422, 561, 562, 563, 564, 570, 571, 1044, 1046], "oob_score_": [142, 561, 562, 563, 564, 565, 566, 570, 571, 1041, 1055], "oob_scores_": [565, 566, 1055], "op": [389, 434, 664, 665, 672, 673, 674, 682, 683, 684, 867, 868, 910, 1008], "opaqu": 1006, "open": [46, 50, 54, 241, 379, 380, 383, 384, 385, 389, 391, 397, 398, 400, 409, 416, 423, 493, 502, 514, 515, 988, 1017, 1022, 1026, 1042, 1046, 1047, 1049, 1055], "open_pric": 50, "openbla": [372, 373, 383, 397, 1052, 1056, 1057], "openblas_num_thread": 373, "opencv": 380, "opengl": 1032, "opengraph": [385, 403, 408], "openml": [1, 42, 51, 104, 159, 180, 191, 219, 227, 235, 237, 247, 271, 291, 295, 297, 315, 378, 403, 502, 1034, 1047, 1049, 1052], "openml100": 379, "openmp": [328, 383, 388, 397, 399, 415, 422, 1050, 1052, 1055], "openrec": 1017, "opentsn": 698, "oper": [1, 18, 52, 56, 173, 183, 188, 247, 252, 259, 269, 271, 272, 274, 284, 361, 372, 373, 382, 383, 385, 388, 391, 397, 399, 400, 403, 409, 411, 414, 419, 420, 422, 423, 424, 428, 454, 467, 474, 481, 488, 489, 490, 491, 510, 539, 540, 547, 557, 558, 572, 578, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 622, 627, 630, 636, 641, 649, 664, 695, 699, 708, 712, 713, 714, 733, 780, 787, 788, 794, 795, 825, 836, 839, 850, 851, 873, 877, 882, 893, 894, 908, 915, 918, 949, 971, 994, 1001, 1008, 1013, 1017, 1019, 1022, 1030, 1043, 1045, 1046, 1047, 1049, 1050, 1055], "operand": 425, "operation": [237, 1022], "operatornam": [420, 747, 994, 998, 1014], "opinion": 400, "opitz": 998, "opportun": [540, 1012], "oppos": [101, 253, 389, 411, 415, 906, 1001, 1013, 1023, 1039, 1057], "opposit": [61, 87, 101, 129, 191, 192, 208, 271, 284, 399, 413, 417, 419, 424, 449, 453, 455, 475, 544, 546, 553, 569, 718, 736, 856, 914, 1039], "opposite_lof_scor": 856, "opt": [383, 387], "opta": 903, "optic": [1, 70, 78, 188, 331, 340, 378, 426, 450, 452, 461, 462, 463, 508, 1019, 1033, 1034, 1048, 1052, 1053, 1054, 1055, 1056, 1057], "optim": [45, 51, 52, 63, 87, 88, 91, 94, 105, 110, 111, 124, 149, 150, 152, 154, 172, 173, 175, 176, 179, 180, 181, 182, 183, 203, 207, 208, 212, 227, 235, 252, 256, 271, 275, 282, 285, 290, 291, 295, 297, 302, 316, 318, 323, 331, 335, 340, 350, 355, 359, 360, 361, 368, 372, 379, 382, 385, 387, 388, 397, 399, 403, 410, 412, 414, 415, 417, 419, 420, 422, 424, 425, 426, 450, 453, 454, 455, 456, 458, 463, 467, 468, 478, 479, 485, 537, 540, 541, 543, 545, 549, 563, 564, 565, 566, 580, 616, 617, 625, 626, 641, 644, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 693, 696, 698, 700, 701, 707, 729, 736, 805, 806, 820, 828, 852, 853, 854, 856, 858, 859, 860, 861, 862, 867, 868, 886, 898, 902, 903, 910, 911, 912, 913, 914, 915, 916, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1012, 1013, 1014, 1017, 1022, 1027, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055], "optima": 425, "optimis": [387, 415, 1001, 1042, 1052, 1054], "optimist": [51, 208, 282, 359, 368, 713, 994, 998], "optimum": [95, 181, 191, 196, 271, 290, 414, 420, 478, 994, 997], "option": [1, 42, 65, 80, 86, 131, 144, 152, 181, 187, 200, 203, 220, 256, 271, 280, 286, 328, 335, 359, 363, 368, 374, 379, 380, 381, 383, 385, 386, 388, 390, 391, 393, 394, 397, 399, 400, 403, 415, 416, 418, 419, 420, 422, 423, 426, 439, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 693, 694, 695, 696, 698, 700, 701, 717, 719, 723, 735, 736, 741, 742, 743, 763, 764, 765, 770, 772, 773, 777, 780, 781, 782, 783, 784, 787, 789, 790, 793, 798, 799, 801, 805, 807, 808, 809, 810, 812, 813, 815, 824, 828, 829, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 937, 984, 987, 988, 994, 997, 998, 1001, 1008, 1011, 1013, 1014, 1018, 1030, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "option_context": 237, "ora": 1052, "oracl": [1, 68, 219, 237, 428, 475, 476, 479, 480, 481, 482, 992, 1039], "orallo": 998, "orang": [45, 47, 87, 112, 122, 125, 126, 131, 138, 153, 154, 156, 182, 187, 207, 208, 229, 254, 265, 271, 309, 328, 334, 366, 999, 1056], "orazbayev": 1053, "orbit": [359, 360], "order": [1, 42, 52, 57, 60, 63, 81, 89, 98, 99, 105, 110, 119, 133, 146, 147, 148, 152, 154, 166, 180, 190, 191, 194, 196, 208, 212, 215, 219, 220, 225, 233, 237, 241, 250, 253, 256, 260, 264, 272, 275, 277, 284, 297, 316, 318, 323, 324, 325, 329, 330, 335, 355, 359, 361, 368, 372, 373, 380, 385, 386, 387, 390, 391, 394, 399, 403, 406, 409, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 446, 449, 452, 453, 455, 456, 461, 462, 463, 465, 470, 494, 495, 496, 501, 503, 521, 540, 541, 545, 546, 547, 549, 553, 557, 559, 561, 562, 563, 564, 565, 569, 570, 571, 572, 573, 587, 594, 597, 599, 600, 603, 612, 613, 614, 616, 628, 633, 637, 646, 664, 665, 671, 682, 691, 692, 694, 695, 699, 703, 705, 706, 708, 710, 718, 719, 724, 728, 732, 735, 736, 744, 746, 747, 748, 760, 762, 784, 788, 789, 790, 793, 794, 795, 800, 805, 806, 807, 809, 810, 811, 813, 817, 820, 824, 825, 828, 831, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 867, 870, 881, 883, 884, 885, 889, 890, 891, 894, 895, 896, 898, 899, 900, 901, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 930, 931, 936, 947, 962, 967, 988, 994, 995, 998, 999, 1001, 1002, 1008, 1011, 1012, 1013, 1014, 1018, 1027, 1029, 1030, 1032, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "order_": [841, 844], "order_centroid": 360, "ordered_sampl": 237, "ordereddict": 142, "ordering_": [99, 415, 456, 461, 462, 463], "ordin": [42, 87, 104, 159, 256, 321, 324, 325, 329, 332, 379, 399, 422, 502, 573, 715, 875, 878, 883, 884, 891, 994, 995, 1008, 1018, 1047, 1053], "ordinal_encod": [148, 256], "ordinal_result": 148, "ordinalencod": [1, 148, 159, 192, 193, 219, 256, 324, 332, 379, 399, 587, 846, 878, 883, 891, 988, 1000, 1008, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056], "ordinalencoderordinalencod": [159, 192, 193, 324], "ordinari": [1, 126, 188, 197, 198, 201, 203, 209, 215, 221, 222, 224, 236, 330, 641, 652, 658, 660, 661, 662, 663, 678, 684, 688, 689, 693, 1012, 1019, 1020, 1034], "ordinarili": [397, 399], "ordowski": 998, "oregon": 324, "oren": 1047, "oresti": 1048, "orfano": [1052, 1053, 1054, 1055, 1056], "org": [42, 50, 52, 53, 54, 60, 62, 67, 71, 80, 82, 95, 100, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 180, 184, 191, 192, 193, 196, 200, 210, 211, 219, 227, 235, 237, 240, 247, 248, 249, 251, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 280, 284, 289, 291, 297, 315, 316, 324, 328, 329, 331, 332, 334, 337, 338, 339, 342, 359, 360, 361, 367, 373, 378, 383, 385, 388, 391, 393, 400, 419, 601, 642, 674, 677, 682, 701, 711, 775, 852, 853, 858, 859, 860, 861, 888, 904, 918, 919, 994, 998, 1014, 1034, 1047, 1051], "organ": [0, 49, 51, 103, 112, 359, 379, 384, 385, 400, 858, 1017], "ori": 1045, "orient": [65, 124, 191, 239, 318, 399, 922, 995], "orig": [52, 305], "orig_coin": [80, 81], "orig_data_ax": 129, "origin": [42, 43, 52, 57, 58, 80, 81, 82, 85, 90, 92, 107, 108, 120, 124, 126, 127, 133, 154, 157, 169, 170, 173, 175, 177, 179, 180, 186, 187, 192, 196, 207, 208, 223, 239, 240, 241, 243, 244, 250, 251, 252, 256, 268, 271, 274, 280, 301, 306, 316, 319, 323, 333, 338, 352, 359, 361, 368, 373, 380, 382, 384, 385, 387, 389, 390, 397, 399, 409, 412, 415, 416, 419, 420, 422, 423, 425, 426, 427, 428, 440, 443, 447, 449, 450, 451, 452, 453, 455, 456, 465, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 499, 500, 501, 507, 525, 537, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 582, 587, 588, 590, 594, 596, 597, 600, 613, 614, 616, 617, 620, 636, 638, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 698, 702, 707, 734, 769, 775, 805, 807, 808, 813, 815, 824, 828, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 860, 861, 867, 868, 870, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 886, 887, 888, 889, 890, 899, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 928, 930, 931, 935, 936, 957, 969, 972, 991, 992, 994, 995, 997, 998, 1001, 1004, 1009, 1010, 1011, 1012, 1015, 1017, 1022, 1023, 1032, 1042, 1043, 1045, 1047, 1049, 1051, 1053, 1055], "original_param": 153, "original_shap": 82, "original_sklearn_vers": [409, 582], "original_space_centroid": 360, "orii": 1041, "orphan": [454, 467, 1039], "orr": [1002, 1012], "orr\u00f9": 1042, "orthogon": [1, 36, 125, 126, 127, 133, 188, 197, 290, 420, 532, 537, 543, 545, 548, 549, 554, 670, 671, 691, 692, 1010, 1019, 1020, 1034, 1039], "orthogonal_mp": [1, 554, 670, 671, 692, 994], "orthogonal_mp_gram": [1, 670, 671, 691, 1053], "orthogonalmatchingpursuit": [1, 218, 671, 691, 692, 994, 999, 1039, 1041, 1044, 1047, 1052, 1057], "orthogonalmatchingpursuitcv": [1, 218, 406, 670, 1041, 1052, 1056], "orthonorm": [1, 44, 394, 946, 990, 1028], "orthotrop": 1001, "ortiz": [1049, 1055], "osa": 1047, "osaid": 1047, "osborn": [1042, 1043], "oscar": [1042, 1046], "oscil": [156, 192, 224, 415, 446], "oscillatori": [220, 1008], "osei": 1053, "osendorf": [1039, 1040], "oserror": [403, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504], "osindero": [866, 1003], "osman": [1048, 1054], "osx": 372, "other": [0, 1, 24, 42, 46, 50, 51, 60, 63, 65, 66, 68, 71, 74, 78, 86, 91, 100, 102, 104, 105, 117, 126, 127, 129, 131, 141, 143, 144, 147, 148, 151, 152, 154, 155, 161, 168, 186, 187, 188, 190, 191, 192, 193, 196, 198, 212, 219, 223, 237, 239, 240, 241, 243, 246, 247, 248, 250, 252, 253, 256, 257, 264, 267, 271, 272, 274, 277, 278, 279, 286, 287, 291, 295, 303, 304, 305, 317, 318, 322, 323, 325, 327, 328, 330, 334, 335, 337, 348, 352, 354, 357, 359, 360, 363, 367, 368, 372, 377, 378, 380, 381, 382, 383, 385, 387, 389, 390, 391, 393, 394, 398, 399, 400, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 443, 449, 450, 452, 453, 454, 455, 456, 458, 463, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 502, 503, 509, 539, 540, 541, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 600, 603, 608, 616, 617, 618, 619, 626, 633, 634, 636, 641, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 696, 698, 702, 705, 710, 724, 769, 780, 784, 791, 798, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 820, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 865, 867, 868, 870, 871, 873, 875, 876, 877, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 898, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 941, 955, 987, 988, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1030, 1031, 1034, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1052, 1053, 1054, 1055, 1056], "other_parti": 271, "other_payment_plan": 271, "other_scor": 390, "otherwis": [49, 90, 96, 140, 184, 187, 200, 221, 227, 271, 311, 352, 355, 368, 374, 387, 389, 391, 399, 406, 415, 417, 419, 423, 425, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 459, 460, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 502, 533, 539, 540, 541, 542, 544, 546, 547, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 603, 608, 616, 617, 620, 637, 638, 639, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 691, 692, 696, 698, 702, 703, 704, 706, 708, 709, 713, 715, 719, 720, 730, 732, 733, 734, 735, 736, 744, 747, 758, 760, 761, 762, 772, 780, 784, 787, 788, 789, 790, 791, 793, 794, 795, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 820, 824, 825, 828, 829, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 867, 868, 870, 873, 874, 875, 876, 877, 881, 882, 889, 890, 891, 892, 895, 896, 897, 899, 900, 901, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 923, 925, 931, 933, 946, 947, 957, 959, 982, 984, 993, 994, 995, 998, 1001, 1002, 1004, 1005, 1008, 1010, 1012, 1013, 1017, 1022, 1023, 1041, 1047, 1048, 1049, 1052, 1055], "ott": 1043, "oudshoorn": [633, 988], "ought": 372, "our": [0, 42, 43, 45, 49, 50, 51, 76, 87, 90, 103, 104, 112, 113, 117, 124, 125, 138, 139, 145, 148, 149, 151, 152, 168, 173, 175, 180, 182, 188, 190, 191, 192, 193, 194, 219, 223, 237, 241, 243, 253, 270, 271, 277, 280, 283, 284, 301, 315, 318, 324, 328, 330, 335, 342, 345, 351, 353, 355, 359, 360, 361, 368, 373, 384, 389, 390, 393, 397, 398, 399, 400, 406, 415, 419, 422, 423, 425, 426, 450, 456, 569, 650, 698, 714, 726, 732, 744, 762, 852, 853, 854, 856, 858, 860, 861, 862, 987, 988, 994, 995, 998, 1004, 1008, 1011, 1012, 1013, 1018, 1021, 1022, 1023, 1030, 1031, 1032, 1046, 1047, 1049, 1050, 1053, 1054, 1056], "our_rand_r": 1048, "oura": [1052, 1053, 1054], "ourselv": 1022, "ouss1508": [1054, 1055], "out": [0, 1, 41, 42, 45, 47, 48, 50, 51, 53, 54, 62, 65, 74, 84, 89, 90, 103, 104, 131, 136, 137, 142, 144, 145, 152, 153, 166, 183, 188, 190, 191, 193, 203, 219, 221, 223, 227, 237, 253, 256, 262, 264, 271, 275, 277, 280, 285, 289, 295, 297, 323, 324, 330, 340, 342, 344, 345, 348, 355, 359, 371, 380, 382, 383, 385, 387, 388, 389, 391, 397, 399, 409, 415, 418, 420, 422, 423, 425, 431, 441, 442, 448, 449, 451, 452, 453, 455, 478, 488, 489, 490, 491, 505, 521, 522, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 594, 595, 597, 610, 613, 614, 640, 645, 646, 647, 648, 657, 661, 672, 674, 679, 681, 682, 694, 695, 698, 707, 733, 747, 748, 806, 808, 809, 810, 811, 813, 814, 815, 816, 820, 836, 845, 846, 847, 848, 849, 854, 859, 862, 866, 867, 868, 876, 880, 887, 899, 902, 903, 925, 960, 962, 967, 988, 992, 993, 997, 998, 999, 1001, 1006, 1008, 1018, 1019, 1020, 1022, 1025, 1027, 1030, 1032, 1034, 1039, 1041, 1043, 1045, 1047, 1048, 1051, 1052, 1055, 1057], "out_activation_": [867, 868], "out_bounds_predict": 221, "out_fil": [922, 1014], "out_of_bound": [249, 641], "out_of_cluster_doc": 56, "outcom": [42, 144, 191, 399, 422, 575, 664, 715, 748, 800, 838, 905, 906, 907, 912, 915, 994, 998, 1014, 1021, 1032, 1043, 1047, 1049], "outdat": 388, "outer": [57, 129, 282, 339, 457, 520, 646, 656, 657, 660, 990, 1040], "outer_cv": [282, 334], "outer_numb": 339, "outermost": 352, "outli": [47, 112, 399, 475, 480, 994, 1004], "outlier": [1, 41, 69, 78, 88, 112, 113, 151, 155, 175, 188, 197, 217, 221, 222, 223, 224, 225, 233, 245, 299, 317, 322, 325, 347, 357, 380, 399, 415, 417, 422, 437, 452, 470, 472, 475, 476, 479, 480, 481, 482, 496, 497, 498, 502, 516, 518, 528, 530, 569, 637, 645, 655, 676, 677, 678, 682, 683, 684, 685, 698, 708, 836, 856, 860, 871, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 895, 896, 897, 898, 899, 900, 901, 913, 914, 916, 998, 1012, 1013, 1017, 1019, 1020, 1033, 1034, 1039, 1044, 1045, 1047], "outlier_detector": [256, 437], "outlier_label": [860, 1049], "outlier_label_": 860, "outlier_mask": 222, "outlier_plot": 112, "outliermixin": [1, 1056], "outliers_": 655, "outliers_cov": 112, "outliers_fract": 246, "outliers_index": 113, "outliers_offset": 113, "outlin": [100, 147, 385, 387, 399, 400, 402, 415, 987, 1034], "outlying": 1004, "outperform": [110, 117, 154, 159, 295, 323, 397, 419, 422, 458, 468, 1000, 1008], "output": [1, 29, 30, 50, 53, 61, 63, 71, 87, 93, 127, 137, 138, 139, 141, 147, 159, 162, 165, 166, 175, 183, 186, 187, 188, 191, 215, 245, 253, 257, 260, 265, 270, 271, 275, 277, 280, 284, 286, 287, 291, 295, 298, 319, 322, 324, 325, 327, 330, 331, 333, 335, 360, 361, 362, 363, 365, 367, 378, 379, 380, 382, 385, 387, 391, 393, 397, 398, 399, 413, 414, 415, 416, 418, 419, 422, 423, 424, 425, 431, 436, 439, 443, 447, 448, 449, 451, 452, 453, 455, 456, 458, 465, 466, 468, 469, 470, 471, 472, 473, 474, 488, 489, 490, 491, 494, 497, 498, 499, 500, 501, 502, 503, 509, 511, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 633, 634, 635, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 652, 653, 656, 658, 659, 660, 663, 664, 666, 667, 668, 669, 672, 673, 674, 677, 679, 680, 682, 684, 685, 687, 688, 689, 690, 694, 695, 696, 698, 700, 702, 705, 706, 719, 720, 727, 729, 730, 732, 734, 741, 751, 752, 754, 756, 757, 758, 759, 760, 762, 767, 773, 778, 791, 794, 796, 797, 803, 804, 805, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 828, 831, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 853, 854, 855, 859, 860, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 898, 899, 902, 903, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 931, 933, 936, 947, 948, 954, 955, 957, 965, 985, 987, 988, 990, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1005, 1008, 1013, 1019, 1020, 1023, 1024, 1026, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "output_dict": [719, 1047, 1051], "output_distribut": [108, 318, 322, 416, 886, 887, 898, 899, 1008], "output_fil": 493, "output_indices_": [470, 1052], "output_label": 339, "output_label_arrai": 339, "outputcodeclassifi": [1, 295, 406, 838, 839, 1046, 1051, 1055, 1056], "outputs_2d_": [852, 860, 1049], "outreach": 400, "outsid": [44, 47, 56, 147, 220, 221, 249, 260, 409, 423, 452, 641, 889, 1004, 1028, 1047], "outward": 318, "outweigh": 1043, "ouvert": [764, 765, 996], "ova": [228, 672, 674, 682, 1012], "ovb": [190, 191], "over": [1, 29, 42, 45, 46, 47, 57, 60, 62, 63, 66, 71, 84, 89, 90, 105, 106, 107, 124, 141, 144, 149, 154, 155, 168, 172, 175, 183, 186, 190, 192, 201, 213, 219, 227, 237, 246, 256, 277, 278, 280, 282, 284, 285, 286, 289, 303, 311, 313, 314, 320, 330, 331, 333, 337, 359, 360, 372, 373, 374, 380, 381, 384, 385, 386, 387, 391, 398, 399, 411, 413, 415, 416, 419, 420, 421, 422, 423, 427, 452, 455, 470, 478, 515, 539, 540, 542, 543, 544, 545, 552, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 594, 595, 597, 600, 608, 636, 638, 639, 640, 650, 651, 652, 653, 658, 659, 664, 666, 667, 668, 669, 671, 672, 673, 674, 682, 683, 684, 691, 692, 703, 722, 724, 745, 769, 794, 799, 803, 806, 809, 810, 812, 817, 818, 820, 829, 831, 832, 833, 834, 835, 837, 866, 867, 868, 869, 885, 889, 910, 918, 920, 927, 936, 987, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1022, 1028, 1031, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "overal": [42, 77, 82, 138, 141, 144, 149, 159, 180, 237, 271, 274, 298, 323, 324, 360, 372, 384, 385, 391, 412, 413, 422, 453, 455, 470, 477, 478, 484, 555, 891, 995, 998, 1014, 1022, 1049], "overallqu": 159, "overcom": [145, 223, 372, 423], "overcomplet": 420, "overconstrain": 154, "overestim": [131, 368, 419], "overfit": [42, 63, 143, 149, 151, 154, 188, 192, 193, 194, 198, 220, 223, 246, 264, 269, 271, 272, 278, 282, 291, 293, 313, 319, 320, 322, 323, 324, 325, 348, 355, 363, 365, 366, 380, 399, 413, 414, 419, 422, 443, 494, 495, 567, 568, 573, 574, 663, 806, 809, 810, 820, 828, 832, 833, 867, 868, 870, 885, 889, 993, 1002, 1004, 1006, 1008, 1014, 1019, 1022, 1030, 1042], "overflow": [384, 393, 397, 1021, 1042, 1046, 1047, 1048, 1049, 1050, 1052], "overflowerror": 1049, "overhead": [46, 298, 373, 374, 385, 391, 394, 397, 399, 422, 447, 451, 455, 540, 705, 842, 843, 845, 846, 847, 848, 849, 850, 851, 1000, 1001, 1042, 1047, 1048, 1051], "overlai": [393, 638], "overlaid": 1005, "overlap": [1, 50, 51, 71, 89, 120, 152, 172, 242, 264, 360, 412, 415, 419, 422, 423, 593, 798, 799, 807, 811, 813, 814, 815, 816, 824, 995, 1008, 1045], "overli": [51, 61, 62, 208, 282, 368, 420, 998], "overlin": [277, 412], "overparameter": 994, "overrid": [387, 423, 452, 456, 463, 548, 554, 594, 595, 597, 599, 600, 603, 662, 670, 691, 692, 812, 829, 852, 853, 854, 856, 858, 860, 861, 862, 1039, 1047, 1049, 1053, 1055], "overridden": [387, 399, 425, 548, 554, 622, 627, 630, 700, 1047, 1048, 1055], "oversampl": [550, 1039], "oversc": 1054, "overset": [420, 1005], "overst": 191, "oversubscript": [784, 1053], "overview": [108, 188, 282, 294, 297, 386, 388, 398, 399, 502, 740, 749, 806, 822, 833, 838, 839, 840, 918, 1000, 1012, 1019, 1033, 1034], "overwhelm": 385, "overwrit": [154, 452, 502, 637, 1023, 1039, 1050, 1055, 1056], "overwrite_": 1039, "overwritten": [448, 538, 539, 540, 542, 547, 554, 613, 614, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 678, 680, 685, 687, 688, 689, 690, 692, 968, 1052], "ovo": [295, 327, 794, 838, 912, 915, 998, 999, 1013], "ovo_tpr": 286, "ovo_tre": 295, "ovr": [1, 65, 211, 234, 295, 297, 327, 356, 664, 665, 794, 839, 910, 912, 915, 998, 999, 1013, 1039, 1044, 1045, 1047, 1048, 1049, 1053, 1054], "ovr_jaccard_scor": 297, "ovr_tre": 295, "ow": 94, "owen": [655, 1048, 1049], "own": [1, 15, 51, 69, 144, 237, 253, 267, 298, 300, 339, 360, 373, 379, 388, 389, 390, 393, 394, 403, 414, 415, 427, 431, 446, 460, 539, 563, 570, 652, 803, 804, 852, 853, 854, 856, 858, 860, 861, 862, 884, 918, 920, 936, 941, 994, 1000, 1001, 1004, 1008, 1013, 1017, 1022, 1031, 1032, 1046, 1047, 1049, 1056], "own_telephon": 271, "owner": [253, 380, 382, 954, 955], "ownership": 387, "oyamada": 1044, "oyindamola": 1054, "oywa": 1049, "ozga": 1047, "ozsvald": 1041, "p": [0, 1, 49, 52, 60, 62, 63, 75, 95, 112, 113, 116, 122, 131, 150, 169, 173, 178, 196, 231, 236, 237, 239, 241, 250, 265, 277, 283, 284, 311, 379, 380, 382, 383, 390, 393, 412, 413, 414, 415, 417, 418, 420, 422, 424, 425, 426, 428, 448, 450, 452, 453, 456, 461, 462, 463, 475, 477, 480, 481, 484, 504, 534, 540, 544, 546, 547, 553, 555, 556, 557, 559, 561, 562, 563, 564, 565, 567, 570, 571, 572, 596, 598, 599, 600, 601, 602, 604, 605, 606, 610, 611, 612, 613, 614, 615, 621, 622, 633, 646, 649, 694, 696, 698, 700, 705, 711, 721, 730, 747, 758, 792, 794, 808, 814, 815, 816, 819, 835, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 866, 870, 871, 886, 898, 904, 920, 921, 922, 991, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1013, 1027, 1030, 1039, 1040, 1042, 1045, 1047, 1054, 1055, 1056], "p0": 62, "p1": [62, 161], "p1d": 62, "p2": [62, 161, 237], "p3": 161, "p4": 161, "p5": 947, "p592": 142, "p_": [169, 998, 1001, 1014], "p_c": [122, 529], "p_e": 722, "p_grid": 282, "p_i": [998, 1001], "p_k": [284, 998], "p_n": [284, 713, 998], "p_o": 722, "p_val": 277, "p_val_uncorrect": 277, "p_valu": [610, 611, 612], "p_w": 122, "p_w_c": [122, 529], "pa": [672, 673, 907, 994, 998, 1011], "pab": [1054, 1055], "pablo": [1049, 1052, 1053], "pabloduque0": 1052, "pace": 380, "pacha": 1047, "pacif": 277, "pack": [394, 1047], "packag": [0, 80, 87, 186, 253, 298, 373, 378, 379, 382, 383, 385, 386, 387, 389, 391, 393, 394, 397, 399, 403, 409, 417, 422, 423, 458, 484, 652, 653, 988, 994, 997, 1001, 1008, 1014, 1022, 1026, 1039, 1045, 1047, 1048, 1049], "packet": 372, "packg": 403, "pacman": 403, "paczuski": [1047, 1048], "pad": [124, 147, 186, 192, 239, 256, 359, 364, 423, 594, 595, 597], "page": [0, 50, 54, 62, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 173, 180, 191, 192, 193, 200, 239, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 372, 380, 382, 385, 387, 389, 391, 393, 400, 415, 417, 479, 522, 523, 524, 634, 650, 840, 905, 947, 988, 994, 998, 999, 1023, 1032, 1037, 1039, 1043, 1044], "page_links_en": 54, "page_links_filenam": 54, "page_links_url": 54, "pagerank": 54, "pagh": [196, 990], "pai": [0, 191, 237, 271, 385], "paid": 994, "pain": 397, "paint": [922, 924], "pair": [1, 48, 51, 71, 78, 92, 98, 129, 140, 142, 147, 151, 166, 179, 183, 199, 202, 211, 228, 231, 237, 250, 272, 277, 284, 286, 342, 344, 346, 348, 349, 350, 352, 360, 364, 380, 397, 399, 412, 413, 416, 419, 423, 425, 443, 446, 447, 451, 456, 463, 469, 477, 478, 484, 499, 514, 515, 588, 598, 601, 602, 604, 605, 606, 616, 619, 620, 621, 623, 625, 626, 628, 629, 631, 633, 638, 639, 649, 651, 698, 705, 706, 711, 712, 713, 721, 737, 746, 764, 765, 769, 772, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 792, 838, 850, 851, 925, 998, 999, 1000, 1001, 1008, 1014, 1039, 1051, 1052, 1054, 1055, 1056], "pair_confusion_matrix": [1, 415, 1051], "pair_list": 286, "pair_scor": 286, "paired_cosine_dist": 1, "paired_dist": [1, 769, 775, 784, 1043], "paired_euclidean_dist": 1, "paired_manhattan_dist": 1, "pairidx": 364, "pairplot": [190, 191], "pairwis": [1, 36, 98, 190, 191, 250, 256, 286, 327, 331, 332, 359, 372, 377, 387, 399, 411, 415, 420, 425, 452, 460, 464, 467, 468, 474, 493, 514, 515, 541, 567, 568, 626, 644, 645, 646, 647, 648, 649, 694, 696, 698, 700, 702, 705, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 794, 798, 799, 838, 854, 858, 862, 876, 908, 990, 998, 1001, 1010, 1013, 1034, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1056, 1057, 1058], "pairwise_bayesian": 277, "pairwise_bayesian_df": 277, "pairwise_comp_df": 277, "pairwise_dist": [1, 74, 335, 399, 415, 426, 450, 452, 456, 463, 694, 702, 768, 777, 785, 786, 798, 799, 854, 856, 858, 862, 996, 1039, 1043, 1045, 1047, 1048, 1050, 1051, 1056, 1057], "pairwise_dist_chunk_s": [474, 908], "pairwise_distance_funct": [698, 702, 784, 787, 1001], "pairwise_distances_argmin": [1, 82, 98, 331, 786, 1047, 1053, 1054, 1055, 1056], "pairwise_distances_argmin_min": [1, 331, 785, 1042, 1047, 1053, 1054, 1055, 1056], "pairwise_distances_chunk": [1, 372, 784, 1047, 1050, 1056], "pairwise_indices_": 838, "pairwise_kernel": [1, 399, 425, 458, 468, 649, 771, 876, 996, 1039, 1046, 1056], "pairwise_kernel_funct": [626, 649, 780], "pairwise_kernels_kwarg": 626, "pairwise_t_test": 277, "pairwisedistancesreduct": 373, "pairwisekernel": [1, 425], "paislei": [420, 542], "pakdd": 415, "pal": [1047, 1053], "palac": 82, "palacio": 1052, "palafox": 1039, "palett": [82, 191, 277], "palevioletr": [233, 304, 347], "palioura": [845, 1000], "paliw": 1047, "palladium": 1022, "palmol": 50, "paltri": 1030, "pami": [382, 415, 731], "pamnani": 1047, "pan": 1025, "panchal": 1051, "pancholi": 1046, "panda": [1, 42, 50, 51, 61, 103, 104, 105, 138, 144, 145, 148, 151, 154, 156, 172, 180, 186, 190, 191, 192, 193, 194, 198, 203, 208, 219, 223, 227, 237, 256, 257, 260, 267, 271, 275, 277, 278, 280, 288, 289, 291, 295, 323, 324, 325, 327, 330, 331, 355, 359, 360, 379, 380, 383, 384, 385, 387, 388, 393, 399, 403, 408, 416, 439, 448, 449, 451, 453, 455, 470, 472, 474, 488, 489, 490, 491, 495, 496, 497, 498, 502, 506, 507, 508, 510, 511, 516, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 567, 568, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 638, 639, 641, 644, 645, 646, 647, 648, 694, 695, 698, 806, 809, 810, 820, 836, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 908, 926, 987, 988, 1008, 1017, 1018, 1032, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "pandata": [1054, 1055], "pandei": [1046, 1051], "panel": [268, 303, 318, 421, 1017], "panga": [1054, 1055], "panico": [1047, 1051], "pankaj": 1051, "pano": 1045, "panpiort8": [1049, 1051], "paolo": [0, 405, 1039, 1043, 1049, 1057], "papadopoulo": [1052, 1053, 1054, 1055, 1056], "papapanagiot": 1046, "paper": [0, 173, 196, 271, 277, 382, 391, 397, 415, 417, 422, 448, 455, 484, 510, 540, 547, 569, 647, 664, 672, 673, 677, 682, 685, 698, 794, 847, 856, 859, 902, 903, 994, 998, 1001, 1004, 1013, 1032, 1039, 1046, 1047], "paper355": 677, "papier": [670, 691, 692], "par": 1008, "paraboloid": 994, "paradi": 1054, "paradigm": 994, "paragraph": [423, 509, 1032], "paralel": 1055, "parallel": [1, 52, 137, 142, 144, 145, 147, 188, 192, 193, 194, 221, 278, 328, 329, 331, 353, 367, 371, 377, 383, 385, 386, 388, 389, 397, 399, 416, 424, 426, 427, 443, 450, 452, 454, 455, 456, 458, 463, 464, 467, 470, 473, 478, 501, 537, 539, 540, 541, 543, 545, 547, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 595, 600, 608, 613, 614, 616, 638, 640, 645, 664, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 817, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 869, 872, 905, 906, 965, 968, 1018, 1019, 1027, 1032, 1034, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "parallel_backend": [1, 373, 426, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 537, 541, 542, 543, 545, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 600, 608, 613, 614, 616, 638, 640, 645, 653, 657, 659, 661, 663, 664, 665, 667, 669, 671, 672, 674, 682, 685, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 856, 858, 860, 861, 863, 864, 869, 872, 905, 906, 1047, 1057], "parallel_batch_queri": 298, "parallel_coordin": 278, "parallel_help": 1049, "parallelbackendbas": 968, "parallelis": [278, 474, 908, 1046], "param": [78, 89, 95, 96, 104, 149, 150, 152, 153, 239, 252, 253, 275, 277, 285, 289, 302, 314, 334, 385, 387, 399, 406, 422, 425, 429, 432, 438, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 818, 820, 828, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 954, 955, 958, 987, 1045, 1049, 1050, 1052, 1053, 1056, 1057], "param1": [387, 1029], "param2": [387, 1029], "param3": 387, "param_": 144, "param_c": [288, 806], "param_classifier__c": 104, "param_covariance_typ": 267, "param_degre": 806, "param_dist": [285, 289, 329], "param_distribut": [104, 175, 278, 285, 289, 329, 398, 810, 818, 820, 1055], "param_gamma": [288, 806, 820], "param_grid": [42, 44, 104, 105, 106, 107, 144, 151, 252, 258, 267, 271, 275, 276, 277, 281, 282, 285, 288, 295, 300, 320, 334, 348, 399, 406, 416, 422, 748, 806, 809, 817, 818, 987, 998, 1027, 1028], "param_kernel": [806, 820], "param_list": 818, "param_min_samples_split": 281, "param_n_compon": 267, "param_nam": [144, 278, 293, 333, 355, 406, 829, 837, 993, 1032], "param_pca__n_compon": 106, "param_preprocessor__cat__selector__percentil": 104, "param_preprocessor__num__imputer__strategi": 104, "param_rang": [293, 333, 355, 829, 837, 993, 1055], "param_reduce_dim__n_compon": 276, "param_valu": 45, "paramet": [1, 24, 26, 42, 43, 47, 48, 49, 52, 53, 63, 69, 78, 88, 89, 92, 94, 95, 96, 104, 105, 106, 111, 113, 114, 122, 124, 136, 138, 140, 142, 144, 147, 148, 149, 152, 153, 154, 164, 170, 173, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 198, 199, 200, 201, 203, 204, 206, 207, 208, 210, 211, 219, 221, 223, 224, 227, 228, 236, 237, 243, 244, 246, 248, 251, 252, 253, 262, 263, 264, 265, 267, 268, 270, 271, 272, 276, 277, 278, 279, 281, 282, 285, 288, 289, 290, 293, 295, 298, 300, 301, 304, 305, 311, 313, 314, 316, 318, 319, 320, 323, 327, 328, 330, 331, 332, 333, 341, 343, 345, 350, 352, 353, 354, 356, 357, 359, 360, 361, 363, 364, 365, 366, 368, 372, 373, 374, 377, 378, 380, 388, 390, 391, 392, 393, 394, 397, 406, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1024, 1026, 1028, 1029, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "parameter": [363, 425, 620, 621, 628, 629, 803, 804, 994, 995, 1003, 1008, 1014], "parameter_grid": 278, "parameter_nam": [573, 574, 575, 576], "parametergrid": [1, 806, 1041, 1047], "parameters_str": 89, "parametersampl": [1, 820, 1041, 1047, 1051], "parametr": [1, 47, 60, 61, 114, 249, 302, 322, 330, 413, 416, 421, 422, 443, 557, 559, 641, 691, 702, 886, 898, 941, 942, 994, 997, 1000, 1001, 1008, 1011, 1014, 1047, 1049, 1052], "parametrize_with_check": [1, 327, 387, 941, 1049, 1050], "params_str": 289, "parcel": [88, 101, 415], "parch": [193, 332], "pardeep": 1051, "parel": 1043, "parent": [46, 190, 253, 385, 389, 399, 415, 448, 469, 955, 956, 1039, 1056], "parent_hourly_wag": 190, "parenthes": 937, "parenthesi": [75, 385], "paresh": [1048, 1049], "pareto": 221, "pargent": 1008, "pari": [0, 382, 416, 472, 770, 878, 1009, 1053], "pariet": [1022, 1039], "parikh": [1048, 1053, 1054, 1055, 1056, 1057], "paris_in_radian": 770, "paristech": [0, 60, 61, 76, 246], "pariti": 1014, "parizi": 1054, "park": [1044, 1049, 1051, 1054, 1055], "parmet": 1056, "parmind": 1046, "parra": 1047, "parri": [1044, 1045, 1046], "parrot": 359, "pars": [46, 54, 372, 379, 380, 386, 514], "parse_vers": [221, 676], "parser": [46, 51, 154, 271, 291, 327, 331, 502, 1054, 1055], "parsimoni": [420, 1008], "parsing_tim": 46, "parson": [1050, 1052], "part": [0, 43, 66, 70, 85, 95, 104, 114, 124, 127, 141, 144, 147, 151, 157, 164, 165, 166, 170, 180, 188, 198, 253, 255, 265, 271, 272, 274, 292, 313, 320, 323, 325, 361, 374, 380, 382, 385, 387, 391, 393, 398, 399, 403, 411, 413, 414, 415, 419, 420, 422, 423, 425, 452, 455, 499, 500, 501, 527, 537, 543, 548, 580, 590, 591, 592, 619, 631, 799, 875, 893, 895, 896, 897, 898, 899, 900, 901, 987, 988, 990, 995, 999, 1016, 1017, 1018, 1019, 1020, 1022, 1025, 1032, 1034, 1039, 1047, 1048, 1050, 1052, 1054], "part3": 419, "part_of_speech": 423, "partev": [1053, 1054, 1055, 1056], "parthiv": 1051, "parti": [237, 295, 333, 373, 384, 397, 409, 808, 815, 1039, 1050, 1055, 1056], "partial": [1, 42, 46, 50, 84, 115, 116, 156, 188, 189, 237, 245, 329, 332, 382, 399, 402, 417, 418, 420, 422, 425, 470, 488, 489, 490, 491, 502, 507, 540, 542, 547, 568, 595, 638, 639, 663, 794, 836, 838, 839, 866, 867, 868, 871, 883, 884, 887, 890, 919, 995, 1002, 1012, 1019, 1032, 1034, 1036, 1040, 1047, 1048, 1052, 1056], "partial_correl": 50, "partial_depend": [1, 192, 638, 1005, 1040, 1048, 1049, 1050, 1051, 1054, 1055], "partial_fit": [46, 84, 124, 331, 374, 387, 399, 415, 420, 448, 455, 540, 542, 543, 544, 595, 603, 664, 665, 672, 673, 674, 682, 683, 684, 838, 839, 842, 843, 845, 846, 847, 848, 849, 866, 867, 868, 879, 880, 890, 910, 994, 1000, 1002, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1056], "partial_fit_": 1052, "partial_fit_classifi": 46, "partial_fit_param": [603, 838, 839, 842, 843], "partialdependencedisplai": [1, 154, 156, 192, 257, 328, 329, 330, 332, 334, 392, 639, 1005, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "particip": [0, 384, 385, 400, 1022], "particl": 1003, "particular": [0, 42, 49, 52, 63, 71, 73, 74, 94, 104, 110, 122, 129, 132, 148, 151, 154, 155, 179, 186, 191, 192, 219, 221, 227, 251, 271, 274, 278, 280, 286, 298, 307, 311, 318, 327, 328, 331, 360, 361, 368, 372, 373, 379, 380, 383, 384, 385, 387, 389, 390, 391, 393, 394, 398, 399, 403, 415, 416, 419, 420, 422, 423, 424, 425, 452, 475, 479, 502, 550, 569, 615, 659, 664, 669, 678, 680, 690, 693, 718, 734, 791, 842, 929, 931, 988, 990, 992, 994, 998, 1001, 1002, 1003, 1004, 1006, 1008, 1018, 1022, 1031, 1039, 1042, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1056], "particularli": [57, 66, 103, 104, 107, 133, 157, 191, 220, 248, 277, 291, 320, 328, 335, 357, 368, 372, 385, 387, 394, 399, 415, 416, 418, 421, 423, 502, 812, 829, 847, 947, 967, 994, 995, 998, 1000, 1006, 1018, 1022, 1031, 1039, 1044, 1046, 1047, 1053], "partit": [80, 100, 103, 155, 157, 277, 315, 399, 412, 413, 415, 419, 422, 455, 457, 459, 468, 517, 563, 564, 565, 566, 569, 570, 571, 710, 711, 721, 792, 858, 918, 919, 920, 921, 997, 1001, 1004, 1008, 1014, 1032], "partli": [80, 775], "partnership": 1022, "parvu": 382, "pasbi": [1046, 1047], "pascal": 998, "pascual": 1042, "paskov": 1046, "pass": [1, 42, 45, 46, 57, 58, 69, 72, 144, 154, 156, 170, 200, 203, 220, 247, 249, 250, 253, 256, 257, 259, 267, 271, 275, 278, 325, 327, 330, 335, 353, 361, 368, 372, 373, 374, 380, 385, 386, 387, 390, 391, 392, 393, 394, 397, 399, 406, 409, 411, 414, 415, 416, 419, 420, 422, 423, 425, 426, 427, 432, 433, 437, 438, 443, 444, 446, 448, 449, 450, 452, 453, 454, 455, 456, 458, 460, 463, 465, 466, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 497, 498, 501, 502, 503, 509, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 587, 588, 594, 595, 596, 597, 599, 600, 603, 613, 614, 616, 617, 623, 626, 632, 637, 638, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 738, 739, 748, 769, 780, 784, 785, 786, 787, 794, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 881, 882, 883, 884, 885, 887, 889, 890, 891, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 929, 930, 931, 937, 941, 942, 946, 947, 949, 951, 953, 955, 958, 959, 968, 969, 972, 987, 988, 994, 996, 998, 999, 1000, 1001, 1002, 1005, 1008, 1011, 1012, 1013, 1018, 1022, 1023, 1027, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "passiv": [1, 46, 226, 672, 673, 1020, 1034, 1040], "passiveaggress": [374, 423], "passiveaggressiveclassifi": [1, 46, 226, 372, 374, 994, 999, 1040, 1043, 1044, 1046, 1047, 1050, 1052, 1057], "passiveaggressiveregressor": [1, 374, 994, 1040, 1043, 1046, 1047, 1050, 1052, 1057], "passo": [0, 405, 1039, 1040], "passthrough": [42, 105, 148, 191, 192, 219, 237, 256, 324, 332, 416, 470, 473, 573, 574, 869, 870, 1008, 1048, 1050, 1053, 1054, 1056], "passthrough_numer": [219, 237], "passthroughpassthrough": [192, 324], "past": [49, 51, 389, 390, 393, 397, 400, 419, 420, 422, 544, 561, 562, 684, 1022, 1024, 1055], "pat": [634, 988], "patch": [1, 69, 84, 256, 262, 263, 264, 267, 268, 272, 380, 389, 397, 420, 422, 561, 562, 589, 590, 593, 1039, 1047], "patch_height": [589, 590, 593], "patch_siz": [84, 127, 423, 589, 590, 593], "patch_width": [589, 590, 593], "patchextractor": [1, 423, 1055], "patel": [1047, 1049, 1050, 1051, 1053], "path": [1, 46, 54, 188, 197, 204, 205, 208, 213, 223, 235, 355, 363, 379, 383, 385, 389, 393, 394, 399, 409, 447, 451, 456, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 514, 515, 554, 563, 564, 569, 570, 571, 572, 599, 600, 603, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 687, 688, 689, 690, 691, 692, 694, 870, 871, 917, 918, 919, 920, 921, 952, 987, 994, 995, 1004, 1018, 1019, 1039, 1040, 1043, 1045, 1046, 1048, 1049, 1051, 1052, 1054, 1055], "path_length": 952, "path_method": [694, 995], "pathak": [1054, 1055], "patheffect": 74, "pathlib": [46, 1054, 1055], "pathlik": [502, 1055], "patholog": [86, 997, 1045], "pathwai": 386, "pati": 1041, "patienc": [393, 399], "patient": [45, 162, 173, 187, 382, 393, 414, 419, 994, 1030], "patil": [1053, 1056], "paton": 1052, "patric": [1051, 1052], "patricio": 1053, "patrick": [1046, 1047, 1052, 1053, 1056, 1057], "patrini": [1044, 1045, 1046], "pattaniyil": 1049, "pattern": [42, 51, 57, 97, 114, 120, 123, 131, 175, 186, 188, 192, 203, 223, 253, 256, 330, 352, 359, 360, 361, 368, 382, 385, 387, 400, 412, 415, 416, 420, 422, 423, 454, 470, 472, 510, 538, 540, 547, 561, 562, 644, 714, 731, 747, 775, 794, 795, 803, 890, 990, 992, 994, 998, 999, 1005, 1013, 1015, 1018, 1019, 1022, 1051], "patterson": [500, 1044], "paul": [380, 1042, 1045, 1046, 1047, 1048, 1052, 1053], "paula": [1049, 1050, 1057], "pauli": 1044, "paulo": [1046, 1052, 1054], "paus": 80, "pava": 641, "pave": 1030, "pavel": [1040, 1048], "pavlo": [1047, 1048], "pavlyk": [1047, 1048, 1049, 1050], "pawel": 1048, "pawe\u0142": [1042, 1046, 1051, 1052], "payn": 1049, "pazzani": 63, "pb_q": [330, 994], "pbl": 151, "pc": [56, 341, 361, 380], "pca": [1, 10, 41, 44, 68, 79, 85, 102, 103, 105, 107, 108, 117, 123, 126, 133, 134, 165, 188, 216, 240, 242, 249, 251, 254, 258, 276, 285, 288, 298, 302, 307, 316, 330, 368, 377, 387, 399, 411, 415, 416, 421, 431, 479, 482, 490, 502, 508, 510, 520, 538, 539, 540, 541, 545, 546, 549, 550, 555, 649, 664, 694, 696, 698, 702, 806, 832, 836, 859, 866, 869, 870, 872, 880, 888, 890, 990, 992, 995, 1001, 1008, 1012, 1014, 1019, 1028, 1033, 1034, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1057], "pca0": 431, "pca1": [416, 431], "pca2": [416, 431], "pca_2": 117, "pca__n_compon": [106, 1028], "pca_back_proj_ax": 129, "pca_estim": 124, "pca_proj_ax": 129, "pca_scor": 131, "pcapca": [105, 258], "pcd": [866, 1003], "pchelintsev": 1051, "pclass": [104, 193, 260, 327, 331, 332], "pcolor": 176, "pcolormesh": [69, 157, 166, 202, 301, 306, 344, 348, 352, 637], "pcr": [117, 418], "pd": [42, 50, 61, 104, 105, 138, 144, 145, 151, 156, 172, 186, 190, 191, 192, 193, 194, 198, 203, 208, 219, 223, 227, 237, 257, 260, 267, 275, 277, 278, 280, 288, 289, 291, 295, 323, 324, 325, 330, 331, 355, 359, 360, 390, 399, 416, 470, 472, 633, 634, 635, 636, 638, 784, 928, 930, 931, 987, 988, 1005, 1008, 1050, 1052, 1053, 1054, 1056], "pd2000": 998, "pd_": 1005, "pd_line_kw": 638, "pd_result": 638, "pdb": 393, "pdbcl": 393, "pdf": [173, 277, 303, 318, 382, 385, 415, 424, 448, 455, 537, 540, 543, 547, 647, 650, 655, 664, 670, 672, 673, 677, 682, 685, 688, 689, 691, 692, 698, 847, 848, 859, 866, 903, 905, 994, 1011, 1014, 1021, 1035, 1039], "pdist": [698, 784, 787], "pdp": [1, 638, 1005, 1053], "pdp_lim": 638, "pdp_line_kw": 638, "pe": 589, "pe_tran": 589, "peai": 1048, "peak": [42, 51, 63, 192, 413, 419, 1053], "pear": 999, "pearson": [1, 612, 615, 1052], "pearu": 1039, "pedersen": [1043, 1055], "pedigo": [1051, 1052], "pedregosa": [0, 206, 224, 240, 310, 405, 1039, 1040, 1041, 1042, 1043, 1045], "pedro": [104, 1040, 1042, 1043, 1047], "peek": [192, 385, 1005], "peer": 1022, "peev": [1047, 1050], "pegaso": 1012, "pei": [415, 1046], "peixinho": 1053, "pelennor": 1053, "penal": [1, 52, 65, 114, 159, 203, 208, 212, 219, 223, 235, 237, 323, 355, 415, 417, 420, 422, 424, 475, 476, 477, 478, 479, 480, 481, 482, 484, 567, 568, 653, 658, 659, 667, 669, 682, 711, 721, 740, 792, 801, 883, 910, 911, 917, 994, 998, 1000, 1002, 1012, 1013, 1030], "penalis": [204, 217, 234, 702], "penalti": [1, 24, 45, 48, 65, 114, 188, 197, 198, 203, 204, 208, 212, 219, 223, 226, 234, 235, 248, 285, 313, 330, 341, 353, 359, 372, 393, 397, 417, 420, 424, 477, 478, 479, 480, 481, 482, 484, 508, 537, 543, 544, 545, 546, 548, 549, 553, 554, 603, 649, 652, 653, 654, 655, 658, 659, 660, 663, 664, 665, 666, 667, 668, 674, 675, 676, 678, 682, 684, 686, 687, 693, 820, 890, 910, 911, 913, 915, 916, 917, 987, 994, 997, 1002, 1008, 1012, 1013, 1019, 1030, 1032, 1041, 1044, 1046, 1048, 1049, 1051, 1052, 1054, 1055], "peng": [685, 994, 1045, 1046, 1047, 1049, 1051], "peopl": [1, 44, 103, 191, 255, 280, 359, 360, 373, 374, 380, 382, 384, 385, 389, 400, 421, 499, 500, 647, 847, 1017, 1028], "pep": [50, 393, 1039], "pep073": 386, "pep101": 389, "pep257": 399, "pep8": [387, 389, 393], "pepsi": 50, "per": [42, 48, 57, 69, 82, 87, 98, 121, 143, 144, 148, 180, 182, 191, 192, 219, 234, 237, 256, 260, 263, 273, 284, 286, 318, 324, 329, 334, 335, 355, 359, 361, 372, 380, 381, 385, 390, 391, 394, 397, 399, 413, 415, 419, 420, 421, 422, 423, 425, 452, 454, 456, 463, 467, 470, 474, 493, 502, 506, 508, 509, 510, 514, 516, 518, 521, 529, 538, 540, 541, 542, 545, 547, 549, 555, 556, 567, 568, 575, 589, 594, 597, 616, 617, 638, 639, 647, 648, 664, 665, 672, 673, 674, 677, 679, 680, 681, 682, 684, 698, 702, 719, 722, 726, 728, 747, 760, 764, 765, 787, 789, 803, 804, 831, 838, 839, 840, 842, 843, 846, 848, 866, 869, 875, 877, 879, 880, 883, 884, 890, 891, 908, 910, 911, 912, 913, 914, 915, 916, 935, 936, 947, 973, 987, 990, 994, 997, 998, 999, 1002, 1005, 1012, 1013, 1014, 1017, 1018, 1030, 1032, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1055, 1056], "perc": 272, "percal": 391, "percent": [138, 498, 606, 1011], "percent10": [256, 498], "percentag": [1, 51, 88, 132, 148, 210, 237, 272, 280, 283, 419, 424, 540, 547, 550, 555, 599, 600, 654, 675, 686, 709, 740, 752, 824, 825, 826, 840, 922, 924, 999, 1014, 1041, 1045, 1051, 1052], "percentil": [1, 48, 51, 104, 151, 154, 256, 260, 318, 372, 598, 601, 602, 604, 605, 606, 609, 612, 638, 639, 754, 1008, 1044, 1052], "percentile_5_predict": 51, "percentile_95_predict": 51, "percentile_perf_in_u": 48, "percentiles_class": 272, "percept": [168, 192, 1005], "perceptron": [1, 46, 66, 147, 157, 166, 177, 179, 188, 226, 229, 235, 257, 312, 320, 321, 342, 353, 357, 374, 397, 423, 520, 521, 528, 672, 682, 836, 866, 867, 868, 871, 890, 996, 999, 1003, 1012, 1019, 1020, 1034, 1043, 1045, 1046, 1047, 1051], "percol": 73, "perdisci": [415, 448], "perdok": 1054, "pere": 1056, "peredachi": [613, 614], "pereira": [1044, 1047, 1048], "peretti": 1054, "perez": [1047, 1054], "perf_count": 256, "perfect": [57, 62, 71, 103, 113, 127, 129, 215, 219, 359, 360, 385, 389, 415, 419, 559, 560, 696, 700, 710, 711, 714, 723, 732, 734, 737, 743, 749, 762, 763, 791, 792, 801, 994, 998, 1001, 1013, 1022, 1030, 1053], "perfectli": [62, 63, 71, 280, 292, 352, 402, 415, 422, 444, 573, 612, 710, 711, 721, 723, 742, 743, 763, 792, 801, 883, 993, 995, 998, 1013, 1052, 1053], "perform": [1, 24, 26, 28, 29, 40, 42, 45, 51, 54, 56, 60, 61, 62, 67, 70, 72, 74, 82, 83, 87, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 107, 110, 117, 119, 127, 133, 136, 138, 144, 146, 148, 149, 150, 152, 153, 154, 158, 159, 164, 168, 172, 173, 176, 184, 186, 187, 188, 191, 192, 193, 194, 196, 203, 208, 219, 221, 223, 225, 226, 227, 236, 237, 240, 241, 243, 246, 251, 254, 256, 263, 264, 267, 269, 271, 272, 273, 274, 275, 277, 278, 279, 282, 283, 285, 286, 288, 290, 291, 293, 295, 297, 298, 311, 316, 318, 320, 322, 324, 325, 327, 333, 334, 336, 338, 339, 348, 351, 352, 355, 359, 361, 368, 371, 373, 374, 380, 382, 387, 388, 389, 391, 393, 394, 397, 398, 399, 402, 406, 409, 410, 411, 412, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 437, 446, 448, 449, 450, 452, 453, 454, 456, 458, 460, 461, 465, 467, 474, 475, 488, 489, 490, 491, 500, 508, 518, 521, 537, 538, 539, 541, 543, 548, 549, 550, 551, 552, 554, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 600, 607, 608, 609, 616, 617, 633, 636, 637, 644, 646, 651, 657, 660, 661, 662, 664, 670, 671, 672, 673, 674, 676, 679, 681, 682, 683, 684, 688, 689, 691, 693, 695, 696, 699, 700, 703, 709, 710, 711, 713, 714, 718, 719, 732, 735, 736, 744, 746, 748, 761, 762, 763, 784, 789, 790, 792, 793, 794, 800, 801, 802, 803, 804, 806, 809, 810, 817, 818, 820, 824, 831, 832, 833, 835, 836, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 857, 859, 865, 866, 867, 868, 870, 871, 873, 876, 877, 879, 880, 882, 883, 884, 886, 887, 890, 891, 893, 895, 896, 897, 899, 900, 901, 905, 906, 908, 912, 913, 914, 915, 916, 918, 919, 920, 921, 930, 931, 971, 982, 987, 988, 990, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1023, 1024, 1027, 1030, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "performancetip": 391, "perhap": [103, 147, 382, 384, 393, 399, 421, 1018], "perimet": [173, 382], "period": [1, 51, 154, 175, 180, 184, 389, 399, 400, 413, 425, 621, 827, 889, 1047, 1052, 1054], "periodic_spline_transform": 42, "periodicity_bound": [175, 180, 184, 621], "peripheri": 415, "perla": 1042, "perm_scores_iri": 283, "perm_scores_rand": 283, "perm_sorted_idx": 194, "permalink": 389, "perman": 393, "permiss": [384, 389, 400, 403, 1022, 1054], "permit": [416, 473, 594, 595, 597, 806, 809, 810, 820, 832, 871, 872, 998, 999, 1000, 1045], "permut": [1, 57, 58, 71, 113, 146, 152, 166, 168, 188, 189, 235, 269, 277, 322, 325, 340, 402, 410, 415, 422, 470, 502, 506, 510, 565, 566, 570, 571, 633, 636, 640, 685, 710, 711, 723, 742, 743, 761, 763, 801, 823, 825, 835, 836, 870, 884, 915, 918, 919, 947, 967, 969, 972, 998, 1012, 1019, 1027, 1030, 1034, 1039, 1045, 1052, 1054], "permutation_import": [1, 145, 146, 152, 193, 194, 327, 422, 559, 560, 563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921, 1006, 1049, 1051, 1052, 1056], "permutation_scor": 835, "permutation_test_scor": [1, 283, 406, 419, 1039, 1046, 1051], "permuted_categori": 325, "perp_tol": 542, "perpendicular": [69, 353], "perperogl": 1008, "perplex": [188, 238, 239, 241, 243, 298, 520, 531, 542, 698, 995, 1019, 1044, 1046, 1053], "perri": 1049, "perrin": 1045, "perrot": [0, 1039], "persian": 1017, "persist": [393, 397, 420, 452, 616, 617, 866, 1003, 1017, 1034, 1045, 1048], "persola": 1047, "person": [44, 191, 271, 280, 380, 384, 419, 423, 499, 500, 501, 1008, 1028, 1047], "personal_statu": 271, "perspect": [89, 94, 219, 291, 372, 380, 397, 400, 536, 649, 910, 991], "pertin": 219, "perturb": [191, 236, 316, 420, 422, 997], "peru": [49, 311, 380, 504], "pervas": [368, 385], "pessimist": [150, 422], "pessoa": 1052, "pestrickland": 1045, "pet": [330, 334, 794, 998], "pet_cat": 330, "pet_dog": 330, "pet_fish": 330, "petal": [79, 120, 132, 134, 147, 260, 329, 332, 382, 416, 923, 1014, 1029, 1030], "petal_col": 332, "petar": 1054, "pete": [1046, 1050, 1051], "peter": [0, 49, 97, 150, 152, 153, 278, 359, 360, 405, 415, 454, 456, 463, 655, 798, 799, 994, 998, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1056], "peterlongo": 1056, "peterson": [1039, 1041], "petfood": 1022, "petrov": [1046, 1047, 1055], "petrushev": 1048, "pe\u00f1a": 1043, "pfaffel": 1052, "pfahring": [841, 999], "pfe": 50, "pfister": 1008, "pfizer": 50, "pft": 220, "pg": [50, 391, 655, 994, 1044], "pg_i": 655, "pgithub": 1051, "ph": 1051, "pham": [196, 990, 1046], "phan": 420, "pharmaceut": 382, "pharuj": 256, "phase": [42, 203, 213, 372, 633, 990, 995, 1001, 1022, 1047, 1049], "phase_nois": 74, "phd": [0, 415, 422, 1018, 1022], "phenol": 382, "phenomena": 180, "phenomenon": [360, 1008], "phi": [74, 420, 422, 749, 876, 990, 998, 1008, 1013], "phil": [91, 1044, 1055], "philipp": [1041, 1042, 1045, 1054], "phillip": [1, 49, 311, 380, 504], "phlypo": 1042, "phongpanagnam": 1052, "phongpanangam": 1052, "photo": 82, "photogrammetr": 994, "php": [998, 1017], "phrase": 423, "phy": [613, 614], "phyo": 1053, "physic": [1, 103, 144, 373, 511, 963, 994, 1055], "physician": 414, "physiolog": [280, 382, 1030], "pi": [42, 52, 69, 73, 74, 125, 133, 156, 158, 168, 175, 199, 203, 207, 213, 220, 241, 262, 263, 264, 267, 268, 292, 311, 328, 334, 366, 403, 421, 425, 522, 523, 524, 621, 648, 992, 993, 994, 1000, 1031], "pianomania": 1044, "pick": [82, 89, 94, 194, 254, 285, 331, 337, 380, 385, 389, 415, 422, 449, 466, 529, 679, 920, 921, 987, 994, 995, 997, 1012, 1050], "pickl": [389, 399, 423, 595, 850, 851, 1017, 1018, 1034, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "pickleabl": [874, 1045], "pickup": 1047, "pico": [1042, 1043], "pict": [840, 999], "pictur": [50, 54, 58, 70, 82, 100, 188, 250, 268, 380, 400, 415, 420, 423, 468, 499, 500, 527, 1018, 1019], "piec": [69, 81, 220, 373, 997], "piecewis": [133, 330, 412, 989, 994, 1008, 1014], "pierr": [1039, 1047, 1048, 1050, 1052, 1054, 1056, 1057], "pierreablin": 1047, "pierreattard": [1052, 1053], "pierretallott": [1047, 1048, 1049], "pierron": 1042, "piet": [1053, 1054], "pieter": [54, 1045, 1046, 1053], "pietro": [1039, 1042, 1056], "pietruh": 1047, "pig": 789, "pillow": [385, 403, 408], "pim": 1048, "pin": [391, 409], "pinaki": 1047, "pinbal": [1, 51, 151, 154, 330, 422, 568, 676, 729, 754, 994, 1052, 1053], "pinball_loss_05": 51, "pinball_loss_50": 51, "pinball_loss_95": 51, "ping": [903, 1010, 1045, 1046], "pink": 199, "pinki": 1053, "pinot": 324, "pinto": 1039, "pintor": 1050, "pinvh": [1046, 1048], "piontek": 1055, "piotr": [1047, 1048], "pip": [298, 327, 328, 329, 330, 331, 332, 333, 334, 335, 373, 383, 385, 389, 391, 403, 409, 411, 1014], "pip3": [383, 403], "pipe": [105, 106, 148, 171, 253, 258, 276, 324, 329, 330, 398, 406, 416, 423, 596, 870, 895, 896, 898, 899, 900, 901, 987, 1008, 1028], "pipe_sgd": 233, "pipegraph": 397, "pipelin": [1, 6, 42, 66, 88, 92, 104, 107, 108, 117, 143, 144, 148, 165, 167, 169, 171, 172, 173, 186, 187, 192, 193, 196, 198, 207, 208, 219, 220, 225, 233, 237, 240, 245, 246, 247, 249, 251, 256, 257, 260, 269, 271, 274, 276, 277, 284, 285, 288, 291, 292, 298, 300, 301, 306, 307, 313, 316, 320, 323, 325, 327, 328, 329, 330, 331, 332, 333, 341, 359, 360, 368, 372, 377, 379, 380, 385, 388, 399, 406, 409, 419, 423, 425, 429, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 494, 508, 521, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 613, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 703, 704, 706, 707, 708, 719, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 820, 824, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 988, 990, 994, 1001, 1002, 1007, 1008, 1012, 1013, 1017, 1018, 1019, 1020, 1022, 1024, 1026, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1056], "pipelineifittedpipelin": [104, 143, 170, 191, 193, 247, 257, 260, 284, 331], "pipelineinot": [159, 248, 258, 278, 291, 324, 328], "pipelinepipelin": [104, 105, 258, 271], "pita": 1056, "pitfal": [173, 188, 189, 190, 193, 215, 223, 224, 277, 329, 398, 399, 402, 419, 471, 473, 502, 659, 678, 679, 707, 759, 821, 833, 836, 871, 883, 890, 994, 1019, 1034], "pitkin": [192, 1005], "pitt": 56, "pitter": 1054, "pivot": [80, 288, 289], "pivot_t": 288, "pixel": [1, 43, 44, 52, 57, 67, 81, 82, 87, 124, 137, 145, 171, 188, 193, 194, 196, 250, 275, 315, 316, 382, 415, 420, 422, 423, 424, 499, 500, 501, 570, 591, 592, 613, 614, 640, 1001, 1003, 1014, 1019, 1028, 1031], "pixelwis": 124, "pixi": 409, "piyg": 320, "pkdd": 0, "pkg": 383, "pkgsrc": 403, "pkl": 409, "pl": [1, 51, 106, 117, 180, 223, 334, 382, 418, 488, 489, 490, 491, 1044], "place": [1, 42, 94, 247, 257, 302, 372, 385, 386, 387, 390, 392, 400, 413, 423, 425, 447, 451, 452, 488, 489, 490, 521, 587, 596, 634, 636, 637, 774, 787, 803, 893, 895, 896, 897, 898, 899, 900, 901, 977, 978, 1017, 1039, 1046, 1049, 1050, 1052, 1056, 1057], "placehold": [56, 389, 633, 634, 635, 636, 821, 822, 825, 826, 988], "plagre": 1046, "plai": [125, 152, 177, 202, 228, 270, 309, 344, 345, 372, 1032], "plain": [350, 425, 663, 1012], "plan": [50, 379, 383, 385, 386, 400, 409, 1008, 1042], "planar": 415, "plane": [50, 173, 231, 251, 304, 350, 352, 353, 357, 382, 458, 468, 992, 994, 1013, 1030], "plant": [283, 286, 287, 378, 998, 1034], "plasma": 318, "plasma_r": 318, "plateau": [144, 149, 172, 271, 275, 279], "platform": [388, 399, 400, 1017, 1021, 1022, 1044, 1047, 1048, 1050, 1052, 1053, 1056], "platt": [413, 443, 912, 913, 915, 916, 1013], "platypu": 359, "pldtc325": 1046, "pleas": [0, 1, 50, 54, 62, 104, 105, 143, 145, 146, 152, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 223, 247, 248, 249, 251, 253, 256, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 298, 308, 316, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 352, 367, 373, 379, 380, 383, 385, 386, 387, 389, 393, 397, 398, 399, 403, 406, 409, 411, 415, 422, 423, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 502, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 609, 616, 617, 633, 634, 635, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 902, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 998, 1002, 1008, 1012, 1013, 1017, 1018, 1021, 1023, 1030, 1032, 1039, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "pleasant": [384, 1022], "plenti": 61, "plgreenliru": 1050, "plo": [379, 613, 614], "plot": [1, 42, 43, 44, 49, 50, 51, 53, 61, 62, 63, 64, 66, 67, 68, 70, 71, 74, 76, 77, 79, 88, 89, 90, 92, 93, 94, 95, 96, 99, 105, 106, 107, 108, 111, 112, 113, 117, 118, 124, 127, 128, 131, 132, 133, 134, 137, 138, 140, 141, 142, 143, 145, 149, 150, 151, 153, 154, 156, 157, 158, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 193, 194, 196, 197, 201, 202, 204, 206, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 231, 232, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 249, 250, 252, 254, 255, 260, 262, 263, 264, 266, 268, 269, 270, 271, 272, 277, 278, 280, 282, 283, 287, 288, 289, 291, 292, 295, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 325, 328, 331, 332, 333, 334, 338, 339, 342, 343, 344, 348, 349, 350, 353, 354, 355, 356, 357, 360, 361, 362, 363, 365, 366, 367, 385, 388, 394, 397, 402, 403, 410, 413, 415, 417, 419, 421, 422, 444, 447, 452, 456, 462, 470, 477, 502, 507, 508, 510, 518, 521, 525, 529, 559, 563, 566, 568, 570, 571, 575, 576, 616, 628, 637, 638, 639, 663, 664, 678, 682, 703, 704, 706, 707, 708, 709, 724, 733, 741, 767, 788, 790, 793, 794, 795, 806, 812, 823, 829, 831, 832, 833, 834, 837, 839, 848, 852, 868, 871, 883, 884, 885, 887, 890, 910, 912, 915, 918, 919, 924, 991, 992, 994, 995, 997, 998, 1001, 1002, 1004, 1012, 1013, 1014, 1017, 1018, 1019, 1027, 1028, 1030, 1034, 1040, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "plot_": [330, 403], "plot_2d": [122, 239], "plot_3d": 239, "plot_accuraci": 46, "plot_adaboost_multiclass": [138, 1019], "plot_adaboost_regress": [139, 1019], "plot_adaboost_twoclass": [140, 1019], "plot_adjusted_for_chance_measur": [71, 1019], "plot_affinity_propag": [72, 446, 460, 1019], "plot_agglomerative_clust": [73, 1019], "plot_agglomerative_clustering_metr": [74, 1019], "plot_agglomerative_dendrogram": [75, 1019], "plot_all_sc": [318, 1019], "plot_anomaly_comparison": [246, 1019], "plot_ard": [198, 650, 1019], "plot_arg": 314, "plot_bayesian_ridge_curvefit": [199, 1019], "plot_benchmark_throughput": 48, "plot_bias_vari": [141, 1019], "plot_bicluster_newsgroup": [56, 1019], "plot_birch_vs_minibatchkmean": [76, 1019], "plot_bisect_kmean": [77, 1019], "plot_caching_nearest_neighbor": [300, 1019], "plot_calibr": [60, 1019], "plot_calibration_curv": [61, 1019], "plot_calibration_multiclass": [62, 1019], "plot_causal_interpret": [190, 1019], "plot_chance_level": [256, 271, 284, 286, 287, 706, 708, 1055], "plot_classif": [301, 1019], "plot_classification_prob": [65, 1019], "plot_classifier_chain_yeast": [297, 1019], "plot_classifier_comparison": [66, 320, 1019], "plot_clust": 86, "plot_cluster_comparison": [78, 1019], "plot_cluster_iri": [79, 1019], "plot_coin_segment": [80, 1019], "plot_coin_ward_segment": [81, 1019], "plot_color": [140, 364], "plot_color_quant": [82, 1019], "plot_column_transform": [103, 1019], "plot_column_transformer_mixed_typ": [104, 1019], "plot_compare_calibr": [63, 1019], "plot_compare_cross_decomposit": [116, 1019], "plot_compare_gpr_krr": [175, 1019], "plot_compare_method": [239, 1019], "plot_compare_reduct": [105, 1019], "plot_concentration_prior": [262, 1019], "plot_confusion_matrix": [270, 327, 1019, 1049, 1050, 1051, 1052], "plot_cost_complexity_prun": [363, 1019], "plot_cost_sensitive_learn": [271, 1019], "plot_covariance_estim": [110, 1019], "plot_custom_kernel": [344, 1019], "plot_cv_diabet": [164, 1019], "plot_cv_indic": [272, 1019], "plot_cv_predict": [273, 1019], "plot_cyclical_feature_engin": [42, 1019], "plot_dbscan": [83, 426, 450, 1019], "plot_decision_funct": 357, "plot_dendrogram": 75, "plot_det": [274, 1019], "plot_det_curv": [1051, 1052], "plot_dict_face_patch": [84, 1019], "plot_digit": 43, "plot_digits_agglomer": [85, 1019], "plot_digits_classif": [67, 1019], "plot_digits_classification_exercis": [165, 1019], "plot_digits_denois": [43, 1019], "plot_digits_kde_sampl": [302, 1019], "plot_digits_last_imag": [119, 1019], "plot_digits_linkag": [86, 1019], "plot_digits_pip": [106, 1019], "plot_discret": [319, 1019], "plot_discretization_classif": [320, 1019], "plot_discretization_strategi": [321, 1019], "plot_display_object_visu": [247, 1019], "plot_distribut": 318, "plot_document_classification_20newsgroup": [359, 1019], "plot_document_clust": [360, 1019], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [200, 1019], "plot_ellips": [69, 262], "plot_embed": 240, "plot_ensemble_oob": [142, 1019], "plot_estimator_represent": [248, 1019], "plot_f_test_vs_mi": [168, 1019], "plot_face_compress": [87, 1019], "plot_face_recognit": [44, 1019], "plot_faces_decomposit": [124, 1019], "plot_feature_agglomeration_vs_univariate_select": [88, 1019], "plot_feature_effect": 359, "plot_feature_select": [169, 1019], "plot_feature_selection_pipelin": [170, 1019], "plot_feature_transform": [143, 1019], "plot_feature_union": [107, 1019], "plot_fig": 216, "plot_forest_hist_grad_boosting_comparison": [144, 1019], "plot_forest_import": [145, 1019], "plot_forest_importances_fac": [146, 1019], "plot_forest_iri": [147, 1019], "plot_galleri": [44, 124, 1028], "plot_gmm": [263, 1019], "plot_gmm_covari": [264, 1019], "plot_gmm_init": [265, 1019], "plot_gmm_pdf": [266, 1019], "plot_gmm_select": [267, 1019], "plot_gmm_sin": [268, 1019], "plot_gpc": [176, 1019], "plot_gpc_iri": [177, 1019], "plot_gpc_isoprob": [178, 1019], "plot_gpc_xor": [179, 1019], "plot_gpr_co2": [180, 1019], "plot_gpr_noisi": [181, 1019], "plot_gpr_noisy_target": [182, 1019], "plot_gpr_on_structured_data": [183, 1019], "plot_gpr_prior_posterior": [184, 1019], "plot_gpr_sampl": 184, "plot_gradient_boosting_categor": [148, 1019], "plot_gradient_boosting_early_stop": [149, 1019], "plot_gradient_boosting_oob": [150, 1019], "plot_gradient_boosting_quantil": [151, 1019], "plot_gradient_boosting_regress": [152, 1019], "plot_gradient_boosting_regular": [153, 1019], "plot_grid_search_digit": [275, 1019], "plot_grid_search_refit_cal": [276, 1019], "plot_grid_search_stat": [277, 1019], "plot_grid_search_text_feature_extract": [278, 1019], "plot_hashing_vs_dict_vector": [361, 1019], "plot_hdbscan": [89, 1019], "plot_hgbt_regress": [154, 1019], "plot_huber_vs_ridg": [201, 1019], "plot_hyperplan": [211, 228, 254], "plot_ica_blind_source_separ": [125, 1019], "plot_ica_vs_pca": [126, 1019], "plot_idx": 147, "plot_image_denois": [127, 1019], "plot_incremental_pca": [128, 1019], "plot_indic": 280, "plot_inductive_clust": [90, 1019], "plot_influ": 45, "plot_info": 148, "plot_iris_dataset": [120, 1019], "plot_iris_dtc": [364, 1019], "plot_iris_exercis": [166, 1019], "plot_iris_logist": [202, 1019], "plot_iris_svc": [345, 1019], "plot_isolation_forest": [155, 1019], "plot_isotonic_regress": [249, 1019], "plot_iterative_imputer_variants_comparison": [186, 1019], "plot_johnson_lindenstrauss_bound": [250, 1019], "plot_kde_1d": [303, 1019], "plot_kernel_approxim": [251, 1019], "plot_kernel_pca": [129, 1019], "plot_kernel_ridge_regress": [252, 1019], "plot_kind": 42, "plot_kmeans_assumpt": [91, 1019], "plot_kmeans_digit": [92, 1019], "plot_kmeans_plusplu": [93, 1019], "plot_kmeans_silhouette_analysi": [94, 1019], "plot_kmeans_stability_low_dim_dens": [95, 1019], "plot_label_propagation_digit": [337, 1019], "plot_label_propagation_digits_active_learn": [338, 1019], "plot_label_propagation_structur": [339, 1019], "plot_lasso_and_elasticnet": [203, 1019], "plot_lasso_coordinate_descent_path": [204, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 1019], "plot_lasso_dense_vs_sparse_data": [205, 1019], "plot_lasso_lar": [206, 1019], "plot_lasso_lars_": [207, 1019], "plot_lasso_model_select": [208, 653, 659, 1019], "plot_lda": [68, 1019], "plot_lda_qda": [69, 1019], "plot_learning_curv": [279, 1019], "plot_likelihood_ratio": [280, 1019], "plot_linear_model_coefficient_interpret": [191, 1019], "plot_linearsvc_support_vector": [346, 1019], "plot_linkage_comparison": [96, 1019], "plot_lle_digit": [240, 1019], "plot_lof_novelty_detect": [304, 1019], "plot_lof_outlier_detect": [305, 1019], "plot_logist": [209, 1019], "plot_logistic_l1_l2_spars": [210, 1019], "plot_logistic_multinomi": [211, 1019], "plot_logistic_path": [212, 1019], "plot_lw_vs_oa": [111, 1019], "plot_mahalanobis_dist": [112, 1019], "plot_manifold_spher": [241, 1019], "plot_map_data_to_norm": [322, 1019], "plot_md": [242, 1019], "plot_mean_shift": [97, 467, 1019], "plot_metadata_rout": [253, 1019], "plot_method": [47, 69, 202, 233, 301, 306, 344, 346, 347, 349, 350, 352, 637], "plot_mini_batch_kmean": [98, 1019], "plot_missing_valu": [187, 1019], "plot_mlp_alpha": [313, 1019], "plot_mlp_training_curv": [314, 1019], "plot_mnist_filt": [315, 1019], "plot_model_complexity_influ": [45, 1019], "plot_monotonic_constraint": [156, 1019], "plot_multi_metric_evalu": [281, 1019], "plot_multi_task_lasso_support": [213, 1019], "plot_multiclass_overview": [295, 1019], "plot_multilabel": [254, 1019], "plot_multioutput_face_complet": [255, 1019], "plot_n_features_influ": 48, "plot_nca_classif": [306, 1019], "plot_nca_dim_reduct": [307, 1019], "plot_nca_illustr": [308, 1019], "plot_nearest_centroid": [309, 1019], "plot_nested_cross_validation_iri": [282, 1019], "plot_nnl": [214, 1019], "plot_num": [78, 96, 246], "plot_obs_pr": 237, "plot_ol": [215, 1019], "plot_ols_3d": [216, 1019], "plot_ols_ridge_vari": [217, 1019], "plot_omp": [218, 1019], "plot_on_dataset": 314, "plot_oneclass": [347, 1019], "plot_opt": [99, 1019], "plot_out_of_core_classif": [46, 1019], "plot_outlier_detection_bench": [256, 1019], "plot_outlier_detection_win": [47, 1019], "plot_partial_depend": [192, 327, 328, 329, 1019, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "plot_partial_dependence_visualization_api": [257, 1019], "plot_pca_iri": [130, 1019], "plot_pca_vs_fa_model_select": [131, 1019], "plot_pca_vs_lda": [132, 1019], "plot_pcr_vs_pl": [117, 1019], "plot_permutation_import": [193, 194, 1019], "plot_permutation_importance_multicollinear": [194, 1019], "plot_permutation_tests_for_classif": [283, 1019], "plot_pipeline_displai": [258, 1019], "plot_poisson_regression_non_normal_loss": [219, 1019], "plot_polynomial_interpol": [220, 885, 889, 1019], "plot_precision_recal": [284, 1019], "plot_precision_recall_curv": [327, 1049, 1051, 1052], "plot_prediction_lat": [48, 1019], "plot_quantile_regress": [221, 1019], "plot_random_dataset": [121, 1019], "plot_random_forest_embed": [157, 1019], "plot_random_forest_regression_multioutput": [158, 1019], "plot_random_multilabel_dataset": [122, 1019], "plot_randomized_search": [285, 1019], "plot_rang": 140, "plot_ransac": [222, 1019], "plot_rbf_paramet": [348, 1019], "plot_rbm_logistic_classif": [316, 1019], "plot_regress": [310, 1019], "plot_release_highlights_0_22_0": [327, 1019], "plot_release_highlights_0_23_0": [328, 1019], "plot_release_highlights_0_24_0": [329, 1019], "plot_release_highlights_1_0_0": [330, 1019], "plot_release_highlights_1_1_0": [331, 1019], "plot_release_highlights_1_2_0": [332, 1019], "plot_release_highlights_1_3_0": [333, 1019], "plot_release_highlights_1_4_0": [334, 1019], "plot_release_highlights_1_5_0": [335, 1019], "plot_result": [69, 148, 262, 263, 268], "plot_rfe_digit": [171, 1019], "plot_rfe_with_cross_valid": [172, 1019], "plot_ridge_coeff": [223, 1019], "plot_ridge_path": [224, 1019], "plot_robust_fit": [225, 1019], "plot_robust_vs_empirical_covari": [113, 1019], "plot_roc": [286, 1019], "plot_roc_crossv": [287, 1019], "plot_roc_curv": [327, 1049, 1051], "plot_roc_curve_visualization_api": [259, 1019], "plot_roc_pr_curv": 271, "plot_sampl": [126, 268], "plot_scalable_poly_kernel": [196, 1019], "plot_scaling_import": [323, 1019], "plot_scatt": 90, "plot_segmentation_toi": [100, 1019], "plot_select_from_model_diabet": [173, 1019], "plot_self_training_varying_threshold": [340, 1019], "plot_semi_supervised_newsgroup": [341, 1019], "plot_semi_supervised_versus_svm_iri": [342, 1019], "plot_separating_hyperplan": [349, 1019], "plot_separating_hyperplane_unbalanc": [350, 1019], "plot_set_output": [260, 1019], "plot_sgd_comparison": [226, 1019], "plot_sgd_early_stop": [227, 1019], "plot_sgd_iri": [228, 1019], "plot_sgd_loss_funct": [229, 1019], "plot_sgd_penalti": [230, 1019], "plot_sgd_separating_hyperplan": [231, 1019], "plot_sgd_weighted_sampl": [232, 1019], "plot_sgdocsvm_vs_ocsvm": [233, 1019], "plot_sparse_cod": [133, 1019], "plot_sparse_cov": [114, 1019], "plot_sparse_logistic_regression_20newsgroup": [234, 1019], "plot_sparse_logistic_regression_mnist": [235, 1019], "plot_species_distribut": 49, "plot_species_distribution_model": [49, 504, 1019], "plot_species_kd": [311, 1019], "plot_spectral_biclust": [57, 1019], "plot_spectral_coclust": [58, 1019], "plot_stack_predictor": [159, 1019], "plot_step": [140, 147, 364], "plot_step_coars": 147, "plot_stock_market": [50, 1019], "plot_subfigur": 254, "plot_successive_halving_heatmap": [288, 1019], "plot_successive_halving_iter": [289, 1019], "plot_surfac": [192, 216], "plot_svm_anova": [351, 1019], "plot_svm_kernel": [352, 1019], "plot_svm_margin": [353, 1019], "plot_svm_regress": [354, 1019], "plot_svm_scale_c": [355, 1019], "plot_svm_tie_break": [356, 1019], "plot_swissrol": [243, 1019], "plot_t_sne_perplex": [244, 1019], "plot_target_encod": [324, 1019], "plot_target_encoder_cross_v": [325, 1019], "plot_theilsen": [236, 1019], "plot_time_series_lagged_featur": [51, 1019], "plot_titl": 262, "plot_tomography_l1_reconstruct": [52, 1019], "plot_top_word": 53, "plot_topics_extraction_with_nmf_lda": [53, 1019], "plot_train_error_vs_test_error": [290, 1019], "plot_training_data_with_decision_boundari": 352, "plot_transformed_target": [108, 1019], "plot_tre": [1, 364, 367, 1014, 1048, 1050, 1051, 1052, 1054, 1055, 1057], "plot_tree_regress": [365, 1019], "plot_tree_regression_multioutput": [366, 1019], "plot_tuned_decision_threshold": [291, 1019], "plot_tweedie_regression_insurance_claim": [237, 1019], "plot_underfitting_overfit": [292, 1019], "plot_unveil_tree_structur": [367, 1019], "plot_validation_curv": [293, 1019], "plot_varimax_fa": [134, 1019], "plot_voting_decision_region": [160, 1019], "plot_voting_proba": [161, 1019], "plot_voting_regressor": [162, 1019], "plot_ward_structured_vs_unstructur": [101, 1019], "plot_weighted_sampl": [357, 1019], "plotli": [144, 278, 385, 403, 408], "pls1": [418, 490], "pls2": [418, 490], "plsca": [116, 489], "plscanon": [1, 116, 488, 490, 491, 999, 1020, 1034, 1043, 1047, 1049, 1051, 1053, 1057], "plsregress": [1, 116, 117, 999, 1020, 1034, 1046, 1049, 1051, 1053, 1055, 1057], "plssvd": [1, 488, 489, 1020, 1034, 1051, 1053, 1057], "plsw2a": 418, "plt": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 334, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 392, 444, 508, 637, 638, 703, 704, 706, 707, 708, 812, 829, 924, 1005, 1027, 1028, 1029, 1030, 1031, 1036], "plu": [284, 382, 390, 685, 841, 844, 999, 1012], "plug": [420, 994, 1022, 1032], "plugin": 403, "plural": 1045, "plusnet": 223, "pm": [184, 192, 287, 422, 998], "pmlr": 702, "pmml": 1017, "png": [0, 67, 922], "pnucci": 1055, "po": [152, 242, 423], "podshumok": [1045, 1046], "poesio": 722, "poetri": 409, "poh": [1047, 1048], "point": [1, 7, 36, 42, 47, 49, 51, 52, 62, 66, 71, 72, 74, 75, 82, 83, 86, 89, 92, 94, 98, 101, 112, 113, 116, 120, 121, 122, 123, 125, 127, 129, 138, 140, 144, 147, 148, 149, 154, 157, 172, 173, 177, 182, 183, 188, 191, 192, 193, 198, 202, 208, 211, 213, 215, 217, 219, 220, 221, 223, 225, 228, 231, 232, 236, 237, 239, 240, 241, 242, 243, 246, 249, 251, 264, 268, 269, 270, 274, 278, 279, 280, 284, 286, 287, 295, 297, 298, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 319, 320, 322, 324, 335, 337, 338, 340, 342, 344, 348, 349, 350, 352, 353, 356, 357, 359, 360, 361, 364, 368, 372, 373, 374, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 393, 397, 399, 400, 414, 415, 420, 421, 422, 423, 426, 427, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 466, 467, 475, 478, 480, 502, 504, 510, 518, 520, 521, 525, 528, 531, 536, 539, 541, 547, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 616, 617, 634, 637, 638, 639, 643, 644, 645, 650, 651, 657, 661, 663, 664, 676, 677, 679, 681, 682, 684, 685, 688, 689, 694, 695, 696, 697, 698, 699, 700, 707, 712, 713, 716, 719, 723, 729, 731, 737, 742, 743, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 770, 785, 786, 796, 797, 803, 804, 806, 820, 822, 828, 831, 833, 840, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 867, 868, 871, 875, 880, 889, 890, 904, 905, 906, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 928, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1013, 1014, 1017, 1018, 1019, 1027, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "pointer": [385, 393, 448, 1048], "pointplot": 154, "points_color": 239, "pointwis": [141, 182, 426, 450], "poisson": [1, 42, 51, 188, 197, 254, 381, 422, 470, 471, 502, 529, 558, 564, 568, 571, 654, 675, 678, 686, 712, 730, 751, 755, 756, 758, 836, 870, 871, 874, 875, 883, 884, 885, 890, 919, 921, 951, 994, 1014, 1019, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "poisson_gbrt": 219, "poisson_glm": 219, "poissonregressor": [1, 219, 237, 328, 331, 654, 686, 994, 1050, 1053, 1054], "pokorni": 1054, "pola": 51, "polar": [106, 180, 385, 403, 408, 439, 448, 449, 451, 453, 455, 470, 474, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 567, 568, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 694, 695, 698, 854, 859, 862, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 908, 1032, 1056, 1057], "pole": 241, "poli": [42, 166, 196, 277, 345, 352, 354, 458, 541, 626, 771, 780, 806, 885, 912, 913, 914, 915, 916, 994, 1008, 1030], "polici": [154, 190, 191, 219, 237, 399, 541, 547, 994, 1054], "policyhold": [219, 237, 994], "polit": [56, 359, 380, 384, 994, 999], "polli": 359, "pollut": [359, 734, 791, 998, 1004], "polmauri": 1046, "poloso": 1053, "polycollect": [812, 829], "polynomi": [1, 53, 186, 188, 195, 197, 219, 225, 251, 258, 277, 292, 303, 329, 330, 345, 354, 377, 381, 458, 497, 626, 645, 646, 647, 649, 651, 678, 771, 780, 781, 836, 871, 880, 882, 885, 889, 910, 912, 913, 914, 915, 916, 993, 1013, 1019, 1020, 1034, 1051, 1052], "polynomial_featur": 292, "polynomial_kernel": [1, 771, 996, 1056], "polynomialcountsketch": [1, 196, 645, 647, 990, 1051, 1053, 1056], "polynomialfeatur": [1, 42, 198, 219, 220, 225, 258, 292, 329, 352, 889, 994, 1008, 1043, 1047, 1048, 1049, 1052, 1053, 1055, 1056], "polynomialfeaturespolynomialfeatur": 258, "polysemi": 420, "polytop": 521, "pomegran": 1017, "ponc": [420, 537, 543], "poncho": 1022, "pone": 379, "ponnuthurai": 382, "ponzi": 324, "pooch": [87, 385, 403, 408], "pooja": [1054, 1055, 1056], "pool": [286, 397, 451, 641, 967, 1018, 1050], "pooling_func": [451, 1047], "poolqc": 148, "poolsawat": [1053, 1054], "poor": [192, 196, 283, 293, 340, 413, 419, 420, 696, 700, 744, 847, 850, 851, 992, 993, 995, 1000, 1018, 1023, 1046, 1047, 1048, 1050, 1052], "poor_scor": 387, "poorer": [148, 368, 420], "poorest": 1000, "poorli": [61, 63, 96, 110, 117, 141, 153, 243, 373, 415, 422, 534, 636, 994, 995, 1045], "poorna": [1049, 1051], "pop": [367, 397, 925, 1027, 1047], "popa": [1049, 1050], "popitem": 925, "popo": 1042, "popul": [105, 110, 112, 154, 191, 219, 256, 280, 318, 380, 394, 399, 417, 446, 496, 718, 724, 852, 853, 854, 856, 858, 860, 861, 862, 967, 998, 1004, 1008, 1014], "popular": [5, 9, 186, 243, 380, 383, 390, 393, 397, 399, 421, 422, 423, 425, 458, 468, 988, 990, 994, 996, 1003, 1012, 1018, 1027, 1032], "port": [383, 403, 1049], "portabl": [409, 1017], "porter": 1017, "portfolio": [219, 237, 992], "portion": [44, 46, 113, 149, 173, 286, 372, 380, 382, 385, 391, 399, 794, 831, 848, 987, 997, 1001, 1028, 1032], "portland": [415, 426, 450], "portnoi": [994, 1056], "portrait": [44, 420, 1028], "pos_class": 46, "pos_label": [247, 256, 271, 291, 399, 414, 444, 445, 704, 706, 708, 712, 713, 715, 733, 735, 736, 744, 788, 789, 790, 793, 795, 805, 877, 894, 998, 1047, 1051, 1053, 1057], "pos_lr": 280, "pos_lr_bas": 280, "pos_lr_base_std": 280, "pos_tagg": 423, "pos_vector": 423, "pos_window": 423, "pose": [223, 285, 994, 1031], "posit": [0, 1, 42, 44, 46, 49, 50, 60, 61, 63, 101, 134, 154, 156, 161, 171, 190, 191, 203, 204, 214, 219, 220, 221, 223, 237, 242, 250, 256, 271, 274, 277, 280, 284, 286, 287, 291, 318, 328, 329, 333, 335, 359, 367, 372, 380, 384, 385, 387, 392, 394, 399, 400, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 427, 444, 445, 448, 452, 453, 455, 470, 473, 500, 504, 506, 510, 514, 515, 516, 531, 533, 535, 536, 537, 539, 541, 542, 543, 548, 551, 552, 554, 555, 556, 563, 567, 568, 569, 570, 598, 599, 600, 601, 602, 604, 605, 606, 612, 616, 617, 626, 637, 638, 649, 652, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 675, 678, 679, 680, 681, 683, 686, 687, 688, 689, 690, 693, 696, 704, 706, 708, 713, 715, 718, 719, 721, 722, 724, 726, 728, 730, 733, 735, 736, 737, 741, 742, 744, 745, 746, 747, 748, 749, 750, 758, 760, 764, 772, 788, 789, 790, 793, 794, 795, 803, 804, 805, 809, 810, 833, 850, 851, 852, 854, 856, 858, 860, 862, 863, 873, 874, 877, 883, 886, 889, 894, 898, 902, 903, 905, 906, 910, 911, 914, 915, 916, 918, 920, 927, 945, 947, 963, 965, 989, 990, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1008, 1013, 1028, 1030, 1032, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "position": 399, "positive_class": [46, 718], "positive_cod": [124, 537, 543, 548, 551, 552], "positive_dict": [124, 537, 543, 551, 552], "positive_featur": 390, "positive_likelihood_ratio": [280, 718], "posix": [373, 397], "possa": 1046, "possibl": [0, 29, 42, 51, 54, 62, 63, 71, 83, 89, 104, 110, 124, 141, 144, 154, 156, 175, 191, 192, 193, 194, 219, 236, 237, 251, 253, 271, 277, 278, 279, 280, 282, 283, 284, 286, 287, 297, 327, 348, 355, 359, 360, 368, 372, 373, 374, 378, 379, 380, 385, 386, 387, 388, 389, 391, 393, 397, 398, 399, 403, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 425, 427, 429, 438, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 502, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 696, 697, 698, 715, 727, 728, 729, 730, 734, 748, 762, 784, 789, 791, 794, 803, 804, 805, 806, 808, 809, 810, 812, 818, 819, 820, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 928, 930, 931, 934, 939, 969, 972, 987, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1006, 1008, 1013, 1014, 1018, 1022, 1023, 1030, 1031, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055], "possibli": [91, 117, 173, 219, 234, 352, 360, 382, 384, 393, 409, 415, 422, 423, 457, 459, 595, 845, 846, 847, 848, 849, 915, 916, 918, 919, 920, 921, 987, 990, 995, 1001, 1008, 1054], "post": [1, 45, 53, 56, 103, 172, 173, 188, 247, 269, 281, 284, 295, 331, 335, 340, 359, 360, 361, 362, 367, 372, 380, 384, 385, 389, 390, 398, 410, 415, 454, 494, 495, 502, 506, 557, 567, 664, 706, 708, 718, 724, 738, 748, 790, 793, 805, 806, 822, 828, 833, 836, 871, 890, 908, 918, 998, 1014, 1019, 1021, 1022, 1032, 1034, 1050], "post1": [383, 403, 407, 408, 1037], "poster": [359, 384, 385, 1031], "posterior": [91, 174, 175, 176, 181, 188, 198, 271, 277, 291, 420, 425, 555, 556, 558, 616, 617, 619, 620, 621, 625, 628, 629, 633, 650, 651, 714, 803, 805, 828, 992, 1017, 1019, 1045, 1048], "posteriori": [994, 1000], "postfit_hook": 45, "postpon": [387, 389], "postprocess": [60, 413, 541, 547], "postprocessor": 1050, "postscript": 922, "potenti": [1, 42, 63, 89, 110, 154, 187, 190, 192, 198, 271, 304, 305, 313, 333, 334, 352, 361, 372, 373, 383, 399, 403, 406, 414, 415, 419, 422, 423, 474, 488, 489, 490, 491, 502, 530, 555, 563, 564, 567, 568, 570, 571, 579, 612, 617, 640, 769, 828, 900, 901, 908, 918, 919, 920, 921, 1004, 1012, 1014, 1017, 1032, 1042, 1049, 1050, 1053, 1056, 1057], "poughon": 1046, "poundal": 103, "pour": 998, "pourbozorg": [1047, 1048, 1049], "pow": [682, 683, 684, 867, 868], "powel": [44, 380], "power": [1, 42, 45, 54, 144, 149, 190, 220, 237, 268, 280, 285, 302, 318, 319, 322, 337, 345, 372, 373, 398, 413, 415, 418, 421, 422, 423, 426, 450, 488, 489, 490, 538, 541, 547, 550, 636, 686, 700, 730, 753, 755, 758, 852, 853, 860, 861, 863, 864, 885, 886, 887, 898, 899, 946, 947, 994, 995, 998, 1006, 1008, 1012, 1013, 1022, 1042, 1045, 1047, 1049, 1050, 1052, 1056], "power_iter": 54, "power_iteration_norm": [411, 547, 550, 946, 947, 1053], "power_t": [682, 683, 684, 867, 868, 1012], "power_transform": [1, 886, 899, 1047], "powers_": 885, "powershel": 383, "powertransform": [1, 322, 887, 898, 988, 1008, 1047, 1050, 1053, 1055], "pox": 295, "poznik": [1052, 1053, 1054], "pp": [0, 97, 173, 276, 382, 415, 417, 423, 426, 427, 450, 454, 458, 468, 517, 539, 540, 547, 596, 641, 649, 670, 691, 692, 726, 732, 736, 746, 762, 775, 789, 845, 847, 849, 866, 886, 898, 991, 998, 1000, 1001, 1011], "pp2013": 990, "pp84": 425, "ppc64le": 393, "ppf": 277, "ppm": 180, "pprint": [54, 151, 253, 278, 380, 942], "pq": 332, "pr": [0, 161, 373, 385, 388, 393, 423, 747, 998, 1021, 1049, 1051], "pr_displai": 247, "pr_number": 393, "prabakaran": [1047, 1048, 1051, 1053, 1054], "prabhakar": 420, "practic": [63, 87, 104, 112, 117, 127, 144, 148, 149, 154, 175, 190, 191, 196, 203, 221, 246, 252, 278, 285, 304, 305, 329, 335, 348, 352, 373, 385, 387, 388, 391, 393, 398, 399, 415, 417, 419, 420, 421, 422, 423, 425, 453, 458, 468, 527, 530, 595, 638, 639, 676, 803, 849, 903, 910, 987, 988, 992, 994, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1017, 1018, 1020, 1022, 1023, 1032, 1033, 1034, 1041, 1045, 1047, 1049, 1051], "practicalswift": 1045, "practis": 224, "practition": [142, 223], "pradeep": [1047, 1048], "pragmat": 385, "prakash": [1044, 1046, 1052], "pramod": 1053, "pranayanchuri": 1052, "prang": 386, "prasanth": 1054, "pratama": 1050, "pratap": [1043, 1046, 1053], "prathmesh": 1048, "pratik": 1046, "pratiqu": 382, "pravar": 1047, "pravarmahajan": [1046, 1047], "pre": [43, 104, 191, 208, 318, 361, 383, 385, 399, 403, 414, 417, 419, 420, 422, 423, 424, 426, 427, 449, 450, 453, 465, 539, 541, 696, 718, 769, 873, 915, 998, 1003, 1008, 1013, 1014, 1017, 1018, 1034, 1042, 1047, 1053, 1057], "pre_dispatch": [806, 812, 820, 829, 831, 832, 833, 834, 837, 964, 1042], "preambl": 89, "prec": [114, 247, 533, 998], "prec_": 114, "prec_macro": 419, "preced": [373, 385, 493, 998, 1039], "precipit": 413, "precis": [1, 7, 44, 51, 61, 67, 103, 108, 114, 124, 170, 181, 182, 188, 196, 247, 269, 270, 271, 275, 316, 318, 337, 338, 385, 387, 399, 412, 413, 414, 415, 417, 420, 422, 449, 475, 476, 477, 478, 479, 480, 481, 482, 484, 510, 529, 538, 540, 547, 550, 650, 651, 652, 654, 656, 657, 658, 660, 661, 662, 675, 678, 680, 686, 688, 689, 693, 705, 706, 712, 713, 714, 719, 733, 735, 736, 737, 745, 747, 769, 788, 789, 790, 793, 794, 803, 804, 828, 836, 839, 850, 851, 856, 871, 890, 894, 910, 915, 922, 924, 947, 992, 994, 1001, 1002, 1013, 1019, 1028, 1032, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "precision_": [50, 114, 475, 476, 477, 478, 479, 480, 481, 482], "precision_macro": [419, 1027], "precision_recall_curv": [1, 247, 284, 706, 712, 713, 733, 998, 1040, 1041, 1045, 1052, 1053, 1055, 1057], "precision_recall_fscore_support": [1, 719, 735, 736, 790, 793, 998, 1043, 1047, 1049, 1055], "precision_scor": [1, 61, 271, 284, 714, 793, 998, 1039, 1041, 1042, 1043, 1044, 1049, 1055], "precision_threshold": 275, "precisionrecalldisplai": [1, 271, 284, 330, 788, 790, 793, 998, 1049, 1052, 1055, 1056, 1057], "precisions_": [803, 804], "precisions_cholesky_": [803, 804, 1053], "precisions_init": [804, 1053, 1055], "precompil": 383, "precomput": [123, 124, 125, 188, 197, 242, 298, 300, 387, 394, 397, 399, 415, 423, 426, 438, 446, 447, 450, 451, 452, 456, 458, 463, 471, 477, 488, 489, 490, 530, 537, 541, 543, 546, 547, 548, 554, 560, 562, 564, 566, 568, 571, 574, 576, 616, 617, 626, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 687, 688, 690, 691, 694, 696, 697, 698, 702, 780, 784, 787, 798, 799, 843, 844, 852, 853, 854, 856, 857, 858, 860, 861, 862, 868, 911, 912, 913, 914, 915, 916, 919, 921, 974, 975, 976, 990, 994, 996, 1001, 1013, 1018, 1019, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "precompute_dist": [1043, 1050], "precompute_gram": 1041, "precomputed_nearest_neighbor": [458, 697], "precondit": [415, 458, 468, 701, 1014, 1055], "pred": [42, 45, 49, 51, 67, 356, 359, 380, 654, 675, 686, 703, 708, 712, 724, 735, 736, 744, 789, 790, 793, 794, 998], "pred1": 162, "pred2": 162, "pred3": 162, "pred4": 162, "pred_background": 49, "pred_decis": [741, 998, 1052], "pred_entropi": [337, 338], "pred_nam": [44, 1028], "pred_ort": 409, "pred_scor": 45, "pred_test": 49, "pred_typ": 48, "predecessor": [138, 456, 461, 462, 463, 1056], "predecessor_": [456, 463], "predecessor_correct": [456, 462], "predefin": [1, 281, 819, 987, 1001, 1027, 1054, 1056], "predefinedsplit": [1, 419, 1027, 1043], "predetermin": [415, 995], "predict": [1, 4, 12, 26, 41, 44, 45, 46, 49, 59, 61, 62, 63, 65, 67, 69, 71, 78, 82, 90, 91, 92, 96, 103, 104, 105, 106, 108, 116, 134, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 170, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 198, 201, 202, 203, 211, 214, 215, 216, 217, 220, 221, 222, 223, 225, 226, 227, 228, 233, 234, 236, 237, 246, 247, 249, 251, 253, 255, 263, 264, 265, 266, 267, 268, 269, 270, 275, 277, 279, 280, 283, 286, 287, 291, 292, 295, 297, 301, 304, 305, 306, 309, 310, 316, 318, 319, 323, 324, 327, 328, 329, 330, 331, 333, 334, 335, 338, 340, 341, 342, 344, 345, 347, 348, 352, 354, 355, 356, 359, 360, 364, 365, 366, 367, 368, 371, 373, 377, 380, 382, 385, 387, 392, 394, 399, 402, 406, 409, 410, 411, 413, 415, 416, 418, 420, 422, 423, 424, 429, 432, 437, 438, 443, 444, 445, 446, 448, 449, 450, 453, 454, 455, 471, 475, 488, 489, 490, 493, 507, 514, 530, 540, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 583, 588, 599, 600, 608, 612, 616, 617, 619, 620, 621, 622, 628, 631, 633, 634, 636, 637, 638, 639, 640, 641, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 720, 721, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 744, 747, 748, 749, 752, 754, 756, 758, 762, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 802, 803, 804, 805, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 857, 860, 861, 867, 868, 870, 877, 890, 891, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 972, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1024, 1026, 1027, 1028, 1032, 1034, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "predict_ecoc": 1043, "predict_joint_log_proba": [845, 846, 847, 848, 849, 1054], "predict_log_proba": [387, 399, 555, 556, 557, 559, 561, 563, 565, 570, 599, 600, 664, 665, 682, 805, 806, 809, 810, 820, 828, 831, 841, 845, 846, 847, 848, 849, 867, 870, 907, 912, 915, 918, 920, 1013, 1039, 1052, 1056], "predict_ovo": 1043, "predict_ovr": 1043, "predict_param": [253, 471, 573, 574, 1052], "predict_proba": [29, 60, 61, 62, 63, 65, 69, 157, 161, 173, 176, 177, 178, 179, 271, 286, 291, 297, 313, 320, 323, 327, 329, 335, 359, 387, 392, 399, 413, 414, 422, 443, 444, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 599, 600, 616, 625, 626, 628, 629, 637, 638, 639, 664, 665, 682, 704, 706, 708, 728, 747, 748, 794, 803, 804, 805, 806, 809, 810, 820, 828, 831, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 852, 860, 867, 870, 877, 905, 906, 907, 912, 915, 918, 920, 994, 998, 1000, 1002, 1005, 1011, 1012, 1013, 1014, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "predict_proba_ovr": 1043, "predicted_label": [337, 338], "prediction_df": 154, "prediction_perform": 45, "prediction_performance_comput": 45, "prediction_performance_label": 45, "prediction_pow": 45, "prediction_tim": [45, 46], "prediction_titl": [44, 1028], "predictionerrordisplai": [1, 42, 51, 108, 159, 191, 273, 332, 998, 1054, 1056], "predictions_kr": 175, "predictive_analyt": 1014, "predictive_word": 359, "predictor": [1, 108, 137, 148, 162, 186, 188, 219, 237, 248, 387, 398, 399, 416, 418, 419, 422, 425, 472, 473, 488, 489, 490, 502, 522, 523, 524, 561, 562, 568, 571, 574, 608, 616, 636, 638, 639, 654, 659, 663, 675, 679, 686, 707, 831, 833, 842, 843, 870, 871, 883, 884, 890, 972, 994, 999, 1019, 1040, 1046, 1049], "predispatch": [812, 829, 834, 837], "predit": 117, "predomin": [387, 1040], "prefer": [72, 78, 89, 154, 268, 286, 318, 368, 372, 373, 374, 385, 386, 387, 399, 415, 419, 420, 422, 423, 446, 460, 477, 478, 484, 493, 514, 515, 633, 638, 639, 660, 664, 665, 707, 732, 734, 748, 763, 764, 841, 859, 885, 910, 911, 952, 964, 987, 990, 992, 994, 998, 1003, 1013, 1014, 1017, 1021, 1030, 1040, 1046, 1048, 1052, 1053, 1056], "prefetch": 964, "prefit": [62, 271, 399, 413, 414, 424, 443, 573, 574, 603, 828, 1018, 1051, 1052, 1053], "prefix": [1, 54, 103, 278, 300, 327, 385, 389, 391, 393, 425, 431, 448, 449, 451, 453, 455, 470, 473, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 645, 646, 647, 648, 694, 695, 698, 812, 834, 854, 859, 862, 866, 869, 870, 876, 902, 903, 1045, 1046, 1052, 1054, 1057], "prein": [0, 375, 1051, 1052, 1053], "preiss": 1052, "preliminari": 468, "prematur": 1052, "prepar": [220, 253, 359, 372, 387, 388, 391, 393, 1014, 1022, 1047, 1055], "prepend": [191, 1039], "preprint": 382, "preprocess": [1, 42, 43, 44, 48, 63, 66, 76, 78, 83, 87, 89, 92, 96, 103, 104, 105, 106, 108, 117, 124, 134, 143, 148, 169, 171, 173, 180, 184, 193, 196, 198, 200, 207, 208, 210, 219, 220, 225, 235, 237, 240, 247, 248, 257, 260, 271, 274, 284, 286, 291, 292, 301, 306, 307, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 348, 351, 360, 374, 377, 379, 382, 385, 390, 398, 399, 409, 411, 412, 415, 416, 419, 422, 423, 424, 470, 471, 472, 473, 495, 573, 587, 588, 594, 595, 597, 636, 664, 665, 678, 680, 682, 684, 693, 839, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 910, 911, 912, 913, 915, 916, 988, 994, 999, 1002, 1009, 1012, 1013, 1015, 1017, 1019, 1021, 1022, 1023, 1028, 1029, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1058], "preprocessor": [104, 159, 191, 219, 248, 256, 258, 324, 328, 330, 331, 332, 334, 416, 423, 594, 595, 597, 1017, 1032, 1039, 1042, 1047, 1049], "preprocessor__cat__selector__percentil": 104, "preprocessor__num__imputer__strategi": 104, "preprocessor_list": 256, "prescrib": 399, "presenc": [1, 47, 94, 96, 112, 113, 136, 190, 194, 203, 223, 256, 318, 383, 386, 399, 417, 420, 718, 732, 762, 775, 839, 873, 881, 883, 890, 982, 988, 994, 998, 999, 1012, 1021, 1042, 1043, 1045, 1049, 1051, 1053], "present": [42, 43, 51, 77, 83, 122, 124, 131, 143, 144, 151, 154, 155, 172, 173, 181, 184, 198, 201, 203, 208, 219, 246, 249, 253, 267, 271, 275, 280, 283, 286, 287, 298, 318, 321, 323, 360, 382, 383, 387, 390, 397, 399, 406, 415, 417, 420, 422, 423, 433, 434, 437, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 495, 496, 497, 498, 502, 506, 507, 508, 509, 510, 511, 516, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 555, 556, 567, 568, 569, 572, 575, 576, 587, 588, 589, 594, 595, 597, 623, 633, 634, 635, 636, 656, 660, 683, 694, 695, 696, 697, 718, 735, 736, 744, 775, 789, 790, 793, 803, 804, 806, 809, 810, 818, 820, 834, 852, 853, 854, 856, 858, 860, 861, 862, 869, 874, 882, 883, 884, 885, 886, 888, 891, 902, 903, 914, 922, 924, 925, 947, 982, 997, 998, 999, 1000, 1005, 1008, 1016, 1018, 1042, 1047, 1049, 1050, 1051, 1053, 1054, 1056], "preserv": [36, 42, 82, 129, 243, 250, 272, 387, 388, 419, 420, 422, 423, 587, 594, 595, 597, 652, 658, 702, 748, 780, 784, 824, 825, 826, 894, 930, 931, 988, 994, 995, 1008, 1010, 1017, 1027, 1031, 1039, 1042, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057], "preserves_dtyp": 387, "preservs": 1053, "preset": [672, 674, 682, 1002], "presort": [1044, 1049], "press": [380, 415, 420, 425, 426, 450, 596, 616, 617, 620, 625, 628, 649, 845, 849, 991, 994, 996, 1000], "pressur": [173, 382, 1030], "preston": [1044, 1045, 1046], "presum": [191, 297, 415, 423, 845], "prettenhof": [0, 49, 150, 152, 153, 278, 359, 360, 405, 1039, 1040, 1041, 1042, 1043, 1044], "pretti": [192, 243, 275, 359, 372, 385, 397, 867, 868, 1002, 1048], "preuss": 1055, "prev_scor": 54, "preval": [138, 327, 399, 706, 718, 998], "prevalence_pos_label": [284, 706], "prevent": [42, 89, 149, 151, 170, 190, 220, 223, 318, 324, 325, 348, 359, 363, 368, 385, 387, 389, 397, 398, 409, 415, 420, 423, 448, 455, 494, 495, 567, 568, 596, 597, 617, 734, 791, 867, 868, 895, 896, 898, 899, 900, 901, 998, 1000, 1003, 1004, 1008, 1014, 1030, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "previou": [42, 77, 87, 104, 124, 141, 148, 149, 151, 159, 175, 180, 181, 190, 191, 192, 203, 205, 220, 250, 252, 253, 271, 277, 280, 284, 318, 323, 331, 359, 360, 361, 368, 372, 380, 385, 387, 390, 391, 393, 397, 399, 400, 403, 414, 415, 422, 423, 474, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 636, 652, 654, 658, 659, 664, 666, 668, 672, 673, 674, 675, 682, 683, 684, 686, 713, 825, 841, 844, 859, 867, 868, 907, 924, 994, 998, 1002, 1008, 1018, 1023, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "previous": [45, 87, 91, 104, 138, 181, 191, 271, 275, 284, 291, 331, 380, 393, 397, 403, 415, 420, 423, 446, 449, 460, 530, 540, 547, 655, 664, 665, 672, 673, 674, 682, 683, 684, 910, 994, 1008, 1017, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "previous_loss": [672, 673, 674, 683], "previs": 247, "price": [50, 108, 148, 149, 154, 159, 256, 324, 988, 994, 1022, 1028], "priceless": 385, "prieur": 1052, "primal": [664, 665, 683, 910, 911, 1012, 1013], "primari": [387, 399, 420, 521, 1005, 1021, 1022], "primarili": [268, 282, 385, 399, 411, 415, 956, 1022, 1048, 1049], "primat": 359, "primdal": 1047, "primit": 1054, "princ": 1052, "princip": [1, 41, 115, 116, 120, 126, 128, 129, 130, 132, 157, 188, 239, 251, 254, 307, 323, 329, 377, 415, 418, 427, 490, 537, 538, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 556, 663, 694, 695, 696, 698, 699, 836, 859, 871, 890, 946, 947, 995, 1001, 1019, 1033, 1034, 1039], "principl": [138, 182, 303, 361, 385, 397, 399, 400, 419, 422, 947, 987, 997, 1001, 1012, 1046], "print": [1, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 62, 65, 67, 72, 76, 77, 80, 81, 82, 83, 84, 86, 87, 92, 94, 95, 97, 101, 103, 104, 106, 107, 108, 112, 116, 117, 122, 124, 127, 131, 132, 134, 138, 141, 144, 145, 146, 147, 148, 150, 152, 154, 164, 165, 169, 170, 172, 173, 175, 176, 178, 180, 184, 190, 192, 193, 194, 196, 203, 204, 205, 206, 210, 211, 214, 215, 219, 221, 222, 223, 226, 227, 234, 235, 237, 240, 241, 244, 248, 250, 252, 253, 256, 260, 265, 270, 271, 275, 276, 277, 278, 280, 282, 285, 286, 290, 298, 302, 309, 311, 314, 315, 316, 320, 323, 325, 327, 328, 329, 331, 333, 334, 335, 337, 338, 341, 348, 359, 360, 361, 363, 367, 368, 372, 379, 380, 383, 386, 387, 393, 399, 406, 409, 416, 419, 422, 423, 425, 470, 473, 474, 478, 484, 496, 500, 508, 518, 519, 547, 550, 555, 556, 565, 566, 567, 568, 570, 571, 575, 576, 583, 589, 590, 591, 593, 594, 595, 597, 618, 623, 624, 636, 652, 653, 655, 656, 658, 659, 660, 662, 666, 667, 668, 669, 672, 673, 682, 683, 690, 702, 719, 723, 743, 801, 803, 804, 805, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 837, 839, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 867, 868, 869, 870, 871, 872, 880, 886, 890, 898, 908, 909, 910, 911, 912, 915, 917, 923, 929, 934, 959, 982, 988, 998, 999, 1000, 1001, 1006, 1014, 1023, 1027, 1028, 1030, 1031, 1032, 1039, 1041, 1047, 1048, 1050, 1054], "print_changed_onli": [474, 908, 1048, 1050, 1051], "print_datafram": 275, "print_progress": 964, "print_rout": 253, "printabl": 1021, "prior": [1, 41, 45, 54, 80, 81, 91, 99, 100, 101, 122, 174, 175, 181, 187, 188, 193, 198, 200, 203, 261, 263, 267, 268, 271, 277, 288, 308, 385, 387, 389, 399, 403, 406, 415, 418, 420, 422, 425, 471, 529, 542, 554, 555, 556, 557, 565, 617, 619, 620, 621, 625, 628, 629, 636, 650, 651, 652, 653, 657, 658, 660, 661, 662, 666, 667, 668, 678, 684, 687, 722, 803, 845, 846, 847, 848, 849, 870, 871, 885, 912, 915, 965, 987, 990, 992, 994, 997, 998, 1000, 1006, 1014, 1015, 1019, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1055], "prior_k": 555, "priori": [219, 236, 286, 297, 318, 399, 415, 422, 594, 600, 997, 1055], "priorit": [414, 1018, 1046], "prioriti": [384, 638, 838, 839, 1018, 1042], "priors_": [555, 556], "privaci": 1017, "privat": [0, 389, 399, 400, 926, 1022, 1039, 1047, 1049, 1050, 1052, 1053], "privileg": [256, 393], "priyam": 1054, "priyash": 1057, "prng": [114, 1031], "pro": 997, "proanthocyanin": 382, "prob_pos_clf": 60, "prob_pos_isoton": 60, "prob_pos_sigmoid": 60, "prob_pr": [444, 445], "prob_tru": [444, 445], "proba": [61, 63, 161, 443, 918, 920], "proba_": [912, 915, 1050], "proba_map": 89, "proba_neg_class": [61, 63], "proba_pos_class": [61, 63], "probabilist": [53, 63, 65, 114, 123, 124, 133, 134, 174, 175, 178, 181, 182, 188, 252, 359, 399, 413, 421, 422, 443, 479, 482, 538, 540, 541, 547, 565, 594, 595, 616, 628, 649, 651, 682, 709, 747, 806, 832, 877, 912, 913, 915, 916, 991, 992, 994, 997, 998, 1003, 1008, 1013, 1014, 1017, 1019, 1022, 1039, 1042, 1046], "probabilisticpca": [1039, 1042], "probabilities_": [89, 452], "probabilities_or_label": 575, "probabl": [0, 1, 4, 29, 51, 59, 63, 64, 69, 89, 108, 121, 122, 137, 154, 160, 168, 174, 175, 176, 177, 188, 191, 211, 231, 234, 235, 239, 243, 247, 249, 250, 271, 277, 279, 280, 283, 284, 287, 291, 295, 297, 316, 318, 322, 327, 329, 335, 340, 342, 354, 355, 372, 380, 381, 387, 391, 397, 399, 414, 415, 419, 420, 423, 424, 425, 441, 442, 443, 444, 445, 452, 453, 455, 510, 518, 521, 529, 533, 555, 556, 557, 559, 561, 563, 565, 567, 570, 573, 575, 576, 599, 600, 616, 619, 620, 628, 633, 637, 638, 639, 664, 665, 677, 682, 698, 704, 706, 708, 709, 712, 713, 715, 718, 722, 726, 728, 732, 733, 735, 745, 746, 747, 748, 762, 788, 790, 793, 794, 795, 800, 803, 804, 805, 806, 809, 810, 820, 828, 835, 836, 839, 841, 842, 845, 846, 847, 848, 849, 852, 855, 860, 866, 867, 891, 903, 904, 905, 906, 907, 910, 912, 915, 918, 920, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1032, 1034, 1039, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "probable_clust": 90, "probas_pr": [788, 1057], "probb_": [912, 915, 1050], "probe": 1006, "probinette4": 1051, "probl": [613, 614], "problem": [1, 10, 24, 41, 42, 43, 44, 49, 51, 52, 53, 62, 71, 88, 89, 91, 100, 124, 138, 141, 144, 146, 151, 152, 175, 188, 193, 196, 198, 203, 205, 208, 212, 213, 219, 221, 223, 236, 237, 241, 246, 247, 254, 256, 259, 275, 277, 282, 286, 287, 291, 292, 295, 297, 298, 303, 310, 322, 330, 334, 335, 345, 348, 352, 355, 356, 359, 360, 367, 368, 372, 380, 381, 382, 383, 384, 386, 387, 390, 391, 394, 397, 399, 413, 414, 415, 417, 419, 421, 422, 423, 424, 425, 426, 427, 450, 453, 455, 456, 458, 463, 468, 471, 484, 509, 514, 515, 521, 522, 523, 524, 529, 530, 534, 537, 539, 543, 545, 548, 549, 550, 551, 552, 553, 554, 557, 558, 563, 567, 570, 573, 577, 579, 595, 616, 637, 649, 654, 656, 658, 660, 661, 662, 663, 664, 665, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 691, 692, 693, 694, 695, 697, 699, 701, 714, 722, 735, 736, 741, 744, 745, 789, 790, 793, 794, 803, 804, 807, 808, 809, 810, 811, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 830, 838, 839, 840, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 876, 877, 883, 891, 894, 900, 901, 910, 911, 918, 920, 936, 947, 988, 989, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1006, 1008, 1012, 1015, 1018, 1020, 1022, 1024, 1025, 1026, 1032, 1033, 1034, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "problemat": [42, 191, 271, 273, 416, 988, 1047], "proc": [63, 111, 413, 423, 456, 695, 699, 845, 987, 995, 1000, 1004], "proce": [84, 170, 200, 383, 389, 418, 419, 422, 446, 994], "procedur": [24, 80, 90, 144, 151, 173, 199, 207, 267, 279, 321, 325, 348, 359, 368, 385, 387, 397, 398, 399, 400, 413, 417, 419, 420, 422, 424, 537, 543, 544, 546, 551, 552, 553, 559, 560, 561, 562, 565, 566, 599, 601, 608, 615, 650, 678, 680, 693, 734, 791, 867, 868, 887, 899, 969, 987, 994, 1000, 1008, 1011, 1012, 1013, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "proceed": [112, 173, 380, 382, 415, 426, 445, 450, 517, 702, 714, 732, 762, 857, 907, 998, 1010, 1011, 1012], "process": [0, 1, 18, 36, 42, 43, 46, 56, 62, 65, 66, 69, 79, 80, 81, 82, 84, 90, 91, 100, 103, 105, 107, 111, 113, 121, 125, 126, 128, 136, 138, 147, 149, 151, 156, 157, 164, 165, 166, 190, 198, 201, 221, 223, 229, 231, 232, 252, 253, 254, 256, 262, 263, 266, 268, 271, 277, 279, 280, 289, 295, 313, 318, 320, 321, 329, 333, 338, 342, 352, 353, 360, 361, 363, 372, 373, 374, 380, 384, 385, 387, 389, 391, 394, 397, 398, 399, 409, 415, 416, 417, 419, 420, 421, 422, 423, 424, 428, 454, 455, 481, 502, 510, 529, 540, 541, 542, 543, 544, 567, 568, 569, 594, 595, 597, 616, 617, 619, 620, 621, 623, 624, 625, 628, 629, 631, 633, 638, 639, 645, 649, 670, 678, 691, 692, 709, 729, 747, 787, 803, 805, 806, 809, 810, 820, 828, 831, 832, 833, 842, 843, 859, 873, 877, 879, 880, 881, 890, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 964, 987, 990, 994, 998, 1001, 1008, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1031, 1032, 1034, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "process_rout": [1, 253, 1056], "processor": [104, 159, 191, 426, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 537, 541, 542, 543, 545, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 600, 608, 613, 614, 616, 638, 640, 645, 653, 657, 659, 661, 663, 664, 665, 667, 669, 671, 672, 674, 682, 685, 694, 695, 696, 697, 698, 699, 700, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 852, 853, 856, 858, 860, 861, 863, 864, 869, 872, 905, 906], "procter": 50, "prod": [360, 627], "prod_": 1000, "prod_i": 990, "proding": 1055, "produc": [51, 52, 61, 62, 78, 91, 103, 127, 151, 152, 153, 155, 203, 283, 316, 340, 368, 373, 380, 381, 385, 387, 390, 399, 400, 415, 416, 419, 420, 422, 446, 449, 452, 458, 525, 542, 565, 569, 587, 594, 599, 600, 638, 639, 808, 809, 810, 818, 823, 826, 831, 875, 885, 912, 915, 989, 990, 994, 996, 997, 998, 1001, 1004, 1005, 1009, 1011, 1012, 1013, 1023, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "product": [1, 57, 104, 124, 160, 175, 180, 192, 352, 368, 372, 387, 388, 391, 394, 412, 420, 422, 457, 544, 546, 553, 588, 595, 596, 597, 619, 620, 639, 646, 670, 671, 691, 692, 767, 769, 781, 783, 882, 885, 902, 903, 948, 987, 990, 994, 996, 1008, 1010, 1012, 1013, 1017, 1022, 1034, 1047], "production": 1022, "prof": 391, "profession": 191, "professor": 1022, "profil": [219, 372, 385, 388, 527, 530, 994, 1022], "profile_default": 391, "profit": [0, 271, 335, 1056], "prog": [173, 382], "prognosi": [173, 382], "program": [0, 84, 173, 360, 368, 373, 374, 382, 383, 385, 387, 391, 397, 514, 641, 676, 900, 901, 994, 1013, 1014, 1017, 1018, 1021, 1039, 1041], "programmat": [387, 505, 1048], "progress": [42, 45, 46, 124, 162, 173, 187, 212, 303, 331, 382, 385, 389, 390, 400, 406, 411, 415, 565, 566, 698, 839, 841, 844, 859, 867, 868, 1022, 1030, 1032, 1039, 1041, 1048, 1053], "prohibit": [190, 256, 419, 422, 633, 1003, 1011, 1046], "proj": [52, 655], "proj_gradi": 391, "proj_oper": 52, "project": [1, 36, 44, 46, 49, 52, 54, 68, 79, 89, 92, 101, 120, 123, 124, 126, 128, 130, 134, 140, 179, 181, 183, 184, 188, 192, 211, 216, 228, 239, 240, 241, 243, 245, 251, 254, 263, 272, 302, 307, 311, 316, 345, 353, 360, 364, 372, 377, 379, 383, 384, 385, 390, 391, 394, 399, 400, 403, 412, 418, 420, 421, 427, 446, 452, 457, 458, 468, 480, 488, 489, 490, 491, 495, 508, 510, 537, 539, 540, 541, 543, 545, 547, 548, 549, 550, 554, 555, 579, 588, 595, 647, 648, 655, 678, 680, 694, 697, 701, 702, 840, 859, 887, 902, 903, 904, 946, 947, 992, 994, 995, 996, 999, 1001, 1002, 1004, 1011, 1014, 1019, 1022, 1023, 1028, 1031, 1034, 1039, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "projected_data": 250, "projected_dist": 250, "projectedgradientnmf": 1044, "prokopi": [1044, 1047], "prolifer": 387, "prolin": [56, 323, 382], "promin": [127, 399], "promis": [399, 1018], "promot": [191, 448, 714, 1017, 1050, 1052, 1056], "prompt": [383, 385, 403, 408, 423, 1023], "prone": [63, 219, 264, 322, 397, 413], "pronounc": [73, 74, 86, 180], "proof": [397, 422, 904, 1010], "prop": [106, 113, 225, 264, 304, 347, 367, 1028], "propag": [1, 57, 67, 70, 71, 83, 97, 98, 119, 188, 336, 380, 446, 460, 508, 518, 520, 703, 710, 711, 719, 720, 723, 724, 743, 799, 801, 870, 884, 905, 906, 907, 964, 965, 1002, 1019, 1020, 1033, 1034, 1039, 1051, 1054], "proper": [63, 89, 208, 237, 374, 387, 391, 413, 422, 455, 547, 559, 682, 947, 973, 993, 994, 995, 998, 1013, 1039, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "properli": [42, 51, 61, 89, 156, 180, 272, 327, 374, 383, 385, 389, 393, 421, 910, 911, 912, 913, 914, 915, 916, 987, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "properti": [50, 61, 182, 183, 221, 236, 263, 300, 323, 367, 372, 378, 385, 387, 403, 412, 413, 415, 417, 420, 422, 424, 425, 430, 448, 451, 457, 458, 459, 470, 471, 548, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 597, 599, 600, 603, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 638, 652, 658, 661, 666, 668, 680, 681, 705, 710, 711, 714, 805, 806, 809, 810, 820, 828, 838, 839, 869, 870, 883, 884, 885, 891, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 990, 993, 994, 995, 998, 999, 1001, 1004, 1008, 1011, 1013, 1014, 1015, 1018, 1023, 1044, 1048, 1049, 1052, 1053, 1056, 1057], "property_magnitud": 271, "propon": 103, "proport": [53, 62, 74, 154, 172, 205, 219, 226, 232, 246, 256, 271, 280, 301, 305, 308, 355, 357, 372, 380, 413, 415, 417, 419, 420, 422, 423, 444, 445, 452, 475, 480, 521, 555, 556, 561, 563, 565, 566, 567, 568, 569, 570, 589, 590, 594, 597, 633, 638, 664, 665, 672, 673, 674, 680, 681, 682, 684, 702, 707, 718, 728, 807, 808, 809, 810, 823, 826, 836, 856, 867, 868, 884, 910, 911, 912, 915, 916, 918, 920, 922, 924, 936, 987, 997, 998, 1001, 1004, 1012, 1013, 1014, 1044, 1056], "propos": [91, 110, 111, 298, 380, 385, 387, 397, 399, 415, 417, 422, 427, 456, 541, 613, 614, 682, 683, 684, 867, 868, 994, 997, 1001, 1012, 1046], "proprietari": 1014, "propto": [421, 1000], "prorokovi\u0107": 1057, "protect": [386, 389, 964], "protein": 379, "protocol": [409, 998, 1042, 1055, 1056], "protocol_typ": 256, "prototyp": 1022, "prove": [125, 1022], "proven": [277, 992, 996, 1022], "provenc": 324, "provid": [0, 1, 29, 30, 43, 46, 49, 51, 60, 63, 65, 69, 71, 76, 89, 94, 113, 124, 140, 145, 146, 154, 157, 159, 175, 181, 191, 192, 198, 205, 207, 208, 211, 220, 223, 228, 240, 244, 247, 248, 253, 267, 271, 277, 278, 279, 283, 308, 311, 315, 318, 322, 327, 328, 330, 332, 346, 352, 353, 355, 359, 360, 363, 364, 367, 368, 372, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 397, 398, 399, 402, 403, 406, 409, 411, 412, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 429, 436, 443, 446, 448, 449, 450, 452, 453, 455, 456, 458, 465, 466, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 499, 500, 502, 504, 507, 538, 539, 540, 541, 544, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 599, 600, 607, 611, 616, 617, 633, 638, 639, 640, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 696, 700, 705, 717, 728, 741, 747, 748, 770, 780, 784, 794, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 867, 868, 870, 873, 875, 876, 877, 880, 881, 882, 885, 887, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 936, 941, 955, 957, 974, 975, 976, 987, 988, 990, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1027, 1030, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "provinc": 324, "provost": [794, 998], "proxi": [190, 191, 420, 866, 1027, 1044], "prun": 391, "prune": [188, 362, 367, 424, 506, 563, 564, 565, 566, 570, 571, 599, 650, 836, 918, 919, 920, 921, 1001, 1019, 1020, 1034, 1039, 1042, 1049, 1050], "przybocki": 998, "ps_lsvm_score": 196, "ps_lsvm_time": 196, "pseudo": [220, 316, 387, 419, 427, 446, 458, 460, 468, 475, 476, 477, 479, 480, 481, 482, 539, 567, 568, 569, 633, 640, 645, 647, 648, 652, 653, 658, 659, 666, 667, 668, 669, 683, 697, 701, 809, 810, 818, 820, 859, 866, 902, 903, 907, 910, 911, 912, 915, 946, 947, 994, 1010, 1044, 1053], "pseudo_likelihood": 866, "pseudocount": [542, 1047], "psf": [0, 385], "psi": 420, "psi_1": 420, "psi_2": 420, "psi_n": 420, "pspachtholz": [1049, 1050, 1051], "psycholog": [415, 711, 722], "psychometrica": 641, "psychometrika": [696, 700, 995], "pt": [49, 380, 424, 886, 1008], "pt_i": 308, "pt_j": 308, "ptocca": 1049, "ptp": 50, "pts_": 49, "pts_test": 49, "pts_train": 49, "pub": [244, 848, 905], "public": [0, 111, 379, 385, 387, 389, 390, 397, 398, 399, 400, 419, 422, 474, 670, 677, 691, 692, 698, 908, 994, 1002, 1039, 1044, 1045, 1050, 1051, 1052, 1055], "publicli": [385, 1049], "publish": [379, 380, 387, 389, 393, 399, 1010, 1018, 1051], "pubu": [233, 250, 304, 347], "pubu_r": 112, "puerta": 1054, "puggioni": 1043, "puhuk": [1053, 1054], "pujalt": 1053, "pulapakura": [1056, 1057], "pulchritud": 359, "pulido": 1052, "pulkit": [1047, 1048, 1050], "pull": [103, 330, 373, 383, 388, 399, 400, 1021, 1049], "puls": 382, "punctuat": [423, 594, 595, 597], "puneet": 1046, "puneeth": [1056, 1057], "puor": 127, "puor_r": 179, "pure": [112, 113, 117, 203, 219, 399, 415, 479, 485, 502, 563, 564, 565, 566, 570, 571, 572, 711, 721, 792, 801, 918, 919, 920, 921, 1008], "pure_emp_cov": 113, "pure_loc": 113, "pure_x": 113, "purepremium": 237, "puriti": [140, 922, 924], "purna": 1053, "purpl": [110, 122, 243], "purport": 1046, "purpos": [47, 50, 71, 117, 149, 154, 186, 233, 234, 235, 239, 241, 254, 265, 267, 271, 273, 274, 348, 349, 355, 359, 360, 368, 380, 385, 387, 398, 399, 400, 403, 408, 412, 415, 416, 420, 422, 423, 424, 425, 832, 833, 870, 995, 998, 999, 1001, 1004, 1017, 1023, 1051, 1053, 1057], "pursu": 191, "pursuit": [1, 125, 127, 133, 188, 197, 290, 420, 480, 532, 537, 543, 548, 554, 670, 671, 691, 692, 1019, 1020, 1034, 1039], "push": [63, 385, 389, 413, 1021], "pushd": 393, "put": [74, 92, 166, 175, 177, 251, 258, 262, 291, 313, 320, 331, 342, 353, 357, 374, 387, 389, 390, 393, 409, 425, 449, 453, 465, 521, 620, 653, 667, 803, 887, 891, 899, 912, 913, 914, 915, 916, 937, 988, 995, 997, 998, 999, 1005, 1008, 1024, 1026, 1032], "putnam": 1045, "putschblo": 1052, "pvalu": [1, 598, 601, 602, 604, 605, 606, 835], "pvalue_iri": 283, "pvalue_rand": 283, "pvalues_": [169, 598, 601, 602, 604, 605, 606, 1039], "pvnguyen": 1043, "pwalchessen": 1051, "pwd": 393, "px": [144, 278], "pxd": 385, "py": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 373, 383, 385, 386, 389, 391, 393, 399, 403, 423, 426, 446, 450, 460, 467, 504, 536, 650, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 885, 889, 942, 998, 1017, 1019, 1032, 1039, 1041, 1045, 1049, 1053], "py3": 403, "py39": 403, "pyamg": [80, 403, 408, 415, 458, 468, 697, 701], "pyarrow": [403, 408], "pybrain": 1039, "pycon": [409, 1016], "pyd": 386, "pydata": [42, 385, 393, 403, 408, 409, 1016, 1022], "pydata_2013": 1022, "pydebug": 391, "pyflak": 387, "pyfunc": [705, 1001], "pyfuncdist": 705, "pymc": 1017, "pynndesc": 298, "pynndescenttransform": 298, "pyodid": 385, "pyoxid": 1052, "pypi": [373, 383, 385, 387, 389, 391, 403, 1014, 1047, 1051, 1053, 1054, 1056], "pyplot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 334, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 385, 392, 444, 508, 637, 638, 703, 704, 706, 707, 708, 812, 829, 1027, 1028, 1029, 1030, 1031, 1036, 1053], "pyplpt": 379, "pyproject": 389, "pypy3": 1047, "pysniak": 1042, "pystruct": [397, 1017], "pytabl": 379, "pytb": 393, "pytest": [1, 327, 373, 383, 385, 387, 388, 403, 408, 411, 941, 942, 1049, 1052], "python": [0, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 372, 374, 379, 383, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 403, 408, 409, 411, 416, 423, 502, 514, 515, 587, 705, 817, 884, 998, 1008, 1013, 1014, 1018, 1021, 1022, 1023, 1024, 1026, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056], "python2": 1047, "python3": [383, 403], "python37": 403, "pythonsoftwarefound": 403, "pythonx": 383, "pytorch": [44, 335, 397, 1017, 1018, 1028, 1055, 1056], "pytorch_enable_mps_fallback": 411, "pyx": [385, 386, 391, 393], "p\u00e9rez": 1047, "p\u00f6lsterl": [1046, 1049, 1052], "q": [50, 104, 116, 151, 219, 330, 412, 415, 420, 946, 994, 1013], "q1": 515, "q327": 382, "q_": 1013, "q_m": 1014, "q_max": [888, 900], "q_min": [888, 900], "qaiser": 1056, "qda": [66, 382, 555, 556, 1020, 1034, 1044], "qdeffens": [1049, 1052], "qemu": 393, "qi": [515, 1051], "qian": [1045, 1050], "qiang": 1043, "qianm": 1051, "qid": [493, 514, 515, 1040, 1045], "qimu": 1045, "qin": [0, 319, 382, 404, 423, 1046, 1047, 1048, 1049, 1050], "qingi": 1047, "qinhanmin2005": 319, "qizhi": 1050, "qmarcou": 1056, "qn": 515, "qp": 1013, "qr": [80, 221, 411, 540, 547, 550, 946, 947, 995, 1045, 1056], "qt": [322, 887], "qtconsol": 391, "quad": [425, 1001, 1012], "quadcontourset": 637, "quadmesh": 637, "quadrant": 318, "quadrat": [1, 11, 42, 47, 64, 68, 112, 113, 114, 180, 184, 188, 233, 256, 267, 279, 330, 446, 464, 467, 555, 556, 629, 637, 654, 664, 665, 675, 682, 686, 722, 915, 916, 994, 995, 998, 1001, 1004, 1008, 1012, 1013, 1019, 1020, 1034, 1040], "quadraticdiscriminantanalysi": [1, 66, 69, 555, 992, 999, 1001, 1039, 1044, 1046, 1054], "quadro": 1052, "quadv": 1053, "qualifi": 390, "qualit": [43, 44, 87, 89, 95, 144, 151, 219, 332, 380, 415, 445, 707, 1028, 1054], "qualiti": [0, 12, 26, 44, 57, 60, 71, 80, 82, 83, 92, 127, 147, 154, 191, 225, 270, 275, 284, 285, 286, 352, 385, 393, 397, 399, 410, 415, 417, 420, 458, 468, 475, 480, 563, 564, 565, 566, 570, 571, 749, 820, 902, 903, 918, 919, 920, 921, 947, 993, 995, 1003, 1010, 1014, 1017, 1018, 1022, 1027, 1028, 1034], "quang": 1050, "quansight": 0, "quantifi": [12, 26, 42, 71, 83, 110, 180, 237, 271, 284, 335, 387, 399, 410, 579, 873, 993, 1006, 1008, 1034], "quantil": [1, 78, 87, 97, 121, 138, 140, 188, 197, 273, 318, 321, 322, 397, 422, 444, 445, 464, 525, 558, 559, 566, 568, 663, 676, 729, 751, 754, 756, 833, 875, 887, 888, 889, 899, 900, 998, 1008, 1019, 1020, 1034, 1039, 1043, 1046, 1048, 1052, 1053, 1055, 1057], "quantile_list": 51, "quantile_rang": [318, 888, 900, 1045], "quantile_regress": 221, "quantile_transform": [1, 108, 887, 898, 1008, 1046, 1047, 1048, 1057], "quantileregressor": [1, 330, 994, 998, 1052, 1053, 1054], "quantiles_": [887, 1008, 1049], "quantiletransform": [1, 108, 192, 322, 416, 471, 886, 899, 988, 1008, 1046, 1047, 1048, 1049, 1050, 1055, 1057], "quantiletransformerquantiletransform": 192, "quantit": [42, 43, 44, 51, 61, 95, 151, 154, 162, 173, 273, 292, 382, 1028], "quantiti": [50, 148, 277, 284, 329, 372, 399, 415, 422, 727, 728, 729, 730, 791, 866, 987, 989, 992, 994, 1044], "quantiz": [44, 70, 80, 92, 127, 188, 379, 380, 415, 449, 453, 455, 512, 785, 875, 972, 1008, 1019], "quantum": 996, "quartil": 888, "quartimax": [538, 1051], "quasi": [387, 867, 868, 994], "quazi": [1046, 1047], "queensland": 382, "quentin": [1046, 1047, 1048, 1055, 1056], "queqichao": 1043, "queri": [198, 301, 311, 372, 421, 426, 450, 452, 456, 463, 558, 616, 617, 634, 650, 651, 732, 762, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 998, 1001, 1014, 1017, 1021, 1041, 1043, 1044, 1047], "query_id": [493, 514, 515], "query_radiu": [850, 851], "question": [0, 164, 190, 271, 277, 355, 384, 385, 390, 393, 409, 419, 422, 839, 912, 915, 994, 997, 998, 1004, 1022], "queue": [46, 1001, 1042], "quick": [42, 129, 259, 385, 387, 391, 403, 612, 836, 998, 999, 1008, 1022, 1030, 1036], "quicker": 997, "quickest": 383, "quickli": [73, 257, 314, 327, 382, 385, 386, 419, 422, 698, 784, 994, 1001, 1002, 1022, 1032, 1050], "quinlan": 1014, "quinonez": 1047, "quintana": 998, "quiroz": [71, 91, 144, 154, 198, 203, 256, 278, 280, 323, 359, 360, 361], "quit": [42, 51, 63, 87, 91, 117, 141, 164, 173, 191, 192, 217, 237, 271, 285, 295, 330, 359, 372, 390, 398, 415, 423, 993, 995, 1000, 1022, 1047], "quiver": 126, "quot": [36, 50, 51, 53, 103, 278, 359, 360, 373, 379, 380, 383, 389, 403, 411, 494, 495, 502, 998, 1010, 1013, 1032, 1054], "quota": [1052, 1053], "quotat": 380, "quotient": 998, "r": [0, 1, 46, 48, 49, 50, 51, 52, 60, 61, 62, 63, 73, 77, 99, 108, 110, 111, 112, 113, 117, 124, 131, 134, 138, 141, 142, 147, 151, 152, 153, 162, 169, 176, 177, 178, 182, 183, 184, 186, 187, 191, 201, 203, 204, 208, 219, 226, 229, 237, 244, 249, 252, 262, 265, 268, 276, 277, 280, 282, 283, 284, 287, 290, 293, 297, 300, 301, 305, 309, 311, 324, 331, 350, 352, 361, 368, 380, 382, 386, 389, 397, 399, 409, 412, 413, 415, 417, 418, 419, 420, 422, 423, 432, 438, 443, 452, 457, 459, 471, 475, 480, 484, 488, 489, 490, 504, 510, 519, 526, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 594, 595, 596, 597, 612, 615, 616, 617, 633, 641, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 691, 692, 698, 702, 722, 727, 728, 729, 730, 734, 736, 787, 791, 794, 805, 806, 820, 823, 828, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 859, 860, 861, 867, 868, 881, 886, 898, 905, 906, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 923, 964, 988, 990, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1012, 1013, 1014, 1017, 1032, 1039, 1043, 1046, 1049, 1050, 1051, 1052, 1054, 1056], "r0": [809, 810], "r1": 576, "r11": [219, 237], "r2": [108, 139, 144, 159, 190, 192, 214, 252, 387, 416, 422, 560, 576, 679, 833, 868, 998, 1006, 1048], "r2007": 422, "r22": 219, "r25": 237, "r26": 219, "r2_score": [1, 108, 190, 203, 214, 215, 411, 422, 438, 471, 488, 489, 490, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 730, 734, 843, 844, 853, 861, 868, 911, 913, 916, 919, 921, 987, 998, 1040, 1042, 1048, 1052, 1053, 1057], "r2_score_ard": 203, "r2_score_enet": 203, "r2_score_lasso": 203, "r2_score_nnl": 214, "r2_score_ol": 214, "r2_with_abl": 190, "r2_without_": 190, "r3": 576, "r72": 219, "r73": 237, "r82": 219, "r93": 219, "r_": [49, 133, 232, 233, 263, 284, 304, 305, 347, 353, 357, 415, 713, 998, 1014], "r_0": 987, "r_k": 284, "r_multi": 1006, "r_n": [284, 713, 998], "r_regress": [1, 424, 612, 1052, 1053, 1056], "r_squar": 398, "ra": 256, "raamana": [1047, 1048], "rabbit": [331, 333, 1008], "raccoon": [87, 127, 420], "raccoon_fac": [87, 127], "race": [191, 334, 380, 502, 1042], "race_hispan": 191, "race_oth": 191, "race_whit": 191, "rachel": [1051, 1054], "rachelcjordan": 1050, "rachez": [1044, 1045], "rachit": [1045, 1051, 1054], "rachum": 1051, "radar": 1022, "radford": 994, "radhakrishnan": 1047, "radial": [1, 43, 129, 175, 180, 182, 348, 352, 377, 458, 628, 697, 996, 1013, 1034], "radian": [311, 705, 770], "radii": [850, 851], "radiu": [1, 173, 293, 305, 348, 382, 415, 448, 456, 694, 770, 787, 850, 851, 852, 853, 854, 858, 860, 861, 862, 864, 1001, 1041, 1043, 1053, 1056], "radius1": 100, "radius2": 100, "radius3": 100, "radius4": 100, "radius_neighbor": [331, 858, 860, 861, 862, 1043, 1048, 1049, 1051, 1052, 1053, 1054], "radius_neighbors_graph": [1, 415, 426, 450, 852, 853, 854, 856, 858, 860, 861, 862, 863, 1001, 1043, 1048, 1051], "radiusneighborsclassifi": [1, 331, 852, 853, 858, 861, 999, 1001, 1039, 1041, 1045, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "radiusneighborsregressor": [1, 331, 852, 853, 858, 860, 999, 1001, 1039, 1041, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "radiusneighborstransform": [1, 327, 854, 1001, 1049, 1051, 1053, 1054], "radostin": [1047, 1048], "raduspaimoc": 1050, "raf": 1048, "rafael": [1022, 1040, 1041, 1043, 1046], "rafal": [1054, 1055], "rafei": 1051, "raff": 1042, "raffaello": 1048, "rafiqu": [1047, 1048], "raghav": [0, 281, 318, 405, 1043, 1044, 1045, 1046, 1047, 1051], "raghavan": [420, 596, 845, 849, 996, 998, 1000], "raghu": [415, 448], "raghunathan": [1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "raghuv": [1054, 1055], "raghuwanshi": 1053, "rah": 647, "rahiel": 1043, "rahil": [1053, 1054, 1055, 1056, 1057], "rahimi": [647, 990], "rahmaan": 1049, "rahman": [1046, 1047, 1051], "rahn": [1046, 1049], "rahul": [1051, 1056], "rai": [0, 405, 998, 1039, 1049, 1051, 1052], "raimundo": 1047, "rain": [42, 51, 192, 414, 994], "rainbow": [60, 241], "rainfal": 994, "rais": [1, 136, 220, 253, 254, 271, 280, 322, 330, 385, 387, 389, 390, 391, 394, 397, 399, 406, 409, 416, 419, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 515, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 582, 583, 587, 588, 594, 595, 596, 597, 599, 600, 608, 609, 616, 617, 623, 635, 638, 641, 642, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 702, 704, 708, 715, 717, 718, 719, 720, 733, 735, 736, 744, 784, 788, 789, 790, 793, 794, 795, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 820, 824, 828, 829, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 859, 860, 861, 865, 867, 868, 869, 870, 873, 874, 875, 876, 877, 882, 883, 884, 888, 889, 890, 897, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 928, 930, 931, 933, 934, 951, 955, 959, 982, 983, 984, 985, 998, 1008, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "raisadz": 1057, "raise_except": 984, "raise_warn": [280, 718, 984], "raj": [1056, 1057], "rajagopalan": [0, 405, 1047, 1051], "rajaona": [1045, 1046], "rajat": [1042, 1049], "rajborirug": 256, "rajdeep": 1048, "rajendra": 1047, "raji": [1054, 1055], "rakotoarison": [1046, 1047, 1049], "ralf": [1042, 1045, 1046, 1054, 1055, 1057], "ralph": 1057, "ram": [54, 87, 374, 409, 422, 902, 903, 1000, 1013, 1032, 1045, 1051, 1054, 1055], "ramakrishnan": [415, 448], "ramana": [1045, 1046], "ramanath": 1044, "ramesh": [380, 1022, 1042, 1045, 1049], "rameshwar": [1046, 1047], "ramil": [1047, 1048], "rammig": [1022, 1045], "ramo": 1054, "rampin": 1046, "ramyanp": [1051, 1052], "ramzi": 1051, "ram\u00edrez": 998, "rand": [1, 52, 60, 71, 72, 73, 74, 78, 83, 92, 96, 131, 141, 156, 158, 168, 198, 203, 241, 242, 246, 252, 253, 292, 310, 328, 329, 334, 341, 342, 354, 360, 365, 366, 394, 406, 550, 710, 711, 721, 763, 787, 792, 902, 903, 905, 906, 907, 1010, 1023, 1039, 1050, 1051], "rand_index": 711, "rand_scor": [1, 71, 415, 721, 998, 1051], "randal": [890, 1043, 1053], "randi": 1045, "randint": [49, 71, 113, 122, 150, 187, 193, 242, 249, 253, 255, 289, 329, 334, 387, 390, 398, 406, 810, 827, 845, 846, 847, 849, 987, 988], "randn": [52, 68, 69, 73, 88, 99, 100, 112, 113, 127, 131, 155, 168, 175, 179, 190, 193, 208, 213, 214, 218, 232, 233, 236, 263, 266, 267, 272, 284, 286, 287, 292, 304, 305, 325, 328, 329, 334, 347, 352, 353, 357, 387, 390, 649, 676, 678, 684, 693, 827, 913, 916], "randolf": 1057, "random": [1, 13, 36, 42, 43, 44, 45, 49, 50, 51, 52, 57, 58, 60, 61, 62, 63, 66, 68, 69, 71, 73, 74, 78, 79, 82, 84, 86, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 122, 125, 126, 127, 130, 131, 137, 139, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 162, 166, 168, 169, 172, 175, 176, 179, 181, 182, 184, 186, 187, 188, 189, 190, 198, 199, 200, 201, 203, 208, 209, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 232, 233, 236, 237, 239, 240, 242, 243, 244, 245, 246, 251, 252, 253, 254, 255, 256, 262, 263, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 278, 280, 282, 284, 286, 287, 288, 289, 292, 297, 298, 303, 304, 305, 310, 313, 319, 321, 322, 325, 328, 329, 331, 333, 335, 337, 338, 341, 342, 347, 348, 350, 351, 352, 353, 354, 357, 359, 360, 365, 366, 372, 373, 377, 381, 388, 390, 397, 398, 399, 406, 410, 411, 413, 415, 423, 424, 428, 440, 446, 449, 453, 455, 457, 458, 459, 460, 464, 465, 466, 468, 470, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 494, 495, 496, 497, 498, 501, 502, 503, 508, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 541, 542, 544, 545, 546, 547, 550, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 579, 588, 589, 590, 595, 613, 614, 616, 617, 633, 636, 638, 640, 645, 646, 647, 648, 649, 652, 653, 655, 656, 658, 659, 660, 664, 666, 667, 668, 669, 676, 677, 678, 682, 683, 684, 685, 693, 695, 696, 697, 698, 699, 700, 701, 707, 710, 711, 714, 737, 749, 787, 794, 799, 803, 804, 806, 808, 809, 810, 811, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 835, 836, 841, 843, 844, 845, 846, 847, 849, 850, 851, 855, 859, 866, 867, 868, 870, 873, 875, 884, 887, 891, 899, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 933, 944, 946, 947, 967, 969, 972, 988, 990, 993, 995, 997, 998, 1002, 1003, 1004, 1006, 1008, 1013, 1014, 1017, 1018, 1019, 1020, 1023, 1027, 1028, 1030, 1031, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "random_": 208, "random_02": 208, "random_05": 208, "random_08": 208, "random_11": 208, "random_cat": [193, 1006], "random_choice_csc": 1049, "random_forest": 143, "random_from_data": [265, 803, 804, 997], "random_label": 71, "random_num": [193, 1006], "random_offset_": [647, 648], "random_project": [1, 240, 250, 902, 903, 904, 1010, 1015, 1040, 1045, 1055, 1056], "random_sampl": [203, 850, 851, 855], "random_se": [48, 122, 147], "random_search": [278, 285], "random_st": [42, 43, 44, 45, 48, 50, 51, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 72, 76, 77, 78, 80, 82, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 108, 114, 117, 122, 124, 126, 129, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 164, 169, 170, 172, 175, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 200, 201, 205, 211, 218, 219, 222, 223, 225, 226, 227, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 259, 260, 262, 264, 265, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 295, 297, 298, 301, 302, 306, 307, 308, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 346, 348, 349, 350, 355, 356, 359, 360, 363, 367, 368, 387, 390, 394, 398, 399, 411, 414, 415, 416, 419, 420, 422, 423, 427, 440, 443, 444, 446, 449, 453, 455, 457, 458, 459, 460, 464, 465, 466, 468, 475, 480, 484, 493, 494, 497, 498, 501, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 599, 600, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 638, 639, 640, 641, 644, 645, 646, 647, 648, 652, 653, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 680, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 716, 741, 794, 798, 799, 803, 804, 805, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 855, 859, 866, 867, 868, 870, 875, 887, 891, 899, 902, 903, 910, 911, 912, 915, 917, 918, 919, 920, 921, 923, 924, 944, 946, 947, 967, 969, 972, 987, 988, 990, 993, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1013, 1014, 1023, 1027, 1028, 1032, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "random_state_": [387, 542, 633, 859, 1053], "random_tre": 572, "random_tree_embed": 143, "random_unlabeled_point": [329, 905, 906, 907], "random_weights_": [647, 648], "randomforest": [48, 147, 372, 422, 918, 919, 1044], "randomforestclassifi": [1, 62, 63, 66, 90, 142, 143, 144, 145, 146, 147, 161, 193, 194, 258, 259, 274, 289, 327, 329, 334, 359, 368, 398, 399, 413, 422, 424, 563, 564, 565, 567, 572, 573, 575, 809, 810, 828, 840, 920, 987, 988, 999, 1006, 1022, 1036, 1043, 1044, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "randomforestclassifierifittedrandomforestclassifi": [62, 145, 146, 334], "randomforestclassifierinot": 334, "randomforestclassifierrandomforestclassifi": [62, 193, 258, 289], "randomforestregressor": [1, 48, 144, 158, 159, 162, 186, 187, 329, 334, 398, 422, 563, 564, 566, 568, 572, 574, 576, 638, 639, 920, 988, 999, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "randomforestregressorrandomforestregressor": [159, 162], "randomgeek78": 1053, "randomized_range_find": [1, 394, 1040, 1045], "randomized_svd": [1, 54, 394, 457, 459, 538, 547, 550, 552, 1039, 1040, 1045, 1052, 1053, 1054], "randomized_svd_low_rank": 1046, "randomizedlasso": 1046, "randomizedlogisticregress": 1046, "randomizedpca": [1022, 1039, 1041, 1042, 1044, 1045, 1046], "randomizedsearchcv": [1, 44, 104, 175, 278, 285, 329, 368, 398, 406, 581, 987, 998, 1012, 1017, 1028, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1056, 1057], "randomizedsearchcvinot": 104, "randomli": [1, 51, 71, 82, 84, 95, 104, 116, 118, 140, 141, 154, 155, 178, 186, 188, 192, 231, 236, 250, 254, 267, 272, 283, 295, 297, 337, 368, 373, 394, 397, 398, 415, 419, 422, 425, 455, 464, 518, 521, 525, 529, 537, 543, 551, 552, 557, 565, 566, 567, 568, 569, 570, 571, 616, 617, 677, 685, 696, 700, 722, 803, 804, 866, 904, 918, 919, 920, 921, 997, 999, 1001, 1004, 1006, 1010, 1014, 1019, 1030, 1032, 1050, 1054, 1056], "randomst": [1, 43, 52, 57, 58, 60, 66, 69, 71, 78, 84, 95, 96, 113, 114, 117, 124, 126, 131, 139, 150, 151, 154, 155, 156, 158, 169, 175, 176, 179, 181, 182, 184, 186, 187, 190, 193, 198, 199, 200, 201, 203, 208, 213, 220, 221, 226, 233, 242, 246, 252, 253, 262, 265, 272, 280, 283, 284, 286, 287, 288, 289, 313, 319, 321, 322, 325, 328, 329, 331, 333, 334, 337, 338, 342, 351, 365, 366, 387, 390, 394, 399, 406, 420, 427, 428, 446, 449, 453, 455, 457, 458, 459, 460, 464, 465, 466, 468, 475, 476, 480, 481, 482, 484, 485, 486, 487, 494, 497, 498, 501, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 589, 590, 613, 614, 616, 617, 633, 638, 640, 645, 646, 647, 648, 649, 652, 653, 655, 656, 658, 659, 660, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 678, 680, 682, 683, 684, 685, 693, 695, 696, 697, 698, 699, 700, 701, 707, 787, 799, 803, 804, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 828, 834, 835, 836, 840, 841, 844, 845, 846, 847, 849, 850, 851, 855, 859, 866, 867, 868, 875, 887, 891, 899, 902, 903, 905, 906, 907, 910, 911, 912, 915, 916, 918, 919, 920, 921, 933, 946, 947, 967, 969, 972, 1008, 1023, 1034], "randomtreesembed": [1, 143, 157, 240, 422, 920, 1040, 1047, 1048, 1052, 1053, 1054], "randomtreesembedding_": 572, "randomtreesembeddingrandomtreesembed": 143, "rang": [1, 42, 43, 44, 45, 46, 48, 50, 54, 56, 57, 61, 62, 63, 67, 68, 71, 72, 74, 76, 80, 81, 82, 84, 85, 89, 94, 95, 97, 98, 110, 111, 113, 114, 138, 140, 141, 142, 145, 151, 154, 158, 168, 171, 172, 176, 191, 192, 196, 203, 208, 209, 213, 217, 219, 220, 223, 226, 227, 235, 237, 240, 242, 249, 250, 255, 256, 262, 264, 267, 268, 271, 272, 276, 277, 278, 280, 281, 282, 284, 285, 286, 288, 289, 290, 292, 297, 302, 308, 311, 316, 318, 323, 324, 327, 331, 332, 338, 348, 355, 359, 360, 364, 367, 373, 379, 380, 382, 385, 387, 391, 394, 399, 409, 415, 419, 422, 425, 446, 467, 475, 477, 478, 479, 480, 481, 482, 484, 487, 497, 500, 501, 520, 533, 547, 559, 560, 565, 566, 569, 594, 595, 597, 635, 638, 644, 646, 654, 655, 675, 677, 682, 683, 684, 686, 698, 718, 737, 752, 794, 836, 842, 856, 858, 860, 861, 866, 880, 887, 888, 889, 895, 896, 899, 900, 903, 904, 946, 947, 987, 994, 998, 1002, 1012, 1018, 1022, 1026, 1027, 1028, 1030, 1044, 1045, 1046, 1047, 1049, 1052, 1055], "range_n_clust": 94, "range_n_outli": 113, "rangeindex": [191, 271, 502], "rangl": [990, 998, 1012, 1013], "ranjanikrishnan": 1052, "rank": [1, 42, 54, 61, 112, 128, 131, 145, 171, 193, 194, 237, 275, 277, 285, 381, 410, 412, 413, 417, 418, 420, 422, 423, 514, 515, 527, 530, 555, 556, 599, 600, 612, 654, 663, 675, 686, 702, 726, 732, 733, 745, 746, 762, 794, 800, 809, 810, 947, 987, 989, 990, 995, 1006, 1008, 1022, 1034, 1040, 1045, 1048, 1049, 1053, 1054, 1057], "rank_": 663, "rank_t": 806, "rank_test_": 281, "rank_test_precis": [275, 281], "rank_test_recal": 275, "rank_test_scor": [277, 285, 806, 820, 1045], "rankdata": 1046, "ranked_exposur": [219, 237], "ranked_frequ": 219, "ranked_pure_premium": 237, "ranking_": [171, 599, 600], "rankylau": 1047, "ransac": [1, 188, 197, 225, 236, 530, 655, 663, 677, 684, 685, 1019], "ransacregressor": [1, 222, 225, 236, 406, 655, 684, 685, 994, 999, 1042, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1057], "rao": [419, 1051, 1054], "raphael": 1056, "rapha\u00ebl": 1049, "raphson": [654, 675, 686], "rapid": 1022, "rapidli": [223, 279, 1013, 1022, 1026], "rare": [63, 192, 324, 368, 389, 397, 399, 402, 413, 415, 419, 595, 654, 664, 665, 675, 686, 910, 935, 994, 1008, 1022, 1046, 1047, 1048, 1052, 1054, 1057], "rarer": [359, 361, 423], "raschka": [323, 1044, 1045, 1046, 1047, 1048, 1051], "rashchedrin": 1046, "rasmu": [196, 1046], "rasmussen": [180, 425, 616, 617, 620, 625, 628], "raspberri": 403, "raster": 103, "rastgoo": 1056, "rastogi": 1047, "rastrojo": 711, "rasul": [1044, 1046, 1047], "rat": [49, 311, 380, 504], "rate": [1, 42, 138, 142, 148, 154, 168, 192, 219, 226, 237, 250, 256, 271, 274, 277, 284, 286, 287, 314, 315, 316, 374, 385, 414, 415, 416, 420, 424, 452, 472, 542, 559, 560, 565, 566, 567, 568, 598, 601, 602, 604, 605, 606, 612, 650, 651, 674, 682, 683, 684, 698, 704, 708, 733, 788, 795, 866, 867, 868, 904, 987, 994, 995, 998, 1001, 1002, 1012, 1014, 1022, 1043, 1047, 1048], "rather": [50, 63, 87, 114, 138, 141, 154, 186, 191, 219, 220, 233, 256, 291, 322, 323, 359, 360, 368, 373, 381, 383, 385, 387, 390, 391, 393, 397, 398, 399, 400, 415, 419, 420, 422, 423, 425, 454, 467, 469, 470, 473, 571, 587, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 635, 652, 653, 658, 659, 666, 667, 668, 669, 787, 820, 841, 843, 844, 873, 910, 911, 922, 947, 992, 994, 995, 998, 1000, 1001, 1005, 1018, 1027, 1030, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1054, 1055, 1057], "ratio": [1, 45, 87, 100, 106, 132, 188, 250, 252, 265, 269, 372, 385, 415, 417, 419, 422, 456, 462, 499, 500, 521, 547, 555, 556, 557, 637, 664, 716, 718, 722, 731, 736, 742, 745, 788, 789, 790, 793, 801, 833, 836, 856, 903, 967, 992, 1004, 1014, 1019, 1028, 1054, 1056], "ration": [1, 180, 271, 629, 996], "rationalquadrat": [1, 180, 184, 425, 622], "raton": 994, "raul": [1041, 1042], "rausch": [340, 342, 1047, 1048, 1051], "rauscho": [340, 342], "rauwuckl": 1051, "ravel": [1, 43, 52, 54, 56, 62, 76, 87, 88, 92, 112, 133, 139, 141, 147, 151, 157, 158, 159, 166, 175, 177, 179, 180, 181, 182, 191, 198, 209, 210, 212, 219, 232, 233, 240, 244, 246, 250, 252, 256, 260, 264, 266, 271, 280, 284, 286, 291, 298, 303, 304, 310, 311, 313, 314, 315, 316, 320, 321, 331, 335, 342, 348, 353, 354, 356, 357, 359, 365, 366, 471, 499, 500, 501, 637, 724, 985, 998, 1055], "ravi": [1051, 1054], "raw": [1, 16, 42, 50, 53, 71, 113, 126, 159, 180, 191, 196, 316, 325, 339, 361, 372, 380, 387, 393, 399, 413, 415, 417, 420, 423, 475, 480, 507, 508, 509, 565, 566, 567, 569, 588, 594, 595, 596, 597, 640, 683, 696, 700, 711, 792, 856, 914, 995, 998, 1002, 1004, 1005, 1008, 1011, 1029, 1031, 1040, 1044, 1047, 1050, 1056], "raw_coef_": [910, 911], "raw_covariance_": [417, 475, 480], "raw_data": 361, "raw_docu": [594, 597], "raw_location_": [417, 475, 480], "raw_model": 325, "raw_pixel_classifi": 316, "raw_support_": [475, 480], "raw_target_regr": 416, "raw_valu": [727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 796, 797, 998, 1047, 1050], "raw_x": [423, 588], "raytheon": 50, "raz": 1053, "razor": 1030, "ra\u00fal": 1048, "rb": [46, 409], "rbf": [1, 43, 44, 48, 49, 65, 66, 129, 160, 166, 175, 176, 177, 179, 180, 181, 182, 184, 188, 196, 233, 245, 246, 252, 275, 277, 279, 282, 293, 304, 342, 343, 345, 354, 377, 416, 420, 422, 458, 468, 508, 510, 541, 547, 616, 617, 618, 619, 622, 624, 625, 626, 627, 629, 630, 637, 645, 646, 647, 648, 649, 682, 697, 771, 780, 782, 806, 817, 820, 826, 870, 890, 905, 906, 910, 912, 913, 914, 915, 916, 987, 990, 991, 993, 995, 998, 1004, 1008, 1011, 1019, 1023, 1025, 1028, 1034, 1045, 1050], "rbf_featur": [647, 990], "rbf_kernel": [1, 771, 996, 1043], "rbf_svc": [342, 1013], "rbfsampler": [1, 251, 645, 646, 648, 990, 1023, 1043, 1053, 1054], "rbm": [1, 316, 866, 867, 868, 1003], "rbm_features_classifi": 316, "rc": [233, 389], "rc1": 389, "rceil": [412, 1004], "rcond": 133, "rcparam": [46, 246, 251, 325], "rcv1": [1, 378, 503, 1034, 1044], "rcwoolston": 1050, "rd": 423, "rd9e56ef97513": 1, "rda": 382, "rdbu": [66, 69, 124, 235, 313, 348, 353], "rdbu_r": [88, 114, 134, 348], "rdownload": 46, "rdylbu": [147, 364], "re": [42, 46, 52, 62, 63, 90, 103, 104, 138, 148, 178, 190, 191, 237, 253, 263, 267, 280, 282, 286, 328, 359, 361, 373, 385, 386, 389, 393, 398, 400, 406, 413, 419, 423, 475, 476, 477, 478, 479, 480, 481, 482, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 652, 658, 666, 668, 808, 823, 826, 918, 919, 920, 921, 994, 999, 1001, 1008, 1013, 1018, 1022, 1032, 1039, 1043, 1044, 1046, 1048], "reach": [95, 144, 149, 173, 219, 221, 235, 237, 271, 279, 331, 348, 367, 390, 400, 403, 415, 420, 424, 456, 463, 514, 515, 599, 600, 633, 650, 651, 652, 653, 658, 659, 660, 661, 662, 666, 667, 668, 669, 672, 673, 674, 682, 683, 684, 685, 687, 688, 689, 690, 735, 736, 789, 803, 804, 867, 868, 907, 987, 998, 1002, 1012, 1014, 1022, 1050, 1054, 1055, 1056], "reachability_": [99, 415, 456, 461, 462, 463], "reachabl": [1, 89, 99, 452, 456, 461, 462, 463, 856, 952], "reactiv": 391, "read": [46, 51, 54, 124, 239, 284, 327, 328, 329, 331, 333, 372, 379, 386, 387, 388, 389, 390, 392, 393, 397, 398, 399, 409, 415, 426, 427, 428, 429, 432, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 943, 987, 994, 998, 999, 1017, 1022, 1032, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1056, 1057], "read_byt": 46, "read_csv": [50, 390, 502, 1054], "read_csv_kwarg": [502, 1055], "readabl": [114, 278, 330, 390, 391, 393, 540, 1048, 1051, 1052, 1053, 1054], "reader": [44, 76, 330, 374, 385, 1028], "readi": [42, 45, 180, 220, 271, 380, 389, 393], "readili": [331, 420, 1014, 1022], "readm": [393, 423, 499], "readonli": [910, 911, 1052, 1054, 1055], "readonly_memmap": 1056, "readthedoc": 399, "real": [51, 66, 69, 89, 91, 103, 107, 110, 112, 113, 138, 154, 178, 191, 223, 243, 246, 256, 270, 271, 283, 292, 302, 305, 319, 320, 347, 352, 361, 372, 378, 379, 382, 389, 391, 394, 397, 398, 399, 412, 413, 415, 417, 419, 420, 422, 423, 475, 495, 496, 499, 500, 501, 502, 503, 506, 507, 510, 516, 557, 558, 559, 561, 562, 563, 564, 565, 566, 570, 571, 598, 600, 601, 602, 603, 604, 605, 606, 637, 705, 710, 730, 734, 758, 761, 763, 791, 801, 835, 867, 868, 912, 913, 914, 915, 916, 919, 921, 988, 989, 990, 995, 998, 1000, 1002, 1003, 1004, 1014, 1016, 1019, 1034, 1039, 1052, 1056], "real_cov": [110, 111, 428, 476, 479, 480, 481, 482, 485, 486, 487], "real_data": 302, "realist": [42, 46, 279, 286, 287, 345, 380, 998], "realiti": 381, "realiz": [219, 1022], "realli": [110, 193, 208, 389, 390, 391, 998, 1004, 1022, 1053], "reappli": 422, "rearrang": [57, 58, 412], "reason": [42, 46, 50, 63, 76, 87, 103, 151, 154, 173, 191, 192, 196, 219, 220, 227, 237, 246, 250, 251, 253, 256, 271, 274, 277, 278, 283, 295, 298, 319, 323, 352, 360, 361, 368, 372, 373, 374, 380, 384, 385, 386, 387, 389, 393, 397, 398, 399, 400, 414, 415, 416, 417, 420, 422, 423, 514, 538, 580, 644, 652, 658, 660, 678, 693, 698, 769, 806, 820, 854, 859, 866, 885, 907, 987, 988, 993, 994, 995, 998, 1000, 1001, 1002, 1004, 1008, 1012, 1013, 1022, 1032, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "reassign": [84, 385, 453, 455, 1040, 1044], "reassignment_ratio": 455, "rebalanc": 399, "rebas": 389, "rebecca": 1046, "rebekah": [1047, 1048, 1049], "reboul": 1049, "rebuild": [372, 383, 409, 423, 448], "rebuilt": [67, 383, 850, 851], "rec": [56, 361, 380, 647], "rec_l1": 52, "rec_l2": 52, "rec_macro": 419, "recal": [1, 44, 61, 67, 103, 114, 129, 170, 188, 247, 256, 269, 271, 275, 295, 316, 337, 338, 385, 399, 414, 415, 510, 610, 706, 712, 713, 714, 718, 719, 733, 735, 736, 737, 788, 789, 790, 793, 794, 828, 836, 839, 871, 890, 894, 910, 994, 1014, 1019, 1028, 1032, 1042, 1043, 1046, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "recalcul": [257, 259, 415, 1036, 1039], "recall_macro": [419, 998], "recall_scor": [1, 61, 271, 284, 419, 714, 790, 998, 1039, 1041, 1042, 1043, 1044, 1049, 1055], "recant": 400, "receiv": [0, 1, 56, 164, 188, 247, 253, 259, 269, 271, 272, 274, 361, 368, 385, 387, 393, 399, 414, 419, 422, 510, 664, 708, 712, 714, 733, 788, 794, 795, 825, 836, 838, 839, 877, 915, 999, 1002, 1003, 1012, 1019, 1049, 1050], "recent": [51, 221, 253, 383, 386, 390, 393, 399, 415, 474, 544, 571, 1012, 1022, 1042, 1051], "recherch": 0, "recht": [647, 990], "recip": [389, 409, 995, 1022], "reciproc": [381, 998], "reckon": 380, "recogn": [42, 43, 64, 85, 87, 117, 119, 127, 146, 171, 188, 220, 270, 302, 330, 337, 338, 391, 406, 415, 423, 508, 703, 719, 836, 915, 998, 1019, 1023, 1056], "recognit": [41, 47, 53, 124, 188, 252, 255, 316, 323, 378, 390, 420, 422, 424, 500, 508, 538, 540, 547, 703, 714, 719, 747, 775, 794, 795, 803, 820, 836, 890, 915, 990, 994, 998, 999, 1003, 1013, 1015, 1019, 1023, 1026, 1034, 1039], "recommend": [117, 146, 186, 236, 247, 253, 273, 286, 322, 329, 352, 372, 373, 379, 383, 385, 387, 391, 393, 397, 403, 409, 418, 419, 420, 422, 424, 444, 453, 455, 457, 466, 502, 514, 541, 544, 550, 555, 567, 568, 575, 588, 589, 595, 612, 617, 637, 638, 644, 664, 665, 676, 682, 698, 703, 704, 706, 708, 812, 818, 820, 829, 866, 873, 875, 882, 889, 890, 895, 896, 898, 899, 900, 901, 903, 912, 915, 947, 987, 995, 998, 1000, 1002, 1005, 1008, 1010, 1012, 1013, 1014, 1016, 1022, 1034, 1041, 1042, 1048, 1049, 1050, 1051, 1053, 1055], "recompil": [386, 391, 403], "recomput": [89, 90, 257, 259, 300, 327, 475, 480, 994, 1010, 1044, 1055], "reconstruct": [1, 41, 54, 57, 100, 124, 125, 129, 188, 218, 242, 243, 331, 409, 420, 423, 488, 489, 490, 537, 539, 541, 543, 544, 545, 546, 548, 549, 551, 552, 554, 589, 593, 658, 678, 694, 695, 699, 902, 903, 994, 995, 1019, 1053], "reconstruct_from_patches_2d": [1, 127, 423, 589], "reconstruction_err_": [544, 546], "reconstruction_error": 694, "reconstruction_error_": 695, "record": [1, 49, 125, 142, 154, 193, 253, 271, 324, 361, 372, 385, 409, 415, 417, 456, 463, 504, 626, 649, 698, 777, 780, 784, 785, 786, 787, 833, 856, 1052, 1053], "recov": [74, 99, 114, 125, 126, 131, 148, 175, 190, 203, 218, 219, 223, 239, 361, 417, 421, 424, 427, 466, 539, 565, 994, 995, 997, 1018, 1031, 1045], "recoveri": [50, 114, 203, 218, 417, 424], "recreat": [82, 257], "recreate_imag": 82, "rect": [46, 86, 198], "rect_colorbar": 318, "rect_histi": 318, "rect_histx": 318, "rect_scatt": 318, "rectangl": 46, "rectangular": [380, 399, 947, 1018], "rectifi": [867, 868], "recurs": [1, 17, 51, 155, 164, 167, 170, 173, 188, 272, 275, 276, 282, 291, 302, 363, 387, 415, 419, 446, 447, 448, 451, 469, 508, 521, 569, 599, 600, 603, 608, 638, 639, 664, 825, 870, 880, 998, 1001, 1004, 1005, 1014, 1019, 1020, 1031, 1034, 1039, 1049, 1050], "recursionerror": 1057, "red": [47, 48, 49, 62, 68, 69, 94, 112, 122, 124, 125, 126, 141, 159, 162, 184, 196, 198, 199, 209, 217, 244, 257, 272, 283, 311, 314, 319, 323, 324, 339, 348, 366, 383, 399, 415, 420, 999], "reda": 1045, "redden": 1050, "reddi": [1046, 1047, 1048, 1053, 1056], "redefin": [57, 151, 191], "redesign": [397, 1039], "redirects_en": 54, "redirects_filenam": 54, "redirects_url": 54, "redistribut": 448, "redo": 360, "reduc": [1, 36, 42, 45, 76, 79, 80, 81, 82, 87, 104, 105, 110, 141, 151, 153, 154, 157, 170, 191, 198, 199, 203, 217, 223, 224, 227, 248, 250, 253, 256, 278, 284, 295, 307, 320, 323, 324, 332, 360, 361, 368, 377, 379, 382, 385, 391, 397, 399, 409, 413, 414, 415, 417, 419, 420, 422, 423, 424, 426, 450, 451, 456, 463, 466, 499, 540, 550, 555, 561, 562, 563, 564, 569, 570, 571, 572, 579, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 616, 633, 649, 658, 678, 679, 680, 681, 693, 698, 701, 787, 806, 809, 810, 812, 820, 829, 831, 832, 833, 834, 837, 879, 880, 887, 899, 902, 903, 910, 911, 918, 919, 920, 921, 987, 990, 992, 993, 994, 995, 998, 1001, 1010, 1011, 1013, 1015, 1023, 1031, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1055, 1057], "reduce_dim": [105, 258, 276, 416], "reduce_dim__k": 105, "reduce_dim__n_compon": [105, 276, 416], "reduce_func": [787, 1050], "reduced_data": 92, "reducer_label": 105, "reduct": [1, 10, 44, 56, 88, 91, 102, 106, 117, 124, 132, 141, 157, 188, 238, 240, 241, 244, 250, 254, 299, 306, 308, 331, 345, 368, 372, 377, 415, 416, 418, 420, 422, 424, 474, 488, 489, 490, 491, 508, 536, 538, 540, 541, 544, 545, 546, 547, 550, 553, 555, 559, 560, 563, 564, 565, 566, 570, 571, 572, 605, 613, 694, 695, 696, 697, 698, 699, 787, 806, 836, 852, 859, 866, 870, 871, 880, 890, 908, 910, 918, 919, 920, 921, 990, 995, 1010, 1014, 1018, 1019, 1020, 1022, 1028, 1034, 1040, 1041, 1042, 1045, 1053, 1054, 1055], "redund": [61, 63, 134, 172, 263, 268, 334, 368, 381, 384, 385, 390, 399, 413, 521, 640, 1018, 1032, 1051], "redundantli": 399, "ref": [385, 393, 988, 1045], "ref_lin": 444, "refactor": [331, 1039, 1041, 1042, 1043, 1049, 1052, 1053, 1054], "refer": [42, 43, 71, 72, 94, 97, 104, 112, 120, 138, 152, 154, 159, 173, 180, 184, 193, 207, 237, 253, 256, 271, 277, 282, 283, 284, 291, 301, 308, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 360, 373, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 397, 398, 399, 400, 403, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 443, 444, 445, 446, 448, 450, 452, 453, 454, 456, 457, 458, 459, 460, 463, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 504, 509, 517, 519, 521, 522, 523, 524, 525, 526, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 550, 553, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 596, 599, 600, 601, 608, 613, 614, 616, 617, 620, 625, 628, 629, 633, 634, 637, 638, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 653, 655, 657, 659, 661, 662, 664, 667, 669, 671, 672, 673, 674, 677, 679, 681, 682, 684, 685, 688, 689, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 710, 711, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 737, 740, 741, 742, 743, 744, 746, 747, 749, 762, 764, 765, 775, 789, 791, 792, 794, 795, 798, 799, 801, 803, 804, 806, 807, 808, 809, 810, 811, 812, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 845, 846, 847, 849, 852, 855, 856, 857, 859, 866, 867, 868, 870, 875, 876, 877, 879, 880, 882, 883, 884, 886, 887, 888, 890, 891, 898, 903, 904, 905, 906, 907, 908, 910, 912, 913, 915, 916, 918, 919, 920, 921, 935, 947, 964, 987, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1021, 1023, 1027, 1031, 1032, 1039, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "referenc": [382, 385, 387, 393, 399, 902, 903, 1001, 1046, 1052], "references_": 887, "refin": [61, 114, 478, 715, 998, 1032], "refit": [145, 164, 170, 172, 188, 269, 276, 278, 281, 284, 285, 289, 399, 414, 419, 425, 508, 573, 633, 665, 671, 719, 806, 809, 810, 820, 828, 836, 915, 987, 994, 998, 1019, 1046, 1047, 1048, 1057], "refit_strategi": 275, "refit_time_": [806, 809, 810, 820, 1047], "reflect": [50, 74, 80, 81, 112, 122, 125, 148, 192, 193, 219, 237, 286, 302, 360, 381, 384, 389, 399, 402, 412, 456, 462, 995, 998, 1004, 1006, 1031, 1040, 1048, 1057], "reformul": 384, "refrain": [220, 385], "refug": 99, "refurbish": 6, "refus": [271, 397, 900, 901], "reg": [152, 191, 199, 253, 319, 328, 353, 422, 564, 566, 574, 656, 657, 659, 660, 661, 662, 663, 669, 670, 671, 676, 677, 684, 685, 695, 699, 921, 994, 1044], "reg1": [162, 422], "reg2": [162, 422], "reg3": [162, 422], "reg_covar": [262, 803, 804], "reg_nnl": 214, "reg_ol": 214, "reg_param": 556, "regard": [0, 10, 43, 45, 49, 51, 87, 89, 104, 120, 129, 165, 175, 180, 192, 193, 208, 216, 221, 241, 252, 256, 279, 286, 287, 301, 360, 380, 381, 385, 386, 390, 397, 399, 409, 415, 420, 422, 423, 425, 449, 453, 458, 465, 468, 507, 620, 625, 662, 664, 707, 749, 804, 812, 828, 829, 834, 852, 853, 991, 994, 998, 1000, 1001, 1003, 1005, 1012, 1013, 1014, 1025, 1032, 1046, 1049], "regardless": [237, 278, 279, 280, 373, 385, 415, 541, 638, 639, 664, 710, 721, 998, 1010, 1047, 1054, 1055], "regedit": 403, "regener": 875, "regex": [277, 361, 470, 472], "regexp": [594, 595, 597], "regim": [42, 399, 910, 911, 997], "region": [50, 54, 58, 61, 70, 81, 82, 83, 87, 90, 100, 160, 182, 188, 191, 219, 237, 246, 250, 251, 268, 321, 348, 355, 382, 392, 399, 415, 422, 425, 454, 456, 462, 468, 593, 995, 998, 1001, 1004, 1008, 1012, 1014, 1019, 1031], "region_1": 324, "region_2": 324, "regist": [1, 203, 359, 391, 968], "register_parallel_backend": [1, 1047, 1057], "registri": [383, 403, 1017], "regr": [215, 416, 560, 562, 571, 652, 653, 673, 843, 868, 911, 913, 916, 1013, 1030], "regr_1": [139, 365, 366], "regr_2": [139, 365, 366], "regr_3": 366, "regr_multirf": 158, "regr_rf": 158, "regress": [1, 13, 18, 21, 23, 30, 39, 45, 48, 52, 61, 63, 65, 88, 102, 104, 112, 113, 115, 120, 125, 126, 127, 134, 137, 138, 141, 143, 144, 145, 146, 149, 150, 153, 154, 158, 159, 165, 171, 173, 174, 176, 184, 186, 187, 188, 190, 191, 192, 194, 197, 201, 203, 204, 205, 206, 209, 213, 214, 216, 220, 222, 223, 224, 225, 228, 230, 235, 242, 245, 247, 255, 256, 257, 260, 271, 273, 285, 288, 290, 291, 292, 297, 299, 301, 315, 316, 318, 319, 322, 323, 329, 330, 331, 332, 334, 343, 344, 355, 356, 359, 362, 363, 367, 373, 374, 377, 378, 380, 382, 385, 387, 390, 393, 394, 397, 398, 399, 410, 413, 417, 418, 419, 420, 422, 424, 438, 443, 470, 471, 480, 490, 495, 496, 498, 502, 507, 508, 510, 511, 518, 522, 523, 524, 530, 534, 537, 541, 543, 545, 547, 548, 549, 551, 552, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 576, 598, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 612, 615, 616, 617, 620, 621, 628, 629, 631, 637, 638, 639, 640, 641, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 707, 712, 727, 729, 730, 734, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 791, 796, 797, 806, 809, 810, 812, 820, 829, 833, 834, 836, 837, 839, 841, 843, 844, 852, 853, 858, 860, 861, 867, 868, 870, 871, 874, 875, 877, 883, 884, 885, 887, 890, 891, 894, 899, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 924, 930, 933, 935, 951, 987, 988, 990, 993, 995, 1005, 1006, 1008, 1009, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1029, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "regression_data": 45, "regression_model": 1046, "regression_test": 393, "regressioncriterion": 1047, "regressionregressionramdomizedpcaramdom": 1025, "regressor": [1, 29, 42, 108, 117, 152, 158, 159, 162, 175, 180, 187, 188, 191, 197, 199, 201, 203, 219, 220, 222, 225, 236, 237, 253, 280, 292, 303, 323, 328, 329, 372, 385, 387, 397, 399, 413, 416, 425, 438, 441, 442, 471, 488, 489, 490, 491, 530, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 571, 572, 573, 574, 575, 576, 611, 612, 615, 617, 638, 639, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 684, 685, 707, 838, 839, 842, 843, 844, 853, 861, 866, 867, 868, 871, 877, 885, 890, 891, 911, 913, 916, 918, 919, 920, 921, 924, 939, 941, 987, 988, 994, 998, 999, 1001, 1006, 1012, 1017, 1019, 1020, 1027, 1034, 1039, 1040, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1054, 1056], "regressor_": [191, 471, 599, 600, 603], "regressor__sample_weight": 219, "regressor_with_": 190, "regressor_without_": 190, "regressorchain": [1, 406, 841, 843, 1047, 1050, 1054], "regressormixin": [1, 253, 387, 399, 471, 1050], "regul": 0, "regular": [1, 61, 63, 66, 70, 74, 91, 93, 94, 95, 104, 106, 111, 129, 137, 147, 149, 150, 152, 157, 164, 166, 175, 176, 177, 179, 182, 184, 186, 188, 190, 197, 198, 199, 201, 203, 204, 206, 207, 208, 210, 215, 217, 219, 226, 233, 235, 237, 252, 263, 270, 273, 278, 279, 281, 290, 303, 304, 312, 314, 315, 316, 320, 321, 323, 324, 325, 342, 343, 345, 347, 348, 349, 352, 353, 357, 359, 361, 363, 372, 385, 397, 398, 413, 415, 417, 418, 420, 421, 422, 425, 443, 449, 453, 477, 478, 482, 484, 485, 486, 487, 510, 518, 520, 521, 526, 528, 530, 534, 544, 545, 546, 549, 553, 554, 556, 565, 567, 568, 594, 595, 597, 644, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 695, 699, 741, 747, 756, 803, 804, 823, 836, 837, 867, 868, 871, 890, 910, 911, 912, 913, 915, 916, 917, 987, 988, 990, 991, 992, 995, 997, 1003, 1004, 1008, 1011, 1012, 1013, 1019, 1020, 1022, 1027, 1028, 1030, 1034, 1039, 1040, 1041, 1043, 1044, 1048, 1049, 1051, 1052], "regularis": [223, 428, 479, 481], "regularli": [147, 295, 397, 1000], "regulatori": 154, "rehan": 1054, "rehman": 1047, "reiichiro": [1046, 1047], "reilli": 1056, "reimburs": 271, "reimplement": [391, 397, 399, 1045, 1049], "reinforc": 1018, "reinit": 393, "reiniti": 397, "reinstal": 403, "reintroduc": 1055, "reitsam": 1051, "reject": [254, 399, 400, 529, 677, 733, 930, 931, 994, 998, 1047], "rel": [42, 44, 46, 54, 57, 63, 89, 95, 129, 145, 180, 194, 196, 199, 219, 237, 265, 304, 305, 319, 328, 331, 348, 352, 359, 360, 380, 384, 387, 393, 399, 413, 415, 419, 422, 423, 425, 446, 449, 453, 455, 465, 527, 530, 537, 540, 543, 547, 551, 552, 563, 564, 565, 566, 570, 571, 572, 610, 655, 664, 665, 677, 678, 680, 696, 700, 735, 753, 806, 809, 810, 812, 820, 829, 834, 837, 850, 851, 855, 867, 868, 879, 880, 890, 906, 910, 911, 912, 915, 917, 918, 919, 920, 921, 994, 995, 998, 1000, 1001, 1002, 1004, 1028], "relabel": [384, 824, 825, 907], "relat": [7, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 379, 380, 381, 384, 385, 389, 390, 392, 393, 394, 397, 399, 400, 402, 406, 409, 414, 415, 416, 417, 418, 419, 420, 422, 425, 456, 470, 475, 502, 555, 556, 568, 569, 645, 679, 683, 698, 707, 729, 749, 827, 833, 868, 869, 871, 874, 875, 880, 883, 885, 886, 889, 898, 914, 987, 990, 992, 998, 999, 1001, 1002, 1005, 1008, 1013, 1014, 1015, 1018, 1019, 1021, 1034, 1039, 1043, 1044, 1045, 1047, 1048, 1051, 1052, 1055], "relate_point": 308, "relationship": [1, 42, 51, 57, 138, 139, 154, 181, 190, 191, 198, 203, 219, 221, 222, 284, 291, 297, 319, 325, 334, 399, 415, 417, 419, 468, 502, 642, 720, 995, 998, 1000, 1001, 1005, 1006, 1030, 1044], "relative_tim": 265, "relax": [45, 415, 423, 459, 1011, 1046], "releas": [0, 53, 89, 104, 142, 143, 156, 173, 186, 187, 192, 193, 196, 219, 220, 221, 248, 253, 258, 259, 260, 271, 272, 289, 291, 295, 300, 324, 340, 367, 373, 383, 385, 386, 388, 393, 397, 399, 423, 449, 452, 453, 470, 473, 496, 497, 502, 507, 508, 510, 518, 521, 527, 530, 544, 547, 567, 568, 570, 571, 573, 605, 608, 634, 636, 638, 640, 646, 652, 654, 658, 664, 675, 686, 694, 703, 707, 708, 723, 724, 738, 748, 754, 784, 794, 801, 805, 806, 807, 809, 810, 812, 820, 828, 829, 832, 833, 836, 852, 854, 871, 875, 880, 883, 884, 885, 889, 890, 891, 907, 908, 910, 915, 918, 919, 942, 1014, 1019, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "release_highlight": 1019, "relev": [45, 47, 56, 109, 113, 173, 188, 198, 213, 222, 277, 278, 284, 368, 372, 374, 380, 382, 384, 385, 387, 389, 390, 391, 399, 400, 406, 417, 418, 424, 425, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 732, 746, 762, 805, 807, 808, 809, 810, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 888, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 998, 999, 1004, 1015, 1018, 1019, 1042, 1047, 1053], "reli": [129, 144, 148, 173, 194, 207, 208, 295, 298, 328, 332, 359, 372, 373, 387, 390, 393, 394, 397, 399, 411, 412, 415, 420, 422, 423, 555, 599, 603, 613, 614, 784, 834, 837, 875, 964, 987, 990, 992, 994, 998, 1001, 1006, 1008, 1013, 1022, 1047, 1048, 1049, 1053, 1055, 1056], "reliabl": [1, 61, 63, 413, 419, 444, 445, 652, 1014, 1022], "relianc": [129, 223], "religion": [56, 278, 359, 360, 361, 380, 999, 1032], "reloc": 1048, "relova": 1052, "relu": [867, 868], "remain": [46, 61, 63, 104, 138, 145, 150, 152, 172, 191, 219, 223, 235, 262, 275, 279, 283, 286, 412, 415, 416, 417, 419, 423, 452, 470, 473, 521, 522, 527, 534, 540, 576, 616, 617, 769, 775, 808, 809, 810, 811, 814, 816, 845, 846, 847, 849, 951, 987, 988, 990, 997, 998, 1002, 1008, 1014, 1018, 1041, 1047, 1053, 1056], "remaind": [42, 148, 191, 208, 219, 221, 237, 256, 332, 363, 416, 470, 473, 1039, 1046, 1047, 1048, 1051, 1052, 1055, 1057], "remaining_column": 470, "remark": [89, 117, 173, 271, 374, 385, 1008], "remedi": 236, "rememb": [89, 387, 390, 403, 423, 1001, 1005, 1014], "remi": 1046, "remind": 253, "reminisc": 127, "remot": [196, 338, 385, 388], "remov": [1, 43, 53, 54, 88, 89, 103, 108, 171, 173, 186, 187, 191, 194, 278, 318, 325, 327, 328, 329, 334, 359, 360, 363, 368, 377, 380, 384, 385, 386, 387, 389, 390, 394, 399, 403, 408, 415, 416, 419, 422, 423, 425, 426, 447, 448, 450, 451, 456, 463, 488, 489, 490, 491, 494, 495, 533, 540, 541, 543, 544, 545, 546, 547, 552, 559, 573, 574, 575, 576, 585, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 617, 636, 650, 660, 661, 662, 664, 665, 679, 681, 682, 683, 698, 715, 748, 756, 757, 784, 785, 786, 788, 806, 809, 810, 812, 820, 829, 831, 832, 833, 834, 857, 869, 870, 874, 875, 887, 888, 890, 899, 925, 941, 942, 988, 995, 1001, 1014, 1020, 1024, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "remove_zero_eig": [541, 1041, 1048], "rempfler": 1050, "renam": [267, 278, 385, 389, 415, 452, 453, 465, 477, 478, 484, 533, 542, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 883, 1039, 1040, 1041, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "rename_axi": 277, "render": [50, 62, 87, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 214, 223, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 385, 387, 389, 390, 391, 399, 557, 595, 637, 706, 708, 887, 899, 922, 924, 997, 1014, 1052, 1056], "rene": 1052, "renni": [1, 845, 847, 1000, 1047], "renorm": 62, "rent": 42, "rental": [42, 51, 192, 1005], "reorder": [57, 130, 399, 703, 724, 1018, 1047], "reordered_data": 57, "reordered_row": 57, "reorgan": 1045, "rep": 382, "reparameter": 1013, "reparametr": 355, "repartit": 42, "repeat": [1, 48, 68, 100, 111, 113, 150, 173, 175, 181, 182, 192, 196, 221, 271, 272, 277, 278, 289, 295, 338, 360, 361, 387, 394, 399, 400, 412, 413, 415, 420, 423, 424, 594, 599, 613, 614, 621, 633, 640, 665, 811, 821, 822, 825, 936, 988, 997, 1034, 1047, 1049], "repeatedkfold": [1, 191, 419, 811, 822, 1046], "repeatedli": [138, 331, 368, 399, 415, 422, 425, 514, 552, 672, 673, 682, 683, 684, 787, 988, 1002, 1027], "repeatedstratifiedkfold": [1, 277, 291, 295, 419, 821, 825, 1046], "repercuss": 323, "repetit": [277, 291, 295, 390, 419, 821, 822, 1006, 1053], "replac": [1, 42, 51, 61, 112, 128, 138, 154, 175, 180, 182, 186, 192, 205, 220, 280, 298, 320, 325, 329, 350, 383, 385, 387, 389, 391, 394, 399, 409, 416, 419, 422, 423, 447, 451, 470, 509, 521, 561, 562, 569, 588, 594, 595, 596, 597, 613, 614, 633, 636, 640, 645, 647, 734, 791, 812, 818, 820, 829, 869, 870, 873, 893, 906, 913, 967, 969, 972, 987, 988, 990, 994, 998, 1008, 1013, 1014, 1017, 1018, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056], "replai": [809, 810], "repli": [53, 359, 384, 385, 388], "replic": [277, 384, 387, 1034], "repo": [385, 389, 1018, 1021], "report": [0, 1, 42, 46, 51, 67, 103, 108, 170, 183, 207, 271, 275, 285, 291, 295, 327, 337, 368, 380, 384, 386, 387, 388, 391, 393, 397, 399, 403, 409, 415, 419, 617, 655, 664, 670, 691, 692, 706, 719, 735, 736, 744, 789, 790, 793, 839, 848, 867, 868, 905, 923, 941, 994, 1001, 1006, 1017, 1018, 1021, 1040, 1043, 1046, 1047, 1049, 1050, 1052, 1054, 1055], "reporthook": 46, "repositori": [42, 46, 51, 196, 271, 333, 378, 380, 382, 383, 385, 387, 389, 393, 397, 400, 403, 510, 1017, 1021, 1034], "repr": [583, 1050, 1051, 1053], "repreat": 277, "repres": [42, 46, 48, 50, 51, 53, 57, 62, 67, 69, 78, 82, 83, 84, 87, 121, 124, 126, 132, 133, 145, 146, 155, 191, 198, 206, 211, 221, 223, 224, 228, 241, 243, 251, 256, 265, 270, 271, 274, 277, 280, 284, 303, 320, 352, 359, 361, 367, 374, 377, 380, 382, 387, 397, 398, 399, 400, 409, 413, 415, 419, 420, 421, 422, 423, 424, 444, 448, 452, 458, 469, 470, 476, 477, 478, 479, 480, 481, 482, 494, 496, 497, 498, 500, 502, 504, 506, 507, 508, 510, 511, 516, 533, 540, 542, 544, 546, 547, 553, 561, 569, 587, 594, 597, 600, 635, 638, 640, 646, 682, 684, 703, 705, 707, 717, 736, 749, 795, 806, 808, 819, 820, 823, 826, 828, 833, 835, 836, 839, 840, 846, 852, 853, 854, 856, 857, 858, 860, 861, 862, 867, 868, 877, 883, 884, 907, 910, 911, 930, 931, 951, 988, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1023, 1028, 1029, 1031, 1045, 1047, 1050, 1051, 1054, 1057], "represent": [1, 42, 50, 54, 57, 62, 87, 104, 105, 124, 127, 143, 145, 146, 155, 156, 157, 159, 162, 170, 180, 191, 193, 196, 200, 203, 239, 240, 241, 247, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 295, 308, 316, 324, 329, 331, 332, 334, 339, 360, 361, 367, 368, 377, 379, 388, 399, 409, 415, 416, 420, 421, 422, 429, 469, 537, 541, 543, 546, 548, 554, 572, 594, 596, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 636, 649, 652, 658, 664, 665, 666, 668, 672, 673, 674, 682, 683, 684, 775, 803, 804, 812, 829, 866, 879, 883, 884, 888, 890, 903, 910, 922, 924, 927, 943, 964, 990, 995, 997, 999, 1001, 1002, 1003, 1005, 1008, 1013, 1018, 1023, 1024, 1026, 1030, 1032, 1039, 1040, 1043, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "reproduc": [43, 50, 94, 138, 191, 196, 207, 286, 295, 316, 373, 384, 385, 387, 388, 393, 397, 399, 415, 419, 420, 423, 427, 446, 460, 466, 475, 480, 494, 497, 498, 501, 503, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 613, 614, 616, 617, 640, 645, 646, 647, 648, 652, 653, 656, 658, 659, 660, 666, 667, 668, 669, 672, 673, 674, 677, 682, 684, 685, 695, 696, 698, 699, 700, 799, 803, 804, 808, 809, 810, 811, 812, 818, 820, 821, 822, 823, 824, 825, 826, 834, 835, 836, 840, 841, 844, 855, 859, 866, 867, 868, 875, 887, 891, 899, 902, 903, 910, 911, 912, 915, 946, 947, 969, 972, 990, 1017, 1021, 1039, 1047, 1052, 1053], "reproduct": [397, 994], "request": [1, 46, 54, 80, 219, 237, 253, 330, 373, 379, 383, 384, 388, 399, 400, 406, 409, 420, 423, 424, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 587, 588, 594, 596, 597, 600, 605, 606, 616, 617, 638, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 705, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 954, 955, 957, 998, 1001, 1021, 1032, 1045, 1046, 1047, 1056, 1057], "request_rout": 253, "requir": [29, 30, 42, 45, 52, 61, 79, 80, 82, 87, 89, 91, 92, 101, 103, 120, 128, 130, 143, 144, 148, 149, 152, 154, 155, 159, 173, 192, 203, 208, 216, 219, 239, 241, 247, 250, 253, 256, 260, 271, 278, 286, 288, 291, 298, 300, 318, 323, 329, 330, 359, 360, 361, 379, 382, 383, 385, 386, 387, 389, 391, 393, 397, 399, 400, 403, 406, 409, 411, 415, 416, 417, 419, 420, 422, 423, 424, 426, 432, 438, 443, 444, 445, 450, 452, 456, 458, 463, 468, 470, 473, 475, 488, 489, 490, 502, 514, 527, 530, 541, 547, 555, 556, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 578, 585, 586, 587, 616, 617, 625, 633, 638, 639, 640, 649, 652, 653, 658, 659, 664, 665, 672, 673, 674, 677, 680, 681, 682, 683, 684, 692, 695, 697, 698, 699, 701, 705, 730, 735, 736, 748, 753, 755, 758, 769, 790, 793, 805, 806, 809, 810, 813, 815, 820, 828, 833, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 867, 870, 871, 872, 874, 884, 885, 886, 890, 898, 902, 903, 905, 906, 910, 911, 912, 915, 918, 919, 920, 921, 955, 958, 964, 984, 987, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1012, 1013, 1014, 1018, 1023, 1030, 1032, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "requires_fit": 387, "requires_i": [387, 432, 438, 1050], "requires_positive_i": 387, "requires_positive_x": [387, 1049, 1054], "requires_vector_input": [618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "requisit": 387, "rerais": 1056, "rerun": [50, 62, 76, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 393], "resampl": [1, 86, 151, 191, 237, 302, 394, 397, 399, 561, 562, 972, 1018, 1048, 1052], "resampled_arrai": 969, "rescal": [42, 80, 81, 89, 129, 200, 207, 242, 256, 318, 357, 417, 422, 427, 475, 476, 477, 478, 479, 480, 481, 482, 539, 544, 652, 655, 658, 882, 888, 912, 913, 914, 915, 916, 998, 1008, 1031, 1043, 1044], "rescaled_coin": [80, 81, 1031], "rescu": [409, 423], "research": [0, 173, 190, 271, 277, 283, 295, 380, 382, 397, 415, 507, 519, 641, 651, 698, 741, 835, 840, 987, 995, 999, 1001, 1013, 1017, 1018, 1022], "resembl": [73, 223, 253], "reserv": [271, 324, 567, 568, 1022, 1023], "reserva": 324, "reservoir": 967, "reservoir_sampl": 967, "reset": [260, 368, 393, 540, 682, 683, 684, 850, 851, 879, 880, 890, 1041], "reset_n_cal": [850, 851], "reshama": [0, 370, 375, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1057], "reshap": [1, 42, 43, 44, 52, 60, 67, 80, 81, 82, 84, 85, 87, 88, 92, 105, 112, 116, 124, 127, 133, 141, 146, 147, 157, 166, 171, 175, 177, 178, 179, 180, 181, 182, 184, 198, 210, 216, 232, 233, 235, 236, 240, 242, 244, 246, 251, 255, 266, 275, 302, 304, 311, 313, 315, 316, 319, 320, 321, 325, 327, 330, 331, 333, 334, 342, 347, 348, 353, 356, 357, 397, 412, 420, 422, 423, 451, 471, 590, 637, 738, 836, 885, 889, 994, 1008, 1014, 1028, 1031, 1044], "resid": 380, "residence_sinc": 271, "residenti": 159, "residu": [1, 108, 215, 221, 273, 438, 471, 488, 489, 490, 558, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 677, 678, 679, 680, 684, 685, 691, 692, 707, 750, 791, 843, 844, 853, 861, 868, 911, 913, 916, 919, 921, 994, 998, 1030, 1051, 1052, 1054], "residual_metr": 1045, "residual_threshold": [236, 677, 994, 1052], "residual_vs_predict": [42, 51, 108, 273, 332, 707], "residues_": 1044, "resign": 400, "resili": 423, "resist": [112, 113, 385], "resiz": [44, 80, 81, 257, 380, 499, 500, 1028], "resolut": [42, 49, 54, 133, 192, 310, 311, 348, 400, 413, 1023, 1049], "resolv": [54, 384, 385, 389, 393, 400, 423, 452, 458, 468, 697, 701, 947, 988, 998, 1046, 1048, 1049, 1052, 1057], "resort": [279, 380, 409, 561, 1049], "resourc": [54, 76, 151, 154, 186, 219, 315, 329, 371, 388, 398, 399, 414, 422, 809, 810, 999, 1018, 1022, 1024, 1034, 1047, 1052, 1053], "resourcewarn": 1042, "resp": [380, 422, 603, 803, 804, 1012, 1047], "respect": [63, 89, 101, 120, 129, 138, 142, 144, 147, 156, 183, 196, 198, 203, 208, 221, 233, 236, 239, 241, 247, 250, 252, 256, 267, 271, 286, 304, 305, 316, 323, 331, 345, 352, 372, 373, 380, 381, 385, 413, 415, 418, 420, 422, 423, 425, 452, 470, 473, 476, 477, 478, 479, 480, 481, 482, 540, 546, 547, 553, 559, 567, 568, 603, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 642, 649, 677, 696, 700, 718, 734, 788, 791, 803, 804, 846, 856, 867, 868, 922, 924, 987, 991, 992, 994, 995, 998, 1001, 1002, 1003, 1004, 1008, 1013, 1017, 1021, 1022, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "respond": [191, 385, 415], "respons": [0, 24, 173, 192, 215, 219, 222, 253, 287, 359, 382, 391, 399, 415, 416, 422, 452, 470, 488, 489, 490, 637, 638, 639, 680, 681, 704, 706, 708, 748, 803, 804, 999, 1005, 1023, 1056], "response_method": [47, 65, 69, 90, 140, 155, 160, 202, 211, 228, 233, 271, 280, 301, 306, 309, 323, 335, 344, 345, 347, 352, 364, 637, 638, 639, 704, 706, 708, 748, 805, 828, 998, 1056], "rest": [1, 29, 61, 65, 148, 152, 188, 197, 203, 228, 234, 253, 256, 265, 271, 295, 327, 341, 345, 356, 391, 399, 425, 518, 616, 637, 650, 664, 665, 682, 760, 794, 838, 839, 840, 859, 910, 912, 915, 994, 998, 999, 1002, 1005, 1013, 1019, 1022, 1043, 1044, 1053, 1054, 1055, 1057], "restart": [91, 388, 393, 453, 537, 543, 544, 549, 551, 552, 616, 617, 995, 1052], "restor": [1042, 1047, 1048, 1049, 1050, 1054], "restrict": [1, 63, 100, 101, 106, 116, 186, 188, 209, 236, 312, 387, 391, 397, 413, 415, 422, 423, 471, 499, 508, 538, 587, 616, 659, 660, 661, 662, 664, 688, 689, 719, 788, 794, 795, 836, 858, 860, 861, 862, 864, 866, 867, 868, 870, 896, 998, 1014, 1019, 1033, 1034, 1039, 1041, 1049, 1051, 1056], "restructuredtext": 385, "result": [1, 26, 36, 42, 43, 44, 47, 51, 52, 56, 60, 61, 62, 65, 67, 69, 71, 74, 76, 77, 78, 80, 82, 87, 88, 89, 94, 96, 100, 104, 106, 108, 113, 117, 124, 127, 129, 130, 134, 141, 142, 143, 145, 148, 149, 151, 152, 155, 157, 158, 166, 172, 173, 175, 177, 179, 183, 186, 191, 192, 193, 194, 199, 204, 205, 208, 209, 214, 220, 221, 223, 227, 233, 234, 237, 239, 240, 243, 246, 249, 251, 257, 262, 267, 268, 270, 271, 272, 275, 277, 278, 280, 283, 284, 285, 286, 288, 289, 291, 293, 295, 298, 300, 304, 313, 314, 315, 318, 319, 320, 323, 327, 329, 331, 332, 333, 334, 335, 337, 340, 342, 348, 352, 353, 355, 359, 361, 365, 366, 367, 372, 373, 374, 379, 380, 382, 385, 387, 389, 390, 391, 393, 397, 398, 399, 400, 409, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 440, 446, 447, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 465, 468, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 495, 514, 515, 517, 519, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 585, 586, 587, 588, 590, 594, 595, 597, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 637, 638, 640, 642, 646, 649, 658, 659, 664, 670, 671, 672, 673, 681, 682, 683, 684, 692, 695, 696, 697, 698, 699, 700, 701, 714, 716, 718, 723, 731, 732, 734, 735, 736, 737, 738, 742, 743, 744, 760, 762, 763, 770, 777, 780, 784, 785, 786, 787, 789, 790, 791, 793, 799, 800, 803, 804, 806, 808, 809, 810, 811, 816, 820, 821, 822, 825, 826, 831, 837, 838, 839, 841, 842, 843, 844, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 874, 875, 883, 884, 887, 888, 891, 899, 903, 907, 910, 912, 915, 918, 919, 920, 921, 922, 923, 930, 931, 946, 947, 949, 953, 963, 964, 969, 972, 988, 990, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1021, 1023, 1027, 1028, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "results_df": [227, 277, 324], "results_for_preval": 280, "results_sc": 355, "retail": 1022, "retain": [1, 198, 399, 415, 418, 419, 423, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 500, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 701, 702, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 883, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 1011, 1039], "retbin": 1008, "retent": [598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609], "retrac": 253, "retract": 385, "retrain": [409, 1018, 1055, 1057], "retri": [193, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 1047, 1053, 1057], "retriev": [1, 117, 191, 223, 284, 360, 367, 389, 399, 420, 423, 424, 474, 502, 596, 599, 600, 632, 659, 669, 690, 705, 732, 736, 738, 739, 762, 787, 845, 849, 882, 908, 994, 996, 998, 1000, 1017, 1018, 1031, 1044, 1049, 1051, 1053, 1056], "return": [1, 29, 42, 44, 45, 46, 48, 49, 51, 52, 54, 56, 60, 61, 63, 68, 69, 71, 74, 82, 87, 90, 95, 103, 108, 122, 131, 133, 136, 138, 141, 143, 150, 151, 154, 155, 159, 173, 178, 181, 183, 187, 194, 198, 199, 207, 208, 211, 219, 220, 227, 228, 229, 237, 253, 256, 259, 260, 265, 267, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 284, 292, 298, 303, 308, 311, 316, 318, 320, 323, 327, 335, 344, 348, 359, 361, 363, 367, 372, 378, 379, 380, 385, 386, 387, 391, 392, 394, 397, 399, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 970, 971, 972, 973, 979, 982, 983, 984, 985, 986, 988, 998, 1001, 1005, 1006, 1013, 1014, 1018, 1023, 1028, 1030, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "return_a": [591, 592, 964, 1042], "return_cent": [518, 1050], "return_cod": 552, "return_cost": [477, 478, 484], "return_count": [340, 360, 862], "return_cov": [399, 573, 574, 617, 870], "return_dist": [88, 469, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 1001, 1043], "return_distribut": [122, 529], "return_estim": [42, 191, 291, 334, 419, 833, 1047], "return_ind": 529, "return_indic": [419, 833, 1055], "return_inner_stat": 1053, "return_intercept": [693, 1048], "return_invers": [153, 387], "return_log": [850, 851], "return_model": [1041, 1043], "return_n_it": [427, 460, 465, 484, 551, 552, 652, 653, 658, 659, 666, 667, 668, 669, 687, 688, 689, 690, 691, 692, 693, 700, 1053], "return_norm": [897, 1046], "return_path": [688, 689, 691, 692], "return_std": [175, 180, 181, 182, 184, 198, 199, 399, 558, 573, 574, 617, 619, 620, 621, 622, 631, 633, 650, 651, 870, 1046, 1047, 1051, 1056], "return_sum_weight": 979, "return_tim": [279, 834, 1049], "return_train_scor": [144, 281, 291, 324, 419, 806, 809, 810, 820, 833, 1045, 1046, 1048], "return_x_i": [43, 45, 53, 92, 103, 104, 105, 106, 124, 144, 148, 162, 164, 165, 169, 186, 187, 193, 194, 196, 204, 206, 207, 208, 210, 215, 216, 226, 234, 235, 247, 255, 256, 259, 260, 273, 276, 279, 284, 285, 293, 295, 297, 300, 307, 314, 315, 316, 323, 327, 329, 331, 332, 333, 334, 340, 351, 361, 363, 378, 390, 391, 398, 409, 415, 416, 419, 422, 424, 427, 435, 452, 494, 495, 496, 497, 498, 500, 501, 502, 503, 506, 507, 508, 510, 511, 516, 538, 539, 540, 541, 564, 567, 568, 573, 574, 598, 601, 602, 604, 605, 606, 607, 608, 616, 625, 626, 628, 629, 644, 645, 664, 665, 674, 679, 680, 681, 694, 695, 696, 697, 699, 701, 707, 717, 794, 809, 810, 812, 838, 843, 854, 859, 862, 919, 920, 921, 988, 993, 998, 999, 1000, 1001, 1008, 1023, 1027, 1028, 1030, 1031, 1036, 1045, 1047, 1049, 1052], "return_x_mean": 427, "reuben": 1039, "reus": [51, 175, 212, 271, 278, 327, 361, 387, 399, 415, 416, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 640, 652, 654, 655, 658, 664, 666, 668, 672, 673, 674, 675, 682, 683, 684, 686, 867, 868, 1006, 1010, 1022, 1046, 1056], "reuter": [372, 380], "reuters21578": 46, "reuterspars": 46, "rev": [385, 613, 614], "revamp": 1049, "reveal": [42, 51, 191, 193, 359, 391, 412, 995, 1055], "revers": [56, 108, 173, 224, 277, 540, 547, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 795, 870, 998, 1039, 1040, 1049, 1051, 1055], "revert": [125, 636, 638, 639, 1046, 1051, 1056], "review": [295, 324, 372, 380, 387, 388, 389, 390, 391, 397, 400, 419, 420, 541, 547, 998, 1008, 1024], "revillet": 1039, "revis": [400, 676], "revisit": [415, 426, 450], "revolv": 995, "reward": 385, "reweight": [138, 360, 399, 417, 422, 596, 597, 654, 675, 686], "reweight_covari": [475, 480], "rewrit": [391, 397, 1014, 1031, 1039], "rewritten": [385, 655, 1041, 1043], "rey": 1054, "reza": 1049, "rezazadeh": 1052, "rf": [143, 144, 158, 161, 162, 193, 327, 368, 422, 573, 575, 576], "rf_123": 368, "rf__n_estim": 422, "rf_appli": 143, "rf_cst": 334, "rf_inst": 368, "rf_leaves_yield": 143, "rf_model": 143, "rf_no_cst": 334, "rf_pipelin": 159, "rfc": [63, 259, 327, 1036], "rfc_disp": [259, 327, 1036], "rfe": [1, 171, 172, 406, 424, 600, 603, 608, 1039, 1043, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "rfecv": [1, 172, 406, 424, 599, 603, 608, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1055, 1056, 1057], "rgb": [82, 380, 423, 499, 500, 589, 590, 593], "rgr_lasso": 52, "rgr_ridg": 52, "rhinehart": 1046, "rho": [230, 420, 683, 994, 1012, 1040], "rho_k": 421, "ri": [415, 711, 792], "ribeiro": [596, 736, 1052], "ricardo": [1042, 1052, 1053, 1056], "ricardojnf": 1052, "riccadonna": 749, "riccardo": [1050, 1056], "rice": [49, 311, 380, 504, 1052], "rich": [86, 154, 393, 397, 415, 445, 1022, 1050, 1053], "richard": [380, 424, 664, 1040, 1049, 1051, 1053, 1054, 1057], "richardscottoz": 1052, "richer": [86, 133, 415], "richi": 1047, "rick": 1050, "ricker": 133, "ricker_funct": 133, "ricker_matrix": 133, "rickiepark": 1046, "rid": [47, 1012], "riddel": [1042, 1044, 1046], "ridg": [1, 23, 43, 48, 52, 88, 108, 125, 126, 159, 164, 173, 174, 180, 182, 186, 188, 190, 191, 192, 197, 198, 203, 206, 209, 212, 215, 219, 220, 245, 255, 290, 319, 322, 354, 355, 359, 372, 397, 411, 420, 422, 425, 530, 541, 545, 549, 617, 621, 628, 631, 649, 650, 651, 653, 655, 663, 667, 679, 680, 681, 684, 693, 707, 756, 806, 812, 820, 843, 916, 998, 999, 1006, 1008, 1012, 1013, 1019, 1020, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1052, 1053, 1054, 1055, 1057], "ridge_alpha": [545, 549, 1046], "ridge_cv": 108, "ridge_cv_with_trans_target": 108, "ridge_glm": 219, "ridge_regress": [1, 1047, 1048, 1054], "ridgeclassifi": [1, 359, 372, 678, 679, 681, 994, 999, 1044, 1048, 1052, 1053, 1054, 1057], "ridgeclassifiercv": [1, 406, 679, 680, 794, 994, 998, 999, 1047, 1049, 1050, 1052, 1053, 1057], "ridgecv": [1, 42, 108, 159, 173, 191, 255, 399, 406, 422, 574, 649, 678, 681, 994, 999, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057], "ridgecvridgecv": [159, 191], "ridgeregress": 387, "ridgeridg": 191, "ridgewai": [150, 422], "riedmann": 1051, "ries": 1053, "rifkin": 994, "right": [44, 45, 49, 50, 52, 53, 66, 69, 73, 76, 77, 78, 79, 85, 87, 94, 96, 98, 111, 112, 114, 120, 121, 122, 126, 127, 129, 131, 133, 138, 140, 141, 142, 151, 152, 153, 154, 161, 169, 175, 178, 187, 194, 209, 220, 221, 222, 223, 225, 226, 229, 230, 246, 249, 250, 262, 264, 265, 267, 268, 271, 272, 273, 277, 280, 284, 287, 288, 290, 291, 303, 311, 313, 316, 318, 320, 323, 333, 334, 338, 348, 350, 352, 355, 357, 359, 364, 367, 368, 385, 387, 397, 400, 412, 414, 415, 418, 420, 421, 422, 425, 470, 488, 489, 490, 491, 540, 547, 550, 563, 564, 565, 566, 567, 568, 570, 571, 572, 593, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 641, 682, 684, 875, 918, 919, 920, 921, 922, 934, 947, 987, 990, 992, 994, 996, 998, 1000, 1001, 1005, 1010, 1012, 1013, 1014, 1017, 1018, 1022, 1024, 1028, 1030, 1031, 1041, 1047, 1053, 1055, 1056], "right_impur": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "rightarrow": [425, 625, 1002], "rijn": [379, 1047], "rileran": 1053, "rio": [1049, 1051, 1052, 1053], "ripe": 324, "rise": 180, "rishabh": 1053, "rishi": 1051, "rishikesh": 1046, "risk": [15, 47, 89, 154, 219, 223, 237, 319, 355, 368, 384, 385, 399, 414, 419, 422, 573, 574, 895, 896, 898, 899, 900, 901, 994, 998, 1022, 1046], "riski": 237, "riskiest": [219, 237], "ritchi": 1050, "rithvik": 1051, "ritter": [1053, 1054], "ritual": 359, "rival": [42, 907, 1011], "rk": 99, "rkf": [419, 821], "rl2007": 994, "rlm": 1049, "rm": [112, 178, 389, 393, 417], "rmse": [42, 51, 113, 154, 324, 756, 998, 1050], "rmse_": 324, "rmse_test_mean": 324, "rmse_test_scor": 324, "rmse_test_std": 324, "rmse_train_mean": 324, "rmse_train_scor": 324, "rmse_train_std": 324, "rmsle": [757, 998], "rmtree": [88, 105, 416], "rna": 397, "rnd": 319, "rng": [43, 57, 58, 66, 69, 71, 78, 84, 96, 113, 117, 124, 126, 131, 139, 151, 154, 155, 156, 158, 175, 176, 179, 181, 182, 184, 186, 187, 190, 193, 198, 199, 200, 201, 203, 208, 213, 220, 221, 226, 233, 246, 252, 253, 255, 262, 272, 280, 283, 288, 289, 313, 322, 325, 328, 329, 331, 333, 334, 337, 338, 342, 351, 365, 366, 368, 373, 387, 390, 406, 428, 476, 480, 481, 482, 484, 485, 486, 487, 649, 655, 676, 678, 684, 693, 818, 845, 846, 847, 849, 850, 851, 855, 858, 860, 861, 862, 887, 899, 902, 903, 905, 906, 907, 916, 1023], "ro": 62, "road": 397, "rob": [226, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1051, 1054], "robert": [0, 82, 105, 173, 207, 295, 382, 405, 420, 534, 541, 634, 662, 727, 729, 730, 741, 876, 988, 994, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1054], "robertlayton": 82, "roberto": [415, 448], "robertson": 1052, "robin": [186, 187, 633, 988, 1045, 1048, 1053, 1054], "robinson": 1052, "robl": 1046, "robson": 1049, "robust": [1, 47, 69, 95, 97, 109, 111, 149, 151, 173, 187, 188, 191, 192, 197, 209, 221, 223, 236, 246, 256, 292, 318, 333, 374, 382, 387, 393, 415, 422, 423, 452, 454, 475, 476, 479, 480, 481, 482, 530, 540, 565, 566, 655, 663, 676, 677, 684, 685, 756, 840, 871, 885, 887, 888, 899, 905, 945, 998, 1002, 1004, 1008, 1011, 1012, 1017, 1019, 1020, 1022, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1055], "robust_contour": 112, "robust_cov": 112, "robust_mah": 112, "robust_scal": [1, 888, 899, 1047], "robustli": [7, 222], "robustscal": [1, 256, 887, 900, 988, 1008, 1044, 1045, 1047, 1049, 1050, 1051, 1055], "roc": [1, 49, 61, 143, 173, 188, 245, 247, 256, 257, 269, 271, 272, 279, 334, 335, 392, 413, 414, 419, 510, 516, 570, 664, 708, 712, 713, 714, 733, 748, 788, 794, 795, 825, 836, 839, 877, 915, 1004, 1019, 1036, 1041, 1042, 1044, 1045, 1049, 1051, 1055], "roc_auc": [49, 173, 277, 281, 286, 287, 392, 640, 708, 739, 998, 1036], "roc_auc_ovo": [998, 1049], "roc_auc_ovo_weight": [998, 1049], "roc_auc_ovr": [998, 1049], "roc_auc_ovr_weight": [998, 1049], "roc_auc_scor": [1, 61, 173, 277, 286, 327, 334, 708, 712, 713, 714, 795, 998, 1041, 1042, 1047, 1049, 1053, 1054], "roc_curv": [1, 49, 247, 274, 286, 708, 712, 733, 788, 794, 998, 1039, 1040, 1041, 1044, 1045, 1047, 1052, 1055, 1057], "roc_displai": 247, "rocchio": [359, 857], "rocco": [1052, 1053, 1054], "roccurvedisplai": [1, 143, 256, 259, 271, 274, 286, 287, 327, 392, 794, 795, 1004, 1036, 1049, 1055, 1056, 1057], "rock": 113, "rocklin": [384, 390], "rocktalu": 99, "roddi": [1048, 1049], "rodent": [49, 311, 380, 504], "roderick": 988, "rodion": 1052, "rodrigo": [1047, 1057], "rodrigu": [1046, 1047, 1052], "rodr\u00edguez": 324, "roeder": 1049, "roehr": [1055, 1056], "roei": 1051, "roeschk": 1048, "roger": [729, 1046, 1047, 1051], "rogerstanimoto": [456, 463, 705, 784, 785, 786, 1001], "rogerstanimotodist": 705, "rohan": [1044, 1045, 1047, 1048, 1052], "rohit": [1042, 1043, 1047, 1048], "roi": [1039, 1053], "roi_siz": 88, "roic": 1054, "rok": 1049, "rokem": [1039, 1045], "rokhlin": [541, 547, 947], "roland": [1041, 1042], "rolando": [1040, 1041], "role": [0, 286, 372, 384, 420], "roll": [1, 101, 188, 238, 239, 244, 388, 415, 536, 698, 699, 941, 1019, 1022, 1049, 1054], "rolling_max": 51, "rolling_mean": 51, "rolling_min": 51, "romain": [1046, 1051], "roman": [0, 404, 633, 924, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "roman4oo": 1054, "romaniuk": 1043, "romero": 1057, "romijnd": 1051, "romuald": 1048, "ron": [0, 264, 405, 1039], "ronald": [380, 1002, 1042, 1052], "ronan": [1039, 1042, 1047], "ronchetti": [655, 994], "rong": 1013, "ronrubin": [670, 691, 692, 994], "ronsin": [1047, 1048, 1056], "ronweiss": 264, "room": [318, 380, 390, 415, 1021], "roopam": [1047, 1048], "root": [1, 42, 112, 154, 173, 200, 367, 382, 385, 393, 415, 448, 507, 547, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 645, 756, 757, 796, 797, 918, 919, 920, 921, 922, 924, 998, 1004, 1014, 1041, 1047, 1048, 1049, 1050, 1053, 1054], "root_": 448, "root_mean_squared_error": [1, 51, 154, 756, 998, 1056], "root_mean_squared_log_error": [1, 757, 998, 1056], "rope": 277, "rope_interv": 277, "rope_prob": 277, "rori": 1050, "rosa": 1054, "rosal": 419, "rose": 380, "rosenberg": [415, 723, 743, 801], "rosenfeld": 1047, "ross": [540, 613, 614, 1014, 1053, 1054], "rosset": [138, 422, 525, 559], "rossi": 1042, "rosslimlinyang_ijcv": 540, "rostamizadeh": 987, "rostomyan": 1047, "rotat": [46, 74, 123, 126, 129, 131, 150, 161, 188, 194, 242, 288, 289, 297, 348, 354, 418, 420, 425, 427, 510, 538, 547, 556, 620, 703, 890, 922, 994, 1019, 1050, 1051], "rotation_mod": 288, "rotations_": 556, "roth": [91, 1044, 1047, 1054], "rough": [24, 1004, 1025], "roughli": [138, 151, 208, 268, 287, 298, 323, 372, 399, 420, 423, 525, 995, 1039], "rouli": 1042, "round": [45, 47, 61, 116, 144, 154, 186, 187, 226, 237, 277, 283, 320, 322, 359, 399, 456, 462, 463, 570, 571, 599, 600, 603, 633, 698, 719, 808, 818, 875, 907, 922, 924, 988, 1002, 1014, 1041, 1043, 1045, 1047, 1048, 1050, 1052, 1053, 1055, 1056], "rounded_list": 818, "rouseeuw1984": 480, "rousseeuw": [112, 113, 415, 417, 475, 480, 798, 799, 1004], "rousseuw": [112, 113], "rout": [1, 46, 90, 136, 183, 188, 200, 245, 271, 335, 429, 432, 435, 438, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 955, 956, 957, 958, 982, 1019, 1034, 1053, 1055], "route_param": [253, 955], "routed_param": [253, 958], "routemappingpair": 955, "router": [1, 253, 399, 406, 955, 956, 957, 958], "routerconsumerclassifi": 253, "routerconsumerclassifierifittedrouterconsumerclassifi": 253, "routin": [334, 374, 379, 382, 385, 386, 387, 388, 393, 397, 399, 424, 678, 680, 693, 853, 912, 913, 914, 915, 916, 995, 1001, 1008, 1009, 1012, 1017, 1022, 1039, 1053, 1054, 1055], "routing_info": 955, "routlei": 1045, "rouvinen": 1044, "roux": [664, 994, 1011], "row": [1, 42, 56, 57, 58, 61, 63, 69, 78, 94, 108, 120, 122, 144, 147, 157, 160, 186, 219, 220, 221, 247, 250, 256, 257, 271, 320, 367, 372, 380, 387, 394, 398, 399, 412, 415, 418, 423, 430, 448, 449, 453, 455, 456, 457, 459, 462, 463, 465, 470, 474, 494, 496, 497, 498, 499, 500, 501, 506, 507, 508, 510, 511, 516, 517, 519, 532, 540, 548, 554, 557, 596, 597, 626, 638, 649, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 698, 702, 703, 716, 724, 725, 731, 764, 765, 769, 772, 774, 775, 776, 777, 779, 780, 782, 784, 785, 786, 787, 803, 804, 839, 845, 846, 847, 848, 849, 855, 858, 859, 860, 861, 862, 865, 876, 880, 882, 883, 885, 895, 896, 897, 900, 901, 904, 908, 926, 930, 931, 947, 969, 972, 976, 978, 980, 981, 984, 985, 987, 988, 990, 992, 994, 996, 998, 999, 1001, 1008, 1009, 1012, 1013, 1018, 1046, 1047, 1048, 1049, 1054], "row_compl": 56, "row_id_attribut": 379, "row_idx": [58, 219], "row_idx_shuffl": 57, "row_ind": [430, 457, 459], "row_indic": 154, "row_labels_": [56, 57, 58, 412, 457, 459], "row_norm": 265, "rowan": 1054, "rowei": [695, 699, 859, 995, 1001], "rows_": [56, 412, 430, 457, 459], "royal": [547, 633, 886, 898, 1012], "rp": 250, "rpath": 383, "rr2007": 990, "rragundez": 1047, "rrr": 389, "rrrcn": 389, "rsalakhu": 650, "rsh": [289, 329], "rskf": 822, "rsme": 998, "rsnegrin": 1053, "rsplit": [44, 54, 278, 1028], "rst": [373, 385, 389, 393, 1032, 1039], "rstride": 192, "rt": 143, "rt_model": 143, "rtn": 50, "rtol": [387, 850, 851, 855], "ru": 221, "ruben": 1054, "rubi": 1051, "rubia": 1042, "rubial": 1052, "rubin": 988, "rubinstein": [670, 691, 692], "rubric": 995, "ruchitagard": 1049, "rudi": 1045, "rudresh": 1054, "ruff": [385, 403, 408], "ruifeng": [1045, 1046, 1051], "ruin": 385, "ruiter": 1054, "rule": [1, 12, 26, 42, 63, 144, 196, 364, 367, 368, 372, 382, 385, 386, 387, 397, 399, 400, 410, 413, 414, 415, 419, 420, 422, 424, 542, 555, 556, 557, 558, 559, 567, 568, 575, 576, 608, 640, 651, 664, 665, 672, 673, 674, 679, 681, 682, 683, 684, 712, 713, 717, 806, 809, 810, 812, 820, 829, 832, 833, 834, 835, 837, 859, 910, 923, 987, 992, 1000, 1001, 1012, 1014, 1018, 1023, 1030, 1034, 1041, 1044, 1051, 1056], "ruleset": 1014, "rumelhart": 1002, "rumsfeld": [44, 380], "run": [42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 383, 385, 386, 387, 389, 390, 391, 392, 393, 397, 399, 400, 403, 409, 411, 415, 417, 419, 422, 425, 426, 427, 443, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 470, 473, 474, 477, 478, 537, 538, 539, 540, 541, 543, 545, 547, 548, 549, 551, 552, 554, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 588, 598, 600, 601, 602, 604, 605, 606, 608, 616, 617, 636, 640, 646, 652, 653, 655, 657, 658, 659, 661, 662, 666, 667, 668, 669, 688, 689, 694, 695, 696, 697, 698, 699, 700, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 842, 843, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 867, 868, 869, 872, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 941, 942, 969, 972, 987, 997, 999, 1002, 1011, 1013, 1014, 1017, 1018, 1022, 1023, 1030, 1032, 1039, 1042, 1044, 1046, 1047, 1048, 1049, 1053, 1054, 1055], "run_histori": 46, "run_id": 95, "run_tim": [234, 235], "rung": 1008, "runnabl": [53, 389, 390], "runtim": [29, 46, 48, 92, 138, 205, 234, 236, 251, 316, 320, 373, 387, 388, 397, 399, 409, 415, 422, 456, 569, 685, 820, 910, 911, 912, 913, 914, 915, 916, 1012, 1013, 1042, 1046, 1047, 1053, 1054, 1056, 1057], "runtime_histori": 46, "runxfail": 393, "rupesh": 1042, "rush": [42, 51, 385], "rushabh": 1050, "rushil": [1054, 1055], "russ": [634, 988], "russel": [1045, 1046], "russellrao": [456, 463, 705, 784, 785, 786, 1001], "russellraodist": 705, "russian": 423, "rust": 1017, "ruth": 1049, "rutter": 1052, "ruusmann": 1045, "rv": [0, 281, 318, 810, 818, 820, 987, 1039, 1040, 1043, 1044, 1045, 1046, 1047], "rv_discrete_frozen": 289, "rvd": [475, 480], "rvdriessen": [475, 480], "rvraghav93": [281, 318], "rw2006": [425, 616, 617], "ryad": 1045, "ryan": [1042, 1045, 1047, 1048], "ryb": 364, "ryder": 50, "ryotaro": 1051, "r\u00e9my": 1045, "r\u00fcdiger": [1047, 1048, 1050], "s1": [125, 173, 183, 207, 208, 382, 1031], "s2": [125, 173, 183, 207, 208, 382, 556, 1031], "s22": 504, "s3": [56, 125, 173, 207, 208, 382, 1031], "s4": [173, 207, 208, 382], "s5": [173, 207, 208, 382, 1006], "s6": [173, 207, 208, 382], "s_": [125, 281, 994, 995, 1006, 1008, 1031], "s__p": 870, "s_color": 239, "s_hessian": 239, "s_i": [415, 994, 1008], "s_ica_": 126, "s_isomap": 239, "s_j": 415, "s_ltsa": 239, "s_mod": 239, "s_pca_": 126, "s_point": 239, "s_scale": 239, "s_spectral": 239, "s_standard": 239, "s_t_sne": 239, "sa": [380, 498], "saaba": 1044, "saad": 1057, "sabharw": 1049, "sabri": 1054, "sach": 50, "sachdev": 1054, "sachdeva": 1046, "sachin": [1046, 1047, 1053], "sackei": 1049, "saclai": 0, "sacr": 1017, "sad": [824, 825], "sadak": 1051, "sadhana": 1047, "sadli": 151, "sadra": 1055, "sad\u0142ocha": 1052, "saeed": 998, "saeger": [1044, 1045, 1046], "safari": 1008, "safe": [1, 71, 191, 208, 271, 360, 385, 387, 415, 416, 440, 514, 515, 573, 574, 603, 780, 784, 834, 869, 904, 964, 970, 1001, 1045, 1046, 1047, 1052, 1053], "safe_copi": 1046, "safe_index": [394, 1049], "safe_mask": [1, 394], "safe_realloc": 1042, "safe_sparse_dot": [1, 394, 1049], "safe_sqr": [1, 394], "safeguard": 409, "safer": [360, 368, 383, 415, 419, 1039], "safest": [219, 237, 368, 379], "safeti": [103, 397, 416, 964, 1018, 1049], "safikh": 1054, "safiuddin": 1054, "sag": [211, 226, 664, 665, 678, 680, 693, 994, 1012, 1017, 1044, 1045, 1046, 1048, 1049], "sag_solv": 1048, "saga": [65, 210, 234, 235, 664, 665, 678, 680, 693, 820, 994, 1046, 1048], "sagar": 1049, "sagnik": 1047, "saha": 1053, "sahil": 1055, "sahin": 1049, "sahu": 1051, "sai": [205, 246, 355, 359, 360, 385, 413, 415, 416, 420, 422, 423, 452, 453, 506, 510, 516, 683, 987, 1004, 1011, 1022, 1029, 1030, 1032, 1056, 1057], "said": [154, 191, 246, 278, 380, 385, 798, 996, 1004, 1023, 1030], "saihttam": 1045, "sailesh": [1046, 1047], "saint": 1045, "saito": [420, 544, 546, 553, 1046], "saiw": 1045, "sake": [42, 63, 151, 154, 187, 191, 219, 323, 352, 359, 361, 393, 397, 676], "saket": [1043, 1044, 1051], "sakinaouisrani": 1053, "salahuddin": 1054, "salakhutdinov": [650, 859, 1001], "salamin": 1043, "sale": [148, 256, 277, 998, 1022], "saleem": 1049, "salerno": 382, "salim": [1056, 1057], "sallisaw": [416, 472], "salman": [0, 404, 1054, 1055, 1056, 1057, 1058], "salmon": 1023, "salt": [66, 251, 320, 1053], "salvator": [1039, 1053, 1054, 1056, 1057], "salz": 1046, "salzmann": [219, 237], "sam": [1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054], "sambhav": 1050, "same": [1, 24, 42, 45, 46, 51, 57, 62, 69, 71, 74, 78, 87, 89, 91, 92, 98, 103, 104, 105, 122, 124, 126, 129, 131, 133, 139, 141, 145, 148, 151, 152, 154, 157, 173, 175, 191, 192, 194, 205, 207, 208, 213, 219, 220, 221, 227, 237, 253, 257, 267, 271, 272, 273, 274, 275, 277, 278, 280, 282, 283, 285, 290, 291, 298, 301, 303, 315, 318, 319, 321, 323, 324, 327, 329, 340, 348, 359, 360, 361, 367, 368, 372, 373, 374, 379, 380, 382, 384, 385, 387, 389, 391, 394, 397, 398, 399, 400, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 436, 440, 444, 445, 452, 456, 462, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 499, 501, 502, 504, 510, 514, 515, 537, 538, 541, 542, 543, 544, 545, 546, 549, 553, 555, 557, 558, 559, 560, 563, 565, 566, 567, 568, 570, 571, 573, 574, 595, 596, 608, 609, 612, 616, 617, 619, 628, 633, 634, 635, 638, 639, 652, 655, 658, 659, 661, 664, 665, 669, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 690, 693, 705, 710, 711, 718, 719, 721, 723, 732, 737, 738, 742, 748, 761, 762, 763, 784, 785, 786, 792, 794, 798, 800, 801, 803, 804, 806, 807, 809, 810, 812, 814, 815, 820, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 852, 853, 854, 858, 860, 861, 862, 873, 874, 875, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 892, 899, 910, 911, 918, 920, 932, 936, 947, 964, 969, 972, 973, 983, 987, 988, 990, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1017, 1018, 1027, 1032, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "same_kind": 1056, "samesh": [1049, 1050], "samm": [66, 138, 140, 147, 422, 559, 1055, 1056], "samoocha": 1047, "sampl": [1, 26, 29, 36, 42, 43, 46, 49, 52, 60, 61, 62, 63, 67, 68, 69, 71, 73, 75, 76, 77, 80, 82, 83, 87, 90, 91, 92, 93, 94, 99, 112, 113, 114, 117, 120, 122, 124, 128, 129, 132, 133, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 152, 154, 155, 160, 161, 162, 166, 170, 172, 173, 175, 179, 180, 181, 182, 184, 186, 188, 191, 192, 196, 197, 203, 205, 207, 208, 219, 221, 223, 226, 227, 229, 230, 231, 233, 235, 236, 237, 239, 246, 250, 251, 253, 254, 256, 262, 263, 265, 266, 267, 268, 269, 271, 272, 276, 277, 279, 280, 281, 283, 285, 289, 291, 292, 297, 298, 302, 303, 304, 305, 307, 308, 309, 316, 318, 320, 321, 322, 323, 325, 327, 329, 330, 332, 334, 335, 337, 339, 340, 341, 342, 343, 344, 346, 348, 350, 352, 353, 355, 356, 359, 360, 364, 367, 372, 378, 380, 381, 384, 385, 387, 388, 397, 398, 406, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 432, 433, 434, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 462, 463, 464, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 769, 770, 774, 775, 776, 777, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 930, 931, 935, 936, 947, 951, 967, 969, 972, 973, 976, 979, 987, 988, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021, 1023, 1029, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "sample_i": [184, 425, 617, 1053], "sample_id": [367, 380, 503], "sample_interv": 644, "sample_interval_": 1055, "sample_posterior": [187, 633, 988], "sample_s": [92, 251, 360, 799], "sample_score_mean": 281, "sample_score_std": 281, "sample_silhouette_valu": 94, "sample_step": 644, "sample_weight": [60, 200, 219, 232, 237, 253, 328, 333, 334, 357, 385, 399, 406, 415, 422, 426, 432, 438, 443, 449, 450, 453, 455, 465, 466, 471, 475, 488, 489, 490, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 616, 617, 638, 639, 640, 641, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 703, 704, 706, 708, 709, 713, 714, 715, 718, 719, 722, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 740, 741, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 788, 789, 790, 791, 793, 794, 795, 796, 797, 800, 802, 805, 806, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 875, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 958, 986, 998, 1012, 1013, 1014, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "sample_weight1": 253, "sample_weight2": 253, "sample_weight_const": 357, "sample_weight_last_ten": 357, "sample_weight_vect": 936, "sample_without_replac": [1, 394, 1045], "samples_weight": 232, "samplewis": [760, 998], "samson": 1046, "samuel": [702, 1022, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "samuela": 1042, "samu\u00ebl": 1046, "san": [173, 382, 423, 1010], "sanchez": [196, 1047, 1048], "sandbox": 409, "sandeep": 1051, "sander": [415, 426, 450, 452, 456, 463, 856, 1004, 1048, 1049], "sandi": 1052, "sandip": [1056, 1057], "sandra": [1048, 1054], "sandro": [1047, 1054], "sandrocasagrand": [1047, 1048], "sandrovskii": 1046, "sangam": 1054, "sangamswadik": 1054, "sangeeth": 1048, "saniti": [388, 874, 998, 1039, 1040], "sanjabi": 1049, "sanjai": 1053, "sanjai_3": [1054, 1055], "sanjoi": [904, 1010], "sano": 1053, "sanofi": 50, "santa": [183, 1054], "santana": [1050, 1053], "santhanam": 1047, "santhosh": 1050, "santhoshbala18": 1050, "santi": [1044, 1046, 1047], "santiago": 1050, "sap": 50, "sapiro": [420, 537, 543], "saqib": 1047, "sara": 1052, "sarah": [1046, 1048, 1051], "sarahremu": [1054, 1057], "sarajpoor": 1054, "sarat": 1050, "sarawagi": 789, "sarra": 1049, "sartaj": 1045, "sasank": 1045, "sashka": [1054, 1055], "sass": [385, 403, 408], "sassenhagen": [134, 1051, 1056], "sat": [42, 154, 192, 423], "satellit": 1001, "satisfi": [415, 656, 660, 705, 723, 742, 743, 850, 851], "satish": 1047, "sato": 1042, "satrajit": [0, 405, 1039, 1040], "satur": [71, 191, 318], "sauerbrei": 1008, "sauerkraut": 423, "saul": [695, 699, 995, 1046, 1047, 1049], "saurabh": [1043, 1044, 1045, 1046, 1047, 1051], "sauvignon": 324, "saval": 1048, "savard": 1039, "save": [87, 103, 105, 256, 316, 384, 385, 389, 391, 392, 393, 399, 409, 419, 427, 474, 540, 541, 633, 850, 851, 908, 994, 998, 1008, 1014, 1022, 1032, 1039, 1042, 1046, 1049, 1057], "saver": 1017, "savings_statu": 271, "savkomax": 1054, "saw": [125, 220, 223, 1031], "sawtooth": [125, 1031], "say_hello": 959, "sc": [379, 415], "scaja": 1056, "scala": 1018, "scalabl": [76, 78, 96, 188, 195, 251, 269, 332, 360, 385, 415, 422, 423, 454, 497, 508, 595, 646, 812, 823, 834, 836, 848, 871, 880, 882, 910, 912, 915, 916, 990, 993, 995, 998, 1011, 1013, 1019, 1022, 1039, 1042, 1043, 1049, 1050, 1053, 1054], "scalar": [1, 124, 330, 335, 391, 399, 411, 416, 425, 427, 470, 473, 530, 539, 621, 622, 623, 628, 629, 633, 634, 636, 744, 748, 926, 934, 990, 1002, 1004, 1008, 1012, 1017, 1049, 1050, 1053, 1055], "scalarmapp": 65, "scale": [1, 35, 42, 43, 50, 61, 63, 71, 74, 77, 80, 81, 90, 92, 95, 104, 105, 111, 114, 117, 126, 129, 149, 156, 173, 175, 176, 177, 180, 181, 182, 184, 188, 192, 196, 199, 200, 207, 210, 219, 221, 223, 233, 234, 235, 237, 238, 241, 246, 252, 256, 267, 274, 277, 278, 279, 280, 284, 301, 303, 314, 315, 316, 317, 318, 328, 331, 333, 334, 342, 343, 345, 348, 352, 368, 371, 372, 377, 378, 379, 382, 385, 390, 394, 397, 398, 399, 415, 416, 420, 422, 423, 424, 425, 452, 453, 456, 457, 463, 470, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 507, 516, 520, 521, 530, 540, 544, 546, 547, 553, 555, 556, 567, 568, 588, 596, 597, 603, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 637, 638, 647, 650, 651, 652, 653, 655, 658, 664, 665, 666, 667, 668, 678, 680, 682, 683, 684, 687, 693, 694, 695, 696, 698, 700, 705, 709, 722, 747, 753, 763, 765, 775, 781, 783, 820, 823, 836, 837, 838, 850, 851, 852, 867, 868, 871, 874, 879, 880, 882, 885, 887, 888, 890, 895, 896, 897, 899, 900, 902, 903, 910, 911, 912, 913, 914, 915, 916, 973, 974, 975, 976, 979, 987, 990, 991, 994, 998, 999, 1000, 1001, 1002, 1006, 1012, 1013, 1018, 1019, 1022, 1023, 1030, 1031, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "scale_": [655, 879, 880, 888, 890, 900, 1008, 1044], "scaled_clf": 323, "scaled_pca": 323, "scaled_x_train": 323, "scaler": [44, 104, 106, 171, 188, 235, 236, 251, 256, 258, 260, 291, 301, 306, 317, 322, 323, 332, 348, 351, 368, 390, 416, 419, 496, 664, 665, 678, 680, 693, 870, 879, 880, 882, 886, 887, 888, 890, 895, 896, 897, 898, 899, 900, 901, 1002, 1008, 1012, 1019, 1028, 1039, 1044, 1047, 1052], "scaler2": 260, "scalewai": 393, "scaling_": 556, "scalings_": [555, 556], "scanpi": 1056, "scatter": [42, 47, 49, 50, 60, 65, 66, 69, 72, 73, 76, 77, 78, 79, 83, 86, 90, 91, 92, 93, 94, 96, 101, 112, 117, 121, 122, 126, 128, 129, 130, 132, 139, 140, 144, 147, 155, 157, 158, 160, 166, 168, 175, 176, 177, 179, 181, 182, 183, 184, 190, 191, 196, 199, 202, 209, 211, 215, 216, 217, 220, 221, 222, 228, 231, 232, 233, 236, 239, 240, 241, 242, 243, 244, 246, 251, 252, 254, 262, 263, 264, 265, 266, 267, 268, 272, 278, 280, 292, 298, 301, 304, 305, 306, 307, 308, 309, 310, 313, 318, 320, 321, 323, 331, 339, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 359, 364, 365, 366, 417, 637, 707, 992, 994, 1030, 1031], "scatter_": 707, "scatter_fig": 144, "scatter_kwarg": [42, 51, 108, 159, 191, 707], "scatter_trac": 144, "scatterplot": [116, 198, 277], "scatterpoint": [128, 132, 242, 264, 339], "scenario": [91, 103, 154, 175, 196, 223, 280, 368, 392, 403, 414, 419, 422, 543, 549, 551, 552, 992, 998, 1008, 1049], "scene": [382, 393, 1001, 1003, 1052], "schapir": [49, 295, 311, 380, 422, 504, 559, 560], "schedul": [154, 314, 373, 682, 683, 684, 867, 868, 1012, 1022, 1046], "scheidegg": 1039, "scheme": [286, 303, 324, 325, 380, 399, 415, 419, 421, 423, 572, 596, 664, 665, 711, 819, 877, 878, 881, 883, 887, 891, 894, 899, 910, 915, 987, 994, 1008, 1012, 1039, 1047, 1050, 1051, 1056, 1057], "scherer": 1045, "scheubrein": 1051, "schloss": 998, "schl\u00fcter": [1039, 1047], "schmerler": 1054, "schmid": [764, 765, 996], "schmidt": [664, 994, 1042], "schmitt": [1049, 1050], "schmitz": 1056, "schneider": [359, 1052], "schoelkopf": 906, "schoentgen": [1047, 1048], "schofield": 1039, "schole": 1051, "scholkopf1997": 420, "scholkopf1998": 1008, "scholz": 1057, "school": [103, 180, 191, 382, 415, 794, 998], "schreiber": [0, 405, 1044, 1045, 1046], "schroeder": [44, 380], "schubert": [415, 426, 450, 456, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1057], "schucker": 1045, "schuder": [1047, 1048, 1049], "schuetz": [845, 849], "schuldt": 1043, "schult": 54, "schulz": 1039, "schumach": [1042, 1043, 1044], "schut": 1039, "schwardt": 1039, "schwartz": [1039, 1041, 1053], "schwetlick": [1050, 1051], "sch\u00f6lkopf": [43, 420, 541, 876, 1004, 1008, 1013], "sch\u00f6nberger": [1041, 1042], "sch\u00fctze": [420, 596, 996, 998, 1000], "sci": [56, 103, 359, 360, 361, 380, 397, 494, 695, 699, 881, 995, 1008, 1032], "scibol": 1050, "scienc": [0, 72, 112, 173, 183, 191, 295, 379, 382, 397, 415, 446, 460, 544, 546, 553, 694, 695, 699, 857, 988, 990, 994, 995, 998, 1001, 1010, 1018, 1022, 1026, 1047], "scientif": [0, 67, 164, 165, 166, 251, 379, 383, 397, 403, 415, 458, 468, 507, 1022, 1024], "scientifiqu": 0, "scientist": [988, 1022], "scikera": 1017, "scikit": [1, 14, 29, 44, 46, 48, 50, 51, 53, 54, 66, 67, 84, 89, 103, 104, 136, 142, 143, 144, 154, 156, 159, 170, 173, 184, 186, 187, 188, 191, 192, 193, 194, 196, 207, 208, 219, 220, 221, 237, 245, 248, 256, 258, 259, 260, 269, 271, 274, 282, 289, 291, 295, 298, 300, 303, 305, 324, 326, 340, 352, 359, 360, 363, 364, 367, 368, 373, 374, 377, 379, 380, 381, 382, 384, 385, 388, 391, 392, 393, 394, 398, 399, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 434, 435, 437, 438, 439, 444, 449, 452, 453, 456, 463, 470, 471, 473, 474, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 518, 521, 527, 530, 544, 547, 567, 568, 570, 571, 573, 582, 587, 588, 589, 595, 605, 608, 617, 632, 634, 636, 638, 640, 644, 646, 652, 654, 658, 664, 675, 686, 694, 703, 706, 707, 708, 723, 724, 738, 748, 754, 784, 785, 786, 794, 801, 805, 806, 807, 808, 809, 810, 811, 812, 820, 823, 824, 825, 826, 827, 828, 829, 832, 833, 836, 838, 839, 852, 854, 870, 871, 873, 875, 877, 880, 882, 883, 884, 885, 889, 890, 891, 894, 907, 908, 910, 915, 918, 919, 941, 942, 964, 965, 987, 988, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1011, 1012, 1013, 1014, 1016, 1019, 1021, 1025, 1026, 1027, 1028, 1030, 1031, 1034, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "scikit_learn": 1017, "scikit_learn_data": [380, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505], "scipi": [0, 1, 44, 52, 54, 56, 75, 80, 81, 87, 88, 110, 111, 114, 125, 127, 131, 150, 175, 191, 194, 205, 209, 221, 263, 267, 268, 274, 277, 285, 289, 298, 303, 308, 316, 328, 329, 334, 335, 337, 338, 372, 379, 380, 383, 385, 387, 391, 393, 394, 397, 398, 399, 403, 408, 409, 415, 420, 423, 456, 457, 458, 459, 463, 468, 469, 502, 509, 514, 538, 540, 541, 547, 550, 587, 588, 591, 592, 594, 595, 616, 617, 654, 655, 659, 663, 664, 665, 669, 672, 673, 674, 675, 676, 678, 680, 682, 683, 684, 686, 690, 693, 697, 698, 701, 766, 769, 784, 785, 786, 787, 798, 799, 810, 818, 820, 836, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 867, 873, 882, 883, 888, 889, 890, 893, 897, 900, 901, 910, 912, 913, 915, 916, 944, 948, 949, 953, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 987, 988, 994, 996, 999, 1001, 1002, 1008, 1012, 1013, 1016, 1018, 1026, 1028, 1031, 1032, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055], "sckit": 1055, "scls19fr": 1044, "scognamiglio": 422, "scope": [44, 56, 271, 372, 374, 385, 397, 423, 1017, 1018, 1028], "score": [1, 12, 26, 42, 44, 46, 49, 51, 57, 58, 60, 61, 62, 63, 66, 67, 68, 71, 92, 94, 103, 104, 105, 106, 107, 108, 110, 114, 117, 131, 136, 138, 140, 147, 148, 149, 150, 151, 154, 155, 158, 159, 165, 168, 169, 170, 173, 186, 188, 190, 191, 192, 193, 194, 196, 203, 210, 211, 214, 219, 221, 225, 227, 235, 237, 246, 251, 252, 253, 256, 260, 266, 269, 271, 275, 277, 278, 279, 280, 281, 282, 285, 286, 288, 289, 290, 291, 292, 293, 295, 297, 305, 306, 307, 313, 314, 315, 316, 320, 322, 323, 324, 325, 327, 328, 329, 330, 334, 335, 337, 338, 340, 341, 348, 355, 359, 360, 363, 368, 380, 385, 387, 390, 398, 399, 409, 410, 411, 412, 413, 414, 416, 418, 420, 422, 424, 432, 434, 438, 443, 449, 453, 455, 458, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 508, 510, 538, 542, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 612, 615, 616, 617, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 704, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 748, 761, 762, 763, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 809, 810, 812, 820, 825, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 856, 857, 859, 860, 861, 866, 867, 868, 870, 890, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 949, 987, 990, 994, 996, 1001, 1004, 1006, 1008, 1012, 1018, 1019, 1026, 1028, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "score_clf1": 68, "score_clf2": 68, "score_clf3": 68, "score_df": 61, "score_differ": 282, "score_estim": [219, 237], "score_full_data": 186, "score_func": [71, 104, 105, 424, 598, 601, 602, 604, 605, 606, 748, 1039, 1041, 1056], "score_iri": 283, "score_iterative_imput": 186, "score_label": [237, 283], "score_mean": 351, "score_nam": [61, 71, 252, 279, 293, 333, 360, 812, 829], "score_param": [665, 1056], "score_rand": 283, "score_sampl": [266, 303, 304, 305, 311, 399, 421, 475, 538, 547, 569, 683, 803, 804, 806, 809, 810, 820, 855, 856, 866, 870, 914, 1004, 1042, 1047, 1049, 1051], "score_simple_imput": 186, "score_std": 351, "score_tim": [279, 419, 833, 834], "score_times_nb": 279, "score_times_svm": 279, "score_typ": [252, 279, 293, 333, 812, 829, 1055], "score_valu": 360, "scorer": [1, 154, 159, 237, 253, 271, 281, 334, 387, 399, 406, 414, 419, 422, 424, 567, 568, 600, 608, 640, 665, 679, 681, 717, 738, 739, 748, 806, 809, 810, 812, 820, 828, 829, 832, 833, 834, 837, 956, 987, 994, 998, 1006, 1018, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "scorer1_nam": 419, "scorer2_nam": 419, "scorer_": [806, 809, 810, 820], "scorer_nam": [281, 806, 820], "scores_": [198, 199, 598, 601, 602, 604, 605, 606, 650, 651, 665, 1039, 1049], "scores_df": 51, "scores_glm_pure_premium": 237, "scores_matrix": 288, "scores_max": 54, "scores_product_model": 237, "scores_std": [164, 1027], "scoring_inner_cv": 334, "scoring_on_bootstrap": 280, "scoring_weight": 406, "scott": [421, 855, 1039, 1040, 1045, 1047, 1048, 1049, 1054, 1055], "scratch": [386, 448, 998, 1041], "screen": [47, 1052], "screenporch": 148, "screenshot": 383, "script": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 373, 385, 386, 387, 388, 389, 391, 397, 399, 403, 409, 423, 1018, 1021, 1032], "scroll": 1025, "scrollbar": 390, "scrutin": 286, "scsi": 56, "scullei": 415, "sd345": 1032, "sdca": 1017, "sdenton4": 1042, "sdg_param": 341, "se": [173, 241, 382, 403], "seabold": [1042, 1044, 1045], "seaborn": [71, 139, 154, 190, 191, 198, 203, 267, 277, 385, 403, 408, 1017], "seagreen": 213, "seal": 1045, "seamu": 1041, "sean": [1051, 1052, 1054], "seanpwilliam": 1046, "sear": 1045, "search": [1, 44, 63, 80, 88, 104, 105, 106, 107, 151, 168, 170, 172, 173, 175, 188, 237, 252, 253, 267, 269, 271, 276, 278, 281, 282, 284, 289, 297, 298, 300, 302, 316, 320, 332, 348, 354, 359, 368, 382, 383, 385, 387, 397, 399, 410, 415, 416, 419, 422, 423, 424, 426, 449, 454, 456, 458, 463, 464, 467, 470, 477, 478, 484, 508, 521, 528, 563, 564, 565, 566, 570, 571, 572, 585, 605, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 634, 659, 682, 694, 695, 698, 699, 719, 734, 791, 794, 806, 809, 810, 817, 818, 820, 822, 836, 837, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 870, 915, 918, 919, 920, 921, 952, 986, 991, 993, 995, 998, 1001, 1002, 1012, 1014, 1017, 1018, 1019, 1023, 1024, 1026, 1028, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1053, 1054, 1056], "search_05p": 151, "search_95p": 151, "search_cv": 104, "searchcv": [398, 1054], "searcher": 1032, "searchforpass": 1055, "searchgrid": 1018, "searchsort": 49, "season": [42, 51, 180, 192, 220, 384], "seasonal_kernel": 180, "seasoncountstru32": 51, "sebastian": [323, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "sebastianraschka": 323, "sebastien": 1047, "sebastin": [1046, 1047], "sebasti\u00e1n": 1045, "seberg": 1040, "sec": [48, 227, 241, 244, 298], "sec65": 1054, "secant": 648, "second": [42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 380, 387, 389, 391, 399, 412, 414, 415, 419, 420, 422, 423, 425, 470, 473, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 510, 516, 559, 589, 594, 595, 596, 597, 627, 630, 637, 638, 705, 718, 722, 764, 765, 769, 770, 772, 773, 780, 781, 782, 783, 784, 787, 806, 809, 810, 820, 834, 840, 841, 844, 847, 858, 860, 861, 862, 867, 868, 987, 988, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1005, 1008, 1009, 1014, 1023, 1029, 1031, 1054], "secondari": [641, 1043], "secondli": [383, 397, 415, 422, 663, 994, 1032], "sect": 43, "section": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 71, 124, 129, 141, 149, 154, 159, 164, 165, 166, 180, 184, 190, 191, 192, 194, 198, 203, 207, 208, 221, 243, 247, 253, 256, 258, 271, 275, 277, 280, 286, 323, 324, 325, 329, 359, 360, 361, 368, 378, 380, 383, 385, 386, 387, 389, 390, 391, 392, 393, 400, 406, 413, 414, 416, 418, 419, 420, 422, 423, 424, 425, 445, 449, 465, 540, 620, 625, 628, 643, 651, 794, 804, 912, 915, 987, 992, 994, 998, 999, 1001, 1002, 1004, 1005, 1012, 1013, 1015, 1016, 1030, 1032, 1039, 1041, 1042, 1043, 1046], "sector": 191, "sector_construct": 191, "sector_manufactur": 191, "sector_oth": 191, "secur": [389, 399, 1017, 1018, 1022, 1034], "sed": [389, 1039], "sedamaki": 1053, "sedykh": 1054, "see": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 51, 57, 60, 61, 63, 71, 78, 83, 84, 87, 89, 91, 92, 96, 98, 99, 101, 102, 112, 117, 119, 120, 124, 129, 130, 134, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 159, 164, 169, 170, 171, 173, 175, 180, 181, 182, 186, 188, 191, 192, 194, 196, 198, 199, 200, 203, 210, 220, 221, 222, 223, 225, 236, 237, 239, 241, 248, 250, 253, 256, 257, 258, 260, 263, 264, 265, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 291, 292, 293, 295, 298, 304, 305, 307, 311, 318, 324, 325, 327, 328, 329, 330, 331, 332, 333, 339, 348, 352, 355, 359, 360, 361, 363, 364, 365, 366, 368, 372, 373, 374, 377, 378, 379, 380, 382, 383, 384, 385, 387, 389, 391, 392, 393, 397, 398, 399, 409, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 615, 616, 617, 620, 625, 628, 629, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 707, 712, 714, 717, 719, 749, 769, 780, 784, 785, 786, 787, 794, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 946, 947, 967, 969, 972, 982, 987, 988, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1022, 1023, 1025, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "seed": [1, 45, 49, 62, 63, 69, 73, 74, 78, 79, 86, 88, 91, 93, 94, 98, 99, 104, 110, 111, 112, 122, 125, 130, 141, 147, 166, 168, 193, 209, 214, 217, 222, 225, 228, 232, 236, 242, 263, 265, 266, 267, 268, 280, 283, 292, 303, 304, 305, 310, 352, 353, 357, 360, 368, 373, 387, 394, 397, 399, 415, 419, 420, 449, 453, 454, 456, 458, 463, 465, 466, 467, 468, 477, 478, 479, 542, 550, 559, 560, 561, 562, 565, 566, 633, 652, 653, 658, 659, 666, 667, 668, 669, 683, 695, 697, 699, 701, 803, 804, 810, 841, 844, 859, 913, 933, 946, 947, 963, 967, 987, 988, 993, 995, 1030, 1031, 1043, 1044, 1048, 1049, 1055], "seeger": [645, 990], "seek": [239, 241, 243, 384, 385, 397, 400, 514, 515, 995, 1024, 1026], "seel": 1053, "seem": [42, 47, 51, 80, 89, 151, 154, 192, 219, 243, 246, 278, 295, 314, 322, 355, 359, 360, 384, 385, 390, 414, 419, 507, 994, 998], "seemingli": [237, 368, 397], "seen": [54, 61, 74, 89, 100, 114, 127, 133, 145, 151, 154, 191, 192, 215, 243, 249, 253, 314, 318, 348, 359, 380, 387, 389, 398, 399, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 431, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 527, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 629, 633, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 973, 979, 987, 993, 998, 1001, 1002, 1008, 1014, 1022, 1027, 1028, 1030, 1031, 1051, 1052, 1053, 1054, 1055, 1056], "segfault": [373, 386, 1039, 1047, 1052], "seglearn": 1017, "segment": [50, 52, 54, 58, 70, 81, 82, 188, 242, 249, 380, 393, 415, 423, 458, 468, 514, 515, 697, 866, 998, 1017, 1019, 1022, 1047, 1049, 1051], "seguin": 1044, "sei": 423, "seismic_r": [198, 203], "sejourn": 1048, "sel": [406, 424], "seladu": 1055, "seldom": 910, "sele": [1053, 1054], "selecci\u00f3n": 324, "select": [1, 17, 28, 42, 45, 47, 48, 51, 57, 69, 70, 78, 81, 89, 91, 96, 102, 104, 107, 114, 122, 123, 124, 133, 134, 138, 140, 146, 148, 151, 154, 159, 168, 170, 180, 182, 191, 192, 194, 196, 197, 199, 201, 203, 205, 206, 218, 223, 227, 234, 237, 240, 246, 250, 252, 256, 261, 262, 263, 264, 271, 275, 276, 277, 278, 282, 290, 291, 302, 318, 323, 324, 329, 333, 335, 337, 338, 341, 343, 348, 355, 359, 360, 361, 368, 372, 373, 380, 382, 383, 385, 387, 393, 398, 399, 412, 415, 416, 417, 420, 422, 423, 425, 449, 451, 452, 453, 455, 457, 459, 464, 465, 466, 470, 472, 473, 478, 479, 482, 494, 495, 498, 499, 502, 503, 506, 507, 508, 510, 518, 521, 538, 540, 541, 546, 547, 550, 555, 557, 564, 565, 566, 569, 571, 587, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 633, 637, 638, 651, 652, 653, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 677, 679, 682, 684, 688, 689, 697, 698, 703, 718, 722, 724, 760, 794, 798, 799, 803, 804, 806, 809, 810, 811, 812, 820, 832, 833, 834, 836, 838, 852, 853, 854, 856, 858, 860, 861, 862, 870, 871, 875, 880, 886, 890, 907, 910, 911, 915, 918, 919, 920, 921, 926, 967, 968, 992, 993, 995, 997, 998, 999, 1001, 1002, 1004, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1030, 1031, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "select__k": 987, "select_dtyp": [108, 148, 332, 472], "selected_featur": 194, "selected_features_nam": 194, "selectfdr": [1, 424, 598, 602, 604, 605, 606, 612, 1043, 1045, 1046, 1055], "selectfpr": [1, 385, 424, 598, 601, 604, 605, 606, 612, 1055], "selectfrommodel": [1, 173, 399, 406, 599, 608, 609, 1020, 1034, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1056], "selectfw": [1, 424, 598, 601, 602, 605, 606, 612, 1055], "selectkbest": [1, 105, 107, 169, 170, 331, 368, 385, 406, 416, 424, 587, 598, 601, 602, 604, 606, 612, 987, 1040, 1045, 1055, 1056], "selectkbestselectkbest": [170, 331], "selector": [1, 51, 104, 169, 170, 256, 355, 393, 423, 424, 472, 587, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 1041, 1049, 1051, 1055], "selectormixin": [1, 1050], "selectpercentil": [1, 88, 104, 260, 351, 424, 598, 601, 602, 604, 605, 609, 612, 1040, 1045, 1055, 1056], "selectpercentileselectpercentil": [104, 260], "self": [1, 46, 56, 61, 63, 90, 99, 136, 183, 188, 253, 291, 298, 336, 342, 348, 359, 379, 385, 386, 387, 390, 391, 392, 393, 415, 423, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 506, 514, 515, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 709, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 820, 824, 825, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 955, 956, 958, 959, 964, 972, 1001, 1018, 1019, 1020, 1022, 1034, 1041, 1046, 1053], "self_request": 253, "self_training_clf": 340, "self_training_model": [329, 907], "selftrain": 341, "selftrainingclassifi": [1, 329, 340, 341, 342, 406, 1011, 1051, 1056], "selftrainingclassifierifittedselftrainingclassifi": 329, "seljak": 1054, "sell": 108, "selvan": 1051, "semant": [53, 359, 360, 399, 550, 1032, 1033, 1034, 1041], "semi": [1, 37, 56, 66, 166, 177, 251, 254, 320, 329, 345, 348, 352, 361, 380, 399, 494, 510, 541, 594, 596, 682, 735, 836, 870, 874, 905, 906, 907, 915, 996, 1001, 1004, 1019, 1020, 1034, 1039, 1051, 1054], "semi_supervis": [1, 188, 329, 331, 336, 337, 338, 339, 340, 341, 342, 406, 905, 906, 907, 999, 1011, 1019, 1040, 1045, 1046, 1053, 1054], "semiconductor": 1022, "semidefinit": [1008, 1013], "semilogi": 250, "semilogx": [164, 208, 290, 1027], "semin": 422, "seminar": 998, "semisupervis": [337, 399], "sen": [1, 188, 197, 222, 225, 318, 655, 663, 677, 684, 685, 1019], "send": [385, 415, 427, 539], "sender": [359, 380], "sendyk": 1048, "seng": 1051, "senger": [0, 1055, 1056, 1057, 1058], "senior": [1008, 1022], "sens": [41, 42, 51, 54, 61, 89, 100, 181, 188, 191, 196, 250, 318, 324, 338, 348, 359, 368, 372, 385, 386, 399, 415, 417, 419, 424, 468, 475, 476, 477, 478, 479, 480, 481, 482, 658, 661, 662, 678, 807, 817, 907, 992, 994, 1001, 1002, 1004, 1008, 1011, 1019], "sensibl": [86, 186, 295, 360, 387, 994, 1008], "sensit": [42, 78, 89, 112, 113, 141, 151, 188, 192, 221, 222, 223, 246, 247, 256, 269, 281, 284, 291, 318, 335, 348, 373, 374, 400, 414, 417, 422, 458, 468, 502, 557, 567, 664, 698, 706, 708, 718, 719, 724, 738, 748, 790, 793, 794, 805, 806, 828, 836, 871, 890, 908, 993, 994, 995, 997, 998, 1002, 1004, 1012, 1013, 1019, 1023, 1031, 1043, 1057], "sensor": 203, "sent": [154, 415, 839], "sentenc": [103, 359, 361, 380, 400, 423], "sentiment": 1024, "seoeun": 1055, "sep": [122, 286], "sepal": [79, 120, 132, 134, 147, 177, 202, 260, 301, 329, 332, 345, 382, 1008, 1029, 1030], "sepal_col": 332, "separ": [51, 52, 60, 61, 65, 66, 74, 89, 94, 96, 100, 106, 112, 121, 123, 124, 126, 129, 138, 140, 143, 146, 157, 173, 178, 187, 188, 192, 193, 196, 197, 218, 220, 240, 254, 264, 277, 280, 286, 287, 318, 320, 323, 329, 340, 343, 344, 346, 347, 348, 352, 353, 359, 368, 372, 381, 382, 387, 390, 393, 397, 399, 409, 413, 415, 416, 417, 420, 422, 423, 425, 470, 518, 525, 539, 544, 546, 547, 553, 555, 587, 594, 595, 597, 616, 637, 644, 652, 653, 679, 682, 683, 696, 700, 731, 738, 751, 752, 754, 759, 798, 825, 842, 843, 869, 870, 912, 914, 915, 920, 921, 987, 988, 990, 992, 994, 995, 997, 1004, 1005, 1008, 1012, 1013, 1019, 1028, 1030, 1031, 1039, 1042, 1044, 1045, 1049, 1051, 1052, 1055, 1056], "seper": 559, "septemb": [740, 998, 1039, 1042, 1045, 1047, 1052, 1055], "seq": 639, "seq_dataset": [1039, 1049], "seqlearn": 397, "sequenc": [1, 50, 138, 147, 207, 242, 387, 399, 416, 419, 420, 422, 423, 509, 518, 559, 567, 568, 575, 576, 587, 588, 594, 595, 597, 652, 806, 809, 817, 836, 870, 894, 950, 951, 961, 969, 972, 1017, 1039, 1042, 1044, 1045], "sequencekernel": 183, "sequenti": [1, 51, 147, 167, 170, 188, 213, 278, 329, 383, 420, 422, 423, 506, 507, 540, 599, 603, 608, 609, 611, 612, 652, 653, 658, 659, 664, 666, 667, 668, 669, 679, 794, 870, 871, 890, 988, 1006, 1012, 1017, 1019, 1020, 1034, 1039, 1048, 1051], "sequentialfeatureselector": [1, 173, 406, 424, 599, 603, 609, 1051, 1052, 1053, 1054, 1055], "sergei": [415, 1041, 1045, 1046, 1047, 1048, 1049], "sergeyf": 1041, "sergio": [1039, 1041, 1042, 1051, 1054], "sergiodsr": 1050, "sergul": [1046, 1047, 1050], "seri": [1, 41, 42, 50, 57, 114, 145, 151, 154, 188, 190, 193, 194, 201, 219, 221, 223, 237, 239, 260, 282, 291, 325, 331, 337, 377, 380, 390, 399, 415, 495, 496, 497, 498, 502, 506, 507, 508, 510, 511, 516, 547, 568, 696, 700, 707, 748, 751, 752, 754, 796, 827, 832, 833, 836, 926, 989, 994, 995, 999, 1001, 1012, 1017, 1019, 1042, 1045, 1046, 1047, 1051, 1054, 1056, 1057], "serial": [399, 409, 429, 954, 1017, 1018, 1039, 1047, 1051, 1056], "serializetostr": 409, "serious": 1000, "serum": [173, 382], "serv": [103, 128, 138, 181, 280, 352, 416, 557, 990, 1034, 1053], "server": [0, 173, 372, 382, 383, 502, 1021, 1047], "servic": [0, 42, 247, 256, 385, 389, 409, 1022, 1047], "sess": 409, "session": [387, 391, 397, 403, 1016, 1022, 1032], "set": [1, 2, 7, 18, 26, 36, 41, 42, 43, 44, 45, 46, 49, 51, 52, 57, 61, 62, 63, 65, 66, 69, 71, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 94, 96, 98, 99, 100, 103, 104, 106, 112, 113, 114, 117, 120, 123, 124, 128, 129, 132, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 161, 164, 169, 170, 173, 175, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 198, 203, 204, 207, 208, 210, 212, 214, 215, 216, 218, 219, 220, 221, 224, 227, 232, 233, 237, 239, 240, 241, 246, 247, 248, 249, 251, 252, 253, 256, 260, 262, 264, 266, 267, 270, 272, 275, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 292, 295, 297, 300, 304, 305, 306, 307, 308, 311, 314, 315, 316, 318, 320, 322, 323, 324, 325, 327, 329, 330, 334, 337, 338, 341, 342, 345, 347, 350, 352, 355, 359, 360, 361, 365, 366, 367, 368, 372, 373, 374, 377, 378, 380, 382, 383, 385, 387, 389, 390, 392, 393, 398, 399, 400, 403, 406, 409, 411, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 494, 495, 499, 501, 502, 503, 505, 508, 509, 510, 514, 515, 516, 521, 529, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 705, 706, 707, 708, 709, 719, 720, 725, 727, 729, 732, 733, 734, 735, 736, 737, 740, 744, 746, 751, 752, 754, 756, 757, 759, 762, 785, 786, 788, 789, 790, 791, 793, 795, 796, 797, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 895, 896, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 930, 931, 941, 942, 947, 951, 954, 955, 967, 968, 969, 972, 973, 979, 982, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1024, 1026, 1027, 1028, 1031, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "set1": [277, 307, 308], "set_": [253, 406, 1057], "set_alpha": [69, 262, 263, 264, 267, 268], "set_arrai": [50, 242, 249], "set_aspect": [42, 178, 230, 264, 356], "set_autoscaley_on": 76, "set_axis_bgcolor": 114, "set_axis_off": 67, "set_axisbelow": 48, "set_box_aspect": 69, "set_clim": 302, "set_clip_box": [69, 262, 263, 264, 267, 268], "set_color": [45, 230], "set_config": [1, 253, 258, 260, 271, 325, 328, 334, 372, 373, 406, 416, 443, 449, 450, 453, 455, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 603, 616, 617, 632, 633, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 807, 808, 813, 815, 824, 828, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 1048, 1050, 1053, 1055], "set_constrained_layout_pad": 124, "set_edgecolor": 124, "set_facecolor": [114, 262], "set_fit_request": [253, 334, 406, 443, 449, 450, 453, 455, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 594, 597, 600, 641, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 696, 842, 843, 845, 846, 847, 848, 849, 855, 875, 876, 889, 890, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921], "set_fmt_str_length": 51, "set_i": 91, "set_index": [61, 138, 151, 208, 237, 277, 324, 360], "set_inverse_transform_request": [539, 587, 877, 890], "set_label": [74, 178, 250], "set_label_posit": 45, "set_linewidth": [50, 242, 249], "set_major_formatt": [239, 241, 244, 298, 303], "set_major_loc": [239, 303], "set_output": [188, 192, 245, 258, 323, 324, 388, 439, 448, 449, 451, 453, 455, 470, 474, 488, 489, 490, 491, 502, 510, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 664, 694, 695, 698, 836, 854, 859, 862, 866, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 908, 1019, 1054, 1055, 1056], "set_param": [127, 134, 142, 148, 151, 192, 193, 199, 207, 208, 212, 223, 227, 251, 256, 271, 290, 301, 327, 351, 360, 388, 399, 415, 416, 422, 425, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 988, 1004, 1023, 1030, 1031, 1039, 1045, 1046, 1047, 1052, 1053], "set_partial_fit_request": [455, 540, 672, 673, 674, 682, 683, 684, 838, 839, 842, 843, 845, 846, 847, 848, 849, 867, 890], "set_path_effect": 74, "set_posit": [101, 130, 230, 318], "set_predict_proba_request": [918, 920], "set_predict_request": [253, 488, 489, 490, 558, 617, 641, 650, 651, 918, 919, 920, 921], "set_printopt": 270, "set_prop_cycl": 220, "set_score_request": [253, 271, 334, 406, 443, 449, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 805, 828, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 852, 853, 857, 860, 861, 867, 868, 870, 905, 906, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 998], "set_siz": 305, "set_size_inch": [94, 164, 257], "set_split_request": [807, 808, 813, 815, 824], "set_start_method": 397, "set_stat": 987, "set_tick_param": 262, "set_ticklabel": [79, 120, 130, 216, 359], "set_titl": [46, 48, 53, 61, 63, 65, 66, 67, 69, 76, 77, 79, 87, 89, 91, 94, 98, 99, 105, 108, 112, 120, 122, 129, 134, 138, 143, 145, 149, 155, 157, 159, 160, 184, 186, 187, 190, 191, 192, 193, 194, 198, 199, 208, 210, 217, 219, 220, 221, 227, 239, 240, 243, 244, 249, 251, 252, 256, 257, 262, 270, 271, 272, 273, 274, 277, 279, 280, 284, 288, 289, 291, 293, 295, 297, 298, 301, 302, 303, 308, 313, 314, 318, 319, 320, 321, 322, 323, 327, 331, 337, 338, 345, 352, 355, 356, 357, 359, 363], "set_transform_request": [253, 488, 489, 490, 539, 588, 594, 596, 597, 641, 873, 876, 882, 890], "set_vis": [53, 69, 302, 308, 318], "set_xlabel": [45, 48, 79, 87, 94, 105, 106, 108, 120, 122, 129, 149, 184, 186, 187, 190, 192, 193, 194, 196, 208, 214, 216, 217, 219, 221, 234, 235, 251, 271, 277, 279, 283, 288, 289, 291, 293, 295, 303, 318, 319, 323, 340, 360, 361, 363], "set_xlim": [66, 76, 94, 108, 112, 122, 143, 157, 187, 192, 217, 219, 224, 251, 262, 281, 283, 295, 303, 313, 318, 320, 321, 322, 323, 328, 334, 356], "set_xscal": [208, 224], "set_xtick": [42, 46, 48, 66, 77, 94, 98, 134, 157, 161, 192, 194, 210, 235, 251, 262, 288, 289, 297, 313, 315, 320, 321, 345], "set_xticklabel": [46, 48, 112, 134, 161, 178, 192, 194, 288, 289, 297], "set_ylabel": [45, 46, 48, 65, 69, 79, 87, 94, 99, 105, 106, 108, 112, 120, 122, 129, 134, 138, 145, 149, 184, 192, 196, 208, 210, 214, 216, 217, 219, 221, 223, 234, 251, 262, 271, 277, 279, 283, 288, 289, 291, 297, 303, 318, 319, 323, 327, 340, 355, 360, 363, 1028], "set_ylim": [46, 48, 66, 76, 94, 105, 122, 143, 156, 157, 184, 192, 199, 217, 219, 220, 251, 262, 281, 293, 297, 303, 313, 318, 320, 321, 323, 328, 334, 340, 356], "set_yscal": [149, 219], "set_ytick": [42, 66, 77, 94, 98, 134, 157, 186, 187, 194, 210, 235, 262, 288, 313, 315, 320, 321, 345, 361], "set_yticklabel": [134, 178, 186, 187, 194, 288, 361], "set_zlabel": [79, 120, 216], "set_zord": 126, "setattr": 387, "setdefault": [54, 925], "setdiff1d": 354, "seth": 1045, "sethdandridg": 1043, "setminu": 1014, "setosa": [79, 120, 130, 132, 286, 287, 382, 510, 1023, 1030], "setp": [46, 48, 288, 292], "settabl": 998, "settingwithcopywarn": 192, "setup": [284, 286, 372, 383, 387, 391, 393, 1001, 1024], "setuptool": [383, 1057], "seuclidean": [456, 463, 705, 784, 785, 786, 1001, 1047, 1050, 1051], "seuclideandist": 705, "seung": 420, "seven": [380, 991], "seventh": [517, 1010], "sever": [0, 42, 47, 50, 51, 61, 63, 66, 69, 71, 89, 90, 91, 95, 107, 121, 141, 154, 157, 159, 162, 170, 173, 175, 180, 181, 188, 191, 196, 203, 208, 219, 223, 238, 239, 242, 243, 244, 250, 264, 272, 277, 282, 291, 300, 314, 318, 330, 355, 359, 360, 372, 379, 380, 382, 385, 387, 390, 393, 397, 399, 412, 415, 416, 419, 421, 422, 423, 425, 453, 455, 470, 493, 505, 514, 515, 544, 561, 562, 565, 566, 569, 570, 571, 576, 594, 595, 597, 616, 651, 652, 658, 694, 695, 696, 697, 698, 699, 803, 804, 806, 809, 810, 820, 838, 839, 845, 846, 847, 848, 849, 869, 870, 877, 894, 918, 919, 920, 921, 933, 987, 990, 995, 998, 999, 1001, 1006, 1008, 1012, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1052, 1055, 1056], "sevin": 1047, "sewook": 1049, "sex": [104, 173, 191, 193, 207, 208, 260, 332, 334, 382, 502, 1006, 1030], "sex_mal": 191, "seyedsaman": 1053, "sf": [173, 277, 329, 380, 424, 498, 608], "sfm": 173, "sfs_backward": 173, "sfs_forward": 173, "sfu": [415, 448], "sgd": [1, 45, 46, 49, 121, 133, 140, 150, 151, 160, 166, 178, 179, 188, 197, 200, 204, 210, 211, 226, 233, 246, 266, 285, 314, 315, 330, 344, 349, 350, 353, 357, 359, 364, 368, 374, 510, 518, 637, 655, 672, 673, 674, 677, 682, 683, 684, 685, 867, 868, 987, 1002, 1019, 1020, 1034, 1039, 1042, 1043, 1044, 1046, 1050, 1052], "sgdclassifi": [1, 24, 45, 46, 226, 227, 228, 229, 230, 231, 232, 251, 285, 341, 350, 359, 368, 372, 374, 391, 399, 413, 423, 644, 646, 647, 648, 652, 664, 672, 674, 910, 915, 990, 994, 999, 1012, 1013, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "sgdoneclasssvm": [1, 233, 246, 330, 914, 1004, 1012, 1052, 1054, 1055, 1056, 1057], "sgdregressor": [1, 24, 48, 230, 372, 374, 397, 652, 655, 673, 677, 682, 685, 868, 911, 916, 994, 1012, 1041, 1043, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1057], "sgi": 359, "sgkf": [419, 824], "sgm": 46, "sgml": [46, 372], "sh": [288, 389, 393, 987], "sh_color": 243, "sh_err": 243, "sh_lle": 243, "sh_point": 243, "sh_tsne": 243, "sha256": [46, 1054], "shack": [1049, 1050, 1051], "shade": [57, 87, 171, 202, 301, 306, 344, 420], "shader": 411, "shadi": [1054, 1055], "shadow": [128, 132, 133, 242, 339, 354, 361, 423], "shafer": 103, "shagun": 1045, "shah": [1043, 1044, 1045, 1051, 1057], "shaharyar": 1057, "shahebaz": 1047, "shahriar": 1041, "shaikh": [0, 370, 375, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1057], "shail": 1051, "shakerimoff": 1053, "shalev": [672, 673, 994, 1012], "shalil": 1047, "shall": 180, "shallow": [391, 422, 567, 568, 925], "shamsi": 1047, "shandeng123": 1053, "shane": [99, 1048, 1051, 1054], "shanghai": [695, 699, 995], "shangwu": [1047, 1048], "shankar": 1049, "shanmuga": 1045, "shanno": 994, "shannon": [563, 570, 918, 920, 995, 1014], "shantanu": 789, "shao": [1051, 1052, 1053], "shape": [1, 42, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 75, 80, 81, 82, 85, 86, 87, 88, 89, 92, 94, 95, 100, 103, 107, 108, 112, 124, 125, 127, 139, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 166, 169, 171, 176, 177, 179, 180, 181, 182, 186, 187, 188, 192, 193, 207, 208, 219, 221, 226, 228, 231, 232, 233, 234, 235, 238, 240, 241, 242, 246, 249, 250, 251, 252, 253, 255, 256, 262, 264, 266, 267, 268, 275, 277, 279, 280, 283, 284, 286, 287, 298, 303, 304, 308, 311, 313, 315, 320, 321, 327, 329, 332, 333, 334, 339, 340, 342, 345, 348, 351, 352, 353, 356, 357, 359, 360, 367, 372, 378, 379, 380, 385, 387, 399, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 932, 935, 936, 941, 945, 947, 949, 952, 960, 962, 967, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 988, 993, 994, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1028, 1029, 1031, 1032, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1055, 1056], "shape_fit_": [912, 913, 914, 915, 916], "shape_img": 591, "sharad": 1047, "sharan": [1046, 1047], "share": [69, 116, 157, 191, 267, 359, 367, 368, 372, 373, 387, 393, 409, 415, 420, 423, 555, 674, 710, 714, 803, 804, 809, 810, 992, 1005, 1021, 1039, 1041, 1047, 1049, 1051, 1054], "shared_yax": 144, "sharedmem": 1047, "sharei": [42, 51, 69, 108, 122, 129, 134, 160, 184, 192, 219, 221, 227, 279, 288, 291, 303, 319, 324, 354, 355, 360], "sharex": [42, 45, 53, 69, 106, 122, 129, 160, 184, 192, 221, 279, 291, 303, 340, 1028], "sharma": [1043, 1045, 1047, 1048, 1050, 1051, 1053, 1056, 1057], "sharmadharmp": 1053, "sharon": [44, 380], "sharova": 1046, "sharp": [42, 192, 1005, 1008], "sharper": 732, "shashank": [1045, 1051], "shaun": 1040, "shawpan": 1045, "shaymernaturalint": 1053, "she": [385, 900, 901, 1049], "shea": [1047, 1048], "shebanov": [1047, 1048], "sheep": 1022, "sheer": [385, 1022], "sheerman": 1039, "sheet": 1041, "sheetscikit": 1025, "shekhar": 1045, "shell": [386, 393, 397, 1023, 1032], "shellyfung": 1054, "shen": 1052, "sheng": 1049, "shengxiduan": 1045, "shenhanc78": 1047, "sheni": 1051, "shenk": 1047, "shenoi": 1046, "sherlock": [634, 988], "sheth": 1047, "shetti": 1052, "shi": [415, 458, 468, 697], "shibata": 1049, "shiebler": 1045, "shield": 399, "shift": [1, 51, 70, 72, 78, 83, 98, 188, 198, 242, 267, 303, 316, 318, 352, 417, 421, 446, 454, 464, 467, 475, 518, 521, 695, 699, 856, 879, 1008, 1019, 1033, 1034, 1039, 1043, 1047], "shifted_gaussian": 266, "shifted_opposite_lof_scor": 856, "shih": [847, 1000], "shiki": 1050, "shilt": 1042, "shinehid": 1052, "shinitski": 1056, "shinnar": 1052, "shinsuk": 1054, "ship": [56, 159, 187, 364, 373, 383, 403, 423, 994, 1039, 1048], "shiqiao": [0, 405, 1039, 1040], "shirsat": 1054, "shiva": [1054, 1055], "shivam": [1047, 1048, 1049], "shivamgargsya": [1046, 1050, 1052], "shivan": 1044, "shivram": 1047, "shiyu": 1048, "shleifer": [1045, 1046], "shmelkov": 1044, "shoaib": 1054, "shoemak": 1050, "shogo": [1054, 1055], "shooter23": [1051, 1052], "shop": 1022, "short": [43, 120, 148, 155, 210, 275, 315, 359, 385, 393, 419, 423, 427, 994, 995, 1001, 1021, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "short_nam": 54, "shortcom": 994, "shortcut": [393, 409, 425], "shorten": [385, 1013, 1052], "shorten_param": 278, "shorter": [42, 181, 265, 397, 415, 420, 456, 463, 569, 703, 1000, 1004, 1032, 1050], "shortest": [1, 73, 390, 394, 694, 952, 995, 1052], "shortest_path": 1052, "shorthand": [92, 399, 416, 473, 567, 568, 871, 872, 1042], "shortlog": 389, "shortname_slic": 54, "shota": 1045, "should": [42, 43, 44, 46, 47, 51, 53, 54, 61, 63, 66, 71, 87, 136, 138, 141, 144, 148, 151, 154, 173, 186, 191, 196, 198, 199, 203, 219, 221, 237, 246, 251, 252, 253, 256, 271, 277, 280, 283, 284, 286, 291, 295, 298, 319, 320, 325, 339, 348, 355, 360, 368, 372, 373, 374, 380, 383, 384, 385, 387, 389, 390, 392, 393, 394, 398, 399, 403, 406, 409, 411, 413, 414, 415, 417, 419, 420, 422, 423, 424, 425, 426, 427, 429, 432, 438, 443, 446, 448, 449, 450, 451, 453, 455, 456, 458, 460, 463, 464, 465, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 502, 509, 514, 515, 522, 527, 529, 530, 533, 538, 539, 540, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 599, 600, 603, 608, 613, 614, 616, 617, 626, 633, 634, 635, 637, 638, 639, 641, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 693, 695, 696, 697, 698, 699, 700, 701, 702, 707, 715, 733, 734, 748, 772, 777, 780, 784, 785, 786, 787, 788, 791, 794, 795, 798, 805, 807, 808, 813, 814, 815, 816, 823, 824, 825, 826, 828, 832, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 867, 868, 870, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 889, 890, 891, 893, 897, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 930, 934, 936, 939, 947, 955, 959, 964, 967, 969, 972, 973, 974, 975, 976, 977, 978, 979, 987, 988, 992, 993, 994, 995, 998, 999, 1001, 1003, 1004, 1005, 1008, 1011, 1012, 1013, 1014, 1018, 1021, 1022, 1028, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "shouldn": [263, 268, 385], "show": [1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 363, 364, 365, 366, 367, 373, 374, 385, 391, 397, 398, 403, 406, 412, 413, 414, 417, 419, 420, 421, 422, 424, 425, 444, 508, 565, 599, 600, 637, 638, 703, 704, 706, 707, 708, 719, 812, 829, 852, 870, 922, 923, 924, 987, 990, 992, 993, 995, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1013, 1018, 1027, 1028, 1032, 1041, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057], "show_top10": 380, "show_vers": [1, 372, 383, 385, 393, 403, 1047], "show_weight": 923, "show_with_diff": 127, "showcas": [136, 139, 144, 148, 151, 152, 154, 188, 387], "shown": [61, 82, 91, 119, 136, 140, 144, 151, 184, 190, 192, 203, 209, 217, 237, 244, 246, 251, 256, 264, 277, 280, 283, 286, 295, 303, 314, 315, 318, 319, 320, 337, 355, 359, 360, 385, 390, 400, 413, 415, 416, 419, 420, 421, 423, 425, 444, 466, 638, 704, 706, 707, 708, 719, 806, 820, 922, 924, 993, 994, 995, 998, 1001, 1008, 1012, 1013, 1014, 1032, 1043, 1048, 1049, 1050, 1053], "shown_imag": 240, "shrankhla": 1054, "shreesha": [1055, 1056], "shreya": 1049, "shrink": [62, 114, 124, 152, 192, 203, 214, 217, 223, 239, 266, 318, 355, 420, 565, 566, 682, 684, 857, 867, 868, 912, 913, 914, 915, 916, 1001, 1013, 1030], "shrink_threshold": [309, 857, 1001, 1039, 1051], "shrinkag": [1, 68, 109, 111, 114, 131, 153, 188, 309, 428, 475, 476, 479, 480, 481, 482, 483, 485, 486, 487, 545, 549, 555, 567, 568, 806, 994, 1008, 1019, 1020, 1034, 1039, 1043, 1044, 1046], "shrinkage_": [110, 111, 479, 481], "shrinkage_coeffici": 486, "shrunk": [1, 110, 131, 318, 325, 333, 428, 479, 481, 482, 485, 486, 487, 555, 891, 992, 1012, 1033, 1034], "shrunk_cov": [428, 485, 487], "shrunk_cov_scor": 131, "shrunk_covari": [1, 417, 1056], "shrunkcovari": [1, 110, 131, 417, 475, 476, 479, 480, 481], "shrunken": [857, 1039], "shu": [1040, 1043, 1047], "shuangchi": [1053, 1054], "shubernetskii": 1041, "shubh": 1050, "shubhal": 1056, "shubham": [1046, 1049, 1057], "shubhanshu": 1051, "shubhraneel": 1053, "shuckle16": 1045, "shuffl": [1, 48, 51, 53, 57, 58, 60, 63, 67, 82, 94, 95, 124, 144, 145, 147, 154, 159, 187, 203, 227, 228, 233, 246, 278, 282, 283, 290, 298, 325, 337, 338, 339, 340, 350, 359, 360, 368, 380, 394, 399, 410, 475, 480, 494, 495, 497, 498, 501, 503, 509, 517, 518, 519, 520, 521, 525, 528, 530, 537, 543, 545, 546, 552, 553, 559, 560, 561, 562, 570, 571, 573, 574, 608, 611, 613, 664, 665, 672, 673, 674, 678, 680, 682, 683, 684, 693, 806, 808, 809, 810, 811, 812, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 867, 868, 891, 910, 911, 912, 915, 946, 947, 967, 969, 993, 994, 999, 1006, 1012, 1013, 1027, 1032, 1034, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "shuffle_param": 355, "shuffled_arrai": 972, "shufflesplit": [1, 272, 279, 355, 419, 808, 814, 816, 826, 836, 1027, 1039, 1040, 1042, 1044, 1045], "shuhei": 1052, "shuhua": 1051, "shutil": [88, 105, 416], "shuttl": 360, "shuzh": 1049, "shwartz": [672, 673, 994, 1012], "shwed": 1047, "shyam": 1052, "si": 103, "siam": [415, 419, 458, 466, 468, 541, 547], "siang": 1042, "siavash": 1052, "siavrez": 1053, "sibsp": [193, 332], "sid": 1046, "siddharth": [1046, 1050], "siddiqui": 1057, "side": [42, 63, 93, 151, 212, 223, 237, 241, 249, 271, 318, 352, 359, 368, 380, 397, 413, 416, 419, 420, 423, 432, 438, 521, 994, 995, 998, 1000, 1013, 1048], "sidhpura": 1054, "siebert": 1047, "sierra": [537, 543], "sievert": 1049, "siftikha": 1047, "sig": 125, "sigh": 359, "sigkdd": [379, 380, 517, 682, 891, 1008, 1010], "sigma": [52, 80, 81, 88, 112, 131, 151, 275, 277, 412, 417, 420, 422, 620, 655, 992, 994, 996, 1000, 1003, 1031], "sigma2": [540, 547], "sigma_": [417, 650, 651, 1052, 1056], "sigma_0": [178, 179, 184, 425, 620], "sigma_0_bound": [184, 620], "sigma_i": [1000, 1008], "sigma_k": [420, 992], "sigmod": [415, 456, 463, 856, 1004], "sigmoid": [1, 60, 61, 62, 63, 377, 422, 443, 458, 541, 567, 626, 645, 649, 771, 780, 783, 867, 868, 912, 913, 914, 915, 916, 1003, 1013, 1034, 1052, 1056], "sigmoid_kernel": [1, 771, 996], "sign": [74, 111, 117, 125, 128, 140, 203, 267, 313, 355, 385, 415, 420, 423, 550, 588, 595, 612, 641, 642, 664, 665, 672, 674, 680, 681, 682, 683, 741, 748, 910, 914, 945, 947, 963, 994, 998, 1003, 1008, 1012, 1013, 1031, 1039, 1043, 1048, 1052, 1054, 1057], "signal": [1, 10, 52, 113, 124, 125, 126, 133, 149, 151, 175, 180, 181, 188, 190, 197, 198, 204, 205, 207, 208, 213, 214, 218, 220, 268, 330, 415, 417, 423, 424, 425, 428, 481, 509, 527, 532, 537, 540, 543, 547, 551, 552, 631, 650, 651, 652, 653, 658, 659, 669, 670, 678, 690, 691, 692, 791, 827, 836, 884, 994, 998, 1015, 1019, 1022, 1026, 1033, 1034], "signatur": [253, 359, 360, 380, 494, 495, 563, 564, 570, 571, 600, 616, 617, 665, 679, 681, 717, 748, 812, 829, 832, 834, 837, 883, 958, 987, 1046, 1052, 1056], "signif": [44, 990, 1028], "signifi": [387, 415, 587, 817, 1003], "signific": [1, 42, 89, 144, 151, 168, 169, 171, 188, 223, 237, 269, 277, 297, 298, 322, 359, 368, 379, 380, 397, 415, 418, 419, 422, 510, 538, 540, 555, 556, 633, 664, 665, 672, 673, 674, 682, 683, 684, 825, 835, 910, 912, 913, 914, 915, 916, 997, 998, 1001, 1019, 1039, 1041, 1042, 1043, 1047], "significantli": [42, 60, 61, 63, 71, 110, 111, 138, 144, 149, 151, 154, 173, 191, 192, 193, 219, 223, 227, 235, 237, 271, 277, 298, 328, 329, 360, 361, 368, 373, 389, 415, 420, 422, 423, 428, 475, 480, 485, 486, 544, 546, 553, 564, 571, 652, 653, 658, 659, 666, 667, 668, 669, 690, 698, 850, 851, 990, 994, 995, 1001, 1006, 1013, 1039, 1041, 1042, 1046, 1047, 1052, 1053, 1054], "sijaranamu": 1045, "silenc": 253, "silent": [253, 423, 587, 866, 1008, 1044, 1045, 1047, 1048, 1052, 1053], "silhouett": [1, 57, 70, 72, 83, 91, 92, 188, 360, 385, 453, 518, 798, 799, 1019, 1039, 1043], "silhouette_avg": 94, "silhouette_sampl": [1, 94, 799, 1043, 1045, 1047, 1055], "silhouette_scor": [1, 72, 83, 92, 94, 360, 385, 415, 1039, 1043, 1045, 1047, 1049, 1053], "silicon": 383, "silk": 1053, "sillanp\u00e4\u00e4": 1039, "silva": [413, 694, 995, 1050, 1052, 1057], "silverman": [855, 1054], "silvermann": 421, "silverthorn": 1039, "silvestrin": 1056, "sim": [420, 1030], "sim4n6": 1054, "simd": [399, 1054], "similar": [1, 42, 43, 45, 50, 54, 57, 61, 62, 69, 71, 83, 85, 91, 94, 108, 117, 124, 128, 138, 151, 172, 175, 182, 190, 191, 192, 193, 203, 219, 221, 233, 239, 241, 242, 243, 246, 252, 253, 268, 271, 274, 277, 280, 283, 284, 285, 295, 297, 298, 318, 330, 347, 352, 355, 360, 361, 368, 372, 377, 379, 381, 384, 385, 387, 390, 391, 393, 394, 397, 399, 409, 412, 413, 415, 418, 419, 420, 422, 423, 424, 425, 426, 446, 449, 450, 456, 458, 460, 461, 509, 514, 515, 542, 588, 595, 596, 597, 616, 683, 698, 701, 709, 711, 721, 725, 731, 734, 735, 737, 740, 744, 746, 761, 766, 767, 792, 798, 799, 802, 803, 804, 832, 837, 882, 903, 906, 910, 911, 912, 913, 931, 987, 990, 991, 993, 994, 995, 997, 999, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1023, 1031, 1034, 1039, 1043, 1044, 1045, 1047, 1051, 1052], "similarli": [42, 50, 71, 89, 122, 155, 192, 194, 203, 208, 219, 247, 256, 271, 277, 313, 318, 333, 335, 348, 368, 373, 381, 383, 387, 390, 399, 409, 411, 412, 418, 419, 423, 735, 736, 744, 789, 790, 793, 828, 993, 995, 996, 998, 1005, 1012, 1013, 1015, 1023, 1027, 1047, 1053, 1055], "simmon": 1022, "simon": [994, 1022, 1042, 1043, 1052, 1053, 1054, 1055], "simona": [1050, 1051, 1052], "simonamaggio": [1050, 1051, 1052], "simoncw": 1049, "simonpl": 1044, "simpl": [1, 12, 36, 42, 63, 89, 104, 108, 110, 116, 117, 124, 144, 149, 182, 188, 192, 203, 220, 236, 259, 278, 295, 299, 302, 311, 331, 344, 359, 361, 364, 368, 383, 385, 387, 388, 389, 390, 392, 397, 398, 399, 400, 406, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 429, 436, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 468, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 520, 528, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 792, 794, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 954, 990, 992, 993, 994, 995, 997, 998, 1001, 1008, 1010, 1012, 1014, 1018, 1019, 1022, 1023, 1032, 1036, 1039], "simplefilt": 409, "simpleimput": [1, 104, 159, 186, 187, 193, 248, 258, 260, 328, 331, 368, 399, 633, 634, 635, 988, 1008, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "simpleimputersimpleimput": [104, 159, 193, 248, 258, 328, 331], "simplepipelin": 253, "simpler": [237, 348, 372, 384, 415, 420, 994, 999, 1030, 1044], "simplest": [87, 419, 995, 1030, 1031], "simplex": [62, 676, 803, 885], "simpli": [73, 117, 157, 175, 183, 243, 254, 256, 286, 311, 329, 330, 372, 380, 385, 387, 390, 397, 399, 417, 418, 419, 420, 422, 423, 491, 701, 768, 771, 877, 949, 990, 998, 999, 1000, 1001, 1012, 1024, 1032, 1046, 1047, 1048], "simplic": [42, 52, 66, 203, 352, 359, 361, 399, 421, 1001, 1002, 1003, 1013], "simplif": [381, 384, 390, 1039, 1045], "simplifi": [42, 104, 207, 253, 348, 384, 386, 390, 415, 418, 521, 568, 869, 870, 998, 1000, 1008], "simplist": [219, 423], "simul": [111, 126, 154, 191, 213, 254, 277, 1022], "simultan": [57, 89, 125, 281, 285, 333, 355, 366, 377, 412, 415, 987, 998, 999, 1014, 1022, 1046], "sin": [42, 52, 56, 73, 125, 139, 150, 151, 156, 158, 168, 175, 181, 182, 184, 198, 199, 203, 213, 220, 225, 241, 252, 268, 310, 319, 328, 334, 354, 365, 366, 425, 522, 621, 705, 770, 1031], "sin_transform": 42, "sina": [319, 1052], "sinayev": 1041, "sinc": [0, 42, 43, 49, 51, 61, 69, 71, 83, 87, 89, 100, 103, 104, 105, 125, 148, 164, 170, 173, 175, 180, 191, 192, 194, 196, 201, 219, 221, 223, 236, 247, 251, 252, 253, 264, 267, 271, 273, 277, 279, 280, 286, 287, 291, 295, 297, 298, 300, 301, 324, 330, 331, 342, 345, 348, 355, 359, 360, 361, 368, 373, 380, 383, 385, 386, 387, 389, 390, 393, 397, 398, 399, 403, 406, 409, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 432, 443, 447, 451, 452, 456, 459, 462, 475, 488, 489, 490, 491, 502, 533, 542, 543, 544, 545, 546, 552, 553, 555, 556, 557, 558, 559, 561, 563, 565, 567, 568, 569, 570, 573, 575, 594, 595, 597, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 638, 639, 644, 657, 661, 664, 665, 672, 674, 679, 680, 681, 682, 683, 685, 698, 713, 715, 741, 748, 756, 757, 788, 795, 805, 806, 809, 810, 820, 828, 831, 832, 833, 834, 838, 839, 840, 841, 845, 846, 847, 848, 849, 852, 857, 860, 867, 868, 870, 875, 900, 901, 905, 906, 910, 912, 915, 918, 920, 947, 955, 987, 990, 991, 992, 994, 995, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1012, 1013, 1014, 1022, 1023, 1032, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "sinclert": 1047, "sind": 423, "sine": [1, 42, 175, 180, 181, 188, 213, 225, 261, 262, 263, 264, 266, 267, 365, 381, 621, 803, 804, 997, 1014, 1019], "singer": [295, 672, 673, 741, 994, 998, 1012, 1013], "singh": [1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "singl": [1, 29, 30, 69, 73, 82, 86, 87, 89, 92, 95, 96, 105, 126, 137, 138, 139, 147, 148, 158, 173, 175, 181, 186, 188, 192, 194, 196, 203, 219, 221, 223, 257, 259, 267, 271, 273, 286, 295, 315, 331, 333, 348, 359, 360, 361, 364, 366, 368, 372, 373, 379, 380, 385, 390, 392, 393, 394, 397, 398, 399, 406, 413, 414, 416, 418, 419, 420, 422, 423, 424, 440, 443, 446, 447, 451, 452, 453, 455, 460, 470, 472, 473, 499, 500, 502, 512, 515, 540, 559, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 588, 598, 605, 606, 608, 612, 633, 638, 640, 649, 672, 673, 679, 682, 683, 684, 696, 698, 700, 716, 717, 727, 728, 729, 730, 731, 742, 743, 744, 747, 780, 791, 803, 804, 806, 809, 810, 820, 827, 828, 832, 833, 835, 836, 839, 847, 850, 851, 855, 867, 868, 869, 879, 880, 883, 884, 885, 890, 891, 905, 906, 918, 919, 920, 921, 926, 962, 985, 987, 993, 994, 995, 998, 999, 1001, 1003, 1005, 1006, 1008, 1012, 1013, 1014, 1017, 1019, 1022, 1023, 1030, 1032, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "single_prior": 184, "single_source_shortest_path_length": [1, 394], "singleton": [373, 814, 933, 1052, 1055], "singular": [1, 124, 394, 412, 415, 418, 457, 459, 488, 489, 490, 491, 527, 530, 540, 544, 546, 547, 550, 553, 555, 556, 663, 678, 679, 680, 693, 947, 994, 995, 997, 1033, 1034, 1045, 1046, 1057], "singular_": 663, "singular_values_": [540, 547, 550, 1046], "sinha": [1047, 1056, 1057], "sinhrk": [1043, 1044], "sink": [647, 990], "sinoisoid": 151, "sinusoid": [125, 139, 151, 203, 252, 651, 991, 1031], "sio": 409, "siola": [1054, 1055], "sip\u0151cz": [1049, 1050, 1051, 1055], "siqi": 1053, "siqueira": 1049, "sir": 382, "sister": 1017, "site": [383, 385, 388, 393, 403, 422, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 1022, 1047], "situat": [61, 78, 91, 105, 190, 191, 225, 246, 280, 385, 393, 409, 417, 419, 420, 422, 474, 534, 540, 588, 883, 886, 898, 908, 992, 994, 1000, 1001, 1011, 1014, 1047], "situp": 382, "sivamani": 1049, "sivaprasad": [1042, 1043], "six": [173, 220, 240, 322, 382, 1048], "sixteenth": 1010, "sixth": 380, "size": [36, 41, 42, 43, 44, 46, 49, 50, 51, 52, 60, 63, 66, 68, 71, 73, 74, 76, 78, 80, 81, 86, 88, 89, 91, 92, 94, 95, 96, 100, 101, 106, 110, 111, 112, 113, 114, 116, 117, 122, 124, 125, 126, 127, 128, 131, 133, 141, 150, 151, 154, 155, 156, 169, 175, 177, 178, 181, 182, 188, 190, 192, 193, 198, 199, 200, 201, 205, 209, 214, 217, 220, 221, 222, 225, 232, 233, 239, 244, 246, 249, 250, 251, 252, 253, 255, 256, 264, 270, 273, 275, 277, 279, 280, 282, 283, 284, 295, 304, 305, 306, 313, 316, 319, 320, 321, 322, 325, 328, 331, 333, 334, 338, 342, 344, 346, 347, 348, 355, 357, 359, 360, 361, 363, 372, 373, 374, 380, 381, 385, 390, 394, 397, 398, 399, 403, 406, 412, 413, 415, 417, 419, 420, 423, 425, 426, 428, 450, 451, 452, 454, 455, 456, 463, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 499, 500, 501, 521, 533, 540, 542, 544, 546, 553, 563, 564, 565, 566, 567, 568, 570, 571, 589, 593, 594, 600, 638, 639, 649, 663, 672, 673, 685, 689, 698, 701, 711, 725, 744, 746, 749, 787, 799, 808, 811, 812, 816, 823, 826, 827, 828, 831, 834, 836, 845, 846, 847, 849, 852, 853, 854, 855, 856, 858, 860, 861, 862, 867, 868, 885, 887, 899, 904, 908, 912, 913, 914, 915, 916, 918, 919, 920, 921, 924, 946, 950, 951, 961, 962, 964, 967, 973, 988, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1008, 1010, 1012, 1013, 1014, 1021, 1022, 1026, 1028, 1030, 1031, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1054, 1055], "size_cluster_i": 94, "size_mb": 359, "sizeabl": [823, 826], "skaft": 1053, "skeleton": [1032, 1042], "sketch": [1, 22, 196, 374, 377, 394, 645, 646, 647, 963, 1034, 1051], "skew": [1, 47, 151, 222, 250, 256, 318, 333, 377, 419, 645, 646, 647, 648, 886, 898, 994, 1008, 1034, 1042, 1046, 1055], "skewed": [648, 1046], "skewedchi2sampl": [1, 644, 645, 646, 647, 990, 1046, 1053, 1054], "skf": [264, 419, 825], "skfold": 340, "skforecast": 1017, "skill": 998, "skimag": [80, 81, 379, 1031], "skip": [373, 385, 387, 394, 411, 423, 474, 574, 652, 653, 658, 666, 667, 668, 677, 687, 908, 1032, 1043, 1046, 1049, 1051, 1053, 1055], "skip_complet": 633, "skip_comput": 1049, "skip_parameter_valid": [474, 908, 1055], "skipper": [1042, 1044, 1045], "skiptestwarn": 387, "skl2onnx": 409, "sklear": 386, "sklearn": [1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 378, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 399, 402, 403, 406, 409, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1058], "sklearn2pmml": 1017, "sklearn_api": 0, "sklearn_assume_finit": 372, "sklearn_cache_": 327, "sklearn_enable_debug_cython_direct": 386, "sklearn_fail_no_openmp": 383, "sklearn_graph_cache_": 300, "sklearn_is_fit": [136, 1019], "sklearn_panda": 1017, "sklearn_run_float32_test": 385, "sklearn_site_joblib": 1047, "sklearn_tut_workspac": 1032, "sklearn_warning_as_error": 373, "sklearn_xarrai": 1017, "sklearnex": 403, "skop": [1017, 1034], "skorch": 1017, "sktime": [51, 1017], "sl": 219, "slack": 1012, "slai": 359, "slama": [1049, 1051], "slep": [385, 399], "slep000": 400, "slep009": [1050, 1052, 1053], "slep010": [387, 1050], "slep011": 1018, "slep018": [260, 387, 1054], "slep020": 400, "slice": [1, 42, 51, 54, 147, 154, 228, 241, 244, 251, 306, 309, 330, 331, 344, 380, 386, 387, 394, 416, 470, 473, 499, 500, 514, 552, 645, 780, 784, 787, 926, 950, 951, 969, 1051, 1053, 1057], "slice_": [499, 500, 1054], "sliceabl": 953, "slide": [278, 650, 994, 1016, 1017], "slight": [148, 224, 329, 409, 422, 455, 1049], "slightli": [42, 61, 63, 98, 114, 141, 144, 148, 151, 155, 159, 173, 175, 176, 177, 193, 198, 219, 237, 242, 244, 253, 256, 285, 291, 298, 327, 345, 361, 384, 385, 397, 413, 415, 422, 423, 425, 427, 452, 594, 595, 597, 644, 664, 809, 810, 910, 912, 915, 946, 947, 987, 994, 1008, 1012, 1013, 1048, 1052, 1053, 1055, 1057], "slishak": 1053, "sloan": 0, "slogdet": 945, "slope": [192, 217, 221, 236, 415, 497, 729, 754, 996, 998], "sloppili": 423, "sloth": [49, 311, 380, 504], "slow": [300, 318, 359, 372, 379, 383, 385, 420, 423, 453, 705, 884, 885, 889, 912, 915, 947, 995, 1001, 1018, 1031, 1046], "slower": [105, 127, 144, 148, 186, 252, 286, 361, 399, 422, 423, 424, 452, 457, 459, 544, 546, 553, 561, 562, 563, 564, 569, 570, 571, 572, 594, 595, 597, 637, 638, 639, 649, 665, 678, 680, 693, 698, 710, 838, 842, 843, 991, 995, 996, 997, 999, 1001, 1014, 1032, 1043, 1050], "slowest": [148, 946, 947], "slowli": [397, 399, 550, 947], "slug": 103, "smacof": [1, 696, 1054], "small": [36, 37, 40, 43, 49, 51, 58, 63, 73, 82, 83, 87, 89, 103, 110, 114, 117, 121, 129, 139, 141, 148, 150, 151, 180, 182, 191, 192, 199, 205, 209, 210, 220, 223, 225, 234, 236, 237, 264, 271, 277, 284, 289, 291, 300, 311, 314, 316, 318, 320, 322, 329, 337, 342, 348, 353, 355, 359, 360, 374, 378, 380, 382, 385, 388, 394, 399, 409, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 428, 447, 449, 451, 452, 453, 455, 464, 465, 469, 481, 502, 504, 544, 546, 547, 553, 561, 562, 563, 567, 568, 570, 588, 595, 596, 608, 613, 614, 656, 660, 661, 662, 664, 665, 685, 688, 689, 752, 809, 810, 824, 835, 838, 867, 868, 875, 903, 912, 915, 947, 987, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1011, 1014, 1018, 1022, 1030, 1031, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "smaller": [1, 36, 46, 60, 74, 80, 89, 114, 138, 154, 173, 180, 181, 184, 186, 204, 208, 210, 223, 250, 295, 304, 305, 313, 318, 335, 348, 355, 360, 385, 412, 415, 417, 419, 420, 422, 424, 445, 446, 452, 456, 460, 462, 520, 540, 541, 563, 564, 565, 566, 567, 568, 570, 571, 599, 616, 625, 639, 652, 653, 655, 656, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 678, 680, 688, 689, 698, 715, 803, 809, 810, 856, 859, 883, 884, 902, 903, 910, 918, 919, 920, 921, 947, 992, 994, 995, 997, 998, 999, 1001, 1002, 1004, 1008, 1010, 1012, 1013, 1014, 1018, 1032, 1047, 1052, 1056], "smallest": [112, 113, 219, 298, 335, 363, 380, 415, 417, 424, 533, 547, 636, 660, 661, 662, 688, 689, 696, 700, 701, 806, 809, 810, 820, 825, 880, 927, 1014, 1052], "smallest_ab": 335, "smallest_coef": [114, 533], "smari": [1048, 1049, 1050], "smart": [253, 449, 465, 466, 596], "smartphon": 1022, "smedbergm": 1045, "smedemark": 1049, "smile": [108, 380, 1053], "sminchisescu": [648, 990], "smirnov": 1051, "smith": [1045, 1046, 1047, 1048, 1049, 1051], "sml": [866, 1003], "smo": [910, 911], "smola": [420, 423, 541, 876, 1008, 1013], "smolskii": 1054, "smooth": [42, 80, 81, 88, 173, 180, 212, 220, 235, 324, 348, 382, 400, 415, 421, 422, 425, 454, 455, 543, 544, 545, 552, 563, 564, 565, 566, 570, 571, 572, 596, 597, 625, 628, 682, 845, 846, 847, 849, 887, 891, 899, 918, 919, 920, 921, 994, 1000, 1008, 1012, 1013, 1014, 1032], "smooth_idf": [423, 596, 597], "smoothened_coin": [80, 81], "smoother": [42, 43, 151, 192, 315, 421], "smoothli": 379, "smt": 1055, "smtp": [380, 498], "smujjiga": 1049, "sn": [71, 139, 154, 190, 191, 198, 203, 267, 277], "snake": [331, 333, 588, 891, 1008], "snapshot": [409, 565, 566, 1018], "sne": [50, 188, 238, 239, 240, 241, 243, 298, 520, 531, 698, 1019, 1033, 1034], "snippet": [136, 368, 385, 390, 393, 397, 411, 422, 423, 424, 988, 1008, 1021, 1052], "snowhit": 1050, "snr": 88, "snuderl": 1043, "sny": 50, "snyder": [698, 995], "so": [29, 36, 42, 47, 50, 51, 54, 63, 76, 82, 89, 90, 95, 99, 113, 144, 147, 148, 149, 150, 154, 158, 175, 180, 191, 193, 196, 199, 219, 220, 246, 253, 256, 271, 277, 295, 298, 304, 305, 308, 314, 315, 319, 324, 325, 328, 340, 348, 359, 361, 367, 368, 372, 373, 374, 379, 380, 383, 384, 385, 387, 389, 390, 391, 393, 394, 399, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 502, 514, 515, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 701, 711, 714, 722, 732, 762, 784, 794, 803, 804, 805, 806, 809, 810, 812, 813, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 900, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 947, 964, 973, 987, 988, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1008, 1010, 1011, 1012, 1013, 1017, 1018, 1022, 1030, 1031, 1032, 1039, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056], "soar": 1054, "sobkevich": 1051, "sobolev": 1043, "soc": [56, 380, 1032], "socastro": [1049, 1055], "socg2006": 453, "social": [191, 400, 415, 1022], "societi": [173, 382, 415, 417, 475, 480, 547, 633, 886, 898, 994, 1012], "sodhani": 1045, "soft": [1, 133, 160, 161, 385, 399, 575, 576, 906, 914, 1012, 1022, 1044], "softmax": [422, 567, 664, 665, 994, 1001, 1002], "softw": 994, "softwar": [0, 173, 372, 382, 385, 393, 397, 399, 409, 423, 633, 641, 664, 988, 1022], "soil_typ": 256, "sokalmichen": [456, 463, 705, 784, 785, 786, 1001], "sokalmichenerdist": 705, "sokalsneath": [456, 463, 705, 784, 785, 786, 1001], "sokalsneathdist": 705, "sok\u00f3\u0142": [1056, 1057], "sole": [101, 397, 415], "soledad": 1051, "soler": [0, 405], "solid": [49, 66, 68, 150, 178, 231, 232, 246, 256, 311, 320, 1022], "solntz": 359, "solosil": 1052, "solut": [80, 198, 203, 208, 210, 224, 233, 246, 252, 330, 348, 383, 387, 399, 409, 412, 414, 415, 417, 419, 420, 423, 424, 455, 457, 459, 537, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 616, 652, 654, 656, 658, 660, 661, 662, 664, 666, 668, 670, 671, 672, 673, 674, 675, 678, 680, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 803, 804, 820, 859, 867, 868, 991, 992, 994, 995, 997, 1002, 1004, 1012, 1013, 1016, 1022, 1027, 1030, 1032, 1039, 1042, 1052, 1053, 1054], "solutu": 1047, "solutusimmensu": 1047, "solv": [1, 43, 44, 100, 175, 208, 251, 277, 297, 384, 385, 386, 387, 390, 397, 415, 417, 419, 420, 425, 453, 459, 468, 484, 537, 543, 544, 545, 549, 551, 552, 553, 554, 641, 643, 652, 658, 660, 661, 670, 671, 676, 678, 680, 683, 691, 692, 693, 840, 910, 911, 914, 947, 989, 992, 994, 995, 998, 999, 1012, 1013, 1014, 1016, 1017, 1022, 1025, 1028, 1032, 1045, 1049, 1052], "solvabl": 415, "solver": [53, 65, 68, 69, 80, 100, 188, 197, 208, 210, 211, 212, 219, 221, 227, 234, 235, 237, 313, 314, 315, 316, 325, 334, 335, 359, 391, 397, 399, 403, 411, 415, 427, 458, 468, 477, 478, 484, 508, 539, 541, 546, 547, 550, 553, 555, 652, 653, 654, 658, 659, 664, 665, 666, 667, 668, 669, 672, 674, 675, 676, 678, 680, 682, 686, 687, 690, 693, 694, 695, 697, 699, 701, 794, 820, 836, 841, 844, 867, 868, 912, 913, 914, 915, 916, 992, 995, 998, 999, 1002, 1012, 1013, 1017, 1019, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "solver_": [678, 680], "solver_opt": 676, "somani": 1051, "some": [0, 41, 42, 43, 46, 47, 51, 56, 60, 61, 63, 71, 78, 84, 87, 89, 90, 92, 96, 101, 104, 107, 110, 112, 113, 117, 124, 139, 140, 144, 148, 151, 152, 154, 155, 156, 159, 160, 169, 175, 177, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 198, 200, 202, 203, 207, 208, 209, 213, 214, 219, 220, 223, 227, 228, 233, 236, 237, 239, 241, 246, 250, 253, 256, 263, 264, 265, 270, 271, 272, 277, 278, 279, 280, 283, 285, 291, 295, 297, 301, 304, 309, 314, 315, 318, 323, 328, 329, 330, 331, 332, 333, 334, 335, 344, 345, 347, 348, 355, 357, 359, 360, 361, 367, 368, 372, 373, 374, 378, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 403, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 438, 443, 449, 450, 453, 455, 457, 459, 465, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 502, 505, 514, 515, 521, 529, 530, 539, 540, 542, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 587, 588, 594, 596, 597, 600, 612, 615, 616, 617, 638, 639, 641, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 695, 696, 698, 699, 703, 704, 706, 707, 708, 713, 714, 721, 726, 732, 733, 744, 745, 746, 752, 760, 762, 763, 769, 788, 790, 793, 794, 795, 800, 803, 805, 807, 808, 813, 815, 824, 825, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 930, 931, 955, 987, 988, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1028, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "some_funct": [385, 937], "some_integ": 419, "some_iter": 385, "some_param": 385, "somebodi": 400, "someestim": 384, "somehow": 192, "someon": [385, 389, 399, 1039], "someth": [191, 240, 295, 359, 385, 387, 388, 389, 393, 423, 998, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "sometim": [105, 159, 190, 271, 277, 315, 360, 368, 373, 374, 385, 387, 389, 391, 398, 399, 415, 417, 420, 422, 423, 455, 540, 541, 544, 546, 547, 875, 876, 877, 925, 993, 994, 995, 998, 1003, 1008, 1009, 1013, 1023, 1031, 1036, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055], "somewhat": [355, 368, 374, 385, 387, 420, 422, 912, 915, 994, 1013, 1014], "somewher": [391, 998, 1032], "sommer": 1057, "somya": 1047, "son": [382, 988], "song": 995, "soni": [50, 1049, 1051], "sonni": 1044, "sonniv": [1054, 1055], "sonoiya": 1049, "sonoma": 324, "soon": [113, 399, 1030], "sooner": 1056, "sophist": [988, 1000], "sorbaro": 1044, "sorensen": 420, "soriano": 1048, "sornarajah": 1044, "sorri": 1047, "sorro": 1048, "sorski": [1053, 1054], "sort": [1, 42, 46, 48, 50, 56, 57, 60, 94, 103, 106, 136, 141, 148, 151, 158, 173, 180, 198, 203, 219, 220, 237, 255, 277, 278, 281, 292, 310, 354, 359, 365, 366, 385, 389, 393, 394, 399, 419, 422, 423, 425, 540, 547, 561, 572, 587, 600, 616, 623, 703, 718, 724, 735, 736, 744, 760, 789, 790, 793, 795, 806, 833, 845, 846, 847, 848, 849, 850, 851, 858, 860, 861, 862, 865, 875, 881, 883, 884, 887, 889, 891, 899, 912, 915, 947, 952, 994, 1001, 1004, 1008, 1022, 1032, 1039, 1043, 1049, 1050, 1051, 1053, 1054, 1057], "sort_graph_by_row_valu": [1, 394, 1054], "sort_index": 295, "sort_result": [850, 851, 858, 860, 861, 862, 1051], "sort_valu": [104, 193, 194, 260, 267, 277, 288, 324, 325], "sort_whats_new": 389, "sorted_idx": [152, 327], "sorted_importances_idx": 193, "sortofamudkip": [1054, 1055], "sought": 787, "soumirai": 1049, "sound": [173, 368], "sounder": 1045, "sourav": [1046, 1049], "sourc": [0, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 379, 382, 384, 385, 386, 388, 389, 391, 393, 394, 397, 398, 403, 409, 412, 416, 420, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 995, 1008, 1014, 1017, 1019, 1022, 1031, 1032, 1049, 1053, 1057], "south": [49, 154, 191, 311, 380, 421], "south_y": 191, "sp": [42, 191, 334, 988, 1031], "sp_version": [221, 676], "space": [1, 36, 42, 46, 48, 56, 66, 80, 82, 87, 91, 92, 94, 95, 97, 99, 103, 104, 107, 117, 124, 126, 132, 134, 143, 147, 151, 157, 170, 173, 175, 181, 196, 203, 220, 239, 240, 241, 243, 250, 251, 252, 256, 257, 263, 268, 285, 288, 289, 298, 307, 308, 320, 329, 352, 359, 360, 361, 367, 368, 372, 377, 380, 381, 382, 385, 392, 397, 398, 399, 412, 415, 418, 420, 421, 422, 423, 425, 449, 453, 454, 455, 458, 468, 470, 471, 472, 473, 488, 489, 490, 494, 504, 538, 540, 541, 544, 545, 546, 547, 549, 550, 555, 579, 588, 594, 595, 597, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 638, 639, 644, 646, 647, 648, 649, 694, 695, 696, 698, 699, 700, 702, 705, 806, 809, 810, 812, 820, 829, 840, 850, 851, 858, 859, 860, 861, 870, 875, 876, 882, 887, 902, 903, 904, 923, 951, 990, 991, 992, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1023, 1030, 1032, 1033, 1034, 1039, 1040, 1042, 1047, 1048, 1049, 1053, 1054, 1055], "spacek": 1044, "spain": 324, "spam": [587, 715, 747, 845, 998, 1000, 1022], "span": [51, 89, 110, 151, 251, 271, 274, 380, 415, 423, 555, 642, 806, 809, 998, 1031], "spanish": 1017, "spannbauer": 1051, "sparciti": 360, "spare": [379, 680, 681], "spark": [380, 1018], "sparrai": 1056, "spars": [1, 24, 44, 45, 50, 52, 54, 56, 65, 73, 74, 88, 89, 91, 103, 109, 110, 111, 123, 125, 143, 157, 188, 190, 197, 198, 204, 207, 208, 211, 213, 214, 218, 235, 250, 252, 278, 284, 298, 316, 328, 332, 335, 341, 358, 361, 367, 372, 377, 379, 380, 381, 385, 387, 388, 389, 390, 397, 398, 399, 409, 415, 416, 422, 423, 425, 426, 430, 437, 444, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 463, 465, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 493, 494, 495, 502, 503, 509, 514, 529, 530, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 591, 592, 594, 595, 596, 597, 599, 600, 609, 610, 611, 612, 613, 614, 615, 635, 636, 637, 639, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 718, 719, 720, 735, 736, 737, 740, 744, 745, 746, 760, 761, 766, 767, 769, 770, 772, 773, 774, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 798, 799, 802, 805, 806, 809, 810, 820, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 877, 879, 880, 881, 882, 883, 885, 887, 888, 889, 890, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 928, 929, 930, 931, 936, 944, 947, 948, 951, 952, 953, 961, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 988, 991, 994, 995, 996, 998, 999, 1001, 1011, 1013, 1014, 1018, 1019, 1020, 1030, 1031, 1032, 1033, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "sparse_cg": [359, 678, 680, 693, 994, 1040, 1046, 1048, 1049, 1053, 1055], "sparse_coef_": [652, 658, 666, 668, 1039], "sparse_encod": [1, 548, 656, 657, 658, 659, 660, 661, 662, 669, 670, 671, 688, 689, 690, 691, 692, 1039, 1046, 1047, 1049, 1053], "sparse_encode_parallel": 1039, "sparse_format": [533, 1056], "sparse_func": [1045, 1051], "sparse_input_": 877, "sparse_lasso": 205, "sparse_output": [42, 148, 260, 324, 331, 334, 572, 877, 881, 883, 889, 894, 1008, 1054, 1055], "sparse_output_": [470, 557], "sparse_symmetric_arrai": 984, "sparse_threshold": [192, 470, 473, 1047], "sparsearrai": 1050, "sparsecod": [1, 133, 420, 537, 543, 546, 554, 1046, 1047, 1049, 1051, 1053], "sparsecodingmixin": 1039, "sparsefunc": [1, 394, 973, 974, 975, 976, 977, 978, 979, 1052], "sparsefuncs_fast": [1, 394, 980, 981], "sparsepca": [1, 124, 537, 539, 540, 541, 543, 545, 546, 547, 548, 551, 552, 1039, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1057], "sparser": [89, 198, 210, 420, 477, 484, 545, 549, 994, 1001, 1012], "sparserandomproject": [1, 240, 250, 902, 1010, 1040, 1045, 1053, 1055, 1056], "sparsetool": 1046, "sparsifi": [45, 203, 372, 664, 665, 672, 673, 674, 682, 683, 684, 910, 982, 1041], "sparsiti": [1, 52, 65, 79, 114, 130, 188, 197, 203, 204, 212, 230, 234, 235, 252, 355, 360, 372, 399, 417, 420, 422, 424, 507, 508, 533, 537, 543, 544, 545, 546, 549, 551, 552, 553, 652, 658, 663, 664, 682, 684, 727, 729, 730, 879, 885, 890, 895, 991, 994, 1001, 1008, 1019, 1026, 1031, 1041], "sparsity_en_lr": 210, "sparsity_l1_lr": 210, "sparsity_l2_lr": 210, "sparsity_ratio": 372, "spatial": [81, 83, 89, 194, 203, 236, 315, 380, 399, 415, 426, 450, 452, 456, 458, 463, 685, 698, 766, 769, 784, 785, 786, 787, 798, 799, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 994, 1001, 1008, 1041, 1045, 1052, 1055], "spawn": [372, 397, 806, 820, 831, 832, 833, 1050], "speak": [360, 372, 385, 1012], "spearman": [194, 641, 642, 989], "spearmanr": 194, "spec": [1054, 1055], "speci": [1, 41, 120, 188, 256, 299, 359, 378, 421, 504, 712, 795, 855, 914, 925, 998, 1004, 1019, 1034, 1039], "special": [150, 191, 209, 237, 295, 308, 324, 348, 379, 381, 387, 391, 397, 399, 415, 418, 420, 470, 473, 559, 561, 565, 831, 922, 987, 992, 994, 996, 997, 998, 999, 1001, 1014, 1046, 1049, 1051, 1053], "special_charact": [922, 1014], "species_nam": [49, 311], "specif": [1, 42, 49, 50, 57, 63, 69, 78, 89, 96, 99, 103, 105, 144, 154, 159, 180, 183, 188, 191, 192, 196, 223, 237, 271, 272, 277, 295, 318, 327, 328, 332, 335, 352, 359, 360, 361, 368, 372, 373, 380, 385, 388, 390, 391, 393, 397, 399, 403, 409, 411, 415, 416, 419, 420, 422, 423, 424, 425, 439, 502, 509, 540, 557, 563, 570, 573, 574, 575, 576, 580, 594, 597, 599, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 631, 646, 649, 652, 653, 658, 664, 678, 693, 703, 705, 718, 719, 752, 806, 807, 808, 813, 814, 815, 820, 833, 846, 939, 941, 942, 961, 974, 975, 976, 992, 994, 995, 997, 998, 1000, 1001, 1003, 1005, 1006, 1008, 1012, 1014, 1015, 1016, 1021, 1032, 1039, 1043, 1047, 1048, 1049, 1050, 1053, 1054, 1056], "specifi": [1, 42, 57, 63, 89, 124, 148, 149, 154, 176, 179, 181, 182, 183, 208, 220, 227, 262, 271, 285, 372, 373, 379, 383, 385, 387, 394, 398, 399, 406, 409, 413, 415, 416, 419, 420, 422, 424, 425, 427, 429, 435, 443, 447, 451, 456, 458, 469, 470, 473, 475, 476, 478, 479, 480, 481, 482, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 521, 533, 537, 539, 543, 544, 546, 547, 552, 553, 558, 563, 565, 566, 567, 568, 570, 573, 574, 589, 590, 599, 600, 603, 608, 616, 617, 626, 637, 638, 639, 644, 649, 652, 653, 654, 657, 658, 659, 661, 662, 664, 665, 666, 667, 668, 669, 671, 674, 675, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 693, 697, 704, 706, 708, 715, 717, 735, 736, 744, 748, 760, 777, 785, 786, 789, 790, 793, 806, 808, 809, 810, 812, 813, 815, 819, 820, 823, 828, 829, 830, 831, 832, 833, 834, 835, 837, 841, 844, 845, 846, 848, 849, 850, 851, 855, 860, 883, 884, 885, 888, 889, 891, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 942, 949, 982, 988, 994, 995, 997, 998, 1001, 1005, 1006, 1008, 1011, 1012, 1013, 1027, 1031, 1039, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "spector": 419, "spectral": [1, 52, 55, 70, 78, 80, 83, 89, 103, 188, 240, 241, 339, 341, 359, 360, 361, 385, 423, 455, 457, 458, 459, 468, 475, 476, 477, 478, 479, 480, 481, 482, 494, 517, 519, 597, 694, 695, 696, 697, 698, 701, 725, 801, 1001, 1011, 1019, 1033, 1034, 1039, 1040], "spectral_clust": [1, 80, 100, 1047, 1049, 1051, 1052, 1053, 1054, 1056], "spectral_embed": [1, 399, 995, 1040, 1043, 1045, 1047, 1049, 1052, 1053, 1054, 1056], "spectralbiclust": [1, 412, 459, 1041, 1045, 1046, 1050], "spectralclust": [1, 78, 331, 415, 446, 1001, 1039, 1040, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "spectralcoclust": [1, 56, 58, 412, 457, 1041, 1046, 1050], "spectralembed": [1, 86, 239, 240, 241, 694, 695, 696, 698, 995, 1040, 1045, 1049, 1053, 1054, 1056], "spectrum": [106, 530, 550, 701, 947, 1022, 1028, 1047], "speech": [423, 998], "speed": [80, 81, 91, 103, 127, 136, 144, 187, 192, 205, 208, 212, 256, 298, 329, 338, 359, 361, 374, 385, 388, 394, 397, 399, 411, 413, 415, 420, 422, 423, 426, 449, 450, 453, 454, 455, 456, 458, 463, 465, 466, 467, 468, 537, 538, 616, 633, 638, 639, 640, 645, 652, 653, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 687, 690, 698, 803, 804, 812, 834, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 885, 947, 987, 990, 995, 997, 999, 1012, 1022, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "speedi": 372, "speedup": [334, 372, 420, 422, 656, 660, 663, 1039, 1040, 1041, 1042, 1054], "speer": 1041, "spell": 423, "spend": 423, "spent": [298, 324, 386, 391, 834, 1054], "sperret6": 1057, "sphere": [138, 188, 238, 239, 242, 243, 244, 360, 421, 525, 595, 694, 695, 696, 697, 698, 770, 933, 992, 996, 1001, 1019], "sphere_data": 241, "sphereclust": 1017, "spheric": [69, 91, 116, 155, 241, 264, 266, 267, 311, 381, 770, 803, 804, 994, 997, 1001, 1017], "sphinx": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 373, 389, 399, 403, 408, 1032, 1039, 1046], "sphinxcontrib": [385, 403, 408], "sphinxext": [385, 403, 408], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1039, "spidlen": [698, 995], "spie": [173, 382], "spielman": 1049, "spike": 192, "spikebh": 1053, "spikhalskii": 1044, "spiki": 42, "spin": 393, "spine": [45, 53, 69, 230, 318], "spirit": 420, "spite": 1000, "spline": [1, 188, 197, 198, 292, 303, 522, 523, 524, 678, 871, 885, 889, 1017, 1019, 1052], "spline_": 42, "splines_df": 42, "splinetransform": [1, 42, 220, 256, 330, 885, 1008, 1052, 1054, 1055], "split": [1, 42, 43, 44, 49, 51, 53, 54, 60, 62, 63, 66, 67, 103, 129, 138, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 164, 169, 190, 191, 194, 203, 214, 215, 219, 222, 227, 237, 247, 256, 263, 264, 270, 271, 272, 275, 277, 282, 284, 287, 291, 295, 301, 307, 313, 315, 319, 320, 325, 331, 333, 340, 348, 359, 361, 367, 380, 392, 398, 399, 403, 406, 413, 414, 415, 420, 422, 423, 424, 443, 448, 449, 478, 479, 485, 486, 503, 537, 543, 545, 548, 552, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 594, 595, 597, 600, 608, 653, 657, 659, 661, 667, 669, 671, 679, 681, 701, 710, 711, 723, 737, 743, 763, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 844, 850, 851, 867, 868, 891, 895, 896, 898, 899, 900, 901, 918, 919, 920, 921, 969, 987, 990, 994, 995, 1001, 1004, 1005, 1006, 1008, 1012, 1014, 1018, 1023, 1027, 1028, 1030, 1031, 1032, 1034, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "split0_test_precis": [806, 820], "split0_test_scor": [806, 820, 1045], "split0_train_scor": [806, 820, 1045], "split1_test_scor": [806, 820], "split1_train_scor": [806, 820], "split2_test_scor": 806, "split_cod": 420, "split_sign": [537, 543, 548], "splitter": [42, 253, 333, 334, 399, 406, 419, 443, 478, 570, 571, 573, 574, 600, 608, 653, 657, 659, 661, 665, 667, 669, 671, 679, 681, 806, 808, 809, 810, 811, 812, 820, 821, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 837, 841, 844, 918, 919, 920, 921, 1014, 1018, 1045, 1046, 1047, 1048, 1055, 1056, 1057, 1058], "splot": [263, 268], "splt": 220, "sply88": 1053, "spmatrix": 1056, "spolski": 423, "sport": [56, 380], "spot": [87, 248, 415], "spottabl": 391, "spread": [42, 74, 241, 278, 318, 337, 338, 339, 342, 355, 372, 385, 415, 458, 468, 521, 887, 899, 907, 998], "spring": [42, 51, 192], "springer": [141, 142, 153, 180, 276, 413, 415, 419, 420, 422, 526, 541, 565, 566, 696, 700, 702, 711, 726, 732, 746, 747, 762, 803, 918, 919, 995, 998, 999, 1005, 1014], "sprint": [384, 385, 1039], "spuriou": [348, 393, 1008, 1052, 1053, 1054], "spy": 213, "sq": 775, "sqeuclidean": [72, 456, 463, 784, 785, 786], "sqft": 256, "sql": 379, "sqr": 74, "sqrt": [50, 112, 113, 114, 127, 133, 142, 164, 194, 198, 200, 242, 244, 258, 262, 263, 264, 267, 268, 277, 353, 355, 415, 422, 423, 425, 469, 475, 476, 477, 478, 479, 480, 481, 482, 544, 546, 553, 563, 564, 565, 566, 570, 571, 625, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 705, 737, 769, 770, 775, 890, 903, 918, 919, 920, 921, 990, 994, 995, 998, 1000, 1010, 1053], "squar": [1, 42, 43, 51, 95, 104, 111, 112, 113, 115, 116, 125, 126, 134, 141, 152, 154, 155, 173, 175, 180, 188, 190, 191, 197, 198, 200, 201, 203, 208, 209, 215, 219, 221, 224, 229, 236, 237, 249, 250, 252, 265, 292, 322, 329, 330, 332, 345, 359, 377, 382, 385, 391, 394, 399, 415, 417, 418, 420, 421, 422, 426, 427, 438, 446, 448, 449, 450, 452, 453, 455, 456, 460, 463, 465, 466, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 507, 537, 543, 545, 547, 549, 551, 552, 553, 555, 558, 560, 562, 564, 565, 566, 568, 571, 574, 576, 596, 597, 598, 601, 602, 604, 605, 606, 610, 611, 612, 615, 617, 621, 628, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 688, 689, 691, 692, 693, 694, 696, 698, 700, 702, 715, 727, 728, 729, 730, 756, 757, 764, 765, 769, 775, 776, 791, 796, 797, 836, 843, 844, 852, 853, 856, 857, 858, 860, 861, 868, 871, 890, 910, 911, 913, 915, 916, 917, 919, 921, 945, 971, 984, 989, 991, 992, 1001, 1002, 1006, 1012, 1014, 1019, 1020, 1030, 1031, 1034, 1039, 1042, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "square_dist": 1051, "squared_epsilon_insensit": [673, 682, 684, 911, 994, 1045], "squared_error": [45, 51, 133, 151, 152, 330, 422, 564, 565, 566, 568, 571, 677, 682, 684, 699, 919, 921, 1012, 1014, 1052, 1055, 1056], "squared_hing": [226, 355, 672, 682, 910, 917, 994, 1013], "squared_loss": [397, 1052], "squareform": 194, "squash": [256, 389, 425, 537, 543, 548, 554], "squeez": [108, 181, 182, 256, 298, 318, 1031], "sr": 1022, "sr_color": 243, "sr_err": 243, "sr_lle": 243, "sr_point": 243, "sr_tsne": 243, "srajan": 1047, "sre": 1054, "srebro": 1012, "srep30750": 415, "sri": [677, 994, 1046, 1047], "sridharan": 1044, "sriharsha": [1047, 1048], "srikantan": 994, "srimukh": 1051, "srinath": [1053, 1054], "srinivasan": [1047, 1050], "sripada": 1051, "srivastava": [1042, 1054, 1057], "srivatsan": [1045, 1046, 1049], "srvanrel": 1045, "ss": 419, "sse": 449, "sseg": 1044, "ssrn": [219, 237], "sss": 826, "ssvm": 397, "st": [81, 101, 277, 332, 1042, 1045, 1047], "st30": 342, "st50": 342, "st_pipelin": 341, "sta4273": 650, "stabil": [71, 142, 149, 191, 240, 282, 318, 355, 360, 399, 412, 452, 656, 660, 676, 848, 867, 868, 886, 898, 946, 988, 994, 997, 1008, 1018, 1023, 1039, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "stabilis": 198, "stabl": [42, 63, 184, 191, 213, 217, 221, 298, 328, 355, 360, 383, 385, 389, 391, 394, 399, 403, 419, 423, 427, 477, 478, 484, 539, 547, 661, 678, 680, 693, 698, 730, 758, 946, 947, 994, 1000, 1001, 1008, 1018, 1035, 1039, 1040, 1045, 1050, 1052, 1056], "stack": [1, 13, 108, 137, 148, 162, 186, 188, 219, 248, 303, 367, 384, 393, 397, 399, 421, 470, 472, 473, 502, 521, 568, 571, 573, 574, 618, 633, 634, 636, 659, 679, 707, 831, 833, 871, 875, 883, 884, 890, 972, 988, 1017, 1018, 1019, 1020, 1021, 1034, 1039, 1042, 1046, 1047, 1048, 1049, 1050], "stack_method": [422, 573], "stack_method_": [422, 573, 574], "stacking_regressor": 159, "stackingclassifi": [1, 327, 368, 399, 406, 422, 574, 988, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1058], "stackingregressor": [1, 159, 327, 399, 406, 422, 573, 988, 1049, 1050, 1051, 1052, 1053, 1056, 1058], "stackingregressorinot": 159, "stackoverflow": [390, 393, 397], "stade": 1043, "stage": [0, 45, 62, 105, 138, 143, 149, 152, 271, 383, 389, 399, 411, 415, 422, 454, 559, 560, 565, 566, 567, 568, 594, 595, 597, 608, 995, 1008, 1016, 1047, 1051], "staged_decision_funct": [559, 565, 567], "staged_predict": [138, 149, 152, 422, 559, 560, 565, 566, 567, 568, 1039, 1051], "staged_predict_proba": [150, 153, 559, 565, 567, 1039], "staged_scor": [559, 560], "stagewis": 138, "stagg": 1052, "stai": [42, 51, 62, 71, 133, 191, 360, 384, 385, 389, 399, 400, 1003, 1021, 1045], "stairstep": 284, "stalei": [1048, 1049], "stall": [384, 388], "stallei": 1051, "stan": [848, 1056], "stand": [280, 361, 389, 397, 420, 537, 543, 551, 552, 602, 615, 684, 711, 723, 742, 743, 763, 792, 794, 801, 997, 998, 1004], "standalon": [391, 664, 910], "standard": [1, 49, 50, 51, 57, 62, 67, 69, 89, 95, 103, 104, 106, 112, 113, 117, 125, 138, 141, 143, 144, 145, 146, 147, 155, 159, 173, 175, 180, 182, 184, 191, 198, 204, 208, 217, 219, 228, 239, 240, 241, 251, 256, 267, 271, 272, 275, 276, 277, 278, 280, 318, 323, 346, 359, 372, 373, 377, 378, 379, 381, 382, 383, 385, 387, 388, 390, 391, 394, 397, 399, 403, 409, 411, 415, 417, 418, 419, 423, 425, 452, 474, 478, 494, 502, 507, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 530, 531, 536, 538, 541, 547, 558, 596, 600, 617, 640, 650, 651, 678, 679, 680, 681, 682, 684, 693, 695, 699, 794, 812, 827, 829, 847, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 874, 879, 880, 883, 886, 887, 888, 890, 898, 899, 900, 901, 908, 910, 911, 930, 987, 990, 994, 995, 998, 1000, 1001, 1002, 1004, 1012, 1013, 1018, 1022, 1023, 1028, 1030, 1031, 1032, 1034, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1057], "standard_coef_": 1050, "standard_intercept_": 1050, "standard_norm": [368, 693], "standard_scal": 258, "standard_t": 126, "standardscal": [1, 44, 48, 66, 78, 83, 89, 92, 96, 104, 106, 117, 134, 159, 173, 191, 198, 207, 208, 210, 219, 235, 237, 247, 248, 256, 257, 258, 260, 271, 274, 284, 291, 301, 306, 307, 313, 320, 323, 327, 328, 330, 331, 332, 334, 335, 348, 351, 368, 374, 385, 387, 390, 394, 398, 416, 419, 436, 472, 473, 573, 682, 684, 870, 871, 874, 887, 901, 910, 911, 912, 913, 915, 916, 988, 995, 1002, 1008, 1012, 1013, 1015, 1028, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "standardscalerifittedstandardscal": 260, "standardscalerstandardscal": [104, 159, 191, 247, 248, 257, 258, 260, 271, 284, 291, 328, 331], "standpoint": 84, "stanford": [173, 382, 655, 688, 689, 845, 848, 849, 903, 996], "stanislav": [1054, 1055], "stanlei": [1053, 1054, 1055], "stap": 1047, "stapl": 1043, "star": [69, 122, 162, 385], "stareh": 1050, "start": [0, 42, 45, 48, 50, 51, 57, 62, 87, 92, 98, 101, 107, 117, 127, 143, 149, 151, 170, 173, 180, 182, 192, 196, 199, 200, 208, 219, 220, 221, 227, 237, 239, 243, 251, 253, 265, 271, 277, 285, 298, 331, 333, 338, 359, 367, 368, 372, 373, 374, 378, 385, 386, 387, 389, 390, 391, 397, 399, 403, 412, 415, 419, 420, 424, 425, 446, 448, 456, 460, 462, 544, 616, 623, 638, 651, 659, 665, 672, 673, 674, 682, 683, 684, 696, 700, 787, 788, 795, 803, 804, 806, 809, 810, 820, 852, 853, 854, 856, 858, 866, 952, 982, 987, 994, 997, 1002, 1003, 1012, 1018, 1022, 1023, 1031, 1032, 1042, 1044, 1047, 1049, 1051, 1052, 1053, 1054, 1055], "start_": 46, "start_bodi": 46, "start_d": 46, "start_idx": [50, 242], "start_reut": 46, "start_tim": [45, 48, 56, 145, 146, 149, 159, 175, 208, 240], "start_titl": 46, "start_top": 46, "startstart": 1025, "startswith": [51, 103, 240, 311], "startup": 1022, "stat": [1, 44, 46, 48, 103, 112, 173, 175, 194, 274, 277, 285, 289, 303, 329, 337, 338, 382, 394, 398, 417, 480, 598, 601, 602, 604, 605, 606, 610, 611, 612, 615, 688, 689, 810, 818, 820, 918, 919, 949, 987, 994, 1008, 1028, 1046, 1048, 1052], "state": [36, 87, 91, 103, 105, 112, 154, 221, 250, 258, 263, 271, 283, 329, 368, 373, 374, 385, 387, 391, 393, 397, 399, 400, 414, 422, 423, 428, 446, 449, 453, 455, 460, 465, 481, 550, 595, 685, 809, 810, 818, 820, 822, 850, 851, 857, 905, 906, 933, 987, 988, 994, 1000, 1003, 1010, 1017, 1018, 1022, 1041, 1043, 1045, 1047, 1049, 1052, 1055], "state_to_print": 386, "stateless": [103, 360, 374, 387, 399, 423, 588, 589, 595, 644, 873, 874, 882, 1008, 1055], "statement": [191, 387, 390, 393, 397, 399, 420, 1032], "static": [385, 387, 391, 393, 652, 653, 658, 659, 666, 667, 668, 669], "station": 180, "stationari": [179, 425, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631], "statist": [1, 46, 51, 113, 138, 141, 142, 153, 164, 165, 166, 168, 172, 173, 188, 190, 191, 192, 193, 203, 207, 223, 269, 271, 274, 276, 279, 286, 295, 297, 318, 324, 329, 368, 378, 380, 382, 385, 391, 399, 413, 414, 415, 416, 417, 419, 420, 422, 424, 440, 475, 480, 499, 500, 522, 523, 524, 526, 528, 547, 559, 565, 566, 568, 610, 611, 612, 615, 633, 636, 640, 641, 650, 655, 662, 696, 700, 702, 716, 722, 727, 729, 730, 737, 749, 794, 806, 822, 840, 867, 868, 886, 887, 888, 890, 895, 898, 899, 901, 915, 918, 919, 973, 987, 988, 992, 994, 995, 997, 998, 999, 1000, 1005, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1019, 1024, 1030, 1031, 1044, 1047, 1050, 1051, 1053, 1054, 1057], "statistician": [399, 890], "statistics_": 636, "statisticyearmonthhourweekdaytempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64f64f64": 51, "statlearnspars": [727, 729, 730], "statlib": 380, "statnikov": 998, "statsmodel": [994, 1017], "statu": [136, 184, 334, 379, 389, 403, 502, 850, 851, 1057], "statweb": [655, 688, 689], "staub": 1045, "staubda": 1042, "std": [42, 49, 50, 51, 71, 80, 84, 88, 95, 100, 111, 113, 114, 125, 126, 127, 145, 147, 148, 154, 159, 184, 186, 187, 191, 199, 204, 228, 250, 275, 276, 277, 279, 280, 282, 285, 287, 291, 292, 324, 340, 351, 360, 368, 399, 415, 419, 422, 521, 612, 615, 835, 890, 901, 1008, 1027, 1031, 1047, 1051], "std_": [281, 1044], "std_auc": 287, "std_display_styl": [252, 279, 812, 829], "std_error": 164, "std_fit_tim": [144, 300, 806, 820], "std_i": 191, "std_precis": 275, "std_predict": 182, "std_predictions_gpr": 175, "std_recal": 275, "std_scaler": 335, "std_score": [360, 1052], "std_score_tim": [144, 278, 806, 820], "std_test_precis": 275, "std_test_recal": 275, "std_test_scor": [104, 106, 144, 164, 172, 276, 277, 278, 285, 300, 478, 600, 806, 820, 1045, 1052], "std_time": 1045, "std_tpr": 287, "std_train_scor": [806, 820, 1045], "std_y_pr": 180, "stderr": [50, 839], "stdin": [393, 1032], "stdout": [46, 124, 227, 839, 859, 867, 868], "stds_california": 187, "stds_diabet": 187, "steadi": [905, 906], "steelblu": [125, 126, 161], "steep": [1, 176, 192, 286, 287, 415, 419, 425, 456, 462], "stef": [633, 988], "stefan": [1042, 1043, 1047, 1049], "stefani": [0, 1052, 1054, 1055, 1056, 1057, 1058], "stefanini": 1053, "stefano": 1041, "stehl": [1053, 1054], "stein": 1045, "steinbach": [415, 1054, 1056], "steinfurt": [1049, 1051], "steingold": [1046, 1047], "steinlei": [415, 711], "steinley2004": 711, "stella": [415, 458, 468], "stellalin7": 1054, "stem": [141, 149, 193, 218, 268, 419, 423, 990, 1000], "step": [57, 62, 68, 76, 88, 89, 92, 101, 103, 104, 105, 106, 107, 113, 117, 127, 131, 138, 143, 147, 148, 149, 159, 170, 171, 172, 177, 180, 191, 193, 219, 227, 237, 247, 248, 251, 257, 260, 268, 271, 275, 278, 284, 286, 291, 298, 300, 301, 306, 313, 316, 320, 323, 324, 328, 331, 342, 344, 348, 360, 361, 363, 368, 372, 380, 383, 384, 385, 387, 389, 390, 393, 397, 399, 409, 412, 413, 415, 417, 418, 420, 422, 423, 424, 448, 453, 455, 542, 543, 544, 545, 552, 569, 594, 595, 597, 599, 600, 603, 612, 633, 650, 654, 672, 673, 675, 682, 684, 685, 686, 700, 706, 803, 804, 806, 809, 810, 820, 841, 842, 843, 844, 866, 867, 868, 870, 871, 873, 910, 911, 912, 913, 915, 916, 946, 947, 969, 973, 988, 994, 997, 1002, 1003, 1008, 1012, 1014, 1015, 1017, 1021, 1028, 1032, 1039, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1055, 1057], "stephan": [714, 1042, 1048, 1049, 1051], "stephani": 1050, "stephen": [1022, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052], "stepwis": [154, 641, 660, 661, 662, 688, 689, 994], "stern": [794, 998], "steve": [1041, 1043, 1047, 1052, 1054], "steven": [1041, 1042, 1044, 1046, 1047, 1052, 1054, 1055, 1057], "steward": 1046, "stewart": [1044, 1049, 1052, 1054, 1057], "stick": [47, 803, 997], "stijn": 1046, "stikhin": 1049, "still": [42, 51, 63, 67, 78, 87, 89, 91, 96, 114, 120, 128, 146, 151, 154, 159, 175, 181, 190, 191, 193, 194, 198, 203, 219, 221, 237, 251, 280, 286, 318, 329, 330, 333, 359, 360, 368, 374, 379, 384, 385, 387, 389, 390, 391, 393, 397, 399, 415, 419, 422, 423, 426, 446, 450, 460, 480, 502, 633, 638, 641, 643, 664, 665, 723, 762, 784, 787, 798, 799, 809, 810, 823, 826, 888, 890, 910, 928, 987, 988, 992, 994, 997, 998, 1001, 1004, 1006, 1013, 1014, 1016, 1018, 1021, 1022, 1039, 1041, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1057], "stine": [1047, 1048], "stochast": [1, 45, 92, 149, 150, 153, 165, 188, 196, 197, 207, 241, 243, 246, 251, 304, 306, 307, 312, 315, 330, 347, 415, 420, 422, 468, 494, 502, 508, 509, 510, 520, 528, 542, 550, 565, 566, 610, 633, 637, 645, 664, 665, 674, 678, 680, 682, 683, 684, 685, 693, 694, 695, 696, 698, 836, 859, 866, 867, 868, 871, 880, 914, 946, 947, 972, 987, 1001, 1002, 1004, 1019, 1020, 1033, 1034, 1039, 1040, 1043, 1044, 1046, 1048, 1050], "stochastic_gradi": [1041, 1042, 1048], "stock": [41, 80, 188, 239, 240, 415, 417, 460, 478, 695, 1019, 1026], "stogbauer": [613, 614], "stojanov": [1053, 1054], "stolbunov": 1044, "stone": [385, 918, 919, 1014], "stop": [42, 45, 50, 54, 78, 96, 137, 138, 144, 180, 182, 188, 192, 197, 207, 221, 322, 328, 385, 387, 393, 394, 399, 415, 420, 422, 424, 446, 447, 449, 451, 453, 455, 458, 460, 468, 469, 477, 478, 484, 488, 489, 490, 496, 502, 514, 515, 538, 542, 543, 544, 545, 546, 549, 551, 552, 553, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 594, 595, 597, 608, 623, 633, 650, 651, 652, 654, 655, 658, 662, 664, 665, 672, 673, 674, 675, 677, 682, 683, 684, 686, 697, 698, 701, 720, 756, 803, 804, 836, 867, 868, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 952, 972, 987, 994, 1002, 1003, 1013, 1014, 1018, 1019, 1020, 1022, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056], "stop_n_inli": [677, 994], "stop_prob": 677, "stop_scor": [677, 994], "stop_word": [53, 56, 359, 360, 423, 594, 595, 597], "stop_words_": 1057, "stopiter": 1051, "stopword": [495, 1032], "storag": [0, 361, 399, 664, 665, 672, 673, 674, 682, 683, 684, 910, 1001, 1013, 1042, 1047], "storch": 1048, "store": [1, 67, 87, 88, 103, 105, 113, 120, 170, 183, 196, 205, 208, 223, 240, 247, 257, 267, 271, 282, 286, 337, 361, 367, 372, 379, 380, 385, 387, 392, 393, 394, 397, 399, 409, 411, 416, 418, 420, 422, 423, 425, 426, 444, 446, 450, 452, 456, 463, 470, 473, 475, 476, 479, 480, 481, 482, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 514, 540, 541, 547, 555, 556, 561, 562, 563, 564, 569, 570, 571, 572, 575, 576, 595, 616, 617, 633, 637, 638, 641, 655, 656, 660, 666, 667, 668, 669, 672, 673, 679, 681, 682, 683, 684, 694, 695, 696, 698, 703, 704, 706, 707, 708, 787, 803, 804, 806, 812, 820, 828, 829, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 865, 881, 888, 890, 891, 905, 906, 907, 930, 931, 955, 956, 969, 972, 984, 988, 990, 994, 1001, 1010, 1013, 1014, 1017, 1023, 1032, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "store_cent": [452, 1056], "store_covari": [69, 555, 556, 1044, 1046], "store_cv_result": [271, 679, 681, 828, 1057], "store_cv_valu": [679, 681, 1047, 1050, 1057], "store_precis": [68, 111, 475, 476, 479, 480, 481, 482], "stori": [190, 277, 295, 380, 997], "stork": 992, "stott": 1047, "stoyanov": [1047, 1048], "str": [46, 48, 51, 92, 94, 132, 134, 147, 171, 237, 256, 277, 289, 298, 308, 346, 359, 379, 380, 394, 423, 426, 427, 431, 436, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 463, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 623, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 698, 702, 703, 704, 705, 706, 708, 713, 715, 717, 719, 733, 735, 736, 738, 739, 744, 748, 777, 780, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 820, 824, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 926, 929, 930, 931, 934, 937, 939, 943, 954, 955, 956, 958, 961, 982, 983, 986, 1054], "strai": 1003, "straight": [129, 209, 215, 217, 274, 352, 372], "straightforward": [319, 384, 414, 420, 1022], "straka": 1051, "strateg": 400, "strategi": [1, 29, 42, 51, 86, 88, 92, 95, 104, 148, 153, 154, 159, 165, 170, 172, 186, 187, 188, 193, 203, 208, 219, 227, 237, 248, 256, 258, 269, 271, 276, 278, 280, 281, 282, 284, 285, 286, 287, 289, 291, 297, 312, 315, 317, 319, 320, 324, 325, 327, 328, 331, 361, 371, 387, 391, 398, 399, 409, 414, 419, 422, 423, 424, 427, 443, 444, 445, 453, 458, 468, 478, 508, 510, 518, 520, 528, 539, 544, 557, 558, 567, 568, 570, 571, 573, 574, 594, 595, 597, 598, 600, 608, 633, 634, 636, 640, 651, 653, 657, 659, 661, 667, 669, 671, 679, 681, 697, 701, 710, 717, 719, 738, 761, 763, 801, 806, 809, 810, 812, 820, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 867, 868, 875, 880, 891, 905, 910, 912, 915, 918, 919, 920, 921, 969, 987, 988, 997, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1012, 1013, 1014, 1017, 1019, 1027, 1032, 1034, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057], "stratif": [807, 808, 814, 815, 824, 825, 826, 969, 1048], "stratifi": [1, 43, 129, 145, 155, 169, 193, 234, 247, 256, 260, 271, 272, 277, 280, 286, 301, 306, 307, 327, 387, 399, 414, 557, 565, 573, 574, 608, 665, 672, 674, 682, 805, 806, 809, 810, 812, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 844, 859, 867, 969, 998, 1001, 1027, 1044, 1045, 1046, 1048, 1049, 1052], "stratifiedgroupkfold": [1, 272, 1052], "stratifiedkfold": [1, 172, 264, 272, 283, 287, 340, 419, 443, 573, 574, 600, 608, 665, 679, 806, 807, 809, 810, 811, 812, 814, 816, 820, 824, 826, 829, 830, 831, 832, 833, 834, 835, 837, 891, 1027, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1052], "stratifiedshufflesplit": [1, 272, 348, 419, 1027, 1039, 1040, 1045, 1046, 1052], "stream": [46, 415, 420, 423, 468, 595, 879, 880, 890, 990, 1017, 1047, 1050], "stream_reuters_docu": 46, "streamhandl": 1050, "streamlin": 994, "street": [159, 173, 382], "strehl": 415, "strength": [50, 159, 182, 219, 223, 278, 327, 372, 418, 422, 452, 573, 574, 649, 654, 655, 658, 664, 665, 675, 678, 679, 680, 681, 682, 684, 686, 693, 789, 867, 868, 910, 911, 915, 916, 987, 994, 1001, 1004, 1012, 1013], "stress": [696, 700, 995, 1054], "stress_": 696, "stretch": [243, 266], "stretched_gaussian": 266, "strickland": 1045, "strict": [368, 383, 399, 411, 420, 509, 541, 594, 595, 597, 994, 1039, 1048, 1051, 1057], "stricter": 186, "strictli": [63, 219, 237, 253, 318, 333, 360, 390, 399, 413, 418, 420, 423, 514, 515, 541, 547, 550, 567, 568, 594, 597, 648, 676, 677, 679, 681, 701, 706, 745, 772, 806, 809, 810, 816, 820, 833, 859, 886, 898, 902, 903, 905, 906, 910, 911, 915, 916, 945, 987, 989, 994, 998, 1008, 1012, 1040, 1050, 1055], "striebel": [1045, 1046], "strife": 995, "strike": [149, 192, 223], "string": [1, 46, 104, 147, 183, 237, 248, 271, 281, 330, 335, 361, 372, 379, 380, 385, 386, 387, 391, 399, 416, 419, 422, 423, 424, 426, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 495, 496, 502, 511, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 623, 626, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 705, 715, 717, 725, 738, 768, 771, 777, 780, 784, 785, 786, 787, 798, 799, 803, 804, 806, 809, 810, 812, 820, 828, 829, 833, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 928, 930, 931, 938, 939, 940, 962, 982, 983, 987, 988, 998, 1011, 1013, 1023, 1030, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "strip": [53, 237, 360, 372, 379, 380, 502], "strip_acc": [594, 595, 597], "strip_accents_unicod": 1049, "stripe": 321, "stripplot": 191, "strive": [384, 400, 1022], "strong": [31, 42, 51, 88, 175, 188, 190, 191, 197, 212, 216, 217, 223, 224, 225, 252, 297, 325, 355, 413, 420, 422, 530, 655, 678, 991, 992, 994, 995, 997, 1005, 1013, 1019, 1030], "stronger": [278, 649, 658, 664, 665, 678, 679, 680, 681, 682, 684, 693], "strongest": [54, 212], "strongli": [61, 63, 114, 117, 127, 148, 152, 191, 201, 234, 253, 283, 359, 385, 402, 403, 413, 422, 664, 742, 801, 994, 995, 1034, 1048, 1055], "stroudsburg": [907, 1011], "strubel": 1052, "struct": [383, 399, 1042], "structur": [0, 1, 41, 46, 47, 51, 52, 53, 54, 57, 58, 70, 74, 75, 77, 78, 80, 86, 87, 88, 89, 90, 96, 100, 114, 134, 136, 155, 174, 188, 239, 240, 243, 248, 253, 268, 272, 283, 303, 323, 328, 331, 336, 348, 352, 362, 363, 364, 372, 380, 382, 385, 387, 390, 397, 399, 400, 403, 412, 415, 417, 418, 419, 420, 422, 423, 424, 425, 447, 448, 451, 452, 456, 457, 458, 459, 460, 463, 468, 469, 478, 502, 509, 510, 514, 517, 519, 520, 527, 536, 541, 547, 550, 569, 616, 617, 618, 622, 623, 624, 695, 702, 715, 719, 836, 858, 863, 890, 902, 903, 906, 918, 919, 920, 921, 924, 946, 947, 969, 972, 995, 997, 998, 1001, 1003, 1004, 1008, 1011, 1014, 1017, 1018, 1019, 1026, 1031, 1032, 1039, 1040, 1042, 1043, 1045, 1049], "struggl": [384, 400, 415], "stuck": [95, 698, 995], "student": [0, 126, 277, 995, 1018, 1022], "studi": [42, 63, 94, 151, 219, 237, 280, 283, 284, 291, 359, 380, 382, 419, 424, 702, 714, 764, 765, 835, 996, 998, 1012, 1023], "studio": [383, 1022], "study_135": 379, "study_14": 379, "study_34": 379, "study_98": 379, "study_99": 379, "stuff": 1022, "stump": [140, 422, 565, 1050], "stupp": [1045, 1046], "stupperich": 1051, "sturla": 1041, "style": [60, 62, 113, 151, 208, 227, 237, 281, 385, 392, 415, 423, 449, 453, 465, 706, 812, 829, 930, 931, 943, 1039, 1042, 1053], "st\u00e9fan": 386, "st\u00e9phan": 1049, "st\u00e9phane": [1048, 1049, 1053, 1054], "su": [727, 729, 730], "sub": [46, 71, 82, 87, 89, 91, 94, 103, 133, 253, 255, 262, 329, 337, 338, 345, 348, 356, 380, 385, 387, 391, 399, 416, 422, 423, 443, 449, 450, 453, 455, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 594, 596, 597, 600, 603, 616, 617, 633, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 869, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 956, 994, 998, 1012, 1032, 1049, 1053, 1055, 1056], "sub_sampl": 542, "subclass": [136, 387, 425, 580, 964, 1044, 1047, 1052, 1056], "subclust": [415, 448], "subcluster_centers_": [76, 448], "subcluster_labels_": 448, "subcompon": [124, 420], "subdirectori": 385, "subdivid": [380, 425], "subestim": 387, "subestimator__c": 387, "subestimator__class_weight": 387, "subestimator__du": 387, "subestimator__fit_intercept": 387, "subestimator__intercept_sc": 387, "subestimator__l1_ratio": 387, "subestimator__max_it": 387, "subestimator__multi_class": 387, "subestimator__n_job": 387, "subestimator__penalti": 387, "subestimator__random_st": 387, "subestimator__solv": 387, "subestimator__tol": 387, "subestimator__verbos": 387, "subestimator__warm_start": 387, "subexpress": 51, "subfold": [1, 383, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 509, 1052], "subgraph": 412, "subhash": 1053, "subhodeep": [1039, 1040, 1041], "subi": [1048, 1049, 1054], "subject": [15, 103, 156, 268, 280, 359, 380, 385, 387, 389, 397, 399, 400, 413, 417, 419, 420, 501, 664, 665, 691, 828, 873, 968, 989, 994, 1013, 1016, 1032, 1048, 1049, 1052, 1054], "subject_body_extractor": 103, "subject_body_transform": 103, "subjectbodi": 103, "subjectbodyextractor": 103, "sublinear": [420, 596, 597], "sublinear_tf": [359, 420, 423, 596, 597], "submatric": 412, "submatrix": [412, 430, 457, 459], "submit": [382, 383, 384, 387, 388, 389, 390, 393, 399, 400, 403], "submitt": 384, "submodel": 419, "submodul": [385, 389, 391, 990, 996, 1039], "subobject": [429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 809, 810, 820, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921], "suboptim": [419, 706, 708, 788, 795, 1001, 1047, 1055], "subpackag": [385, 389, 1043, 1048], "subplot": [42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 65, 66, 67, 69, 73, 77, 78, 84, 85, 87, 88, 89, 90, 91, 94, 96, 99, 100, 106, 108, 111, 112, 113, 114, 116, 117, 120, 121, 122, 124, 125, 126, 127, 129, 133, 134, 138, 140, 141, 143, 144, 145, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 168, 177, 179, 184, 186, 187, 191, 192, 194, 196, 199, 202, 210, 211, 213, 214, 217, 218, 219, 220, 221, 223, 227, 232, 233, 235, 237, 239, 240, 243, 244, 246, 247, 249, 251, 252, 254, 255, 256, 257, 262, 263, 264, 265, 267, 268, 271, 272, 273, 274, 277, 279, 280, 282, 283, 284, 286, 287, 288, 290, 291, 292, 297, 298, 300, 301, 302, 303, 306, 307, 309, 310, 311, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 331, 332, 340, 342, 345, 346, 347, 348, 352, 354, 355, 356, 357, 359, 360, 361, 363, 364, 392, 1028], "subplot_kw": [239, 302], "subplot_spec": 392, "subplot_titl": 144, "subplots_adjust": [44, 45, 52, 53, 73, 76, 78, 79, 84, 85, 88, 96, 98, 112, 114, 121, 122, 126, 127, 133, 140, 141, 159, 191, 218, 219, 234, 237, 246, 254, 262, 264, 265, 268, 272, 288, 290, 303, 311, 313, 316, 320, 329, 338, 345, 348, 1028], "subpopul": [236, 685, 994], "subproblem": 1044, "subrahmanyam": [1039, 1042], "subramaniam": [1054, 1055, 1056], "subramaniyan": 1051, "subramanyam": 1046, "subrat": 1051, "subrat93": 1051, "subsampl": [133, 150, 153, 192, 236, 273, 325, 329, 464, 565, 566, 567, 568, 569, 638, 685, 707, 809, 810, 836, 875, 887, 899, 926, 936, 990, 994, 1018, 1039, 1049, 1053, 1055, 1056, 1057], "subscrib": 1037, "subscript": [373, 1052], "subsect": [24, 373, 385], "subsembl": 1017, "subsequ": [45, 67, 92, 108, 127, 138, 170, 207, 221, 279, 282, 298, 300, 348, 368, 385, 387, 391, 399, 411, 415, 416, 422, 425, 443, 502, 514, 559, 560, 565, 567, 568, 672, 674, 682, 809, 810, 838, 839, 842, 845, 846, 847, 848, 849, 867, 885, 889, 988, 997, 999, 1048, 1049, 1053, 1055, 1057], "subset": [1, 45, 56, 57, 62, 63, 67, 103, 104, 112, 113, 145, 147, 148, 149, 164, 170, 173, 192, 194, 208, 220, 234, 235, 236, 237, 249, 251, 255, 256, 271, 275, 278, 280, 286, 287, 289, 295, 323, 324, 329, 337, 341, 359, 360, 361, 368, 380, 385, 393, 397, 399, 412, 413, 415, 416, 419, 422, 423, 425, 432, 443, 455, 470, 472, 473, 475, 494, 495, 498, 499, 503, 514, 555, 556, 557, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 608, 616, 635, 645, 646, 647, 648, 657, 661, 664, 672, 673, 674, 677, 680, 681, 682, 683, 684, 685, 703, 709, 710, 719, 722, 724, 737, 740, 761, 763, 799, 802, 805, 808, 828, 834, 836, 838, 839, 840, 841, 845, 846, 847, 848, 849, 852, 857, 860, 867, 876, 905, 906, 910, 912, 915, 918, 920, 926, 967, 987, 994, 998, 999, 1009, 1011, 1013, 1014, 1032, 1042, 1047, 1048, 1050, 1052, 1057], "subset_featur": 104, "subset_label": 237, "subset_mask": 293, "subsidi": 191, "subspac": [131, 418, 422, 458, 521, 561, 562, 697, 701, 947, 992, 1001, 1004, 1010, 1022, 1031], "substanti": [164, 300, 304, 305, 319, 385, 856, 1004, 1043, 1046], "substitut": [406, 982, 1018, 1045], "subtl": [357, 368, 997, 1018], "subtleti": 1034, "subtract": [180, 191, 256, 418, 420, 449, 453, 465, 540, 650, 651, 1046, 1056], "subtre": [563, 564, 565, 566, 570, 571, 918, 919, 920, 921, 1014], "subwindow": 1014, "succe": [131, 154, 203, 291], "succeed": 385, "success": [1, 84, 168, 188, 269, 281, 284, 285, 354, 368, 410, 415, 419, 420, 422, 521, 570, 585, 806, 809, 810, 827, 915, 1001, 1019, 1022, 1027, 1031, 1034, 1051], "successfulli": [42, 52, 322, 384, 389, 409, 415, 423, 1012], "successor": [456, 462, 1014, 1017], "suchak": 1052, "sudo": [383, 403], "suen": 1002, "suffer": [117, 146, 193, 298, 318, 360, 372, 415, 422, 550, 769, 993, 994, 998, 1001, 1031, 1048], "suffic": [91, 92, 387, 1032], "suffici": [1, 63, 89, 159, 227, 292, 348, 372, 399, 415, 424, 538, 663, 688, 689, 825, 826, 999, 1001, 1018, 1048, 1054, 1055], "suffix": [389, 403, 833, 998, 1049], "suganthan": 382, "sugar": [173, 382], "suggest": [112, 127, 141, 145, 191, 194, 277, 348, 372, 384, 385, 392, 399, 419, 420, 422, 475, 480, 571, 651, 835, 992, 994, 995, 1003, 1006, 1013, 1032, 1043, 1050, 1053, 1056], "suh": 1047, "suha": 1057, "suit": [57, 124, 157, 191, 219, 220, 246, 267, 330, 331, 333, 359, 373, 385, 387, 390, 391, 393, 397, 403, 409, 418, 420, 422, 456, 458, 509, 683, 847, 891, 941, 987, 990, 995, 998, 1000, 1001, 1012, 1017, 1018, 1022, 1025, 1046, 1053], "suitabl": [142, 151, 203, 205, 223, 314, 361, 379, 380, 391, 394, 409, 415, 420, 423, 458, 468, 474, 493, 511, 514, 633, 641, 845, 846, 849, 884, 885, 908, 963, 967, 992, 994, 997, 1008, 1010, 1012, 1017, 1032, 1053, 1054], "sullivan": [1042, 1043, 1044], "sultan": 1053, "sum": [1, 29, 46, 54, 56, 62, 95, 113, 122, 127, 133, 150, 151, 169, 173, 183, 191, 200, 206, 215, 219, 223, 234, 237, 240, 242, 256, 271, 286, 298, 305, 308, 331, 335, 341, 352, 353, 355, 359, 360, 361, 367, 382, 391, 399, 412, 413, 415, 417, 418, 420, 421, 422, 423, 425, 438, 448, 449, 453, 455, 465, 470, 471, 488, 489, 490, 521, 526, 529, 537, 540, 542, 543, 547, 550, 551, 552, 555, 556, 558, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 575, 576, 596, 597, 617, 619, 629, 631, 641, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 682, 683, 684, 685, 687, 690, 696, 700, 702, 705, 715, 716, 725, 732, 747, 762, 764, 765, 769, 794, 838, 839, 843, 844, 853, 857, 861, 868, 869, 889, 890, 910, 911, 913, 916, 918, 919, 920, 921, 949, 973, 979, 984, 994, 998, 999, 1000, 1001, 1013, 1014, 1030, 1042, 1043, 1045, 1047, 1048, 1050, 1055, 1056], "sum_": [277, 286, 355, 412, 413, 415, 420, 421, 422, 544, 546, 553, 702, 761, 992, 994, 995, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1012, 1013, 1014], "sum_gradi": 422, "sum_h": 1003, "sum_hessian": 422, "sum_i": [330, 422, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 989, 990, 994, 996, 998, 1003], "sum_j": [652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 994, 998, 1003], "sum_k": [422, 555, 1014], "sum_m": 422, "sum_n": [284, 713, 998], "sum_n_compon": [470, 869], "sum_over_featur": [1039, 1054], "sum_weight": 979, "sumit": 1053, "summar": [219, 268, 284, 286, 361, 385, 387, 402, 422, 527, 664, 700, 712, 713, 994, 995, 998, 1004, 1034], "summari": [51, 173, 331, 367, 368, 382, 397, 698, 719, 794, 923, 996, 999, 1017, 1032], "summaris": [248, 328], "summat": [1000, 1002], "summer": [0, 42, 51, 82, 180, 1039], "sun": [42, 154, 192, 1047, 1052, 1053], "sundai": 42, "sundaramahalingam": 1056, "sung": 1050, "sunglok": 994, "sunita": 789, "sunitha": 1051, "sunmi": 1050, "super": [56, 61, 63, 387, 423, 1047], "superflu": 420, "superimpos": 420, "superior": 422, "superposit": 203, "supersed": [384, 1044], "superset": [419, 827, 998], "supervis": [1, 26, 31, 33, 37, 56, 61, 63, 66, 71, 83, 88, 92, 117, 132, 143, 154, 165, 166, 177, 240, 251, 254, 264, 277, 307, 329, 340, 345, 348, 352, 360, 361, 372, 380, 387, 398, 399, 413, 415, 418, 419, 420, 422, 423, 425, 443, 445, 470, 494, 509, 510, 559, 594, 596, 599, 600, 640, 682, 735, 807, 808, 811, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 830, 831, 832, 833, 835, 836, 859, 869, 870, 874, 884, 891, 905, 906, 907, 915, 992, 995, 998, 1000, 1001, 1004, 1008, 1009, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1023, 1024, 1026, 1032, 1034, 1039, 1045, 1051], "supp": 393, "suppli": [154, 397, 415, 652, 930, 931, 1001, 1022, 1043, 1045, 1047, 1052], "support": [1, 38, 42, 44, 45, 46, 47, 48, 51, 60, 65, 67, 80, 103, 104, 105, 137, 142, 158, 159, 169, 170, 180, 192, 220, 229, 230, 231, 237, 251, 252, 253, 259, 270, 275, 282, 284, 295, 298, 316, 318, 322, 331, 335, 337, 338, 341, 342, 344, 345, 348, 349, 350, 351, 352, 353, 355, 372, 373, 374, 379, 383, 385, 387, 389, 390, 391, 392, 394, 395, 398, 399, 400, 409, 415, 419, 420, 423, 424, 425, 443, 446, 456, 458, 459, 470, 471, 472, 473, 475, 480, 493, 502, 518, 544, 546, 547, 550, 553, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 619, 620, 621, 623, 625, 626, 628, 629, 631, 633, 637, 638, 639, 649, 651, 663, 664, 665, 676, 677, 678, 680, 681, 682, 683, 684, 693, 696, 700, 705, 713, 719, 735, 736, 744, 749, 784, 785, 786, 789, 790, 793, 794, 806, 809, 810, 812, 820, 828, 833, 834, 842, 843, 848, 850, 851, 854, 856, 862, 870, 871, 875, 881, 883, 884, 886, 890, 898, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 926, 936, 941, 942, 986, 987, 988, 990, 991, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1012, 1017, 1018, 1019, 1020, 1022, 1023, 1026, 1028, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "support_": [252, 354, 475, 480, 599, 600, 608, 912, 913, 914, 915, 916, 1013], "support_fract": [47, 475, 480], "support_reweight": [475, 480], "support_vector": [346, 352], "support_vector_indic": 346, "support_vectors_": [45, 48, 349, 352, 353, 912, 913, 914, 915, 916, 1013], "suppos": [253, 280, 337, 372, 373, 387, 391, 417, 422, 423, 424, 563, 567, 570, 664, 665, 672, 674, 680, 681, 682, 748, 856, 910, 912, 915, 918, 920, 936, 1002, 1048, 1050, 1056], "suppress": [191, 372, 393, 698, 1001, 1046], "suptitl": [42, 43, 51, 53, 67, 68, 69, 73, 74, 84, 87, 91, 94, 101, 108, 124, 127, 134, 138, 147, 148, 156, 159, 184, 191, 192, 194, 213, 218, 234, 235, 239, 240, 241, 255, 265, 271, 273, 291, 316, 318, 320, 327, 329, 337, 338, 342, 354, 355, 364], "surac": 1049, "sure": [1, 62, 90, 212, 225, 253, 254, 271, 368, 372, 373, 379, 383, 384, 385, 386, 387, 389, 390, 393, 397, 403, 413, 416, 423, 499, 529, 655, 930, 931, 941, 984, 988, 995, 1012, 1017, 1018, 1046, 1047, 1049, 1054], "suresh": 1053, "surf": 192, "surfac": [66, 128, 137, 138, 139, 140, 142, 160, 188, 202, 211, 228, 283, 301, 344, 345, 362, 363, 365, 366, 367, 422, 510, 559, 563, 570, 637, 770, 918, 924, 992, 997, 1012, 1013, 1014, 1019], "surface_": 637, "surgan12": 1048, "surpass": [138, 352, 867, 868], "surplu": 419, "surpris": [87, 192, 271, 383, 994, 1017, 1041], "surprisingli": [237, 380, 423], "surrend": 56, "surrog": [271, 1022], "surround": [254, 385, 856, 1004], "survei": [191, 418], "surviv": [104, 193, 987, 1017], "surya": [1052, 1053], "suscept": 409, "susik": 1043, "suspect": 42, "suspici": 380, "sustain": 0, "sutherland": [1041, 1043, 1044, 1046, 1047, 1048, 1049], "sutiono": 1050, "suzuki": [1050, 1051], "sv": 1013, "sv_ind": 252, "sv_ratio": 252, "svc": [1, 44, 61, 63, 65, 66, 67, 103, 107, 149, 160, 166, 176, 188, 196, 210, 223, 251, 254, 258, 270, 275, 277, 279, 282, 283, 284, 287, 288, 293, 320, 323, 327, 329, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 356, 357, 359, 372, 387, 391, 399, 413, 416, 419, 422, 441, 442, 443, 474, 521, 561, 703, 704, 706, 708, 806, 823, 837, 839, 870, 907, 908, 910, 912, 913, 916, 986, 987, 993, 996, 998, 999, 1008, 1019, 1023, 1027, 1028, 1030, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "svc__c": [320, 870], "svc_disp": [259, 327, 1036], "svc_isoton": 61, "svc_sigmoid": 61, "svcifittedsvc": 259, "svcsvc": [258, 275, 277, 329], "svd": [1, 69, 131, 157, 240, 360, 394, 411, 418, 427, 457, 459, 488, 489, 491, 527, 538, 539, 540, 541, 545, 546, 547, 550, 552, 555, 556, 670, 678, 679, 680, 691, 692, 693, 869, 947, 992, 1032, 1041, 1045, 1046, 1052, 1054, 1057], "svd__n_compon": 869, "svd_lapack_driv": 947, "svd_method": [56, 457, 459, 538, 1042], "svd_solver": [44, 103, 124, 131, 334, 335, 411, 420, 541, 547, 1028, 1045, 1057], "sven": [1053, 1054], "svg": [0, 1025], "svm": [1, 41, 45, 47, 48, 49, 53, 61, 63, 65, 66, 67, 103, 105, 107, 124, 147, 157, 160, 163, 165, 167, 172, 173, 177, 179, 188, 197, 200, 202, 211, 212, 228, 229, 230, 231, 232, 246, 252, 254, 255, 258, 259, 270, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 287, 288, 292, 293, 304, 309, 310, 313, 320, 321, 327, 329, 336, 340, 341, 343, 346, 354, 355, 359, 372, 380, 387, 391, 399, 416, 419, 420, 422, 424, 441, 442, 443, 500, 510, 518, 521, 547, 561, 562, 569, 573, 574, 583, 599, 600, 605, 606, 611, 637, 645, 649, 674, 682, 683, 684, 695, 703, 704, 706, 708, 719, 741, 748, 767, 806, 820, 826, 832, 833, 836, 838, 839, 856, 870, 871, 883, 885, 890, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 986, 987, 990, 993, 995, 996, 998, 999, 1003, 1011, 1013, 1015, 1019, 1020, 1023, 1026, 1027, 1028, 1032, 1034, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046], "svm1": 416, "svm2": 416, "svm__c": 107, "svm_weight": 169, "svm_weights_select": 169, "svmlight": [1, 378, 493, 514, 515, 1034, 1039, 1040, 1046, 1048], "svmlight_file_test": 515, "svmlight_file_train": 515, "svmsgd": 1012, "svr": [1, 45, 48, 188, 245, 327, 343, 372, 441, 442, 562, 573, 574, 599, 600, 649, 684, 806, 812, 911, 913, 915, 991, 1019, 1025, 1030, 1039, 1041, 1043, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "svr_fit": 252, "svr_lin": 354, "svr_poli": 354, "svr_predict": 252, "svr_rbf": 354, "svrg": 1017, "sw": 298, "sw_test": [60, 328], "sw_train": [60, 328], "swap": [1, 415, 420, 722, 742, 977, 978, 1039], "swapnil": 1053, "swart": 54, "sweep": 866, "swier": [1050, 1051], "swiss": [1, 101, 188, 238, 239, 244, 415, 536, 698, 699, 1019, 1053], "switch": [371, 684, 710, 723, 743, 761, 763, 801, 850, 851, 946, 947, 998, 1001, 1034, 1039], "swpeas": 1052, "swu": 1043, "sy": [46, 50, 56, 227, 250, 298, 341, 361, 380, 397, 623], "syd": 1054, "sydnei": 0, "syhw": [1040, 1041], "sylvain": [0, 375, 1043, 1048, 1049, 1050, 1051, 1052, 1053], "sylvainlan": [1047, 1048, 1049, 1050, 1051], "symbol": [50, 361, 373, 387, 391, 417, 423, 505, 588, 594, 595, 597, 922, 924, 1017], "symbol_dict": 50, "symlink": 389, "symlognorm": [198, 203], "symmetr": [1, 78, 151, 194, 221, 399, 413, 415, 458, 468, 469, 480, 525, 533, 535, 696, 700, 701, 710, 711, 721, 722, 723, 728, 730, 734, 742, 743, 761, 763, 769, 791, 801, 803, 804, 984, 987, 994, 998, 1001, 1055], "symmetri": [173, 382, 705, 883, 886, 898, 996], "symmetric_arrai": 984, "symposium": [173, 382, 415, 466], "symptomat": 271, "sync": 389, "synchron": [385, 423], "syndrom": 379, "synnaev": 316, "synonym": [399, 852, 853, 854, 860, 861, 862], "synonymi": 420, "syntax": [373, 385, 390, 393, 416, 474, 869, 870, 908, 987, 1023, 1050, 1052], "synthet": [42, 52, 61, 63, 66, 69, 71, 76, 83, 145, 151, 157, 175, 180, 182, 192, 209, 221, 236, 313, 320, 355, 368, 372, 378, 388, 400, 415, 417, 424, 664, 665, 910, 911, 917, 992, 1030, 1031, 1045], "synthetic_feature_weight": [664, 665], "syonekura": 1047, "sysconfig": 383, "system": [43, 129, 203, 277, 284, 335, 368, 372, 373, 374, 380, 382, 385, 386, 387, 388, 393, 397, 403, 409, 415, 420, 422, 426, 450, 477, 478, 484, 541, 545, 549, 556, 645, 651, 656, 657, 660, 661, 662, 688, 689, 732, 762, 775, 803, 859, 905, 906, 994, 998, 1001, 1010, 1017, 1018, 1022, 1032, 1039, 1047, 1048], "systemat": [42, 154, 277, 387, 718, 734, 998, 1054], "sysuresh": 1053, "szabo": [1041, 1042], "szepieniec": 1045, "szlam": [420, 946, 947], "szpak": [1046, 1049], "szyma\u0144ski": [1047, 1048], "s\u00e1nchez": 1051, "s\u00e3o": 1057, "s\u00e4ger": [1042, 1045], "s\u00e9bastien": [1022, 1045, 1047], "s\u00f6nke": 1049, "s\u00f8ren": 1056, "s\u0142apek": 1050, "t": [1, 15, 46, 49, 50, 54, 62, 63, 69, 73, 74, 76, 77, 78, 86, 88, 92, 103, 105, 110, 111, 112, 114, 116, 122, 125, 126, 131, 133, 134, 138, 141, 142, 150, 151, 152, 153, 154, 158, 159, 173, 176, 178, 179, 180, 183, 184, 188, 191, 192, 193, 194, 198, 200, 203, 206, 213, 216, 217, 218, 219, 220, 237, 238, 240, 241, 242, 243, 253, 254, 263, 266, 268, 271, 276, 277, 291, 297, 298, 310, 311, 315, 327, 330, 331, 333, 337, 338, 340, 344, 345, 348, 349, 353, 359, 360, 361, 366, 367, 368, 372, 373, 379, 380, 382, 385, 387, 389, 391, 393, 398, 399, 403, 406, 409, 413, 415, 416, 418, 419, 420, 422, 423, 424, 428, 432, 438, 440, 443, 453, 454, 456, 462, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 501, 502, 519, 520, 521, 525, 526, 531, 536, 538, 540, 547, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 596, 597, 600, 613, 614, 616, 617, 633, 634, 636, 637, 638, 639, 641, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 701, 702, 710, 716, 722, 723, 732, 742, 743, 761, 762, 763, 773, 794, 795, 800, 801, 805, 806, 809, 810, 820, 828, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 857, 860, 861, 866, 867, 868, 876, 879, 880, 881, 883, 884, 890, 891, 903, 905, 906, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 947, 948, 962, 987, 990, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1013, 1014, 1019, 1023, 1030, 1031, 1032, 1033, 1034, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "t0": [44, 46, 49, 53, 54, 73, 76, 78, 80, 82, 84, 86, 92, 96, 98, 127, 203, 205, 234, 235, 236, 241, 244, 246, 250, 252, 278, 334, 359, 360, 361, 682, 683, 684, 1028], "t1": [78, 80, 96, 234, 241, 244, 246], "t15h": 1046, "t_": [672, 673, 674, 682, 683, 684, 867, 868, 1012], "t_0": 1012, "t_batch": 98, "t_i": 1000, "t_k": [422, 998, 1014], "t_m": 1014, "t_mini_batch": [76, 98], "t_p": 284, "t_post": 277, "t_sne": [239, 1047], "t_stat": 277, "t_stat_uncorrect": 277, "t_t": 1014, "taa": 183, "taac": 183, "tab": [45, 47, 69, 87, 112, 138, 154, 156, 159, 175, 180, 182, 207, 208, 271, 328, 334, 416, 1046], "tab10": [251, 267], "tab20b": 42, "tabea": [1054, 1055], "tabibian": 1045, "tabl": [92, 237, 277, 385, 386, 389, 394, 415, 423, 588, 664, 686, 806, 820, 847, 963, 994, 998, 999, 1004, 1017, 1040], "tabular": [42, 51, 192, 387, 422, 1006], "tacit": 399, "tacitli": 1041, "tackl": [152, 277, 373, 385, 415, 847, 1000, 1022, 1026], "tadej": [1040, 1041], "tae": 1051, "taehoon": [1046, 1047], "taemin": 994, "tag": [46, 83, 104, 246, 339, 379, 384, 388, 389, 393, 397, 399, 411, 423, 432, 438, 502, 838, 1018, 1021, 1044, 1048, 1049, 1050, 1053, 1054, 1055, 1056], "tahar": 1046, "tahiri": 1051, "taifi": 1045, "tail": [51, 151, 187, 191, 219, 221, 277, 318, 527, 530, 994], "tail_strength": [335, 527, 530], "takanori": 1047, "take": [1, 43, 46, 51, 57, 65, 80, 87, 89, 91, 100, 108, 112, 122, 124, 138, 147, 175, 177, 180, 184, 191, 196, 202, 223, 227, 228, 243, 253, 264, 265, 271, 272, 278, 282, 286, 287, 297, 298, 301, 304, 305, 306, 308, 309, 318, 331, 335, 340, 344, 345, 348, 357, 360, 361, 364, 372, 373, 374, 379, 380, 383, 385, 387, 390, 391, 392, 393, 397, 399, 400, 406, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 427, 443, 449, 452, 453, 455, 456, 458, 463, 464, 465, 467, 469, 475, 525, 539, 544, 545, 546, 552, 553, 587, 598, 601, 602, 604, 605, 606, 616, 617, 622, 626, 627, 630, 638, 649, 655, 677, 679, 680, 681, 682, 685, 697, 698, 705, 711, 713, 715, 725, 735, 736, 744, 748, 749, 762, 777, 780, 784, 785, 786, 787, 789, 790, 793, 794, 806, 807, 811, 812, 820, 824, 834, 852, 853, 854, 856, 858, 859, 860, 861, 862, 874, 884, 905, 906, 910, 911, 912, 913, 914, 915, 916, 934, 968, 987, 990, 994, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1008, 1013, 1014, 1022, 1023, 1027, 1029, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "takeawai": 297, "taken": [36, 42, 45, 66, 76, 87, 89, 153, 173, 180, 191, 250, 251, 265, 283, 295, 320, 380, 382, 384, 385, 389, 399, 415, 419, 423, 427, 446, 539, 567, 568, 589, 590, 652, 653, 656, 658, 659, 660, 664, 665, 666, 667, 668, 669, 683, 685, 687, 690, 701, 883, 884, 904, 907, 913, 914, 957, 998, 1000, 1008, 1010, 1045, 1048, 1051, 1052], "takeshi": [1047, 1052, 1053, 1054], "takeuchi": 380, "takingitcasu": [1047, 1048], "talbot": 282, "talgatomarov": 1050, "talk": [56, 103, 278, 359, 360, 361, 380, 399, 409, 1022, 1024, 1032], "talli": 421, "tallott": 1047, "talwalkar": 987, "tamara": [380, 1056], "tamer": 1054, "tami": 92, "tamir": [1050, 1053], "tamirlan1": 1050, "tamper": 46, "tampermonkei": 393, "tan": [867, 868, 1002, 1046], "tandfonlin": 415, "tang": [382, 1049, 1050, 1051], "tangent": [239, 352, 695, 699, 996, 1033, 1034], "tanh": [352, 783, 867, 868, 996, 1013], "tanjina": 1056, "tann": [1047, 1052], "tao": [1055, 1056], "tar": [46, 389], "taranjeet": 1045, "tarashanski": 1056, "tarbal": [389, 1054], "tarcusx": 1047, "tarfil": 46, "target": [1, 42, 44, 51, 54, 56, 62, 65, 67, 68, 79, 86, 102, 104, 106, 107, 117, 120, 128, 130, 132, 139, 146, 147, 148, 149, 151, 152, 154, 156, 158, 159, 160, 162, 166, 168, 171, 173, 175, 177, 180, 181, 187, 188, 190, 191, 192, 193, 198, 202, 203, 212, 215, 219, 221, 223, 224, 227, 228, 240, 247, 249, 250, 251, 252, 255, 256, 257, 264, 270, 271, 273, 275, 278, 280, 282, 283, 286, 287, 291, 295, 297, 298, 301, 306, 309, 310, 314, 317, 318, 328, 329, 331, 333, 337, 338, 341, 342, 344, 345, 348, 352, 354, 359, 360, 364, 365, 366, 367, 368, 372, 374, 377, 378, 379, 380, 381, 382, 387, 389, 390, 393, 394, 398, 402, 409, 415, 418, 419, 422, 425, 439, 443, 444, 445, 448, 451, 470, 471, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 514, 516, 526, 530, 537, 538, 540, 542, 543, 545, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 579, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 703, 704, 706, 707, 708, 713, 714, 715, 718, 719, 724, 726, 727, 729, 730, 732, 733, 734, 735, 736, 741, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 788, 789, 790, 791, 793, 794, 795, 796, 797, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 857, 859, 860, 861, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 894, 899, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 960, 961, 962, 989, 990, 991, 994, 995, 998, 1002, 1005, 1006, 1012, 1013, 1014, 1018, 1019, 1021, 1022, 1023, 1028, 1030, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "target_class": 323, "target_column": [495, 496, 502], "target_encod": 325, "target_filenam": [507, 511], "target_gener": 181, "target_idx": 638, "target_mean_": [891, 1008], "target_nam": [44, 56, 65, 86, 120, 128, 132, 190, 228, 240, 264, 270, 278, 286, 287, 301, 324, 341, 359, 364, 378, 380, 494, 495, 497, 498, 499, 500, 502, 503, 506, 508, 509, 510, 511, 516, 719, 998, 1014, 1023, 1028, 1032, 1049], "target_opset": 409, "target_test": [271, 515], "target_train": [271, 515], "target_typ": [324, 891, 934, 961, 1056], "target_type_": 891, "targetencod": [1, 324, 325, 399, 883, 884, 988, 1008, 1017, 1055, 1056], "targetencodertargetencod": 324, "targets_test": 251, "targets_train": 251, "tari": 92, "tashai": [1047, 1048], "task": [1, 37, 42, 45, 127, 145, 146, 152, 154, 172, 183, 188, 197, 203, 205, 206, 208, 218, 219, 235, 239, 256, 271, 274, 291, 297, 352, 361, 372, 374, 380, 382, 384, 385, 389, 390, 391, 394, 397, 398, 399, 420, 422, 423, 424, 425, 454, 467, 499, 511, 521, 598, 601, 602, 604, 605, 606, 610, 611, 612, 615, 638, 639, 652, 653, 658, 659, 666, 667, 668, 669, 680, 687, 690, 733, 735, 736, 760, 788, 790, 793, 795, 807, 811, 824, 830, 964, 965, 995, 998, 999, 1000, 1001, 1009, 1011, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1030, 1031, 1032, 1034, 1039, 1044, 1048, 1054], "tast": 1039, "tata": 1056, "tau": 1008, "tau_0": 542, "tavenard": 1051, "tax": 0, "taxonom": 382, "taxonomist": 1031, "taylor": [422, 1047, 1049, 1050, 1053], "tb": 393, "tc": [173, 382, 400], "tcg": 183, "tch": [173, 382], "tcompl": 92, "tcpdump": 380, "tda": 1017, "teach": 385, "teacher": 103, "teal": [220, 229, 284], "team": [380, 388, 397, 399, 400, 1017, 1022, 1039], "teas": 191, "tech": [50, 382, 848], "technic": [183, 191, 220, 240, 331, 380, 382, 385, 399, 422, 658, 670, 691, 692, 905, 994, 995, 1001], "technion": [670, 691, 692, 994], "techniqu": [10, 25, 50, 55, 103, 105, 126, 134, 139, 149, 165, 172, 173, 187, 188, 190, 227, 241, 243, 282, 295, 302, 330, 338, 352, 363, 374, 382, 397, 399, 409, 413, 415, 419, 420, 421, 422, 423, 424, 453, 454, 455, 456, 540, 560, 683, 695, 699, 700, 732, 762, 990, 994, 995, 997, 998, 1001, 1004, 1006, 1010, 1012, 1014, 1018, 1022, 1026, 1031, 1032, 1052], "technolog": 382, "technologi": [173, 382, 415, 1017, 1022], "technometr": [382, 417, 475, 480, 1004], "tediou": [159, 271], "teen": 1008, "teevan": [847, 1000], "teh": [866, 1003], "tejesh95": 1043, "telecom": [60, 61, 76, 246, 1022], "telenczuk": [45, 152, 159, 173, 187, 1048, 1051, 1052, 1054], "tell": [175, 191, 192, 253, 277, 348, 353, 373, 380, 415, 423, 569, 585, 987, 992, 1005, 1032], "temp": [42, 192], "temp_fold": 964, "temperatur": [192, 423, 1005], "tempfil": [88, 300, 327, 416, 1001], "templat": [385, 389, 390, 399, 400, 563, 564, 569, 570, 571, 572, 1017], "templateclassifi": 387, "tempor": [51, 154, 203, 1017, 1018], "temporari": [88, 103, 105, 372, 474, 693, 787, 908, 1001, 1042, 1043, 1046, 1052, 1053], "temporarili": [415, 1044], "temporarydirectori": [300, 327], "tempt": 191, "temptat": [368, 385], "ten": [53, 56, 138, 144, 154, 173, 240, 268, 380, 382, 422, 526, 915, 1048], "tenavi": 1053, "tend": [42, 50, 63, 71, 73, 77, 86, 89, 91, 171, 173, 191, 192, 208, 219, 224, 237, 256, 262, 265, 274, 278, 297, 316, 352, 361, 372, 374, 385, 387, 399, 413, 415, 417, 420, 422, 424, 443, 454, 659, 856, 887, 899, 947, 994, 995, 1001, 1014, 1032], "tendenc": [154, 244, 994, 995, 997, 1000, 1003], "tenenbaum": [694, 995], "tenenhau": 382, "tensor": [1, 196, 377, 411, 420, 544, 546, 553, 645, 646, 647, 1034, 1051], "tensorflow": [44, 397, 1017, 1028], "tensorsketch": 990, "tent": 391, "tenur": 1022, "teon": 1051, "terenc": [1051, 1052], "term": [1, 42, 52, 53, 61, 67, 92, 129, 141, 144, 148, 151, 180, 190, 203, 207, 208, 219, 221, 223, 233, 236, 237, 256, 271, 275, 279, 298, 313, 330, 352, 355, 359, 361, 374, 385, 387, 389, 397, 413, 415, 417, 419, 420, 422, 449, 453, 455, 458, 465, 468, 530, 541, 544, 546, 550, 553, 555, 594, 595, 596, 597, 610, 613, 614, 638, 639, 646, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 681, 682, 684, 686, 693, 701, 736, 744, 789, 790, 793, 867, 868, 885, 889, 892, 910, 911, 912, 913, 914, 915, 916, 987, 989, 990, 992, 993, 994, 995, 998, 999, 1000, 1002, 1003, 1008, 1012, 1013, 1023, 1032, 1047, 1053, 1054, 1055], "term1": 423, "term2": 423, "term3": 423, "termin": [373, 390, 391, 393, 403, 415, 429, 454, 467, 559, 560, 564, 565, 566, 569, 571, 672, 673, 674, 682, 684, 867, 868, 919, 921, 1004, 1014], "terminalipythonapp": 391, "terminalpdb": 393, "termination_condition_": 907, "terminologi": [399, 1047], "terraza": 1051, "terri": [103, 1043], "terrycojon": 1043, "tesson": 415, "test": [1, 42, 44, 46, 48, 49, 51, 60, 61, 62, 63, 66, 67, 68, 88, 103, 104, 116, 129, 138, 141, 143, 144, 145, 146, 150, 151, 152, 153, 154, 164, 166, 167, 169, 172, 175, 176, 188, 190, 191, 192, 193, 194, 196, 203, 208, 214, 215, 218, 219, 220, 221, 223, 226, 227, 234, 235, 237, 243, 247, 252, 253, 255, 264, 269, 270, 271, 272, 275, 276, 277, 278, 279, 281, 282, 284, 285, 287, 288, 289, 291, 297, 301, 306, 307, 313, 315, 320, 322, 323, 324, 325, 334, 341, 348, 355, 361, 368, 372, 373, 379, 380, 382, 388, 389, 390, 391, 397, 398, 399, 402, 403, 408, 410, 411, 413, 414, 416, 417, 420, 422, 423, 424, 425, 432, 434, 438, 441, 442, 443, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 494, 495, 499, 503, 504, 508, 510, 530, 537, 543, 545, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 598, 600, 601, 602, 604, 605, 606, 608, 610, 611, 612, 614, 615, 616, 617, 633, 634, 636, 641, 642, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 718, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 857, 860, 861, 867, 868, 870, 895, 896, 898, 899, 900, 901, 905, 906, 908, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 929, 939, 941, 942, 993, 994, 997, 998, 1001, 1002, 1006, 1008, 1012, 1013, 1014, 1017, 1018, 1019, 1021, 1022, 1024, 1027, 1028, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "test_": [51, 159, 419], "test_0": 42, "test_4": 42, "test_accuraci": [264, 278, 291], "test_auc": 833, "test_ax": 129, "test_balanced_accuraci": 291, "test_best_it": 150, "test_check_estim": 942, "test_color": 150, "test_common": [385, 393], "test_dataset": 379, "test_devi": 153, "test_enable_hist_gradient_boost": 389, "test_error": 290, "test_fn": 998, "test_fold": [419, 819], "test_fract": 1039, "test_idx": [51, 399], "test_import": 193, "test_index": [264, 340, 419, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827], "test_indic": 1027, "test_indx": 419, "test_lin": 150, "test_logist": [385, 393], "test_ms": 334, "test_neg_mean_absolute_error": [42, 221], "test_neg_mean_squared_error": [221, 833], "test_neg_root_mean_squared_error": 42, "test_negative_likelihood_ratio": 280, "test_positive_likelihood_ratio": 280, "test_prec_macro": 419, "test_precision_macro": 419, "test_r2": 833, "test_rec_macro": 419, "test_recall_macro": 419, "test_requiring_mpl_fixtur": 385, "test_result": 193, "test_scor": [148, 150, 152, 154, 227, 276, 279, 295, 324, 355, 363, 398, 419, 812, 829, 833, 834, 837], "test_scores_nb": 279, "test_scores_svm": 279, "test_set": 413, "test_siz": [42, 43, 44, 48, 51, 60, 61, 63, 66, 67, 104, 143, 149, 150, 152, 153, 154, 158, 190, 196, 203, 214, 219, 226, 227, 234, 235, 271, 274, 275, 279, 284, 286, 290, 297, 306, 307, 313, 315, 316, 320, 322, 323, 329, 348, 355, 368, 390, 419, 704, 808, 823, 826, 827, 836, 838, 859, 988, 1000, 1001, 1027, 1028, 1039, 1040, 1045, 1046, 1051], "test_sklearn_compatible_estim": [327, 942], "test_sparsifi": 393, "test_stat": 46, "test_tim": [252, 359], "test_tp": 998, "test_val": 386, "test_your_test_nam": 373, "tested_neg": 291, "tested_posit": 291, "testpypi": 389, "tests_for_packag": 385, "teunp": 1053, "texa": [50, 103], "text": [1, 41, 44, 45, 48, 49, 50, 53, 56, 66, 67, 71, 74, 78, 87, 90, 91, 92, 94, 95, 96, 98, 103, 112, 113, 136, 144, 149, 171, 183, 194, 199, 213, 214, 246, 250, 253, 257, 258, 262, 264, 269, 276, 277, 283, 284, 288, 303, 306, 308, 313, 320, 330, 336, 338, 354, 363, 372, 374, 377, 378, 379, 385, 390, 397, 399, 413, 415, 416, 418, 419, 420, 422, 425, 453, 455, 470, 474, 493, 494, 495, 505, 509, 514, 527, 542, 550, 570, 594, 595, 596, 597, 621, 631, 658, 664, 672, 674, 680, 682, 703, 709, 711, 713, 719, 723, 735, 736, 743, 799, 801, 806, 820, 836, 845, 847, 849, 852, 857, 870, 871, 873, 874, 882, 906, 907, 908, 910, 922, 923, 924, 944, 987, 990, 994, 996, 998, 999, 1000, 1002, 1005, 1008, 1010, 1012, 1013, 1016, 1018, 1019, 1022, 1024, 1025, 1034, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "text1": 423, "text2": 423, "text2d": 243, "text3": 423, "text3d": [79, 130], "text_": 703, "text_analyt": 1032, "text_clf": 1032, "text_kw": [703, 1054], "text_preprocess": 470, "text_stat": 103, "text_stats_transform": 103, "textbook": [423, 596], "textcoord": [47, 196], "textrm": [1013, 1030], "texttt": 998, "textual": [420, 429, 1014, 1048], "textur": [173, 382, 764, 765, 996], "tf": [1, 53, 56, 250, 359, 360, 361, 380, 420, 527, 550, 594, 595, 596, 597, 849, 857, 882, 987, 996, 1000, 1008, 1017, 1032], "tf_feature_nam": 53, "tf_transform": 1032, "tf_vector": 53, "tfid": 596, "tfidf": [53, 103, 341, 423, 597, 1032], "tfidf__use_idf": 1032, "tfidf_feature_nam": 53, "tfidf_transform": 1032, "tfidf_vector": 53, "tfidftransform": [1, 341, 360, 361, 423, 495, 597, 1032, 1046, 1047, 1053, 1055, 1056, 1057], "tfidfvector": [1, 53, 56, 103, 278, 359, 380, 420, 423, 495, 594, 595, 596, 1032, 1039, 1041, 1047, 1048, 1049, 1052, 1053, 1057], "tfidfvectorizertfidfvector": 278, "tfifi": 1052, "tfrac": 425, "tgct": 183, "tgz": [44, 1028], "th": [138, 256, 330, 367, 398, 415, 419, 422, 430, 447, 451, 457, 459, 465, 469, 478, 563, 564, 565, 566, 567, 568, 570, 571, 572, 599, 600, 638, 654, 655, 675, 677, 686, 702, 724, 786, 827, 891, 935, 988, 994, 998, 1002, 1005, 1012, 1013, 1054], "th0rwa": [1049, 1050], "thakur": [1042, 1043], "thaler": 1045, "than": [1, 24, 42, 43, 45, 49, 50, 52, 56, 63, 65, 66, 74, 78, 81, 87, 89, 105, 108, 112, 114, 117, 122, 124, 127, 129, 131, 138, 140, 141, 143, 144, 145, 147, 148, 151, 154, 171, 173, 175, 181, 184, 186, 191, 192, 193, 196, 198, 203, 205, 208, 219, 221, 225, 235, 236, 237, 243, 246, 252, 253, 254, 256, 263, 271, 274, 275, 277, 278, 279, 280, 283, 286, 291, 295, 297, 298, 304, 305, 316, 318, 322, 323, 324, 325, 329, 331, 333, 335, 338, 352, 359, 360, 361, 368, 372, 373, 374, 379, 380, 381, 383, 384, 385, 387, 390, 391, 393, 399, 400, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 460, 463, 466, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 499, 500, 502, 515, 520, 521, 529, 537, 540, 541, 542, 543, 544, 546, 547, 548, 550, 553, 554, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 579, 587, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 633, 634, 636, 640, 646, 648, 649, 650, 652, 653, 658, 659, 661, 664, 665, 666, 667, 668, 669, 672, 673, 674, 677, 678, 680, 682, 683, 684, 685, 688, 693, 698, 700, 702, 710, 711, 718, 726, 727, 728, 729, 730, 741, 742, 745, 770, 785, 786, 787, 789, 791, 801, 803, 804, 806, 809, 810, 816, 820, 825, 827, 828, 831, 832, 833, 834, 835, 838, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 864, 867, 868, 873, 883, 884, 885, 887, 888, 890, 893, 899, 900, 904, 907, 910, 911, 912, 915, 916, 918, 919, 920, 921, 922, 936, 947, 949, 950, 955, 961, 967, 969, 972, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1017, 1018, 1021, 1023, 1027, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "thanh": 1057, "thank": [0, 42, 54, 61, 89, 117, 193, 196, 219, 286, 359, 360, 384, 393, 1017, 1022, 1039, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "tharak": 1056, "thebabush": [1056, 1057], "thedevpanda": 1054, "thei": [0, 7, 24, 29, 30, 42, 51, 62, 71, 84, 91, 114, 126, 136, 139, 145, 146, 148, 150, 152, 154, 155, 169, 172, 173, 175, 176, 180, 191, 192, 203, 205, 208, 214, 219, 220, 237, 240, 243, 246, 252, 253, 256, 270, 274, 277, 278, 280, 286, 291, 295, 298, 300, 314, 318, 323, 329, 331, 352, 359, 360, 365, 366, 368, 372, 373, 374, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 393, 394, 397, 398, 399, 400, 406, 409, 412, 414, 415, 416, 417, 418, 420, 422, 424, 425, 427, 446, 448, 452, 459, 460, 473, 502, 514, 515, 539, 541, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 603, 616, 625, 635, 649, 652, 653, 658, 664, 665, 666, 667, 668, 676, 678, 682, 684, 687, 693, 768, 769, 771, 774, 780, 795, 806, 820, 839, 845, 846, 847, 848, 849, 867, 870, 872, 878, 889, 890, 912, 915, 918, 919, 920, 921, 925, 987, 988, 990, 992, 994, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1022, 1023, 1027, 1029, 1030, 1032, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055], "theil": [1, 188, 197, 222, 225, 318, 655, 663, 677, 684, 685, 1019], "theilsen": 225, "theilsenregressor": [1, 225, 236, 655, 677, 684, 994, 1043, 1051, 1053], "theirs": 359, "them": [15, 42, 43, 46, 67, 73, 74, 83, 87, 89, 90, 94, 99, 100, 103, 104, 117, 124, 126, 129, 139, 155, 168, 173, 175, 186, 187, 191, 192, 193, 196, 198, 203, 214, 220, 221, 223, 237, 250, 253, 256, 257, 271, 275, 277, 278, 280, 286, 295, 300, 318, 323, 325, 330, 341, 348, 361, 367, 372, 374, 380, 383, 385, 386, 387, 388, 389, 393, 397, 399, 400, 402, 406, 409, 413, 414, 415, 416, 419, 420, 422, 423, 425, 450, 453, 455, 456, 463, 470, 473, 499, 500, 514, 573, 574, 575, 576, 613, 614, 622, 626, 627, 630, 638, 645, 670, 698, 774, 777, 780, 784, 785, 786, 787, 795, 806, 820, 827, 835, 870, 874, 879, 880, 884, 888, 890, 891, 900, 901, 907, 918, 919, 955, 964, 987, 988, 994, 997, 998, 999, 1001, 1002, 1003, 1008, 1013, 1014, 1016, 1017, 1021, 1022, 1023, 1030, 1031, 1032, 1039, 1040, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "themat": 399, "theme": [380, 385, 403, 408, 1039], "themrmax": [1045, 1046], "themselv": [63, 191, 318, 381, 387, 393, 399, 406, 412, 415, 422, 423, 425, 452, 621, 798, 1014, 1032, 1049], "theodor": 1044, "theofilo": 1046, "theoptip": [1049, 1050], "theorem": [31, 175, 355, 1000], "theoret": [36, 71, 91, 175, 271, 415, 422, 559, 560, 645, 710, 732, 762, 910, 987, 994, 995, 997, 998, 1000, 1010, 1012, 1013, 1022], "theori": [7, 148, 252, 267, 355, 382, 415, 419, 422, 696, 700, 732, 762, 902, 903, 947, 987, 994, 995, 997, 998, 999, 1013, 1014], "theotheo": 1049, "thereaft": [191, 198], "therebi": [42, 191, 419, 422, 990, 1049], "therefor": [42, 47, 52, 57, 60, 63, 69, 71, 86, 87, 104, 105, 108, 112, 117, 129, 133, 138, 141, 143, 151, 154, 157, 159, 172, 190, 193, 219, 223, 235, 236, 262, 267, 268, 271, 278, 280, 291, 295, 297, 301, 315, 318, 323, 337, 348, 355, 356, 359, 360, 367, 372, 379, 383, 390, 397, 406, 409, 411, 415, 416, 417, 419, 420, 422, 423, 443, 541, 547, 555, 557, 559, 560, 565, 566, 570, 571, 610, 612, 664, 665, 671, 674, 677, 682, 684, 685, 707, 718, 741, 763, 803, 870, 871, 883, 887, 891, 899, 988, 992, 994, 995, 998, 1000, 1001, 1002, 1003, 1006, 1008, 1013, 1014, 1018, 1023, 1030, 1031, 1032, 1048, 1049, 1052, 1053, 1054, 1055, 1056], "therein": 674, "thereof": 399, "theriley106": 1047, "thesi": [0, 382, 415, 422], "theta": [176, 177, 179, 181, 183, 184, 254, 420, 425, 529, 542, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 698, 1000, 1014], "theta0": 176, "theta1": 176, "theta_": [848, 1000], "theta_c": [254, 529], "theta_d": 420, "theta_i": 1000, "theta_l": 425, "theta_opt": [616, 617], "thi": [0, 1, 6, 10, 29, 30, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 488, 489, 490, 491, 493, 495, 496, 499, 500, 502, 503, 504, 505, 507, 508, 509, 511, 514, 515, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 712, 713, 715, 717, 718, 719, 720, 722, 723, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 742, 743, 744, 745, 746, 747, 748, 749, 754, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 774, 775, 780, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 930, 931, 936, 937, 939, 941, 942, 947, 949, 954, 955, 956, 957, 958, 959, 961, 964, 965, 968, 969, 972, 973, 982, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "thibault": 1048, "thibaut": 1053, "thibsej": 1048, "thick": [94, 308, 1001], "thierno": 1049, "thierri": [0, 262, 264, 1022, 1045, 1046, 1053], "thij": [1051, 1054, 1055], "thin": [241, 626], "thing": [47, 69, 240, 272, 359, 373, 374, 380, 384, 385, 387, 397, 400, 415, 417, 423, 565, 566, 994, 1008, 1022, 1045], "think": [43, 71, 191, 192, 359, 360, 385, 421, 997, 1018, 1022, 1023], "thinner": 101, "third": [69, 147, 152, 168, 173, 183, 237, 246, 268, 295, 303, 320, 333, 373, 380, 384, 397, 400, 409, 423, 540, 594, 595, 596, 597, 808, 809, 810, 815, 852, 853, 854, 856, 858, 888, 900, 987, 1009, 1039, 1050, 1055, 1056], "thirion": [0, 404, 1039, 1045, 1046, 1052], "thirteen": 382, "thirti": 1016, "thiruvenkadam": 1053, "this_centroid": 76, "this_cov": 114, "this_cv": 272, "this_di": 50, "this_dx": 50, "this_i": [60, 225], "this_max_it": 234, "this_p": 62, "this_prec": 114, "this_scor": [351, 1027], "this_sw": 60, "this_x": [60, 217, 225, 1030], "thoma": [0, 131, 246, 318, 373, 375, 400, 404, 906, 994, 1008, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "thomas9292": 1051, "thomaz": 1050, "thomo": 92, "thompson": [1042, 1054, 1055], "thorben": 1051, "thorough": 1022, "thoroughli": 1003, "thorsten": 1022, "those": [42, 45, 50, 54, 56, 89, 94, 104, 139, 151, 154, 171, 173, 184, 190, 191, 192, 193, 194, 219, 221, 223, 237, 244, 250, 253, 255, 256, 268, 270, 271, 277, 280, 283, 295, 314, 318, 323, 335, 345, 348, 359, 360, 361, 372, 373, 379, 385, 387, 389, 390, 391, 392, 397, 399, 400, 403, 412, 413, 414, 415, 419, 420, 422, 423, 425, 454, 456, 467, 470, 474, 500, 501, 502, 509, 563, 564, 570, 571, 575, 576, 587, 698, 703, 718, 724, 742, 806, 809, 810, 818, 820, 827, 852, 853, 854, 856, 858, 859, 860, 861, 862, 910, 911, 912, 915, 918, 919, 920, 921, 958, 987, 990, 994, 997, 998, 1000, 1001, 1002, 1005, 1008, 1014, 1016, 1017, 1022, 1023, 1032, 1039, 1042, 1045, 1046, 1047, 1052, 1053, 1054, 1055, 1056, 1057], "though": [79, 89, 144, 173, 196, 198, 256, 283, 303, 320, 322, 360, 361, 368, 372, 379, 382, 385, 387, 398, 399, 415, 420, 421, 422, 423, 424, 705, 813, 815, 910, 987, 988, 990, 995, 998, 1001, 1006, 1008, 1012, 1032, 1047], "thought": [239, 303, 399, 415, 452, 995, 999], "thoui": [0, 405, 1039], "thousand": [76, 144, 154, 250, 252, 322, 360, 380, 415, 422, 867, 868, 915, 995, 1032, 1048, 1050], "thread": [298, 328, 331, 383, 397, 399, 415, 422, 842, 843, 964, 965, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056], "threadpoolctl": [373, 383, 403, 408], "threadsaf": 1052, "three": [42, 45, 62, 69, 74, 75, 79, 80, 89, 92, 110, 120, 121, 138, 143, 145, 148, 149, 150, 160, 161, 162, 170, 173, 183, 191, 203, 211, 216, 219, 221, 228, 230, 252, 253, 262, 265, 297, 324, 325, 328, 373, 378, 382, 389, 403, 409, 412, 415, 419, 420, 421, 423, 457, 468, 504, 715, 949, 991, 993, 994, 995, 998, 1001, 1008, 1012, 1013, 1016, 1023, 1031, 1039], "thresh": 1043, "threshold": [1, 49, 61, 76, 99, 127, 133, 173, 188, 192, 194, 214, 247, 249, 269, 274, 275, 276, 281, 284, 297, 333, 334, 336, 364, 367, 399, 410, 415, 420, 422, 424, 447, 448, 451, 452, 475, 502, 506, 514, 515, 537, 543, 548, 554, 555, 556, 557, 567, 569, 594, 597, 599, 603, 608, 609, 650, 664, 673, 677, 682, 684, 698, 704, 706, 708, 709, 712, 713, 724, 726, 732, 733, 738, 745, 746, 748, 762, 788, 790, 793, 794, 795, 800, 803, 804, 805, 806, 825, 828, 836, 845, 856, 857, 871, 873, 875, 877, 890, 893, 905, 906, 907, 908, 915, 922, 924, 972, 994, 998, 1001, 1002, 1004, 1008, 1011, 1013, 1014, 1018, 1019, 1034, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1057], "threshold_": [603, 1046], "threshold_lambda": 650, "threshold_sign": 367, "thriller": [423, 881], "thrive": [0, 385], "throat": [49, 311, 380, 504], "through": [0, 1, 45, 51, 69, 143, 173, 183, 191, 223, 239, 251, 272, 277, 280, 303, 322, 323, 346, 353, 361, 367, 382, 383, 385, 387, 392, 394, 399, 400, 403, 406, 414, 415, 418, 420, 422, 424, 425, 432, 438, 452, 470, 473, 478, 541, 547, 563, 564, 567, 570, 571, 572, 587, 599, 600, 603, 653, 657, 659, 661, 664, 665, 667, 669, 671, 674, 682, 683, 694, 697, 726, 812, 829, 886, 898, 902, 903, 918, 919, 920, 921, 953, 956, 987, 988, 995, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1012, 1013, 1014, 1022, 1023, 1030, 1032, 1039, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057], "throughout": [333, 368, 399, 633, 807, 867, 868, 1023, 1042, 1047], "throughput": [371, 1017, 1034, 1042], "throw": [1, 315, 394, 929, 1043, 1046, 1047, 1048, 1049, 1053], "thrown": [717, 1048, 1049], "thu": [42, 43, 60, 61, 62, 63, 74, 87, 89, 94, 110, 114, 127, 129, 141, 143, 144, 146, 148, 154, 169, 175, 180, 181, 192, 203, 207, 208, 219, 221, 237, 246, 252, 257, 264, 271, 275, 277, 282, 283, 284, 291, 301, 325, 327, 330, 363, 368, 372, 373, 380, 387, 391, 397, 399, 406, 413, 414, 415, 419, 420, 422, 423, 425, 426, 443, 445, 469, 521, 533, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 609, 612, 616, 628, 633, 638, 639, 649, 651, 664, 683, 711, 724, 731, 794, 801, 808, 813, 815, 827, 841, 844, 879, 910, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1018, 1022, 1039, 1041, 1045, 1047, 1048, 1049, 1051, 1055], "thuan": 1050, "thukarama": 1054, "thumb": [12, 144, 196, 372, 385, 386, 397, 415, 664, 665, 672, 673, 674, 682, 683, 684, 910, 998], "thumbnail": 1039, "th\u00e9ophil": 1055, "ti": [103, 219, 264, 267, 275, 356, 372, 413, 415, 605, 606, 641, 726, 732, 762, 803, 804, 912, 915, 918, 997, 998, 1013, 1040, 1042, 1043, 1047, 1049, 1053, 1054, 1055], "tiago": [1040, 1044], "tialo": [1056, 1057], "tian": [415, 448, 1044, 1045, 1046], "tianqi": 422, "tiao": [1044, 1045], "tib": [688, 689], "tibshirani": [141, 142, 153, 173, 207, 276, 382, 419, 422, 526, 565, 566, 634, 662, 727, 729, 730, 840, 857, 918, 919, 988, 992, 994, 999, 1005, 1014], "tic": [173, 192, 256, 288, 1000], "tic_bwd": 173, "tic_fwd": 173, "ticconi": 1045, "tick": [46, 77, 94, 178, 257, 288, 638, 834], "tick_bottom": 318, "tick_left": 318, "tick_param": [45, 53, 162, 262, 277, 322, 340], "tick_right": 45, "ticker": [239, 241, 244, 298], "ticket": [332, 385], "tidelift": 0, "tie": [188, 211, 343, 397, 422, 518, 838, 915, 999, 1013, 1014, 1019, 1040, 1055], "tieleman": [866, 1003], "tien": 1044, "tiernei": [1047, 1048, 1049], "tight": [74, 133, 140, 147, 166, 169, 204, 206, 211, 212, 213, 224, 228, 231, 236, 241, 244, 266, 298, 304, 305, 309, 310, 344, 348, 351, 353, 364, 588, 698, 1051], "tight_layout": [44, 46, 61, 63, 66, 74, 86, 89, 99, 106, 108, 117, 124, 125, 126, 134, 138, 140, 145, 147, 149, 152, 157, 159, 161, 177, 179, 184, 186, 190, 191, 193, 194, 198, 199, 203, 209, 217, 219, 227, 230, 234, 237, 239, 251, 256, 272, 273, 289, 297, 298, 300, 310, 319, 320, 321, 322, 323, 327, 331, 346, 360, 363, 364, 1028], "tightli": 1026, "tijanajovanov": 1051, "tikhonov": [182, 425, 678], "tild": [876, 1006, 1008], "tilen": 1049, "till": [415, 448, 794, 998], "tim": [0, 143, 158, 404, 1039, 1044, 1045, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057], "time": [0, 1, 36, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 397, 399, 400, 406, 409, 411, 412, 413, 415, 417, 418, 420, 422, 423, 426, 443, 447, 449, 450, 451, 452, 453, 456, 458, 461, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 478, 502, 505, 507, 525, 529, 540, 542, 544, 546, 547, 553, 568, 573, 574, 575, 576, 596, 616, 625, 633, 634, 635, 636, 640, 645, 646, 649, 652, 656, 658, 660, 666, 668, 670, 672, 673, 678, 679, 680, 682, 683, 684, 691, 692, 696, 698, 700, 707, 748, 751, 752, 754, 796, 800, 803, 804, 806, 808, 809, 810, 811, 813, 815, 820, 821, 822, 825, 827, 831, 832, 833, 834, 835, 836, 838, 840, 845, 846, 847, 848, 849, 850, 851, 858, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 877, 880, 883, 885, 889, 894, 902, 903, 907, 908, 912, 915, 916, 924, 949, 964, 987, 988, 990, 991, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1022, 1023, 1028, 1030, 1031, 1032, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "time_dens": 334, "time_spars": 334, "time_step": [203, 868], "timeit": [234, 265, 391], "timeout": [502, 964, 1053], "timer": [265, 391], "times_init": 265, "timescal": 251, "timeseri": 42, "timeseriessplit": [1, 42, 51, 154, 203, 272, 419, 1045, 1046, 1051], "timo": 1051, "timofei": 1054, "timotheemathieu": 1052, "timothi": [1044, 1052], "timsaur": 1049, "tinertia": 92, "ting": [569, 1004, 1047, 1048], "tingshan": 1052, "tini": [1041, 1054, 1057], "tinoco": 1056, "tinta": 324, "tinyclu": 0, "tip": [368, 371, 385, 388, 391, 410, 423, 540, 547, 651, 698, 994, 1020, 1021, 1033, 1034, 1042], "tiphain": 1050, "tirth": [1049, 1050], "titan": [104, 193, 260, 327, 331, 332, 1006], "titl": [0, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 57, 58, 60, 61, 62, 63, 65, 67, 71, 72, 73, 75, 78, 79, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 110, 111, 113, 114, 116, 117, 120, 121, 124, 125, 126, 127, 128, 131, 132, 133, 139, 140, 141, 144, 146, 147, 148, 151, 152, 154, 155, 158, 161, 162, 166, 168, 169, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 191, 198, 199, 201, 203, 204, 206, 207, 208, 211, 212, 218, 219, 221, 223, 224, 225, 227, 228, 233, 236, 237, 239, 240, 241, 246, 250, 251, 252, 254, 255, 256, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 276, 277, 278, 280, 281, 282, 286, 287, 292, 300, 301, 304, 305, 306, 307, 309, 310, 311, 318, 322, 323, 324, 325, 339, 342, 344, 345, 346, 347, 348, 351, 352, 356, 357, 359, 364, 365, 366, 384, 385, 389, 393, 416, 998, 1021, 1028], "title_bow": 416, "titles_opt": 270, "titov": [1047, 1049, 1052, 1053], "titu": 1050, "tiwari": 1051, "tiziano": 1039, "tjoa": 1043, "tkammi": 1045, "tkdd": 569, "tliu68": 1052, "tm": [50, 1001], "tmp": 389, "tmpdir": [300, 327], "tn": [271, 335, 718, 724, 998], "tn_c": 286, "tnr": 271, "tnwei": 1051, "to_british": 423, "to_fram": 108, "to_list": 194, "to_numpi": [51, 180, 271], "to_onnx": 409, "to_replac": [42, 192], "toarrai": [45, 334, 341, 367, 416, 423, 572, 588, 594, 596, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 883, 900, 901, 948, 969, 970, 972, 980, 981, 988, 1001, 1008, 1056], "toastedcornflak": [1045, 1046], "toastedyeast": [1053, 1054], "tobia": [1047, 1052, 1054], "tobychees": [1046, 1047], "toc": [173, 256], "toc_bwd": 173, "toc_fwd": 173, "toccac": 1049, "tocsc": 205, "tocsr": 54, "toctre": [385, 403, 408], "tod": [415, 426, 450], "todai": [180, 1032], "todens": [973, 974, 975, 976, 977, 978, 979], "todo": [80, 250, 389, 393, 415, 1058], "toeplitz": 111, "togeth": [42, 50, 85, 94, 104, 147, 159, 175, 181, 191, 200, 240, 243, 256, 273, 324, 331, 351, 364, 368, 387, 389, 397, 398, 399, 415, 422, 423, 424, 430, 457, 459, 573, 574, 600, 695, 721, 806, 820, 870, 871, 884, 994, 995, 998, 999, 1005, 1008, 1014, 1015, 1022, 1024, 1026, 1045, 1056], "toi": [47, 70, 73, 74, 75, 76, 81, 83, 86, 87, 89, 91, 101, 112, 117, 128, 141, 155, 160, 161, 188, 201, 209, 223, 233, 245, 256, 262, 304, 305, 314, 345, 354, 378, 391, 397, 415, 422, 423, 446, 447, 448, 450, 452, 454, 455, 456, 458, 464, 475, 518, 520, 528, 569, 645, 683, 732, 762, 804, 856, 863, 871, 890, 914, 995, 997, 998, 1004, 1008, 1019, 1034], "tok": [361, 423], "token": [1, 56, 361, 372, 380, 389, 423, 542, 594, 595, 596, 597, 1039, 1047, 1051, 1057], "token_featur": 423, "token_freq": 361, "token_pattern": [361, 423, 594, 595, 597], "tokoroten": 1044, "tokyo": [878, 1009], "tol": [45, 48, 54, 106, 124, 149, 154, 173, 186, 199, 210, 212, 226, 227, 233, 235, 246, 257, 263, 265, 316, 330, 355, 359, 387, 391, 422, 427, 449, 453, 455, 458, 465, 468, 477, 478, 484, 488, 489, 490, 537, 538, 539, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 565, 566, 567, 568, 608, 633, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 678, 680, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 697, 699, 701, 803, 804, 820, 859, 867, 868, 905, 906, 910, 911, 912, 913, 914, 915, 916, 984, 994, 1012, 1013, 1028, 1032, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "tola": 1049, "told": 423, "toledano": 1047, "toler": [80, 106, 154, 186, 210, 212, 235, 236, 352, 361, 380, 387, 394, 415, 427, 449, 453, 458, 465, 468, 477, 478, 484, 488, 489, 490, 537, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 553, 554, 565, 566, 567, 568, 633, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 682, 684, 685, 687, 688, 689, 690, 694, 695, 696, 697, 699, 700, 701, 850, 851, 855, 859, 867, 868, 905, 906, 910, 911, 912, 913, 914, 915, 916, 984, 994, 998, 1012, 1013, 1028, 1051, 1052, 1053, 1054], "toleranbc": 1048, "tolist": [42, 150, 186, 276, 329, 380], "tom": [0, 211, 227, 298, 300, 320, 321, 404, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tom1092": 1052, "toma": 1043, "tomasz": 1052, "tomato": 220, "tomatti": 1054, "tomdlt": 1045, "tomiock": [1054, 1055], "toml": 389, "tommaso": 1052, "tommi": [1046, 1047, 1048], "tomographi": [41, 54, 100, 188, 658, 678, 994, 1019], "tomohiro": 1052, "tomorrow": 414, "tom\u00e1": [1052, 1053], "tongyu": 1056, "toni": [44, 380, 569, 890, 1004, 1052, 1053], "tonk": 1046, "tony_blair": 1028, "too": [42, 45, 50, 51, 54, 63, 78, 84, 89, 91, 96, 103, 107, 114, 128, 151, 154, 186, 191, 193, 203, 220, 223, 240, 250, 256, 263, 270, 271, 275, 284, 293, 315, 324, 348, 359, 365, 366, 372, 382, 385, 391, 393, 397, 399, 413, 415, 417, 419, 422, 423, 424, 427, 443, 455, 544, 685, 698, 713, 845, 846, 847, 848, 849, 875, 888, 890, 993, 995, 997, 998, 1000, 1001, 1005, 1030, 1040, 1043, 1046, 1047, 1048, 1049, 1051, 1057], "took": [0, 42, 76, 285], "tool": [20, 28, 40, 47, 49, 149, 191, 253, 271, 275, 280, 368, 378, 379, 380, 383, 385, 387, 388, 389, 390, 391, 392, 393, 398, 399, 400, 402, 403, 406, 409, 415, 416, 417, 493, 698, 707, 987, 993, 994, 998, 1004, 1008, 1013, 1015, 1017, 1018, 1022, 1023, 1032, 1046, 1049, 1052, 1053, 1054], "toolbox": [397, 1017, 1022], "toolchain": 383, "toolkit": [372, 1017, 1022], "toolset": 1022, "tooth": [125, 1031], "tootoonian": 1052, "top": [1, 44, 50, 52, 53, 54, 69, 71, 73, 75, 76, 77, 78, 79, 85, 96, 98, 104, 121, 126, 136, 143, 144, 147, 154, 159, 162, 191, 219, 221, 230, 234, 246, 256, 257, 262, 264, 265, 268, 274, 278, 286, 287, 303, 318, 320, 324, 328, 334, 337, 338, 348, 352, 359, 368, 385, 387, 391, 397, 412, 413, 415, 420, 421, 422, 493, 593, 594, 597, 605, 732, 762, 800, 922, 924, 987, 990, 994, 996, 1006, 1017, 1022, 1028, 1031, 1032, 1053], "top10": 380, "top5": 359, "top_featur": 53, "top_features_ind": 53, "top_indic": 359, "top_k_accuraci": 998, "top_k_accuracy_scor": [1, 998, 1051, 1053], "tophat": [303, 421, 850, 851, 855], "topic": [41, 44, 45, 46, 103, 188, 359, 360, 361, 380, 381, 419, 420, 423, 494, 503, 542, 544, 546, 553, 594, 597, 994, 999, 1017, 1018, 1019, 1032, 1044, 1046], "topic_d": 46, "topic_idx": 53, "topic_word_prior": [420, 542], "topic_word_prior_": 542, "topisan": 1049, "toplak": 1055, "topolog": [469, 1017], "topologi": [243, 244], "torch": 411, "torgo": 379, "toro": 324, "toronto": [540, 650, 866], "torr": 1048, "torrella": [1048, 1049, 1055], "tortois": 994, "tosequ": 1057, "toshihiro": [1045, 1046, 1052], "toshniw": 1051, "tot": 50, "total": [1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 364, 365, 366, 367, 373, 379, 380, 382, 391, 399, 412, 415, 421, 423, 426, 438, 450, 471, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 511, 516, 518, 520, 521, 525, 528, 529, 542, 550, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 576, 589, 590, 596, 600, 602, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 682, 683, 684, 685, 703, 710, 711, 719, 735, 736, 737, 740, 744, 745, 763, 775, 789, 790, 793, 800, 801, 802, 806, 820, 831, 832, 833, 843, 844, 845, 846, 853, 855, 861, 868, 885, 889, 911, 913, 916, 918, 919, 920, 921, 947, 987, 994, 995, 998, 999, 1000, 1001, 1008, 1012, 1013, 1014, 1019, 1028, 1032, 1040, 1045, 1047, 1055], "total_cel": 154, "total_fit_tim": 46, "total_sampl": [340, 542], "total_sz_mb": 46, "total_vect_tim": 46, "totalbsmtsf": 159, "totrmsabvgrd": 148, "tottim": 391, "tour": [0, 211, 227, 298, 300, 320, 321, 404, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "tournament": 987, "toward": [0, 62, 63, 97, 114, 145, 151, 158, 175, 193, 198, 223, 224, 244, 256, 355, 385, 399, 415, 454, 458, 468, 682, 684, 701, 884, 997, 1012, 1014, 1016, 1018], "toyota": 50, "tp": [335, 415, 718, 724, 735, 736, 737, 788, 789, 790, 793, 922, 998], "tp_c": 286, "tpng": 922, "tpot": 1017, "tpr": [49, 247, 256, 271, 274, 286, 287, 392, 708, 712, 795, 998, 1036, 1039, 1055], "tpr_a": 286, "tpr_b": 286, "tpr_score": 271, "tprs_lower": 287, "tprs_upper": 287, "tr": [272, 382, 389, 415, 417, 475, 476, 477, 478, 479, 480, 481, 482, 848], "trace": [393, 415, 428, 479, 481, 482, 485, 486, 487, 695, 699, 995, 1050], "traceback": [385, 390, 393, 397, 474, 1021, 1056], "traceord": 144, "tracer0tong": 1045, "trach": 1039, "track": [136, 142, 150, 338, 385, 388, 389, 411, 540, 967, 999, 1017, 1018, 1046, 1049], "tracker": [384, 388, 393, 397, 400, 403, 409, 1018], "tracking_select": 967, "tractabl": [42, 419, 547, 640, 1017, 1052], "trade": [36, 95, 110, 144, 154, 193, 223, 276, 278, 279, 348, 359, 399, 414, 415, 417, 559, 560, 565, 566, 640, 662, 698, 806, 809, 810, 820, 833, 995, 1002, 1010, 1012, 1013, 1018], "tradeoff": [89, 141, 188, 251, 259, 269, 284, 285, 286, 287, 359, 372, 385, 393, 421, 521, 570, 704, 708, 733, 795, 836, 871, 890, 910, 995, 1019, 1030, 1048, 1051], "tradit": [54, 89, 219, 234, 360, 374, 413, 422, 423, 638, 700, 994, 997, 1008, 1017, 1022], "tradition": 1014, "traffic": 1022, "trail": [387, 982], "train": [1, 42, 43, 44, 45, 46, 48, 49, 51, 60, 62, 63, 65, 66, 67, 68, 88, 90, 92, 98, 99, 103, 104, 108, 116, 117, 124, 127, 128, 129, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 154, 156, 159, 160, 161, 164, 170, 175, 176, 177, 180, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 196, 202, 203, 205, 207, 208, 210, 211, 212, 214, 215, 218, 219, 220, 221, 226, 227, 228, 231, 233, 234, 237, 246, 249, 251, 255, 264, 266, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 297, 298, 301, 304, 305, 306, 307, 309, 311, 313, 314, 315, 318, 320, 322, 323, 327, 330, 334, 336, 337, 338, 341, 342, 344, 345, 347, 354, 355, 361, 362, 365, 366, 368, 372, 373, 374, 377, 380, 382, 387, 390, 397, 398, 399, 411, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 427, 443, 446, 447, 449, 450, 453, 455, 457, 458, 459, 460, 465, 471, 475, 476, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 494, 495, 499, 502, 503, 504, 506, 510, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 633, 634, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 694, 695, 697, 698, 702, 709, 747, 794, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 875, 876, 879, 880, 883, 884, 888, 889, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 972, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1024, 1027, 1028, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "train_0": 42, "train_4": 42, "train_accuraci": [264, 291], "train_auc": 833, "train_ax": 129, "train_balanced_accuraci": 291, "train_cover_std": 49, "train_dataset": [191, 379], "train_error": 290, "train_errors_with": 149, "train_errors_without": 149, "train_fract": 1039, "train_idx": [51, 191, 399], "train_import": 193, "train_index": [264, 340, 419, 807, 808, 811, 813, 814, 815, 816, 819, 821, 822, 823, 824, 825, 826, 827], "train_indic": 1027, "train_indx": 419, "train_pr": 149, "train_prec_macro": 419, "train_r2": 833, "train_rec_macro": 419, "train_result": 193, "train_sampl": [63, 234, 235], "train_scor": [227, 324, 355, 363, 812, 829, 833, 834, 837, 993], "train_score_": [152, 422, 565, 566, 567, 568], "train_set": 413, "train_siz": [43, 45, 48, 138, 158, 176, 196, 235, 252, 256, 279, 290, 329, 332, 355, 808, 812, 823, 826, 834, 836, 993, 1027, 1039, 1040, 1045, 1046], "train_size_ab": 834, "train_size_idx": 355, "train_sizes_ab": 834, "train_test_s": 252, "train_test_split": [1, 43, 44, 45, 48, 51, 60, 61, 63, 66, 67, 104, 108, 117, 129, 138, 143, 145, 149, 150, 151, 152, 153, 154, 155, 158, 169, 170, 190, 191, 193, 194, 196, 203, 214, 219, 226, 227, 234, 235, 237, 247, 256, 259, 260, 270, 271, 274, 275, 280, 284, 286, 290, 297, 301, 306, 307, 313, 315, 316, 320, 322, 323, 325, 327, 328, 329, 334, 335, 341, 363, 367, 368, 390, 398, 411, 416, 419, 422, 443, 444, 564, 566, 573, 574, 703, 704, 706, 708, 805, 806, 828, 838, 841, 859, 867, 868, 870, 920, 921, 987, 988, 998, 1000, 1001, 1006, 1008, 1013, 1028, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1052, 1056, 1057], "train_tim": [234, 252, 359, 360], "trainabl": 387, "traine": 1022, "training_data": 175, "training_data_": 1049, "training_idx": 183, "training_indic": 182, "training_noisy_target": 175, "training_sample_indic": 175, "training_tim": [149, 359], "training_time_early_stop": 149, "training_time_ful": 149, "trajectori": 142, "tran": 111, "trans_data": 241, "transact": [97, 271, 335, 382, 415, 417, 426, 428, 450, 454, 481, 540, 544, 546, 553, 569, 650, 670, 691, 692, 731, 732, 762, 775, 994, 998], "transax": [78, 96, 243, 246, 264, 306, 320], "transcript": 385, "transcriptom": 698, "transduc": 338, "transduct": [399, 415, 905, 906, 1018], "transduction_": [337, 338, 339, 905, 906, 907], "transfer": [154, 406, 411, 994, 1018], "transform": [1, 6, 19, 22, 34, 36, 42, 43, 44, 46, 48, 52, 61, 78, 80, 81, 82, 85, 88, 91, 96, 102, 106, 107, 117, 119, 120, 126, 127, 129, 130, 132, 133, 137, 142, 144, 148, 158, 159, 170, 181, 187, 188, 191, 192, 193, 196, 211, 219, 220, 227, 233, 235, 237, 240, 243, 246, 248, 249, 251, 253, 254, 256, 260, 264, 273, 274, 275, 278, 286, 297, 298, 300, 306, 307, 308, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 332, 334, 335, 348, 351, 352, 359, 361, 368, 379, 380, 381, 382, 385, 387, 390, 394, 399, 406, 409, 411, 413, 415, 417, 418, 419, 420, 422, 423, 424, 425, 431, 436, 439, 443, 447, 448, 449, 451, 453, 455, 458, 470, 471, 472, 473, 474, 488, 489, 490, 491, 494, 495, 502, 509, 514, 515, 520, 521, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 556, 563, 565, 567, 570, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 642, 644, 645, 646, 647, 648, 659, 664, 669, 679, 682, 690, 694, 695, 696, 697, 698, 700, 707, 708, 719, 759, 760, 791, 806, 809, 810, 820, 836, 839, 845, 854, 859, 862, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 908, 910, 912, 915, 916, 939, 941, 987, 988, 990, 992, 994, 995, 998, 999, 1002, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1023, 1028, 1029, 1032, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "transform_algorithm": [127, 133, 537, 543, 548, 1055], "transform_alpha": [127, 133, 537, 543, 548, 1052], "transform_dur": 298, "transform_func": 278, "transform_list": 869, "transform_max_it": [537, 543, 544, 548, 1049], "transform_method": 420, "transform_n_nonzero_coef": [127, 133, 537, 543, 548], "transform_n_nozero_coef": 133, "transform_output": [260, 271, 325, 474, 908, 1054, 1055], "transformed_grid": 157, "transformedtargetregressor": [1, 108, 191, 219, 397, 406, 416, 599, 600, 603, 999, 1047, 1049, 1052, 1057], "transformedtargetregressortransformedtargetregressor": 191, "transformer_": [253, 471], "transformer_list": [107, 416, 869, 872, 988, 1050, 1051], "transformer_nam": 298, "transformer_weight": [103, 470, 473, 869, 1044, 1051], "transformermixin": [1, 253, 298, 387, 399, 471, 1047, 1054, 1055, 1056], "transformers_": [470, 473, 1056, 1057], "transfus": 247, "transit": [54, 355, 389, 409, 1050], "transitive_target": 54, "translat": [108, 387, 425, 533, 620, 879, 880, 896, 995, 998, 1022], "transluc": 164, "transpar": [66, 320, 983, 1022], "transpil": 1017, "transpos": [61, 277, 427, 544, 546, 553, 666, 667, 668, 669, 794, 947, 984, 990, 998, 1010, 1031, 1039, 1053], "transposit": 947, "trapezoid": [1, 284, 712, 713, 998], "travel": 0, "travers": [367, 1001, 1005, 1057], "travi": [1039, 1047], "treat": [42, 44, 104, 148, 159, 186, 191, 219, 286, 324, 329, 334, 340, 368, 385, 397, 399, 412, 422, 423, 448, 567, 568, 594, 595, 597, 613, 614, 638, 644, 651, 677, 680, 735, 736, 744, 760, 789, 790, 793, 794, 879, 880, 886, 887, 890, 891, 895, 898, 899, 901, 910, 911, 955, 988, 990, 994, 998, 999, 1005, 1008, 1012, 1014, 1028, 1043, 1051, 1055, 1056], "treatment": [113, 190, 379, 414, 420, 475, 480], "tree": [1, 42, 45, 51, 62, 63, 66, 75, 78, 89, 96, 128, 137, 140, 141, 142, 144, 148, 149, 150, 151, 152, 155, 156, 158, 159, 160, 162, 173, 183, 186, 192, 194, 202, 227, 228, 240, 253, 254, 255, 256, 257, 274, 281, 283, 295, 297, 298, 301, 303, 311, 318, 319, 323, 328, 329, 331, 345, 368, 372, 380, 382, 391, 398, 399, 402, 413, 414, 415, 421, 426, 443, 447, 448, 449, 450, 451, 452, 454, 456, 463, 469, 501, 502, 506, 510, 520, 521, 525, 550, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 637, 638, 639, 640, 664, 694, 698, 708, 709, 717, 748, 754, 794, 796, 812, 827, 833, 834, 836, 845, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 871, 874, 883, 918, 919, 920, 921, 922, 923, 924, 942, 988, 995, 998, 999, 1004, 1005, 1017, 1018, 1019, 1020, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "tree_": [327, 363, 367, 855, 918, 919, 920, 921], "tree_copi": [850, 851], "tree_disp": 257, "tree_importance_sorted_idx": 194, "tree_indic": 194, "tree_optim": 295, "tree_preprocessor": [159, 219], "tree_stat": [850, 851], "treelit": 1017, "trein": 1042, "tremend": [324, 422], "trend": [156, 180, 192, 249, 314, 1022, 1046], "trent": [1022, 1045], "trevor": [173, 207, 332, 382, 634, 662, 727, 729, 730, 988, 994, 1010, 1043, 1044, 1047, 1048, 1049, 1051], "trevorstephen": [1043, 1045], "tri": [100, 132, 239, 307, 352, 373, 387, 390, 397, 400, 413, 455, 457, 459, 637, 638, 639, 676, 698, 704, 706, 708, 820, 1003, 1023, 1041, 1047, 1051, 1057], "triag": [0, 385, 388, 400], "trial": [42, 282, 453, 455, 466, 677, 803, 804, 994, 1045], "triangl": [399, 420, 449, 453, 465, 705, 996, 1001], "triangular": [415, 469, 617, 995], "tribe": 380, "trick": [1, 175, 252, 308, 352, 361, 371, 374, 388, 397, 416, 588, 595, 649, 678, 990, 991, 1002, 1012, 1013, 1030, 1031, 1034, 1040, 1048, 1056], "tricki": [413, 995], "trickiest": 385, "trigg": 572, "trigger": [104, 105, 389, 399, 409, 416, 867, 868, 870, 871, 930, 931, 947, 994, 1032, 1047, 1053, 1054], "triglycerid": [173, 382], "trim": [234, 415, 850, 851], "trimeta": 1050, "trinh": 1054, "tripl": 390, "triplet": 515, "tripramudya": 1055, "trishnendu": 1047, "tristan": 994, "triu": 50, "trivial": [47, 221, 271, 363, 385, 415, 824, 912, 915, 995, 1018, 1039], "troillard": [1055, 1056], "tropp": [541, 547], "troubl": [65, 423], "troubleshoot": 423, "troyanskaya": [634, 988], "true": [1, 42, 43, 44, 45, 46, 48, 49, 51, 53, 54, 56, 62, 63, 65, 67, 69, 71, 78, 83, 84, 87, 88, 89, 91, 92, 94, 97, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 122, 124, 125, 126, 127, 129, 134, 136, 138, 142, 144, 148, 150, 151, 153, 154, 155, 156, 159, 160, 162, 164, 165, 169, 172, 175, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 203, 204, 206, 207, 208, 210, 212, 214, 215, 216, 219, 221, 222, 223, 226, 227, 233, 234, 235, 237, 239, 242, 243, 246, 247, 250, 252, 253, 254, 255, 256, 259, 260, 262, 265, 267, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 303, 304, 307, 311, 313, 314, 315, 316, 319, 323, 324, 325, 327, 329, 331, 332, 333, 334, 335, 338, 340, 341, 342, 351, 352, 354, 355, 356, 359, 360, 361, 363, 364, 367, 368, 372, 373, 378, 380, 381, 383, 385, 386, 387, 390, 391, 392, 394, 398, 399, 402, 406, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 428, 429, 430, 432, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 525, 528, 529, 530, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 717, 718, 719, 720, 721, 724, 725, 726, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 744, 745, 746, 747, 748, 749, 756, 757, 758, 760, 762, 767, 773, 775, 784, 788, 789, 790, 791, 792, 793, 794, 795, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 820, 824, 825, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 928, 929, 930, 931, 941, 947, 948, 959, 960, 963, 964, 968, 969, 970, 971, 979, 984, 986, 987, 988, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1023, 1027, 1028, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "true_coef": [190, 203, 214, 652, 653, 658, 666, 667, 668, 687, 688, 689], "true_cov": [475, 477, 478, 484], "true_den": 303, "true_fac": 255, "true_fun": 292, "true_h": 331, "true_k": 360, "true_label": [333, 337, 338], "true_nam": [44, 1028], "true_relev": [732, 762], "true_w": 331, "true_weight": 198, "trujillo": [1053, 1054], "truli": [280, 284, 374, 718, 998], "truncat": [1, 106, 157, 240, 394, 540, 541, 545, 546, 547, 550, 682, 684, 732, 762, 803, 859, 923, 947, 987, 997, 998, 1012, 1028, 1032, 1033, 1034, 1045, 1047], "truncate_mod": 75, "truncatedsvd": [1, 157, 240, 360, 420, 540, 541, 545, 546, 547, 698, 869, 872, 1041, 1046, 1050, 1051, 1053, 1057], "truong": 1045, "trust": [50, 62, 104, 105, 113, 138, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 194, 200, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 389, 400, 409, 413, 1027, 1053], "trustworthi": [1, 331, 1047, 1048, 1053, 1054, 1055, 1056], "truth": [1, 26, 57, 67, 74, 79, 83, 91, 92, 95, 110, 114, 117, 127, 131, 155, 183, 203, 213, 219, 220, 256, 268, 280, 360, 399, 415, 709, 710, 711, 714, 718, 719, 720, 721, 723, 724, 727, 729, 730, 732, 734, 735, 736, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 789, 790, 791, 792, 793, 796, 797, 801, 802, 998, 1023, 1031, 1047, 1053], "truthi": [1, 959], "try": [42, 44, 49, 50, 51, 53, 61, 62, 73, 87, 104, 105, 127, 138, 143, 144, 145, 146, 147, 154, 155, 156, 159, 162, 170, 175, 180, 187, 190, 191, 192, 193, 196, 198, 200, 208, 247, 248, 249, 253, 257, 258, 259, 260, 263, 264, 267, 271, 275, 277, 278, 284, 289, 291, 295, 298, 311, 316, 324, 328, 329, 331, 332, 334, 339, 350, 355, 359, 360, 367, 380, 383, 384, 385, 387, 390, 391, 393, 397, 399, 403, 406, 409, 415, 418, 419, 422, 423, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 509, 573, 583, 595, 664, 679, 681, 695, 699, 805, 806, 809, 810, 818, 820, 828, 831, 832, 833, 835, 888, 890, 893, 895, 896, 897, 898, 899, 900, 901, 910, 929, 982, 987, 994, 995, 1004, 1013, 1014, 1018, 1021, 1022, 1023, 1025, 1028, 1030, 1031, 1032, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "tr\u00e9segni": [0, 1041], "ts_cv": [42, 51, 154], "tscv": [419, 827], "tseng": 415, "tsetogl": 1054, "tsilhouett": 92, "tslearn": 1017, "tsne": [1, 188, 239, 240, 241, 243, 244, 299, 300, 331, 399, 429, 439, 502, 694, 695, 696, 854, 858, 871, 972, 995, 1001, 1019, 1042, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "tsne_param": 298, "tsoumaka": [726, 740, 746, 998], "tspeng": [1054, 1055], "tsuga": 1052, "tsujii": 1012, "tsukada": 1051, "tsuruoka": 1012, "tsutomu": 1050, "tt": [160, 272, 471], "ttang131": 1049, "ttime": 92, "tttthomasssss": 1043, "tube": [916, 1013], "tue": [42, 154, 192, 1045], "tuft": 455, "tuhin": 1057, "tuk": 1057, "tulio": [1047, 1048], "tulken": 1049, "tulloch": [1042, 1043], "tumor": [173, 382, 414], "tune": [1, 42, 63, 78, 89, 104, 129, 138, 144, 154, 172, 173, 175, 186, 188, 192, 208, 223, 224, 236, 243, 247, 256, 269, 270, 280, 281, 282, 284, 295, 300, 319, 340, 348, 352, 355, 359, 368, 372, 373, 374, 398, 399, 410, 413, 415, 419, 422, 424, 425, 458, 468, 502, 557, 565, 566, 567, 600, 619, 620, 621, 623, 625, 626, 628, 629, 631, 649, 664, 665, 696, 700, 706, 708, 724, 738, 748, 790, 793, 805, 806, 822, 828, 833, 836, 866, 871, 890, 908, 915, 992, 993, 994, 995, 997, 998, 1001, 1002, 1004, 1012, 1013, 1019, 1024, 1034, 1039, 1053, 1055, 1057], "tuned_classifi": 335, "tuned_model": [271, 291], "tuned_model_coef": 291, "tuned_param": 45, "tuned_paramet": [110, 164, 275], "tunedthresholdclassifiercv": [1, 271, 291, 414, 805, 1057], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 271, "tupl": [46, 82, 83, 89, 133, 192, 237, 378, 379, 380, 387, 399, 419, 427, 440, 457, 459, 470, 473, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 511, 514, 516, 517, 518, 519, 520, 528, 539, 567, 568, 573, 574, 575, 576, 588, 589, 590, 593, 594, 595, 597, 633, 638, 639, 640, 717, 718, 725, 748, 787, 789, 803, 806, 820, 833, 850, 851, 869, 870, 880, 881, 885, 888, 896, 900, 912, 913, 914, 915, 916, 925, 931, 932, 934, 938, 939, 940, 941, 956, 964, 965, 982, 1005, 1045, 1046, 1050, 1051, 1052, 1057], "tur": 1057, "turn": [1, 29, 42, 67, 110, 186, 187, 191, 203, 234, 235, 251, 277, 302, 335, 361, 372, 373, 374, 380, 397, 399, 400, 415, 416, 418, 420, 423, 424, 425, 587, 588, 595, 613, 614, 839, 843, 912, 915, 933, 988, 992, 1000, 1003, 1008, 1022, 1032, 1044, 1046, 1047, 1052], "turquois": [128, 132, 133, 153, 225, 236, 242, 264, 265, 284], "tutori": [113, 164, 165, 166, 208, 221, 237, 277, 385, 386, 391, 393, 398, 409, 415, 458, 468, 697, 1013, 1030, 1042], "tutorial_hom": 1032, "tuveri": 1054, "tuzova": 1047, "tv": 92, "tw": [196, 379, 493, 514, 515, 664, 1013], "tweak": [1, 114, 253, 419, 964, 997, 1032, 1050], "tweedi": [1, 188, 197, 219, 470, 502, 558, 654, 675, 686, 712, 730, 751, 753, 755, 756, 758, 836, 871, 874, 875, 883, 890, 994, 1019, 1049, 1050, 1052], "tweedie_pow": 237, "tweedieregressor": [1, 42, 328, 331, 654, 675, 994, 1050, 1053, 1054], "tweet": 1022, "twelfth": 702, "twenti": [56, 250, 382, 412, 415, 1032], "twenty_test": 1032, "twenty_train": 1032, "twice": [63, 271, 289, 291, 359, 361, 387, 425, 625, 736, 738, 949, 1048, 1056], "twine": 389, "twinx": 340, "twister": 1050, "twitter": 389, "two": [1, 36, 42, 45, 47, 49, 53, 57, 60, 62, 65, 69, 71, 73, 74, 77, 89, 94, 98, 103, 104, 108, 112, 116, 117, 120, 121, 122, 124, 126, 127, 129, 132, 137, 138, 139, 146, 147, 148, 149, 151, 154, 155, 156, 157, 160, 170, 173, 175, 176, 177, 178, 181, 182, 186, 187, 188, 191, 192, 193, 198, 202, 203, 207, 208, 209, 210, 215, 219, 220, 221, 227, 228, 231, 236, 237, 241, 243, 244, 246, 251, 253, 254, 256, 262, 263, 264, 266, 267, 268, 271, 272, 274, 278, 284, 295, 301, 303, 306, 307, 309, 311, 318, 320, 323, 327, 328, 330, 331, 335, 339, 344, 345, 348, 349, 350, 352, 356, 359, 360, 361, 364, 368, 378, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 393, 397, 399, 400, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 463, 465, 470, 475, 476, 477, 478, 479, 480, 481, 482, 494, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 513, 516, 520, 525, 528, 542, 544, 546, 550, 553, 555, 556, 559, 566, 576, 587, 590, 596, 597, 598, 601, 602, 604, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 626, 627, 630, 634, 637, 638, 645, 649, 651, 676, 677, 679, 698, 705, 709, 710, 711, 718, 721, 722, 725, 727, 728, 729, 730, 737, 738, 741, 742, 744, 747, 749, 760, 761, 763, 769, 770, 777, 780, 783, 784, 785, 786, 787, 791, 792, 800, 801, 802, 803, 839, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 867, 868, 874, 875, 882, 883, 884, 885, 904, 905, 906, 910, 911, 918, 920, 921, 961, 977, 978, 984, 987, 988, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1023, 1027, 1030, 1031, 1032, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "two_mean": 78, "two_point_correl": [850, 851], "twoclass_output": 140, "twosigmajab": 1047, "twx": 50, "tx": 418, "tx_k": [418, 992], "txn": 50, "txt": [359, 379, 499, 509], "txt_sentoken": 1032, "ty": 418, "ty_k": 418, "tyagi": 1053, "tygert": [541, 547, 947], "tyler": [323, 1046, 1052, 1053, 1054], "tylerlanigan": 323, "type": [1, 45, 87, 88, 99, 102, 103, 113, 120, 122, 133, 147, 148, 150, 180, 187, 188, 190, 191, 192, 196, 203, 219, 221, 248, 253, 258, 260, 261, 263, 264, 267, 268, 271, 272, 278, 283, 284, 286, 287, 288, 291, 295, 308, 324, 334, 352, 359, 361, 367, 368, 373, 378, 379, 380, 382, 385, 388, 389, 390, 391, 397, 398, 403, 409, 412, 416, 423, 439, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 502, 514, 515, 521, 573, 578, 587, 588, 594, 595, 597, 606, 610, 623, 633, 635, 636, 644, 662, 664, 678, 680, 685, 693, 695, 698, 699, 705, 707, 713, 720, 722, 735, 736, 739, 744, 789, 790, 793, 794, 803, 804, 806, 812, 820, 829, 834, 836, 837, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 870, 871, 872, 875, 877, 883, 884, 890, 891, 908, 912, 913, 914, 915, 916, 926, 928, 930, 931, 934, 938, 939, 961, 962, 969, 972, 984, 985, 988, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1008, 1010, 1014, 1019, 1021, 1022, 1025, 1030, 1031, 1032, 1039, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "type_check": 389, "type_filt": 939, "type_of_target": [1, 399, 877, 891, 999, 1053, 1054, 1056, 1057], "type_of_target_": 891, "typed_ndarrai": 385, "typeerror": [253, 330, 390, 717, 934, 955, 982, 1046, 1047, 1050, 1052, 1056], "typic": [24, 61, 63, 128, 136, 149, 196, 203, 219, 223, 237, 252, 279, 280, 284, 286, 287, 304, 305, 329, 348, 360, 372, 378, 379, 380, 383, 387, 388, 389, 394, 398, 399, 409, 411, 413, 415, 416, 419, 420, 422, 423, 425, 449, 453, 455, 502, 547, 557, 559, 561, 562, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 635, 644, 646, 649, 660, 661, 662, 677, 688, 689, 718, 877, 884, 888, 891, 946, 947, 955, 958, 983, 987, 991, 994, 995, 997, 998, 999, 1000, 1004, 1006, 1022, 1032, 1048, 1052, 1055, 1056], "typo": [385, 400, 406, 1039], "tzu": 1043, "t\u00e9l\u00e9com": 0, "u": [42, 48, 49, 50, 51, 54, 69, 84, 86, 90, 120, 124, 131, 148, 149, 154, 175, 184, 190, 191, 192, 216, 220, 223, 227, 237, 240, 243, 250, 253, 259, 260, 263, 264, 268, 271, 272, 277, 280, 284, 291, 322, 324, 352, 359, 367, 373, 380, 385, 389, 391, 393, 397, 403, 406, 412, 415, 418, 420, 422, 423, 438, 469, 471, 488, 489, 490, 537, 543, 551, 552, 556, 558, 560, 562, 564, 566, 568, 571, 574, 576, 594, 595, 597, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 687, 690, 695, 699, 710, 726, 746, 761, 843, 844, 853, 861, 868, 890, 904, 911, 913, 916, 919, 921, 947, 990, 992, 997, 998, 1005, 1008, 1022, 1032, 1036, 1049], "u2uwz2": [173, 382], "u_": [412, 488, 489, 490], "u_1": [412, 990], "u_2": [412, 990], "u_i": [415, 488, 489, 490, 761], "u_init": 549, "u_k": [418, 420], "uai": 1010, "ubuntu": [372, 383, 391, 393], "ucdenv": 80, "uchida": [199, 1049], "uci": [46, 173, 271, 323, 379, 382, 506, 508, 510, 516], "ucl": 1011, "ucla": [276, 994], "udi": 1039, "udit": 1053, "ufmay": 1051, "ufunc": [191, 1056], "ugli": [228, 306, 309, 344], "ugo": 1053, "ugurcaliskan": 1043, "ugurthemast": [1042, 1043], "uhmann": 1052, "uieda": 1052, "uint": 1050, "uint32": [380, 503], "uint8": [87, 127, 379, 503, 512, 513, 1051], "uk": [1011, 1032], "ulloa": 1045, "ulrik": [415, 458, 468, 697], "ulterior": 51, "ultim": [89, 243, 386], "umar": [1047, 1048], "umass": [44, 56, 380, 1028], "umberto": 1051, "umbrella": 414, "umpi": 423, "un": [50, 385, 413, 423, 427, 539, 595, 801, 873, 882, 893, 897, 1048], "unabl": [50, 62, 104, 105, 143, 145, 146, 155, 156, 159, 162, 170, 180, 190, 191, 192, 193, 200, 203, 219, 247, 248, 249, 253, 257, 258, 259, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 332, 334, 339, 367, 374, 890, 1008, 1048], "unadjust": [415, 998, 1051], "unaffect": 1001, "unalt": 998, "unambigu": [286, 999, 1045], "unanim": 400, "unavail": [399, 664, 665, 959, 1046, 1052], "unbalanc": [1, 188, 280, 343, 346, 349, 419, 518, 637, 915, 935, 936, 987, 1012, 1019], "unbias": [110, 413, 417, 420, 443, 556, 662, 678, 680, 693, 994, 1027], "unbound": [71, 997, 1053, 1057], "uncalibr": [60, 61, 62, 443], "uncent": 200, "uncertain": [277, 338, 384], "uncertainti": [61, 154, 175, 182, 198, 279, 413, 415, 573, 574, 649, 870, 988, 1010], "uncertainty_index": [337, 338], "unchang": [191, 237, 284, 422, 439, 443, 448, 449, 450, 451, 452, 453, 455, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 698, 769, 805, 807, 808, 813, 815, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 857, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 1001, 1023, 1047, 1053, 1055], "unclaim": 388, "unclear": [384, 385, 507], "unclust": 452, "uncommon": [417, 664, 910, 1013], "uncompress": [46, 514, 515, 1032], "unconstrain": [154, 156, 192, 328, 334, 380, 1012], "uncorrect": [277, 601, 604], "uncorrel": [1, 283, 381, 534, 540, 547, 998, 1030], "uncorrupt": 43, "uncov": [134, 701], "undefin": [51, 280, 399, 718, 735, 744, 789, 967, 998, 1047, 1051, 1055], "undefinedmetricwarn": [1, 316, 735, 736, 789, 790, 793, 1048], "under": [1, 42, 45, 49, 60, 61, 63, 75, 101, 110, 111, 131, 148, 151, 192, 219, 246, 256, 277, 284, 286, 287, 319, 333, 379, 385, 387, 389, 391, 393, 399, 403, 409, 413, 415, 417, 419, 420, 423, 424, 452, 457, 459, 476, 477, 478, 479, 480, 481, 482, 538, 545, 547, 549, 660, 661, 662, 708, 712, 713, 714, 721, 748, 760, 794, 795, 803, 804, 855, 954, 994, 995, 996, 998, 1001, 1008, 1012, 1013, 1014, 1017, 1018, 1032, 1039, 1041, 1042, 1044, 1047, 1051], "underdetermin": 203, "underestim": [51, 151, 192, 219, 237, 277, 385], "underfit": [42, 69, 151, 175, 188, 193, 220, 223, 269, 293, 313, 324, 355, 422, 663, 806, 809, 810, 820, 832, 833, 870, 885, 993, 994, 1019], "underflow": [1047, 1052], "undergo": 283, "undergrad": 1022, "underli": [63, 90, 112, 158, 173, 191, 194, 220, 222, 223, 253, 271, 282, 302, 303, 352, 366, 373, 385, 397, 399, 402, 406, 411, 413, 415, 417, 419, 420, 421, 422, 424, 425, 443, 457, 458, 459, 468, 470, 471, 477, 478, 484, 530, 561, 562, 570, 571, 573, 574, 575, 576, 599, 600, 603, 608, 664, 665, 671, 674, 679, 681, 686, 697, 701, 805, 806, 809, 810, 820, 828, 831, 832, 833, 838, 839, 840, 841, 842, 843, 844, 853, 855, 910, 918, 919, 920, 921, 963, 994, 995, 999, 1004, 1011, 1013, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1055, 1056, 1057, 1058], "underrepres": 385, "underscor": [361, 387, 399, 982, 1029, 1039, 1049, 1052], "underset": [420, 994, 1001, 1014], "understand": [42, 47, 51, 75, 138, 180, 188, 192, 253, 271, 272, 275, 291, 329, 330, 345, 352, 359, 362, 363, 368, 384, 385, 386, 391, 397, 402, 415, 422, 423, 510, 836, 867, 868, 918, 919, 920, 921, 924, 987, 988, 995, 997, 1014, 1016, 1017, 1019, 1022, 1039, 1053], "understood": [278, 385, 415, 955, 1029], "undertak": 397, "undesir": [91, 176, 425, 828], "undistinguish": 419, "undistort": 127, "undo": [278, 880, 1043], "undocu": 1046, "unequ": [91, 1047], "uneth": 190, "uneven": [86, 272, 415, 419], "unevenli": [91, 219, 272], "unexpect": [91, 253, 368, 385, 390, 393, 403, 409, 541, 702, 998, 1013, 1041, 1047, 1048, 1051, 1053, 1055], "unexpectedli": [399, 1047], "unfair": 368, "unfinish": [384, 385], "unfit": [1, 90, 416, 440, 470, 575, 576, 608, 617, 1047, 1049, 1056], "unfold": [129, 388, 995], "unfortun": [151, 190, 191, 237, 393, 397, 422, 514, 515], "unhandl": 1048, "unhelp": 385, "uni": [60, 61, 62, 63, 107, 142, 175, 176, 178, 179, 180, 181, 182, 184, 210, 251, 252, 339, 355], "unicod": [361, 423, 493, 509, 588, 594, 595, 597, 963, 1039, 1047, 1051], "unicodedata": [594, 595, 597], "unicodedecodeerror": [423, 594, 595, 597], "unifi": [295, 386, 394, 397, 398, 422, 643, 1017, 1039], "unifom": 301, "uniform": [1, 57, 66, 71, 87, 150, 151, 155, 169, 176, 181, 184, 198, 199, 233, 244, 246, 249, 285, 301, 304, 305, 310, 313, 319, 321, 322, 325, 331, 333, 347, 387, 390, 409, 415, 444, 445, 557, 575, 576, 616, 617, 634, 645, 655, 656, 660, 674, 682, 683, 684, 705, 727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 796, 797, 810, 818, 820, 845, 846, 849, 852, 853, 860, 861, 875, 887, 889, 899, 935, 949, 987, 988, 997, 998, 1001, 1045, 1047, 1049, 1053, 1055], "uniform_averag": [438, 471, 488, 489, 490, 560, 562, 564, 566, 568, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 727, 729, 734, 751, 752, 754, 756, 757, 759, 791, 796, 797, 843, 844, 853, 861, 868, 911, 913, 916, 919, 921, 998, 1048], "uniform_labelings_scor": 71, "uniformli": [71, 144, 151, 168, 246, 262, 327, 387, 522, 523, 524, 557, 648, 810, 818, 820, 889, 987, 988, 998, 1001, 1008, 1043, 1048], "unigram": [278, 380, 423, 594, 595, 597, 1046], "unilev": 50, "unimod": [246, 480], "unimport": [424, 1006], "uninform": [61, 63, 325, 381, 390, 423, 987, 994, 1047], "uniniti": 393, "uninstal": 383, "unintention": 1008, "unintuit": 91, "union": [103, 191, 416, 744, 760, 869, 1046], "union_not_memb": 191, "uniqu": [1, 42, 60, 65, 76, 81, 82, 91, 92, 97, 101, 106, 145, 146, 152, 153, 154, 191, 193, 203, 234, 237, 264, 286, 307, 324, 325, 333, 340, 359, 360, 361, 379, 387, 394, 399, 415, 416, 419, 422, 423, 446, 456, 460, 462, 470, 473, 502, 555, 556, 557, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 616, 639, 640, 641, 672, 674, 682, 703, 715, 717, 760, 788, 806, 808, 820, 833, 838, 839, 842, 848, 857, 860, 862, 867, 869, 881, 883, 884, 891, 894, 910, 912, 918, 919, 920, 921, 935, 947, 961, 962, 994, 999, 1008, 1022, 1030, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "unique_label": [1, 83, 89, 360, 387, 394], "unit": [1, 62, 103, 112, 191, 196, 219, 237, 303, 315, 318, 335, 360, 380, 385, 386, 387, 391, 393, 394, 420, 423, 427, 470, 495, 496, 525, 530, 538, 539, 540, 547, 548, 595, 596, 597, 613, 614, 617, 664, 665, 682, 691, 705, 776, 857, 866, 867, 868, 874, 880, 882, 886, 888, 890, 896, 897, 898, 900, 901, 910, 911, 994, 996, 997, 998, 1003, 1008, 1014, 1017, 1030, 1043, 1047, 1053, 1054], "unit_eig_vec": 262, "unit_vari": [888, 900, 1051], "unitari": 947, "uniti": 29, "unittest": 385, "univ": [695, 699, 995], "univ_select": 107, "univari": [1, 17, 47, 48, 70, 81, 105, 107, 167, 168, 170, 188, 201, 218, 234, 290, 343, 377, 415, 416, 423, 451, 510, 531, 536, 598, 601, 602, 604, 605, 606, 608, 611, 612, 613, 614, 615, 633, 634, 635, 636, 651, 806, 811, 832, 836, 870, 871, 880, 885, 889, 890, 910, 915, 994, 1013, 1015, 1019, 1020, 1031, 1034, 1039, 1045], "univers": [0, 183, 191, 359, 380, 382, 388, 415, 420, 423, 596, 794, 845, 849, 905, 994, 996, 998, 1000], "unix": 423, "unknown": [51, 90, 191, 253, 277, 337, 339, 374, 380, 399, 409, 412, 423, 877, 883, 884, 961, 997, 1008, 1023, 1043, 1047, 1051, 1052], "unknown_typ": 409, "unknown_v": 159, "unknown_valu": [148, 159, 193, 256, 324, 884, 1008, 1051, 1053, 1054], "unlabel": [37, 44, 254, 329, 337, 338, 339, 341, 342, 399, 415, 905, 906, 907, 997, 1023, 1026, 1028, 1030, 1051], "unlabeled_indic": 338, "unlabeled_set": 337, "unless": [190, 253, 263, 268, 385, 387, 388, 397, 399, 409, 413, 415, 418, 426, 443, 450, 452, 454, 456, 458, 463, 464, 467, 470, 473, 478, 495, 502, 514, 515, 537, 541, 542, 543, 545, 548, 549, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 575, 576, 600, 608, 613, 614, 616, 617, 638, 640, 645, 652, 653, 657, 658, 659, 661, 663, 664, 665, 667, 669, 671, 672, 674, 682, 685, 694, 695, 696, 697, 698, 699, 700, 715, 720, 780, 784, 787, 806, 809, 810, 812, 820, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 852, 853, 856, 858, 860, 861, 863, 864, 867, 868, 869, 872, 891, 895, 896, 898, 899, 900, 901, 905, 906, 918, 919, 920, 921, 926, 930, 931, 947, 994, 997, 999, 1039, 1041, 1045, 1047, 1050, 1051, 1056, 1057], "unlik": [89, 90, 144, 191, 192, 239, 241, 267, 318, 346, 385, 387, 391, 397, 399, 406, 409, 417, 419, 420, 423, 452, 456, 541, 656, 657, 660, 661, 662, 688, 689, 791, 827, 850, 851, 890, 901, 913, 994, 997, 998, 1005, 1013, 1039, 1045], "unlimit": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "unlucki": 368, "unmaintain": 1039, "unmarri": 191, "unmeaning": 1046, "unmix": [125, 427, 539], "unmixing_matrix": 539, "unmodifi": [387, 399], "unnecessari": [144, 262, 390, 449, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 711, 1001, 1008, 1018, 1022, 1042, 1044, 1049, 1050, 1052, 1055], "unnecessarili": [243, 1046, 1049], "unnorm": [399, 542, 995, 1045, 1046], "unobserv": [154, 190, 191, 420], "unord": [415, 422, 1008], "unpack": 387, "unpen": [413, 654, 675, 686, 994], "unpickl": [1, 399, 582, 850, 851, 1045, 1051, 1055], "unpleas": 1041, "unpract": 997, "unprefix": 1045, "unprocess": [456, 594, 595, 597], "unprotect": 964, "unprun": [563, 564, 570, 571, 918, 919, 920, 921], "unquot": 237, "unrealist": 380, "unreason": [237, 419], "unreg": 353, "unregular": [883, 906, 1030, 1048], "unrel": [324, 373, 390, 393, 423, 521], "unreli": [271, 416], "unrepresent": 925, "unrestrict": 499, "unrol": 243, "unrot": 134, "unsaf": 540, "unsampl": 990, "unscal": [318, 323, 994, 998, 1047, 1053], "unscaled_clf": 323, "unseen": [110, 149, 170, 208, 223, 227, 290, 304, 352, 374, 377, 387, 398, 399, 415, 419, 856, 887, 899, 989, 998, 1004, 1006, 1008, 1014, 1023, 1042, 1047, 1051], "unseen_featur": [423, 587], "unset": [373, 399, 1047], "unsetmetadatapassederror": 406, "unshad": 420, "unshifft": 683, "unshift": 914, "unsign": [87, 128, 380, 588, 963], "unsmooth": 421, "unsort": [1001, 1040, 1043, 1047], "unspecifi": [605, 606, 808, 995], "unstabl": [73, 100, 191, 415, 417, 418, 695, 699, 946, 947, 1014, 1043, 1044, 1046, 1051, 1053, 1055], "unstack": [237, 280], "unstructur": [52, 70, 73, 74, 75, 81, 188, 243, 315, 415, 447, 451, 469, 509, 536, 863, 1010, 1019, 1022, 1043], "unsuccess": 49, "unsupervis": [1, 5, 26, 33, 44, 50, 71, 83, 105, 106, 117, 124, 143, 157, 246, 254, 304, 305, 347, 359, 360, 368, 377, 380, 387, 398, 399, 415, 418, 420, 421, 422, 423, 424, 439, 448, 451, 538, 540, 542, 543, 545, 548, 549, 555, 569, 572, 573, 575, 576, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 634, 636, 640, 641, 644, 645, 646, 647, 648, 683, 806, 809, 810, 812, 820, 829, 834, 837, 852, 853, 856, 858, 859, 860, 861, 866, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 902, 903, 907, 914, 995, 998, 1004, 1011, 1020, 1023, 1024, 1026, 1028, 1034, 1039, 1042, 1052, 1056], "unsupport": [406, 409, 499, 1047, 1052], "unsur": 911, "untangl": 129, "untar": 46, "unterthin": [318, 1042, 1043, 1044], "until": [89, 173, 227, 289, 329, 331, 390, 399, 400, 412, 415, 419, 424, 514, 515, 563, 564, 565, 566, 570, 571, 572, 599, 652, 653, 658, 659, 664, 665, 666, 667, 668, 669, 672, 673, 674, 677, 682, 683, 684, 700, 803, 804, 809, 810, 867, 868, 907, 910, 918, 919, 920, 921, 973, 987, 994, 995, 1003, 1011, 1014, 1032, 1042, 1046, 1047, 1053], "untransform": [352, 470, 473, 1009], "untru": 998, "untrust": 409, "untun": [151, 335], "unus": [120, 130, 192, 216, 239, 241, 469, 585, 769, 777, 987, 995, 1039, 1047, 1049, 1050, 1052, 1054], "unusu": [63, 412, 1004, 1008, 1047], "unveil": 1045, "unvendor": 1047, "unwant": [220, 359], "unweight": [187, 232, 469, 653, 659, 684, 713, 719, 735, 736, 744, 789, 790, 793, 794, 845, 846, 847, 848, 849, 988], "unwieldi": 881, "uoa": 903, "up": [1, 46, 49, 71, 78, 80, 81, 82, 86, 89, 91, 96, 103, 112, 113, 119, 122, 136, 143, 154, 187, 191, 192, 198, 203, 212, 220, 235, 236, 264, 271, 279, 282, 298, 311, 316, 319, 324, 331, 335, 338, 345, 352, 355, 359, 361, 374, 379, 380, 385, 389, 391, 392, 393, 394, 397, 399, 400, 413, 415, 420, 422, 423, 449, 453, 454, 455, 456, 458, 462, 465, 466, 467, 514, 515, 542, 555, 556, 563, 564, 565, 566, 567, 568, 570, 571, 572, 616, 633, 638, 639, 645, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 687, 688, 689, 690, 698, 711, 775, 803, 804, 808, 809, 810, 812, 834, 884, 885, 888, 900, 918, 919, 920, 921, 924, 947, 950, 951, 987, 990, 994, 995, 998, 1001, 1008, 1012, 1013, 1018, 1021, 1022, 1031, 1032, 1039, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "upadhyai": [1045, 1046, 1047, 1048], "upcast": [1049, 1053], "upcom": [180, 383], "updat": [46, 78, 96, 138, 144, 153, 251, 327, 361, 384, 385, 389, 393, 399, 409, 415, 420, 422, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 803, 804, 805, 806, 807, 808, 809, 810, 813, 815, 820, 824, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 973, 994, 1001, 1002, 1003, 1012, 1021, 1022, 1040, 1046, 1047, 1048, 1050, 1052, 1054, 1055, 1057, 1058], "update_from": 305, "update_func": 305, "update_h": 553, "update_layout": [144, 278], "update_legend_marker_s": 305, "update_terminal_region": 1048, "upgrad": [327, 328, 329, 330, 331, 332, 333, 334, 335, 403, 1018, 1039, 1044, 1047], "upload": [379, 383, 389, 397, 677], "upload_d": 379, "upon": [237, 244, 253, 311, 380, 385, 397, 399, 409, 567, 568, 633, 636, 677, 795, 803, 804, 850, 851, 987, 994, 1014, 1023, 1032, 1053], "upper": [42, 45, 47, 60, 105, 108, 111, 112, 113, 140, 141, 142, 150, 151, 152, 153, 159, 161, 169, 179, 181, 184, 191, 213, 219, 225, 226, 229, 233, 236, 237, 250, 254, 255, 276, 277, 278, 291, 303, 304, 314, 323, 340, 347, 350, 352, 354, 415, 421, 469, 594, 595, 597, 601, 619, 620, 621, 623, 625, 626, 628, 629, 631, 638, 639, 641, 643, 656, 660, 683, 741, 794, 883, 884, 912, 913, 914, 934, 997, 998, 1001, 1008, 1012, 1013, 1014, 1047], "upperbound": 740, "uppercas": [399, 1052], "uppercase_initi": 423, "upperlimit": 710, "upright": 380, "upstream": [372, 385, 389, 393, 397, 1008, 1048], "upward": [456, 462], "ur": 1050, "urbanowicz": 998, "urbanowicz2015": 998, "urcrnrlat": [49, 311], "urcrnrlon": [49, 311], "uri": 54, "url": [50, 54, 173, 379, 382, 387, 389], "urllib": [46, 54], "urlopen": 54, "urlretriev": 46, "urlu": 1057, "urvang": [1047, 1049], "us": [0, 1, 14, 15, 18, 24, 26, 29, 36, 41, 42, 45, 46, 47, 49, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 65, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 126, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 231, 234, 236, 237, 239, 240, 241, 242, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 355, 358, 361, 363, 365, 366, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 392, 394, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 431, 433, 434, 436, 437, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 499, 500, 502, 504, 505, 507, 509, 512, 514, 515, 517, 520, 521, 522, 525, 526, 528, 529, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 732, 733, 734, 735, 736, 738, 741, 742, 743, 744, 745, 747, 748, 749, 751, 752, 754, 756, 757, 759, 761, 762, 763, 764, 765, 769, 770, 772, 773, 774, 775, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 930, 931, 933, 936, 937, 942, 944, 946, 947, 951, 954, 955, 956, 958, 961, 965, 967, 969, 970, 972, 974, 975, 976, 982, 987, 988, 990, 991, 993, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "usa": [276, 380, 907, 988, 995, 1010, 1011], "usabl": [154, 379, 385, 387, 399, 409, 423, 806, 1039, 1046, 1053, 1054], "usag": [40, 76, 87, 104, 107, 116, 128, 136, 170, 191, 192, 247, 251, 253, 270, 271, 307, 309, 315, 344, 361, 372, 380, 384, 385, 387, 388, 392, 393, 395, 399, 400, 403, 409, 415, 419, 420, 425, 426, 450, 452, 456, 470, 495, 500, 502, 518, 521, 525, 529, 540, 541, 547, 555, 567, 568, 597, 615, 646, 654, 664, 665, 666, 672, 673, 674, 675, 682, 683, 684, 685, 686, 696, 784, 787, 798, 799, 866, 867, 869, 910, 918, 919, 920, 921, 947, 987, 988, 990, 997, 998, 999, 1001, 1013, 1020, 1021, 1023, 1027, 1034, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "usal": 196, "usd": 256, "use_encoded_valu": [148, 159, 193, 256, 324, 884, 1008, 1051], "use_idf": [420, 423, 596, 597, 1032], "usecas": [328, 331, 333, 415, 568], "useless": [53, 147, 280, 391, 424, 521, 534, 664, 718, 994, 1008, 1048], "user": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 61, 63, 89, 102, 124, 144, 184, 188, 191, 207, 239, 253, 267, 274, 284, 286, 295, 298, 304, 305, 308, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 368, 372, 373, 379, 383, 384, 385, 387, 389, 391, 392, 393, 397, 398, 399, 403, 406, 409, 413, 415, 416, 417, 419, 420, 422, 423, 424, 426, 427, 428, 429, 432, 438, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 943, 947, 987, 988, 994, 995, 997, 998, 999, 1001, 1008, 1012, 1017, 1018, 1022, 1025, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "user_guid": 42, "user_r": 416, "userguid": 1046, "usernam": 403, "userscript": 393, "userwarn": [78, 96, 140, 184, 211, 228, 272, 353, 364, 390, 718, 1008, 1045, 1047, 1052], "ushtanit": [1051, 1052], "usp": 43, "usr": 383, "usual": [42, 51, 74, 110, 111, 113, 150, 151, 153, 159, 190, 192, 205, 219, 220, 270, 271, 274, 277, 286, 287, 291, 319, 330, 348, 368, 372, 373, 383, 385, 387, 393, 397, 398, 399, 403, 406, 412, 415, 416, 419, 420, 422, 423, 424, 456, 462, 544, 546, 548, 553, 565, 566, 613, 614, 636, 646, 664, 665, 672, 673, 674, 682, 683, 684, 698, 732, 764, 812, 834, 838, 910, 947, 987, 988, 990, 993, 994, 995, 997, 998, 999, 1002, 1003, 1004, 1005, 1008, 1012, 1013, 1014, 1023, 1029, 1030, 1054], "utc": 998, "utf": [359, 361, 423, 493, 509, 588, 594, 595, 597], "util": [1, 3, 9, 16, 34, 37, 46, 48, 49, 82, 89, 90, 95, 119, 136, 138, 159, 219, 221, 227, 235, 241, 249, 253, 255, 265, 283, 285, 298, 320, 327, 340, 348, 352, 359, 373, 379, 380, 385, 386, 387, 388, 397, 398, 399, 411, 414, 415, 416, 419, 420, 423, 443, 449, 450, 453, 455, 459, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 539, 540, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 587, 588, 594, 596, 597, 600, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 696, 805, 806, 807, 808, 813, 815, 824, 828, 830, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 857, 860, 861, 867, 868, 870, 873, 875, 876, 877, 882, 889, 890, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 996, 998, 999, 1008, 1009, 1017, 1022, 1024, 1034, 1039, 1040, 1042, 1043, 1045, 1046], "utilis": 1045, "utkarsh": [1045, 1046, 1047, 1048], "utl": 424, "utstat": 650, "uttam": 1052, "uv": [124, 420], "uw": [173, 382, 1051], "uwha": [1052, 1053], "v": [0, 1, 29, 42, 47, 51, 52, 54, 56, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 81, 83, 89, 92, 103, 108, 109, 112, 114, 115, 116, 124, 126, 127, 131, 142, 144, 145, 146, 151, 152, 153, 164, 169, 175, 188, 189, 194, 197, 208, 217, 218, 219, 220, 223, 224, 228, 234, 243, 250, 263, 264, 267, 268, 269, 273, 293, 295, 309, 325, 327, 345, 356, 360, 368, 373, 377, 382, 385, 391, 393, 399, 411, 412, 413, 417, 418, 420, 423, 438, 447, 451, 458, 468, 469, 470, 471, 476, 479, 480, 481, 482, 483, 488, 489, 490, 502, 518, 530, 536, 537, 543, 547, 551, 552, 556, 558, 560, 562, 564, 566, 568, 570, 571, 574, 576, 587, 595, 599, 600, 606, 612, 617, 636, 637, 640, 641, 645, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 682, 684, 685, 694, 701, 705, 707, 710, 723, 742, 743, 745, 760, 761, 763, 794, 801, 806, 811, 818, 820, 832, 836, 838, 839, 840, 843, 844, 845, 853, 861, 863, 866, 868, 870, 871, 874, 877, 883, 884, 885, 890, 891, 894, 904, 910, 911, 912, 913, 915, 916, 919, 921, 925, 992, 993, 994, 995, 998, 999, 1000, 1003, 1006, 1008, 1012, 1013, 1015, 1019, 1034, 1039, 1042, 1043, 1044, 1047, 1049, 1050, 1053, 1054, 1057], "v0": [389, 477, 478, 484, 518, 594, 595, 597, 806, 820, 869, 872, 1040, 1047, 1048, 1049], "v1": [271, 332, 379, 403, 567, 568, 803, 804, 1051, 1054, 1055, 1056, 1057], "v10": 271, "v11": 271, "v12": 271, "v13": 271, "v14": 271, "v15": 271, "v16": 271, "v17": 271, "v18": 271, "v19": 271, "v2": [271, 380, 503, 670, 691, 692, 994], "v20": 271, "v21": 271, "v22": 271, "v23": 271, "v24": 271, "v25": 271, "v26": 271, "v27": 271, "v28": 271, "v3": 271, "v4": 271, "v5": [271, 1047], "v6": 271, "v7": 271, "v8": 271, "v9": 271, "v_": [412, 423], "v_1": 412, "v_2": 412, "v_i": 1003, "v_ih_j": 1003, "v_init": 549, "v_j": [415, 761, 1003], "v_k": [418, 420, 537, 543, 551, 552], "v_measur": [742, 801], "v_measure_scor": [1, 56, 71, 72, 83, 92, 333, 360, 415, 723, 742, 743, 763, 998, 1048], "v_new": 866, "va": [46, 149, 171, 288, 306, 308, 354], "vac": 295, "vacaliuc": [1047, 1048], "vacat": 380, "vachan": 1050, "vadim": [1047, 1051, 1052], "vaerenbergh": [1054, 1055], "vaggi": [1041, 1042], "vaillant": 1051, "val": [106, 231, 277, 949], "val_errors_with": 149, "val_errors_without": 149, "val_pr": 149, "val_scor": 150, "vale": 1049, "valencia": [1053, 1055], "valentin": [1042, 1044, 1054, 1055], "valero": 50, "valgrind": 388, "valid": [1, 46, 51, 52, 62, 63, 88, 89, 90, 91, 104, 105, 107, 108, 110, 114, 131, 136, 142, 144, 147, 148, 149, 150, 151, 154, 155, 163, 167, 170, 171, 173, 183, 188, 191, 193, 197, 203, 205, 207, 213, 219, 221, 227, 237, 253, 255, 259, 264, 267, 269, 274, 277, 278, 279, 281, 283, 284, 285, 286, 289, 290, 291, 292, 295, 302, 316, 319, 324, 327, 329, 334, 340, 348, 355, 363, 373, 380, 385, 388, 397, 398, 399, 409, 410, 413, 415, 416, 417, 420, 421, 422, 423, 424, 429, 431, 443, 448, 449, 451, 452, 453, 455, 456, 463, 469, 470, 474, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 499, 507, 508, 510, 521, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 555, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 581, 583, 588, 589, 595, 599, 600, 603, 608, 638, 640, 644, 645, 646, 647, 648, 649, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 698, 705, 707, 708, 712, 719, 734, 768, 771, 780, 784, 785, 786, 791, 798, 799, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 844, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 876, 882, 890, 902, 903, 905, 906, 908, 910, 912, 915, 917, 918, 919, 920, 921, 930, 931, 932, 933, 934, 941, 953, 955, 958, 982, 983, 984, 985, 986, 988, 997, 998, 999, 1001, 1002, 1006, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1023, 1026, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "valid_metr": [850, 851, 1001, 1055], "valid_scor": 993, "validate_metadata": [253, 955], "validation_curv": [1, 333, 355, 406, 829, 993, 1046, 1047, 1048, 1051, 1055], "validation_fract": [149, 154, 227, 330, 422, 565, 566, 567, 568, 672, 673, 674, 682, 684, 867, 868, 1012, 1047, 1053], "validation_score_": [154, 567, 568], "validation_scores_": [867, 868, 1054], "validationcurvedisplai": [1, 293, 993, 1055], "validationerror": 1053, "vallei": 324, "vall\u00e9": 1046, "valu": [1, 19, 26, 42, 43, 45, 49, 50, 51, 52, 54, 56, 57, 58, 62, 63, 67, 71, 74, 76, 78, 80, 87, 89, 94, 95, 96, 100, 104, 106, 108, 110, 112, 114, 124, 127, 134, 136, 138, 140, 142, 143, 144, 145, 146, 148, 151, 152, 155, 156, 158, 159, 168, 169, 171, 172, 175, 178, 179, 181, 183, 190, 191, 192, 193, 194, 196, 198, 199, 201, 203, 205, 207, 208, 209, 210, 212, 217, 219, 220, 221, 223, 225, 234, 237, 238, 241, 242, 246, 247, 248, 249, 250, 251, 252, 256, 259, 260, 262, 268, 270, 271, 273, 275, 277, 278, 280, 282, 283, 284, 286, 288, 289, 290, 291, 293, 298, 301, 311, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 329, 335, 340, 348, 352, 353, 355, 359, 360, 361, 363, 368, 372, 373, 374, 377, 378, 379, 380, 382, 386, 387, 388, 390, 391, 392, 394, 397, 398, 399, 402, 403, 406, 412, 413, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 496, 497, 499, 502, 503, 504, 507, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 775, 777, 780, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 818, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 927, 928, 929, 930, 931, 934, 935, 936, 937, 939, 947, 949, 955, 958, 959, 960, 961, 962, 974, 975, 976, 987, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1012, 1013, 1019, 1020, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "valuabl": [149, 385, 988, 1022], "valuat": 422, "value_count": [42, 51, 192, 271, 291, 295], "value_kei": [397, 925], "value_typ": [425, 623], "valueerror": [1, 253, 254, 387, 391, 406, 474, 583, 609, 623, 641, 677, 720, 842, 860, 869, 875, 889, 929, 933, 934, 983, 984, 985, 1008, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "values_format": [703, 1049], "vamsi": 1054, "van": [0, 379, 404, 417, 475, 480, 540, 633, 698, 702, 988, 995, 998, 1004, 1022, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055], "vandana": 1050, "vander": 199, "vandermond": [220, 1008], "vanderpla": [0, 49, 182, 220, 239, 265, 303, 311, 405, 1016, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "vang": 1052, "vanilla": [219, 411, 414, 415, 453, 455, 466, 635], "vanilla_model": 271, "vanilla_model_coef": 291, "vanrel": 1045, "vanschoren": [379, 1051], "vapnik": [599, 600], "var": [116, 117, 141, 173, 199, 277, 382, 386, 424, 647, 651, 912, 913, 914, 915, 916, 998, 1047], "var_": [540, 848, 890, 1052], "var_smooth": [848, 1047], "varanasi": [1039, 1042], "vardhan": 1043, "varepsilon": [415, 1012, 1013], "vari": [45, 51, 63, 66, 69, 78, 80, 89, 96, 99, 108, 144, 145, 147, 157, 166, 172, 177, 179, 188, 191, 192, 208, 210, 213, 217, 226, 244, 251, 256, 267, 273, 277, 280, 291, 312, 318, 320, 321, 323, 333, 336, 342, 348, 351, 353, 357, 368, 372, 374, 380, 399, 409, 447, 451, 452, 506, 514, 520, 521, 528, 565, 566, 570, 571, 652, 653, 656, 657, 658, 659, 660, 661, 666, 667, 668, 669, 687, 690, 709, 769, 825, 829, 834, 836, 837, 867, 871, 875, 890, 907, 915, 918, 919, 972, 990, 993, 994, 998, 1001, 1002, 1011, 1014, 1019, 1022, 1046, 1047, 1055], "variabl": [1, 42, 47, 49, 50, 51, 71, 103, 141, 145, 148, 151, 152, 154, 165, 166, 168, 173, 182, 183, 186, 187, 192, 193, 196, 203, 208, 219, 223, 224, 237, 241, 253, 256, 268, 271, 277, 280, 287, 295, 297, 323, 324, 325, 368, 372, 374, 380, 382, 383, 385, 387, 389, 390, 393, 399, 406, 411, 415, 416, 417, 418, 420, 422, 423, 424, 456, 488, 489, 490, 493, 505, 507, 514, 521, 538, 540, 542, 547, 550, 559, 565, 566, 610, 612, 613, 614, 646, 656, 657, 660, 661, 667, 688, 689, 701, 715, 753, 807, 808, 811, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 830, 831, 832, 833, 835, 838, 842, 843, 873, 884, 887, 891, 899, 911, 987, 988, 990, 994, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1012, 1014, 1017, 1018, 1023, 1024, 1026, 1028, 1039, 1044, 1047, 1049, 1052, 1054], "varianc": [1, 36, 42, 43, 51, 63, 78, 89, 91, 96, 106, 110, 112, 116, 117, 120, 124, 125, 126, 129, 131, 132, 134, 137, 153, 154, 182, 184, 188, 191, 197, 199, 201, 203, 208, 209, 215, 219, 221, 224, 237, 267, 271, 274, 277, 280, 286, 287, 290, 291, 307, 313, 318, 323, 335, 360, 368, 377, 381, 394, 412, 413, 415, 417, 418, 419, 420, 421, 422, 427, 447, 451, 455, 469, 527, 530, 538, 539, 540, 547, 550, 555, 556, 561, 562, 564, 565, 566, 571, 609, 613, 614, 617, 631, 649, 650, 651, 658, 662, 663, 666, 668, 678, 679, 680, 681, 682, 693, 716, 734, 791, 803, 804, 848, 859, 874, 880, 886, 888, 890, 896, 898, 900, 901, 919, 921, 973, 974, 975, 979, 992, 993, 994, 996, 1001, 1002, 1003, 1006, 1010, 1012, 1013, 1014, 1015, 1019, 1020, 1028, 1030, 1031, 1034, 1039, 1047, 1049, 1050, 1051, 1052, 1053, 1054], "variance_weight": [734, 791, 998], "variances_": 609, "variancethreshold": [1, 424, 875, 988, 1042, 1049, 1052, 1055], "variant": [1, 63, 77, 124, 185, 187, 188, 277, 330, 331, 360, 361, 391, 415, 418, 420, 423, 425, 455, 466, 496, 499, 500, 518, 521, 549, 565, 566, 571, 621, 625, 628, 629, 633, 636, 644, 645, 647, 651, 678, 710, 807, 811, 813, 814, 815, 824, 832, 853, 871, 907, 988, 994, 995, 996, 997, 998, 1000, 1001, 1012, 1018, 1019, 1032, 1039, 1047], "variat": [1, 42, 45, 50, 71, 99, 122, 156, 173, 180, 181, 187, 188, 191, 224, 261, 263, 268, 274, 288, 297, 308, 328, 348, 382, 409, 419, 420, 449, 453, 465, 542, 649, 678, 680, 681, 803, 804, 824, 825, 827, 987, 998, 1008, 1011, 1014, 1017, 1019, 1028, 1030, 1033, 1034, 1042, 1044, 1045], "variegatu": [49, 311, 380, 504], "variet": 324, "varieti": [24, 61, 186, 264, 324, 348, 393, 415, 417, 423, 649, 1001, 1014, 1017, 1022, 1041, 1054, 1055], "varimax": [134, 420, 538, 1051], "variou": [3, 40, 42, 50, 70, 71, 73, 89, 92, 94, 95, 96, 113, 116, 119, 127, 188, 191, 197, 227, 229, 238, 239, 240, 241, 250, 295, 298, 314, 322, 328, 337, 338, 359, 361, 367, 368, 372, 379, 380, 381, 382, 385, 387, 390, 398, 400, 413, 415, 417, 443, 447, 478, 508, 520, 521, 531, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 600, 608, 653, 657, 659, 661, 664, 667, 669, 671, 672, 674, 679, 681, 682, 697, 698, 705, 806, 809, 810, 812, 820, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 870, 910, 911, 987, 988, 995, 998, 1001, 1005, 1008, 1012, 1014, 1017, 1019, 1021, 1022, 1031, 1032, 1039, 1042, 1043, 1056], "varma": 1048, "varoquaux": [0, 50, 66, 67, 73, 74, 79, 80, 85, 86, 87, 100, 101, 106, 114, 119, 120, 126, 130, 202, 208, 209, 216, 217, 240, 242, 249, 251, 264, 320, 352, 353, 400, 404, 1016, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "varun": [1045, 1046, 1047, 1053, 1054], "varunchaduvula": 1057, "vasani": 1050, "vasilei": [1022, 1046], "vasileva": 1053, "vasiloudi": 1044, "vassard": 1053, "vassilvitskii": [415, 453, 466], "vast": 385, "vastli": 323, "vathsala": [1046, 1047, 1048, 1049], "vatsan": 1045, "vavrova": 1046, "vazelh": [1047, 1048, 1049], "vazirgianni": 415, "vb": 542, "vbgmm": [1039, 1043, 1045], "vc": 383, "vcvarsal": 383, "vd": 1057, "ve": [360, 385, 423, 1022, 1032, 1046], "veal": 56, "veb2009": 415, "veb2010": 415, "vec": [124, 423, 544, 546, 553], "veclib": [372, 397], "vect": [46, 103, 278, 341, 423, 1032], "vect__": 278, "vect__max_df": 278, "vect__min_df": 278, "vect__ngram_rang": [278, 1032], "vect__norm": 278, "vector": [1, 16, 38, 45, 46, 47, 48, 50, 53, 56, 57, 62, 65, 67, 70, 74, 82, 105, 119, 124, 126, 127, 169, 175, 183, 200, 206, 223, 224, 231, 235, 251, 252, 259, 275, 277, 278, 282, 304, 316, 318, 335, 342, 344, 345, 348, 349, 350, 351, 352, 353, 355, 357, 360, 372, 374, 380, 390, 391, 394, 397, 399, 412, 413, 415, 417, 418, 419, 420, 422, 425, 426, 427, 443, 449, 450, 451, 453, 455, 456, 457, 459, 470, 471, 473, 474, 488, 489, 490, 491, 493, 495, 503, 515, 518, 527, 530, 537, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 573, 574, 575, 576, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 628, 629, 631, 637, 644, 646, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 697, 698, 699, 701, 705, 725, 741, 769, 774, 775, 776, 777, 779, 780, 781, 783, 784, 805, 806, 809, 810, 820, 828, 834, 837, 838, 839, 845, 846, 847, 848, 849, 852, 853, 854, 856, 857, 858, 860, 861, 862, 867, 868, 875, 877, 882, 890, 894, 897, 908, 910, 911, 912, 913, 914, 915, 916, 917, 930, 944, 946, 947, 961, 967, 987, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1008, 1012, 1014, 1019, 1020, 1023, 1026, 1029, 1032, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1052, 1057], "vectori": [399, 1049], "vectorizer2": 594, "vectorizer_param": 341, "vectorizermixin": 1049, "vectorizing_tim": 46, "vectors_test": 380, "ved": 1056, "vedaldi": [644, 990], "veenhui": [1054, 1055, 1056, 1057], "veerkhar": 1054, "veerlosar": 1049, "veghit": 1055, "vehag": [219, 237], "vehbrand": [219, 237], "vehga": [219, 237], "vehicl": [219, 237], "vehpow": [219, 237], "vel": 382, "velkov": 1041, "veloc": 385, "vembu": 413, "vempati": 990, "vendor": [253, 1044, 1047, 1048], "venezuela": [49, 311, 380, 504], "venkat": [0, 405], "venkatachalam": [1049, 1050, 1051, 1052, 1053, 1056, 1057], "venkatesh": 1049, "venna": 702, "venthur": 1047, "venu": 399, "venv": [383, 403], "vera": [1053, 1054], "verbos": [48, 76, 84, 88, 98, 103, 105, 107, 159, 206, 278, 315, 316, 318, 330, 341, 359, 383, 389, 399, 446, 449, 453, 455, 458, 460, 465, 468, 470, 473, 477, 478, 484, 537, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 599, 600, 633, 638, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 698, 700, 771, 784, 803, 804, 806, 809, 810, 812, 820, 829, 831, 832, 833, 834, 835, 837, 839, 841, 844, 859, 866, 867, 868, 869, 870, 871, 872, 907, 910, 911, 912, 913, 914, 915, 916, 964, 1018, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1057], "verbose_feature_names_out": [148, 191, 192, 193, 260, 324, 330, 331, 332, 334, 416, 470, 473, 869, 1052, 1056, 1057], "verbose_interv": [803, 804], "veri": [42, 51, 61, 63, 73, 74, 76, 78, 84, 86, 94, 96, 112, 113, 114, 116, 122, 127, 151, 157, 164, 180, 186, 191, 192, 193, 208, 219, 220, 221, 224, 227, 237, 243, 246, 252, 253, 256, 262, 279, 280, 283, 284, 286, 287, 293, 298, 315, 318, 330, 337, 340, 348, 352, 357, 359, 361, 368, 372, 380, 384, 385, 387, 390, 391, 393, 397, 398, 399, 409, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 448, 453, 458, 468, 477, 478, 484, 506, 510, 516, 547, 563, 564, 567, 568, 570, 571, 573, 574, 595, 596, 628, 656, 657, 660, 661, 662, 670, 688, 689, 691, 697, 698, 701, 711, 749, 752, 798, 803, 806, 814, 816, 820, 823, 826, 850, 851, 875, 879, 880, 881, 890, 902, 903, 912, 915, 918, 919, 920, 921, 947, 987, 990, 991, 993, 994, 995, 996, 997, 998, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1030, 1031, 1039, 1044, 1045, 1047, 1050, 1052, 1054, 1055, 1056], "verif": [380, 998, 1022], "verifi": [87, 94, 136, 154, 191, 219, 385, 390, 409, 411, 982, 1001], "verlag": 702, "vermeil": 1047, "veronda": 1040, "verrier": 1054, "versa": [191, 274, 359, 415, 425, 448, 613, 614, 839, 1043], "versatil": [425, 1013, 1022], "versicolor": [120, 286, 287, 510], "versicolour": [79, 120, 130, 132, 382, 1030], "version": [1, 6, 42, 51, 65, 80, 87, 89, 104, 124, 129, 138, 154, 177, 187, 192, 193, 196, 203, 217, 220, 221, 227, 233, 235, 253, 256, 260, 297, 315, 323, 327, 328, 329, 330, 332, 333, 334, 335, 348, 359, 372, 380, 384, 386, 387, 388, 391, 393, 394, 397, 399, 400, 403, 406, 408, 409, 415, 416, 418, 420, 422, 423, 425, 426, 427, 433, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 514, 515, 516, 518, 520, 528, 529, 533, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 710, 713, 714, 715, 719, 720, 724, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 740, 745, 746, 747, 748, 749, 752, 756, 757, 759, 760, 763, 764, 765, 767, 772, 773, 775, 784, 788, 789, 790, 791, 793, 795, 796, 797, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 819, 820, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 898, 899, 900, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 928, 930, 931, 941, 942, 946, 947, 954, 955, 956, 957, 958, 961, 964, 965, 968, 973, 979, 984, 985, 987, 990, 992, 995, 998, 1000, 1002, 1004, 1006, 1011, 1012, 1014, 1017, 1018, 1021, 1031, 1035, 1037], "versionad": [806, 809, 810, 820], "versionchang": 385, "versionwarn": 389, "versu": [66, 126, 137, 159, 166, 177, 188, 191, 197, 228, 234, 246, 251, 252, 265, 269, 272, 295, 304, 306, 336, 341, 345, 347, 348, 352, 415, 419, 422, 425, 510, 540, 562, 616, 637, 645, 664, 665, 672, 674, 680, 681, 682, 683, 789, 806, 811, 832, 842, 871, 906, 907, 914, 915, 919, 987, 994, 998, 999, 1004, 1011, 1012, 1013, 1019, 1030, 1047], "vert": [152, 193, 194, 327, 1012], "vertex": [54, 62, 415, 459, 1052], "vertic": [44, 54, 94, 150, 194, 208, 250, 251, 281, 297, 318, 321, 353, 354, 399, 412, 415, 420, 521, 703, 787, 1028], "verticalalign": [50, 62, 73, 74], "vese": 1051, "vesteghem": 1049, "veto": 400, "vettigli": 1048, "vga": 56, "vh": 947, "vi": [44, 46, 380, 705, 1028, 1047, 1050], "via": [0, 1, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 377, 382, 383, 386, 387, 389, 393, 397, 398, 399, 400, 403, 406, 412, 413, 415, 416, 418, 419, 420, 424, 425, 443, 507, 541, 545, 547, 549, 552, 565, 566, 573, 574, 603, 617, 622, 627, 630, 633, 644, 645, 646, 647, 662, 672, 674, 677, 679, 682, 693, 695, 698, 699, 715, 806, 830, 831, 832, 833, 834, 838, 839, 840, 842, 848, 856, 867, 869, 870, 871, 890, 891, 987, 992, 994, 995, 997, 998, 999, 1005, 1006, 1012, 1013, 1018, 1019, 1022, 1023, 1034, 1039, 1043, 1044, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "viacheslav": 1045, "viard": 1050, "vibrantabhi19": 1046, "vicdemand": 154, "vice": [191, 274, 359, 415, 425, 448, 613, 614, 839, 1043], "vicent": [1052, 1053, 1054], "vicpric": 154, "victoireloui": 1053, "victor": [415, 458, 468, 1046, 1049], "victoria": 154, "video": [332, 379, 388, 509, 999, 1022, 1024], "vie": 1045, "viega": 998, "view": [42, 76, 80, 110, 126, 154, 192, 216, 258, 372, 374, 385, 415, 423, 542, 651, 663, 850, 851, 925, 994, 995], "view_init": [192, 239, 241, 243], "viewabl": 385, "vighnesh": [1044, 1045, 1047], "vignesh": 1055, "vigni": 1056, "vijai": [1022, 1042], "vijalapuram": 1047, "vijeth": [1055, 1056], "vijitbenjaronk": [1046, 1047], "vika": [1051, 1053], "vikram": [1045, 1054, 1055], "vikrant": 1053, "vila": [1049, 1051], "vilhelm": [1046, 1047], "villalba": [1044, 1047, 1051], "villanova": [1051, 1052], "villaz\u00f3n": 1051, "villu": 1045, "vil\u00e9m": 1052, "vinayak": [1043, 1044, 1045, 1047, 1048, 1054, 1055], "vincent": [0, 81, 101, 178, 182, 405, 1022, 1039, 1041, 1043, 1044, 1046, 1049, 1054, 1055, 1056], "vineet": 1057, "vineyard": 324, "vinh": [415, 710], "vinh10a": 415, "viniciu": [1051, 1052], "vinit": 1047, "vink": [1050, 1052], "vinod": 1047, "vin\u00edciu": 1047, "viola": [380, 1047], "violat": [61, 348, 393, 397, 399, 641, 934, 1005, 1012, 1014], "violet": [131, 1055], "violeta": 1051, "vipin": 415, "viraj": 1047, "virchan": 1057, "virgil": [0, 47, 405, 1039, 1040, 1042], "virgilefritsch": 1039, "virginica": [79, 120, 130, 132, 286, 287, 382, 510, 998, 1030], "viridi": [65, 72, 298, 703], "viridis_r": 278, "virshup": 1056, "virtanen": 1044, "virtual": [386, 403, 419, 1022], "virtualenv": [383, 385], "visag": 1022, "visconti": 1043, "vishaal": [1047, 1048], "vishal": 1054, "vishwakarma": 1053, "visibl": [51, 191, 192, 221, 357, 379, 385, 415, 866, 1003, 1044, 1054], "vision": [540, 764, 765, 990, 994, 996, 1014, 1017, 1022, 1040], "visit": [367, 385, 1005, 1021], "visual": [1, 26, 41, 42, 47, 51, 57, 61, 65, 67, 77, 80, 83, 86, 91, 94, 95, 112, 121, 123, 126, 128, 131, 133, 143, 144, 152, 154, 155, 157, 161, 162, 171, 183, 187, 188, 192, 194, 203, 210, 219, 221, 237, 239, 240, 244, 245, 248, 251, 257, 258, 267, 269, 270, 273, 274, 278, 279, 282, 284, 286, 287, 303, 307, 308, 312, 314, 318, 322, 323, 327, 329, 338, 352, 377, 381, 383, 391, 392, 412, 417, 419, 420, 421, 422, 444, 447, 451, 452, 460, 478, 502, 508, 510, 513, 516, 520, 528, 538, 540, 547, 570, 572, 637, 639, 651, 664, 695, 698, 703, 704, 706, 707, 708, 724, 733, 788, 795, 807, 808, 811, 812, 823, 824, 825, 826, 827, 829, 836, 867, 871, 875, 879, 880, 882, 886, 887, 888, 890, 910, 912, 913, 915, 916, 924, 943, 993, 995, 996, 1001, 1002, 1004, 1005, 1008, 1014, 1017, 1019, 1023, 1034, 1042, 1049, 1050, 1051, 1053], "visualis": [124, 127, 134, 254, 550, 807, 808, 811, 823, 824, 825, 826, 827, 1001, 1018], "visualize_group": 272, "vitor": 1054, "vivek": [1046, 1047, 1048, 1056], "viz": [287, 392], "vjacheslav": 1043, "vlad": [0, 124, 254, 316, 404, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "vladimir": [541, 947, 994, 1049, 1053, 1056], "vlahava": [726, 746, 998], "vlajic": [1050, 1051, 1057], "vlasio": [1022, 1046], "vlasovet": 1052, "vlb": 56, "vliet": 1051, "vline": [110, 126, 206, 207, 208, 220, 277, 290, 319], "vlines_": 638, "vlo": 50, "vmax": [65, 85, 114, 124, 127, 134, 178, 181, 198, 203, 210, 235, 251, 266, 272, 315, 348], "vmin": [65, 74, 114, 124, 127, 134, 178, 181, 198, 203, 210, 235, 251, 266, 272, 315, 348], "vnherdeiro": 1049, "vo": [1045, 1053], "voc": 998, "vocabulari": [122, 234, 359, 360, 397, 423, 594, 595, 596, 597, 1000, 1023, 1032, 1039, 1041, 1044, 1047, 1050, 1052], "vocabulary_": [361, 423, 587, 594, 597, 1032, 1039], "void": 386, "vol": [63, 183, 203, 271, 283, 382, 415, 480, 565, 566, 634, 641, 651, 670, 691, 692, 803, 835, 847, 988, 1000, 1001], "voltag": 56, "volum": [0, 100, 111, 173, 180, 380, 382, 415, 417, 479, 540, 775, 994, 1013, 1022], "volume11": 415, "volume2": 682, "volume7": [672, 673], "volunt": 393, "voluntari": 359, "von": [415, 458, 468, 697, 1017, 1046, 1047], "voronoi": [80, 100, 415], "voss": 1047, "vote": [1, 13, 137, 139, 144, 159, 160, 161, 188, 297, 352, 399, 400, 507, 561, 562, 563, 566, 570, 571, 575, 576, 663, 838, 852, 853, 858, 860, 999, 1001, 1019, 1020, 1030, 1034, 1039, 1042, 1044, 1049], "votingclassifi": [1, 60, 62, 137, 188, 228, 364, 406, 422, 510, 570, 576, 637, 664, 848, 852, 915, 918, 987, 988, 1019, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1057], "votingregressor": [1, 162, 406, 422, 575, 988, 1048, 1049, 1050, 1053, 1056, 1057], "votingregressorifittedvotingregressor": 162, "voxel": [80, 100, 591], "vp": 1022, "vq": [82, 92], "vqean3": [1047, 1048], "vredevoogd": [1041, 1042], "vrigazov": 1054, "vrishank": [1046, 1047], "vs_buildtool": 383, "vstack": [50, 62, 91, 99, 178, 179, 201, 262, 266, 298, 311, 353, 637, 999, 1047], "vstolbunov": 1044, "vt": 556, "vufg": 1047, "vukolov": [1047, 1048], "vulner": 409, "vuw": 536, "vvz2010": 990, "vx": 71, "vya": [1047, 1048, 1049], "vyom": [1054, 1055], "vz2010": 990, "v\u00e1zquez": 1042, "v\u0103n": 1054, "w": [1, 44, 50, 52, 65, 69, 74, 76, 79, 82, 92, 98, 130, 133, 173, 186, 218, 223, 236, 253, 254, 262, 263, 264, 267, 268, 288, 316, 330, 331, 352, 353, 355, 361, 368, 373, 380, 382, 391, 409, 415, 416, 420, 422, 423, 427, 432, 438, 443, 471, 475, 478, 480, 488, 489, 490, 529, 544, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 594, 595, 597, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 699, 705, 731, 732, 762, 805, 806, 820, 828, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 857, 860, 861, 867, 868, 903, 905, 906, 910, 911, 912, 913, 915, 916, 918, 919, 920, 921, 944, 949, 994, 998, 1002, 1003, 1008, 1010, 1012, 1013, 1028, 1032, 1049, 1053, 1054, 1055, 1056], "w0": 122, "w1": [122, 422, 663], "w1992": 422, "w2": 422, "w3": 422, "w_": [420, 652, 653, 658, 659, 666, 667, 668, 669, 687, 690, 994, 998, 1000, 1003], "w_0": 994, "w_1": [422, 994, 1002], "w_1x_1": 1002, "w_2": [422, 994, 1002], "w_2x_2": 1002, "w_3": 994, "w_4": 994, "w_5": 994, "w_i": [422, 989, 998], "w_ij": 666, "w_init": [427, 539], "w_intercept": [910, 911], "w_j": [652, 658, 998, 1012], "w_k": [415, 422, 994], "w_l": 994, "w_mx_m": 1002, "w_n": 422, "w_new": 420, "w_p": 994, "w_pad": [124, 147, 364], "w_x_1": [910, 911], "w_x_n": [910, 911], "wa": [0, 42, 46, 52, 63, 74, 103, 104, 112, 117, 122, 156, 159, 173, 184, 191, 196, 223, 243, 253, 256, 268, 270, 271, 273, 275, 277, 283, 284, 291, 295, 315, 323, 327, 328, 332, 339, 340, 359, 361, 367, 368, 372, 380, 382, 383, 385, 389, 390, 399, 403, 406, 409, 411, 412, 414, 415, 418, 419, 423, 427, 439, 446, 447, 448, 449, 451, 452, 453, 455, 456, 460, 463, 466, 470, 474, 475, 480, 488, 489, 490, 491, 521, 529, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 559, 560, 561, 562, 563, 564, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 664, 665, 670, 678, 680, 682, 683, 691, 692, 694, 695, 698, 719, 735, 736, 789, 790, 793, 803, 804, 806, 809, 810, 820, 833, 835, 847, 854, 857, 859, 862, 866, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 902, 903, 907, 908, 941, 942, 965, 986, 987, 988, 997, 998, 1001, 1004, 1008, 1011, 1014, 1017, 1023, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "wadawson": 1043, "wadsworth": [918, 919, 1014], "waelbenamara": 1050, "wagner": 1053, "wai": [0, 1, 36, 42, 54, 63, 84, 94, 104, 107, 143, 150, 155, 157, 173, 182, 191, 193, 194, 220, 223, 224, 234, 237, 248, 249, 252, 253, 256, 257, 272, 277, 284, 286, 318, 319, 330, 332, 333, 368, 372, 373, 374, 379, 381, 383, 384, 387, 388, 393, 394, 399, 400, 403, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 430, 449, 450, 457, 458, 459, 465, 466, 468, 469, 475, 502, 561, 562, 569, 578, 595, 605, 606, 617, 638, 672, 673, 682, 683, 684, 705, 710, 712, 723, 742, 743, 760, 761, 763, 769, 780, 784, 794, 801, 831, 839, 856, 877, 883, 888, 894, 920, 921, 969, 972, 987, 988, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1021, 1022, 1023, 1031, 1032, 1039, 1041, 1047, 1052, 1053, 1057], "waijean": 1052, "wainwright": [727, 729, 730], "waist": 382, "wait": [54, 383, 385, 389, 399, 672, 673, 674, 682, 684, 1051], "waithera": 1049, "wal": 50, "waldo": 332, "wale": 154, "walk": [415, 421, 1042], "walker": 1043, "wall": 415, "wallach": [1043, 1044], "walli": 1047, "wallygauz": 1047, "walsh": [265, 1051, 1053], "walt": [1042, 1043, 1047], "walter": 1045, "walton": 332, "wan": 1047, "wang": [420, 542, 685, 695, 699, 732, 762, 994, 995, 998, 1042, 1044, 1045, 1046, 1047, 1051, 1054, 1055, 1057], "wangz10": 1044, "want": [0, 29, 42, 50, 57, 60, 61, 62, 89, 98, 104, 173, 187, 191, 219, 220, 221, 253, 256, 268, 271, 277, 292, 295, 301, 315, 342, 345, 359, 368, 372, 373, 374, 383, 384, 386, 387, 389, 390, 391, 397, 398, 399, 400, 403, 406, 409, 413, 414, 415, 416, 417, 422, 423, 424, 506, 509, 510, 516, 541, 555, 660, 661, 662, 664, 665, 672, 674, 680, 681, 682, 770, 805, 828, 856, 859, 875, 882, 903, 910, 987, 994, 997, 998, 999, 1002, 1004, 1008, 1009, 1013, 1017, 1018, 1023, 1031, 1039, 1053, 1057], "ward": [0, 1, 52, 58, 70, 73, 74, 75, 78, 80, 86, 87, 88, 90, 96, 188, 194, 243, 405, 423, 447, 451, 469, 536, 863, 1019, 1039, 1042, 1044], "ward__n_clust": 88, "ward_tre": [1, 88, 447, 451, 1039, 1043], "wardagglom": 1044, "wardagglomer": 1042, "wardclust": 1042, "wareh": 740, "warm": [388, 399, 537, 543, 549, 551, 552, 616, 659, 665, 672, 673, 674, 682, 683, 684, 994, 1018, 1049, 1051, 1053], "warm_start": [142, 179, 212, 330, 387, 391, 399, 422, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 616, 652, 654, 655, 658, 664, 666, 668, 672, 673, 674, 675, 682, 683, 684, 686, 803, 804, 859, 867, 868, 1004, 1020, 1034, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1053, 1055], "warn": [1, 14, 78, 96, 105, 219, 234, 253, 280, 298, 314, 315, 322, 372, 373, 385, 388, 389, 390, 399, 409, 423, 502, 544, 546, 553, 556, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 577, 578, 579, 580, 581, 582, 584, 608, 642, 699, 718, 719, 735, 736, 744, 789, 790, 793, 860, 874, 875, 913, 914, 915, 916, 918, 919, 920, 921, 930, 931, 937, 947, 955, 968, 984, 985, 987, 998, 1008, 1030, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "warn_for": 789, "warn_on_dtyp": 1048, "warn_when_not_sort": 865, "warner": [50, 1054, 1055], "warshal": [694, 995], "warshaw": 1045, "warut": [1046, 1047], "wase": [1056, 1057], "washington": [49, 182, 239, 265, 303, 311], "wasn": [103, 253, 1048], "waspa": 544, "wast": [144, 391, 419, 420, 987], "watanab": [1056, 1057], "watch": [51, 373], "watchtheblur": 1051, "water": 49, "waterburi": [1047, 1048], "waterland": 1042, "waterponei": [1045, 1046], "watson": [324, 416], "wattai": 1054, "wav": 379, "wave": [213, 385, 997], "waveform": 74, "wavelet": [52, 133, 420], "wavfil": 379, "waweru": 1056, "wa\u00ebl": 1057, "wb": [54, 409], "wchathura": 1054, "wclf": 350, "wconnel": 1050, "wdbc": [173, 382], "wderos": 1050, "wdevazelh": 1047, "wdisp": 350, "we": [0, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 60, 61, 62, 63, 65, 67, 69, 71, 74, 75, 76, 78, 81, 83, 84, 87, 89, 90, 91, 92, 96, 98, 99, 100, 103, 104, 105, 106, 108, 110, 112, 113, 114, 117, 119, 120, 122, 124, 125, 126, 127, 129, 131, 132, 134, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 161, 162, 164, 168, 169, 170, 172, 173, 175, 177, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 205, 207, 208, 210, 212, 214, 216, 219, 220, 221, 222, 223, 225, 227, 228, 231, 232, 233, 234, 235, 237, 239, 240, 243, 244, 246, 247, 249, 250, 251, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 267, 268, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 291, 292, 295, 297, 298, 300, 301, 303, 306, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 397, 398, 399, 400, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 456, 475, 476, 477, 478, 479, 480, 481, 482, 507, 529, 537, 538, 540, 543, 551, 552, 555, 567, 568, 569, 575, 576, 588, 589, 595, 617, 623, 633, 638, 639, 644, 646, 657, 661, 664, 665, 672, 674, 679, 680, 681, 682, 683, 698, 717, 724, 726, 732, 752, 762, 770, 787, 805, 812, 828, 829, 831, 852, 853, 854, 856, 858, 859, 860, 861, 862, 873, 882, 883, 884, 890, 895, 896, 898, 899, 900, 901, 903, 906, 910, 914, 962, 964, 987, 988, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1036, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1057], "wea": 413, "weak": [116, 149, 152, 223, 237, 283, 419, 565, 636, 1001, 1022, 1055], "weak_learn": 138, "weak_learners_info": 138, "weak_learners_misclassification_error": 138, "weaker": [108, 567, 568], "weakest": [363, 1014], "weaklearn": 559, "weakli": 100, "weather": [42, 51, 180, 192, 414, 994, 998], "web": [173, 379, 380, 382, 385, 388, 393, 409, 415, 423, 527, 903, 998, 1008, 1035, 1039], "weber": 1046, "weblog": 415, "webpag": [54, 196, 385], "websit": [379, 380, 382, 385, 400, 403, 1002, 1012, 1021, 1022, 1032, 1040, 1041, 1042], "wed": [42, 154, 192], "weed": 610, "week": [42, 51, 154, 334, 384, 385, 400, 502, 1022, 1053], "weekdai": [42, 192], "weekday_co": 42, "weekday_sin": 42, "weekend": [42, 154], "weezel": [1054, 1055], "wegelin": 418, "wehenkel": [422, 563, 564, 571, 572, 920, 921], "wei": [0, 405, 1012, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1052, 1055], "weibul": 322, "weidemann": 1053, "weigh": [419, 1046], "weight": [1, 44, 49, 52, 53, 56, 60, 67, 88, 103, 134, 151, 160, 161, 166, 169, 170, 179, 180, 187, 188, 191, 197, 203, 208, 210, 219, 223, 224, 226, 229, 230, 231, 233, 234, 235, 237, 253, 258, 262, 266, 271, 275, 280, 284, 286, 301, 310, 312, 313, 314, 316, 323, 325, 327, 330, 334, 335, 337, 338, 343, 348, 350, 352, 353, 355, 356, 359, 360, 361, 367, 368, 381, 382, 394, 397, 399, 414, 415, 417, 418, 420, 421, 424, 426, 432, 438, 443, 446, 449, 450, 452, 453, 455, 459, 465, 466, 469, 470, 471, 473, 475, 480, 488, 489, 490, 502, 521, 530, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 592, 595, 596, 597, 599, 603, 608, 609, 616, 617, 634, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 695, 699, 703, 704, 706, 708, 709, 713, 714, 715, 718, 719, 722, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 740, 741, 742, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 775, 788, 789, 790, 791, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 828, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 872, 875, 889, 890, 891, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 935, 936, 949, 973, 979, 988, 989, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1005, 1008, 1011, 1012, 1013, 1014, 1018, 1019, 1023, 1030, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "weight_concentration_": 803, "weight_concentration_prior": [262, 268, 803, 997], "weight_concentration_prior_": 803, "weight_concentration_prior_typ": [262, 268, 803, 997, 1045], "weight_vector": [1039, 1049], "weighted_acc": 406, "weighted_mod": [1, 394], "weighted_n_node_sampl": 367, "weightedmetaregressor": 253, "weights_": [262, 803, 804, 1053], "weights_handl": 232, "weights_init": 804, "weijiadu": 1053, "weinberg": 423, "weinsberg": 1039, "weinstein": 1040, "weisberg": 994, "weiss": [0, 264, 405, 415, 697, 1039], "weitzenfeld": 1022, "weka": 847, "welch": 1045, "welcom": [384, 385, 393, 400, 1018], "welind": 1039, "well": [0, 7, 42, 47, 50, 57, 60, 61, 63, 69, 73, 82, 87, 91, 92, 96, 103, 110, 117, 138, 139, 141, 144, 149, 151, 157, 159, 173, 180, 182, 190, 191, 192, 193, 196, 203, 207, 217, 219, 220, 221, 223, 227, 239, 240, 241, 244, 246, 250, 253, 256, 264, 271, 277, 284, 286, 288, 293, 295, 298, 301, 303, 304, 305, 325, 328, 329, 330, 331, 332, 333, 334, 335, 352, 355, 359, 360, 361, 368, 380, 382, 384, 385, 389, 391, 393, 394, 397, 398, 399, 400, 409, 413, 415, 417, 419, 420, 422, 424, 426, 429, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 465, 466, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 706, 727, 728, 729, 730, 791, 794, 798, 801, 803, 804, 805, 806, 809, 810, 820, 828, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 945, 946, 987, 988, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1011, 1012, 1014, 1015, 1017, 1018, 1022, 1031, 1032, 1039, 1040, 1043, 1045, 1046, 1047, 1050, 1057], "wen": 1054, "wenbo": [1049, 1051], "wendi": 1049, "wendling": 1046, "weng": 1013, "wenhao": [276, 1047, 1048], "wenhaoz": 276, "wenhua": 1045, "wenjian": 1045, "wenliwyan": 1050, "went": [389, 998], "were": [0, 42, 67, 103, 104, 107, 112, 113, 144, 148, 151, 154, 170, 173, 180, 187, 219, 220, 223, 247, 256, 286, 288, 315, 316, 323, 328, 329, 331, 332, 333, 334, 335, 340, 352, 359, 361, 367, 368, 379, 380, 382, 385, 386, 389, 397, 399, 406, 412, 416, 422, 423, 470, 473, 474, 502, 567, 568, 608, 809, 810, 825, 834, 857, 907, 908, 987, 990, 998, 999, 1014, 1031, 1032, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "weren": [359, 884, 1048], "werman": 1051, "werneck": 1047, "werner": [1046, 1051], "werror": 393, "wersd\u00f6rfer": 1041, "weslei": [596, 736], "westermann": [0, 375, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "western": 423, "weston": [43, 420, 541, 599, 600, 906], "westov": 1047, "wetter": 192, "weyb": 1057, "wfc": 50, "wget": 393, "wh": [420, 544, 546, 553], "wh_i": 420, "what": [0, 1, 42, 47, 50, 51, 74, 79, 86, 87, 117, 125, 129, 147, 190, 191, 208, 225, 227, 235, 248, 253, 260, 315, 359, 361, 363, 368, 373, 380, 383, 385, 386, 387, 389, 391, 393, 398, 399, 400, 402, 414, 415, 421, 422, 423, 509, 542, 594, 595, 597, 652, 658, 702, 895, 896, 898, 899, 900, 901, 918, 919, 920, 921, 997, 998, 999, 1001, 1014, 1018, 1023, 1039, 1046], "whatnot": 359, "whats_miss": 389, "whats_new": [389, 393], "wheel": [383, 385, 389, 403, 1025, 1049, 1051, 1053], "wheeler": [1050, 1051], "wheelhouse_upload": 389, "when": [0, 1, 42, 47, 48, 49, 51, 57, 60, 61, 62, 63, 69, 73, 74, 77, 90, 94, 101, 103, 104, 105, 110, 112, 113, 117, 124, 127, 128, 129, 131, 141, 144, 147, 148, 149, 151, 154, 155, 159, 160, 161, 170, 175, 186, 190, 191, 192, 193, 194, 198, 199, 203, 208, 210, 212, 216, 219, 221, 223, 224, 235, 246, 247, 248, 252, 253, 260, 263, 265, 273, 276, 277, 278, 279, 280, 284, 286, 287, 291, 295, 298, 300, 301, 304, 305, 306, 318, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 334, 335, 339, 340, 342, 348, 351, 352, 355, 359, 360, 361, 363, 368, 372, 373, 374, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 431, 438, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 521, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 581, 582, 584, 587, 588, 589, 590, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 612, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 706, 707, 708, 710, 711, 713, 714, 718, 719, 722, 733, 734, 735, 736, 738, 740, 741, 744, 752, 754, 757, 760, 761, 763, 767, 769, 773, 774, 775, 777, 780, 784, 787, 788, 789, 790, 791, 793, 794, 795, 797, 798, 799, 801, 803, 804, 805, 806, 809, 810, 811, 812, 820, 824, 825, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 897, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 929, 930, 931, 937, 941, 945, 946, 947, 948, 950, 951, 956, 959, 967, 987, 988, 990, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1018, 1021, 1022, 1023, 1029, 1030, 1031, 1032, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "whenev": [182, 190, 271, 368, 379, 393, 399, 403, 413, 488, 489, 490, 502, 634, 636, 989, 997, 1018, 1049], "where": [46, 49, 50, 52, 54, 56, 57, 60, 61, 62, 67, 87, 89, 91, 112, 117, 122, 124, 127, 133, 134, 138, 140, 142, 144, 148, 149, 151, 154, 156, 170, 171, 173, 175, 181, 184, 187, 191, 198, 203, 211, 220, 223, 228, 229, 230, 232, 236, 237, 239, 241, 242, 246, 247, 250, 253, 254, 256, 258, 268, 271, 273, 274, 277, 279, 283, 284, 286, 288, 289, 291, 295, 297, 316, 318, 320, 321, 322, 323, 324, 325, 327, 329, 330, 335, 338, 339, 346, 352, 355, 356, 357, 359, 363, 364, 368, 372, 373, 374, 379, 381, 382, 384, 385, 387, 389, 391, 392, 393, 397, 398, 399, 400, 403, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 438, 443, 450, 453, 454, 458, 467, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 493, 502, 532, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 588, 589, 590, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 615, 616, 617, 619, 621, 625, 628, 629, 631, 633, 634, 635, 636, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 694, 697, 698, 699, 702, 713, 717, 718, 722, 731, 735, 736, 737, 745, 747, 761, 769, 774, 775, 776, 779, 787, 788, 789, 790, 793, 794, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 873, 880, 883, 885, 886, 889, 890, 896, 898, 904, 905, 906, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 938, 939, 940, 941, 947, 955, 958, 983, 987, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1023, 1024, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "wherea": [51, 69, 82, 87, 101, 112, 155, 233, 256, 278, 279, 280, 286, 301, 323, 352, 355, 356, 374, 400, 419, 422, 450, 452, 571, 664, 665, 808, 824, 838, 990, 997, 999, 1001, 1008, 1014, 1052, 1057], "wherein": 399, "whether": [1, 46, 48, 51, 104, 136, 155, 178, 181, 183, 191, 192, 219, 223, 237, 240, 247, 253, 271, 275, 318, 367, 368, 373, 380, 383, 384, 385, 387, 389, 390, 391, 399, 406, 414, 415, 416, 417, 419, 420, 422, 424, 427, 446, 448, 457, 459, 460, 465, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 489, 490, 491, 493, 494, 497, 498, 502, 503, 509, 514, 515, 520, 528, 533, 537, 538, 543, 544, 545, 546, 548, 551, 552, 554, 558, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 587, 594, 595, 596, 597, 603, 608, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 635, 637, 638, 639, 641, 642, 643, 644, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 696, 700, 701, 703, 704, 706, 708, 710, 718, 748, 767, 773, 780, 784, 788, 795, 806, 809, 810, 811, 812, 820, 824, 825, 828, 829, 830, 833, 834, 836, 839, 841, 844, 845, 846, 847, 849, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 867, 868, 874, 891, 897, 910, 911, 912, 913, 914, 915, 916, 922, 924, 928, 930, 931, 932, 934, 946, 947, 954, 955, 971, 982, 986, 987, 988, 993, 994, 998, 1003, 1004, 1010, 1012, 1013, 1022, 1046, 1047, 1048, 1056], "whi": [191, 193], "which": [0, 1, 42, 45, 48, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 69, 71, 73, 74, 77, 78, 80, 83, 87, 89, 90, 91, 92, 99, 101, 103, 104, 105, 108, 110, 112, 113, 117, 120, 122, 126, 128, 129, 134, 138, 141, 142, 143, 144, 148, 150, 151, 154, 155, 157, 158, 159, 160, 161, 162, 164, 168, 170, 172, 173, 175, 176, 180, 181, 182, 186, 187, 190, 191, 192, 194, 196, 198, 199, 203, 208, 212, 219, 220, 221, 223, 225, 227, 233, 235, 236, 237, 239, 240, 241, 243, 246, 247, 250, 251, 252, 253, 254, 256, 257, 262, 263, 267, 268, 270, 271, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 295, 297, 298, 303, 304, 305, 314, 318, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 348, 352, 355, 357, 359, 360, 361, 363, 367, 368, 372, 373, 374, 377, 379, 380, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 402, 403, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 468, 469, 470, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 493, 529, 537, 538, 539, 540, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 585, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 617, 618, 619, 620, 621, 623, 625, 628, 633, 634, 635, 636, 638, 639, 640, 646, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 667, 669, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 686, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 713, 715, 722, 723, 725, 726, 729, 731, 732, 740, 741, 742, 743, 748, 749, 752, 762, 764, 784, 785, 786, 787, 788, 789, 795, 803, 804, 805, 806, 809, 810, 811, 812, 814, 816, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 867, 870, 874, 877, 881, 883, 884, 885, 888, 889, 890, 891, 892, 894, 902, 903, 905, 906, 907, 910, 912, 915, 916, 918, 919, 920, 921, 922, 926, 939, 942, 946, 947, 949, 954, 955, 956, 958, 967, 970, 973, 979, 982, 987, 988, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1023, 1025, 1027, 1030, 1031, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "whichev": [415, 422, 452, 550, 567, 568, 639, 656, 660, 662, 670, 688, 689, 703], "whidou": 1052, "while": [0, 1, 24, 42, 45, 46, 48, 50, 54, 57, 60, 63, 69, 71, 73, 77, 78, 82, 89, 96, 100, 103, 106, 108, 122, 128, 129, 138, 141, 144, 145, 149, 154, 156, 159, 173, 176, 181, 183, 184, 186, 190, 191, 192, 193, 196, 198, 200, 203, 208, 213, 219, 221, 223, 235, 246, 249, 250, 253, 254, 263, 264, 268, 270, 271, 272, 276, 277, 278, 280, 284, 285, 286, 287, 288, 290, 300, 318, 319, 320, 323, 324, 325, 327, 330, 333, 334, 345, 348, 359, 361, 367, 368, 373, 377, 378, 379, 380, 381, 384, 385, 387, 389, 390, 391, 393, 394, 397, 399, 400, 409, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 427, 450, 470, 473, 474, 489, 491, 502, 527, 538, 558, 563, 564, 565, 566, 570, 571, 572, 573, 574, 575, 576, 581, 588, 594, 595, 596, 597, 600, 603, 608, 612, 640, 649, 652, 653, 655, 662, 663, 664, 665, 682, 683, 684, 685, 714, 736, 760, 780, 784, 794, 800, 803, 806, 807, 808, 811, 812, 813, 814, 815, 816, 820, 821, 822, 824, 829, 831, 832, 833, 834, 835, 837, 845, 856, 858, 860, 861, 862, 869, 870, 871, 872, 873, 886, 898, 903, 908, 910, 911, 918, 919, 920, 921, 926, 951, 987, 988, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1008, 1010, 1013, 1014, 1017, 1018, 1023, 1029, 1030, 1031, 1032, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "whilst": [142, 241], "whisker": 48, "white": [1, 92, 94, 124, 180, 191, 233, 239, 304, 316, 320, 342, 347, 420, 423, 631, 1014, 1039, 1042, 1045, 1049, 1053], "whitekernel": [1, 175, 180, 181, 425, 617, 618, 620, 1050], "whiten": [44, 124, 125, 126, 302, 420, 427, 539, 540, 547, 888, 890, 1008, 1028, 1043, 1045, 1053, 1054, 1057], "whiten_solv": [427, 539, 1054], "whitening_": 539, "whitespac": 423, "whl": 389, "who": [0, 103, 191, 373, 380, 385, 392, 400, 403, 852, 853, 854, 856, 858, 860, 861, 862, 1017, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "whole": [48, 84, 107, 154, 162, 187, 220, 256, 274, 281, 348, 352, 363, 372, 385, 397, 398, 416, 418, 422, 425, 455, 489, 544, 561, 562, 563, 564, 569, 570, 571, 572, 576, 691, 692, 806, 809, 810, 820, 834, 845, 846, 847, 848, 849, 987, 998, 1008, 1032, 1047, 1049], "whose": [1, 89, 111, 112, 113, 173, 180, 219, 346, 380, 393, 394, 399, 413, 415, 417, 422, 424, 425, 428, 443, 444, 445, 454, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 521, 540, 544, 546, 547, 550, 553, 555, 578, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 646, 677, 701, 724, 806, 813, 820, 835, 856, 875, 902, 903, 946, 977, 978, 992, 999, 1003, 1004, 1005, 1013, 1042, 1047, 1048, 1050, 1053], "why": [63, 71, 86, 124, 138, 144, 154, 191, 193, 196, 208, 271, 274, 277, 295, 359, 360, 385, 393, 399, 415, 417, 420, 426, 450, 453, 457, 998, 1000, 1013, 1027, 1030, 1042], "wick": 1051, "wide": [63, 94, 95, 120, 141, 250, 319, 397, 415, 420, 423, 987, 994, 1017, 1022, 1032, 1039, 1041, 1055], "widehat": 178, "wider": [51, 221, 423, 923, 994], "widetild": 1014, "width": [46, 48, 51, 79, 87, 112, 120, 126, 127, 132, 133, 134, 141, 147, 148, 151, 161, 169, 177, 183, 202, 260, 262, 276, 301, 318, 320, 321, 324, 329, 332, 345, 382, 416, 444, 445, 458, 470, 499, 500, 512, 527, 592, 875, 923, 1008, 1012, 1014, 1029, 1030, 1047], "wiesel": [417, 428, 481], "wignal": [1042, 1043, 1049, 1050], "wijewardena": [0, 1042, 1043, 1044], "wiki": [54, 60, 391, 393, 601, 642, 674, 677, 701, 711, 852, 853, 858, 859, 860, 861, 888, 904, 918, 919, 994, 1014], "wikic": 990, "wikipedia": [36, 41, 60, 188, 393, 415, 601, 613, 614, 642, 662, 674, 677, 688, 689, 701, 710, 711, 713, 715, 718, 722, 724, 732, 735, 736, 737, 740, 741, 744, 749, 762, 789, 791, 792, 794, 795, 798, 799, 852, 853, 858, 859, 860, 861, 888, 904, 918, 919, 990, 994, 998, 1001, 1010, 1014, 1019, 1032, 1039, 1046], "wikipedia_principal_eigenvector": [54, 1019], "wikipediadet2017": 998, "wil": 1051, "wild": [1, 44, 378, 499, 500, 514, 515, 1028, 1034, 1039], "wilderness_area": 256, "wildli": [303, 997], "wilei": [382, 988], "wilhelm": [236, 1043, 1045, 1049], "wilk": 413, "wilksch": 1054, "willamett": 324, "willard": 1051, "willdarnel": 1049, "willduan": 1046, "william": [173, 380, 382, 425, 616, 617, 620, 625, 628, 645, 990, 998, 1002, 1046, 1047, 1048, 1049, 1054, 1055], "williamson": 1049, "willing": [190, 274, 414], "willocx": 1049, "willpeppo": 1051, "wilson": [112, 382, 1039, 1042], "wiman": 1039, "wimld": 1053, "winata": [1049, 1051], "wind": [192, 999], "windber": 1050, "windiana42": 1055, "window": [56, 341, 380, 385, 387, 388, 423, 1017, 1039, 1042, 1046, 1050, 1052, 1053, 1057], "windowsapp": 403, "windowserror": 1055, "windspe": [42, 192], "wine": [1, 47, 259, 323, 324, 378, 516, 1034], "wine_review": 324, "wineri": 324, "winn": 998, "winter": [42, 51], "winterman": 1040, "wip": [385, 393, 403], "wipf": [651, 994], "wire": [391, 540, 547], "wiryadi": [1051, 1057], "wisc": [173, 382, 905], "wisconsin": [1, 173, 194, 378, 506, 1006, 1034, 1044], "wise": [1, 45, 62, 82, 183, 220, 246, 287, 318, 360, 372, 399, 413, 415, 419, 420, 424, 464, 537, 540, 543, 547, 551, 552, 555, 556, 559, 561, 562, 565, 566, 598, 601, 602, 604, 605, 606, 612, 646, 658, 706, 760, 838, 857, 887, 900, 901, 904, 971, 973, 974, 975, 976, 979, 990, 992, 994, 998, 999, 1012, 1018, 1039, 1044, 1047, 1048, 1049], "wish": [379, 385, 392, 394, 403, 415, 947, 1024, 1032, 1046], "wishart": 803, "wissen": 456, "with_cent": [888, 900], "with_error": 707, "with_mean": [390, 890, 901, 1008, 1047, 1052], "with_scal": [888, 900], "with_std": [890, 901, 1008, 1047], "withheld": 419, "within": [1, 40, 42, 57, 94, 143, 145, 146, 149, 154, 158, 170, 172, 173, 215, 220, 221, 231, 237, 253, 257, 275, 276, 280, 290, 318, 319, 329, 346, 349, 352, 355, 361, 368, 372, 380, 385, 389, 394, 397, 399, 400, 406, 412, 413, 415, 416, 419, 421, 422, 426, 450, 454, 467, 469, 470, 472, 475, 480, 521, 555, 573, 574, 575, 576, 599, 600, 638, 698, 702, 705, 716, 731, 787, 803, 804, 811, 812, 824, 825, 834, 835, 850, 851, 852, 853, 858, 860, 861, 862, 869, 870, 871, 883, 891, 895, 896, 898, 899, 900, 901, 912, 913, 914, 915, 916, 918, 919, 920, 921, 987, 992, 994, 995, 1001, 1004, 1008, 1011, 1013, 1014, 1018, 1022, 1023, 1027, 1030, 1032, 1041, 1042, 1046, 1047, 1052, 1053, 1055, 1056, 1057], "without": [1, 42, 43, 51, 52, 60, 70, 76, 78, 86, 89, 90, 96, 100, 101, 108, 129, 144, 149, 150, 153, 154, 156, 159, 165, 169, 173, 182, 188, 190, 191, 192, 203, 208, 227, 246, 250, 253, 254, 256, 257, 259, 270, 271, 278, 282, 284, 295, 299, 300, 301, 307, 308, 309, 310, 318, 319, 323, 325, 327, 352, 355, 360, 374, 380, 381, 383, 385, 386, 387, 389, 390, 391, 394, 397, 398, 399, 406, 409, 415, 416, 420, 422, 423, 424, 425, 440, 445, 447, 452, 464, 475, 480, 502, 510, 521, 538, 540, 561, 562, 569, 585, 586, 617, 633, 637, 640, 645, 665, 698, 706, 787, 809, 810, 811, 818, 820, 835, 836, 852, 859, 863, 869, 870, 873, 876, 879, 880, 882, 886, 887, 888, 890, 895, 910, 926, 967, 987, 988, 990, 992, 994, 995, 998, 1001, 1004, 1008, 1012, 1013, 1014, 1017, 1018, 1019, 1023, 1024, 1032, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057], "withstrok": 74, "witten": 419, "wittenau": 1044, "wk": 711, "wl": 383, "wminkowski": [1051, 1053], "wmt": 50, "wnl": 423, "wo": 423, "wojdyla": [1054, 1055], "wolberg": [173, 382], "wolf": [1, 48, 64, 69, 109, 110, 113, 114, 188, 307, 479, 481, 485, 486, 518, 555, 992, 1019, 1046], "wolframalpha": 1049, "wolodzko": 1052, "wolosonovich": 1047, "wolpert": [422, 573, 574], "wompner": 1047, "won": [159, 315, 360, 389, 415, 474, 502, 633, 634, 636, 693, 710, 723, 742, 743, 761, 763, 801, 997, 1008, 1044, 1045, 1050], "wonder": [359, 383], "wonpil": 994, "wood": 1048, "woolam": [337, 338, 339, 342, 1039], "word": [46, 53, 56, 103, 175, 250, 254, 348, 360, 361, 372, 380, 381, 385, 387, 390, 399, 412, 414, 415, 417, 418, 419, 420, 459, 517, 529, 540, 542, 547, 594, 595, 597, 702, 839, 849, 907, 992, 996, 1000, 1003, 1008, 1011, 1012, 1022, 1030, 1031, 1039, 1047], "word_col": 56, "word_scor": 56, "word_token": 423, "wordnetlemmat": 423, "work": [0, 2, 42, 47, 51, 54, 67, 78, 79, 82, 86, 101, 110, 141, 148, 162, 173, 181, 182, 190, 191, 192, 208, 223, 236, 253, 262, 264, 275, 295, 304, 305, 324, 328, 330, 331, 333, 350, 352, 360, 361, 368, 373, 374, 379, 380, 383, 385, 386, 387, 388, 389, 390, 391, 393, 398, 399, 400, 409, 411, 412, 413, 415, 416, 417, 420, 422, 423, 424, 427, 428, 429, 430, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 466, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 510, 514, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 701, 714, 748, 780, 784, 785, 786, 787, 794, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 947, 951, 987, 988, 990, 992, 993, 994, 995, 997, 998, 1000, 1001, 1004, 1005, 1008, 1011, 1012, 1017, 1018, 1022, 1023, 1024, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "work_directori": 1032, "workabl": 390, "workaround": [324, 385, 806, 820], "workclass": [334, 502], "worker": [373, 399, 423, 964, 965, 1054], "workflow": [385, 388, 389, 398, 419, 1021, 1034], "working_memori": [372, 373, 474, 787, 908, 1047], "workingdai": [42, 192], "workload": 1017, "workshop": [0, 415, 423, 845, 1000, 1016], "workspac": 1032, "workstat": 393, "world": [0, 89, 103, 107, 191, 223, 243, 256, 271, 359, 372, 378, 382, 415, 420, 423, 963, 988, 998, 1000, 1016, 1018, 1022, 1026, 1034, 1039], "worldwid": 1022, "wornbb": 1050, "worri": [88, 995, 1024], "wors": [42, 117, 138, 176, 192, 225, 277, 285, 297, 323, 368, 413, 415, 425, 438, 471, 488, 489, 490, 558, 560, 562, 564, 566, 568, 571, 574, 576, 616, 617, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 684, 685, 686, 711, 727, 728, 729, 730, 734, 791, 843, 844, 853, 861, 868, 911, 913, 916, 919, 921, 998, 1008, 1048], "worse_prob": 277, "worsen": 149, "worst": [173, 219, 324, 382, 415, 450, 453, 714, 735, 736, 789, 790, 793, 798, 799, 835, 998, 1022, 1039, 1052], "worth": [89, 147, 192, 219, 385, 393, 1022], "worthwhil": [105, 399], "would": [0, 24, 42, 44, 47, 51, 62, 63, 67, 79, 87, 89, 92, 103, 110, 112, 113, 117, 122, 129, 138, 151, 173, 175, 180, 181, 191, 192, 193, 194, 196, 203, 209, 219, 220, 221, 234, 237, 246, 253, 256, 264, 271, 273, 277, 278, 283, 285, 287, 291, 295, 298, 304, 315, 318, 319, 323, 324, 330, 333, 340, 348, 352, 355, 356, 359, 361, 367, 368, 372, 380, 381, 385, 386, 387, 391, 393, 394, 397, 398, 399, 400, 406, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 438, 452, 471, 474, 488, 489, 490, 495, 533, 538, 540, 542, 547, 550, 558, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 576, 589, 590, 593, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 684, 685, 706, 708, 714, 718, 719, 726, 762, 784, 788, 791, 795, 806, 808, 820, 835, 843, 844, 853, 861, 868, 895, 896, 898, 899, 900, 901, 902, 903, 908, 910, 911, 913, 916, 918, 919, 920, 921, 955, 958, 987, 988, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1013, 1017, 1018, 1022, 1023, 1028, 1030, 1032, 1036, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "wp": [423, 663, 677], "wpd": 359, "wprd": 423, "wrap": [124, 143, 151, 298, 335, 379, 387, 399, 409, 439, 514, 663, 682, 836, 894, 988, 998, 1001, 1013, 1017, 1039, 1044, 1047, 1049, 1050, 1052, 1054], "wraparound": 386, "wrapper": [1, 63, 298, 391, 394, 419, 425, 550, 626, 674, 677, 748, 910, 994, 1014, 1017, 1043, 1051], "wrapt": [664, 665], "wrath": 416, "write": [46, 54, 187, 253, 359, 372, 373, 379, 383, 384, 385, 389, 390, 391, 393, 394, 397, 399, 409, 411, 416, 420, 423, 1009, 1018, 1032, 1040, 1052, 1056], "writer": 359, "written": [40, 43, 45, 64, 85, 87, 119, 127, 171, 188, 226, 270, 302, 330, 337, 338, 373, 382, 385, 386, 387, 391, 393, 397, 399, 416, 421, 493, 508, 514, 703, 719, 836, 915, 922, 992, 994, 998, 1002, 1003, 1012, 1016, 1019, 1023, 1024, 1029, 1032, 1048], "wrong": [94, 219, 271, 304, 359, 368, 382, 385, 387, 423, 510, 732, 762, 799, 998, 1004, 1013, 1042, 1044, 1046, 1047, 1048, 1049, 1052, 1056], "wrongli": [219, 348, 1057], "wrote": [159, 380], "ws2001": 990, "wspace": [52, 53, 73, 78, 79, 96, 112, 124, 140, 219, 237, 246, 262, 264, 265, 268, 303, 311, 338, 345], "wstate": 1052, "wtv": 391, "wtw": 391, "wu": [1013, 1043, 1051], "wurp": [1053, 1054], "wuthrich": [219, 237], "ww": 420, "www": [44, 104, 196, 219, 235, 237, 247, 291, 297, 315, 379, 380, 385, 393, 415, 419, 448, 455, 493, 514, 515, 537, 540, 543, 547, 650, 664, 670, 677, 691, 692, 859, 866, 918, 919, 994, 1011, 1028], "www4": [173, 382], "wyseguy7": 1045, "w\u00fcthrich": 413, "x": [1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 60, 61, 62, 63, 65, 66, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108, 111, 112, 113, 114, 116, 117, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 239, 240, 241, 244, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 378, 379, 380, 385, 386, 387, 389, 390, 391, 392, 393, 394, 397, 398, 399, 406, 409, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 499, 500, 501, 504, 506, 507, 508, 511, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 716, 717, 731, 738, 741, 748, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 794, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 934, 944, 946, 947, 948, 949, 958, 959, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 987, 988, 989, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1018, 1023, 1027, 1028, 1030, 1031, 1032, 1036, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "x0": [50, 211, 228, 242, 318, 345, 399, 436, 470, 573, 574, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 873, 874, 875, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891], "x00": 423, "x006": 1040, "x00a": 423, "x00b": 423, "x00c": 423, "x00d": 423, "x00e": 423, "x00f": 423, "x00g": 423, "x00h": 423, "x00i": 423, "x00l": 423, "x00n": 423, "x00o": 423, "x00r": 423, "x00t": 423, "x00u": 423, "x00z": 423, "x0_cat": [331, 1008], "x0_infrequent_sklearn": [331, 1008], "x0_label": 318, "x0_rabbit": [331, 1008], "x0_str_femal": 883, "x0_str_male": 883, "x0l": 1043, "x1": [50, 116, 121, 140, 150, 178, 231, 242, 318, 345, 387, 399, 436, 470, 515, 573, 574, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 633, 634, 635, 636, 705, 873, 874, 875, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 1031], "x110": 1054, "x1_int_1": 883, "x1_int_2": 883, "x1_int_3": 883, "x1_label": 318, "x2": [116, 121, 140, 150, 178, 231, 387, 416, 594, 635, 705, 1031], "x27": [62, 104, 105, 143, 159, 162, 170, 191, 192, 193, 247, 248, 257, 258, 260, 267, 271, 275, 277, 278, 284, 289, 291, 316, 324, 328, 329, 331, 339], "x2_tr": 635, "x3": [150, 416, 1031], "x64": 383, "x8": 87, "x86": 383, "x86_64": [388, 403], "x9ft": 423, "x_": [168, 176, 268, 277, 327, 387, 415, 418, 420, 633, 641, 770, 865, 905, 906, 994, 1000, 1005, 1045], "x_0": [220, 663], "x_1": [124, 168, 178, 216, 220, 418, 420, 422, 425, 619, 631, 663, 883, 910, 911, 994, 1000, 1002, 1008, 1012], "x_1d": 331, "x_1x_2": 1008, "x_1x_2x_3": 1008, "x_1x_3": 1008, "x_2": [168, 178, 216, 420, 422, 423, 425, 619, 631, 994, 1002, 1008], "x_20": 341, "x_2d": 348, "x_2x_3": 1008, "x_3": [168, 1008], "x_6": 883, "x_7": 883, "x_a": 322, "x_adult": 334, "x_aniso": [78, 91, 96], "x_approx": 1031, "x_axi": [126, 227, 281], "x_b": 322, "x_bimod": 322, "x_bin": 319, "x_bound": [425, 623], "x_c": [488, 489, 491, 1005], "x_calib": 443, "x_california": 187, "x_cardiotocographi": 256, "x_center": 200, "x_check": 931, "x_chisq": 322, "x_cluster": 862, "x_convert": 930, "x_copi": 1050, "x_cu": 411, "x_d": [425, 620], "x_dens": [334, 550], "x_df": 156, "x_diabet": [187, 1027], "x_different_covari": 69, "x_digit": [106, 165, 314, 416, 1027, 1028, 1030], "x_dist_graph": 854, "x_embed": [307, 308, 698, 702, 859, 1001], "x_error": 225, "x_errors_larg": 225, "x_featur": [107, 646, 647, 648, 990], "x_filter": 91, "x_fit": 694, "x_fit_": [541, 649], "x_fold": 1027, "x_forestcov": 256, "x_full": [186, 187, 318], "x_full_train": 143, "x_gaussian": 322, "x_hashed_lsa": 360, "x_hat": [537, 543, 551, 552], "x_hetero": 131, "x_homo": 131, "x_i": [51, 112, 142, 168, 191, 220, 330, 355, 415, 420, 421, 422, 425, 620, 621, 625, 628, 629, 631, 845, 846, 849, 989, 990, 994, 1000, 1001, 1002, 1008, 1012, 1013, 1014], "x_idx_sort": 1051, "x_imput": 636, "x_indic": 169, "x_inform": 325, "x_inlier": 305, "x_inv": [594, 597], "x_ipca": 128, "x_iri": [282, 1031], "x_isotropic_covari": 69, "x_j": [415, 425, 620, 621, 625, 628, 629, 631, 989, 990, 994, 1001, 1013, 1014], "x_k": [418, 420, 992, 1001], "x_label": 187, "x_leav": [563, 564, 565, 566, 570, 571, 572, 918, 919, 920, 921], "x_left_lower_corn": [49, 311, 380, 504], "x_legend": 46, "x_list": 321, "x_loadings_": [488, 489, 490], "x_lognorm": [322, 1008], "x_lsa": 360, "x_m": 1002, "x_max": [66, 86, 92, 140, 147, 157, 166, 177, 251, 313, 320, 342, 352, 353], "x_max_": 641, "x_mean": 427, "x_mean_": 1051, "x_min": [66, 86, 92, 140, 147, 151, 157, 166, 177, 208, 251, 313, 320, 342, 352, 353], "x_min_": 641, "x_miss": [154, 186, 187], "x_miss_california": 187, "x_miss_diabet": 187, "x_n": [124, 420, 910, 911, 1000, 1002, 1012], "x_near_unique_categori": 325, "x_new": [90, 416, 420, 424, 439, 448, 449, 451, 453, 455, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 555, 573, 575, 576, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 634, 636, 641, 644, 645, 646, 647, 648, 694, 695, 696, 697, 698, 859, 866, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 902, 903, 1010, 1023], "x_new_again": 1010, "x_new_count": 1032, "x_new_invers": 1010, "x_new_tfidf": 1032, "x_norm_squar": [769, 1044, 1056], "x_normal": 1008, "x_np": 411, "x_offset": 200, "x_offset_": [650, 651, 1051], "x_origin": [540, 545, 547, 549, 550, 636, 902, 903], "x_out": [332, 874, 883, 884], "x_outlier": [201, 233, 304, 305, 347], "x_p": [415, 994], "x_pca": 128, "x_plot": [198, 220, 225, 252, 280, 303, 323], "x_plot_ext": 220, "x_plot_scal": 323, "x_po": 297, "x_q": 415, "x_r": [132, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609], "x_r2": 132, "x_rand": 283, "x_random": 208, "x_reconstruct": [331, 488, 489, 490, 589], "x_reconstructed_kernel_pca": [43, 129], "x_reconstructed_pca": [43, 129], "x_red": 86, "x_reduc": [85, 120, 157, 451, 1031], "x_restor": 85, "x_right": 69, "x_rope": 277, "x_rotations_": [418, 488, 489, 490], "x_scale": [200, 880, 896, 1008], "x_scale_": [650, 651, 1051], "x_scaler": 48, "x_score": [305, 488, 489, 490, 491], "x_scores_": [490, 1051], "x_select": 368, "x_shared_covari": 69, "x_shuffl": 325, "x_size": 113, "x_sp": 205, "x_spars": [334, 540, 969, 972], "x_sparse_embed": 572, "x_squared_norm": [265, 466], "x_src": 303, "x_std": [880, 896, 1008], "x_std_": 1051, "x_t": [470, 633, 869], "x_test": [43, 44, 45, 46, 48, 51, 60, 61, 62, 63, 66, 67, 103, 104, 108, 110, 116, 117, 129, 138, 141, 143, 145, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 180, 183, 190, 191, 192, 193, 194, 196, 199, 203, 209, 214, 216, 217, 225, 226, 227, 233, 234, 235, 237, 247, 249, 255, 259, 260, 264, 270, 271, 274, 275, 280, 284, 286, 290, 292, 297, 301, 304, 306, 307, 313, 315, 316, 320, 322, 323, 325, 327, 328, 329, 334, 335, 340, 341, 347, 359, 363, 365, 366, 367, 368, 372, 379, 387, 390, 398, 409, 416, 419, 422, 444, 476, 477, 478, 479, 480, 481, 482, 515, 564, 565, 566, 573, 574, 703, 704, 706, 708, 805, 828, 836, 838, 841, 859, 867, 868, 870, 884, 920, 921, 988, 998, 1000, 1001, 1002, 1004, 1008, 1012, 1013, 1014, 1027, 1028, 1030, 1036, 1039], "x_test_df": 260, "x_test_kernel_pca": 129, "x_test_maxab": 1008, "x_test_minmax": 1008, "x_test_miss": 154, "x_test_no_cf_encod": 325, "x_test_noisi": 43, "x_test_np": 260, "x_test_pca": [44, 129, 1028], "x_test_r": 116, "x_test_scal": 260, "x_test_sel": 194, "x_test_select": 368, "x_test_text": 46, "x_test_tran": 1008, "x_test_transform": [368, 419], "x_text": 46, "x_tfidf": 360, "x_thresholds_": [249, 641, 1051], "x_torch": 411, "x_tr": [873, 879, 882, 883, 884, 888, 890, 893, 895, 896, 900, 901], "x_train": [43, 44, 45, 46, 48, 51, 60, 61, 62, 63, 66, 67, 103, 104, 108, 110, 116, 117, 129, 138, 141, 145, 149, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 199, 203, 214, 216, 217, 220, 226, 227, 233, 234, 235, 237, 247, 255, 259, 260, 264, 266, 270, 271, 274, 275, 280, 284, 286, 290, 297, 301, 304, 306, 307, 313, 315, 316, 320, 322, 323, 325, 327, 328, 329, 334, 335, 340, 341, 347, 359, 363, 367, 368, 372, 379, 387, 390, 398, 416, 419, 422, 443, 444, 515, 564, 565, 566, 573, 574, 703, 704, 706, 708, 805, 828, 836, 838, 841, 859, 867, 868, 870, 884, 920, 921, 988, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1012, 1013, 1027, 1028, 1036], "x_train_": 617, "x_train_count": 1032, "x_train_ensembl": 143, "x_train_linear": 143, "x_train_maxab": 1008, "x_train_minmax": 1008, "x_train_miss": 154, "x_train_no_cf_encod": 325, "x_train_noisi": 43, "x_train_pca": [44, 1028], "x_train_preprocess": 191, "x_train_r": 116, "x_train_sel": 194, "x_train_select": 368, "x_train_std_transform": 323, "x_train_text": 46, "x_train_tf": 1032, "x_train_tfidf": 1032, "x_train_tran": 1008, "x_train_transform": [323, 368, 419], "x_train_valid": 62, "x_tran": [322, 333, 387, 411, 448, 470, 886, 891, 898, 1008], "x_trans_bc": 322, "x_trans_qt": 322, "x_trans_yj": 322, "x_transform": [128, 157, 253, 491, 537, 538, 539, 540, 541, 543, 545, 549, 572, 644, 645, 694, 695, 696, 697], "x_transformed_fit_": 541, "x_true": 242, "x_type": 387, "x_uniform": 322, "x_val": [149, 1006], "x_valid": 62, "x_valu": 340, "x_vari": 91, "x_weibul": 322, "x_weights_": [418, 488, 489, 490, 491], "x_wrong": 69, "xa": 587, "xanchor": 278, "xarg": 1039, "xarrai": 1017, "xavier": [867, 868, 1047, 1048, 1049, 1051, 1052, 1057], "xaxi": [79, 120, 130, 144, 216, 239, 241, 244, 298, 303, 359], "xaxis2": 144, "xb": [116, 889], "xbar_": 555, "xbc": 423, "xc3": 423, "xcjason": 1049, "xcode": 383, "xd": 532, "xdang": 685, "xerox": 50, "xerr": [186, 187, 360], "xethan": 1051, "xfail": [387, 393], "xfc": 423, "xfcche": 423, "xfea": 423, "xff": 423, "xgamma": 691, "xgboost": [154, 156, 422, 1017], "xgrid": [49, 311], "xhan": 1048, "xhy": 1046, "xi": [1, 78, 99, 382, 415, 418, 423, 456, 462, 515, 1012, 1050], "xi_i": 1012, "xi_k": 418, "xiang": 1057, "xiangyin": 1052, "xiao": [0, 396, 404, 1047, 1049, 1052, 1053, 1054, 1055, 1056, 1057], "xiaojin": 905, "xiaoyu": 1051, "xiaoyuchai": 1052, "xin": [685, 994, 1047], "xinfan": [1039, 1040, 1043], "xing": [1047, 1048], "xinv": 875, "xinyu": 415, "xinyuliu12": 1048, "xiong": [1047, 1048, 1053], "xj": 413, "xk": [99, 556], "xlabel": [42, 46, 47, 51, 60, 61, 62, 63, 68, 71, 75, 95, 110, 111, 113, 114, 116, 117, 120, 126, 131, 139, 140, 142, 148, 150, 151, 152, 153, 154, 158, 162, 164, 168, 169, 172, 175, 176, 177, 178, 180, 181, 182, 191, 198, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 219, 221, 222, 224, 226, 228, 229, 233, 237, 250, 252, 254, 256, 272, 276, 277, 281, 282, 286, 287, 290, 292, 300, 301, 304, 305, 324, 325, 345, 347, 348, 351, 359, 364, 365, 366, 637, 1027, 1031], "xlim": [50, 62, 78, 92, 96, 106, 110, 111, 112, 126, 140, 141, 142, 158, 164, 176, 177, 191, 198, 209, 211, 218, 225, 228, 233, 246, 254, 263, 268, 272, 286, 292, 304, 305, 347, 352, 353, 356, 366], "xm": [50, 242], "xmax": [49, 110, 209, 211, 228, 229, 311], "xmin": [49, 110, 209, 211, 228, 229, 311], "xn": 515, "xom": 50, "xor": [174, 176, 177, 178, 180, 181, 182, 188, 229, 232, 266, 321, 353, 616, 620, 628, 994, 1014, 1019, 1046], "xp": [418, 885], "xpreprocessor": 383, "xrang": 1045, "xred": [451, 1055], "xrot": 52, "xrx": 50, "xs_sp": 205, "xsat": 1049, "xscale": [176, 181, 252], "xt": [162, 298, 399, 451, 544, 546, 633, 635, 806, 809, 810, 820, 854, 862, 870, 875, 880, 887, 899, 928, 1055, 1057], "xtick": [42, 44, 46, 49, 65, 69, 74, 78, 80, 84, 85, 86, 92, 93, 96, 114, 116, 127, 148, 150, 154, 177, 178, 179, 183, 202, 209, 215, 232, 246, 254, 263, 264, 265, 268, 276, 277, 292, 302, 311, 316, 324, 337, 348, 351, 353, 703, 1028], "xtick_period": 192, "xtick_start": 192, "xticklabel": [42, 48, 148, 154, 192, 324], "xticks_label": 150, "xticks_po": 150, "xticks_rot": [44, 703, 1028], "xtrain": 311, "xu": [415, 418, 426, 450, 1012, 1052, 1053, 1056, 1057], "xue": [0, 1043, 1044, 1045, 1047, 1048, 1051], "xuefeng": [1056, 1057], "xueqin": [685, 994], "xun": [1049, 1051], "xuniu": 1054, "xval": 187, "xw": [218, 330, 652, 653, 655, 658, 659, 660, 661, 662, 666, 667, 668, 669, 678, 687, 688, 689, 690, 994], "xx": [76, 92, 112, 147, 151, 157, 166, 177, 178, 179, 192, 206, 226, 229, 230, 231, 232, 233, 244, 246, 254, 266, 304, 313, 320, 321, 342, 347, 348, 352, 353, 356, 357, 389], "xx0": [140, 637], "xx1": [140, 637], "xx_coarser": 147, "xxx": 399, "xy": [47, 62, 83, 284, 311, 353, 403, 652, 653, 656, 657, 658, 659, 660, 661, 666, 667, 668, 669, 670, 687, 688, 689, 690, 692], "xycoord": [47, 62], "xyguo": [1045, 1047], "xytext": [47, 62, 196], "xyz": 384, "y": [1, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 60, 61, 62, 63, 65, 66, 68, 69, 73, 74, 76, 77, 78, 79, 86, 88, 90, 91, 94, 95, 96, 99, 100, 104, 105, 107, 108, 113, 116, 117, 121, 122, 126, 128, 129, 130, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 237, 239, 240, 241, 244, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 262, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 297, 298, 300, 301, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 363, 364, 365, 366, 367, 368, 377, 378, 379, 380, 383, 385, 387, 390, 392, 394, 398, 399, 406, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 491, 493, 504, 506, 508, 511, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 589, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 708, 712, 717, 732, 738, 741, 747, 748, 762, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 794, 795, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 930, 935, 936, 958, 960, 961, 962, 969, 972, 985, 987, 988, 989, 990, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1012, 1013, 1014, 1018, 1023, 1027, 1028, 1030, 1031, 1034, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "y0": [50, 242], "y1": [50, 121, 140, 242, 515, 722, 999, 1000], "y1_label": 45, "y2": [121, 140, 722, 999], "y2_label": 45, "y3": 999, "y_": [249, 263, 267, 268, 310, 387, 418, 420, 643, 654, 675, 686, 735, 736, 744, 770, 789, 790, 793, 994, 998, 1045], "y_1": [139, 365, 366, 418, 998, 1002, 1012], "y_2": [139, 365, 366, 1002], "y_20": 341, "y_2d": 348, "y_3": 366, "y_30": 342, "y_50": 342, "y_adult": 334, "y_all": [672, 674, 682, 838, 839, 867], "y_ard": 198, "y_ard_std": 198, "y_axi": [126, 227], "y_bia": 141, "y_brr": 198, "y_brr_std": 198, "y_c": [488, 489, 491], "y_calib": 443, "y_california": 187, "y_coclust": 56, "y_convert": 930, "y_cov": 617, "y_cu": 411, "y_decis": [334, 841], "y_dens": 999, "y_diabet": [187, 1027], "y_different_covari": 69, "y_digit": [106, 165, 314, 416, 1027, 1028, 1030], "y_error": [141, 225], "y_errors_larg": 225, "y_filter": 91, "y_fold": 1027, "y_full": [186, 187, 318], "y_full_train": 143, "y_grid_pr": 157, "y_hat": 471, "y_high": 151, "y_i": [142, 330, 355, 413, 422, 989, 990, 994, 998, 1002, 1012, 1013, 1014], "y_indic": 881, "y_iri": [282, 1031], "y_isotropic_covari": 69, "y_j": [990, 998, 1000, 1008, 1013], "y_k": [418, 1008], "y_kmean": 56, "y_kr": 252, "y_l": 998, "y_label": 237, "y_left_lower_corn": [49, 311, 380, 504], "y_limit": 148, "y_loadings_": [488, 489, 490], "y_loc": 359, "y_log_prob": 841, "y_log_proba": 870, "y_low": 151, "y_lower": [94, 151], "y_mask": 341, "y_max": [66, 92, 140, 147, 157, 166, 177, 237, 251, 313, 320, 342, 352, 353, 641, 643], "y_mean": [180, 181, 184, 617, 650, 651], "y_mean_": 1051, "y_med": 151, "y_min": [66, 92, 140, 147, 157, 166, 177, 251, 313, 320, 342, 352, 353, 641, 643], "y_miss": [186, 187], "y_miss_california": 187, "y_miss_diabet": 187, "y_multirf": 158, "y_n": [998, 1002, 1012], "y_new": 90, "y_nois": 141, "y_noisi": 218, "y_norm_squar": 769, "y_normal": 221, "y_np": 411, "y_numer": 930, "y_observ": 335, "y_onehot_test": 286, "y_org": 935, "y_outlier": 201, "y_pareto": 221, "y_plot": [198, 220, 225, 280], "y_plot_ext": 220, "y_po": 361, "y_pred": [42, 44, 45, 51, 61, 65, 67, 69, 78, 91, 96, 103, 108, 138, 151, 152, 154, 159, 170, 191, 219, 221, 226, 229, 234, 236, 237, 246, 247, 256, 271, 273, 275, 280, 305, 309, 316, 323, 335, 340, 341, 368, 385, 392, 399, 422, 438, 445, 471, 488, 489, 490, 555, 558, 560, 562, 563, 564, 566, 568, 570, 571, 573, 574, 576, 617, 637, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 703, 704, 706, 707, 708, 709, 714, 718, 719, 724, 727, 728, 729, 730, 734, 735, 736, 740, 742, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 789, 790, 791, 793, 794, 796, 797, 802, 806, 809, 810, 820, 831, 841, 843, 844, 853, 861, 868, 870, 910, 911, 912, 913, 914, 915, 916, 919, 921, 998, 1000, 1028, 1045, 1046, 1048, 1050, 1054, 1055, 1056], "y_pred_ard": 203, "y_pred_bin": 219, "y_pred_chain": 297, "y_pred_empti": [735, 736], "y_pred_enet": 203, "y_pred_ensembl": 297, "y_pred_lasso": 203, "y_pred_lr": 221, "y_pred_nnl": 214, "y_pred_ol": 214, "y_pred_outli": [233, 304, 347], "y_pred_outliers_sgd": 233, "y_pred_ovr": 297, "y_pred_product": 237, "y_pred_qr": 221, "y_pred_ridg": 108, "y_pred_ridge_with_trans_target": 108, "y_pred_scal": 323, "y_pred_seg": 219, "y_pred_test": [233, 304, 347], "y_pred_test_sgd": 233, "y_pred_tot": 237, "y_pred_train": [233, 347], "y_pred_train_sgd": 233, "y_pred_with_": 190, "y_pred_without_": 190, "y_predict": [141, 387, 1039], "y_prob": [61, 63, 178, 444, 445, 715, 841, 867, 998, 1053, 1057], "y_proba": [150, 153, 323, 399, 715, 870, 1057], "y_proba_sc": 323, "y_rand": 342, "y_reconstruct": [488, 489, 490], "y_rf": 158, "y_right": 69, "y_rotations_": [418, 488, 489, 490], "y_sampl": [184, 617], "y_scaler": 48, "y_score": [247, 284, 286, 399, 488, 489, 490, 713, 726, 732, 733, 745, 746, 762, 788, 794, 795, 800, 806, 809, 810, 820, 870, 998, 1045, 1053, 1055, 1057], "y_scores_": [490, 1051], "y_shared_covari": 69, "y_spars": 999, "y_std": [181, 184, 558, 617, 650, 651, 1052], "y_std_": 1051, "y_svr": 252, "y_test": [43, 44, 45, 46, 48, 51, 60, 61, 62, 63, 66, 67, 103, 104, 108, 116, 117, 129, 138, 141, 143, 145, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 183, 190, 191, 192, 193, 194, 196, 203, 214, 216, 219, 225, 226, 227, 234, 235, 237, 247, 255, 259, 260, 264, 270, 271, 274, 275, 280, 284, 286, 290, 297, 301, 306, 307, 313, 315, 316, 320, 323, 325, 327, 328, 329, 334, 335, 340, 341, 359, 363, 367, 368, 379, 390, 398, 416, 419, 422, 444, 515, 564, 565, 566, 573, 574, 703, 704, 706, 708, 805, 828, 836, 838, 841, 859, 867, 868, 870, 920, 921, 998, 1000, 1001, 1008, 1013, 1027, 1028, 1036, 1039], "y_test_pr": 264, "y_test_predict": 255, "y_test_r": 116, "y_test_tru": 340, "y_thresholds_": [249, 641, 1051], "y_torch": 411, "y_train": [43, 44, 45, 46, 48, 51, 60, 61, 62, 63, 66, 67, 103, 104, 108, 116, 117, 129, 138, 141, 145, 149, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 199, 203, 214, 216, 217, 220, 226, 227, 234, 235, 247, 255, 259, 260, 264, 270, 271, 274, 275, 280, 284, 286, 290, 297, 301, 306, 307, 313, 315, 316, 320, 323, 325, 327, 328, 329, 334, 335, 337, 338, 340, 341, 342, 359, 363, 367, 368, 372, 379, 387, 390, 398, 416, 419, 422, 443, 444, 515, 564, 565, 566, 573, 574, 703, 704, 706, 708, 805, 828, 836, 838, 841, 859, 867, 868, 870, 920, 921, 988, 998, 1000, 1001, 1006, 1008, 1013, 1027, 1028, 1036], "y_train_": 617, "y_train_ensembl": 143, "y_train_linear": 143, "y_train_noisi": 182, "y_train_pr": 264, "y_train_r": 116, "y_train_valid": 62, "y_tran": 108, "y_transform": 491, "y_true": [42, 51, 56, 67, 93, 108, 138, 159, 178, 219, 229, 237, 256, 265, 271, 340, 385, 438, 444, 445, 471, 488, 489, 490, 558, 560, 562, 563, 564, 566, 568, 570, 571, 574, 576, 617, 641, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 676, 678, 679, 684, 685, 703, 704, 706, 707, 708, 709, 713, 714, 715, 718, 719, 724, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 788, 789, 790, 791, 793, 794, 795, 796, 797, 800, 802, 805, 843, 844, 853, 861, 868, 911, 913, 916, 919, 921, 998, 1040, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1056], "y_true_bin": 219, "y_true_categor": [715, 998], "y_true_empti": 735, "y_true_mean": 221, "y_true_seg": 219, "y_type_": 877, "y_uniqu": 60, "y_upper": [94, 151], "y_val": [149, 1006], "y_valid": 62, "y_var": 141, "y_vari": 91, "y_weights_": [418, 488, 489, 490, 491], "y_wrong": 69, "yacin": 1047, "yadav": 1053, "yagi": 1051, "yahoo": 50, "yair": [415, 697], "yakov": 1051, "yalburgi": [1046, 1047], "yaman": 1054, "yamanishi": 380, "yamin": 1039, "yaml": 389, "yan": [1043, 1051], "yanchor": 278, "yang": [380, 415, 420, 540, 645, 1045, 1046, 1049, 1051, 1052, 1053, 1055, 1056], "yangarbit": 1046, "yanhong": 1054, "yanlend": 1045, "yann": [316, 1039, 1041], "yanni": 415, "yannick": [1039, 1041], "yao": [0, 382, 396, 404, 1045, 1046, 1047, 1048, 1055, 1056, 1057], "yap": 1046, "yar": 1053, "yaroslav": [0, 404, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1055, 1056], "yarowski": [329, 907, 1011], "yashika": 1051, "yasmeen": 1052, "yat2016": 415, "yate": [596, 736], "yates2011": 596, "yau": [53, 1042, 1043, 1044, 1045, 1046], "yaxi": [45, 48, 79, 94, 120, 130, 144, 216, 239, 241, 244, 262, 298, 303, 359], "ye": [359, 393, 399, 409, 664, 665, 877, 894, 994], "year": [0, 42, 162, 173, 180, 190, 191, 192, 219, 220, 237, 335, 382, 384, 389, 397, 419, 423, 808, 813, 815, 889, 994, 998, 1018, 1022, 1030], "yearli": 42, "yearremodadd": 159, "yeast": [297, 841], "yee": [1046, 1047], "yegelwel": 1051, "yeh": 1052, "yelit": 1045, "yellow": [69, 122, 348, 999], "yellowbrick": 1017, "yellowgreen": [220, 222, 229, 365], "yen": [1045, 1046], "yenchen": [0, 1045], "yenchenlin": 1045, "yenugula": 1057, "yeo": [318, 322, 886, 898, 1008, 1047, 1053, 1055], "yep": 388, "yerr": [106, 111, 113, 145, 148, 172, 300, 324, 340], "yesy": 1025, "yesyesclassificationclassificationnumb": 1025, "yesyesdo": 1025, "yesyesfew": 1025, "yesyesllel": 1025, "yesyespredict": 1025, "yesyessgdclassifiersgd": 1025, "yesyessgdregressorsgd": 1025, "yesyestextdatatext": 1025, "yet": [47, 91, 203, 237, 267, 278, 361, 374, 380, 384, 389, 397, 402, 403, 406, 419, 420, 422, 423, 425, 454, 458, 467, 468, 471, 559, 560, 583, 599, 600, 608, 784, 907, 982, 987, 994, 998, 1004, 1012, 1018, 1048, 1056], "yeung": 1045, "ygrid": [49, 311], "yhoo": 50, "yi": [515, 1000, 1043, 1047, 1048, 1051], "yichuan": [1045, 1046], "yield": [46, 47, 61, 79, 89, 110, 111, 112, 113, 151, 203, 214, 219, 234, 237, 282, 297, 313, 318, 345, 350, 359, 360, 368, 372, 374, 379, 390, 399, 412, 415, 417, 419, 420, 422, 423, 424, 443, 455, 474, 478, 514, 515, 543, 544, 545, 547, 552, 559, 560, 565, 566, 567, 568, 573, 574, 600, 608, 653, 657, 658, 659, 661, 667, 669, 671, 679, 681, 692, 732, 787, 794, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 837, 841, 844, 902, 903, 941, 948, 950, 951, 956, 990, 992, 994, 995, 998, 1013, 1014, 1027, 1044, 1045, 1047, 1050, 1052], "yifan": 1002, "yime": 1047, "ying": [415, 458, 468, 1053], "yinglr": 1049, "yisheng": 1056, "yiyangq": 1053, "yj": [116, 322], "ylabel": [42, 46, 47, 51, 60, 61, 62, 63, 68, 71, 95, 110, 111, 113, 114, 116, 117, 120, 126, 131, 139, 140, 142, 150, 151, 152, 153, 154, 158, 162, 164, 168, 169, 172, 175, 176, 177, 178, 180, 181, 182, 191, 198, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 219, 221, 222, 224, 226, 228, 229, 237, 250, 252, 254, 272, 276, 277, 280, 281, 282, 286, 287, 290, 292, 301, 325, 345, 348, 351, 359, 364, 365, 366, 637, 1027, 1031], "ylim": [50, 60, 62, 68, 71, 78, 92, 96, 110, 111, 112, 126, 140, 141, 148, 151, 158, 161, 176, 177, 191, 206, 208, 209, 211, 212, 213, 225, 228, 229, 233, 246, 254, 263, 268, 272, 276, 280, 286, 290, 292, 304, 305, 347, 352, 353, 356, 359, 366, 1027], "ylorbr_r": 112, "ym": [50, 242], "ymax": [46, 48, 49, 110, 206, 208, 211, 212, 220, 228, 277, 311], "ymazari": 1047, "ymean": 199, "ymin": [49, 110, 206, 208, 211, 212, 220, 228, 277, 311], "yn": [515, 999, 1000], "yoav": 1045, "yoch": 1052, "yogendrasingh": 1054, "yojana": 1054, "yokasr": 1049, "yoni": 1042, "yoon": 1050, "yoram": [295, 741], "york": [276, 794, 803, 988, 998, 1010], "yoshihiro": [199, 1049], "yoshiki": [1042, 1045], "yoshizawa": 1047, "yoshua": [867, 868, 1011], "yosshi999": 1053, "yosuk": [1051, 1052], "yotam": 1055, "you": [0, 29, 53, 57, 60, 104, 120, 146, 147, 150, 152, 170, 173, 187, 192, 207, 220, 221, 223, 248, 253, 260, 265, 272, 277, 278, 284, 293, 304, 327, 328, 331, 333, 334, 338, 341, 352, 359, 368, 372, 373, 374, 379, 380, 383, 384, 385, 386, 387, 389, 390, 391, 393, 394, 398, 399, 403, 406, 409, 411, 413, 414, 415, 416, 417, 419, 422, 423, 424, 426, 427, 432, 443, 449, 450, 452, 453, 455, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 488, 489, 490, 506, 509, 510, 515, 516, 538, 539, 540, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 585, 586, 587, 588, 594, 595, 596, 597, 600, 613, 614, 616, 617, 633, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 693, 696, 705, 706, 791, 804, 805, 807, 808, 809, 810, 811, 813, 815, 821, 822, 824, 825, 826, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 860, 861, 867, 868, 869, 870, 873, 874, 875, 876, 877, 882, 883, 884, 889, 890, 895, 896, 898, 899, 900, 901, 903, 905, 906, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 947, 964, 987, 988, 993, 994, 998, 999, 1002, 1004, 1005, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1027, 1030, 1032, 1039, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "youden": 998, "younger": 237, "your": [15, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 379, 383, 384, 385, 386, 388, 389, 391, 393, 394, 397, 398, 399, 403, 409, 411, 414, 415, 416, 417, 422, 423, 426, 427, 450, 452, 509, 539, 567, 568, 608, 640, 652, 693, 717, 806, 809, 810, 812, 820, 829, 833, 835, 941, 995, 1002, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1025, 1032, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "your_regex_goes_her": 385, "yourlogin": 385, "yourself": [104, 384, 385, 386, 390, 393, 1002], "ypred": 1046, "yrsold": 159, "yscale": [176, 181, 219, 252, 359], "ystd": 199, "yt": 881, "ython": 0, "ytick": [44, 49, 65, 69, 74, 78, 80, 84, 85, 86, 92, 93, 96, 114, 116, 127, 152, 169, 177, 178, 179, 183, 202, 209, 215, 232, 246, 254, 263, 264, 265, 268, 272, 292, 302, 311, 316, 337, 348, 353, 359, 1027, 1028], "yticklabel": [272, 359], "ytrain": 311, "ytrue": 1046, "yu": [203, 415, 458, 468, 664, 994, 1002, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "yuan": [1053, 1054, 1055, 1056, 1057], "yuchen": [1055, 1056], "yucheng": 1044, "yue": [1051, 1057], "yufeng": 1047, "yuichi": 1046, "yuki": 1053, "yule": [456, 463, 784, 785, 786], "yulia": 1049, "yum": 383, "yun": [1054, 1055], "yung": [1042, 1045], "yunqian": 994, "yurchak": [0, 404, 423, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "yuri": [1042, 1044], "yusuf": [1054, 1055], "yusuk": 1052, "yusukenagasaka": 1052, "yutaro": 1051, "yuusuk": 1056, "yuval": [412, 457], "yv": 418, "yve": 1052, "yy": [76, 92, 112, 147, 157, 166, 177, 179, 192, 226, 230, 231, 232, 233, 244, 246, 254, 304, 313, 320, 321, 342, 347, 348, 352, 353, 356, 357], "yy_": 226, "yy_coars": 147, "yy_down": 353, "yy_up": 353, "yzhenman": 1052, "z": [49, 92, 147, 166, 177, 179, 192, 229, 231, 232, 239, 241, 246, 251, 266, 304, 311, 313, 320, 323, 342, 348, 353, 357, 382, 412, 420, 422, 559, 560, 591, 645, 670, 677, 691, 692, 695, 699, 705, 730, 791, 890, 994, 995, 1002, 1003, 1031, 1054], "z_": 420, "z_1": 994, "z_2": 994, "z_3": 994, "z_4": 994, "z_5": 994, "z_i": [142, 1002], "z_l": 1002, "z_points_coars": 147, "zablit": 1054, "zac": 1044, "zacchari": 1051, "zach": [1047, 1048, 1053], "zachariah": 1047, "zadrozni": [63, 413, 443, 682], "zaffalon": 277, "zahlii": 1052, "zain": [0, 404, 1053, 1054, 1055, 1056], "zalkow": 1044, "zambelli": 1042, "zamrii": 1049, "zanouda": 1046, "zaxi": [79, 120, 130, 216, 239], "zayd": 1048, "zaytsev": 1042, "zdzieblo": 1056, "zebra": 718, "zedan": 1055, "zeel": 1053, "zeeshan": [1054, 1055], "zempleni": 1053, "zen": 935, "zenin": 1045, "zentrum": 998, "zero": [1, 24, 48, 49, 52, 63, 69, 71, 74, 75, 86, 88, 111, 113, 114, 124, 127, 129, 140, 141, 150, 152, 153, 158, 170, 173, 187, 198, 203, 205, 210, 212, 213, 218, 219, 220, 223, 224, 225, 229, 234, 237, 250, 253, 254, 256, 262, 266, 268, 274, 277, 282, 286, 287, 303, 318, 328, 329, 352, 355, 360, 361, 363, 367, 372, 373, 380, 387, 391, 399, 413, 415, 417, 420, 422, 423, 424, 425, 428, 452, 458, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 493, 503, 514, 515, 529, 532, 533, 537, 538, 541, 543, 544, 545, 546, 548, 549, 553, 554, 558, 563, 564, 565, 566, 567, 568, 570, 571, 572, 587, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 617, 642, 645, 649, 650, 651, 656, 664, 665, 670, 671, 672, 673, 674, 677, 682, 683, 684, 691, 692, 709, 715, 718, 719, 721, 722, 731, 735, 736, 740, 744, 746, 752, 789, 790, 791, 793, 802, 803, 821, 822, 825, 826, 839, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 873, 880, 882, 883, 885, 886, 887, 889, 890, 896, 897, 898, 899, 903, 910, 918, 919, 920, 921, 945, 973, 984, 988, 994, 996, 997, 1000, 1001, 1002, 1008, 1009, 1010, 1012, 1013, 1014, 1023, 1030, 1032, 1039, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "zero_bas": [493, 514, 515], "zero_class": 254, "zero_divis": [316, 719, 735, 736, 744, 789, 790, 793, 998, 1049, 1051, 1055], "zero_impute_scor": 187, "zero_on": [385, 1040], "zero_one_loss": [1, 385, 411, 709, 740, 998, 1040, 1041, 1042, 1056], "zero_one_scor": 1040, "zerodivisionerror": [1046, 1049, 1055], "zeros_lik": [83, 221, 286], "zeta": 1013, "zeta_i": 1013, "zev": [1045, 1046, 1047, 1048], "zeyusun": 1052, "zha": [695, 699, 995], "zhai_pro": 1044, "zhan": 1054, "zhang": [276, 415, 448, 670, 685, 691, 692, 695, 699, 764, 765, 994, 995, 996, 1000, 1012, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1055, 1056, 1057], "zhang02c": 682, "zhang96": [415, 448], "zhao": [1049, 1051, 1052, 1053, 1054], "zhaowei": 1051, "zhaoweiwang": 1052, "zhauniarovich": 1044, "zhdanovich": 1047, "zhechev": 1054, "zhehao": [1052, 1053, 1054, 1055, 1057], "zhenfish": 1053, "zheng": [1045, 1046, 1051], "zhenq": 1047, "zhi": [569, 1004], "zhiqe": 1047, "zhou": [569, 645, 906, 1004, 1047, 1055, 1056], "zht2007": 207, "zhu": [138, 422, 525, 559, 664, 905], "zhuyi": [1047, 1048], "zhuzhunashvili": [415, 468], "zibulevski": [670, 691, 692], "zichen": 1044, "zielinska": 1050, "zihna": 1052, "ziji": [1047, 1048], "zijlstra": 1042, "zike": 1045, "zimek": 452, "zimmer": [1043, 1053], "zinkov": [226, 1039, 1040, 1041, 1043, 1044], "zip": [42, 43, 46, 47, 50, 51, 60, 62, 66, 67, 69, 71, 72, 74, 76, 79, 83, 89, 97, 98, 108, 117, 122, 124, 125, 128, 132, 133, 134, 140, 142, 149, 159, 160, 181, 186, 188, 191, 192, 193, 204, 210, 211, 219, 227, 228, 239, 250, 256, 263, 267, 268, 271, 275, 279, 280, 281, 284, 286, 298, 301, 303, 306, 313, 314, 315, 320, 322, 323, 324, 341, 345, 355, 356, 364, 383, 422, 834, 1008, 1032, 1035], "zisserman": [644, 990, 998], "zito": [1039, 1052], "ziv": 1045, "zivori": 1045, "zj": [1047, 1048], "zlabel": 1031, "zoj613": 1051, "zolisa": 1051, "zoom": [42, 143, 318, 1025], "zoom_in_percentile_rang": 318, "zorder": [50, 92, 126, 156, 166, 176, 184, 209, 217, 240, 242, 249, 252, 262, 328, 334, 353], "zou": [138, 207, 422, 525, 559, 662, 994, 1012], "zou_et_al_criterion_resc": 207, "zoubin": 905, "zoubir": 113, "zouhar": 1052, "zsh": 373, "zuckerberg": 0, "zwinck": 1041, "zxcvbniu": 1046, "zz": 112, "zzrh2009": 422, "z\u00e9": 1047, "\u00e4yr\u00e4m\u00f6": 994, "\u00f3scar": [1043, 1044, 1045, 1046], "\u00f6zer": 1052, "\u0142ukasz": 1054, "\u015fahin": 1053, "\u675c\u4e16\u6a4b": [0, 405], "\u8d75\u4e30": 1053}, "titles": ["About us", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer/Core-Developer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [193, 323, 325, 388, 397, 422, 998], "0": [187, 327, 328, 329, 330, 1014, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "1": [192, 216, 330, 331, 332, 333, 334, 335, 397, 1032, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "10": [101, 1039], "11": 1039, "12": 1039, "13": 1040, "14": 1041, "15": 1042, "16": 1043, "17": 1044, "18": 1045, "19": 1046, "1d": 303, "2": [216, 332, 1032, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "20": [103, 359, 380, 1032, 1047], "2018": 1018, "20newgroup": 234, "21": 1048, "22": [327, 1049], "23": [328, 1050], "24": [329, 1051], "2d": [50, 86, 126, 132, 192], "3": [62, 202, 333, 1032, 1047, 1048, 1053, 1055], "3d": 192, "4": [334, 1039, 1047, 1056], "5": [335, 1014, 1039, 1057], "6": [1039, 1058], "7": 1039, "8": 1039, "9": 1039, "99": 380, "A": [51, 57, 58, 81, 92, 97, 219, 330, 384, 391, 419, 1026, 1029], "And": [243, 400], "In": 284, "NOT": 390, "One": [211, 233, 286, 330, 347, 419, 1004, 1012], "The": [0, 117, 119, 120, 190, 191, 219, 244, 250, 271, 275, 284, 291, 295, 380, 389, 393, 419, 423, 997, 998, 1010, 1030, 1031], "Will": 397, "With": [257, 1032], "__sklearn_is_fitted__": 136, "_safe_index": 926, "abil": 181, "ablat": 256, "about": [0, 191, 397], "absolut": 998, "access": 416, "accuraci": [193, 251, 359, 363, 998], "accuracy_scor": 709, "across": 368, "action": 385, "activ": 338, "ad": 415, "adaboost": [138, 139, 140, 422], "adaboostclassifi": [138, 559], "adaboostregressor": 560, "add": [334, 397], "add_dummy_featur": 892, "addit": [422, 990], "additive_chi2_kernel": 764, "additivechi2sampl": 644, "address": 271, "adjac": 54, "adjust": 71, "adjusted_mutual_info_scor": 710, "adjusted_rand_scor": 711, "advanc": 257, "advantag": 415, "affin": [50, 72, 415, 996], "affinity_propag": 460, "affinitypropag": 446, "agglom": [73, 74, 86, 1031], "agglomer": [85, 88, 1015, 1031], "agglomerativeclust": 447, "aggress": [987, 994], "aic": [208, 994], "algebra": [372, 394], "algorithm": [56, 57, 58, 72, 78, 83, 89, 97, 98, 99, 239, 246, 391, 397, 992, 994, 999, 1001, 1002, 1006, 1014, 1030], "alias": 393, "align": 995, "all": [277, 286, 331, 403, 1028, 1054, 1055, 1056], "all_displai": 938, "all_estim": 939, "all_funct": 940, "alloc": [53, 420], "alpha": [164, 363], "alpin": 403, "alreadi": 54, "also": 389, "altern": [383, 987], "am": [148, 256], "amount": [289, 987], "an": [81, 93, 136, 187, 200, 208, 308, 327, 331, 397, 423, 987, 1004, 1023, 1029, 1030], "anaconda": 403, "analysi": [42, 63, 68, 69, 94, 124, 131, 134, 138, 151, 192, 203, 262, 279, 280, 287, 306, 307, 308, 359, 418, 420, 992, 1001, 1015, 1031, 1032], "analyz": [51, 987], "angl": [208, 994], "ani": 397, "anomali": 246, "anova": [170, 351], "api": [1, 40, 136, 259, 260, 327, 330, 332, 373, 387, 392, 399, 406, 411, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1056, 1057, 1058], "appli": 164, "applic": [423, 1031], "approach": [110, 208, 277], "approxim": [188, 195, 196, 251, 298, 329, 417, 990], "ar": [101, 271, 330, 397], "arch": 403, "architectur": 1018, "ard": [203, 994], "ardregress": 650, "arff": 379, "argument": [330, 387, 1050, 1052], "arm64": 393, "arrai": [40, 332, 335, 367, 394, 411, 1023, 1056, 1057, 1058], "artifact": 409, "artwork": 0, "as_float_arrai": 928, "ask": 397, "assert": 387, "assert_all_finit": 929, "assign": 415, "assumpt": 91, "atom": [48, 372], "attent": 397, "attribut": [387, 399, 411, 987], "auc": [327, 712], "author": 1039, "automat": [203, 398, 994], "auxiliari": 40, "avail": [331, 987, 1035, 1036], "available_if": 959, "averag": [284, 286, 415, 422, 998], "average_precision_scor": 713, "avoid": [368, 416], "aweb": 1022, "ax": 392, "b": 116, "backend": 393, "backward": 385, "bag": [141, 150, 359, 422, 423, 987, 1032], "baggingclassifi": 561, "baggingregressor": 562, "balanc": [276, 998], "balanced_accuracy_scor": 714, "ball": 1001, "balltre": [850, 1001], "base": [3, 40, 41, 42, 116, 145, 146, 173, 188, 203, 252, 327, 328, 330, 332, 333, 334, 385, 415, 419, 422, 424, 994, 1006, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "baseestim": [387, 429], "baselin": [196, 219], "basi": [43, 184, 425, 990, 994, 1030], "basic": [182, 237, 398, 417, 425], "batch": [415, 420], "bay": [60, 61, 1000], "bayesian": [24, 198, 199, 262, 277, 994, 997], "bayesiangaussianmixtur": 803, "bayesianridg": 651, "befor": [187, 389], "behavior": 272, "behind": 0, "being": 191, "benchmark": [45, 48, 92, 359], "bernoulli": [1000, 1003], "bernoullinb": 845, "bernoullirbm": 866, "best": [267, 386, 397], "bestofmedia": 1022, "beta": 420, "betawork": 1022, "between": [98, 288, 994], "bia": 141, "bic": [208, 267, 994], "biclust": [26, 55, 56, 57, 188, 381, 412], "biclustermixin": 430, "bigger": 374, "bike": [42, 51, 192], "bin": 1008, "binar": [873, 893, 1008, 1009], "binari": [284, 297, 335, 994, 998], "birch": [76, 415, 448], "birchbox": 1022, "bisect": [77, 415], "bisectingkmean": [331, 449], "blind": 125, "bnp": 1022, "boil": 390, "boltzmann": [316, 1003], "bonu": 164, "book": 1022, "boost": [42, 144, 148, 149, 150, 151, 152, 153, 154, 192, 219, 327, 328, 330, 332, 333, 422], "bouldin": 415, "bound": 250, "boundari": [155, 160, 301, 342, 352], "branch": 393, "break": 356, "breast": [194, 382], "brier": 998, "brier_score_loss": 715, "brute": [987, 1001], "bug": [384, 385, 389, 1021, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "build": [180, 187, 383, 385, 393, 416, 1032, 1057], "bulk": [48, 372], "bunch": [397, 925], "busi": 271, "c": 391, "c4": 1014, "c5": 1014, "cach": [105, 300, 416], "calcul": [149, 161], "calibr": [4, 59, 60, 61, 62, 63, 151, 188, 219, 413, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "calibratedclassifiercv": 443, "calibration_curv": 445, "calibrationdisplai": 444, "california": 380, "calinski": 415, "calinski_harabasz_scor": 716, "call": [368, 384], "callgrind": 391, "can": [164, 397], "cancer": [194, 382], "candid": [289, 987], "canon": [116, 418], "card": 271, "cardif": 1022, "cardiotocographi": 256, "cart": 1014, "case": [355, 994, 998], "cast": 1023, "categor": [148, 324, 329, 334, 397, 422, 1000, 1008], "categori": [42, 331, 333, 1008], "categoricalnb": 846, "caus": 403, "causal": [190, 191], "cautiou": 191, "cca": [116, 488], "center": [124, 1008], "central": 54, "centroid": [309, 1001], "chain": [106, 258, 297, 398, 416], "chanc": 71, "chang": [253, 385, 400, 1022, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "changelog": [1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "characterist": [286, 287, 998], "check": [191, 279, 327, 393, 411, 1047, 1048, 1049], "check_arrai": 931, "check_consistent_length": 932, "check_cv": 830, "check_estim": 941, "check_increas": 642, "check_is_fit": [387, 982], "check_memori": 983, "check_random_st": 933, "check_scalar": 934, "check_scor": 717, "check_symmetr": 984, "check_x_i": 930, "checker": 40, "checklist": [385, 389], "chi": [990, 996], "chi2": 610, "chi2_kernel": 765, "choic": 420, "choos": [45, 987, 1023, 1025, 1027], "ci": 385, "circl": 100, "cite": 0, "claim": [219, 237], "class": [40, 62, 71, 138, 140, 161, 202, 228, 233, 280, 284, 286, 330, 347, 350, 399, 414, 419, 422, 423, 998, 1001, 1004, 1012, 1013, 1039, 1040], "class_likelihood_ratio": 718, "classic": 24, "classif": [26, 46, 62, 64, 65, 67, 68, 103, 121, 165, 176, 177, 178, 179, 183, 188, 235, 254, 280, 283, 284, 287, 297, 301, 309, 316, 327, 336, 341, 352, 359, 381, 425, 994, 998, 999, 1001, 1002, 1012, 1013, 1014, 1030, 1032], "classifi": [24, 40, 60, 61, 63, 66, 136, 162, 202, 258, 274, 291, 297, 301, 327, 335, 342, 345, 348, 359, 367, 413, 422, 992, 1001, 1030, 1032], "classification_report": 719, "classifierchain": [841, 999], "classifiermixin": 432, "classnameprefixfeaturesoutmixin": 431, "clear": 1049, "clear_data_hom": 492, "cli": 1032, "clone": [387, 440], "close": 384, "cloud": 126, "cloudpickl": 409, "cluster": [5, 26, 50, 56, 58, 70, 71, 72, 73, 74, 75, 78, 79, 81, 83, 86, 89, 90, 92, 94, 97, 98, 99, 100, 101, 124, 188, 331, 333, 360, 381, 412, 415, 420, 998, 1031, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "cluster_optics_dbscan": 461, "cluster_optics_xi": 462, "clustermixin": 433, "co": [56, 58, 412], "co2": 180, "code": [45, 124, 133, 385, 387, 390, 391, 393, 420, 1043, 1044, 1045, 1046, 1047], "coeffici": [173, 191, 198, 223, 224, 415, 998], "cohen": 998, "cohen_kappa_scor": 722, "coin": [80, 81], "color": 82, "column": [103, 104, 258], "column_or_1d": 985, "columntransform": [335, 416, 470], "com": 1022, "combin": [159, 247], "comment": 390, "committe": 400, "common": [191, 368, 399, 411, 423, 998], "commun": [0, 385], "compact": 248, "compar": [62, 76, 78, 96, 110, 116, 144, 158, 169, 196, 198, 205, 221, 226, 246, 252, 277, 285, 306, 314, 318, 324, 397], "comparison": [63, 66, 69, 77, 98, 112, 132, 148, 149, 168, 175, 239, 240, 252, 277, 288, 295, 361, 994], "compat": [40, 327, 385, 387, 411], "compil": [383, 391], "complement": 1000, "complementnb": 847, "complet": [255, 415], "completeness_scor": 723, "complex": [45, 248, 258, 276, 279, 339, 363, 372, 994, 1001, 1002, 1012, 1013, 1014], "compon": [117, 124, 306, 307, 308, 420, 1001, 1015, 1031], "compos": [6, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "composit": [102, 188, 416, 987], "compoundkernel": 618, "compress": [52, 87, 372], "comput": [40, 54, 72, 81, 83, 97, 98, 101, 110, 144, 212, 224, 290, 371, 372, 416, 419, 1005, 1019], "computation": 374, "compute_class_weight": 935, "compute_optics_graph": 463, "compute_sample_weight": 936, "concaten": 107, "concentr": 262, "concept": [399, 994], "conclud": [42, 243], "conclus": [45, 51, 175, 203, 208, 295, 301, 325, 352], "conda": 383, "condit": [192, 329, 1005], "confid": 151, "config_context": 474, "configur": [372, 373], "confus": [270, 415, 998], "confusion_matrix": 724, "confusionmatrixdisplai": [247, 703], "connect": [415, 423, 1031], "consensu": 994, "consensus_scor": 725, "consider": [271, 380], "constant": [219, 271, 988], "constantkernel": 619, "constrain": 1031, "constraint": [154, 156, 332, 334, 415, 422], "construct": 252, "consum": 253, "content": [397, 1023], "conting": 415, "contingency_matrix": 720, "continu": [319, 385], "contribut": [385, 397], "contributor": [0, 384, 385, 400, 1043, 1044, 1045, 1046, 1047], "control": [368, 422, 1002], "convent": [386, 1023], "converg": 138, "convergencewarn": 577, "convex": 229, "cookbook": 184, "coordin": 208, "core": [0, 46, 374, 384, 389, 391, 397, 400, 1000], "corpu": 423, "correl": [191, 194, 418, 998, 1006], "cosin": 996, "cosine_dist": 766, "cosine_similar": 767, "cost": [271, 363, 1014], "countvector": 594, "covari": [7, 69, 109, 110, 112, 113, 114, 188, 264, 417, 992, 1047, 1051, 1052, 1053, 1055, 1056], "coverag": [385, 393, 998], "coverage_error": 726, "covertyp": [256, 380], "craft": 390, "crash": 397, "creat": [103, 131, 138, 223, 247, 284, 325, 351, 352, 397], "credit": 271, "criteria": [207, 397, 994, 1014], "criterion": [208, 329, 987, 1012], "cross": [42, 115, 116, 164, 172, 188, 208, 271, 272, 273, 275, 276, 280, 282, 287, 325, 351, 368, 414, 418, 419, 987, 994, 1027], "cross_decomposit": [8, 1049, 1051, 1053, 1055, 1057], "cross_val_predict": 831, "cross_val_scor": [281, 832], "cross_valid": [419, 833], "cubic": 199, "cumul": 998, "curat": 384, "curs": 1030, "curv": [61, 63, 199, 252, 259, 268, 274, 279, 284, 286, 293, 413, 993], "custom": [136, 275, 335, 344, 423, 1008, 1013], "cut": [271, 291], "cv": [272, 368], "cv_results_": 987, "cython": [386, 391, 393], "d": [419, 1001], "d2_absolute_error_scor": 727, "d2_log_loss_scor": 728, "d2_pinball_scor": 729, "d2_tweedie_scor": 730, "data": [42, 45, 47, 50, 54, 57, 60, 62, 69, 72, 81, 83, 84, 89, 91, 92, 97, 98, 100, 101, 103, 108, 110, 112, 114, 116, 117, 125, 126, 129, 130, 131, 139, 145, 146, 149, 152, 154, 155, 159, 169, 172, 173, 181, 183, 187, 190, 193, 194, 196, 199, 205, 212, 213, 223, 247, 252, 259, 267, 272, 274, 278, 283, 284, 286, 287, 290, 301, 305, 310, 316, 318, 322, 323, 324, 334, 337, 348, 351, 354, 355, 360, 361, 368, 372, 374, 380, 390, 397, 399, 415, 416, 419, 424, 1008, 1012, 1022, 1023, 1026, 1029, 1031, 1032], "dataconversionwarn": 578, "datadimensionalitywarn": 579, "datafram": [327, 334, 397, 1056], "dataiku": 1022, "datarobot": 1022, "dataset": [9, 41, 42, 43, 46, 51, 60, 61, 63, 67, 78, 92, 96, 103, 116, 118, 119, 120, 121, 122, 124, 132, 138, 144, 147, 148, 159, 164, 175, 177, 179, 180, 182, 184, 188, 190, 191, 192, 198, 201, 203, 208, 219, 221, 228, 237, 239, 240, 246, 251, 256, 257, 271, 275, 283, 284, 291, 295, 297, 325, 341, 342, 345, 352, 359, 364, 377, 378, 379, 380, 381, 382, 390, 397, 425, 1023, 1029, 1030, 1032, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "davi": 415, "davies_bouldin_scor": 731, "dbscan": [83, 415, 426, 450], "dbscan_clust": 89, "dcg_score": 732, "deal": [40, 397], "debian": 403, "debug": 393, "debugg": 391, "decis": [138, 139, 147, 155, 160, 188, 251, 271, 291, 301, 333, 335, 342, 352, 362, 363, 364, 365, 366, 367, 397, 400, 414, 1014], "decisionboundarydisplai": 637, "decisiontre": 139, "decisiontreeclassifi": 918, "decisiontreeregressor": [329, 919], "decod": 423, "decompos": 420, "decomposit": [10, 115, 116, 123, 124, 141, 188, 381, 418, 420, 1031, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "decreas": [145, 146, 193], "deep": 397, "default": [253, 305, 385], "defin": [71, 81, 92, 101, 239, 272, 274, 275, 361, 998], "definit": [237, 316, 1005, 1049], "deflat": 116, "delai": 965, "demand": [42, 51], "demo": [57, 58, 72, 81, 83, 89, 92, 97, 99], "demonstr": [91, 281, 321, 337], "dendrogram": 75, "denois": [43, 127], "dens": 205, "densiti": [266, 302, 303, 311, 333, 421, 944, 1013], "densitymixin": 434, "depend": [192, 253, 257, 383, 1005, 1039, 1052, 1053], "deploi": 397, "deploy": 403, "deprec": [253, 385, 937, 1049], "descent": [208, 227, 233, 994, 1012], "descript": 190, "design": 180, "det": [274, 998], "det_curv": 733, "detail": [990, 1012, 1013], "detcurvedisplai": 704, "detect": [47, 246, 256, 274, 304, 305, 998, 1004, 1013], "determin": [113, 203, 417, 994, 998], "develop": [0, 135, 136, 188, 253, 383, 386, 387, 388, 389, 392, 393, 394, 987, 1034, 1055], "devianc": [152, 998], "devic": 411, "diabet": [164, 257, 291, 382, 1030], "diagnost": 382, "dict": 423, "dict_learn": 551, "dict_learning_onlin": 552, "dictionari": [84, 124, 127, 133, 420], "dictionarylearn": 537, "dictvector": [361, 587], "did": 397, "diff": 393, "differ": [74, 78, 96, 110, 184, 192, 318, 321, 324, 345, 352, 387, 397, 406, 415, 994, 1030], "digit": [67, 86, 92, 119, 165, 240, 316, 337, 338, 382, 1029], "dimension": [105, 239, 242, 258, 307, 323, 360, 992, 995, 1001, 1015, 1030], "direct": 236, "directli": 397, "dirichlet": [53, 420, 997], "discount": 998, "discov": 40, "discret": [155, 183, 319, 320, 1008], "discrimin": [68, 69, 992], "discriminant_analysi": [11, 1047, 1048, 1051, 1053, 1054, 1055], "discuss": 384, "disk": 54, "dispatch": 395, "displai": [127, 224, 247, 248, 258, 332, 333, 334, 393, 1036, 1055], "distanc": [26, 112, 335], "distance_metr": 768, "distancemetr": 705, "distort": 127, "distribut": [49, 237, 239, 311, 322, 380, 403, 995, 1008], "diverg": 420, "divid": 331, "do": [390, 397], "document": [0, 46, 56, 188, 329, 330, 358, 359, 360, 385, 1017, 1018, 1021, 1035, 1039, 1042, 1043, 1046, 1047], "doe": 397, "domain": 1017, "donat": 0, "dot": [184, 425], "dotproduct": 620, "down": 390, "download": [54, 159, 187, 379], "drawback": 415, "drop": 148, "dtype": 334, "dummi": [12, 998, 1047, 1048, 1049, 1052, 1053, 1057], "dummyclassifi": 557, "dummyregressor": 558, "dump_svmlight_fil": 493, "dure": 368, "d\u00b2": 998, "each": [284, 289, 359, 987], "earli": [149, 154, 227], "earlier": 1039, "eas": 386, "easi": 385, "effect": [108, 154, 190, 244, 318, 323, 340, 363], "effici": [332, 334, 394], "efficiencywarn": 580, "eigenfac": [44, 124, 1028], "eigenmap": 995, "eigenvector": 54, "elast": [200, 204, 994], "elasticnet": [203, 328, 652], "elasticnetcv": 653, "element": 399, "elimin": [171, 172, 424, 987], "ellipsoid": [69, 263], "ellipt": 1004, "ellipticenvelop": 475, "embed": [50, 86, 239, 240, 250, 308, 422, 995], "emeritu": 0, "empir": [95, 113, 250, 417], "empirical_covari": 483, "empiricalcovari": 476, "enable_halving_search_cv": 585, "enable_iterative_imput": 586, "encod": [87, 148, 324, 325, 333, 1008, 1009], "enet_path": 687, "enforc": [1050, 1052], "engin": [42, 51, 193, 1017, 1022], "enhanc": [332, 400, 1017, 1042, 1043, 1044, 1045, 1046], "enrich": 334, "ensembl": [13, 137, 143, 147, 188, 422, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "enthought": 403, "entir": 397, "entri": 1011, "envelop": 1004, "environ": [373, 409], "equival": 277, "error": [138, 142, 149, 151, 164, 198, 223, 274, 290, 393, 403, 994, 998], "establish": [98, 196], "estim": [40, 102, 109, 110, 111, 112, 113, 114, 135, 136, 141, 148, 150, 158, 181, 187, 188, 198, 222, 225, 248, 253, 255, 256, 266, 285, 295, 302, 303, 311, 327, 328, 329, 332, 334, 368, 387, 397, 398, 399, 411, 416, 417, 419, 421, 422, 987, 988, 992, 994, 998, 1013, 1017, 1025, 1027, 1029, 1040, 1047, 1048, 1049], "estimate_bandwidth": 464, "estimator_html_repr": 943, "euclidean_dist": 769, "evalu": [51, 71, 92, 95, 113, 219, 256, 271, 278, 281, 316, 324, 360, 398, 410, 412, 415, 419, 422, 987, 993, 998, 1032], "evernot": 1022, "exact": 420, "exampl": [41, 44, 47, 87, 93, 108, 118, 130, 136, 155, 182, 188, 215, 216, 223, 353, 356, 374, 390, 397, 406, 411, 414, 423, 425, 429, 432, 435, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 489, 490, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 510, 512, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 590, 593, 594, 595, 596, 597, 599, 600, 603, 605, 606, 608, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 623, 624, 625, 628, 629, 631, 633, 634, 636, 637, 638, 639, 640, 641, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 661, 662, 663, 664, 665, 668, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 690, 694, 695, 696, 697, 698, 699, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 719, 723, 724, 725, 733, 735, 738, 740, 741, 743, 744, 747, 748, 751, 752, 754, 755, 756, 758, 759, 761, 763, 767, 784, 785, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 863, 866, 867, 868, 869, 870, 871, 874, 875, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 896, 899, 903, 904, 906, 907, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 925, 933, 942, 944, 951, 955, 956, 957, 958, 959, 972, 982, 1023, 1029, 1031, 1039], "except": [14, 394, 1051, 1055], "execut": [368, 397], "exercis": [163, 164, 165, 166, 188, 1027, 1030, 1032], "exhaust": 987, "exist": 385, "exp": [184, 425], "expans": 198, "expect": [192, 329, 1005], "experi": [0, 71, 384], "experiment": [15, 332, 389, 411, 1055], "explain": 998, "explained_variance_scor": 734, "explicit": 251, "explor": 42, "exponenti": 622, "export": [39, 397], "export_graphviz": 922, "export_text": 923, "expsinesquar": 621, "extend": 994, "extens": [391, 403], "extern": [379, 1016, 1023, 1039, 1048], "extract": [53, 107, 127, 237, 278, 360, 372, 374, 423, 1032], "extract_patches_2d": 590, "extrapol": 180, "extratreeclassifi": 920, "extratreeregressor": 921, "extratreesclassifi": 563, "extratreesregressor": 564, "extrem": [390, 422], "f": [168, 998], "f1": 284, "f1_score": 735, "f_classif": 611, "f_regress": 612, "fa": [124, 131], "face": [44, 84, 124, 255, 380, 1022, 1028], "factor": [53, 124, 131, 134, 304, 305, 420, 1004], "factoranalysi": 538, "fail": 390, "failur": [190, 987], "fast_logdet": 945, "faster": [332, 422], "fastica": [124, 125, 126, 427, 539], "fbeta_scor": 736, "featur": [42, 51, 85, 88, 107, 129, 143, 145, 146, 148, 152, 154, 156, 157, 167, 169, 171, 172, 173, 188, 193, 194, 196, 198, 213, 216, 237, 251, 257, 278, 316, 319, 320, 323, 324, 327, 329, 330, 351, 359, 360, 372, 374, 385, 389, 406, 416, 422, 423, 424, 988, 1006, 1008, 1015, 1031, 1032, 1042, 1043, 1044, 1045, 1046], "feature_extract": [16, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "feature_select": [17, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "featureagglomer": [415, 451], "featurehash": [361, 588], "featureunion": [416, 869], "fedora": 403, "fetch_20newsgroup": 494, "fetch_20newsgroups_vector": 495, "fetch_california_h": 496, "fetch_covtyp": 497, "fetch_kddcup99": 498, "fetch_lfw_pair": 499, "fetch_lfw_peopl": 500, "fetch_olivetti_fac": 501, "fetch_openml": [332, 502], "fetch_rcv1": 503, "fetch_species_distribut": 504, "file": [54, 403, 423, 1032], "final": [91, 175], "find": 1001, "first": [47, 71, 385], "fit": [28, 57, 62, 91, 125, 131, 145, 146, 151, 152, 180, 198, 199, 200, 213, 216, 221, 225, 284, 297, 305, 310, 325, 354, 368, 387, 398, 406, 411, 422, 1000, 1004, 1023], "fitfailedwarn": 581, "fix": [71, 389, 1039, 1042, 1043, 1044, 1045, 1046, 1052], "fixedthresholdclassifi": [335, 805], "flag": 393, "flexibl": [330, 988], "fold": [393, 419], "footprint": 87, "forc": [987, 1001], "forecast": [51, 180], "forest": [142, 144, 145, 146, 158, 193, 194, 256, 259, 334, 380, 422, 1004], "forg": 383, "format": [379, 390, 397, 999], "formul": [412, 422, 992, 1001, 1012, 1013, 1014], "four": 100, "fowlk": 415, "fowlkes_mallows_scor": 737, "framework": 1017, "free": 182, "freebsd": 383, "freez": 397, "french": 219, "frequenc": [237, 1032], "frequent": 397, "frequentist": 277, "frobeniu": 420, "from": [16, 50, 127, 173, 193, 324, 327, 373, 379, 383, 397, 423, 998, 1023, 1030, 1031, 1032, 1049], "fruit": 384, "fulli": 190, "function": [40, 48, 69, 184, 209, 223, 224, 229, 240, 272, 290, 291, 329, 351, 361, 394, 419, 422, 425, 990, 994, 998, 1013, 1030, 1056], "functiontransform": 874, "fund": 0, "futur": 397, "futurewarn": 1049, "gain": [271, 998], "galleri": [429, 432, 435, 438, 439, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 489, 490, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 510, 512, 516, 517, 518, 519, 520, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 588, 590, 593, 594, 595, 596, 597, 599, 600, 603, 605, 606, 608, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 623, 624, 625, 628, 629, 631, 633, 634, 636, 637, 638, 639, 640, 641, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 661, 662, 663, 664, 665, 668, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 690, 694, 695, 696, 697, 698, 699, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 719, 723, 724, 725, 733, 735, 738, 740, 741, 743, 744, 747, 748, 751, 752, 754, 755, 756, 758, 759, 761, 763, 767, 784, 785, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 863, 866, 867, 868, 869, 870, 871, 874, 875, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 896, 899, 903, 904, 906, 907, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 925, 933, 942, 944, 951, 955, 956, 957, 958, 959, 972, 982], "gamma": [237, 333, 998], "gammaregressor": 654, "gaussian": [60, 61, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 261, 262, 263, 266, 267, 268, 318, 425, 997, 1000, 1008, 1010], "gaussian_process": [18, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "gaussianmixtur": 804, "gaussiannb": 848, "gaussianprocessclassifi": 616, "gaussianprocessregressor": 617, "gaussianrandomproject": 902, "gdb": 391, "gen_batch": 950, "gen_even_slic": 951, "gener": [9, 24, 51, 57, 60, 69, 72, 81, 83, 89, 91, 97, 98, 100, 101, 110, 112, 114, 121, 122, 125, 126, 127, 145, 155, 169, 172, 175, 181, 182, 184, 188, 197, 198, 199, 203, 213, 219, 221, 252, 267, 274, 290, 305, 310, 316, 328, 337, 354, 355, 368, 381, 385, 399, 420, 422, 994, 1008, 1018, 1027], "genericunivariateselect": 598, "german": 271, "get": [368, 397, 398], "get_config": 632, "get_data_hom": 505, "get_feature_names_out": 331, "get_param": 387, "get_routing_for_object": 957, "get_scor": 738, "get_scorer_nam": 739, "git": 385, "github": 385, "gitter": 1021, "glm": 24, "glossari": 399, "gmm": [264, 265], "goal": 1018, "good": [385, 390], "govern": [0, 400], "gpc": [176, 177, 178, 179, 425], "gperftool": 391, "gpr": [180, 181, 425], "gprof": 391, "gpu": 397, "gradient": [42, 144, 148, 149, 150, 151, 152, 153, 154, 192, 219, 227, 233, 327, 328, 330, 332, 333, 422, 994, 1012], "gradientboostingclassifi": [422, 565], "gradientboostingregressor": [422, 566], "gram": 200, "graph": [40, 50, 327, 394, 397, 415, 423], "graphic": [397, 1003], "graphical_lasso": 484, "graphicallasso": 477, "graphicallassocv": 478, "greek": 80, "grid": [258, 275, 277, 285, 288, 987, 1027, 1032], "grid_to_graph": 591, "gridsearchcv": [105, 164, 281, 806], "ground": [71, 198], "group": [331, 333, 419, 1022, 1031], "groupkfold": 807, "groupshufflesplit": 808, "grow": 71, "guid": [388, 1034], "guidelin": [385, 387], "halv": [288, 289, 329, 987], "halvinggridsearchcv": 809, "halvingrandomsearchcv": 810, "ham": 998, "hamming_loss": 740, "hand": 67, "handl": [40, 194, 988], "handwritten": [92, 240, 382], "harabasz": 415, "hard": 422, "has_fit_paramet": 986, "hash": [157, 394, 423], "hashingvector": [360, 595], "haversine_dist": 770, "hdbscan": [89, 333, 415, 452], "help": [384, 385, 397], "helper": [48, 184, 240, 394], "here": [367, 1032], "hessian": 995, "heterogen": [103, 416], "hierarch": [75, 81, 96, 101, 333, 415, 1031], "hierarchi": 415, "high": 1030, "higher": 373, "highlight": [188, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 1039, 1042, 1043, 1046, 1047], "hing": 998, "hinge_loss": 741, "histgradientboost": [329, 334], "histgradientboostingclassifi": [422, 567], "histgradientboostingregressor": [331, 568], "histogram": [144, 154, 328, 330, 332, 421, 422], "histori": [0, 1037], "hmm": 397, "hoc": 291, "hole": 243, "home": 277, "homebrew": 383, "homogen": 415, "homogeneity_completeness_v_measur": 742, "homogeneity_scor": 743, "hot": 148, "hour": 51, "hourli": 190, "hous": [148, 256, 380], "how": [164, 368, 385, 391, 397], "howaboutw": 1022, "html": [248, 387], "huber": 994, "huberregressor": [201, 655], "hug": 1022, "hyper": [28, 151, 275, 329, 987], "hyperparamet": [89, 180, 181, 278, 285, 295, 623], "hyperplan": [231, 349, 350], "i": [335, 367, 390, 397, 419, 1022], "ic": [192, 1005], "ica": [125, 420, 1031], "id3": 1014, "identif": 1032, "idf": 423, "illustr": [105, 179, 184, 308, 425], "imag": [16, 43, 81, 84, 87, 100, 127, 379, 397, 423], "img_to_graph": 592, "impact": [42, 95, 1054, 1055, 1056, 1057], "implement": [136, 205, 397, 998, 1001, 1012, 1013], "import": [145, 146, 152, 173, 193, 194, 251, 295, 323, 327, 414, 422, 1006], "improv": [328, 329, 330, 331, 332, 334, 335, 384, 385, 1042, 1043], "impur": [145, 146, 193, 363, 1006], "imput": [19, 185, 186, 187, 188, 327, 335, 988, 1008, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "includ": 397, "inclus": 397, "incom": 190, "inconsist": 368, "inconsistentversionwarn": 582, "incr_mean_variance_axi": 973, "increment": [128, 374, 420], "incrementalpca": 540, "independ": [124, 420, 1031], "index": [415, 953], "indic": 272, "individu": [162, 192, 329, 1005], "induct": 90, "infer": 190, "influenc": [45, 48, 372], "infonea": 1022, "inform": [168, 187, 207, 208, 389, 415, 987, 994], "infrastructur": 0, "infrequ": [331, 333, 1008], "init": 387, "initi": [93, 95, 265], "inplace_column_scal": 974, "inplace_csr_column_scal": 975, "inplace_csr_row_normalize_l1": 980, "inplace_csr_row_normalize_l2": 981, "inplace_row_scal": 976, "inplace_swap_column": 977, "inplace_swap_row": 978, "input": [40, 372, 387, 411, 415, 1008], "inria": 1022, "inspect": [20, 188, 189, 402, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "instal": [383, 403], "instanc": [368, 374], "instanti": 387, "instead": 271, "instruct": 383, "insur": 237, "integr": 385, "intel": 403, "interact": [42, 192, 332, 422], "interfac": [26, 406], "intern": [325, 414], "internet": 50, "interoper": 1017, "interpol": 220, "interpret": [180, 191, 223, 256, 297, 420, 422], "interv": 151, "introduc": 260, "introduct": [995, 1023], "introductori": 182, "invari": [89, 280], "invers": [114, 417, 1010], "inverse_transform": 1031, "io": 409, "iri": [120, 130, 132, 147, 177, 228, 342, 345, 364, 382, 425, 1029], "iris": 1030, "is_classifi": 441, "is_multilabel": 960, "is_regressor": 442, "iso": [178, 284], "isol": 1004, "isolationforest": [155, 569], "isomap": [239, 240, 694, 995], "isoton": [21, 249, 413, 989, 1047, 1048, 1049, 1051, 1053, 1054], "isotonic_regress": 643, "isotonicregress": 641, "issu": [384, 385], "iter": [187, 289, 419, 987], "iterativeimput": [186, 633, 988], "j": 1022, "jaccard": 998, "jaccard_scor": 744, "job": 397, "joblib": [373, 391, 409], "johnson": [250, 1010], "johnson_lindenstrauss_min_dim": 904, "joint": 213, "k": [77, 79, 82, 91, 92, 93, 95, 98, 101, 116, 301, 323, 360, 415, 419, 998, 1001, 1008, 1030, 1031], "k_mean": 465, "kappa": 998, "kbinsdiscret": [319, 321, 875], "kcachegrind": 391, "kddcup": 380, "kddcup99": 256, "kdtree": [851, 1001], "keep": 988, "kei": 409, "kernel": [18, 42, 43, 129, 175, 180, 181, 183, 184, 188, 195, 196, 251, 252, 302, 303, 311, 329, 344, 347, 352, 354, 420, 421, 425, 624, 990, 991, 996, 1008, 1013, 1030], "kernel_approxim": [22, 1049, 1051, 1052, 1053, 1054, 1055], "kernel_metr": 771, "kernel_ridg": [23, 1056], "kernelcenter": 876, "kerneldens": 855, "kernelpca": [129, 541], "kernelridg": 649, "keyword": [330, 1050, 1052], "kfold": 811, "kmean": [94, 98, 328, 453], "kmeans_plusplu": 466, "kneighbors_graph": 863, "kneighborsclassifi": 852, "kneighborsregressor": 853, "kneighborstransform": 854, "knn": [187, 327], "knnimput": 634, "knowledg": 386, "known": [389, 1047, 1048], "kpca": 420, "l": 199, "l1": [52, 203, 210, 212, 235, 355, 424], "l1_min_c": 917, "l2": [223, 355], "label": [40, 71, 284, 337, 338, 339, 380, 381, 415, 419, 422, 998, 1009, 1011], "label_binar": 894, "label_ranking_average_precision_scor": 745, "label_ranking_loss": 746, "labelbinar": [877, 1009], "labelencod": 878, "labelpropag": 905, "labelspread": 906, "lag": 51, "languag": 1032, "laplacian": 996, "laplacian_kernel": 772, "lar": [206, 656, 994], "larg": 423, "lars_path": 688, "lars_path_gram": 689, "larscv": 657, "lasso": [52, 203, 204, 205, 206, 207, 208, 213, 328, 658, 994], "lasso_path": 690, "lassocv": 659, "lassolar": 660, "lassolars": 662, "lassolarscv": 661, "latenc": [48, 372], "latent": [53, 116, 420], "latentdirichletalloc": 542, "latest": 403, "layer": [192, 313, 1002], "lda": [69, 132, 420, 992], "leakag": 368, "learn": [0, 40, 43, 50, 84, 124, 127, 174, 188, 190, 191, 192, 196, 238, 239, 240, 241, 252, 253, 271, 272, 279, 308, 314, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 371, 372, 374, 381, 383, 385, 386, 387, 389, 390, 397, 400, 403, 420, 422, 993, 995, 1003, 1011, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1035], "learner": [138, 422], "learning_curv": 834, "learningcurvedisplai": 812, "least": [117, 151, 208, 214, 217, 994], "leav": [363, 419, 994], "leaveonegroupout": 813, "leaveoneout": 814, "leavepgroupsout": 815, "leavepout": 816, "ledoit": [68, 111, 417], "ledoit_wolf": 485, "ledoit_wolf_shrinkag": 486, "ledoitwolf": [110, 479], "lemma": 1010, "length": [155, 403], "lesson": [190, 191], "level": [180, 181, 373, 415, 422], "liabil": 219, "librari": [372, 373], "libsvm": 379, "likelihood": [110, 198, 199, 280, 998, 1003], "limit": [148, 175, 372, 403, 409, 423], "lindenstrauss": [250, 1010], "line": [164, 178], "linear": [24, 42, 61, 68, 69, 151, 175, 188, 191, 197, 198, 215, 219, 222, 225, 239, 240, 251, 328, 347, 352, 354, 372, 394, 397, 992, 994, 995, 996, 1008, 1030], "linear_kernel": 773, "linear_model": [24, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "lineardiscriminantanalysi": [332, 555], "linearregress": [221, 663], "linearsvc": [346, 910], "linearsvr": 911, "link": [372, 998], "linkag": [96, 415], "linnerrud": 382, "linux": [383, 397, 403], "list": [71, 1021], "loa": 180, "load": [43, 45, 54, 84, 92, 120, 144, 146, 148, 152, 164, 173, 193, 212, 237, 240, 247, 251, 259, 278, 286, 287, 297, 301, 323, 324, 348, 351, 359, 360, 361, 378, 379, 390, 397, 423, 1023, 1031, 1032], "load_breast_canc": 506, "load_diabet": 507, "load_digit": 508, "load_fil": 509, "load_iri": 510, "load_linnerud": 511, "load_sample_imag": [512, 513], "load_svmlight_fil": [514, 515], "load_win": 516, "loader": 9, "local": [239, 240, 304, 305, 995, 1004], "locally_linear_embed": 699, "locallylinearembed": 695, "localoutlierfactor": 856, "lof": [304, 305], "log": [198, 199, 998], "log_loss": 747, "logarithm": 998, "logist": [106, 202, 209, 210, 211, 212, 234, 235, 994, 1030], "logisticregress": [297, 664], "logisticregressioncv": 665, "loo": 419, "look": [51, 252, 354], "loss": [154, 219, 229, 328, 331, 333, 422, 998, 1056], "lot": 397, "love": 1022, "low": [415, 422, 424], "lower": 373, "lpo": 419, "lsa": 360, "mac": 403, "machin": [174, 188, 190, 191, 192, 316, 343, 393, 1003, 1013, 1023, 1030], "machinali": 1022, "maco": 383, "macport": 403, "macro": 286, "mahalanobi": 112, "mail": 1021, "main": [46, 219], "maintain": [0, 385, 389, 409], "major": [389, 422, 1047, 1048], "make": [159, 162, 187, 385, 389, 400], "make_biclust": 517, "make_blob": [390, 518], "make_checkerboard": 519, "make_circl": 520, "make_classif": [390, 521], "make_column_selector": 472, "make_column_transform": 473, "make_friedman1": 522, "make_friedman2": 523, "make_friedman3": 524, "make_gaussian_quantil": 525, "make_hastie_10_2": 526, "make_low_rank_matrix": 527, "make_moon": 528, "make_multilabel_classif": 529, "make_pipelin": 871, "make_regress": [390, 530], "make_s_curv": 531, "make_scor": 748, "make_sparse_coded_sign": 532, "make_sparse_spd_matrix": 533, "make_sparse_uncorrel": 534, "make_spd_matrix": 535, "make_swiss_rol": 536, "make_union": 872, "mallow": 415, "manag": [373, 403], "manhattan_dist": 774, "mani": [272, 332, 373, 397, 1056, 1057], "manifold": [25, 188, 238, 239, 240, 241, 381, 995, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "manual": [271, 414], "map": [251, 322, 1008], "mar": 1022, "margin": [198, 199, 231, 349, 353], "mark": 988, "markdown": 390, "market": [50, 1028], "match": [218, 994], "matern": 625, "mathemat": [40, 412, 422, 990, 992, 1001, 1005, 1012, 1013, 1014], "matric": [40, 394, 1008], "matrix": [53, 54, 183, 200, 270, 415, 420, 998], "matter": 191, "matthew": 998, "matthews_corrcoef": 749, "mat\u00e9rn": [184, 425], "max": [110, 998], "max_error": 750, "maxabs_scal": 895, "maxabsscal": [318, 879], "maximum": [231, 349, 1003], "md": [696, 995], "mdi": [146, 193], "mean": [77, 79, 82, 91, 92, 93, 95, 97, 98, 145, 146, 187, 193, 223, 360, 415, 998, 1008, 1031], "mean_absolute_error": 751, "mean_absolute_percentage_error": 752, "mean_gamma_devi": 753, "mean_pinball_loss": 754, "mean_poisson_devi": 755, "mean_shift": 467, "mean_squared_error": 756, "mean_squared_log_error": 757, "mean_tweedie_devi": 758, "mean_variance_axi": 979, "meanshift": [97, 454], "measur": [159, 280, 415, 998], "media": 1021, "median": [994, 998], "median_absolute_error": 759, "member": 384, "memori": [87, 334, 372, 391, 393], "merg": 389, "meson": [393, 1057], "messag": 277, "meta": [40, 158, 253, 295, 329, 422], "metadata": [40, 253, 333, 334, 359, 399, 406, 1056, 1057, 1058], "metadatarequest": 954, "metadatarout": 955, "metaestimatormixin": 435, "method": [96, 107, 116, 137, 175, 188, 239, 241, 265, 294, 296, 399, 415, 990, 1004, 1005, 1031], "methodmap": 956, "metric": [26, 71, 74, 151, 271, 281, 411, 415, 419, 987, 996, 998, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "micro": [284, 286], "min_cluster_s": 89, "min_po": 927, "min_resourc": 987, "min_sampl": 89, "mincovdet": 480, "mini": [415, 420], "minibatchdictionarylearn": 543, "minibatchkmean": [76, 98, 124, 455], "minibatchnmf": [331, 544], "minibatchsparsepca": [124, 420, 545], "minim": [390, 1014, 1052, 1053], "minimum": [113, 417], "minmax_scal": 896, "minmaxscal": [318, 880], "minor": 389, "misc": 1039, "miscellan": [24, 188, 245, 1047, 1048, 1049, 1050, 1051, 1052, 1055], "mislead": 1006, "miss": [154, 185, 186, 187, 188, 327, 333, 334, 422, 988, 1008, 1014], "missingind": 635, "mix": 104, "mixin": 387, "mixtur": [27, 188, 261, 262, 263, 266, 267, 268, 997, 1047, 1048, 1052, 1053, 1055, 1057], "mlp": 315, "mlpclassifi": [314, 867], "mlpregressor": 868, "mnist": [235, 315], "mode": [116, 372], "model": [24, 26, 28, 42, 45, 49, 51, 91, 108, 116, 125, 131, 144, 145, 146, 148, 149, 152, 155, 172, 173, 175, 180, 188, 191, 192, 193, 196, 197, 198, 203, 207, 208, 213, 219, 222, 237, 247, 252, 256, 257, 261, 263, 267, 268, 269, 271, 276, 277, 279, 284, 297, 305, 310, 316, 323, 328, 330, 334, 352, 354, 359, 372, 387, 397, 398, 400, 409, 410, 419, 987, 993, 994, 997, 998, 1000, 1002, 1003, 1023, 1027, 1030, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "model_select": [28, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "modifi": 995, "modul": [1039, 1047, 1048, 1054, 1055, 1056, 1057], "mona": 180, "monitor": 385, "monoton": [154, 156, 334, 422], "more": [330, 397, 1002], "morgan": 1022, "most": 337, "motor": 219, "movi": 1032, "mp": 411, "much": 164, "multi": [24, 89, 138, 158, 192, 213, 228, 242, 255, 281, 284, 313, 366, 391, 994, 995, 998, 1002, 1013, 1014], "multiclass": [29, 40, 188, 234, 286, 294, 295, 327, 394, 413, 998, 999, 1023, 1030, 1048, 1051, 1052, 1053], "multicollinear": 194, "multidimension": 239, "multilabel": [26, 122, 254, 297, 381, 394, 998, 999, 1023], "multilabel_confusion_matrix": 760, "multilabelbinar": [881, 1009], "multinomi": [211, 235, 994, 1000], "multinomialnb": 849, "multioutput": [30, 188, 296, 999, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057], "multioutputclassifi": [842, 999], "multioutputregressor": [843, 999], "multipl": [107, 258, 281, 368, 392, 419, 987, 988, 998, 1047, 1048], "multitaskelasticnet": 666, "multitaskelasticnetcv": 667, "multitasklasso": 668, "multitasklassocv": 669, "multivari": [116, 988], "murmurhash3_32": 963, "mutual": [168, 415], "mutual_info_classif": 613, "mutual_info_regress": 614, "mutual_info_scor": 761, "my": 397, "n_featur": 48, "n_job": 397, "naiv": [42, 51, 60, 61, 1000], "naive_bay": [31, 1047, 1049, 1050, 1051, 1052, 1054, 1055], "name": [156, 330, 397, 416], "nan": 988, "nan_euclidean_dist": 775, "nativ": [148, 324, 327, 329, 334], "ndcg_score": 762, "nearest": [101, 188, 298, 299, 300, 301, 306, 309, 310, 327, 988, 1001, 1030], "nearestcentroid": 857, "nearestneighbor": 858, "necessari": 390, "need": 397, "neg": [53, 124, 173, 214, 420, 994], "neighbor": [32, 101, 188, 239, 298, 299, 300, 301, 306, 310, 323, 327, 988, 995, 1001, 1030, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "neighborhood": [306, 307, 308, 1001], "neighborhoodcomponentsanalysi": 859, "nest": [282, 416, 1027], "net": [200, 204, 994], "netbsd": 403, "network": [188, 192, 312, 1002, 1003], "neural": [188, 192, 312, 1002, 1003], "neural_network": [33, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "new": [327, 329, 330, 332, 333, 385, 397, 1016, 1039, 1040, 1042, 1043, 1044, 1045, 1046], "newsgroup": [103, 359, 380, 1032], "next": [51, 398], "nightli": 383, "nmf": [124, 331, 420, 546], "nnmf": 420, "nois": [181, 182, 199], "noisi": [127, 182, 223], "non": [42, 53, 124, 151, 214, 219, 223, 239, 282, 335, 347, 354, 420, 994, 1008], "non_negative_factor": 553, "none": 368, "norm": 420, "normal": [68, 196, 219, 318, 322, 882, 897, 998, 1008], "normalized_mutual_info_scor": 763, "note": [374, 411, 414, 419], "notfittederror": 583, "novelti": [304, 1004, 1013], "now": [327, 330, 1049], "number": [71, 94, 148, 154, 172, 289, 372, 387, 987, 988], "numer": [191, 335, 373, 387], "numpi": [373, 390], "nusvc": 912, "nusvr": 913, "nystroem": [645, 990], "oa": [68, 110, 111, 428, 481], "object": [40, 247, 272, 387, 397, 987, 998, 1029, 1036], "observ": [190, 1030, 1031], "obtain": [397, 419], "occurr": 1032, "off": [271, 291, 994], "okcupid": 1022, "older": 1039, "olivetti": 380, "omp": 994, "one": [117, 148, 257, 994, 998], "oneclasssvm": 914, "onehotencod": [331, 883], "onetoonefeaturemixin": 436, "onevsoneclassifi": [838, 999], "onevsrestclassifi": [297, 839, 999], "onli": [216, 236, 1050, 1052], "onlin": [84, 226, 330, 331, 1012], "onnx": 409, "oob": 142, "open": 1028, "openml": [43, 324, 327, 379], "openmp": [373, 386], "oper": [40, 286, 287, 384, 394, 425, 998], "optic": [99, 382, 415, 456], "optim": [28, 40, 391, 987], "optimis": 181, "option": [387, 414], "oracl": 417, "ordin": 148, "ordinalencod": [333, 884], "ordinari": [217, 994], "org": [379, 389, 1022], "origin": [87, 129, 283, 308, 318], "orthogon": [218, 994], "orthogonal_mp": 691, "orthogonal_mp_gram": 692, "orthogonalmatchingpursuit": 670, "orthogonalmatchingpursuitcv": 671, "osx": [397, 403], "other": [324, 379, 397, 422, 1017, 1039], "otto": 1022, "our": [92, 272, 275, 291, 385], "out": [46, 150, 374, 393, 419, 987, 994, 1000], "outdat": 393, "outlier": [24, 47, 201, 236, 246, 256, 304, 305, 318, 994, 1004, 1008], "outliermixin": 437, "outlin": 1006, "output": [158, 255, 318, 332, 334, 366, 1014, 1030], "outputcodeclassifi": [840, 999], "over": 258, "overfit": 292, "overhead": 372, "oversubscript": 373, "overview": [295, 392, 409, 415, 1004], "ovo": 286, "ovr": 286, "own": [387, 397, 998], "p": [419, 1022], "packag": [251, 1017, 1051], "pair": 415, "pair_confusion_matrix": 721, "paired_cosine_dist": 776, "paired_dist": 777, "paired_euclidean_dist": 778, "paired_manhattan_dist": 779, "pairwis": [26, 42, 277, 335, 996], "pairwise_dist": 784, "pairwise_distances_argmin": 785, "pairwise_distances_argmin_min": 786, "pairwise_distances_chunk": 787, "pairwise_kernel": 780, "pairwisekernel": 626, "panda": [332, 390, 397], "parallel": [40, 146, 373, 391, 415, 422, 964, 987], "parallel_backend": 966, "paramet": [28, 40, 45, 110, 151, 275, 329, 348, 355, 385, 387, 398, 399, 416, 422, 987, 994, 998, 1013, 1023, 1027, 1032], "parametergrid": 817, "parametersampl": 818, "parametr": 1003, "parametrize_with_check": 942, "pariba": 1022, "paristech": 1022, "pariti": 98, "parser": [332, 379], "part": [84, 424], "parti": [219, 253, 403], "partial": [117, 190, 192, 257, 1005], "partial_depend": 639, "partialdependencedisplai": 638, "partit": 196, "passiv": 994, "passiveaggressiveclassifi": 672, "passiveaggressiveregressor": 673, "past": 0, "patch": [127, 423], "patchextractor": 589, "path": [155, 206, 212, 224, 367, 403], "pattern": 134, "pca": [43, 92, 106, 120, 124, 125, 128, 129, 130, 131, 132, 323, 334, 335, 420, 547, 1015, 1031], "pdp": 192, "peerindex": 1022, "penalti": [210, 230, 355], "peopl": [0, 397, 1039, 1040, 1041, 1042], "per": 360, "percentag": 998, "percentil": 351, "perceptron": [192, 313, 674, 994, 1002], "perform": [71, 77, 280, 323, 329, 331, 335, 337, 360, 372, 385, 386, 415, 419, 1032], "period": [42, 220], "permiss": 397, "permut": [145, 193, 194, 283, 327, 419, 1006], "permutation_import": 640, "permutation_test_scor": 835, "perplex": 244, "persist": 409, "phimeca": 1022, "pickl": 409, "pictur": 80, "pinbal": 998, "pipelin": [34, 102, 103, 105, 106, 159, 170, 188, 191, 248, 253, 258, 278, 324, 351, 387, 397, 398, 416, 424, 870, 1015, 1028, 1032, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "pitfal": [191, 368], "pixel": 146, "pl": 116, "plai": 351, "plan": 397, "plant": 382, "platform": [383, 393, 403], "plot": [20, 26, 39, 45, 46, 48, 57, 60, 65, 69, 72, 75, 81, 83, 84, 91, 97, 98, 100, 101, 110, 114, 116, 120, 121, 122, 125, 126, 139, 144, 147, 152, 155, 159, 160, 161, 162, 164, 172, 187, 192, 198, 199, 203, 211, 212, 213, 223, 224, 228, 240, 247, 251, 256, 257, 259, 267, 273, 274, 279, 281, 284, 286, 290, 293, 297, 305, 316, 324, 327, 329, 330, 337, 345, 346, 351, 352, 359, 364, 392, 993, 1005, 1036], "plot_tre": 924, "pls1": 116, "pls2": 116, "plscanon": [418, 489], "plsregress": [418, 490], "plssvd": [418, 491], "point": [126, 271, 291, 308, 409], "poisson": [219, 237, 328, 329, 998], "poissonregressor": 675, "polar": [51, 334], "polynomi": [42, 196, 198, 199, 220, 352, 990, 994, 996, 1008, 1030], "polynomial_kernel": 781, "polynomialcountsketch": [329, 646], "polynomialfeatur": 885, "posit": [124, 330], "possibl": [91, 390], "post": [28, 271, 280, 291, 363, 414], "post1": 1049, "posterior": 184, "power": [117, 219], "power_transform": 898, "powertransform": [318, 886], "pr": [384, 389], "practic": [277, 368, 386, 390, 995, 1002, 1012, 1013, 1014], "pre": [280, 368, 398], "precis": [284, 998], "precision_recall_curv": 788, "precision_recall_fscore_support": 789, "precision_scor": 790, "precisionrecalldisplai": [247, 706], "precomput": [133, 200, 327, 420], "predefin": [419, 998], "predefinedsplit": 819, "predict": [42, 48, 51, 60, 117, 139, 151, 162, 176, 190, 199, 219, 252, 271, 273, 284, 337, 372, 397, 398, 414, 419, 425, 998, 1009, 1023, 1030], "predictionerrordisplai": 707, "predictor": 159, "premium": 237, "prepar": [124, 139, 149, 154, 196, 239, 286, 287, 323, 348, 389], "preprocess": [35, 152, 159, 188, 191, 192, 256, 258, 317, 361, 368, 397, 1008, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "preprocessor": 192, "preserv": 393, "preval": 280, "princip": [54, 117, 420, 1015, 1031], "prior": [52, 184, 262], "privat": 1056, "probabilist": [131, 176, 420, 425], "probabl": [60, 61, 62, 65, 161, 178, 413, 422, 1013], "problem": [191, 271, 420, 1013, 1014, 1023, 1028, 1030, 1031], "process": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 368, 400, 425, 997, 1026], "process_rout": 958, "processor": 398, "product": [184, 237, 393, 397, 409, 425, 627], "profil": 391, "project": [0, 117, 129, 132, 250, 387, 397, 1010, 1015, 1017], "pronounc": 397, "propag": [50, 72, 337, 338, 339, 415, 1011], "proper": [51, 180], "properti": 399, "propos": 400, "provid": 390, "prune": [327, 363, 1014], "public": 1049, "publica": 1022, "pull": [385, 389, 393, 397], "pure": 237, "purpos": [223, 361, 1018], "pursuit": [218, 994], "put": 1028, "pypi": 397, "pytest": 393, "python": [251, 373, 391, 1016, 1017], "pytorch": 411, "qda": [69, 992], "quadradt": 184, "quadrat": [69, 425, 992], "quadraticdiscriminantanalysi": 556, "qualit": [42, 51], "qualiti": [360, 998], "quantifi": [360, 998], "quantil": [51, 151, 154, 221, 330, 331, 994], "quantile_transform": 899, "quantileregressor": [221, 676], "quantiletransform": [318, 887], "quantiz": [82, 87, 1031], "question": [397, 1021], "r2_score": 791, "r_regress": 615, "radial": [184, 425, 990, 1030], "radius_neighbors_graph": 864, "radiusneighborsclassifi": 860, "radiusneighborsregressor": 861, "radiusneighborstransform": 862, "rand": 415, "rand_scor": 792, "random": [40, 54, 124, 142, 144, 157, 158, 193, 194, 250, 259, 283, 285, 334, 368, 387, 394, 419, 420, 422, 987, 994, 1010, 1015], "random_project": [36, 1053], "random_st": 397, "randomforestclassifi": 570, "randomforestregressor": 571, "randomized_range_find": 946, "randomized_svd": 947, "randomizedsearchcv": 820, "randomli": [121, 122], "randomst": 368, "randomtreesembed": 572, "rang": 1008, "rangespan": 1022, "rank": [26, 219, 998], "ransac": [222, 994], "ransacregressor": 677, "rate": 422, "ratio": [280, 998], "ration": [184, 425], "rationalquadrat": 629, "rbf": [251, 347, 348, 352, 425, 628, 996, 1013, 1030], "rbf_kernel": 782, "rbfsampler": 647, "rcv1": 380, "reachabl": 415, "read": 385, "real": [41, 47, 108, 188, 380], "recal": [284, 998], "recall_scor": 793, "receiv": [286, 287, 998], "recogn": 67, "recognit": [44, 380, 382, 1028], "recommend": [368, 380, 1017], "reconstruct": [43, 52, 127], "reconstruct_from_patches_2d": 593, "recov": 198, "recurs": [171, 172, 424], "redirect": 54, "reduc": [92, 372], "reduct": [105, 239, 243, 258, 307, 323, 360, 992, 1001, 1015], "refer": [1, 49, 61, 63, 113, 127, 141, 196, 203, 295, 311, 425, 988], "refit": [271, 275, 1023], "regard": [271, 414], "region": [80, 277], "register_parallel_backend": 968, "regress": [24, 26, 42, 51, 106, 108, 116, 117, 139, 151, 152, 162, 175, 180, 181, 182, 183, 198, 199, 202, 208, 210, 211, 212, 215, 217, 219, 221, 234, 236, 237, 249, 252, 310, 354, 365, 366, 381, 416, 425, 989, 991, 994, 998, 999, 1001, 1002, 1012, 1013, 1014, 1030], "regressor": [24, 48, 139, 151, 198, 223, 325, 327, 330, 422], "regressorchain": [844, 999], "regressormixin": 438, "regular": [77, 110, 153, 191, 212, 223, 224, 313, 355, 994, 1002], "reinforc": 397, "relat": [42, 46, 1006, 1017, 1046], "releas": [188, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 389, 403, 1037], "relev": [112, 203, 994], "remark": [42, 91, 243, 250], "remot": 393, "remov": [397, 424, 1008, 1039], "repeat": [368, 416, 419], "repeatedkfold": 821, "repeatedstratifiedkfold": 822, "replac": 187, "repli": 393, "replic": 409, "report": [385, 390, 998], "repositori": 379, "represent": [120, 192, 248, 328, 372, 387, 423, 1031], "reproduc": [368, 390], "request": [385, 389, 393, 397], "resampl": 969, "rescal": 323, "reshap": [372, 1029], "resourc": [289, 373, 385, 987, 1016, 1021], "respect": 280, "respons": [116, 400], "rest": [211, 286], "restart": 391, "restrict": [316, 1003], "result": [45, 46, 57, 63, 72, 81, 83, 84, 91, 92, 97, 98, 101, 110, 112, 114, 125, 126, 139, 144, 159, 162, 187, 196, 203, 224, 252, 256, 281, 290, 297, 305, 324, 354, 360, 368, 987], "retriev": [50, 327], "return": 411, "reuter": 46, "review": [384, 385, 393, 1032], "rfe": 599, "rfecv": 600, "rich": [248, 328], "ridg": [175, 199, 201, 217, 223, 224, 252, 325, 678, 991, 994], "ridge_regress": 693, "ridgeclassifi": 680, "ridgeclassifiercv": 681, "ridgecv": 679, "right": 1025, "roadmap": 1018, "robust": [24, 89, 112, 113, 198, 222, 225, 368, 417, 987, 994], "robust_scal": 900, "robustscal": [318, 888], "roc": [259, 274, 286, 287, 327, 998], "roc_auc_scor": 794, "roc_curv": 795, "roccurvedisplai": [247, 708], "role": 400, "roll": [243, 387], "root_mean_squared_error": 796, "root_mean_squared_log_error": 797, "rotat": 134, "rout": [40, 253, 333, 334, 399, 406, 1056, 1057, 1058], "routin": [46, 373, 394], "rule": 998, "run": [45, 92, 281], "runtim": [334, 383], "r\u00b2": 998, "sa": 256, "safe_mask": 970, "safe_sparse_dot": 948, "safe_sqr": 971, "same": 1030, "sampl": [9, 40, 57, 72, 89, 97, 110, 125, 126, 169, 200, 232, 252, 278, 290, 310, 328, 354, 357, 379, 394, 399, 422, 994], "sample_without_replac": 967, "saniti": 393, "save": 397, "scalabl": [196, 279, 328], "scale": [89, 191, 239, 242, 323, 355, 374, 901, 995, 1004, 1008, 1015], "scaler": 318, "scatter": [116, 120], "scenario": 994, "scientif": [1016, 1026], "scikit": [0, 40, 253, 272, 327, 328, 329, 330, 331, 332, 333, 334, 335, 371, 372, 383, 386, 387, 389, 390, 397, 400, 403, 1017, 1018, 1022, 1023, 1024, 1029, 1032, 1035], "scipi": [373, 1056], "score": [54, 116, 144, 164, 172, 187, 198, 267, 276, 283, 284, 351, 406, 415, 419, 993, 998, 1013, 1027], "script": 390, "search": [258, 275, 277, 285, 288, 295, 398, 987, 1027, 1032], "second": [47, 71], "section": 1023, "secur": [409, 1057], "seek": 1031, "segment": [80, 100], "select": [24, 26, 88, 94, 105, 131, 164, 167, 169, 172, 173, 188, 207, 208, 213, 267, 269, 351, 397, 406, 410, 419, 424, 987, 994, 1027, 1045], "selectfdr": 601, "selectfpr": 602, "selectfrommodel": [424, 603], "selectfw": 604, "selectkbest": 605, "selectormixin": 607, "selectpercentil": 606, "self": [329, 340, 1011], "selftrainingclassifi": 907, "semant": 420, "semi": [188, 336, 337, 341, 342, 1011], "semi_supervis": [37, 1049, 1050, 1051, 1055], "sen": [236, 994], "sens": 52, "sensit": 271, "sentiment": 1032, "separ": [125, 231, 349, 350], "sequenc": [183, 397], "sequenti": [173, 424], "sequentialfeatureselector": [329, 608], "seri": [51, 213, 419], "serv": 409, "set": [47, 108, 110, 130, 159, 187, 223, 271, 284, 335, 348, 363, 397, 414, 419, 994, 1023, 1029, 1030, 1032], "set_config": 908, "set_output": [260, 332, 334, 387], "set_param": 387, "setup": 1032, "sever": [237, 241], "sgd": [228, 229, 230, 231, 232, 994, 1012], "sgdclassifi": 682, "sgdoneclasssvm": 683, "sgdregressor": 684, "shape": [244, 1023], "share": [42, 51, 192], "shift": [97, 415], "ship": 1029, "should": 397, "show": [164, 286], "show_vers": 909, "shrinkag": [110, 417, 422, 992, 1030], "shrunk": 417, "shrunk_covari": 487, "shrunkcovari": 482, "shrunken": 1001, "shuffl": [419, 972], "shufflesplit": 823, "sigmoid": [352, 413, 996, 1030], "sigmoid_kernel": 783, "signal": [203, 420, 1031], "signific": 283, "silhouett": [94, 415], "silhouette_sampl": 798, "silhouette_scor": 799, "similar": [183, 996, 998], "simpl": [136, 175, 253, 303, 391, 1029], "simpleimput": [335, 636], "simul": 190, "sine": [184, 268, 425], "singl": [141, 159, 237, 247, 381, 415, 988], "single_source_shortest_path_length": 952, "singular": [54, 420], "sinusoid": 199, "site": 389, "size": 422, "sketch": 990, "skew": 990, "skewedchi2sampl": 648, "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "sklearn_assume_finit": 373, "sklearn_build_enable_debug_symbol": 373, "sklearn_enable_debug_cython_direct": 373, "sklearn_pairwise_dist_chunk_s": 373, "sklearn_run_float32_test": 373, "sklearn_se": 373, "sklearn_skip_network_test": 373, "sklearn_tests_global_random_se": 373, "sklearn_warnings_as_error": 373, "sklearn_working_memori": 373, "skop": 409, "slep": 400, "smacof": 700, "small": 390, "sne": [244, 995], "so": 397, "social": 1021, "soft": 422, "solido": 1022, "solut": 91, "solv": [1030, 1031], "solver": [226, 420, 994], "some": 351, "someth": 390, "sometim": 397, "sort_graph_by_row_valu": 865, "sourc": [103, 125, 383], "space": [50, 129, 416, 987, 995], "spars": [40, 114, 124, 133, 191, 203, 205, 234, 327, 334, 359, 360, 394, 417, 420, 424, 1008, 1010, 1012, 1056], "sparse_encod": 554, "sparsecod": 548, "sparsefunc": 1048, "sparsepca": [420, 549], "sparserandomproject": 903, "sparsiti": [210, 216, 423, 1030], "spawn": 373, "speci": [49, 311, 380], "special": 361, "specif": [286, 383, 387, 987, 1017, 1018], "specifi": [156, 397, 987], "spectral": [56, 57, 58, 100, 239, 412, 415, 995], "spectral_clust": 468, "spectral_embed": 701, "spectralbiclust": [57, 457], "spectralclust": 458, "spectralcoclust": 459, "spectralembed": 697, "speed": [48, 391], "sphere": 241, "sphinx": 385, "spline": [42, 220, 330, 1008], "splinetransform": 889, "split": [148, 329, 368, 419], "splitter": [28, 368], "sponsor": 0, "spotifi": 1022, "sprint": 0, "squar": [117, 151, 184, 214, 217, 223, 425, 990, 994, 996, 998], "stabil": 328, "stabl": 330, "stack": [159, 327, 422], "stackingclassifi": 573, "stackingregressor": 574, "stall": 385, "standard": [393, 1008], "standardscal": [318, 890], "start": 398, "statement": 1018, "statist": [277, 1017, 1026, 1029], "statlog": 271, "statu": 406, "std": [164, 198], "step": [42, 258, 398, 416], "stochast": [227, 233, 239, 314, 994, 995, 1003, 1012], "stock": [50, 1028], "stop": [149, 154, 227, 423, 1012], "strategi": [87, 275, 295, 314, 321, 333, 335, 374, 415, 998], "stratif": 419, "stratifi": 419, "stratifiedgroupkfold": [419, 824], "stratifiedkfold": 825, "stratifiedshufflesplit": 826, "stream": 374, "string": 397, "strip": 359, "strong": 201, "strongli": 1006, "structur": [50, 73, 81, 101, 183, 339, 367, 1028], "studi": 256, "submit": 385, "subpackag": 1018, "subsampl": 422, "subscript": 335, "subtleti": 368, "success": [288, 289, 329, 987], "sum": 630, "summar": 409, "summari": [61, 149, 208, 360, 361, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "supervis": [188, 336, 337, 341, 342, 1002, 1011, 1020, 1030], "support": [0, 61, 148, 154, 188, 213, 324, 327, 328, 329, 330, 332, 333, 334, 343, 346, 354, 397, 403, 406, 411, 413, 422, 1013, 1014, 1021, 1030, 1056, 1057, 1058], "surfac": [147, 251, 364], "svc": [259, 352, 355, 915, 1013], "svd": [54, 124, 420], "svm": [38, 44, 166, 169, 170, 196, 233, 251, 330, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 356, 357, 994, 1004, 1012, 1030, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "svmlight": 379, "svr": [252, 354, 916, 1013], "swiss": 243, "switch": 373, "symmetr": 116, "synthet": [60, 108, 198, 203, 274, 325, 390], "system": 383, "t": [239, 244, 995], "tabl": 397, "tag": [383, 385, 387], "take": 277, "takeawai": 219, "talk": 1016, "tangent": 995, "target": [40, 108, 182, 237, 324, 325, 397, 399, 416, 999, 1008, 1009], "targetencod": [333, 891], "task": [24, 213, 994, 1017], "team": [0, 384], "technic": 400, "techniqu": 240, "templat": 387, "tensor": 990, "term": [360, 399, 423], "test": [43, 110, 168, 280, 283, 290, 359, 363, 383, 385, 387, 393, 394, 419, 1023, 1030, 1032], "text": [16, 46, 188, 248, 278, 341, 358, 359, 360, 361, 380, 423, 1032], "tf": 423, "tfidftransform": 596, "tfidfvector": [360, 361, 597], "than": 397, "theil": [236, 994], "theilsenregressor": 685, "them": [127, 384], "theoret": 250, "thi": [223, 1018], "third": [219, 253, 403], "thread": 373, "threshold": [271, 291, 335, 340, 414], "throughput": [48, 372], "tie": 356, "time": [42, 51, 144, 213, 251, 252, 359, 419, 1019], "timeseriessplit": 827, "tip": [372, 386, 393, 987, 995, 1002, 1012, 1013, 1014], "togeth": [257, 286, 1028, 1031], "toi": [78, 96, 246, 382], "token": 1032, "toler": 173, "tomographi": 52, "too": 373, "tool": [394, 397, 411], "top": [360, 998], "top_k_accuracy_scor": 800, "topic": 53, "total": [157, 363, 422], "tough": 384, "track": [393, 416], "tracker": [385, 1021], "trade": 994, "tradeoff": [274, 998], "train": [138, 139, 149, 152, 155, 162, 172, 223, 247, 252, 256, 257, 259, 267, 290, 295, 316, 324, 325, 329, 340, 348, 352, 359, 363, 364, 367, 409, 419, 1001, 1011, 1023, 1030, 1032], "train_test_split": 836, "transform": [103, 104, 105, 108, 116, 143, 157, 258, 329, 330, 331, 377, 397, 398, 416, 1001, 1008, 1009, 1010, 1031], "transformedtargetregressor": 471, "transformermixin": 439, "translat": 1017, "tree": [39, 138, 139, 143, 145, 146, 147, 154, 157, 188, 193, 219, 327, 332, 333, 334, 362, 363, 364, 365, 366, 367, 397, 422, 424, 1001, 1006, 1014, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "triag": 384, "trick": [372, 391, 393, 423], "trigonometr": 42, "troubleshoot": 403, "true": [198, 199], "truncat": 420, "truncatedsvd": 550, "trust": 164, "trustworthi": 702, "truth": [71, 198], "tsne": [298, 698], "tune": [28, 151, 271, 275, 278, 291, 329, 335, 414, 987, 1032], "tunedthresholdclassifiercv": [335, 828], "tutori": [163, 188, 1016, 1024, 1026, 1032], "tweedi": [237, 998], "tweedieregressor": [237, 686], "two": [100, 140, 205, 257, 277], "type": [104, 262, 386, 387, 399, 411, 415, 1023], "type_of_target": 961, "typic": 384, "t\u00e9l\u00e9com": 1022, "u": 0, "ubuntu": 403, "uci": 295, "unbalanc": [350, 1013], "uncertain": 337, "uncertainti": 51, "unclaim": 385, "undefinedmetricwarn": 584, "under": [183, 397, 1034, 1055], "underfit": 292, "understand": 367, "unfold": 393, "uniform": [318, 1008], "unique_label": 962, "univari": [88, 116, 169, 351, 424, 988], "univers": 387, "unlabel": 1011, "unless": 390, "unstructur": 101, "unsupervis": [1001, 1003, 1015, 1031, 1033], "unweight": 406, "up": 1004, "updat": [1023, 1049], "us": [43, 44, 50, 54, 82, 124, 125, 127, 156, 157, 159, 173, 180, 206, 222, 233, 235, 277, 281, 286, 297, 319, 354, 359, 360, 367, 368, 374, 386, 390, 391, 393, 397, 419, 420, 423, 424, 992, 994, 995, 998, 1002, 1012, 1013, 1014, 1022, 1030, 1032, 1049], "usabl": 397, "usag": [391, 397, 406, 411, 413, 416, 422, 423, 994], "user": [1021, 1034], "util": [40, 378, 390, 394, 1032, 1036, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "v": [88, 101, 110, 111, 113, 117, 129, 172, 192, 193, 201, 211, 237, 280, 286, 290, 292, 363, 415, 422, 988, 1023], "v_measure_scor": 801, "valgrind": [391, 393], "valid": [28, 40, 42, 164, 172, 208, 250, 271, 272, 273, 275, 276, 280, 282, 287, 293, 351, 368, 372, 387, 394, 414, 419, 987, 993, 994, 1027], "validation_curv": 837, "validationcurvedisplai": [333, 829], "valu": [154, 173, 185, 186, 187, 188, 244, 253, 327, 333, 334, 367, 385, 411, 420, 422, 988, 998, 1006, 1008, 1014], "vanilla": [271, 291], "vari": [71, 313, 340, 415], "variabl": [24, 116, 190, 191, 373, 397, 1030], "varianc": [141, 217, 424, 998, 1008], "variancethreshold": 609, "variant": 186, "variat": [262, 997], "variou": [48, 86, 226, 244], "vector": [54, 61, 87, 188, 343, 346, 354, 359, 361, 423, 1013, 1030, 1031], "version": [331, 379, 383, 385, 389, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "versu": [141, 233, 282, 342, 372], "via": [43, 51, 87, 207, 208, 237, 422, 990], "video": [385, 1016], "visual": [4, 28, 50, 92, 134, 149, 247, 252, 259, 272, 315, 328, 348, 415, 416, 998, 1036], "vocabulari": 1030, "vote": [162, 422], "votingclassifi": [160, 161, 575], "votingregressor": 576, "wage": [190, 191], "wai": [192, 385, 397], "want": 385, "ward": [81, 101, 415, 1031], "ward_tre": 469, "warm": 391, "warm_start": 1002, "warn": 394, "we": 101, "weak": [138, 422], "web": 389, "websit": 1049, "weight": [40, 138, 198, 200, 232, 315, 328, 357, 406, 422, 423], "weighted_mod": 949, "what": [367, 397], "when": 271, "where": 1032, "which": 994, "whitekernel": 631, "who": 1022, "why": [397, 422], "wikipedia": 54, "wild": 380, "window": [383, 403], "wine": 382, "winpython": 403, "wisconsin": 382, "within": 105, "without": [73, 306, 359], "wolf": [68, 111, 417], "word": [359, 423, 1032], "work": [40, 188, 358, 372, 384, 397, 1032], "workflow": [384, 409], "world": [41, 108, 188, 380], "would": 1029, "wrap": 297, "written": 67, "wrong": [191, 397], "x": 236, "x86_64": 393, "xor": [179, 352, 425], "y": [236, 397, 1009, 1011], "yeast": 295, "yep": 391, "yhat": 1022, "you": [164, 397], "your": [387, 390, 998], "zero": 998, "zero_one_loss": 802, "zopa": 1022}})