Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.2", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 426, 428, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 478, 479, 480, 481, 483, 485, 486, 489, 492, 493, 494, 495, 497, 498, 499, 501, 504, 505, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 702, 703, 705, 708, 709, 710, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 731, 732, 733, 734, 735, 736, 737, 738, 743, 749, 750, 751, 752, 753, 754, 756, 757, 758, 760, 763, 764, 769, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 917, 918, 923, 924, 926, 928, 929, 934, 936, 941, 942, 943, 944, 945, 946, 948, 951, 952, 953, 955, 956, 959, 960, 969, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "wa": [0, 4, 8, 13, 16, 40, 70, 71, 80, 86, 92, 128, 131, 148, 160, 169, 175, 203, 224, 238, 251, 254, 256, 258, 260, 266, 267, 278, 301, 310, 315, 316, 320, 326, 327, 349, 351, 358, 360, 364, 373, 375, 376, 378, 382, 383, 392, 395, 396, 399, 401, 402, 405, 408, 409, 413, 417, 436, 437, 441, 442, 446, 450, 453, 456, 465, 470, 511, 519, 531, 532, 534, 536, 549, 550, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 581, 582, 584, 586, 587, 598, 623, 626, 637, 646, 647, 650, 651, 652, 654, 660, 661, 681, 682, 709, 724, 725, 763, 778, 779, 782, 792, 793, 794, 797, 798, 808, 820, 822, 834, 844, 870, 871, 890, 894, 900, 901, 903, 928, 929, 952, 973, 974, 975, 984, 985, 988, 991, 995, 998, 1001, 1005, 1011, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "start": [0, 4, 7, 10, 12, 20, 26, 53, 58, 64, 67, 74, 86, 98, 116, 122, 124, 145, 148, 156, 158, 170, 175, 179, 180, 188, 199, 200, 201, 207, 217, 220, 224, 233, 235, 248, 260, 268, 283, 319, 321, 325, 349, 358, 360, 364, 365, 366, 367, 371, 378, 379, 380, 382, 383, 384, 390, 392, 395, 402, 405, 409, 410, 414, 415, 436, 438, 446, 450, 452, 534, 606, 613, 628, 641, 649, 655, 662, 663, 664, 672, 673, 674, 686, 690, 776, 777, 784, 792, 793, 794, 797, 798, 808, 839, 840, 841, 843, 845, 853, 939, 969, 974, 981, 984, 989, 990, 999, 1006, 1009, 1011, 1019, 1020, 1030, 1032, 1035, 1037, 1039, 1040, 1041, 1042, 1043], "2007": [0, 38, 187, 373, 405, 414, 436, 448, 450, 456, 458, 562, 652, 687, 713, 729, 732, 753, 754, 790, 977, 981, 983, 985], "googl": [0, 17, 390, 405, 438, 1004, 1016, 1027], "summer": [0, 4, 48, 1027], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 372, 376, 377, 379, 381, 382, 387, 390, 392, 393, 395, 396, 399, 401, 404, 405, 412, 413, 438, 439, 443, 445, 455, 492, 522, 526, 527, 533, 534, 538, 539, 541, 542, 544, 562, 568, 577, 578, 581, 582, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 660, 661, 678, 679, 681, 682, 825, 826, 827, 864, 871, 953, 982, 986, 995, 997, 999, 1000, 1005, 1006, 1008, 1009, 1012, 1020, 1027, 1029, 1030], "david": [0, 2, 37, 57, 81, 117, 178, 183, 201, 238, 261, 263, 310, 349, 350, 351, 373, 405, 412, 415, 458, 528, 532, 563, 564, 618, 619, 624, 720, 792, 894, 975, 981, 989, 998, 1009, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "cournapeau": [0, 2, 1027, 1030], "later": [0, 11, 53, 111, 116, 125, 151, 170, 175, 178, 238, 278, 296, 351, 360, 384, 390, 391, 395, 399, 843, 866, 867, 875, 877, 995, 1015, 1020, 1030, 1033, 1035, 1039], "year": [0, 4, 134, 148, 156, 168, 169, 170, 199, 200, 217, 375, 377, 382, 390, 409, 413, 796, 801, 803, 876, 981, 985, 1006, 1009, 1018], "matthieu": [0, 2, 1027, 1031, 1042], "brucher": [0, 2, 1027], "work": [0, 4, 9, 17, 32, 44, 45, 48, 52, 67, 78, 114, 121, 134, 148, 157, 158, 168, 169, 170, 188, 203, 216, 235, 245, 247, 258, 278, 289, 290, 311, 316, 318, 319, 321, 338, 350, 351, 360, 365, 366, 367, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 386, 391, 392, 393, 401, 402, 403, 405, 406, 407, 410, 412, 413, 414, 417, 418, 419, 420, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 456, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 500, 504, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 691, 704, 737, 769, 773, 774, 775, 776, 783, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 885, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 934, 938, 953, 974, 975, 977, 979, 980, 981, 982, 984, 985, 987, 988, 991, 992, 995, 998, 999, 1005, 1006, 1009, 1011, 1012, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "part": [0, 31, 36, 61, 68, 71, 82, 114, 117, 120, 124, 129, 137, 138, 139, 140, 145, 156, 166, 178, 235, 248, 255, 257, 274, 299, 307, 310, 312, 351, 366, 373, 375, 378, 380, 384, 386, 391, 392, 395, 401, 403, 405, 409, 410, 412, 413, 415, 442, 445, 489, 490, 491, 517, 527, 533, 538, 570, 580, 581, 582, 609, 621, 788, 862, 880, 882, 883, 884, 885, 886, 887, 888, 974, 975, 977, 982, 986, 1004, 1005, 1006, 1007, 1009, 1013, 1020, 1022, 1027, 1035, 1036, 1038, 1040, 1042], "hi": [0, 406, 985, 1020], "thesi": [0, 375, 405, 412], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 34, 37, 39, 48, 49, 53, 55, 57, 58, 60, 66, 67, 71, 72, 74, 75, 78, 80, 81, 82, 86, 89, 90, 95, 97, 100, 103, 104, 109, 111, 114, 116, 117, 118, 119, 120, 121, 124, 126, 127, 128, 129, 131, 134, 144, 145, 147, 148, 151, 155, 156, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 187, 188, 190, 194, 199, 200, 201, 202, 203, 204, 207, 216, 217, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 248, 250, 254, 256, 257, 258, 260, 261, 262, 263, 265, 266, 269, 270, 272, 274, 275, 278, 281, 283, 286, 289, 290, 292, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 319, 320, 326, 328, 336, 340, 344, 349, 350, 351, 354, 358, 360, 364, 365, 366, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 433, 436, 437, 438, 439, 440, 443, 444, 445, 448, 458, 459, 460, 465, 468, 471, 489, 492, 499, 504, 505, 507, 519, 530, 532, 534, 536, 537, 538, 540, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 587, 598, 602, 605, 606, 607, 626, 628, 629, 630, 632, 639, 640, 641, 643, 644, 645, 647, 649, 651, 654, 655, 657, 659, 661, 662, 664, 665, 670, 671, 672, 675, 676, 680, 681, 682, 692, 695, 699, 708, 714, 716, 721, 723, 724, 729, 730, 733, 735, 737, 749, 751, 752, 776, 778, 780, 783, 789, 791, 792, 793, 794, 797, 798, 800, 808, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 845, 847, 848, 849, 854, 862, 864, 870, 871, 875, 876, 878, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 898, 899, 902, 905, 907, 912, 916, 918, 934, 974, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1008, 1009, 1011, 1018, 1019, 1020, 1024, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "2010": [0, 47, 67, 79, 170, 265, 266, 402, 405, 407, 409, 410, 418, 471, 532, 700, 704, 715, 716, 735, 822, 854, 855, 977, 981, 985, 989, 999, 1004, 1027], "fabian": [0, 2, 186, 204, 221, 295, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036], "pedregosa": [0, 2, 186, 204, 221, 295, 1027, 1028, 1029, 1030, 1031, 1033], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 66, 67, 82, 97, 101, 188, 189, 221, 233, 247, 1004, 1006, 1009, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 66, 67, 73, 82, 89, 90, 97, 101, 102, 182, 188, 189, 196, 197, 221, 223, 231, 233, 247, 307, 340, 341, 393, 1004, 1009, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 184, 186, 187, 188, 190, 192, 193, 228, 231, 266, 273, 295, 393, 1009, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 67, 95, 97, 103, 184, 186, 187, 188, 190, 192, 193, 228, 231, 266, 273, 295, 393, 1009, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "vincent": [0, 2, 47, 67, 154, 158, 1009, 1027, 1029, 1031, 1032, 1034, 1037, 1042, 1043], "michel": [0, 2, 47, 67, 1027, 1029, 1030, 1032, 1034, 1041, 1042], "inria": [0, 5, 9, 30, 37, 52, 54, 57, 75, 82, 117, 157, 178, 183, 184, 186, 190, 192, 193, 204, 221, 222, 228, 231, 238, 261, 263, 266, 273, 295, 310, 344, 349, 350, 351, 654, 1003, 1027], "took": [0, 4, 42, 268], "leadership": 0, "made": [0, 70, 81, 89, 100, 111, 117, 134, 158, 169, 170, 199, 217, 238, 251, 264, 311, 316, 336, 355, 364, 373, 375, 378, 382, 392, 393, 405, 412, 413, 417, 439, 442, 443, 445, 455, 492, 499, 584, 585, 587, 626, 627, 652, 661, 681, 682, 730, 778, 794, 797, 798, 808, 812, 813, 814, 834, 837, 838, 986, 991, 1001, 1005, 1009, 1017, 1019, 1027, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1040, 1041], "first": [0, 4, 5, 7, 8, 11, 17, 20, 25, 26, 30, 31, 32, 34, 39, 55, 56, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 80, 85, 86, 89, 90, 91, 100, 104, 111, 112, 116, 118, 119, 120, 121, 123, 125, 128, 131, 132, 133, 134, 144, 145, 148, 151, 152, 153, 156, 157, 158, 159, 164, 168, 169, 170, 172, 175, 178, 180, 182, 188, 195, 196, 197, 200, 201, 207, 208, 213, 221, 224, 232, 233, 235, 236, 237, 239, 241, 242, 247, 251, 255, 260, 262, 263, 267, 269, 271, 272, 278, 281, 283, 285, 288, 292, 293, 294, 299, 301, 305, 307, 310, 311, 312, 316, 317, 325, 328, 332, 333, 336, 338, 349, 350, 351, 354, 355, 358, 360, 365, 366, 372, 373, 375, 376, 377, 380, 382, 383, 384, 386, 390, 392, 402, 403, 405, 408, 409, 410, 412, 413, 414, 415, 417, 439, 442, 443, 446, 455, 456, 460, 468, 479, 483, 484, 486, 487, 488, 490, 493, 496, 498, 500, 504, 505, 506, 524, 529, 530, 534, 537, 549, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 578, 580, 584, 585, 586, 587, 589, 606, 607, 613, 617, 620, 627, 628, 629, 630, 642, 648, 655, 662, 664, 670, 672, 684, 691, 694, 695, 696, 698, 708, 712, 731, 737, 758, 759, 777, 789, 792, 793, 797, 798, 799, 800, 801, 806, 808, 815, 816, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 842, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 862, 870, 874, 875, 876, 878, 879, 886, 887, 899, 902, 905, 906, 907, 908, 910, 912, 917, 918, 919, 936, 938, 952, 956, 959, 971, 974, 975, 979, 980, 981, 982, 984, 985, 986, 987, 988, 992, 995, 996, 999, 1000, 1001, 1009, 1011, 1017, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "public": [0, 79, 372, 378, 380, 382, 383, 390, 391, 392, 393, 409, 412, 464, 660, 667, 681, 682, 688, 895, 981, 989, 1027, 1032, 1033, 1038, 1039, 1040, 1043], "releas": [0, 235, 322, 365, 367, 376, 378, 379, 381, 386, 390, 392, 413, 439, 442, 443, 460, 463, 486, 487, 492, 497, 498, 500, 508, 511, 517, 520, 534, 557, 558, 560, 561, 563, 595, 598, 624, 626, 628, 630, 636, 642, 644, 648, 654, 665, 676, 684, 697, 698, 713, 743, 783, 790, 794, 797, 798, 800, 808, 816, 819, 823, 839, 841, 858, 862, 867, 870, 871, 872, 876, 877, 878, 894, 895, 897, 902, 905, 906, 929, 953, 1001, 1003, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "februari": [0, 407, 469, 985, 1028, 1032], "1st": [0, 4, 60, 90, 159, 200, 310, 875, 876], "sinc": [0, 4, 5, 11, 25, 27, 34, 37, 49, 53, 55, 66, 70, 71, 72, 96, 121, 137, 145, 148, 151, 156, 169, 170, 172, 175, 181, 199, 201, 203, 216, 229, 233, 234, 235, 247, 250, 256, 260, 262, 263, 269, 270, 278, 283, 285, 286, 311, 318, 319, 329, 333, 336, 344, 349, 350, 351, 360, 365, 373, 376, 378, 379, 380, 382, 383, 386, 390, 391, 392, 395, 396, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 422, 433, 437, 441, 442, 443, 445, 446, 449, 452, 465, 474, 492, 522, 532, 533, 534, 535, 536, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 563, 565, 584, 585, 587, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 628, 629, 634, 640, 641, 646, 647, 650, 651, 652, 654, 655, 660, 661, 662, 664, 670, 671, 672, 675, 703, 705, 730, 736, 737, 745, 746, 763, 784, 797, 798, 800, 818, 819, 820, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 844, 847, 854, 855, 862, 870, 887, 888, 892, 893, 897, 899, 900, 901, 902, 903, 905, 907, 931, 934, 942, 974, 977, 978, 979, 981, 982, 986, 987, 988, 989, 991, 993, 995, 999, 1000, 1001, 1009, 1011, 1020, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sever": [0, 4, 9, 12, 25, 31, 34, 37, 55, 56, 57, 61, 74, 91, 114, 122, 129, 131, 134, 145, 148, 151, 156, 157, 166, 169, 175, 183, 188, 199, 203, 219, 220, 226, 232, 247, 255, 260, 265, 285, 300, 305, 318, 344, 349, 350, 364, 372, 373, 375, 378, 380, 383, 390, 392, 402, 404, 405, 406, 409, 411, 412, 413, 415, 443, 445, 460, 483, 495, 504, 505, 534, 551, 552, 555, 556, 559, 560, 561, 566, 584, 585, 587, 606, 641, 642, 648, 684, 685, 686, 687, 688, 689, 792, 793, 794, 797, 798, 808, 825, 826, 832, 833, 834, 835, 836, 856, 857, 864, 881, 905, 906, 907, 908, 920, 974, 977, 982, 985, 986, 988, 993, 995, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1040, 1043, 1044], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 55, 57, 60, 62, 64, 65, 70, 71, 78, 80, 86, 89, 91, 92, 100, 102, 111, 118, 120, 121, 122, 124, 144, 145, 148, 151, 152, 156, 157, 158, 164, 168, 169, 170, 171, 172, 175, 178, 183, 199, 200, 201, 203, 217, 224, 228, 230, 235, 236, 238, 239, 246, 247, 248, 250, 254, 260, 261, 263, 266, 267, 274, 278, 283, 285, 286, 289, 290, 305, 310, 311, 312, 315, 317, 318, 325, 326, 327, 333, 339, 340, 341, 344, 349, 350, 358, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 488, 490, 491, 492, 504, 505, 510, 519, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 683, 684, 685, 686, 687, 688, 695, 700, 701, 708, 711, 716, 721, 726, 731, 737, 751, 752, 753, 754, 777, 780, 781, 787, 790, 792, 793, 794, 797, 798, 799, 800, 805, 808, 812, 816, 818, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 919, 921, 923, 934, 960, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1011, 1012, 1015, 1016, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "appear": [0, 8, 46, 48, 114, 169, 172, 255, 257, 258, 289, 290, 299, 301, 306, 325, 340, 349, 350, 351, 373, 376, 378, 383, 392, 407, 410, 484, 485, 551, 563, 564, 575, 606, 623, 624, 626, 693, 696, 698, 708, 712, 714, 777, 784, 795, 812, 832, 833, 834, 835, 836, 899, 902, 936, 981, 987, 991, 1027, 1035, 1039, 1040], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 55, 57, 63, 67, 71, 72, 92, 95, 105, 111, 114, 124, 128, 143, 156, 163, 168, 169, 170, 171, 172, 178, 180, 183, 187, 188, 197, 199, 200, 214, 217, 229, 235, 236, 238, 251, 260, 269, 270, 278, 305, 311, 312, 315, 316, 318, 319, 320, 333, 344, 349, 350, 351, 354, 358, 360, 364, 365, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 426, 429, 437, 439, 441, 442, 443, 444, 445, 449, 457, 459, 460, 461, 464, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 511, 530, 534, 536, 537, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 566, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 627, 629, 630, 642, 648, 654, 655, 666, 667, 676, 688, 690, 695, 701, 705, 709, 714, 813, 834, 839, 840, 841, 843, 845, 847, 848, 849, 856, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 895, 897, 898, 905, 906, 907, 908, 912, 913, 933, 953, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1011, 1020, 1024, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 137, 143, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 171, 175, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 238, 240, 242, 245, 246, 247, 249, 250, 251, 255, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 327, 328, 329, 332, 333, 335, 336, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 355, 356, 358, 360, 365, 366, 372, 373, 375, 376, 378, 379, 380, 383, 384, 390, 391, 392, 395, 397, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 430, 433, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 489, 490, 492, 493, 498, 500, 501, 502, 503, 506, 508, 511, 512, 513, 514, 515, 517, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 577, 578, 579, 580, 583, 584, 586, 587, 589, 590, 598, 599, 603, 604, 606, 607, 608, 613, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 688, 689, 690, 695, 696, 698, 699, 700, 701, 703, 705, 709, 712, 713, 717, 718, 719, 721, 723, 724, 725, 726, 729, 730, 731, 732, 736, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 751, 752, 763, 764, 770, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 885, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 923, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 945, 948, 949, 951, 952, 953, 959, 974, 975, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 991, 992, 995, 996, 998, 1000, 1001, 1003, 1004, 1005, 1011, 1012, 1015, 1016, 1018, 1019, 1023, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1044], "month": [0, 4, 156, 170, 311, 373, 378, 382, 393, 1027], "cycl": [0, 4, 42, 44, 50, 62, 95, 184, 246, 251, 267, 269, 318, 319, 378, 382, 396, 404, 410, 575, 576, 623, 797, 798, 913, 974, 975, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "thrive": [0, 378], "intern": [0, 26, 71, 82, 100, 117, 125, 137, 148, 152, 163, 166, 199, 283, 285, 304, 313, 326, 351, 360, 365, 373, 375, 380, 384, 387, 390, 392, 396, 399, 401, 402, 405, 409, 410, 412, 413, 415, 416, 433, 435, 440, 461, 464, 507, 530, 531, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 589, 590, 606, 607, 634, 636, 639, 642, 648, 664, 668, 672, 674, 692, 704, 726, 729, 753, 754, 778, 823, 837, 838, 853, 854, 855, 857, 858, 862, 876, 878, 892, 893, 895, 897, 898, 899, 902, 905, 906, 907, 908, 953, 981, 982, 983, 985, 988, 991, 995, 997, 1000, 1001, 1009, 1027, 1030, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 57, 60, 74, 80, 81, 86, 95, 109, 116, 120, 122, 124, 128, 133, 147, 151, 156, 157, 158, 164, 169, 170, 171, 172, 175, 192, 196, 199, 200, 201, 205, 216, 217, 220, 228, 232, 234, 235, 238, 239, 242, 245, 246, 248, 250, 251, 255, 258, 259, 260, 263, 264, 266, 271, 272, 281, 286, 289, 290, 291, 293, 301, 305, 306, 308, 310, 315, 316, 317, 318, 319, 321, 324, 327, 336, 340, 341, 343, 349, 358, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 390, 391, 392, 393, 395, 396, 399, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 489, 490, 493, 494, 504, 505, 512, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 615, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 683, 684, 685, 686, 687, 688, 691, 707, 709, 716, 736, 758, 769, 773, 774, 775, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 808, 812, 815, 816, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 916, 917, 918, 936, 954, 970, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 997, 998, 999, 1000, 1001, 1006, 1009, 1011, 1015, 1018, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "been": [0, 4, 9, 16, 26, 44, 53, 60, 81, 100, 109, 111, 148, 151, 156, 158, 169, 224, 228, 230, 235, 236, 258, 260, 266, 315, 316, 317, 318, 319, 321, 326, 349, 360, 365, 372, 373, 375, 376, 377, 378, 380, 382, 384, 386, 387, 390, 391, 392, 393, 396, 399, 402, 403, 405, 407, 409, 410, 412, 415, 430, 433, 465, 467, 468, 470, 474, 483, 519, 530, 532, 545, 546, 563, 564, 577, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 629, 630, 654, 655, 662, 663, 664, 669, 671, 672, 673, 674, 716, 773, 774, 775, 788, 794, 797, 798, 800, 808, 816, 821, 822, 846, 894, 897, 975, 977, 978, 980, 981, 982, 985, 986, 988, 991, 995, 997, 999, 1000, 1006, 1009, 1011, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lead": [0, 7, 25, 31, 37, 52, 55, 61, 72, 117, 121, 124, 147, 148, 169, 170, 171, 178, 183, 188, 190, 199, 203, 233, 235, 238, 260, 261, 263, 267, 288, 289, 301, 305, 307, 310, 311, 317, 336, 344, 350, 354, 360, 364, 365, 372, 377, 386, 387, 391, 392, 399, 402, 403, 405, 407, 409, 410, 411, 412, 414, 448, 458, 461, 464, 492, 511, 523, 531, 534, 535, 536, 539, 543, 547, 553, 554, 555, 556, 559, 560, 561, 562, 602, 626, 642, 643, 646, 648, 649, 650, 656, 657, 658, 659, 675, 687, 691, 741, 792, 797, 798, 825, 837, 838, 842, 861, 868, 878, 889, 890, 895, 897, 905, 906, 907, 908, 974, 979, 981, 982, 984, 985, 986, 988, 989, 991, 993, 995, 998, 999, 1001, 1009, 1011, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 88, 91, 92, 93, 95, 98, 100, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 134, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 170, 171, 172, 175, 178, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 205, 207, 208, 216, 217, 219, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 250, 251, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 281, 283, 285, 288, 289, 290, 291, 292, 293, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 326, 327, 333, 334, 336, 340, 341, 342, 344, 345, 346, 349, 350, 351, 354, 356, 357, 358, 360, 364, 365, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 747, 748, 749, 750, 751, 752, 753, 754, 757, 759, 760, 761, 762, 765, 766, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 917, 918, 920, 921, 922, 923, 924, 928, 929, 930, 931, 932, 933, 934, 936, 937, 941, 942, 945, 948, 950, 951, 952, 953, 954, 955, 956, 959, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "decis": [0, 4, 16, 25, 27, 31, 34, 56, 58, 60, 110, 113, 114, 116, 129, 135, 148, 155, 169, 181, 182, 191, 208, 209, 212, 228, 229, 231, 239, 263, 278, 291, 294, 299, 305, 306, 307, 310, 323, 330, 332, 333, 334, 335, 336, 337, 338, 342, 345, 346, 349, 359, 364, 367, 374, 375, 378, 392, 403, 405, 412, 433, 465, 496, 500, 515, 532, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 589, 590, 627, 628, 629, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 694, 696, 698, 699, 703, 716, 721, 722, 730, 734, 735, 737, 751, 777, 783, 784, 789, 794, 797, 798, 808, 823, 825, 826, 828, 839, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 979, 985, 986, 987, 988, 989, 991, 992, 993, 998, 999, 1000, 1003, 1005, 1006, 1007, 1009, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1040, 1041, 1043, 1044], "make": [0, 4, 7, 8, 11, 14, 17, 20, 21, 25, 26, 27, 39, 40, 43, 44, 56, 61, 62, 67, 73, 100, 111, 117, 121, 124, 129, 145, 148, 151, 156, 159, 168, 169, 170, 171, 178, 183, 185, 188, 191, 192, 193, 195, 199, 200, 201, 203, 205, 217, 221, 230, 232, 234, 235, 236, 238, 245, 247, 250, 251, 255, 260, 262, 263, 269, 270, 271, 292, 301, 305, 306, 311, 319, 321, 336, 346, 349, 350, 351, 360, 364, 365, 366, 367, 372, 373, 376, 377, 379, 380, 381, 383, 384, 386, 390, 392, 395, 399, 402, 403, 405, 406, 407, 409, 410, 412, 413, 414, 417, 436, 437, 438, 439, 441, 443, 445, 447, 448, 449, 454, 455, 456, 458, 484, 499, 510, 511, 518, 519, 523, 528, 530, 537, 547, 548, 551, 552, 579, 580, 603, 604, 627, 645, 651, 652, 667, 687, 691, 725, 732, 737, 763, 764, 776, 792, 793, 794, 796, 799, 805, 809, 810, 811, 813, 814, 819, 820, 827, 828, 831, 864, 873, 876, 877, 881, 885, 887, 888, 889, 890, 903, 911, 917, 918, 928, 934, 940, 946, 971, 974, 975, 977, 979, 981, 982, 984, 985, 986, 987, 988, 990, 991, 992, 993, 995, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1016, 1018, 1020, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "process": [0, 4, 5, 19, 26, 30, 31, 34, 45, 46, 47, 48, 50, 66, 70, 72, 74, 79, 81, 96, 97, 99, 111, 121, 128, 137, 138, 139, 140, 161, 168, 178, 201, 203, 235, 236, 238, 245, 246, 251, 260, 262, 263, 272, 278, 305, 317, 321, 325, 340, 350, 351, 354, 364, 365, 366, 367, 373, 377, 378, 380, 382, 384, 387, 390, 391, 392, 399, 405, 406, 407, 409, 410, 411, 412, 413, 414, 418, 444, 445, 471, 492, 500, 519, 530, 531, 532, 533, 534, 557, 558, 559, 584, 585, 587, 606, 607, 609, 610, 611, 613, 614, 615, 618, 619, 621, 623, 628, 629, 635, 639, 660, 668, 681, 682, 699, 718, 736, 776, 792, 794, 797, 798, 808, 818, 819, 820, 829, 830, 846, 860, 864, 866, 867, 868, 877, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 951, 953, 974, 977, 981, 985, 988, 995, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1019, 1020, 1022, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 55, 68, 82, 106, 127, 150, 161, 166, 220, 224, 230, 235, 251, 255, 266, 288, 310, 316, 319, 323, 330, 336, 340, 353, 355, 359, 364, 373, 375, 378, 380, 383, 390, 392, 393, 395, 402, 405, 407, 408, 409, 410, 412, 413, 414, 415, 437, 438, 441, 442, 446, 447, 448, 449, 450, 453, 458, 459, 468, 492, 499, 500, 504, 507, 509, 510, 517, 526, 531, 537, 540, 559, 606, 607, 608, 612, 613, 614, 685, 692, 705, 709, 823, 845, 850, 877, 889, 890, 893, 905, 906, 907, 908, 911, 933, 934, 956, 959, 982, 984, 985, 988, 990, 991, 995, 998, 1001, 1005, 1006, 1014, 1019, 1020, 1027, 1028, 1030, 1031, 1033, 1037], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 147, 148, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 334, 335, 336, 340, 341, 342, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 360, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 932, 933, 934, 936, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 966, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "laid": [0, 168, 378], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 55, 70, 71, 103, 110, 115, 117, 118, 125, 135, 140, 166, 168, 171, 183, 199, 201, 203, 207, 217, 238, 245, 247, 258, 260, 263, 268, 272, 278, 281, 310, 311, 318, 327, 329, 332, 333, 336, 344, 349, 363, 373, 375, 376, 378, 380, 381, 382, 384, 390, 392, 405, 408, 410, 412, 413, 415, 421, 431, 432, 438, 439, 441, 442, 443, 445, 468, 478, 479, 480, 481, 495, 511, 512, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 584, 585, 587, 600, 603, 604, 630, 635, 636, 637, 638, 647, 651, 662, 664, 669, 671, 672, 684, 685, 688, 697, 722, 736, 737, 794, 796, 797, 798, 799, 801, 802, 803, 804, 808, 823, 832, 833, 834, 835, 836, 841, 846, 849, 853, 854, 855, 863, 867, 874, 886, 889, 890, 912, 947, 949, 954, 975, 979, 980, 984, 985, 986, 988, 993, 995, 1006, 1007, 1008, 1009, 1015, 1018, 1020, 1022, 1027, 1029, 1031, 1033, 1035, 1036, 1039, 1040, 1043], "peopl": [0, 6, 70, 169, 237, 263, 349, 350, 365, 366, 373, 375, 377, 378, 382, 393, 411, 489, 490, 637, 834, 1005, 1016], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 34, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 70, 71, 72, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 97, 100, 103, 106, 109, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 144, 145, 147, 148, 151, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 203, 208, 210, 217, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 246, 247, 248, 250, 254, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 288, 289, 293, 296, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 324, 326, 327, 328, 329, 334, 336, 338, 340, 344, 345, 349, 350, 351, 354, 358, 360, 364, 365, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 391, 392, 393, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 426, 429, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 484, 485, 489, 491, 492, 494, 496, 497, 498, 499, 500, 504, 505, 506, 508, 511, 512, 513, 514, 515, 516, 519, 520, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 705, 708, 709, 711, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 745, 746, 748, 749, 751, 752, 756, 757, 758, 760, 762, 763, 764, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 806, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 921, 922, 923, 926, 928, 933, 934, 935, 938, 939, 941, 942, 945, 948, 949, 951, 953, 956, 959, 960, 964, 965, 966, 969, 971, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "current": [0, 8, 46, 111, 156, 169, 217, 305, 315, 365, 366, 373, 376, 378, 379, 380, 383, 387, 390, 392, 393, 401, 402, 404, 405, 409, 412, 413, 414, 415, 436, 442, 446, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 528, 531, 537, 549, 550, 553, 554, 555, 556, 558, 560, 561, 562, 572, 587, 589, 606, 613, 622, 623, 642, 654, 663, 667, 671, 672, 673, 674, 783, 792, 793, 842, 846, 854, 855, 873, 885, 895, 905, 906, 907, 908, 911, 952, 960, 974, 979, 981, 985, 988, 989, 995, 1006, 1018, 1035, 1039, 1041, 1042, 1043], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 20, 24, 27, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 78, 79, 82, 85, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 109, 111, 113, 117, 118, 120, 121, 123, 124, 125, 127, 128, 129, 130, 132, 140, 143, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 166, 169, 170, 172, 175, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 197, 199, 201, 203, 205, 206, 208, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 228, 229, 232, 234, 235, 236, 238, 245, 247, 248, 250, 255, 260, 261, 262, 263, 264, 267, 271, 273, 274, 283, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 302, 304, 305, 308, 311, 313, 315, 317, 318, 319, 320, 321, 325, 326, 333, 334, 335, 336, 337, 340, 341, 342, 343, 346, 349, 350, 351, 355, 356, 357, 358, 360, 364, 365, 366, 367, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 392, 393, 394, 395, 396, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 415, 417, 419, 426, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 485, 492, 494, 496, 500, 506, 507, 515, 521, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 568, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 704, 707, 712, 716, 730, 736, 753, 754, 774, 775, 792, 793, 794, 796, 797, 798, 803, 808, 812, 813, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 915, 917, 918, 921, 934, 936, 942, 943, 945, 969, 973, 974, 976, 977, 979, 981, 982, 983, 986, 987, 988, 989, 990, 992, 993, 995, 997, 998, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1015, 1016, 1018, 1019, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mainten": [0, 378, 386, 390, 395, 398, 981, 1006, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "j\u00e9r\u00e9mie": [0, 1, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "du": [0, 1, 2, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "boisberrang": [0, 1, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "jori": [0, 1, 1034, 1035, 1036, 1039, 1040], "van": [0, 1, 372, 407, 465, 470, 530, 623, 688, 692, 975, 982, 985, 991, 1009, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043], "den": [0, 1, 1028, 1029, 1034, 1035, 1036, 1039, 1040], "bossch": [0, 1, 1034, 1035, 1036, 1040], "lo\u00efc": [0, 1, 1035, 1038, 1040, 1041, 1042, 1043], "est\u00e8v": [0, 1, 1035, 1038, 1040, 1041, 1042, 1043], "thoma": [0, 1, 103, 228, 305, 365, 368, 393, 893, 981, 995, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "j": [0, 1, 11, 17, 37, 38, 40, 43, 61, 70, 79, 80, 81, 111, 114, 115, 126, 152, 164, 170, 211, 223, 237, 245, 259, 260, 265, 271, 287, 293, 296, 309, 320, 358, 365, 372, 373, 375, 382, 384, 390, 402, 403, 405, 407, 409, 410, 412, 413, 415, 416, 433, 436, 440, 442, 449, 450, 465, 470, 494, 509, 512, 513, 514, 516, 524, 527, 530, 532, 533, 534, 536, 537, 543, 549, 555, 556, 589, 590, 628, 629, 633, 640, 641, 644, 645, 662, 663, 665, 676, 684, 685, 686, 688, 689, 690, 692, 701, 704, 706, 710, 712, 714, 717, 718, 719, 721, 750, 751, 753, 754, 769, 773, 783, 784, 787, 788, 826, 827, 834, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 868, 877, 878, 905, 906, 974, 975, 979, 981, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 995, 997, 999, 1000, 1001, 1003, 1020, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "fan": [0, 1, 365, 393, 1000, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "olivi": [0, 1, 14, 17, 37, 48, 61, 188, 199, 217, 221, 261, 263, 349, 350, 351, 393, 893, 998, 1004, 1006, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "grisel": [0, 1, 14, 17, 37, 48, 61, 188, 199, 217, 221, 261, 263, 349, 350, 351, 393, 1004, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "yaroslav": [0, 1, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1043, 1044], "halchenko": [0, 1, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1043], "tim": [0, 1, 116, 130, 1027, 1032, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1044], "head": [0, 1, 26, 71, 116, 130, 156, 169, 187, 188, 217, 242, 250, 311, 315, 320, 378, 386, 410, 1009, 1032, 1033, 1042, 1043, 1044], "nicola": [0, 1, 148, 309, 654, 981, 998, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "hug": [0, 1, 148, 309, 1003, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "adrin": [0, 1, 65, 345, 393, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "jalali": [0, 1, 65, 345, 393, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "julien": [0, 1, 654, 981, 1009, 1027, 1030, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044], "jerphanion": [0, 1, 1039, 1040, 1041, 1042, 1043, 1044], "guillaum": [0, 1, 5, 7, 72, 75, 100, 131, 151, 156, 157, 158, 160, 187, 188, 201, 221, 305, 1009, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lemaitr": [0, 1, 5, 7, 72, 75, 100, 131, 151, 156, 157, 158, 160, 187, 188, 201, 221, 305, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "christian": [0, 1, 19, 199, 200, 201, 217, 349, 350, 373, 1009, 1020, 1027, 1028, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lorentzen": [0, 1, 199, 200, 201, 217, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "jan": [0, 1, 24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 200, 234, 278, 876, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1039, 1043], "hendrik": [0, 1, 24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234, 1027, 1030, 1031, 1032, 1033], "metzen": [0, 1, 24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234, 1027, 1030, 1031, 1032, 1033], "andrea": [0, 1, 31, 74, 100, 115, 190, 233, 306, 307, 326, 344, 345, 393, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "mueller": [0, 1, 74, 100, 115, 190, 233, 326, 344, 345, 1009, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "vlad": [0, 1, 95, 236, 302, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "nicula": [0, 1, 95, 236, 302, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "joel": [0, 1, 72, 393, 413, 531, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "nothman": [0, 1, 72, 393, 413, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "hanmin": [0, 1, 306, 1034, 1035, 1036, 1037, 1038], "qin": [0, 1, 306, 375, 413, 1034, 1035, 1036, 1037, 1038], "omar": [0, 1, 1037, 1042, 1043, 1044], "salman": [0, 1, 1042, 1043, 1044], "bertrand": [0, 1, 1027, 1033, 1034, 1039, 1040], "thirion": [0, 1, 1027, 1033, 1034, 1040], "tom": [0, 1, 191, 207, 283, 285, 307, 308, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dupr\u00e9": [0, 1, 307, 308, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "la": [0, 1, 191, 207, 283, 285, 307, 308, 311, 375, 1009, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "tour": [0, 1, 191, 207, 283, 285, 307, 308, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "nell": [0, 1, 39, 223, 231, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1039], "roman": [0, 1, 199, 217, 623, 911, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "yurchak": [0, 1, 199, 217, 413, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "meekail": [0, 1, 1041, 1042, 1043, 1044], "zain": [0, 1, 1041, 1042, 1043, 1044], "pleas": [0, 12, 17, 26, 71, 72, 116, 118, 119, 125, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 203, 229, 230, 231, 233, 235, 238, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 283, 293, 302, 311, 315, 316, 317, 318, 319, 320, 321, 326, 340, 358, 365, 372, 373, 376, 378, 379, 380, 382, 386, 390, 391, 392, 395, 396, 399, 401, 404, 405, 412, 413, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 492, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 606, 607, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 985, 989, 995, 999, 1000, 1005, 1006, 1008, 1011, 1018, 1020, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "do": [0, 4, 10, 25, 42, 55, 61, 67, 74, 90, 99, 101, 102, 105, 115, 118, 120, 122, 124, 125, 131, 138, 145, 156, 163, 169, 170, 171, 196, 199, 203, 217, 220, 222, 235, 236, 238, 251, 255, 258, 261, 263, 281, 283, 285, 289, 318, 329, 333, 336, 340, 341, 344, 349, 350, 351, 358, 360, 364, 365, 366, 373, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 392, 393, 403, 404, 405, 406, 407, 408, 409, 412, 413, 414, 446, 457, 499, 532, 534, 538, 540, 548, 551, 577, 578, 584, 585, 587, 628, 629, 641, 642, 648, 651, 652, 655, 662, 664, 672, 732, 758, 773, 777, 811, 814, 829, 830, 834, 861, 862, 864, 871, 875, 877, 882, 883, 885, 886, 887, 888, 905, 906, 907, 908, 916, 959, 974, 977, 979, 981, 982, 985, 986, 988, 989, 993, 995, 1000, 1001, 1005, 1006, 1009, 1011, 1018, 1019, 1020, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "email": [0, 349, 378, 390, 413, 832, 987, 1009], "directli": [0, 6, 19, 27, 45, 46, 56, 71, 116, 148, 159, 183, 187, 199, 205, 217, 229, 265, 302, 305, 319, 351, 360, 364, 376, 378, 379, 380, 382, 384, 391, 392, 393, 401, 402, 403, 405, 406, 407, 408, 409, 413, 415, 438, 448, 458, 460, 465, 470, 523, 563, 564, 565, 566, 593, 607, 616, 628, 639, 642, 643, 648, 649, 656, 657, 658, 659, 660, 673, 677, 680, 686, 769, 773, 776, 787, 788, 794, 797, 798, 808, 840, 842, 856, 857, 858, 864, 874, 876, 879, 886, 953, 974, 981, 983, 988, 990, 992, 995, 1000, 1001, 1006, 1012, 1015, 1016, 1027, 1035, 1036, 1038, 1039, 1040, 1043, 1044], "ask": [0, 163, 164, 260, 367, 377, 378, 382, 383, 386, 392, 393, 414, 839, 840, 841, 843, 845, 847, 848, 849, 1003, 1008, 1043], "assist": [0, 378, 390, 995, 1009], "report": [0, 4, 8, 32, 70, 75, 145, 159, 187, 258, 268, 278, 315, 324, 360, 373, 377, 379, 380, 381, 384, 386, 390, 392, 395, 399, 405, 409, 607, 645, 654, 660, 681, 682, 696, 709, 724, 725, 733, 778, 779, 782, 826, 835, 854, 855, 892, 910, 928, 981, 988, 1005, 1006, 1008, 1028, 1031, 1034, 1035, 1037, 1038, 1040, 1042, 1043], "issu": [0, 4, 25, 79, 86, 199, 217, 265, 312, 365, 367, 372, 381, 382, 383, 386, 387, 390, 392, 393, 394, 395, 396, 399, 401, 405, 407, 408, 413, 445, 448, 458, 469, 478, 479, 480, 530, 535, 539, 569, 581, 582, 584, 585, 587, 607, 623, 687, 691, 764, 868, 873, 885, 924, 974, 975, 982, 988, 993, 995, 1000, 1005, 1006, 1008, 1019, 1020, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042], "instead": [0, 4, 5, 6, 20, 48, 53, 55, 56, 57, 71, 100, 114, 119, 128, 145, 148, 151, 199, 201, 214, 217, 224, 238, 251, 256, 257, 261, 262, 281, 288, 305, 315, 316, 317, 318, 319, 336, 338, 340, 349, 351, 358, 360, 364, 365, 372, 373, 376, 377, 378, 379, 380, 382, 383, 386, 387, 390, 391, 392, 399, 401, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 428, 433, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 452, 455, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 505, 506, 529, 530, 531, 533, 534, 535, 536, 537, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 590, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 626, 628, 631, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 686, 690, 703, 737, 741, 745, 746, 769, 773, 774, 775, 778, 792, 793, 794, 795, 796, 798, 800, 801, 803, 806, 808, 812, 813, 814, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 858, 859, 860, 862, 863, 864, 869, 870, 875, 876, 877, 887, 888, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 923, 929, 934, 942, 953, 960, 974, 975, 977, 981, 982, 984, 985, 986, 989, 990, 995, 999, 1000, 1001, 1005, 1008, 1016, 1018, 1020, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "see": [0, 4, 5, 7, 20, 24, 25, 27, 37, 44, 49, 50, 53, 55, 57, 58, 62, 64, 65, 67, 69, 80, 86, 89, 90, 95, 100, 102, 106, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 125, 128, 131, 137, 144, 145, 146, 148, 151, 156, 157, 158, 163, 166, 169, 170, 172, 175, 178, 179, 180, 183, 190, 200, 201, 202, 203, 205, 216, 217, 220, 222, 230, 232, 235, 238, 239, 240, 242, 246, 247, 248, 254, 255, 257, 259, 260, 261, 262, 263, 267, 269, 270, 271, 274, 275, 278, 283, 289, 290, 292, 296, 305, 311, 312, 315, 316, 317, 318, 319, 320, 321, 326, 336, 340, 344, 349, 350, 351, 354, 355, 356, 357, 360, 364, 365, 366, 370, 371, 372, 373, 375, 376, 377, 378, 380, 382, 384, 385, 386, 390, 391, 392, 395, 401, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 605, 606, 607, 610, 615, 618, 619, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 697, 702, 704, 707, 709, 738, 758, 769, 773, 774, 775, 776, 783, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 933, 934, 954, 956, 959, 969, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1009, 1011, 1013, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "what": [0, 4, 9, 12, 40, 45, 52, 53, 86, 96, 100, 120, 168, 169, 188, 205, 207, 215, 230, 235, 242, 301, 349, 351, 354, 360, 365, 373, 378, 379, 380, 382, 384, 386, 391, 392, 393, 394, 396, 405, 411, 412, 413, 499, 532, 584, 585, 587, 642, 648, 692, 882, 883, 885, 886, 887, 888, 905, 906, 907, 908, 984, 985, 986, 988, 1001, 1006, 1008, 1011, 1027, 1034], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 55, 61, 70, 71, 72, 73, 78, 85, 95, 99, 103, 104, 105, 114, 117, 121, 122, 123, 124, 125, 131, 134, 148, 151, 152, 157, 163, 169, 178, 183, 187, 188, 195, 213, 214, 215, 220, 223, 228, 233, 234, 238, 247, 251, 254, 258, 259, 260, 261, 264, 267, 268, 271, 272, 274, 281, 287, 292, 306, 311, 317, 318, 336, 339, 340, 349, 350, 351, 357, 364, 365, 367, 372, 375, 377, 378, 381, 384, 391, 392, 395, 396, 402, 403, 405, 409, 410, 412, 413, 414, 415, 428, 439, 442, 443, 445, 447, 448, 449, 455, 458, 461, 468, 478, 479, 480, 534, 541, 542, 548, 550, 552, 553, 554, 555, 556, 558, 560, 561, 562, 564, 566, 589, 590, 593, 598, 606, 607, 631, 633, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 684, 685, 686, 689, 690, 699, 704, 715, 716, 717, 718, 719, 723, 724, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 778, 779, 780, 782, 785, 786, 787, 788, 789, 791, 792, 793, 794, 797, 798, 808, 820, 822, 825, 830, 831, 840, 848, 854, 855, 898, 900, 903, 905, 906, 907, 908, 974, 979, 980, 981, 982, 985, 988, 989, 991, 999, 1001, 1005, 1006, 1009, 1011, 1016, 1020, 1027, 1030, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043], "wai": [0, 4, 17, 27, 50, 60, 71, 74, 116, 123, 127, 129, 148, 158, 169, 171, 172, 200, 203, 204, 214, 230, 231, 234, 235, 238, 239, 255, 260, 267, 269, 305, 306, 318, 320, 321, 360, 364, 365, 366, 372, 374, 376, 377, 380, 381, 386, 387, 392, 393, 395, 396, 399, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 420, 439, 440, 447, 448, 449, 455, 456, 458, 459, 465, 492, 551, 552, 559, 568, 585, 595, 596, 607, 628, 662, 663, 672, 673, 674, 695, 700, 702, 713, 731, 732, 749, 750, 752, 758, 769, 773, 783, 790, 818, 826, 843, 864, 870, 875, 881, 907, 908, 956, 959, 974, 975, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1019, 1020, 1027, 1029, 1035, 1040, 1041], "question": [0, 137, 168, 260, 344, 367, 377, 378, 383, 386, 409, 412, 826, 899, 902, 981, 984, 985, 991, 1003, 1009], "faq": [0, 386, 409, 688, 982, 995], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 57, 60, 69, 70, 71, 74, 78, 80, 86, 101, 105, 111, 112, 115, 119, 120, 121, 122, 124, 125, 129, 131, 145, 156, 158, 166, 169, 170, 171, 172, 175, 180, 188, 189, 195, 200, 201, 202, 203, 206, 207, 213, 217, 224, 225, 230, 233, 235, 237, 238, 239, 241, 251, 255, 256, 258, 260, 261, 262, 267, 269, 270, 272, 273, 274, 283, 285, 286, 287, 289, 290, 301, 310, 312, 316, 317, 318, 321, 333, 334, 336, 339, 340, 344, 349, 350, 354, 358, 364, 365, 366, 367, 373, 376, 377, 379, 380, 381, 383, 386, 391, 392, 393, 396, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 419, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 500, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 618, 619, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 700, 716, 752, 787, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 969, 974, 975, 979, 980, 981, 982, 984, 985, 991, 992, 993, 995, 997, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1011, 1013, 1015, 1020, 1022, 1027, 1029, 1032, 1038, 1041, 1042, 1043], "you": [0, 14, 16, 20, 24, 71, 90, 119, 120, 123, 125, 145, 148, 164, 170, 187, 200, 201, 203, 230, 235, 242, 248, 255, 260, 261, 267, 275, 289, 315, 316, 319, 321, 325, 328, 349, 360, 364, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 391, 392, 395, 396, 399, 401, 403, 404, 405, 406, 407, 409, 412, 413, 414, 416, 417, 422, 433, 439, 440, 442, 443, 445, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 492, 496, 499, 500, 505, 506, 528, 529, 530, 532, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 575, 576, 577, 578, 584, 585, 586, 587, 590, 603, 604, 606, 607, 623, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 686, 695, 696, 780, 793, 795, 796, 797, 798, 799, 801, 803, 809, 810, 811, 812, 813, 814, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 847, 848, 854, 855, 856, 857, 860, 861, 862, 863, 864, 869, 870, 871, 876, 877, 882, 883, 885, 886, 887, 888, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 934, 951, 953, 974, 975, 980, 981, 985, 986, 989, 991, 992, 995, 996, 999, 1000, 1001, 1004, 1005, 1008, 1009, 1011, 1012, 1015, 1018, 1020, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 20, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 70, 71, 72, 73, 78, 79, 80, 81, 82, 86, 90, 96, 98, 99, 100, 101, 103, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 143, 144, 145, 147, 148, 151, 156, 157, 158, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 184, 187, 188, 190, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 215, 216, 217, 220, 221, 222, 228, 229, 230, 231, 232, 234, 235, 238, 239, 242, 245, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 267, 269, 271, 272, 274, 275, 278, 281, 283, 285, 287, 288, 289, 290, 292, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 325, 326, 328, 329, 333, 334, 336, 339, 340, 344, 349, 350, 351, 356, 357, 358, 360, 364, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 428, 430, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 464, 468, 478, 479, 480, 483, 492, 495, 499, 504, 505, 508, 517, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 575, 576, 577, 578, 579, 580, 584, 585, 587, 588, 590, 593, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 628, 630, 631, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 685, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 700, 703, 705, 707, 708, 714, 716, 717, 718, 719, 721, 722, 724, 725, 727, 728, 732, 733, 734, 735, 737, 738, 741, 747, 750, 751, 752, 753, 754, 758, 774, 775, 777, 778, 779, 780, 782, 783, 784, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 854, 855, 856, 857, 860, 861, 862, 864, 865, 866, 870, 871, 872, 875, 876, 877, 882, 889, 890, 895, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 909, 910, 913, 915, 917, 921, 923, 928, 933, 934, 940, 942, 943, 945, 948, 951, 953, 955, 956, 959, 966, 969, 970, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "contribut": [0, 13, 20, 125, 156, 183, 203, 269, 310, 367, 375, 376, 380, 381, 382, 386, 392, 393, 395, 410, 411, 412, 443, 445, 549, 550, 555, 556, 721, 724, 751, 979, 985, 988, 993, 1000, 1003, 1005, 1006, 1009, 1018, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "help": [0, 4, 9, 11, 16, 55, 70, 74, 100, 106, 170, 183, 217, 220, 261, 263, 278, 302, 333, 336, 350, 351, 360, 364, 365, 376, 379, 380, 381, 382, 383, 384, 386, 387, 392, 393, 394, 399, 405, 406, 409, 413, 415, 429, 532, 573, 623, 646, 650, 661, 681, 682, 688, 710, 833, 905, 906, 907, 908, 975, 979, 980, 982, 984, 985, 987, 989, 995, 996, 1001, 1004, 1005, 1006, 1008, 1009, 1020, 1033, 1034, 1035, 1038, 1041], "arturo": [0, 37, 57, 117, 178, 183, 238, 261, 263, 310, 349, 350, 351, 389, 1041, 1042, 1043], "amor": [0, 37, 57, 117, 178, 183, 238, 261, 263, 310, 349, 350, 351, 389, 1041, 1042, 1043], "luci": [0, 266, 368, 389, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "liu": [0, 266, 368, 389, 559, 721, 751, 985, 991, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "activ": [0, 166, 207, 245, 251, 261, 323, 330, 351, 372, 373, 376, 378, 379, 384, 386, 390, 392, 393, 395, 406, 492, 498, 522, 628, 631, 633, 646, 647, 649, 650, 651, 659, 660, 661, 678, 679, 680, 681, 682, 709, 714, 792, 853, 854, 855, 893, 951, 981, 982, 983, 984, 988, 989, 990, 998, 1038], "who": [0, 70, 365, 367, 373, 378, 385, 393, 395, 839, 840, 841, 843, 845, 847, 848, 849, 1003, 1005, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "also": [0, 4, 7, 11, 17, 19, 20, 24, 25, 26, 27, 32, 46, 48, 53, 57, 58, 60, 64, 70, 71, 78, 80, 85, 86, 95, 103, 105, 111, 114, 117, 119, 121, 123, 124, 125, 129, 131, 144, 145, 146, 148, 151, 153, 156, 164, 169, 170, 171, 172, 175, 179, 180, 182, 188, 191, 192, 195, 199, 200, 201, 203, 204, 208, 216, 217, 220, 231, 233, 235, 238, 239, 251, 258, 260, 261, 262, 263, 266, 267, 269, 270, 271, 278, 283, 291, 294, 296, 299, 305, 306, 307, 309, 310, 315, 316, 317, 318, 329, 332, 333, 334, 336, 338, 340, 349, 350, 351, 354, 355, 358, 360, 364, 365, 366, 371, 372, 373, 375, 376, 377, 378, 380, 381, 384, 386, 387, 390, 391, 392, 393, 395, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 433, 434, 435, 437, 438, 441, 442, 443, 444, 446, 448, 458, 459, 461, 463, 478, 480, 488, 492, 494, 499, 504, 528, 529, 531, 532, 537, 542, 545, 547, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 603, 604, 605, 606, 607, 618, 628, 629, 631, 639, 640, 641, 642, 643, 646, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 668, 672, 674, 677, 680, 683, 687, 690, 691, 695, 706, 709, 718, 724, 725, 733, 738, 758, 774, 775, 778, 779, 782, 792, 793, 794, 797, 798, 808, 811, 814, 819, 820, 821, 822, 823, 824, 826, 836, 839, 840, 841, 843, 844, 845, 847, 848, 849, 853, 854, 855, 857, 859, 860, 865, 866, 870, 874, 877, 882, 886, 899, 902, 905, 906, 907, 908, 917, 936, 942, 949, 953, 974, 975, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1016, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "triag": [0, 367, 378, 381, 393], "pr": [0, 133, 365, 378, 381, 386, 413, 736, 985, 1037, 1039], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 65, 70, 71, 72, 73, 74, 75, 79, 81, 85, 86, 88, 89, 90, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 145, 146, 148, 152, 153, 154, 155, 156, 159, 163, 164, 168, 169, 170, 171, 172, 175, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 251, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 364, 365, 367, 370, 371, 373, 375, 379, 380, 381, 382, 383, 384, 386, 387, 390, 391, 399, 402, 403, 405, 409, 411, 413, 414, 415, 417, 421, 426, 428, 433, 436, 439, 442, 443, 445, 448, 450, 454, 455, 456, 458, 460, 461, 463, 465, 468, 470, 478, 479, 480, 484, 487, 488, 491, 492, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 534, 536, 537, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 610, 611, 614, 615, 616, 618, 619, 623, 624, 625, 626, 628, 629, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 681, 682, 685, 686, 687, 688, 689, 690, 691, 697, 700, 702, 713, 717, 718, 719, 732, 738, 752, 773, 776, 780, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 827, 828, 829, 830, 831, 837, 838, 840, 842, 843, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 897, 898, 899, 900, 902, 903, 906, 908, 909, 910, 911, 928, 929, 933, 934, 937, 938, 950, 954, 956, 959, 974, 975, 977, 979, 980, 982, 984, 985, 986, 988, 990, 991, 992, 993, 997, 998, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1011, 1014, 1018, 1019, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043], "juan": [0, 368, 1027, 1038, 1039, 1040, 1041, 1042], "carlo": [0, 233, 368, 412, 415, 607, 637, 638, 977, 990, 1027, 1038, 1039, 1040, 1041, 1042, 1043], "alfaro": [0, 368, 1038, 1039, 1040, 1041, 1042], "jim\u00e9nez": [0, 368, 1035, 1038, 1039, 1040, 1041, 1042], "maxwel": [0, 368, 1037, 1040, 1041, 1042, 1043], "martin": [0, 368, 717, 718, 719, 981, 985, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "loyola": [0, 368, 1040, 1041], "sylvain": [0, 368, 1031, 1036, 1037, 1038, 1039, 1040, 1041], "mari\u00e9": [0, 368, 1036, 1037, 1038, 1039, 1040, 1041], "norbert": [0, 368, 1029, 1039, 1040, 1041], "prein": [0, 368, 1039, 1040, 1041], "reshama": [0, 362, 368, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "shaikh": [0, 362, 368, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "albert": [0, 228, 368, 1034, 1035, 1036, 1039, 1040], "maren": [0, 368, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "westermann": [0, 368, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "around": [0, 4, 26, 37, 52, 85, 111, 114, 124, 157, 170, 175, 235, 238, 263, 302, 324, 326, 327, 336, 339, 340, 349, 350, 351, 360, 373, 375, 378, 384, 390, 396, 405, 409, 410, 413, 467, 468, 511, 540, 616, 636, 645, 700, 737, 792, 800, 816, 843, 845, 847, 848, 849, 877, 981, 982, 984, 985, 991, 995, 999, 1005, 1006, 1009, 1018, 1020, 1031, 1032], "lauren": [0, 361, 688, 692, 982, 1039, 1042], "burk": [0, 361, 1042], "francoisgoupil": [0, 361, 1041], "longer": [0, 4, 34, 53, 114, 170, 184, 301, 318, 378, 380, 405, 409, 412, 413, 445, 532, 559, 980, 984, 985, 987, 990, 1000, 1009, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mathieu": [0, 2, 24, 48, 100, 190, 200, 221, 236, 261, 349, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1040], "blondel": [0, 2, 24, 48, 100, 190, 200, 221, 236, 261, 349, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1040], "lar": [0, 2, 14, 98, 148, 166, 177, 188, 218, 349, 350, 351, 375, 467, 468, 474, 497, 527, 533, 535, 538, 539, 541, 542, 544, 647, 648, 649, 650, 651, 652, 659, 660, 661, 674, 678, 679, 680, 681, 682, 1007, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040], "buitinck": [0, 2, 14, 349, 350, 351, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "noel": [0, 2, 111, 112, 113, 1027, 1028, 1029, 1030, 1031, 1039], "daw": [0, 2, 111, 112, 113, 1027, 1028, 1029, 1030, 1031], "dubourg": [0, 2, 154, 158, 1009, 1027, 1031], "edouard": [0, 2, 1027], "duchesnai": [0, 2, 1027], "alexand": [0, 2, 405, 410, 531, 863, 1029, 1030, 1031, 1033, 1034, 1035, 1039, 1040, 1041], "fabisch": [0, 2, 1029, 1030, 1031, 1033], "virgil": [0, 2, 9, 1027, 1028, 1030], "fritsch": [0, 2, 9, 1027, 1028, 1030], "satrajit": [0, 2, 1027, 1028], "ghosh": [0, 2, 405, 1027, 1028], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1027, 1030, 1035, 1036, 1037, 1038, 1041], "gorgolewski": [0, 2, 1027, 1030], "jaqu": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 182, 195, 196, 197, 222, 341, 344, 1027, 1028, 1029, 1030], "grobler": [0, 2, 31, 45, 51, 53, 73, 89, 90, 101, 182, 195, 196, 197, 222, 341, 344, 1027, 1028, 1029, 1030], "brian": [0, 2, 46, 704, 985, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1040, 1041], "holt": [0, 2, 1027], "arnaud": [0, 2, 1028, 1029, 1030, 1031, 1032, 1033], "joli": [0, 2, 1028, 1029, 1030, 1031, 1032, 1033], "thoui": [0, 2, 1027], "rai": [0, 2, 953, 985, 1027, 1037, 1039, 1040], "jone": [0, 2, 373, 1027], "kyle": [0, 2, 99, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039], "kastner": [0, 2, 99, 1029, 1030, 1031, 1038, 1039], "manoj": [0, 2, 42, 148, 181, 1030, 1031, 1032, 1033, 1034], "kumar": [0, 2, 42, 148, 181, 373, 405, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "robert": [0, 2, 48, 72, 148, 187, 278, 375, 410, 524, 531, 624, 652, 717, 718, 719, 730, 863, 975, 981, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1042], "layton": [0, 2, 48, 1027, 1028, 1029, 1030, 1032], "wei": [0, 2, 999, 1027, 1028, 1031, 1032, 1033, 1034, 1036, 1040, 1043], "li": [0, 2, 327, 373, 635, 638, 692, 721, 751, 890, 974, 977, 985, 988, 995, 997, 1000, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "paolo": [0, 2, 1027, 1031, 1037], "losi": [0, 2, 1027], "gill": [0, 2, 114, 115, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "loupp": [0, 2, 114, 115, 412, 551, 552, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "jarrod": [0, 2, 1036, 1043], "millman": [0, 2, 1036, 1043], "passo": [0, 2, 1027, 1028], "peter": [0, 2, 11, 16, 63, 123, 125, 126, 261, 349, 350, 405, 444, 446, 453, 645, 787, 788, 981, 985, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1042, 1043], "prettenhof": [0, 2, 11, 16, 123, 125, 126, 261, 349, 350, 1027, 1028, 1029, 1030, 1031, 1032], "venkat": [0, 2], "raghav": [0, 2, 122, 264, 305, 1031, 1032, 1033, 1034, 1035, 1039], "rajagopalan": [0, 2, 1035, 1039], "jacob": [0, 2, 1032, 1033, 1034], "schreiber": [0, 2, 1032, 1033, 1034], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1027, 1028], "jake": [0, 2, 11, 158, 200, 220, 248, 288, 296, 1004, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1041], "vanderpla": [0, 2, 11, 158, 200, 220, 248, 288, 296, 1004, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ward": [0, 2, 36, 39, 44, 52, 54, 56, 62, 68, 166, 172, 413, 437, 441, 459, 526, 850, 1027, 1030, 1032], "farlei": [0, 2, 1027], "ron": [0, 2, 247, 1027], "weiss": [0, 2, 247, 405, 687, 1027], "respons": [0, 148, 170, 195, 199, 202, 235, 270, 349, 375, 384, 392, 404, 405, 406, 412, 442, 460, 478, 479, 480, 627, 628, 629, 670, 671, 694, 696, 698, 737, 792, 793, 986, 992, 1003, 1011, 1044], "chiara": [0, 369, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "marmo": [0, 369, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "If": [0, 4, 11, 16, 27, 32, 42, 49, 55, 71, 82, 98, 109, 119, 124, 131, 160, 164, 169, 180, 199, 214, 216, 235, 238, 260, 267, 275, 288, 296, 305, 310, 311, 336, 340, 344, 345, 349, 350, 351, 358, 360, 364, 365, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 395, 396, 399, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 426, 429, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 510, 511, 515, 518, 519, 520, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 707, 708, 709, 710, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 731, 733, 736, 737, 740, 741, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 761, 762, 763, 764, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 806, 808, 811, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 921, 922, 923, 926, 932, 934, 936, 938, 942, 944, 948, 951, 953, 954, 956, 959, 960, 966, 969, 970, 971, 972, 974, 975, 977, 979, 980, 981, 982, 983, 985, 988, 989, 991, 992, 995, 997, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1012, 1018, 1019, 1020, 1027, 1030, 1031, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1043], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 86, 90, 91, 92, 94, 97, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 132, 133, 134, 135, 137, 138, 139, 140, 144, 145, 147, 150, 151, 152, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 211, 214, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 304, 305, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 324, 325, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 351, 352, 354, 356, 357, 363, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 385, 387, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 405, 406, 407, 408, 411, 415, 416, 417, 418, 421, 423, 424, 426, 427, 435, 452, 453, 455, 457, 459, 467, 474, 476, 477, 481, 489, 499, 504, 505, 512, 527, 541, 542, 543, 544, 551, 568, 570, 571, 573, 574, 579, 581, 582, 588, 591, 592, 594, 597, 599, 605, 612, 616, 617, 620, 625, 632, 634, 638, 646, 647, 650, 656, 657, 659, 663, 671, 679, 681, 682, 683, 690, 691, 692, 695, 707, 710, 711, 712, 717, 718, 719, 721, 723, 725, 727, 731, 734, 738, 741, 746, 751, 753, 754, 758, 759, 761, 762, 763, 764, 766, 769, 770, 771, 772, 775, 776, 778, 785, 786, 789, 801, 802, 803, 804, 805, 806, 807, 817, 829, 831, 833, 837, 838, 847, 848, 849, 851, 859, 860, 863, 865, 868, 879, 880, 882, 884, 885, 887, 888, 889, 892, 896, 898, 907, 908, 909, 910, 913, 916, 917, 918, 923, 924, 933, 934, 941, 948, 952, 953, 954, 956, 957, 961, 962, 963, 967, 968, 974, 975, 977, 978, 980, 983, 984, 986, 987, 988, 990, 991, 992, 993, 995, 996, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "scientif": [0, 32, 137, 138, 139, 140, 233, 367, 372, 376, 390, 395, 405, 448, 458, 497, 1009, 1012], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 26, 27, 30, 32, 34, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 58, 62, 64, 65, 66, 70, 71, 72, 73, 75, 78, 80, 81, 82, 86, 89, 90, 92, 95, 96, 97, 98, 100, 103, 104, 106, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 131, 133, 134, 137, 143, 144, 145, 147, 148, 151, 153, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 182, 183, 185, 187, 188, 190, 192, 194, 196, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 217, 220, 221, 224, 225, 228, 229, 231, 232, 233, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 274, 278, 281, 283, 285, 286, 288, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 329, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 396, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 446, 465, 466, 467, 468, 469, 470, 471, 472, 497, 519, 527, 528, 530, 533, 545, 557, 558, 559, 565, 566, 578, 579, 585, 607, 613, 623, 628, 629, 634, 636, 647, 651, 654, 655, 662, 664, 669, 670, 671, 672, 673, 688, 707, 714, 716, 721, 741, 751, 759, 776, 800, 816, 818, 839, 840, 841, 843, 845, 846, 847, 848, 849, 860, 869, 870, 871, 877, 882, 883, 885, 886, 887, 888, 890, 893, 897, 901, 949, 951, 974, 975, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "would": [0, 4, 6, 9, 26, 32, 45, 53, 55, 58, 70, 78, 80, 81, 86, 92, 100, 101, 111, 124, 148, 151, 156, 157, 169, 170, 171, 172, 175, 183, 189, 199, 200, 201, 214, 217, 228, 235, 238, 247, 256, 260, 261, 266, 268, 270, 278, 283, 289, 301, 305, 306, 310, 311, 318, 321, 327, 336, 340, 344, 345, 349, 351, 358, 360, 364, 373, 374, 378, 379, 380, 384, 386, 387, 390, 391, 392, 393, 396, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 428, 442, 461, 464, 478, 479, 480, 485, 523, 528, 530, 532, 537, 540, 548, 550, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 566, 579, 580, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 674, 675, 696, 698, 704, 708, 709, 716, 751, 777, 780, 784, 794, 796, 808, 822, 830, 831, 840, 848, 855, 882, 883, 885, 886, 887, 888, 889, 890, 895, 897, 898, 900, 903, 905, 906, 907, 908, 942, 945, 974, 975, 978, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 995, 1000, 1005, 1006, 1009, 1011, 1016, 1018, 1020, 1024, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "appreci": [0, 378], "citat": [0, 372, 375, 390], "paper": [0, 148, 175, 260, 375, 384, 390, 405, 407, 438, 445, 474, 500, 530, 537, 559, 637, 654, 662, 663, 667, 672, 675, 688, 783, 834, 843, 846, 889, 890, 981, 985, 988, 991, 1000, 1020, 1027, 1034, 1035], "machin": [0, 4, 6, 8, 9, 27, 63, 117, 144, 145, 148, 151, 156, 167, 171, 173, 211, 241, 260, 263, 266, 278, 298, 303, 305, 310, 312, 317, 320, 332, 337, 340, 344, 349, 351, 364, 365, 367, 371, 372, 373, 375, 376, 378, 381, 384, 385, 390, 391, 392, 394, 399, 403, 405, 409, 410, 412, 413, 415, 433, 435, 444, 467, 468, 474, 498, 500, 506, 512, 513, 514, 526, 528, 530, 537, 540, 551, 552, 553, 554, 555, 556, 560, 562, 589, 590, 606, 607, 610, 615, 618, 630, 634, 635, 637, 639, 640, 641, 646, 647, 650, 651, 652, 653, 654, 655, 672, 678, 679, 688, 704, 709, 720, 730, 736, 738, 780, 783, 792, 822, 823, 837, 838, 843, 846, 853, 854, 855, 857, 875, 877, 883, 897, 898, 899, 900, 902, 903, 907, 908, 953, 974, 975, 977, 978, 981, 982, 983, 985, 986, 988, 991, 992, 993, 995, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1024, 1027, 1029, 1039, 1040, 1041, 1042], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 364, 366, 372, 376, 378, 379, 380, 381, 382, 383, 386, 387, 390, 392, 395, 406, 413, 492, 504, 505, 577, 695, 805, 871, 953, 985, 995, 1000, 1001, 1003, 1006, 1008, 1009, 1011, 1012, 1014, 1020, 1022, 1027, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042], "et": [0, 11, 78, 79, 111, 126, 187, 296, 375, 402, 405, 407, 410, 412, 413, 414, 447, 494, 515, 516, 524, 531, 537, 540, 559, 678, 679, 715, 716, 832, 834, 854, 855, 890, 933, 934, 981, 982, 985, 991, 995, 997, 1000, 1001, 1035, 1043], "al": [0, 11, 78, 79, 111, 126, 187, 296, 375, 402, 405, 407, 410, 412, 413, 414, 447, 494, 515, 516, 524, 531, 537, 540, 559, 678, 679, 715, 716, 832, 834, 854, 855, 890, 933, 934, 981, 982, 985, 991, 995, 997, 1000, 1001, 1035, 1040, 1043], "jmlr": [0, 405, 662, 663, 672, 700, 981, 1000], "12": [0, 4, 6, 20, 34, 40, 42, 43, 53, 55, 56, 57, 73, 74, 85, 120, 121, 125, 148, 154, 155, 156, 164, 169, 170, 172, 173, 179, 183, 185, 199, 207, 217, 220, 222, 223, 224, 228, 229, 231, 232, 239, 242, 243, 247, 248, 259, 260, 262, 263, 266, 272, 286, 302, 309, 310, 311, 320, 344, 349, 351, 352, 375, 376, 383, 391, 393, 395, 397, 398, 405, 409, 413, 439, 443, 445, 478, 479, 480, 481, 528, 530, 537, 566, 660, 665, 667, 681, 682, 685, 688, 689, 792, 793, 795, 812, 815, 828, 849, 865, 974, 975, 981, 983, 986, 995, 999, 1000, 1003, 1011, 1016, 1025, 1028, 1030, 1034, 1035, 1037, 1038, 1043], "pp": [0, 63, 148, 259, 375, 405, 407, 413, 416, 417, 440, 444, 448, 458, 507, 529, 530, 537, 586, 631, 639, 660, 681, 682, 716, 721, 725, 735, 751, 764, 778, 832, 834, 836, 853, 873, 885, 978, 985, 987, 988, 998], "2825": 0, "2830": 0, "2011": [0, 47, 170, 221, 384, 410, 413, 531, 534, 536, 537, 543, 586, 623, 634, 654, 725, 975, 989, 999, 1004, 1027], "bibtex": 0, "entri": [0, 16, 71, 75, 131, 164, 169, 170, 256, 315, 350, 360, 382, 384, 386, 391, 392, 402, 403, 405, 410, 412, 415, 459, 468, 527, 528, 533, 541, 542, 557, 558, 584, 587, 590, 607, 616, 628, 634, 636, 643, 647, 649, 651, 652, 655, 657, 659, 660, 661, 669, 671, 678, 679, 681, 682, 695, 700, 703, 705, 708, 711, 712, 714, 721, 724, 725, 726, 729, 730, 733, 738, 751, 753, 754, 778, 780, 783, 784, 787, 788, 807, 821, 837, 838, 845, 846, 847, 848, 849, 868, 874, 886, 971, 974, 975, 981, 985, 988, 995, 1000, 1006, 1011, 1034, 1037, 1038, 1040, 1044], "articl": [0, 17, 70, 349, 373, 377, 378, 386, 409, 418, 471, 701, 981, 985, 1020, 1040], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 78, 79, 81, 82, 85, 86, 90, 91, 95, 96, 97, 98, 99, 103, 104, 105, 112, 113, 114, 117, 119, 120, 121, 124, 125, 127, 130, 133, 134, 140, 143, 144, 146, 147, 148, 151, 152, 153, 155, 156, 157, 158, 159, 169, 178, 179, 181, 183, 184, 186, 187, 188, 191, 192, 198, 199, 201, 203, 204, 205, 207, 208, 213, 216, 217, 220, 221, 222, 228, 232, 233, 234, 236, 237, 238, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 261, 263, 264, 265, 269, 270, 274, 285, 286, 289, 290, 291, 292, 294, 295, 296, 305, 309, 310, 311, 312, 326, 329, 332, 333, 334, 335, 336, 339, 340, 345, 346, 349, 355, 356, 357, 377, 378, 382, 386, 406, 985, 1008, 1016], "p": [0, 11, 13, 24, 26, 27, 41, 61, 80, 81, 85, 92, 103, 123, 144, 148, 154, 175, 211, 216, 217, 220, 222, 232, 248, 260, 266, 267, 296, 372, 373, 375, 376, 383, 386, 402, 403, 405, 407, 408, 410, 412, 414, 415, 416, 418, 438, 440, 442, 443, 446, 453, 465, 467, 470, 471, 474, 494, 524, 530, 534, 536, 537, 543, 545, 546, 547, 549, 551, 552, 553, 554, 555, 557, 560, 562, 586, 588, 589, 590, 591, 592, 594, 595, 596, 600, 601, 602, 603, 604, 605, 611, 612, 623, 636, 639, 684, 686, 688, 690, 695, 701, 711, 719, 736, 747, 781, 783, 796, 802, 803, 804, 807, 822, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 853, 857, 858, 873, 885, 891, 907, 908, 909, 978, 979, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 995, 999, 1000, 1003, 1015, 1018, 1027, 1028, 1030, 1033, 1035, 1042, 1043], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 20, 26, 30, 32, 37, 43, 47, 48, 49, 52, 53, 55, 58, 64, 67, 71, 75, 86, 98, 111, 114, 117, 118, 119, 121, 124, 131, 132, 139, 142, 144, 147, 148, 149, 151, 157, 158, 160, 166, 168, 169, 170, 171, 172, 175, 183, 185, 188, 199, 200, 201, 203, 209, 213, 217, 221, 232, 234, 235, 238, 242, 250, 258, 260, 261, 262, 263, 266, 267, 269, 270, 272, 283, 286, 299, 300, 301, 302, 307, 310, 311, 315, 317, 319, 321, 324, 325, 335, 340, 344, 349, 350, 351, 360, 373, 378, 379, 380, 382, 384, 390, 403, 406, 410, 412, 413, 414, 415, 483, 504, 505, 527, 528, 533, 534, 562, 577, 578, 579, 588, 591, 592, 594, 595, 596, 600, 601, 602, 603, 604, 605, 613, 623, 628, 631, 654, 709, 718, 721, 724, 725, 751, 778, 779, 782, 783, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 821, 854, 855, 859, 868, 871, 872, 876, 877, 878, 912, 917, 918, 977, 980, 989, 992, 993, 995, 999, 1029, 1035, 1036, 1037, 1039, 1041], "g": [0, 4, 7, 8, 10, 12, 16, 24, 25, 26, 27, 32, 53, 55, 65, 70, 73, 82, 86, 103, 111, 114, 115, 123, 124, 131, 138, 151, 152, 153, 154, 156, 158, 159, 160, 164, 168, 181, 184, 199, 200, 201, 203, 217, 221, 225, 234, 235, 245, 260, 264, 265, 271, 281, 289, 305, 310, 327, 343, 344, 351, 360, 364, 370, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 390, 392, 396, 399, 401, 403, 404, 405, 407, 409, 410, 412, 413, 414, 415, 417, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 499, 524, 527, 529, 530, 533, 534, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 589, 590, 593, 600, 606, 607, 613, 618, 619, 626, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 686, 688, 693, 716, 723, 733, 735, 758, 780, 795, 796, 797, 798, 800, 801, 803, 812, 816, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 846, 847, 848, 849, 853, 854, 855, 857, 860, 862, 863, 864, 867, 869, 870, 873, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 933, 934, 945, 953, 974, 975, 979, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 995, 999, 1000, 1001, 1006, 1008, 1009, 1020, 1027, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 60, 68, 75, 78, 81, 86, 92, 96, 97, 98, 103, 112, 113, 118, 119, 121, 130, 134, 137, 138, 139, 140, 145, 146, 147, 151, 154, 156, 158, 159, 160, 166, 169, 170, 183, 187, 200, 203, 209, 213, 214, 217, 221, 235, 238, 260, 261, 263, 267, 274, 278, 299, 305, 307, 310, 315, 317, 320, 325, 327, 329, 336, 341, 349, 350, 351, 356, 358, 360, 364, 366, 367, 372, 373, 375, 376, 378, 380, 381, 383, 386, 390, 391, 392, 393, 394, 396, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 486, 487, 488, 490, 493, 496, 497, 498, 499, 500, 504, 506, 507, 508, 509, 510, 516, 518, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 603, 604, 606, 607, 613, 616, 623, 624, 625, 626, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 700, 701, 706, 707, 708, 712, 713, 715, 717, 718, 719, 720, 721, 726, 731, 732, 735, 737, 738, 739, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 759, 761, 762, 769, 770, 771, 772, 773, 776, 783, 785, 786, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 932, 933, 934, 941, 942, 943, 944, 945, 970, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 998, 999, 1000, 1001, 1004, 1005, 1006, 1011, 1012, 1018, 1019, 1020, 1022, 1027, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 55, 58, 68, 70, 75, 77, 80, 83, 84, 85, 87, 95, 97, 98, 101, 115, 117, 124, 166, 167, 172, 173, 177, 188, 199, 203, 214, 218, 232, 246, 247, 250, 251, 253, 256, 275, 276, 278, 315, 333, 350, 360, 365, 370, 375, 376, 378, 384, 386, 392, 401, 402, 403, 404, 407, 408, 410, 413, 428, 437, 441, 448, 458, 459, 460, 461, 466, 469, 470, 471, 472, 473, 478, 479, 480, 492, 508, 520, 526, 527, 533, 537, 541, 542, 546, 548, 550, 552, 554, 556, 558, 560, 561, 564, 566, 577, 585, 589, 590, 596, 602, 607, 626, 627, 630, 631, 635, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 672, 674, 675, 684, 691, 695, 697, 700, 713, 731, 732, 734, 749, 750, 752, 783, 790, 794, 799, 806, 808, 819, 823, 825, 826, 827, 830, 831, 832, 840, 848, 850, 853, 855, 857, 858, 861, 864, 870, 871, 872, 877, 878, 881, 891, 897, 898, 899, 900, 902, 903, 906, 908, 912, 979, 980, 981, 982, 985, 986, 987, 990, 993, 999, 1000, 1002, 1022, 1027, 1030, 1031, 1032, 1035, 1037, 1038, 1041, 1042], "b": [0, 8, 10, 24, 26, 59, 65, 80, 101, 103, 113, 114, 120, 124, 125, 134, 137, 138, 152, 153, 154, 159, 164, 181, 183, 184, 199, 200, 205, 217, 236, 238, 259, 263, 265, 270, 274, 281, 318, 327, 360, 373, 375, 378, 382, 383, 384, 402, 403, 405, 408, 409, 410, 413, 433, 478, 496, 537, 542, 562, 584, 585, 586, 587, 603, 604, 606, 607, 624, 642, 643, 644, 645, 654, 665, 668, 670, 672, 676, 683, 684, 701, 715, 725, 726, 787, 788, 805, 806, 844, 870, 871, 872, 873, 876, 877, 885, 912, 934, 935, 948, 975, 977, 981, 982, 983, 985, 988, 990, 995, 999, 1000, 1015, 1027, 1035, 1038, 1040, 1041, 1042], "o": [0, 17, 19, 27, 30, 38, 49, 55, 60, 61, 63, 64, 82, 85, 91, 97, 128, 148, 159, 187, 192, 197, 199, 214, 234, 245, 260, 262, 269, 305, 306, 310, 316, 319, 328, 340, 354, 364, 373, 375, 378, 395, 405, 407, 410, 412, 416, 418, 440, 443, 444, 446, 469, 471, 530, 600, 623, 662, 663, 688, 825, 853, 868, 909, 953, 954, 977, 979, 981, 982, 985, 986, 988, 989, 999, 1000, 1001, 1027, 1030, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1044], "m": [0, 4, 8, 11, 19, 26, 27, 44, 58, 59, 63, 64, 65, 80, 81, 95, 111, 134, 156, 181, 199, 217, 260, 264, 296, 328, 332, 343, 349, 364, 365, 372, 373, 375, 376, 382, 384, 392, 395, 402, 403, 405, 407, 410, 412, 414, 416, 440, 441, 442, 446, 453, 469, 470, 496, 509, 524, 528, 530, 532, 537, 635, 641, 645, 660, 667, 681, 682, 685, 689, 704, 712, 721, 736, 751, 753, 754, 792, 793, 843, 868, 934, 964, 965, 975, 977, 979, 981, 982, 983, 985, 986, 987, 988, 989, 993, 995, 999, 1001, 1009, 1035, 1036, 1037, 1038, 1041, 1042, 1043], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 65, 75, 78, 79, 80, 81, 86, 95, 103, 106, 111, 114, 115, 120, 124, 125, 126, 134, 144, 152, 153, 154, 158, 159, 160, 163, 164, 169, 181, 183, 184, 188, 199, 206, 209, 217, 225, 231, 234, 245, 248, 251, 259, 260, 263, 265, 266, 267, 270, 273, 275, 281, 285, 286, 290, 294, 296, 311, 319, 338, 340, 351, 360, 373, 375, 379, 382, 390, 392, 402, 403, 405, 407, 408, 409, 410, 412, 413, 422, 428, 433, 442, 447, 449, 461, 465, 470, 474, 478, 479, 480, 494, 500, 509, 516, 530, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 584, 585, 586, 587, 602, 605, 606, 607, 623, 631, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 681, 682, 688, 692, 712, 717, 718, 719, 723, 725, 776, 780, 783, 794, 808, 811, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 854, 855, 868, 873, 885, 892, 893, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 910, 951, 975, 977, 979, 981, 982, 985, 986, 987, 988, 989, 992, 993, 995, 999, 1000, 1001, 1005, 1020, 1027, 1031, 1034, 1037, 1038, 1039, 1040, 1042, 1044], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 31, 32, 37, 38, 42, 48, 49, 50, 60, 61, 63, 70, 71, 82, 89, 92, 95, 98, 103, 105, 122, 151, 159, 199, 207, 215, 217, 225, 229, 231, 232, 233, 234, 248, 259, 260, 268, 281, 289, 290, 296, 301, 324, 325, 328, 336, 340, 341, 351, 372, 373, 375, 380, 384, 390, 403, 405, 407, 408, 410, 412, 413, 415, 416, 440, 442, 443, 448, 456, 459, 484, 489, 499, 522, 530, 532, 553, 554, 562, 577, 578, 586, 610, 611, 615, 618, 619, 640, 641, 644, 665, 666, 667, 676, 684, 685, 688, 689, 693, 695, 701, 704, 717, 718, 719, 721, 751, 759, 763, 773, 776, 783, 806, 832, 834, 836, 837, 838, 853, 864, 868, 870, 871, 873, 885, 890, 907, 908, 912, 977, 979, 981, 982, 983, 984, 985, 987, 993, 995, 997, 1000, 1001, 1008, 1016, 1017, 1018, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043], "perrot": [0, 1027], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 34, 53, 55, 57, 61, 70, 78, 80, 81, 82, 85, 86, 90, 98, 100, 101, 111, 114, 121, 123, 124, 127, 137, 144, 147, 148, 159, 168, 169, 170, 175, 179, 183, 188, 189, 199, 200, 201, 203, 217, 220, 221, 234, 235, 256, 260, 261, 263, 265, 266, 274, 275, 278, 289, 296, 307, 310, 315, 317, 344, 351, 356, 357, 358, 360, 364, 365, 366, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 390, 391, 392, 395, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 433, 435, 437, 439, 440, 441, 443, 445, 446, 450, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 492, 494, 496, 497, 498, 499, 520, 529, 530, 531, 532, 534, 536, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 577, 578, 584, 585, 586, 587, 589, 590, 593, 599, 600, 602, 603, 604, 605, 606, 607, 613, 618, 619, 626, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 686, 688, 690, 693, 695, 697, 700, 701, 704, 705, 723, 724, 725, 726, 733, 736, 737, 750, 758, 762, 780, 783, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 807, 808, 812, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 853, 854, 855, 857, 860, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 928, 933, 934, 936, 939, 940, 942, 945, 953, 960, 971, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 995, 996, 999, 1000, 1001, 1006, 1008, 1009, 1018, 1019, 1020, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "journal": [0, 81, 170, 260, 266, 278, 372, 373, 375, 403, 405, 407, 412, 448, 458, 469, 530, 537, 623, 631, 641, 685, 688, 689, 701, 711, 726, 729, 730, 753, 754, 781, 822, 827, 873, 885, 974, 975, 979, 981, 982, 983, 986, 992, 997, 999, 1000], "research": [0, 148, 168, 260, 266, 278, 373, 375, 390, 405, 497, 509, 631, 641, 688, 730, 822, 827, 974, 982, 986, 988, 1000, 1005, 1006, 1009], "volum": [0, 66, 79, 148, 156, 373, 375, 405, 407, 469, 530, 764, 981, 1000, 1009], "page": [0, 12, 17, 26, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 148, 156, 169, 170, 171, 180, 220, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 364, 373, 375, 378, 380, 382, 384, 386, 393, 404, 405, 407, 469, 512, 513, 514, 624, 640, 827, 892, 934, 975, 981, 985, 986, 1011, 1020, 1025, 1027, 1031, 1032], "want": [0, 4, 12, 20, 24, 25, 26, 55, 64, 71, 148, 164, 169, 199, 200, 201, 235, 238, 251, 260, 274, 278, 286, 301, 329, 333, 349, 360, 364, 365, 366, 376, 377, 379, 380, 382, 383, 384, 390, 391, 392, 393, 395, 396, 399, 403, 404, 405, 406, 407, 412, 413, 414, 496, 499, 500, 506, 531, 545, 650, 651, 652, 654, 655, 662, 664, 670, 671, 672, 759, 843, 846, 862, 869, 890, 897, 974, 981, 984, 985, 986, 989, 991, 995, 996, 1000, 1005, 1006, 1011, 1019, 1027, 1041], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 55, 65, 66, 78, 80, 82, 86, 90, 91, 92, 100, 109, 111, 117, 120, 124, 137, 148, 151, 156, 158, 169, 170, 172, 175, 178, 188, 212, 216, 217, 222, 228, 235, 237, 238, 240, 242, 245, 250, 251, 259, 263, 265, 267, 269, 283, 285, 289, 290, 307, 318, 327, 333, 340, 346, 349, 350, 354, 358, 360, 365, 366, 371, 372, 373, 374, 378, 379, 380, 382, 383, 386, 390, 391, 392, 393, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 421, 436, 437, 438, 440, 441, 442, 446, 450, 452, 456, 459, 460, 461, 463, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 493, 499, 519, 527, 529, 530, 533, 534, 536, 537, 538, 540, 546, 549, 551, 552, 553, 554, 555, 556, 560, 561, 562, 579, 581, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 640, 641, 667, 668, 670, 681, 682, 683, 684, 688, 692, 695, 704, 720, 724, 725, 731, 732, 736, 773, 776, 778, 792, 793, 794, 818, 825, 826, 828, 839, 840, 841, 843, 844, 845, 847, 848, 849, 856, 857, 861, 866, 869, 870, 872, 889, 890, 893, 897, 898, 905, 907, 917, 918, 923, 929, 953, 955, 974, 980, 981, 982, 984, 985, 986, 987, 988, 991, 992, 993, 998, 999, 1000, 1001, 1005, 1009, 1011, 1013, 1015, 1018, 1019, 1020, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "api": [0, 12, 50, 108, 166, 227, 229, 235, 239, 243, 283, 350, 351, 366, 367, 371, 372, 378, 379, 381, 382, 387, 388, 390, 391, 393, 395, 399, 410, 412, 413, 419, 422, 423, 424, 427, 429, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 492, 500, 504, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 559, 560, 562, 563, 564, 565, 566, 575, 576, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 654, 673, 684, 685, 686, 687, 688, 698, 792, 793, 797, 798, 800, 816, 823, 841, 843, 845, 846, 849, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 895, 901, 902, 951, 953, 969, 974, 983, 984, 985, 988, 995, 999, 1005, 1006, 1009, 1011, 1015, 1017, 1022, 1024, 1025, 1026, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "design": [0, 13, 20, 80, 111, 131, 154, 168, 169, 180, 250, 305, 311, 358, 366, 372, 378, 383, 390, 391, 392, 393, 394, 405, 412, 414, 511, 524, 628, 629, 644, 661, 665, 672, 676, 681, 794, 812, 813, 832, 834, 975, 981, 982, 985, 986, 995, 1005, 1006, 1009, 1013, 1029, 1036], "mai": [0, 8, 19, 25, 39, 44, 46, 56, 71, 86, 95, 121, 148, 155, 157, 159, 169, 172, 175, 179, 183, 188, 203, 205, 225, 235, 238, 263, 265, 267, 268, 299, 310, 325, 336, 340, 344, 349, 350, 351, 360, 364, 365, 366, 370, 372, 373, 374, 375, 377, 378, 380, 382, 383, 386, 390, 392, 393, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 428, 435, 436, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 455, 458, 461, 465, 468, 478, 479, 480, 483, 484, 485, 492, 504, 505, 511, 530, 531, 534, 536, 540, 543, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 570, 577, 590, 593, 598, 606, 607, 613, 616, 630, 631, 633, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 672, 673, 674, 675, 677, 680, 682, 684, 685, 687, 688, 689, 691, 693, 701, 708, 711, 712, 714, 715, 717, 718, 719, 721, 733, 751, 758, 780, 781, 794, 796, 797, 798, 799, 808, 809, 810, 811, 813, 814, 818, 822, 825, 830, 831, 832, 833, 834, 836, 839, 840, 841, 843, 845, 847, 848, 849, 855, 856, 857, 860, 862, 872, 874, 875, 876, 877, 878, 880, 886, 889, 890, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 915, 937, 938, 953, 974, 975, 977, 979, 981, 982, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1011, 1017, 1018, 1027, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "consid": [0, 4, 12, 13, 20, 25, 39, 55, 66, 71, 81, 90, 95, 99, 121, 122, 124, 143, 147, 148, 164, 170, 199, 201, 235, 260, 263, 267, 271, 283, 286, 289, 290, 305, 317, 333, 340, 341, 344, 349, 360, 364, 365, 366, 370, 377, 378, 380, 384, 386, 390, 392, 393, 401, 405, 410, 411, 412, 413, 414, 415, 416, 417, 434, 440, 442, 446, 453, 470, 504, 505, 517, 529, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 581, 582, 584, 585, 587, 589, 603, 604, 616, 627, 628, 629, 642, 648, 654, 655, 656, 658, 667, 675, 684, 685, 686, 688, 689, 690, 692, 696, 698, 701, 703, 705, 711, 721, 725, 729, 751, 781, 783, 789, 839, 840, 841, 843, 845, 847, 848, 849, 852, 854, 855, 860, 870, 871, 878, 892, 893, 902, 903, 905, 906, 907, 908, 969, 974, 980, 981, 982, 983, 985, 986, 988, 991, 992, 993, 995, 999, 1000, 1001, 1006, 1011, 1018, 1030, 1031, 1035, 1039, 1040, 1042, 1043, 1044], "softwar": [0, 148, 364, 375, 378, 386, 390, 392, 413, 623, 631, 654, 975, 1009], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 312, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 366, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 502, 503, 504, 505, 506, 508, 511, 515, 517, 519, 520, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 683, 684, 685, 686, 687, 688, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 713, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 758, 759, 763, 764, 766, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 924, 925, 926, 927, 928, 929, 932, 934, 936, 937, 938, 939, 942, 943, 944, 946, 947, 948, 949, 950, 952, 953, 954, 956, 959, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1012, 1014, 1015, 1016, 1017, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "2013": [0, 175, 375, 405, 409, 410, 532, 721, 751, 977, 985, 1004, 1028, 1029], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 66, 67, 81, 114, 148, 171, 191, 194, 203, 208, 209, 265, 266, 267, 278, 300, 309, 344, 375, 376, 384, 386, 402, 403, 405, 409, 410, 412, 415, 470, 512, 513, 514, 534, 536, 543, 551, 552, 553, 554, 562, 586, 603, 604, 606, 607, 611, 615, 618, 619, 630, 644, 645, 654, 665, 668, 670, 676, 683, 685, 688, 689, 701, 711, 720, 721, 726, 751, 781, 834, 868, 905, 906, 907, 908, 974, 979, 981, 982, 985, 987, 988, 989, 993, 997, 999, 1001, 1019, 1030, 1035, 1039, 1040, 1041, 1042], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 405, 413, 832, 987, 1004], "languag": [0, 351, 383, 399, 410, 413, 999, 1005, 1006, 1009, 1012], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 25, 30, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 56, 59, 60, 62, 65, 68, 69, 71, 72, 74, 76, 79, 81, 90, 92, 94, 95, 98, 99, 104, 106, 107, 109, 111, 113, 114, 116, 117, 120, 121, 122, 123, 124, 128, 129, 130, 132, 134, 137, 138, 139, 140, 145, 150, 151, 152, 153, 155, 156, 158, 160, 161, 163, 166, 169, 170, 177, 178, 181, 182, 183, 184, 188, 189, 191, 194, 195, 197, 198, 199, 200, 201, 202, 205, 207, 208, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 228, 231, 232, 233, 235, 237, 238, 239, 242, 245, 246, 247, 248, 249, 251, 254, 258, 260, 262, 263, 264, 265, 268, 274, 278, 281, 283, 287, 289, 291, 292, 293, 294, 296, 300, 301, 304, 306, 307, 308, 312, 313, 315, 317, 319, 320, 321, 325, 326, 328, 329, 332, 333, 335, 340, 341, 349, 355, 356, 357, 358, 363, 365, 367, 370, 371, 372, 374, 375, 378, 380, 381, 384, 385, 386, 387, 391, 395, 396, 399, 401, 402, 403, 404, 407, 410, 411, 412, 413, 415, 416, 417, 418, 420, 422, 423, 424, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 509, 510, 511, 516, 517, 518, 519, 520, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 613, 614, 618, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 706, 707, 709, 713, 714, 716, 720, 722, 723, 724, 725, 726, 729, 731, 732, 733, 735, 736, 749, 750, 752, 756, 758, 759, 764, 778, 779, 780, 782, 783, 784, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 917, 918, 921, 922, 923, 933, 934, 948, 951, 956, 957, 959, 960, 961, 962, 963, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013, 1015, 1016, 1018, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mine": [0, 260, 350, 373, 405, 416, 440, 507, 559, 716, 729, 735, 778, 981, 985, 991, 997], "108": [0, 8, 33, 35, 1028], "122": [0, 113, 156, 164, 170, 233, 384, 986], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 55, 57, 62, 65, 70, 74, 80, 81, 97, 98, 114, 116, 117, 118, 119, 124, 125, 127, 129, 139, 140, 148, 151, 157, 164, 168, 170, 171, 172, 183, 194, 200, 201, 203, 213, 220, 221, 222, 228, 232, 245, 251, 258, 262, 266, 267, 275, 289, 290, 299, 301, 307, 309, 310, 311, 312, 321, 327, 333, 335, 336, 349, 350, 356, 357, 364, 373, 375, 378, 383, 386, 387, 390, 391, 402, 403, 404, 405, 409, 411, 412, 413, 414, 415, 440, 443, 445, 446, 448, 465, 478, 479, 480, 549, 550, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 640, 666, 667, 675, 685, 688, 689, 721, 726, 737, 741, 751, 784, 787, 802, 804, 837, 838, 842, 871, 872, 876, 878, 899, 901, 902, 905, 906, 907, 908, 954, 974, 979, 980, 981, 982, 984, 985, 988, 989, 991, 993, 995, 997, 1000, 1001, 1002, 1005, 1006, 1011, 1012, 1014, 1020, 1027, 1028, 1030, 1031, 1035, 1038, 1039, 1040, 1041, 1042], "qualiti": [0, 6, 20, 24, 37, 46, 48, 49, 58, 98, 120, 169, 205, 254, 258, 267, 268, 269, 340, 378, 386, 390, 392, 399, 400, 404, 405, 407, 410, 448, 458, 465, 470, 553, 554, 555, 556, 560, 561, 738, 808, 889, 890, 905, 906, 907, 908, 934, 980, 982, 990, 997, 1001, 1005, 1006, 1009, 1015, 1016, 1022], "png": [0, 32, 909], "svg": 0, "logo": [0, 409, 801], "avail": [0, 5, 11, 12, 13, 41, 56, 57, 98, 119, 122, 123, 148, 151, 156, 160, 168, 169, 170, 188, 199, 207, 217, 221, 235, 238, 257, 258, 263, 264, 267, 288, 289, 290, 296, 310, 315, 316, 317, 318, 320, 321, 327, 329, 360, 364, 372, 373, 375, 376, 377, 378, 379, 383, 387, 391, 392, 395, 399, 402, 404, 405, 406, 409, 410, 411, 412, 413, 414, 416, 443, 446, 447, 448, 449, 465, 466, 467, 468, 469, 470, 471, 472, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 504, 531, 545, 551, 552, 553, 554, 555, 556, 560, 561, 584, 587, 589, 590, 606, 607, 628, 629, 643, 647, 649, 651, 653, 657, 659, 661, 666, 668, 669, 670, 672, 685, 692, 695, 727, 728, 794, 797, 798, 808, 819, 820, 825, 826, 827, 828, 829, 830, 831, 843, 854, 855, 857, 864, 873, 876, 881, 885, 890, 941, 946, 953, 975, 979, 982, 984, 985, 986, 987, 988, 991, 995, 998, 999, 1000, 1004, 1005, 1006, 1009, 1011, 1015, 1020, 1022, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043], "doc": [0, 4, 8, 19, 349, 351, 365, 376, 378, 382, 383, 386, 392, 395, 398, 399, 413, 584, 585, 587, 773, 776, 787, 788, 820, 1020, 1027, 1031, 1041], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 372, 375, 377, 378, 379, 381, 382, 384, 386, 387, 390, 391, 395, 399, 402, 406, 410, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970, 971, 972, 973, 982, 995, 1001, 1005, 1009, 1019, 1020, 1037, 1041], "directori": [0, 8, 285, 372, 376, 378, 380, 384, 386, 392, 395, 406, 437, 441, 446, 482, 495, 857, 858, 1041], "driven": [0, 172, 1009], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 55, 60, 72, 75, 78, 82, 85, 100, 103, 114, 116, 117, 121, 124, 125, 131, 145, 148, 151, 156, 157, 170, 171, 180, 188, 199, 203, 221, 224, 225, 228, 234, 235, 260, 267, 274, 278, 281, 283, 288, 300, 305, 317, 340, 344, 349, 350, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 380, 384, 386, 390, 392, 396, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 436, 439, 443, 445, 447, 450, 455, 492, 504, 528, 547, 563, 577, 578, 579, 585, 602, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 626, 628, 629, 634, 639, 651, 652, 668, 683, 688, 691, 696, 758, 760, 794, 797, 798, 808, 820, 824, 825, 836, 854, 855, 860, 869, 870, 875, 899, 900, 902, 913, 954, 974, 975, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 992, 993, 995, 999, 1000, 1001, 1011, 1015, 1018, 1036, 1037, 1039, 1040, 1043], "institut": [0, 375, 988], "privat": [0, 382, 392, 393, 913, 1009, 1027, 1035, 1037, 1038, 1040, 1041, 1044], "grant": [0, 238, 378], "assur": [0, 392, 792, 793, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "sustain": 0, "like": [0, 4, 12, 19, 52, 55, 58, 60, 70, 89, 92, 98, 103, 105, 109, 111, 113, 118, 124, 127, 151, 157, 169, 179, 199, 251, 260, 263, 264, 267, 268, 274, 292, 302, 305, 310, 311, 315, 327, 336, 340, 349, 350, 360, 364, 366, 370, 372, 373, 376, 377, 378, 380, 382, 385, 386, 387, 390, 391, 392, 399, 401, 403, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 511, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 575, 577, 578, 579, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 922, 923, 931, 936, 939, 948, 949, 953, 956, 957, 958, 970, 972, 974, 977, 979, 980, 981, 982, 985, 987, 988, 989, 991, 992, 995, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1018, 1020, 1024, 1027, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043], "thank": [0, 4, 17, 25, 55, 86, 171, 175, 199, 269, 349, 350, 377, 386, 1005, 1009, 1027, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "funder": 0, "member": [0, 349, 350, 373, 378, 381, 393, 405, 420, 438, 442, 444, 447, 449, 488, 551, 552, 559, 577, 654, 655, 662, 663, 664, 672, 673, 674, 700, 701, 711, 713, 726, 731, 732, 752, 781, 790, 794, 897, 981, 988, 1011, 1027, 1039, 1042], "consortium": [0, 1009], "foundat": [0, 131, 378, 403, 988], "nvidia": [0, 390], "2022": [0, 365, 412, 701, 995, 1041, 1042], "face": [0, 3, 15, 36, 53, 68, 94, 98, 107, 119, 166, 227, 243, 371, 378, 382, 405, 410, 412, 414, 445, 468, 489, 490, 491, 517, 528, 529, 533, 535, 536, 537, 539, 554, 580, 653, 669, 693, 709, 808, 823, 840, 877, 902, 920, 988, 1001, 1002, 1003, 1014, 1019, 1022, 1027, 1035], "2023": [0, 403, 1042, 1043], "microsoft": [0, 12, 376, 379, 395], "m\u00fcller": [0, 31, 306, 307, 393, 410, 531, 863, 989, 995, 999, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041], "2020": [0, 373, 1037, 1038, 1039, 1040], "quansight": 0, "lab": [0, 373, 464, 532, 895, 1009, 1038], "2021": [0, 376, 378, 667, 1039, 1040], "columbia": 0, "univers": [0, 159, 349, 373, 375, 381, 405, 410, 413, 586, 783, 832, 836, 892, 981, 983, 985, 987], "2016": [0, 225, 372, 405, 974, 1032, 1033], "sydnei": 0, "2017": [0, 260, 372, 403, 405, 416, 440, 985, 1033, 1034], "receiv": [0, 19, 137, 166, 235, 253, 257, 276, 351, 360, 378, 380, 386, 392, 409, 412, 500, 654, 698, 702, 704, 722, 777, 783, 784, 813, 823, 825, 826, 864, 902, 986, 989, 990, 999, 1037, 1038], "improv": [0, 4, 24, 25, 33, 78, 79, 82, 100, 106, 111, 112, 117, 120, 122, 123, 124, 126, 131, 144, 164, 169, 175, 185, 199, 207, 217, 261, 263, 278, 283, 286, 302, 310, 321, 339, 340, 350, 360, 365, 376, 381, 383, 384, 386, 387, 390, 392, 393, 399, 404, 410, 412, 414, 445, 446, 527, 528, 530, 533, 534, 535, 537, 538, 539, 542, 550, 553, 554, 555, 556, 557, 558, 560, 561, 606, 607, 639, 648, 660, 662, 663, 664, 668, 669, 670, 671, 672, 674, 681, 683, 688, 724, 725, 779, 782, 783, 846, 854, 855, 871, 873, 885, 905, 906, 908, 934, 979, 981, 982, 985, 988, 989, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1018, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 67, 106, 128, 133, 168, 169, 183, 184, 194, 199, 200, 201, 203, 217, 223, 232, 238, 257, 260, 263, 267, 269, 270, 305, 316, 317, 321, 349, 358, 364, 373, 377, 378, 380, 385, 387, 392, 393, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 434, 435, 438, 442, 443, 445, 460, 463, 490, 494, 496, 500, 504, 505, 506, 521, 523, 525, 526, 527, 529, 531, 532, 533, 538, 541, 542, 544, 545, 546, 553, 557, 558, 559, 560, 588, 589, 590, 591, 592, 594, 595, 596, 602, 606, 607, 616, 627, 628, 639, 642, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 665, 668, 669, 670, 671, 673, 676, 677, 678, 679, 680, 683, 686, 694, 696, 698, 703, 705, 708, 709, 711, 714, 716, 719, 722, 724, 725, 726, 730, 731, 733, 734, 735, 736, 737, 738, 739, 747, 749, 753, 761, 777, 778, 779, 782, 783, 784, 792, 793, 797, 798, 820, 837, 838, 839, 841, 843, 845, 847, 849, 850, 860, 861, 864, 870, 873, 876, 881, 885, 889, 890, 892, 893, 897, 898, 901, 902, 903, 905, 907, 914, 932, 934, 950, 952, 976, 977, 981, 983, 985, 986, 988, 989, 990, 992, 995, 1000, 1016, 1018, 1020, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "It": [0, 4, 7, 8, 9, 16, 20, 25, 34, 37, 40, 53, 55, 58, 72, 78, 80, 82, 95, 98, 99, 105, 111, 114, 116, 117, 120, 124, 131, 148, 156, 157, 158, 163, 164, 169, 170, 171, 179, 183, 187, 188, 196, 199, 203, 213, 216, 217, 220, 221, 228, 233, 235, 238, 255, 256, 258, 260, 261, 263, 266, 267, 278, 283, 289, 290, 291, 293, 294, 296, 305, 309, 310, 312, 315, 321, 332, 336, 340, 344, 349, 350, 351, 360, 364, 365, 366, 371, 373, 375, 376, 378, 380, 382, 383, 384, 386, 387, 390, 391, 392, 395, 396, 399, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 430, 433, 434, 437, 438, 439, 440, 441, 443, 444, 445, 448, 455, 458, 463, 464, 465, 470, 474, 481, 483, 492, 504, 511, 520, 529, 531, 532, 534, 536, 537, 545, 546, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 585, 592, 598, 602, 603, 604, 607, 610, 611, 615, 616, 618, 619, 623, 626, 627, 628, 629, 637, 638, 639, 642, 643, 646, 648, 649, 650, 651, 654, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 670, 672, 673, 674, 677, 678, 679, 680, 683, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 700, 704, 705, 706, 712, 718, 729, 737, 738, 742, 753, 754, 757, 760, 776, 778, 794, 796, 797, 798, 800, 806, 807, 808, 816, 818, 821, 824, 833, 834, 839, 840, 841, 843, 846, 847, 848, 849, 853, 854, 855, 859, 860, 861, 865, 866, 867, 871, 874, 876, 886, 889, 890, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 921, 934, 942, 943, 953, 956, 959, 961, 962, 963, 964, 965, 966, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 998, 999, 1000, 1001, 1005, 1009, 1011, 1017, 1018, 1019, 1020, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "provid": [0, 5, 8, 11, 24, 27, 30, 34, 37, 42, 55, 60, 81, 95, 113, 118, 119, 129, 131, 151, 157, 169, 170, 178, 185, 187, 188, 191, 200, 203, 208, 221, 225, 229, 230, 235, 250, 260, 261, 262, 266, 293, 296, 301, 305, 309, 315, 316, 318, 320, 334, 340, 341, 344, 349, 350, 354, 355, 358, 360, 364, 366, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 387, 390, 391, 392, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 426, 433, 436, 438, 439, 440, 442, 443, 445, 446, 448, 455, 456, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 489, 490, 492, 494, 497, 528, 529, 530, 531, 534, 536, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 589, 590, 597, 601, 606, 607, 623, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 690, 695, 707, 730, 736, 737, 759, 769, 773, 783, 787, 789, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 807, 808, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 854, 855, 857, 860, 862, 863, 864, 867, 868, 869, 872, 874, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 923, 928, 942, 944, 961, 962, 963, 974, 975, 977, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1011, 1015, 1018, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "2012": [0, 81, 403, 412, 551, 552, 559, 635, 738, 974, 978, 985, 1004, 1027], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 364, 365, 366, 371, 373, 376, 378, 380, 383, 386, 390, 392, 393, 395, 401, 404, 405, 407, 409, 410, 413, 437, 441, 443, 445, 455, 484, 485, 488, 492, 493, 496, 497, 498, 499, 500, 501, 503, 506, 531, 533, 537, 555, 556, 563, 564, 628, 644, 646, 650, 665, 676, 717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 785, 786, 792, 793, 805, 834, 923, 974, 981, 984, 987, 988, 992, 995, 998, 1006, 1018, 1027, 1031, 1033, 1035, 1037, 1038, 1040, 1041, 1043, 1044], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 396, 401, 402, 403, 404, 405, 407, 408, 410, 412, 413, 416, 433, 437, 439, 440, 441, 442, 443, 446, 448, 451, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 468, 492, 495, 497, 515, 519, 530, 532, 534, 536, 543, 558, 563, 564, 565, 566, 586, 606, 615, 623, 624, 625, 626, 630, 635, 636, 639, 642, 646, 648, 650, 656, 658, 660, 662, 663, 669, 672, 673, 674, 681, 682, 686, 688, 690, 697, 789, 792, 793, 794, 796, 797, 798, 799, 801, 803, 808, 809, 810, 813, 815, 818, 819, 820, 821, 822, 825, 827, 832, 833, 834, 835, 836, 837, 838, 845, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 861, 862, 864, 867, 870, 871, 872, 876, 881, 889, 890, 894, 895, 899, 902, 903, 911, 936, 951, 974, 975, 977, 978, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 997, 998, 999, 1000, 1001, 1005, 1009, 1011, 1016, 1018, 1019, 1020, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "host": [0, 117, 321, 349, 373, 378, 382, 386, 387, 890, 953, 1020, 1043], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 57, 66, 69, 72, 86, 97, 98, 100, 103, 114, 116, 117, 120, 121, 125, 127, 133, 143, 163, 164, 166, 168, 169, 170, 171, 175, 178, 192, 199, 203, 217, 220, 221, 222, 224, 228, 229, 230, 232, 234, 235, 238, 239, 247, 250, 255, 257, 260, 261, 262, 269, 270, 278, 288, 289, 290, 304, 305, 309, 310, 312, 313, 315, 316, 318, 324, 336, 340, 343, 346, 349, 350, 354, 358, 360, 364, 370, 371, 373, 374, 375, 378, 380, 382, 383, 384, 386, 387, 391, 392, 393, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 433, 439, 440, 442, 443, 444, 445, 446, 448, 453, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 484, 492, 493, 499, 529, 530, 531, 534, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 590, 593, 598, 606, 607, 608, 609, 616, 623, 624, 626, 631, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 686, 688, 692, 695, 700, 714, 758, 769, 773, 780, 787, 794, 795, 796, 797, 798, 799, 800, 801, 803, 808, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 852, 854, 855, 857, 858, 860, 862, 863, 864, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 878, 885, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 928, 942, 974, 975, 977, 978, 979, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1011, 1015, 1018, 1019, 1022, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1040, 1041, 1042, 1043], "event": [0, 4, 16, 199, 217, 263, 403, 405, 584, 585, 632, 832, 922, 981, 986, 987, 1005, 1009, 1033], "pari": [0, 375, 406, 462, 759, 865, 996, 1041], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 34, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 56, 59, 60, 61, 63, 64, 81, 91, 100, 102, 105, 122, 123, 124, 125, 148, 164, 170, 180, 191, 193, 199, 200, 210, 211, 223, 224, 228, 229, 238, 245, 248, 249, 255, 261, 271, 288, 291, 293, 300, 305, 307, 308, 319, 326, 334, 336, 337, 338, 343, 350, 351, 373, 374, 375, 383, 404, 405, 407, 408, 410, 411, 412, 418, 436, 438, 439, 442, 443, 444, 445, 448, 450, 455, 456, 457, 458, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 497, 508, 520, 530, 531, 537, 540, 546, 602, 605, 606, 607, 628, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 686, 690, 792, 862, 863, 866, 875, 877, 887, 888, 897, 898, 979, 981, 982, 984, 992, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041], "scienc": [0, 38, 80, 148, 159, 278, 372, 375, 390, 405, 436, 450, 534, 536, 543, 684, 685, 689, 844, 975, 977, 981, 982, 985, 988, 997, 1006, 1009, 1014, 1035], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 34, 37, 40, 47, 53, 55, 57, 58, 60, 61, 64, 66, 71, 81, 89, 90, 91, 95, 98, 100, 101, 105, 116, 117, 124, 127, 131, 134, 147, 148, 151, 158, 159, 163, 168, 169, 170, 171, 172, 175, 178, 179, 183, 188, 189, 191, 192, 193, 195, 199, 201, 208, 209, 214, 217, 222, 228, 235, 236, 238, 247, 250, 256, 257, 258, 260, 261, 263, 264, 267, 268, 269, 270, 278, 281, 283, 288, 302, 306, 307, 310, 311, 315, 317, 318, 319, 327, 335, 336, 345, 349, 350, 351, 354, 358, 360, 364, 365, 366, 372, 373, 374, 375, 377, 378, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 437, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 456, 458, 460, 465, 470, 483, 484, 486, 487, 488, 489, 490, 491, 492, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 510, 530, 535, 536, 539, 543, 547, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 565, 577, 579, 580, 584, 585, 586, 587, 606, 607, 611, 612, 616, 623, 626, 628, 629, 630, 631, 639, 643, 644, 645, 646, 650, 653, 654, 655, 657, 662, 664, 665, 667, 669, 670, 671, 672, 674, 676, 684, 688, 691, 695, 699, 705, 716, 729, 745, 746, 749, 758, 766, 769, 773, 774, 775, 776, 778, 783, 785, 786, 787, 788, 791, 792, 793, 794, 797, 798, 800, 801, 802, 804, 806, 808, 812, 813, 816, 818, 820, 821, 823, 824, 825, 826, 827, 829, 830, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 853, 857, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 876, 877, 878, 881, 883, 897, 899, 900, 901, 902, 903, 905, 906, 907, 908, 913, 923, 926, 936, 943, 956, 974, 975, 977, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1001, 1002, 1004, 1005, 1009, 1011, 1015, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "2014": [0, 52, 372, 410, 412, 415, 526, 603, 604, 618, 619, 654, 688, 854, 855, 933, 934, 982, 989, 1009, 1030], "2015": [0, 170, 372, 704, 717, 718, 719, 854, 855, 985, 992, 1009, 1031, 1032], "50": [0, 4, 7, 8, 10, 14, 16, 24, 32, 33, 38, 42, 50, 52, 59, 60, 65, 66, 70, 71, 85, 92, 95, 98, 105, 111, 114, 117, 124, 129, 130, 148, 152, 154, 155, 156, 157, 168, 169, 170, 179, 183, 194, 199, 202, 206, 207, 211, 213, 215, 217, 220, 224, 225, 231, 232, 234, 242, 255, 260, 262, 263, 273, 283, 302, 305, 309, 317, 319, 325, 327, 329, 334, 343, 350, 373, 375, 378, 383, 409, 412, 413, 414, 417, 438, 469, 496, 500, 519, 529, 535, 540, 549, 550, 565, 589, 590, 611, 613, 654, 655, 662, 663, 664, 666, 672, 673, 674, 688, 709, 794, 808, 826, 846, 897, 906, 980, 981, 985, 986, 988, 991, 995, 1027, 1044], "2018": [0, 199, 217, 413, 446, 974, 985, 1003, 1009, 1034, 1035], "nyu": [0, 122, 181, 846], "moor": [0, 730, 985, 1009], "environ": [0, 12, 26, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 364, 373, 375, 376, 378, 380, 384, 386, 390, 395, 399, 401, 404, 406, 495, 1006, 1009, 1034, 1035, 1044], "student": [0, 97, 260, 982, 1006, 1009], "t\u00e9l\u00e9com": [0, 1003], "paristech": [0, 24, 25, 42, 228, 1003], "rv": [0, 122, 264, 305, 798, 806, 808, 974, 1027, 1028, 1031, 1032, 1033, 1034, 1035], "thierri": [0, 245, 247, 1009, 1033, 1034, 1041], "guillemot": [0, 245, 247, 1033, 1034], "labex": 0, "digicosm": 0, "goix": [0, 1031, 1033, 1034, 1035, 1036], "mathurin": [0, 1038, 1040, 1041], "massia": [0, 1038, 1040, 1041], "2019": [0, 170, 376, 405, 448, 458, 688, 982, 992, 995, 1035, 1036, 1037], "dure": [0, 4, 5, 12, 50, 55, 58, 72, 75, 86, 100, 115, 121, 128, 145, 151, 156, 169, 170, 172, 188, 200, 207, 258, 262, 283, 317, 318, 340, 364, 366, 376, 378, 380, 383, 392, 393, 405, 406, 410, 412, 413, 415, 416, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 455, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 609, 610, 611, 613, 615, 616, 618, 619, 621, 623, 624, 625, 626, 628, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 696, 784, 792, 793, 794, 797, 798, 808, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 885, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 975, 977, 981, 982, 988, 995, 997, 1001, 1015, 1020, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "phd": [0, 405, 412, 1006, 1009], "chan": [0, 835, 877], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 57, 58, 60, 64, 68, 81, 125, 132, 133, 134, 152, 157, 166, 169, 179, 192, 214, 220, 221, 225, 244, 246, 247, 252, 260, 283, 317, 326, 336, 350, 360, 365, 373, 378, 380, 386, 387, 390, 392, 405, 410, 412, 414, 415, 417, 438, 439, 443, 444, 445, 446, 447, 448, 449, 455, 456, 457, 458, 474, 508, 511, 527, 528, 529, 533, 534, 536, 539, 541, 542, 543, 544, 549, 550, 555, 556, 589, 603, 604, 606, 607, 615, 616, 623, 636, 641, 642, 643, 644, 648, 649, 654, 656, 657, 658, 659, 662, 663, 664, 665, 667, 672, 673, 674, 676, 677, 680, 686, 687, 688, 690, 691, 792, 793, 827, 846, 853, 854, 855, 893, 920, 933, 934, 954, 959, 960, 977, 981, 982, 984, 989, 990, 991, 999, 1001, 1005, 1017, 1019, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "were": [0, 4, 32, 70, 71, 74, 80, 81, 117, 121, 124, 145, 148, 156, 164, 199, 200, 203, 229, 238, 269, 271, 301, 302, 310, 316, 317, 319, 320, 321, 327, 340, 349, 351, 358, 360, 372, 373, 375, 378, 379, 382, 390, 392, 396, 402, 406, 412, 413, 460, 463, 464, 492, 557, 558, 584, 587, 598, 797, 798, 813, 821, 894, 895, 931, 974, 985, 986, 1001, 1008, 1019, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "through": [0, 7, 34, 116, 121, 148, 159, 169, 203, 220, 233, 235, 255, 260, 263, 288, 309, 310, 334, 341, 351, 358, 375, 376, 378, 380, 385, 387, 392, 393, 395, 396, 405, 408, 410, 412, 414, 415, 442, 460, 463, 468, 531, 553, 554, 557, 560, 561, 562, 577, 589, 590, 593, 643, 647, 649, 651, 654, 655, 657, 659, 661, 664, 672, 673, 684, 687, 716, 800, 816, 873, 885, 889, 890, 905, 906, 907, 908, 940, 943, 974, 975, 982, 985, 987, 988, 989, 991, 993, 995, 999, 1000, 1001, 1009, 1011, 1018, 1020, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044], "program": [0, 50, 148, 350, 360, 365, 366, 375, 376, 378, 380, 384, 390, 504, 631, 666, 887, 888, 981, 1000, 1001, 1005, 1006, 1027, 1029], "immanuel": [0, 1027, 1028, 1032], "bayer": [0, 1027, 1028, 1032], "kemal": [0, 20, 21, 1029, 1030], "eren": [0, 20, 21, 1029, 1030], "tr\u00e9segni": [0, 1029], "hamzeh": [0, 1030, 1031], "alsalhi": [0, 1030, 1031], "issam": [0, 299, 1033], "laradji": [0, 299, 1033], "maheshakya": [0, 1030, 1031, 1032], "wijewardena": [0, 1030, 1031, 1032], "xue": [0, 1031, 1032, 1033, 1035, 1036, 1039], "nelson": [0, 1033, 1034, 1039], "yenchen": [0, 1033], "lin": [0, 530, 654, 1000, 1032, 1033, 1034, 1035], "neurodebian": 0, "debian": [0, 364, 376, 384], "packag": [0, 46, 53, 163, 235, 283, 365, 371, 372, 375, 376, 378, 379, 380, 382, 384, 387, 390, 392, 395, 404, 407, 412, 413, 448, 474, 642, 643, 975, 981, 984, 988, 995, 1001, 1009, 1014, 1027, 1033, 1035, 1036, 1037], "dr": [0, 148, 375, 405, 1041], "jame": [0, 375, 409, 827, 986, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043], "haxbi": 0, "dartmouth": 0, "colleg": [0, 168], "organ": [0, 11, 70, 80, 349, 372, 377, 378, 393, 845, 1005], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 56, 58, 62, 67, 71, 74, 78, 80, 81, 86, 95, 112, 113, 124, 127, 128, 131, 132, 144, 151, 153, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 171, 172, 175, 178, 180, 182, 183, 187, 188, 189, 193, 194, 199, 200, 203, 207, 208, 213, 216, 217, 220, 222, 228, 232, 235, 238, 246, 247, 248, 254, 255, 260, 261, 262, 263, 266, 268, 278, 286, 289, 294, 300, 301, 305, 310, 316, 317, 318, 319, 320, 321, 332, 333, 335, 336, 344, 346, 349, 350, 351, 358, 360, 364, 365, 366, 371, 372, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 428, 433, 439, 440, 443, 445, 447, 449, 455, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 492, 495, 504, 505, 511, 519, 520, 529, 530, 532, 534, 537, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 577, 578, 584, 586, 587, 590, 602, 605, 606, 607, 628, 629, 631, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 685, 686, 688, 689, 693, 694, 696, 697, 698, 703, 704, 711, 716, 721, 722, 733, 734, 735, 741, 749, 751, 752, 758, 777, 779, 782, 783, 784, 789, 792, 795, 796, 801, 803, 812, 813, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 942, 953, 974, 975, 977, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 992, 995, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1011, 1016, 1018, 1019, 1020, 1024, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "particip": [0, 377, 378, 393, 1009], "could": [0, 4, 9, 13, 27, 37, 42, 53, 71, 72, 95, 98, 112, 113, 121, 124, 145, 151, 156, 164, 168, 169, 170, 199, 200, 203, 208, 217, 224, 233, 234, 235, 254, 260, 291, 294, 318, 332, 333, 349, 354, 366, 378, 384, 386, 392, 395, 399, 403, 409, 412, 413, 417, 470, 529, 534, 603, 604, 625, 667, 796, 801, 803, 974, 975, 981, 982, 992, 993, 995, 1000, 1006, 1019, 1024, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "attend": 0, "psf": [0, 378], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 55, 71, 78, 95, 114, 117, 128, 151, 169, 170, 171, 172, 199, 216, 217, 233, 235, 260, 261, 262, 263, 265, 266, 267, 269, 270, 281, 315, 336, 344, 349, 350, 360, 364, 365, 366, 371, 372, 373, 376, 378, 379, 380, 381, 382, 384, 386, 390, 391, 392, 395, 399, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 417, 419, 428, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 492, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 705, 717, 718, 719, 723, 737, 751, 773, 778, 780, 783, 792, 793, 794, 796, 797, 798, 800, 806, 807, 808, 812, 813, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 915, 917, 918, 921, 926, 953, 956, 959, 974, 977, 980, 981, 982, 984, 985, 986, 987, 988, 993, 995, 1000, 1001, 1006, 1009, 1011, 1018, 1019, 1020, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043], "tinyclu": 0, "french": [0, 217, 311], "associ": [0, 11, 24, 25, 80, 111, 151, 168, 169, 203, 248, 311, 324, 326, 349, 386, 405, 407, 409, 410, 412, 413, 442, 445, 465, 466, 467, 468, 469, 470, 471, 472, 489, 490, 491, 520, 553, 557, 560, 601, 602, 626, 641, 654, 655, 662, 664, 670, 671, 672, 685, 691, 695, 726, 734, 820, 840, 848, 862, 874, 886, 894, 903, 905, 907, 923, 984, 985, 988, 995, 998, 1009, 1019, 1027, 1039, 1043], "fond": [0, 1009], "de": [0, 12, 24, 25, 26, 27, 74, 115, 131, 151, 152, 154, 155, 156, 157, 158, 160, 190, 233, 234, 311, 326, 344, 375, 631, 684, 759, 981, 982, 1006, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 55, 62, 66, 72, 111, 119, 124, 131, 145, 148, 156, 163, 170, 171, 188, 199, 200, 201, 217, 221, 233, 254, 257, 260, 261, 263, 269, 278, 336, 344, 350, 358, 364, 373, 375, 378, 383, 384, 386, 390, 393, 405, 407, 410, 413, 415, 489, 490, 496, 500, 506, 642, 643, 897, 975, 981, 982, 985, 990, 991, 992, 1006, 1009, 1016, 1018, 1019, 1027, 1044], "our": [0, 4, 5, 7, 11, 12, 42, 53, 56, 70, 71, 80, 81, 86, 95, 96, 111, 112, 118, 121, 124, 125, 143, 148, 151, 156, 158, 168, 169, 170, 171, 172, 199, 203, 217, 222, 224, 235, 254, 260, 263, 266, 267, 286, 301, 305, 311, 316, 318, 329, 333, 339, 341, 344, 349, 350, 351, 360, 365, 377, 382, 383, 386, 390, 391, 392, 393, 396, 405, 409, 412, 413, 415, 416, 440, 446, 559, 640, 688, 704, 716, 721, 733, 751, 839, 840, 841, 843, 845, 847, 848, 849, 974, 975, 981, 982, 985, 991, 995, 998, 999, 1000, 1006, 1009, 1011, 1018, 1019, 1020, 1034, 1035, 1037, 1038, 1041, 1042, 1044], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 370, 375, 376, 379, 380, 382, 386, 390, 391, 392, 393, 395, 396, 399, 402, 403, 405, 406, 408, 409, 410, 414, 415, 433, 497, 531, 535, 537, 539, 542, 555, 556, 593, 607, 612, 617, 620, 634, 635, 636, 637, 652, 662, 664, 669, 672, 683, 685, 688, 689, 705, 794, 817, 818, 819, 820, 825, 826, 827, 829, 835, 843, 854, 857, 858, 877, 878, 974, 979, 981, 982, 984, 985, 986, 992, 993, 999, 1000, 1006, 1009, 1011, 1022, 1027, 1031, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 55, 60, 64, 75, 82, 91, 95, 97, 98, 109, 116, 117, 119, 120, 124, 133, 134, 148, 156, 157, 159, 166, 168, 169, 170, 172, 178, 183, 185, 191, 192, 193, 199, 200, 201, 202, 203, 208, 210, 214, 216, 217, 220, 221, 228, 234, 235, 238, 239, 242, 246, 248, 250, 258, 261, 262, 263, 264, 266, 267, 268, 270, 272, 278, 281, 283, 286, 288, 301, 305, 306, 310, 315, 316, 317, 318, 320, 321, 324, 326, 327, 328, 333, 336, 340, 341, 344, 345, 349, 350, 351, 355, 358, 360, 364, 365, 366, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 386, 387, 390, 391, 392, 393, 396, 401, 402, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 427, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 504, 505, 511, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 701, 705, 709, 710, 711, 712, 713, 714, 716, 717, 718, 721, 723, 724, 725, 727, 728, 730, 731, 732, 733, 737, 740, 741, 743, 745, 746, 748, 751, 756, 764, 769, 773, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 806, 808, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 923, 925, 926, 927, 928, 939, 942, 943, 948, 953, 960, 969, 974, 975, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 995, 998, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "handl": [0, 4, 9, 71, 117, 121, 127, 131, 175, 183, 234, 235, 262, 267, 269, 278, 283, 290, 311, 315, 349, 351, 358, 364, 370, 372, 376, 378, 379, 380, 387, 390, 392, 396, 412, 413, 415, 492, 540, 573, 577, 578, 581, 582, 584, 585, 587, 606, 631, 642, 643, 648, 654, 655, 656, 657, 658, 664, 671, 672, 674, 677, 716, 783, 861, 870, 871, 897, 898, 902, 909, 935, 942, 945, 982, 985, 986, 987, 988, 991, 993, 1000, 1001, 1005, 1006, 1009, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 34, 37, 49, 57, 62, 71, 75, 80, 82, 96, 97, 98, 100, 113, 121, 128, 129, 131, 144, 145, 147, 155, 157, 164, 166, 169, 170, 171, 172, 177, 178, 183, 185, 192, 193, 198, 200, 201, 205, 214, 215, 217, 218, 223, 224, 229, 230, 231, 232, 234, 238, 245, 247, 251, 253, 254, 260, 269, 276, 283, 287, 302, 305, 307, 309, 310, 316, 317, 318, 319, 321, 328, 331, 333, 338, 339, 340, 344, 345, 347, 349, 350, 351, 358, 360, 364, 365, 370, 373, 374, 378, 379, 380, 383, 384, 386, 387, 390, 392, 393, 403, 404, 405, 406, 409, 411, 412, 413, 414, 415, 417, 433, 437, 441, 442, 446, 448, 452, 458, 459, 460, 461, 463, 464, 484, 492, 493, 499, 500, 504, 522, 528, 531, 532, 534, 536, 540, 543, 545, 547, 548, 549, 553, 554, 555, 556, 557, 558, 560, 561, 562, 568, 584, 585, 587, 588, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 627, 631, 634, 639, 646, 648, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 668, 672, 673, 674, 681, 682, 683, 684, 685, 686, 687, 688, 690, 694, 695, 698, 702, 703, 708, 711, 713, 715, 716, 721, 722, 723, 730, 732, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 777, 780, 783, 784, 785, 786, 789, 792, 793, 794, 795, 799, 801, 802, 803, 804, 806, 812, 819, 823, 826, 845, 847, 848, 849, 852, 857, 858, 860, 861, 862, 865, 869, 870, 871, 872, 873, 874, 876, 877, 884, 885, 886, 887, 888, 890, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 932, 934, 938, 940, 948, 974, 975, 976, 977, 978, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1006, 1018, 1019, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "profit": 0, "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 34, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 58, 65, 67, 70, 71, 72, 75, 78, 80, 81, 86, 90, 92, 97, 99, 100, 101, 106, 111, 114, 115, 116, 117, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134, 137, 143, 145, 147, 148, 151, 152, 156, 157, 158, 163, 164, 168, 169, 170, 172, 175, 178, 179, 183, 188, 192, 199, 200, 201, 203, 205, 207, 213, 215, 216, 217, 220, 221, 222, 224, 228, 229, 232, 233, 234, 235, 236, 238, 239, 245, 246, 250, 251, 254, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 288, 289, 290, 300, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 324, 326, 327, 328, 336, 340, 344, 346, 349, 350, 351, 354, 358, 360, 364, 365, 366, 370, 372, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 483, 519, 527, 528, 529, 530, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 575, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 606, 607, 608, 609, 610, 611, 613, 615, 618, 623, 624, 625, 626, 628, 629, 630, 636, 638, 639, 640, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 657, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 703, 705, 712, 713, 715, 716, 718, 720, 721, 729, 730, 731, 732, 737, 738, 741, 751, 753, 773, 774, 775, 776, 777, 778, 784, 792, 793, 794, 797, 798, 799, 800, 802, 804, 808, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 854, 857, 861, 864, 868, 870, 871, 872, 875, 876, 877, 878, 879, 881, 889, 890, 892, 893, 894, 897, 899, 902, 903, 905, 906, 907, 908, 909, 913, 926, 929, 933, 934, 936, 941, 942, 943, 945, 953, 954, 957, 960, 966, 969, 974, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1011, 1013, 1015, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "manag": [0, 86, 242, 363, 372, 376, 379, 380, 382, 386, 390, 392, 393, 412, 446, 464, 622, 895, 953, 979, 1001, 1005, 1006, 1009, 1020, 1022, 1040, 1043], "board": 0, "scipi": [0, 6, 13, 17, 19, 41, 46, 47, 53, 54, 78, 79, 82, 96, 98, 101, 103, 123, 151, 169, 172, 185, 189, 201, 246, 250, 251, 257, 260, 268, 272, 283, 288, 293, 302, 316, 317, 324, 325, 364, 372, 373, 376, 378, 380, 384, 387, 390, 391, 392, 395, 398, 404, 405, 410, 413, 446, 447, 448, 449, 453, 458, 459, 492, 499, 504, 528, 530, 531, 537, 540, 577, 578, 581, 582, 584, 585, 606, 607, 644, 645, 649, 653, 654, 655, 659, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 676, 680, 683, 687, 688, 691, 755, 758, 773, 774, 775, 776, 787, 788, 798, 806, 808, 823, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 860, 869, 870, 875, 876, 877, 880, 884, 887, 888, 897, 899, 900, 902, 903, 936, 956, 959, 974, 975, 981, 983, 986, 988, 989, 995, 999, 1000, 1004, 1006, 1014, 1016, 1019, 1020, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "mission": [0, 350, 1009], "foster": [0, 1035], "comput": [0, 4, 6, 7, 11, 13, 20, 26, 37, 39, 41, 42, 46, 52, 54, 57, 58, 60, 61, 70, 72, 79, 80, 81, 82, 96, 105, 114, 118, 119, 123, 124, 125, 126, 147, 148, 151, 156, 158, 159, 163, 169, 170, 171, 172, 175, 179, 180, 183, 184, 185, 186, 187, 188, 199, 201, 203, 207, 213, 216, 217, 221, 224, 229, 231, 232, 234, 238, 239, 241, 256, 258, 260, 261, 262, 263, 267, 269, 271, 283, 285, 287, 289, 290, 292, 293, 296, 305, 315, 319, 320, 325, 327, 336, 340, 344, 349, 350, 351, 358, 365, 366, 367, 372, 373, 375, 378, 383, 384, 385, 387, 390, 391, 392, 394, 395, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 453, 455, 457, 458, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 512, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 578, 581, 582, 585, 586, 587, 589, 590, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 720, 721, 722, 724, 725, 726, 729, 731, 733, 734, 735, 737, 738, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 791, 792, 793, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 862, 863, 866, 867, 872, 873, 874, 875, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 931, 932, 933, 934, 950, 951, 958, 960, 966, 974, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 997, 998, 999, 1000, 1001, 1005, 1006, 1009, 1015, 1016, 1019, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "particular": [0, 4, 11, 13, 37, 39, 40, 60, 71, 78, 92, 100, 104, 121, 124, 127, 155, 163, 169, 170, 199, 201, 207, 233, 257, 261, 263, 269, 283, 292, 296, 305, 315, 316, 319, 350, 351, 360, 364, 372, 373, 376, 377, 378, 380, 382, 383, 384, 386, 387, 391, 392, 395, 405, 406, 409, 410, 412, 413, 414, 415, 442, 465, 469, 492, 540, 559, 605, 649, 654, 659, 668, 670, 680, 683, 708, 723, 780, 829, 844, 916, 918, 975, 977, 979, 981, 985, 988, 989, 990, 991, 993, 995, 1006, 1009, 1019, 1027, 1030, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1044], "As": [0, 4, 7, 20, 25, 27, 30, 40, 43, 53, 55, 57, 58, 66, 82, 86, 100, 111, 112, 118, 121, 123, 125, 130, 143, 151, 156, 164, 169, 171, 172, 175, 178, 181, 183, 188, 190, 199, 203, 207, 217, 225, 235, 248, 255, 257, 258, 260, 261, 263, 273, 281, 288, 306, 318, 327, 336, 350, 351, 354, 356, 357, 360, 364, 365, 373, 376, 377, 378, 380, 382, 383, 391, 392, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 442, 489, 550, 558, 562, 615, 628, 651, 652, 668, 670, 683, 730, 753, 759, 839, 840, 841, 843, 845, 876, 974, 979, 981, 982, 984, 985, 986, 988, 992, 995, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1015, 1018, 1019, 1020, 1027, 1033, 1038, 1043], "fiscal": 0, "home": [0, 12, 113, 131, 155, 157, 159, 160, 191, 208, 246, 302, 320, 341, 355, 373, 376, 386, 395, 404, 482, 495, 675, 1009], "ensur": [0, 20, 41, 57, 82, 92, 111, 117, 118, 172, 199, 221, 255, 263, 301, 358, 360, 364, 365, 378, 380, 382, 383, 384, 393, 395, 396, 403, 405, 406, 409, 417, 465, 529, 530, 537, 607, 623, 692, 701, 777, 784, 818, 890, 917, 918, 934, 940, 951, 981, 982, 985, 995, 1001, 1015, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "monei": [0, 217, 1009], "when": [0, 4, 9, 10, 11, 20, 24, 25, 26, 27, 34, 39, 40, 43, 56, 60, 67, 70, 71, 72, 78, 80, 81, 86, 95, 98, 99, 100, 103, 114, 117, 120, 121, 122, 124, 127, 131, 132, 133, 145, 151, 163, 168, 169, 170, 171, 172, 178, 179, 183, 188, 190, 192, 196, 199, 201, 203, 204, 215, 228, 229, 230, 234, 235, 242, 246, 248, 256, 259, 260, 261, 262, 263, 267, 269, 270, 278, 283, 285, 286, 289, 290, 291, 305, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 326, 327, 329, 336, 339, 340, 344, 349, 350, 351, 354, 360, 364, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 395, 396, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 421, 428, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 485, 486, 487, 488, 492, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 511, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 574, 577, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 696, 697, 698, 700, 701, 703, 704, 708, 709, 712, 722, 723, 724, 725, 727, 729, 730, 733, 741, 743, 746, 749, 750, 752, 756, 758, 762, 763, 764, 766, 769, 773, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 790, 792, 793, 794, 797, 798, 799, 800, 808, 812, 813, 816, 818, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 884, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 916, 917, 918, 924, 928, 932, 933, 934, 935, 937, 938, 943, 946, 953, 954, 974, 975, 977, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1006, 1009, 1011, 1017, 1018, 1019, 1020, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "need": [0, 4, 9, 12, 32, 46, 48, 53, 55, 57, 82, 97, 109, 117, 121, 123, 124, 125, 131, 148, 151, 156, 163, 164, 169, 187, 201, 216, 217, 221, 228, 231, 233, 235, 239, 245, 246, 250, 251, 258, 260, 262, 263, 265, 278, 283, 285, 310, 315, 327, 336, 349, 350, 360, 364, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 421, 433, 437, 441, 445, 461, 499, 537, 547, 568, 578, 579, 584, 585, 586, 587, 623, 631, 634, 635, 636, 638, 645, 662, 664, 667, 672, 675, 688, 716, 717, 718, 719, 776, 780, 792, 793, 794, 797, 798, 808, 809, 810, 818, 826, 829, 837, 838, 854, 857, 860, 864, 869, 870, 874, 892, 899, 902, 942, 974, 975, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 998, 999, 1000, 1001, 1006, 1009, 1017, 1018, 1019, 1020, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "keep": [0, 6, 42, 75, 98, 100, 117, 147, 163, 168, 169, 170, 171, 172, 183, 199, 200, 201, 207, 217, 250, 255, 258, 309, 310, 318, 325, 336, 349, 350, 354, 360, 364, 365, 370, 378, 382, 391, 392, 403, 405, 406, 407, 408, 409, 410, 428, 446, 461, 478, 479, 480, 481, 489, 490, 530, 536, 537, 540, 543, 550, 552, 554, 556, 558, 561, 564, 566, 591, 594, 596, 599, 607, 630, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 672, 673, 674, 675, 704, 812, 830, 831, 840, 848, 854, 855, 893, 898, 900, 903, 906, 908, 981, 986, 990, 993, 995, 1006, 1009, 1011, 1016, 1018, 1020, 1022, 1027, 1032, 1035, 1036, 1040, 1041, 1043], "while": [0, 4, 7, 8, 10, 12, 17, 20, 24, 27, 34, 37, 39, 43, 44, 48, 55, 62, 66, 70, 73, 75, 92, 99, 100, 111, 114, 117, 118, 128, 131, 148, 152, 157, 159, 160, 163, 168, 169, 170, 171, 175, 178, 180, 183, 188, 193, 199, 201, 203, 215, 228, 231, 232, 235, 236, 246, 247, 251, 254, 255, 259, 260, 261, 263, 267, 268, 269, 270, 271, 273, 285, 305, 306, 307, 310, 311, 312, 315, 318, 321, 333, 336, 349, 351, 358, 360, 365, 370, 371, 372, 373, 374, 377, 378, 380, 382, 383, 384, 386, 387, 390, 392, 393, 399, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 440, 460, 463, 464, 479, 481, 492, 517, 528, 548, 553, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 571, 578, 584, 585, 586, 587, 590, 593, 598, 602, 630, 639, 642, 643, 645, 652, 653, 654, 655, 672, 673, 674, 675, 704, 724, 725, 733, 749, 769, 773, 778, 779, 782, 783, 789, 792, 794, 795, 796, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 816, 818, 819, 820, 821, 822, 824, 832, 843, 845, 847, 848, 849, 856, 857, 858, 859, 860, 873, 885, 890, 895, 897, 898, 905, 906, 907, 908, 913, 938, 974, 975, 978, 979, 981, 982, 984, 985, 986, 987, 988, 991, 992, 995, 997, 1000, 1001, 1005, 1006, 1011, 1017, 1018, 1020, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 70, 199, 217, 310, 386, 390, 392, 410, 412, 413, 517, 774, 775, 1000, 1005, 1009, 1035, 1036, 1037, 1043], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 373, 378, 380, 383, 387, 393, 395, 406, 410, 412, 414, 439, 557, 558, 581, 582, 716, 937, 938, 995, 1001, 1005, 1006, 1011, 1020, 1038], "toward": [0, 26, 27, 63, 82, 118, 124, 130, 151, 171, 178, 203, 204, 225, 238, 344, 378, 392, 405, 444, 448, 458, 672, 674, 691, 871, 984, 999, 1001, 1004, 1006], "cover": [0, 52, 175, 199, 217, 360, 370, 373, 378, 391, 631, 716, 789, 985, 986, 1004], "travel": 0, "expens": [0, 56, 117, 131, 151, 168, 170, 229, 257, 269, 336, 340, 349, 350, 351, 366, 384, 392, 405, 406, 409, 412, 413, 445, 464, 504, 794, 797, 798, 808, 820, 895, 897, 982, 984, 995, 1000, 1005, 1009, 1020, 1031], "well": [0, 4, 9, 12, 20, 24, 25, 27, 34, 39, 48, 53, 57, 58, 62, 70, 78, 86, 111, 112, 114, 117, 122, 124, 129, 131, 148, 156, 158, 168, 169, 170, 171, 175, 183, 187, 197, 199, 200, 201, 203, 207, 220, 221, 222, 225, 228, 232, 235, 238, 247, 260, 267, 269, 271, 275, 278, 283, 286, 288, 289, 290, 312, 316, 317, 318, 319, 320, 321, 340, 344, 349, 350, 351, 360, 373, 375, 377, 378, 382, 384, 386, 387, 390, 391, 392, 393, 403, 405, 407, 409, 410, 412, 416, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 455, 456, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 696, 717, 718, 719, 780, 783, 787, 790, 792, 793, 794, 797, 798, 808, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 932, 933, 953, 974, 975, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 995, 998, 999, 1001, 1002, 1005, 1006, 1009, 1019, 1020, 1027, 1028, 1031, 1033, 1034, 1035, 1038], "budget": [0, 121, 832, 833, 834, 835, 836, 974], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 322, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 391, 392, 393, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 487, 489, 491, 492, 493, 496, 497, 498, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 758, 759, 761, 763, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 917, 918, 923, 928, 931, 932, 934, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 959, 960, 966, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1023, 1025, 1029], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 20, 26, 32, 37, 53, 66, 71, 72, 80, 82, 85, 86, 92, 98, 114, 115, 117, 120, 124, 125, 128, 148, 151, 158, 163, 168, 169, 170, 171, 172, 175, 187, 188, 192, 199, 200, 201, 203, 207, 213, 215, 217, 220, 221, 222, 224, 228, 229, 231, 233, 234, 235, 236, 238, 246, 255, 256, 260, 263, 266, 267, 268, 281, 283, 285, 289, 290, 300, 305, 306, 309, 315, 316, 317, 318, 319, 320, 321, 325, 327, 329, 336, 340, 349, 358, 364, 365, 372, 375, 376, 378, 379, 380, 382, 384, 385, 390, 391, 392, 395, 396, 400, 403, 404, 405, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 428, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 486, 492, 494, 500, 505, 511, 515, 523, 526, 529, 530, 534, 535, 536, 537, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 582, 584, 585, 586, 587, 589, 590, 593, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 628, 629, 631, 632, 634, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 695, 696, 699, 703, 704, 709, 711, 716, 717, 718, 719, 723, 724, 725, 727, 729, 733, 736, 741, 749, 750, 753, 758, 759, 763, 765, 769, 773, 777, 778, 779, 780, 782, 783, 784, 787, 788, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 913, 923, 924, 933, 934, 945, 948, 953, 960, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 991, 992, 993, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1018, 1019, 1020, 1022, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "regard": [0, 5, 7, 11, 53, 55, 71, 90, 100, 139, 151, 156, 170, 171, 188, 196, 201, 222, 234, 238, 262, 269, 270, 286, 350, 374, 378, 379, 383, 390, 392, 399, 404, 405, 410, 412, 413, 415, 439, 443, 448, 455, 458, 497, 610, 615, 652, 654, 697, 738, 793, 800, 816, 821, 839, 840, 978, 981, 985, 987, 988, 990, 992, 999, 1000, 1001, 1013, 1020, 1034, 1037], "might": [0, 4, 5, 31, 42, 44, 60, 62, 70, 120, 129, 145, 157, 164, 169, 170, 171, 175, 199, 217, 228, 260, 262, 286, 300, 317, 340, 346, 360, 364, 365, 372, 376, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 395, 399, 403, 406, 409, 410, 411, 412, 413, 415, 430, 439, 484, 492, 497, 499, 504, 511, 519, 532, 551, 552, 553, 560, 575, 576, 578, 606, 607, 623, 646, 650, 651, 652, 654, 655, 672, 674, 688, 752, 789, 797, 798, 821, 846, 862, 877, 890, 909, 911, 913, 917, 918, 934, 954, 974, 975, 977, 979, 981, 982, 984, 985, 987, 988, 992, 993, 995, 1000, 1001, 1020, 1028, 1030, 1035, 1036, 1038, 1041, 1042, 1043, 1044], "pai": [0, 217, 378], "dn": [0, 988], "continu": [0, 17, 19, 42, 121, 122, 151, 166, 170, 200, 207, 217, 221, 224, 238, 241, 246, 250, 251, 301, 304, 310, 311, 313, 317, 318, 358, 373, 376, 380, 381, 382, 383, 386, 390, 392, 393, 395, 405, 410, 412, 464, 488, 588, 591, 592, 595, 596, 603, 604, 605, 628, 642, 643, 648, 649, 653, 656, 657, 658, 659, 721, 737, 751, 806, 808, 860, 862, 864, 866, 867, 876, 877, 878, 894, 895, 906, 948, 974, 981, 982, 985, 986, 988, 989, 995, 1001, 1006, 1008, 1009, 1011, 1018, 1024, 1027, 1029, 1030, 1035, 1040, 1041, 1042], "integr": [0, 42, 71, 145, 159, 188, 301, 317, 376, 380, 381, 382, 384, 386, 392, 395, 410, 415, 442, 711, 750, 781, 960, 984, 992, 1009, 1014, 1028, 1030, 1031, 1039, 1040], "servic": [0, 4, 229, 238, 378, 382, 1009, 1035], "azur": [0, 378], "cirru": [0, 378], "cl": [0, 8, 12, 16, 385, 392, 907], "circlecl": 0, "free": [0, 5, 55, 156, 157, 164, 198, 250, 305, 372, 377, 378, 379, 386, 390, 395, 413, 448, 605, 667, 853, 903, 974, 977, 981, 985, 1006, 1035], "cpu": [0, 61, 261, 283, 320, 364, 365, 376, 384, 392, 395, 401, 413, 492, 628, 643, 647, 649, 651, 654, 655, 657, 659, 661, 662, 664, 672, 675, 794, 808, 818, 819, 820, 841, 849, 890, 953, 985, 1011, 1015, 1020, 1032, 1041, 1042, 1044], "server": [0, 148, 364, 375, 376, 492, 1035], "anaconda": [0, 365, 376, 382], "inc": [0, 70, 259, 975, 997, 1009], "storag": [0, 351, 392, 654, 655, 662, 663, 664, 672, 673, 674, 897, 988, 1000, 1030, 1035], "thei": [0, 4, 26, 27, 37, 50, 57, 82, 97, 109, 112, 118, 119, 121, 123, 125, 127, 144, 147, 148, 151, 152, 156, 169, 170, 183, 185, 188, 194, 199, 200, 217, 221, 224, 228, 234, 235, 238, 254, 257, 260, 261, 263, 269, 278, 283, 285, 300, 305, 310, 317, 319, 340, 349, 350, 356, 357, 360, 364, 365, 366, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 390, 391, 392, 393, 396, 402, 404, 405, 406, 407, 408, 410, 412, 414, 415, 417, 436, 438, 442, 443, 449, 450, 455, 463, 492, 504, 505, 529, 531, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 584, 587, 593, 606, 615, 625, 639, 642, 643, 648, 654, 655, 656, 657, 658, 666, 668, 672, 674, 677, 683, 757, 758, 760, 763, 769, 784, 794, 808, 826, 832, 833, 834, 835, 836, 854, 857, 859, 865, 876, 877, 899, 902, 905, 906, 907, 908, 912, 974, 975, 977, 979, 981, 984, 985, 986, 987, 988, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1009, 1011, 1015, 1017, 1018, 1020, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "stage": [0, 7, 26, 72, 111, 116, 122, 125, 376, 382, 392, 401, 405, 412, 444, 549, 550, 555, 556, 557, 558, 584, 585, 587, 598, 982, 995, 1004, 1035, 1039], "nightli": [0, 365, 381, 382], "build": [0, 4, 7, 17, 32, 43, 55, 67, 74, 99, 111, 120, 122, 128, 134, 145, 147, 162, 163, 165, 166, 169, 207, 265, 268, 278, 283, 301, 302, 306, 311, 312, 351, 360, 364, 365, 366, 374, 380, 381, 382, 383, 384, 392, 395, 398, 404, 405, 409, 412, 413, 438, 486, 497, 499, 520, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 581, 582, 584, 585, 587, 623, 624, 626, 687, 709, 710, 795, 799, 803, 812, 817, 819, 858, 875, 877, 905, 906, 907, 908, 910, 930, 974, 975, 982, 985, 989, 991, 995, 1000, 1001, 1005, 1006, 1009, 1012, 1014, 1018, 1019, 1027, 1030, 1032, 1033, 1034, 1036, 1039], "applic": [3, 5, 19, 49, 55, 80, 166, 175, 199, 216, 222, 254, 263, 305, 364, 366, 373, 375, 378, 380, 384, 386, 387, 390, 392, 403, 405, 409, 410, 411, 412, 415, 417, 440, 442, 448, 492, 494, 528, 529, 530, 549, 550, 625, 684, 685, 686, 690, 708, 724, 725, 733, 778, 779, 782, 823, 974, 981, 982, 983, 984, 985, 989, 991, 997, 1001, 1005, 1006, 1009, 1018, 1020, 1027, 1028, 1033, 1035, 1038], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 55, 57, 66, 95, 111, 114, 117, 119, 124, 125, 151, 166, 171, 175, 178, 183, 185, 188, 192, 193, 199, 201, 203, 216, 217, 222, 228, 229, 236, 238, 241, 258, 260, 265, 269, 270, 274, 278, 283, 288, 295, 309, 318, 333, 336, 340, 344, 345, 349, 350, 358, 360, 364, 373, 374, 375, 376, 377, 379, 380, 383, 384, 387, 390, 392, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 440, 443, 445, 446, 448, 453, 458, 461, 474, 499, 504, 505, 511, 512, 513, 514, 519, 520, 524, 527, 529, 533, 535, 538, 539, 540, 541, 542, 543, 544, 547, 548, 553, 557, 560, 563, 567, 569, 585, 606, 627, 639, 644, 646, 648, 650, 651, 652, 653, 654, 655, 660, 661, 662, 664, 665, 668, 669, 670, 671, 672, 673, 675, 676, 681, 682, 683, 684, 685, 687, 689, 691, 704, 712, 724, 725, 730, 734, 779, 782, 783, 792, 793, 795, 796, 797, 798, 799, 801, 802, 803, 804, 809, 810, 811, 812, 813, 814, 817, 825, 826, 827, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 863, 864, 870, 878, 881, 887, 888, 897, 898, 905, 907, 923, 934, 975, 976, 980, 981, 982, 984, 985, 986, 987, 988, 989, 993, 995, 999, 1002, 1006, 1007, 1009, 1012, 1013, 1014, 1020, 1021, 1022, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "medium": [3, 166, 234, 275, 312, 336, 405, 410, 639, 871, 978, 981], "size": [3, 4, 5, 6, 8, 11, 12, 13, 24, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 55, 57, 58, 60, 61, 62, 66, 67, 73, 78, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 103, 105, 114, 123, 124, 127, 128, 144, 151, 153, 154, 157, 158, 166, 168, 170, 171, 178, 179, 180, 181, 185, 189, 194, 197, 200, 201, 202, 205, 212, 213, 220, 225, 228, 231, 232, 233, 234, 235, 237, 238, 247, 254, 256, 258, 260, 262, 263, 265, 266, 267, 278, 289, 290, 291, 299, 302, 306, 307, 308, 309, 312, 316, 319, 321, 325, 329, 332, 334, 335, 336, 344, 346, 349, 350, 351, 354, 364, 365, 366, 373, 374, 378, 383, 387, 390, 391, 392, 395, 396, 402, 403, 404, 407, 409, 410, 413, 415, 416, 440, 441, 442, 444, 445, 446, 453, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 489, 490, 491, 511, 523, 530, 532, 534, 536, 543, 553, 554, 555, 556, 557, 558, 560, 561, 579, 583, 584, 587, 590, 628, 629, 639, 653, 662, 663, 675, 679, 688, 691, 701, 715, 733, 735, 738, 776, 788, 796, 799, 800, 804, 811, 814, 815, 818, 821, 823, 832, 833, 834, 836, 839, 840, 841, 842, 843, 845, 847, 848, 849, 854, 855, 872, 874, 886, 891, 895, 899, 900, 901, 902, 903, 905, 906, 907, 908, 911, 933, 937, 938, 948, 949, 951, 954, 960, 975, 977, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 992, 995, 997, 999, 1000, 1001, 1009, 1014, 1016, 1018, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1042, 1043], "interact": [3, 125, 166, 199, 225, 230, 261, 316, 377, 379, 380, 382, 384, 390, 392, 393, 406, 555, 556, 557, 558, 628, 629, 872, 876, 974, 977, 981, 982, 983, 990, 992, 995, 1004, 1006, 1029, 1034, 1041, 1042], "user": [3, 25, 55, 69, 95, 117, 160, 166, 169, 187, 220, 235, 250, 257, 267, 269, 278, 283, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 360, 364, 365, 367, 372, 376, 377, 378, 380, 382, 384, 385, 386, 390, 391, 392, 395, 396, 399, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 416, 417, 418, 419, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 930, 934, 974, 975, 981, 982, 984, 985, 986, 988, 995, 999, 1003, 1005, 1006, 1009, 1013, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "interfac": [3, 111, 166, 371, 372, 379, 380, 387, 390, 392, 409, 415, 416, 437, 441, 446, 492, 549, 695, 794, 797, 798, 808, 857, 858, 883, 970, 974, 988, 1000, 1005, 1006, 1009, 1027, 1029, 1032, 1033, 1035, 1036, 1041, 1043], "compress": [3, 11, 15, 48, 166, 278, 305, 373, 405, 410, 413, 414, 648, 668, 688, 827, 870, 956, 959, 981, 995, 1019, 1027, 1036], "sens": [3, 4, 15, 25, 55, 157, 166, 169, 175, 232, 235, 305, 311, 325, 336, 349, 360, 364, 378, 379, 392, 405, 407, 409, 414, 458, 465, 466, 467, 468, 469, 470, 471, 472, 648, 651, 652, 668, 795, 805, 894, 979, 981, 988, 989, 991, 995, 998], "tomographi": [3, 15, 166, 648, 668, 981], "reconstruct": [3, 15, 20, 95, 96, 100, 166, 198, 223, 224, 319, 410, 413, 478, 479, 480, 527, 529, 531, 533, 534, 535, 536, 538, 539, 544, 579, 583, 648, 668, 684, 685, 689, 889, 890, 981, 982, 1041], "l1": [3, 7, 15, 30, 40, 82, 85, 166, 177, 184, 188, 210, 214, 218, 230, 261, 283, 318, 387, 390, 404, 405, 407, 410, 437, 441, 446, 453, 460, 465, 466, 467, 468, 469, 470, 471, 472, 474, 492, 498, 500, 527, 533, 534, 535, 536, 538, 539, 543, 544, 554, 561, 585, 586, 587, 593, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 668, 672, 673, 674, 675, 677, 684, 730, 757, 763, 768, 773, 774, 775, 780, 808, 815, 823, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 869, 877, 884, 897, 898, 904, 906, 908, 920, 967, 981, 983, 985, 988, 995, 999, 1000, 1001, 1018, 1032, 1034, 1040, 1043], "prior": [3, 15, 46, 47, 57, 67, 150, 151, 161, 166, 171, 178, 180, 183, 244, 246, 250, 251, 252, 260, 378, 380, 382, 392, 395, 405, 408, 410, 412, 415, 461, 519, 532, 544, 545, 546, 547, 555, 581, 582, 607, 609, 610, 611, 615, 618, 619, 626, 640, 641, 642, 643, 647, 648, 650, 651, 652, 656, 657, 658, 668, 674, 677, 712, 792, 832, 833, 834, 835, 836, 857, 858, 872, 899, 902, 952, 974, 977, 979, 981, 984, 985, 987, 993, 1001, 1002, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1043], "lasso": [3, 15, 105, 131, 137, 166, 169, 177, 218, 318, 344, 364, 390, 407, 408, 410, 412, 413, 414, 467, 468, 474, 497, 520, 527, 533, 535, 538, 539, 541, 542, 544, 593, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 666, 668, 674, 677, 678, 679, 680, 681, 682, 717, 718, 719, 818, 819, 820, 858, 877, 974, 985, 999, 1007, 1015, 1018, 1022, 1027, 1031, 1032, 1033, 1035, 1036, 1038, 1040, 1041], "recognit": [3, 9, 15, 166, 302, 310, 371, 383, 410, 412, 414, 490, 498, 528, 530, 537, 693, 704, 709, 736, 764, 783, 784, 792, 808, 823, 877, 902, 977, 981, 985, 986, 990, 1000, 1002, 1011, 1014, 1022, 1027], "eigenfac": [3, 15, 166, 373, 410, 490, 537, 693, 709, 808, 823, 877, 902, 1002, 1014, 1027], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 70, 72, 74, 132, 136, 138, 141, 142, 146, 149, 166, 177, 192, 218, 228, 234, 236, 240, 241, 254, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 275, 307, 315, 317, 323, 327, 330, 331, 334, 343, 344, 347, 349, 364, 367, 373, 380, 384, 392, 399, 406, 409, 410, 412, 414, 433, 490, 500, 508, 511, 537, 551, 552, 559, 563, 564, 573, 589, 590, 595, 596, 601, 627, 635, 639, 664, 672, 673, 674, 685, 693, 694, 696, 698, 709, 730, 737, 756, 794, 808, 814, 819, 820, 823, 825, 826, 843, 857, 858, 870, 872, 877, 893, 894, 973, 974, 977, 980, 982, 983, 985, 986, 990, 998, 1000, 1002, 1007, 1011, 1014, 1015, 1016, 1020, 1022, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "imag": [3, 6, 13, 15, 20, 32, 36, 46, 48, 51, 54, 58, 68, 70, 89, 94, 95, 107, 119, 146, 148, 155, 166, 190, 221, 230, 233, 237, 258, 292, 301, 302, 316, 324, 325, 349, 350, 370, 371, 373, 375, 378, 383, 386, 390, 392, 395, 398, 405, 410, 437, 441, 448, 458, 489, 490, 491, 492, 498, 499, 502, 503, 530, 531, 533, 537, 603, 604, 687, 693, 733, 823, 867, 981, 985, 986, 988, 990, 997, 1001, 1005, 1009, 1011, 1016, 1017, 1019, 1020, 1022, 1027, 1030, 1035, 1036, 1040, 1042, 1043], "denois": [3, 15, 94, 107, 166, 410, 492, 531, 533, 537, 580, 583, 823, 867], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 74, 94, 105, 107, 132, 138, 140, 146, 150, 152, 153, 154, 155, 158, 161, 163, 176, 200, 213, 227, 228, 236, 240, 243, 254, 258, 260, 262, 265, 266, 270, 275, 284, 297, 318, 326, 329, 331, 333, 336, 337, 338, 341, 342, 345, 347, 360, 364, 367, 370, 380, 390, 392, 403, 405, 406, 409, 412, 413, 428, 436, 444, 448, 457, 458, 461, 478, 479, 480, 487, 492, 494, 498, 500, 510, 529, 530, 531, 537, 540, 550, 552, 554, 556, 558, 561, 564, 566, 589, 590, 606, 607, 627, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 672, 673, 674, 675, 684, 686, 687, 688, 691, 730, 753, 754, 756, 761, 762, 769, 770, 771, 772, 794, 800, 805, 808, 823, 825, 830, 831, 837, 838, 840, 842, 848, 855, 857, 858, 863, 867, 869, 870, 872, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 906, 908, 974, 980, 981, 982, 985, 986, 988, 991, 998, 999, 1007, 1011, 1015, 1016, 1021, 1022, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "pca": [3, 6, 15, 69, 72, 74, 76, 86, 94, 97, 106, 107, 166, 221, 223, 233, 236, 240, 259, 283, 287, 292, 318, 360, 370, 380, 392, 401, 404, 405, 406, 411, 421, 469, 472, 492, 498, 500, 510, 528, 529, 530, 531, 535, 536, 539, 540, 545, 639, 654, 684, 686, 688, 794, 819, 823, 846, 853, 856, 857, 859, 867, 875, 877, 977, 979, 982, 988, 995, 999, 1001, 1016, 1021, 1022, 1027, 1029, 1030, 1031, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1044], "libsvm": [3, 15, 166, 175, 334, 371, 384, 483, 504, 559, 897, 898, 899, 900, 901, 902, 903, 1000, 1022, 1027, 1029, 1035, 1038, 1041], "gui": [3, 15, 166, 483, 901, 902, 1018, 1027, 1028, 1038], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 56, 58, 61, 69, 71, 76, 78, 82, 86, 94, 95, 107, 110, 111, 114, 116, 120, 122, 123, 124, 126, 128, 130, 131, 134, 135, 137, 138, 140, 142, 144, 149, 154, 155, 157, 158, 159, 160, 164, 167, 168, 172, 173, 179, 181, 185, 189, 190, 192, 194, 195, 196, 200, 201, 203, 205, 207, 211, 212, 214, 215, 216, 218, 228, 231, 236, 245, 247, 248, 249, 252, 254, 255, 256, 258, 261, 263, 265, 266, 268, 269, 273, 274, 276, 278, 281, 283, 285, 286, 287, 289, 292, 296, 306, 309, 311, 312, 315, 317, 319, 320, 321, 324, 325, 333, 335, 336, 337, 338, 339, 341, 342, 344, 346, 350, 351, 355, 356, 357, 360, 367, 370, 372, 373, 381, 384, 392, 394, 396, 401, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 424, 428, 430, 433, 438, 445, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 485, 486, 492, 494, 496, 497, 498, 499, 505, 518, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 584, 585, 587, 589, 590, 593, 598, 602, 605, 606, 607, 611, 623, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 697, 702, 707, 717, 718, 719, 729, 730, 736, 745, 748, 780, 783, 784, 787, 792, 793, 794, 797, 798, 799, 800, 808, 809, 810, 811, 815, 816, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 842, 843, 844, 846, 848, 853, 854, 855, 857, 858, 860, 862, 864, 869, 870, 872, 873, 874, 876, 877, 878, 882, 883, 885, 886, 887, 888, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 975, 977, 978, 979, 982, 983, 986, 988, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1009, 1012, 1014, 1016, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032], "complex": [3, 9, 14, 15, 16, 151, 156, 163, 166, 203, 213, 216, 227, 234, 235, 243, 253, 269, 276, 306, 315, 318, 319, 323, 330, 336, 340, 351, 353, 359, 374, 378, 383, 390, 406, 410, 412, 416, 436, 440, 443, 444, 446, 463, 485, 496, 497, 498, 510, 530, 537, 547, 553, 554, 555, 556, 558, 560, 561, 600, 626, 634, 652, 654, 672, 673, 729, 745, 794, 823, 825, 853, 857, 858, 862, 870, 877, 893, 897, 900, 903, 905, 906, 907, 908, 974, 975, 977, 978, 980, 982, 984, 986, 991, 995, 998, 1006, 1007, 1009, 1022, 1028, 1030, 1036, 1037, 1040], "influenc": [3, 9, 15, 80, 81, 111, 166, 169, 181, 245, 268, 305, 312, 336, 340, 344, 360, 366, 407, 410, 412, 428, 436, 450, 461, 478, 479, 480, 485, 497, 550, 552, 554, 556, 558, 561, 564, 566, 607, 624, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 672, 674, 675, 729, 745, 823, 830, 831, 839, 840, 847, 848, 855, 874, 875, 886, 898, 900, 903, 906, 908, 917, 974, 979, 980, 981, 988, 991, 995, 999, 1000, 1009, 1030, 1035, 1036], "core": [3, 15, 49, 55, 65, 71, 111, 117, 119, 120, 166, 169, 170, 320, 363, 365, 367, 376, 378, 381, 386, 392, 395, 405, 410, 412, 413, 416, 440, 442, 445, 446, 451, 453, 495, 534, 585, 590, 654, 655, 662, 664, 672, 832, 833, 834, 835, 836, 841, 849, 981, 988, 991, 1000, 1003, 1006, 1007, 1009, 1018, 1020, 1022, 1029, 1031, 1032, 1034, 1037, 1041, 1042, 1043], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 35, 45, 71, 72, 73, 88, 93, 98, 111, 113, 115, 117, 118, 119, 120, 122, 125, 129, 136, 141, 144, 145, 146, 147, 148, 150, 161, 169, 170, 175, 177, 191, 192, 199, 207, 218, 227, 229, 233, 238, 241, 243, 248, 253, 257, 258, 259, 260, 261, 269, 275, 276, 278, 284, 285, 291, 293, 296, 297, 298, 303, 307, 324, 330, 331, 332, 336, 339, 342, 344, 345, 347, 348, 350, 351, 352, 360, 364, 366, 367, 371, 372, 373, 375, 380, 383, 387, 391, 392, 400, 403, 405, 406, 409, 410, 413, 414, 422, 433, 465, 471, 478, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 506, 508, 510, 511, 515, 516, 518, 519, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 565, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 605, 606, 607, 609, 610, 618, 627, 628, 629, 639, 654, 655, 662, 664, 670, 671, 672, 693, 699, 701, 704, 708, 709, 711, 712, 714, 721, 722, 724, 725, 729, 730, 733, 736, 737, 738, 749, 751, 753, 754, 756, 777, 778, 779, 781, 782, 783, 784, 789, 791, 794, 795, 797, 798, 799, 800, 808, 812, 813, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 844, 846, 847, 853, 854, 855, 857, 861, 864, 869, 870, 871, 872, 877, 878, 881, 883, 892, 893, 894, 897, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 920, 923, 931, 974, 975, 977, 978, 979, 982, 983, 987, 990, 992, 993, 995, 996, 998, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 57, 60, 62, 64, 70, 80, 81, 117, 122, 172, 179, 193, 194, 228, 232, 239, 240, 245, 247, 253, 266, 267, 271, 276, 288, 291, 293, 299, 307, 318, 323, 325, 330, 343, 352, 354, 364, 366, 367, 370, 371, 372, 378, 383, 390, 392, 403, 405, 406, 408, 409, 410, 412, 415, 443, 445, 464, 483, 484, 485, 495, 499, 504, 517, 532, 540, 560, 611, 621, 648, 654, 662, 664, 670, 672, 693, 699, 701, 703, 709, 713, 724, 732, 788, 790, 794, 808, 823, 832, 834, 836, 839, 844, 857, 858, 860, 861, 869, 893, 894, 895, 897, 909, 910, 911, 931, 974, 977, 981, 983, 985, 986, 987, 989, 992, 995, 997, 999, 1000, 1004, 1006, 1009, 1012, 1022, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "document": [3, 12, 14, 15, 18, 22, 26, 31, 45, 51, 57, 71, 72, 73, 89, 90, 92, 95, 116, 118, 119, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 182, 196, 197, 214, 229, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 301, 302, 311, 316, 319, 320, 326, 328, 341, 344, 351, 352, 358, 364, 365, 366, 367, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 386, 390, 392, 395, 396, 399, 402, 404, 405, 410, 413, 416, 440, 443, 444, 445, 446, 449, 453, 460, 484, 485, 495, 497, 507, 517, 519, 532, 540, 560, 584, 585, 586, 587, 590, 600, 627, 635, 639, 654, 655, 662, 664, 669, 670, 671, 672, 692, 693, 695, 699, 701, 707, 713, 732, 753, 754, 764, 773, 774, 775, 788, 790, 794, 797, 798, 800, 808, 816, 819, 821, 824, 827, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 858, 869, 897, 902, 913, 916, 918, 931, 951, 974, 981, 983, 985, 986, 987, 988, 989, 993, 999, 1002, 1003, 1004, 1009, 1013, 1018, 1020, 1028, 1029, 1033], "outlier": [3, 15, 44, 80, 81, 124, 127, 166, 177, 201, 202, 203, 205, 218, 227, 243, 284, 297, 304, 313, 346, 373, 392, 405, 407, 412, 427, 442, 460, 462, 465, 466, 469, 470, 471, 472, 486, 487, 488, 492, 506, 508, 518, 520, 559, 627, 635, 645, 666, 667, 668, 672, 673, 674, 675, 688, 698, 823, 843, 847, 858, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 900, 901, 903, 985, 999, 1000, 1005, 1007, 1021, 1022, 1027, 1032, 1033, 1035], "detect": [3, 8, 10, 15, 20, 63, 65, 80, 82, 118, 127, 166, 180, 203, 227, 243, 253, 260, 263, 276, 284, 297, 311, 335, 373, 376, 378, 382, 390, 392, 403, 404, 405, 407, 409, 413, 427, 442, 445, 460, 462, 465, 466, 469, 470, 471, 472, 484, 485, 487, 488, 492, 506, 508, 511, 518, 533, 534, 535, 542, 559, 560, 584, 587, 592, 627, 635, 673, 694, 698, 722, 784, 823, 843, 847, 858, 867, 870, 871, 875, 876, 877, 897, 901, 977, 981, 1005, 1006, 1007, 1009, 1015, 1020, 1021, 1022, 1027, 1030, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1043], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 20, 25, 26, 27, 30, 31, 34, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 55, 57, 58, 60, 62, 64, 65, 66, 70, 71, 73, 80, 81, 82, 86, 90, 94, 95, 100, 107, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 137, 144, 145, 148, 151, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 178, 183, 184, 187, 188, 190, 192, 194, 195, 198, 199, 200, 201, 204, 207, 212, 213, 217, 220, 221, 222, 228, 229, 230, 231, 233, 234, 235, 238, 242, 245, 247, 249, 250, 254, 255, 258, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 274, 278, 281, 285, 289, 290, 291, 292, 293, 296, 300, 301, 302, 305, 307, 309, 310, 311, 312, 315, 317, 318, 324, 325, 328, 329, 333, 335, 338, 340, 344, 349, 350, 351, 356, 357, 360, 364, 365, 366, 367, 370, 371, 373, 375, 376, 378, 380, 382, 383, 385, 386, 391, 392, 393, 395, 396, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 429, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 484, 485, 489, 491, 492, 493, 495, 498, 499, 500, 504, 505, 506, 511, 519, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 695, 696, 697, 698, 699, 709, 710, 715, 717, 718, 721, 722, 723, 724, 725, 726, 729, 733, 735, 736, 740, 741, 743, 745, 746, 748, 751, 774, 775, 777, 778, 779, 780, 782, 784, 785, 786, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 917, 918, 928, 929, 934, 938, 941, 942, 953, 954, 955, 956, 959, 960, 966, 969, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1012, 1014, 1015, 1016, 1019, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 56, 58, 62, 70, 71, 72, 73, 75, 85, 106, 109, 110, 111, 113, 114, 115, 117, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 145, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 169, 170, 171, 172, 175, 178, 181, 182, 183, 191, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 208, 213, 214, 216, 217, 228, 229, 231, 233, 235, 237, 246, 247, 248, 249, 250, 251, 253, 254, 258, 260, 262, 263, 266, 269, 270, 274, 276, 278, 281, 286, 289, 290, 291, 294, 295, 302, 305, 306, 310, 311, 315, 316, 317, 318, 319, 321, 325, 327, 328, 329, 332, 333, 335, 336, 340, 342, 343, 344, 345, 349, 350, 355, 356, 357, 358, 360, 363, 365, 367, 370, 373, 375, 378, 380, 385, 387, 392, 394, 396, 399, 400, 401, 403, 404, 405, 406, 410, 412, 413, 414, 422, 428, 433, 434, 435, 436, 438, 439, 440, 443, 444, 445, 461, 465, 478, 479, 480, 483, 497, 504, 520, 530, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 578, 589, 590, 598, 602, 606, 607, 609, 610, 611, 612, 618, 621, 623, 624, 626, 627, 628, 629, 630, 631, 633, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 710, 711, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 729, 730, 733, 736, 737, 738, 741, 743, 745, 747, 751, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 791, 792, 793, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 848, 854, 855, 857, 864, 877, 878, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 959, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 986, 987, 988, 989, 991, 992, 993, 995, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1020, 1022, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "latenc": [3, 7, 15, 122, 166, 363, 520, 561, 668, 674, 823, 877, 903, 950, 959, 1005, 1022, 1030], "speci": [3, 15, 90, 166, 238, 284, 297, 349, 373, 411, 494, 702, 784, 842, 901, 912, 985, 991, 1027], "distribut": [3, 4, 8, 9, 10, 15, 20, 27, 34, 37, 39, 44, 52, 53, 55, 57, 62, 75, 79, 80, 81, 92, 111, 113, 124, 127, 143, 148, 151, 160, 166, 168, 169, 172, 175, 178, 199, 201, 203, 222, 224, 228, 232, 238, 245, 250, 251, 256, 260, 266, 268, 278, 284, 288, 297, 304, 305, 307, 310, 313, 321, 324, 325, 341, 344, 349, 364, 365, 373, 374, 375, 376, 378, 379, 382, 383, 384, 392, 399, 403, 404, 405, 407, 409, 410, 411, 417, 443, 445, 465, 466, 467, 468, 469, 470, 471, 472, 484, 494, 499, 511, 512, 513, 514, 515, 519, 528, 529, 532, 546, 547, 548, 559, 607, 621, 636, 638, 640, 641, 644, 654, 655, 665, 675, 676, 684, 685, 686, 688, 702, 704, 719, 747, 784, 792, 793, 798, 799, 806, 808, 812, 813, 823, 833, 836, 842, 846, 853, 860, 873, 874, 875, 876, 877, 885, 886, 887, 892, 893, 901, 912, 936, 953, 974, 979, 981, 983, 984, 985, 987, 988, 990, 991, 997, 998, 1003, 1005, 1006, 1011, 1015, 1019, 1021, 1022, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "relat": [3, 7, 12, 15, 17, 44, 62, 96, 98, 100, 166, 167, 169, 194, 203, 235, 238, 253, 267, 320, 340, 349, 358, 367, 373, 374, 377, 381, 382, 383, 385, 386, 387, 390, 392, 393, 394, 396, 399, 404, 405, 406, 407, 408, 409, 410, 412, 415, 446, 460, 465, 492, 545, 546, 558, 559, 635, 669, 673, 688, 697, 718, 738, 815, 820, 855, 856, 858, 861, 862, 867, 870, 871, 872, 873, 876, 885, 901, 974, 979, 985, 986, 988, 989, 992, 995, 1000, 1001, 1002, 1003, 1006, 1022, 1027, 1031, 1032, 1033, 1035, 1036, 1039, 1040, 1043], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 20, 25, 26, 27, 30, 33, 36, 42, 58, 60, 63, 68, 69, 70, 71, 72, 76, 80, 81, 86, 89, 90, 91, 92, 95, 97, 99, 103, 104, 106, 110, 117, 120, 126, 130, 131, 132, 134, 135, 143, 145, 149, 151, 152, 153, 156, 157, 159, 163, 164, 167, 168, 169, 170, 173, 177, 182, 183, 185, 186, 188, 195, 199, 200, 201, 203, 204, 208, 214, 215, 216, 218, 227, 230, 232, 235, 238, 241, 242, 243, 253, 257, 260, 266, 267, 269, 270, 274, 276, 281, 286, 291, 292, 294, 298, 301, 303, 304, 305, 308, 312, 313, 314, 316, 319, 320, 321, 331, 332, 333, 336, 340, 344, 347, 348, 351, 352, 355, 357, 358, 360, 367, 370, 371, 372, 373, 374, 375, 376, 380, 381, 383, 385, 386, 387, 390, 391, 392, 393, 394, 395, 399, 403, 405, 407, 408, 409, 410, 411, 415, 416, 417, 418, 421, 426, 428, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 575, 576, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 614, 615, 616, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 693, 697, 698, 699, 709, 717, 718, 719, 736, 753, 754, 758, 759, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 776, 780, 783, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 917, 918, 931, 950, 960, 961, 962, 966, 974, 977, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "engin": [3, 15, 40, 116, 156, 166, 364, 372, 375, 405, 411, 413, 460, 492, 558, 635, 669, 697, 815, 820, 855, 856, 858, 861, 862, 867, 870, 871, 872, 876, 975, 985, 995, 1003, 1033], "topic": [3, 7, 8, 15, 70, 166, 349, 350, 351, 373, 374, 409, 410, 413, 484, 493, 532, 534, 536, 543, 584, 587, 981, 986, 1005, 1006, 1020, 1032, 1034], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 55, 69, 70, 71, 76, 85, 95, 148, 166, 214, 253, 276, 302, 349, 351, 360, 367, 370, 373, 375, 380, 384, 387, 390, 405, 406, 409, 410, 446, 448, 451, 452, 458, 460, 484, 485, 489, 490, 499, 500, 527, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 579, 580, 584, 585, 587, 589, 590, 593, 595, 627, 714, 783, 794, 808, 834, 856, 857, 902, 934, 942, 949, 974, 982, 986, 990, 995, 999, 1005, 1009, 1012, 1016, 1017, 1022, 1027, 1028, 1036, 1039], "neg": [3, 4, 15, 16, 24, 60, 75, 78, 86, 117, 123, 124, 128, 166, 169, 177, 199, 217, 218, 249, 250, 257, 260, 263, 267, 269, 270, 283, 305, 309, 319, 349, 384, 392, 393, 405, 409, 412, 413, 414, 416, 417, 428, 436, 440, 448, 461, 465, 478, 479, 480, 484, 527, 529, 531, 532, 533, 534, 536, 538, 540, 543, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 584, 587, 588, 591, 592, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 673, 674, 675, 676, 683, 694, 695, 700, 701, 708, 709, 711, 714, 715, 717, 718, 719, 722, 724, 725, 726, 730, 733, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 777, 778, 779, 780, 782, 785, 786, 788, 792, 793, 800, 816, 818, 823, 830, 831, 840, 843, 848, 855, 864, 873, 875, 876, 881, 885, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 932, 934, 953, 983, 985, 986, 988, 989, 990, 991, 999, 1000, 1020, 1021, 1022, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 62, 70, 79, 80, 81, 82, 85, 95, 96, 97, 106, 158, 166, 172, 177, 185, 200, 204, 218, 229, 232, 233, 250, 253, 267, 276, 301, 319, 324, 325, 340, 349, 350, 351, 358, 364, 367, 373, 374, 375, 378, 380, 384, 387, 390, 391, 392, 402, 406, 407, 408, 413, 414, 415, 416, 417, 427, 428, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 450, 453, 455, 456, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 488, 492, 493, 496, 497, 498, 499, 500, 501, 504, 505, 506, 515, 517, 519, 520, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 582, 584, 585, 586, 587, 589, 590, 599, 600, 601, 602, 603, 604, 605, 607, 616, 625, 626, 627, 629, 631, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 703, 708, 709, 710, 711, 712, 714, 724, 725, 726, 729, 733, 734, 735, 736, 749, 750, 753, 754, 755, 756, 758, 759, 761, 762, 763, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 782, 783, 787, 788, 791, 792, 793, 794, 797, 798, 808, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 866, 868, 869, 870, 872, 874, 875, 876, 877, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 913, 915, 916, 917, 918, 923, 932, 933, 934, 935, 938, 939, 940, 948, 949, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 971, 975, 977, 979, 981, 982, 986, 987, 988, 989, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1019, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "factor": [3, 15, 26, 31, 44, 46, 53, 55, 62, 94, 100, 105, 107, 129, 166, 169, 225, 228, 238, 271, 272, 283, 284, 297, 299, 300, 305, 307, 317, 319, 364, 365, 378, 384, 387, 392, 402, 404, 405, 412, 413, 415, 436, 438, 450, 465, 467, 468, 469, 470, 472, 474, 484, 500, 510, 511, 523, 528, 531, 532, 534, 536, 537, 540, 541, 542, 543, 545, 546, 557, 558, 559, 584, 587, 593, 609, 645, 646, 647, 650, 651, 652, 678, 679, 688, 715, 778, 794, 797, 798, 819, 843, 877, 891, 893, 901, 933, 934, 974, 981, 982, 988, 995, 998, 1002, 1005, 1021, 1022, 1027, 1028, 1030, 1031, 1033, 1041, 1043], "latent": [3, 15, 17, 106, 166, 302, 350, 408, 413, 415, 484, 528, 532, 534, 535, 536, 539, 540, 584, 587, 853, 984, 1005, 1020, 1021, 1022, 1029, 1032], "dirichlet": [3, 15, 166, 245, 246, 251, 255, 413, 484, 532, 534, 536, 584, 587, 792, 1005, 1021, 1022, 1027, 1032, 1033], "alloc": [3, 15, 25, 61, 166, 272, 317, 374, 378, 379, 405, 413, 439, 443, 455, 484, 532, 534, 536, 580, 584, 587, 642, 648, 656, 658, 797, 798, 800, 816, 821, 824, 974, 995, 1005, 1021, 1022, 1031, 1032, 1037, 1038, 1044], "visual": [3, 4, 9, 15, 16, 20, 25, 30, 32, 43, 46, 49, 52, 57, 60, 61, 80, 91, 94, 97, 99, 105, 107, 117, 125, 127, 129, 133, 134, 159, 164, 166, 170, 172, 183, 190, 199, 201, 217, 225, 227, 230, 233, 239, 240, 243, 250, 253, 254, 256, 257, 261, 270, 276, 288, 292, 293, 298, 300, 303, 305, 309, 310, 315, 317, 325, 340, 367, 370, 374, 376, 384, 385, 402, 407, 409, 410, 411, 412, 434, 437, 441, 442, 450, 468, 492, 498, 500, 503, 506, 510, 518, 528, 530, 537, 560, 562, 567, 627, 629, 654, 685, 688, 693, 694, 696, 697, 698, 714, 722, 777, 784, 795, 796, 799, 800, 811, 812, 813, 814, 815, 816, 823, 854, 858, 862, 866, 867, 869, 873, 874, 875, 877, 899, 902, 911, 930, 980, 982, 983, 988, 989, 991, 992, 995, 1001, 1005, 1011, 1022, 1030, 1037, 1038, 1039, 1041], "stock": [3, 15, 166, 405, 407, 450, 468, 685, 1014], "market": [3, 15, 166, 405, 407, 450, 468, 685, 1009, 1014], "wikipedia": [3, 15, 24, 166, 386, 404, 405, 591, 603, 604, 632, 652, 664, 667, 678, 679, 691, 700, 701, 703, 705, 708, 712, 714, 721, 724, 725, 726, 729, 730, 733, 738, 751, 778, 780, 781, 783, 784, 787, 788, 839, 840, 845, 846, 847, 848, 875, 891, 905, 906, 977, 981, 985, 988, 997, 1001, 1020, 1027, 1034], "princip": [3, 15, 84, 87, 90, 94, 97, 99, 100, 102, 104, 107, 129, 166, 220, 233, 236, 292, 310, 317, 370, 405, 408, 417, 480, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 546, 653, 684, 685, 686, 688, 689, 823, 846, 858, 877, 933, 934, 982, 988, 1021, 1022, 1027], "eigenvector": [3, 15, 46, 86, 90, 166, 245, 405, 448, 458, 530, 531, 537, 546, 684, 685, 687, 691, 982, 1027, 1031, 1041], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 376, 378, 380, 382, 390, 392, 393, 395, 396, 402, 405, 406, 408, 412, 446, 452, 464, 484, 485, 504, 505, 533, 542, 553, 554, 555, 556, 560, 561, 562, 641, 642, 643, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 677, 678, 679, 680, 794, 797, 798, 808, 815, 818, 855, 857, 895, 905, 906, 907, 908, 938, 939, 969, 974, 981, 982, 984, 985, 995, 997, 999, 1005, 1009, 1017, 1020, 1032, 1034, 1037, 1040, 1041], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 371, 373, 375, 376, 382, 383, 386, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 506, 1001, 1016, 1018, 1020, 1022, 1031, 1032, 1035, 1039, 1040, 1041], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 364, 365, 367, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 391, 392, 395, 398, 399, 404, 416, 417, 421, 435, 452, 457, 467, 481, 503, 504, 527, 543, 551, 568, 569, 573, 579, 588, 591, 592, 594, 597, 599, 608, 612, 616, 617, 620, 625, 634, 638, 646, 647, 650, 656, 657, 659, 663, 671, 695, 704, 711, 717, 718, 719, 721, 723, 725, 726, 734, 738, 739, 741, 742, 746, 749, 751, 758, 759, 763, 764, 766, 768, 776, 778, 785, 786, 789, 791, 801, 802, 803, 804, 805, 806, 807, 829, 831, 833, 837, 838, 847, 848, 849, 851, 859, 860, 863, 865, 868, 879, 885, 889, 892, 898, 907, 908, 909, 910, 923, 932, 934, 936, 937, 939, 947, 948, 949, 953, 956, 973, 975, 983, 1006, 1007, 1009, 1012, 1015, 1016, 1020, 1022, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1040, 1042, 1043], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 376, 378, 379, 380, 382, 383, 384, 385, 386, 390, 392, 393, 395, 401, 405, 407, 409, 412, 415, 416, 417, 433, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 458, 460, 463, 464, 467, 468, 527, 528, 529, 530, 531, 533, 535, 537, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 578, 588, 590, 591, 592, 594, 595, 596, 598, 606, 607, 630, 636, 642, 643, 645, 647, 648, 649, 651, 652, 656, 657, 658, 659, 678, 679, 684, 685, 686, 687, 688, 689, 690, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 829, 830, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 854, 855, 856, 859, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 928, 929, 953, 956, 959, 974, 984, 986, 989, 998, 1000, 1001, 1005, 1006, 1009, 1011, 1018, 1020, 1027, 1030, 1032, 1034, 1035, 1036, 1037, 1041, 1042, 1043], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 372, 376, 377, 378, 379, 381, 382, 384, 386, 387, 390, 391, 392, 395, 399, 401, 404, 405, 406, 407, 412, 413, 416, 417, 440, 442, 499, 529, 557, 558, 598, 630, 642, 683, 794, 797, 798, 800, 808, 816, 820, 822, 928, 982, 989, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1013, 1020, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 378, 386, 995, 1044], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 379, 380, 384, 406, 464, 895, 1001, 1004, 1005, 1006, 1038, 1041], "introduc": [4, 78, 80, 81, 100, 147, 166, 171, 178, 183, 203, 227, 232, 235, 238, 243, 267, 320, 321, 351, 371, 374, 376, 378, 380, 382, 383, 386, 390, 392, 396, 403, 405, 407, 409, 410, 412, 413, 429, 437, 438, 439, 441, 443, 445, 455, 460, 464, 478, 479, 480, 481, 492, 500, 511, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 551, 552, 562, 563, 564, 565, 566, 577, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 654, 660, 681, 682, 684, 685, 688, 823, 841, 846, 849, 853, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 891, 895, 979, 981, 984, 987, 988, 991, 995, 997, 999, 1000, 1011, 1018, 1027, 1028, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 20, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 57, 58, 64, 65, 66, 67, 68, 70, 71, 72, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 103, 104, 105, 111, 114, 116, 117, 120, 121, 124, 126, 131, 132, 133, 134, 137, 140, 143, 148, 150, 151, 152, 153, 156, 157, 158, 161, 163, 164, 166, 168, 169, 171, 175, 178, 179, 185, 186, 187, 188, 190, 196, 199, 200, 201, 203, 204, 205, 206, 207, 217, 220, 221, 222, 225, 228, 230, 233, 234, 235, 238, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 274, 275, 278, 283, 286, 289, 290, 292, 299, 300, 304, 309, 310, 313, 315, 331, 335, 336, 344, 345, 347, 349, 350, 351, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 381, 383, 385, 387, 391, 392, 395, 399, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 430, 433, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 454, 455, 458, 460, 471, 474, 486, 489, 490, 492, 499, 500, 504, 505, 508, 510, 518, 533, 534, 535, 536, 542, 543, 545, 546, 551, 552, 559, 577, 578, 584, 585, 586, 587, 590, 607, 609, 610, 611, 615, 618, 619, 623, 627, 628, 629, 630, 634, 639, 640, 643, 645, 647, 649, 651, 654, 657, 662, 663, 664, 668, 670, 672, 673, 674, 676, 686, 688, 690, 694, 696, 697, 700, 701, 702, 703, 705, 711, 713, 714, 722, 723, 724, 725, 726, 729, 730, 732, 738, 752, 753, 754, 756, 763, 773, 777, 778, 779, 781, 782, 784, 787, 788, 790, 793, 794, 796, 797, 798, 799, 800, 803, 808, 809, 810, 811, 812, 813, 814, 816, 818, 820, 821, 824, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 847, 850, 853, 857, 862, 866, 867, 869, 870, 871, 872, 873, 874, 875, 877, 878, 882, 883, 884, 885, 886, 887, 888, 897, 898, 899, 902, 905, 906, 907, 908, 942, 949, 974, 975, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 998, 999, 1000, 1001, 1002, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1019, 1020, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "strategi": [4, 52, 54, 58, 61, 71, 121, 126, 131, 147, 163, 164, 166, 171, 183, 188, 199, 207, 217, 230, 238, 240, 253, 261, 263, 265, 269, 270, 276, 298, 303, 304, 311, 312, 313, 315, 316, 319, 351, 363, 380, 384, 391, 392, 409, 412, 413, 414, 417, 433, 434, 435, 443, 448, 458, 468, 498, 500, 508, 510, 518, 529, 534, 547, 548, 557, 558, 563, 564, 567, 584, 585, 587, 588, 590, 598, 623, 624, 626, 630, 641, 643, 647, 649, 651, 657, 659, 661, 669, 671, 687, 691, 700, 709, 750, 752, 790, 794, 797, 798, 800, 808, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 854, 862, 867, 878, 892, 897, 899, 902, 905, 906, 907, 908, 956, 974, 975, 984, 986, 987, 988, 989, 991, 993, 995, 999, 1000, 1001, 1005, 1015, 1020, 1022, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "leverag": [4, 8, 37, 49, 86, 217, 349, 350, 364, 365, 376, 409, 412, 872, 974, 981, 1011, 1030, 1042], "task": [4, 7, 98, 118, 119, 125, 146, 147, 159, 166, 177, 199, 215, 218, 220, 238, 257, 340, 351, 364, 366, 373, 375, 376, 377, 378, 382, 383, 384, 387, 390, 391, 392, 410, 412, 413, 414, 415, 444, 457, 489, 501, 511, 588, 591, 592, 594, 595, 596, 600, 601, 602, 605, 628, 629, 642, 643, 648, 649, 656, 657, 658, 659, 670, 677, 680, 722, 724, 725, 749, 777, 779, 782, 784, 795, 799, 812, 817, 951, 952, 982, 985, 986, 987, 988, 996, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1018, 1019, 1020, 1022, 1027, 1032, 1036, 1042], "highli": [4, 9, 72, 80, 81, 97, 106, 127, 183, 194, 204, 260, 263, 269, 300, 340, 350, 364, 365, 378, 380, 384, 403, 405, 409, 412, 413, 448, 458, 492, 559, 667, 688, 806, 808, 853, 981, 985, 988, 989, 991, 999, 1000, 1004, 1005], "depend": [4, 5, 7, 37, 53, 75, 99, 117, 121, 124, 125, 128, 131, 143, 147, 157, 163, 166, 167, 169, 172, 173, 175, 179, 183, 217, 221, 227, 228, 234, 238, 243, 250, 260, 261, 265, 266, 267, 283, 300, 305, 310, 317, 320, 333, 340, 344, 350, 351, 360, 364, 365, 366, 371, 378, 380, 381, 386, 387, 390, 391, 392, 393, 394, 395, 398, 399, 401, 404, 405, 407, 409, 410, 412, 413, 414, 415, 416, 434, 435, 436, 440, 442, 443, 445, 446, 448, 450, 453, 455, 456, 458, 460, 465, 480, 485, 486, 487, 489, 492, 496, 497, 498, 500, 501, 506, 530, 531, 537, 540, 547, 555, 556, 558, 584, 585, 586, 587, 598, 600, 603, 604, 607, 623, 628, 629, 634, 636, 644, 654, 655, 665, 667, 669, 672, 673, 674, 676, 683, 686, 687, 690, 691, 724, 736, 773, 776, 787, 788, 792, 793, 813, 822, 839, 840, 841, 843, 845, 846, 847, 848, 849, 855, 856, 858, 870, 871, 874, 877, 891, 898, 899, 902, 906, 915, 974, 975, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 990, 993, 997, 999, 1000, 1001, 1011, 1018, 1020, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1042, 1043, 1044], "busi": [4, 199, 260, 386, 390, 783, 981, 985, 1009], "dai": [4, 12, 156, 170, 200, 365, 375, 378, 876, 1009, 1033, 1034, 1041, 1042], "week": [4, 377, 378, 393, 1009, 1041], "yearli": 4, "season": [4, 156, 170, 200, 377], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 57, 58, 62, 64, 66, 67, 68, 70, 71, 74, 78, 86, 98, 105, 109, 111, 117, 119, 121, 123, 125, 126, 130, 131, 137, 147, 148, 152, 163, 164, 166, 169, 170, 171, 172, 175, 183, 188, 199, 201, 203, 205, 206, 207, 216, 217, 221, 222, 224, 228, 233, 236, 238, 247, 250, 253, 255, 256, 257, 258, 260, 261, 262, 265, 266, 268, 269, 271, 273, 275, 276, 278, 281, 283, 296, 302, 305, 307, 309, 311, 312, 315, 321, 323, 330, 336, 339, 340, 342, 344, 349, 351, 360, 363, 365, 366, 373, 375, 380, 381, 382, 384, 386, 387, 390, 391, 392, 394, 396, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 423, 427, 436, 438, 439, 440, 442, 443, 444, 446, 448, 450, 451, 455, 457, 464, 465, 478, 479, 480, 481, 490, 498, 508, 511, 527, 528, 529, 531, 533, 535, 538, 539, 540, 541, 542, 544, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 590, 597, 598, 599, 606, 607, 623, 626, 627, 634, 636, 641, 647, 650, 651, 652, 654, 660, 661, 662, 663, 664, 666, 669, 671, 672, 673, 674, 678, 679, 681, 683, 685, 686, 689, 690, 693, 699, 700, 701, 703, 704, 708, 709, 721, 724, 725, 733, 735, 737, 750, 751, 752, 773, 778, 779, 781, 782, 783, 789, 790, 791, 792, 793, 794, 797, 798, 805, 806, 808, 812, 818, 819, 820, 822, 823, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 844, 846, 852, 853, 854, 855, 857, 858, 860, 863, 864, 866, 867, 869, 870, 871, 873, 874, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 958, 969, 974, 975, 977, 979, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1012, 1015, 1018, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 364, 365, 366, 367, 371, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 390, 391, 392, 394, 395, 396, 399, 401, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 55, 58, 62, 70, 71, 72, 73, 75, 86, 95, 106, 116, 121, 144, 148, 156, 160, 171, 175, 178, 180, 187, 188, 190, 199, 200, 205, 215, 217, 221, 229, 230, 239, 242, 257, 267, 269, 274, 286, 291, 292, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 328, 336, 339, 350, 366, 367, 370, 372, 375, 378, 383, 391, 392, 401, 402, 405, 406, 409, 412, 413, 414, 460, 461, 462, 463, 485, 563, 577, 578, 584, 585, 587, 626, 654, 655, 668, 670, 672, 674, 683, 826, 857, 858, 897, 898, 899, 900, 902, 903, 975, 981, 986, 989, 996, 999, 1000, 1002, 1005, 1008, 1009, 1011, 1016, 1017, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "splinetransform": [4, 200, 238, 318, 872, 995, 1040, 1042, 1043], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 56, 58, 71, 72, 90, 91, 92, 100, 104, 109, 110, 117, 119, 127, 132, 135, 148, 151, 152, 155, 159, 160, 163, 166, 169, 170, 175, 177, 189, 190, 191, 207, 211, 214, 215, 218, 221, 228, 235, 236, 238, 245, 246, 247, 253, 254, 255, 260, 262, 266, 270, 271, 276, 278, 281, 283, 286, 288, 291, 292, 293, 294, 310, 315, 319, 321, 324, 326, 327, 331, 332, 336, 337, 340, 345, 347, 349, 350, 351, 358, 366, 367, 370, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 395, 401, 403, 405, 406, 408, 410, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 496, 498, 499, 500, 504, 505, 506, 508, 510, 511, 515, 518, 519, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 716, 722, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 737, 738, 749, 750, 752, 777, 778, 779, 781, 782, 783, 784, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 922, 923, 924, 925, 926, 928, 929, 941, 942, 943, 946, 951, 953, 955, 956, 969, 974, 975, 976, 977, 979, 980, 981, 982, 984, 986, 987, 989, 992, 993, 995, 996, 998, 1001, 1006, 1007, 1009, 1011, 1015, 1018, 1020, 1022, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "extrapol": [4, 151, 178, 200, 231, 263, 876, 985, 995, 1001, 1040, 1042], "option": [4, 30, 46, 52, 103, 117, 125, 157, 164, 180, 183, 200, 238, 263, 269, 316, 349, 354, 360, 366, 372, 373, 374, 376, 378, 379, 381, 383, 384, 386, 387, 390, 392, 393, 395, 399, 405, 406, 408, 409, 410, 412, 413, 416, 429, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 455, 457, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 624, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 683, 684, 685, 686, 688, 690, 691, 707, 709, 713, 724, 725, 730, 731, 732, 752, 753, 754, 759, 761, 762, 766, 769, 770, 771, 772, 773, 776, 778, 779, 782, 787, 788, 790, 795, 796, 797, 798, 800, 801, 803, 812, 816, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 924, 971, 974, 975, 981, 984, 985, 988, 995, 998, 1000, 1001, 1006, 1008, 1018, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 71, 72, 89, 95, 106, 116, 118, 120, 127, 128, 131, 132, 134, 145, 146, 156, 169, 170, 175, 180, 195, 196, 199, 207, 215, 230, 231, 235, 237, 238, 239, 240, 242, 250, 256, 258, 260, 265, 267, 272, 278, 281, 283, 287, 292, 300, 301, 302, 316, 317, 319, 320, 326, 327, 328, 355, 358, 364, 367, 370, 373, 375, 381, 384, 391, 399, 404, 408, 409, 410, 412, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 528, 530, 539, 837, 838, 934, 995, 1006, 1012, 1014, 1016, 1022, 1027, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "openml": [4, 71, 131, 156, 169, 199, 207, 215, 217, 229, 278, 281, 301, 371, 395, 492, 1022, 1035, 1037, 1040], "repositori": [4, 8, 175, 321, 371, 373, 375, 376, 378, 380, 382, 386, 393, 395, 500, 1005, 1008, 1022], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 372, 373, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 484, 491, 492, 496, 498, 499, 500, 502, 503, 504, 506, 508, 511, 517, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 575, 576, 577, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 684, 685, 686, 687, 688, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 711, 713, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 729, 730, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 758, 759, 763, 764, 766, 768, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 885, 886, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 924, 929, 932, 934, 936, 937, 938, 939, 946, 947, 948, 949, 953, 956, 959, 973, 974, 975, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1009, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "fetch_openml": [4, 5, 71, 75, 121, 131, 156, 169, 170, 171, 199, 207, 215, 217, 229, 238, 242, 278, 281, 283, 301, 311, 315, 319, 372, 382, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "bike_shar": 4, "bike_sharing_demand": [4, 170], "version": [4, 46, 53, 55, 71, 95, 100, 111, 153, 164, 170, 171, 175, 183, 197, 200, 201, 207, 213, 215, 235, 238, 242, 281, 301, 310, 315, 316, 317, 318, 320, 321, 336, 349, 364, 367, 373, 377, 378, 379, 380, 381, 384, 386, 387, 390, 392, 393, 395, 398, 399, 404, 405, 406, 408, 410, 412, 413, 415, 416, 417, 423, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 500, 501, 504, 505, 506, 508, 510, 518, 519, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 700, 703, 704, 709, 710, 714, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 734, 735, 736, 737, 738, 741, 745, 746, 748, 749, 751, 752, 753, 754, 756, 761, 762, 763, 764, 773, 777, 778, 779, 780, 782, 784, 785, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 807, 808, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 885, 886, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 915, 917, 918, 928, 929, 931, 933, 934, 941, 942, 943, 944, 945, 948, 951, 952, 953, 955, 960, 966, 971, 972, 974, 977, 979, 982, 985, 987, 989, 991, 993, 998, 999, 1001, 1003, 1005, 1006, 1008, 1019, 1023, 1025], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 137, 140, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 372, 373, 375, 376, 378, 380, 382, 383, 384, 385, 387, 390, 391, 392, 395, 396, 397, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 455, 456, 458, 459, 460, 461, 464, 465, 467, 468, 469, 470, 471, 474, 478, 479, 480, 481, 489, 492, 496, 497, 500, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 577, 578, 580, 581, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 599, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 701, 702, 703, 704, 709, 711, 712, 713, 714, 717, 718, 719, 720, 721, 723, 724, 725, 726, 729, 730, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 758, 759, 763, 764, 766, 768, 771, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 881, 885, 890, 891, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 912, 917, 918, 923, 931, 932, 933, 934, 936, 937, 938, 939, 946, 947, 948, 949, 950, 951, 953, 956, 958, 959, 972, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1029, 1031, 1032], "as_fram": [4, 5, 71, 75, 117, 121, 131, 156, 169, 170, 171, 172, 187, 188, 199, 207, 215, 217, 238, 242, 278, 283, 286, 301, 310, 311, 315, 317, 319, 320, 372, 373, 485, 486, 487, 488, 492, 496, 497, 498, 500, 501, 506, 1037, 1038, 1039, 1040, 1043], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 55, 57, 58, 60, 63, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 92, 95, 96, 97, 98, 100, 106, 109, 111, 115, 117, 121, 122, 123, 124, 126, 127, 128, 131, 132, 134, 137, 138, 139, 144, 147, 151, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 199, 201, 202, 203, 206, 207, 213, 214, 215, 217, 220, 223, 224, 228, 229, 232, 234, 235, 236, 237, 238, 241, 242, 245, 248, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 292, 296, 299, 300, 301, 302, 306, 310, 311, 312, 315, 317, 319, 320, 321, 325, 327, 328, 329, 339, 343, 344, 345, 349, 350, 351, 354, 355, 358, 360, 364, 365, 371, 373, 374, 378, 379, 380, 383, 384, 385, 387, 391, 392, 394, 396, 399, 401, 402, 403, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 418, 419, 422, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 457, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 515, 518, 519, 520, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 708, 709, 710, 711, 714, 716, 719, 721, 722, 723, 724, 725, 726, 729, 730, 733, 734, 735, 736, 737, 738, 745, 746, 747, 749, 751, 756, 762, 763, 764, 773, 777, 778, 779, 780, 781, 782, 783, 784, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 808, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 915, 916, 917, 918, 928, 934, 935, 946, 947, 950, 951, 955, 956, 958, 966, 971, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 997, 998, 999, 1000, 1001, 1005, 1011, 1015, 1016, 1018, 1019, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "parser": [4, 5, 8, 71, 75, 121, 131, 156, 169, 170, 171, 199, 207, 215, 217, 229, 238, 242, 278, 281, 283, 301, 311, 315, 319, 492, 1042, 1043], "panda": [4, 5, 12, 25, 70, 71, 72, 73, 75, 111, 117, 118, 121, 124, 128, 131, 156, 163, 168, 169, 170, 171, 172, 178, 183, 188, 199, 203, 207, 215, 217, 229, 238, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 281, 283, 301, 310, 311, 312, 315, 318, 319, 344, 349, 350, 372, 373, 376, 377, 378, 380, 381, 392, 395, 398, 406, 429, 438, 439, 441, 443, 445, 460, 462, 464, 478, 479, 480, 481, 485, 486, 487, 488, 492, 496, 497, 498, 500, 501, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 628, 629, 631, 634, 635, 636, 637, 638, 684, 685, 688, 794, 797, 798, 808, 823, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 895, 913, 974, 975, 995, 1005, 1006, 1020, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "df": [4, 25, 27, 131, 168, 170, 178, 183, 199, 217, 250, 260, 309, 311, 350, 383, 413, 586, 587, 974, 975, 1044], "frame": [4, 16, 71, 156, 169, 170, 199, 311, 373, 378, 390, 393, 485, 486, 487, 488, 492, 496, 497, 498, 500, 501, 506, 1005, 1016, 1039], "To": [4, 8, 16, 26, 27, 32, 46, 55, 57, 78, 80, 82, 86, 100, 111, 121, 124, 125, 133, 137, 148, 156, 157, 160, 163, 164, 168, 169, 175, 180, 183, 187, 199, 200, 201, 203, 207, 217, 232, 233, 235, 238, 240, 242, 250, 255, 257, 258, 260, 262, 263, 265, 267, 278, 281, 301, 305, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 346, 350, 354, 360, 364, 365, 371, 372, 376, 378, 379, 380, 382, 383, 384, 386, 390, 392, 393, 396, 399, 401, 402, 405, 406, 407, 408, 409, 410, 412, 413, 442, 444, 445, 446, 457, 460, 463, 488, 492, 498, 499, 503, 504, 527, 533, 534, 535, 537, 539, 540, 541, 542, 553, 554, 555, 556, 560, 561, 565, 593, 607, 623, 628, 642, 643, 648, 649, 652, 654, 655, 656, 657, 658, 659, 680, 696, 708, 723, 758, 780, 788, 797, 798, 819, 826, 857, 868, 873, 887, 888, 897, 898, 905, 906, 907, 908, 924, 934, 953, 972, 974, 975, 980, 981, 982, 983, 985, 986, 987, 988, 991, 992, 995, 999, 1000, 1001, 1008, 1009, 1011, 1015, 1017, 1018, 1020, 1027, 1030, 1032, 1033, 1034, 1036, 1038], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 56, 96, 100, 124, 133, 145, 148, 151, 156, 157, 163, 169, 170, 171, 172, 192, 201, 214, 217, 220, 236, 258, 261, 262, 264, 268, 271, 278, 281, 283, 288, 296, 306, 315, 325, 328, 333, 336, 338, 341, 346, 349, 351, 354, 365, 367, 371, 372, 373, 376, 378, 379, 380, 383, 384, 385, 386, 392, 395, 399, 401, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 419, 420, 421, 426, 428, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 458, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 691, 695, 717, 718, 719, 721, 727, 728, 737, 751, 758, 759, 764, 780, 783, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 925, 926, 927, 933, 934, 944, 974, 980, 981, 982, 984, 985, 995, 998, 999, 1000, 1001, 1006, 1008, 1015, 1018, 1019, 1020, 1024, 1027, 1030, 1033, 1035, 1038, 1040, 1041, 1044], "quick": [4, 100, 241, 378, 380, 384, 395, 602, 823, 985, 986, 995, 1009, 1018, 1024], "understand": [4, 9, 111, 156, 166, 170, 235, 255, 258, 317, 318, 333, 340, 349, 353, 359, 360, 377, 378, 379, 384, 390, 394, 405, 412, 413, 500, 823, 854, 855, 905, 906, 907, 908, 911, 974, 975, 982, 984, 1001, 1004, 1005, 1009, 1027, 1041], "pattern": [4, 16, 20, 63, 82, 90, 94, 107, 151, 163, 166, 170, 183, 203, 235, 238, 318, 349, 350, 351, 360, 375, 378, 380, 393, 402, 405, 406, 410, 412, 413, 444, 460, 462, 500, 528, 530, 537, 551, 552, 634, 704, 720, 736, 764, 783, 784, 792, 877, 977, 979, 981, 985, 986, 992, 1000, 1002, 1006, 1009, 1039], "let": [4, 5, 53, 55, 64, 71, 75, 90, 95, 100, 118, 121, 124, 125, 128, 151, 157, 158, 164, 169, 170, 171, 180, 188, 199, 201, 217, 220, 224, 235, 242, 255, 260, 263, 267, 349, 351, 358, 360, 373, 378, 380, 384, 390, 402, 405, 409, 412, 413, 496, 500, 506, 530, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 677, 680, 863, 870, 871, 981, 982, 983, 984, 985, 992, 993, 995, 1000, 1001, 1009, 1018, 1020, 1037], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 56, 90, 95, 103, 121, 122, 151, 160, 168, 169, 170, 196, 200, 203, 207, 217, 221, 224, 232, 235, 241, 242, 246, 247, 251, 255, 260, 263, 267, 309, 311, 340, 349, 358, 365, 367, 373, 378, 382, 384, 386, 390, 395, 402, 405, 408, 410, 412, 413, 428, 459, 461, 478, 479, 480, 527, 533, 541, 542, 546, 548, 550, 552, 554, 556, 558, 561, 564, 566, 584, 585, 587, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 677, 680, 685, 689, 700, 716, 735, 750, 830, 831, 840, 848, 855, 877, 891, 898, 900, 903, 906, 908, 934, 979, 984, 985, 992, 995, 1003, 1009, 1020, 1024, 1037], "look": [4, 5, 53, 55, 95, 98, 100, 124, 125, 151, 156, 157, 164, 169, 170, 201, 220, 224, 228, 235, 251, 255, 260, 262, 301, 349, 350, 360, 365, 366, 372, 373, 376, 378, 380, 382, 384, 386, 390, 391, 405, 408, 410, 411, 412, 413, 444, 484, 485, 553, 554, 555, 556, 560, 561, 598, 599, 627, 655, 688, 877, 905, 906, 907, 908, 981, 982, 995, 999, 1000, 1002, 1020, 1027, 1035, 1037], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 60, 62, 114, 115, 120, 124, 127, 132, 133, 134, 148, 156, 170, 180, 188, 199, 206, 217, 238, 263, 265, 268, 270, 281, 305, 315, 321, 328, 349, 360, 364, 373, 375, 380, 402, 403, 407, 409, 413, 414, 416, 417, 433, 434, 437, 440, 441, 442, 443, 445, 486, 489, 490, 519, 527, 528, 529, 533, 534, 536, 537, 543, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 583, 590, 628, 629, 644, 654, 655, 662, 663, 665, 668, 670, 672, 673, 674, 676, 683, 696, 699, 700, 702, 703, 704, 709, 716, 717, 718, 720, 721, 723, 724, 725, 729, 730, 731, 733, 734, 735, 738, 740, 741, 743, 745, 746, 748, 751, 759, 776, 777, 778, 779, 780, 782, 783, 785, 786, 790, 791, 792, 793, 821, 843, 863, 878, 971, 975, 980, 981, 986, 989, 991, 992, 999, 1000, 1001, 1018, 1020, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "per": [4, 10, 20, 34, 48, 53, 64, 91, 116, 117, 121, 156, 158, 169, 170, 199, 214, 217, 238, 242, 246, 256, 267, 269, 305, 311, 317, 344, 349, 351, 364, 373, 374, 378, 383, 384, 387, 390, 392, 403, 405, 409, 410, 411, 412, 413, 415, 442, 444, 446, 453, 457, 460, 464, 483, 496, 498, 499, 500, 504, 506, 508, 511, 519, 528, 530, 531, 532, 535, 537, 539, 545, 546, 557, 558, 565, 579, 584, 587, 606, 607, 628, 629, 637, 638, 654, 655, 662, 663, 664, 667, 669, 670, 671, 672, 674, 688, 692, 709, 712, 716, 736, 749, 753, 754, 776, 778, 792, 793, 818, 825, 826, 827, 829, 830, 833, 835, 853, 856, 862, 864, 866, 867, 870, 871, 877, 878, 895, 897, 898, 899, 900, 901, 902, 903, 922, 923, 934, 960, 974, 977, 981, 984, 985, 986, 989, 992, 999, 1000, 1001, 1005, 1006, 1018, 1020, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1043, 1044], "hour": [4, 169, 170, 378, 384, 982, 1004], "sundai": 4, "weekend": 4, "clearli": [4, 60, 98, 170, 233, 340, 377, 378, 390, 392, 410, 412, 986, 992], "distinguish": [4, 20, 40, 80, 92, 100, 201, 257, 278, 373, 380, 392, 393, 415, 974, 985, 988, 991], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 75, 86, 98, 117, 124, 157, 169, 170, 171, 188, 199, 200, 207, 217, 224, 225, 234, 246, 266, 278, 305, 307, 309, 310, 329, 344, 349, 350, 351, 360, 366, 373, 377, 378, 379, 380, 382, 383, 386, 390, 392, 403, 404, 405, 406, 407, 409, 410, 412, 413, 415, 437, 439, 441, 442, 443, 444, 445, 455, 457, 528, 531, 553, 554, 555, 556, 560, 561, 578, 585, 590, 623, 624, 626, 635, 654, 655, 691, 696, 701, 708, 738, 756, 762, 769, 773, 776, 781, 783, 820, 857, 858, 889, 890, 905, 906, 907, 908, 934, 954, 974, 975, 977, 979, 981, 984, 985, 988, 990, 991, 993, 995, 997, 999, 1000, 1001, 1009, 1020, 1034, 1035, 1036, 1039, 1041], "leisur": 4, "spread": [4, 40, 222, 261, 305, 324, 325, 326, 329, 344, 364, 378, 405, 448, 458, 511, 874, 886, 894, 985], "peak": [4, 27, 170, 403, 409, 1041], "middl": [4, 24, 34, 60, 100, 183, 345, 375, 992, 995], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 372, 381, 385, 395, 398, 434, 498, 627, 628, 693, 694, 696, 697, 698, 800, 816, 911, 980, 1005, 1014, 1016, 1017, 1018, 1024, 1036, 1039, 1040, 1041, 1042], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 378, 385, 434, 498, 627, 628, 693, 694, 696, 697, 698, 800, 816, 1016, 1017, 1018, 1024, 1041], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 385, 434, 498, 627, 628, 693, 694, 696, 697, 698, 800, 816, 911, 992, 1016, 1017, 1018, 1024], "fig": [4, 5, 7, 8, 9, 10, 14, 25, 27, 30, 34, 42, 43, 45, 53, 55, 57, 60, 64, 66, 73, 78, 80, 86, 90, 95, 100, 101, 102, 106, 111, 117, 118, 121, 124, 125, 128, 129, 131, 133, 154, 160, 163, 170, 172, 175, 179, 187, 190, 193, 194, 196, 197, 199, 200, 203, 207, 212, 214, 217, 220, 221, 222, 223, 224, 225, 229, 231, 238, 239, 250, 255, 256, 257, 260, 261, 262, 263, 266, 269, 270, 271, 281, 283, 285, 287, 288, 296, 300, 301, 305, 306, 307, 309, 310, 311, 315, 319, 320, 333, 340, 343, 344, 345, 346, 349, 350, 351, 354, 385, 1016], "ax": [4, 5, 7, 8, 9, 10, 12, 14, 16, 25, 27, 30, 31, 32, 34, 40, 42, 43, 45, 53, 55, 56, 57, 64, 66, 72, 73, 75, 80, 82, 86, 90, 92, 95, 101, 102, 106, 111, 113, 116, 118, 121, 128, 129, 131, 132, 133, 154, 155, 160, 163, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 188, 190, 191, 194, 196, 197, 199, 200, 201, 203, 204, 207, 208, 210, 212, 213, 214, 217, 220, 221, 222, 223, 224, 225, 229, 234, 238, 239, 241, 245, 247, 250, 255, 256, 257, 260, 262, 263, 264, 266, 267, 269, 270, 271, 272, 274, 278, 281, 283, 285, 286, 287, 288, 291, 293, 294, 299, 300, 301, 305, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 332, 333, 334, 335, 337, 338, 340, 343, 344, 345, 346, 349, 350, 351, 354, 355, 380, 381, 410, 415, 434, 530, 537, 546, 627, 628, 693, 694, 696, 697, 698, 714, 800, 816, 911, 985, 988, 992, 1024, 1037, 1043], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 57, 60, 62, 65, 66, 73, 75, 79, 80, 81, 82, 85, 86, 90, 91, 92, 95, 96, 97, 98, 100, 105, 106, 111, 113, 114, 116, 117, 118, 120, 121, 125, 128, 129, 131, 132, 133, 143, 153, 155, 160, 163, 164, 169, 170, 172, 175, 179, 182, 190, 191, 193, 194, 197, 198, 199, 200, 201, 203, 207, 212, 213, 215, 217, 220, 221, 224, 225, 228, 229, 231, 233, 234, 236, 237, 238, 239, 245, 246, 247, 248, 250, 251, 255, 256, 257, 260, 262, 263, 265, 266, 267, 269, 270, 271, 273, 274, 281, 283, 285, 286, 287, 288, 291, 292, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 315, 319, 320, 327, 329, 333, 334, 335, 336, 340, 343, 344, 345, 346, 349, 350, 351, 354, 355, 385, 1016], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 62, 64, 65, 66, 73, 75, 80, 82, 85, 86, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 111, 113, 114, 121, 122, 123, 124, 125, 129, 131, 132, 143, 153, 155, 159, 160, 163, 164, 169, 170, 172, 175, 178, 179, 182, 183, 189, 193, 196, 197, 198, 199, 200, 201, 203, 205, 207, 210, 213, 215, 217, 220, 221, 222, 224, 225, 228, 229, 231, 233, 236, 237, 238, 239, 245, 247, 248, 251, 255, 256, 257, 262, 263, 264, 267, 269, 270, 274, 281, 283, 285, 286, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 319, 320, 324, 326, 334, 336, 340, 341, 343, 344, 345, 346, 349, 350, 351, 911, 1016], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 71, 72, 73, 74, 81, 82, 85, 86, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 137, 138, 144, 146, 148, 151, 153, 154, 156, 157, 159, 160, 163, 164, 169, 170, 175, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 203, 205, 206, 207, 209, 212, 213, 217, 220, 222, 228, 232, 233, 234, 235, 236, 237, 238, 240, 242, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 271, 272, 274, 281, 283, 285, 287, 288, 289, 290, 293, 299, 301, 302, 305, 306, 308, 309, 311, 315, 316, 318, 320, 321, 324, 325, 326, 327, 328, 333, 335, 339, 340, 341, 344, 345, 346, 349, 350, 351, 358, 360, 365, 372, 373, 375, 376, 378, 383, 384, 387, 390, 391, 392, 395, 396, 397, 398, 403, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 423, 427, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 455, 456, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 492, 500, 508, 509, 512, 513, 514, 523, 524, 528, 529, 530, 531, 533, 534, 535, 536, 540, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 573, 577, 578, 585, 586, 587, 589, 590, 593, 599, 603, 604, 610, 613, 615, 618, 623, 624, 625, 626, 627, 629, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 673, 675, 676, 680, 683, 685, 686, 688, 689, 694, 695, 698, 702, 703, 711, 712, 721, 722, 729, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 751, 763, 764, 776, 777, 783, 784, 785, 786, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 823, 825, 826, 827, 828, 831, 832, 833, 834, 836, 845, 854, 855, 856, 857, 862, 863, 864, 869, 870, 871, 872, 873, 875, 878, 881, 885, 891, 897, 898, 900, 901, 903, 905, 906, 907, 908, 923, 931, 933, 934, 936, 938, 939, 941, 942, 949, 953, 956, 974, 975, 978, 979, 980, 981, 983, 985, 986, 987, 988, 995, 996, 999, 1000, 1003, 1008, 1011, 1015, 1016, 1017, 1018, 1020, 1023, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1040, 1041, 1042], "average_week_demand": 4, "groupbi": [4, 73, 170, 207, 217], "weekdai": [4, 170], "count": [4, 14, 25, 27, 41, 49, 53, 70, 71, 92, 132, 133, 169, 170, 199, 201, 232, 242, 269, 278, 283, 316, 317, 350, 351, 358, 373, 375, 382, 387, 392, 393, 403, 404, 405, 410, 412, 413, 442, 445, 485, 532, 540, 577, 584, 585, 586, 587, 590, 600, 613, 636, 693, 701, 711, 714, 724, 725, 733, 749, 778, 779, 781, 782, 832, 836, 837, 838, 846, 849, 860, 909, 911, 936, 950, 974, 977, 981, 985, 987, 988, 995, 1001, 1009, 1020, 1027, 1030, 1032, 1035, 1036, 1038, 1039], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 55, 68, 71, 79, 80, 81, 82, 86, 92, 95, 98, 99, 100, 102, 103, 111, 113, 114, 117, 120, 121, 124, 125, 131, 132, 133, 138, 147, 148, 151, 156, 158, 160, 163, 166, 169, 170, 179, 181, 188, 190, 192, 195, 199, 201, 205, 206, 208, 214, 215, 216, 217, 223, 225, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 248, 250, 251, 256, 257, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 294, 305, 308, 310, 311, 312, 315, 318, 321, 327, 336, 339, 340, 344, 346, 348, 349, 351, 352, 360, 364, 370, 372, 373, 375, 378, 379, 380, 382, 383, 384, 386, 387, 390, 391, 392, 396, 402, 403, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 428, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 484, 497, 498, 500, 502, 508, 515, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 584, 585, 586, 587, 590, 593, 598, 602, 603, 604, 605, 606, 607, 609, 618, 623, 624, 626, 628, 629, 630, 631, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 680, 684, 685, 686, 687, 688, 689, 690, 691, 700, 701, 703, 705, 708, 709, 712, 713, 719, 721, 724, 725, 726, 731, 732, 733, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 752, 769, 773, 774, 776, 778, 779, 780, 782, 783, 785, 786, 787, 788, 790, 792, 793, 794, 797, 798, 800, 808, 812, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 845, 847, 848, 850, 851, 853, 854, 855, 856, 858, 859, 861, 862, 866, 867, 869, 873, 875, 877, 878, 883, 885, 886, 888, 890, 892, 893, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 913, 917, 918, 920, 959, 960, 966, 970, 974, 975, 976, 979, 981, 982, 984, 987, 988, 989, 990, 992, 993, 998, 999, 1000, 1001, 1005, 1009, 1015, 1018, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "plot": [4, 5, 6, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 72, 73, 75, 79, 80, 81, 86, 88, 93, 95, 98, 103, 104, 105, 106, 110, 111, 113, 114, 115, 116, 118, 123, 124, 126, 128, 129, 130, 135, 138, 140, 143, 144, 146, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 166, 167, 168, 169, 171, 172, 173, 175, 177, 181, 182, 184, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 222, 223, 224, 225, 227, 228, 231, 232, 234, 236, 237, 242, 243, 245, 246, 247, 249, 251, 253, 254, 255, 260, 261, 263, 265, 266, 270, 271, 272, 274, 276, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 312, 316, 319, 320, 321, 325, 326, 329, 331, 332, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 356, 357, 358, 359, 367, 378, 381, 387, 390, 394, 395, 400, 403, 405, 407, 409, 411, 412, 434, 437, 442, 446, 452, 460, 467, 492, 497, 498, 500, 508, 511, 515, 519, 549, 553, 556, 558, 560, 561, 565, 566, 606, 618, 627, 628, 629, 653, 654, 668, 672, 693, 694, 696, 697, 698, 699, 714, 722, 730, 756, 777, 779, 782, 783, 784, 794, 800, 811, 816, 818, 819, 820, 821, 824, 835, 839, 855, 858, 870, 871, 872, 874, 877, 897, 899, 902, 905, 906, 911, 978, 979, 981, 982, 984, 985, 988, 989, 991, 999, 1000, 1001, 1005, 1006, 1015, 1016, 1018, 1022, 1028, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "_": [4, 5, 7, 8, 9, 11, 12, 14, 20, 25, 26, 27, 30, 32, 33, 40, 43, 50, 53, 55, 58, 63, 67, 70, 82, 90, 92, 95, 100, 101, 103, 105, 114, 115, 116, 143, 151, 156, 157, 158, 168, 169, 170, 172, 175, 178, 182, 183, 184, 186, 187, 188, 191, 196, 197, 199, 201, 203, 212, 213, 216, 221, 224, 229, 234, 238, 242, 255, 260, 262, 263, 264, 266, 267, 269, 278, 286, 291, 294, 302, 307, 310, 311, 312, 316, 319, 320, 321, 325, 326, 335, 340, 344, 349, 351, 355, 380, 384, 392, 410, 412, 413, 442, 528, 529, 530, 531, 532, 534, 535, 536, 539, 543, 562, 593, 648, 649, 659, 680, 684, 685, 686, 687, 692, 694, 696, 759, 794, 800, 808, 816, 841, 849, 870, 871, 878, 975, 981, 982, 985, 987, 988, 989, 992, 993, 995, 1000, 1001, 1018, 1034], "hourli": [4, 169], "xtick": [4, 6, 8, 11, 30, 34, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 98, 121, 122, 123, 153, 154, 155, 159, 182, 189, 195, 212, 228, 236, 246, 247, 248, 251, 259, 260, 274, 287, 296, 302, 311, 324, 336, 339, 341, 342, 693, 1016], "24": [4, 5, 66, 166, 170, 175, 176, 183, 283, 314, 315, 322, 324, 325, 344, 347, 382, 395, 405, 412, 413, 433, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 456, 458, 460, 465, 466, 467, 468, 469, 470, 471, 472, 485, 486, 487, 488, 492, 500, 511, 512, 513, 514, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 609, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 694, 695, 696, 698, 704, 710, 722, 741, 748, 792, 793, 794, 797, 798, 808, 815, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 858, 860, 861, 862, 863, 866, 867, 869, 871, 872, 873, 874, 875, 877, 887, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 928, 929, 960, 966, 974, 992, 995, 1003, 1023, 1025, 1027, 1035, 1036, 1037, 1038, 1040], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 25, 26, 27, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 55, 60, 61, 63, 64, 65, 78, 79, 81, 82, 111, 113, 114, 115, 118, 124, 130, 143, 147, 152, 169, 170, 175, 183, 188, 189, 193, 197, 199, 200, 203, 206, 207, 215, 217, 221, 223, 231, 232, 237, 238, 245, 247, 250, 251, 255, 259, 260, 261, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 281, 287, 293, 296, 302, 305, 310, 311, 315, 319, 320, 325, 336, 344, 349, 350, 355, 358, 365, 372, 373, 375, 378, 380, 384, 387, 392, 399, 405, 409, 412, 415, 436, 457, 465, 467, 468, 469, 470, 471, 472, 474, 477, 487, 490, 491, 510, 523, 537, 549, 550, 555, 556, 559, 584, 585, 587, 625, 628, 634, 636, 644, 645, 665, 667, 672, 676, 688, 708, 726, 741, 783, 823, 829, 843, 845, 847, 848, 853, 867, 874, 875, 876, 882, 883, 886, 887, 890, 891, 933, 934, 953, 974, 981, 985, 989, 999, 1006, 1009, 1014, 1015, 1016, 1018, 1032, 1033, 1034, 1035, 1037, 1040, 1043], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 33, 34, 39, 42, 44, 46, 53, 54, 55, 56, 60, 64, 65, 67, 71, 72, 74, 80, 82, 98, 111, 114, 124, 127, 131, 132, 148, 160, 168, 169, 170, 172, 175, 180, 181, 198, 199, 200, 201, 215, 217, 220, 228, 233, 234, 240, 242, 245, 246, 249, 250, 255, 260, 264, 266, 267, 271, 273, 278, 281, 283, 285, 288, 289, 291, 301, 302, 305, 309, 315, 318, 319, 320, 324, 325, 327, 328, 333, 340, 344, 345, 350, 351, 360, 373, 375, 376, 382, 383, 384, 395, 397, 398, 403, 409, 410, 412, 413, 414, 435, 440, 444, 446, 447, 448, 449, 458, 467, 468, 487, 528, 529, 530, 531, 532, 534, 540, 557, 558, 584, 587, 596, 623, 624, 626, 643, 645, 654, 657, 688, 695, 703, 717, 718, 719, 721, 723, 739, 740, 741, 745, 746, 748, 780, 785, 786, 789, 792, 795, 796, 801, 804, 811, 812, 815, 820, 823, 827, 837, 838, 846, 855, 856, 869, 870, 892, 893, 934, 937, 938, 949, 974, 975, 980, 981, 983, 985, 986, 988, 989, 991, 995, 999, 1000, 1003, 1011, 1015, 1018, 1023, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1040], "xticklabel": [4, 10, 121, 170, 311], "sun": [4, 170, 1035, 1040, 1041], "mon": [4, 170], "tue": [4, 170, 1033], "wed": [4, 170], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 55, 60, 78, 82, 98, 100, 114, 116, 117, 119, 121, 144, 151, 156, 157, 170, 183, 187, 188, 199, 201, 217, 228, 234, 239, 247, 258, 260, 265, 266, 267, 286, 312, 315, 318, 354, 360, 364, 365, 373, 380, 384, 390, 392, 403, 405, 409, 410, 412, 413, 415, 416, 433, 435, 459, 511, 523, 549, 550, 551, 552, 553, 554, 559, 560, 561, 599, 602, 606, 618, 623, 628, 629, 639, 641, 654, 673, 701, 714, 720, 783, 790, 796, 801, 803, 815, 828, 831, 866, 897, 976, 977, 978, 979, 980, 981, 982, 985, 986, 991, 992, 993, 995, 997, 998, 999, 1000, 1006, 1008, 1009, 1027, 1029, 1033, 1035, 1036, 1037, 1039, 1043], "fri": [4, 170, 373], "sat": [4, 170, 413], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 112, 113, 115, 121, 122, 123, 124, 125, 126, 130, 134, 137, 138, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 169, 178, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 199, 201, 202, 204, 206, 208, 209, 213, 217, 232, 234, 236, 238, 255, 259, 260, 264, 265, 269, 270, 273, 274, 285, 286, 289, 290, 311, 312, 333, 335, 336, 339, 349, 355, 356, 357, 627], "ylabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 61, 78, 79, 81, 82, 85, 86, 90, 97, 103, 112, 113, 115, 122, 123, 124, 125, 126, 130, 134, 137, 138, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 169, 178, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 199, 201, 202, 204, 206, 208, 209, 217, 232, 234, 236, 255, 259, 260, 263, 264, 265, 269, 270, 273, 274, 286, 312, 333, 336, 339, 349, 355, 356, 357, 627], "number": [4, 5, 7, 8, 10, 12, 13, 19, 20, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 61, 62, 63, 67, 68, 70, 71, 72, 73, 75, 82, 85, 86, 91, 92, 95, 97, 99, 100, 103, 111, 112, 114, 117, 119, 120, 122, 123, 124, 125, 127, 131, 133, 144, 145, 148, 159, 160, 164, 166, 169, 170, 175, 183, 188, 198, 199, 200, 201, 206, 207, 213, 214, 215, 216, 217, 220, 228, 232, 236, 238, 239, 245, 246, 248, 250, 251, 254, 255, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 278, 283, 285, 289, 290, 305, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 328, 336, 341, 344, 350, 351, 354, 358, 360, 365, 366, 370, 372, 373, 374, 375, 376, 378, 381, 382, 384, 385, 386, 387, 390, 391, 392, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 577, 578, 579, 580, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 701, 703, 708, 709, 710, 712, 714, 716, 719, 723, 724, 725, 726, 729, 730, 733, 735, 747, 750, 769, 773, 776, 777, 778, 779, 780, 781, 782, 783, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 917, 918, 921, 933, 934, 937, 938, 953, 954, 956, 959, 960, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "rental": [4, 170, 992], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 69, 74, 76, 86, 90, 99, 102, 104, 112, 119, 120, 121, 124, 125, 128, 130, 131, 132, 134, 140, 143, 146, 148, 151, 153, 156, 157, 164, 166, 168, 169, 170, 171, 178, 182, 183, 192, 195, 199, 201, 203, 204, 207, 208, 221, 229, 231, 232, 233, 234, 237, 238, 239, 247, 254, 258, 261, 263, 265, 266, 269, 270, 278, 283, 286, 291, 294, 295, 300, 304, 305, 313, 316, 317, 319, 321, 324, 325, 328, 329, 332, 333, 336, 340, 342, 343, 349, 350, 355, 356, 357, 358, 360, 364, 366, 367, 370, 371, 372, 373, 374, 375, 380, 382, 383, 386, 387, 391, 394, 405, 409, 412, 415, 429, 433, 434, 435, 438, 441, 460, 461, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 504, 506, 516, 520, 527, 528, 530, 532, 533, 535, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 569, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 693, 694, 696, 697, 698, 703, 704, 705, 708, 709, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 730, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 777, 778, 779, 780, 782, 783, 784, 785, 786, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 844, 846, 847, 848, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 881, 886, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 917, 947, 948, 949, 976, 977, 978, 981, 982, 985, 989, 992, 993, 999, 1000, 1001, 1006, 1008, 1009, 1011, 1016, 1018, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "absolut": [4, 75, 99, 121, 148, 169, 199, 201, 205, 217, 380, 405, 407, 409, 410, 412, 413, 414, 415, 416, 440, 446, 452, 453, 527, 533, 538, 541, 542, 544, 545, 546, 554, 556, 557, 558, 561, 584, 586, 587, 589, 593, 598, 615, 623, 628, 642, 645, 646, 648, 650, 652, 667, 668, 670, 672, 674, 678, 679, 700, 713, 717, 731, 732, 740, 741, 743, 748, 750, 752, 763, 790, 796, 800, 811, 814, 821, 823, 835, 837, 838, 842, 861, 866, 869, 882, 906, 908, 971, 981, 982, 995, 999, 1001, 1018, 1019, 1028, 1033, 1038, 1039, 1040, 1041], "basi": [4, 6, 13, 100, 151, 156, 158, 200, 301, 318, 336, 340, 370, 376, 379, 405, 410, 412, 448, 530, 618, 628, 635, 687, 876, 983, 995, 1000, 1007, 1015, 1016, 1019, 1022, 1035, 1037, 1040], "max": [4, 8, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 58, 62, 67, 72, 77, 82, 83, 95, 98, 106, 111, 113, 120, 129, 137, 139, 140, 143, 144, 148, 153, 155, 156, 164, 166, 169, 181, 186, 187, 188, 192, 194, 201, 202, 205, 213, 215, 217, 223, 232, 236, 258, 259, 260, 271, 273, 281, 283, 285, 289, 290, 296, 299, 301, 305, 307, 308, 310, 318, 327, 329, 342, 345, 364, 405, 407, 410, 465, 466, 467, 468, 469, 470, 471, 472, 473, 508, 532, 551, 552, 553, 554, 555, 556, 559, 560, 561, 602, 623, 627, 628, 644, 645, 665, 668, 670, 676, 687, 688, 692, 695, 700, 701, 736, 752, 787, 788, 794, 854, 855, 866, 867, 869, 876, 883, 884, 905, 906, 907, 908, 953, 981, 983, 988, 995, 999, 1000, 1018, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "977": [4, 409], "rescal": [4, 46, 47, 55, 100, 180, 187, 223, 238, 305, 346, 407, 417, 465, 466, 467, 468, 469, 470, 471, 472, 529, 534, 642, 645, 648, 869, 875, 899, 900, 901, 902, 903, 985, 995, 1019, 1031, 1032], "variabl": [4, 9, 11, 12, 16, 37, 70, 114, 118, 121, 124, 125, 139, 140, 143, 148, 158, 159, 163, 164, 170, 171, 175, 183, 188, 199, 203, 204, 217, 222, 238, 251, 260, 263, 270, 278, 310, 311, 312, 360, 364, 366, 373, 375, 376, 378, 380, 382, 383, 386, 392, 401, 405, 406, 407, 408, 410, 412, 413, 414, 446, 478, 479, 480, 483, 495, 497, 504, 511, 528, 530, 532, 537, 540, 549, 555, 556, 600, 602, 603, 604, 636, 646, 647, 650, 651, 657, 678, 679, 691, 705, 742, 795, 796, 799, 801, 802, 803, 804, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 822, 825, 829, 830, 860, 871, 874, 878, 886, 898, 974, 975, 977, 981, 984, 985, 986, 987, 988, 990, 992, 993, 995, 999, 1001, 1005, 1006, 1008, 1011, 1012, 1014, 1016, 1027, 1032, 1035, 1037, 1040, 1042], "rel": [4, 6, 8, 17, 20, 27, 55, 61, 100, 118, 156, 172, 175, 179, 199, 217, 248, 289, 290, 306, 316, 319, 336, 340, 349, 350, 373, 377, 380, 386, 392, 403, 405, 409, 412, 413, 415, 436, 439, 443, 445, 455, 517, 520, 527, 530, 533, 537, 553, 554, 555, 556, 560, 561, 562, 600, 645, 654, 655, 667, 668, 670, 686, 690, 724, 742, 794, 797, 798, 800, 808, 816, 821, 824, 837, 838, 842, 854, 855, 866, 867, 877, 893, 897, 898, 899, 902, 904, 905, 906, 907, 908, 981, 982, 985, 987, 988, 989, 991, 1008, 1016], "so": [4, 9, 12, 16, 17, 42, 48, 55, 56, 61, 65, 81, 117, 120, 123, 130, 151, 156, 169, 171, 175, 179, 199, 200, 228, 235, 238, 260, 278, 283, 289, 290, 293, 300, 301, 306, 311, 312, 316, 327, 336, 349, 351, 358, 360, 364, 365, 366, 372, 373, 377, 378, 380, 382, 383, 384, 386, 387, 392, 396, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 492, 504, 505, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 691, 701, 704, 712, 721, 736, 751, 783, 792, 793, 794, 797, 798, 800, 801, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 887, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 934, 951, 960, 974, 975, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 995, 997, 998, 999, 1000, 1005, 1006, 1009, 1018, 1019, 1020, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044], "error": [4, 5, 7, 13, 17, 27, 75, 78, 79, 81, 99, 105, 110, 114, 117, 118, 121, 125, 135, 148, 151, 163, 166, 169, 183, 188, 195, 199, 201, 205, 206, 213, 217, 231, 234, 235, 251, 253, 256, 260, 261, 265, 274, 276, 278, 289, 290, 319, 335, 344, 349, 350, 375, 376, 378, 380, 381, 382, 383, 387, 390, 392, 396, 399, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 433, 439, 440, 443, 445, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 492, 499, 511, 520, 527, 529, 530, 533, 534, 538, 539, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 571, 577, 578, 584, 586, 587, 588, 590, 591, 592, 594, 595, 596, 602, 606, 607, 625, 628, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 684, 685, 686, 688, 689, 692, 694, 697, 698, 705, 708, 716, 717, 718, 722, 735, 738, 739, 740, 741, 742, 743, 745, 746, 748, 751, 759, 773, 777, 783, 784, 785, 786, 794, 795, 796, 797, 798, 800, 801, 803, 808, 812, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 847, 848, 849, 852, 854, 855, 857, 858, 860, 862, 863, 864, 869, 870, 871, 876, 877, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 915, 916, 917, 918, 921, 948, 969, 972, 974, 975, 976, 978, 979, 980, 982, 986, 989, 993, 995, 999, 1000, 1001, 1007, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "easili": [4, 9, 31, 90, 145, 172, 202, 215, 233, 235, 239, 242, 260, 262, 269, 288, 307, 378, 380, 392, 393, 406, 412, 413, 415, 445, 979, 981, 982, 995, 999, 1000, 1001, 1012, 1015, 1020, 1033], "interpret": [4, 27, 148, 158, 166, 167, 168, 170, 173, 199, 200, 215, 217, 254, 260, 262, 263, 302, 306, 309, 317, 349, 351, 364, 376, 378, 379, 384, 386, 387, 392, 394, 403, 405, 406, 411, 413, 448, 460, 461, 463, 492, 537, 568, 607, 635, 639, 649, 668, 669, 687, 688, 691, 697, 724, 748, 753, 754, 778, 787, 788, 800, 809, 820, 821, 823, 826, 858, 870, 877, 953, 979, 981, 985, 986, 992, 995, 1001, 1005, 1011, 1019, 1027, 1028, 1032, 1035, 1040, 1041, 1042], "fraction": [4, 25, 27, 122, 124, 199, 207, 217, 344, 350, 403, 409, 412, 434, 435, 445, 446, 452, 453, 511, 523, 553, 554, 555, 556, 560, 561, 562, 586, 589, 598, 662, 663, 664, 667, 672, 673, 674, 699, 717, 718, 719, 729, 789, 791, 796, 800, 821, 822, 836, 864, 899, 900, 901, 905, 906, 907, 908, 951, 981, 985, 988, 992, 993, 995, 1000, 1001, 1006, 1028, 1029, 1030, 1041], "maximum": [4, 8, 11, 27, 33, 37, 57, 78, 79, 80, 81, 82, 97, 111, 116, 117, 120, 122, 152, 158, 166, 177, 187, 218, 238, 270, 285, 289, 290, 296, 305, 331, 347, 350, 354, 356, 357, 364, 383, 384, 391, 392, 402, 403, 405, 407, 408, 410, 412, 413, 415, 416, 417, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 450, 453, 455, 457, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 494, 505, 507, 508, 509, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 579, 580, 593, 606, 623, 627, 628, 631, 633, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 670, 672, 673, 674, 675, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 690, 712, 739, 776, 792, 794, 797, 798, 800, 808, 815, 821, 846, 853, 854, 855, 861, 862, 866, 867, 869, 872, 873, 874, 876, 885, 886, 891, 892, 893, 894, 897, 898, 902, 905, 906, 907, 908, 909, 911, 914, 921, 974, 980, 981, 982, 984, 985, 987, 988, 989, 991, 995, 999, 1000, 1001, 1019, 1034, 1035, 1037, 1038, 1041, 1042], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 120, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 223, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 349, 350, 354, 355, 356, 357, 358, 364, 366, 367, 370, 373, 375, 378, 381, 383, 384, 387, 390, 392, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 421, 423, 427, 428, 429, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 497, 505, 506, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 571, 573, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 690, 693, 694, 696, 697, 698, 707, 718, 730, 745, 783, 792, 793, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 926, 942, 943, 945, 953, 969, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 56, 57, 58, 61, 65, 68, 69, 76, 79, 80, 84, 87, 95, 98, 100, 104, 105, 106, 109, 111, 116, 118, 119, 125, 131, 143, 148, 163, 175, 186, 188, 200, 207, 216, 219, 221, 226, 228, 234, 235, 238, 242, 244, 252, 262, 267, 269, 278, 283, 289, 290, 292, 305, 309, 312, 315, 317, 318, 349, 350, 351, 358, 360, 364, 365, 366, 367, 370, 375, 376, 378, 379, 380, 384, 385, 387, 390, 391, 394, 396, 399, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 455, 458, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 500, 508, 510, 518, 521, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 706, 707, 726, 727, 730, 731, 736, 737, 758, 763, 764, 769, 773, 778, 783, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 885, 886, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 912, 920, 934, 941, 942, 943, 944, 945, 946, 951, 954, 969, 970, 973, 974, 975, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1009, 1011, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "minim": [4, 12, 57, 66, 78, 79, 124, 151, 159, 178, 195, 197, 199, 201, 203, 207, 217, 220, 231, 232, 245, 250, 261, 269, 270, 305, 315, 318, 333, 340, 344, 354, 367, 377, 378, 381, 386, 390, 392, 403, 405, 407, 410, 412, 436, 437, 441, 442, 446, 459, 534, 536, 543, 553, 554, 555, 556, 560, 561, 605, 606, 607, 637, 642, 645, 653, 654, 663, 667, 668, 670, 674, 675, 683, 688, 690, 691, 743, 775, 844, 846, 855, 873, 885, 891, 905, 906, 907, 908, 976, 981, 982, 985, 988, 989, 995, 997, 998, 999, 1000, 1005, 1007, 1018, 1019, 1022, 1031, 1036, 1037], "squar": [4, 5, 61, 71, 79, 80, 81, 84, 87, 96, 106, 114, 125, 127, 148, 151, 156, 166, 169, 177, 178, 180, 183, 188, 195, 199, 201, 204, 209, 216, 217, 218, 231, 232, 234, 248, 274, 309, 317, 318, 320, 333, 349, 370, 375, 378, 384, 387, 392, 405, 407, 408, 410, 411, 412, 416, 417, 428, 436, 438, 439, 440, 442, 443, 445, 446, 453, 455, 456, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 497, 527, 533, 535, 537, 539, 543, 545, 548, 550, 552, 554, 555, 556, 558, 561, 564, 566, 586, 587, 588, 591, 592, 594, 595, 596, 600, 601, 602, 605, 607, 611, 618, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 681, 682, 683, 684, 686, 688, 690, 692, 705, 717, 718, 719, 745, 746, 753, 754, 758, 764, 765, 780, 785, 786, 823, 830, 831, 839, 840, 843, 845, 847, 848, 855, 858, 877, 897, 898, 900, 902, 903, 904, 906, 908, 932, 958, 971, 976, 978, 979, 988, 989, 993, 999, 1001, 1007, 1018, 1019, 1022, 1027, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 34, 37, 38, 44, 45, 49, 54, 55, 56, 57, 58, 61, 63, 71, 72, 74, 83, 85, 86, 95, 96, 97, 103, 105, 110, 111, 116, 117, 118, 120, 122, 124, 128, 131, 132, 133, 134, 135, 137, 138, 146, 147, 148, 150, 151, 156, 158, 161, 162, 163, 165, 168, 169, 177, 180, 183, 187, 188, 194, 199, 201, 203, 204, 206, 207, 216, 217, 218, 227, 228, 229, 234, 240, 242, 243, 244, 245, 247, 248, 250, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 276, 277, 279, 283, 284, 290, 297, 305, 307, 318, 319, 321, 339, 340, 344, 350, 351, 355, 364, 365, 366, 367, 370, 376, 378, 381, 382, 385, 386, 387, 388, 395, 396, 399, 400, 403, 405, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 487, 488, 491, 492, 494, 497, 498, 520, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 571, 572, 573, 575, 576, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 683, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 703, 704, 707, 708, 709, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 777, 778, 779, 780, 782, 783, 784, 785, 786, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 808, 810, 812, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 916, 917, 918, 920, 922, 923, 926, 928, 929, 930, 941, 942, 943, 945, 953, 969, 973, 980, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "condit": [4, 12, 25, 27, 82, 119, 124, 166, 167, 169, 173, 188, 201, 204, 217, 235, 263, 318, 358, 384, 390, 394, 402, 403, 405, 407, 410, 412, 414, 447, 460, 467, 468, 469, 474, 492, 509, 519, 520, 532, 535, 536, 537, 539, 541, 543, 545, 546, 558, 623, 628, 629, 639, 646, 647, 648, 650, 651, 652, 666, 668, 669, 670, 671, 678, 679, 683, 693, 708, 713, 714, 731, 732, 790, 832, 833, 834, 835, 836, 855, 858, 861, 870, 871, 874, 878, 934, 979, 981, 982, 983, 985, 987, 988, 990, 995, 1001, 1005, 1018, 1022, 1028, 1030, 1031, 1032, 1034, 1035, 1037, 1039, 1041, 1042, 1043], "median": [4, 37, 71, 75, 80, 81, 124, 163, 164, 169, 201, 205, 216, 230, 238, 305, 316, 318, 319, 373, 407, 412, 414, 436, 450, 454, 457, 470, 548, 550, 554, 561, 593, 623, 626, 631, 666, 667, 675, 717, 748, 844, 875, 887, 906, 908, 975, 995, 1001, 1030, 1031], "nevertheless": [4, 172, 412], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 58, 60, 61, 96, 114, 115, 124, 127, 134, 148, 151, 156, 166, 168, 169, 170, 175, 188, 193, 198, 199, 203, 205, 217, 253, 258, 260, 266, 267, 273, 276, 310, 340, 349, 350, 364, 373, 375, 380, 384, 392, 402, 404, 407, 409, 410, 411, 412, 413, 445, 448, 458, 494, 511, 534, 536, 543, 547, 553, 554, 555, 556, 559, 560, 561, 600, 603, 604, 607, 623, 627, 654, 686, 688, 694, 698, 700, 701, 703, 705, 708, 709, 712, 713, 716, 720, 721, 722, 724, 726, 731, 732, 734, 735, 738, 742, 750, 751, 752, 777, 778, 779, 781, 782, 784, 787, 790, 818, 820, 823, 843, 874, 886, 905, 906, 907, 908, 975, 981, 983, 988, 990, 991, 993, 999, 1001, 1015, 1018, 1027, 1030, 1032, 1033, 1035, 1037], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 70, 71, 85, 100, 111, 114, 116, 117, 118, 119, 122, 123, 124, 125, 126, 137, 140, 142, 144, 147, 149, 151, 152, 166, 168, 169, 170, 171, 172, 175, 183, 188, 194, 195, 199, 200, 201, 203, 206, 207, 214, 215, 217, 224, 229, 234, 235, 237, 247, 253, 254, 255, 258, 259, 260, 261, 262, 264, 265, 267, 268, 270, 271, 272, 276, 281, 286, 291, 292, 299, 301, 307, 310, 311, 312, 328, 336, 344, 351, 360, 364, 365, 372, 373, 375, 381, 382, 383, 384, 390, 391, 392, 394, 395, 398, 400, 401, 403, 406, 407, 410, 412, 413, 414, 415, 422, 424, 428, 431, 432, 433, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 484, 485, 489, 493, 494, 498, 500, 520, 527, 533, 535, 539, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 588, 590, 591, 592, 594, 595, 596, 598, 600, 601, 602, 604, 605, 606, 607, 623, 624, 626, 631, 632, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 708, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 844, 847, 848, 854, 855, 857, 882, 883, 885, 886, 887, 888, 892, 893, 895, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 926, 928, 929, 980, 981, 984, 985, 988, 989, 993, 995, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1012, 1015, 1016, 1022, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "discuss": [4, 53, 58, 148, 169, 188, 220, 225, 263, 278, 349, 360, 366, 373, 375, 378, 383, 384, 386, 390, 392, 393, 405, 407, 411, 412, 415, 494, 678, 679, 839, 840, 845, 847, 848, 975, 979, 981, 982, 985, 988, 995, 1002, 1006, 1030], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 60, 62, 66, 78, 101, 102, 120, 131, 137, 138, 148, 169, 172, 192, 236, 255, 265, 272, 354, 360, 364, 365, 366, 367, 380, 383, 386, 392, 405, 407, 409, 412, 413, 416, 439, 440, 443, 445, 455, 519, 528, 534, 555, 556, 578, 598, 654, 655, 668, 670, 675, 683, 684, 685, 689, 721, 751, 794, 797, 798, 808, 864, 897, 898, 905, 906, 907, 908, 975, 976, 980, 981, 982, 983, 984, 988, 995, 998, 999, 1000, 1012, 1014, 1018, 1019, 1029, 1030, 1034, 1036, 1038], "focu": [4, 9, 27, 95, 111, 151, 251, 293, 364, 383, 403, 412, 549, 550, 555, 557, 558, 674, 982, 988, 995, 1005, 1006], "root": [4, 16, 80, 148, 180, 358, 375, 378, 386, 405, 438, 497, 537, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 635, 745, 746, 785, 786, 905, 906, 907, 908, 909, 911, 985, 991, 1001, 1029, 1035, 1036, 1037, 1038, 1041, 1042], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 71, 82, 86, 111, 116, 119, 124, 148, 152, 155, 158, 169, 170, 172, 179, 185, 192, 199, 203, 205, 207, 217, 234, 235, 246, 257, 260, 261, 266, 281, 283, 300, 301, 302, 305, 309, 310, 311, 312, 326, 336, 340, 349, 350, 351, 354, 358, 360, 364, 365, 373, 376, 380, 383, 386, 390, 391, 392, 396, 399, 402, 403, 405, 406, 409, 410, 411, 412, 413, 415, 418, 428, 443, 444, 457, 461, 471, 478, 479, 480, 530, 532, 548, 550, 552, 554, 556, 558, 561, 564, 566, 584, 587, 603, 604, 607, 628, 629, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 672, 673, 674, 675, 676, 685, 695, 705, 708, 709, 717, 718, 719, 741, 758, 780, 783, 789, 794, 808, 821, 825, 830, 831, 840, 843, 845, 847, 848, 849, 855, 866, 867, 875, 877, 878, 882, 883, 885, 886, 887, 888, 898, 900, 903, 906, 908, 949, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 990, 992, 995, 1000, 1001, 1009, 1019, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1043], "intuit": [4, 31, 44, 52, 62, 100, 111, 114, 121, 143, 151, 169, 170, 200, 201, 222, 228, 261, 278, 288, 307, 310, 333, 336, 340, 350, 378, 392, 403, 405, 407, 409, 411, 777, 778, 779, 782, 868, 899, 902, 977, 981, 982, 985, 986, 992, 995, 996, 1000, 1009, 1018, 1020, 1027], "studi": [4, 60, 124, 199, 217, 263, 266, 267, 349, 373, 375, 409, 414, 692, 704, 753, 754, 822, 983, 985, 999, 1011], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 58, 60, 64, 68, 70, 75, 82, 111, 116, 123, 125, 126, 131, 145, 148, 152, 163, 166, 168, 169, 171, 183, 188, 194, 195, 199, 201, 203, 205, 217, 223, 229, 232, 233, 238, 241, 253, 254, 256, 257, 258, 260, 261, 263, 267, 269, 270, 276, 281, 283, 285, 293, 296, 302, 305, 310, 315, 316, 318, 319, 320, 321, 324, 325, 327, 328, 349, 350, 360, 364, 367, 370, 373, 378, 380, 390, 391, 392, 394, 396, 400, 403, 410, 411, 412, 415, 416, 422, 433, 437, 440, 441, 442, 446, 453, 465, 516, 531, 545, 546, 547, 549, 551, 553, 554, 555, 557, 558, 560, 561, 563, 565, 574, 598, 606, 616, 624, 627, 630, 634, 635, 636, 637, 638, 639, 654, 655, 659, 662, 664, 670, 671, 672, 684, 686, 688, 690, 692, 794, 797, 798, 800, 808, 816, 818, 819, 820, 822, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 863, 869, 892, 893, 897, 899, 902, 905, 907, 975, 977, 980, 982, 986, 991, 993, 1005, 1006, 1015, 1016, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "ones": [4, 11, 34, 43, 55, 71, 81, 127, 151, 175, 183, 203, 204, 228, 231, 235, 260, 268, 271, 290, 309, 325, 346, 364, 365, 378, 386, 392, 405, 407, 409, 412, 446, 528, 562, 577, 606, 607, 640, 641, 654, 655, 666, 672, 699, 791, 796, 801, 812, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 872, 876, 939, 981, 985, 990, 991, 995, 1000, 1018, 1027, 1035, 1036, 1037], "term": [4, 13, 14, 25, 32, 58, 100, 114, 117, 121, 124, 156, 168, 183, 187, 188, 199, 201, 203, 213, 216, 217, 238, 258, 262, 283, 299, 318, 340, 344, 349, 351, 366, 367, 378, 380, 382, 390, 399, 403, 404, 405, 407, 409, 410, 412, 439, 443, 445, 448, 455, 458, 520, 531, 534, 536, 540, 543, 545, 584, 585, 586, 587, 600, 603, 604, 628, 629, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 671, 672, 674, 676, 683, 691, 854, 855, 872, 876, 879, 897, 898, 899, 900, 901, 902, 903, 974, 976, 979, 980, 981, 982, 985, 986, 987, 989, 990, 995, 999, 1000, 1011, 1020, 1035, 1041, 1042, 1043], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 56, 57, 60, 61, 62, 65, 66, 71, 72, 73, 74, 75, 81, 85, 86, 91, 92, 97, 99, 100, 101, 102, 104, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 220, 221, 222, 225, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 245, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 354, 355, 356, 357, 358, 360, 370, 371, 372, 373, 376, 378, 380, 383, 385, 387, 391, 392, 396, 399, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 418, 422, 423, 424, 427, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 494, 496, 498, 501, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 696, 697, 698, 702, 707, 721, 730, 736, 737, 751, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 783, 784, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 917, 922, 923, 945, 947, 948, 949, 953, 956, 959, 972, 974, 975, 976, 977, 979, 980, 981, 983, 985, 986, 987, 988, 989, 990, 992, 995, 999, 1000, 1001, 1006, 1011, 1015, 1016, 1018, 1022, 1024, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hist": [4, 25, 27, 53, 75, 113, 117, 199, 201, 232, 238, 266, 288, 305, 309, 311, 319, 412], "bin": [4, 24, 25, 27, 53, 75, 113, 117, 199, 232, 238, 266, 288, 305, 306, 307, 308, 309, 311, 312, 376, 386, 395, 403, 411, 412, 434, 435, 444, 457, 557, 558, 860, 862, 876, 936, 1019, 1035, 1036, 1037, 1041], "30": [4, 8, 10, 14, 19, 34, 39, 40, 44, 54, 60, 71, 73, 78, 92, 101, 103, 111, 120, 124, 130, 137, 148, 151, 152, 155, 157, 170, 175, 178, 193, 197, 199, 217, 220, 221, 225, 233, 237, 238, 249, 260, 265, 274, 278, 283, 292, 293, 309, 310, 311, 320, 321, 324, 325, 329, 334, 337, 339, 342, 364, 373, 375, 383, 384, 409, 413, 416, 440, 446, 453, 496, 527, 531, 533, 534, 535, 537, 539, 566, 588, 591, 592, 594, 644, 688, 730, 778, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 878, 893, 906, 974, 979, 985, 986, 988, 993, 1016, 1027, 1028, 1034, 1035, 1036], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 73, 95, 99, 120, 124, 125, 157, 158, 159, 169, 175, 178, 199, 202, 203, 207, 214, 217, 231, 232, 234, 235, 242, 255, 278, 287, 288, 301, 306, 307, 308, 309, 315, 318, 320, 336, 340, 342, 345, 351, 372, 375, 378, 381, 383, 387, 388, 390, 391, 392, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 417, 423, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 441, 444, 445, 446, 450, 453, 454, 457, 460, 461, 463, 464, 465, 467, 468, 478, 479, 480, 485, 499, 505, 512, 513, 514, 516, 520, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 616, 618, 623, 624, 625, 626, 627, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 692, 693, 694, 695, 696, 697, 698, 717, 718, 719, 723, 740, 741, 743, 745, 746, 748, 749, 756, 762, 763, 766, 767, 769, 773, 774, 775, 776, 780, 785, 786, 792, 793, 794, 797, 798, 800, 808, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 843, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 923, 928, 933, 942, 944, 945, 949, 958, 960, 966, 971, 972, 975, 977, 979, 981, 982, 983, 984, 985, 987, 988, 989, 990, 992, 993, 997, 998, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1015, 1016, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "annot": [4, 9, 26, 133, 175, 221, 264, 267, 349, 378, 379, 380, 405, 712, 911, 985, 1001, 1036], "log": [4, 20, 25, 26, 27, 78, 95, 111, 124, 131, 144, 148, 152, 153, 155, 156, 157, 160, 184, 187, 188, 192, 199, 204, 209, 217, 232, 234, 249, 293, 310, 349, 373, 375, 376, 378, 382, 386, 387, 392, 402, 403, 405, 406, 407, 410, 412, 413, 415, 444, 447, 456, 461, 466, 467, 468, 469, 470, 471, 472, 528, 532, 537, 545, 546, 547, 549, 551, 553, 555, 558, 560, 586, 587, 589, 590, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 638, 641, 644, 654, 655, 665, 667, 672, 676, 736, 746, 750, 792, 793, 794, 797, 798, 808, 832, 833, 834, 835, 836, 837, 838, 842, 853, 854, 861, 862, 891, 894, 899, 902, 904, 905, 907, 932, 974, 977, 979, 981, 982, 987, 988, 990, 993, 995, 999, 1001, 1005, 1006, 1018, 1029, 1030, 1031, 1036, 1037, 1038, 1041], "describ": [4, 56, 131, 148, 169, 217, 233, 260, 269, 360, 364, 365, 371, 373, 375, 377, 378, 380, 383, 386, 392, 393, 402, 405, 407, 408, 409, 410, 412, 413, 458, 465, 469, 470, 487, 489, 491, 492, 493, 496, 497, 498, 499, 500, 501, 506, 512, 513, 514, 524, 603, 604, 641, 655, 710, 792, 793, 832, 834, 872, 934, 974, 977, 980, 981, 984, 985, 987, 991, 999, 1000, 1001, 1008, 1011, 1017, 1018, 1035, 1037], "weather": [4, 156, 170, 981, 985], "includ": [4, 32, 34, 55, 80, 117, 121, 123, 168, 169, 171, 183, 199, 203, 217, 235, 261, 278, 283, 300, 305, 318, 319, 321, 336, 341, 349, 351, 360, 364, 365, 372, 374, 376, 378, 379, 380, 382, 383, 384, 386, 387, 392, 393, 395, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 440, 442, 446, 452, 462, 465, 466, 467, 468, 469, 470, 471, 472, 485, 486, 487, 492, 496, 497, 498, 500, 501, 506, 530, 537, 553, 560, 570, 628, 634, 642, 643, 648, 656, 657, 658, 661, 677, 684, 685, 693, 709, 724, 725, 730, 732, 733, 766, 778, 779, 782, 790, 794, 796, 797, 798, 807, 808, 811, 814, 820, 823, 845, 847, 848, 849, 870, 871, 872, 876, 894, 897, 898, 905, 907, 909, 911, 917, 918, 921, 923, 926, 942, 974, 981, 984, 985, 986, 988, 989, 995, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1018, 1020, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "both": [4, 5, 7, 9, 10, 14, 16, 20, 25, 26, 34, 42, 54, 55, 64, 71, 78, 80, 85, 86, 100, 103, 109, 114, 117, 118, 121, 130, 131, 134, 143, 144, 148, 151, 158, 160, 168, 169, 170, 171, 178, 183, 185, 187, 188, 199, 200, 201, 203, 204, 205, 207, 217, 224, 234, 235, 236, 245, 246, 247, 248, 249, 250, 260, 261, 262, 263, 267, 269, 271, 275, 283, 295, 305, 309, 310, 315, 317, 321, 326, 327, 333, 338, 340, 349, 350, 351, 358, 360, 364, 365, 366, 371, 372, 373, 374, 376, 378, 380, 384, 385, 387, 390, 391, 392, 393, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 418, 433, 442, 443, 448, 455, 458, 464, 471, 478, 479, 480, 481, 484, 485, 492, 493, 496, 498, 501, 503, 504, 505, 530, 534, 536, 543, 547, 551, 552, 553, 559, 560, 561, 562, 563, 573, 584, 585, 587, 593, 603, 604, 623, 628, 629, 639, 653, 654, 655, 668, 670, 672, 674, 683, 695, 700, 708, 712, 726, 731, 752, 756, 762, 769, 773, 778, 783, 784, 790, 797, 798, 800, 816, 826, 854, 855, 869, 871, 873, 885, 890, 895, 897, 898, 905, 907, 921, 935, 948, 960, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1015, 1018, 1019, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "numer": [4, 19, 66, 71, 75, 119, 121, 131, 148, 156, 159, 170, 171, 188, 199, 217, 238, 240, 242, 293, 311, 318, 351, 372, 373, 375, 381, 383, 384, 390, 391, 392, 405, 407, 412, 413, 414, 415, 417, 418, 436, 439, 443, 455, 467, 468, 471, 474, 485, 486, 487, 492, 496, 497, 498, 500, 501, 506, 527, 529, 531, 536, 543, 563, 577, 586, 607, 613, 616, 623, 626, 628, 629, 642, 648, 650, 668, 683, 686, 690, 710, 783, 789, 794, 797, 798, 800, 808, 816, 819, 820, 821, 824, 832, 833, 834, 835, 836, 854, 855, 860, 865, 870, 871, 878, 909, 910, 911, 917, 918, 933, 934, 974, 975, 981, 982, 986, 993, 995, 996, 1001, 1008, 1009, 1011, 1020, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "categor": [4, 71, 110, 116, 131, 135, 166, 169, 170, 171, 199, 217, 238, 240, 242, 312, 318, 320, 321, 366, 370, 372, 373, 380, 383, 392, 406, 413, 462, 463, 485, 486, 492, 501, 557, 558, 577, 578, 603, 604, 628, 629, 644, 654, 655, 665, 676, 705, 820, 832, 833, 834, 835, 836, 858, 860, 864, 865, 868, 870, 871, 878, 892, 893, 975, 981, 992, 993, 1001, 1005, 1006, 1007, 1008, 1009, 1020, 1022, 1027, 1028, 1031, 1032, 1035, 1037, 1039, 1042, 1043], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 34, 37, 38, 49, 53, 58, 66, 67, 70, 71, 86, 89, 90, 91, 102, 117, 118, 119, 142, 144, 145, 147, 148, 149, 151, 156, 166, 169, 170, 172, 175, 177, 178, 179, 183, 200, 203, 214, 216, 217, 218, 235, 239, 247, 248, 250, 255, 257, 260, 261, 262, 265, 267, 269, 286, 289, 290, 293, 312, 318, 339, 344, 349, 350, 351, 355, 358, 360, 364, 367, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 386, 390, 391, 392, 393, 396, 399, 402, 409, 410, 412, 413, 414, 415, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 458, 460, 465, 466, 467, 469, 470, 471, 472, 478, 479, 480, 481, 488, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 506, 511, 520, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 605, 606, 607, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 691, 693, 697, 700, 701, 711, 721, 725, 738, 750, 751, 752, 781, 783, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 942, 975, 977, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 999, 1001, 1006, 1009, 1017, 1018, 1019, 1020, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "alreadi": [4, 6, 10, 16, 55, 58, 90, 100, 111, 131, 148, 169, 229, 236, 238, 241, 261, 267, 283, 318, 321, 378, 379, 383, 390, 392, 403, 407, 409, 411, 412, 417, 433, 495, 519, 529, 563, 564, 630, 642, 645, 660, 661, 662, 663, 664, 670, 672, 673, 674, 681, 682, 763, 832, 852, 860, 866, 867, 869, 874, 880, 882, 883, 884, 886, 887, 888, 894, 897, 898, 920, 944, 974, 991, 995, 996, 1006, 1011, 1016, 1020, 1024, 1028, 1032, 1035, 1039, 1040, 1041, 1042], "expand": [4, 16, 49, 65, 230, 311, 316, 360, 370, 412, 440, 446, 495, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 985, 1028, 1035, 1036, 1043], "complementari": [4, 413], "column": [4, 20, 21, 60, 69, 72, 75, 76, 90, 118, 120, 121, 124, 128, 131, 148, 156, 163, 166, 168, 169, 170, 171, 172, 188, 199, 200, 203, 207, 217, 237, 238, 239, 250, 260, 261, 271, 272, 301, 310, 312, 317, 318, 319, 320, 349, 350, 351, 364, 372, 373, 375, 378, 380, 384, 387, 390, 391, 392, 402, 405, 406, 408, 410, 412, 413, 414, 417, 420, 447, 449, 460, 462, 463, 467, 468, 474, 483, 484, 485, 486, 487, 488, 490, 492, 496, 497, 498, 500, 501, 504, 505, 506, 507, 509, 511, 522, 527, 530, 533, 538, 540, 544, 551, 553, 554, 560, 561, 562, 563, 577, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 606, 623, 626, 628, 629, 630, 642, 644, 648, 654, 656, 658, 660, 661, 665, 676, 681, 682, 693, 709, 714, 715, 724, 725, 733, 749, 758, 763, 764, 765, 768, 778, 779, 782, 783, 794, 797, 798, 808, 818, 823, 828, 831, 832, 833, 834, 835, 836, 837, 838, 857, 861, 862, 863, 864, 870, 871, 872, 876, 877, 878, 879, 881, 897, 899, 902, 905, 907, 913, 917, 918, 923, 934, 948, 961, 962, 964, 972, 974, 975, 981, 983, 985, 986, 993, 995, 1000, 1006, 1027, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 79, 80, 81, 82, 85, 86, 91, 92, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 220, 221, 222, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 371, 372, 373, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 396, 399, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 426, 427, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 483, 489, 490, 491, 494, 496, 497, 498, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 702, 706, 707, 720, 730, 737, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 783, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 921, 933, 934, 936, 945, 946, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 974, 975, 976, 977, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 995, 997, 998, 999, 1000, 1001, 1006, 1011, 1015, 1016, 1018, 1019, 1020, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "drop": [4, 5, 71, 75, 86, 156, 168, 169, 170, 172, 199, 203, 217, 238, 242, 270, 311, 317, 320, 350, 382, 386, 406, 410, 412, 460, 463, 563, 564, 565, 566, 691, 696, 698, 777, 784, 856, 870, 876, 975, 981, 985, 993, 995, 1005, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 37, 39, 40, 47, 48, 50, 52, 53, 54, 55, 61, 71, 72, 75, 82, 86, 91, 92, 95, 96, 97, 98, 99, 105, 113, 114, 118, 120, 127, 130, 134, 140, 144, 155, 156, 160, 163, 168, 169, 180, 184, 186, 188, 191, 192, 193, 199, 204, 208, 211, 213, 214, 216, 217, 221, 222, 225, 228, 232, 233, 237, 245, 247, 249, 250, 256, 257, 261, 262, 267, 269, 270, 281, 283, 288, 289, 290, 293, 294, 295, 302, 305, 309, 312, 325, 327, 329, 332, 335, 336, 339, 341, 342, 343, 344, 346, 349, 350, 355, 356, 357, 358, 380, 387, 392, 403, 405, 413, 417, 434, 441, 460, 463, 527, 529, 532, 533, 535, 537, 539, 546, 581, 608, 627, 628, 681, 682, 697, 758, 774, 775, 776, 777, 800, 816, 825, 866, 867, 874, 875, 877, 880, 882, 883, 884, 886, 887, 888, 911, 913, 917, 918, 936, 960, 966, 975, 985, 992, 995, 1000, 1017, 1019, 1035, 1037, 1039, 1044], "holidai": [4, 170], "workingdai": [4, 170], "temp": [4, 170], "feel_temp": [4, 170], "humid": [4, 170, 992], "windspe": [4, 170], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 364, 365, 372, 373, 375, 376, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 392, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 756, 758, 759, 761, 762, 763, 764, 766, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 917, 918, 923, 928, 929, 931, 933, 934, 936, 937, 938, 939, 946, 947, 948, 950, 951, 953, 954, 955, 956, 959, 960, 966, 974, 975, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1007, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025], "spring": [4, 170], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 34, 39, 42, 44, 46, 47, 54, 55, 64, 67, 70, 71, 72, 73, 79, 81, 92, 99, 101, 104, 105, 111, 117, 118, 121, 124, 125, 134, 137, 151, 156, 157, 158, 159, 169, 170, 171, 172, 178, 179, 183, 185, 199, 200, 204, 205, 207, 215, 217, 220, 223, 235, 236, 238, 242, 245, 257, 258, 260, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 283, 287, 293, 296, 300, 301, 305, 306, 311, 312, 315, 317, 318, 319, 320, 326, 336, 338, 344, 345, 349, 350, 372, 378, 379, 380, 383, 392, 396, 403, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 418, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 511, 519, 520, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 631, 633, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 690, 691, 693, 694, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 710, 711, 714, 721, 722, 723, 724, 725, 726, 733, 737, 738, 745, 746, 749, 751, 756, 758, 762, 763, 764, 769, 773, 777, 778, 779, 780, 782, 784, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 808, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 915, 916, 917, 918, 928, 935, 946, 947, 950, 951, 955, 956, 959, 966, 971, 972, 974, 975, 981, 985, 988, 995, 999, 1000, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "6": [4, 6, 8, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 44, 46, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 67, 73, 74, 75, 78, 79, 80, 82, 85, 90, 95, 97, 105, 112, 120, 124, 125, 128, 130, 137, 143, 148, 151, 154, 156, 158, 159, 163, 164, 169, 170, 172, 175, 178, 179, 180, 183, 188, 192, 197, 199, 200, 201, 203, 213, 217, 220, 221, 222, 224, 228, 231, 232, 236, 239, 240, 245, 246, 247, 248, 250, 251, 254, 255, 259, 260, 261, 262, 263, 269, 270, 271, 272, 273, 275, 281, 285, 288, 296, 299, 301, 302, 305, 307, 309, 310, 312, 315, 318, 319, 320, 321, 324, 325, 328, 329, 336, 337, 339, 341, 344, 346, 350, 351, 357, 360, 372, 373, 375, 376, 378, 383, 384, 391, 395, 397, 398, 403, 405, 406, 409, 410, 412, 413, 414, 442, 444, 445, 446, 447, 448, 449, 458, 478, 479, 480, 481, 501, 520, 526, 534, 536, 537, 543, 549, 559, 565, 566, 589, 590, 607, 610, 611, 621, 623, 624, 626, 640, 641, 666, 685, 689, 695, 717, 723, 733, 737, 740, 741, 745, 746, 748, 764, 780, 783, 785, 792, 793, 795, 796, 801, 803, 804, 806, 811, 812, 815, 818, 819, 820, 821, 823, 832, 833, 834, 836, 837, 838, 845, 847, 848, 849, 864, 865, 867, 870, 872, 875, 876, 881, 912, 934, 937, 939, 948, 974, 975, 979, 981, 982, 985, 995, 996, 999, 1000, 1001, 1003, 1011, 1015, 1016, 1018, 1023, 1025, 1028, 1029, 1030, 1035, 1040, 1044], "clear": [4, 16, 55, 60, 72, 169, 170, 310, 373, 377, 378, 380, 390, 391, 392, 403, 406, 411, 911, 912, 974, 979, 1038, 1039, 1040], "9": [4, 7, 9, 12, 13, 24, 26, 27, 31, 32, 34, 42, 44, 50, 55, 58, 62, 64, 74, 82, 85, 91, 95, 98, 120, 121, 122, 123, 124, 129, 131, 137, 139, 140, 148, 154, 158, 164, 168, 169, 170, 180, 181, 190, 199, 212, 213, 216, 217, 220, 223, 232, 233, 238, 242, 245, 246, 247, 248, 254, 258, 263, 267, 269, 281, 285, 287, 288, 291, 292, 293, 299, 300, 302, 305, 307, 308, 309, 311, 312, 320, 321, 324, 325, 327, 328, 329, 336, 340, 346, 349, 351, 360, 375, 376, 384, 391, 395, 397, 398, 403, 406, 407, 409, 412, 413, 435, 439, 446, 453, 478, 479, 480, 481, 486, 516, 523, 530, 534, 535, 536, 543, 556, 563, 566, 579, 587, 603, 604, 623, 626, 630, 635, 643, 654, 657, 688, 695, 705, 718, 721, 736, 743, 764, 773, 774, 775, 792, 795, 797, 798, 812, 815, 821, 823, 826, 834, 835, 839, 840, 845, 848, 854, 855, 863, 869, 872, 934, 938, 974, 980, 981, 985, 989, 995, 999, 1000, 1003, 1011, 1015, 1020, 1023, 1025, 1028, 1029, 1030, 1032, 1041, 1043], "84": [4, 6, 70, 145, 190, 217, 307, 324, 360, 375, 412, 413, 783, 808, 985, 995, 1016], "14": [4, 11, 38, 49, 55, 60, 62, 63, 66, 68, 74, 81, 100, 143, 148, 170, 183, 188, 190, 217, 222, 228, 233, 259, 265, 266, 274, 281, 283, 297, 302, 308, 309, 320, 343, 346, 365, 373, 375, 376, 391, 395, 397, 398, 405, 409, 494, 506, 549, 550, 581, 582, 631, 639, 688, 808, 812, 863, 978, 981, 985, 995, 1000, 1003, 1011, 1025, 1027, 1028, 1030, 1031, 1035, 1040], "395": 4, "81": [4, 50, 242, 324, 325, 405, 695, 783, 794, 808, 985, 986, 988, 995], "0000": [4, 320], "02": [4, 12, 28, 30, 35, 44, 50, 52, 58, 62, 64, 68, 76, 82, 83, 85, 95, 98, 113, 120, 135, 148, 153, 158, 161, 168, 169, 173, 180, 217, 228, 236, 238, 243, 255, 261, 267, 276, 288, 299, 302, 303, 305, 307, 313, 329, 332, 350, 355, 372, 375, 383, 409, 437, 441, 593, 654, 672, 794, 808, 876, 892, 906, 981], "13": [4, 6, 10, 11, 44, 74, 100, 105, 120, 122, 123, 125, 163, 165, 169, 175, 185, 208, 220, 225, 226, 238, 254, 261, 264, 266, 302, 305, 309, 336, 373, 375, 378, 384, 391, 409, 417, 506, 509, 528, 529, 547, 548, 578, 631, 635, 729, 812, 841, 856, 863, 889, 890, 981, 985, 986, 991, 992, 995, 1000, 1003, 1011, 1025, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1039], "635": [4, 612], "80": [4, 6, 11, 16, 27, 67, 81, 101, 131, 140, 145, 170, 178, 236, 307, 311, 324, 339, 341, 349, 356, 360, 373, 375, 378, 403, 409, 414, 440, 506, 537, 709, 794, 808, 878, 891, 910, 974, 980, 981, 985, 992, 998, 1001, 1020], "75": [4, 6, 7, 10, 33, 44, 55, 82, 114, 145, 158, 159, 164, 169, 175, 178, 181, 190, 206, 217, 242, 247, 248, 260, 269, 273, 288, 305, 318, 346, 349, 360, 445, 547, 654, 702, 708, 729, 734, 740, 748, 751, 789, 794, 875, 887, 894, 910, 985, 987, 995, 1001, 1004, 1016, 1029], "17374": 4, "19": [4, 156, 169, 170, 173, 199, 203, 218, 222, 250, 309, 310, 322, 325, 375, 382, 392, 405, 406, 413, 416, 440, 488, 512, 513, 514, 532, 536, 537, 543, 545, 546, 553, 554, 555, 556, 560, 561, 562, 578, 585, 644, 654, 655, 662, 663, 664, 667, 668, 670, 672, 674, 683, 703, 776, 780, 794, 808, 820, 825, 826, 828, 829, 843, 844, 863, 874, 895, 899, 902, 905, 906, 907, 908, 974, 985, 995, 1003, 1023, 1025, 1027, 1028, 1029, 1030, 1032, 1035], "misti": [4, 170], "10": [4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 20, 25, 26, 27, 30, 31, 32, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 82, 85, 86, 92, 97, 98, 99, 100, 101, 105, 106, 111, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 128, 129, 132, 134, 138, 140, 141, 145, 148, 152, 153, 155, 157, 158, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 183, 189, 190, 192, 193, 197, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 215, 216, 217, 221, 222, 228, 231, 232, 233, 234, 235, 237, 238, 239, 241, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 268, 271, 274, 278, 281, 288, 299, 300, 301, 302, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 321, 322, 324, 325, 326, 328, 334, 335, 336, 338, 339, 341, 343, 344, 346, 349, 350, 351, 360, 364, 372, 373, 374, 375, 376, 378, 380, 383, 384, 390, 391, 392, 395, 396, 397, 398, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 434, 439, 443, 445, 447, 448, 449, 455, 456, 458, 471, 488, 489, 496, 497, 498, 500, 506, 507, 508, 509, 512, 516, 517, 520, 524, 527, 531, 532, 533, 534, 535, 537, 538, 540, 542, 544, 548, 551, 552, 553, 554, 557, 558, 560, 561, 562, 563, 564, 566, 578, 579, 589, 590, 595, 596, 607, 613, 615, 623, 626, 628, 630, 631, 636, 638, 639, 640, 645, 655, 660, 661, 662, 663, 665, 666, 668, 669, 671, 672, 673, 674, 681, 682, 687, 688, 695, 701, 711, 721, 737, 751, 764, 792, 793, 794, 795, 796, 797, 798, 805, 808, 809, 810, 811, 812, 814, 815, 816, 821, 823, 825, 826, 832, 833, 834, 836, 837, 838, 844, 853, 854, 855, 857, 863, 867, 870, 871, 874, 886, 894, 900, 903, 905, 906, 910, 934, 938, 949, 953, 955, 971, 974, 975, 980, 981, 982, 983, 985, 986, 988, 989, 991, 992, 995, 999, 1000, 1003, 1011, 1015, 1016, 1018, 1019, 1020, 1024, 1025, 1028, 1029, 1030, 1035, 1037, 1038, 1039, 1041, 1042], "66": [4, 224, 311, 349, 375, 405, 528, 628, 708, 778, 779, 790, 876, 985, 997], "880": 4, "60": [4, 6, 16, 59, 73, 82, 199, 211, 217, 220, 221, 242, 248, 268, 273, 325, 339, 349, 372, 405, 409, 446, 453, 709, 794, 985, 995, 1016, 1027, 1030], "11": [4, 14, 15, 19, 35, 74, 81, 97, 98, 148, 154, 169, 170, 183, 199, 200, 201, 204, 238, 257, 265, 266, 272, 276, 286, 287, 289, 309, 317, 320, 321, 335, 339, 344, 349, 351, 372, 375, 376, 384, 391, 405, 408, 409, 412, 446, 453, 478, 479, 480, 481, 497, 513, 514, 608, 646, 652, 666, 711, 717, 718, 719, 773, 774, 775, 795, 798, 812, 815, 822, 849, 906, 949, 981, 983, 995, 999, 1000, 1003, 1011, 1018, 1020, 1025, 1029, 1033, 1035, 1036, 1038, 1041, 1042], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 42, 43, 46, 47, 50, 54, 55, 61, 67, 78, 82, 92, 95, 101, 103, 105, 113, 117, 120, 121, 124, 127, 131, 132, 134, 140, 143, 144, 145, 148, 157, 161, 168, 170, 171, 181, 188, 189, 191, 195, 196, 198, 199, 200, 203, 208, 211, 212, 213, 214, 216, 223, 232, 238, 247, 249, 250, 260, 261, 263, 264, 266, 271, 272, 274, 278, 283, 287, 288, 289, 290, 291, 294, 302, 309, 310, 311, 316, 317, 318, 319, 321, 324, 325, 328, 333, 335, 339, 341, 346, 350, 351, 356, 357, 371, 375, 378, 380, 382, 383, 384, 395, 405, 412, 413, 437, 442, 443, 445, 460, 461, 465, 467, 468, 474, 484, 485, 486, 487, 488, 490, 492, 493, 496, 498, 500, 501, 508, 511, 512, 519, 527, 532, 533, 538, 541, 542, 544, 548, 551, 552, 555, 556, 557, 558, 559, 565, 566, 578, 585, 588, 590, 593, 595, 625, 626, 641, 645, 654, 662, 663, 664, 672, 674, 692, 700, 704, 709, 712, 720, 721, 734, 751, 752, 762, 787, 788, 792, 793, 794, 808, 819, 820, 821, 824, 826, 829, 830, 831, 834, 835, 842, 843, 854, 855, 856, 857, 859, 861, 862, 870, 871, 872, 873, 878, 892, 893, 895, 896, 901, 909, 915, 917, 918, 974, 981, 985, 988, 991, 992, 995, 998, 1003, 1008, 1009, 1012, 1018, 1022, 1023, 1025, 1027, 1033, 1036, 1039, 1041, 1042], "17376": 4, "21": [4, 73, 148, 169, 188, 200, 214, 217, 225, 238, 250, 283, 302, 307, 309, 321, 375, 376, 380, 382, 395, 402, 412, 413, 437, 441, 470, 528, 557, 558, 559, 565, 566, 584, 585, 587, 623, 665, 683, 749, 794, 796, 808, 820, 863, 870, 872, 878, 895, 911, 981, 986, 995, 1003, 1023, 1025, 1027, 1028, 1030, 1034, 1035, 1037], "17377": 4, "22": [4, 42, 50, 92, 166, 169, 170, 216, 250, 302, 305, 309, 314, 322, 325, 351, 378, 382, 383, 395, 402, 433, 444, 468, 484, 485, 491, 492, 500, 511, 520, 527, 533, 538, 541, 542, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 590, 623, 624, 628, 630, 641, 643, 647, 649, 651, 654, 655, 657, 659, 661, 665, 684, 688, 698, 700, 709, 752, 764, 773, 778, 779, 783, 794, 795, 799, 808, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 841, 843, 845, 847, 848, 849, 854, 855, 856, 858, 861, 877, 897, 899, 900, 901, 902, 903, 905, 906, 907, 908, 928, 929, 985, 995, 1003, 1023, 1025, 1027, 1030, 1035, 1038, 1040], "56": [4, 11, 98, 208, 217, 232, 384, 709, 730, 985, 995, 1023, 1027], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 55, 60, 62, 64, 65, 70, 72, 74, 75, 81, 85, 90, 91, 92, 95, 96, 99, 100, 104, 106, 111, 114, 116, 117, 121, 123, 124, 126, 129, 132, 133, 137, 147, 148, 152, 154, 156, 157, 159, 160, 164, 168, 169, 170, 172, 175, 178, 179, 184, 185, 190, 193, 199, 200, 203, 206, 207, 209, 215, 217, 220, 221, 222, 224, 225, 229, 232, 233, 234, 236, 240, 241, 242, 245, 246, 247, 249, 250, 251, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 270, 271, 278, 281, 285, 287, 291, 295, 299, 301, 302, 305, 307, 308, 309, 310, 311, 315, 320, 324, 325, 326, 328, 329, 333, 336, 340, 341, 343, 344, 345, 349, 350, 351, 357, 360, 365, 372, 373, 375, 376, 378, 383, 384, 395, 403, 405, 409, 410, 412, 413, 414, 435, 439, 440, 443, 445, 446, 448, 458, 465, 466, 467, 468, 469, 470, 471, 472, 479, 480, 481, 483, 486, 498, 499, 510, 527, 530, 534, 536, 539, 541, 543, 545, 546, 551, 552, 561, 566, 578, 584, 585, 586, 587, 624, 625, 644, 654, 666, 672, 685, 688, 689, 690, 691, 695, 698, 702, 703, 705, 711, 717, 722, 723, 724, 736, 740, 741, 745, 746, 748, 777, 778, 780, 783, 784, 785, 786, 790, 792, 795, 796, 801, 804, 811, 812, 815, 816, 823, 826, 835, 837, 838, 844, 854, 855, 856, 862, 869, 876, 878, 899, 902, 932, 934, 938, 974, 975, 981, 982, 983, 985, 988, 993, 995, 999, 1003, 1009, 1011, 1015, 1016, 1017, 1018, 1019, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1040, 1041, 1043], "9981": 4, "17378": 4, "23": [4, 19, 26, 34, 50, 98, 148, 166, 207, 218, 225, 242, 250, 302, 309, 314, 317, 318, 322, 325, 328, 375, 376, 378, 384, 395, 397, 398, 412, 418, 428, 436, 443, 448, 450, 458, 461, 463, 464, 471, 478, 479, 480, 486, 488, 496, 497, 498, 500, 501, 506, 508, 510, 518, 520, 534, 535, 536, 539, 543, 550, 552, 554, 556, 557, 558, 561, 564, 565, 566, 603, 604, 607, 623, 626, 628, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 671, 674, 675, 676, 713, 725, 773, 823, 829, 830, 831, 840, 848, 855, 858, 870, 877, 885, 886, 895, 898, 900, 903, 906, 908, 915, 917, 918, 928, 929, 934, 985, 1003, 1023, 1025, 1027, 1028, 1034, 1035, 1036, 1039], "65": [4, 33, 170, 199, 269, 311, 405, 435, 498, 593, 695, 736, 787, 788, 992, 1016, 1027, 1028, 1029], "17379": [4, 1039], "row": [4, 19, 20, 21, 25, 27, 34, 44, 60, 75, 90, 92, 117, 120, 129, 132, 163, 199, 200, 201, 229, 232, 238, 239, 307, 358, 364, 373, 380, 387, 391, 392, 402, 405, 408, 413, 420, 438, 439, 443, 445, 446, 447, 449, 452, 453, 455, 460, 464, 484, 486, 487, 488, 489, 490, 491, 496, 497, 498, 500, 501, 506, 507, 509, 530, 538, 544, 547, 586, 587, 616, 628, 639, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 688, 692, 693, 706, 714, 715, 720, 753, 754, 758, 761, 763, 764, 765, 766, 768, 769, 771, 773, 774, 775, 776, 792, 793, 826, 832, 833, 834, 835, 836, 842, 845, 846, 847, 848, 849, 852, 863, 867, 869, 870, 872, 884, 887, 888, 891, 895, 913, 917, 918, 934, 956, 959, 963, 965, 967, 968, 972, 974, 975, 979, 981, 983, 985, 986, 988, 995, 996, 999, 1000, 1006, 1034, 1035, 1036, 1037, 1042], "onli": [4, 7, 11, 13, 14, 20, 24, 25, 26, 27, 30, 33, 34, 37, 39, 40, 45, 49, 53, 55, 58, 66, 70, 71, 72, 74, 75, 81, 90, 98, 99, 106, 111, 113, 118, 119, 120, 121, 123, 130, 131, 143, 144, 145, 148, 151, 153, 156, 158, 160, 164, 166, 168, 169, 170, 175, 177, 182, 183, 188, 195, 199, 200, 202, 205, 207, 208, 217, 218, 220, 221, 228, 230, 232, 234, 235, 239, 242, 245, 246, 247, 250, 251, 256, 258, 260, 262, 263, 266, 267, 268, 269, 271, 272, 278, 283, 289, 291, 294, 296, 301, 305, 306, 310, 311, 317, 318, 324, 325, 327, 332, 333, 336, 340, 341, 344, 345, 349, 350, 351, 354, 355, 358, 360, 364, 365, 366, 371, 372, 373, 375, 376, 378, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 395, 396, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 485, 486, 487, 488, 490, 492, 493, 496, 497, 498, 499, 500, 501, 504, 505, 506, 508, 512, 515, 519, 520, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 695, 703, 705, 709, 721, 724, 725, 729, 731, 732, 733, 736, 737, 738, 751, 753, 755, 769, 773, 774, 775, 776, 778, 779, 782, 783, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 808, 812, 816, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 915, 917, 918, 921, 923, 926, 934, 936, 939, 941, 946, 951, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1005, 1006, 1009, 1018, 1019, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "present": [4, 5, 43, 49, 92, 95, 103, 116, 117, 124, 127, 147, 148, 157, 160, 178, 181, 183, 188, 199, 228, 231, 235, 250, 258, 263, 266, 269, 270, 283, 305, 308, 310, 350, 375, 376, 380, 383, 390, 392, 396, 405, 407, 410, 412, 413, 423, 424, 427, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 485, 486, 487, 488, 492, 496, 497, 498, 499, 500, 501, 506, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 545, 546, 559, 562, 565, 566, 577, 578, 579, 584, 585, 587, 613, 623, 624, 625, 626, 646, 650, 673, 684, 685, 686, 687, 708, 724, 725, 733, 764, 778, 779, 782, 792, 793, 794, 797, 798, 806, 808, 821, 839, 840, 841, 843, 845, 847, 848, 849, 856, 861, 869, 870, 871, 872, 873, 875, 878, 889, 890, 901, 909, 911, 912, 934, 969, 984, 985, 986, 987, 992, 995, 1004, 1006, 1030, 1035, 1037, 1038, 1039, 1041, 1042], "date": [4, 70, 148, 156, 170, 373, 375, 378, 382, 393, 406, 1006], "datetim": [4, 17, 156, 170], "http": [4, 6, 7, 8, 12, 17, 24, 71, 125, 131, 148, 160, 164, 175, 199, 207, 215, 217, 225, 229, 278, 281, 283, 301, 372, 373, 375, 376, 378, 382, 383, 384, 386, 390, 392, 395, 401, 405, 409, 414, 438, 445, 448, 458, 483, 488, 492, 496, 498, 504, 505, 506, 526, 527, 530, 532, 533, 537, 591, 632, 637, 640, 645, 654, 660, 662, 663, 664, 667, 672, 675, 678, 679, 681, 682, 687, 688, 691, 701, 717, 718, 719, 753, 754, 764, 832, 834, 835, 836, 839, 840, 845, 846, 847, 848, 853, 875, 890, 891, 892, 905, 906, 981, 983, 985, 988, 998, 1001, 1008, 1009, 1016, 1032, 1037], "pydata": [4, 1004, 1009], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 61, 66, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 156, 160, 169, 170, 171, 175, 180, 190, 191, 199, 207, 215, 217, 221, 229, 230, 231, 233, 235, 239, 240, 241, 242, 250, 258, 260, 261, 263, 267, 272, 281, 301, 302, 311, 316, 317, 319, 320, 324, 325, 326, 329, 349, 350, 351, 358, 365, 371, 376, 378, 381, 384, 386, 393, 395, 409, 591, 632, 664, 667, 672, 691, 701, 764, 839, 840, 845, 846, 847, 848, 875, 891, 905, 906, 981, 985, 1001, 1003, 1022, 1035, 1039], "stabl": [4, 160, 169, 193, 197, 201, 283, 316, 344, 350, 376, 378, 382, 384, 387, 392, 395, 409, 413, 417, 467, 468, 474, 529, 651, 668, 670, 683, 688, 719, 747, 933, 934, 981, 987, 988, 995, 1006, 1023, 1027, 1028, 1033, 1038, 1040], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 148, 156, 160, 169, 170, 171, 175, 180, 229, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 373, 375, 378, 379, 381, 382, 386, 406, 409, 413, 483, 504, 505, 654, 832, 836, 930, 983, 1005, 1006, 1038, 1039, 1040, 1041, 1042, 1044], "compon": [4, 5, 17, 44, 58, 62, 70, 73, 84, 85, 87, 90, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 129, 156, 166, 168, 183, 220, 232, 233, 236, 245, 246, 249, 250, 251, 259, 261, 284, 297, 302, 310, 317, 364, 370, 373, 378, 380, 384, 387, 390, 401, 404, 405, 406, 408, 413, 415, 417, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 498, 500, 511, 517, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 569, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 691, 724, 725, 733, 778, 779, 782, 792, 793, 794, 797, 798, 808, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 933, 934, 977, 982, 984, 995, 997, 1000, 1005, 1006, 1007, 1009, 1014, 1020, 1021, 1022, 1027, 1029, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "now": [4, 5, 7, 17, 20, 53, 57, 71, 86, 100, 111, 112, 116, 118, 120, 121, 124, 125, 131, 134, 148, 151, 156, 157, 158, 164, 168, 169, 170, 171, 175, 178, 180, 185, 187, 188, 200, 201, 203, 224, 233, 235, 256, 260, 263, 271, 272, 278, 286, 310, 316, 317, 319, 320, 321, 326, 336, 349, 350, 351, 360, 364, 366, 373, 378, 379, 380, 384, 390, 391, 392, 402, 405, 409, 410, 412, 413, 417, 489, 504, 505, 508, 532, 545, 575, 576, 578, 623, 626, 645, 649, 654, 659, 680, 721, 751, 792, 793, 797, 798, 829, 844, 857, 960, 974, 975, 981, 985, 991, 994, 995, 1000, 1001, 1004, 1006, 1011, 1018, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "introspect": [4, 6, 71, 384, 555, 556, 584, 585, 587, 995, 1016], "value_count": [4, 170, 278], "11413": 4, "4544": 4, "rain": [4, 170, 981], "1419": 4, "heavy_rain": [4, 170], "name": [4, 6, 7, 9, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 58, 62, 71, 73, 75, 82, 96, 102, 114, 115, 116, 117, 121, 122, 124, 131, 169, 170, 171, 188, 197, 199, 201, 203, 205, 206, 214, 216, 217, 220, 221, 228, 234, 235, 237, 238, 242, 247, 255, 257, 258, 261, 263, 264, 267, 269, 270, 278, 283, 291, 292, 299, 300, 307, 309, 311, 319, 320, 328, 341, 349, 350, 351, 365, 366, 372, 373, 376, 378, 380, 382, 383, 385, 386, 392, 395, 399, 402, 405, 409, 412, 413, 415, 419, 421, 426, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 693, 694, 695, 696, 698, 704, 705, 709, 727, 728, 737, 774, 775, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 806, 808, 812, 816, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 916, 917, 918, 921, 925, 926, 927, 929, 941, 942, 943, 945, 948, 955, 969, 973, 974, 979, 981, 985, 986, 992, 993, 995, 1001, 1006, 1015, 1016, 1018, 1020, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 65, 70, 71, 123, 125, 126, 127, 152, 153, 154, 164, 169, 170, 201, 217, 242, 245, 258, 264, 268, 278, 290, 296, 311, 318, 319, 321, 325, 358, 372, 373, 378, 380, 390, 392, 401, 406, 409, 420, 423, 438, 439, 443, 444, 445, 446, 447, 449, 460, 462, 463, 465, 468, 470, 484, 485, 486, 487, 492, 493, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 510, 518, 538, 553, 554, 555, 556, 559, 560, 561, 562, 577, 578, 581, 582, 584, 585, 587, 589, 590, 598, 602, 623, 624, 625, 626, 628, 629, 636, 637, 640, 641, 642, 648, 652, 653, 656, 657, 658, 659, 660, 661, 667, 669, 671, 693, 695, 701, 710, 711, 726, 733, 736, 750, 781, 800, 818, 820, 821, 833, 837, 838, 840, 848, 862, 868, 870, 871, 877, 878, 891, 899, 900, 901, 902, 903, 905, 906, 907, 908, 914, 915, 917, 918, 950, 960, 961, 962, 963, 966, 972, 975, 995, 998, 1000, 1011, 1028, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "int64": [4, 13, 54, 71, 169, 170, 278, 311, 358, 392, 413, 423, 438, 444, 446, 584, 636, 710, 711, 833, 862, 1035, 1038, 1040, 1042, 1043, 1044], "cannot": [4, 40, 56, 75, 82, 95, 100, 119, 169, 170, 183, 199, 217, 235, 305, 336, 344, 366, 377, 379, 384, 392, 393, 405, 406, 407, 409, 410, 412, 413, 415, 461, 517, 534, 535, 536, 539, 543, 606, 609, 610, 611, 613, 615, 616, 618, 619, 621, 647, 651, 678, 688, 707, 713, 773, 797, 798, 844, 845, 847, 848, 849, 857, 858, 867, 868, 879, 915, 917, 918, 974, 975, 979, 981, 982, 986, 991, 995, 1000, 1001, 1006, 1009, 1015, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 56, 58, 64, 70, 71, 75, 85, 86, 95, 98, 100, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 131, 132, 133, 137, 145, 151, 152, 153, 156, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 175, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 199, 200, 201, 206, 207, 208, 211, 213, 214, 217, 228, 231, 233, 237, 247, 249, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 283, 286, 289, 290, 291, 292, 294, 296, 299, 300, 301, 305, 307, 309, 310, 315, 318, 323, 324, 325, 328, 329, 330, 332, 335, 343, 344, 351, 353, 356, 357, 359, 360, 364, 365, 366, 370, 373, 375, 380, 383, 390, 391, 392, 399, 401, 403, 405, 406, 407, 408, 410, 412, 413, 414, 415, 417, 433, 436, 437, 439, 440, 443, 445, 447, 448, 449, 450, 455, 461, 465, 466, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 485, 489, 492, 493, 494, 496, 500, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 623, 624, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 687, 688, 692, 699, 736, 783, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 862, 863, 866, 867, 870, 871, 875, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 959, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 995, 999, 1000, 1001, 1005, 1006, 1007, 1009, 1012, 1015, 1016, 1022, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 56, 67, 68, 70, 75, 81, 82, 94, 100, 105, 107, 109, 111, 114, 115, 116, 117, 119, 120, 126, 128, 129, 130, 131, 137, 138, 139, 140, 145, 148, 151, 154, 156, 160, 163, 164, 167, 171, 172, 173, 174, 176, 185, 187, 188, 203, 213, 217, 224, 226, 227, 228, 233, 236, 238, 241, 253, 257, 259, 260, 263, 265, 266, 268, 274, 276, 278, 283, 287, 288, 289, 290, 291, 296, 298, 301, 302, 303, 305, 306, 310, 312, 314, 322, 323, 327, 329, 330, 335, 340, 342, 344, 349, 350, 351, 354, 355, 356, 357, 360, 365, 367, 370, 371, 372, 373, 375, 377, 381, 384, 385, 386, 387, 391, 392, 394, 396, 399, 400, 401, 402, 403, 405, 406, 407, 409, 411, 413, 414, 415, 419, 420, 422, 423, 424, 427, 428, 429, 433, 434, 435, 438, 439, 442, 443, 445, 446, 453, 455, 460, 461, 463, 464, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 504, 505, 506, 508, 510, 511, 512, 513, 514, 516, 517, 518, 520, 521, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 567, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 595, 598, 599, 606, 607, 610, 615, 618, 622, 624, 626, 628, 630, 634, 636, 637, 639, 640, 641, 642, 644, 648, 653, 654, 664, 665, 672, 673, 674, 676, 684, 685, 686, 687, 688, 692, 696, 697, 698, 704, 709, 713, 714, 717, 718, 719, 721, 730, 736, 737, 738, 743, 751, 773, 774, 775, 780, 783, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 832, 833, 834, 835, 836, 839, 841, 846, 853, 854, 855, 856, 857, 858, 860, 862, 864, 867, 869, 870, 871, 872, 875, 876, 877, 878, 881, 889, 890, 892, 893, 894, 895, 897, 898, 899, 902, 905, 906, 907, 908, 920, 928, 929, 951, 952, 953, 974, 975, 977, 978, 979, 981, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 996, 999, 1000, 1001, 1002, 1004, 1008, 1013, 1015, 1016, 1022, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "simplifi": [4, 71, 187, 336, 377, 379, 383, 405, 408, 511, 558, 856, 857, 985, 987, 995], "represent": [4, 12, 17, 20, 26, 53, 71, 72, 95, 98, 116, 118, 119, 127, 128, 129, 131, 134, 145, 156, 169, 171, 175, 180, 183, 220, 221, 222, 229, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 278, 293, 302, 311, 317, 319, 320, 326, 350, 351, 358, 360, 370, 372, 381, 392, 399, 405, 406, 410, 411, 412, 459, 527, 531, 533, 536, 538, 544, 562, 584, 586, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 626, 639, 642, 648, 654, 655, 656, 658, 662, 663, 664, 672, 673, 674, 764, 792, 793, 800, 816, 853, 866, 870, 871, 875, 877, 890, 897, 909, 911, 914, 930, 951, 977, 982, 984, 986, 988, 989, 990, 992, 995, 1000, 1006, 1011, 1012, 1014, 1018, 1020, 1027, 1028, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "collaps": [4, 170, 238, 305, 336, 390], "those": [4, 7, 12, 17, 19, 55, 60, 71, 112, 124, 148, 160, 168, 170, 171, 172, 199, 201, 203, 217, 225, 232, 235, 237, 238, 251, 254, 260, 263, 266, 278, 300, 305, 310, 333, 336, 349, 350, 351, 364, 365, 372, 378, 380, 382, 383, 384, 385, 390, 392, 393, 395, 402, 403, 405, 409, 410, 412, 413, 415, 444, 446, 457, 460, 464, 490, 491, 492, 499, 553, 554, 560, 561, 565, 566, 577, 688, 693, 708, 714, 731, 794, 797, 798, 806, 808, 815, 839, 840, 841, 843, 845, 846, 847, 848, 849, 897, 898, 899, 902, 905, 906, 907, 908, 945, 974, 977, 981, 984, 985, 987, 988, 989, 992, 995, 1001, 1004, 1005, 1009, 1011, 1020, 1027, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1043], "replac": [4, 25, 80, 99, 111, 151, 158, 163, 170, 185, 200, 263, 283, 307, 312, 317, 338, 376, 378, 380, 382, 384, 387, 392, 399, 406, 409, 412, 413, 437, 441, 460, 499, 511, 551, 552, 559, 578, 584, 585, 586, 587, 603, 604, 623, 626, 630, 635, 637, 723, 780, 800, 806, 808, 816, 856, 857, 860, 880, 893, 900, 954, 956, 959, 974, 975, 981, 985, 995, 1000, 1001, 1005, 1006, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "to_replac": [4, 170], "valu": [4, 5, 7, 11, 12, 13, 16, 17, 19, 20, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 55, 60, 61, 62, 66, 71, 73, 75, 78, 80, 82, 95, 98, 106, 109, 111, 113, 115, 116, 117, 118, 119, 121, 124, 125, 127, 128, 130, 131, 143, 144, 147, 151, 154, 155, 157, 159, 165, 168, 169, 170, 171, 172, 175, 178, 179, 181, 183, 185, 187, 188, 189, 190, 192, 197, 199, 200, 201, 203, 205, 214, 217, 219, 223, 226, 228, 229, 230, 231, 232, 233, 234, 238, 241, 242, 245, 251, 254, 256, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 273, 275, 283, 286, 296, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 317, 327, 336, 340, 341, 344, 349, 350, 351, 354, 360, 364, 365, 366, 367, 370, 371, 372, 373, 375, 379, 380, 381, 383, 384, 385, 387, 390, 391, 392, 394, 395, 396, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 486, 487, 489, 492, 493, 494, 497, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 764, 766, 769, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 805, 806, 808, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 914, 915, 916, 917, 918, 921, 922, 923, 924, 926, 934, 936, 942, 945, 946, 947, 948, 949, 953, 961, 962, 963, 974, 977, 978, 979, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 996, 998, 999, 1000, 1007, 1009, 1011, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "inplac": [4, 170, 217, 238, 272, 450, 478, 479, 480, 481, 852, 860, 863, 866, 867, 869, 873, 874, 875, 877, 880, 882, 883, 884, 885, 886, 887, 888, 958, 961, 962, 963, 967, 968, 1036], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 86, 92, 100, 111, 114, 116, 118, 121, 124, 145, 151, 157, 166, 167, 171, 173, 185, 190, 199, 200, 201, 203, 207, 217, 232, 235, 238, 239, 246, 247, 250, 251, 267, 283, 310, 344, 349, 350, 360, 364, 365, 378, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 396, 401, 403, 405, 406, 407, 409, 412, 413, 414, 428, 460, 461, 463, 464, 465, 478, 479, 480, 492, 519, 528, 532, 534, 537, 548, 550, 551, 552, 554, 556, 558, 559, 561, 563, 564, 566, 568, 581, 582, 584, 585, 587, 591, 593, 602, 607, 623, 628, 629, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 670, 671, 674, 675, 691, 700, 701, 712, 730, 783, 789, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 843, 847, 848, 849, 850, 855, 858, 863, 870, 871, 874, 877, 878, 887, 888, 895, 897, 898, 899, 900, 901, 902, 903, 906, 908, 948, 974, 981, 984, 985, 987, 991, 995, 999, 1000, 1001, 1008, 1016, 1019, 1020, 1022, 1027, 1028, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "balanc": [4, 6, 53, 66, 111, 166, 203, 204, 253, 263, 276, 305, 366, 390, 392, 403, 409, 410, 412, 498, 511, 530, 536, 537, 543, 553, 557, 560, 636, 654, 655, 662, 664, 670, 671, 672, 699, 704, 724, 738, 777, 782, 794, 795, 812, 857, 897, 899, 902, 905, 907, 922, 923, 974, 1000, 1001, 1016, 1027, 1029, 1032, 1033, 1036, 1037, 1041], "fall": [4, 124, 158, 259, 260, 378, 380, 404, 405, 413, 430, 442, 443, 504, 505, 722, 723, 789, 874, 886, 984, 985, 995, 1011, 1019, 1036], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 20, 24, 47, 55, 64, 65, 72, 78, 89, 105, 119, 120, 121, 125, 140, 156, 168, 169, 172, 175, 188, 192, 195, 199, 200, 205, 213, 217, 222, 232, 235, 238, 242, 247, 255, 258, 260, 267, 281, 302, 305, 310, 311, 312, 317, 318, 344, 349, 351, 360, 364, 365, 373, 378, 380, 383, 384, 387, 392, 395, 396, 399, 405, 406, 407, 409, 410, 411, 412, 413, 415, 417, 436, 439, 442, 443, 445, 446, 451, 452, 453, 455, 460, 484, 485, 486, 491, 493, 511, 530, 531, 535, 536, 537, 539, 543, 547, 549, 551, 552, 553, 555, 559, 560, 563, 577, 584, 587, 589, 590, 593, 602, 603, 604, 606, 618, 623, 627, 636, 654, 655, 661, 672, 681, 682, 684, 685, 689, 693, 695, 696, 698, 700, 708, 709, 714, 721, 724, 725, 733, 735, 736, 737, 749, 751, 773, 777, 778, 779, 782, 783, 784, 789, 794, 795, 797, 798, 799, 801, 805, 808, 812, 813, 818, 825, 826, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 847, 854, 857, 868, 870, 871, 872, 876, 877, 878, 881, 882, 883, 885, 886, 887, 888, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 923, 934, 949, 954, 975, 981, 982, 985, 986, 988, 989, 995, 998, 999, 1000, 1001, 1006, 1015, 1017, 1018, 1020, 1027, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "sensit": [4, 44, 55, 80, 81, 114, 124, 170, 201, 202, 203, 228, 305, 336, 365, 366, 393, 407, 412, 448, 458, 688, 708, 709, 783, 877, 980, 981, 982, 984, 985, 989, 991, 999, 1000, 1011, 1019, 1031], "splitter": [4, 321, 392, 396, 409, 433, 468, 563, 564, 590, 598, 643, 647, 649, 651, 655, 657, 659, 661, 669, 671, 794, 796, 797, 798, 799, 800, 808, 809, 810, 811, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 905, 906, 907, 908, 1001, 1006, 1033, 1034, 1035, 1036, 1043, 1044], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 55, 68, 71, 72, 98, 111, 118, 119, 121, 122, 124, 144, 154, 166, 172, 175, 179, 188, 201, 206, 217, 227, 243, 253, 254, 257, 258, 260, 263, 265, 266, 267, 269, 271, 272, 274, 276, 281, 292, 296, 310, 312, 317, 321, 336, 340, 349, 360, 367, 371, 373, 380, 384, 392, 394, 404, 406, 413, 414, 415, 443, 445, 460, 462, 484, 487, 488, 489, 492, 505, 516, 532, 547, 557, 558, 559, 563, 564, 587, 590, 598, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 627, 628, 629, 630, 643, 649, 655, 669, 671, 693, 695, 697, 698, 699, 700, 701, 707, 709, 710, 711, 713, 714, 721, 722, 731, 732, 737, 749, 750, 751, 752, 781, 790, 792, 793, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 823, 824, 828, 834, 837, 838, 843, 855, 857, 858, 864, 867, 870, 871, 875, 876, 877, 882, 883, 885, 886, 887, 888, 899, 902, 905, 920, 928, 959, 977, 981, 983, 987, 988, 991, 992, 993, 996, 999, 1001, 1005, 1009, 1011, 1012, 1015, 1016, 1018, 1021, 1022, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040], "forecast": [4, 150, 161, 166, 260, 403, 415, 492, 607, 611, 618, 619, 621, 985, 1005], "realist": [4, 8, 262, 269, 270, 333, 373, 985], "gap": [4, 349, 373, 409, 467, 468, 474, 584, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 815, 905, 906, 907, 908, 981, 982, 1035, 1039, 1041], "between": [4, 5, 8, 9, 11, 12, 20, 34, 37, 38, 39, 40, 42, 43, 53, 60, 61, 66, 85, 90, 98, 100, 104, 111, 114, 117, 121, 124, 143, 151, 156, 157, 159, 166, 168, 169, 170, 171, 178, 183, 185, 190, 194, 195, 199, 200, 201, 203, 204, 207, 217, 220, 228, 233, 235, 238, 253, 256, 259, 260, 261, 262, 263, 265, 266, 267, 269, 276, 278, 285, 289, 290, 292, 293, 305, 310, 312, 318, 327, 336, 340, 344, 349, 350, 351, 358, 360, 364, 365, 373, 378, 380, 387, 390, 391, 392, 393, 396, 399, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 426, 436, 437, 440, 441, 442, 446, 448, 449, 450, 452, 453, 454, 459, 465, 466, 467, 468, 469, 470, 471, 472, 487, 489, 490, 491, 492, 493, 494, 498, 510, 511, 517, 520, 523, 530, 532, 533, 534, 535, 536, 537, 542, 543, 545, 549, 550, 555, 556, 558, 559, 560, 561, 580, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 607, 616, 623, 628, 629, 630, 635, 638, 641, 642, 643, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 672, 674, 675, 677, 680, 684, 686, 688, 690, 691, 692, 695, 697, 699, 700, 701, 703, 705, 706, 710, 711, 712, 713, 715, 719, 720, 721, 724, 725, 726, 729, 731, 732, 738, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 781, 782, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 799, 803, 811, 812, 813, 814, 815, 822, 823, 825, 827, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 861, 864, 865, 867, 868, 870, 871, 874, 875, 876, 878, 883, 886, 887, 891, 897, 898, 902, 905, 906, 907, 908, 910, 931, 942, 943, 954, 974, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1002, 1006, 1018, 1019, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "side": [4, 16, 27, 59, 124, 192, 203, 217, 222, 231, 305, 340, 349, 360, 373, 390, 403, 406, 409, 410, 413, 511, 981, 982, 985, 987, 1000, 1036], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 70, 100, 111, 116, 117, 118, 120, 123, 124, 125, 126, 127, 137, 144, 148, 168, 169, 172, 183, 194, 195, 199, 202, 207, 217, 229, 235, 238, 246, 247, 254, 255, 258, 260, 265, 267, 270, 278, 286, 292, 299, 301, 306, 307, 312, 319, 321, 327, 336, 349, 351, 358, 373, 378, 385, 391, 392, 395, 396, 403, 405, 410, 412, 413, 414, 433, 438, 439, 468, 469, 475, 476, 493, 527, 533, 535, 538, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 584, 585, 587, 590, 598, 643, 647, 649, 651, 657, 659, 661, 669, 671, 691, 700, 701, 713, 726, 732, 752, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 831, 837, 838, 854, 855, 878, 882, 883, 885, 886, 887, 888, 905, 906, 907, 908, 956, 974, 981, 982, 988, 991, 992, 993, 995, 999, 1001, 1006, 1011, 1015, 1016, 1018, 1019, 1020, 1022, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "limit": [4, 8, 17, 37, 42, 57, 66, 82, 111, 118, 119, 125, 131, 163, 169, 170, 171, 178, 199, 200, 216, 232, 267, 307, 311, 318, 344, 351, 360, 365, 379, 380, 383, 390, 392, 393, 403, 405, 408, 410, 414, 442, 459, 464, 555, 556, 557, 558, 628, 646, 654, 655, 675, 678, 679, 684, 773, 815, 845, 847, 848, 849, 870, 871, 895, 899, 900, 901, 902, 903, 953, 974, 981, 982, 984, 985, 992, 993, 995, 1006, 1011, 1022, 1035, 1037, 1040, 1041, 1044], "cv": [4, 12, 24, 25, 26, 54, 71, 72, 73, 74, 78, 103, 117, 121, 123, 137, 138, 147, 163, 164, 169, 188, 198, 201, 256, 258, 259, 260, 261, 262, 263, 265, 266, 270, 274, 278, 311, 320, 336, 344, 391, 392, 396, 403, 409, 412, 414, 433, 468, 563, 564, 590, 598, 643, 647, 649, 651, 655, 657, 659, 661, 669, 671, 794, 796, 797, 798, 799, 800, 808, 809, 810, 811, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 878, 905, 906, 974, 977, 980, 981, 985, 995, 1006, 1015, 1016, 1020, 1029, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1044], "fold": [4, 67, 74, 78, 117, 120, 123, 137, 147, 169, 188, 247, 255, 256, 258, 260, 261, 263, 270, 312, 327, 344, 360, 373, 378, 381, 382, 391, 392, 396, 405, 414, 433, 468, 489, 532, 563, 564, 590, 598, 643, 647, 649, 651, 655, 657, 659, 661, 669, 671, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 878, 899, 902, 974, 981, 985, 995, 1000, 1015, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1038, 1039], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 72, 75, 85, 105, 114, 116, 118, 123, 124, 128, 133, 139, 143, 157, 175, 185, 191, 202, 222, 231, 232, 234, 245, 249, 258, 260, 266, 269, 271, 288, 290, 306, 309, 316, 317, 319, 321, 337, 338, 345, 349, 350, 383, 384, 391, 403, 413, 433, 469, 475, 476, 527, 528, 533, 538, 539, 541, 542, 544, 549, 560, 628, 642, 643, 647, 648, 649, 651, 656, 657, 658, 659, 662, 663, 664, 668, 672, 673, 674, 683, 688, 694, 697, 759, 874, 886, 892, 897, 898, 974, 978, 1000, 1015, 1018, 1034, 1036], "datapoint": [4, 42, 52, 56, 155, 158, 182, 233, 234, 238, 255, 260, 281, 342, 415, 442, 498, 553, 554, 555, 556, 560, 561, 562, 607, 905, 906, 907, 908, 978], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 109, 111, 114, 117, 121, 124, 148, 163, 169, 175, 178, 179, 183, 199, 201, 217, 228, 233, 234, 235, 238, 260, 263, 266, 267, 269, 278, 283, 306, 307, 312, 326, 336, 344, 350, 360, 364, 365, 366, 373, 376, 377, 378, 380, 382, 383, 385, 386, 387, 391, 392, 395, 396, 399, 401, 403, 405, 407, 409, 410, 412, 413, 414, 415, 416, 417, 419, 433, 436, 438, 439, 440, 441, 443, 445, 446, 448, 450, 453, 454, 455, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 492, 499, 504, 505, 512, 517, 519, 520, 523, 528, 529, 530, 532, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 581, 582, 584, 585, 586, 587, 589, 590, 593, 598, 603, 604, 606, 607, 616, 623, 624, 625, 627, 628, 629, 631, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 683, 685, 686, 687, 688, 689, 690, 691, 692, 697, 705, 722, 723, 737, 761, 766, 769, 773, 774, 775, 776, 777, 780, 783, 784, 787, 795, 796, 801, 802, 803, 804, 811, 812, 813, 814, 819, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 876, 877, 878, 880, 884, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 917, 921, 923, 926, 934, 942, 946, 951, 954, 956, 959, 960, 961, 962, 963, 964, 965, 966, 974, 975, 979, 980, 981, 982, 985, 986, 988, 990, 991, 992, 995, 998, 999, 1000, 1001, 1006, 1008, 1009, 1016, 1020, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "enough": [4, 37, 44, 62, 117, 120, 151, 163, 170, 171, 188, 199, 233, 236, 238, 309, 349, 351, 360, 376, 378, 382, 393, 403, 404, 405, 407, 409, 412, 563, 564, 585, 794, 797, 798, 800, 808, 821, 934, 974, 979, 982, 984, 991, 995, 1000, 1005, 1009, 1033, 1043, 1044], "quantifi": [4, 37, 49, 78, 156, 217, 267, 380, 392, 400, 404, 569, 860, 980, 993, 995, 1022], "repres": [4, 8, 10, 12, 14, 20, 26, 32, 34, 44, 48, 49, 50, 53, 91, 95, 97, 104, 105, 118, 119, 127, 169, 178, 186, 191, 201, 203, 204, 208, 222, 224, 233, 238, 248, 254, 257, 260, 263, 267, 288, 307, 340, 349, 351, 358, 366, 370, 373, 375, 380, 390, 391, 392, 393, 399, 403, 405, 409, 410, 411, 412, 413, 414, 434, 438, 442, 448, 459, 466, 467, 468, 469, 470, 471, 472, 484, 486, 487, 488, 490, 492, 494, 496, 497, 498, 500, 501, 506, 523, 530, 532, 534, 536, 537, 543, 551, 559, 577, 584, 587, 625, 628, 630, 636, 672, 674, 693, 695, 697, 725, 738, 784, 794, 796, 807, 808, 811, 814, 820, 822, 823, 826, 827, 833, 839, 840, 841, 843, 844, 845, 847, 848, 849, 854, 855, 864, 870, 871, 894, 897, 898, 917, 918, 938, 943, 975, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 995, 996, 998, 999, 1001, 1011, 1016, 1017, 1019, 1033, 1035, 1038, 1039, 1042], "bit": [4, 48, 53, 78, 98, 197, 201, 278, 305, 336, 350, 360, 364, 373, 376, 412, 413, 578, 585, 654, 827, 917, 918, 982, 986, 1004, 1013, 1020, 1027, 1030, 1033, 1035, 1036, 1039, 1040, 1041], "less": [4, 5, 8, 52, 53, 60, 92, 95, 98, 106, 111, 118, 124, 125, 151, 158, 169, 181, 183, 199, 201, 203, 234, 238, 246, 248, 260, 261, 269, 271, 274, 306, 309, 310, 311, 317, 319, 340, 349, 350, 360, 364, 366, 373, 378, 380, 390, 392, 405, 409, 410, 412, 413, 417, 435, 437, 439, 441, 444, 446, 448, 453, 456, 458, 459, 478, 479, 480, 492, 511, 527, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 586, 592, 615, 623, 630, 643, 657, 672, 674, 688, 697, 717, 718, 719, 720, 731, 747, 759, 774, 775, 780, 790, 792, 793, 796, 797, 798, 804, 821, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 860, 872, 874, 875, 877, 880, 886, 887, 897, 898, 905, 906, 907, 908, 923, 937, 974, 975, 977, 978, 979, 982, 984, 985, 988, 990, 995, 999, 1000, 1001, 1005, 1018, 1020, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1041, 1042, 1044], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 55, 72, 75, 80, 82, 86, 92, 95, 98, 100, 103, 111, 113, 114, 116, 117, 118, 120, 121, 124, 148, 151, 157, 160, 163, 169, 170, 171, 175, 178, 183, 185, 188, 199, 201, 205, 215, 216, 217, 224, 228, 234, 235, 236, 238, 246, 257, 258, 260, 261, 262, 263, 266, 269, 278, 281, 283, 289, 290, 302, 305, 309, 310, 311, 312, 317, 319, 321, 325, 340, 349, 350, 351, 360, 364, 365, 366, 372, 373, 374, 377, 378, 380, 383, 384, 386, 392, 393, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 450, 453, 456, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 489, 490, 492, 505, 510, 511, 519, 527, 530, 531, 532, 533, 534, 536, 537, 538, 540, 543, 544, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 569, 577, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 623, 624, 626, 630, 636, 638, 639, 640, 641, 642, 643, 648, 649, 651, 654, 655, 656, 657, 658, 659, 662, 663, 664, 667, 668, 670, 672, 673, 674, 675, 678, 683, 688, 690, 692, 700, 701, 708, 716, 717, 718, 719, 730, 731, 734, 759, 774, 775, 776, 778, 780, 790, 792, 793, 794, 797, 798, 804, 808, 813, 815, 818, 819, 820, 821, 822, 825, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 860, 870, 871, 872, 874, 875, 877, 880, 886, 887, 891, 894, 897, 898, 899, 902, 903, 905, 906, 907, 908, 909, 923, 934, 936, 937, 942, 948, 954, 956, 959, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 999, 1000, 1001, 1005, 1006, 1011, 1015, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "half": [4, 24, 98, 233, 237, 258, 260, 272, 373, 374, 410, 459, 518, 558, 589, 593, 598, 765, 856, 864, 985, 988, 1001], "contigu": [4, 21, 380, 390, 402, 409, 413, 439, 443, 445, 455, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 776, 813, 837, 838, 897, 899, 900, 901, 902, 903, 1000, 1030, 1037, 1041], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 71, 72, 73, 74, 75, 78, 86, 100, 103, 111, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 130, 131, 137, 138, 144, 145, 147, 151, 163, 164, 166, 168, 169, 171, 172, 175, 183, 194, 199, 201, 206, 207, 214, 215, 217, 229, 234, 238, 240, 241, 242, 247, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 291, 292, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 320, 327, 328, 336, 339, 344, 354, 358, 360, 367, 378, 380, 383, 391, 392, 396, 401, 406, 409, 412, 433, 434, 554, 556, 563, 564, 575, 655, 693, 694, 696, 698, 737, 825, 828, 846, 854, 855, 857, 905, 906, 907, 908, 953, 974, 975, 980, 985, 987, 988, 993, 995, 1000, 1006, 1015, 1016, 1020, 1024, 1031, 1033, 1034], "timeseriessplit": [4, 183, 255, 409, 1033, 1034, 1039], "ts_cv": 4, "n_split": [4, 117, 123, 163, 164, 169, 247, 255, 260, 262, 265, 270, 278, 327, 336, 344, 360, 409, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 820, 1015, 1033, 1035], "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 86, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 137, 140, 143, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 205, 207, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 327, 328, 329, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 373, 375, 376, 378, 380, 383, 384, 390, 391, 392, 395, 397, 398, 403, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 433, 434, 435, 436, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 458, 460, 462, 465, 468, 474, 478, 479, 480, 481, 486, 489, 490, 500, 512, 513, 517, 519, 520, 522, 524, 527, 529, 530, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 548, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 578, 588, 589, 590, 593, 598, 606, 609, 610, 611, 612, 615, 616, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 634, 637, 639, 640, 641, 642, 643, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 668, 672, 673, 674, 676, 677, 680, 684, 685, 687, 688, 691, 692, 695, 699, 701, 703, 705, 708, 709, 717, 718, 719, 721, 722, 723, 725, 730, 733, 734, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 764, 776, 777, 779, 780, 782, 783, 784, 785, 786, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 885, 886, 891, 897, 898, 899, 900, 901, 902, 903, 905, 907, 923, 932, 933, 934, 936, 938, 939, 948, 949, 953, 956, 974, 975, 977, 980, 981, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 997, 999, 1000, 1003, 1007, 1011, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1025, 1028, 1029, 1030, 1032, 1034, 1035, 1037, 1041, 1042, 1043], "48": [4, 45, 85, 102, 156, 242, 311, 375, 384, 405, 506, 593, 695, 741, 821, 832, 974, 987, 995, 1023], "max_train_s": [4, 409, 815, 1034], "10000": [4, 11, 30, 43, 63, 72, 73, 125, 137, 185, 192, 199, 207, 215, 232, 234, 273, 317, 333, 335, 360, 366, 412, 413, 557, 558, 640, 675, 874, 903, 997, 1016, 1020], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 71, 116, 122, 123, 125, 126, 130, 168, 175, 183, 194, 199, 206, 207, 214, 215, 257, 258, 262, 267, 269, 273, 281, 291, 292, 299, 301, 302, 307, 309, 310, 317, 336, 344, 360, 383, 409, 694, 796, 811, 814, 815, 823, 825, 846, 975, 987, 988, 1015, 1016, 1027, 1028, 1033, 1034, 1039], "manual": [4, 46, 55, 169, 170, 172, 200, 210, 262, 283, 327, 334, 349, 351, 364, 365, 373, 378, 382, 383, 391, 395, 405, 409, 410, 411, 433, 445, 563, 847, 870, 876, 974, 979, 980, 981, 984, 985, 988, 995, 1006, 1011, 1012, 1020, 1035, 1037, 1043], "inspect": [4, 9, 30, 31, 34, 56, 61, 113, 118, 125, 127, 128, 132, 145, 151, 156, 157, 169, 170, 171, 172, 182, 191, 208, 213, 239, 260, 263, 272, 286, 291, 294, 310, 315, 316, 317, 318, 320, 332, 333, 334, 335, 337, 338, 340, 349, 355, 365, 367, 380, 392, 405, 406, 412, 413, 460, 549, 550, 553, 554, 555, 556, 560, 561, 562, 826, 857, 858, 905, 906, 907, 908, 973, 985, 986, 989, 992, 993, 1000, 1005, 1020, 1022, 1030], "variou": [4, 12, 36, 37, 55, 58, 60, 61, 68, 81, 85, 98, 166, 169, 177, 209, 218, 219, 220, 221, 226, 232, 278, 309, 316, 349, 351, 358, 360, 364, 372, 373, 374, 375, 378, 380, 383, 391, 393, 403, 404, 405, 407, 433, 437, 468, 498, 510, 511, 521, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 590, 598, 643, 647, 649, 651, 654, 657, 659, 661, 662, 664, 669, 671, 672, 687, 688, 695, 794, 797, 798, 800, 808, 816, 817, 818, 819, 820, 821, 822, 823, 824, 857, 897, 898, 974, 975, 982, 985, 988, 992, 995, 999, 1001, 1005, 1009, 1019, 1020, 1027, 1030, 1031], "check": [4, 5, 8, 17, 46, 53, 56, 99, 109, 117, 131, 151, 166, 168, 170, 171, 185, 187, 188, 199, 221, 235, 246, 253, 269, 276, 278, 318, 326, 358, 364, 365, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 390, 392, 395, 396, 399, 404, 406, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 469, 470, 471, 472, 478, 479, 480, 481, 498, 504, 505, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 599, 606, 607, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 919, 928, 929, 940, 941, 942, 946, 947, 969, 970, 971, 973, 980, 981, 982, 985, 1000, 1001, 1006, 1009, 1022, 1027, 1028, 1030, 1034, 1038, 1039, 1040, 1041, 1042, 1044], "all_split": 4, "list": [4, 8, 10, 12, 13, 16, 17, 19, 20, 25, 32, 40, 44, 49, 62, 70, 105, 106, 115, 117, 123, 131, 138, 172, 203, 238, 239, 255, 258, 260, 261, 263, 264, 269, 273, 292, 307, 311, 315, 316, 317, 318, 319, 320, 321, 328, 339, 350, 351, 366, 372, 373, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 396, 403, 405, 406, 409, 411, 412, 413, 428, 430, 433, 446, 452, 453, 460, 461, 462, 467, 468, 474, 478, 479, 480, 484, 485, 486, 487, 488, 492, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 519, 528, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 587, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 628, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 677, 680, 682, 688, 692, 693, 695, 706, 708, 709, 712, 714, 720, 728, 737, 741, 749, 773, 776, 778, 783, 789, 792, 793, 794, 797, 798, 800, 805, 806, 808, 816, 818, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 861, 865, 868, 870, 871, 876, 878, 894, 898, 900, 903, 905, 906, 907, 908, 911, 913, 917, 918, 919, 923, 925, 926, 927, 929, 937, 938, 940, 951, 956, 959, 969, 974, 975, 981, 985, 987, 988, 989, 992, 993, 996, 1001, 1003, 1005, 1006, 1009, 1011, 1015, 1017, 1020, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "train_0": 4, "test_0": 4, "iloc": [4, 131, 169, 170, 217, 260, 286], "12379": 4, "25": [4, 5, 6, 7, 8, 9, 10, 11, 19, 24, 26, 42, 45, 54, 55, 80, 85, 91, 98, 101, 103, 105, 115, 124, 135, 144, 145, 152, 163, 169, 179, 189, 203, 218, 225, 228, 238, 247, 260, 262, 276, 296, 299, 302, 305, 307, 320, 324, 325, 349, 352, 357, 360, 364, 384, 409, 412, 413, 440, 473, 497, 500, 566, 593, 674, 729, 791, 811, 823, 849, 867, 872, 874, 875, 878, 886, 887, 889, 890, 981, 985, 986, 988, 995, 1016, 1027, 1029, 1035, 1038], "760": [4, 116, 135], "68": [4, 8, 160, 190, 302, 324, 405, 531, 537, 586, 1027], "27": [4, 6, 8, 19, 31, 47, 54, 225, 311, 313, 324, 325, 345, 375, 405, 413, 520, 709, 783, 784, 878, 898, 985, 995, 1019, 1027, 1029], "9993": [4, 649, 651, 1035], "12380": 4, "32": [4, 5, 51, 92, 168, 171, 237, 319, 325, 372, 376, 383, 392, 402, 412, 413, 441, 560, 578, 585, 630, 672, 876, 878, 917, 918, 950, 993, 995, 1019, 1027, 1030, 1033, 1035, 1036, 1039, 1040, 1041], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 74, 109, 152, 171, 175, 232, 258, 260, 262, 283, 297, 310, 318, 349, 350, 360, 373, 384, 412, 413, 486, 557, 558, 640, 673, 999, 1020, 1038], "77": [4, 6, 44, 148, 175, 238, 269, 325, 372, 375, 530, 703], "0028": 4, "12381": 4, "72": [4, 6, 7, 117, 154, 383, 821], "9995": 4, "12382": 4, "240": [4, 44, 263, 276, 993, 1027], "82": [4, 30, 53, 58, 120, 145, 202, 294, 324, 783, 794, 808, 985, 988, 1016, 1027], "9980": [4, 1035], "12383": 4, "13374": 4, "34": [4, 124, 148, 151, 288, 302, 324, 325, 358, 375, 409, 516, 566, 593, 645, 663, 712, 759, 1016, 1027], "44": [4, 46, 107, 156, 169, 170, 183, 278, 287, 313, 776, 878, 898, 901, 985, 992, 1027], "40": [4, 14, 54, 66, 78, 90, 95, 101, 127, 133, 151, 183, 190, 191, 193, 216, 222, 224, 236, 238, 243, 249, 261, 289, 295, 301, 307, 324, 325, 334, 335, 337, 339, 341, 343, 358, 365, 373, 409, 442, 491, 513, 514, 837, 838, 842, 854, 855, 974, 986, 995, 1027, 1028], "150": [4, 6, 90, 92, 115, 124, 137, 221, 225, 228, 273, 340, 344, 375, 409, 414, 500, 598, 818, 819, 820, 985, 1015, 1016, 1017], "53": [4, 53, 238, 328, 405, 412, 531, 537, 787, 788], "15": [4, 6, 7, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 61, 62, 66, 73, 74, 80, 82, 92, 105, 115, 117, 120, 121, 124, 143, 145, 147, 151, 155, 163, 168, 169, 170, 188, 196, 201, 213, 217, 222, 225, 228, 247, 248, 255, 263, 265, 268, 271, 272, 274, 287, 291, 299, 300, 302, 303, 305, 307, 309, 321, 325, 330, 334, 336, 339, 343, 346, 355, 372, 373, 378, 391, 409, 412, 413, 436, 450, 486, 493, 527, 533, 551, 552, 594, 640, 648, 657, 659, 664, 672, 674, 688, 736, 812, 826, 849, 878, 974, 980, 981, 982, 985, 988, 989, 995, 1000, 1003, 1011, 1016, 1023, 1025, 1029, 1039, 1041, 1042], "0013": 4, "13375": 4, "39": [4, 148, 242, 373, 375, 376, 382, 405, 413, 491, 906], "49": [4, 148, 203, 238, 372, 373, 375, 383, 405, 446, 453, 709, 721, 751, 759, 792, 794, 878, 985, 995, 1030], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 148, 157, 169, 217, 238, 339, 375, 384, 412, 413, 551, 552, 566, 730, 985, 1020, 1027], "08": [4, 8, 15, 44, 50, 98, 135, 165, 169, 170, 183, 218, 243, 252, 302, 313, 375, 527, 539, 541, 559, 637, 654, 794, 854, 855, 876, 991], "910": [4, 265, 276, 319, 322], "42": [4, 5, 6, 20, 24, 25, 26, 27, 31, 44, 46, 56, 78, 85, 97, 103, 111, 118, 119, 121, 124, 125, 127, 131, 144, 145, 164, 169, 171, 172, 175, 178, 188, 191, 193, 194, 201, 205, 206, 207, 213, 214, 216, 220, 221, 222, 228, 233, 234, 235, 238, 241, 259, 261, 264, 283, 289, 290, 291, 299, 305, 306, 307, 308, 310, 312, 315, 317, 319, 327, 334, 336, 349, 350, 360, 365, 380, 383, 384, 392, 396, 405, 409, 412, 413, 416, 433, 440, 484, 488, 520, 527, 533, 540, 553, 554, 562, 563, 564, 566, 673, 792, 796, 821, 823, 837, 838, 842, 846, 849, 889, 890, 892, 893, 894, 907, 908, 988, 995, 1016, 1020, 1023, 1024, 1027], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 55, 71, 113, 133, 169, 170, 178, 187, 228, 278, 310, 324, 325, 347, 540, 644, 645, 652, 698, 702, 703, 722, 736, 751, 777, 784, 830, 974, 981, 985, 991, 992, 995, 1016, 1020, 1027, 1029], "26": [4, 8, 46, 54, 80, 97, 131, 135, 156, 169, 237, 238, 273, 325, 384, 566, 644, 724, 778, 873, 885, 934, 985, 995, 1027, 1030, 1031, 1039], "47": [4, 160, 191, 195, 373, 489, 490, 531, 537], "16": [4, 5, 10, 15, 19, 27, 43, 50, 51, 54, 66, 74, 80, 95, 98, 143, 148, 170, 192, 198, 199, 200, 217, 220, 221, 222, 226, 233, 237, 262, 263, 264, 287, 302, 305, 309, 315, 340, 350, 356, 373, 375, 376, 384, 391, 395, 397, 398, 409, 410, 413, 438, 467, 468, 474, 493, 498, 530, 531, 566, 585, 591, 592, 603, 604, 635, 646, 647, 650, 651, 652, 653, 678, 679, 807, 812, 823, 872, 898, 906, 974, 981, 985, 995, 1000, 1003, 1011, 1020, 1023, 1025, 1027, 1028, 1032, 1033, 1035, 1036], "9979": 4, "2331": 4, "31": [4, 70, 79, 217, 261, 276, 288, 318, 324, 325, 402, 413, 496, 557, 558, 593, 645, 667, 675, 950, 986, 1027], "060": [4, 746], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 92, 175, 217, 222, 238, 269, 307, 325, 489, 490, 649, 651, 660, 661, 794, 800, 821, 985, 1006, 1016], "275": [4, 325, 1030], "2334": 4, "96": [4, 32, 48, 62, 158, 228, 238, 258, 302, 307, 310, 311, 324, 325, 349, 375, 409, 549, 974, 980, 985, 995, 1027], "515": 4, "64": [4, 8, 32, 48, 53, 58, 89, 95, 156, 169, 221, 232, 233, 237, 258, 269, 287, 292, 364, 365, 375, 376, 384, 410, 491, 498, 595, 596, 642, 654, 684, 685, 686, 687, 898, 988, 1017, 1023, 1027, 1029, 1035, 1036, 1039, 1040, 1041], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1036], "12329": 4, "46": [4, 53, 72, 76, 92, 148, 149, 199, 238, 360, 384, 589, 590, 712, 901, 906, 995, 1023], "12330": [4, 1035], "52": [4, 46, 68, 156, 199, 268, 527, 629, 792, 1027], "last": [4, 20, 44, 58, 89, 122, 124, 169, 178, 199, 200, 207, 212, 228, 251, 263, 271, 272, 310, 317, 319, 327, 354, 364, 373, 376, 380, 382, 383, 386, 392, 395, 405, 406, 413, 417, 434, 438, 443, 455, 460, 464, 511, 529, 555, 556, 557, 558, 579, 580, 583, 589, 590, 593, 606, 678, 679, 681, 682, 693, 694, 696, 697, 698, 703, 777, 792, 793, 797, 798, 813, 837, 838, 842, 857, 858, 862, 870, 876, 912, 937, 960, 974, 980, 981, 982, 984, 986, 989, 999, 1006, 1011, 1018, 1027, 1034, 1035, 1036, 1041, 1043, 1044], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 34, 54, 97, 120, 198, 236, 273, 307, 324, 325, 412, 659, 783, 980, 985, 986, 995, 1020, 1027], "665": 4, "16380": 4, "71": [4, 92, 148, 203, 217, 375, 506, 725, 985, 1018, 1023, 1029], "16381": 4, "76": [4, 175, 199, 325, 349, 360, 375, 384, 776, 857, 1018], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 60, 62, 74, 103, 124, 160, 169, 210, 228, 233, 260, 302, 309, 311, 325, 349, 350, 351, 376, 378, 384, 395, 397, 398, 406, 409, 410, 413, 443, 455, 488, 496, 497, 498, 500, 501, 506, 531, 532, 534, 536, 537, 553, 554, 555, 556, 559, 560, 561, 562, 565, 567, 568, 569, 570, 571, 573, 574, 585, 590, 595, 596, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 642, 645, 654, 655, 667, 710, 714, 726, 729, 730, 736, 738, 792, 793, 815, 830, 853, 854, 855, 861, 867, 875, 876, 887, 897, 898, 905, 906, 907, 908, 909, 933, 934, 974, 983, 985, 995, 1003, 1023, 1025, 1027, 1028, 1031, 1032, 1034, 1035, 1037, 1038], "940": [4, 122, 135], "6331": 4, "28": [4, 66, 124, 148, 169, 215, 269, 301, 324, 325, 375, 384, 405, 409, 446, 453, 995, 1016, 1027, 1030, 1033], "790": [4, 44, 68, 70], "89": [4, 32, 156, 190, 324, 325, 980, 985, 995, 1020, 1027, 1030, 1038], "6332": 4, "6333": 4, "88": [4, 6, 32, 190, 203, 238, 259, 302, 324, 325, 354, 373, 375, 378, 407, 469, 857, 1016, 1027], "820": [4, 837, 838], "79": [4, 6, 30, 32, 80, 81, 98, 148, 175, 302, 325, 375, 383, 407, 470, 520, 593, 835, 1027, 1029], "6334": 4, "6335": 4, "70": [4, 6, 11, 66, 71, 73, 111, 170, 238, 245, 260, 325, 373, 375, 409, 489, 490, 709, 721, 751, 794, 808, 974, 995, 1016], "33": [4, 19, 80, 199, 320, 325, 358, 373, 375, 376, 382, 383, 384, 395, 397, 398, 405, 413, 528, 644, 708, 709, 724, 725, 733, 738, 778, 779, 782, 800, 821, 823, 825, 908, 981, 985, 995, 1016, 1027, 1035], "335": [4, 50, 68], "74": [4, 215, 324, 325, 375, 586, 794, 808, 876], "16326": [4, 1039], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 156, 200, 373, 382, 386], "tree": [4, 7, 26, 27, 31, 41, 44, 55, 62, 110, 113, 114, 115, 117, 121, 122, 123, 124, 125, 127, 131, 132, 135, 148, 159, 163, 170, 172, 221, 235, 237, 238, 239, 264, 278, 283, 288, 296, 305, 306, 310, 317, 359, 360, 364, 367, 373, 375, 384, 391, 392, 394, 403, 405, 411, 416, 433, 437, 438, 439, 440, 441, 442, 444, 446, 453, 459, 491, 496, 500, 510, 511, 515, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 627, 628, 629, 630, 654, 684, 688, 698, 699, 783, 800, 821, 823, 832, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 858, 861, 870, 929, 975, 982, 985, 986, 991, 992, 1005, 1006, 1007, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "often": [4, 19, 24, 25, 33, 70, 74, 117, 129, 155, 163, 169, 170, 200, 217, 221, 238, 247, 262, 265, 305, 310, 336, 346, 349, 350, 351, 364, 365, 372, 373, 375, 378, 380, 383, 386, 390, 391, 392, 394, 399, 403, 405, 406, 407, 409, 410, 412, 413, 415, 417, 464, 517, 520, 529, 532, 628, 642, 643, 648, 649, 656, 657, 658, 659, 668, 670, 683, 723, 867, 875, 883, 895, 974, 975, 977, 980, 981, 982, 983, 984, 985, 987, 988, 990, 991, 992, 995, 998, 999, 1001, 1011, 1013, 1018, 1019, 1020, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "flexibl": [4, 25, 121, 163, 199, 306, 333, 351, 380, 385, 409, 415, 670, 897, 898, 974, 979, 981, 985, 989, 995, 1005, 1006, 1009, 1036, 1040], "effici": [4, 5, 12, 13, 42, 46, 53, 55, 95, 117, 129, 175, 188, 192, 201, 207, 288, 349, 364, 370, 372, 378, 380, 381, 383, 384, 390, 392, 399, 402, 404, 405, 410, 411, 412, 415, 417, 438, 439, 442, 443, 445, 446, 448, 450, 453, 455, 457, 458, 492, 529, 530, 531, 534, 536, 537, 540, 559, 562, 570, 577, 578, 584, 585, 587, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 628, 629, 630, 634, 636, 651, 654, 655, 660, 662, 663, 664, 669, 671, 672, 673, 674, 675, 681, 682, 684, 721, 751, 758, 774, 775, 792, 793, 794, 808, 826, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 862, 874, 886, 890, 897, 906, 908, 934, 953, 974, 977, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1005, 1009, 1011, 1015, 1018, 1019, 1020, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "heterogen": [4, 9, 24, 55, 69, 71, 76, 166, 170, 199, 242, 310, 315, 370, 372, 390, 460, 484, 540, 577, 587, 709, 857, 861, 897, 982, 992, 995, 1005, 1022, 1031, 1035, 1037, 1038], "tabular": [4, 170, 380, 412, 993], "mix": [4, 62, 69, 76, 96, 97, 166, 199, 305, 372, 380, 390, 392, 406, 410, 417, 460, 462, 463, 492, 529, 534, 536, 543, 596, 600, 626, 642, 643, 648, 654, 655, 656, 657, 658, 659, 664, 672, 674, 677, 794, 808, 823, 857, 870, 871, 877, 878, 949, 956, 959, 981, 990, 1019, 1039, 1041, 1042], "long": [4, 11, 12, 44, 62, 124, 156, 164, 169, 171, 199, 235, 236, 238, 263, 296, 305, 316, 349, 350, 360, 365, 378, 386, 390, 392, 393, 399, 404, 405, 449, 494, 534, 672, 673, 674, 797, 798, 832, 833, 834, 835, 836, 854, 855, 865, 985, 991, 995, 996, 998, 999, 1004, 1008, 1029, 1033, 1039, 1041], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 56, 57, 58, 59, 60, 65, 80, 81, 82, 86, 90, 92, 95, 99, 100, 104, 105, 111, 112, 113, 114, 115, 116, 117, 120, 121, 123, 124, 125, 127, 132, 133, 134, 145, 147, 148, 151, 156, 157, 158, 160, 163, 166, 169, 170, 175, 177, 183, 185, 187, 188, 199, 201, 203, 207, 213, 215, 216, 217, 218, 220, 228, 232, 233, 236, 238, 245, 246, 248, 249, 250, 251, 253, 255, 260, 262, 263, 264, 266, 268, 272, 274, 276, 281, 283, 287, 288, 289, 290, 292, 293, 294, 302, 305, 307, 308, 309, 310, 312, 315, 317, 318, 320, 324, 326, 327, 328, 329, 331, 332, 334, 336, 338, 340, 344, 347, 349, 350, 355, 358, 364, 367, 371, 373, 374, 377, 378, 380, 381, 390, 391, 396, 402, 403, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 422, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 450, 452, 453, 454, 457, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 683, 684, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 758, 759, 763, 764, 765, 766, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 917, 918, 922, 923, 934, 938, 954, 956, 959, 960, 963, 966, 974, 975, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1008, 1011, 1017, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 55, 73, 75, 95, 99, 114, 116, 117, 124, 127, 129, 144, 156, 157, 171, 172, 178, 179, 188, 190, 199, 201, 203, 204, 205, 217, 233, 238, 257, 263, 266, 269, 285, 292, 301, 305, 307, 318, 319, 336, 341, 344, 350, 351, 364, 373, 378, 384, 387, 390, 391, 392, 395, 399, 404, 407, 409, 410, 411, 412, 414, 416, 418, 438, 440, 442, 443, 446, 447, 448, 449, 454, 458, 469, 471, 495, 510, 530, 532, 534, 536, 540, 543, 545, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 578, 584, 585, 587, 630, 637, 639, 646, 650, 653, 654, 655, 660, 667, 668, 670, 673, 675, 681, 683, 685, 687, 688, 689, 691, 741, 774, 775, 794, 802, 804, 808, 812, 822, 832, 833, 834, 835, 836, 837, 838, 843, 854, 855, 862, 866, 867, 875, 877, 889, 890, 897, 898, 902, 903, 905, 906, 907, 908, 933, 934, 974, 977, 979, 981, 982, 984, 987, 988, 989, 993, 995, 998, 999, 1000, 1001, 1005, 1006, 1009, 1016, 1018, 1019, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "here": [4, 8, 9, 12, 13, 17, 24, 57, 58, 66, 78, 82, 89, 90, 92, 97, 98, 100, 102, 103, 104, 106, 111, 114, 117, 121, 125, 131, 145, 148, 151, 159, 160, 169, 170, 171, 175, 178, 183, 188, 192, 199, 203, 205, 214, 215, 217, 220, 222, 228, 233, 235, 238, 239, 246, 247, 248, 254, 257, 258, 260, 262, 263, 265, 269, 270, 272, 278, 283, 285, 292, 300, 301, 302, 307, 310, 317, 319, 324, 326, 336, 340, 344, 346, 351, 354, 360, 364, 365, 366, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 390, 391, 396, 399, 401, 402, 405, 406, 408, 409, 410, 411, 412, 413, 416, 418, 433, 436, 437, 438, 439, 440, 441, 443, 445, 448, 460, 468, 471, 532, 534, 535, 539, 540, 563, 564, 565, 566, 577, 578, 580, 584, 587, 590, 598, 624, 626, 643, 647, 649, 651, 657, 659, 661, 669, 671, 685, 687, 691, 695, 708, 721, 741, 751, 789, 794, 797, 798, 800, 808, 816, 817, 818, 819, 820, 821, 822, 824, 833, 837, 838, 861, 869, 872, 875, 878, 889, 890, 900, 951, 974, 977, 981, 982, 983, 984, 985, 988, 991, 995, 997, 998, 999, 1000, 1005, 1006, 1008, 1009, 1011, 1012, 1018, 1027, 1035, 1040], "modern": [4, 413, 464, 499, 586, 686, 690, 725, 895, 982, 1005, 1006, 1043], "histgradientboostingregressor": [4, 7, 117, 121, 124, 125, 128, 131, 163, 170, 199, 311, 315, 316, 317, 318, 320, 321, 382, 412, 556, 561, 628, 629, 631, 975, 992, 1005, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "nativ": [4, 130, 163, 365, 373, 392, 412, 557, 558, 829, 830, 953, 981, 985, 1005, 1037, 1039], "support": [4, 6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 70, 72, 110, 115, 122, 130, 135, 144, 145, 170, 200, 209, 210, 211, 217, 233, 234, 235, 241, 254, 258, 265, 267, 278, 283, 302, 305, 309, 319, 324, 325, 328, 329, 332, 333, 336, 337, 339, 340, 341, 344, 347, 364, 365, 366, 367, 372, 376, 378, 380, 382, 383, 384, 385, 387, 388, 391, 392, 393, 405, 409, 410, 413, 415, 433, 436, 446, 448, 449, 460, 461, 462, 463, 465, 468, 470, 483, 492, 508, 534, 536, 537, 540, 543, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 609, 610, 611, 613, 615, 616, 618, 619, 621, 623, 627, 628, 629, 639, 641, 653, 654, 655, 666, 667, 668, 669, 670, 671, 672, 673, 674, 683, 686, 690, 695, 703, 709, 724, 725, 733, 738, 763, 773, 774, 775, 778, 779, 782, 783, 794, 797, 798, 800, 808, 820, 821, 829, 830, 835, 837, 838, 841, 843, 844, 849, 856, 857, 858, 862, 868, 870, 871, 873, 877, 885, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 923, 928, 929, 973, 974, 975, 977, 978, 979, 981, 984, 985, 986, 987, 988, 989, 991, 992, 995, 996, 999, 1003, 1005, 1006, 1007, 1009, 1011, 1014, 1016, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "therefor": [4, 9, 13, 20, 24, 34, 37, 52, 53, 71, 72, 75, 80, 86, 100, 105, 111, 114, 116, 124, 129, 131, 147, 168, 171, 199, 203, 215, 216, 245, 250, 251, 261, 263, 278, 286, 301, 305, 310, 324, 336, 344, 345, 349, 350, 358, 364, 372, 376, 383, 390, 396, 401, 405, 406, 407, 409, 410, 412, 413, 433, 492, 531, 545, 547, 549, 550, 555, 556, 560, 561, 600, 602, 654, 655, 661, 664, 667, 672, 674, 675, 697, 708, 730, 752, 792, 857, 858, 870, 874, 878, 886, 975, 979, 981, 982, 985, 987, 988, 989, 990, 993, 995, 1000, 1001, 1006, 1011, 1018, 1019, 1020, 1036, 1037, 1040, 1041, 1042, 1043], "ordin": [4, 53, 71, 131, 238, 308, 311, 312, 317, 320, 372, 392, 412, 492, 563, 705, 862, 865, 870, 871, 878, 981, 982, 995, 1006, 1035, 1041], "encod": [4, 8, 11, 48, 55, 71, 95, 116, 131, 166, 169, 170, 171, 198, 199, 238, 269, 304, 306, 307, 308, 313, 317, 319, 320, 336, 349, 351, 370, 372, 374, 380, 383, 390, 392, 406, 409, 410, 412, 413, 415, 460, 483, 492, 499, 522, 527, 533, 535, 536, 538, 540, 541, 542, 544, 547, 558, 562, 563, 565, 577, 584, 585, 587, 626, 644, 654, 655, 665, 668, 676, 730, 796, 801, 803, 820, 823, 857, 858, 860, 862, 864, 865, 868, 870, 871, 878, 881, 895, 974, 975, 981, 982, 985, 987, 988, 990, 999, 1005, 1006, 1022, 1028, 1029, 1035, 1039, 1041, 1042, 1043], "know": [4, 53, 66, 121, 145, 148, 151, 160, 169, 217, 235, 236, 260, 278, 281, 319, 324, 344, 350, 364, 378, 390, 396, 399, 405, 408, 409, 410, 413, 496, 500, 506, 642, 648, 654, 655, 721, 751, 794, 808, 882, 883, 885, 886, 887, 888, 905, 906, 907, 908, 974, 984, 985, 986, 988, 997, 1033, 1034, 1037, 1039], "treat": [4, 6, 71, 121, 131, 163, 169, 199, 269, 311, 317, 327, 360, 378, 390, 392, 402, 412, 413, 438, 557, 558, 584, 585, 587, 603, 604, 628, 634, 641, 667, 670, 749, 783, 866, 867, 873, 874, 877, 878, 882, 885, 886, 888, 897, 898, 942, 975, 977, 981, 985, 986, 992, 995, 999, 1001, 1016, 1031, 1039, 1043], "dedic": [4, 258, 346, 376, 382, 384, 390, 393, 401, 405, 580, 668, 670, 683, 974, 981, 1005, 1011, 1035, 1044], "rule": [4, 117, 175, 355, 358, 360, 364, 375, 378, 379, 380, 390, 392, 393, 400, 403, 404, 405, 409, 410, 412, 414, 532, 545, 546, 547, 548, 549, 557, 558, 565, 566, 598, 630, 641, 654, 655, 662, 663, 664, 672, 673, 674, 702, 703, 794, 797, 798, 800, 808, 816, 820, 822, 846, 897, 910, 974, 979, 987, 988, 999, 1001, 1006, 1011, 1018, 1022, 1029, 1032, 1039], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 34, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 66, 68, 70, 71, 72, 73, 75, 78, 79, 80, 81, 89, 95, 96, 97, 98, 99, 100, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 134, 138, 139, 140, 144, 148, 151, 152, 153, 156, 157, 158, 160, 162, 163, 165, 166, 168, 169, 170, 171, 175, 177, 178, 179, 182, 183, 187, 194, 199, 200, 201, 203, 204, 206, 207, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 242, 245, 246, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 275, 281, 283, 286, 289, 290, 291, 294, 296, 305, 310, 311, 312, 316, 317, 318, 320, 321, 325, 329, 332, 333, 335, 336, 338, 339, 340, 349, 350, 351, 354, 357, 358, 360, 364, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 426, 429, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 571, 572, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 606, 607, 608, 615, 618, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 705, 707, 708, 714, 716, 717, 722, 724, 725, 729, 730, 732, 737, 738, 740, 741, 743, 745, 746, 748, 751, 753, 754, 758, 759, 761, 762, 763, 764, 765, 768, 770, 771, 772, 773, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 912, 914, 915, 917, 918, 920, 921, 924, 928, 929, 930, 932, 933, 934, 936, 938, 941, 942, 943, 944, 945, 946, 948, 949, 950, 953, 955, 956, 959, 960, 966, 969, 971, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1012, 1014, 1015, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "pass": [4, 7, 8, 20, 21, 34, 38, 117, 121, 128, 145, 180, 183, 200, 229, 231, 232, 235, 238, 239, 241, 250, 258, 261, 312, 315, 318, 341, 351, 360, 364, 365, 366, 373, 378, 379, 380, 383, 384, 385, 386, 387, 390, 392, 396, 399, 401, 405, 406, 409, 410, 412, 413, 415, 416, 417, 423, 427, 433, 434, 436, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 453, 455, 456, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 484, 487, 488, 491, 492, 493, 499, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 577, 578, 584, 585, 586, 587, 589, 590, 593, 603, 604, 606, 607, 613, 616, 622, 627, 628, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 727, 728, 737, 758, 769, 773, 774, 775, 776, 783, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 874, 876, 877, 878, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 924, 928, 929, 933, 934, 936, 938, 940, 942, 945, 946, 953, 955, 956, 959, 974, 975, 981, 983, 985, 986, 987, 988, 989, 992, 995, 998, 999, 1000, 1006, 1009, 1011, 1015, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "explicitli": [4, 46, 118, 151, 158, 163, 164, 200, 231, 235, 340, 351, 360, 365, 372, 374, 378, 379, 380, 382, 390, 392, 396, 401, 409, 413, 415, 531, 545, 546, 575, 576, 593, 623, 644, 654, 655, 665, 676, 705, 722, 777, 783, 784, 797, 798, 828, 831, 837, 838, 863, 887, 888, 953, 974, 975, 977, 979, 981, 982, 985, 987, 988, 995, 1009, 1020, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041], "logic": [4, 109, 365, 379, 380, 385, 401, 412, 1001, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "integ": [4, 17, 48, 53, 71, 169, 199, 217, 316, 317, 360, 364, 372, 373, 375, 380, 383, 387, 391, 392, 405, 406, 409, 410, 412, 413, 430, 433, 458, 460, 463, 468, 483, 492, 494, 497, 498, 499, 501, 504, 505, 508, 510, 511, 515, 518, 546, 555, 556, 557, 558, 559, 563, 564, 568, 578, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 628, 629, 640, 647, 651, 655, 661, 669, 671, 672, 695, 710, 730, 794, 796, 797, 798, 799, 801, 803, 808, 809, 810, 811, 813, 814, 817, 820, 828, 831, 833, 836, 837, 838, 862, 870, 871, 876, 877, 878, 881, 891, 893, 905, 906, 907, 908, 913, 948, 949, 950, 954, 975, 981, 986, 988, 995, 998, 1000, 1001, 1011, 1018, 1020, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "lexicograph": [4, 392, 563, 783, 789, 839, 847], "ad": [4, 13, 20, 75, 103, 105, 111, 117, 122, 144, 151, 157, 158, 178, 183, 201, 203, 224, 234, 235, 260, 261, 262, 305, 316, 317, 318, 319, 320, 321, 328, 340, 350, 377, 378, 382, 384, 390, 392, 393, 410, 412, 413, 414, 415, 437, 438, 439, 441, 443, 445, 448, 455, 458, 460, 510, 518, 528, 531, 534, 536, 543, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 578, 585, 586, 587, 589, 598, 603, 604, 607, 609, 623, 625, 637, 638, 644, 646, 650, 654, 655, 665, 672, 674, 676, 691, 709, 710, 724, 725, 770, 772, 778, 779, 782, 784, 792, 793, 794, 808, 818, 825, 835, 854, 855, 856, 870, 876, 878, 879, 894, 897, 898, 905, 906, 907, 908, 924, 974, 978, 980, 981, 982, 986, 988, 989, 991, 1006, 1009, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "benefit": [4, 56, 74, 75, 111, 169, 213, 224, 231, 233, 285, 319, 364, 378, 387, 392, 403, 405, 444, 457, 464, 504, 563, 564, 654, 655, 662, 663, 664, 672, 673, 674, 828, 895, 897, 974, 980, 988, 993, 995, 1006, 1009, 1027, 1030, 1031, 1032, 1039, 1040, 1041, 1042], "prevent": [4, 55, 124, 145, 168, 200, 203, 305, 311, 312, 336, 349, 354, 360, 378, 380, 382, 390, 391, 405, 410, 413, 438, 445, 484, 485, 586, 587, 607, 723, 780, 854, 855, 882, 883, 885, 886, 887, 888, 985, 987, 990, 991, 995, 1001, 1018, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "ani": [4, 8, 9, 13, 19, 44, 46, 55, 57, 67, 128, 143, 148, 156, 157, 158, 168, 169, 170, 171, 172, 188, 199, 203, 217, 228, 231, 232, 235, 246, 250, 251, 260, 261, 263, 266, 269, 278, 296, 305, 306, 309, 315, 317, 318, 320, 336, 340, 351, 360, 364, 365, 366, 372, 373, 375, 376, 378, 380, 382, 383, 384, 386, 391, 392, 393, 395, 396, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 430, 436, 442, 444, 445, 446, 448, 450, 452, 453, 457, 460, 463, 484, 485, 504, 505, 519, 530, 533, 535, 542, 547, 553, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 575, 576, 578, 584, 585, 587, 589, 599, 606, 607, 616, 623, 628, 629, 641, 644, 654, 655, 662, 663, 664, 665, 672, 673, 674, 675, 676, 688, 692, 695, 696, 700, 712, 713, 715, 719, 731, 732, 747, 750, 752, 769, 773, 774, 775, 776, 787, 788, 790, 794, 797, 798, 806, 807, 826, 829, 837, 838, 843, 847, 856, 857, 861, 862, 866, 868, 870, 871, 878, 887, 888, 891, 894, 897, 898, 905, 906, 907, 908, 909, 911, 913, 917, 918, 955, 969, 974, 975, 977, 980, 981, 982, 985, 986, 987, 988, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1005, 1011, 1013, 1017, 1018, 1020, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "unknown": [4, 16, 56, 169, 235, 260, 324, 326, 366, 373, 392, 399, 402, 413, 864, 870, 871, 948, 984, 995, 1011, 1031, 1035, 1039, 1040], "sake": [4, 124, 164, 169, 199, 310, 340, 349, 351, 386, 390, 666], "simplic": [4, 13, 31, 183, 340, 349, 351, 392, 411, 988, 989, 990, 1000], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 71, 72, 98, 111, 116, 117, 118, 119, 120, 127, 128, 131, 134, 145, 151, 156, 164, 168, 169, 170, 171, 175, 178, 180, 188, 229, 230, 231, 235, 239, 240, 241, 242, 246, 247, 250, 258, 260, 261, 267, 272, 278, 283, 296, 302, 311, 316, 317, 319, 320, 326, 338, 344, 349, 350, 358, 373, 376, 377, 378, 380, 383, 384, 386, 390, 392, 396, 399, 405, 408, 409, 412, 413, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 499, 563, 573, 585, 654, 669, 671, 685, 689, 794, 797, 798, 806, 808, 818, 819, 820, 822, 875, 877, 897, 974, 981, 982, 991, 1000, 1001, 1006, 1008, 1009, 1011, 1013, 1016, 1018, 1019, 1020, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 55, 59, 95, 117, 144, 151, 163, 170, 178, 179, 188, 199, 200, 217, 230, 232, 238, 240, 242, 248, 255, 263, 269, 281, 283, 305, 309, 312, 315, 316, 320, 340, 344, 345, 349, 350, 351, 354, 360, 364, 365, 372, 373, 376, 380, 381, 382, 383, 384, 385, 387, 390, 391, 392, 395, 396, 399, 403, 405, 406, 409, 410, 412, 413, 414, 416, 417, 418, 419, 421, 422, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 729, 730, 731, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 921, 923, 924, 926, 928, 933, 934, 935, 936, 937, 938, 939, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 966, 969, 971, 972, 974, 975, 977, 979, 981, 984, 985, 986, 988, 989, 991, 992, 995, 997, 999, 1000, 1001, 1011, 1015, 1018, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hyper": [4, 71, 117, 254, 260, 265, 302, 336, 360, 380, 390, 391, 392, 400, 409, 412, 414, 464, 640, 641, 798, 806, 808, 853, 895, 980, 981, 985, 988, 999, 1000, 1011, 1022, 1027, 1041], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 34, 44, 54, 55, 58, 60, 61, 62, 71, 72, 73, 79, 81, 82, 92, 95, 109, 111, 113, 115, 117, 120, 125, 126, 137, 138, 145, 148, 151, 155, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 199, 201, 203, 204, 207, 208, 216, 217, 224, 225, 228, 230, 233, 234, 235, 245, 246, 247, 248, 250, 251, 254, 259, 260, 261, 264, 265, 268, 271, 272, 273, 275, 278, 283, 285, 286, 289, 290, 296, 299, 300, 302, 305, 306, 307, 315, 316, 318, 319, 320, 321, 328, 331, 333, 338, 340, 341, 345, 346, 347, 349, 350, 351, 354, 355, 356, 357, 360, 364, 365, 366, 367, 370, 371, 373, 381, 383, 384, 385, 386, 387, 390, 396, 400, 403, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 984, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1001, 1005, 1006, 1012, 1014, 1016, 1017, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "compos": [4, 5, 25, 69, 70, 71, 75, 86, 113, 121, 131, 166, 169, 170, 171, 199, 201, 217, 230, 238, 240, 242, 278, 311, 316, 318, 319, 320, 367, 391, 396, 405, 406, 409, 511, 608, 984, 1027], "columntransform": [4, 70, 71, 131, 169, 170, 171, 199, 217, 230, 238, 240, 242, 311, 316, 318, 319, 320, 370, 372, 390, 391, 396, 462, 463, 625, 862, 974, 975, 1006, 1022, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "ensembl": [4, 7, 10, 26, 27, 31, 56, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 163, 164, 170, 171, 172, 199, 221, 228, 237, 238, 240, 241, 257, 272, 278, 281, 307, 311, 315, 316, 317, 318, 320, 321, 349, 360, 364, 367, 382, 383, 391, 392, 396, 403, 405, 409, 414, 433, 500, 511, 628, 629, 631, 654, 698, 797, 798, 823, 827, 828, 858, 861, 870, 901, 905, 907, 908, 974, 985, 986, 991, 992, 1001, 1005, 1006, 1007, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "cross_valid": [4, 121, 131, 169, 201, 256, 263, 278, 311, 378, 391, 396, 571, 818, 819, 985, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044], "pipelin": [4, 31, 54, 58, 71, 74, 76, 86, 116, 121, 142, 144, 148, 149, 163, 164, 170, 171, 175, 178, 187, 188, 199, 200, 205, 213, 217, 221, 227, 228, 229, 233, 238, 239, 242, 243, 253, 257, 259, 267, 274, 276, 283, 285, 286, 291, 292, 299, 302, 307, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 349, 350, 360, 364, 367, 370, 372, 373, 378, 381, 392, 396, 409, 413, 415, 419, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 498, 511, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 601, 603, 606, 607, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 709, 792, 793, 794, 795, 796, 797, 798, 801, 803, 808, 812, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 975, 981, 988, 989, 994, 995, 999, 1000, 1005, 1006, 1007, 1009, 1012, 1014, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1044], "make_pipelin": [4, 31, 58, 86, 116, 121, 131, 144, 145, 148, 163, 164, 169, 170, 175, 178, 187, 188, 199, 200, 205, 213, 217, 221, 228, 229, 230, 238, 239, 240, 242, 257, 267, 283, 292, 299, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 350, 360, 391, 396, 406, 409, 563, 672, 674, 849, 857, 882, 883, 885, 886, 887, 888, 897, 898, 899, 900, 902, 903, 975, 988, 995, 999, 1000, 1030, 1037, 1040], "ordinalencod": [4, 121, 131, 170, 171, 199, 238, 311, 320, 372, 392, 412, 577, 833, 865, 870, 878, 975, 987, 995, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044], "categorical_column": [4, 121, 169, 171, 238, 463], "ordinal_encod": [4, 121, 238], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 57, 62, 69, 74, 76, 86, 89, 90, 97, 98, 100, 102, 104, 105, 110, 121, 131, 135, 145, 157, 164, 166, 169, 170, 171, 175, 191, 199, 200, 207, 213, 215, 217, 221, 224, 228, 230, 233, 235, 236, 238, 242, 247, 257, 258, 261, 269, 283, 285, 291, 292, 293, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 320, 336, 339, 340, 349, 351, 360, 367, 372, 373, 374, 375, 378, 380, 383, 387, 392, 396, 401, 403, 404, 405, 407, 410, 412, 413, 414, 415, 421, 426, 429, 433, 437, 438, 439, 441, 443, 445, 448, 460, 461, 462, 463, 464, 478, 479, 480, 481, 484, 485, 492, 499, 504, 505, 510, 511, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 553, 555, 557, 560, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 632, 634, 635, 636, 637, 638, 649, 654, 659, 669, 672, 680, 684, 685, 686, 687, 688, 690, 697, 698, 709, 748, 749, 780, 794, 797, 798, 808, 823, 826, 832, 841, 846, 849, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 895, 897, 899, 902, 903, 926, 928, 943, 974, 975, 977, 979, 981, 982, 985, 986, 989, 999, 1000, 1002, 1005, 1006, 1007, 1011, 1016, 1017, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "remaind": [4, 121, 169, 188, 199, 201, 217, 238, 320, 354, 406, 460, 463, 1027, 1034, 1035, 1036, 1039, 1040, 1043], "passthrough": [4, 72, 121, 169, 170, 199, 217, 238, 311, 320, 406, 460, 463, 563, 564, 856, 857, 995, 1036, 1038, 1041, 1042, 1044], "short": [4, 5, 90, 121, 127, 190, 258, 301, 349, 378, 386, 409, 413, 417, 981, 982, 988, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "easier": [4, 44, 62, 66, 82, 121, 178, 184, 230, 238, 257, 258, 305, 336, 349, 360, 373, 378, 380, 383, 386, 390, 395, 407, 409, 464, 511, 895, 928, 980, 985, 992, 1001, 1006, 1009, 1020, 1036, 1041], "specifi": [4, 20, 55, 95, 121, 122, 152, 155, 157, 158, 159, 188, 200, 207, 245, 268, 364, 365, 372, 376, 378, 380, 387, 391, 392, 396, 399, 405, 406, 409, 410, 412, 414, 415, 417, 419, 433, 437, 441, 446, 448, 459, 460, 463, 465, 466, 468, 469, 470, 471, 472, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 511, 523, 527, 529, 533, 534, 536, 537, 542, 543, 548, 553, 555, 556, 557, 558, 560, 563, 564, 579, 580, 589, 590, 593, 598, 606, 607, 616, 627, 628, 629, 634, 639, 642, 643, 644, 647, 648, 649, 651, 652, 654, 655, 656, 657, 658, 659, 661, 664, 665, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 683, 687, 694, 696, 698, 705, 707, 724, 725, 733, 737, 749, 766, 774, 775, 778, 779, 782, 794, 796, 797, 798, 800, 801, 803, 807, 808, 811, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 832, 833, 835, 836, 837, 838, 842, 847, 870, 871, 872, 875, 876, 878, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 929, 936, 969, 975, 981, 982, 984, 985, 988, 992, 993, 995, 998, 999, 1000, 1015, 1019, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "next": [4, 7, 25, 60, 80, 120, 121, 125, 134, 158, 168, 172, 192, 196, 199, 229, 237, 241, 242, 247, 255, 266, 281, 310, 311, 312, 317, 325, 349, 354, 358, 360, 367, 376, 378, 380, 382, 402, 405, 406, 409, 412, 504, 505, 606, 630, 688, 694, 696, 698, 776, 792, 793, 823, 951, 974, 978, 984, 985, 995, 1009, 1024, 1027, 1040, 1041], "verbose_feature_names_out": [4, 121, 169, 170, 171, 242, 311, 318, 319, 320, 406, 460, 463, 1040], "max_it": [4, 8, 14, 17, 25, 30, 31, 72, 73, 95, 98, 116, 117, 133, 137, 139, 160, 163, 164, 169, 170, 178, 185, 191, 192, 206, 207, 208, 211, 212, 214, 220, 221, 222, 223, 239, 240, 245, 246, 247, 248, 251, 273, 293, 299, 300, 301, 311, 317, 318, 319, 324, 325, 333, 349, 350, 384, 392, 412, 417, 436, 439, 443, 444, 445, 450, 455, 457, 467, 468, 474, 478, 479, 480, 527, 528, 529, 531, 532, 533, 534, 535, 536, 539, 541, 542, 543, 544, 557, 558, 623, 634, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 668, 670, 672, 673, 674, 675, 676, 678, 679, 683, 684, 685, 686, 689, 690, 792, 793, 808, 846, 854, 855, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 975, 977, 981, 988, 989, 998, 999, 1016, 1020, 1028, 1031, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043], "300": [4, 20, 21, 34, 38, 50, 55, 58, 68, 98, 111, 112, 113, 117, 164, 189, 225, 228, 232, 249, 263, 293, 308, 317, 324, 342, 344, 380, 439, 443, 444, 455, 457, 635, 640, 641, 675, 686, 688, 690, 854, 981, 1037], "early_stop": [4, 117, 170, 207, 299, 318, 349, 392, 412, 557, 558, 662, 663, 664, 672, 673, 674, 854, 855, 999, 1035, 1038, 1041, 1042], "validation_fract": [4, 122, 207, 318, 412, 555, 556, 557, 558, 662, 663, 664, 672, 674, 854, 855, 999, 1035, 1041], "categorical_featur": [4, 71, 121, 170, 311, 317, 318, 319, 320, 383, 412, 557, 558, 628, 629, 992, 1035, 1039, 1042], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 75, 82, 86, 92, 95, 97, 100, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 137, 144, 145, 147, 151, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 180, 181, 185, 191, 198, 199, 202, 203, 205, 206, 207, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 233, 236, 237, 238, 239, 241, 242, 245, 247, 248, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 278, 281, 283, 286, 287, 291, 292, 293, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 327, 334, 336, 337, 338, 344, 345, 349, 350, 354, 358, 360, 380, 383, 387, 391, 392, 401, 405, 406, 409, 410, 412, 413, 417, 430, 433, 434, 436, 439, 443, 445, 447, 448, 449, 450, 454, 455, 456, 458, 465, 470, 484, 487, 488, 491, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 589, 590, 603, 604, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 628, 629, 630, 631, 634, 635, 636, 637, 638, 642, 643, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 670, 672, 673, 674, 675, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 730, 783, 788, 792, 793, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 816, 821, 822, 823, 825, 827, 828, 829, 830, 831, 842, 846, 853, 854, 855, 857, 862, 874, 878, 886, 889, 890, 897, 898, 899, 902, 905, 906, 907, 908, 910, 911, 933, 934, 954, 956, 959, 974, 975, 977, 980, 985, 986, 987, 988, 989, 992, 993, 995, 1000, 1001, 1011, 1015, 1016, 1020, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "set_output": [4, 121, 166, 170, 227, 243, 310, 311, 381, 429, 438, 439, 441, 443, 445, 460, 464, 478, 479, 480, 481, 492, 500, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 654, 684, 685, 688, 823, 841, 846, 849, 853, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 895, 1042, 1043], "across": [4, 55, 61, 67, 85, 90, 117, 137, 169, 188, 193, 221, 255, 257, 260, 283, 305, 310, 340, 379, 380, 387, 392, 399, 404, 405, 409, 413, 414, 417, 433, 436, 446, 448, 450, 453, 456, 458, 465, 468, 470, 484, 487, 488, 491, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 564, 584, 587, 590, 598, 603, 604, 606, 607, 628, 629, 630, 635, 636, 637, 638, 642, 643, 646, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 672, 674, 675, 681, 682, 685, 686, 687, 688, 689, 690, 691, 700, 701, 713, 726, 752, 783, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 842, 846, 853, 854, 855, 862, 866, 867, 874, 875, 877, 878, 886, 889, 890, 892, 893, 897, 898, 899, 902, 905, 906, 933, 934, 953, 956, 959, 974, 981, 983, 985, 995, 999, 1001, 1006, 1009, 1020, 1027, 1030, 1033, 1034, 1035, 1036, 1037], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 140, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 355, 356, 357, 358, 360, 364, 371, 372, 373, 376, 378, 379, 380, 381, 382, 384, 386, 387, 390, 391, 392, 395, 396, 398, 399, 401, 402, 405, 406, 409, 410, 411, 412, 413, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 456, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 481, 486, 489, 490, 492, 499, 502, 504, 505, 523, 527, 530, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 565, 566, 577, 578, 584, 585, 587, 623, 624, 625, 626, 627, 628, 629, 639, 642, 643, 645, 648, 649, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 668, 672, 673, 674, 680, 684, 687, 688, 689, 691, 695, 698, 699, 702, 703, 705, 708, 710, 721, 722, 724, 725, 729, 730, 733, 734, 749, 751, 768, 774, 776, 777, 778, 779, 782, 783, 784, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 823, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 899, 900, 902, 903, 905, 920, 932, 934, 938, 939, 940, 947, 948, 954, 956, 959, 972, 974, 975, 980, 981, 983, 985, 986, 988, 991, 995, 997, 1000, 1001, 1004, 1006, 1008, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1027, 1030, 1031, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "np": [4, 5, 7, 8, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 101, 102, 103, 105, 106, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 140, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 355, 356, 357, 358, 360, 364, 372, 373, 378, 380, 383, 384, 387, 390, 392, 396, 402, 405, 406, 409, 410, 411, 412, 413, 415, 418, 420, 423, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 456, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 481, 492, 493, 504, 505, 516, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 553, 554, 555, 556, 557, 559, 560, 561, 562, 565, 566, 577, 578, 581, 582, 584, 585, 589, 590, 593, 602, 605, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 666, 667, 668, 670, 671, 672, 673, 674, 677, 678, 679, 680, 687, 688, 691, 695, 698, 699, 702, 703, 705, 708, 709, 710, 711, 721, 722, 724, 725, 729, 730, 733, 734, 736, 749, 751, 758, 764, 768, 773, 776, 777, 778, 779, 782, 783, 784, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 823, 824, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 847, 848, 849, 853, 854, 861, 862, 864, 870, 871, 872, 873, 874, 876, 877, 878, 885, 886, 889, 890, 892, 893, 894, 897, 899, 900, 902, 903, 905, 906, 907, 908, 915, 917, 918, 920, 922, 923, 932, 934, 939, 947, 948, 950, 954, 956, 959, 961, 962, 963, 974, 975, 980, 981, 983, 985, 986, 988, 989, 991, 995, 996, 997, 999, 1000, 1001, 1011, 1015, 1016, 1018, 1019, 1020, 1028, 1030, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 56, 58, 61, 70, 75, 92, 95, 97, 98, 101, 103, 105, 109, 111, 114, 116, 121, 122, 123, 124, 131, 154, 157, 159, 160, 164, 172, 179, 187, 188, 191, 196, 199, 200, 207, 208, 209, 217, 220, 221, 235, 236, 238, 245, 246, 247, 248, 250, 251, 255, 258, 259, 260, 261, 263, 268, 271, 274, 283, 288, 290, 293, 296, 300, 302, 305, 307, 310, 311, 315, 328, 332, 336, 340, 346, 349, 350, 351, 364, 373, 378, 380, 384, 385, 390, 406, 409, 413, 417, 504, 529, 593, 606, 607, 776, 870, 924, 929, 946, 985, 992, 1000, 1016], "model_prop": 4, "none": [4, 8, 9, 10, 16, 17, 26, 30, 33, 39, 41, 42, 44, 52, 54, 55, 56, 62, 97, 100, 105, 115, 120, 121, 123, 126, 140, 148, 152, 158, 159, 172, 178, 199, 200, 207, 210, 217, 220, 234, 235, 236, 238, 254, 260, 261, 272, 288, 290, 294, 309, 312, 317, 318, 325, 328, 334, 336, 337, 340, 341, 343, 349, 350, 373, 375, 378, 380, 385, 387, 392, 396, 405, 409, 412, 415, 416, 417, 421, 422, 423, 424, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 698, 699, 703, 704, 705, 707, 708, 709, 710, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 729, 730, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 920, 921, 922, 923, 926, 928, 933, 934, 937, 938, 939, 940, 944, 945, 948, 951, 953, 954, 956, 959, 960, 966, 969, 970, 972, 974, 981, 985, 995, 998, 1001, 1011, 1015, 1020, 1022, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "model_step": 4, "cv_result": [4, 71, 117, 258, 259, 261, 263, 396, 808, 820, 985], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 58, 60, 70, 71, 72, 73, 74, 75, 78, 82, 86, 103, 109, 111, 113, 120, 121, 123, 124, 127, 130, 131, 138, 139, 144, 145, 148, 163, 166, 168, 169, 170, 171, 172, 175, 183, 190, 191, 194, 199, 201, 205, 207, 215, 217, 228, 233, 234, 235, 238, 242, 249, 253, 258, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 278, 281, 290, 291, 292, 299, 300, 301, 302, 307, 310, 311, 312, 315, 316, 317, 318, 324, 325, 327, 328, 336, 344, 349, 350, 354, 360, 373, 378, 380, 383, 391, 392, 399, 400, 402, 403, 404, 406, 408, 410, 412, 414, 422, 424, 428, 433, 439, 443, 445, 448, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 498, 500, 528, 532, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 600, 602, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 737, 750, 751, 752, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 797, 798, 800, 808, 813, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 846, 847, 848, 853, 854, 855, 857, 877, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 936, 943, 974, 977, 981, 983, 988, 991, 993, 995, 999, 1006, 1014, 1016, 1018, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "neg_mean_absolute_error": [4, 131, 201, 985], "neg_root_mean_squared_error": [4, 311, 985], "return_estim": [4, 169, 409, 820, 1035], "getattr": [4, 8, 305, 380, 392, 1043], "els": [4, 8, 11, 12, 16, 19, 34, 41, 44, 49, 55, 56, 62, 82, 99, 114, 120, 124, 159, 169, 170, 188, 201, 217, 221, 228, 232, 234, 235, 236, 237, 238, 260, 261, 264, 271, 283, 288, 296, 299, 300, 307, 349, 350, 358, 378, 382, 384, 412, 413, 415, 417, 433, 445, 504, 516, 529, 565, 621, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 668, 669, 670, 672, 675, 677, 678, 679, 680, 699, 705, 763, 783, 789, 791, 797, 798, 823, 861, 870, 873, 876, 884, 897, 898, 912, 947, 949, 951, 972, 1001], "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 63, 67, 70, 71, 73, 74, 75, 80, 85, 86, 92, 95, 98, 103, 104, 106, 111, 114, 117, 118, 119, 120, 121, 123, 125, 137, 139, 144, 145, 147, 148, 151, 152, 154, 156, 160, 168, 170, 171, 172, 175, 183, 184, 185, 186, 190, 191, 194, 195, 199, 201, 202, 203, 206, 207, 214, 215, 217, 221, 222, 225, 230, 232, 234, 235, 238, 242, 248, 254, 258, 259, 260, 261, 263, 265, 268, 269, 273, 283, 287, 294, 296, 300, 301, 302, 307, 310, 312, 315, 316, 317, 319, 321, 324, 325, 328, 336, 349, 350, 351, 354, 358, 360, 364, 372, 373, 376, 379, 380, 386, 392, 396, 399, 406, 409, 412, 413, 415, 460, 463, 464, 468, 474, 498, 508, 537, 540, 545, 546, 555, 556, 557, 558, 560, 561, 565, 566, 573, 579, 580, 584, 585, 587, 608, 613, 626, 642, 643, 645, 646, 648, 649, 650, 652, 656, 657, 658, 659, 662, 663, 672, 673, 680, 709, 713, 732, 790, 792, 793, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 854, 855, 856, 857, 858, 859, 867, 873, 877, 885, 895, 896, 897, 898, 899, 902, 910, 921, 946, 953, 975, 985, 986, 987, 988, 993, 1001, 1011, 1015, 1016, 1018, 1019, 1020, 1027, 1029, 1035, 1036, 1038, 1042], "mae": [4, 131, 199, 201, 554, 561, 740, 906, 908, 985, 1001, 1034, 1035, 1039, 1040], "test_neg_mean_absolute_error": [4, 201], "rmse": [4, 81, 311, 745, 985, 1038], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 58, 71, 73, 75, 86, 111, 118, 119, 144, 148, 151, 152, 153, 155, 160, 168, 170, 171, 179, 183, 185, 191, 199, 201, 205, 214, 215, 217, 221, 232, 234, 258, 260, 261, 263, 266, 268, 271, 283, 299, 328, 349, 350, 351, 993, 1016], "std": [4, 11, 12, 37, 46, 50, 54, 61, 66, 79, 81, 82, 96, 97, 98, 118, 120, 121, 131, 138, 160, 163, 164, 169, 179, 184, 208, 232, 258, 259, 260, 262, 263, 265, 268, 270, 274, 311, 327, 339, 350, 360, 392, 405, 409, 412, 511, 602, 605, 877, 888, 995, 1019, 1035, 1039], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 37, 39, 40, 58, 70, 75, 80, 85, 92, 95, 98, 100, 103, 105, 106, 111, 113, 114, 118, 122, 133, 143, 148, 151, 155, 160, 170, 172, 179, 183, 195, 199, 200, 203, 214, 216, 217, 220, 231, 232, 233, 236, 245, 247, 248, 258, 260, 263, 265, 266, 267, 269, 270, 283, 286, 288, 302, 307, 309, 310, 317, 320, 325, 340, 344, 358, 364, 372, 375, 376, 378, 382, 384, 387, 392, 395, 396, 402, 403, 405, 408, 409, 410, 411, 412, 413, 415, 416, 440, 441, 443, 444, 446, 465, 467, 470, 474, 485, 511, 512, 513, 514, 519, 524, 534, 536, 537, 543, 553, 554, 555, 556, 559, 560, 561, 562, 584, 585, 586, 587, 603, 604, 610, 623, 645, 667, 675, 688, 692, 695, 702, 703, 750, 799, 802, 804, 809, 810, 813, 833, 837, 838, 842, 862, 889, 891, 905, 906, 907, 908, 932, 937, 938, 960, 964, 965, 974, 977, 979, 981, 982, 985, 986, 987, 988, 989, 991, 992, 995, 997, 999, 1000, 1001, 1011, 1018, 1020, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "n_iter_": [4, 98, 207, 248, 392, 436, 443, 444, 445, 467, 468, 478, 479, 480, 527, 528, 529, 532, 533, 534, 535, 536, 539, 557, 558, 623, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 676, 686, 688, 792, 793, 846, 854, 855, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 1031, 1034, 1035, 1037, 1040, 1041, 1043], "267": [4, 1027], "044": [4, 258, 746, 985], "003": [4, 134, 135], "067": [4, 160], "006": [4, 171, 173, 268, 384], "earli": [4, 14, 44, 62, 110, 117, 120, 135, 166, 177, 218, 316, 392, 412, 437, 441, 445, 459, 492, 500, 511, 516, 532, 533, 534, 535, 542, 549, 550, 555, 556, 557, 558, 567, 623, 641, 652, 662, 663, 664, 672, 674, 688, 823, 854, 855, 959, 982, 988, 995, 1004, 1006, 1009, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042], "stop": [4, 12, 17, 44, 62, 110, 117, 135, 156, 158, 166, 170, 177, 201, 218, 316, 378, 380, 386, 387, 392, 405, 410, 412, 414, 436, 437, 439, 441, 443, 445, 448, 450, 458, 459, 467, 468, 474, 478, 479, 480, 492, 500, 504, 505, 511, 516, 528, 532, 533, 534, 535, 536, 539, 541, 542, 543, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 567, 584, 585, 587, 598, 613, 623, 640, 641, 642, 644, 645, 648, 652, 654, 655, 662, 663, 664, 665, 667, 672, 673, 674, 676, 687, 688, 691, 710, 792, 793, 823, 854, 855, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 939, 959, 974, 981, 989, 990, 1000, 1001, 1006, 1007, 1009, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "place": [4, 16, 60, 229, 239, 287, 364, 376, 378, 379, 380, 383, 385, 393, 403, 413, 415, 437, 441, 442, 478, 479, 480, 511, 577, 586, 624, 626, 627, 763, 776, 792, 964, 965, 1005, 1027, 1034, 1037, 1038, 1040], "quit": [4, 53, 57, 86, 114, 137, 148, 169, 170, 197, 217, 268, 278, 318, 349, 364, 383, 391, 405, 413, 980, 982, 987, 1009, 1035], "good": [4, 9, 20, 25, 27, 40, 44, 46, 49, 52, 53, 55, 58, 74, 81, 86, 105, 117, 120, 123, 124, 152, 156, 163, 169, 183, 188, 199, 200, 205, 214, 225, 228, 232, 235, 238, 246, 248, 254, 260, 266, 275, 302, 310, 311, 317, 324, 329, 336, 349, 350, 360, 364, 365, 366, 377, 379, 380, 381, 382, 384, 390, 392, 399, 402, 403, 405, 407, 409, 410, 412, 413, 414, 415, 433, 435, 440, 530, 555, 557, 558, 586, 626, 636, 643, 644, 652, 654, 655, 657, 665, 676, 686, 690, 718, 726, 737, 759, 822, 891, 934, 974, 980, 981, 982, 985, 986, 988, 989, 990, 992, 993, 995, 999, 1000, 1001, 1006, 1009, 1011, 1015, 1018, 1020, 1033], "trial": [4, 265, 443, 445, 456, 667, 792, 793, 981, 1033], "without": [4, 5, 13, 24, 36, 42, 55, 56, 67, 68, 75, 100, 117, 123, 126, 128, 131, 144, 148, 158, 166, 168, 169, 170, 183, 188, 207, 228, 232, 235, 236, 239, 241, 254, 261, 265, 267, 278, 284, 297, 305, 306, 310, 312, 315, 340, 344, 350, 366, 373, 374, 376, 378, 379, 380, 382, 383, 384, 387, 390, 391, 392, 396, 399, 405, 406, 410, 412, 413, 414, 415, 430, 435, 437, 442, 454, 465, 470, 492, 500, 511, 528, 530, 551, 552, 559, 575, 576, 607, 623, 627, 630, 635, 655, 688, 696, 776, 797, 798, 799, 806, 808, 822, 823, 839, 846, 850, 856, 857, 860, 863, 866, 867, 869, 873, 874, 875, 877, 882, 897, 913, 954, 974, 975, 979, 981, 982, 985, 988, 991, 995, 999, 1000, 1001, 1005, 1006, 1011, 1012, 1020, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "tune": [4, 44, 55, 71, 100, 111, 117, 147, 151, 163, 170, 188, 203, 204, 216, 224, 238, 254, 265, 285, 306, 336, 340, 344, 349, 360, 364, 365, 366, 391, 392, 400, 404, 405, 409, 412, 414, 415, 448, 458, 555, 556, 590, 609, 610, 611, 613, 615, 616, 618, 619, 621, 639, 655, 686, 690, 853, 979, 980, 981, 982, 984, 985, 988, 989, 991, 999, 1000, 1012, 1022, 1027, 1041, 1043], "just": [4, 31, 70, 86, 95, 117, 121, 148, 189, 196, 221, 233, 260, 267, 271, 283, 299, 336, 349, 350, 358, 360, 373, 377, 378, 379, 380, 382, 383, 386, 390, 391, 392, 402, 405, 406, 409, 412, 414, 417, 464, 529, 531, 538, 542, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 575, 580, 606, 607, 642, 648, 653, 654, 656, 658, 662, 663, 664, 672, 673, 674, 800, 816, 846, 854, 855, 974, 981, 984, 985, 986, 989, 993, 995, 999, 1006, 1018, 1027, 1031, 1033, 1035, 1039, 1043], "had": [4, 9, 47, 124, 156, 235, 305, 311, 318, 360, 378, 379, 413, 416, 440, 975, 985, 1009, 1011, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1042], "explicit": [4, 166, 170, 175, 227, 235, 243, 340, 364, 365, 366, 377, 379, 390, 392, 393, 406, 413, 419, 468, 495, 497, 498, 537, 547, 548, 627, 634, 635, 637, 672, 794, 795, 802, 841, 849, 857, 897, 902, 949, 953, 977, 979, 981, 985, 995, 1001, 1005, 1027, 1031, 1036, 1037, 1040], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 56, 60, 65, 66, 70, 71, 86, 95, 97, 100, 112, 127, 143, 148, 151, 163, 164, 169, 170, 171, 175, 178, 183, 194, 200, 201, 203, 217, 232, 235, 238, 239, 258, 260, 261, 263, 269, 278, 285, 305, 310, 312, 318, 328, 336, 351, 358, 364, 366, 373, 376, 378, 379, 380, 381, 382, 386, 390, 392, 393, 394, 396, 399, 403, 404, 405, 406, 409, 410, 412, 413, 415, 440, 443, 445, 446, 453, 460, 463, 489, 490, 504, 542, 563, 564, 565, 566, 603, 604, 612, 616, 617, 620, 628, 635, 660, 688, 763, 766, 769, 773, 774, 775, 776, 784, 794, 808, 815, 822, 857, 861, 866, 867, 871, 875, 877, 878, 887, 888, 894, 905, 906, 942, 951, 974, 975, 981, 984, 985, 986, 988, 989, 990, 995, 1000, 1001, 1004, 1005, 1008, 1009, 1011, 1018, 1019, 1020, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "But": [4, 9, 53, 168, 200, 201, 260, 283, 305, 378, 390, 405, 408, 411, 412, 458, 741, 905, 906, 974, 985, 1000, 1006], "much": [4, 6, 7, 9, 19, 25, 40, 55, 80, 82, 92, 98, 105, 116, 124, 125, 131, 132, 133, 151, 163, 164, 169, 170, 171, 172, 175, 196, 197, 201, 232, 235, 260, 262, 263, 266, 271, 301, 306, 310, 311, 312, 317, 318, 320, 336, 341, 349, 350, 360, 364, 366, 373, 378, 379, 380, 383, 386, 390, 391, 395, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 443, 444, 492, 530, 531, 532, 534, 555, 556, 557, 558, 654, 655, 662, 663, 664, 672, 673, 674, 688, 774, 775, 797, 798, 812, 872, 890, 897, 974, 977, 980, 981, 982, 984, 985, 986, 988, 989, 991, 993, 997, 998, 1000, 1001, 1006, 1009, 1015, 1016, 1018, 1019, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "monoton": [4, 25, 110, 135, 166, 170, 217, 231, 316, 403, 553, 554, 557, 558, 560, 561, 628, 631, 632, 690, 702, 873, 885, 899, 902, 905, 906, 907, 908, 982, 986, 995, 1000, 1034, 1038, 1042, 1044], "relationship": [4, 20, 111, 112, 157, 168, 169, 178, 183, 199, 201, 202, 267, 306, 312, 392, 405, 407, 409, 458, 632, 710, 982, 985, 987, 988, 992, 993, 1018, 1032], "case": [4, 7, 8, 25, 27, 34, 37, 49, 52, 55, 57, 61, 66, 71, 72, 81, 86, 100, 103, 114, 116, 117, 124, 125, 131, 145, 147, 148, 151, 158, 169, 170, 172, 183, 185, 188, 190, 199, 200, 201, 203, 204, 207, 213, 215, 216, 217, 228, 232, 233, 234, 235, 238, 239, 250, 254, 257, 259, 260, 261, 263, 266, 267, 269, 278, 283, 286, 290, 301, 305, 307, 310, 312, 315, 318, 340, 349, 350, 351, 358, 360, 364, 365, 366, 372, 373, 376, 378, 379, 380, 382, 383, 384, 385, 387, 390, 391, 392, 393, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 433, 436, 439, 440, 442, 443, 447, 449, 459, 460, 461, 463, 470, 492, 504, 505, 511, 535, 537, 538, 539, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 584, 587, 589, 590, 593, 598, 602, 605, 606, 607, 621, 623, 624, 626, 628, 643, 644, 649, 652, 653, 654, 655, 657, 659, 662, 664, 665, 668, 670, 671, 672, 676, 678, 679, 680, 681, 682, 683, 695, 699, 704, 705, 708, 714, 716, 717, 718, 721, 723, 724, 729, 730, 733, 737, 738, 740, 741, 743, 745, 748, 749, 751, 758, 773, 776, 778, 780, 783, 784, 785, 789, 791, 793, 794, 797, 798, 800, 808, 812, 816, 817, 818, 819, 820, 821, 822, 824, 826, 834, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 857, 864, 866, 867, 870, 871, 872, 875, 876, 877, 878, 881, 887, 888, 889, 890, 897, 899, 902, 905, 906, 912, 913, 923, 934, 935, 953, 974, 975, 977, 979, 980, 982, 983, 984, 986, 987, 988, 989, 991, 992, 995, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "usual": [4, 40, 78, 79, 81, 123, 124, 126, 131, 168, 170, 185, 199, 200, 254, 257, 260, 269, 270, 306, 318, 336, 360, 364, 365, 376, 378, 380, 386, 390, 391, 392, 396, 402, 405, 406, 409, 410, 412, 413, 414, 446, 452, 534, 536, 538, 543, 555, 556, 603, 604, 626, 636, 654, 655, 662, 663, 664, 672, 673, 674, 688, 721, 753, 800, 821, 825, 897, 934, 974, 975, 977, 980, 981, 982, 984, 985, 986, 989, 990, 991, 992, 995, 999, 1000, 1001, 1011, 1017, 1018, 1042, 1044], "hot": [4, 71, 116, 119, 131, 169, 199, 269, 306, 307, 311, 317, 336, 392, 412, 413, 547, 562, 577, 644, 654, 655, 665, 676, 860, 862, 864, 865, 868, 870, 871, 878, 981, 995, 1035, 1041, 1042], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 55, 57, 58, 60, 67, 73, 80, 86, 91, 96, 114, 116, 117, 119, 124, 125, 127, 129, 144, 145, 148, 151, 153, 158, 163, 164, 169, 170, 183, 187, 188, 199, 200, 203, 204, 207, 216, 217, 220, 222, 225, 228, 229, 231, 232, 233, 235, 242, 250, 257, 260, 261, 267, 275, 281, 283, 293, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 327, 329, 336, 338, 340, 344, 349, 350, 351, 354, 355, 358, 360, 364, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 396, 399, 401, 402, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 416, 421, 428, 433, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 464, 468, 470, 478, 479, 480, 481, 485, 492, 494, 499, 508, 510, 511, 515, 519, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 593, 598, 603, 604, 605, 606, 607, 610, 615, 618, 619, 623, 624, 625, 626, 627, 628, 629, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 688, 689, 691, 697, 700, 702, 703, 724, 725, 733, 736, 737, 758, 764, 773, 778, 779, 782, 783, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 923, 948, 969, 974, 975, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1001, 1004, 1008, 1009, 1011, 1018, 1019, 1020, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "consist": [4, 7, 26, 32, 37, 56, 57, 70, 80, 90, 92, 95, 117, 121, 127, 134, 148, 154, 156, 159, 164, 172, 199, 217, 234, 238, 266, 269, 301, 310, 315, 318, 344, 350, 360, 364, 371, 373, 375, 378, 380, 384, 385, 386, 387, 391, 392, 393, 403, 405, 407, 411, 412, 413, 423, 424, 427, 428, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 486, 493, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 587, 607, 623, 624, 625, 626, 631, 634, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 670, 673, 674, 675, 683, 684, 685, 686, 687, 696, 730, 792, 793, 801, 825, 826, 827, 829, 830, 831, 832, 840, 841, 843, 845, 848, 849, 855, 860, 861, 862, 864, 868, 869, 872, 873, 875, 876, 878, 889, 890, 893, 897, 898, 900, 901, 903, 906, 908, 917, 919, 940, 956, 959, 974, 977, 978, 979, 981, 982, 984, 985, 986, 988, 989, 995, 998, 1000, 1001, 1004, 1006, 1009, 1011, 1018, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 56, 58, 61, 71, 72, 79, 82, 86, 97, 100, 101, 128, 148, 151, 152, 153, 156, 157, 158, 160, 166, 170, 175, 179, 180, 187, 199, 201, 203, 213, 214, 215, 217, 219, 222, 226, 228, 234, 238, 250, 257, 260, 261, 262, 267, 286, 300, 301, 302, 304, 305, 313, 316, 319, 321, 329, 331, 333, 336, 340, 347, 360, 363, 364, 370, 371, 372, 375, 378, 383, 387, 390, 391, 392, 404, 405, 406, 410, 412, 413, 414, 415, 442, 443, 446, 447, 453, 460, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 497, 506, 510, 511, 520, 530, 534, 536, 537, 543, 545, 546, 557, 558, 578, 586, 587, 593, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 627, 628, 637, 640, 641, 642, 643, 645, 648, 654, 655, 656, 657, 658, 668, 670, 672, 673, 674, 677, 683, 684, 685, 686, 688, 690, 695, 699, 712, 736, 742, 752, 754, 764, 770, 772, 800, 808, 811, 823, 824, 825, 837, 838, 839, 854, 855, 858, 861, 866, 867, 869, 872, 874, 875, 877, 882, 883, 884, 886, 887, 889, 890, 897, 898, 899, 900, 901, 902, 903, 961, 962, 963, 974, 977, 978, 981, 985, 986, 987, 988, 989, 993, 999, 1000, 1006, 1009, 1011, 1018, 1019, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "same": [4, 7, 8, 16, 20, 26, 34, 37, 40, 44, 53, 55, 57, 58, 64, 70, 71, 72, 92, 95, 97, 100, 103, 105, 112, 114, 118, 121, 122, 124, 125, 129, 148, 151, 169, 170, 172, 185, 187, 188, 193, 199, 200, 201, 207, 217, 235, 239, 250, 255, 256, 257, 258, 260, 261, 263, 265, 266, 268, 273, 283, 286, 288, 301, 305, 306, 308, 310, 311, 315, 317, 327, 336, 349, 350, 351, 358, 360, 364, 365, 366, 372, 373, 375, 377, 378, 380, 382, 384, 387, 390, 391, 392, 393, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 426, 430, 434, 435, 442, 446, 452, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 489, 491, 492, 494, 500, 504, 505, 527, 528, 531, 532, 533, 534, 535, 536, 539, 543, 545, 547, 548, 549, 550, 553, 555, 556, 557, 558, 560, 561, 563, 564, 585, 586, 598, 599, 602, 606, 607, 609, 618, 623, 624, 625, 628, 629, 642, 645, 648, 649, 651, 654, 655, 659, 662, 663, 664, 668, 669, 670, 671, 672, 673, 674, 680, 683, 695, 700, 701, 708, 709, 711, 713, 721, 726, 727, 731, 737, 750, 751, 752, 773, 774, 775, 781, 783, 787, 789, 790, 792, 793, 794, 795, 797, 798, 800, 802, 803, 808, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 839, 840, 841, 845, 847, 848, 849, 860, 861, 862, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 879, 886, 897, 898, 905, 907, 919, 923, 934, 951, 956, 959, 960, 970, 974, 975, 977, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 999, 1000, 1001, 1005, 1006, 1015, 1020, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "minmaxscal": [4, 5, 72, 144, 175, 221, 238, 300, 317, 366, 401, 406, 460, 883, 975, 995, 1029, 1032, 1035, 1037, 1038, 1039, 1043, 1044], "although": [4, 9, 25, 118, 131, 168, 196, 217, 228, 247, 281, 340, 360, 366, 380, 392, 405, 406, 410, 413, 492, 811, 814, 868, 984, 986, 987, 988, 991, 1001, 1011, 1018, 1019, 1020, 1027, 1035, 1042], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 34, 40, 46, 53, 55, 57, 70, 72, 73, 86, 106, 111, 116, 117, 120, 126, 131, 148, 157, 169, 170, 183, 196, 199, 205, 217, 220, 221, 222, 225, 228, 231, 232, 233, 235, 236, 238, 247, 248, 255, 260, 262, 263, 267, 269, 270, 281, 283, 296, 305, 307, 309, 311, 312, 318, 319, 327, 328, 334, 336, 344, 346, 349, 350, 351, 364, 372, 376, 378, 379, 380, 382, 386, 391, 392, 396, 399, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 430, 436, 438, 442, 443, 445, 446, 450, 452, 461, 463, 468, 469, 475, 483, 495, 499, 504, 523, 531, 533, 534, 535, 537, 540, 542, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 577, 578, 579, 584, 585, 587, 589, 590, 593, 598, 602, 606, 623, 628, 634, 645, 646, 647, 650, 651, 652, 655, 667, 669, 671, 678, 679, 694, 696, 698, 703, 723, 724, 725, 729, 731, 733, 738, 741, 773, 778, 779, 782, 783, 789, 794, 797, 798, 808, 854, 856, 858, 859, 860, 862, 864, 866, 869, 870, 871, 874, 877, 878, 886, 889, 890, 894, 897, 898, 905, 906, 907, 908, 912, 917, 921, 934, 937, 938, 951, 953, 969, 974, 975, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 993, 995, 999, 1000, 1001, 1020, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 34, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 55, 60, 62, 66, 71, 73, 75, 81, 86, 95, 98, 100, 102, 106, 114, 115, 116, 118, 121, 124, 125, 127, 129, 130, 140, 147, 148, 151, 153, 155, 159, 163, 169, 170, 171, 172, 179, 184, 185, 188, 189, 194, 200, 201, 203, 207, 213, 214, 217, 220, 221, 224, 228, 231, 233, 239, 245, 250, 251, 254, 255, 258, 260, 261, 263, 266, 267, 268, 269, 271, 272, 275, 278, 283, 285, 289, 299, 300, 301, 305, 306, 307, 310, 315, 317, 319, 320, 321, 324, 327, 329, 336, 340, 341, 344, 349, 351, 356, 357, 358, 364, 365, 366, 372, 373, 375, 378, 380, 382, 383, 384, 386, 390, 391, 392, 393, 399, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 430, 436, 437, 439, 441, 442, 443, 446, 447, 448, 449, 450, 451, 453, 455, 458, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 475, 485, 504, 505, 507, 509, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 575, 576, 577, 578, 580, 584, 585, 587, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 628, 630, 632, 636, 639, 648, 649, 654, 660, 661, 662, 663, 672, 673, 674, 682, 685, 686, 687, 688, 689, 690, 691, 704, 706, 708, 713, 720, 721, 723, 724, 725, 726, 727, 731, 732, 733, 749, 751, 752, 759, 766, 769, 773, 774, 775, 776, 778, 779, 780, 782, 788, 789, 792, 793, 794, 796, 797, 798, 799, 804, 808, 809, 810, 811, 813, 814, 818, 824, 825, 826, 828, 829, 830, 831, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 861, 862, 870, 871, 874, 875, 878, 886, 890, 894, 897, 899, 902, 905, 906, 907, 908, 909, 910, 917, 918, 933, 934, 936, 940, 950, 956, 959, 975, 977, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1005, 1006, 1008, 1011, 1015, 1016, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "compar": [4, 5, 19, 20, 24, 25, 27, 34, 36, 37, 43, 49, 54, 55, 57, 58, 64, 68, 72, 81, 84, 86, 87, 98, 103, 105, 110, 111, 112, 114, 120, 121, 124, 129, 131, 135, 148, 155, 163, 164, 166, 169, 171, 172, 177, 181, 183, 187, 188, 194, 196, 199, 202, 203, 205, 207, 209, 216, 217, 218, 220, 221, 224, 227, 230, 233, 238, 239, 241, 243, 247, 248, 253, 255, 257, 265, 267, 269, 271, 276, 278, 284, 288, 292, 293, 297, 298, 303, 304, 306, 310, 313, 317, 340, 349, 350, 351, 358, 360, 366, 373, 375, 378, 380, 402, 403, 405, 407, 408, 409, 410, 412, 414, 415, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 454, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 486, 492, 498, 500, 508, 510, 518, 520, 524, 527, 533, 547, 548, 557, 558, 559, 560, 561, 567, 627, 635, 640, 641, 649, 651, 653, 654, 659, 662, 664, 672, 673, 680, 691, 701, 708, 711, 726, 733, 738, 781, 793, 794, 799, 808, 820, 823, 830, 839, 843, 846, 850, 854, 857, 858, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 877, 878, 882, 883, 884, 885, 886, 887, 888, 897, 898, 899, 901, 902, 974, 977, 978, 979, 981, 982, 984, 985, 986, 987, 988, 989, 991, 995, 996, 999, 1000, 1001, 1004, 1005, 1018, 1019, 1027, 1029, 1034, 1035, 1040], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 71, 73, 75, 86, 116, 131, 133, 134, 137, 139, 147, 148, 151, 163, 166, 168, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 228, 229, 230, 231, 235, 237, 240, 242, 256, 263, 268, 269, 273, 274, 281, 302, 306, 307, 310, 312, 315, 316, 317, 318, 319, 321, 328, 349, 360, 364, 366, 367, 377, 378, 380, 384, 386, 387, 391, 392, 396, 406, 412, 434, 461, 533, 535, 538, 539, 541, 542, 544, 563, 564, 565, 566, 593, 627, 628, 630, 631, 634, 636, 637, 638, 639, 696, 697, 783, 808, 816, 818, 819, 820, 828, 829, 830, 831, 855, 872, 876, 897, 898, 901, 904, 929, 977, 981, 985, 986, 991, 993, 995, 999, 1015, 1016, 1018, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "ridgecv": [4, 75, 131, 148, 169, 237, 392, 396, 412, 564, 639, 668, 671, 981, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "onehotencod": [4, 71, 116, 121, 131, 169, 170, 199, 217, 230, 238, 240, 242, 311, 316, 318, 321, 372, 392, 406, 412, 462, 463, 562, 577, 578, 860, 864, 865, 868, 871, 878, 975, 995, 1028, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "one_hot_encod": [4, 121], "handle_unknown": [4, 71, 116, 121, 131, 170, 171, 230, 238, 240, 242, 311, 316, 319, 870, 871, 995, 1031, 1035, 1039, 1040], "ignor": [4, 6, 8, 17, 44, 49, 55, 62, 71, 111, 113, 116, 121, 128, 131, 170, 187, 191, 199, 208, 214, 230, 235, 240, 242, 251, 300, 301, 310, 311, 316, 319, 340, 341, 350, 355, 378, 380, 382, 384, 392, 395, 405, 406, 412, 413, 423, 424, 427, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 456, 457, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 484, 499, 504, 505, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 575, 577, 578, 579, 584, 585, 586, 587, 590, 593, 598, 599, 606, 607, 623, 624, 625, 626, 628, 629, 631, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 703, 709, 710, 721, 724, 725, 733, 750, 751, 758, 764, 769, 773, 778, 779, 782, 783, 792, 793, 795, 796, 797, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 931, 960, 981, 982, 985, 987, 991, 995, 1000, 1016, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042], "sparse_output": [4, 121, 242, 311, 319, 562, 864, 868, 870, 876, 881, 995, 1042, 1043], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 34, 37, 40, 42, 45, 52, 56, 60, 65, 75, 82, 86, 95, 97, 98, 100, 101, 102, 104, 105, 111, 113, 114, 120, 124, 127, 128, 130, 131, 132, 148, 151, 154, 156, 157, 158, 159, 160, 163, 164, 169, 178, 179, 180, 181, 183, 184, 185, 187, 188, 193, 194, 196, 197, 199, 200, 201, 203, 204, 208, 211, 212, 217, 220, 221, 224, 233, 234, 241, 245, 260, 261, 262, 263, 264, 267, 268, 270, 272, 273, 281, 283, 286, 288, 291, 293, 299, 301, 305, 306, 307, 308, 310, 312, 316, 318, 319, 326, 328, 333, 334, 337, 338, 340, 341, 344, 345, 346, 349, 364, 373, 380, 384, 390, 407, 408, 410, 412, 414, 415, 417, 442, 467, 468, 474, 523, 527, 529, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 556, 591, 592, 594, 607, 609, 611, 612, 619, 627, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 683, 718, 743, 832, 833, 834, 836, 854, 855, 893, 905, 906, 907, 908, 974, 981, 985, 987, 989, 993, 998, 999, 1000, 1001, 1015, 1018, 1020, 1024, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1039, 1040, 1041, 1042, 1043], "logspac": [4, 12, 73, 78, 103, 137, 138, 148, 152, 157, 169, 192, 203, 204, 232, 234, 249, 261, 273, 275, 287, 299, 307, 310, 336, 344, 816, 980, 981, 1015, 1016, 1018], "naive_linear_pipelin": 4, "alpha_": [4, 82, 137, 169, 179, 187, 188, 468, 607, 640, 641, 643, 647, 649, 651, 652, 657, 659, 669, 671, 981, 1001, 1015, 1027, 1034], "7298221281347033": 4, "142": [4, 58, 412], "014": [4, 268, 384], "184": [4, 199, 302, 322, 351, 352, 384, 1018], "020": [4, 153, 161, 993], "affirm": 4, "select": [4, 7, 9, 36, 44, 55, 57, 62, 68, 69, 71, 74, 76, 82, 92, 94, 107, 111, 113, 119, 121, 124, 131, 138, 145, 149, 156, 158, 169, 170, 172, 175, 177, 179, 183, 203, 207, 214, 217, 218, 221, 228, 232, 234, 238, 244, 245, 252, 258, 259, 260, 261, 265, 287, 305, 310, 311, 317, 321, 324, 325, 328, 331, 336, 344, 347, 349, 350, 351, 360, 364, 365, 367, 373, 375, 376, 378, 380, 386, 391, 392, 402, 405, 406, 407, 410, 412, 413, 415, 439, 441, 442, 443, 445, 447, 449, 454, 455, 456, 460, 462, 463, 468, 469, 472, 484, 485, 488, 489, 492, 493, 496, 497, 498, 500, 508, 511, 528, 530, 531, 536, 537, 540, 545, 547, 554, 555, 556, 559, 561, 577, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 623, 627, 628, 641, 642, 643, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 667, 669, 672, 674, 678, 679, 687, 688, 693, 708, 712, 714, 749, 783, 787, 788, 792, 793, 794, 797, 798, 799, 800, 808, 819, 820, 821, 823, 825, 839, 840, 841, 843, 845, 847, 848, 849, 857, 858, 862, 867, 873, 877, 894, 897, 898, 902, 905, 906, 907, 908, 913, 954, 955, 979, 980, 982, 984, 985, 986, 988, 989, 991, 995, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "three": [4, 7, 26, 34, 40, 41, 46, 55, 58, 78, 90, 91, 111, 116, 118, 121, 123, 132, 133, 134, 145, 148, 159, 169, 183, 191, 196, 199, 201, 208, 210, 234, 235, 245, 248, 311, 312, 316, 365, 371, 375, 382, 395, 402, 405, 409, 410, 411, 413, 447, 458, 494, 705, 936, 978, 980, 981, 982, 985, 988, 995, 999, 1000, 1004, 1011, 1019, 1027], "higher": [4, 57, 80, 98, 103, 111, 114, 116, 117, 124, 127, 151, 153, 158, 159, 169, 170, 171, 175, 199, 200, 203, 217, 224, 225, 251, 254, 258, 260, 263, 274, 288, 310, 336, 340, 349, 350, 351, 360, 364, 373, 376, 380, 402, 405, 407, 412, 414, 415, 416, 440, 444, 445, 467, 474, 505, 528, 535, 539, 544, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 562, 569, 584, 587, 603, 604, 615, 623, 627, 631, 633, 642, 643, 648, 649, 656, 657, 658, 659, 672, 674, 675, 700, 719, 723, 747, 780, 792, 794, 797, 798, 800, 808, 815, 816, 821, 824, 843, 846, 872, 889, 890, 891, 897, 898, 899, 900, 901, 902, 903, 910, 977, 981, 982, 984, 985, 988, 992, 995, 999, 1000, 1018, 1020, 1028, 1033, 1035, 1042, 1044], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 46, 47, 48, 51, 56, 58, 74, 75, 90, 95, 97, 98, 105, 129, 144, 145, 148, 151, 153, 155, 156, 163, 164, 170, 175, 187, 188, 203, 220, 221, 222, 224, 225, 232, 233, 234, 238, 251, 257, 263, 286, 291, 302, 306, 310, 321, 325, 340, 342, 349, 351, 360, 373, 375, 377, 378, 380, 382, 383, 390, 392, 399, 402, 405, 406, 409, 410, 412, 413, 415, 416, 417, 418, 430, 433, 437, 439, 440, 441, 442, 443, 445, 446, 455, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 489, 490, 491, 497, 515, 527, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 572, 577, 578, 580, 584, 586, 587, 590, 603, 604, 606, 607, 610, 626, 628, 631, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 688, 692, 697, 723, 758, 764, 795, 796, 801, 803, 812, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 847, 848, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 873, 874, 875, 876, 877, 886, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 915, 917, 918, 922, 923, 944, 956, 959, 978, 979, 981, 982, 984, 985, 988, 991, 996, 997, 998, 999, 1002, 1005, 1009, 1011, 1020, 1030, 1031, 1033, 1035, 1037, 1039, 1041, 1043], "mere": [4, 260, 392, 824, 999], "min": [4, 10, 11, 12, 13, 25, 27, 31, 52, 58, 75, 95, 98, 111, 113, 120, 123, 124, 129, 140, 148, 153, 155, 156, 157, 164, 169, 181, 187, 188, 194, 201, 202, 205, 221, 232, 233, 236, 281, 289, 290, 296, 299, 301, 305, 307, 308, 310, 329, 342, 345, 387, 405, 408, 410, 478, 479, 480, 481, 508, 530, 531, 534, 536, 537, 545, 546, 559, 623, 627, 628, 650, 651, 652, 653, 678, 679, 700, 736, 752, 775, 797, 798, 846, 854, 855, 867, 876, 883, 934, 950, 981, 985, 988, 995, 1033, 1036, 1038, 1039, 1042], "properli": [4, 25, 55, 128, 156, 255, 315, 366, 376, 378, 382, 386, 411, 897, 898, 899, 900, 901, 902, 903, 974, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "automat": [4, 8, 12, 46, 63, 65, 71, 103, 137, 147, 178, 202, 245, 246, 258, 261, 305, 312, 316, 320, 328, 338, 340, 365, 367, 373, 376, 378, 380, 382, 386, 392, 395, 401, 405, 406, 407, 410, 412, 413, 414, 429, 446, 448, 452, 458, 460, 461, 463, 492, 495, 511, 534, 536, 537, 543, 545, 547, 553, 557, 560, 579, 584, 587, 590, 598, 639, 641, 642, 643, 648, 649, 654, 655, 656, 657, 658, 659, 662, 663, 664, 668, 670, 671, 672, 674, 677, 680, 683, 684, 687, 691, 796, 811, 814, 823, 833, 854, 855, 858, 859, 861, 870, 871, 878, 889, 890, 897, 898, 899, 902, 905, 907, 911, 923, 956, 959, 974, 976, 979, 984, 989, 995, 999, 1001, 1005, 1006, 1015, 1027, 1030, 1031, 1032, 1038, 1041, 1042, 1043, 1044], "raw": [4, 12, 14, 37, 81, 97, 131, 156, 169, 175, 302, 312, 326, 351, 364, 373, 380, 386, 392, 403, 404, 405, 407, 410, 413, 465, 470, 497, 498, 499, 555, 556, 557, 559, 578, 584, 585, 586, 587, 630, 673, 686, 690, 701, 781, 843, 901, 982, 985, 989, 991, 992, 995, 998, 1017, 1019, 1028, 1032, 1035, 1038], "recogn": [4, 29, 35, 86, 119, 166, 200, 318, 384, 396, 405, 413, 498, 693, 709, 823, 902, 985, 1011, 1044], "increas": [4, 7, 14, 26, 37, 43, 55, 57, 58, 61, 75, 98, 111, 112, 114, 117, 120, 128, 144, 148, 151, 155, 156, 157, 160, 169, 170, 175, 179, 181, 190, 199, 200, 201, 203, 217, 225, 232, 246, 247, 260, 261, 262, 267, 273, 299, 306, 307, 310, 317, 325, 336, 344, 350, 351, 354, 364, 365, 366, 377, 386, 387, 403, 405, 407, 410, 412, 413, 416, 436, 440, 442, 448, 459, 467, 468, 474, 528, 532, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 584, 587, 623, 631, 632, 633, 641, 646, 647, 650, 651, 652, 654, 655, 662, 663, 664, 672, 673, 674, 678, 679, 681, 682, 688, 702, 703, 708, 777, 784, 797, 798, 826, 845, 847, 848, 849, 852, 854, 855, 871, 897, 905, 906, 907, 908, 934, 974, 976, 980, 981, 982, 984, 985, 988, 995, 999, 1000, 1001, 1009, 1027, 1029, 1032, 1036, 1038, 1039, 1042], "strong": [4, 166, 168, 169, 177, 192, 196, 203, 205, 218, 234, 312, 344, 404, 410, 412, 520, 645, 668, 978, 979, 981, 982, 984, 992, 1000, 1018], "similar": [4, 5, 7, 12, 17, 20, 25, 26, 34, 37, 49, 51, 57, 60, 75, 86, 95, 99, 111, 124, 147, 151, 158, 168, 169, 170, 171, 183, 199, 201, 213, 220, 222, 223, 224, 228, 234, 235, 251, 257, 260, 263, 266, 267, 268, 278, 281, 283, 305, 318, 335, 340, 344, 350, 351, 360, 364, 370, 372, 374, 376, 377, 378, 380, 383, 384, 387, 390, 392, 399, 402, 403, 405, 408, 409, 410, 412, 413, 414, 415, 416, 436, 437, 439, 440, 441, 446, 448, 450, 451, 499, 504, 505, 532, 578, 585, 586, 587, 606, 673, 688, 691, 699, 701, 711, 715, 720, 723, 724, 726, 729, 733, 735, 750, 755, 756, 781, 787, 788, 791, 792, 793, 819, 824, 869, 890, 893, 897, 898, 899, 900, 918, 974, 977, 978, 980, 981, 982, 984, 986, 988, 989, 991, 992, 995, 997, 998, 999, 1000, 1001, 1005, 1006, 1011, 1019, 1022, 1027, 1031, 1032, 1033, 1035, 1039, 1040], "magnitud": [4, 105, 113, 152, 164, 169, 216, 238, 265, 305, 310, 318, 364, 373, 384, 405, 412, 415, 609, 648, 700, 877, 981, 985, 989, 995, 999, 1001, 1029, 1036], "discret": [4, 46, 105, 111, 150, 161, 166, 170, 199, 217, 278, 304, 308, 313, 366, 370, 373, 374, 382, 391, 392, 405, 410, 413, 415, 434, 435, 444, 448, 456, 457, 458, 488, 510, 511, 518, 549, 555, 567, 584, 585, 588, 591, 592, 595, 596, 603, 604, 606, 607, 608, 612, 613, 614, 653, 654, 737, 794, 805, 823, 832, 833, 836, 858, 862, 870, 871, 874, 877, 886, 897, 902, 906, 948, 974, 981, 982, 983, 985, 986, 988, 1001, 1005, 1011, 1022, 1029, 1032, 1040, 1041, 1042], "manner": [4, 75, 95, 145, 170, 175, 247, 319, 320, 365, 378, 384, 405, 410, 412, 413, 705, 837, 838, 974, 985, 1001, 1030, 1037], "uniqu": [4, 16, 24, 30, 42, 47, 48, 57, 58, 63, 67, 118, 119, 125, 126, 169, 171, 183, 214, 217, 247, 269, 292, 311, 312, 321, 327, 349, 350, 351, 372, 380, 387, 392, 405, 406, 409, 412, 413, 436, 446, 450, 452, 460, 463, 492, 545, 546, 547, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 562, 606, 629, 630, 631, 662, 664, 672, 693, 705, 749, 777, 794, 796, 808, 820, 825, 826, 829, 835, 844, 847, 849, 854, 868, 870, 871, 878, 881, 897, 899, 905, 906, 907, 908, 922, 934, 948, 949, 981, 986, 995, 1009, 1018, 1035, 1038, 1039, 1041, 1042, 1043], "decid": [4, 11, 57, 60, 71, 251, 257, 260, 267, 373, 378, 393, 413, 415, 446, 453, 555, 556, 607, 631, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 667, 677, 680, 792, 839, 840, 841, 843, 845, 847, 848, 849, 860, 984, 991, 1009, 1040, 1043], "therebi": [4, 169, 409, 412, 977, 1037], "assumpt": [4, 9, 25, 27, 36, 68, 78, 79, 98, 156, 166, 168, 199, 228, 305, 384, 390, 391, 394, 403, 404, 405, 407, 409, 410, 413, 415, 443, 447, 449, 484, 499, 508, 528, 530, 537, 646, 650, 793, 794, 797, 798, 808, 834, 889, 890, 979, 981, 985, 986, 987, 988, 990, 991, 992, 995, 998, 1001, 1034, 1040], "impli": [4, 151, 349, 350, 351, 410, 412, 415, 470, 569, 578, 606, 607, 618, 730, 921, 981, 982, 1020, 1038], "give": [4, 12, 13, 24, 25, 39, 44, 49, 60, 62, 64, 70, 71, 75, 97, 123, 151, 156, 160, 163, 169, 170, 188, 190, 196, 199, 200, 201, 228, 251, 257, 262, 269, 285, 289, 292, 302, 318, 319, 328, 364, 366, 373, 375, 377, 378, 380, 384, 386, 390, 391, 392, 393, 399, 402, 403, 404, 405, 406, 407, 410, 412, 413, 415, 417, 430, 442, 443, 445, 447, 455, 468, 492, 495, 499, 529, 534, 545, 546, 547, 548, 553, 554, 560, 561, 562, 589, 590, 593, 603, 604, 634, 643, 657, 661, 672, 716, 725, 731, 734, 789, 794, 797, 798, 808, 818, 819, 820, 822, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 874, 875, 877, 878, 886, 981, 985, 988, 989, 990, 992, 993, 995, 999, 1000, 1001, 1005, 1009, 1011, 1013, 1018, 1019, 1020, 1027, 1031, 1034, 1035, 1037, 1038, 1039, 1041, 1043], "lot": [4, 82, 169, 203, 373, 378, 379, 380, 386, 410, 412, 797, 798, 889, 890, 974, 997, 999, 1000, 1005, 1006, 1009, 1019, 1020, 1027, 1032, 1034, 1035, 1036, 1037, 1039], "addit": [4, 5, 7, 12, 13, 14, 66, 71, 82, 90, 95, 98, 111, 115, 117, 118, 121, 122, 147, 156, 157, 158, 164, 169, 170, 178, 183, 188, 200, 201, 203, 224, 239, 262, 269, 274, 281, 305, 316, 317, 326, 340, 351, 356, 360, 364, 365, 370, 371, 372, 373, 374, 376, 377, 378, 380, 383, 384, 386, 390, 391, 393, 395, 399, 404, 405, 407, 409, 410, 413, 414, 415, 416, 429, 437, 438, 440, 441, 442, 446, 453, 465, 470, 492, 499, 528, 530, 532, 533, 535, 537, 538, 539, 545, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 608, 615, 624, 626, 627, 631, 634, 635, 636, 637, 638, 639, 640, 641, 666, 683, 684, 688, 694, 695, 698, 737, 753, 754, 783, 787, 792, 793, 800, 816, 826, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 879, 889, 890, 897, 898, 928, 934, 974, 979, 981, 985, 986, 988, 989, 992, 995, 997, 998, 999, 1000, 1001, 1005, 1011, 1022, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "level": [4, 9, 11, 12, 16, 27, 34, 41, 53, 95, 116, 120, 140, 148, 150, 155, 158, 161, 166, 169, 170, 210, 211, 212, 213, 214, 217, 228, 232, 233, 249, 260, 263, 269, 270, 289, 296, 334, 335, 337, 338, 340, 342, 344, 350, 358, 364, 373, 375, 376, 378, 380, 384, 392, 394, 395, 396, 403, 410, 413, 415, 419, 450, 464, 489, 490, 492, 499, 517, 527, 532, 533, 543, 557, 558, 563, 564, 607, 611, 618, 619, 621, 662, 663, 664, 672, 673, 674, 683, 686, 688, 690, 696, 698, 712, 718, 723, 780, 818, 819, 820, 822, 825, 826, 853, 854, 855, 895, 910, 974, 981, 985, 986, 988, 993, 999, 1001, 1005, 1006, 1020, 1030, 1038, 1041, 1042, 1043], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 332, 347], "011": [4, 268, 283, 350, 384], "131": [4, 13, 56, 384, 985, 1028], "rate": [4, 111, 115, 121, 143, 170, 199, 206, 217, 232, 238, 257, 260, 267, 269, 270, 300, 301, 302, 366, 378, 405, 406, 410, 414, 442, 462, 532, 549, 550, 555, 556, 557, 558, 588, 591, 592, 594, 595, 596, 602, 640, 641, 664, 672, 673, 674, 688, 694, 698, 722, 777, 784, 853, 854, 855, 891, 974, 981, 982, 985, 988, 989, 999, 1001, 1009, 1031, 1035, 1036], "better": [4, 5, 9, 19, 20, 24, 31, 50, 55, 74, 75, 78, 79, 80, 81, 86, 90, 95, 98, 114, 117, 123, 124, 131, 143, 155, 156, 157, 159, 163, 171, 179, 183, 185, 188, 199, 200, 201, 207, 214, 216, 217, 224, 233, 234, 235, 238, 250, 254, 260, 262, 263, 266, 269, 270, 278, 302, 309, 310, 319, 320, 336, 344, 349, 350, 351, 354, 360, 364, 373, 377, 378, 379, 380, 382, 383, 384, 386, 392, 394, 399, 401, 403, 405, 407, 409, 410, 411, 412, 413, 415, 445, 446, 534, 536, 543, 555, 556, 557, 558, 603, 604, 626, 667, 673, 688, 705, 720, 729, 734, 737, 758, 793, 822, 832, 833, 834, 835, 836, 837, 838, 843, 854, 855, 874, 875, 878, 886, 889, 890, 897, 898, 974, 975, 977, 978, 979, 981, 982, 984, 985, 987, 988, 989, 993, 995, 998, 999, 1001, 1006, 1008, 1009, 1013, 1015, 1020, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "confirm": [4, 86, 114, 121, 124, 171, 199, 201, 263, 266, 269, 310, 351, 382, 974, 995, 1035], "progress": [4, 7, 8, 95, 134, 148, 164, 192, 288, 319, 375, 378, 382, 383, 393, 396, 401, 405, 555, 556, 688, 826, 828, 831, 846, 854, 855, 1009, 1018, 1020, 1027, 1029, 1036, 1041], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 60, 62, 80, 81, 82, 85, 92, 98, 101, 124, 129, 137, 156, 163, 169, 170, 171, 188, 199, 200, 201, 204, 207, 217, 224, 228, 234, 235, 238, 245, 262, 263, 266, 267, 269, 270, 275, 283, 301, 305, 318, 324, 327, 336, 340, 346, 349, 351, 360, 364, 373, 377, 378, 380, 383, 384, 386, 390, 391, 392, 399, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 438, 443, 448, 458, 467, 468, 474, 496, 500, 506, 553, 554, 557, 558, 560, 561, 563, 564, 585, 586, 618, 646, 647, 650, 651, 652, 660, 678, 679, 681, 687, 688, 691, 701, 738, 741, 787, 792, 794, 802, 804, 808, 811, 814, 837, 838, 862, 866, 867, 868, 877, 889, 890, 899, 902, 905, 906, 907, 908, 934, 974, 977, 978, 980, 981, 982, 983, 984, 985, 988, 989, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1018, 1019, 1027, 1032, 1033, 1035, 1038, 1040, 1042, 1043], "new": [4, 7, 8, 10, 50, 56, 58, 60, 70, 71, 90, 103, 111, 113, 115, 116, 117, 124, 130, 131, 145, 148, 151, 157, 164, 171, 172, 199, 205, 213, 228, 259, 262, 267, 287, 289, 311, 316, 319, 325, 328, 335, 340, 360, 365, 366, 372, 373, 375, 376, 377, 380, 381, 382, 384, 386, 387, 391, 392, 393, 395, 403, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 423, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 500, 501, 504, 505, 506, 508, 519, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 700, 704, 709, 710, 714, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 734, 735, 736, 737, 738, 741, 748, 749, 752, 756, 761, 762, 764, 773, 777, 778, 779, 780, 782, 783, 784, 785, 786, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 807, 808, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 885, 886, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 915, 917, 918, 920, 928, 929, 933, 934, 941, 942, 943, 944, 945, 948, 951, 953, 955, 960, 966, 972, 974, 975, 977, 981, 985, 986, 988, 989, 990, 991, 995, 997, 998, 999, 1000, 1006, 1009, 1011, 1012, 1015, 1018, 1020, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 373, 378, 982, 1004], "1440": 4, "caus": [4, 25, 27, 124, 152, 169, 197, 199, 203, 204, 217, 312, 340, 351, 360, 376, 383, 403, 405, 410, 411, 413, 415, 439, 443, 445, 455, 505, 528, 578, 585, 606, 607, 832, 833, 834, 836, 861, 870, 872, 875, 876, 917, 918, 974, 975, 981, 985, 993, 995, 998, 1006, 1011, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044], "signific": [4, 55, 117, 124, 144, 166, 203, 217, 253, 260, 276, 281, 283, 349, 360, 372, 373, 390, 405, 408, 409, 412, 500, 528, 530, 545, 546, 623, 654, 655, 662, 663, 664, 672, 673, 674, 813, 822, 897, 899, 900, 901, 902, 903, 984, 985, 988, 1027, 1029, 1030, 1031, 1035], "overfit": [4, 116, 124, 166, 170, 171, 172, 178, 203, 228, 247, 253, 255, 261, 265, 275, 276, 299, 306, 307, 309, 310, 311, 312, 336, 344, 354, 356, 357, 373, 392, 403, 409, 412, 433, 484, 485, 563, 564, 653, 794, 797, 798, 808, 819, 820, 854, 855, 857, 872, 876, 980, 989, 991, 993, 995, 1001, 1009, 1018, 1030], "avoid": [4, 7, 12, 44, 57, 62, 72, 116, 117, 169, 170, 201, 203, 208, 217, 223, 235, 238, 255, 261, 265, 291, 293, 294, 309, 310, 332, 333, 350, 365, 376, 378, 379, 380, 382, 383, 384, 392, 393, 395, 399, 403, 405, 407, 409, 412, 413, 416, 436, 438, 440, 448, 458, 464, 489, 490, 491, 495, 504, 505, 530, 535, 539, 542, 581, 582, 630, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 685, 687, 689, 691, 708, 787, 794, 795, 799, 805, 808, 818, 819, 820, 857, 860, 866, 867, 869, 874, 875, 876, 877, 880, 882, 883, 884, 886, 887, 888, 890, 895, 934, 979, 982, 984, 985, 988, 989, 991, 993, 995, 1000, 1001, 1006, 1020, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "kbinsdiscret": [4, 53, 166, 199, 217, 304, 307, 312, 313, 320, 508, 653, 860, 876, 906, 995, 1035, 1039, 1040, 1041, 1043], "re": [4, 8, 13, 26, 56, 70, 71, 111, 121, 154, 168, 217, 235, 246, 250, 263, 265, 269, 316, 349, 351, 365, 378, 379, 382, 386, 391, 393, 396, 403, 409, 413, 465, 466, 467, 468, 469, 470, 471, 472, 551, 552, 557, 558, 559, 642, 648, 656, 658, 796, 811, 814, 905, 906, 907, 908, 981, 986, 988, 995, 1000, 1006, 1009, 1020, 1027, 1031, 1032, 1034, 1036], "fine": [4, 37, 120, 148, 203, 215, 251, 258, 340, 356, 357, 375, 382, 392, 413, 442, 934, 953, 988, 991, 1000, 1006, 1037], "grain": [4, 31, 37, 233, 251, 307, 384, 413, 442, 953, 1006], "still": [4, 32, 44, 53, 55, 57, 62, 82, 90, 99, 119, 121, 124, 131, 151, 157, 168, 169, 171, 172, 178, 183, 199, 201, 217, 233, 263, 269, 305, 317, 318, 321, 349, 350, 360, 366, 372, 377, 378, 380, 382, 383, 384, 386, 390, 392, 405, 409, 412, 413, 416, 436, 440, 450, 470, 492, 623, 628, 631, 633, 713, 751, 773, 776, 787, 788, 797, 798, 811, 814, 875, 877, 897, 915, 974, 975, 979, 981, 984, 988, 991, 993, 1000, 1001, 1004, 1006, 1009, 1027, 1029, 1032, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043], "express": [4, 7, 12, 111, 117, 151, 156, 169, 260, 261, 311, 317, 333, 340, 351, 372, 373, 378, 379, 384, 405, 410, 411, 413, 446, 452, 453, 584, 585, 587, 712, 794, 800, 808, 816, 818, 819, 820, 821, 824, 844, 981, 985, 989, 995, 996, 1001, 1035], "advantag": [4, 5, 39, 55, 57, 95, 100, 199, 200, 228, 246, 261, 319, 360, 392, 403, 409, 410, 413, 415, 437, 441, 456, 530, 585, 645, 670, 671, 758, 825, 826, 827, 857, 858, 897, 898, 899, 900, 901, 902, 903, 974, 977, 980, 981, 982, 985, 986, 988, 989, 995, 999, 1000, 1001, 1030], "final": [4, 26, 34, 40, 42, 55, 70, 71, 80, 82, 86, 91, 100, 111, 112, 114, 116, 121, 122, 125, 131, 134, 145, 156, 164, 168, 170, 172, 175, 178, 183, 187, 188, 196, 199, 201, 216, 217, 221, 228, 242, 249, 258, 266, 278, 283, 311, 312, 315, 316, 336, 340, 364, 366, 376, 378, 379, 380, 382, 391, 392, 402, 403, 405, 406, 409, 412, 413, 414, 433, 438, 443, 444, 448, 455, 458, 460, 532, 551, 552, 563, 564, 566, 590, 623, 643, 649, 655, 675, 686, 690, 715, 794, 825, 826, 857, 858, 894, 897, 974, 975, 981, 982, 985, 988, 991, 992, 995, 998, 1009, 1018, 1032, 1035, 1036, 1037, 1038, 1040], "observ": [4, 5, 7, 9, 11, 13, 16, 20, 24, 27, 34, 37, 40, 43, 53, 62, 71, 78, 80, 81, 82, 96, 97, 100, 103, 111, 114, 115, 117, 118, 124, 127, 130, 139, 140, 148, 151, 154, 156, 157, 158, 160, 169, 170, 171, 178, 179, 194, 195, 197, 199, 200, 201, 203, 213, 217, 224, 225, 231, 232, 238, 256, 260, 262, 263, 267, 283, 286, 289, 296, 310, 321, 327, 335, 336, 340, 341, 349, 350, 351, 356, 357, 373, 375, 392, 395, 403, 405, 407, 408, 409, 410, 411, 414, 415, 437, 439, 441, 442, 443, 445, 455, 456, 465, 466, 467, 468, 469, 470, 471, 472, 520, 528, 547, 548, 559, 606, 607, 642, 648, 653, 697, 712, 714, 753, 815, 835, 843, 876, 878, 981, 984, 985, 989, 990, 991, 992, 995, 998, 999, 1000, 1001, 1008, 1012, 1014, 1015, 1017, 1028, 1040, 1041, 1042, 1043], "complet": [4, 37, 38, 39, 44, 49, 52, 58, 62, 86, 129, 143, 145, 148, 166, 171, 172, 205, 227, 228, 235, 238, 243, 258, 310, 312, 315, 350, 360, 373, 378, 382, 383, 386, 390, 406, 409, 410, 412, 413, 437, 441, 445, 448, 458, 459, 460, 463, 491, 532, 533, 534, 535, 540, 542, 554, 565, 566, 577, 583, 584, 585, 587, 623, 624, 625, 626, 641, 645, 653, 667, 669, 700, 701, 711, 712, 713, 726, 731, 732, 752, 781, 790, 825, 828, 831, 840, 856, 857, 858, 859, 920, 970, 974, 979, 981, 985, 986, 988, 1000, 1001, 1011, 1020, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "induct": [4, 36, 68, 124, 166, 392, 405, 412, 419, 437, 508, 560, 623, 627, 892, 893, 946, 969, 981, 998, 1029], "bia": [4, 27, 78, 110, 118, 119, 124, 135, 166, 169, 171, 178, 179, 181, 265, 299, 340, 344, 360, 373, 380, 392, 403, 407, 411, 412, 415, 520, 552, 555, 556, 603, 604, 610, 638, 644, 645, 654, 655, 665, 666, 676, 854, 855, 870, 872, 876, 882, 883, 885, 886, 887, 888, 906, 980, 981, 984, 985, 989, 990, 993, 999, 1018], "preserv": [4, 48, 100, 224, 232, 255, 380, 381, 404, 409, 410, 413, 577, 584, 585, 587, 642, 648, 692, 737, 769, 773, 812, 813, 814, 881, 917, 918, 975, 981, 982, 995, 997, 1005, 1015, 1027, 1030, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "smooth": [4, 46, 47, 54, 148, 156, 192, 200, 215, 311, 336, 375, 393, 405, 411, 415, 444, 445, 533, 534, 535, 542, 553, 554, 555, 556, 560, 561, 562, 586, 587, 615, 618, 672, 832, 833, 834, 836, 874, 878, 886, 905, 906, 907, 908, 981, 987, 995, 999, 1000, 1001, 1020], "local": [4, 20, 39, 57, 61, 95, 98, 117, 128, 148, 156, 157, 166, 170, 200, 219, 222, 224, 226, 228, 238, 284, 297, 356, 357, 365, 375, 376, 378, 382, 384, 386, 395, 405, 410, 412, 413, 415, 443, 448, 458, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 498, 534, 536, 540, 543, 545, 555, 556, 559, 562, 606, 607, 684, 685, 686, 687, 688, 689, 691, 692, 753, 754, 840, 843, 846, 848, 858, 867, 890, 893, 901, 951, 953, 983, 984, 988, 989, 1001, 1019, 1021, 1022, 1031, 1035, 1039, 1042], "attempt": [4, 54, 170, 195, 205, 255, 349, 364, 377, 392, 405, 417, 442, 446, 453, 464, 627, 684, 685, 689, 812, 839, 840, 841, 843, 845, 847, 848, 849, 875, 877, 895, 917, 918, 981, 982, 988, 1001, 1011, 1034, 1039, 1044], "each": [4, 7, 8, 10, 11, 12, 14, 17, 20, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 55, 58, 60, 61, 70, 71, 73, 74, 75, 85, 86, 89, 90, 91, 92, 95, 96, 100, 103, 104, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 131, 132, 133, 134, 144, 146, 148, 153, 155, 160, 163, 164, 168, 169, 170, 172, 175, 178, 185, 186, 188, 193, 197, 199, 200, 201, 203, 204, 207, 214, 217, 221, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 248, 250, 254, 255, 256, 258, 260, 261, 263, 265, 266, 269, 270, 278, 281, 283, 286, 288, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 310, 311, 312, 315, 317, 318, 319, 321, 324, 325, 326, 329, 336, 340, 342, 344, 350, 351, 354, 355, 358, 360, 364, 365, 366, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 390, 391, 392, 396, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 515, 518, 519, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 703, 704, 706, 709, 715, 720, 723, 724, 725, 733, 734, 740, 741, 743, 745, 746, 748, 749, 753, 754, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 769, 771, 773, 774, 775, 776, 778, 779, 780, 782, 783, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 886, 887, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 923, 928, 929, 934, 936, 937, 941, 942, 953, 961, 962, 963, 966, 975, 977, 979, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1009, 1011, 1015, 1017, 1018, 1019, 1020, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "sine": [4, 151, 156, 157, 166, 193, 205, 244, 252, 356, 374, 611, 792, 793, 984, 1001], "cosin": [4, 40, 274, 283, 288, 370, 373, 392, 405, 410, 411, 437, 441, 446, 453, 531, 586, 587, 616, 692, 755, 756, 757, 760, 765, 766, 769, 773, 774, 775, 837, 838, 842, 869, 988, 1001, 1022, 1037], "match": [4, 20, 37, 45, 95, 98, 102, 117, 166, 175, 177, 199, 218, 222, 231, 238, 340, 351, 373, 376, 380, 382, 405, 410, 412, 413, 426, 445, 460, 462, 504, 505, 511, 522, 527, 533, 538, 544, 547, 563, 564, 568, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 654, 660, 661, 681, 682, 695, 699, 700, 701, 709, 711, 715, 729, 773, 774, 775, 781, 837, 838, 842, 846, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 897, 904, 910, 921, 953, 982, 984, 985, 987, 988, 1007, 1011, 1020, 1022, 1027, 1033, 1034, 1035, 1037, 1039, 1040, 1043], "togeth": [4, 12, 51, 60, 71, 120, 131, 151, 157, 169, 180, 221, 224, 238, 256, 311, 319, 339, 355, 360, 380, 382, 390, 391, 392, 399, 405, 412, 413, 414, 420, 447, 449, 563, 564, 590, 685, 711, 794, 808, 857, 858, 871, 981, 982, 986, 992, 995, 1001, 1002, 1009, 1012, 1014, 1033], "equival": [4, 14, 34, 55, 57, 121, 127, 147, 151, 156, 169, 183, 217, 250, 269, 283, 310, 340, 351, 360, 364, 376, 384, 387, 391, 392, 405, 406, 407, 408, 409, 410, 412, 414, 415, 437, 439, 440, 441, 442, 443, 445, 446, 453, 460, 465, 470, 505, 530, 537, 554, 557, 558, 559, 561, 584, 587, 609, 612, 615, 617, 620, 642, 643, 644, 648, 650, 654, 655, 662, 663, 664, 665, 668, 672, 673, 676, 679, 683, 684, 689, 704, 705, 718, 729, 736, 737, 742, 743, 744, 756, 765, 774, 775, 792, 793, 797, 798, 802, 804, 828, 831, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 854, 860, 866, 867, 869, 872, 873, 874, 875, 877, 885, 887, 888, 921, 932, 971, 974, 979, 981, 982, 983, 985, 991, 995, 999, 1000, 1001, 1035, 1036, 1037, 1038, 1040, 1041, 1044], "importantli": [4, 13, 96, 170, 175, 305, 405], "jump": [4, 200, 305, 375, 378, 413, 876], "functiontransform": [4, 70, 116, 199, 217, 328, 460, 461, 995, 1032, 1033, 1035, 1040, 1041, 1042, 1044], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 56, 61, 70, 75, 92, 101, 103, 105, 109, 111, 114, 116, 123, 124, 127, 131, 148, 154, 157, 159, 164, 172, 178, 179, 187, 188, 191, 199, 200, 207, 208, 209, 217, 235, 238, 241, 242, 248, 250, 255, 256, 257, 258, 259, 260, 261, 263, 264, 267, 274, 283, 288, 293, 296, 302, 305, 307, 310, 315, 332, 336, 349, 351, 354, 358, 364, 371, 372, 373, 378, 379, 380, 384, 385, 387, 390, 392, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 954, 955, 956, 957, 958, 959, 960, 966, 969, 970, 971, 972, 973, 975, 985, 988, 992, 993, 1000, 1001, 1006, 1011, 1016, 1018, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lambda": [4, 7, 8, 10, 19, 56, 73, 123, 138, 179, 217, 260, 261, 309, 328, 401, 405, 410, 412, 413, 640, 641, 642, 643, 861, 873, 981, 995, 1015, 1035, 1041], "sin": [4, 13, 19, 39, 96, 112, 123, 124, 128, 130, 143, 151, 157, 158, 160, 178, 179, 183, 193, 200, 205, 222, 234, 251, 295, 306, 316, 343, 356, 357, 415, 512, 611, 695, 759, 1019], "pi": [4, 13, 34, 39, 40, 96, 105, 128, 130, 143, 151, 179, 183, 187, 193, 200, 222, 245, 246, 247, 250, 251, 274, 296, 316, 357, 395, 411, 415, 512, 513, 514, 611, 638, 979, 980, 981, 987, 1019], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 128, 130, 156, 166, 169, 200, 222, 260, 274, 319, 357, 382, 411, 413, 445, 447, 449, 484, 507, 587, 695, 715, 759, 790, 980, 995, 1009, 1021, 1022], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 57, 62, 69, 76, 86, 98, 100, 111, 124, 126, 128, 147, 151, 152, 156, 158, 166, 167, 169, 170, 172, 173, 183, 199, 200, 201, 203, 204, 205, 219, 224, 226, 238, 242, 246, 250, 260, 261, 262, 265, 268, 269, 302, 304, 306, 313, 316, 323, 330, 336, 340, 341, 344, 345, 346, 349, 350, 351, 360, 365, 378, 380, 383, 390, 392, 403, 405, 406, 410, 411, 412, 413, 415, 416, 433, 439, 440, 442, 443, 445, 446, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 486, 492, 496, 510, 520, 521, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 590, 602, 605, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 686, 687, 688, 697, 699, 748, 780, 792, 795, 796, 799, 801, 803, 805, 812, 813, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 847, 848, 854, 855, 857, 860, 861, 862, 863, 864, 866, 867, 869, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 934, 951, 959, 974, 979, 981, 982, 984, 985, 986, 992, 995, 998, 1000, 1001, 1016, 1018, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "expans": [4, 163, 317, 446, 872, 1036], "synthet": [4, 13, 25, 27, 31, 34, 37, 42, 49, 118, 124, 129, 151, 156, 158, 170, 189, 201, 216, 299, 307, 344, 360, 364, 371, 381, 393, 405, 407, 414, 654, 655, 897, 898, 904, 979, 1018, 1033], "beyond": [4, 27, 200, 201, 364, 366, 377, 378, 390, 403, 412, 902, 982, 986, 995, 1000, 1006, 1035], "pd": [4, 12, 25, 71, 72, 73, 111, 117, 118, 124, 128, 156, 163, 168, 169, 170, 171, 172, 178, 183, 188, 199, 203, 207, 217, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 318, 319, 344, 349, 350, 383, 392, 406, 460, 462, 623, 624, 625, 626, 628, 773, 915, 917, 918, 974, 975, 992, 995, 1038, 1040, 1041, 1042], "hour_df": 4, "datafram": [4, 25, 70, 71, 72, 73, 111, 117, 121, 124, 128, 156, 163, 168, 169, 170, 171, 178, 183, 188, 203, 207, 217, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 318, 319, 320, 344, 349, 350, 372, 373, 378, 380, 383, 392, 406, 429, 438, 439, 441, 443, 445, 460, 462, 463, 464, 478, 479, 480, 481, 485, 486, 487, 488, 492, 496, 497, 498, 500, 501, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 684, 685, 688, 794, 797, 798, 808, 823, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 895, 913, 940, 956, 959, 974, 975, 1006, 1020, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "arang": [4, 11, 13, 16, 40, 58, 60, 65, 73, 79, 80, 103, 106, 120, 121, 122, 123, 125, 126, 129, 133, 144, 151, 153, 158, 159, 163, 164, 172, 183, 199, 202, 204, 208, 223, 231, 233, 255, 260, 263, 268, 271, 281, 283, 296, 299, 307, 318, 324, 325, 327, 329, 336, 343, 349, 351, 356, 357, 358, 360, 390, 402, 409, 413, 461, 540, 823, 872, 876, 980, 981, 989, 995, 999, 1016], "reshap": [4, 5, 6, 13, 16, 24, 32, 46, 47, 48, 50, 51, 53, 54, 58, 72, 80, 85, 95, 98, 105, 114, 119, 120, 129, 140, 146, 151, 153, 154, 155, 156, 157, 158, 160, 178, 190, 196, 212, 213, 215, 216, 221, 223, 225, 228, 233, 237, 249, 258, 287, 289, 296, 299, 301, 302, 306, 307, 308, 312, 315, 318, 319, 321, 329, 335, 336, 341, 342, 345, 346, 390, 402, 410, 412, 413, 441, 461, 580, 627, 823, 872, 876, 981, 995, 1001, 1016, 1019, 1032], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 58, 62, 90, 96, 99, 106, 129, 175, 190, 215, 217, 220, 221, 222, 223, 224, 225, 231, 232, 235, 236, 242, 283, 287, 300, 305, 306, 310, 311, 312, 315, 318, 320, 321, 336, 349, 350, 351, 360, 370, 373, 380, 383, 384, 392, 401, 406, 410, 413, 414, 421, 429, 438, 439, 441, 443, 445, 460, 462, 464, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 684, 685, 686, 687, 688, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 895, 975, 977, 981, 986, 988, 995, 996, 997, 1011, 1016, 1019, 1020, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1041, 1043, 1044], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 61, 62, 68, 94, 107, 129, 166, 193, 200, 205, 220, 222, 225, 228, 231, 232, 333, 336, 358, 372, 374, 378, 380, 387, 392, 405, 406, 410, 413, 415, 437, 448, 458, 460, 463, 484, 486, 487, 488, 489, 490, 496, 497, 498, 500, 506, 510, 529, 537, 545, 580, 582, 631, 639, 653, 668, 687, 733, 774, 818, 822, 826, 864, 913, 917, 918, 933, 948, 971, 972, 979, 981, 982, 985, 992, 996, 1001, 1011, 1017, 1027, 1031, 1034, 1035, 1036, 1039, 1041], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 56, 57, 58, 59, 60, 62, 67, 80, 86, 91, 92, 97, 99, 100, 101, 102, 104, 112, 113, 117, 120, 127, 129, 130, 132, 140, 143, 151, 152, 153, 155, 157, 158, 159, 160, 168, 169, 175, 179, 182, 189, 191, 195, 196, 197, 200, 201, 202, 208, 211, 212, 213, 216, 220, 221, 222, 223, 224, 225, 228, 233, 234, 236, 245, 246, 247, 248, 249, 250, 251, 255, 261, 263, 274, 283, 286, 289, 290, 291, 292, 293, 294, 295, 299, 305, 307, 308, 310, 319, 326, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 349, 355, 356, 357, 407, 627, 697, 953, 979, 981, 1018], "color": [4, 7, 8, 9, 10, 11, 12, 16, 20, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 78, 79, 80, 81, 82, 86, 90, 91, 92, 95, 96, 97, 99, 102, 103, 104, 105, 111, 112, 117, 120, 121, 122, 123, 126, 127, 128, 129, 131, 133, 137, 140, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 166, 169, 171, 172, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 213, 216, 217, 221, 222, 223, 225, 228, 232, 233, 234, 236, 239, 245, 246, 247, 248, 249, 250, 251, 255, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 281, 285, 288, 289, 290, 291, 294, 295, 296, 299, 305, 306, 307, 309, 310, 311, 316, 326, 327, 329, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 355, 356, 372, 373, 375, 386, 405, 412, 413, 443, 489, 490, 502, 579, 580, 774, 959, 999, 1001, 1032, 1037, 1039, 1044], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 115, 123, 126, 129, 138, 151, 166, 175, 199, 220, 222, 227, 235, 238, 243, 261, 264, 269, 291, 294, 296, 304, 305, 313, 328, 336, 340, 342, 350, 351, 372, 379, 390, 392, 396, 403, 404, 405, 406, 409, 410, 412, 413, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 492, 494, 498, 505, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 757, 760, 792, 793, 794, 797, 798, 805, 806, 808, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 885, 886, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 939, 942, 943, 974, 977, 982, 985, 987, 997, 1000, 1001, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "space": [4, 8, 10, 19, 31, 46, 48, 53, 57, 58, 60, 61, 63, 65, 70, 71, 74, 86, 95, 97, 104, 106, 116, 120, 124, 129, 145, 148, 151, 157, 175, 183, 200, 220, 221, 222, 224, 232, 233, 234, 238, 239, 246, 251, 268, 271, 272, 283, 292, 293, 307, 317, 340, 349, 350, 351, 358, 360, 364, 370, 373, 374, 375, 378, 385, 390, 391, 392, 402, 404, 405, 408, 410, 411, 412, 413, 415, 439, 443, 444, 445, 448, 458, 460, 461, 462, 463, 478, 479, 480, 494, 528, 530, 531, 534, 535, 536, 537, 539, 540, 545, 569, 578, 584, 585, 587, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 628, 629, 634, 636, 637, 638, 639, 684, 685, 686, 688, 689, 690, 692, 695, 794, 797, 798, 800, 808, 816, 827, 837, 838, 845, 846, 847, 848, 857, 862, 863, 869, 874, 889, 890, 891, 910, 938, 977, 978, 979, 980, 981, 983, 985, 986, 988, 989, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1011, 1018, 1020, 1021, 1022, 1027, 1028, 1030, 1035, 1036, 1037, 1041, 1042, 1043], "akin": [4, 200, 392], "sort": [4, 8, 10, 12, 19, 20, 24, 60, 70, 109, 114, 121, 124, 130, 148, 178, 183, 199, 200, 217, 237, 260, 261, 264, 274, 295, 343, 349, 356, 357, 378, 382, 386, 387, 392, 409, 412, 413, 415, 530, 537, 551, 562, 577, 606, 613, 693, 708, 714, 724, 725, 733, 749, 778, 779, 782, 784, 794, 820, 832, 833, 834, 835, 836, 837, 838, 845, 847, 848, 849, 852, 862, 868, 870, 871, 874, 876, 878, 886, 899, 902, 934, 939, 981, 988, 991, 995, 1009, 1020, 1027, 1031, 1037, 1038, 1039, 1041, 1042], "analog": [4, 19, 126, 384, 412, 985, 986, 1000, 1036], "clock": 4, "25th": [4, 238, 875], "back": [4, 100, 240, 365, 378, 380, 393, 399, 406, 413, 430, 439, 442, 443, 455, 478, 479, 480, 504, 505, 529, 530, 531, 534, 536, 537, 540, 577, 626, 654, 655, 662, 663, 664, 672, 673, 674, 723, 862, 864, 865, 866, 870, 871, 872, 874, 875, 877, 889, 890, 897, 981, 985, 989, 1006, 1011, 1020, 1030, 1035, 1037, 1038, 1041], "natur": [4, 31, 117, 124, 158, 169, 170, 175, 183, 199, 200, 216, 217, 224, 238, 245, 251, 269, 349, 378, 380, 392, 410, 412, 413, 416, 440, 446, 453, 547, 586, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 688, 700, 736, 750, 752, 839, 840, 841, 843, 845, 847, 848, 849, 876, 932, 981, 982, 984, 985, 988, 990, 995, 999, 1005, 1008, 1027, 1035], "sp": [4, 169, 975, 1019], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 56, 57, 59, 60, 61, 65, 71, 72, 74, 86, 90, 91, 92, 100, 101, 102, 111, 113, 114, 120, 121, 127, 129, 130, 132, 133, 138, 140, 146, 148, 152, 153, 154, 155, 159, 175, 182, 184, 189, 190, 191, 192, 194, 196, 197, 206, 208, 210, 211, 212, 213, 215, 216, 220, 221, 222, 224, 225, 233, 234, 236, 240, 246, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 263, 265, 269, 271, 283, 286, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 317, 318, 319, 320, 321, 326, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 355, 356, 357, 364, 365, 372, 373, 375, 376, 378, 379, 380, 381, 383, 386, 387, 390, 395, 396, 402, 403, 405, 406, 407, 408, 409, 410, 412, 414, 418, 433, 438, 439, 442, 443, 445, 455, 464, 471, 519, 524, 530, 534, 536, 537, 543, 545, 546, 586, 603, 604, 606, 627, 635, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 668, 669, 675, 681, 682, 684, 685, 688, 689, 704, 710, 711, 714, 726, 730, 736, 737, 753, 754, 794, 808, 816, 822, 832, 833, 834, 835, 836, 837, 838, 844, 846, 853, 868, 870, 871, 872, 876, 878, 892, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 912, 917, 918, 948, 974, 977, 978, 980, 981, 982, 983, 985, 987, 988, 990, 992, 995, 997, 999, 1000, 1001, 1005, 1009, 1011, 1015, 1016, 1018, 1019, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1043], "colorbar": [4, 11, 30, 40, 95, 106, 119, 127, 146, 152, 154, 155, 157, 170, 220, 232, 249, 271, 305, 336, 693, 1039], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 80, 98, 318, 530, 974, 985, 995], "166": [4, 302, 384, 985, 1027], "simpl": [4, 16, 27, 55, 71, 75, 78, 85, 86, 95, 117, 122, 158, 166, 170, 183, 200, 216, 241, 261, 278, 284, 297, 319, 332, 349, 351, 355, 360, 376, 378, 380, 381, 382, 383, 385, 390, 391, 392, 393, 396, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 419, 426, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 458, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 510, 518, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 781, 783, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 941, 977, 979, 980, 981, 982, 984, 985, 988, 995, 997, 999, 1001, 1006, 1009, 1011, 1020, 1024, 1027], "wors": [4, 86, 111, 152, 170, 205, 260, 268, 310, 360, 403, 405, 415, 428, 461, 478, 479, 480, 548, 550, 552, 554, 556, 558, 561, 564, 566, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 674, 675, 676, 701, 717, 718, 719, 723, 780, 830, 831, 840, 848, 855, 898, 900, 903, 906, 908, 985, 995, 1036], "further": [4, 25, 42, 71, 78, 86, 95, 114, 120, 122, 147, 151, 156, 169, 171, 178, 183, 220, 225, 235, 257, 260, 261, 267, 320, 336, 350, 358, 364, 378, 390, 392, 404, 405, 407, 410, 412, 413, 415, 448, 458, 511, 528, 531, 578, 610, 618, 624, 654, 655, 662, 663, 664, 672, 673, 674, 687, 691, 732, 769, 773, 776, 787, 788, 833, 839, 840, 847, 848, 875, 877, 897, 899, 902, 934, 984, 985, 987, 988, 989, 991, 995, 999, 1000, 1018, 1020, 1036, 1040], "analyz": [4, 7, 17, 183, 262, 269, 320, 349, 351, 383, 384, 405, 413, 499, 584, 585, 587, 783, 982, 985, 992, 993, 1001, 1020, 1027, 1036], "reason": [4, 8, 12, 42, 53, 70, 124, 148, 169, 170, 175, 199, 200, 207, 217, 228, 232, 233, 235, 238, 257, 260, 261, 266, 278, 283, 306, 310, 350, 351, 360, 364, 365, 366, 373, 377, 378, 380, 382, 386, 390, 391, 392, 393, 405, 406, 407, 410, 412, 413, 504, 528, 570, 634, 642, 648, 650, 668, 683, 688, 758, 794, 808, 841, 846, 853, 872, 894, 974, 975, 980, 981, 982, 985, 987, 988, 989, 991, 995, 999, 1000, 1009, 1020, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "disappoint": 4, "outcom": [4, 117, 169, 392, 412, 565, 654, 705, 737, 789, 825, 892, 893, 894, 899, 902, 981, 985, 1001, 1008, 1020, 1031, 1035, 1037], "altern": [4, 26, 71, 86, 118, 119, 125, 131, 171, 183, 199, 217, 229, 248, 251, 269, 315, 340, 349, 350, 351, 360, 373, 381, 382, 384, 390, 392, 393, 395, 400, 402, 403, 405, 406, 407, 409, 410, 412, 413, 415, 437, 438, 441, 442, 443, 448, 454, 459, 495, 534, 536, 537, 543, 549, 550, 553, 554, 555, 556, 560, 561, 562, 578, 584, 585, 587, 613, 616, 639, 688, 702, 704, 766, 769, 773, 776, 796, 826, 861, 867, 870, 883, 890, 892, 905, 906, 907, 908, 952, 953, 979, 981, 982, 984, 985, 988, 989, 993, 995, 997, 998, 1000, 1001, 1006, 1015, 1020, 1022, 1032, 1034, 1040, 1041], "larger": [4, 7, 27, 37, 39, 42, 47, 55, 80, 82, 92, 105, 114, 125, 152, 157, 158, 164, 169, 170, 175, 179, 183, 214, 215, 216, 225, 232, 234, 245, 251, 261, 263, 269, 270, 278, 283, 285, 299, 300, 302, 305, 336, 340, 350, 351, 371, 373, 378, 384, 390, 392, 402, 403, 405, 406, 407, 409, 410, 412, 413, 415, 436, 439, 445, 446, 448, 450, 452, 511, 523, 537, 540, 557, 558, 559, 563, 564, 578, 585, 639, 648, 668, 669, 670, 671, 675, 683, 688, 700, 715, 731, 792, 842, 843, 874, 876, 877, 878, 886, 891, 933, 934, 956, 959, 977, 978, 981, 982, 984, 985, 988, 989, 993, 995, 999, 1000, 1018, 1020, 1031, 1032, 1035, 1036, 1037, 1040, 1041], "periodic_spline_transform": 4, "n_spline": [4, 876], "degre": [4, 16, 34, 97, 113, 156, 163, 168, 170, 175, 178, 183, 187, 188, 200, 203, 234, 240, 245, 246, 247, 250, 251, 260, 274, 302, 317, 318, 333, 340, 343, 410, 414, 442, 448, 494, 531, 537, 635, 636, 639, 652, 770, 792, 794, 843, 872, 876, 899, 900, 901, 902, 903, 977, 978, 980, 981, 982, 983, 985, 986, 988, 991, 992, 995, 998, 1000, 1018, 1030, 1036, 1040, 1041], "n_knot": [4, 200, 318, 876, 995, 1040], "include_bia": [4, 178, 274, 872, 876, 1041], "knot": [4, 200, 318, 876, 995, 1040], "linspac": [4, 8, 10, 11, 13, 24, 26, 37, 38, 40, 42, 49, 55, 80, 81, 96, 105, 112, 122, 124, 151, 152, 154, 155, 156, 157, 158, 160, 170, 178, 179, 181, 183, 189, 193, 199, 200, 201, 205, 209, 210, 211, 212, 213, 217, 225, 228, 231, 232, 234, 236, 249, 260, 262, 263, 267, 268, 269, 270, 274, 288, 289, 295, 296, 306, 308, 319, 320, 335, 336, 339, 341, 342, 344, 345, 346, 627, 628, 800, 821, 837, 838, 1019], "again": [4, 20, 67, 72, 124, 155, 157, 159, 169, 224, 261, 349, 360, 382, 387, 392, 393, 405, 406, 407, 412, 413, 468, 563, 564, 630, 643, 647, 649, 651, 657, 659, 661, 688, 974, 981, 985, 999, 1024, 1027, 1035, 1044], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 41, 46, 47, 48, 51, 52, 53, 54, 55, 58, 60, 61, 66, 70, 74, 75, 80, 95, 96, 98, 101, 112, 117, 118, 119, 120, 121, 124, 125, 126, 129, 130, 140, 144, 146, 152, 153, 155, 157, 158, 163, 164, 166, 170, 171, 187, 188, 199, 201, 206, 208, 211, 212, 213, 214, 215, 219, 221, 223, 226, 228, 231, 232, 233, 234, 235, 237, 238, 245, 247, 249, 250, 251, 258, 260, 262, 263, 266, 267, 269, 270, 283, 288, 289, 293, 296, 299, 301, 307, 308, 315, 317, 320, 321, 326, 327, 329, 333, 336, 339, 340, 341, 342, 345, 346, 349, 350, 358, 364, 371, 372, 373, 378, 380, 392, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 922, 923, 928, 932, 934, 936, 939, 947, 949, 954, 956, 960, 961, 962, 963, 964, 965, 966, 975, 980, 981, 985, 986, 987, 988, 989, 991, 995, 996, 997, 998, 999, 1000, 1001, 1016, 1017, 1019, 1020, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1043, 1044], "concat": [4, 163, 168, 188, 217, 870], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 30, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 58, 80, 82, 89, 95, 98, 102, 106, 113, 119, 120, 140, 146, 154, 155, 170, 178, 182, 183, 190, 191, 208, 211, 212, 213, 215, 221, 222, 223, 232, 233, 237, 254, 255, 283, 287, 289, 291, 292, 294, 296, 299, 301, 302, 305, 307, 324, 325, 329, 332, 333, 334, 335, 336, 337, 338, 341, 342, 345, 346, 355, 693, 1016, 1017], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 30, 31, 32, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 60, 61, 67, 80, 82, 89, 95, 98, 102, 113, 119, 120, 140, 146, 154, 155, 170, 182, 191, 208, 211, 212, 215, 221, 222, 223, 229, 232, 233, 237, 242, 254, 255, 283, 286, 287, 289, 293, 296, 299, 301, 302, 305, 307, 317, 320, 324, 325, 329, 332, 333, 334, 336, 337, 338, 342, 345, 346, 355, 375, 406, 693, 910, 985, 995, 1001, 1016, 1017], "tab20b": 4, "stai": [4, 26, 37, 105, 169, 350, 377, 378, 382, 392, 393, 990, 1033], "midnight": 4, "fewer": [4, 13, 26, 55, 111, 120, 122, 199, 364, 379, 405, 414, 415, 444, 457, 549, 590, 692, 827, 938, 981, 986, 988, 1032, 1033, 1034], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 55, 62, 78, 85, 86, 104, 111, 117, 118, 125, 131, 143, 144, 145, 147, 148, 156, 164, 168, 169, 170, 171, 172, 175, 183, 199, 200, 217, 235, 239, 245, 251, 257, 258, 263, 267, 268, 270, 278, 292, 305, 311, 312, 315, 318, 321, 325, 336, 340, 349, 350, 351, 360, 364, 365, 366, 373, 374, 376, 378, 380, 382, 383, 384, 386, 390, 392, 393, 395, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 439, 440, 442, 446, 452, 453, 456, 464, 492, 499, 517, 520, 528, 530, 535, 539, 545, 547, 557, 558, 562, 563, 584, 585, 587, 589, 600, 607, 623, 626, 645, 654, 668, 670, 672, 674, 683, 684, 688, 691, 720, 723, 741, 753, 754, 758, 780, 789, 792, 793, 797, 798, 813, 825, 826, 839, 840, 841, 843, 845, 846, 847, 848, 849, 872, 874, 882, 883, 885, 886, 887, 888, 895, 933, 934, 936, 948, 953, 974, 975, 979, 980, 981, 982, 983, 984, 985, 986, 988, 991, 992, 993, 998, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1016, 1018, 1020, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1044], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 148, 375], "132": [4, 8, 13, 14, 56, 92, 93, 412], "013": [4, 268], "successfulli": [4, 13, 309, 377, 382, 405, 413, 999], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 72, 78, 114, 122, 124, 126, 129, 145, 169, 178, 179, 183, 197, 203, 204, 207, 230, 232, 235, 238, 261, 267, 278, 292, 307, 310, 311, 320, 350, 351, 360, 370, 372, 375, 378, 384, 390, 392, 403, 404, 405, 407, 409, 410, 412, 413, 414, 416, 440, 441, 446, 453, 456, 489, 530, 540, 545, 551, 552, 553, 554, 559, 560, 561, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 623, 639, 648, 668, 669, 670, 671, 683, 688, 691, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 824, 866, 867, 874, 886, 889, 890, 897, 898, 905, 906, 907, 908, 974, 977, 979, 980, 981, 982, 985, 988, 997, 998, 1000, 1002, 1011, 1019, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1043], "choic": [4, 7, 40, 46, 55, 65, 70, 78, 103, 151, 152, 158, 163, 188, 200, 238, 254, 258, 260, 263, 288, 312, 317, 349, 350, 360, 364, 376, 380, 383, 390, 395, 405, 407, 409, 411, 412, 414, 415, 448, 458, 467, 468, 469, 470, 471, 472, 474, 534, 536, 537, 543, 555, 634, 643, 644, 652, 654, 655, 657, 665, 676, 688, 701, 737, 826, 839, 840, 845, 847, 848, 874, 877, 886, 888, 897, 898, 921, 974, 979, 981, 982, 983, 984, 985, 986, 991, 993, 998, 999, 1000, 1001, 1034, 1037, 1038, 1042, 1043], "arbitrari": [4, 55, 86, 95, 96, 97, 116, 158, 178, 199, 216, 217, 258, 305, 309, 311, 317, 349, 358, 365, 378, 390, 392, 406, 409, 410, 412, 413, 417, 442, 446, 451, 453, 461, 528, 529, 555, 556, 577, 635, 644, 665, 676, 684, 737, 784, 795, 796, 801, 803, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 861, 863, 876, 974, 976, 977, 981, 982, 985, 988, 995, 1006, 1020, 1027, 1028, 1031, 1033, 1034, 1035, 1037, 1041, 1043], "held": [4, 8, 71, 103, 125, 171, 207, 247, 263, 268, 281, 412, 555, 556, 557, 558, 697, 794, 797, 798, 808, 854, 855, 867, 974, 975, 984, 993, 1020], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 55, 58, 60, 64, 67, 80, 81, 85, 90, 91, 92, 94, 98, 100, 101, 107, 111, 113, 117, 120, 121, 129, 148, 153, 158, 159, 166, 169, 170, 171, 178, 182, 188, 191, 193, 195, 197, 199, 200, 201, 203, 205, 208, 211, 212, 216, 217, 220, 221, 222, 223, 224, 228, 231, 233, 247, 251, 254, 257, 261, 262, 267, 269, 270, 281, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 306, 307, 309, 311, 324, 325, 329, 332, 336, 337, 338, 340, 341, 345, 346, 349, 350, 351, 355, 360, 364, 365, 366, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 386, 390, 392, 393, 404, 405, 410, 411, 412, 413, 416, 417, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 456, 457, 465, 468, 470, 494, 500, 508, 510, 511, 515, 518, 521, 526, 529, 531, 537, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 606, 607, 624, 627, 628, 629, 633, 634, 635, 640, 641, 647, 651, 653, 666, 667, 669, 671, 672, 674, 675, 678, 679, 684, 685, 686, 687, 688, 689, 690, 697, 702, 703, 706, 709, 713, 718, 720, 726, 731, 732, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 759, 774, 775, 785, 786, 792, 793, 794, 808, 818, 827, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 862, 867, 876, 891, 892, 893, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 915, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 995, 997, 998, 1000, 1001, 1005, 1006, 1015, 1018, 1019, 1020, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 116, 305], "insight": [4, 7, 169, 170, 200, 201, 217, 301, 305, 349, 358, 403, 794, 797, 798, 808, 820, 992, 1001, 1009], "last_hour": 4, "slice": [4, 17, 120, 208, 222, 225, 233, 291, 294, 318, 319, 332, 373, 379, 380, 387, 406, 460, 463, 489, 490, 504, 542, 635, 769, 773, 776, 913, 937, 938, 956, 1039, 1041], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 57, 60, 67, 75, 95, 98, 106, 111, 120, 121, 128, 131, 160, 169, 170, 172, 193, 198, 214, 215, 220, 221, 222, 237, 248, 256, 302, 305, 307, 315, 317, 324, 325, 329, 343, 344, 355], "label": [4, 6, 7, 9, 11, 12, 13, 16, 20, 24, 25, 26, 27, 30, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 73, 75, 78, 79, 80, 81, 85, 86, 91, 92, 97, 99, 102, 103, 104, 105, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 138, 144, 151, 152, 156, 157, 158, 159, 160, 163, 166, 169, 172, 175, 178, 179, 181, 182, 183, 187, 188, 189, 193, 199, 200, 201, 202, 205, 206, 207, 208, 209, 213, 214, 216, 217, 221, 222, 223, 228, 233, 234, 236, 238, 239, 247, 254, 255, 258, 259, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 281, 288, 290, 292, 295, 300, 302, 305, 306, 310, 315, 316, 319, 323, 327, 328, 329, 330, 338, 340, 343, 344, 349, 350, 354, 355, 356, 357, 366, 370, 371, 372, 377, 378, 380, 383, 387, 392, 393, 402, 403, 415, 416, 422, 423, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 461, 465, 483, 484, 485, 489, 490, 491, 492, 498, 499, 504, 505, 508, 510, 511, 515, 518, 519, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 565, 566, 588, 589, 590, 591, 592, 594, 595, 596, 600, 601, 602, 605, 606, 627, 654, 655, 662, 663, 664, 669, 670, 671, 672, 673, 674, 693, 694, 696, 698, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 720, 721, 722, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 749, 750, 751, 752, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 846, 847, 854, 855, 857, 861, 864, 865, 868, 870, 871, 878, 881, 892, 893, 894, 897, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 917, 922, 923, 948, 949, 956, 974, 981, 982, 986, 987, 988, 989, 991, 992, 995, 999, 1000, 1001, 1005, 1007, 1011, 1016, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "actual": [4, 27, 46, 60, 75, 86, 117, 148, 175, 188, 199, 203, 207, 247, 256, 263, 351, 360, 364, 366, 375, 376, 378, 380, 383, 384, 390, 391, 392, 403, 405, 410, 413, 414, 430, 505, 511, 512, 523, 531, 534, 536, 543, 558, 559, 640, 641, 644, 654, 655, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 676, 683, 687, 691, 697, 700, 705, 711, 717, 718, 719, 780, 792, 797, 798, 813, 814, 843, 874, 897, 903, 925, 926, 927, 960, 977, 984, 985, 988, 992, 993, 1034, 1035, 1041, 1042, 1043], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 56, 80, 81, 92, 95, 120, 143, 151, 152, 156, 157, 160, 164, 169, 170, 178, 187, 188, 189, 191, 195, 199, 200, 201, 205, 208, 211, 212, 217, 228, 238, 245, 248, 288, 299, 300, 302, 329, 346, 355, 356, 357, 378, 395, 398, 405, 412, 415, 551, 552, 627, 991, 992, 1001, 1005, 1011], "One": [4, 9, 12, 24, 30, 49, 55, 91, 100, 103, 119, 121, 124, 127, 166, 169, 172, 177, 203, 214, 218, 228, 239, 250, 260, 267, 270, 278, 292, 306, 331, 333, 347, 350, 364, 375, 378, 391, 392, 405, 408, 410, 411, 412, 413, 416, 440, 445, 468, 470, 474, 508, 562, 627, 635, 654, 662, 664, 669, 671, 672, 673, 783, 801, 802, 825, 826, 827, 858, 859, 870, 901, 948, 975, 977, 981, 982, 983, 984, 985, 986, 988, 989, 992, 993, 995, 1000, 1007, 1022, 1031, 1033, 1040, 1042], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 61, 72, 73, 75, 78, 79, 80, 81, 85, 86, 90, 97, 99, 103, 104, 105, 111, 112, 113, 114, 115, 117, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 134, 144, 151, 152, 156, 157, 158, 159, 160, 169, 170, 175, 178, 179, 181, 184, 187, 188, 189, 193, 199, 200, 201, 202, 205, 206, 207, 208, 209, 212, 213, 214, 216, 217, 223, 231, 232, 233, 234, 236, 239, 247, 255, 257, 259, 260, 262, 263, 264, 265, 267, 270, 272, 273, 274, 278, 286, 288, 289, 290, 295, 300, 306, 310, 316, 319, 326, 335, 338, 340, 343, 349, 354, 355, 356, 357, 696, 1016], "draw": [4, 7, 16, 60, 160, 169, 195, 239, 262, 267, 336, 385, 408, 410, 411, 412, 551, 552, 553, 554, 559, 560, 561, 562, 607, 630, 697, 800, 816, 909, 911, 984, 1005, 1014, 1040, 1041], "conclus": [4, 100, 169, 171, 199, 201, 260, 262, 360, 412, 1014], "abov": [4, 25, 26, 37, 44, 66, 70, 113, 116, 117, 122, 124, 134, 147, 148, 169, 170, 185, 199, 201, 205, 210, 232, 235, 236, 260, 266, 278, 288, 307, 310, 311, 316, 318, 350, 351, 358, 360, 364, 365, 366, 372, 373, 375, 376, 377, 378, 380, 382, 384, 390, 392, 393, 405, 406, 407, 409, 410, 411, 413, 415, 437, 441, 460, 463, 485, 491, 492, 493, 519, 586, 630, 700, 750, 794, 798, 806, 808, 818, 860, 861, 874, 880, 886, 894, 948, 974, 975, 977, 979, 981, 982, 985, 988, 990, 992, 995, 999, 1000, 1001, 1006, 1011, 1012, 1018, 1019, 1020, 1033], "problemat": [4, 256, 406, 975, 1035], "captur": [4, 9, 12, 37, 39, 86, 124, 128, 143, 156, 169, 178, 183, 199, 203, 251, 316, 336, 340, 386, 405, 412, 413, 414, 567, 584, 585, 587, 843, 952, 985, 990, 998, 1002, 1018, 1039], "big": [4, 44, 60, 62, 204, 221, 238, 251, 365, 378, 384, 393, 407, 413, 417, 534, 557, 558, 560, 561, 800, 821, 832, 833, 834, 835, 836, 1006, 1009, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "goe": [4, 37, 116, 358, 378, 412, 467, 468, 474, 553, 554, 560, 561, 562, 905, 906, 907, 908, 995, 999], "artifact": [4, 13, 46, 47, 305, 366, 382], "discontinu": [4, 390], "fail": [4, 54, 66, 96, 103, 159, 160, 178, 183, 203, 235, 260, 315, 365, 376, 378, 380, 381, 386, 393, 395, 408, 409, 436, 468, 470, 672, 673, 674, 854, 855, 928, 974, 982, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "intra": [4, 584, 587, 787, 788], "variat": [4, 12, 37, 128, 148, 156, 157, 166, 169, 204, 244, 246, 251, 252, 257, 281, 316, 336, 375, 409, 410, 439, 443, 455, 532, 639, 668, 670, 671, 792, 793, 812, 813, 815, 974, 985, 995, 998, 1001, 1005, 1016, 1018, 1021, 1022, 1030, 1032, 1033], "harmon": [4, 37, 267, 350, 405, 531, 537, 724, 725, 731, 778, 790, 985], "phase": [4, 183, 193, 364, 623, 977, 982, 988, 1009, 1035, 1037], "potenti": [4, 55, 78, 164, 168, 170, 178, 289, 290, 299, 321, 340, 351, 364, 365, 392, 395, 396, 405, 409, 412, 413, 464, 478, 479, 480, 481, 492, 520, 545, 553, 554, 557, 558, 560, 561, 569, 602, 607, 630, 758, 887, 888, 895, 905, 906, 907, 908, 991, 999, 1001, 1005, 1020, 1030, 1037, 1038, 1041], "fix": [4, 8, 20, 25, 34, 46, 71, 105, 116, 117, 120, 151, 152, 156, 159, 169, 183, 201, 217, 238, 251, 263, 299, 315, 316, 317, 318, 319, 320, 321, 350, 364, 365, 372, 374, 376, 377, 378, 380, 381, 386, 390, 392, 393, 396, 405, 406, 409, 410, 412, 413, 415, 448, 458, 468, 500, 508, 527, 533, 536, 538, 544, 545, 555, 556, 560, 561, 584, 587, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 649, 659, 666, 680, 683, 687, 691, 703, 780, 792, 808, 815, 839, 840, 842, 845, 847, 848, 864, 867, 881, 905, 906, 934, 952, 974, 981, 984, 985, 988, 995, 1006, 1008, 1020, 1025, 1026, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "two": [4, 7, 9, 11, 14, 20, 24, 26, 30, 34, 37, 39, 40, 43, 55, 60, 64, 70, 71, 75, 80, 85, 86, 90, 91, 92, 95, 97, 98, 100, 104, 110, 111, 112, 119, 120, 121, 124, 127, 128, 129, 132, 135, 145, 148, 151, 152, 153, 154, 157, 158, 163, 164, 166, 169, 170, 171, 178, 182, 183, 187, 188, 189, 190, 195, 199, 200, 201, 207, 208, 211, 216, 217, 222, 224, 225, 228, 233, 235, 236, 238, 245, 246, 247, 249, 250, 251, 255, 257, 261, 267, 278, 286, 288, 291, 292, 294, 296, 305, 307, 310, 315, 316, 318, 319, 326, 332, 333, 336, 337, 338, 340, 345, 349, 350, 351, 355, 360, 371, 372, 373, 374, 375, 376, 378, 380, 382, 384, 385, 386, 390, 392, 393, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 437, 438, 439, 440, 441, 443, 446, 447, 448, 449, 453, 455, 460, 465, 466, 467, 468, 469, 470, 471, 472, 484, 486, 487, 488, 489, 490, 492, 494, 496, 497, 498, 499, 500, 501, 503, 506, 510, 515, 518, 532, 534, 536, 540, 543, 545, 546, 549, 556, 566, 577, 580, 586, 587, 588, 591, 592, 594, 595, 596, 598, 599, 602, 603, 604, 606, 607, 616, 617, 620, 624, 627, 628, 635, 639, 641, 666, 667, 669, 688, 695, 699, 700, 701, 708, 711, 712, 715, 717, 718, 719, 726, 727, 730, 731, 733, 736, 738, 749, 750, 752, 758, 759, 766, 769, 772, 773, 774, 775, 776, 780, 781, 789, 790, 791, 792, 826, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 854, 855, 861, 862, 869, 870, 871, 872, 891, 892, 893, 897, 898, 905, 907, 908, 948, 964, 965, 971, 974, 975, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1011, 1015, 1018, 1019, 1020, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "onc": [4, 8, 50, 145, 148, 151, 221, 235, 238, 258, 261, 278, 283, 311, 315, 319, 349, 351, 358, 360, 364, 366, 372, 373, 378, 382, 383, 384, 385, 386, 391, 392, 393, 405, 406, 408, 409, 410, 412, 413, 414, 415, 445, 447, 449, 468, 504, 505, 534, 540, 547, 555, 556, 586, 587, 593, 607, 615, 623, 643, 647, 649, 651, 657, 659, 661, 662, 663, 664, 672, 673, 674, 693, 708, 712, 714, 731, 776, 795, 799, 802, 812, 832, 833, 834, 835, 836, 909, 981, 982, 988, 995, 999, 1000, 1001, 1011, 1020, 1024, 1027, 1035, 1037, 1038, 1039, 1040], "specif": [4, 11, 12, 20, 27, 34, 44, 55, 62, 65, 70, 72, 117, 131, 156, 159, 169, 170, 175, 203, 217, 255, 260, 278, 305, 315, 316, 320, 340, 349, 350, 351, 360, 364, 365, 373, 378, 381, 383, 384, 386, 390, 392, 395, 401, 404, 405, 406, 409, 410, 412, 413, 414, 415, 492, 499, 530, 547, 553, 560, 563, 564, 565, 566, 570, 584, 587, 589, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 621, 636, 639, 642, 643, 648, 654, 668, 683, 693, 695, 708, 709, 741, 794, 795, 796, 801, 802, 803, 808, 820, 833, 926, 928, 929, 948, 961, 962, 963, 979, 981, 982, 984, 985, 987, 988, 990, 992, 995, 999, 1001, 1002, 1003, 1004, 1020, 1022, 1027, 1031, 1035, 1036, 1037, 1038, 1041, 1042, 1044], "furthermor": [4, 37, 117, 157, 170, 171, 238, 239, 241, 283, 349, 350, 364, 366, 385, 405, 410, 412, 413, 558, 586, 602, 615, 700, 731, 741, 750, 752, 790, 897, 981, 993, 1030, 1034], "enforc": [4, 12, 34, 53, 95, 156, 193, 292, 364, 378, 407, 410, 412, 504, 523, 527, 533, 535, 538, 539, 541, 542, 544, 553, 554, 557, 558, 560, 561, 876, 905, 906, 907, 908, 917, 918, 975, 982, 1029, 1035, 1037, 1039, 1043], "behav": [4, 12, 48, 52, 57, 203, 255, 305, 317, 336, 360, 378, 384, 390, 391, 405, 406, 409, 877, 981, 995, 1000, 1002, 1006, 1020, 1027, 1034, 1036, 1040, 1041], "similarli": [4, 12, 37, 55, 92, 127, 170, 172, 183, 188, 199, 229, 238, 260, 299, 305, 321, 336, 360, 365, 374, 376, 380, 383, 392, 402, 408, 409, 413, 980, 982, 983, 985, 992, 999, 1000, 1002, 1011, 1015, 1035, 1041, 1043], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 56, 58, 114, 145, 148, 164, 170, 171, 182, 183, 230, 235, 238, 256, 258, 269, 271, 272, 294, 315, 329, 332, 333, 339, 340, 349, 350, 351, 363, 364, 365, 372, 373, 375, 376, 377, 378, 380, 382, 383, 384, 386, 387, 390, 392, 395, 396, 402, 403, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 419, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 458, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 487, 488, 491, 492, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 573, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 606, 607, 616, 623, 624, 625, 626, 628, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 703, 716, 724, 725, 733, 766, 769, 773, 774, 775, 776, 778, 779, 782, 783, 784, 787, 788, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 806, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 917, 918, 920, 928, 929, 933, 934, 941, 942, 943, 944, 953, 954, 955, 956, 959, 969, 970, 974, 975, 981, 982, 985, 987, 988, 991, 993, 995, 999, 1000, 1001, 1006, 1008, 1011, 1018, 1019, 1020, 1022, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "shorter": [4, 157, 248, 390, 405, 410, 446, 453, 559, 693, 987, 991, 1020, 1038], "necessarili": [4, 31, 72, 98, 169, 199, 207, 217, 233, 234, 246, 307, 349, 350, 372, 382, 401, 403, 405, 412, 623, 845, 847, 848, 849, 979, 982, 984, 985], "59": [4, 175, 183, 217, 341, 375, 384, 406, 506, 985, 1023, 1027], "37": [4, 15, 183, 263, 324, 358, 373, 412, 520, 712, 877, 995, 1027], "creat": [4, 5, 8, 11, 16, 20, 21, 26, 27, 30, 32, 34, 37, 39, 41, 43, 44, 46, 49, 52, 58, 60, 62, 71, 72, 80, 86, 90, 97, 100, 113, 116, 120, 121, 124, 127, 130, 146, 147, 151, 153, 156, 157, 158, 160, 164, 168, 170, 178, 180, 182, 185, 195, 200, 201, 211, 212, 222, 233, 235, 238, 239, 241, 250, 255, 256, 258, 260, 270, 281, 291, 293, 294, 307, 309, 310, 315, 318, 319, 329, 332, 333, 337, 338, 341, 344, 345, 346, 351, 354, 356, 357, 360, 365, 373, 374, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 391, 392, 395, 403, 405, 406, 409, 411, 412, 413, 415, 434, 447, 449, 461, 462, 495, 511, 512, 513, 514, 542, 549, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 584, 585, 587, 593, 624, 626, 627, 628, 629, 693, 694, 696, 697, 698, 777, 784, 794, 796, 800, 804, 808, 812, 816, 818, 819, 827, 858, 870, 899, 902, 905, 906, 907, 908, 912, 915, 937, 938, 944, 953, 958, 970, 975, 981, 984, 985, 986, 988, 992, 995, 996, 997, 999, 1000, 1001, 1005, 1006, 1009, 1016, 1018, 1019, 1024, 1027, 1028, 1030, 1033, 1037, 1040, 1041, 1042, 1043, 1044], "turn": [4, 32, 78, 163, 164, 169, 183, 214, 215, 233, 260, 287, 351, 364, 366, 373, 390, 392, 393, 404, 405, 406, 408, 410, 413, 414, 415, 577, 578, 585, 603, 604, 826, 830, 899, 902, 920, 975, 979, 987, 990, 995, 1009, 1020, 1032, 1034, 1035, 1040], "downstream": [4, 80, 312, 351, 413, 527, 530, 533, 537, 538, 602, 870, 995, 1037], "freedom": [4, 97, 156, 187, 188, 190, 260, 537, 652, 792, 981, 1030], "underfit": [4, 34, 124, 151, 166, 171, 203, 253, 275, 276, 299, 311, 344, 412, 653, 794, 797, 798, 808, 819, 820, 857, 872, 980, 981], "approxim": [4, 5, 27, 33, 46, 53, 80, 99, 100, 105, 115, 123, 124, 148, 152, 169, 176, 179, 195, 199, 200, 213, 217, 227, 228, 231, 234, 243, 251, 260, 265, 274, 284, 292, 297, 305, 307, 308, 310, 315, 318, 349, 351, 356, 357, 360, 367, 370, 375, 387, 390, 392, 402, 403, 406, 408, 409, 410, 412, 415, 417, 418, 419, 429, 445, 465, 466, 469, 470, 471, 472, 478, 479, 480, 487, 492, 498, 517, 520, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 555, 556, 578, 585, 606, 607, 615, 634, 635, 636, 637, 638, 653, 654, 655, 668, 670, 672, 673, 675, 683, 688, 753, 754, 759, 792, 795, 812, 818, 822, 823, 837, 838, 841, 845, 847, 848, 849, 853, 857, 858, 863, 867, 869, 870, 874, 886, 897, 902, 903, 933, 934, 959, 978, 979, 980, 981, 982, 984, 988, 989, 990, 991, 992, 993, 997, 999, 1000, 1001, 1005, 1006, 1020, 1022, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041], "especi": [4, 8, 55, 56, 121, 124, 169, 199, 235, 311, 320, 350, 360, 365, 372, 378, 386, 390, 392, 403, 405, 413, 439, 445, 497, 534, 553, 554, 555, 556, 560, 561, 562, 642, 643, 644, 646, 648, 649, 650, 654, 655, 656, 657, 658, 659, 665, 676, 691, 701, 741, 832, 833, 834, 835, 836, 905, 906, 907, 908, 981, 987, 988, 993, 995, 1009, 1030, 1035, 1039, 1040, 1041], "sharp": [4, 170, 992, 995], "rush": [4, 378], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 80, 95, 126, 151, 158, 169, 170, 203, 214, 217, 260, 267, 271, 278, 319, 349, 350, 360, 377, 403, 405, 407, 410, 412, 413, 414, 433, 439, 443, 447, 449, 455, 527, 534, 536, 538, 539, 541, 542, 543, 603, 604, 630, 797, 798, 837, 838, 933, 934, 977, 982, 985, 1001, 1041], "tend": [4, 12, 27, 37, 39, 43, 52, 55, 57, 148, 169, 170, 188, 199, 204, 217, 245, 248, 257, 261, 281, 302, 340, 351, 364, 366, 378, 380, 392, 403, 405, 407, 410, 412, 414, 433, 444, 649, 843, 874, 886, 934, 981, 982, 988, 1001, 1020], "under": [4, 7, 11, 24, 25, 27, 41, 67, 78, 79, 103, 121, 124, 170, 199, 228, 238, 260, 267, 269, 270, 306, 321, 367, 372, 378, 380, 382, 384, 386, 392, 395, 399, 403, 405, 407, 409, 410, 413, 414, 442, 447, 449, 466, 467, 468, 469, 470, 471, 472, 528, 535, 537, 539, 650, 651, 652, 698, 702, 703, 704, 711, 737, 749, 783, 784, 792, 793, 842, 941, 981, 982, 983, 985, 988, 995, 999, 1000, 1001, 1005, 1006, 1020, 1027, 1029, 1030, 1032, 1035, 1039], "These": [4, 5, 7, 27, 51, 95, 97, 101, 116, 120, 166, 170, 188, 199, 200, 201, 229, 267, 278, 281, 283, 287, 302, 305, 312, 314, 319, 325, 327, 360, 364, 365, 371, 374, 375, 378, 380, 382, 385, 387, 390, 392, 395, 399, 402, 403, 404, 405, 408, 410, 412, 413, 414, 415, 438, 442, 444, 494, 504, 505, 511, 534, 563, 564, 598, 599, 664, 672, 673, 695, 702, 728, 751, 773, 789, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 842, 843, 862, 974, 976, 979, 981, 982, 985, 986, 996, 998, 1000, 1005, 1011, 1015, 1020, 1027, 1033, 1035, 1036, 1037, 1040, 1044], "systemat": [4, 260, 380, 708, 723, 985, 1042], "reveal": [4, 169, 171, 349, 384, 402, 982, 1043], "form": [4, 9, 19, 32, 42, 60, 67, 95, 134, 158, 159, 169, 234, 235, 251, 260, 324, 360, 372, 375, 378, 380, 382, 392, 393, 402, 404, 405, 408, 409, 410, 411, 412, 413, 415, 417, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 455, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 695, 792, 793, 794, 797, 798, 799, 802, 804, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 923, 942, 945, 974, 976, 978, 979, 981, 982, 985, 986, 989, 990, 991, 995, 1000, 1005, 1011, 1018, 1033, 1037, 1039], "explain": [4, 5, 12, 56, 73, 85, 86, 104, 124, 151, 156, 157, 170, 171, 199, 217, 228, 235, 251, 270, 273, 311, 349, 350, 365, 376, 378, 382, 399, 401, 408, 410, 415, 489, 517, 520, 530, 537, 540, 545, 621, 644, 652, 665, 676, 717, 718, 719, 723, 780, 981, 988, 1001, 1004, 1005, 1016, 1018, 1019, 1038, 1040, 1041], "lack": [4, 340, 378, 380, 390, 409, 822, 912, 1000, 1041], "deriv": [4, 19, 105, 106, 123, 156, 159, 171, 187, 188, 192, 200, 365, 373, 380, 407, 409, 411, 412, 413, 415, 417, 437, 441, 442, 461, 529, 602, 613, 618, 644, 665, 672, 676, 854, 855, 870, 876, 897, 898, 979, 981, 982, 985, 989, 991, 1000, 1027, 1028, 1029, 1034, 1035, 1036, 1042], "address": [4, 48, 203, 349, 373, 378, 405, 413, 653, 981, 982, 987, 988, 989, 990, 991, 995, 1009, 1018, 1035], "section": [4, 37, 95, 100, 114, 131, 137, 138, 139, 140, 156, 160, 168, 169, 170, 172, 178, 183, 187, 188, 201, 224, 229, 235, 238, 240, 258, 260, 263, 269, 310, 311, 312, 317, 349, 350, 351, 360, 371, 373, 376, 378, 379, 380, 382, 383, 384, 385, 386, 393, 396, 399, 403, 404, 406, 408, 409, 410, 412, 413, 414, 415, 435, 439, 455, 530, 610, 615, 618, 633, 641, 783, 793, 899, 902, 974, 979, 981, 985, 986, 988, 989, 991, 992, 999, 1000, 1002, 1004, 1018, 1020, 1027, 1029, 1030, 1031, 1034], "margin": [4, 12, 25, 27, 152, 153, 155, 156, 157, 166, 169, 170, 177, 218, 238, 260, 278, 305, 311, 331, 334, 336, 338, 340, 347, 375, 403, 404, 410, 412, 415, 508, 606, 607, 627, 641, 672, 730, 826, 874, 886, 899, 902, 981, 985, 987, 991, 992, 995, 999, 1000, 1018, 1034, 1036], "construct": [4, 11, 70, 72, 111, 113, 115, 119, 131, 148, 217, 229, 235, 240, 242, 281, 296, 306, 308, 316, 319, 372, 375, 380, 387, 392, 405, 406, 409, 410, 412, 413, 416, 430, 437, 438, 440, 441, 446, 448, 453, 459, 461, 463, 515, 531, 537, 540, 551, 552, 577, 583, 635, 684, 686, 687, 808, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 856, 857, 858, 859, 861, 902, 916, 918, 933, 934, 943, 944, 948, 974, 975, 977, 981, 982, 985, 986, 988, 995, 998, 1000, 1001, 1006, 1011, 1015, 1032, 1034, 1035, 1038, 1041], "polynomialfeatur": [4, 178, 199, 200, 205, 240, 274, 317, 340, 876, 981, 995, 1031, 1035, 1036, 1037, 1040, 1041, 1043, 1044], "coars": [4, 120, 384, 444, 457], "too": [4, 7, 12, 17, 44, 50, 55, 57, 62, 70, 74, 82, 99, 124, 163, 171, 183, 200, 203, 221, 232, 238, 246, 254, 258, 267, 275, 301, 311, 336, 349, 356, 357, 364, 375, 378, 384, 386, 390, 392, 405, 407, 409, 412, 413, 414, 417, 433, 445, 534, 584, 587, 675, 688, 703, 832, 833, 834, 835, 836, 862, 875, 877, 980, 982, 984, 985, 987, 988, 992, 1018, 1028, 1031, 1034, 1035, 1036, 1037, 1039], "mani": [4, 7, 10, 19, 55, 56, 74, 78, 82, 111, 117, 118, 119, 120, 122, 125, 144, 148, 171, 199, 220, 232, 246, 254, 260, 267, 268, 272, 283, 305, 310, 311, 315, 316, 317, 318, 319, 321, 349, 360, 364, 366, 373, 375, 377, 378, 391, 392, 393, 395, 396, 402, 403, 405, 406, 407, 410, 412, 413, 414, 415, 417, 499, 549, 550, 553, 554, 555, 556, 560, 561, 562, 584, 587, 602, 605, 623, 635, 646, 650, 654, 655, 662, 663, 664, 672, 673, 674, 688, 691, 769, 773, 794, 798, 808, 854, 855, 870, 875, 877, 897, 905, 906, 907, 908, 974, 975, 977, 981, 982, 984, 985, 986, 987, 988, 991, 992, 993, 995, 998, 1000, 1002, 1004, 1005, 1006, 1009, 1018, 1020, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044], "featureunion": [4, 74, 370, 392, 396, 404, 460, 625, 859, 975, 1006, 1009, 1022, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "hour_workday_interact": 4, "interaction_onli": [4, 872, 981, 995], "combin": [4, 12, 20, 25, 27, 61, 70, 71, 73, 74, 90, 95, 104, 105, 110, 122, 126, 135, 151, 157, 164, 166, 169, 183, 199, 203, 216, 217, 224, 228, 233, 260, 261, 269, 271, 272, 292, 300, 311, 317, 318, 320, 339, 340, 351, 355, 364, 370, 374, 375, 378, 383, 391, 392, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 417, 418, 441, 460, 462, 463, 469, 471, 472, 475, 476, 477, 485, 492, 504, 505, 511, 517, 520, 522, 527, 533, 534, 536, 538, 543, 545, 556, 558, 561, 563, 564, 606, 610, 612, 617, 620, 626, 630, 639, 642, 643, 648, 649, 654, 655, 656, 657, 658, 659, 662, 664, 668, 669, 670, 671, 672, 674, 675, 677, 680, 697, 725, 783, 794, 797, 798, 805, 806, 818, 820, 824, 856, 857, 858, 862, 870, 871, 872, 877, 897, 959, 974, 977, 978, 981, 985, 986, 988, 991, 995, 998, 999, 1001, 1002, 1009, 1016, 1018, 1020, 1027, 1032, 1035, 1038, 1039, 1040, 1042, 1043], "previou": [4, 43, 53, 71, 95, 114, 121, 124, 131, 151, 156, 157, 168, 169, 170, 183, 185, 200, 232, 234, 235, 260, 263, 267, 305, 310, 319, 349, 350, 351, 360, 364, 373, 378, 380, 383, 384, 386, 390, 392, 393, 395, 405, 412, 413, 464, 542, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 626, 642, 644, 648, 649, 654, 656, 658, 662, 663, 664, 665, 672, 673, 674, 676, 703, 813, 828, 831, 846, 854, 855, 894, 911, 981, 985, 989, 995, 1006, 1011, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "nice": [4, 67, 200, 235, 305, 364, 410, 1020], "cyclic_spline_interactions_pipelin": 4, "078": [4, 186, 218], "009": [4, 350, 384], "104": [4, 24, 76], "highlight": [4, 80, 92, 151, 152, 157, 217, 309, 322, 349, 351, 367, 378, 382, 383, 386, 390, 415, 439, 442, 443, 460, 463, 486, 487, 492, 497, 498, 500, 508, 511, 517, 520, 534, 557, 558, 560, 561, 563, 595, 598, 624, 626, 628, 630, 636, 642, 644, 648, 654, 665, 676, 684, 697, 698, 713, 743, 783, 790, 794, 797, 798, 800, 808, 816, 819, 823, 839, 841, 858, 862, 867, 870, 871, 872, 876, 877, 878, 894, 895, 897, 902, 905, 906, 929, 982, 985, 993, 995, 1000, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "anoth": [4, 37, 95, 100, 111, 126, 148, 151, 159, 164, 169, 188, 203, 207, 225, 228, 235, 239, 246, 260, 262, 263, 266, 270, 293, 349, 351, 354, 360, 364, 366, 372, 373, 376, 378, 380, 384, 390, 392, 396, 399, 402, 405, 409, 410, 412, 413, 414, 416, 438, 440, 448, 451, 458, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 504, 534, 536, 543, 669, 672, 688, 705, 715, 800, 816, 856, 857, 878, 974, 975, 980, 981, 982, 985, 986, 988, 991, 995, 999, 1000, 1011, 1018, 1019, 1020, 1036, 1037], "either": [4, 10, 30, 71, 117, 120, 121, 169, 187, 189, 229, 238, 255, 264, 269, 288, 344, 349, 358, 364, 365, 370, 373, 376, 378, 379, 380, 384, 392, 396, 399, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 438, 443, 448, 483, 492, 508, 520, 529, 530, 532, 540, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 578, 579, 580, 584, 585, 586, 587, 589, 590, 593, 598, 603, 604, 606, 607, 618, 623, 626, 628, 629, 646, 650, 652, 660, 672, 674, 678, 679, 686, 693, 694, 698, 702, 703, 707, 708, 716, 719, 721, 722, 723, 730, 734, 735, 737, 747, 751, 764, 769, 773, 777, 780, 783, 784, 789, 794, 797, 798, 800, 808, 816, 817, 818, 819, 820, 821, 822, 824, 827, 857, 887, 888, 894, 897, 898, 905, 906, 907, 908, 912, 942, 946, 974, 981, 985, 986, 987, 988, 989, 990, 993, 995, 999, 1000, 1011, 1019, 1020, 1027, 1030, 1036, 1037, 1038, 1041], "after": [4, 17, 20, 21, 26, 46, 53, 55, 70, 71, 75, 81, 97, 111, 122, 129, 131, 134, 144, 148, 156, 158, 160, 163, 169, 175, 192, 199, 238, 239, 242, 248, 260, 269, 283, 291, 293, 305, 306, 309, 310, 349, 350, 366, 373, 375, 377, 378, 380, 382, 384, 385, 386, 390, 392, 399, 401, 402, 403, 405, 406, 409, 410, 413, 414, 417, 438, 443, 446, 447, 448, 449, 452, 458, 511, 528, 532, 549, 550, 555, 556, 557, 558, 593, 623, 626, 654, 655, 662, 663, 664, 669, 671, 672, 673, 674, 688, 708, 721, 751, 789, 792, 793, 797, 798, 846, 853, 857, 870, 876, 897, 902, 903, 974, 975, 979, 981, 985, 989, 990, 995, 997, 999, 1000, 1001, 1006, 1011, 1018, 1020, 1027, 1030, 1034, 1035, 1038, 1039, 1042], "quadrat": [4, 29, 35, 156, 160, 166, 213, 262, 318, 404, 436, 454, 457, 545, 546, 619, 627, 644, 654, 655, 665, 672, 676, 712, 902, 903, 981, 982, 985, 988, 991, 995, 999, 1000, 1007, 1022, 1028], "tractabl": [4, 409, 630, 1005, 1040], "nystr\u00f6m": 4, "latter": [4, 14, 250, 260, 269, 270, 291, 310, 344, 366, 375, 392, 409, 412, 413, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 737, 792, 793, 794, 797, 798, 803, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 952, 988, 1036], "kernel_approxim": [4, 163, 166, 174, 175, 213, 228, 233, 317, 367, 673, 753, 754, 863, 977, 1011, 1028, 1034, 1044], "nystroem": [4, 163, 213, 228, 233, 370, 636, 637, 638, 673, 863, 902, 903, 1022, 1028, 1034, 1037, 1039, 1040, 1041], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 140, 175, 260, 333, 340, 343, 448, 531, 616, 760, 769, 794, 872, 899, 900, 901, 902, 903, 981, 995, 1018], "n_compon": [4, 5, 6, 12, 14, 44, 52, 57, 58, 59, 70, 73, 74, 85, 86, 90, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 129, 175, 198, 220, 221, 222, 223, 224, 225, 228, 232, 233, 236, 240, 245, 246, 247, 248, 249, 250, 251, 259, 287, 292, 302, 310, 317, 319, 350, 380, 383, 384, 392, 408, 410, 417, 447, 448, 458, 460, 478, 479, 480, 481, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 635, 636, 637, 638, 684, 685, 686, 687, 688, 689, 690, 691, 692, 792, 793, 846, 853, 856, 889, 890, 891, 934, 977, 979, 982, 984, 988, 1016, 1019, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1044], "053": [4, 148, 375, 384], "002": [4, 12, 131, 135, 148, 151, 375], "076": [4, 212, 218, 885], "004": [4, 350], "almost": [4, 34, 117, 122, 123, 201, 207, 235, 238, 274, 310, 327, 360, 371, 373, 382, 384, 390, 391, 392, 396, 405, 409, 410, 466, 467, 468, 469, 471, 472, 473, 792, 974, 980, 981, 984, 985, 1000, 1019, 1020, 1035, 1040], "rival": [4, 894, 998], "intermedi": [4, 7, 52, 55, 116, 124, 238, 336, 413, 555, 556, 615, 857, 985, 1039], "compound": [4, 217, 413, 606, 608, 676, 719, 747, 981, 1020], "one_hot_poly_pipelin": 4, "082": 4, "111": [4, 7, 8, 16, 67, 90, 101, 102, 196, 214, 224, 260, 283, 849, 1030], "competit": [4, 124, 349, 412, 640, 988], "low": [4, 11, 12, 37, 50, 81, 86, 97, 99, 103, 111, 114, 127, 148, 171, 192, 194, 199, 201, 203, 213, 220, 222, 228, 232, 238, 245, 246, 248, 251, 254, 260, 262, 266, 267, 275, 289, 290, 301, 309, 311, 312, 321, 327, 335, 336, 349, 358, 374, 375, 378, 383, 386, 392, 395, 402, 403, 404, 409, 410, 413, 438, 440, 445, 464, 517, 520, 531, 578, 585, 599, 675, 688, 692, 701, 721, 737, 784, 842, 871, 878, 895, 934, 950, 953, 974, 977, 980, 981, 982, 984, 985, 988, 990, 991, 992, 993, 995, 997, 1000, 1001, 1007, 1022, 1028, 1031, 1032, 1033, 1035, 1036, 1041, 1042], "rank": [4, 17, 25, 80, 99, 103, 118, 146, 171, 172, 217, 258, 260, 268, 374, 400, 402, 403, 407, 408, 410, 412, 413, 504, 505, 517, 520, 545, 546, 589, 590, 602, 644, 653, 665, 676, 692, 716, 721, 722, 734, 735, 751, 789, 797, 798, 934, 974, 976, 977, 982, 993, 995, 1009, 1022, 1028, 1033, 1036, 1037, 1041, 1042], "fact": [4, 11, 19, 25, 81, 86, 111, 124, 171, 232, 242, 278, 349, 372, 385, 390, 392, 408, 410, 411, 412, 413, 645, 664, 666, 700, 979, 981, 988, 995, 999, 1000, 1006, 1009, 1041], "smoother": [4, 5, 124, 170, 301, 411], "allow": [4, 20, 56, 58, 74, 75, 90, 99, 100, 114, 115, 129, 151, 156, 158, 160, 193, 199, 203, 217, 221, 229, 232, 239, 241, 242, 245, 260, 281, 315, 316, 317, 318, 320, 340, 341, 349, 358, 360, 364, 372, 376, 378, 379, 380, 382, 385, 387, 392, 393, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 433, 437, 439, 440, 441, 442, 443, 445, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 492, 519, 520, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 589, 590, 593, 599, 606, 607, 611, 623, 624, 626, 630, 631, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 684, 686, 688, 695, 737, 757, 760, 769, 773, 776, 787, 788, 792, 793, 794, 795, 796, 797, 798, 801, 803, 805, 808, 812, 815, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 843, 844, 847, 848, 852, 854, 855, 857, 859, 860, 862, 863, 864, 869, 876, 877, 881, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 915, 917, 918, 928, 929, 949, 953, 974, 975, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 995, 997, 998, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 55, 57, 65, 73, 80, 81, 95, 97, 99, 100, 106, 122, 131, 151, 155, 157, 159, 170, 183, 187, 188, 201, 207, 220, 222, 224, 225, 231, 238, 250, 259, 260, 261, 271, 286, 291, 292, 293, 310, 315, 321, 338, 339, 340, 344, 349, 350, 354, 365, 375, 376, 378, 379, 380, 383, 384, 387, 390, 391, 392, 393, 402, 405, 407, 408, 410, 412, 413, 414, 416, 437, 440, 441, 442, 446, 447, 448, 449, 458, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 554, 561, 578, 585, 606, 607, 643, 646, 649, 650, 651, 652, 654, 655, 667, 684, 703, 724, 725, 733, 777, 778, 779, 782, 783, 789, 794, 808, 839, 840, 841, 843, 845, 847, 848, 849, 870, 871, 876, 889, 890, 891, 905, 906, 908, 914, 933, 934, 936, 974, 975, 977, 980, 981, 982, 984, 985, 986, 989, 991, 995, 999, 1000, 1001, 1004, 1006, 1009, 1011, 1013, 1015, 1016, 1018, 1019, 1020, 1027, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 55, 57, 59, 66, 70, 71, 72, 75, 95, 98, 100, 109, 116, 117, 121, 123, 124, 125, 126, 144, 151, 154, 155, 156, 157, 158, 159, 164, 166, 168, 169, 170, 172, 177, 178, 181, 183, 186, 197, 199, 200, 205, 207, 212, 215, 217, 218, 220, 229, 231, 234, 235, 238, 239, 241, 242, 250, 258, 260, 261, 262, 263, 268, 269, 274, 278, 283, 299, 305, 315, 316, 318, 319, 321, 329, 333, 334, 335, 336, 337, 338, 340, 342, 344, 346, 349, 350, 355, 360, 364, 365, 367, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 395, 396, 399, 403, 405, 406, 407, 408, 410, 411, 413, 414, 416, 417, 433, 436, 439, 440, 441, 443, 444, 446, 448, 450, 453, 454, 455, 456, 457, 460, 461, 464, 465, 467, 468, 470, 474, 484, 485, 487, 488, 491, 493, 499, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 568, 571, 577, 578, 584, 585, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 603, 604, 605, 606, 607, 611, 613, 615, 616, 618, 619, 623, 624, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 698, 699, 700, 702, 707, 708, 712, 715, 717, 718, 719, 723, 727, 729, 730, 733, 735, 736, 737, 745, 750, 752, 756, 757, 758, 760, 763, 766, 769, 773, 774, 775, 776, 777, 778, 780, 784, 787, 788, 789, 791, 792, 793, 794, 796, 797, 798, 799, 800, 805, 806, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 866, 867, 869, 873, 874, 875, 876, 877, 878, 881, 883, 886, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 915, 924, 926, 927, 928, 933, 934, 944, 945, 951, 952, 953, 955, 956, 959, 960, 969, 974, 975, 976, 978, 980, 982, 983, 986, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1001, 1005, 1006, 1007, 1011, 1014, 1015, 1016, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "abl": [4, 5, 9, 24, 47, 55, 61, 82, 86, 99, 100, 128, 157, 169, 172, 183, 188, 199, 215, 217, 224, 266, 271, 336, 360, 364, 365, 366, 372, 376, 378, 380, 382, 383, 390, 405, 407, 409, 413, 481, 499, 530, 822, 869, 974, 975, 981, 984, 985, 986, 991, 995, 998, 1001, 1002, 1006, 1011, 1019, 1020, 1033, 1034, 1038], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 175, 183, 285, 344, 351, 364, 401, 407, 413, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 804, 837, 838, 905, 906, 907, 908, 974, 985, 988, 1001, 1009, 1014, 1018, 1030, 1031], "depth": [4, 116, 121, 125, 127, 132, 278, 354, 356, 357, 358, 364, 376, 378, 382, 391, 412, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 837, 838, 842, 905, 906, 907, 908, 909, 911, 939, 990, 991, 1001, 1029, 1030, 1038], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 70, 71, 72, 73, 111, 117, 118, 122, 123, 129, 144, 145, 147, 152, 172, 175, 199, 203, 207, 214, 215, 247, 258, 259, 260, 261, 262, 264, 266, 275, 278, 285, 291, 292, 293, 302, 307, 310, 321, 324, 325, 327, 336, 339, 340, 344, 360, 364, 380, 391, 392, 404, 405, 409, 412, 413, 414, 422, 433, 445, 465, 467, 468, 474, 528, 530, 537, 545, 546, 547, 549, 551, 553, 554, 555, 557, 560, 561, 563, 565, 606, 630, 654, 655, 662, 664, 667, 670, 671, 672, 688, 693, 699, 704, 709, 714, 729, 733, 738, 749, 758, 782, 789, 791, 821, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 839, 844, 846, 847, 854, 892, 893, 897, 899, 902, 905, 907, 933, 934, 974, 979, 980, 981, 982, 986, 988, 989, 993, 997, 999, 1001, 1015, 1020, 1035, 1036], "On": [4, 12, 17, 26, 67, 71, 72, 85, 86, 100, 111, 114, 116, 118, 119, 124, 127, 128, 131, 134, 143, 145, 155, 156, 169, 170, 171, 180, 187, 188, 201, 203, 229, 230, 231, 232, 234, 235, 238, 239, 240, 241, 242, 245, 247, 250, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 272, 302, 305, 307, 309, 310, 311, 316, 317, 319, 320, 326, 336, 344, 358, 364, 376, 379, 380, 382, 390, 392, 399, 401, 403, 405, 409, 410, 412, 414, 415, 639, 652, 687, 730, 756, 862, 878, 974, 978, 981, 984, 985, 987, 991, 998, 1000, 1015, 1018], "contrari": [4, 13, 169, 221, 225, 238, 245, 263, 305, 349, 372, 405, 492, 540, 602, 811, 878, 981, 987, 991], "significantli": [4, 24, 25, 37, 78, 79, 111, 117, 122, 124, 148, 169, 170, 171, 199, 203, 207, 215, 217, 260, 283, 316, 317, 350, 351, 360, 365, 382, 405, 410, 412, 413, 418, 465, 470, 475, 476, 534, 536, 543, 554, 561, 642, 643, 648, 649, 656, 657, 658, 659, 680, 688, 837, 838, 977, 981, 982, 988, 993, 1000, 1027, 1029, 1030, 1034, 1035, 1040, 1041, 1042], "over": [4, 7, 8, 9, 16, 20, 24, 26, 27, 31, 37, 50, 55, 56, 72, 74, 95, 114, 117, 127, 143, 147, 151, 159, 163, 168, 170, 181, 193, 199, 207, 217, 228, 238, 260, 261, 263, 265, 267, 268, 269, 272, 288, 296, 299, 300, 307, 318, 319, 321, 324, 349, 350, 364, 365, 366, 373, 374, 377, 378, 379, 380, 384, 391, 392, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 417, 442, 445, 460, 468, 505, 529, 530, 532, 533, 534, 535, 542, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 584, 585, 587, 590, 598, 628, 629, 630, 640, 641, 642, 643, 648, 649, 654, 656, 657, 658, 659, 661, 662, 663, 664, 672, 673, 674, 681, 682, 693, 712, 714, 734, 758, 783, 788, 792, 794, 797, 798, 800, 805, 806, 808, 816, 818, 819, 820, 821, 822, 824, 853, 854, 855, 856, 872, 876, 897, 905, 907, 914, 923, 953, 974, 981, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1000, 1001, 1005, 1006, 1009, 1016, 1019, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040], "compet": 4, "access": [4, 49, 78, 238, 246, 251, 349, 358, 364, 365, 378, 379, 380, 386, 390, 392, 393, 401, 405, 407, 408, 412, 413, 415, 446, 453, 460, 532, 563, 564, 565, 566, 613, 855, 856, 857, 912, 974, 981, 984, 985, 991, 992, 993, 999, 1000, 1006, 1009, 1011, 1019, 1020, 1027, 1029, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1043], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 55, 57, 58, 67, 70, 90, 99, 101, 102, 116, 117, 121, 125, 127, 131, 148, 170, 183, 188, 196, 199, 217, 220, 222, 229, 232, 235, 238, 242, 261, 269, 271, 283, 285, 305, 310, 317, 318, 349, 350, 351, 372, 375, 376, 378, 380, 382, 384, 386, 390, 392, 393, 395, 396, 401, 404, 405, 406, 407, 409, 410, 412, 413, 414, 416, 422, 433, 434, 435, 440, 442, 446, 448, 453, 458, 460, 463, 465, 478, 479, 480, 492, 504, 517, 520, 531, 537, 545, 546, 547, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 575, 576, 577, 606, 607, 615, 623, 628, 629, 630, 639, 654, 655, 662, 663, 664, 667, 670, 671, 672, 673, 674, 682, 685, 687, 688, 689, 691, 695, 719, 724, 725, 737, 742, 744, 747, 758, 779, 782, 794, 797, 798, 801, 803, 808, 820, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 849, 854, 857, 858, 859, 861, 871, 872, 873, 877, 885, 889, 890, 892, 893, 897, 898, 899, 902, 905, 906, 907, 908, 942, 945, 951, 971, 974, 979, 980, 981, 982, 985, 986, 987, 988, 989, 991, 992, 995, 999, 1000, 1001, 1006, 1011, 1018, 1020, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "geograph": [4, 11, 296, 373, 494], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 25, 61, 124, 134, 148, 256, 274, 375, 1016], "predictionerrordisplai": [4, 75, 131, 169, 256, 320, 985, 1042], "nrow": [4, 5, 30, 32, 34, 57, 66, 73, 95, 160, 170, 199, 201, 207, 217, 220, 221, 224, 238, 262, 263, 283, 307, 309, 310, 320, 325, 343, 344, 1016], "ncol": [4, 5, 30, 32, 34, 53, 57, 66, 95, 100, 106, 170, 199, 200, 201, 207, 217, 220, 221, 231, 238, 256, 262, 263, 271, 283, 286, 300, 306, 307, 309, 310, 320, 343, 344, 350], "sharex": [4, 7, 14, 34, 73, 92, 100, 132, 160, 170, 201, 262, 288, 327, 1016], "sharei": [4, 34, 75, 92, 100, 106, 132, 160, 170, 199, 201, 207, 262, 271, 288, 306, 311, 343, 344, 350], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 75, 131, 169, 256, 320, 697], "residual_vs_predict": [4, 75, 256, 320, 697], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 75, 104, 117, 131, 143, 169, 170, 250, 254, 256, 269, 312, 317, 320, 333, 336, 349, 365, 366, 371, 373, 378, 380, 384, 390, 391, 403, 405, 408, 409, 410, 412, 413, 414, 484, 485, 499, 504, 505, 517, 520, 584, 628, 629, 697, 926, 981, 987, 992, 1001, 1030, 1039, 1041, 1042, 1043], "enumer": [4, 8, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 37, 39, 40, 41, 42, 43, 44, 45, 50, 55, 59, 60, 61, 62, 70, 79, 81, 82, 86, 96, 98, 105, 114, 117, 122, 123, 125, 126, 137, 153, 155, 160, 172, 179, 181, 190, 199, 221, 222, 225, 228, 233, 237, 238, 245, 246, 247, 248, 250, 251, 255, 262, 263, 269, 270, 288, 292, 293, 295, 302, 307, 308, 324, 325, 327, 329, 334, 336, 343, 344, 349, 355, 373, 555, 556, 560, 561, 776, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815], "pred": [4, 7, 11, 32, 345, 349, 373, 644, 665, 676, 693, 698, 702, 714, 724, 725, 733, 778, 779, 782, 783, 985], "zip": [4, 5, 8, 9, 12, 24, 26, 31, 32, 34, 37, 38, 40, 42, 45, 49, 55, 63, 64, 65, 75, 86, 92, 95, 96, 99, 104, 105, 106, 113, 115, 131, 132, 157, 163, 166, 169, 170, 171, 184, 190, 191, 199, 207, 208, 220, 232, 238, 246, 250, 251, 258, 262, 263, 264, 267, 269, 283, 286, 288, 291, 299, 300, 301, 307, 309, 310, 311, 328, 333, 344, 345, 355, 376, 412, 821, 995, 1020, 1023], "disp": [4, 30, 32, 113, 127, 128, 254, 263, 275, 286, 310, 316, 333, 338, 434, 627, 693, 696, 697, 846], "from_predict": [4, 32, 75, 131, 169, 238, 256, 267, 269, 318, 324, 349, 385, 434, 627, 694, 714, 722, 777, 779, 782, 783, 784, 985, 1024, 1040, 1041, 1042, 1043], "y_true": [4, 19, 32, 59, 75, 111, 131, 154, 199, 209, 217, 238, 248, 327, 378, 428, 434, 435, 461, 478, 479, 480, 548, 550, 552, 553, 554, 556, 558, 560, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 693, 694, 696, 697, 698, 699, 703, 704, 705, 708, 709, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 777, 778, 779, 780, 782, 783, 784, 785, 786, 789, 791, 830, 831, 840, 848, 855, 898, 900, 903, 906, 908, 985, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 57, 62, 70, 75, 111, 124, 125, 131, 145, 169, 199, 201, 206, 209, 214, 216, 217, 228, 229, 238, 256, 258, 263, 290, 294, 302, 310, 327, 328, 360, 378, 385, 392, 412, 428, 435, 461, 478, 479, 480, 545, 548, 550, 552, 553, 554, 556, 558, 560, 561, 563, 564, 566, 607, 627, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 693, 694, 696, 697, 698, 699, 704, 708, 709, 714, 717, 718, 719, 723, 724, 725, 729, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 778, 779, 780, 782, 783, 785, 786, 791, 794, 797, 798, 808, 818, 828, 830, 831, 840, 848, 855, 857, 897, 898, 899, 900, 901, 902, 903, 906, 908, 985, 987, 1016, 1033, 1034, 1036, 1038, 1042, 1043], "scatter_kwarg": [4, 75, 131, 169, 697], "set_xtick": [4, 8, 10, 16, 31, 43, 60, 64, 106, 129, 133, 170, 172, 190, 215, 233, 245, 271, 272, 281, 299, 301, 307, 308, 333], "num": [4, 12, 71, 148, 151, 156, 157, 158, 170, 171, 201, 267, 268, 319, 321, 628], "set_ytick": [4, 16, 31, 43, 60, 64, 106, 129, 163, 164, 172, 190, 215, 245, 271, 299, 301, 307, 308, 333, 351], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 72, 75, 79, 80, 81, 85, 90, 97, 99, 103, 104, 105, 111, 113, 114, 115, 122, 123, 124, 125, 126, 128, 131, 133, 134, 138, 144, 151, 152, 158, 160, 169, 170, 181, 184, 189, 193, 199, 200, 201, 202, 205, 206, 209, 212, 213, 216, 217, 223, 231, 232, 233, 234, 236, 238, 247, 248, 255, 258, 259, 260, 263, 264, 267, 270, 273, 274, 286, 288, 289, 300, 306, 309, 310, 316, 319, 326, 335, 338, 340, 343, 344, 349, 355, 357, 808, 874, 886], "upper": [4, 7, 9, 24, 72, 75, 79, 80, 81, 113, 114, 115, 123, 124, 125, 126, 131, 133, 144, 155, 157, 160, 169, 193, 199, 205, 206, 209, 213, 216, 217, 232, 236, 237, 259, 260, 261, 288, 289, 300, 310, 327, 335, 338, 340, 343, 405, 411, 459, 584, 585, 587, 591, 609, 610, 611, 613, 615, 616, 618, 619, 621, 628, 629, 631, 633, 646, 650, 673, 730, 870, 871, 899, 900, 901, 921, 984, 985, 988, 995, 999, 1000, 1001, 1035], "bbox_to_anchor": [4, 37, 160, 265, 343], "set_aspect": [4, 154, 210, 247, 345], "equal": [4, 11, 12, 26, 34, 37, 39, 53, 60, 80, 86, 111, 124, 154, 169, 200, 201, 210, 216, 239, 247, 250, 254, 258, 260, 269, 293, 307, 311, 336, 338, 345, 350, 373, 374, 378, 380, 392, 402, 403, 405, 409, 410, 412, 413, 418, 433, 436, 437, 438, 439, 441, 443, 445, 450, 455, 456, 459, 465, 470, 475, 476, 499, 508, 511, 515, 528, 529, 530, 535, 537, 539, 540, 545, 546, 547, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 584, 589, 590, 593, 595, 596, 603, 604, 621, 624, 625, 628, 629, 630, 631, 633, 637, 638, 641, 645, 654, 655, 667, 695, 699, 714, 716, 724, 763, 778, 782, 783, 789, 791, 794, 795, 797, 798, 807, 808, 812, 818, 825, 829, 830, 837, 838, 839, 840, 845, 846, 847, 848, 849, 854, 855, 860, 861, 862, 869, 872, 875, 876, 877, 878, 880, 887, 894, 897, 898, 904, 905, 906, 907, 908, 923, 934, 960, 966, 979, 981, 985, 986, 988, 989, 991, 995, 999, 1000, 1001, 1019, 1020, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "adjust": [4, 9, 36, 38, 49, 58, 68, 78, 111, 124, 166, 203, 228, 233, 241, 261, 278, 315, 328, 344, 350, 385, 405, 406, 410, 412, 413, 520, 549, 550, 553, 555, 557, 558, 560, 654, 655, 662, 664, 670, 671, 672, 700, 701, 704, 710, 711, 750, 752, 781, 790, 832, 833, 835, 836, 867, 889, 890, 897, 898, 899, 902, 905, 907, 923, 984, 985, 989, 995, 1018, 1024, 1027, 1033, 1043], "box": [4, 10, 30, 55, 170, 171, 221, 278, 305, 309, 385, 410, 412, 508, 551, 552, 873, 885, 909, 911, 985, 986, 992, 995, 1001, 1005, 1011, 1035, 1043], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 159, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 354, 355, 356, 357, 358, 365, 366, 378, 384, 390, 391, 395, 396, 402, 403, 407, 409, 410, 411, 412, 414, 415, 434, 498, 555, 589, 590, 627, 628, 693, 694, 696, 697, 698, 709, 800, 816, 839, 857, 909, 910, 911, 974, 979, 980, 982, 984, 985, 987, 988, 989, 991, 992, 995, 999, 1000, 1006, 1015, 1016, 1020, 1029, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1041, 1043], "seem": [4, 9, 46, 55, 124, 170, 199, 224, 228, 261, 278, 300, 309, 344, 349, 350, 377, 378, 383, 409, 497, 981, 985], "regim": [4, 392, 897, 898, 984], "overal": [4, 43, 48, 111, 114, 117, 131, 156, 217, 257, 283, 310, 311, 350, 364, 377, 378, 384, 402, 403, 412, 443, 445, 460, 467, 468, 474, 545, 878, 982, 985, 1001, 1009, 1037], "closer": [4, 27, 37, 98, 100, 130, 148, 151, 170, 178, 203, 340, 351, 403, 405, 410, 445, 549, 624, 708, 839, 840, 845, 847, 848, 849, 1000, 1034], "diagon": [4, 25, 40, 82, 85, 217, 238, 247, 250, 251, 254, 336, 402, 405, 407, 415, 449, 467, 468, 474, 477, 507, 509, 523, 528, 546, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 646, 647, 650, 651, 652, 678, 679, 697, 711, 787, 792, 793, 841, 849, 979, 981, 984, 985, 988, 995, 1033, 1035, 1036, 1037], "obtain": [4, 7, 9, 12, 20, 27, 48, 55, 57, 58, 71, 74, 75, 100, 103, 111, 121, 124, 125, 129, 137, 148, 153, 155, 169, 170, 183, 199, 201, 203, 213, 224, 238, 245, 246, 247, 256, 260, 261, 262, 266, 269, 286, 310, 318, 334, 340, 350, 351, 358, 360, 373, 375, 380, 390, 392, 399, 403, 405, 407, 408, 410, 412, 413, 414, 415, 433, 438, 465, 492, 528, 529, 551, 552, 553, 554, 555, 556, 559, 560, 561, 589, 602, 610, 641, 655, 657, 662, 664, 668, 670, 672, 673, 683, 704, 708, 721, 734, 751, 788, 800, 816, 822, 825, 826, 829, 843, 854, 874, 886, 899, 902, 905, 906, 934, 975, 977, 979, 981, 982, 984, 985, 986, 988, 989, 991, 992, 995, 999, 1000, 1033, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "slightli": [4, 25, 64, 82, 114, 117, 121, 124, 127, 131, 148, 151, 152, 153, 171, 178, 199, 217, 223, 225, 235, 238, 268, 283, 315, 333, 351, 377, 378, 390, 403, 405, 412, 413, 415, 417, 442, 584, 585, 587, 634, 654, 797, 798, 897, 899, 902, 933, 934, 974, 981, 995, 999, 1000, 1036, 1040, 1041, 1043], "cost": [4, 39, 98, 117, 151, 166, 175, 220, 233, 262, 269, 315, 336, 350, 351, 353, 359, 378, 384, 386, 390, 405, 412, 474, 496, 533, 534, 535, 542, 553, 554, 555, 556, 560, 561, 598, 606, 615, 623, 642, 643, 648, 649, 656, 657, 658, 659, 664, 668, 670, 672, 674, 683, 684, 688, 823, 897, 898, 899, 902, 905, 906, 907, 908, 934, 977, 981, 982, 985, 988, 998, 999, 1000, 1007, 1022, 1033, 1036, 1037], "durat": [4, 8, 199, 217, 238, 285, 351, 365, 951, 952, 981], "regressor": [4, 75, 86, 125, 130, 131, 134, 151, 156, 164, 166, 169, 177, 179, 181, 183, 199, 202, 216, 217, 218, 235, 316, 317, 364, 378, 380, 390, 392, 403, 406, 415, 428, 432, 461, 478, 479, 480, 481, 520, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 561, 562, 563, 564, 565, 566, 601, 602, 605, 607, 628, 629, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 674, 675, 697, 825, 826, 829, 830, 831, 840, 848, 853, 854, 855, 858, 864, 872, 877, 878, 898, 900, 903, 905, 906, 907, 908, 911, 926, 928, 974, 975, 981, 985, 986, 988, 993, 999, 1005, 1007, 1015, 1022, 1027, 1028, 1032, 1033, 1034, 1036, 1037, 1040, 1041, 1042, 1044], "mlpregressor": [4, 170, 239, 366, 853, 854, 989, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "hidden": [4, 170, 301, 302, 378, 386, 402, 410, 853, 854, 855, 989, 990, 1005, 1027, 1038], "layer": [4, 166, 215, 239, 298, 301, 302, 303, 364, 386, 412, 510, 511, 518, 563, 823, 853, 854, 855, 858, 877, 990, 1007, 1022, 1033], "cyclic": [4, 642, 643, 648, 649, 656, 657, 658, 659, 1039], "within": [4, 20, 60, 116, 118, 119, 130, 145, 147, 148, 195, 200, 201, 211, 217, 239, 258, 259, 263, 273, 305, 306, 317, 334, 337, 340, 344, 351, 360, 364, 373, 378, 382, 387, 390, 392, 393, 402, 403, 404, 405, 406, 409, 411, 412, 416, 440, 444, 457, 459, 460, 462, 465, 470, 511, 545, 563, 564, 565, 566, 589, 590, 628, 688, 692, 695, 706, 720, 776, 792, 793, 799, 800, 812, 813, 821, 822, 837, 838, 839, 840, 845, 847, 848, 849, 856, 857, 858, 870, 878, 882, 883, 885, 886, 887, 888, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 979, 981, 982, 988, 991, 995, 998, 1000, 1001, 1006, 1009, 1011, 1015, 1018, 1020, 1029, 1030, 1034, 1035, 1040, 1041, 1043], "finer": [4, 37, 285, 336, 365, 405, 409, 974, 988, 1037], "resolut": [4, 11, 17, 105, 170, 295, 296, 336, 393, 403, 1011, 1037], "taken": [4, 7, 31, 42, 53, 55, 126, 148, 156, 169, 232, 233, 248, 266, 278, 307, 373, 375, 377, 378, 382, 392, 399, 404, 405, 409, 413, 417, 436, 529, 579, 580, 642, 643, 646, 648, 649, 650, 654, 655, 656, 657, 658, 659, 673, 675, 677, 680, 691, 870, 871, 891, 894, 900, 901, 944, 985, 987, 995, 997, 1033, 1036, 1039, 1040], "everi": [4, 95, 163, 197, 200, 221, 234, 246, 251, 269, 318, 360, 373, 376, 378, 380, 382, 386, 392, 405, 407, 409, 410, 413, 436, 450, 504, 527, 532, 535, 541, 553, 555, 556, 560, 586, 587, 599, 642, 643, 645, 648, 649, 655, 656, 657, 658, 659, 660, 661, 662, 664, 668, 669, 670, 671, 672, 681, 682, 683, 688, 692, 749, 766, 774, 775, 807, 846, 905, 907, 909, 911, 923, 978, 980, 985, 986, 987, 995, 1001, 1009, 1015, 1027, 1031, 1033, 1036, 1040], "offer": [4, 117, 380, 386, 390, 391, 395, 409, 410, 412, 413, 974, 975, 986, 989, 1001, 1005, 1006, 1009, 1033], "view": [4, 16, 42, 46, 78, 97, 170, 196, 240, 364, 366, 378, 405, 413, 532, 641, 653, 837, 838, 912, 981, 982], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 55, 57, 61, 78, 79, 80, 81, 82, 91, 96, 97, 98, 105, 112, 113, 124, 127, 161, 164, 178, 183, 189, 228, 232, 247, 248, 252, 288, 296, 309, 333, 340, 367, 370, 374, 380, 383, 392, 405, 407, 410, 411, 417, 448, 465, 466, 467, 468, 469, 470, 471, 472, 492, 500, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 526, 528, 540, 545, 546, 559, 606, 607, 609, 610, 611, 613, 614, 615, 618, 619, 621, 623, 639, 640, 668, 673, 676, 699, 719, 736, 747, 771, 792, 793, 794, 808, 832, 833, 834, 835, 836, 837, 838, 842, 873, 877, 885, 889, 890, 891, 979, 981, 982, 983, 991, 1007, 1009, 1019, 1021, 1022, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1039, 1041], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 57, 58, 60, 61, 62, 64, 65, 66, 71, 75, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 101, 102, 103, 110, 112, 114, 116, 118, 119, 120, 123, 124, 126, 127, 128, 131, 134, 135, 140, 143, 144, 147, 151, 152, 155, 157, 158, 160, 163, 164, 166, 167, 168, 173, 178, 179, 180, 181, 183, 188, 189, 193, 194, 197, 198, 199, 200, 201, 202, 205, 206, 208, 212, 213, 216, 217, 220, 221, 223, 224, 225, 227, 228, 233, 234, 235, 237, 238, 243, 245, 246, 248, 249, 250, 251, 253, 255, 257, 260, 261, 263, 265, 267, 269, 270, 271, 272, 274, 276, 281, 283, 288, 289, 290, 295, 299, 306, 308, 309, 312, 316, 317, 319, 321, 324, 325, 328, 329, 335, 336, 338, 339, 341, 342, 343, 346, 349, 350, 356, 357, 364, 365, 367, 370, 374, 381, 383, 390, 391, 392, 396, 400, 401, 403, 405, 413, 414, 430, 436, 439, 443, 445, 447, 448, 449, 450, 454, 455, 456, 458, 460, 465, 466, 467, 468, 469, 470, 471, 472, 484, 485, 486, 487, 488, 491, 492, 493, 498, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 534, 535, 536, 537, 540, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 569, 578, 579, 580, 585, 603, 604, 606, 607, 623, 626, 628, 630, 635, 636, 637, 638, 639, 642, 643, 645, 646, 648, 649, 650, 654, 656, 657, 658, 659, 666, 667, 668, 672, 673, 674, 675, 685, 686, 687, 688, 689, 690, 691, 697, 700, 701, 704, 726, 738, 776, 788, 792, 793, 794, 796, 797, 798, 799, 806, 808, 809, 810, 811, 812, 813, 814, 815, 822, 823, 828, 830, 831, 832, 833, 834, 836, 837, 838, 842, 846, 853, 854, 855, 857, 860, 862, 871, 874, 878, 886, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 920, 933, 934, 956, 959, 975, 977, 980, 982, 984, 985, 989, 990, 991, 993, 995, 1000, 1001, 1005, 1006, 1007, 1011, 1015, 1016, 1018, 1019, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "constant": [4, 105, 114, 154, 158, 164, 169, 187, 200, 201, 203, 217, 230, 235, 240, 263, 295, 300, 302, 306, 308, 316, 344, 346, 360, 370, 380, 387, 392, 402, 412, 415, 428, 442, 461, 478, 479, 480, 507, 509, 530, 534, 536, 543, 545, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 586, 602, 605, 607, 609, 623, 626, 628, 629, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 672, 673, 674, 675, 676, 683, 685, 689, 691, 717, 718, 719, 723, 770, 772, 780, 830, 831, 840, 848, 854, 855, 862, 873, 876, 885, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 979, 981, 982, 985, 987, 988, 995, 999, 1001, 1022, 1030, 1035, 1037, 1039, 1040, 1041, 1043], "varianc": [4, 5, 27, 44, 55, 57, 62, 73, 78, 80, 85, 86, 90, 95, 96, 97, 100, 103, 104, 106, 110, 126, 135, 158, 160, 166, 169, 177, 179, 183, 188, 199, 201, 204, 217, 218, 250, 257, 260, 263, 269, 270, 273, 292, 299, 305, 310, 350, 360, 370, 374, 387, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 417, 437, 441, 445, 459, 517, 520, 528, 529, 530, 537, 540, 545, 546, 551, 552, 554, 555, 556, 561, 599, 603, 604, 607, 621, 639, 640, 641, 648, 652, 653, 656, 658, 668, 669, 670, 671, 672, 683, 706, 723, 780, 792, 793, 835, 846, 861, 867, 873, 875, 877, 883, 885, 887, 888, 906, 908, 960, 961, 962, 966, 979, 980, 981, 983, 988, 989, 990, 997, 999, 1000, 1001, 1002, 1007, 1016, 1018, 1019, 1022, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "poisson": [4, 166, 177, 218, 236, 374, 412, 460, 461, 492, 519, 548, 554, 558, 561, 644, 665, 668, 676, 702, 719, 740, 744, 745, 747, 823, 857, 858, 861, 862, 870, 871, 872, 877, 906, 908, 938, 981, 1001, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 132, 140, 175, 213, 228, 233, 234, 258, 260, 262, 265, 271, 275, 317, 324, 325, 327, 329, 333, 335, 336, 339, 340, 342, 343, 346, 408, 410, 415, 448, 531, 558, 615, 616, 635, 636, 637, 639, 640, 641, 644, 676, 681, 687, 719, 742, 747, 754, 761, 770, 771, 772, 792, 805, 808, 892, 893, 894, 899, 900, 901, 902, 903, 974, 977, 980, 981, 983, 998, 1000, 1011, 1015, 1016, 1018, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1041, 1042, 1043], "achiev": [4, 12, 17, 19, 27, 31, 98, 111, 120, 122, 129, 159, 175, 199, 207, 257, 260, 267, 310, 327, 336, 339, 340, 344, 349, 360, 364, 366, 372, 373, 375, 380, 384, 390, 392, 402, 403, 405, 409, 410, 412, 413, 549, 554, 561, 636, 645, 672, 674, 703, 735, 758, 797, 798, 833, 877, 974, 975, 977, 981, 985, 995, 998, 1000, 1008, 1020, 1040], "gridsearchcv": [4, 54, 69, 71, 73, 74, 76, 78, 103, 117, 166, 234, 240, 250, 253, 258, 259, 260, 261, 265, 268, 271, 276, 278, 285, 287, 302, 307, 317, 321, 336, 340, 360, 365, 380, 390, 392, 396, 406, 409, 415, 498, 516, 536, 537, 571, 595, 603, 649, 699, 737, 805, 808, 857, 867, 897, 905, 953, 974, 981, 985, 989, 999, 1000, 1005, 1006, 1015, 1016, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044], "tweedieregressor": [4, 316, 319, 644, 665, 981, 1038, 1041, 1042], "power": [4, 7, 17, 117, 122, 168, 200, 217, 251, 263, 268, 287, 305, 306, 309, 324, 333, 364, 365, 391, 403, 405, 408, 411, 412, 413, 416, 440, 478, 479, 480, 528, 531, 537, 540, 626, 676, 690, 719, 742, 744, 747, 839, 840, 847, 848, 850, 851, 872, 873, 874, 885, 886, 933, 934, 981, 982, 985, 993, 995, 999, 1000, 1009, 1030, 1033, 1035, 1037, 1038, 1040, 1044], "param_grid": [4, 6, 71, 72, 73, 74, 117, 124, 234, 240, 250, 258, 259, 260, 264, 265, 268, 271, 278, 285, 307, 336, 392, 396, 406, 412, 737, 794, 797, 805, 806, 953, 974, 985, 1015, 1016], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 355, 356, 357, 358, 359, 365, 372, 373, 375, 384, 392, 402, 405, 411, 413, 416, 428, 440, 461, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 498, 500, 501, 506, 508, 510, 511, 515, 518, 519, 532, 533, 540, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 566, 579, 580, 586, 590, 592, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 672, 673, 674, 675, 693, 700, 701, 709, 724, 725, 726, 729, 733, 734, 752, 764, 778, 779, 782, 789, 790, 791, 794, 808, 818, 819, 820, 830, 831, 832, 833, 840, 842, 848, 855, 872, 876, 898, 900, 903, 905, 906, 907, 908, 934, 974, 981, 982, 985, 986, 987, 988, 995, 999, 1000, 1001, 1016, 1020, 1028, 1033, 1035, 1043], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 365, 378, 379, 380, 381, 382, 384, 390, 392, 395, 413, 1006, 1008, 1020], "599": [4, 15, 676], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 360, 364, 373, 380, 382, 384, 392, 402, 405, 409, 410, 412, 413, 415, 460, 463, 484, 486, 487, 488, 490, 492, 496, 498, 500, 506, 549, 579, 584, 585, 586, 587, 617, 620, 627, 628, 695, 708, 712, 753, 754, 758, 759, 761, 762, 769, 770, 771, 772, 773, 776, 794, 797, 798, 808, 821, 827, 828, 831, 834, 845, 847, 848, 849, 854, 855, 974, 975, 979, 980, 981, 982, 985, 986, 987, 988, 989, 992, 995, 996, 1001, 1011, 1017, 1019, 1042], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 365, 376, 378, 379, 382, 384, 386, 392, 395, 413, 416, 436, 440, 450, 457, 494, 526, 640, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 872, 876, 929, 985, 1005, 1018, 1020, 1027, 1029, 1033, 1037, 1041], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 379, 380, 406, 464, 895, 1001, 1005, 1006, 1038, 1041], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 373, 378, 380, 392, 395, 398, 1016, 1027, 1031, 1034], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 356, 357, 358, 378, 382, 392, 395, 398, 1020, 1027, 1034], "kernelpca": [5, 406, 410, 529, 530, 537, 540, 684, 686, 688, 863, 995, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "take": [5, 8, 20, 30, 46, 53, 55, 57, 66, 75, 80, 92, 95, 111, 120, 151, 153, 156, 160, 169, 175, 182, 203, 207, 208, 224, 235, 247, 248, 255, 261, 265, 269, 270, 281, 283, 286, 289, 290, 291, 293, 294, 305, 319, 327, 332, 333, 336, 346, 350, 351, 355, 364, 365, 366, 372, 373, 378, 380, 383, 384, 385, 386, 390, 392, 393, 403, 405, 406, 408, 409, 410, 412, 413, 414, 415, 417, 433, 439, 442, 443, 445, 446, 448, 453, 454, 455, 457, 459, 465, 515, 529, 534, 535, 536, 542, 543, 577, 588, 591, 592, 594, 595, 596, 606, 607, 612, 616, 617, 620, 628, 639, 645, 667, 669, 670, 671, 672, 675, 687, 688, 695, 701, 703, 705, 715, 724, 725, 733, 737, 738, 751, 766, 769, 773, 774, 775, 776, 778, 779, 782, 783, 794, 795, 799, 800, 808, 812, 821, 839, 840, 841, 843, 845, 846, 847, 848, 849, 861, 871, 892, 893, 897, 898, 899, 900, 901, 902, 903, 921, 955, 974, 977, 981, 982, 984, 985, 986, 988, 990, 991, 992, 995, 1000, 1001, 1009, 1011, 1015, 1017, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "exact": [5, 7, 82, 100, 117, 156, 203, 233, 283, 360, 364, 365, 372, 378, 380, 387, 390, 391, 392, 405, 412, 414, 430, 478, 479, 480, 484, 492, 530, 531, 537, 557, 558, 634, 638, 642, 688, 794, 808, 818, 819, 820, 899, 902, 974, 977, 981, 982, 991, 995, 999, 1000, 1034, 1035, 1037], "usp": 5, "digit": [5, 29, 35, 36, 51, 68, 72, 88, 93, 136, 141, 146, 148, 166, 190, 206, 215, 219, 224, 226, 232, 233, 258, 259, 262, 287, 292, 298, 300, 301, 303, 321, 323, 330, 371, 378, 384, 405, 411, 412, 414, 437, 441, 443, 498, 537, 540, 545, 562, 654, 684, 685, 686, 687, 688, 693, 700, 701, 709, 713, 714, 732, 788, 790, 819, 823, 839, 846, 853, 857, 858, 867, 877, 883, 890, 893, 902, 909, 910, 911, 974, 980, 982, 985, 988, 990, 998, 1011, 1015, 1018, 1019, 1022, 1031], "reproduc": [5, 12, 60, 111, 169, 175, 187, 269, 278, 302, 365, 367, 377, 378, 380, 381, 386, 390, 392, 399, 405, 409, 410, 413, 417, 436, 450, 456, 465, 470, 484, 487, 488, 491, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 555, 556, 557, 558, 559, 603, 604, 606, 607, 630, 635, 636, 637, 638, 642, 643, 646, 648, 649, 650, 656, 657, 658, 659, 662, 663, 664, 667, 672, 674, 675, 685, 686, 688, 689, 690, 788, 792, 793, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 821, 822, 823, 827, 828, 831, 842, 846, 853, 854, 855, 862, 874, 878, 886, 889, 890, 897, 898, 899, 902, 933, 934, 956, 959, 977, 1005, 1008, 1027, 1035, 1040, 1041], "sect": 5, "bak\u0131r": [5, 410, 531], "g\u00f6khan": [5, 410, 531], "h": [5, 6, 48, 58, 95, 96, 111, 112, 129, 148, 153, 169, 247, 288, 291, 299, 307, 319, 329, 332, 351, 375, 384, 403, 405, 407, 410, 411, 412, 413, 416, 440, 515, 528, 531, 534, 536, 543, 549, 563, 564, 578, 586, 603, 604, 685, 689, 700, 704, 752, 832, 836, 837, 838, 843, 853, 868, 877, 977, 979, 981, 982, 983, 985, 987, 989, 990, 999, 1001, 1016, 1033, 1038, 1042, 1043, 1044], "jason": [5, 410, 531, 893, 1033, 1035, 1039, 1042], "weston": [5, 410, 531, 589, 590, 893], "bernhard": [5, 410, 531, 828, 863, 893, 986, 991, 1000, 1033], "sch\u00f6lkopf": [5, 410, 531, 863, 991, 995, 1000], "pre": [5, 71, 121, 169, 188, 305, 351, 367, 376, 378, 392, 395, 407, 409, 410, 412, 413, 414, 416, 417, 439, 440, 443, 455, 529, 531, 686, 708, 758, 860, 902, 985, 990, 995, 1000, 1001, 1005, 1006, 1022, 1030, 1035, 1041], "advanc": [5, 166, 227, 229, 243, 260, 366, 405, 410, 485, 497, 531, 628, 635, 778, 792, 846, 855, 858, 877, 906, 977, 985, 988, 995, 1009, 1024, 1029], "neural": [5, 6, 31, 260, 301, 367, 390, 392, 399, 409, 410, 412, 417, 529, 531, 534, 536, 543, 563, 564, 635, 641, 692, 736, 792, 846, 853, 854, 855, 863, 977, 981, 982, 983, 985, 988, 991, 995, 999, 1001, 1005, 1007, 1009, 1016, 1021, 1022, 1027, 1039], "system": [5, 100, 183, 260, 267, 360, 364, 365, 366, 373, 375, 378, 379, 380, 381, 386, 390, 395, 405, 410, 412, 416, 440, 467, 468, 474, 531, 535, 539, 546, 635, 641, 646, 647, 650, 651, 652, 678, 679, 721, 751, 764, 792, 846, 892, 893, 953, 981, 985, 988, 997, 1005, 1006, 1009, 1020, 1027, 1035, 1036], "2004": [5, 148, 260, 278, 373, 375, 405, 407, 410, 469, 531, 603, 604, 685, 689, 701, 738, 778, 893, 979, 981, 982, 987, 1000, 1018], "449": [5, 190, 218, 410, 531], "456": [5, 410, 531], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 56, 57, 61, 65, 66, 67, 70, 71, 72, 74, 75, 82, 95, 97, 99, 100, 101, 103, 106, 109, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 130, 131, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 178, 179, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 199, 200, 201, 203, 204, 206, 207, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 248, 259, 261, 263, 264, 266, 273, 281, 283, 285, 288, 295, 296, 299, 302, 305, 306, 308, 309, 310, 324, 325, 326, 327, 329, 344, 349, 350, 351, 372, 378, 382, 386, 390, 392, 393, 409, 447, 530, 864, 977, 1003, 1005, 1030], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 57, 75, 82, 117, 157, 178, 183, 184, 186, 190, 192, 193, 204, 221, 222, 228, 231, 238, 261, 263, 266, 273, 295, 310, 344, 349, 350, 351, 527, 533, 654, 660, 681, 682, 753, 754, 983, 985], "licenc": [5, 372], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 130, 131, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 261, 264, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 324, 325, 326, 327, 329, 340, 341, 344, 345, 349, 350, 351, 384], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 130, 131, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 228, 233, 234, 236, 238, 245, 247, 261, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 305, 306, 307, 308, 309, 310, 340, 341, 344, 345, 349, 350, 351], "normal": [5, 12, 17, 19, 20, 26, 29, 35, 37, 40, 44, 46, 57, 61, 62, 66, 73, 75, 78, 79, 80, 85, 86, 96, 101, 111, 112, 114, 117, 123, 124, 127, 128, 143, 154, 157, 158, 164, 166, 168, 169, 177, 178, 179, 180, 181, 183, 189, 192, 194, 197, 201, 202, 203, 205, 213, 218, 223, 238, 245, 250, 251, 254, 257, 260, 266, 288, 289, 304, 306, 310, 313, 316, 319, 327, 336, 350, 351, 360, 367, 370, 373, 374, 375, 378, 383, 387, 391, 392, 402, 403, 405, 406, 408, 411, 412, 413, 417, 436, 445, 447, 448, 449, 458, 460, 461, 471, 478, 479, 480, 485, 492, 508, 511, 515, 522, 523, 529, 532, 537, 538, 540, 544, 545, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 575, 576, 578, 584, 585, 586, 587, 607, 621, 623, 635, 646, 647, 650, 651, 652, 654, 655, 660, 661, 665, 668, 672, 676, 683, 687, 691, 693, 699, 700, 702, 714, 719, 721, 729, 731, 736, 740, 744, 745, 747, 750, 751, 752, 756, 765, 789, 790, 791, 797, 798, 823, 825, 834, 836, 842, 843, 846, 857, 858, 861, 862, 865, 867, 870, 871, 872, 873, 874, 875, 877, 882, 883, 885, 886, 887, 888, 892, 893, 905, 906, 907, 908, 933, 934, 938, 961, 962, 967, 968, 974, 979, 981, 982, 983, 984, 987, 991, 996, 998, 1000, 1001, 1016, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "pixel": [5, 6, 13, 20, 32, 47, 48, 53, 95, 110, 135, 146, 166, 175, 232, 258, 301, 302, 375, 405, 410, 412, 413, 414, 489, 490, 491, 560, 581, 582, 603, 604, 630, 988, 990, 1001, 1016, 1019], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 71, 75, 86, 100, 111, 116, 118, 122, 123, 124, 125, 126, 127, 130, 144, 145, 168, 169, 171, 172, 175, 183, 194, 199, 206, 207, 214, 215, 217, 229, 238, 241, 242, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 328, 354, 358, 360, 383, 391, 401, 406, 409, 412, 433, 434, 554, 556, 563, 564, 693, 694, 696, 698, 794, 825, 828, 846, 854, 855, 857, 907, 908, 974, 975, 985, 987, 988, 993, 995, 1000, 1016, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1040, 1044], "data_id": [5, 121, 156, 169, 199, 217, 229, 278, 311, 372, 492], "41082": 5, "return_x_i": [5, 7, 14, 58, 70, 71, 72, 73, 95, 117, 121, 122, 134, 137, 138, 139, 144, 163, 164, 171, 172, 175, 184, 186, 187, 188, 190, 195, 196, 206, 214, 215, 229, 237, 238, 241, 242, 256, 259, 262, 267, 268, 275, 278, 281, 285, 292, 300, 301, 302, 310, 315, 317, 319, 320, 321, 327, 339, 351, 354, 371, 383, 384, 391, 399, 405, 406, 409, 412, 414, 442, 484, 485, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 500, 501, 506, 528, 529, 530, 531, 554, 557, 558, 563, 564, 588, 591, 592, 594, 595, 596, 598, 606, 615, 616, 618, 619, 634, 635, 654, 655, 664, 669, 670, 671, 684, 685, 686, 687, 697, 783, 797, 798, 800, 825, 830, 841, 846, 849, 906, 907, 908, 975, 980, 985, 986, 987, 988, 995, 1011, 1015, 1016, 1018, 1019, 1024, 1033, 1035, 1037, 1040], "idea": [5, 53, 80, 81, 117, 148, 156, 169, 200, 220, 288, 336, 354, 364, 365, 378, 383, 384, 407, 408, 409, 410, 411, 412, 414, 603, 604, 981, 982, 985, 988, 991, 1004, 1009, 1020], "noisi": [5, 33, 49, 55, 62, 96, 111, 144, 151, 157, 183, 198, 201, 223, 231, 251, 261, 267, 269, 270, 310, 356, 357, 360, 405, 413, 415, 416, 440, 442, 446, 517, 520, 934, 980, 982, 988, 1000, 1005], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 37, 42, 50, 53, 57, 61, 66, 71, 72, 75, 79, 80, 95, 97, 98, 105, 112, 117, 127, 130, 133, 152, 156, 159, 160, 169, 170, 172, 175, 178, 179, 181, 183, 185, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 208, 209, 210, 212, 214, 215, 217, 218, 222, 223, 225, 231, 232, 233, 234, 235, 239, 245, 247, 251, 255, 256, 258, 260, 263, 265, 270, 271, 274, 288, 289, 290, 302, 306, 307, 309, 311, 312, 318, 320, 322, 328, 329, 334, 335, 337, 338, 339, 343, 344, 346, 349, 350, 354, 357, 358, 364, 366, 373, 375, 378, 380, 383, 384, 396, 402, 405, 406, 409, 410, 411, 412, 413, 433, 437, 441, 445, 467, 468, 474, 486, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 524, 526, 530, 532, 535, 540, 541, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 606, 627, 628, 629, 635, 636, 637, 638, 642, 643, 644, 645, 648, 649, 654, 655, 656, 657, 658, 659, 661, 663, 665, 667, 676, 677, 680, 684, 685, 686, 687, 689, 741, 792, 793, 796, 821, 822, 827, 832, 833, 834, 836, 837, 838, 842, 854, 855, 873, 875, 878, 887, 974, 975, 978, 982, 985, 986, 992, 995, 997, 1011, 1015, 1019, 1020, 1035, 1036, 1037, 1040, 1041], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 55, 61, 62, 67, 75, 86, 95, 96, 98, 100, 103, 112, 114, 124, 128, 129, 150, 151, 156, 161, 166, 178, 180, 181, 183, 188, 189, 194, 197, 198, 201, 202, 203, 204, 216, 223, 225, 228, 230, 231, 234, 260, 268, 273, 274, 295, 299, 300, 307, 312, 316, 343, 356, 357, 360, 374, 380, 383, 403, 405, 410, 412, 414, 415, 416, 440, 442, 448, 507, 509, 510, 511, 512, 513, 514, 518, 520, 521, 526, 528, 530, 537, 603, 604, 607, 609, 610, 611, 612, 613, 617, 618, 620, 621, 640, 641, 645, 646, 647, 649, 650, 651, 652, 659, 660, 661, 667, 675, 688, 874, 886, 892, 978, 980, 981, 982, 985, 988, 998, 1018, 1019, 1028, 1033, 1038, 1040, 1041], "approach": [5, 8, 58, 63, 66, 99, 148, 151, 163, 169, 172, 181, 187, 199, 201, 207, 217, 220, 278, 311, 340, 349, 350, 351, 366, 377, 378, 384, 387, 392, 395, 399, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 433, 439, 442, 444, 448, 458, 516, 528, 578, 585, 607, 631, 654, 655, 670, 671, 826, 842, 934, 974, 975, 981, 982, 985, 986, 988, 989, 995, 999, 1000, 1004, 1005, 1009, 1013, 1018, 1019, 1031, 1043], "copi": [5, 12, 17, 44, 62, 75, 98, 114, 148, 163, 164, 169, 170, 171, 185, 192, 205, 215, 217, 221, 283, 324, 325, 327, 329, 350, 355, 365, 375, 378, 380, 382, 383, 384, 390, 392, 430, 433, 436, 438, 439, 440, 442, 443, 445, 450, 455, 478, 479, 480, 481, 496, 498, 506, 528, 529, 530, 531, 537, 544, 549, 550, 555, 557, 558, 568, 586, 593, 603, 604, 606, 607, 624, 626, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 667, 668, 670, 675, 677, 680, 681, 682, 727, 764, 787, 794, 808, 837, 838, 852, 860, 863, 866, 867, 868, 869, 873, 874, 875, 877, 880, 882, 883, 884, 885, 886, 887, 888, 892, 893, 897, 899, 900, 901, 902, 903, 912, 915, 917, 918, 944, 956, 958, 959, 995, 1000, 1001, 1006, 1012, 1015, 1020, 1027, 1030, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "add": [5, 12, 16, 17, 20, 25, 26, 27, 32, 33, 40, 44, 54, 75, 80, 81, 86, 96, 120, 123, 144, 148, 151, 156, 157, 158, 163, 164, 181, 188, 194, 200, 202, 203, 214, 223, 228, 232, 234, 235, 267, 269, 270, 283, 295, 307, 309, 315, 317, 318, 339, 340, 343, 344, 350, 364, 376, 377, 378, 379, 380, 382, 384, 386, 392, 395, 401, 403, 409, 412, 413, 414, 511, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 598, 623, 624, 626, 628, 654, 655, 690, 693, 815, 837, 838, 894, 924, 942, 943, 953, 974, 975, 984, 991, 995, 998, 999, 1006, 1018, 1019, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "corrupt": [5, 103, 183, 205, 216, 390, 853, 981, 993], "uncorrupt": 5, "base": [5, 12, 14, 17, 20, 25, 26, 27, 34, 49, 56, 57, 58, 67, 70, 71, 75, 80, 90, 95, 96, 109, 111, 112, 117, 123, 124, 125, 129, 131, 134, 142, 145, 149, 151, 156, 157, 159, 170, 171, 172, 177, 188, 199, 200, 207, 216, 217, 218, 220, 228, 235, 236, 238, 257, 258, 263, 278, 283, 296, 302, 305, 306, 308, 310, 317, 319, 329, 334, 340, 350, 354, 364, 365, 367, 372, 373, 374, 375, 376, 379, 380, 381, 386, 392, 393, 394, 403, 406, 410, 411, 413, 415, 416, 417, 433, 440, 442, 443, 444, 445, 446, 448, 452, 453, 457, 459, 460, 461, 462, 463, 483, 496, 497, 504, 505, 528, 529, 531, 532, 533, 534, 535, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 574, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 603, 604, 606, 607, 612, 613, 614, 617, 620, 628, 629, 631, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 660, 665, 667, 668, 669, 670, 671, 676, 678, 679, 681, 682, 683, 686, 688, 700, 713, 721, 730, 731, 732, 734, 736, 750, 751, 752, 780, 783, 790, 794, 796, 797, 798, 800, 801, 803, 808, 812, 813, 814, 815, 821, 823, 827, 828, 831, 839, 840, 841, 843, 845, 847, 848, 849, 854, 855, 858, 859, 862, 869, 870, 872, 876, 877, 878, 886, 889, 890, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 920, 928, 953, 954, 974, 976, 977, 979, 980, 982, 985, 986, 987, 988, 989, 990, 991, 992, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1015, 1020, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "solv": [5, 6, 66, 151, 188, 233, 260, 377, 378, 379, 380, 383, 390, 405, 407, 409, 410, 415, 443, 449, 458, 474, 527, 533, 534, 535, 539, 541, 542, 543, 544, 631, 633, 642, 648, 650, 651, 660, 661, 666, 668, 670, 673, 681, 682, 683, 827, 897, 898, 901, 934, 976, 979, 981, 982, 985, 986, 999, 1000, 1001, 1004, 1005, 1009, 1013, 1016, 1020, 1033, 1037, 1040], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 114, 118, 122, 123, 124, 125, 126, 127, 130, 139, 140, 144, 145, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 179, 183, 194, 196, 197, 200, 206, 207, 213, 214, 215, 217, 229, 237, 241, 242, 247, 249, 254, 257, 258, 263, 267, 269, 273, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 327, 328, 335, 349, 354, 358, 360, 364, 372, 380, 383, 391, 406, 409, 412, 433, 434, 505, 554, 555, 556, 563, 564, 693, 694, 696, 698, 823, 825, 828, 846, 854, 855, 857, 871, 907, 908, 975, 985, 987, 988, 989, 991, 993, 995, 999, 1000, 1015, 1016, 1024], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 78, 85, 86, 100, 111, 114, 116, 118, 122, 123, 124, 125, 126, 127, 130, 139, 140, 144, 145, 156, 159, 168, 169, 170, 171, 172, 175, 179, 183, 189, 194, 196, 197, 205, 206, 207, 213, 214, 215, 217, 229, 231, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 274, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 327, 328, 335, 349, 354, 356, 357, 358, 360, 364, 372, 380, 383, 391, 406, 409, 412, 434, 466, 467, 468, 469, 470, 471, 472, 505, 554, 555, 556, 563, 564, 693, 694, 696, 698, 823, 825, 828, 846, 854, 855, 857, 871, 907, 908, 975, 985, 987, 988, 989, 991, 995, 999, 1000, 1001, 1015, 1016, 1018, 1024, 1027], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 114, 118, 122, 123, 124, 125, 126, 127, 130, 139, 140, 144, 145, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 179, 183, 194, 196, 197, 200, 206, 207, 214, 215, 229, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 324, 325, 327, 328, 329, 349, 354, 358, 360, 364, 372, 380, 383, 391, 406, 409, 412, 433, 434, 554, 555, 556, 563, 564, 693, 694, 696, 698, 823, 825, 828, 846, 854, 855, 857, 907, 908, 975, 985, 987, 988, 993, 995, 1000, 1015, 1016, 1024], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 70, 71, 75, 85, 86, 100, 111, 114, 116, 118, 122, 123, 124, 125, 126, 127, 130, 139, 140, 144, 145, 159, 168, 169, 170, 171, 172, 175, 183, 194, 196, 199, 205, 206, 207, 214, 215, 217, 229, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 327, 328, 349, 354, 358, 360, 372, 383, 391, 406, 409, 412, 434, 554, 555, 556, 563, 564, 693, 694, 696, 698, 823, 825, 828, 846, 854, 855, 857, 907, 908, 985, 987, 988, 995, 1000, 1015, 1016, 1024, 1027], "stratifi": [5, 100, 118, 127, 144, 171, 214, 229, 238, 242, 255, 260, 263, 269, 286, 291, 292, 315, 380, 392, 547, 555, 563, 564, 598, 655, 662, 664, 672, 794, 797, 798, 800, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 831, 846, 854, 956, 985, 988, 1015, 1032, 1033, 1034, 1036, 1037, 1040], "train_siz": [5, 7, 10, 111, 130, 152, 175, 215, 234, 238, 262, 273, 317, 320, 344, 796, 800, 811, 814, 821, 823, 980, 1015, 1027, 1028, 1033, 1034], "1_000": [5, 34, 48, 72, 100, 151, 156, 158, 170, 232, 257, 344, 697, 816], "rng": [5, 20, 21, 31, 34, 37, 44, 50, 62, 81, 86, 95, 97, 103, 112, 124, 127, 128, 130, 151, 152, 155, 157, 158, 160, 163, 164, 168, 171, 178, 179, 180, 181, 183, 188, 193, 200, 201, 206, 213, 228, 234, 235, 237, 245, 255, 263, 266, 271, 272, 299, 309, 312, 316, 317, 319, 321, 324, 325, 329, 339, 356, 357, 360, 365, 380, 383, 396, 466, 470, 471, 472, 639, 645, 666, 668, 674, 806, 832, 833, 834, 836, 837, 838, 842, 845, 847, 848, 849, 874, 886, 889, 890, 892, 893, 894, 903, 1011], "randomst": [5, 13, 20, 21, 24, 31, 34, 37, 44, 50, 61, 62, 81, 82, 86, 95, 97, 103, 112, 123, 124, 127, 128, 130, 144, 151, 152, 155, 157, 158, 160, 163, 164, 168, 171, 178, 179, 180, 181, 183, 188, 193, 200, 201, 206, 213, 223, 228, 234, 235, 245, 248, 255, 263, 266, 267, 269, 270, 271, 272, 299, 306, 308, 309, 312, 316, 317, 319, 321, 324, 325, 329, 339, 356, 357, 380, 383, 387, 392, 396, 410, 417, 436, 439, 443, 445, 447, 448, 449, 450, 454, 455, 456, 458, 465, 466, 470, 471, 472, 484, 487, 488, 491, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 579, 580, 603, 604, 606, 607, 623, 628, 630, 635, 636, 637, 638, 639, 642, 643, 645, 646, 648, 649, 650, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 670, 672, 673, 674, 675, 683, 685, 686, 687, 688, 689, 690, 691, 697, 776, 788, 792, 793, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 821, 822, 823, 827, 828, 831, 832, 833, 834, 836, 837, 838, 842, 846, 853, 854, 855, 862, 874, 878, 886, 889, 890, 892, 893, 894, 897, 898, 899, 902, 903, 905, 906, 907, 908, 920, 933, 934, 954, 956, 959, 995, 1011, 1022], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 217, 271, 371, 380, 381, 391, 392, 409, 464, 571, 895, 1015, 1016, 1027, 1034, 1035, 1036, 1040], "qualit": [5, 6, 53, 55, 61, 117, 124, 199, 320, 373, 405, 435, 697, 1016, 1042], "assess": [5, 37, 60, 111, 122, 124, 169, 199, 217, 238, 256, 257, 259, 263, 403, 412, 697, 738, 984, 985, 991, 1006, 1042], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 55, 70, 78, 82, 86, 91, 100, 112, 114, 121, 123, 124, 156, 158, 169, 170, 179, 185, 189, 190, 200, 203, 205, 214, 216, 217, 247, 260, 267, 272, 285, 296, 300, 302, 305, 307, 309, 317, 324, 329, 336, 341, 344, 349, 350, 366, 371, 373, 375, 378, 381, 387, 392, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 418, 437, 439, 441, 442, 443, 445, 454, 455, 459, 471, 492, 494, 534, 536, 543, 551, 552, 553, 557, 558, 560, 578, 585, 586, 598, 603, 604, 646, 650, 651, 652, 654, 655, 675, 678, 679, 741, 797, 798, 812, 822, 825, 854, 855, 862, 890, 899, 902, 934, 974, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 995, 997, 998, 1001, 1006, 1009, 1018, 1019, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "img": [5, 50, 66, 502, 582], "ravel": [5, 13, 16, 17, 19, 26, 42, 53, 54, 58, 80, 105, 112, 114, 120, 124, 129, 130, 131, 140, 151, 153, 155, 156, 157, 158, 169, 178, 189, 190, 192, 199, 212, 213, 221, 225, 228, 232, 234, 238, 242, 247, 249, 263, 267, 269, 283, 288, 289, 295, 296, 299, 300, 301, 302, 307, 308, 319, 329, 336, 341, 342, 343, 345, 346, 349, 356, 357, 461, 489, 490, 491, 627, 714, 972, 985, 1043], "imshow": [5, 6, 13, 32, 40, 46, 47, 48, 50, 51, 53, 54, 58, 82, 89, 95, 98, 106, 153, 154, 155, 159, 172, 190, 215, 221, 237, 271, 287, 302, 324, 325, 336, 342, 345, 372, 628, 693, 1016, 1017, 1041], "grei": [5, 270, 305, 344, 373], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 78, 82, 85, 95, 117, 203, 221, 233, 237, 254, 259, 261, 262, 305, 325, 329, 336, 346, 349, 373, 378, 380, 405, 407, 414, 438, 549, 550, 555, 556, 584, 587, 630, 652, 688, 711, 792, 793, 794, 797, 798, 808, 820, 938, 984, 990, 1000, 1006, 1027, 1031, 1032, 1034], "fontsiz": [5, 8, 10, 14, 34, 50, 60, 91, 98, 120, 143, 154, 155, 157, 160, 170, 179, 189, 198, 210, 221, 222, 248, 255, 264, 265, 266, 271, 272, 302, 309, 343, 911], "mse": [5, 7, 78, 79, 124, 125, 163, 164, 199, 201, 203, 205, 274, 643, 649, 745, 985, 1001, 1038, 1040], "nmse": [5, 274], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 62, 64, 67, 85, 92, 98, 105, 124, 130, 131, 143, 169, 170, 175, 179, 188, 190, 195, 199, 214, 215, 216, 217, 228, 232, 238, 259, 263, 264, 266, 268, 269, 270, 291, 292, 299, 307, 310, 319, 336, 349, 350, 360, 406, 409, 412, 821], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 57, 74, 75, 86, 90, 95, 100, 104, 114, 116, 129, 131, 134, 137, 138, 140, 143, 146, 148, 155, 157, 163, 164, 167, 168, 170, 173, 175, 181, 183, 185, 187, 188, 189, 194, 196, 197, 200, 201, 203, 207, 211, 213, 215, 216, 217, 218, 219, 222, 224, 226, 231, 234, 236, 237, 240, 254, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 270, 274, 288, 291, 292, 302, 305, 306, 307, 312, 317, 318, 331, 333, 336, 337, 338, 341, 344, 345, 347, 349, 356, 357, 365, 367, 370, 374, 375, 376, 380, 381, 383, 392, 394, 405, 408, 409, 410, 411, 412, 413, 414, 415, 417, 438, 451, 461, 463, 471, 478, 479, 480, 492, 497, 498, 508, 511, 517, 520, 528, 529, 530, 531, 532, 535, 537, 539, 540, 544, 545, 546, 550, 562, 578, 585, 589, 590, 602, 605, 610, 616, 627, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 689, 697, 703, 712, 745, 748, 760, 762, 769, 780, 794, 805, 809, 820, 823, 837, 838, 842, 846, 853, 854, 855, 858, 862, 863, 864, 867, 870, 872, 874, 875, 876, 877, 886, 890, 897, 898, 899, 900, 901, 902, 903, 974, 976, 977, 978, 980, 985, 988, 989, 990, 991, 992, 993, 999, 1000, 1005, 1007, 1009, 1011, 1014, 1015, 1020, 1021, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041], "radial": [5, 100, 151, 156, 158, 336, 340, 370, 448, 618, 687, 983, 1000, 1022], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 132, 140, 151, 152, 153, 155, 156, 157, 158, 160, 166, 213, 227, 228, 234, 243, 258, 260, 262, 265, 275, 329, 331, 333, 342, 343, 347, 370, 406, 410, 412, 448, 498, 500, 531, 537, 606, 607, 608, 609, 612, 615, 616, 617, 619, 620, 627, 635, 636, 637, 638, 639, 672, 687, 760, 769, 771, 794, 805, 808, 814, 857, 877, 892, 893, 897, 899, 900, 901, 902, 903, 974, 977, 978, 980, 982, 985, 991, 995, 998, 1011, 1016, 1022, 1033, 1038], "decomposit": [5, 6, 14, 17, 58, 70, 72, 73, 74, 86, 87, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 129, 135, 220, 221, 223, 233, 236, 240, 259, 287, 292, 310, 319, 350, 366, 367, 371, 384, 387, 392, 401, 402, 403, 406, 412, 445, 447, 448, 449, 458, 478, 479, 480, 491, 545, 552, 607, 646, 647, 648, 649, 650, 651, 652, 659, 660, 661, 668, 669, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 792, 793, 846, 853, 856, 859, 875, 906, 933, 934, 981, 982, 985, 1002, 1005, 1007, 1014, 1016, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "kernel_pca": [5, 100, 406], "400": [5, 26, 50, 75, 76, 95, 126, 130, 151, 164, 205, 221, 225, 226, 234, 238, 243, 272, 300, 349, 350, 373, 410, 491, 1020], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 148, 151, 154, 156, 157, 158, 159, 160, 163, 169, 179, 192, 199, 200, 206, 213, 217, 223, 228, 234, 239, 245, 248, 251, 258, 268, 271, 301, 312, 318, 321, 328, 334, 336, 344, 349, 384, 417, 439, 443, 448, 455, 458, 467, 468, 474, 478, 479, 480, 527, 528, 529, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 555, 556, 557, 558, 588, 593, 607, 609, 610, 611, 615, 616, 618, 619, 621, 623, 634, 636, 637, 638, 640, 641, 642, 643, 644, 645, 648, 649, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 685, 686, 687, 688, 689, 690, 691, 723, 736, 780, 792, 793, 808, 832, 833, 834, 835, 836, 837, 838, 846, 854, 855, 862, 892, 893, 897, 898, 899, 900, 901, 902, 903, 971, 974, 985, 989, 993, 995, 999, 1016, 1020, 1035, 1040, 1041, 1042], "fit_inverse_transform": [5, 100, 531, 1036], "5e": [5, 95, 184, 591, 592, 594], "inde": [5, 7, 25, 34, 39, 40, 53, 55, 58, 82, 86, 100, 111, 114, 147, 148, 151, 169, 171, 178, 183, 187, 188, 199, 201, 262, 263, 267, 269, 278, 283, 305, 310, 344, 350, 360, 364, 377, 383, 391, 392, 393, 405, 407, 412, 563, 564, 981, 995, 999, 1041], "least": [5, 14, 80, 81, 84, 87, 98, 122, 125, 148, 159, 166, 177, 178, 183, 192, 199, 201, 203, 204, 207, 216, 217, 218, 232, 238, 260, 278, 281, 310, 317, 318, 336, 350, 351, 364, 371, 373, 375, 377, 378, 382, 384, 386, 390, 392, 393, 396, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 440, 444, 446, 452, 453, 454, 457, 470, 478, 479, 480, 481, 490, 512, 527, 533, 535, 537, 538, 539, 541, 542, 543, 544, 545, 553, 554, 555, 556, 558, 560, 561, 562, 589, 598, 631, 639, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 688, 693, 708, 712, 714, 780, 795, 799, 800, 806, 808, 809, 810, 812, 813, 815, 818, 821, 822, 823, 854, 855, 858, 869, 877, 902, 905, 906, 907, 908, 926, 948, 975, 978, 982, 985, 988, 997, 999, 1000, 1001, 1006, 1007, 1009, 1018, 1022, 1027, 1029, 1030, 1033, 1034, 1038], "hope": [5, 217, 392, 404, 1036], "remov": [5, 14, 16, 17, 54, 55, 70, 75, 148, 163, 164, 169, 172, 261, 305, 312, 315, 316, 317, 349, 350, 354, 360, 370, 373, 377, 378, 379, 382, 383, 387, 392, 405, 406, 409, 412, 413, 415, 416, 433, 438, 440, 443, 445, 446, 453, 455, 474, 484, 485, 522, 530, 531, 533, 535, 537, 542, 549, 550, 551, 552, 563, 564, 565, 566, 575, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 607, 626, 629, 634, 640, 641, 646, 647, 650, 651, 652, 654, 660, 661, 736, 737, 745, 746, 763, 773, 774, 775, 800, 816, 818, 819, 820, 821, 844, 856, 857, 861, 862, 870, 874, 875, 877, 886, 900, 901, 903, 912, 928, 929, 931, 975, 982, 988, 1001, 1007, 1012, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "think": [5, 37, 170, 349, 350, 378, 411, 984, 1006, 1008, 1009, 1011], "happen": [5, 116, 187, 305, 311, 350, 360, 364, 365, 376, 377, 378, 382, 383, 384, 390, 392, 393, 395, 405, 407, 409, 412, 433, 511, 568, 654, 780, 875, 877, 897, 981, 985, 986, 1000, 1006, 1020, 1035, 1039, 1040, 1042, 1043], "ridg": [5, 10, 13, 54, 75, 131, 148, 150, 161, 163, 166, 169, 170, 177, 178, 183, 199, 200, 218, 227, 237, 243, 349, 364, 367, 390, 410, 412, 415, 520, 531, 535, 539, 607, 611, 618, 621, 639, 640, 641, 643, 645, 653, 657, 669, 670, 671, 674, 683, 697, 745, 794, 800, 808, 830, 903, 985, 993, 995, 999, 1000, 1007, 1018, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1040, 1041, 1042, 1043], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 145, 235, 287, 350, 396, 410, 413, 441, 461, 478, 479, 480, 529, 530, 531, 534, 535, 536, 537, 539, 540, 577, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 626, 794, 797, 798, 808, 857, 861, 862, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 877, 889, 890, 995, 996, 997, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 31, 33, 58, 79, 86, 90, 95, 97, 103, 111, 114, 117, 120, 124, 127, 151, 153, 155, 157, 159, 170, 171, 183, 184, 185, 189, 199, 200, 201, 202, 212, 220, 224, 231, 232, 237, 247, 251, 259, 260, 262, 263, 267, 268, 270, 273, 286, 287, 289, 290, 307, 310, 319, 327, 336, 342, 349, 350, 351, 355, 373, 378, 403, 404, 405, 408, 409, 410, 411, 412, 413, 416, 440, 444, 460, 463, 494, 505, 528, 530, 537, 540, 549, 555, 556, 557, 558, 559, 584, 585, 587, 599, 607, 609, 610, 611, 613, 615, 616, 618, 619, 621, 628, 629, 631, 633, 673, 675, 708, 712, 720, 723, 729, 734, 792, 793, 843, 845, 847, 848, 849, 851, 878, 897, 898, 899, 900, 901, 904, 921, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 997, 999, 1000, 1001, 1018, 1029, 1030, 1035, 1042], "analysi": [5, 7, 9, 25, 29, 35, 36, 57, 63, 68, 90, 94, 96, 97, 99, 100, 102, 104, 107, 121, 166, 169, 188, 221, 244, 252, 257, 260, 261, 265, 284, 297, 305, 310, 344, 350, 367, 370, 373, 375, 378, 380, 393, 402, 405, 407, 412, 413, 417, 435, 443, 444, 469, 471, 472, 478, 479, 481, 498, 500, 508, 511, 527, 528, 529, 530, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 551, 552, 627, 634, 684, 686, 687, 688, 689, 706, 715, 720, 721, 751, 783, 784, 787, 788, 792, 794, 819, 823, 839, 846, 857, 858, 863, 873, 877, 885, 933, 934, 975, 981, 982, 984, 985, 995, 1004, 1005, 1007, 1009, 1012, 1021, 1022, 1027, 1028, 1029, 1031, 1036], "favor": [5, 82, 117, 245, 251, 390, 407, 412, 629, 725, 802, 804, 856, 974, 993, 1029, 1031, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043], "background": [5, 11, 47, 66, 127, 302, 307, 373, 378, 386, 405, 489, 490, 982, 990, 999, 1037], "354": [5, 15], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 34, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 67, 68, 71, 72, 73, 74, 75, 80, 81, 82, 86, 93, 94, 98, 99, 100, 102, 106, 107, 110, 112, 113, 114, 115, 116, 118, 119, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 144, 145, 146, 147, 148, 150, 159, 161, 163, 164, 171, 172, 175, 177, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 195, 196, 198, 202, 203, 206, 207, 211, 212, 213, 214, 215, 216, 218, 222, 224, 225, 227, 229, 232, 234, 236, 237, 241, 242, 243, 245, 247, 248, 249, 251, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 275, 281, 283, 285, 286, 287, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 330, 331, 332, 334, 336, 337, 338, 339, 344, 345, 346, 347, 350, 351, 353, 354, 356, 357, 358, 359, 360, 365, 366, 367, 380, 381, 382, 384, 391, 392, 394, 395, 399, 401, 402, 403, 405, 406, 409, 410, 411, 412, 413, 414, 420, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 455, 465, 466, 469, 470, 471, 472, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 579, 580, 584, 585, 586, 588, 589, 590, 591, 592, 594, 595, 596, 598, 599, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 624, 627, 628, 629, 630, 631, 634, 635, 636, 639, 641, 642, 643, 645, 647, 648, 649, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 675, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 699, 700, 704, 724, 750, 752, 782, 783, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 853, 854, 855, 857, 858, 861, 862, 870, 871, 875, 877, 879, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 917, 918, 922, 923, 974, 975, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1019, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "excerpt": [6, 997, 1016], "wild": [6, 371, 489, 490, 504, 505, 1016, 1022, 1027], "aka": [6, 299, 349, 390, 413, 448, 532, 534, 536, 540, 543, 577, 578, 611, 618, 647, 648, 650, 651, 652, 654, 655, 658, 662, 663, 664, 666, 672, 673, 674, 736, 864, 868, 870, 981, 989, 999, 1011, 1016, 1029, 1041], "lfw": [6, 373, 489, 490, 1016, 1027], "vi": [6, 8, 373, 695, 1016, 1035, 1038], "www": [6, 71, 175, 199, 215, 217, 229, 281, 301, 372, 373, 378, 386, 395, 405, 409, 438, 445, 483, 504, 505, 527, 530, 533, 537, 640, 654, 660, 667, 681, 682, 846, 853, 905, 906, 981, 998, 1016], "umass": [6, 19, 373, 1016], "edu": [6, 8, 11, 17, 46, 122, 148, 158, 175, 181, 220, 248, 259, 278, 288, 296, 309, 349, 372, 373, 375, 405, 445, 483, 496, 498, 504, 505, 506, 530, 637, 640, 645, 654, 662, 663, 672, 675, 678, 679, 832, 834, 835, 836, 846, 853, 890, 892, 905, 906, 981, 983, 1016], "funnel": [6, 489, 490, 1016], "tgz": [6, 1016], "233mb": [6, 1016], "stat": [6, 8, 10, 70, 80, 101, 148, 151, 172, 257, 260, 268, 272, 288, 317, 324, 325, 375, 387, 391, 407, 470, 588, 591, 592, 594, 595, 596, 600, 601, 602, 605, 678, 679, 798, 806, 808, 905, 906, 936, 974, 981, 995, 1016, 1034, 1036, 1040], "loguniform": [6, 151, 268, 974, 1016, 1037], "fetch_lfw_peopl": [6, 373, 1016, 1042], "confusionmatrixdisplai": [6, 32, 254, 318, 324, 349, 627, 714, 985, 1016, 1037, 1038, 1040, 1041, 1042], "classification_report": [6, 32, 70, 145, 258, 302, 324, 325, 985, 1016, 1020, 1029, 1031, 1035, 1036, 1037, 1039, 1043], "randomizedsearchcv": [6, 71, 151, 261, 268, 317, 360, 391, 396, 571, 974, 985, 999, 1005, 1016, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044], "standardscal": [6, 10, 31, 44, 49, 55, 58, 62, 71, 73, 86, 106, 131, 148, 169, 178, 187, 188, 190, 199, 215, 217, 229, 230, 238, 239, 240, 242, 257, 267, 286, 291, 292, 299, 307, 310, 315, 316, 318, 319, 320, 336, 339, 360, 366, 378, 380, 383, 387, 391, 406, 409, 426, 462, 463, 563, 646, 647, 650, 651, 652, 660, 661, 672, 674, 857, 858, 861, 874, 888, 897, 898, 899, 900, 902, 903, 975, 982, 989, 995, 999, 1000, 1002, 1016, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "svc": [6, 16, 25, 27, 30, 31, 32, 70, 74, 132, 138, 140, 146, 166, 175, 233, 236, 240, 254, 258, 260, 262, 265, 266, 267, 270, 271, 275, 307, 315, 317, 327, 329, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 345, 346, 347, 349, 364, 380, 384, 392, 399, 403, 406, 409, 412, 464, 511, 551, 693, 694, 696, 698, 794, 811, 824, 826, 857, 894, 895, 897, 899, 973, 974, 980, 983, 985, 986, 995, 1011, 1015, 1016, 1018, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "disk": [6, 13, 373, 376, 378, 383, 392, 399, 1016], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 61, 62, 64, 70, 72, 81, 85, 92, 96, 97, 123, 125, 127, 130, 133, 138, 145, 148, 152, 153, 154, 159, 169, 178, 180, 183, 192, 193, 196, 199, 200, 206, 216, 221, 222, 228, 232, 235, 238, 239, 242, 245, 246, 247, 249, 250, 255, 256, 258, 260, 261, 264, 265, 269, 281, 296, 308, 315, 318, 319, 321, 325, 332, 339, 340, 349, 357, 360, 364, 365, 371, 372, 373, 378, 379, 380, 381, 383, 384, 386, 388, 390, 391, 392, 399, 402, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 511, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 577, 578, 579, 580, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 917, 918, 919, 922, 923, 931, 932, 933, 934, 935, 936, 938, 939, 940, 947, 948, 949, 956, 957, 958, 959, 960, 961, 962, 963, 971, 972, 975, 980, 981, 983, 985, 986, 988, 989, 991, 992, 995, 996, 997, 999, 1000, 1001, 1004, 1009, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "lfw_peopl": [6, 373, 1016], "min_faces_per_person": [6, 373, 490, 1016], "resiz": [6, 46, 47, 239, 373, 489, 490, 1016], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 70, 75, 78, 79, 80, 81, 82, 86, 92, 95, 96, 100, 103, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 128, 139, 140, 147, 148, 160, 163, 164, 168, 178, 180, 181, 183, 185, 187, 189, 191, 193, 194, 198, 199, 200, 202, 203, 207, 211, 214, 216, 217, 220, 221, 222, 223, 224, 225, 228, 232, 233, 235, 238, 246, 248, 249, 250, 251, 257, 258, 260, 263, 264, 267, 269, 270, 271, 272, 273, 274, 283, 293, 307, 308, 309, 312, 316, 317, 319, 321, 326, 334, 337, 338, 344, 349, 350, 360, 371, 375, 378, 380, 383, 387, 390, 391, 392, 396, 405, 407, 408, 409, 410, 412, 416, 417, 418, 420, 422, 423, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 497, 500, 504, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 617, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 765, 766, 767, 768, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 922, 923, 934, 936, 938, 947, 954, 956, 959, 960, 961, 962, 963, 964, 965, 966, 974, 977, 981, 985, 986, 988, 989, 995, 996, 997, 999, 1000, 1001, 1011, 1016, 1017, 1018, 1019, 1020, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 58, 64, 102, 105, 148, 163, 198, 203, 216, 235, 236, 245, 246, 247, 250, 251, 271, 302, 318, 319, 340, 341, 344, 351, 360, 373, 375, 384, 399, 405, 406, 410, 412, 413, 417, 422, 428, 433, 461, 465, 468, 470, 478, 479, 480, 519, 534, 536, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 584, 585, 587, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 689, 695, 720, 721, 751, 794, 808, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 848, 854, 855, 890, 892, 893, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 931, 936, 981, 985, 989, 990, 995, 997, 999, 1000, 1016, 1020, 1037, 1041, 1042, 1043, 1044], "info": [6, 42, 71, 95, 169, 170, 235, 258, 375, 377, 382, 392, 413, 941, 951, 1016], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 34, 40, 52, 58, 60, 61, 78, 79, 80, 81, 82, 91, 92, 95, 103, 111, 113, 115, 117, 118, 145, 147, 148, 163, 164, 175, 178, 181, 183, 185, 193, 194, 198, 202, 203, 214, 216, 221, 228, 232, 233, 235, 245, 250, 257, 263, 267, 269, 270, 272, 273, 293, 299, 307, 315, 316, 317, 319, 321, 344, 349, 350, 351, 360, 364, 371, 372, 378, 380, 383, 390, 391, 392, 396, 405, 407, 408, 410, 412, 413, 416, 417, 418, 420, 422, 423, 424, 427, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 490, 497, 500, 504, 505, 508, 511, 512, 515, 517, 519, 520, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 706, 720, 753, 754, 755, 756, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 787, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 934, 960, 961, 962, 963, 964, 965, 966, 977, 981, 986, 988, 989, 995, 999, 1000, 1001, 1011, 1016, 1017, 1019, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "id": [6, 19, 217, 296, 358, 372, 373, 378, 386, 407, 409, 413, 490, 491, 492, 909, 911, 929, 1016, 1020, 1035, 1036, 1039], "person": [6, 263, 373, 377, 409, 413, 489, 490, 491, 995, 1016, 1035], "target_nam": [6, 19, 30, 52, 90, 99, 104, 168, 208, 221, 247, 254, 261, 269, 270, 286, 311, 328, 349, 355, 371, 373, 484, 485, 487, 488, 489, 490, 492, 493, 496, 498, 499, 500, 501, 506, 709, 985, 1001, 1011, 1016, 1020, 1037], "n_class": [6, 37, 91, 92, 111, 113, 118, 120, 145, 147, 214, 221, 233, 236, 247, 267, 268, 269, 292, 293, 315, 355, 358, 360, 378, 380, 392, 412, 433, 484, 485, 498, 511, 515, 519, 545, 546, 547, 549, 551, 553, 555, 557, 560, 563, 565, 589, 590, 600, 606, 630, 635, 654, 655, 662, 663, 664, 670, 671, 672, 673, 693, 703, 712, 714, 730, 733, 736, 749, 783, 789, 794, 797, 798, 808, 818, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 844, 846, 847, 854, 857, 864, 865, 868, 871, 878, 881, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 907, 909, 910, 922, 923, 981, 985, 986, 989, 996, 999, 1000, 1008, 1016, 1032, 1033, 1034, 1036, 1037, 1038, 1044], "1288": [6, 373], "1850": [6, 373], "scaler": [6, 71, 73, 166, 215, 233, 240, 242, 286, 291, 304, 310, 313, 320, 336, 339, 360, 383, 406, 409, 486, 654, 655, 668, 670, 683, 857, 866, 867, 869, 873, 874, 875, 877, 882, 883, 884, 885, 886, 887, 888, 989, 995, 999, 1016, 1027, 1032, 1035, 1040], "unlabel": [6, 236, 317, 324, 325, 326, 328, 329, 392, 404, 405, 892, 893, 894, 984, 1011, 1014, 1016, 1018, 1039], "unsupervis": [6, 12, 37, 49, 72, 73, 86, 95, 116, 129, 228, 236, 289, 290, 335, 349, 350, 360, 367, 370, 373, 380, 391, 392, 404, 405, 408, 410, 411, 412, 413, 429, 438, 441, 528, 530, 532, 533, 535, 538, 539, 545, 559, 562, 563, 565, 566, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 624, 626, 630, 631, 634, 635, 636, 637, 638, 673, 794, 797, 798, 800, 808, 816, 821, 824, 839, 840, 843, 845, 846, 847, 848, 853, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 889, 890, 894, 901, 982, 985, 991, 998, 1007, 1011, 1012, 1014, 1016, 1022, 1027, 1030, 1040], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 55, 57, 58, 62, 69, 71, 73, 74, 76, 85, 86, 92, 95, 103, 111, 116, 129, 139, 140, 148, 151, 153, 154, 158, 166, 183, 195, 200, 216, 219, 221, 222, 224, 226, 228, 232, 233, 236, 246, 247, 284, 287, 297, 307, 333, 340, 349, 360, 364, 370, 373, 374, 375, 378, 387, 392, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 441, 443, 445, 461, 465, 469, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 498, 500, 501, 506, 511, 515, 528, 530, 531, 534, 535, 536, 537, 540, 543, 545, 559, 562, 569, 595, 603, 627, 636, 637, 638, 648, 684, 685, 686, 687, 688, 689, 690, 692, 695, 706, 720, 792, 793, 794, 823, 837, 838, 839, 842, 845, 846, 853, 857, 858, 861, 867, 872, 877, 889, 890, 891, 897, 901, 934, 971, 976, 977, 980, 981, 986, 987, 991, 997, 998, 999, 1000, 1001, 1007, 1009, 1011, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1039, 1042, 1043], "reduct": [6, 19, 54, 57, 69, 73, 76, 86, 95, 114, 129, 166, 219, 221, 222, 226, 232, 236, 284, 297, 319, 333, 360, 364, 370, 404, 405, 406, 408, 410, 412, 414, 464, 478, 479, 480, 481, 498, 526, 528, 530, 531, 534, 535, 536, 537, 540, 543, 545, 549, 550, 553, 554, 555, 556, 560, 561, 562, 595, 603, 654, 655, 684, 685, 686, 687, 688, 689, 776, 794, 823, 839, 846, 853, 857, 858, 867, 877, 895, 897, 905, 906, 907, 908, 977, 982, 997, 1001, 1006, 1007, 1009, 1016, 1022, 1028, 1029, 1030, 1033, 1041, 1042, 1043], "top": [6, 12, 13, 14, 16, 17, 34, 37, 39, 41, 42, 43, 44, 45, 51, 62, 64, 71, 91, 97, 109, 116, 117, 120, 131, 134, 169, 199, 201, 210, 214, 228, 238, 239, 245, 247, 248, 251, 257, 261, 269, 270, 288, 305, 307, 311, 316, 324, 325, 336, 340, 349, 360, 376, 378, 380, 384, 390, 402, 403, 405, 410, 411, 412, 483, 583, 584, 587, 595, 721, 751, 789, 909, 911, 974, 977, 981, 983, 993, 1005, 1009, 1016, 1019, 1020, 1041], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 58, 62, 64, 98, 183, 185, 214, 215, 216, 222, 225, 228, 232, 234, 261, 349, 350, 351, 672, 673, 674, 1016], "svd_solver": [6, 95, 103, 401, 410, 531, 537, 1016, 1033], "whiten": [6, 95, 96, 97, 287, 410, 417, 529, 530, 537, 875, 877, 1016, 1031, 1033, 1041, 1042], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 145, 148, 156, 169, 170, 175, 178, 183, 185, 203, 216, 234, 235, 250, 258, 261, 264, 269, 283, 308, 317, 349, 350, 351, 360, 365, 372, 376, 378, 380, 382, 385, 386, 387, 390, 392, 396, 405, 407, 409, 410, 412, 437, 438, 441, 446, 448, 468, 478, 479, 480, 481, 485, 531, 557, 558, 578, 602, 624, 626, 628, 630, 639, 640, 641, 655, 736, 792, 793, 794, 808, 813, 814, 861, 875, 970, 974, 975, 978, 981, 982, 985, 987, 988, 989, 995, 998, 999, 1000, 1001, 1006, 1011, 1015, 1016, 1018, 1020, 1027, 1029, 1034, 1037, 1039, 1043], "components_": [6, 14, 58, 86, 95, 97, 98, 101, 106, 232, 233, 302, 310, 319, 392, 406, 410, 440, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 539, 540, 635, 846, 853, 889, 890, 997, 1016, 1031, 1033, 1039, 1042], "project": [6, 8, 11, 13, 17, 45, 58, 67, 90, 94, 95, 97, 99, 101, 102, 107, 113, 155, 157, 159, 160, 166, 170, 191, 196, 208, 220, 221, 222, 224, 227, 233, 236, 243, 246, 287, 292, 296, 302, 333, 341, 350, 355, 364, 367, 370, 372, 376, 377, 383, 384, 387, 392, 393, 395, 402, 408, 410, 411, 417, 436, 442, 447, 448, 458, 470, 478, 479, 480, 481, 485, 498, 500, 527, 529, 530, 531, 533, 535, 537, 538, 539, 540, 544, 545, 569, 578, 585, 637, 638, 645, 668, 670, 684, 687, 691, 692, 827, 846, 874, 889, 890, 891, 933, 934, 979, 981, 982, 983, 986, 988, 989, 991, 998, 1001, 1003, 1008, 1009, 1011, 1016, 1019, 1022, 1027, 1028, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "orthonorm": [6, 387, 933, 1016], "x_train_pca": [6, 1016], "x_test_pca": [6, 100, 1016], "966": 6, "089": 6, "008": [6, 148, 350, 375, 384], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 34, 35, 56, 70, 71, 72, 73, 100, 111, 112, 113, 115, 118, 119, 120, 123, 129, 132, 133, 144, 145, 147, 166, 171, 172, 175, 177, 189, 190, 191, 197, 206, 208, 211, 214, 218, 228, 233, 235, 241, 254, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 275, 278, 280, 282, 285, 291, 292, 294, 299, 302, 307, 317, 318, 323, 324, 325, 327, 328, 330, 331, 332, 335, 337, 338, 339, 340, 345, 346, 347, 351, 373, 375, 378, 380, 383, 390, 392, 405, 406, 409, 413, 414, 415, 422, 431, 433, 434, 435, 484, 485, 492, 500, 508, 510, 511, 518, 527, 532, 533, 538, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 562, 563, 564, 565, 566, 589, 590, 598, 602, 606, 618, 625, 627, 628, 629, 645, 654, 655, 662, 664, 667, 668, 669, 670, 671, 672, 693, 694, 696, 698, 699, 703, 704, 705, 708, 709, 714, 716, 721, 722, 724, 725, 729, 730, 733, 734, 735, 736, 737, 738, 749, 751, 777, 778, 779, 782, 783, 784, 789, 791, 794, 797, 798, 800, 808, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 844, 845, 847, 848, 853, 854, 855, 857, 858, 864, 877, 878, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 911, 926, 928, 974, 975, 977, 980, 981, 982, 985, 986, 987, 990, 993, 995, 998, 999, 1000, 1001, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1015, 1016, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "1e3": [6, 7, 10, 151, 157, 163, 234, 271, 321, 974, 1016], "1e5": [6, 156, 180, 182, 189, 271, 609, 610, 611, 615, 616, 618, 619, 621, 886, 891, 997, 1016, 1018], "clf": [6, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 58, 63, 71, 101, 102, 115, 123, 126, 127, 132, 137, 140, 144, 145, 147, 153, 155, 172, 189, 191, 192, 196, 197, 203, 206, 208, 211, 212, 213, 215, 223, 229, 230, 233, 236, 242, 249, 257, 261, 265, 266, 268, 271, 272, 286, 289, 290, 291, 294, 299, 307, 310, 315, 316, 317, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 349, 354, 355, 358, 364, 373, 391, 392, 399, 406, 409, 412, 414, 434, 545, 546, 549, 551, 553, 555, 557, 559, 560, 563, 589, 590, 593, 628, 630, 634, 635, 636, 637, 638, 640, 641, 644, 648, 654, 655, 656, 657, 658, 662, 664, 665, 668, 669, 670, 671, 672, 673, 676, 693, 694, 696, 698, 783, 794, 797, 798, 808, 825, 826, 827, 829, 832, 833, 834, 835, 836, 843, 844, 854, 897, 899, 901, 902, 905, 909, 911, 975, 977, 981, 985, 986, 988, 989, 991, 992, 999, 1000, 1001, 1011, 1015, 1016, 1020], "class_weight": [6, 338, 392, 404, 553, 557, 560, 654, 655, 662, 664, 670, 671, 672, 673, 897, 899, 900, 901, 902, 903, 904, 905, 907, 974, 999, 1000, 1016, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1041, 1042], "n_iter": [6, 17, 71, 151, 207, 220, 221, 225, 261, 268, 283, 302, 338, 380, 384, 391, 417, 450, 474, 528, 529, 533, 535, 540, 541, 542, 543, 640, 641, 642, 643, 648, 649, 656, 657, 658, 659, 677, 678, 679, 680, 681, 682, 683, 688, 690, 797, 798, 806, 808, 853, 855, 933, 934, 974, 999, 1016, 1028, 1033, 1034, 1035, 1039, 1041, 1042, 1043], "found": [6, 19, 20, 21, 106, 118, 147, 151, 155, 157, 159, 203, 236, 258, 261, 262, 263, 310, 315, 318, 320, 321, 336, 351, 364, 366, 372, 375, 377, 378, 380, 390, 392, 393, 402, 405, 408, 409, 410, 412, 413, 415, 430, 437, 440, 441, 455, 468, 553, 554, 555, 556, 560, 561, 584, 586, 606, 607, 624, 632, 643, 647, 649, 651, 657, 659, 661, 667, 668, 670, 672, 674, 683, 684, 708, 715, 794, 797, 798, 808, 834, 839, 840, 846, 868, 870, 871, 905, 906, 907, 908, 912, 969, 973, 974, 977, 981, 982, 984, 986, 987, 988, 989, 995, 999, 1000, 1001, 1006, 1008, 1011, 1016, 1020, 1027, 1030, 1031, 1034, 1035, 1037, 1041], "grid": [6, 8, 10, 11, 20, 25, 26, 27, 42, 54, 61, 71, 72, 74, 78, 82, 120, 122, 129, 155, 166, 168, 169, 170, 188, 217, 225, 233, 234, 235, 239, 245, 250, 253, 257, 259, 261, 264, 265, 276, 281, 285, 287, 288, 296, 302, 307, 308, 310, 333, 335, 336, 342, 349, 380, 385, 390, 392, 400, 406, 409, 411, 412, 413, 444, 457, 460, 468, 494, 498, 511, 518, 627, 628, 629, 643, 646, 649, 650, 652, 655, 657, 659, 672, 709, 723, 737, 780, 783, 794, 797, 798, 805, 808, 810, 823, 824, 857, 902, 978, 980, 985, 988, 992, 1006, 1011, 1012, 1014, 1016, 1018, 1022, 1027, 1030, 1031, 1032, 1034, 1035, 1041, 1043, 1044], "search": [6, 46, 54, 71, 72, 73, 74, 124, 145, 148, 151, 166, 217, 234, 235, 250, 253, 261, 264, 265, 272, 276, 283, 285, 287, 302, 307, 320, 336, 349, 360, 367, 375, 376, 378, 380, 390, 392, 400, 405, 406, 409, 412, 413, 414, 416, 439, 444, 446, 448, 453, 454, 457, 460, 467, 468, 474, 498, 511, 518, 553, 554, 555, 556, 560, 561, 562, 575, 595, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 624, 649, 672, 684, 685, 688, 689, 709, 723, 780, 783, 794, 797, 798, 805, 806, 808, 810, 823, 824, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 857, 902, 905, 906, 907, 908, 939, 973, 978, 980, 982, 985, 988, 989, 999, 1001, 1005, 1006, 1011, 1012, 1014, 1016, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1041, 1042, 1044], "best_estimator_": [6, 54, 73, 74, 78, 103, 234, 250, 261, 264, 287, 794, 797, 798, 808, 974, 1015, 1016, 1034], "610": 6, "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 25, 27, 30, 31, 34, 56, 113, 116, 127, 128, 132, 170, 182, 191, 208, 213, 234, 239, 241, 254, 257, 262, 263, 267, 270, 275, 286, 291, 294, 310, 315, 316, 317, 318, 320, 321, 332, 333, 334, 335, 337, 338, 340, 355, 385, 403, 629, 714, 722, 777, 779, 782, 783, 784, 980, 985, 992, 1016, 1024, 1040, 1041, 1042, 1043], "display_label": [6, 254, 693, 1016, 1039], "xticks_rot": [6, 693, 1016], "vertic": [6, 17, 60, 123, 172, 188, 232, 233, 264, 281, 305, 308, 341, 343, 392, 402, 405, 410, 511, 693, 776, 1016], "tight_layout": [6, 8, 25, 27, 31, 40, 52, 55, 65, 73, 75, 86, 95, 96, 97, 106, 111, 113, 118, 120, 125, 129, 131, 133, 153, 155, 160, 163, 168, 169, 171, 172, 178, 179, 183, 189, 197, 199, 207, 210, 214, 217, 220, 233, 238, 255, 256, 272, 281, 283, 285, 295, 306, 307, 308, 309, 310, 315, 319, 334, 350, 354, 355, 1016], "046": [6, 350], "precis": [6, 25, 32, 70, 75, 82, 95, 145, 157, 158, 166, 175, 229, 253, 254, 258, 276, 302, 305, 324, 325, 378, 380, 392, 402, 403, 404, 405, 407, 410, 412, 439, 465, 466, 467, 468, 469, 470, 471, 472, 474, 500, 519, 528, 530, 537, 540, 640, 641, 642, 644, 646, 647, 648, 650, 651, 652, 665, 668, 670, 676, 678, 679, 683, 695, 696, 702, 703, 704, 709, 722, 724, 725, 726, 734, 758, 777, 778, 779, 782, 783, 792, 793, 823, 826, 837, 838, 843, 858, 877, 881, 897, 902, 909, 911, 934, 979, 981, 988, 989, 1000, 1016, 1020, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "recal": [6, 25, 32, 70, 100, 145, 166, 229, 253, 258, 276, 278, 302, 324, 325, 378, 392, 405, 500, 600, 696, 702, 703, 704, 708, 709, 722, 724, 725, 726, 777, 778, 779, 782, 783, 823, 826, 858, 877, 881, 897, 981, 1001, 1016, 1020, 1030, 1031, 1034, 1036, 1037, 1039, 1040, 1041, 1043], "f1": [6, 25, 32, 70, 145, 258, 302, 324, 325, 328, 409, 709, 724, 725, 733, 778, 985, 986, 1016, 1020, 1031, 1043], "ariel": [6, 373, 1027, 1033], "sharon": [6, 373], "69": [6, 190, 310, 325, 405, 467, 468, 603, 604, 751, 985, 995, 1018], "colin": [6, 373, 1033], "powel": [6, 373], "87": [6, 32, 70, 160, 258, 325, 593, 663, 783, 794, 873, 885, 985, 1020], "donald": [6, 373, 405, 720, 975], "rumsfeld": [6, 373], "63": [6, 8, 355, 375, 412, 553, 554, 562, 695, 721, 794, 808, 907, 908, 985], "georg": [6, 373, 405, 1033, 1039, 1040, 1041, 1042], "bush": [6, 373], "95": [6, 14, 32, 44, 52, 57, 67, 91, 101, 102, 120, 124, 158, 169, 178, 199, 201, 206, 217, 247, 248, 251, 260, 261, 288, 296, 307, 311, 319, 325, 336, 360, 412, 523, 628, 629, 632, 643, 657, 743, 894, 981, 985, 986, 998, 1020, 1030], "91": [6, 8, 32, 51, 156, 302, 324, 325, 412, 980, 1016, 1020], "146": [6, 119, 412], "gerhard": [6, 373], "schroeder": [6, 373], "hugo": [6, 373, 1033, 1038, 1039, 1040, 1041], "chavez": [6, 373], "90": [6, 8, 10, 14, 32, 74, 105, 106, 123, 124, 125, 145, 156, 172, 179, 190, 196, 198, 201, 206, 217, 245, 269, 271, 307, 311, 321, 324, 325, 360, 364, 378, 384, 409, 559, 776, 794, 821, 826, 878, 980, 985, 1016, 1020, 1042, 1043], "toni": [6, 373, 559, 877, 991, 1040, 1041], "blair": [6, 373], "93": [6, 32, 148, 199, 242, 258, 325, 349, 375, 783, 794, 821, 905, 980, 985, 1016, 1020], "83": [6, 30, 34, 39, 70, 324, 375, 380, 703, 781, 980, 985, 1016, 1020, 1030], "322": [6, 91, 350, 467, 468], "macro": [6, 32, 70, 145, 258, 302, 315, 324, 325, 373, 409, 703, 709, 724, 725, 733, 778, 779, 782, 783, 985, 1020, 1027, 1035, 1043], "avg": [6, 32, 70, 145, 258, 302, 324, 325, 565, 700, 709, 985, 1016, 1020, 1043], "weight": [6, 13, 14, 19, 24, 32, 54, 70, 106, 124, 132, 133, 144, 145, 156, 164, 166, 169, 177, 183, 188, 190, 199, 203, 204, 213, 214, 215, 217, 218, 240, 245, 258, 263, 267, 269, 286, 295, 298, 299, 302, 303, 310, 312, 315, 318, 324, 325, 331, 338, 340, 344, 347, 349, 350, 351, 358, 360, 374, 375, 387, 390, 392, 405, 407, 408, 410, 411, 414, 416, 422, 428, 433, 436, 439, 440, 442, 443, 445, 449, 455, 456, 459, 460, 461, 463, 465, 470, 478, 479, 480, 492, 511, 520, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 585, 586, 587, 589, 593, 598, 599, 606, 607, 624, 628, 629, 630, 631, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 685, 689, 693, 694, 696, 698, 699, 703, 704, 705, 708, 709, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 729, 730, 731, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 764, 777, 778, 779, 780, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 859, 862, 876, 877, 878, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 922, 923, 936, 960, 966, 975, 976, 981, 982, 984, 985, 987, 988, 989, 990, 992, 995, 998, 999, 1000, 1001, 1006, 1011, 1018, 1020, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "85": [6, 16, 17, 32, 50, 55, 70, 98, 145, 214, 217, 271, 302, 325, 360, 412, 435, 496, 551, 552, 593, 648, 654, 740, 748, 783, 794, 821, 985, 986, 1016, 1027], "plot_galleri": [6, 95, 1016], "n_row": [6, 19, 95, 402, 420, 447, 449, 507, 509, 1016], "n_col": [6, 19, 95, 237, 420, 447, 449, 507, 509, 628, 1016], "portrait": [6, 410, 1016], "figur": [6, 7, 8, 10, 12, 13, 16, 24, 25, 26, 27, 31, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 78, 82, 85, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 111, 112, 113, 114, 122, 123, 124, 125, 126, 129, 130, 134, 137, 138, 140, 143, 144, 147, 152, 153, 154, 155, 158, 159, 164, 169, 170, 171, 172, 178, 183, 184, 189, 192, 193, 196, 198, 200, 201, 205, 210, 214, 215, 216, 222, 223, 224, 228, 232, 233, 234, 236, 237, 239, 245, 247, 248, 251, 254, 259, 264, 265, 274, 288, 292, 293, 296, 299, 302, 305, 307, 308, 312, 315, 317, 324, 325, 326, 334, 336, 341, 355, 356, 357, 378, 405, 411, 412, 413, 415, 434, 627, 628, 693, 694, 696, 697, 698, 800, 816, 911, 974, 978, 981, 984, 985, 988, 989, 992, 999, 1000, 1001, 1016, 1018, 1019, 1040], "subplots_adjust": [6, 7, 13, 14, 39, 42, 44, 45, 50, 51, 54, 62, 64, 80, 82, 91, 92, 97, 98, 105, 113, 114, 131, 169, 198, 199, 214, 217, 228, 236, 245, 247, 248, 251, 255, 271, 273, 288, 296, 299, 302, 307, 317, 325, 333, 336, 1016], "bottom": [6, 8, 12, 13, 14, 34, 37, 39, 42, 44, 45, 51, 53, 62, 64, 91, 92, 122, 129, 134, 199, 210, 228, 245, 247, 248, 251, 257, 260, 271, 288, 305, 325, 327, 336, 378, 403, 405, 411, 583, 909, 979, 981, 985, 1006, 1016, 1019], "left": [6, 7, 12, 13, 14, 16, 24, 33, 34, 39, 42, 44, 45, 51, 55, 62, 64, 72, 75, 81, 82, 91, 92, 97, 98, 111, 114, 116, 117, 118, 121, 124, 131, 133, 154, 160, 164, 169, 172, 184, 192, 199, 200, 201, 203, 210, 212, 213, 216, 217, 228, 232, 236, 238, 239, 245, 247, 248, 251, 256, 257, 258, 259, 261, 269, 270, 272, 286, 288, 289, 296, 299, 302, 305, 319, 321, 325, 335, 336, 340, 358, 378, 380, 382, 402, 405, 408, 409, 411, 412, 413, 415, 442, 468, 478, 479, 480, 481, 489, 494, 545, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 583, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 631, 635, 639, 647, 651, 792, 793, 794, 797, 798, 801, 808, 870, 877, 905, 906, 907, 908, 909, 921, 934, 956, 959, 974, 977, 979, 981, 983, 985, 987, 992, 997, 999, 1001, 1015, 1016, 1018, 1019, 1034, 1036, 1041], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 62, 68, 76, 95, 97, 98, 114, 122, 123, 125, 128, 129, 135, 148, 156, 160, 161, 169, 170, 180, 183, 190, 206, 211, 212, 217, 218, 220, 221, 228, 232, 233, 234, 238, 239, 243, 247, 251, 252, 254, 259, 260, 261, 265, 267, 268, 269, 276, 282, 288, 297, 300, 302, 305, 313, 316, 322, 330, 338, 347, 350, 356, 357, 359, 373, 375, 383, 405, 414, 445, 467, 511, 528, 535, 539, 591, 592, 594, 638, 642, 650, 654, 674, 692, 711, 794, 808, 891, 954, 981, 985, 989, 995, 997, 999, 1016, 1020], "right": [6, 7, 11, 12, 13, 14, 16, 31, 34, 39, 42, 43, 44, 45, 51, 53, 60, 62, 64, 79, 80, 82, 90, 91, 92, 97, 98, 100, 103, 105, 111, 113, 114, 115, 124, 125, 126, 133, 144, 151, 154, 164, 172, 189, 200, 201, 202, 203, 205, 206, 209, 210, 228, 231, 232, 235, 245, 247, 248, 250, 251, 255, 256, 260, 263, 267, 270, 271, 273, 288, 296, 299, 302, 305, 307, 310, 321, 325, 336, 338, 340, 344, 346, 349, 355, 358, 360, 367, 378, 390, 393, 402, 405, 408, 410, 411, 412, 415, 460, 478, 479, 480, 481, 530, 537, 540, 553, 554, 555, 556, 557, 558, 560, 561, 562, 583, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 631, 672, 674, 862, 905, 906, 907, 908, 909, 921, 934, 974, 977, 979, 981, 983, 985, 987, 988, 992, 997, 999, 1000, 1001, 1005, 1006, 1009, 1012, 1016, 1018, 1019, 1029, 1035, 1041, 1043], "99": [6, 25, 32, 44, 51, 62, 95, 217, 228, 232, 238, 245, 247, 258, 261, 305, 325, 365, 371, 375, 382, 409, 412, 413, 488, 643, 657, 667, 783, 844, 954, 980, 985, 995, 999, 1016, 1022, 1029], "hspace": [6, 13, 14, 44, 45, 62, 95, 217, 228, 245, 247, 248, 251, 288, 317, 325, 333, 1016], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 126, 148, 197, 199, 217, 232, 236, 237, 267, 301, 375, 410, 489, 490, 498, 517, 1016, 1019, 1038], "ytick": [6, 11, 30, 34, 40, 44, 46, 50, 51, 52, 58, 59, 62, 82, 85, 98, 122, 125, 138, 144, 153, 154, 155, 159, 182, 189, 195, 212, 228, 236, 246, 247, 248, 251, 255, 274, 287, 296, 302, 324, 336, 341, 342, 349, 1016], "portion": [6, 8, 81, 148, 269, 364, 373, 375, 378, 384, 392, 783, 818, 835, 974, 984, 988, 1016, 1020], "pred_nam": [6, 1016], "rsplit": [6, 17, 261, 1016], "true_nam": [6, 1016], "ntrue": [6, 324, 325, 1016], "prediction_titl": [6, 1016], "signif": [6, 1016], "eigenface_titl": [6, 1016], "convolut": [6, 159, 1016], "network": [6, 238, 301, 364, 365, 366, 367, 372, 373, 390, 392, 393, 399, 405, 410, 412, 417, 492, 529, 531, 563, 564, 692, 736, 854, 855, 981, 983, 985, 999, 1001, 1005, 1007, 1016, 1021, 1022, 1027, 1041], "famili": [6, 364, 366, 392, 405, 408, 410, 413, 414, 588, 591, 592, 594, 595, 596, 602, 854, 855, 873, 885, 981, 995, 999, 1016, 1018, 1031, 1041], "outsid": [6, 9, 19, 120, 200, 201, 231, 242, 390, 413, 442, 631, 876, 991, 1016, 1035], "scope": [6, 19, 364, 366, 378, 390, 413, 1005, 1006, 1016], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 50, 70, 109, 116, 117, 131, 145, 148, 160, 164, 166, 169, 172, 187, 188, 217, 227, 238, 241, 253, 257, 276, 278, 283, 288, 290, 314, 322, 340, 349, 350, 354, 355, 360, 365, 366, 367, 370, 372, 373, 374, 375, 377, 378, 381, 384, 385, 386, 387, 391, 392, 396, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 419, 420, 422, 423, 424, 427, 428, 429, 434, 439, 442, 443, 446, 453, 455, 460, 461, 463, 464, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 508, 511, 517, 520, 534, 557, 558, 560, 561, 563, 572, 577, 578, 579, 581, 582, 585, 595, 598, 607, 622, 624, 626, 628, 630, 634, 636, 642, 644, 648, 654, 665, 676, 684, 696, 697, 698, 713, 737, 743, 773, 774, 775, 783, 790, 794, 795, 796, 797, 798, 799, 800, 808, 811, 812, 813, 814, 815, 816, 819, 823, 825, 826, 839, 841, 857, 858, 860, 862, 864, 867, 869, 870, 871, 872, 876, 877, 878, 881, 894, 895, 897, 902, 905, 906, 928, 929, 951, 952, 953, 974, 975, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 995, 998, 999, 1000, 1001, 1004, 1008, 1014, 1015, 1016, 1018, 1019, 1022, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "librari": [6, 260, 318, 320, 356, 360, 370, 372, 373, 376, 377, 378, 379, 384, 390, 391, 392, 395, 401, 654, 897, 898, 899, 900, 902, 903, 953, 981, 985, 1000, 1001, 1005, 1006, 1009, 1016, 1020, 1025, 1030, 1034, 1035, 1036, 1037, 1038, 1040], "reader": [6, 42, 318, 366, 378, 1016], "pytorch": [6, 390, 1005, 1006, 1016, 1043], "tensorflow": [6, 390, 1005, 1016], "implement": [6, 7, 13, 16, 17, 46, 56, 81, 95, 117, 164, 172, 175, 183, 184, 188, 213, 217, 220, 228, 234, 235, 258, 260, 269, 278, 283, 285, 288, 308, 315, 316, 317, 318, 319, 321, 349, 351, 364, 365, 366, 372, 373, 375, 376, 378, 379, 380, 383, 384, 386, 387, 392, 395, 396, 399, 401, 402, 404, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 433, 438, 439, 440, 442, 443, 444, 445, 446, 471, 489, 492, 504, 528, 529, 530, 531, 532, 534, 537, 538, 539, 549, 550, 551, 553, 554, 557, 558, 559, 563, 568, 578, 584, 585, 587, 589, 593, 597, 606, 607, 628, 629, 636, 637, 641, 642, 649, 653, 654, 655, 659, 660, 664, 667, 668, 670, 671, 672, 673, 674, 680, 681, 682, 683, 684, 687, 688, 691, 703, 707, 716, 730, 733, 737, 773, 777, 783, 784, 792, 794, 797, 798, 800, 808, 812, 813, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 839, 840, 842, 845, 847, 848, 853, 854, 855, 857, 879, 887, 888, 894, 897, 898, 899, 900, 901, 902, 903, 933, 934, 942, 945, 950, 953, 954, 956, 974, 975, 977, 979, 981, 982, 983, 984, 986, 987, 989, 990, 991, 995, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1016, 1017, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "486": [6, 15, 20, 22, 201], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 55, 61, 68, 70, 72, 111, 115, 125, 145, 159, 166, 172, 200, 235, 241, 242, 247, 251, 253, 263, 266, 269, 274, 276, 285, 288, 295, 304, 307, 309, 312, 313, 317, 323, 325, 326, 329, 330, 334, 340, 349, 350, 351, 360, 366, 373, 374, 378, 383, 390, 396, 401, 405, 409, 412, 443, 498, 508, 516, 693, 699, 709, 737, 793, 794, 862, 893, 905, 974, 975, 979, 985, 986, 987, 988, 995, 998, 1001, 1004], "diabet": [7, 125, 134, 136, 141, 148, 164, 166, 186, 187, 188, 195, 196, 256, 371, 412, 497, 648, 649, 794, 799, 818, 819, 820, 993, 1011, 1015, 1022], "regress": [7, 10, 13, 25, 27, 30, 54, 69, 71, 76, 80, 81, 84, 87, 98, 110, 114, 116, 117, 122, 130, 135, 148, 150, 161, 163, 164, 166, 168, 169, 170, 177, 181, 183, 185, 189, 193, 194, 196, 200, 202, 203, 204, 215, 218, 227, 229, 237, 238, 242, 243, 256, 273, 274, 281, 284, 297, 302, 306, 310, 317, 318, 319, 320, 331, 347, 349, 353, 359, 365, 366, 367, 370, 371, 373, 375, 378, 380, 383, 386, 387, 390, 391, 392, 400, 403, 407, 408, 409, 410, 414, 428, 433, 460, 461, 470, 480, 485, 486, 488, 492, 497, 498, 500, 501, 508, 512, 513, 514, 520, 524, 527, 531, 533, 535, 537, 538, 539, 541, 542, 544, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 566, 567, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 605, 606, 607, 610, 611, 618, 619, 621, 627, 628, 629, 630, 631, 633, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 697, 702, 717, 718, 719, 723, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 780, 785, 786, 794, 797, 798, 800, 808, 816, 820, 821, 823, 824, 828, 830, 831, 839, 840, 845, 847, 848, 854, 855, 857, 858, 861, 862, 864, 870, 871, 872, 874, 877, 878, 881, 886, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 911, 917, 920, 922, 938, 974, 975, 977, 980, 982, 992, 993, 995, 996, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1017, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "patient": [7, 134, 148, 164, 375, 386, 409, 981, 1018], "diseas": [7, 134, 148, 164, 263, 375, 708, 985, 1018], "newsgroup": [7, 14, 19, 232, 261, 328, 350, 351, 371, 402, 413, 484, 485, 1012, 1022], "post": [7, 14, 19, 70, 166, 319, 349, 350, 351, 353, 359, 364, 373, 377, 378, 382, 383, 391, 405, 444, 484, 485, 496, 708, 823, 905, 985, 1001, 1009, 1020, 1038], "written": [7, 29, 35, 89, 166, 206, 318, 365, 375, 378, 379, 380, 384, 386, 390, 392, 404, 406, 411, 483, 498, 504, 693, 709, 823, 902, 909, 979, 981, 985, 989, 990, 999, 1004, 1011, 1012, 1017, 1020, 1036], "about": [7, 11, 29, 44, 53, 57, 62, 70, 86, 89, 120, 145, 160, 166, 168, 169, 172, 203, 216, 228, 235, 257, 258, 260, 262, 267, 288, 310, 315, 317, 318, 319, 320, 321, 325, 349, 351, 358, 360, 364, 365, 367, 371, 373, 377, 378, 382, 383, 384, 391, 392, 393, 399, 404, 409, 410, 413, 415, 434, 488, 490, 491, 492, 493, 496, 497, 498, 500, 501, 506, 511, 557, 558, 589, 590, 603, 604, 610, 629, 636, 672, 674, 738, 794, 800, 808, 816, 826, 918, 975, 981, 982, 984, 986, 988, 991, 992, 995, 996, 998, 1000, 1001, 1003, 1005, 1009, 1011, 1012, 1018, 1020, 1032, 1033, 1043], "sgdclassifi": [7, 8, 206, 207, 208, 209, 210, 211, 212, 233, 268, 328, 338, 349, 360, 364, 366, 384, 392, 403, 404, 413, 634, 636, 637, 638, 642, 654, 662, 664, 897, 902, 977, 981, 986, 999, 1000, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043], "stochast": [7, 58, 123, 126, 166, 175, 177, 218, 222, 224, 228, 233, 291, 292, 298, 303, 318, 405, 410, 412, 458, 484, 492, 498, 499, 500, 510, 518, 532, 540, 555, 556, 567, 600, 623, 627, 635, 654, 655, 664, 668, 670, 672, 673, 674, 675, 683, 684, 685, 686, 688, 823, 846, 853, 854, 855, 858, 867, 901, 933, 934, 959, 974, 988, 989, 991, 1007, 1021, 1022, 1027, 1028, 1031, 1032, 1034, 1036, 1038], "gradient": [7, 46, 66, 110, 116, 128, 131, 134, 135, 156, 157, 166, 177, 218, 228, 233, 305, 311, 392, 404, 405, 415, 448, 458, 462, 463, 484, 486, 492, 497, 499, 500, 511, 516, 549, 550, 555, 556, 557, 558, 560, 561, 567, 582, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 627, 630, 631, 635, 644, 645, 654, 655, 664, 665, 668, 670, 672, 673, 674, 676, 683, 688, 690, 691, 736, 737, 743, 745, 794, 797, 798, 799, 820, 823, 853, 854, 855, 858, 870, 871, 901, 959, 982, 985, 988, 989, 990, 991, 1005, 1007, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1040, 1042, 1044], "descent": [7, 13, 166, 177, 184, 218, 228, 233, 318, 410, 412, 467, 468, 474, 484, 492, 499, 527, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 567, 627, 635, 642, 643, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 664, 668, 670, 672, 673, 674, 677, 678, 679, 680, 683, 690, 823, 854, 855, 858, 897, 901, 959, 982, 989, 991, 1000, 1007, 1018, 1022, 1027, 1030, 1031, 1032, 1034, 1036, 1038, 1040, 1041, 1042], "nusvr": [7, 364, 903, 1000, 1029, 1035, 1037, 1038, 1039, 1041, 1042], "nu": [7, 9, 11, 160, 213, 228, 335, 364, 412, 415, 615, 673, 899, 900, 901, 991, 999, 1000, 1038, 1042], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 68, 72, 89, 95, 97, 144, 151, 159, 180, 186, 203, 204, 211, 215, 233, 234, 241, 258, 260, 261, 265, 289, 302, 305, 329, 332, 333, 336, 337, 339, 340, 341, 344, 346, 347, 350, 364, 366, 367, 373, 383, 384, 387, 390, 392, 402, 403, 405, 407, 408, 409, 410, 412, 415, 416, 417, 433, 439, 440, 441, 443, 445, 446, 447, 449, 460, 461, 463, 464, 478, 479, 480, 481, 483, 485, 493, 505, 508, 517, 520, 527, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 546, 547, 548, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 615, 616, 618, 619, 621, 627, 634, 636, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 668, 669, 670, 671, 672, 673, 674, 682, 683, 684, 685, 687, 688, 689, 691, 695, 715, 730, 758, 763, 764, 765, 766, 768, 769, 770, 772, 773, 794, 797, 798, 808, 821, 824, 825, 826, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 845, 847, 848, 849, 854, 855, 862, 864, 869, 877, 881, 884, 895, 897, 898, 899, 900, 901, 902, 903, 904, 917, 931, 933, 934, 948, 954, 974, 977, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 995, 999, 1001, 1007, 1011, 1014, 1017, 1020, 1022, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1038, 1040], "gradientboostingregressor": [7, 124, 125, 131, 134, 364, 383, 390, 550, 558, 628, 629, 981, 985, 986, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "forward": [7, 111, 148, 235, 317, 364, 378, 396, 414, 504, 505, 535, 539, 549, 555, 556, 581, 582, 598, 681, 682, 857, 861, 981, 1006, 1039], "wise": [7, 26, 48, 159, 200, 228, 270, 305, 350, 364, 392, 403, 405, 409, 410, 414, 454, 527, 530, 533, 537, 541, 542, 545, 546, 549, 551, 552, 555, 556, 588, 591, 592, 594, 595, 596, 602, 636, 648, 696, 749, 825, 874, 887, 888, 891, 958, 960, 961, 962, 963, 966, 977, 979, 981, 985, 986, 999, 1006, 1027, 1032, 1035, 1036, 1037], "fashion": [7, 116, 122, 207, 269, 365, 392, 402, 403, 405, 410, 412, 549, 553, 554, 555, 556, 560, 561, 562, 598, 623, 823, 846, 861, 864, 870, 881, 905, 906, 907, 908, 956, 975, 981, 985, 995, 1036], "notic": [7, 25, 26, 34, 53, 57, 80, 114, 116, 117, 124, 147, 178, 183, 228, 241, 257, 258, 260, 261, 263, 269, 270, 283, 310, 340, 349, 350, 351, 360, 383, 393, 409, 492, 537, 559, 974, 984, 985, 991, 1020, 1024, 1040], "faster": [7, 19, 39, 64, 73, 95, 116, 117, 121, 124, 148, 170, 175, 185, 199, 201, 214, 215, 217, 234, 283, 285, 301, 316, 318, 319, 349, 350, 351, 364, 372, 378, 386, 387, 392, 404, 405, 410, 414, 415, 417, 439, 443, 445, 447, 448, 449, 458, 504, 527, 528, 529, 532, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 549, 555, 556, 557, 558, 639, 642, 643, 648, 649, 654, 655, 656, 657, 658, 659, 668, 670, 680, 683, 687, 691, 721, 751, 773, 774, 775, 837, 838, 842, 854, 855, 872, 874, 876, 886, 890, 934, 954, 974, 978, 981, 986, 988, 989, 992, 997, 999, 1000, 1001, 1005, 1008, 1016, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "10_000": [7, 25, 75, 116, 124, 168, 175, 232, 263, 283, 555, 556, 560, 561, 874], "vari": [7, 34, 44, 46, 55, 62, 75, 117, 118, 120, 147, 166, 169, 170, 188, 190, 193, 197, 225, 233, 238, 250, 256, 260, 263, 298, 303, 305, 310, 321, 323, 330, 336, 339, 360, 364, 366, 373, 392, 437, 441, 442, 496, 504, 510, 511, 518, 555, 556, 560, 561, 642, 643, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 677, 680, 699, 758, 813, 816, 821, 823, 824, 854, 858, 862, 877, 894, 902, 905, 906, 959, 977, 980, 981, 985, 988, 989, 998, 1001, 1009, 1034, 1035, 1043], "relev": [7, 9, 19, 77, 83, 146, 148, 166, 178, 193, 260, 261, 267, 360, 364, 366, 373, 375, 377, 378, 380, 382, 383, 384, 392, 393, 396, 407, 408, 414, 415, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 537, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 721, 735, 751, 795, 796, 797, 798, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 875, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 985, 986, 991, 1002, 1006, 1030, 1035, 1039, 1041], "ham": [7, 446, 453, 577, 695, 699, 705, 729, 736, 773, 774, 775, 791, 988], "loss": [7, 24, 25, 26, 27, 117, 122, 123, 124, 125, 126, 151, 152, 166, 177, 181, 189, 192, 201, 203, 204, 206, 207, 211, 217, 218, 234, 268, 300, 301, 310, 318, 328, 333, 334, 338, 340, 344, 349, 390, 392, 403, 404, 410, 415, 460, 461, 492, 504, 505, 528, 534, 535, 536, 539, 543, 548, 549, 550, 554, 555, 556, 557, 558, 561, 639, 642, 645, 654, 655, 662, 663, 664, 665, 666, 667, 668, 672, 673, 674, 675, 699, 702, 705, 718, 729, 730, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 785, 786, 791, 794, 797, 798, 808, 819, 820, 823, 854, 855, 857, 858, 861, 862, 870, 871, 872, 877, 897, 898, 903, 904, 906, 908, 934, 938, 978, 981, 989, 993, 998, 999, 1000, 1001, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "eustach": [7, 8, 10, 1009, 1029, 1030], "diemert": [7, 8, 10, 1009, 1029, 1030], "maria": [7, 125, 131, 148, 164, 405, 1038, 1039, 1040, 1041, 1042], "telenczuk": [7, 125, 131, 148, 164, 1036, 1039, 1040, 1042], "github": [7, 8, 12, 26, 71, 72, 116, 118, 119, 125, 127, 128, 131, 134, 145, 156, 164, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 283, 302, 311, 316, 317, 319, 320, 326, 358, 372, 376, 377, 381, 382, 383, 384, 386, 390, 392, 393, 395, 399, 401, 448, 458, 504, 532, 687, 688, 691, 988, 1004, 1005, 1008, 1009, 1020, 1032, 1037], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 122, 123, 125, 126, 130, 131, 151, 154, 156, 158, 160, 164, 179, 199, 201, 206, 216, 217, 221, 223, 225, 231, 245, 247, 248, 261, 264, 283, 305, 306, 309, 310, 349, 350, 372, 373, 376, 378, 382, 383, 384, 386, 390, 395, 401, 405, 438, 448, 458, 504, 530, 532, 537, 667, 687, 691, 701, 988, 1003, 1008, 1032, 1034, 1037], "maikia": [7, 125, 131, 164, 1035, 1036, 1038, 1039], "lemaitre58": [7, 131, 151, 156, 158, 160, 221, 305], "gmail": [7, 11, 14, 16, 24, 42, 48, 57, 65, 70, 71, 109, 111, 112, 113, 114, 115, 116, 122, 123, 125, 126, 130, 131, 151, 154, 156, 158, 160, 179, 199, 201, 216, 217, 221, 223, 231, 245, 247, 248, 261, 264, 305, 310, 349, 350], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 57, 61, 65, 66, 67, 70, 71, 73, 74, 75, 82, 89, 90, 95, 97, 99, 100, 101, 102, 103, 106, 109, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 130, 131, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 261, 264, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 324, 325, 326, 327, 329, 340, 341, 344, 345, 349, 350, 351, 372, 392, 399, 1001, 1009], "hamming_loss": [7, 699, 791, 985, 1029, 1033, 1036], "mean_squared_error": [7, 124, 125, 195, 199, 201, 203, 205, 217, 360, 412, 747, 985, 1028, 1030, 1037, 1038, 1044], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 57, 59, 60, 64, 65, 71, 78, 79, 80, 92, 96, 101, 102, 114, 120, 140, 143, 171, 189, 194, 197, 202, 205, 208, 212, 216, 223, 246, 248, 249, 250, 251, 263, 266, 274, 288, 289, 290, 295, 341, 342, 346, 350, 360, 365, 380, 387, 390, 392, 405, 409, 410, 439, 443, 444, 446, 448, 453, 455, 456, 457, 458, 467, 468, 469, 532, 540, 549, 550, 551, 552, 555, 556, 623, 642, 643, 648, 649, 656, 657, 658, 659, 673, 685, 687, 689, 691, 792, 793, 798, 828, 831, 846, 900, 920, 933, 934, 950, 954, 974, 975, 980, 982, 1018, 1031, 1032, 1036, 1037, 1043], "fetch_20newsgroups_vector": [7, 214, 232, 373, 1027, 1037, 1039], "spars": [7, 12, 13, 17, 39, 40, 54, 55, 57, 77, 83, 94, 107, 116, 129, 166, 177, 194, 198, 215, 218, 232, 234, 261, 283, 316, 320, 348, 351, 352, 358, 364, 370, 372, 373, 374, 378, 380, 381, 382, 383, 390, 391, 392, 405, 406, 412, 413, 415, 416, 420, 427, 434, 436, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 453, 455, 456, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 483, 484, 485, 492, 493, 499, 504, 519, 520, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 577, 578, 581, 582, 584, 585, 586, 587, 589, 590, 599, 600, 601, 602, 603, 604, 605, 625, 626, 627, 629, 634, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 708, 709, 710, 724, 725, 726, 729, 733, 734, 735, 749, 750, 755, 756, 758, 759, 761, 762, 763, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 782, 787, 788, 791, 794, 797, 798, 808, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 913, 915, 916, 917, 918, 923, 931, 934, 935, 938, 939, 940, 948, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 971, 975, 978, 981, 982, 983, 985, 986, 988, 998, 1000, 1001, 1006, 1007, 1018, 1019, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "generate_data": [7, 33], "load_diabet": [7, 125, 134, 137, 148, 164, 184, 186, 187, 188, 195, 196, 239, 256, 320, 412, 554, 558, 564, 669, 697, 818, 819, 820, 906, 908, 993, 1015, 1018, 1033, 1038, 1041], "elif": [7, 8, 16, 179, 201, 236, 247, 288, 873], "subset": [7, 19, 20, 26, 27, 32, 70, 71, 80, 81, 118, 120, 121, 137, 145, 148, 170, 172, 188, 200, 214, 215, 216, 217, 231, 233, 237, 238, 258, 261, 263, 269, 270, 272, 278, 310, 311, 317, 324, 328, 349, 350, 351, 360, 373, 378, 386, 390, 392, 402, 403, 405, 406, 409, 412, 413, 415, 422, 433, 445, 460, 462, 463, 465, 484, 485, 488, 489, 493, 504, 545, 546, 547, 549, 551, 552, 553, 555, 557, 558, 559, 560, 563, 565, 598, 606, 625, 635, 636, 637, 638, 647, 651, 654, 662, 663, 664, 667, 670, 671, 672, 673, 674, 675, 693, 699, 700, 709, 712, 714, 726, 729, 750, 752, 788, 791, 796, 821, 823, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 844, 847, 854, 863, 892, 893, 897, 899, 902, 905, 907, 913, 954, 974, 981, 985, 986, 996, 998, 1000, 1001, 1020, 1030, 1035, 1036, 1038, 1040], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 59, 80, 109, 110, 111, 115, 132, 135, 164, 166, 172, 195, 203, 204, 216, 233, 235, 259, 260, 266, 270, 274, 281, 334, 340, 341, 360, 364, 385, 392, 402, 403, 405, 409, 410, 412, 416, 434, 437, 439, 440, 441, 442, 444, 446, 447, 449, 451, 452, 467, 468, 474, 477, 532, 543, 549, 560, 565, 593, 607, 616, 628, 629, 630, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 675, 677, 680, 684, 686, 688, 690, 703, 712, 724, 725, 730, 731, 733, 739, 745, 746, 749, 759, 764, 766, 767, 768, 769, 773, 776, 778, 779, 782, 783, 784, 787, 788, 790, 801, 803, 818, 822, 835, 837, 838, 875, 876, 877, 883, 887, 897, 898, 923, 936, 977, 979, 981, 982, 983, 985, 987, 988, 989, 993, 995, 998, 1000, 1015, 1018, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "given": [7, 10, 11, 27, 30, 37, 49, 58, 60, 78, 85, 96, 100, 117, 127, 129, 131, 151, 158, 169, 170, 183, 199, 200, 203, 217, 221, 228, 232, 233, 235, 237, 238, 239, 256, 260, 261, 262, 263, 269, 286, 289, 290, 291, 307, 311, 318, 349, 350, 351, 357, 364, 366, 373, 377, 378, 380, 382, 384, 386, 387, 390, 392, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 422, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 452, 454, 455, 456, 457, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 479, 480, 483, 492, 497, 499, 501, 519, 529, 530, 532, 534, 535, 536, 539, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 589, 590, 597, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 627, 628, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 683, 684, 686, 687, 693, 694, 695, 696, 697, 698, 700, 701, 702, 708, 710, 713, 714, 716, 719, 721, 722, 729, 731, 732, 735, 747, 750, 751, 753, 754, 759, 769, 773, 776, 777, 779, 782, 783, 784, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 806, 808, 812, 816, 818, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 883, 884, 886, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 921, 922, 923, 941, 942, 943, 944, 969, 973, 974, 977, 979, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 998, 999, 1000, 1001, 1009, 1011, 1015, 1016, 1018, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "round": [7, 9, 25, 85, 117, 163, 164, 206, 217, 260, 266, 307, 309, 349, 392, 446, 452, 453, 560, 561, 589, 590, 593, 623, 688, 709, 796, 806, 862, 894, 909, 911, 975, 989, 1001, 1029, 1031, 1033, 1035, 1036, 1038, 1040, 1041, 1043], "changing_param": 7, "collect": [7, 10, 12, 16, 19, 25, 115, 127, 134, 148, 156, 164, 172, 187, 192, 223, 231, 263, 267, 350, 351, 364, 373, 375, 382, 395, 404, 409, 410, 412, 413, 442, 460, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 565, 566, 577, 579, 580, 584, 585, 586, 587, 628, 796, 800, 801, 803, 816, 943, 956, 959, 974, 980, 981, 985, 991, 996, 1006, 1009, 1015, 1020, 1029, 1039], "chang": [7, 16, 25, 26, 95, 99, 100, 114, 117, 125, 152, 163, 168, 169, 172, 200, 201, 203, 204, 239, 240, 255, 260, 267, 270, 309, 315, 316, 317, 318, 319, 320, 321, 325, 336, 340, 351, 358, 360, 364, 365, 366, 373, 380, 381, 382, 383, 386, 390, 392, 396, 405, 409, 412, 413, 415, 417, 430, 433, 436, 439, 440, 443, 445, 448, 450, 455, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 489, 490, 492, 500, 504, 505, 508, 509, 510, 518, 522, 527, 529, 530, 531, 532, 533, 534, 535, 536, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 578, 584, 585, 586, 587, 589, 590, 593, 598, 606, 607, 609, 610, 611, 613, 615, 616, 618, 619, 621, 623, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 686, 688, 696, 700, 703, 708, 712, 713, 724, 725, 731, 732, 736, 750, 751, 752, 773, 779, 780, 782, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 803, 808, 812, 813, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 869, 870, 876, 877, 878, 885, 886, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 915, 917, 918, 929, 934, 944, 951, 952, 953, 955, 974, 975, 976, 984, 985, 986, 988, 995, 998, 999, 1000, 1001, 1003, 1006, 1011, 1018, 1020, 1025, 1026], "affect": [7, 25, 80, 158, 168, 169, 203, 224, 238, 239, 263, 270, 310, 321, 360, 364, 365, 366, 374, 392, 394, 403, 405, 408, 409, 411, 413, 416, 418, 440, 446, 453, 469, 471, 475, 545, 546, 565, 695, 708, 783, 794, 797, 798, 799, 808, 812, 813, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 877, 878, 888, 902, 984, 988, 1000, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 382, 403, 409, 832, 987, 1041], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 16, 17, 25, 33, 37, 40, 44, 50, 61, 71, 103, 114, 115, 117, 122, 124, 138, 164, 172, 192, 203, 204, 206, 207, 214, 217, 233, 234, 260, 263, 269, 270, 273, 281, 299, 300, 311, 327, 336, 339, 349, 350, 351, 354, 358, 384, 392, 406, 413, 654, 655, 897, 898, 904, 924, 995, 1015], "start_tim": [7, 10, 19, 118, 119, 131, 151, 188, 221], "elapsed_tim": [7, 39, 67, 118, 119, 131, 216], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 60, 61, 65, 66, 67, 71, 98, 102, 140, 159, 169, 185, 189, 223, 259, 260, 264, 268, 344, 351, 364, 372, 373, 378, 387, 392, 405, 406, 413, 414, 416, 417, 418, 422, 424, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 488, 489, 490, 492, 494, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 579, 580, 584, 587, 588, 589, 590, 591, 592, 593, 594, 598, 599, 606, 607, 609, 610, 611, 612, 613, 615, 616, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 754, 761, 764, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 808, 811, 814, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 860, 863, 864, 870, 871, 873, 875, 877, 878, 879, 880, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 915, 917, 918, 921, 931, 932, 948, 960, 966, 971, 975, 985, 986, 988, 989, 995, 1000, 1001, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 114, 123, 125, 214, 215, 217, 310], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 68, 94, 107, 128, 166, 198, 235, 350, 351, 371, 372, 373, 380, 390, 392, 405, 413, 445, 460, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 506, 522, 527, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 563, 564, 565, 566, 577, 578, 580, 583, 584, 585, 628, 629, 630, 660, 681, 682, 697, 709, 794, 797, 798, 805, 806, 808, 820, 856, 861, 870, 905, 906, 907, 908, 912, 922, 942, 945, 974, 981, 985, 1000, 1011, 1020, 1021, 1022, 1027, 1035, 1038, 1039, 1040, 1041, 1042], "necessari": [7, 13, 115, 183, 199, 204, 245, 260, 261, 267, 285, 340, 356, 364, 373, 376, 377, 378, 379, 380, 381, 382, 386, 390, 405, 407, 412, 448, 458, 484, 485, 487, 488, 489, 490, 491, 493, 530, 640, 641, 642, 648, 652, 653, 656, 657, 658, 659, 660, 661, 667, 669, 671, 672, 687, 691, 790, 860, 869, 880, 884, 890, 974, 977, 981, 984, 987, 995, 1001, 1020, 1027, 1035], "defin": [7, 12, 34, 53, 55, 57, 66, 70, 71, 73, 86, 95, 100, 109, 111, 112, 131, 148, 151, 158, 159, 160, 170, 171, 172, 178, 200, 207, 216, 217, 228, 232, 235, 239, 241, 245, 250, 260, 261, 263, 267, 269, 270, 271, 272, 278, 283, 302, 305, 316, 336, 340, 344, 349, 350, 364, 374, 377, 378, 379, 380, 384, 385, 387, 390, 391, 392, 399, 400, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 421, 426, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 455, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 485, 515, 516, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 623, 624, 625, 626, 628, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 692, 693, 695, 704, 706, 712, 717, 718, 719, 720, 723, 726, 733, 736, 740, 741, 743, 745, 746, 748, 749, 752, 755, 761, 776, 780, 785, 786, 787, 788, 792, 793, 794, 797, 798, 800, 808, 816, 820, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 884, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 921, 923, 926, 932, 943, 945, 969, 974, 975, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1006, 1016, 1019, 1022, 1024, 1029, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 69, 70, 76, 81, 90, 105, 120, 123, 156, 166, 168, 169, 170, 175, 183, 199, 201, 235, 242, 244, 247, 250, 252, 255, 266, 267, 269, 270, 278, 340, 349, 351, 358, 360, 365, 367, 371, 372, 373, 375, 376, 378, 379, 381, 382, 383, 384, 390, 391, 395, 399, 401, 402, 406, 413, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 492, 504, 505, 511, 563, 568, 577, 578, 581, 582, 584, 585, 587, 596, 600, 613, 623, 625, 626, 634, 652, 654, 668, 670, 675, 683, 685, 688, 689, 695, 697, 703, 710, 712, 724, 725, 733, 736, 778, 779, 782, 783, 792, 793, 794, 800, 808, 816, 821, 823, 824, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 857, 858, 859, 862, 864, 870, 871, 877, 878, 895, 899, 900, 901, 902, 903, 913, 915, 917, 918, 921, 925, 926, 948, 949, 956, 959, 972, 975, 977, 982, 984, 985, 986, 987, 988, 989, 995, 997, 1001, 1008, 1009, 1013, 1018, 1019, 1020, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 85, 144, 145, 148, 168, 169, 178, 181, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 198, 202, 203, 204, 208, 214, 215, 236, 242, 273, 312, 319, 334, 341, 345, 349, 360, 373, 380, 392, 408, 414, 461, 478, 479, 480, 545, 589, 590, 593, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 897, 898, 899, 900, 901, 902, 903, 969, 979, 981, 999, 1000, 1018, 1027, 1029, 1032, 1034, 1039, 1041, 1044], "toarrai": [7, 328, 358, 406, 413, 562, 578, 584, 586, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 870, 887, 888, 956, 959, 975, 988, 995], "count_nonzero": [7, 10, 364], "configur": [7, 10, 71, 72, 170, 240, 242, 312, 349, 363, 376, 378, 380, 384, 386, 390, 392, 395, 396, 401, 404, 406, 413, 414, 429, 438, 439, 441, 443, 445, 448, 458, 460, 464, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 622, 623, 624, 625, 626, 628, 631, 634, 635, 636, 637, 638, 684, 685, 686, 687, 688, 690, 691, 783, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 895, 951, 952, 953, 982, 985, 995, 1000, 1005, 1020, 1022, 1031, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "penalti": [7, 10, 30, 82, 166, 177, 178, 183, 188, 192, 199, 203, 214, 215, 218, 230, 268, 299, 318, 328, 341, 349, 364, 386, 390, 404, 407, 410, 414, 467, 468, 469, 470, 471, 472, 474, 498, 527, 533, 534, 535, 536, 538, 539, 543, 544, 593, 639, 642, 643, 644, 645, 648, 649, 650, 653, 654, 655, 656, 657, 658, 664, 665, 666, 668, 672, 674, 676, 677, 683, 808, 877, 897, 898, 900, 902, 903, 904, 974, 981, 984, 989, 995, 999, 1000, 1018, 1020, 1029, 1032, 1034, 1036, 1037, 1039, 1040, 1042, 1043], "elasticnet": [7, 10, 180, 190, 268, 273, 364, 384, 390, 410, 643, 648, 653, 654, 655, 656, 657, 658, 659, 664, 672, 674, 677, 981, 999, 1027, 1028, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041], "001": [7, 13, 32, 44, 62, 148, 151, 169, 183, 208, 228, 238, 245, 258, 260, 262, 327, 350, 375, 384, 409, 532, 533, 535, 542, 623, 640, 641, 642, 643, 648, 649, 656, 657, 658, 659, 662, 663, 664, 672, 673, 674, 675, 677, 680, 685, 686, 689, 690, 792, 793, 854, 855, 892, 893, 899, 900, 901, 902, 903, 974, 1011, 1020], "modified_hub": [7, 672, 999], "fit_intercept": [7, 178, 179, 185, 204, 213, 228, 268, 312, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 897, 898, 904, 981, 999, 1031, 1035, 1036, 1037, 1039, 1040, 1041], "tol": [7, 10, 17, 73, 95, 122, 148, 163, 179, 190, 192, 206, 207, 213, 215, 228, 239, 246, 248, 302, 318, 344, 349, 380, 384, 412, 417, 439, 443, 445, 448, 455, 458, 467, 468, 474, 478, 479, 480, 527, 528, 529, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 546, 555, 556, 557, 558, 598, 623, 634, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 668, 670, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 687, 689, 691, 792, 793, 808, 846, 854, 855, 892, 893, 897, 898, 899, 900, 901, 902, 903, 971, 981, 999, 1000, 1016, 1020, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "n_iter_no_chang": [7, 117, 122, 207, 318, 349, 383, 392, 412, 555, 556, 557, 558, 662, 663, 664, 672, 673, 674, 854, 855, 999, 1035, 1038], "l1_ratio": [7, 10, 14, 183, 184, 190, 268, 273, 364, 390, 410, 534, 536, 543, 642, 643, 648, 654, 655, 656, 657, 658, 659, 664, 672, 674, 677, 981, 999, 1028, 1030, 1032, 1039, 1041], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 58, 60, 78, 79, 82, 95, 98, 145, 166, 167, 168, 173, 177, 183, 184, 185, 186, 190, 192, 193, 194, 195, 196, 197, 201, 202, 214, 217, 218, 242, 301, 312, 317, 318, 319, 340, 344, 349, 350, 351, 364, 374, 378, 380, 392, 394, 404, 407, 408, 410, 414, 415, 418, 428, 448, 461, 463, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 492, 520, 522, 523, 527, 531, 533, 535, 538, 539, 544, 548, 550, 552, 554, 556, 558, 561, 564, 566, 578, 585, 589, 593, 605, 607, 610, 623, 631, 632, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 697, 699, 712, 715, 724, 729, 733, 738, 745, 748, 770, 772, 780, 781, 787, 788, 791, 809, 820, 823, 830, 831, 840, 848, 855, 858, 870, 877, 897, 898, 899, 900, 901, 902, 903, 906, 908, 976, 979, 981, 999, 1000, 1018, 1027, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1044], "misclassif": [7, 111, 340, 791, 999, 1000, 1001, 1028], "ratio": [7, 53, 66, 73, 104, 166, 232, 234, 248, 253, 276, 364, 378, 405, 407, 409, 412, 446, 452, 489, 490, 511, 537, 545, 546, 547, 627, 654, 706, 708, 712, 720, 725, 731, 734, 777, 778, 779, 782, 790, 820, 823, 843, 890, 954, 979, 991, 1001, 1016, 1042, 1044], "sparsifi": [7, 183, 364, 654, 655, 662, 663, 664, 672, 673, 674, 897, 969, 1029], "05": [7, 8, 14, 15, 24, 26, 28, 37, 44, 52, 60, 62, 64, 65, 67, 68, 75, 85, 91, 100, 114, 117, 122, 124, 129, 137, 141, 144, 148, 156, 159, 160, 165, 169, 173, 179, 180, 198, 201, 213, 218, 222, 224, 225, 228, 238, 245, 247, 248, 251, 252, 260, 261, 269, 271, 276, 288, 291, 296, 305, 307, 315, 319, 325, 327, 330, 341, 347, 352, 375, 414, 446, 452, 527, 588, 591, 592, 594, 609, 610, 611, 615, 616, 618, 619, 621, 628, 629, 645, 686, 690, 751, 794, 846, 897, 898, 981, 989, 995], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 55, 60, 61, 62, 63, 64, 65, 70, 72, 98, 101, 105, 106, 109, 114, 117, 120, 121, 122, 139, 140, 146, 147, 151, 159, 164, 170, 172, 198, 199, 217, 223, 228, 231, 232, 233, 235, 237, 238, 245, 247, 248, 255, 258, 260, 261, 268, 269, 271, 274, 281, 283, 290, 292, 293, 299, 306, 307, 308, 311, 321, 324, 325, 328, 336, 343, 346, 349, 350, 351, 358, 390, 392, 415, 433, 441, 446, 452, 460, 503, 511, 546, 565, 566, 578, 593, 628, 629, 777, 794, 808, 819, 823, 825, 827, 828, 878, 892, 893, 1018, 1019, 1020, 1036, 1039], "support_vectors_": [7, 10, 16, 337, 340, 341, 899, 900, 901, 902, 903, 1000], "squared_error": [7, 105, 124, 125, 318, 412, 554, 555, 556, 558, 561, 667, 672, 674, 689, 906, 908, 999, 1001, 1040, 1043, 1044], "learning_r": [7, 111, 123, 124, 125, 126, 225, 283, 300, 302, 316, 318, 412, 549, 550, 555, 556, 557, 558, 664, 672, 673, 674, 688, 853, 854, 855, 982, 992, 999, 1028, 1036, 1040], "max_depth": [7, 31, 112, 113, 116, 120, 123, 124, 125, 126, 129, 130, 132, 163, 221, 257, 272, 278, 317, 318, 354, 356, 357, 358, 391, 392, 412, 549, 550, 553, 554, 555, 556, 557, 558, 560, 561, 562, 797, 798, 821, 905, 906, 907, 908, 909, 910, 911, 974, 992, 1001, 1036, 1038], "n_estim": [7, 10, 26, 31, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 129, 130, 133, 163, 172, 221, 237, 241, 247, 257, 272, 307, 315, 317, 364, 391, 392, 412, 414, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 628, 797, 798, 974, 991, 992, 1024, 1035, 1043], "n_tree": 7, "loop": [7, 8, 114, 124, 169, 255, 265, 349, 358, 364, 378, 379, 384, 405, 409, 414, 642, 643, 648, 649, 655, 656, 657, 658, 659, 974, 998, 999, 1015, 1030, 1031, 1034, 1039, 1040, 1043], "previous": [7, 53, 57, 71, 111, 157, 169, 258, 267, 319, 373, 386, 390, 395, 405, 410, 413, 436, 439, 450, 520, 530, 537, 645, 654, 655, 662, 663, 664, 672, 673, 674, 897, 953, 981, 995, 1005, 1024, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "subsequ": [7, 32, 58, 75, 98, 111, 145, 187, 201, 262, 265, 283, 285, 336, 360, 378, 380, 384, 392, 405, 406, 412, 415, 433, 492, 504, 549, 550, 555, 557, 558, 662, 664, 672, 797, 798, 825, 826, 829, 832, 833, 834, 835, 836, 854, 872, 876, 975, 984, 986, 1036, 1037, 1041, 1043], "relax": [7, 405, 413, 449, 998, 1034], "sgd": [7, 8, 166, 177, 206, 213, 218, 228, 268, 300, 301, 318, 349, 360, 366, 500, 508, 627, 645, 662, 663, 664, 667, 672, 673, 674, 675, 854, 855, 974, 989, 1007, 1022, 1027, 1030, 1031, 1032, 1034, 1038, 1040], "svr": [7, 10, 166, 227, 243, 315, 331, 347, 364, 552, 563, 564, 589, 590, 639, 674, 794, 800, 898, 900, 902, 978, 1018, 1027, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "optim": [7, 13, 27, 53, 54, 57, 60, 72, 78, 79, 95, 123, 125, 147, 148, 151, 152, 155, 156, 157, 158, 159, 183, 187, 188, 192, 207, 215, 234, 238, 258, 265, 268, 273, 278, 281, 287, 302, 305, 310, 319, 327, 338, 344, 349, 350, 351, 360, 364, 367, 372, 375, 378, 380, 381, 390, 392, 395, 400, 402, 405, 407, 409, 410, 412, 414, 415, 416, 440, 444, 445, 446, 448, 453, 457, 458, 468, 469, 475, 527, 530, 531, 533, 535, 539, 553, 554, 555, 556, 570, 606, 607, 615, 616, 631, 634, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 680, 683, 686, 688, 690, 691, 697, 718, 725, 794, 808, 839, 840, 841, 843, 845, 846, 847, 848, 849, 854, 855, 873, 885, 889, 890, 897, 898, 899, 900, 901, 902, 903, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 999, 1000, 1001, 1005, 1009, 1015, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043], "few": [7, 14, 19, 39, 46, 52, 99, 121, 154, 157, 158, 188, 197, 199, 201, 217, 234, 235, 245, 262, 263, 267, 301, 305, 309, 315, 316, 317, 318, 319, 320, 321, 324, 344, 351, 364, 373, 374, 375, 378, 380, 391, 393, 396, 399, 402, 403, 405, 409, 410, 412, 414, 415, 433, 445, 557, 558, 584, 587, 651, 688, 691, 890, 934, 953, 981, 982, 984, 985, 988, 989, 998, 1000, 1001, 1009, 1011, 1018, 1019, 1020, 1033, 1043], "drawn": [7, 52, 80, 114, 147, 151, 160, 168, 239, 267, 287, 349, 374, 405, 411, 412, 415, 417, 465, 466, 467, 468, 469, 470, 471, 472, 511, 519, 529, 551, 552, 559, 607, 623, 628, 637, 833, 889, 890, 907, 908, 981, 995, 997, 1030], "boost": [7, 110, 111, 112, 116, 128, 131, 134, 135, 166, 311, 384, 392, 404, 414, 444, 462, 463, 486, 492, 497, 500, 511, 516, 549, 550, 555, 556, 557, 558, 560, 561, 628, 629, 630, 631, 736, 737, 743, 745, 794, 797, 798, 799, 820, 823, 858, 870, 871, 981, 985, 1005, 1007, 1022, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1040], "detriment": [7, 147, 365, 414, 981], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 57, 60, 65, 67, 73, 75, 80, 92, 121, 164, 172, 199, 229, 231, 239, 245, 263, 271, 306, 310, 311, 327, 349, 350, 1016], "add_subplot": [7, 16, 25, 27, 42, 45, 64, 67, 90, 101, 102, 170, 196, 214, 222, 224, 324, 325, 385], "line1": [7, 12, 223], "tab": [7, 9, 34, 53, 80, 111, 128, 131, 151, 156, 158, 187, 188, 316, 406, 1034], "blue": [7, 9, 20, 21, 26, 34, 80, 92, 95, 111, 114, 118, 126, 128, 131, 133, 146, 156, 158, 175, 179, 187, 188, 195, 197, 223, 232, 254, 255, 260, 300, 310, 316, 326, 375, 405, 410, 1044], "set_xlabel": [7, 10, 45, 53, 60, 72, 73, 75, 90, 92, 100, 160, 163, 164, 168, 170, 171, 172, 175, 188, 194, 196, 197, 199, 201, 214, 215, 233, 260, 262, 266, 271, 272, 275, 278, 288, 305, 306, 310, 327, 350, 351, 354], "y1_label": 7, "set_ylabel": [7, 8, 10, 30, 34, 45, 53, 60, 65, 72, 73, 75, 80, 90, 92, 100, 106, 111, 118, 160, 170, 175, 188, 190, 194, 196, 197, 199, 201, 203, 214, 233, 245, 260, 262, 266, 271, 272, 281, 288, 305, 306, 310, 315, 327, 344, 350, 354, 1016], "spine": [7, 14, 34, 210, 305], "set_color": [7, 210], "get_color": 7, "yaxi": [7, 10, 45, 60, 90, 101, 102, 117, 196, 220, 222, 225, 245, 283, 288, 349], "tick_param": [7, 14, 134, 245, 260, 309, 327], "ax2": [7, 57, 60, 65, 67, 80, 92, 121, 164, 172, 199, 229, 239, 245, 263, 271, 293, 306, 310, 311, 327, 349], "frameon": [7, 205], "line2": [7, 12, 223, 345], "orang": [7, 9, 53, 80, 92, 96, 97, 103, 111, 126, 128, 158, 164, 187, 188, 209, 236, 248, 294, 316, 357, 986, 1044], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 61, 163, 199, 201, 235, 238, 242, 255, 262, 307, 328, 349, 350, 351, 385, 390, 870], "prediction_perform": 7, "4948": 7, "2675": 7, "059985": 7, "1847": 7, "3264": 7, "047426": 7, "997": [7, 40, 148], "3383": 7, "038171": 7, "802": [7, 148, 375], "3582": 7, "035098": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000184": 7, "5289": 7, "8022": [7, 392, 469, 1036], "000259": 7, "5193": 7, "8353": 7, "000421": 7, "124": [7, 242, 243, 412, 1029], "5131": [7, 1032], "3279": 7, "000647": 7, "178": [7, 90, 93, 196, 218, 375, 384, 506, 841], "5149": 7, "0779": 7, "000888": 7, "4066": 7, "4812": 7, "000170": 7, "3551": 7, "1723": 7, "000186": 7, "3445": 7, "2171": 7, "000232": 7, "3433": 7, "0358": 7, "000264": 7, "3456": 7, "0602": 7, "000299": 7, "deduc": 7, "guarante": [7, 8, 80, 81, 169, 207, 232, 281, 283, 305, 350, 360, 366, 372, 386, 387, 405, 409, 410, 413, 442, 532, 641, 654, 655, 664, 668, 670, 672, 674, 683, 690, 811, 814, 837, 838, 875, 877, 890, 891, 904, 977, 981, 982, 984, 988, 993, 997, 1001, 1019, 1037], "aspect": [7, 58, 86, 95, 155, 170, 220, 228, 269, 292, 342, 364, 365, 366, 378, 392, 393, 405, 654, 655, 1001, 1009, 1044], "416": [7, 15, 350, 734, 985], "plot_model_complexity_influ": [7, 15], "doesn": [8, 199, 235, 246, 301, 336, 386, 392, 395, 396, 405, 413, 414, 418, 430, 471, 628, 629, 662, 664, 672, 712, 821, 824, 829, 839, 840, 854, 866, 867, 984, 985, 1001, 1031], "t": [8, 11, 12, 16, 17, 26, 34, 39, 40, 42, 43, 44, 52, 54, 58, 70, 72, 78, 79, 80, 82, 85, 92, 96, 97, 101, 103, 105, 106, 111, 114, 115, 122, 123, 124, 125, 126, 130, 131, 148, 152, 154, 155, 156, 159, 160, 166, 169, 170, 171, 172, 178, 180, 183, 186, 193, 196, 197, 198, 199, 200, 217, 219, 221, 222, 223, 224, 226, 235, 236, 246, 249, 251, 259, 260, 283, 295, 296, 301, 315, 318, 319, 321, 324, 325, 327, 332, 333, 336, 337, 341, 349, 350, 351, 357, 358, 360, 364, 365, 372, 373, 375, 378, 380, 382, 384, 386, 390, 391, 392, 395, 396, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 418, 422, 428, 430, 433, 443, 444, 446, 452, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 491, 492, 509, 510, 511, 515, 516, 521, 526, 528, 530, 537, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 586, 587, 590, 603, 604, 606, 607, 623, 624, 626, 627, 628, 629, 631, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 692, 700, 706, 712, 713, 721, 731, 732, 750, 751, 752, 762, 783, 784, 789, 790, 794, 797, 798, 808, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 843, 844, 847, 848, 853, 854, 855, 863, 866, 867, 868, 870, 871, 877, 878, 890, 892, 893, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 934, 949, 974, 979, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 999, 1000, 1001, 1008, 1011, 1018, 1019, 1020, 1021, 1022, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "memori": [8, 54, 71, 72, 99, 122, 169, 170, 285, 311, 315, 317, 319, 320, 349, 350, 351, 365, 366, 372, 378, 381, 387, 392, 406, 409, 410, 413, 416, 417, 437, 438, 439, 440, 441, 442, 443, 445, 446, 450, 453, 455, 464, 469, 475, 492, 499, 504, 529, 530, 531, 534, 551, 552, 553, 554, 559, 560, 561, 577, 578, 584, 585, 587, 642, 643, 644, 648, 649, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 680, 773, 774, 775, 776, 794, 800, 808, 816, 818, 819, 820, 821, 824, 825, 826, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 857, 858, 875, 877, 887, 888, 890, 895, 897, 898, 905, 906, 907, 908, 918, 954, 970, 981, 987, 988, 995, 997, 998, 1000, 1001, 1006, 1009, 1011, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "onlin": [8, 14, 36, 68, 95, 98, 166, 177, 213, 218, 366, 373, 377, 383, 392, 405, 410, 413, 415, 438, 442, 443, 445, 491, 498, 527, 532, 533, 534, 535, 541, 542, 578, 580, 654, 662, 663, 664, 672, 674, 823, 832, 833, 834, 835, 836, 839, 840, 845, 847, 848, 866, 867, 877, 897, 898, 977, 981, 989, 991, 1004, 1007, 1009, 1018, 1022, 1027, 1031, 1032, 1034, 1042], "partial_fit": [8, 50, 95, 235, 319, 366, 380, 392, 405, 410, 438, 445, 530, 532, 533, 534, 585, 593, 654, 655, 662, 663, 664, 672, 673, 674, 825, 826, 829, 830, 832, 833, 834, 835, 836, 853, 854, 855, 866, 867, 877, 897, 981, 987, 989, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "fed": [8, 131, 360, 373, 413, 974, 990, 995, 1038], "batch": [8, 11, 64, 95, 99, 296, 319, 366, 387, 392, 413, 436, 438, 443, 445, 447, 449, 527, 529, 530, 532, 533, 534, 535, 536, 538, 539, 541, 542, 660, 681, 682, 799, 812, 813, 832, 833, 834, 835, 836, 854, 855, 866, 867, 877, 890, 937, 951, 989, 990, 999, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "remain": [8, 25, 27, 71, 111, 118, 123, 125, 147, 169, 199, 203, 215, 245, 258, 262, 266, 269, 402, 405, 406, 407, 409, 413, 442, 460, 463, 511, 512, 517, 524, 530, 566, 606, 607, 758, 764, 796, 797, 798, 799, 802, 804, 832, 833, 834, 836, 938, 974, 975, 984, 985, 989, 995, 1001, 1006, 1029, 1035, 1041], "hashingvector": [8, 351, 366, 413, 485, 584, 586, 1028, 1034, 1035, 1036, 1037, 1040], "where": [8, 11, 12, 13, 16, 17, 19, 20, 24, 25, 26, 32, 53, 55, 57, 80, 86, 92, 95, 98, 101, 105, 106, 111, 113, 115, 117, 121, 122, 124, 128, 145, 148, 151, 157, 160, 164, 169, 178, 183, 191, 200, 203, 208, 209, 210, 212, 216, 217, 220, 222, 223, 228, 229, 232, 235, 236, 238, 240, 251, 256, 257, 260, 262, 266, 267, 269, 271, 272, 278, 302, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 325, 326, 334, 340, 344, 345, 346, 349, 354, 355, 360, 364, 365, 366, 372, 374, 375, 377, 378, 380, 382, 384, 385, 386, 390, 391, 392, 393, 395, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 433, 440, 443, 444, 448, 457, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 492, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 578, 579, 580, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 605, 606, 607, 609, 611, 615, 618, 619, 621, 623, 624, 625, 626, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 684, 687, 688, 689, 692, 703, 708, 712, 720, 724, 725, 726, 734, 750, 758, 763, 764, 765, 768, 776, 777, 778, 779, 782, 787, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 840, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 860, 867, 870, 872, 873, 876, 877, 883, 885, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 925, 926, 927, 928, 934, 942, 945, 970, 974, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1006, 1008, 1011, 1012, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "word": [8, 14, 19, 70, 151, 232, 236, 336, 350, 351, 364, 373, 374, 378, 380, 383, 392, 402, 405, 407, 408, 409, 410, 449, 507, 519, 530, 532, 537, 584, 585, 587, 692, 826, 836, 894, 979, 983, 987, 990, 995, 998, 999, 1009, 1018, 1019, 1027, 1035], "federicov": 8, "itertool": [8, 42, 44, 62, 132, 170, 184, 246, 251, 260, 267, 269, 412], "sy": [8, 12, 16, 19, 207, 232, 283, 328, 351, 373, 390, 613], "tarfil": 8, "hashlib": 8, "sha256": [8, 1042], "htmlparser": 8, "pathlib": [8, 1042, 1043], "path": [8, 16, 17, 166, 177, 184, 188, 218, 354, 372, 376, 378, 382, 386, 387, 392, 437, 441, 446, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 504, 505, 544, 553, 554, 559, 560, 561, 562, 589, 590, 593, 642, 643, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 677, 678, 679, 680, 681, 682, 684, 857, 858, 904, 905, 906, 907, 908, 939, 974, 981, 982, 991, 1006, 1027, 1028, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1042, 1043], "urllib": [8, 17], "request": [8, 17, 46, 199, 217, 235, 318, 365, 372, 376, 377, 381, 392, 393, 396, 399, 410, 413, 414, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 577, 578, 584, 586, 587, 590, 606, 607, 628, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 695, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 941, 942, 944, 985, 988, 1020, 1033, 1034, 1035, 1044], "urlretriev": 8, "rcparam": [8, 228, 233, 312], "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 66, 70, 98, 166, 261, 328, 348, 349, 350, 351, 366, 367, 373, 405, 406, 413, 460, 540, 870, 983, 1019, 1020, 1027, 1028, 1029, 1030, 1033, 1034, 1044], "passiveaggressiveclassifi": [8, 206, 364, 366, 981, 986, 1028, 1031, 1032, 1034, 1035, 1038, 1040], "perceptron": [8, 166, 206, 209, 215, 239, 298, 303, 366, 390, 413, 510, 511, 518, 662, 672, 823, 853, 854, 855, 858, 877, 983, 986, 990, 999, 1007, 1022, 1031, 1033, 1034, 1035, 1039], "naive_bay": [8, 24, 25, 27, 31, 129, 133, 261, 262, 349, 360, 366, 367, 373, 412, 433, 565, 858, 979, 986, 987, 1020, 1028, 1029, 1031, 1032, 1033, 1034], "multinomialnb": [8, 366, 373, 413, 832, 833, 834, 835, 987, 1020, 1029, 1031, 1034, 1035, 1039, 1040, 1042], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 71, 109, 127, 154, 157, 159, 169, 170, 199, 203, 217, 221, 229, 235, 258, 305, 358, 360, 365, 373, 376, 377, 378, 380, 382, 383, 384, 392, 396, 405, 406, 407, 409, 410, 412, 414, 417, 436, 438, 447, 449, 450, 455, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 487, 488, 492, 493, 499, 504, 505, 510, 518, 523, 527, 528, 533, 534, 535, 536, 538, 541, 542, 544, 548, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 577, 584, 585, 586, 587, 593, 598, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 627, 628, 629, 631, 632, 633, 634, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 686, 690, 691, 693, 694, 696, 698, 700, 708, 737, 756, 762, 769, 773, 777, 784, 794, 797, 798, 799, 800, 808, 812, 813, 816, 817, 820, 821, 823, 826, 828, 831, 832, 833, 834, 836, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 854, 855, 861, 878, 884, 897, 898, 899, 900, 901, 902, 903, 909, 911, 915, 917, 918, 919, 921, 933, 934, 941, 942, 958, 969, 973, 974, 975, 980, 981, 985, 990, 991, 997, 999, 1000, 1009, 1034, 1035, 1036, 1044], "builder": [8, 10, 344, 382], "__file__": [8, 10, 1040], "global": [8, 10, 42, 57, 95, 199, 220, 221, 242, 269, 301, 316, 360, 364, 365, 384, 390, 392, 404, 405, 415, 438, 448, 458, 464, 586, 622, 628, 684, 687, 688, 691, 703, 724, 725, 733, 778, 779, 782, 783, 812, 878, 893, 895, 953, 955, 974, 982, 985, 991, 995, 1001, 1009, 1035, 1042], "21578": [8, 1040], "uci": [8, 148, 310, 372, 375, 496, 498, 500, 506], "ml": [8, 148, 278, 372, 375, 383, 496, 498, 506, 981, 983, 1005, 1006, 1009], "uncompress": [8, 504, 505, 1020], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 56, 61, 89, 109, 111, 131, 199, 201, 207, 215, 222, 231, 235, 237, 248, 266, 268, 283, 307, 315, 327, 336, 340, 349, 365, 367, 372, 373, 376, 378, 379, 380, 381, 390, 391, 392, 401, 405, 406, 409, 410, 413, 433, 439, 440, 443, 445, 449, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 577, 578, 584, 586, 587, 590, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 794, 795, 796, 801, 803, 812, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 980, 983, 985, 986, 995, 996, 1005, 1009, 1012, 1022, 1027, 1028, 1030, 1031, 1033, 1034], "pars": [8, 17, 364, 372, 373, 379, 504], "sgml": [8, 364], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 68, 76, 83, 87, 93, 107, 135, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 322, 330, 347, 349, 350, 352, 359, 364, 366, 372, 373, 375, 376, 378, 382, 383, 384, 386, 390, 399, 406, 410, 483, 489, 490, 492, 499, 504, 505, 530, 575, 576, 584, 585, 587, 909, 988, 1001, 1008, 1012, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043], "yield": [8, 9, 25, 45, 55, 78, 79, 80, 81, 122, 124, 183, 194, 199, 214, 217, 265, 281, 299, 305, 333, 338, 349, 350, 360, 364, 366, 372, 383, 392, 402, 405, 407, 409, 410, 412, 413, 414, 433, 445, 464, 468, 504, 505, 533, 534, 535, 537, 542, 549, 550, 555, 556, 557, 558, 563, 564, 590, 598, 643, 647, 648, 649, 651, 657, 659, 661, 669, 671, 682, 721, 776, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 824, 828, 831, 889, 890, 928, 935, 937, 938, 943, 977, 979, 981, 982, 985, 1000, 1001, 1015, 1032, 1033, 1035, 1038, 1040], "__init__": [8, 16, 56, 109, 159, 235, 283, 336, 378, 380, 382, 383, 384, 385, 392, 413, 419, 946, 1028, 1033, 1035, 1040, 1041, 1042, 1043], "self": [8, 16, 19, 25, 27, 56, 109, 159, 166, 235, 283, 323, 329, 330, 336, 349, 372, 378, 379, 380, 383, 384, 385, 386, 405, 413, 415, 419, 422, 428, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 496, 504, 505, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 699, 792, 793, 794, 795, 796, 797, 798, 801, 803, 808, 812, 813, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 942, 943, 945, 946, 951, 959, 988, 1006, 1007, 1009, 1022, 1029, 1034, 1041], "latin": [8, 413], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 71, 228, 326, 372, 377, 381, 382, 386, 390, 392, 401, 413, 492, 825, 1006, 1008, 1032, 1036, 1037, 1038, 1041, 1042, 1043], "attr": [8, 56], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 70, 148, 239, 320, 375], "topic_d": 8, "fd": 8, "chunk": [8, 50, 364, 365, 405, 410, 416, 440, 445, 464, 534, 773, 776, 825, 826, 832, 833, 834, 835, 836, 895, 987, 1034, 1035, 1036, 1037, 1038], "feed": [8, 86, 200, 351, 373, 383, 390, 405, 413, 737, 870, 986], "decod": [8, 296, 373, 392, 499, 565, 584, 585, 587, 1027, 1028], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 60, 66, 78, 79, 82, 100, 114, 121, 124, 127, 131, 151, 152, 155, 156, 157, 158, 159, 169, 171, 183, 203, 205, 221, 228, 234, 238, 245, 251, 260, 261, 289, 290, 305, 315, 336, 340, 341, 350, 360, 373, 378, 380, 386, 390, 392, 393, 403, 404, 405, 408, 409, 412, 415, 446, 451, 468, 504, 505, 528, 559, 624, 639, 643, 657, 668, 670, 683, 701, 741, 792, 812, 813, 832, 833, 834, 836, 843, 918, 974, 978, 979, 981, 982, 984, 985, 986, 988, 991, 992, 995, 1000, 1005, 1009, 1018, 1030, 1034, 1035, 1036], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 71, 104, 109, 111, 118, 119, 122, 144, 148, 199, 207, 235, 250, 258, 259, 264, 272, 292, 296, 318, 340, 351, 358, 366, 367, 371, 372, 373, 375, 378, 381, 385, 390, 401, 402, 403, 405, 406, 407, 408, 410, 412, 413, 414, 415, 420, 421, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 731, 790, 792, 793, 794, 797, 798, 800, 808, 816, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 912, 946, 969, 979, 981, 986, 988, 989, 991, 995, 998, 999, 1000, 1001, 1009, 1011, 1017, 1020, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "end_reut": 8, "sub": [8, 37, 48, 53, 55, 57, 60, 70, 105, 235, 237, 245, 317, 324, 325, 333, 336, 345, 373, 378, 380, 384, 392, 406, 412, 413, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 532, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 593, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 943, 981, 985, 999, 1020, 1037, 1041, 1043], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 72, 82, 95, 98, 111, 114, 117, 120, 122, 123, 125, 126, 148, 160, 163, 166, 178, 179, 207, 214, 247, 248, 253, 255, 271, 276, 299, 301, 302, 307, 317, 325, 327, 328, 336, 378, 380, 384, 386, 387, 391, 392, 400, 405, 408, 410, 412, 414, 417, 433, 436, 437, 439, 441, 443, 444, 445, 448, 450, 455, 457, 458, 459, 467, 468, 474, 478, 479, 480, 511, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 549, 550, 555, 556, 557, 558, 560, 563, 564, 577, 578, 584, 585, 587, 589, 590, 598, 606, 623, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 831, 846, 853, 854, 855, 856, 857, 861, 868, 870, 872, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 912, 933, 934, 940, 941, 942, 943, 951, 975, 981, 982, 984, 985, 988, 989, 990, 998, 999, 1000, 1001, 1006, 1009, 1015, 1019, 1020, 1022, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "archiv": [8, 278, 372, 373, 375, 376, 399, 405, 438, 496, 498, 506, 753, 754, 983, 1000, 1020], "exist": [8, 9, 17, 19, 53, 217, 260, 301, 305, 340, 372, 377, 380, 381, 384, 390, 392, 393, 395, 399, 405, 409, 410, 412, 413, 420, 430, 433, 439, 440, 443, 445, 447, 449, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 495, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 581, 584, 585, 586, 587, 590, 593, 599, 606, 607, 628, 629, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 694, 696, 698, 757, 760, 764, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 870, 871, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 969, 977, 982, 984, 985, 989, 991, 992, 995, 1009, 1019, 1027, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "str": [8, 10, 16, 58, 60, 104, 106, 120, 217, 238, 260, 272, 283, 293, 334, 349, 372, 373, 387, 413, 416, 417, 421, 426, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 453, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 572, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 613, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 688, 692, 693, 694, 695, 696, 698, 703, 705, 707, 709, 722, 724, 725, 727, 728, 733, 737, 766, 769, 773, 774, 775, 776, 777, 778, 779, 782, 784, 787, 788, 794, 795, 796, 797, 798, 800, 801, 803, 805, 806, 808, 812, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 916, 917, 918, 921, 924, 926, 930, 941, 942, 943, 945, 948, 969, 970, 973, 1042], "kei": [8, 10, 17, 19, 42, 117, 121, 131, 163, 168, 217, 235, 238, 241, 261, 263, 264, 316, 317, 318, 319, 320, 321, 366, 371, 380, 383, 384, 385, 390, 392, 393, 395, 396, 405, 406, 409, 415, 460, 468, 557, 558, 563, 564, 565, 566, 584, 587, 590, 613, 622, 628, 629, 630, 655, 794, 797, 798, 806, 808, 820, 856, 857, 912, 922, 950, 1006, 1020, 1024, 1033, 1039, 1040, 1042, 1043], "download_url": 8, "ic": [8, 278, 317, 372, 375, 394, 496, 498, 506, 628, 629, 1022, 1039, 1040], "databas": [8, 148, 310, 364, 366, 373, 375, 405, 410, 412, 413, 416, 438, 440, 506, 551, 552, 890, 997], "reuters21578": 8, "mld": 8, "tar": [8, 382], "gz": [8, 382, 395, 504, 505], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 384, 386], "parent": [8, 168, 235, 378, 382, 392, 405, 438, 459, 942, 943, 1027], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 135, 141, 149, 161, 165, 173, 176, 218, 226, 232, 243, 252, 276, 279, 282, 297, 303, 313, 322, 330, 347, 349, 351, 352, 359, 373, 384, 899, 900, 901, 902, 903, 1000, 1023], "1e6": [8, 10, 192, 232, 349, 351, 364, 532, 891, 985, 997], "current_sz_mb": 8, "stdout": [8, 95, 207, 826, 846, 854, 855], "write": [8, 17, 164, 235, 349, 364, 365, 372, 376, 377, 381, 382, 383, 384, 386, 387, 390, 392, 401, 406, 410, 413, 996, 1006, 1020, 1028, 1040], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 328, 373, 384, 399, 484, 496, 499, 500, 503, 584, 585, 587, 1020, 1027, 1032, 1035, 1036], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 232, 260, 269, 365, 381, 1006], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 222, 372, 373, 376, 377, 378, 382, 384, 390, 391, 393, 399, 406, 413, 483, 492, 504, 505, 975, 1005, 1009, 1014, 1030, 1034, 1035, 1037, 1043], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 413, 499, 584, 585, 587, 1029], "alternate_sign": [8, 413, 578, 585, 1034], "data_stream": 8, "binari": [8, 13, 25, 27, 115, 117, 127, 129, 145, 159, 169, 175, 190, 192, 199, 207, 221, 229, 238, 241, 257, 258, 263, 269, 275, 278, 281, 287, 336, 340, 342, 358, 360, 372, 373, 374, 380, 382, 383, 392, 395, 399, 402, 403, 404, 405, 412, 413, 415, 433, 434, 435, 448, 483, 496, 504, 505, 516, 519, 545, 546, 549, 551, 555, 557, 558, 562, 563, 564, 577, 584, 585, 587, 589, 590, 598, 606, 623, 624, 625, 626, 627, 628, 629, 654, 655, 662, 664, 669, 670, 671, 672, 696, 699, 703, 704, 705, 708, 709, 711, 714, 716, 722, 724, 725, 729, 730, 733, 734, 735, 736, 737, 738, 777, 778, 779, 782, 783, 784, 789, 791, 794, 795, 797, 798, 799, 800, 808, 812, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 832, 843, 853, 864, 868, 870, 878, 881, 897, 899, 902, 948, 975, 986, 987, 988, 989, 990, 992, 993, 995, 996, 997, 999, 1000, 1001, 1008, 1011, 1024, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1041, 1042, 1044], "acq": 8, "chosen": [8, 20, 46, 73, 131, 152, 169, 170, 188, 200, 216, 236, 254, 255, 257, 263, 350, 360, 364, 390, 405, 407, 408, 412, 415, 436, 442, 445, 447, 449, 450, 456, 492, 519, 531, 553, 554, 555, 556, 560, 561, 643, 649, 652, 654, 655, 657, 659, 667, 672, 673, 674, 675, 676, 686, 690, 789, 792, 793, 794, 797, 798, 808, 827, 846, 897, 898, 905, 906, 907, 908, 934, 974, 977, 979, 981, 982, 984, 986, 991, 992, 999, 1015, 1016, 1018, 1019, 1035, 1043], "evenli": [8, 39, 52, 124, 172, 203, 255, 413, 938, 1020], "care": [8, 55, 125, 278, 340, 364, 366, 382, 384, 390, 392, 393, 405, 407, 413, 433, 456, 465, 636, 654, 655, 662, 663, 664, 672, 673, 674, 691, 897, 982, 1000, 1009, 1043], "all_class": 8, "positive_class": [8, 708], "partial_fit_classifi": 8, "nb": [8, 103, 129, 360, 834, 987], "multinomi": [8, 30, 166, 177, 214, 218, 236, 255, 269, 373, 374, 378, 410, 412, 492, 508, 519, 547, 549, 555, 557, 565, 627, 654, 655, 736, 823, 831, 832, 833, 834, 835, 836, 877, 920, 985, 986, 1001, 1007, 1020, 1022, 1027, 1031, 1033, 1034, 1035, 1040, 1041], "passiv": [8, 206, 662, 663, 1007, 1022, 1028], "aggress": [8, 206, 662, 663, 797, 798, 1007, 1022, 1028], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 405, 410, 445, 530, 672, 853, 854, 855, 1005, 1027], "tupl": [8, 48, 49, 55, 105, 170, 217, 371, 372, 373, 380, 392, 409, 417, 430, 447, 449, 460, 463, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 500, 501, 504, 506, 507, 508, 509, 510, 518, 529, 542, 557, 558, 563, 564, 565, 566, 578, 579, 580, 583, 584, 585, 587, 623, 628, 629, 630, 708, 715, 737, 776, 778, 792, 794, 808, 820, 837, 838, 856, 857, 867, 868, 872, 875, 883, 887, 899, 900, 901, 902, 903, 912, 918, 919, 921, 925, 926, 927, 928, 943, 952, 969, 992, 1033, 1034, 1038, 1039, 1040], "x_text": 8, "befor": [8, 12, 25, 42, 70, 72, 75, 86, 131, 144, 158, 160, 162, 165, 166, 169, 170, 172, 180, 183, 187, 188, 192, 235, 260, 267, 285, 286, 306, 309, 310, 312, 318, 339, 360, 364, 365, 373, 376, 378, 380, 381, 383, 384, 386, 387, 390, 392, 393, 394, 399, 401, 403, 405, 406, 407, 409, 410, 414, 417, 418, 439, 443, 444, 445, 455, 457, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 486, 497, 530, 533, 534, 535, 536, 537, 540, 542, 543, 557, 558, 561, 563, 565, 566, 573, 584, 585, 587, 607, 623, 624, 626, 641, 646, 647, 650, 651, 652, 660, 661, 662, 663, 664, 667, 672, 674, 683, 688, 690, 792, 793, 799, 800, 812, 813, 815, 819, 821, 823, 837, 838, 845, 846, 847, 848, 849, 852, 857, 858, 861, 864, 871, 875, 876, 877, 878, 882, 883, 885, 886, 887, 888, 894, 905, 906, 934, 969, 975, 981, 982, 985, 991, 995, 999, 1000, 1001, 1006, 1020, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "exclud": [8, 19, 168, 305, 378, 382, 392, 442, 460, 462, 724, 725, 733, 778, 779, 782, 807, 815, 872, 960, 985, 988, 1036, 1043], "invalid": [8, 199, 392, 442, 574, 667, 708, 769, 981, 985, 1033, 1035, 1037, 1038, 1040, 1041, 1043], "assign": [8, 17, 20, 34, 37, 46, 49, 57, 58, 60, 111, 116, 127, 129, 144, 153, 212, 217, 228, 233, 236, 299, 307, 312, 329, 344, 350, 373, 378, 380, 392, 402, 409, 410, 412, 413, 414, 415, 436, 437, 438, 439, 441, 442, 443, 444, 445, 448, 450, 452, 455, 456, 457, 458, 511, 532, 557, 558, 589, 590, 603, 604, 606, 654, 655, 662, 663, 664, 672, 673, 674, 700, 701, 711, 712, 713, 716, 726, 734, 738, 750, 752, 781, 788, 789, 790, 794, 797, 798, 800, 803, 808, 816, 818, 819, 820, 821, 824, 841, 847, 849, 850, 851, 864, 892, 893, 897, 898, 899, 900, 901, 902, 903, 979, 981, 984, 985, 986, 987, 988, 989, 990, 995, 998, 1009, 1011, 1020, 1027, 1032, 1034, 1035], "format": [8, 11, 12, 19, 21, 48, 54, 58, 61, 70, 80, 95, 105, 114, 120, 123, 125, 137, 143, 144, 175, 179, 185, 190, 199, 217, 255, 265, 267, 268, 271, 274, 287, 288, 291, 292, 309, 315, 343, 354, 358, 364, 371, 377, 378, 380, 381, 386, 387, 391, 392, 406, 409, 412, 413, 429, 438, 439, 441, 443, 445, 446, 448, 455, 460, 464, 478, 479, 480, 481, 483, 485, 492, 493, 494, 504, 505, 506, 519, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 547, 553, 554, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 642, 648, 654, 655, 656, 658, 662, 663, 664, 672, 673, 674, 684, 685, 688, 693, 709, 716, 734, 735, 746, 763, 786, 787, 826, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 884, 889, 890, 895, 897, 909, 917, 918, 939, 947, 951, 956, 959, 961, 962, 963, 964, 965, 966, 975, 985, 988, 993, 995, 996, 999, 1001, 1005, 1011, 1012, 1022, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1042, 1044], "islic": [8, 44, 62], "asarrai": [8, 17, 199, 217, 302, 326, 349, 350, 380, 392, 401, 581, 582, 721, 751, 845, 847, 848, 849, 995, 1000, 1044], "int": [8, 10, 13, 16, 17, 19, 37, 44, 62, 81, 114, 123, 127, 139, 140, 152, 153, 154, 160, 164, 168, 180, 190, 192, 199, 217, 225, 228, 234, 238, 245, 255, 258, 259, 260, 283, 288, 290, 296, 312, 325, 351, 373, 378, 380, 390, 392, 403, 406, 409, 413, 416, 417, 420, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 484, 487, 488, 490, 491, 492, 493, 498, 499, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 603, 604, 606, 607, 613, 623, 624, 625, 626, 627, 628, 629, 630, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 701, 703, 705, 709, 721, 722, 724, 725, 726, 729, 733, 751, 752, 764, 769, 773, 774, 775, 776, 777, 778, 779, 782, 784, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 886, 887, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 917, 918, 920, 921, 933, 934, 936, 937, 938, 939, 950, 954, 956, 959, 964, 965, 981, 992, 1027, 1033, 1037, 1038], "iter_minibatch": 8, "minibatch_s": [8, 366], "statist": [8, 81, 111, 114, 115, 126, 137, 138, 139, 140, 143, 147, 148, 166, 168, 169, 170, 171, 183, 187, 203, 253, 257, 259, 262, 269, 276, 278, 305, 311, 317, 360, 367, 371, 373, 375, 378, 384, 392, 403, 405, 406, 407, 409, 410, 412, 414, 430, 465, 470, 489, 490, 512, 513, 514, 516, 518, 537, 542, 549, 555, 556, 558, 600, 601, 602, 605, 623, 626, 630, 631, 640, 645, 652, 686, 690, 692, 706, 712, 717, 718, 719, 726, 738, 783, 794, 810, 827, 854, 855, 873, 874, 875, 877, 882, 885, 886, 888, 902, 905, 906, 960, 974, 975, 979, 981, 982, 984, 985, 986, 987, 992, 995, 999, 1000, 1001, 1002, 1003, 1004, 1012, 1018, 1019, 1032, 1035, 1038, 1039, 1041, 1042], "test_stat": 8, "n_test": [8, 10, 33, 114, 260, 1027, 1030], "n_test_po": 8, "hold": [8, 16, 26, 27, 199, 203, 261, 358, 371, 378, 379, 380, 392, 403, 405, 409, 412, 413, 415, 499, 553, 557, 558, 560, 585, 628, 629, 630, 731, 794, 797, 798, 808, 833, 864, 865, 870, 871, 878, 881, 905, 907, 975, 979, 985, 989, 999, 1000, 1001, 1008, 1011, 1020, 1035, 1039], "n_test_docu": 8, "tick": [8, 43, 60, 154, 239, 271, 628, 821], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 61, 81, 92, 98, 105, 123, 124, 144, 148, 159, 169, 180, 186, 195, 199, 203, 214, 217, 221, 223, 238, 269, 283, 290, 293, 319, 328, 340, 341, 344, 349, 350, 351, 358, 375, 384, 392, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 415, 428, 438, 439, 443, 445, 455, 460, 461, 478, 479, 480, 511, 516, 519, 527, 530, 532, 533, 537, 540, 541, 542, 545, 546, 548, 550, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 586, 587, 607, 609, 619, 621, 631, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 672, 673, 674, 675, 677, 680, 686, 690, 692, 695, 705, 706, 715, 721, 736, 751, 753, 754, 758, 783, 825, 826, 830, 831, 840, 844, 848, 855, 856, 876, 877, 897, 898, 900, 903, 905, 906, 907, 908, 936, 960, 966, 971, 981, 985, 986, 987, 988, 1000, 1001, 1018, 1030, 1031, 1033, 1035, 1036, 1038, 1043, 1044], "cls_name": [8, 10], "string": [8, 71, 120, 159, 217, 230, 264, 318, 351, 364, 372, 373, 378, 379, 380, 384, 392, 399, 406, 409, 412, 413, 414, 416, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 485, 486, 492, 501, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 613, 616, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 695, 705, 707, 715, 727, 757, 760, 766, 769, 773, 774, 775, 776, 787, 788, 792, 793, 794, 797, 798, 800, 808, 816, 820, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 915, 917, 918, 925, 926, 927, 943, 949, 953, 969, 970, 974, 975, 985, 998, 1000, 1011, 1018, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "n_train": [8, 10, 33, 114, 260, 1027, 1030], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 55, 180, 263, 364, 402, 407, 414, 504, 505, 545, 593, 623, 626, 640, 870, 874, 886, 975, 981, 1035, 1039], "mini": [8, 64, 95, 319, 366, 392, 413, 436, 438, 443, 445, 447, 449, 527, 529, 532, 533, 534, 535, 536, 538, 539, 541, 542, 989, 990, 1027, 1038, 1040], "smaller": [8, 24, 40, 46, 55, 82, 111, 148, 156, 157, 160, 163, 184, 188, 190, 203, 232, 278, 289, 290, 299, 305, 336, 344, 350, 378, 402, 404, 405, 407, 409, 410, 412, 414, 435, 436, 442, 446, 450, 452, 510, 530, 531, 553, 554, 555, 556, 560, 561, 589, 606, 615, 629, 642, 643, 645, 646, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 668, 670, 678, 679, 688, 705, 792, 797, 798, 843, 846, 870, 871, 889, 890, 897, 905, 906, 907, 908, 934, 979, 981, 982, 984, 985, 986, 988, 989, 991, 995, 997, 999, 1000, 1001, 1006, 1020, 1035, 1040], "bigger": [8, 40, 60, 212, 260, 302, 340, 346, 350, 363, 365, 413, 434, 435, 504, 534, 843, 1015, 1022], "overhead": [8, 283, 365, 366, 378, 384, 387, 390, 392, 412, 437, 441, 445, 530, 695, 829, 830, 832, 833, 834, 835, 836, 837, 838, 953, 987, 988, 1030, 1035, 1036, 1039], "partial": [8, 12, 50, 84, 87, 128, 166, 167, 173, 217, 227, 243, 317, 320, 375, 392, 394, 407, 408, 410, 412, 415, 460, 478, 479, 480, 481, 492, 497, 530, 532, 537, 558, 585, 628, 629, 653, 783, 823, 825, 826, 853, 854, 855, 858, 870, 871, 874, 877, 906, 982, 989, 999, 1020, 1022, 1024, 1028, 1035, 1036, 1040], "stream": [8, 405, 410, 413, 458, 585, 866, 867, 877, 977, 1005, 1035, 1038], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 55, 75, 115, 117, 121, 124, 131, 169, 197, 201, 207, 221, 234, 235, 237, 247, 257, 263, 319, 325, 350, 371, 378, 379, 380, 387, 406, 460, 522, 557, 558, 584, 585, 587, 628, 806, 870, 892, 893, 912, 913, 939, 977, 998, 1006, 1011], "updat": [8, 16, 44, 62, 111, 117, 126, 233, 315, 351, 376, 377, 378, 382, 386, 392, 405, 410, 412, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 801, 803, 808, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 960, 981, 988, 989, 990, 999, 1008, 1009, 1028, 1034, 1035, 1036, 1038, 1040, 1042, 1043, 1044], "accumul": [8, 50, 118, 119, 188, 382, 384, 405, 413, 985, 1028, 1035], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": [8, 175, 176], "67": [8, 66, 169, 217, 375, 512, 513, 514, 623, 663, 709, 808, 975, 985, 999, 1023, 1027], "1442": 8, "855": 8, "1434": 8, "877": [8, 258], "1413": 8, "933": [8, 22, 74, 409], "1405": 8, "3911": 8, "517": [8, 448, 458, 1018], "938": [8, 195, 344, 347, 780, 985, 1015], "2063": 8, "936": [8, 433, 985], "2060": 8, "885": [8, 148, 375], "2051": 8, "941": 8, "2047": 8, "6821": 8, "891": 8, "952": [8, 49], "06": [8, 15, 22, 52, 67, 83, 135, 160, 169, 190, 198, 199, 226, 238, 260, 261, 276, 302, 307, 343, 384, 478, 479, 480, 640, 641, 685, 689, 792, 793, 794, 808, 906, 981, 995, 997], "2225": 8, "07": [8, 15, 35, 85, 105, 169, 195, 217, 218, 269, 276, 303, 310, 330, 352, 360, 373, 405, 557, 558, 688, 985, 999], "2223": 8, "900": [8, 50, 74, 75], "2216": 8, "953": [8, 49], "2214": 8, "9759": 8, "1276": 8, "949": 8, "2295": 8, "2293": 8, "909": 8, "2289": 8, "958": 8, "2287": [8, 373], "11680": 8, "1499": 8, "944": [8, 1015], "29": [8, 81, 92, 98, 107, 152, 156, 190, 199, 203, 214, 216, 261, 320, 325, 375, 376, 395, 397, 398, 412, 555, 556, 686, 690, 776, 792, 849, 981, 982, 999], "2208": 8, "956": [8, 1015], "2207": 8, "2204": 8, "950": 8, "2202": 8, "14625": 8, "1865": 8, "965": [8, 985], "2251": 8, "903": 8, "2249": 8, "924": 8, "51": [8, 24, 98, 149, 156, 217, 278, 283, 405, 406, 776, 981, 1023], "2247": 8, "957": [8, 148, 723, 985], "2246": [8, 217], "17360": [8, 1038], "2179": 8, "2275": 8, "2274": 8, "932": 8, "2271": 8, "2270": 8, "curv": [8, 11, 23, 28, 37, 75, 78, 114, 116, 117, 123, 166, 177, 178, 189, 199, 217, 218, 220, 222, 225, 227, 229, 238, 239, 243, 244, 252, 253, 260, 270, 276, 300, 315, 340, 356, 385, 400, 404, 409, 411, 433, 434, 435, 498, 506, 511, 517, 521, 560, 628, 641, 654, 694, 696, 698, 702, 703, 704, 705, 722, 724, 736, 737, 777, 779, 782, 783, 784, 792, 793, 800, 811, 816, 821, 823, 824, 835, 858, 877, 897, 902, 981, 982, 984, 985, 991, 1001, 1007, 1009, 1022, 1024, 1029, 1030, 1033, 1037, 1039, 1040, 1041, 1042, 1043], "evolut": [8, 10, 272, 364, 366, 542], "cours": [8, 9, 175, 364, 378, 380, 410, 413, 414, 975, 980, 981, 1009], "valid": [8, 13, 26, 54, 55, 56, 71, 74, 78, 82, 103, 109, 115, 117, 120, 121, 122, 123, 124, 136, 141, 142, 146, 148, 149, 159, 166, 169, 171, 177, 183, 187, 199, 201, 207, 217, 218, 235, 237, 247, 250, 253, 257, 260, 261, 262, 264, 266, 268, 269, 274, 276, 278, 287, 302, 306, 311, 315, 317, 327, 336, 344, 354, 365, 373, 378, 381, 390, 391, 392, 396, 399, 400, 403, 405, 406, 407, 410, 411, 412, 413, 414, 421, 433, 438, 439, 441, 442, 443, 445, 446, 453, 459, 460, 464, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 489, 497, 498, 500, 511, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 568, 571, 573, 578, 579, 585, 589, 590, 593, 598, 628, 630, 634, 635, 636, 637, 638, 639, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 688, 695, 697, 698, 702, 709, 723, 757, 760, 769, 773, 774, 775, 780, 787, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 831, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 863, 869, 877, 889, 890, 892, 893, 895, 897, 899, 902, 904, 905, 906, 907, 908, 917, 918, 921, 928, 940, 942, 945, 975, 984, 985, 986, 989, 993, 995, 997, 999, 1000, 1001, 1005, 1006, 1009, 1011, 1014, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "consumpt": [8, 364, 530, 553, 554, 560, 561, 794, 808, 818, 819, 820, 905, 906, 907, 908, 951, 1011, 1027, 1029, 1033, 1035, 1036, 1041], "queue": [8, 988, 1030], "up": [8, 11, 37, 44, 46, 47, 48, 52, 55, 57, 62, 70, 80, 81, 89, 92, 109, 116, 164, 170, 178, 183, 192, 200, 215, 216, 247, 262, 265, 283, 296, 302, 306, 311, 319, 325, 333, 340, 344, 349, 351, 366, 372, 373, 378, 382, 384, 385, 386, 387, 390, 392, 393, 403, 405, 410, 412, 413, 439, 443, 444, 445, 446, 448, 452, 455, 456, 457, 504, 505, 532, 545, 546, 553, 554, 555, 556, 557, 558, 560, 561, 562, 606, 623, 628, 629, 635, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 660, 677, 678, 679, 680, 688, 701, 764, 792, 793, 796, 797, 798, 800, 821, 871, 872, 875, 887, 905, 906, 907, 908, 911, 934, 937, 938, 974, 981, 982, 985, 988, 995, 999, 1000, 1006, 1008, 1009, 1019, 1020, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "amount": [8, 12, 45, 53, 66, 78, 81, 95, 99, 112, 114, 157, 169, 183, 203, 217, 233, 317, 324, 327, 329, 336, 344, 351, 364, 365, 366, 390, 404, 405, 407, 410, 412, 413, 414, 439, 450, 465, 534, 535, 537, 539, 559, 592, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 661, 677, 680, 688, 797, 798, 837, 838, 843, 878, 893, 894, 907, 908, 980, 981, 984, 987, 989, 995, 997, 998, 999, 1000, 1018, 1019, 1040, 1044], "learner": [8, 112, 122, 131, 366, 553, 554, 555, 556, 560, 561, 562, 578, 585, 626, 839, 840, 845, 847, 848, 987, 990, 1001, 1005, 1006, 1020, 1043], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 62, 86, 154, 204, 208, 210, 228, 241, 264, 291, 293, 306, 332, 334, 337, 338, 992, 1024], "set_ylim": [8, 10, 16, 31, 42, 60, 72, 92, 116, 128, 129, 160, 170, 179, 197, 199, 200, 233, 245, 264, 275, 281, 288, 299, 305, 307, 308, 310, 316, 327, 345], "runtim": [8, 10, 58, 111, 185, 214, 216, 233, 302, 307, 365, 380, 381, 390, 392, 404, 405, 412, 446, 559, 675, 808, 897, 898, 899, 900, 901, 902, 903, 999, 1000, 1030, 1034, 1035, 1041, 1042, 1044], "gcf": [8, 992], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 72, 117, 118, 121, 122, 125, 133, 144, 148, 159, 163, 170, 178, 245, 250, 259, 261, 265, 281, 310, 311, 319, 320, 350, 380, 408, 577, 628, 644, 665, 676, 985, 992, 999, 1001, 1033, 1034, 1035, 1036], "width": [8, 10, 16, 45, 53, 80, 90, 97, 98, 104, 105, 106, 114, 120, 121, 124, 133, 144, 153, 159, 182, 242, 245, 259, 286, 305, 307, 308, 311, 317, 320, 333, 375, 406, 434, 435, 448, 460, 489, 490, 502, 517, 582, 862, 910, 995, 999, 1001, 1017, 1018, 1035], "set_xticklabel": [8, 10, 80, 106, 133, 154, 170, 172, 271, 272, 281], "ymax": [8, 10, 11, 78, 186, 188, 191, 192, 200, 208, 260, 296], "set_titl": [8, 10, 14, 25, 27, 30, 31, 32, 34, 42, 43, 45, 53, 55, 57, 60, 64, 65, 72, 75, 80, 90, 92, 100, 106, 111, 116, 118, 127, 129, 131, 132, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 188, 190, 197, 199, 200, 201, 207, 220, 221, 224, 225, 231, 233, 234, 238, 239, 245, 254, 255, 256, 257, 260, 262, 263, 267, 271, 272, 275, 278, 281, 283, 286, 287, 288, 293, 299, 300, 305, 306, 307, 308, 309, 310, 315, 319, 324, 325, 333, 340, 344, 345, 346, 349, 354], "autolabel": [8, 122], "attach": [8, 122, 349, 430, 842, 1028, 1038], "rect": [8, 52, 122, 178], "height": [8, 14, 53, 98, 121, 148, 305, 311, 349, 411, 442, 489, 490, 502, 582], "get_height": [8, 122], "get_x": [8, 122], "get_width": [8, 122], "va": [8, 122, 271, 291, 293, 343], "setp": [8, 10, 271, 274], "rotat": [8, 40, 94, 97, 100, 107, 123, 133, 166, 172, 223, 271, 272, 281, 336, 343, 408, 410, 415, 417, 500, 528, 537, 546, 610, 693, 877, 909, 981, 1038, 1039], "read": [8, 17, 95, 220, 267, 315, 316, 317, 319, 321, 364, 372, 376, 379, 380, 381, 382, 383, 385, 386, 390, 391, 392, 405, 416, 417, 418, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 609, 610, 611, 612, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 930, 974, 981, 985, 986, 1005, 1009, 1020, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040], "feat": [8, 10, 382, 413], "extr": 8, "hash": [8, 110, 135, 166, 350, 351, 364, 366, 370, 378, 381, 390, 412, 510, 540, 553, 562, 577, 578, 585, 636, 832, 950, 977, 1020, 1022, 1028, 1031, 1034], "vect": [8, 70, 261, 328, 413, 1020], "666": [8, 15, 154, 328, 839, 975], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 56, 57, 70, 71, 74, 75, 78, 80, 86, 92, 97, 101, 111, 114, 119, 122, 126, 128, 130, 131, 143, 148, 150, 151, 152, 153, 156, 157, 158, 159, 161, 166, 168, 170, 171, 175, 188, 195, 196, 199, 201, 203, 207, 213, 216, 217, 220, 221, 223, 225, 228, 230, 231, 233, 234, 235, 237, 260, 267, 272, 273, 284, 297, 310, 314, 315, 317, 327, 336, 337, 341, 342, 344, 345, 350, 351, 357, 360, 364, 375, 378, 383, 386, 391, 408, 410, 412, 413, 511, 606, 607, 609, 610, 611, 615, 618, 619, 846, 974, 981, 985, 988, 991, 997, 998, 999, 1000, 1009, 1011], "robust": [9, 61, 63, 77, 83, 124, 148, 164, 166, 169, 170, 177, 201, 203, 216, 218, 228, 238, 305, 321, 366, 375, 380, 386, 405, 412, 413, 442, 444, 465, 466, 469, 470, 471, 472, 520, 530, 555, 556, 645, 653, 666, 667, 674, 675, 745, 827, 858, 872, 874, 875, 886, 892, 932, 985, 989, 991, 995, 998, 999, 1005, 1007, 1009, 1021, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1043], "covari": [9, 12, 29, 33, 35, 79, 83, 85, 103, 106, 127, 151, 158, 228, 244, 246, 249, 250, 251, 252, 367, 387, 392, 396, 405, 408, 410, 415, 478, 479, 480, 481, 500, 511, 515, 523, 528, 530, 537, 542, 544, 545, 546, 559, 606, 607, 609, 618, 619, 627, 640, 641, 646, 650, 652, 678, 679, 682, 685, 689, 792, 793, 794, 813, 984, 991, 995, 1007, 1021, 1022, 1027, 1029, 1030, 1031, 1032, 1034, 1036], "wine": [9, 241, 310, 311, 371, 506, 1022], "tool": [9, 11, 169, 235, 258, 263, 360, 367, 371, 372, 373, 376, 378, 380, 381, 382, 383, 384, 385, 386, 391, 392, 393, 394, 395, 396, 399, 405, 406, 407, 483, 688, 697, 974, 980, 981, 985, 991, 995, 1000, 1002, 1005, 1006, 1009, 1011, 1020, 1034, 1037, 1040, 1041, 1042], "purpos": [9, 12, 16, 37, 86, 163, 213, 214, 215, 220, 222, 236, 248, 250, 256, 257, 336, 337, 344, 349, 350, 360, 373, 378, 380, 391, 392, 393, 395, 398, 402, 405, 406, 410, 412, 413, 414, 415, 542, 634, 819, 820, 857, 982, 985, 986, 988, 991, 1003, 1005, 1011, 1039, 1041], "awar": [9, 14, 145, 160, 333, 349, 376, 378, 380, 390, 393, 409, 413, 563, 564, 644, 650, 651, 652, 654, 655, 665, 676, 843, 872, 991, 995, 1001, 1024, 1027, 1028, 1041], "thing": [9, 34, 221, 255, 349, 365, 366, 373, 377, 378, 380, 390, 393, 405, 407, 413, 555, 556, 981, 995, 1009, 1033], "trivial": [9, 201, 354, 378, 405, 812, 899, 902, 982, 1006, 1027], "dimens": [9, 12, 14, 37, 40, 53, 82, 85, 90, 95, 148, 153, 155, 157, 159, 170, 182, 183, 197, 222, 224, 228, 232, 233, 239, 246, 247, 287, 288, 292, 308, 340, 349, 350, 351, 373, 375, 379, 392, 404, 405, 410, 411, 415, 417, 438, 439, 441, 443, 444, 445, 448, 460, 461, 478, 479, 480, 489, 490, 511, 520, 521, 525, 526, 529, 537, 545, 578, 579, 580, 581, 583, 585, 593, 607, 615, 618, 637, 640, 655, 686, 687, 688, 690, 691, 695, 759, 818, 837, 838, 842, 856, 889, 890, 891, 899, 900, 901, 902, 903, 917, 918, 919, 948, 956, 959, 975, 977, 979, 981, 982, 983, 986, 988, 989, 991, 997, 1000, 1011, 1018, 1019, 1034, 1036, 1037, 1039], "below": [9, 25, 26, 27, 32, 34, 55, 60, 70, 75, 80, 89, 90, 95, 109, 115, 118, 119, 124, 143, 168, 170, 182, 195, 196, 199, 201, 215, 216, 221, 225, 230, 235, 238, 240, 242, 255, 258, 263, 265, 266, 267, 305, 309, 315, 316, 317, 318, 319, 320, 321, 341, 349, 358, 360, 365, 371, 372, 376, 378, 380, 382, 383, 387, 392, 393, 395, 405, 407, 408, 409, 410, 412, 413, 414, 415, 442, 444, 467, 468, 474, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 506, 527, 533, 538, 544, 578, 591, 592, 593, 594, 595, 596, 629, 642, 648, 654, 655, 663, 669, 671, 688, 695, 701, 738, 758, 792, 793, 794, 805, 808, 826, 857, 860, 870, 871, 874, 880, 886, 974, 975, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 991, 992, 993, 995, 999, 1000, 1001, 1002, 1005, 1013, 1020, 1023, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "main": [9, 16, 32, 62, 86, 99, 121, 166, 228, 269, 314, 344, 349, 364, 365, 366, 371, 376, 378, 380, 382, 384, 386, 390, 391, 392, 394, 395, 403, 404, 405, 410, 412, 413, 415, 499, 521, 526, 545, 546, 621, 709, 827, 897, 898, 974, 982, 984, 985, 992, 997, 1006, 1008, 1017, 1020, 1027, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "empir": [9, 24, 25, 36, 68, 77, 80, 82, 83, 166, 217, 266, 305, 403, 409, 412, 415, 443, 445, 456, 465, 466, 467, 470, 473, 474, 528, 530, 535, 537, 539, 545, 547, 561, 586, 599, 635, 645, 663, 667, 674, 675, 712, 717, 718, 719, 822, 832, 833, 834, 836, 855, 878, 920, 959, 977, 979, 985, 987, 989, 995, 997, 999, 1021, 1022], "mode": [9, 10, 46, 47, 80, 199, 228, 283, 285, 302, 315, 378, 381, 386, 387, 390, 402, 408, 412, 416, 439, 440, 443, 445, 448, 455, 458, 467, 468, 474, 478, 483, 504, 505, 553, 557, 560, 588, 591, 592, 594, 595, 596, 606, 623, 640, 641, 654, 655, 662, 664, 669, 670, 671, 672, 675, 678, 679, 685, 689, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 853, 897, 899, 902, 905, 907, 923, 933, 934, 936, 988, 991, 1005, 1011, 1012, 1019, 1028, 1036, 1041, 1044], "stick": [9, 792, 984], "bias": [9, 27, 82, 98, 124, 130, 168, 169, 171, 265, 373, 394, 403, 412, 520, 545, 853, 877, 888, 980, 984, 993, 999, 1001], "yet": [9, 57, 183, 217, 250, 261, 351, 366, 373, 377, 382, 390, 394, 395, 396, 409, 410, 412, 413, 415, 444, 448, 457, 458, 461, 468, 549, 550, 551, 552, 563, 564, 565, 566, 573, 589, 590, 598, 623, 667, 669, 671, 773, 856, 894, 969, 974, 981, 985, 991, 999, 1006, 1036, 1044], "extent": [9, 58, 153, 154, 155, 232, 342, 345, 436, 531, 692, 792, 985], "assum": [9, 34, 55, 57, 158, 164, 168, 169, 188, 199, 217, 228, 231, 251, 260, 269, 305, 344, 351, 365, 377, 378, 380, 382, 384, 390, 391, 392, 394, 399, 402, 403, 405, 407, 409, 410, 412, 413, 415, 416, 421, 426, 433, 435, 440, 442, 446, 453, 459, 465, 466, 467, 468, 469, 470, 471, 472, 499, 504, 505, 528, 538, 544, 545, 557, 558, 563, 564, 583, 584, 585, 587, 616, 628, 639, 640, 642, 643, 648, 654, 655, 656, 657, 658, 662, 663, 664, 667, 668, 672, 673, 674, 677, 681, 683, 684, 688, 705, 721, 730, 736, 751, 759, 764, 769, 773, 776, 794, 797, 798, 808, 833, 839, 840, 843, 844, 845, 847, 848, 853, 864, 877, 945, 961, 962, 963, 975, 979, 981, 983, 984, 985, 987, 988, 990, 991, 992, 995, 999, 1001, 1033, 1039], "parametr": [9, 24, 25, 82, 231, 287, 309, 318, 403, 406, 411, 412, 433, 547, 549, 631, 681, 692, 873, 885, 928, 929, 981, 984, 987, 988, 995, 998, 1001, 1035, 1037, 1040], "minimum": [9, 55, 57, 80, 124, 125, 147, 188, 209, 232, 238, 270, 289, 290, 380, 387, 395, 398, 402, 405, 412, 413, 437, 441, 442, 446, 450, 452, 465, 466, 469, 470, 471, 472, 507, 509, 537, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 590, 623, 627, 628, 631, 633, 664, 667, 672, 674, 675, 678, 679, 688, 701, 720, 774, 775, 797, 798, 818, 833, 854, 855, 866, 867, 870, 871, 872, 876, 890, 891, 904, 905, 906, 907, 908, 914, 917, 918, 921, 937, 982, 985, 989, 991, 995, 997, 1001, 1027, 1030, 1034, 1035, 1039, 1040], "determin": [9, 11, 13, 19, 46, 55, 80, 111, 113, 117, 156, 169, 178, 179, 195, 202, 260, 305, 310, 340, 351, 358, 360, 377, 378, 380, 387, 391, 392, 402, 403, 405, 409, 410, 412, 413, 414, 415, 428, 433, 437, 438, 439, 441, 443, 445, 446, 452, 455, 456, 457, 461, 465, 466, 468, 469, 470, 471, 472, 478, 479, 480, 484, 487, 488, 491, 493, 499, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 533, 535, 538, 539, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 561, 563, 564, 566, 578, 579, 580, 584, 587, 590, 598, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 683, 685, 686, 688, 689, 690, 703, 707, 718, 724, 725, 733, 778, 779, 780, 782, 783, 788, 794, 796, 797, 798, 800, 808, 816, 817, 818, 819, 820, 821, 822, 824, 828, 830, 831, 833, 840, 842, 843, 848, 853, 854, 855, 861, 862, 870, 871, 872, 874, 878, 886, 897, 898, 900, 903, 906, 908, 911, 932, 948, 954, 956, 959, 974, 977, 979, 984, 988, 990, 991, 995, 998, 999, 1001, 1011, 1027, 1032, 1035, 1036, 1038, 1039, 1040], "concentr": [9, 100, 111, 129, 156, 166, 225, 244, 251, 252, 307, 326, 374, 378, 412, 439, 515, 792, 984, 991], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 57, 59, 61, 62, 68, 80, 91, 102, 113, 120, 127, 172, 225, 238, 245, 246, 247, 248, 261, 289, 290, 292, 308, 316, 320, 338, 348, 349, 351, 352, 366, 367, 371, 373, 375, 378, 380, 383, 390, 392, 400, 406, 411, 413, 419, 420, 423, 484, 498, 499, 500, 507, 508, 509, 510, 511, 518, 526, 537, 540, 560, 562, 585, 586, 587, 627, 687, 688, 691, 700, 701, 706, 713, 715, 720, 726, 731, 732, 750, 752, 773, 774, 781, 787, 788, 790, 792, 793, 849, 850, 858, 862, 869, 877, 926, 928, 946, 953, 969, 975, 982, 984, 988, 991, 993, 995, 998, 1002, 1005, 1006, 1009, 1011, 1014, 1017, 1020, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "outli": [9, 80, 392, 465, 470, 981, 991], "skew": [9, 124, 202, 232, 238, 305, 321, 370, 409, 635, 636, 637, 638, 873, 885, 981, 995, 1022, 1030, 1034, 1043], "Of": [9, 25, 27, 163, 364, 380, 405, 413, 975], "screen": [9, 1040], "presenc": [9, 60, 62, 80, 81, 109, 168, 172, 183, 203, 238, 305, 376, 379, 392, 407, 410, 708, 721, 751, 764, 826, 860, 868, 870, 877, 969, 975, 981, 985, 986, 999, 1030, 1031, 1033, 1037, 1039, 1041], "mixtur": [9, 44, 55, 57, 247, 248, 252, 367, 373, 374, 392, 405, 410, 411, 415, 619, 794, 1005, 1006, 1021, 1022, 1027, 1031, 1032, 1033, 1034], "univari": [9, 36, 68, 72, 74, 142, 143, 149, 166, 214, 331, 347, 370, 404, 405, 406, 413, 441, 500, 521, 526, 588, 591, 592, 594, 595, 596, 598, 601, 602, 603, 604, 605, 623, 624, 625, 626, 641, 794, 799, 819, 823, 857, 858, 867, 872, 876, 877, 897, 902, 981, 1000, 1002, 1007, 1019, 1022, 1027, 1033], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 56, 58, 62, 71, 73, 75, 86, 90, 95, 96, 102, 104, 106, 116, 117, 124, 144, 151, 169, 171, 183, 188, 203, 204, 213, 220, 221, 222, 228, 233, 235, 260, 261, 263, 272, 281, 292, 305, 309, 310, 316, 336, 340, 351, 358, 360, 364, 370, 378, 380, 386, 390, 391, 392, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 436, 442, 448, 458, 460, 461, 463, 465, 470, 478, 479, 480, 481, 504, 505, 512, 513, 514, 520, 527, 528, 529, 530, 531, 533, 535, 537, 538, 539, 544, 545, 546, 549, 550, 553, 554, 555, 556, 560, 561, 562, 584, 585, 586, 587, 623, 628, 629, 634, 635, 637, 638, 654, 655, 664, 672, 673, 674, 687, 695, 697, 703, 721, 751, 753, 754, 776, 783, 787, 788, 794, 808, 823, 826, 832, 833, 834, 835, 836, 846, 856, 857, 866, 873, 874, 877, 882, 883, 885, 886, 887, 888, 893, 904, 905, 906, 907, 908, 917, 923, 926, 933, 934, 957, 975, 977, 981, 982, 983, 984, 985, 987, 989, 991, 995, 999, 1000, 1001, 1002, 1004, 1009, 1028, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041], "ellipticenvelop": [9, 228, 466, 469, 470, 471, 472, 559, 991, 1027, 1030, 1034, 1035, 1040], "decisionboundarydisplai": [9, 30, 31, 34, 56, 113, 127, 132, 182, 191, 208, 213, 263, 286, 291, 294, 310, 332, 333, 334, 335, 337, 338, 340, 355, 1041, 1042, 1044], "oneclasssvm": [9, 11, 16, 213, 228, 318, 335, 559, 673, 843, 991, 999, 1000, 1029, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "support_fract": [9, 465, 470], "contamin": [9, 80, 81, 228, 238, 289, 290, 465, 559, 843, 991, 1035, 1043], "ocsvm": [9, 213], "line": [9, 11, 17, 40, 43, 60, 70, 80, 95, 100, 111, 117, 123, 150, 161, 163, 164, 166, 169, 170, 187, 188, 189, 191, 194, 195, 197, 200, 201, 202, 207, 208, 210, 211, 213, 228, 232, 233, 236, 238, 257, 264, 266, 267, 289, 293, 296, 306, 317, 335, 338, 340, 341, 345, 346, 349, 372, 373, 376, 378, 379, 380, 382, 383, 384, 385, 386, 390, 410, 411, 412, 434, 483, 484, 485, 504, 505, 538, 549, 550, 551, 552, 606, 609, 610, 628, 666, 682, 696, 697, 698, 800, 816, 953, 979, 985, 989, 992, 999, 1005, 1008, 1018, 1020, 1029, 1038, 1040, 1043, 1044], "mline": [9, 80, 213, 289, 335, 338], "load_win": [9, 241, 310, 841, 849, 1024, 1038], "red": [9, 10, 11, 26, 33, 34, 60, 80, 92, 95, 96, 97, 114, 131, 134, 160, 175, 178, 179, 189, 197, 225, 239, 255, 266, 296, 300, 306, 310, 311, 326, 336, 357, 376, 392, 405, 410, 986], "frontier": [9, 213, 289, 335, 991, 1018], "legend_lin": 9, "response_method": [9, 30, 34, 56, 113, 127, 132, 182, 191, 208, 213, 263, 286, 291, 294, 310, 332, 333, 335, 340, 355, 627, 628, 629, 694, 696, 698, 737, 985, 1044], "decision_funct": [9, 11, 16, 25, 27, 56, 113, 127, 140, 211, 212, 213, 229, 235, 238, 267, 289, 290, 299, 307, 334, 335, 336, 340, 341, 342, 346, 380, 392, 403, 412, 433, 465, 545, 546, 549, 551, 555, 557, 559, 563, 589, 590, 627, 628, 629, 654, 655, 662, 664, 670, 671, 672, 673, 694, 696, 698, 703, 716, 721, 722, 730, 734, 735, 737, 751, 777, 783, 784, 789, 794, 797, 798, 808, 818, 825, 826, 827, 828, 843, 857, 864, 894, 897, 899, 901, 902, 981, 985, 991, 992, 999, 1000, 1018, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1044], "plot_method": [9, 34, 182, 213, 286, 291, 332, 334, 335, 337, 338, 340, 627], "contour": [9, 11, 16, 34, 46, 47, 80, 120, 140, 148, 154, 155, 157, 210, 211, 212, 213, 228, 233, 249, 289, 296, 334, 335, 337, 338, 340, 341, 342, 375, 385, 627, 628, 991, 999], "line2d": [9, 80, 213, 289, 335, 338, 800, 816], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 70, 73, 74, 102, 117, 124, 126, 197, 205, 228, 237, 247, 258, 259, 261, 264, 267, 269, 283, 287, 307, 311, 319, 328, 336, 350, 351, 366, 370, 372, 380, 390, 392, 406, 409, 416, 417, 419, 423, 427, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 492, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 709, 757, 760, 766, 774, 775, 792, 793, 794, 797, 798, 800, 805, 806, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 922, 923, 939, 942, 945, 974, 985, 995, 1015, 1016, 1020, 1022, 1027, 1033, 1034, 1043, 1044], "boxstyl": [9, 307], "fc": [9, 288, 373], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 267, 296, 341, 395, 642, 643, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 660, 677, 678, 679, 680, 682], "xycoord": [9, 26], "textcoord": [9, 175], "xytext": [9, 26, 175], "bbox": [9, 12, 34, 45, 102, 245, 246, 247, 250, 251, 307], "arrowprop": [9, 26], "ash": [9, 375, 1030, 1033], "malic_acid": 9, "abil": [9, 61, 80, 124, 150, 161, 163, 166, 168, 169, 171, 199, 203, 217, 228, 349, 366, 395, 412, 413, 415, 607, 618, 621, 777, 778, 779, 782, 982, 985, 988, 991, 1001, 1006, 1027, 1029, 1034, 1036, 1040, 1041], "locat": [9, 25, 53, 54, 72, 80, 81, 193, 296, 317, 336, 371, 376, 378, 382, 383, 386, 387, 395, 405, 407, 411, 444, 456, 457, 465, 466, 467, 468, 469, 470, 471, 472, 484, 496, 497, 500, 501, 508, 511, 970, 975, 981, 986, 991, 995, 1001, 1035], "hard": [9, 199, 228, 232, 260, 262, 366, 377, 390, 392, 405, 410, 413, 530, 537, 565, 672, 899, 900, 901, 902, 903, 981, 998, 1000, 1001, 1006, 1018, 1019, 1020, 1036, 1037], "due": [9, 26, 27, 53, 55, 60, 75, 111, 114, 151, 169, 170, 178, 183, 190, 197, 199, 201, 216, 217, 232, 238, 246, 268, 269, 283, 310, 311, 340, 344, 349, 350, 351, 376, 378, 384, 392, 395, 403, 405, 409, 410, 412, 415, 439, 442, 443, 455, 531, 535, 539, 540, 570, 667, 794, 797, 798, 802, 804, 808, 818, 819, 822, 825, 829, 830, 862, 866, 867, 877, 975, 981, 982, 984, 985, 986, 988, 992, 999, 1000, 1006, 1019, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "banana": [9, 985], "anywai": [9, 349, 380, 661, 681, 682], "rid": [9, 999], "difficulti": [9, 27, 217, 305, 366, 378, 403, 854, 855, 984, 988], "bandwidth": [9, 44, 63, 234, 287, 288, 296, 390, 392, 405, 411, 444, 454, 457, 837, 838, 842, 978, 991, 1038, 1042], "compromis": [9, 170, 364, 378, 643, 675, 988, 1030], "risk": [9, 55, 199, 203, 217, 306, 344, 360, 377, 378, 392, 404, 409, 412, 563, 564, 882, 883, 885, 886, 887, 888, 981, 985, 1009, 1034], "flavanoid": [9, 375], "color_intens": 9, "407": [9, 15, 97, 107, 148, 375], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 20, 52, 57, 86, 163, 170, 175, 199, 214, 217, 237, 238, 257, 258, 349, 365, 366, 373, 380, 383, 384, 392, 393, 394, 410, 414, 538, 544, 586, 589, 734, 985, 988, 990, 991, 999, 1000, 1001, 1003, 1009, 1011, 1014, 1018, 1020, 1035], "boxplot": [10, 80, 125, 169, 172, 315], "gc": 10, "defaultdict": [10, 19, 25, 172, 263, 350, 351], "make_regress": [10, 75, 178, 180, 181, 185, 202, 203, 273, 316, 360, 374, 380, 381, 391, 550, 552, 556, 561, 631, 642, 643, 645, 647, 649, 651, 659, 660, 661, 663, 667, 675, 855, 898, 985, 986, 988], "randomforestregressor": [10, 117, 130, 131, 134, 163, 164, 317, 391, 412, 553, 554, 556, 558, 562, 564, 566, 628, 629, 907, 975, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "sgdregressor": [10, 210, 364, 366, 390, 404, 642, 645, 663, 667, 672, 675, 855, 898, 903, 981, 999, 1029, 1031, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1043], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 60, 61, 95, 117, 118, 120, 131, 164, 183, 207, 208, 213, 228, 261, 265, 266, 273, 283, 312, 324, 325, 326, 327, 338, 349, 350, 360, 373, 387, 392, 400, 465, 470, 484, 485, 487, 488, 491, 493, 499, 507, 508, 509, 510, 511, 515, 518, 520, 527, 533, 535, 536, 542, 543, 549, 550, 551, 552, 560, 561, 563, 564, 598, 654, 655, 662, 663, 664, 668, 670, 672, 673, 674, 683, 794, 796, 797, 798, 799, 800, 808, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 854, 855, 878, 897, 898, 899, 902, 933, 934, 954, 956, 980, 981, 986, 993, 999, 1000, 1015, 1020, 1022, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 64, 70, 72, 74, 131, 186, 261, 301, 302, 305, 318, 328, 349, 376, 382, 392, 399, 436, 439, 443, 445, 448, 450, 455, 458, 460, 463, 467, 468, 474, 527, 532, 533, 534, 535, 536, 539, 541, 542, 543, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 589, 590, 623, 628, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 686, 688, 690, 760, 773, 792, 793, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 826, 828, 831, 846, 853, 854, 855, 856, 857, 858, 859, 894, 897, 898, 899, 900, 901, 902, 903, 951, 1006, 1029, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042], "n_instanc": [10, 629], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 79, 81, 82, 95, 98, 100, 113, 114, 123, 125, 126, 130, 145, 148, 164, 178, 183, 185, 190, 192, 193, 198, 199, 200, 203, 204, 205, 209, 214, 217, 232, 235, 236, 238, 245, 249, 251, 257, 260, 265, 269, 270, 288, 305, 316, 317, 340, 344, 350, 351, 354, 358, 364, 365, 373, 380, 384, 392, 403, 404, 405, 407, 410, 412, 413, 414, 415, 418, 442, 448, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 483, 493, 504, 505, 519, 522, 523, 527, 528, 531, 533, 534, 535, 536, 538, 539, 543, 544, 548, 553, 554, 555, 556, 557, 558, 560, 561, 562, 577, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 607, 632, 635, 639, 640, 641, 646, 654, 655, 660, 661, 662, 663, 664, 667, 672, 673, 674, 681, 682, 699, 705, 708, 709, 711, 712, 720, 724, 725, 729, 733, 735, 741, 778, 779, 780, 782, 791, 792, 809, 810, 813, 814, 826, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 867, 869, 870, 872, 873, 874, 876, 877, 883, 884, 885, 886, 890, 897, 905, 906, 907, 908, 932, 971, 975, 981, 983, 984, 987, 988, 989, 995, 996, 997, 999, 1000, 1001, 1011, 1018, 1020, 1027, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "atomic_benchmark": 10, "percentil": [10, 71, 124, 238, 242, 305, 364, 588, 591, 592, 594, 595, 596, 599, 602, 628, 629, 743, 995, 1032, 1040], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 74, 122, 134, 164, 200, 257, 264, 336, 340, 354, 364, 376, 378, 390, 391, 406, 408, 412, 415, 445, 479, 534, 551, 552, 553, 554, 559, 560, 561, 562, 566, 681, 682, 794, 797, 798, 808, 821, 832, 833, 834, 835, 836, 974, 985, 995, 1020, 1035, 1037], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 66, 79, 81, 123, 148, 151, 157, 158, 170, 175, 201, 255, 260, 261, 272, 278, 325, 350, 351, 380, 387, 392, 393, 402, 403, 404, 405, 410, 413, 414, 584, 589, 603, 604, 611, 623, 630, 655, 799, 809, 810, 813, 923, 975, 984, 1022, 1035, 1037], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 58, 64, 100, 113, 115, 120, 124, 140, 155, 159, 179, 182, 191, 208, 211, 217, 232, 255, 260, 267, 269, 329, 332, 334, 336, 337, 338, 340, 342, 350, 355, 373, 390, 392, 402, 403, 406, 409, 413, 415, 433, 436, 437, 441, 446, 453, 459, 467, 468, 474, 489, 504, 505, 578, 588, 591, 592, 594, 595, 596, 606, 609, 610, 611, 613, 615, 616, 618, 619, 621, 623, 628, 629, 639, 688, 695, 696, 701, 702, 703, 711, 726, 735, 753, 754, 758, 761, 764, 765, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777, 781, 825, 837, 838, 912, 985, 986, 987, 988, 995, 1001, 1027, 1039, 1040, 1042, 1043, 1044], "contain": [10, 19, 24, 27, 33, 40, 49, 56, 58, 70, 71, 113, 115, 119, 127, 157, 169, 170, 172, 175, 190, 203, 217, 228, 235, 238, 239, 242, 250, 258, 260, 266, 269, 270, 281, 289, 290, 292, 305, 318, 325, 328, 349, 350, 371, 372, 373, 375, 378, 380, 382, 383, 384, 385, 386, 387, 391, 392, 399, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 417, 419, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 496, 498, 499, 500, 504, 505, 506, 510, 511, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 682, 684, 685, 686, 687, 688, 692, 693, 694, 696, 697, 698, 705, 708, 730, 731, 732, 763, 767, 774, 775, 783, 789, 792, 793, 794, 797, 798, 800, 808, 812, 813, 816, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 918, 937, 938, 940, 941, 948, 952, 954, 974, 975, 977, 983, 986, 989, 991, 995, 996, 998, 1001, 1005, 1011, 1020, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "generate_dataset": 10, "coef": [10, 54, 105, 168, 169, 178, 183, 186, 190, 191, 193, 198, 202, 203, 204, 208, 215, 242, 273, 301, 321, 345, 520, 642, 643, 645, 648, 649, 655, 656, 657, 658, 659, 665, 668, 670, 676, 677, 678, 679, 680, 681, 682, 683, 989], "random_se": [10, 92, 120], "x_scaler": 10, "y_scaler": 10, "ok": [10, 378, 991], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 296, 328, 364, 703, 709, 724, 725, 733, 778, 779, 782, 783, 985, 1027, 1035, 1036, 1042], "bp": [10, 125, 148, 187, 188, 375, 993], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 55, 58, 59, 60, 63, 64, 85, 91, 92, 97, 101, 117, 130, 158, 159, 175, 187, 192, 194, 196, 197, 199, 201, 202, 214, 216, 221, 245, 247, 248, 255, 260, 262, 263, 264, 290, 305, 310, 326, 354, 378, 382, 413, 1035, 1037, 1038, 1043], "linestyl": [10, 11, 16, 33, 60, 73, 80, 103, 105, 111, 123, 133, 137, 140, 151, 154, 156, 158, 160, 171, 172, 184, 186, 187, 188, 199, 200, 201, 205, 209, 211, 212, 217, 236, 238, 257, 259, 263, 264, 269, 288, 296, 300, 306, 334, 337, 338, 340, 341, 342, 344, 1016], "major": [10, 14, 34, 117, 267, 305, 309, 315, 316, 317, 318, 319, 320, 321, 340, 351, 364, 373, 377, 378, 381, 384, 390, 393, 405, 409, 411, 413, 547, 565, 566, 690, 724, 725, 733, 778, 779, 782, 909, 911, 985, 988, 999, 1006, 1009, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25, 800, 816], "clf_name": [10, 349], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 207, 380, 385, 434, 572, 694, 696, 698, 916], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 660, 681, 682, 981, 985], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 207, 222, 225, 283], "1e2": [10, 151, 158, 234, 251, 336, 741], "randomforest": [10, 120, 364, 412, 905, 906, 1032], "0001": [10, 148, 207, 258, 380, 417, 439, 443, 455, 467, 468, 474, 529, 534, 536, 543, 545, 546, 555, 556, 642, 643, 644, 645, 648, 649, 654, 655, 656, 657, 658, 659, 664, 665, 668, 670, 672, 674, 676, 683, 685, 689, 854, 855, 897, 898, 974], "250": [10, 65, 124, 175, 220, 340, 489, 688, 974, 997, 1034], "500": [10, 44, 50, 57, 60, 61, 63, 85, 86, 103, 105, 115, 117, 125, 147, 151, 175, 212, 213, 221, 239, 240, 245, 246, 250, 260, 263, 273, 283, 289, 295, 309, 316, 321, 342, 346, 364, 412, 465, 466, 470, 471, 472, 478, 479, 480, 607, 609, 610, 612, 617, 620, 621, 646, 647, 650, 651, 652, 676, 678, 679, 855, 974, 1000], "890": [10, 15, 124, 135, 258], "plot_prediction_lat": [10, 15], "conserv": [11, 392, 578, 585, 889, 890, 984, 997], "biologi": 11, "south": [11, 169, 296, 411], "american": [11, 12, 70, 81, 373, 405, 407, 411, 412, 413, 465, 470, 726, 877], "mammal": 11, "past": [11, 382, 383, 386, 390, 393, 409, 410, 412, 534, 551, 552, 674, 1009, 1012, 1043], "environment": [11, 183, 217], "unsuccess": 11, "cast": [11, 53, 199, 221, 372, 392, 393, 413, 492, 640, 641, 642, 648, 652, 653, 656, 657, 658, 659, 660, 661, 669, 671, 950, 1034, 1035, 1036, 1037, 1040, 1042], "densiti": [11, 49, 55, 60, 65, 75, 101, 105, 148, 166, 185, 199, 214, 217, 224, 228, 232, 244, 251, 252, 260, 266, 278, 284, 289, 290, 297, 305, 336, 349, 375, 387, 392, 405, 412, 416, 424, 440, 442, 444, 446, 448, 460, 463, 494, 498, 532, 537, 545, 546, 792, 793, 794, 837, 838, 842, 843, 890, 979, 981, 984, 988, 990, 991, 997, 1005, 1007, 1011, 1021, 1022, 1029, 1031, 1035, 1036, 1042, 1043], "phillip": [11, 296, 494], "2006": [11, 296, 412, 415, 458, 494, 553, 554, 562, 606, 607, 610, 615, 618, 645, 662, 663, 736, 783, 784, 792, 832, 890, 907, 908, 981, 985, 987, 990, 997, 998], "basemap": [11, 296], "coast": [11, 296], "nation": [11, 80, 296, 373, 844], "boundari": [11, 13, 25, 26, 27, 31, 34, 58, 60, 110, 113, 120, 129, 135, 152, 155, 166, 170, 182, 200, 228, 233, 236, 263, 291, 293, 294, 296, 299, 305, 307, 310, 323, 330, 331, 333, 334, 335, 336, 338, 345, 346, 347, 355, 374, 403, 412, 413, 415, 446, 452, 500, 532, 545, 546, 565, 584, 585, 587, 627, 730, 756, 794, 826, 839, 845, 847, 848, 849, 872, 876, 893, 894, 899, 901, 902, 905, 921, 979, 988, 991, 995, 998, 999, 1000, 1027, 1029, 1031, 1040, 1041, 1042, 1044], "america": [11, 12, 80, 296, 844, 995], "bradypu": [11, 296, 494], "variegatu": [11, 296, 494], "brown": [11, 92, 296, 494, 624, 975, 1032, 1034, 1035, 1036, 1039], "throat": [11, 296, 494], "sloth": [11, 296, 494], "microryzomi": [11, 296, 494], "minutu": [11, 296, 494], "known": [11, 17, 25, 27, 39, 49, 57, 58, 81, 104, 105, 131, 156, 158, 164, 183, 199, 200, 217, 228, 260, 262, 269, 292, 296, 306, 318, 324, 333, 340, 350, 366, 375, 376, 378, 381, 386, 390, 392, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 434, 459, 478, 480, 494, 504, 505, 540, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 584, 585, 587, 590, 605, 618, 629, 654, 655, 668, 678, 679, 690, 700, 706, 709, 714, 724, 738, 750, 752, 790, 826, 832, 833, 834, 835, 836, 839, 844, 847, 853, 881, 905, 906, 907, 908, 975, 977, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 995, 1000, 1001, 1011, 1016, 1018, 1019], "forest": [11, 27, 31, 110, 116, 120, 126, 127, 129, 131, 134, 135, 163, 166, 167, 173, 175, 228, 257, 296, 317, 349, 360, 371, 391, 392, 403, 404, 414, 459, 460, 486, 487, 491, 492, 494, 511, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 626, 630, 794, 799, 823, 830, 857, 871, 901, 905, 906, 907, 974, 975, 986, 993, 1006, 1007, 1022, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036], "rice": [11, 296, 494, 1040], "rat": [11, 296, 494], "rodent": [11, 296, 494], "live": [11, 70, 169, 296, 378, 405, 494, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "peru": [11, 296, 494], "colombia": [11, 296, 494], "ecuador": [11, 296, 494], "venezuela": [11, 296, 494], "entropi": [11, 240, 272, 296, 317, 324, 325, 360, 405, 412, 417, 494, 529, 553, 560, 603, 604, 654, 713, 731, 732, 736, 790, 905, 907, 981, 982, 985, 989, 1001, 1029, 1031, 1035, 1036, 1041, 1043, 1044], "anderson": [11, 296, 494, 1033, 1039], "schapir": [11, 278, 296, 412, 494, 549, 550], "ecolog": [11, 296, 494], "190": [11, 123, 217, 234, 269, 296, 384, 494], "231": [11, 14, 99, 107, 296, 405, 416, 440, 494, 580], "259": [11, 143, 149, 222, 296, 412, 494, 563, 564], "________________________________________________________________________________": [11, 54, 349], "coastlin": [11, 148, 296, 375], "coverag": [11, 124, 199, 217, 296, 381, 401, 494, 623, 716], "area": [11, 127, 148, 199, 217, 238, 257, 260, 267, 269, 270, 336, 340, 341, 345, 375, 378, 382, 390, 405, 413, 698, 702, 703, 704, 737, 783, 784, 982, 985, 988, 1004, 1029], "roc": [11, 25, 116, 148, 166, 227, 229, 238, 239, 243, 253, 276, 385, 403, 409, 500, 506, 560, 654, 698, 702, 703, 704, 722, 737, 777, 783, 784, 813, 823, 826, 864, 902, 991, 1024, 1029, 1030, 1032, 1033, 1037, 1039, 1043], "868443": 11, "993919": 11, "elaps": [11, 47, 67, 117, 118, 119, 364, 460, 463, 565, 566, 856, 857, 858, 859], "astro": [11, 158, 220, 248], "washington": [11, 158, 220, 248, 288, 296], "fetch_species_distribut": [11, 296, 1036], "bunch": [11, 371, 372, 373, 460, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 506, 563, 564, 565, 566, 628, 629, 630, 856, 857, 905, 906, 907, 908, 942, 945, 1009, 1020, 1032, 1034, 1037, 1039, 1043], "ll": [11, 55, 119, 255, 296, 378, 390, 528, 537, 988, 1001, 1011], "otherwis": [11, 56, 62, 113, 160, 164, 180, 201, 207, 296, 340, 344, 360, 366, 376, 380, 382, 384, 392, 396, 405, 407, 409, 413, 415, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 449, 450, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 492, 522, 523, 529, 530, 531, 532, 534, 536, 537, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 593, 598, 606, 607, 610, 627, 628, 629, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 681, 682, 686, 688, 692, 693, 694, 696, 698, 699, 703, 705, 709, 710, 719, 721, 722, 723, 724, 725, 733, 736, 747, 749, 750, 751, 761, 769, 773, 776, 777, 778, 779, 780, 782, 783, 784, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 808, 812, 813, 816, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 852, 854, 855, 857, 860, 861, 862, 863, 864, 868, 869, 876, 877, 878, 879, 882, 883, 884, 886, 887, 888, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 910, 912, 918, 920, 933, 934, 944, 946, 969, 971, 980, 981, 982, 985, 988, 989, 991, 992, 995, 997, 999, 1000, 1005, 1009, 1011, 1029, 1035, 1036, 1037, 1040, 1043], "improvis": [11, 296], "mpl_toolkit": [11, 45, 67, 90, 101, 102, 170, 196, 220, 222, 296], "except": [11, 16, 44, 53, 98, 109, 117, 207, 214, 228, 235, 268, 283, 296, 300, 301, 305, 307, 320, 367, 371, 378, 380, 381, 382, 383, 390, 392, 396, 399, 402, 406, 409, 410, 412, 413, 415, 428, 456, 461, 464, 478, 479, 480, 505, 550, 552, 553, 554, 556, 558, 560, 561, 564, 566, 607, 623, 626, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 683, 707, 773, 801, 830, 831, 837, 838, 840, 843, 848, 854, 855, 861, 875, 877, 895, 898, 900, 903, 906, 908, 938, 971, 981, 985, 1000, 1011, 1019, 1020, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1044], "importerror": [11, 16, 53, 98, 283, 296, 386, 492], "construct_grid": [11, 296], "object": [11, 13, 14, 19, 26, 44, 50, 62, 66, 70, 71, 98, 109, 131, 137, 146, 147, 156, 166, 170, 183, 195, 199, 215, 217, 227, 235, 239, 241, 242, 243, 258, 272, 296, 311, 318, 319, 321, 324, 350, 351, 360, 371, 372, 373, 378, 379, 381, 383, 384, 385, 387, 391, 392, 393, 396, 399, 405, 406, 407, 410, 413, 414, 415, 419, 421, 426, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 707, 714, 727, 728, 737, 753, 754, 776, 777, 784, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 912, 917, 918, 919, 920, 921, 924, 928, 930, 940, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 970, 971, 973, 981, 982, 983, 984, 988, 991, 992, 995, 998, 999, 1000, 1005, 1006, 1011, 1012, 1014, 1015, 1018, 1020, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "func": [11, 75, 116, 169, 179, 217, 296, 378, 406, 461, 695, 861, 995, 1031, 1033, 1035, 1036, 1044], "xgrid": [11, 296], "ygrid": [11, 296], "correspond": [11, 13, 16, 20, 26, 32, 41, 53, 65, 78, 82, 97, 111, 114, 117, 118, 120, 127, 144, 147, 148, 152, 157, 160, 169, 188, 191, 199, 200, 203, 208, 217, 229, 234, 235, 242, 250, 259, 261, 263, 264, 269, 270, 296, 310, 317, 318, 319, 350, 354, 355, 360, 365, 372, 373, 374, 377, 378, 380, 382, 385, 386, 391, 392, 393, 402, 403, 405, 407, 408, 409, 410, 412, 413, 414, 415, 420, 426, 433, 435, 437, 441, 444, 447, 449, 455, 457, 459, 460, 468, 478, 479, 480, 486, 487, 488, 489, 490, 491, 492, 530, 537, 540, 541, 542, 545, 546, 548, 551, 553, 555, 556, 557, 560, 578, 580, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 613, 626, 628, 629, 631, 639, 640, 641, 642, 643, 644, 648, 654, 655, 656, 657, 658, 664, 665, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 683, 686, 687, 688, 690, 699, 706, 709, 719, 720, 729, 733, 737, 747, 749, 769, 773, 777, 783, 784, 789, 791, 792, 793, 794, 797, 798, 800, 808, 816, 818, 826, 829, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 846, 854, 855, 864, 867, 868, 870, 871, 874, 878, 886, 897, 898, 899, 902, 905, 906, 907, 908, 922, 928, 942, 945, 960, 974, 975, 977, 978, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 995, 996, 999, 1000, 1004, 1011, 1017, 1020, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "coordin": [11, 12, 13, 54, 100, 130, 155, 184, 220, 261, 296, 364, 410, 415, 439, 443, 444, 445, 457, 467, 468, 474, 527, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 546, 610, 642, 643, 647, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 677, 678, 679, 680, 684, 685, 686, 689, 690, 702, 759, 764, 897, 981, 982, 1000, 1018, 1027, 1030, 1031, 1032, 1036, 1038, 1040, 1041, 1042], "corner": [11, 13, 26, 53, 168, 257, 261, 269, 270, 296, 378, 494, 909, 911, 985, 1041], "cell": [11, 12, 20, 26, 32, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 148, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 296, 302, 311, 316, 317, 319, 320, 326, 358, 375, 383, 688, 985, 986, 1033, 1041], "xmin": [11, 78, 189, 191, 208, 209, 296], "x_left_lower_corn": [11, 296, 494], "grid_siz": [11, 61, 296, 494], "xmax": [11, 78, 189, 191, 208, 209, 296], "nx": [11, 296, 494], "ymin": [11, 78, 186, 188, 191, 192, 200, 208, 260, 296], "y_left_lower_corn": [11, 296, 494], "ny": [11, 259, 296, 375, 494, 975, 997], "create_species_bunch": 11, "species_nam": [11, 296], "record": [11, 96, 115, 171, 235, 311, 351, 364, 378, 405, 407, 446, 453, 494, 616, 639, 688, 766, 769, 773, 774, 775, 776, 820, 843, 1040, 1041], "join": [11, 12, 19, 55, 163, 217, 260, 307, 373, 393, 459, 1020, 1027, 1035], "ascii": [11, 296, 413, 483, 584, 585, 587], "pt": [11, 373, 414, 873, 995], "desir": [11, 24, 113, 148, 164, 199, 201, 305, 309, 371, 378, 380, 382, 386, 399, 402, 405, 408, 409, 410, 414, 499, 534, 536, 540, 543, 563, 589, 598, 599, 660, 666, 681, 682, 695, 704, 731, 837, 838, 842, 857, 862, 864, 867, 868, 870, 871, 873, 874, 878, 881, 883, 885, 886, 921, 954, 977, 979, 982, 988, 995, 999, 1000, 1001, 1011, 1027, 1035, 1036, 1037, 1040], "pts_": 11, "ix": [11, 269, 343], "searchsort": 11, "dd": [11, 12, 129, 296, 494], "ii": [11, 96, 170, 206, 255, 375, 413, 578, 579, 585, 634, 662, 663, 860, 869, 981, 995, 1004], "lat": [11, 296, 494, 759], "cov_": [11, 82], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 16, 26, 42, 58, 80, 120, 129, 152, 153, 154, 155, 157, 170, 210, 211, 212, 213, 225, 228, 249, 289, 296, 299, 307, 308, 329, 335, 336, 341, 342, 345, 346, 627], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 16, 25, 26, 27, 58, 80, 96, 101, 120, 123, 128, 129, 138, 140, 153, 197, 212, 215, 228, 289, 308, 310, 329, 336, 342, 345, 346, 405, 655, 710, 711, 714, 985, 1015, 1018, 1019], "randint": [11, 37, 81, 92, 123, 164, 171, 223, 231, 235, 237, 272, 317, 380, 383, 391, 396, 798, 815, 832, 833, 834, 836, 974, 975], "land": [11, 296, 393, 412], "water": 11, "land_refer": [11, 296], "standard": [11, 12, 20, 26, 32, 34, 55, 61, 70, 71, 73, 80, 81, 86, 96, 111, 114, 116, 117, 118, 119, 120, 127, 131, 148, 151, 156, 158, 160, 169, 178, 184, 188, 197, 199, 208, 220, 221, 222, 233, 238, 250, 255, 258, 259, 260, 261, 263, 305, 310, 334, 349, 364, 365, 370, 371, 372, 374, 375, 376, 378, 380, 381, 383, 384, 387, 390, 392, 395, 399, 401, 405, 407, 408, 409, 413, 415, 442, 464, 468, 484, 492, 497, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 518, 520, 521, 526, 528, 531, 537, 548, 586, 590, 607, 630, 640, 641, 646, 647, 650, 651, 652, 660, 661, 668, 669, 670, 671, 672, 674, 683, 685, 689, 783, 800, 815, 816, 834, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 861, 866, 867, 870, 873, 874, 875, 877, 885, 886, 887, 888, 895, 897, 898, 917, 974, 977, 981, 982, 985, 987, 988, 989, 991, 999, 1000, 1006, 1009, 1011, 1016, 1018, 1019, 1020, 1022, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 296], "llcrnrlat": [11, 296], "urcrnrlat": [11, 296], "llcrnrlon": [11, 296], "urcrnrlon": [11, 296], "drawcoastlin": [11, 296], "drawcountri": [11, 296], "9998": [11, 296], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 56, 60, 63, 65, 68, 74, 75, 80, 91, 92, 95, 102, 103, 111, 113, 120, 124, 127, 129, 130, 132, 133, 137, 140, 144, 145, 148, 152, 154, 155, 159, 164, 166, 169, 170, 171, 172, 181, 182, 184, 193, 196, 203, 211, 213, 232, 234, 236, 237, 238, 245, 248, 260, 263, 264, 269, 270, 273, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 306, 307, 308, 309, 312, 315, 319, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 348, 349, 351, 352, 358, 360, 365, 372, 373, 375, 378, 386, 387, 392, 396, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 455, 456, 458, 465, 468, 484, 498, 500, 502, 508, 519, 527, 533, 537, 540, 541, 542, 545, 546, 549, 551, 553, 554, 555, 577, 585, 586, 587, 588, 590, 591, 592, 594, 595, 596, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 627, 635, 636, 644, 646, 647, 649, 650, 651, 652, 654, 655, 659, 660, 661, 662, 663, 665, 675, 676, 678, 679, 680, 681, 682, 684, 687, 691, 692, 700, 701, 704, 713, 721, 732, 738, 751, 753, 754, 756, 761, 764, 769, 770, 771, 772, 774, 788, 789, 790, 792, 793, 795, 799, 801, 802, 803, 806, 809, 810, 812, 813, 815, 821, 832, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 858, 862, 863, 864, 868, 869, 870, 872, 873, 877, 885, 890, 904, 912, 920, 929, 934, 959, 974, 975, 977, 978, 979, 981, 982, 983, 984, 987, 989, 990, 991, 993, 998, 999, 1000, 1001, 1005, 1008, 1015, 1021, 1022, 1027, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "solid": [11, 16, 31, 33, 123, 154, 211, 212, 228, 238, 296, 307, 1009], "z": [11, 16, 58, 101, 120, 140, 153, 155, 170, 209, 211, 212, 220, 222, 228, 233, 249, 289, 296, 299, 307, 310, 329, 336, 341, 342, 346, 375, 402, 410, 412, 549, 550, 581, 635, 660, 667, 681, 682, 685, 689, 695, 719, 780, 877, 981, 982, 989, 990, 1042], "float64": [11, 13, 48, 53, 71, 123, 125, 126, 169, 170, 271, 319, 320, 365, 372, 378, 380, 392, 413, 467, 468, 474, 492, 493, 504, 505, 538, 577, 578, 585, 587, 637, 654, 669, 671, 695, 733, 862, 870, 871, 899, 900, 902, 903, 906, 908, 915, 917, 956, 959, 961, 962, 963, 1000, 1011, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "idx": [11, 16, 19, 45, 55, 105, 113, 117, 120, 132, 160, 170, 172, 183, 191, 198, 199, 208, 221, 355, 406, 409], "9999": [11, 217, 296, 327, 494, 623, 1035], "coverages_land": 11, "contourf": [11, 16, 120, 213, 233, 289, 296, 299, 307, 308, 329, 335, 341, 346, 627, 628], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 148, 199, 217, 238, 257, 260, 264, 267, 269, 270, 403, 698, 704, 783, 985, 1032, 1035, 1039], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 101, 105, 212, 213, 246, 267, 289, 290, 335, 341, 346, 405, 703, 985, 1001], "fpr": [11, 229, 238, 257, 269, 270, 385, 588, 592, 694, 698, 702, 722, 784, 985, 1024, 1027, 1043], "tpr": [11, 229, 238, 257, 269, 270, 385, 698, 702, 784, 985, 1024, 1027, 1043], "threshold": [11, 25, 42, 65, 98, 105, 148, 166, 170, 172, 194, 229, 231, 257, 258, 259, 267, 281, 321, 323, 330, 355, 358, 392, 405, 410, 412, 414, 437, 438, 441, 442, 465, 496, 504, 505, 527, 533, 538, 544, 545, 546, 559, 584, 587, 589, 593, 598, 599, 640, 663, 667, 672, 674, 688, 694, 696, 698, 699, 702, 703, 716, 721, 722, 734, 735, 751, 777, 783, 784, 789, 792, 793, 813, 832, 843, 844, 860, 862, 864, 880, 892, 893, 894, 902, 909, 911, 959, 981, 985, 988, 989, 991, 995, 998, 1000, 1001, 1006, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044], "roc_curv": [11, 229, 257, 269, 698, 702, 722, 777, 783, 985, 1027, 1028, 1029, 1032, 1033, 1035, 1040, 1043], "roc_auc": [11, 148, 260, 264, 269, 270, 385, 630, 698, 985, 1024], "ntime": [11, 271], "719": [11, 15, 262, 276], "plot_species_distribution_model": [11, 15, 494], "emploi": [12, 151, 234, 407, 413, 446, 474, 578, 585, 993, 1009, 1019, 1033], "techniqu": [12, 18, 70, 72, 97, 106, 112, 122, 139, 147, 148, 164, 166, 168, 207, 222, 224, 265, 278, 287, 318, 325, 340, 354, 366, 375, 390, 392, 403, 404, 405, 409, 410, 411, 412, 413, 414, 443, 444, 445, 446, 530, 550, 673, 685, 689, 690, 721, 751, 977, 981, 982, 984, 985, 988, 991, 993, 997, 999, 1001, 1006, 1009, 1014, 1019, 1020, 1040], "histor": [12, 199, 1006], "quot": [12, 14, 70, 261, 349, 350, 365, 372, 373, 376, 382, 401, 404, 484, 485, 492, 985, 997, 1000, 1020, 1042], "quantiti": [12, 121, 260, 267, 317, 364, 392, 405, 412, 717, 718, 719, 780, 853, 974, 976, 979, 981, 1032], "daili": [12, 1009], "price": [12, 75, 121, 131, 238, 311, 975, 981, 1009, 1016], "link": [12, 17, 111, 169, 170, 178, 199, 203, 217, 245, 263, 293, 354, 365, 376, 377, 378, 379, 380, 382, 386, 392, 403, 405, 407, 410, 415, 557, 558, 606, 644, 665, 676, 684, 701, 916, 918, 981, 988, 1001, 1002, 1005, 1008, 1014, 1018, 1020, 1025, 1027, 1030, 1031, 1034, 1035, 1038, 1044], "fluctuat": [12, 60, 199, 267, 1035], "normalesup": [12, 32, 46, 66, 233], "2003": [12, 402, 405, 410, 413, 447, 448, 458, 509, 511, 685, 689, 832, 834, 981, 982, 987, 997, 1035], "2008": [12, 407, 409, 410, 474, 530, 559, 586, 641, 660, 681, 682, 688, 712, 721, 751, 827, 832, 836, 853, 979, 982, 983, 985, 986, 987, 990, 991, 1000], "calm": 12, "ago": [12, 1006], "tech": [12, 375, 835], "firm": [12, 405], "crash": [12, 378, 464, 887, 888, 895, 995, 1031, 1035, 1043, 1044], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 386, 853, 990, 1018], "msft": 12, "ibm": [12, 19, 328, 351, 373], "twx": 12, "warner": [12, 1042, 1043], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1020], "amzn": 12, "amazon": 12, "tm": [12, 988], "toyota": 12, "caj": 12, "canon": [12, 392, 403, 412, 478, 479, 481, 763, 1006, 1007, 1022], "sne": [12, 166, 219, 220, 221, 222, 224, 226, 510, 521, 688, 1021, 1022], "soni": [12, 1037, 1039], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 854, 855, 989], "boe": 12, "ko": [12, 26, 152], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 80, 81, 407, 465, 470], "mcdonald": 12, "pep": [12, 386, 1027], "pepsi": 12, "kellogg": 12, "un": [12, 378, 403, 413, 417, 529, 585, 790, 860, 869, 880, 884, 1036], "unilev": 12, "mar": [12, 1003], "marriott": 12, "pg": [12, 384, 645, 981, 1032], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 976, 987, 1039], "electr": [12, 375, 405], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1009], "chase": [12, 1027], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 1009], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 364, 376, 390, 986], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 70], "instrument": [12, 70, 96, 168], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1037], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 134], "dynam": [12, 170, 551, 552, 559, 575, 576, 672, 673, 674, 1001, 1009, 1033, 1039, 1044], "rtn": 12, "raytheon": 12, "cat": [12, 71, 170, 171, 238, 318, 319, 320, 321, 373, 413, 578, 708, 714, 749, 778, 878, 985, 995, 1036, 1037, 1039], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 351, 365, 380, 384, 407, 413, 495, 578, 584, 585, 587, 909, 911, 1005], "fetch": [12, 17, 131, 169, 217, 371, 372, 373, 378, 382, 383, 386, 404, 410, 492, 551, 552, 559, 584, 585, 587, 1035, 1043], "histori": [12, 367, 542, 555, 556, 1003, 1027], "stderr": [12, 826], "url": [12, 17, 148, 372, 375, 380, 382], "githubusercont": 12, "master": [12, 16, 283, 320, 378, 382, 1009, 1032], "financi": [12, 405, 412, 981], "csv": [12, 372, 375, 383, 1008, 1035, 1040], "read_csv": [12, 383, 492, 1042], "close_pric": 12, "vstack": [12, 26, 57, 65, 154, 155, 181, 245, 249, 283, 296, 341, 627, 986, 1035], "q": [12, 71, 85, 124, 199, 318, 402, 405, 410, 933, 981, 1000], "open_pric": 12, "carri": [12, 31, 111, 164, 260, 263, 268, 300, 307, 351, 393, 399, 413, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 1009, 1019], "invers": [12, 54, 77, 83, 111, 166, 250, 269, 275, 286, 336, 350, 351, 370, 392, 404, 406, 408, 409, 410, 413, 417, 441, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 523, 529, 530, 531, 535, 537, 539, 553, 557, 560, 585, 586, 587, 624, 640, 641, 654, 655, 662, 664, 670, 671, 672, 673, 674, 676, 719, 738, 747, 792, 793, 839, 840, 847, 848, 854, 855, 857, 861, 864, 870, 871, 873, 889, 890, 897, 898, 899, 902, 903, 905, 907, 923, 979, 981, 985, 988, 989, 995, 999, 1000, 1018, 1020, 1021, 1022, 1027, 1030, 1035, 1038, 1039, 1041], "correl": [12, 27, 82, 85, 86, 106, 128, 144, 147, 156, 166, 167, 168, 170, 171, 173, 183, 188, 194, 217, 260, 281, 311, 316, 317, 371, 374, 375, 383, 392, 394, 402, 407, 409, 414, 446, 453, 478, 479, 481, 489, 490, 496, 520, 560, 602, 605, 623, 630, 631, 632, 678, 679, 738, 752, 773, 774, 775, 823, 837, 838, 874, 875, 877, 886, 976, 981, 986, 992, 995, 999, 1001, 1006, 1007, 1022, 1027, 1028, 1029, 1040, 1041], "condition": [12, 27, 199, 403, 407, 753, 979], "connect": [12, 39, 44, 47, 51, 54, 62, 66, 67, 376, 378, 387, 392, 407, 437, 441, 448, 458, 459, 581, 582, 691, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 983, 988, 990, 998, 1031, 1040], "edge_model": 12, "graphicallassocv": [12, 82, 396, 407, 467, 469, 470, 471, 472, 474, 1035, 1039, 1041, 1043], "seri": [12, 20, 82, 118, 168, 171, 172, 181, 199, 203, 220, 242, 265, 312, 319, 324, 370, 373, 383, 392, 405, 485, 486, 487, 488, 492, 496, 497, 498, 500, 501, 506, 537, 686, 690, 815, 913, 976, 981, 982, 986, 988, 999, 1005, 1030, 1033, 1034, 1035, 1039, 1042], "rather": [12, 53, 82, 111, 114, 163, 169, 199, 200, 213, 238, 309, 310, 349, 350, 360, 365, 374, 378, 380, 383, 384, 386, 390, 391, 392, 393, 405, 409, 410, 412, 413, 415, 444, 457, 459, 561, 577, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 625, 642, 643, 648, 649, 656, 657, 658, 659, 776, 808, 828, 830, 831, 860, 897, 898, 909, 934, 979, 981, 982, 985, 987, 988, 992, 1006, 1015, 1018, 1027, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1042, 1043], "former": [12, 351, 412, 413, 561, 796, 803, 812, 987, 1027, 1033, 1036], "recoveri": [12, 82, 183, 198, 407, 414], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 386], "trust": [12, 26, 71, 72, 81, 111, 116, 118, 119, 127, 128, 131, 134, 145, 156, 169, 170, 171, 172, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 382, 393, 399, 403, 1015, 1041], "unabl": [12, 26, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 156, 168, 169, 170, 171, 180, 183, 199, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 366, 877, 995, 1036], "render": [12, 26, 53, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 194, 203, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358, 378, 380, 382, 383, 384, 392, 547, 585, 627, 696, 698, 874, 886, 909, 911, 984, 1001, 1040, 1044], "nbviewer": [12, 26, 71, 72, 116, 118, 119, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358], "nbsp": [12, 26, 71, 72, 116, 118, 119, 124, 127, 128, 131, 134, 145, 156, 169, 170, 171, 180, 188, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 326, 358], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 37, 40, 55, 58, 60, 133, 170, 172, 199, 221, 235, 251, 255, 311, 326, 350, 358, 373, 383, 392, 393, 396, 405, 411, 412, 413, 430, 442, 491, 584, 585, 587, 590, 714, 783, 794, 795, 796, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 824, 870, 871, 907, 908, 981, 982, 984, 985, 986, 995, 1001, 1002, 1003, 1005, 1011, 1014, 1015, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1043, 1044], "amongst": [12, 1001], "indic": [12, 19, 20, 25, 26, 27, 48, 59, 60, 66, 75, 86, 90, 95, 111, 116, 156, 159, 164, 168, 170, 196, 222, 232, 235, 254, 262, 263, 266, 267, 283, 296, 324, 325, 328, 349, 350, 351, 358, 365, 373, 378, 379, 380, 382, 386, 387, 390, 392, 401, 402, 403, 405, 407, 409, 410, 412, 413, 416, 420, 433, 436, 440, 446, 447, 448, 449, 451, 452, 453, 456, 460, 463, 468, 483, 504, 505, 507, 508, 509, 519, 528, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 577, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 616, 623, 624, 625, 626, 628, 629, 635, 643, 646, 647, 649, 650, 651, 657, 659, 661, 669, 671, 678, 679, 686, 688, 690, 692, 699, 703, 708, 709, 714, 715, 716, 720, 723, 724, 725, 726, 729, 733, 734, 735, 736, 749, 766, 773, 774, 775, 776, 778, 779, 780, 782, 783, 787, 788, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 830, 831, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 861, 864, 868, 870, 878, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 913, 917, 918, 923, 938, 948, 949, 975, 980, 981, 982, 985, 986, 987, 988, 989, 992, 993, 995, 996, 999, 1000, 1006, 1011, 1015, 1018, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1038, 1040, 1042, 1043, 1044], "reflect": [12, 40, 46, 47, 80, 92, 96, 121, 170, 171, 199, 217, 269, 287, 350, 374, 377, 382, 392, 394, 402, 446, 452, 982, 985, 991, 993, 1019, 1028, 1036], "properti": [12, 25, 158, 159, 201, 216, 246, 285, 310, 358, 364, 367, 371, 378, 380, 395, 402, 403, 405, 407, 410, 412, 414, 415, 420, 438, 441, 447, 448, 449, 460, 461, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 587, 589, 590, 593, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 628, 642, 648, 651, 656, 658, 670, 671, 695, 700, 701, 704, 794, 797, 798, 808, 825, 826, 856, 857, 870, 871, 872, 878, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 977, 980, 981, 982, 985, 986, 988, 991, 995, 998, 1000, 1001, 1002, 1006, 1011, 1032, 1036, 1037, 1040, 1041], "impact": [12, 25, 36, 37, 68, 75, 111, 144, 166, 168, 169, 170, 201, 203, 217, 238, 254, 278, 286, 310, 320, 344, 350, 360, 364, 365, 371, 390, 393, 403, 405, 410, 443, 445, 532, 536, 543, 586, 662, 663, 664, 668, 670, 672, 673, 674, 688, 789, 794, 797, 798, 808, 820, 837, 838, 839, 874, 886, 897, 898, 920, 934, 956, 959, 974, 984, 992, 1000, 1034, 1037, 1040], "affinity_propag": [12, 44], "covariance_": [12, 34, 80, 82, 465, 466, 467, 468, 469, 470, 471, 472, 545, 546, 979, 1034], "n_label": [12, 92, 236, 392, 483, 519, 709, 716, 721, 734, 735, 749, 751, 787, 788, 814, 985, 1033, 1035], "lai": [12, 310, 340, 991], "canva": [12, 16], "manifold": [12, 39, 52, 67, 223, 224, 225, 226, 283, 315, 319, 320, 326, 367, 371, 392, 405, 410, 412, 498, 521, 526, 540, 545, 562, 846, 858, 867, 890, 920, 988, 1021, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1044], "dens": [12, 55, 166, 177, 218, 319, 320, 328, 364, 387, 392, 405, 410, 412, 414, 439, 442, 443, 445, 460, 463, 492, 519, 520, 523, 530, 531, 540, 562, 581, 582, 603, 604, 625, 648, 653, 654, 655, 662, 663, 664, 668, 669, 672, 673, 674, 683, 684, 685, 688, 689, 755, 756, 762, 774, 787, 854, 855, 862, 869, 870, 872, 874, 875, 876, 877, 886, 887, 888, 889, 890, 897, 898, 899, 900, 902, 903, 935, 956, 959, 975, 978, 981, 982, 985, 986, 988, 991, 995, 997, 998, 999, 1000, 1001, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "eigen_solv": [12, 44, 46, 66, 220, 221, 410, 448, 458, 531, 684, 685, 687, 689, 691, 982, 1028, 1037, 1040, 1041, 1042], "arpack": [12, 19, 44, 46, 66, 221, 410, 447, 448, 449, 458, 531, 537, 540, 684, 685, 687, 689, 691, 982, 1033, 1034, 1039, 1043], "don": [12, 54, 70, 122, 169, 221, 235, 236, 260, 283, 327, 333, 337, 349, 350, 364, 372, 378, 380, 382, 384, 386, 390, 391, 396, 406, 413, 642, 648, 825, 905, 906, 907, 908, 949, 974, 981, 984, 986, 989, 991, 999, 1008, 1020, 1031, 1036, 1043, 1044], "control": [12, 16, 34, 61, 99, 100, 117, 137, 156, 158, 183, 200, 203, 207, 231, 232, 261, 263, 278, 285, 302, 316, 318, 340, 354, 356, 357, 364, 365, 371, 374, 378, 380, 383, 386, 390, 392, 395, 399, 404, 405, 408, 409, 410, 411, 414, 415, 430, 436, 445, 450, 467, 468, 474, 527, 532, 533, 534, 535, 536, 539, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 589, 590, 592, 610, 615, 621, 623, 628, 630, 635, 637, 638, 642, 643, 645, 646, 647, 648, 650, 651, 652, 668, 670, 672, 673, 678, 679, 683, 688, 697, 705, 792, 793, 794, 796, 797, 798, 799, 800, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 823, 824, 827, 828, 831, 854, 855, 876, 878, 889, 890, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 911, 951, 953, 972, 974, 981, 982, 984, 985, 986, 988, 991, 992, 995, 997, 999, 1000, 1001, 1005, 1006, 1007, 1018, 1022, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "neighbor": [12, 31, 39, 44, 47, 60, 129, 132, 139, 163, 164, 221, 222, 224, 228, 237, 238, 287, 288, 289, 290, 292, 293, 294, 296, 297, 317, 319, 320, 349, 367, 370, 375, 387, 392, 395, 405, 411, 412, 413, 416, 419, 429, 437, 440, 441, 444, 446, 448, 453, 454, 457, 459, 492, 498, 500, 559, 566, 598, 603, 604, 623, 624, 627, 684, 685, 686, 687, 688, 689, 692, 776, 794, 823, 857, 858, 877, 893, 901, 959, 986, 991, 1006, 1007, 1014, 1019, 1021, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "node": [12, 41, 121, 125, 183, 315, 321, 354, 358, 386, 387, 405, 407, 410, 412, 437, 438, 441, 459, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 646, 650, 652, 678, 679, 688, 837, 838, 905, 906, 907, 908, 909, 911, 939, 953, 988, 990, 991, 992, 1001, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042], "plane": [12, 148, 211, 233, 289, 338, 340, 341, 346, 375, 448, 458, 979, 981, 1000, 1018], "node_position_model": 12, "locallylinearembed": [12, 220, 221, 222, 319, 684, 686, 688, 982, 988, 1032, 1033, 1041, 1042, 1043], "n_neighbor": [12, 44, 62, 67, 132, 163, 220, 221, 222, 224, 228, 238, 283, 285, 286, 289, 290, 291, 292, 295, 310, 315, 317, 349, 412, 448, 598, 603, 604, 624, 684, 685, 687, 689, 692, 839, 840, 841, 843, 845, 846, 850, 892, 893, 975, 982, 988, 991, 998, 1034, 1041, 1043], "output": [12, 14, 16, 25, 27, 37, 53, 59, 98, 110, 111, 114, 120, 121, 131, 135, 139, 140, 151, 159, 163, 164, 166, 169, 195, 227, 235, 242, 243, 248, 254, 258, 260, 263, 267, 269, 270, 278, 283, 306, 309, 311, 312, 315, 318, 319, 321, 350, 351, 353, 358, 359, 371, 372, 373, 375, 378, 380, 384, 386, 390, 391, 392, 403, 404, 405, 406, 408, 409, 412, 413, 414, 415, 421, 426, 429, 433, 437, 438, 439, 441, 442, 443, 445, 446, 448, 455, 456, 458, 459, 460, 461, 462, 463, 464, 478, 479, 480, 481, 484, 487, 488, 489, 490, 491, 492, 493, 499, 501, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 623, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 642, 643, 646, 648, 649, 650, 653, 654, 656, 657, 658, 659, 662, 663, 664, 667, 669, 670, 672, 674, 675, 677, 678, 679, 680, 684, 685, 686, 688, 690, 692, 695, 696, 709, 710, 717, 718, 719, 721, 723, 730, 740, 741, 743, 745, 746, 747, 748, 749, 751, 756, 762, 767, 780, 783, 785, 786, 792, 793, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 840, 841, 842, 846, 847, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 885, 886, 889, 890, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 918, 920, 923, 934, 935, 941, 942, 944, 952, 972, 974, 975, 977, 979, 981, 982, 985, 986, 987, 988, 989, 992, 995, 1000, 1007, 1011, 1012, 1014, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "edg": [12, 26, 46, 66, 98, 121, 223, 267, 386, 392, 402, 405, 407, 449, 557, 558, 581, 582, 584, 585, 587, 792, 834, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 862, 910, 995, 998, 1009, 1033, 1035, 1038, 1041], "displai": [12, 25, 27, 34, 37, 46, 48, 60, 71, 81, 82, 85, 86, 89, 95, 117, 122, 127, 128, 131, 166, 169, 170, 184, 186, 217, 227, 228, 238, 243, 249, 257, 261, 262, 267, 269, 274, 293, 311, 316, 317, 335, 355, 364, 378, 380, 381, 385, 387, 395, 404, 406, 410, 413, 414, 434, 460, 463, 464, 492, 537, 560, 626, 627, 628, 654, 683, 693, 694, 696, 697, 698, 709, 714, 777, 784, 794, 800, 808, 816, 823, 857, 858, 870, 872, 877, 895, 902, 909, 910, 911, 925, 951, 972, 985, 989, 1005, 1022, 1036, 1038, 1039, 1041, 1042], "strength": [12, 131, 158, 199, 203, 261, 315, 364, 408, 412, 442, 563, 564, 639, 644, 645, 648, 654, 655, 665, 668, 669, 670, 671, 672, 674, 676, 683, 778, 854, 855, 897, 898, 902, 903, 974, 981, 988, 991, 999, 1000], "plan": [12, 372, 376, 378, 379, 393, 995, 1030], "fair": [12, 412, 686, 690, 826, 986, 1009], "crucial": [12, 168, 203, 255, 364, 377, 378, 393, 405, 415, 1000], "challeng": [12, 131, 151, 170, 178, 217, 228, 366, 373, 374, 405, 407, 458, 468, 985, 991, 1009, 1011], "overlap": [12, 37, 55, 90, 125, 147, 223, 247, 350, 376, 402, 405, 409, 412, 413, 583, 787, 788, 795, 799, 801, 802, 803, 804, 812, 982, 995, 1033], "heurist": [12, 14, 123, 238, 349, 365, 405, 414, 445, 448, 457, 458, 504, 505, 533, 535, 542, 672, 673, 674, 687, 691, 797, 798, 899, 900, 901, 902, 903, 922, 982, 983, 988, 999, 1001, 1009, 1018, 1027, 1028, 1032, 1036, 1039, 1040], "direct": [12, 85, 86, 95, 97, 101, 104, 148, 205, 245, 251, 257, 292, 302, 310, 336, 341, 376, 378, 379, 382, 386, 393, 395, 405, 408, 410, 413, 414, 448, 458, 467, 468, 474, 530, 537, 545, 584, 585, 587, 598, 637, 684, 846, 979, 980, 981, 986, 988, 990, 1006, 1019, 1027, 1030], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 58, 61, 82, 89, 95, 98, 155, 164, 190, 211, 215, 237, 287, 289, 292, 293, 297, 302, 336, 341, 342, 346, 367, 370, 375, 387, 392, 405, 411, 412, 416, 419, 429, 440, 442, 444, 446, 448, 453, 457, 458, 492, 498, 500, 603, 604, 623, 624, 626, 627, 631, 684, 685, 687, 688, 692, 787, 788, 794, 823, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 857, 858, 862, 877, 959, 982, 991, 1000, 1006, 1007, 1014, 1022, 1027, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1039], "along": [12, 13, 56, 59, 66, 86, 118, 124, 186, 199, 233, 235, 264, 315, 350, 351, 360, 378, 382, 384, 386, 387, 392, 395, 396, 399, 402, 410, 412, 413, 414, 417, 529, 546, 583, 607, 608, 626, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 672, 674, 677, 678, 679, 680, 681, 682, 774, 775, 787, 794, 808, 866, 867, 870, 871, 874, 875, 876, 877, 882, 883, 884, 886, 887, 888, 913, 936, 960, 966, 974, 981, 988, 995, 998, 1009, 1027, 1032, 1033, 1035, 1039, 1040], "linecollect": [12, 223, 231, 628], "facecolor": [12, 16, 26, 34, 45, 60, 95, 102, 113, 140, 159, 220, 236, 260, 290, 307, 334, 337, 340, 341, 343], "partial_correl": 12, "precision_": [12, 82, 465, 466, 467, 468, 469, 470, 471, 472], "sqrt": [12, 80, 81, 82, 98, 101, 105, 115, 137, 172, 178, 180, 223, 225, 240, 245, 246, 247, 250, 251, 260, 341, 344, 405, 412, 413, 415, 459, 465, 466, 467, 468, 469, 470, 471, 472, 534, 536, 543, 553, 554, 555, 556, 560, 561, 615, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 695, 726, 758, 759, 764, 877, 890, 905, 906, 907, 908, 977, 981, 982, 985, 987, 997, 1041], "diag": [12, 82, 159, 247, 250, 410, 415, 528, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 792, 793, 981, 1042], "newaxi": [12, 13, 19, 24, 42, 82, 105, 112, 152, 180, 189, 195, 200, 201, 202, 204, 205, 216, 231, 233, 274, 288, 295, 356, 357, 402, 532, 981], "ab": [12, 17, 40, 75, 99, 106, 113, 121, 131, 144, 148, 172, 186, 190, 210, 212, 215, 217, 223, 260, 305, 334, 346, 405, 534, 536, 543, 623, 741, 837, 838, 872, 985], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 60, 61, 102], "start_idx": [12, 223], "end_idx": [12, 223], "sequenc": [12, 111, 120, 187, 223, 380, 392, 406, 409, 410, 412, 413, 499, 508, 557, 558, 565, 566, 577, 578, 584, 585, 587, 642, 794, 797, 805, 823, 857, 881, 937, 938, 948, 956, 959, 1005, 1027, 1030, 1032, 1033], "line0": [12, 223], "linen": [12, 223], "x0": [12, 191, 208, 223, 305, 333, 392, 426, 460, 563, 564, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878], "y0": [12, 223], "x1": [12, 16, 85, 91, 113, 123, 154, 211, 223, 305, 333, 380, 392, 426, 460, 505, 563, 564, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 695, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 1019], "y1": [12, 91, 113, 223, 505, 712, 986, 987], "xm": [12, 223], "ym": [12, 223], "segment": [12, 36, 47, 68, 166, 223, 231, 373, 386, 405, 413, 448, 458, 504, 505, 687, 853, 985, 1005, 1009, 1035, 1037, 1039], "lc": [12, 223, 231], "zorder": [12, 58, 97, 128, 140, 152, 160, 189, 197, 221, 223, 231, 234, 245, 316, 341], "hot_r": [12, 305], "norm": [12, 13, 14, 17, 30, 34, 40, 54, 98, 101, 154, 157, 178, 183, 185, 190, 223, 245, 246, 247, 249, 251, 257, 261, 288, 305, 336, 350, 384, 387, 392, 405, 413, 414, 438, 439, 443, 455, 456, 460, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 485, 527, 530, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 585, 586, 587, 593, 639, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 670, 672, 674, 677, 680, 681, 682, 686, 688, 689, 690, 765, 834, 869, 884, 897, 899, 902, 967, 968, 978, 981, 983, 985, 995, 999, 1030, 1032, 1034, 1038], "set_arrai": [12, 223, 231], "set_linewidth": [12, 223, 231], "add_collect": [12, 223, 231], "index": [12, 14, 17, 37, 38, 39, 40, 41, 49, 50, 58, 71, 72, 111, 116, 118, 122, 145, 148, 156, 163, 168, 169, 170, 171, 172, 199, 203, 217, 239, 242, 246, 247, 251, 255, 258, 259, 260, 261, 263, 271, 272, 283, 305, 310, 311, 312, 319, 324, 325, 350, 351, 373, 375, 376, 378, 380, 382, 387, 390, 392, 402, 406, 409, 410, 412, 413, 420, 439, 443, 444, 445, 446, 447, 449, 450, 453, 455, 456, 460, 463, 499, 505, 553, 554, 555, 556, 560, 561, 562, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 613, 628, 629, 636, 693, 700, 701, 708, 712, 714, 726, 733, 752, 774, 775, 781, 783, 789, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 823, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 870, 905, 906, 907, 908, 938, 956, 959, 964, 965, 985, 987, 988, 989, 999, 1001, 1005, 1018, 1020, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "dx": [12, 13, 522, 695], "dy": [12, 695], "this_dx": 12, "argmin": [12, 123, 259, 380, 407, 527, 533, 541, 542, 681, 774, 775, 1001], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 62, 102, 228, 245, 299, 307], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 56, 60, 67, 91, 92, 102, 113, 120, 127, 129, 130, 132, 133, 140, 143, 152, 153, 155, 159, 170, 182, 191, 201, 208, 211, 212, 213, 232, 233, 234, 236, 238, 245, 248, 260, 263, 274, 286, 289, 290, 291, 294, 299, 307, 308, 310, 329, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 346, 355, 356, 357, 627], "xlim": [12, 26, 44, 58, 62, 73, 78, 79, 80, 97, 113, 114, 115, 130, 137, 152, 153, 169, 178, 189, 191, 198, 205, 208, 213, 228, 236, 246, 251, 255, 269, 274, 289, 290, 335, 340, 341, 345, 357], "ptp": 12, "ylim": [12, 24, 26, 33, 37, 44, 58, 62, 78, 79, 80, 97, 113, 114, 121, 122, 124, 130, 133, 138, 152, 153, 169, 186, 188, 189, 191, 192, 193, 205, 208, 209, 213, 228, 236, 246, 251, 255, 259, 263, 269, 273, 274, 289, 290, 335, 340, 341, 345, 349, 357], "03": [12, 52, 68, 80, 95, 107, 135, 148, 156, 169, 180, 217, 226, 232, 243, 245, 251, 261, 276, 297, 303, 313, 325, 350, 375, 413, 743, 794, 981, 985], "651": [12, 15, 214, 218, 384], "plot_stock_market": [12, 15], "parallel": [13, 110, 115, 117, 120, 135, 166, 170, 201, 261, 316, 317, 319, 341, 358, 363, 370, 378, 379, 381, 382, 390, 392, 406, 414, 416, 417, 433, 440, 442, 444, 445, 446, 448, 453, 454, 457, 460, 463, 468, 491, 527, 529, 530, 531, 533, 535, 537, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 585, 590, 598, 606, 628, 630, 635, 654, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 805, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 856, 859, 892, 893, 953, 955, 1006, 1015, 1020, 1022, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043], "acquir": [13, 119, 262, 1039], "angl": [13, 34, 98, 148, 245, 246, 247, 250, 251, 375, 410, 527, 533, 535, 538, 539, 541, 542, 544, 646, 647, 648, 649, 650, 651, 652, 659, 660, 661, 674, 678, 679, 680, 681, 682, 688, 982, 983, 1007, 1022, 1027], "Such": [13, 127, 151, 156, 168, 178, 183, 188, 200, 263, 349, 392, 393, 409, 410, 412, 551, 552, 652, 975, 985, 988, 995, 1001, 1018, 1037, 1042, 1044], "ct": [13, 159, 242, 406, 460, 462, 463], "cellular": 13, "materi": [13, 393, 577, 887, 888, 1004], "haar": 13, "wavelet": [13, 105, 410], "sparsiti": [13, 82, 166, 177, 183, 192, 214, 215, 218, 234, 350, 364, 392, 407, 410, 412, 414, 497, 498, 523, 527, 533, 534, 535, 536, 539, 541, 542, 543, 642, 648, 653, 654, 672, 674, 717, 718, 719, 866, 872, 877, 882, 978, 981, 988, 995, 1014, 1019, 1029], "oper": [13, 19, 148, 159, 166, 234, 253, 257, 267, 276, 351, 364, 365, 375, 376, 378, 381, 384, 390, 392, 393, 395, 399, 401, 409, 410, 412, 413, 414, 418, 444, 457, 464, 471, 478, 479, 480, 481, 500, 529, 530, 537, 547, 548, 562, 568, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 612, 617, 620, 626, 631, 639, 654, 685, 689, 698, 702, 703, 704, 722, 769, 776, 777, 783, 784, 813, 823, 826, 837, 838, 860, 864, 869, 880, 881, 895, 902, 905, 936, 953, 958, 981, 988, 995, 1000, 1005, 1009, 1018, 1031, 1033, 1034, 1035, 1037, 1038, 1043], "fidel": 13, "penal": [13, 30, 82, 131, 183, 188, 192, 199, 203, 215, 217, 310, 344, 405, 407, 410, 414, 465, 466, 467, 468, 469, 470, 471, 472, 474, 643, 648, 649, 657, 659, 672, 701, 711, 729, 781, 790, 870, 897, 898, 904, 981, 985, 987, 989, 999, 1000, 1018], "account": [13, 55, 97, 104, 111, 156, 163, 169, 217, 235, 260, 286, 292, 344, 346, 350, 364, 374, 378, 392, 393, 399, 405, 408, 409, 410, 412, 413, 459, 563, 564, 623, 624, 626, 628, 629, 645, 669, 675, 700, 703, 723, 724, 725, 733, 738, 751, 778, 779, 782, 783, 795, 799, 812, 871, 977, 979, 983, 985, 986, 987, 988, 995, 999, 1001, 1032, 1034, 1035, 1036, 1039, 1040, 1042, 1044], "call": [13, 17, 46, 48, 50, 54, 71, 92, 109, 116, 123, 145, 151, 155, 157, 159, 168, 170, 187, 199, 200, 203, 217, 235, 239, 241, 242, 260, 261, 269, 274, 275, 278, 283, 285, 310, 312, 317, 318, 349, 350, 351, 358, 364, 365, 366, 373, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 395, 396, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 417, 428, 436, 439, 442, 443, 445, 446, 447, 448, 449, 450, 453, 456, 458, 460, 461, 464, 465, 470, 478, 479, 480, 484, 487, 488, 491, 493, 499, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 573, 578, 579, 581, 582, 584, 585, 587, 593, 598, 603, 604, 606, 607, 610, 613, 616, 623, 624, 625, 626, 627, 628, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 700, 727, 737, 750, 766, 769, 773, 774, 775, 776, 788, 792, 793, 794, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 843, 846, 848, 853, 854, 855, 856, 857, 860, 861, 862, 864, 866, 867, 869, 874, 877, 878, 881, 886, 887, 888, 889, 890, 894, 897, 898, 899, 900, 902, 903, 906, 908, 924, 928, 933, 934, 942, 943, 945, 951, 952, 953, 956, 959, 969, 974, 975, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 995, 997, 998, 1000, 1001, 1005, 1009, 1011, 1015, 1018, 1019, 1020, 1022, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "algorithm": [13, 17, 18, 22, 29, 31, 36, 37, 42, 43, 45, 46, 56, 57, 61, 62, 66, 68, 79, 85, 95, 97, 111, 112, 113, 117, 120, 166, 175, 186, 188, 202, 215, 222, 224, 227, 231, 238, 243, 246, 247, 248, 251, 257, 260, 269, 283, 289, 290, 292, 296, 305, 307, 310, 315, 316, 317, 320, 335, 349, 350, 360, 364, 366, 371, 372, 373, 374, 375, 378, 379, 380, 381, 386, 387, 391, 392, 394, 401, 402, 404, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 465, 470, 471, 474, 478, 479, 480, 484, 499, 507, 508, 509, 510, 511, 518, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 549, 550, 551, 552, 555, 556, 559, 587, 599, 600, 606, 607, 631, 633, 635, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 700, 701, 704, 713, 715, 730, 732, 738, 769, 773, 774, 788, 790, 792, 793, 825, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 853, 858, 862, 864, 877, 881, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 917, 933, 934, 936, 950, 954, 960, 975, 977, 980, 982, 983, 984, 985, 987, 990, 991, 995, 998, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1011, 1014, 1015, 1017, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "computation": [13, 78, 95, 117, 123, 131, 151, 283, 340, 349, 363, 379, 404, 405, 406, 409, 410, 412, 415, 534, 628, 629, 667, 758, 794, 796, 797, 798, 808, 820, 981, 982, 984, 992, 993, 997, 1019, 1022, 1031], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 68, 79, 94, 96, 97, 107, 111, 117, 124, 129, 134, 142, 149, 150, 161, 166, 171, 181, 183, 185, 187, 190, 197, 203, 214, 219, 222, 226, 227, 231, 243, 247, 253, 255, 257, 276, 281, 299, 307, 309, 310, 315, 317, 329, 333, 348, 350, 352, 360, 373, 375, 392, 403, 407, 408, 410, 414, 415, 433, 434, 439, 442, 443, 445, 484, 500, 508, 510, 511, 518, 521, 537, 545, 546, 549, 560, 561, 577, 578, 584, 585, 586, 587, 602, 604, 606, 607, 611, 618, 621, 627, 635, 639, 654, 668, 684, 685, 686, 687, 688, 700, 733, 738, 774, 783, 794, 795, 796, 797, 799, 800, 808, 810, 811, 812, 813, 814, 815, 823, 832, 835, 839, 854, 858, 870, 871, 875, 877, 878, 882, 883, 884, 885, 886, 887, 888, 897, 899, 900, 902, 903, 905, 974, 979, 982, 985, 987, 988, 991, 1000, 1024], "l2": [13, 30, 40, 82, 85, 166, 177, 183, 184, 190, 199, 210, 214, 215, 217, 218, 261, 283, 305, 328, 349, 350, 380, 387, 390, 405, 407, 410, 413, 437, 441, 446, 453, 520, 534, 536, 543, 554, 557, 558, 561, 585, 586, 587, 639, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 668, 672, 674, 676, 677, 682, 683, 684, 730, 745, 756, 757, 773, 774, 775, 808, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 854, 855, 869, 877, 884, 897, 898, 902, 903, 904, 906, 908, 968, 974, 978, 981, 983, 988, 989, 995, 999, 1001, 1018, 1020, 1029, 1031, 1032, 1034, 1036], "produc": [13, 25, 26, 44, 57, 70, 98, 124, 125, 126, 127, 183, 266, 302, 327, 360, 373, 374, 378, 380, 383, 392, 393, 405, 406, 409, 410, 412, 436, 439, 442, 448, 515, 532, 555, 559, 577, 584, 589, 590, 628, 629, 796, 797, 798, 806, 811, 814, 818, 862, 872, 899, 902, 976, 977, 981, 983, 984, 985, 988, 991, 992, 996, 998, 999, 1000, 1011, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 55, 60, 62, 66, 73, 80, 94, 95, 100, 107, 111, 113, 116, 119, 129, 148, 164, 166, 170, 171, 175, 177, 200, 218, 221, 236, 247, 260, 263, 269, 270, 305, 307, 310, 317, 327, 331, 336, 340, 341, 347, 349, 360, 364, 374, 375, 380, 383, 386, 390, 392, 403, 405, 406, 407, 410, 412, 413, 415, 460, 508, 515, 529, 534, 536, 537, 543, 545, 577, 584, 585, 587, 606, 627, 634, 642, 643, 669, 672, 673, 686, 690, 720, 727, 740, 741, 743, 748, 787, 813, 829, 830, 856, 857, 899, 901, 902, 907, 908, 974, 975, 977, 979, 981, 982, 984, 991, 992, 995, 999, 1000, 1016, 1018, 1019, 1027, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1044], "central": [13, 201, 405, 991, 1005], "emmanuel": [13, 66, 1027, 1034, 1035, 1036], "gouillart": [13, 66, 1027], "nsup": 13, "ndimag": [13, 46, 47, 54, 302, 1019], "_weight": [13, 217], "orig": [13, 290], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 60, 62, 66, 81, 102, 121, 123, 140, 168, 189, 190, 217, 223, 234, 238, 271, 283, 312, 413, 975, 981, 1034], "hstack": [13, 33, 42, 133, 144, 225, 237, 255, 339, 409, 856], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 140], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 306, 339, 631], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 123, 133, 350, 837, 838], "mask": [13, 42, 66, 119, 199, 207, 238, 258, 259, 328, 387, 392, 406, 412, 465, 470, 557, 558, 577, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 625, 626, 628, 629, 645, 667, 794, 797, 798, 808, 957, 975, 992, 1027, 1030, 1032, 1033, 1035, 1037], "logical_and": [13, 124], "proj_oper": 13, "coo_matrix": [13, 185, 448, 581, 582, 956, 959], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 58, 62, 103, 114, 128, 130, 143, 178, 183, 222, 223, 228, 234, 235, 274, 295, 316, 317, 328, 329, 343, 350, 356, 357, 387, 396, 540, 700, 701, 711, 752, 776, 781, 889, 890, 892, 893, 894, 997, 1011, 1027, 1038, 1039], "gaussian_filt": [13, 46, 47, 54, 1019], "sigma": [13, 46, 47, 54, 80, 103, 124, 258, 260, 402, 407, 410, 412, 610, 645, 979, 981, 983, 987, 990, 1019], "logical_xor": [13, 155, 342], "binary_eros": 13, "128": [13, 14, 199, 364, 532], "proj": [13, 645], "randn": [13, 33, 34, 39, 54, 65, 66, 80, 81, 98, 103, 127, 143, 151, 155, 168, 171, 188, 193, 194, 198, 212, 213, 216, 246, 249, 250, 255, 267, 269, 270, 274, 289, 290, 312, 316, 317, 335, 341, 342, 346, 380, 383, 639, 666, 668, 674, 815, 900, 903], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 34, 54, 58, 71, 74, 78, 82, 87, 103, 117, 120, 121, 123, 124, 136, 141, 142, 146, 148, 149, 169, 170, 177, 183, 187, 199, 201, 217, 218, 247, 248, 250, 253, 257, 260, 261, 262, 264, 266, 269, 274, 276, 278, 287, 302, 304, 306, 311, 313, 315, 317, 327, 336, 344, 367, 373, 378, 380, 387, 390, 391, 392, 396, 399, 400, 403, 406, 407, 410, 412, 413, 414, 415, 433, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 489, 497, 498, 500, 511, 537, 563, 564, 571, 589, 590, 593, 598, 602, 605, 638, 639, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 697, 698, 702, 709, 723, 736, 780, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 831, 857, 858, 862, 877, 878, 895, 897, 899, 902, 940, 984, 985, 988, 989, 993, 995, 1000, 1001, 1005, 1006, 1007, 1009, 1011, 1014, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "lassocv": [13, 131, 137, 169, 183, 188, 396, 412, 414, 647, 648, 650, 651, 652, 659, 680, 981, 1015, 1027, 1030, 1034, 1037, 1038, 1040, 1041, 1044], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 58, 82, 89, 95, 98, 155, 158, 166, 177, 190, 215, 218, 231, 237, 269, 287, 295, 302, 325, 336, 342, 415, 631, 641, 649, 659, 668, 680, 696, 703, 840, 848, 858, 872, 876, 976, 981, 985, 995, 1034, 1039], "133": [13, 56], "wspace": [13, 14, 39, 44, 45, 62, 80, 95, 113, 199, 217, 228, 245, 247, 248, 251, 288, 296, 325, 333], "672": [13, 15], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 72, 384, 404, 413, 531, 534, 540, 543, 1021, 1022, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "latentdirichletalloc": [14, 366, 383, 410, 1005, 1032, 1034, 1041, 1042], "corpu": [14, 350, 351, 373, 410, 584, 585, 586, 587, 1020, 1028], "frobeniu": [14, 98, 439, 443, 455, 465, 466, 467, 468, 469, 470, 471, 472, 527, 533, 534, 536, 541, 542, 543, 981, 1034], "kullback": [14, 220, 410, 534, 536, 543, 688, 982, 1034], "leibler": [14, 220, 410, 534, 536, 543, 688, 982, 1034], "diverg": [14, 123, 220, 225, 288, 534, 536, 543, 688, 853, 982, 984, 985, 990, 992, 1034, 1035, 1040], "probabilist": [14, 27, 30, 82, 94, 107, 150, 151, 154, 158, 161, 166, 349, 392, 403, 411, 412, 433, 469, 472, 528, 530, 531, 537, 555, 584, 585, 606, 618, 639, 641, 672, 699, 736, 794, 819, 864, 899, 900, 902, 903, 978, 979, 981, 984, 985, 990, 995, 1000, 1001, 1005, 1009, 1027, 1030, 1034], "semant": [14, 349, 350, 392, 540, 1020, 1021, 1022, 1029], "runnabl": [14, 382, 383], "coupl": [14, 52, 53, 55, 221, 372, 373, 402, 403, 405, 414, 585, 903, 974, 1000], "ten": [14, 19, 111, 117, 148, 221, 251, 373, 375, 412, 516, 902, 1036], "polynomi": [14, 163, 166, 174, 176, 177, 199, 205, 218, 240, 260, 274, 317, 318, 333, 343, 370, 374, 448, 487, 616, 635, 636, 637, 639, 668, 760, 769, 770, 823, 858, 867, 869, 872, 876, 897, 899, 900, 901, 902, 903, 980, 1000, 1007, 1022, 1039, 1040], "lda": [14, 33, 94, 107, 166, 292, 360, 375, 401, 500, 532, 537, 545, 546, 846, 1005, 1007, 1021, 1022, 1032], "proport": [14, 26, 40, 147, 185, 199, 206, 212, 228, 238, 263, 286, 290, 293, 344, 346, 364, 373, 403, 405, 407, 409, 410, 412, 413, 434, 435, 442, 465, 470, 511, 545, 546, 551, 553, 555, 556, 557, 558, 559, 560, 579, 580, 584, 587, 623, 628, 654, 655, 662, 663, 664, 670, 671, 672, 674, 692, 697, 708, 795, 796, 797, 798, 811, 814, 823, 843, 854, 855, 871, 897, 898, 899, 902, 903, 905, 907, 909, 911, 923, 974, 984, 985, 988, 991, 999, 1000, 1001, 1032, 1044], "tf": [14, 19, 232, 349, 350, 351, 373, 410, 517, 540, 584, 585, 586, 587, 836, 844, 869, 974, 983, 987, 995, 1005, 1020], "idf": [14, 19, 232, 349, 350, 351, 373, 410, 517, 540, 584, 585, 586, 587, 836, 844, 869, 974, 983, 987, 995, 1020, 1027], "272": [14, 376, 395, 397, 398], "285": [14, 242, 287, 297, 325, 719], "2000": [14, 26, 40, 50, 75, 96, 103, 122, 175, 248, 251, 260, 278, 299, 319, 350, 373, 375, 405, 406, 412, 417, 448, 458, 529, 530, 555, 685, 687, 689, 738, 783, 792, 843, 873, 885, 982, 985, 991, 997, 1011, 1019], "083": [14, 118, 135, 258, 358, 359], "314": 14, "minibatchnmf": [14, 366, 410, 1041, 1043, 1044], "batch_siz": [14, 19, 42, 64, 95, 98, 99, 350, 410, 445, 530, 532, 533, 534, 535, 542, 853, 854, 855, 937, 938, 951, 1028, 1035, 1038, 1040, 1041], "090": [14, 48, 102, 107], "088": [14, 665, 993], "ensta": [14, 17, 37, 48, 61, 199, 217, 221, 261, 263, 349, 350, 351], "chyi": [14, 1030, 1031, 1032, 1033, 1034], "kwei": [14, 1030, 1031, 1032, 1033, 1034], "yau": [14, 1030, 1031, 1032, 1033, 1034], "chyikwei": 14, "fetch_20newsgroup": [14, 19, 70, 261, 328, 349, 350, 351, 373, 485, 1020, 1032, 1037], "countvector": [14, 328, 351, 373, 383, 406, 410, 413, 485, 532, 578, 585, 586, 587, 1020, 1027, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "tfidfvector": [14, 19, 70, 261, 349, 373, 410, 413, 485, 584, 585, 586, 1020, 1027, 1029, 1035, 1036, 1037, 1040, 1041], "n_top_word": 14, "init": [14, 42, 45, 58, 59, 61, 64, 170, 179, 220, 221, 223, 224, 225, 246, 248, 283, 350, 381, 386, 405, 410, 412, 439, 443, 445, 447, 449, 455, 456, 534, 536, 543, 544, 555, 556, 628, 629, 686, 688, 690, 846, 982, 1027, 1036, 1039, 1041, 1042, 1043], "nndsvda": [14, 410, 534, 536, 543, 1036, 1039], "plot_top_word": 14, "feature_nam": [14, 19, 90, 106, 118, 125, 128, 148, 169, 171, 208, 239, 286, 305, 315, 316, 317, 333, 349, 355, 371, 373, 383, 406, 486, 487, 488, 492, 496, 497, 498, 500, 501, 506, 578, 627, 628, 629, 878, 909, 910, 911, 993, 1001, 1043], "flatten": [14, 32, 223, 233, 258, 309, 333, 345, 384, 498, 565, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 846], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 123, 125, 171, 172, 199, 217, 315, 324, 325, 349, 350, 373, 993], "top_featur": 14, "barh": [14, 125, 163, 164, 168, 169, 171, 172, 242, 312, 349, 350, 351], "fontdict": [14, 39], "labels": [14, 309], "set_vis": [14, 34, 287, 293, 305], "filter": [14, 46, 47, 205, 217, 258, 260, 285, 349, 373, 380, 384, 387, 404, 405, 413, 444, 484, 485, 499, 584, 587, 591, 592, 593, 594, 769, 832, 926, 950, 987, 988, 1017, 1020, 1037], "useless": [14, 120, 263, 384, 414, 511, 524, 654, 708, 981, 995, 1036], "strip": [14, 217, 350, 364, 372, 373, 492], "header": [14, 70, 261, 349, 350, 373, 376, 413, 484, 485, 794, 797, 798, 808], "footer": [14, 70, 261, 349, 350, 373, 484, 485], "repli": [14, 349, 377, 378, 381], "common": [14, 17, 19, 98, 145, 148, 166, 167, 173, 255, 267, 278, 317, 340, 349, 351, 358, 364, 367, 372, 378, 380, 386, 388, 390, 391, 394, 396, 402, 403, 404, 405, 406, 409, 411, 414, 415, 461, 463, 492, 586, 628, 649, 668, 669, 697, 741, 748, 764, 795, 796, 799, 809, 811, 812, 813, 814, 815, 820, 823, 858, 860, 868, 869, 870, 875, 877, 882, 883, 885, 886, 887, 888, 936, 974, 975, 981, 988, 991, 995, 1000, 1001, 1005, 1006, 1009, 1011, 1022, 1027, 1035, 1037, 1038, 1042], "english": [14, 19, 70, 349, 350, 351, 383, 413, 584, 585, 587, 1005, 1006, 1020, 1040], "occur": [14, 70, 199, 203, 217, 344, 360, 378, 380, 386, 393, 402, 405, 407, 409, 413, 440, 504, 505, 568, 577, 584, 586, 587, 623, 667, 793, 794, 797, 798, 800, 808, 816, 819, 820, 821, 824, 867, 922, 985, 987, 995, 1020, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 261, 328, 349, 350, 584, 587, 1038], "min_df": [14, 19, 70, 261, 328, 349, 350, 413, 584, 587, 1027, 1029, 1038], "max_featur": [14, 31, 115, 126, 237, 257, 272, 317, 412, 414, 551, 552, 553, 554, 555, 556, 559, 560, 561, 584, 587, 593, 905, 906, 907, 908, 974, 981, 1027, 1029, 1030, 1034, 1035, 1038, 1041], "stop_word": [14, 19, 349, 350, 413, 584, 585, 587], "tfidf": [14, 70, 328, 413, 587, 1020], "tf_vector": 14, "beta_loss": [14, 534, 536, 543, 1034], "alpha_w": [14, 410, 534, 536, 543, 1040], "00005": 14, "alpha_h": [14, 410, 534, 536, 543, 1040], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 169, 171, 318, 349, 350, 351, 373, 380, 392, 406, 413, 421, 426, 429, 438, 439, 441, 443, 445, 460, 463, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 995, 1040, 1041, 1042, 1043], "solver": [14, 30, 33, 34, 46, 66, 166, 177, 188, 190, 191, 192, 199, 201, 214, 215, 217, 218, 299, 300, 301, 302, 312, 349, 384, 390, 392, 395, 401, 405, 417, 448, 458, 467, 468, 474, 498, 529, 531, 536, 537, 540, 543, 545, 642, 643, 644, 648, 649, 654, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 670, 672, 676, 677, 680, 683, 684, 685, 687, 689, 691, 783, 808, 823, 828, 831, 854, 855, 899, 900, 901, 902, 903, 979, 982, 985, 989, 999, 1000, 1005, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mu": [14, 80, 81, 260, 410, 418, 469, 471, 472, 475, 476, 477, 536, 543, 979, 981, 1034, 1037], "mbnmf": 14, "learning_method": [14, 383, 532], "learning_offset": [14, 532], "tf_feature_nam": 14, "115": [14, 15, 170, 993], "plot_topics_extraction_with_nmf_lda": [14, 15], "975": [15, 148, 168, 1000], "execut": [15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 135, 141, 149, 161, 163, 165, 173, 176, 183, 188, 218, 226, 234, 243, 252, 265, 276, 279, 282, 297, 303, 313, 322, 330, 347, 352, 359, 365, 378, 384, 399, 401, 405, 410, 416, 439, 457, 794, 800, 808, 816, 818, 819, 820, 821, 824, 842, 951, 952, 995, 998, 1012, 1020, 1029, 1032, 1035], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 68, 76, 80, 83, 87, 93, 98, 107, 135, 141, 149, 156, 161, 165, 169, 170, 173, 176, 190, 217, 218, 226, 232, 243, 252, 258, 261, 268, 276, 279, 282, 297, 302, 303, 313, 322, 324, 325, 330, 347, 350, 352, 359, 372, 375, 384, 405, 412, 413, 709, 711, 783, 794, 808, 821, 906, 981, 985, 995, 997, 999, 1019], "09": [15, 97, 105, 107, 135, 169, 222, 232, 236, 243, 273, 276, 302, 405, 730, 835, 985, 995, 999], "real": [15, 31, 34, 55, 57, 70, 74, 78, 80, 111, 154, 169, 203, 224, 238, 254, 266, 274, 287, 306, 307, 340, 351, 364, 367, 371, 372, 375, 382, 384, 387, 390, 391, 392, 402, 403, 405, 407, 409, 410, 412, 413, 465, 485, 486, 489, 490, 491, 492, 493, 496, 497, 500, 506, 547, 548, 549, 551, 552, 553, 554, 555, 556, 560, 561, 588, 590, 591, 592, 593, 594, 595, 596, 627, 695, 700, 719, 723, 747, 750, 752, 780, 790, 822, 854, 855, 899, 900, 901, 902, 903, 906, 908, 975, 976, 977, 982, 985, 987, 989, 990, 991, 1001, 1004, 1022, 1027, 1040], "svm_gui": [15, 16, 1018], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 81, 170, 328, 349, 350, 351, 373, 384, 404, 405, 407, 410, 787, 788, 792, 827, 909, 985, 986, 992, 1005, 1020], "frontend": [16, 384], "mainli": [16, 27, 53, 111, 114, 151, 269, 278, 364, 380, 403, 607, 987, 992], "intend": [16, 57, 58, 99, 200, 340, 349, 378, 379, 380, 385, 390, 409, 464, 578, 669, 695, 866, 867, 877, 895, 980, 981, 985, 989, 996], "didact": [16, 378, 1006], "region": [16, 25, 36, 47, 49, 53, 56, 66, 68, 132, 158, 166, 169, 199, 217, 228, 232, 233, 251, 308, 336, 344, 375, 385, 392, 405, 412, 415, 444, 446, 452, 458, 583, 982, 985, 988, 991, 995, 999, 1001, 1019], "induc": [16, 26, 56, 169, 183, 190, 192, 197, 200, 214, 234, 238, 344, 351, 402, 404, 410, 412, 442, 445, 535, 539, 549, 553, 554, 555, 556, 560, 561, 562, 639, 721, 751, 870, 905, 906, 907, 908, 978, 985, 999, 1018], "mous": [16, 372], "button": [16, 378, 386, 1018], "prettenho": 16, "tkagg": 16, "backend": [16, 365, 392, 464, 895, 951, 953, 955, 985, 1030, 1035, 1036, 1037, 1038], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 318, 367, 381, 382, 387, 392, 396, 433, 437, 441, 442, 443, 445, 446, 453, 455, 474, 522, 532, 533, 534, 535, 536, 542, 549, 550, 551, 552, 565, 566, 575, 576, 578, 623, 629, 634, 640, 641, 646, 647, 650, 651, 652, 654, 660, 661, 736, 737, 745, 746, 751, 763, 773, 774, 775, 797, 798, 800, 818, 819, 820, 832, 833, 834, 836, 844, 856, 870, 899, 900, 901, 902, 903, 913, 928, 929, 931, 974, 975, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 1027, 1028, 1032, 1042], "y_min": [16, 31, 58, 113, 120, 129, 140, 153, 233, 299, 307, 329, 340, 341, 631, 633], "y_max": [16, 31, 58, 113, 120, 129, 140, 153, 217, 233, 299, 307, 329, 340, 341, 631, 633], "x_min": [16, 31, 52, 58, 113, 120, 124, 129, 140, 153, 188, 233, 299, 307, 329, 340, 341], "x_max": [16, 31, 52, 58, 113, 120, 129, 140, 153, 233, 299, 307, 329, 340, 341], "notifi": [16, 568, 569, 570, 1008, 1025, 1037], "regist": [16, 183, 349, 384, 953, 955], "surfac": [16, 110, 135, 166, 191, 208, 332, 333, 353, 359, 412, 500, 549, 553, 560, 627, 759, 905, 911, 979, 984, 999, 1000, 1001], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 175, 340, 343, 448, 531, 635, 636, 639, 770, 772, 899, 900, 901, 902, 903, 983, 1000], "kernel_map": 16, "hasattr": [16, 44, 56, 62, 82, 109, 120, 217, 232, 299, 307, 349, 392, 946, 1037], "x2": [16, 85, 91, 113, 123, 154, 211, 380, 406, 584, 625, 695, 1019], "decision_surfac": 16, "delta": [16, 408, 448], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 118, 137, 166, 253, 259, 261, 264, 276, 392, 409, 415, 498, 563, 623, 655, 661, 709, 794, 797, 798, 808, 823, 902, 974, 981, 985, 1034, 1035, 1036], "docstr": [16, 378, 380, 384, 392, 444, 457, 468, 695, 697, 924, 974, 985, 988, 989, 999, 1027, 1034, 1035, 1040, 1041], "set_xlim": [16, 31, 42, 60, 75, 80, 92, 116, 129, 164, 170, 197, 199, 204, 233, 245, 264, 266, 278, 288, 299, 305, 307, 308, 309, 310, 316, 345], "attributeerror": [16, 406, 555, 573, 946, 1019, 1036, 1037, 1039, 1043, 1044], "get_tk_widget": 16, "pack": [16, 387, 1035], "fill": [16, 34, 120, 137, 171, 255, 288, 355, 392, 406, 410, 511, 523, 534, 536, 543, 583, 626, 909, 911, 975, 988, 1001], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 66, 101, 105, 114, 124, 152, 183, 209, 288, 293, 296, 316, 317, 321, 340, 403, 405, 406, 411, 417, 448, 461, 517, 529, 532, 611, 612, 618, 637, 754, 761, 771, 854, 855, 873, 979, 981, 983, 987, 988, 989, 998, 999, 1000, 1018], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 217, 378, 382, 384, 405, 464, 532, 642, 648, 895, 982, 1006, 1008, 1027, 1032, 1033, 1035, 1040, 1041, 1042], "isinst": [16, 34, 120, 217, 392], "lineset": 16, "support_vector": [16, 334], "circl": [16, 34, 60, 100, 129, 130, 140, 225, 236, 290, 293, 300, 305, 307, 326, 340, 357, 374, 382, 386, 405, 448, 458, 510, 518, 759, 1000], "dash": [16, 33, 80, 111, 123, 133, 151, 154, 156, 169, 186, 191, 194, 200, 201, 208, 211, 212, 238, 260, 270, 338, 342, 999], "bone": [16, 212, 346], "rais": [16, 109, 200, 235, 236, 263, 309, 318, 378, 380, 382, 383, 384, 387, 390, 392, 396, 399, 406, 409, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 505, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 572, 573, 577, 578, 584, 585, 586, 587, 589, 590, 598, 599, 606, 607, 613, 623, 625, 628, 631, 632, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 692, 694, 698, 705, 707, 708, 709, 710, 722, 724, 725, 733, 751, 773, 777, 778, 779, 782, 783, 784, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 808, 812, 816, 819, 820, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 846, 847, 848, 852, 854, 855, 856, 857, 860, 861, 862, 863, 864, 869, 870, 871, 875, 876, 877, 884, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 912, 915, 917, 918, 920, 921, 938, 942, 946, 969, 970, 971, 972, 985, 995, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "valueerror": [16, 235, 236, 380, 384, 396, 464, 573, 599, 613, 631, 667, 710, 829, 847, 856, 862, 876, 916, 920, 921, 970, 971, 972, 995, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 232, 364, 365, 376, 378, 382, 384, 386, 395, 413, 504, 1005, 1020, 1029], "anchor": [16, 271], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 166, 177, 191, 208, 218, 236, 263, 331, 333, 336, 340, 341, 347, 508, 627, 654, 655, 662, 664, 670, 671, 672, 673, 897, 899, 901, 902, 999, 1000], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 382, 654, 655, 662, 663, 664, 672, 673, 674, 854, 855, 897, 995], "add_opt": 16, "action": [16, 318, 349, 377, 381, 382, 395, 995, 1037], "store": [16, 32, 53, 54, 70, 72, 81, 90, 145, 159, 175, 185, 188, 203, 221, 229, 239, 250, 265, 269, 324, 351, 358, 364, 372, 373, 378, 380, 385, 386, 387, 390, 392, 406, 408, 410, 412, 413, 415, 416, 434, 436, 440, 442, 446, 453, 465, 466, 469, 470, 471, 472, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 504, 530, 531, 537, 545, 546, 551, 552, 559, 565, 566, 585, 606, 607, 623, 627, 628, 631, 634, 645, 646, 650, 656, 657, 658, 659, 662, 663, 669, 671, 672, 673, 674, 684, 685, 686, 688, 693, 694, 696, 697, 698, 776, 792, 793, 794, 800, 808, 816, 837, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 852, 868, 875, 877, 878, 892, 893, 894, 917, 918, 942, 943, 956, 959, 975, 977, 981, 988, 997, 1000, 1001, 1005, 1011, 1020, 1024, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dest": [16, 320], "dump": [16, 17, 399, 483, 837, 838], "argv": [16, 232], "opt": [16, 376, 380], "arg": [16, 235, 300, 379, 392, 410, 412, 419, 567, 568, 569, 570, 571, 572, 573, 574, 613, 695, 861, 981, 987, 988], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 328, 390], "classic": [17, 194, 224, 245, 251, 375, 382, 407, 409, 410, 439, 443, 445, 455, 488, 496, 500, 506, 628, 629, 907, 908, 979, 981, 984, 987, 995, 1005, 1014, 1027, 1028, 1032, 1041], "graph": [17, 25, 39, 44, 46, 66, 67, 159, 220, 257, 283, 285, 327, 364, 378, 381, 392, 402, 407, 416, 437, 440, 441, 448, 449, 453, 458, 459, 467, 468, 474, 507, 581, 582, 684, 687, 688, 691, 777, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 852, 893, 982, 985, 988, 990, 998, 1001, 1005, 1009, 1016, 1019, 1027, 1034, 1035, 1037, 1040, 1042], "vertex": [17, 26, 405, 449, 1040], "en": [17, 24, 386, 527, 533, 591, 632, 660, 664, 667, 681, 682, 691, 701, 839, 840, 845, 846, 847, 848, 875, 891, 905, 906, 981, 985, 1000, 1001], "wiki": [17, 24, 384, 386, 591, 632, 664, 667, 691, 701, 839, 840, 845, 846, 847, 848, 875, 891, 905, 906, 981, 1001], "eigenvector_centr": 17, "webpag": [17, 175, 378], "pagerank": 17, "insid": [17, 19, 26, 170, 201, 235, 260, 326, 336, 366, 372, 373, 380, 384, 396, 405, 413, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 585, 586, 587, 590, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 942, 945, 953, 992, 1009], "accord": [17, 24, 26, 37, 49, 78, 117, 123, 148, 152, 182, 199, 217, 232, 315, 340, 350, 360, 378, 380, 390, 391, 392, 393, 402, 405, 407, 409, 410, 412, 413, 415, 433, 446, 448, 452, 456, 458, 461, 465, 500, 512, 513, 514, 521, 526, 528, 531, 532, 534, 536, 546, 549, 550, 557, 558, 559, 562, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 637, 638, 640, 641, 645, 654, 655, 666, 676, 687, 691, 730, 774, 775, 794, 795, 796, 797, 798, 801, 802, 803, 808, 818, 832, 833, 834, 835, 836, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 860, 867, 875, 887, 889, 890, 897, 898, 899, 900, 902, 903, 979, 981, 985, 987, 988, 995, 998, 999, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tradit": [17, 55, 199, 214, 350, 366, 403, 412, 413, 628, 690, 981, 984, 995, 1005, 1009], "power_iter": 17, "martinsson": [17, 531, 537, 934], "dbpedia": 17, "content": [17, 310, 349, 351, 373, 378, 382, 384, 399, 404, 413, 482, 499, 504, 505, 584, 585, 587, 667, 911, 994, 1009, 1020, 1028, 1037], "bz2": [17, 504, 505], "bz2file": 17, "pprint": [17, 124, 235, 261, 373, 929], "urlopen": 17, "randomized_svd": [17, 387, 447, 449, 528, 537, 540, 542, 1027, 1028, 1033, 1040, 1041, 1042], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 124, 163, 199, 301, 317, 363, 367, 381, 391, 412, 797, 798, 986, 1003, 1006, 1009, 1012, 1022, 1035, 1040, 1041], "wait": [17, 378, 382, 392, 662, 663, 664, 672, 674, 1039], "wb": 17, "index_map": 17, "setdefault": [17, 912], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 70, 261, 285, 315, 378, 382, 384, 386, 415, 421, 438, 439, 441, 443, 445, 460, 463, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 635, 636, 637, 638, 684, 685, 688, 800, 821, 841, 846, 849, 853, 857, 863, 889, 890, 1033, 1034, 1040, 1042], "get_redirect": 17, "transit": [17, 344, 382, 1038], "malform": [17, 1031], "1000000": [17, 532], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 55, 66, 82, 98, 105, 118, 124, 169, 170, 195, 224, 231, 235, 300, 305, 336, 349, 373, 380, 382, 391, 392, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 421, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 517, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 619, 623, 624, 625, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 960, 966, 974, 980, 988, 989, 995, 1001, 1009, 1015, 1016, 1018, 1019, 1039, 1040, 1041, 1042, 1043, 1044], "break": [17, 39, 46, 70, 81, 166, 188, 205, 235, 247, 278, 318, 325, 331, 347, 349, 351, 378, 380, 382, 384, 391, 405, 465, 508, 635, 769, 773, 776, 792, 870, 877, 882, 899, 902, 981, 984, 993, 995, 1000, 1006, 1027, 1028, 1034, 1035, 1037, 1039, 1043], "get_adjacency_matrix": 17, "resolv": [17, 377, 378, 382, 386, 393, 413, 442, 448, 458, 687, 691, 934, 975, 985, 1034, 1036, 1037, 1040], "lil_matrix": 17, "float32": [17, 123, 223, 302, 320, 365, 373, 378, 380, 401, 553, 554, 555, 556, 559, 560, 561, 562, 589, 590, 636, 637, 654, 695, 758, 862, 905, 906, 907, 908, 915, 961, 962, 963, 1001, 1011, 1020, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "del": [17, 384, 1039, 1040], "convert": [17, 34, 46, 48, 66, 71, 98, 156, 172, 199, 220, 238, 241, 246, 247, 250, 251, 296, 364, 372, 373, 387, 390, 392, 399, 413, 436, 439, 440, 443, 445, 446, 447, 448, 455, 460, 461, 492, 530, 537, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 568, 577, 578, 584, 585, 586, 587, 589, 590, 602, 623, 624, 625, 626, 642, 648, 654, 655, 656, 658, 662, 663, 664, 666, 670, 672, 673, 674, 688, 773, 852, 861, 862, 864, 868, 870, 871, 872, 874, 897, 905, 906, 907, 908, 915, 917, 918, 940, 970, 971, 974, 981, 982, 983, 985, 995, 996, 1000, 1001, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1042, 1043, 1044], "csr": [17, 351, 364, 372, 373, 387, 390, 392, 413, 416, 439, 442, 443, 445, 446, 455, 493, 504, 519, 523, 549, 550, 553, 554, 560, 561, 562, 626, 654, 688, 710, 763, 787, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 852, 860, 864, 866, 868, 869, 870, 872, 875, 876, 877, 880, 881, 882, 884, 887, 890, 905, 906, 907, 908, 913, 917, 918, 940, 948, 960, 961, 962, 963, 964, 965, 966, 988, 995, 999, 1027, 1028, 1033, 1035, 1036, 1042, 1043, 1044], "tocsr": 17, "convers": [17, 124, 190, 349, 360, 366, 372, 378, 380, 386, 390, 399, 413, 568, 852, 861, 869, 917, 918, 971, 982, 1006, 1009, 1035, 1036, 1037, 1040, 1043], "5m": 17, "ram": [17, 53, 366, 412, 889, 890, 987, 1000, 1020, 1033, 1039, 1042, 1043], "5000000": 17, "strongest": [17, 192], "highest": [17, 19, 26, 82, 144, 148, 203, 258, 260, 271, 317, 349, 378, 390, 403, 405, 409, 412, 414, 433, 551, 553, 560, 588, 591, 592, 594, 595, 596, 599, 600, 602, 631, 633, 721, 751, 789, 792, 794, 797, 798, 808, 894, 905, 936, 974, 981, 985, 986, 989, 999, 1001, 1039], "centrality_scor": 17, "networkx": [17, 387], "copyright": [17, 82], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 375], "dan": [17, 1027, 1031, 1032, 1033, 1035, 1036], "schult": 17, "dschult": 17, "pieter": [17, 1033, 1034, 1041], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 198, 232, 264, 351, 402, 416, 440, 519, 520, 527, 533, 538, 544, 584, 587, 681, 682, 695, 839, 840, 843, 845, 847, 848, 981, 985], "indptr": [17, 283, 358, 1035, 1043], "dangl": 17, "isclos": 17, "guess": [17, 111, 120, 409, 412, 413, 474, 528, 534, 536, 537, 543, 985, 999], "prev_scor": 17, "dot": [17, 32, 33, 44, 49, 54, 57, 62, 78, 79, 80, 82, 85, 86, 96, 97, 98, 103, 105, 111, 114, 151, 152, 158, 159, 169, 180, 183, 191, 193, 194, 206, 233, 246, 247, 249, 250, 264, 332, 334, 340, 364, 380, 384, 387, 392, 402, 410, 413, 529, 534, 536, 543, 586, 587, 610, 642, 643, 646, 648, 649, 650, 653, 656, 657, 658, 659, 677, 680, 683, 756, 758, 869, 909, 935, 983, 987, 995, 999, 1000, 1019, 1036], "converg": [17, 57, 61, 78, 79, 122, 124, 151, 157, 160, 192, 201, 207, 215, 246, 248, 300, 301, 305, 310, 325, 366, 387, 392, 402, 405, 410, 413, 415, 417, 436, 439, 442, 443, 444, 445, 448, 450, 455, 456, 457, 458, 467, 468, 474, 478, 479, 480, 529, 531, 532, 533, 534, 535, 542, 549, 567, 606, 640, 641, 642, 643, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 664, 668, 670, 672, 674, 678, 679, 683, 684, 686, 687, 690, 691, 792, 793, 846, 854, 855, 892, 893, 899, 975, 980, 981, 982, 984, 989, 999, 1027, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "l_inf": 17, "scores_max": 17, "err": [17, 85, 99, 111], "6f": [17, 99, 265, 732, 790], "concern": [18, 36, 77, 84, 88, 94, 108, 110, 142, 150, 162, 166, 174, 177, 219, 244, 250, 277, 280, 284, 298, 304, 323, 331, 348, 353, 364, 380, 404, 982, 997], "demo": [18, 22, 36, 68, 127, 166, 172, 183, 205, 250, 261, 269, 310, 349, 350, 380, 402, 405, 413, 436, 437, 440, 442, 443, 444, 446, 447, 449, 451, 454, 498, 507, 508, 509, 537, 700, 701, 713, 715, 732, 788, 790, 858, 877, 878], "spectral": [18, 22, 36, 44, 46, 49, 55, 68, 166, 221, 222, 378, 413, 445, 447, 448, 449, 458, 465, 466, 467, 468, 469, 470, 471, 472, 484, 507, 509, 587, 684, 685, 686, 687, 688, 691, 715, 790, 988, 998, 1021, 1022, 1027, 1028], "twenti": [19, 232, 375, 402, 405, 1020], "comp": [19, 85, 86, 98, 106, 302, 328, 349, 350, 351, 373, 1020], "window": [19, 328, 373, 378, 380, 381, 413, 1005, 1027, 1030, 1034, 1038, 1040, 1041], "misc": [19, 53, 98, 261, 328, 349, 350, 351, 373, 1019], "categori": [19, 44, 62, 70, 71, 121, 131, 169, 170, 199, 207, 214, 238, 261, 300, 301, 307, 311, 312, 317, 320, 328, 349, 350, 351, 372, 373, 387, 404, 405, 406, 412, 413, 415, 484, 492, 493, 499, 557, 558, 644, 654, 655, 665, 676, 738, 753, 754, 833, 870, 871, 878, 975, 981, 982, 983, 987, 993, 1011, 1020, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "noth": [19, 70, 349, 350, 383, 538, 710, 860, 869, 918, 995], "frequenc": [19, 27, 151, 170, 183, 193, 199, 232, 316, 317, 349, 350, 351, 373, 390, 403, 409, 410, 412, 413, 414, 547, 553, 555, 556, 557, 560, 584, 585, 586, 587, 600, 654, 655, 660, 662, 664, 670, 671, 672, 681, 682, 826, 861, 870, 871, 897, 899, 902, 905, 907, 923, 981, 982, 987, 995, 999, 1001, 1029, 1031, 1032, 1038], "dhillon": [19, 402, 447, 449, 507], "cut": [19, 43, 46, 65, 66, 222, 382, 390, 402, 405, 442, 448, 449, 458, 584, 587, 687, 691, 995], "minibatchkmean": [19, 36, 44, 50, 61, 68, 166, 350, 366, 405, 410, 436, 438, 443, 508, 774, 1028, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "coclust": [19, 402, 447, 509], "4415": 19, "3015": 19, "talk": [19, 70, 261, 349, 350, 351, 367, 373, 392, 399, 1009, 1012, 1020], "polit": [19, 349, 373, 377, 981, 986], "mideast": [19, 373], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 310, 375], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 373], "17": [19, 39, 52, 74, 80, 152, 169, 198, 224, 225, 226, 232, 263, 278, 279, 299, 309, 373, 376, 383, 395, 397, 398, 405, 409, 440, 457, 483, 493, 496, 519, 527, 532, 536, 543, 545, 546, 551, 555, 556, 565, 566, 593, 624, 645, 653, 654, 655, 662, 665, 668, 670, 683, 688, 724, 725, 735, 756, 761, 779, 782, 784, 812, 835, 846, 861, 866, 867, 875, 877, 883, 899, 902, 905, 906, 907, 908, 974, 975, 986, 988, 995, 1003, 1023, 1025, 1027, 1028, 1029, 1030, 1033, 1036, 1041], "sci": [19, 70, 349, 350, 351, 373, 390, 685, 689, 868, 982, 995, 1020], "med": [19, 70, 269, 373, 995, 1020], "geb": 19, "gordon": [19, 248, 1033, 1037, 1039, 1041], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 373, 1020], "religion": [19, 261, 349, 350, 351, 373, 986, 1020], "alt": [19, 261, 328, 349, 350, 351, 373, 386, 1020], "atheism": [19, 261, 328, 349, 350, 351, 373, 1020], "god": [19, 349, 350, 1020], "jesu": [19, 349, 350], "kent": 19, "belief": [19, 260, 853, 990], "christ": 19, "faith": [19, 157, 341], "moral": [19, 71, 349, 654, 1035, 1039, 1040], "775": [19, 151], "1623": 19, "pc": [19, 328, 351, 373], "hardwar": [19, 328, 351, 364, 365, 373, 376, 395, 401, 1005, 1041, 1042], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 815], "s3": [19, 96, 148, 187, 188, 375, 1019], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 311, 328, 373, 378, 704, 985], "electron": [19, 148, 373, 375, 534, 536, 543, 623], "voltag": 19, "ship": [19, 131, 164, 355, 365, 376, 395, 413, 981, 1027, 1036], "circuit": [19, 982], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 402, 447, 1029, 1034, 1038], "v_measure_scor": [19, 37, 38, 49, 58, 321, 350, 405, 713, 731, 732, 752, 985, 1036], "number_norm": 19, "token": [19, 351, 364, 373, 382, 413, 532, 584, 585, 586, 587, 1027, 1035, 1039], "placehold": [19, 382, 623, 624, 625, 626, 809, 810, 813, 814, 975], "begin": [19, 109, 148, 151, 255, 262, 281, 318, 349, 360, 378, 383, 384, 392, 402, 405, 412, 549, 550, 555, 557, 558, 662, 663, 672, 673, 674, 974, 981, 985, 995, 997, 999, 1035, 1041, 1042], "By": [19, 45, 95, 127, 128, 178, 203, 235, 269, 278, 305, 315, 321, 340, 349, 365, 378, 380, 384, 385, 392, 396, 405, 406, 408, 409, 410, 411, 412, 414, 434, 437, 441, 442, 446, 460, 463, 464, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 520, 522, 545, 546, 553, 554, 555, 556, 560, 561, 581, 582, 584, 585, 587, 602, 605, 628, 629, 667, 669, 671, 673, 686, 688, 690, 693, 695, 696, 698, 699, 714, 724, 725, 729, 733, 778, 779, 782, 789, 791, 797, 798, 843, 857, 858, 870, 871, 873, 875, 885, 887, 895, 900, 901, 905, 906, 907, 908, 917, 918, 953, 974, 975, 977, 981, 985, 992, 995, 997, 1001, 1011, 1015, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1041, 1044], "isdigit": [19, 413], "numbernormalizingvector": 19, "build_token": [19, 413, 584, 585, 587], "super": [19, 25, 27, 380, 413, 1035], "forsal": [19, 351, 373], "rec": [19, 351, 373, 637], "auto": [19, 25, 27, 33, 44, 45, 48, 57, 58, 60, 92, 95, 144, 145, 148, 155, 175, 182, 220, 221, 222, 223, 225, 233, 240, 257, 259, 267, 283, 286, 291, 307, 315, 316, 317, 318, 319, 320, 332, 333, 334, 339, 342, 343, 351, 372, 373, 380, 412, 414, 415, 416, 437, 440, 441, 442, 443, 445, 446, 448, 453, 455, 458, 492, 504, 505, 531, 534, 536, 537, 540, 543, 545, 553, 554, 557, 558, 559, 560, 561, 563, 564, 589, 590, 593, 598, 603, 604, 625, 627, 628, 629, 631, 635, 642, 643, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 696, 698, 730, 736, 797, 798, 825, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 855, 870, 871, 878, 889, 890, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 933, 934, 951, 954, 976, 979, 981, 982, 985, 986, 988, 995, 1000, 1005, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "motorcycl": [19, 373], "sport": [19, 373], "basebal": [19, 373], "hockei": [19, 373], "crypt": [19, 373], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 95, 319, 350, 378, 392, 405, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 456, 457, 458, 459, 507, 509, 1019, 1027, 1031, 1033, 1035, 1036, 1038, 1041], "svd_method": [19, 447, 449, 528, 1030], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 57, 58, 61, 68, 166, 248, 251, 308, 319, 350, 387, 405, 436, 439, 444, 445, 448, 458, 508, 787, 788, 792, 793, 862, 988, 995, 1006, 1019, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 57, 58, 60, 61, 64, 95, 220, 221, 222, 223, 316, 319, 350, 405, 439, 443, 445, 447, 448, 449, 455, 458, 686, 690, 792, 793, 1019, 1027, 1035, 1041, 1042, 1043], "y_coclust": 19, "row_labels_": [19, 20, 21, 402, 447, 449], "y_kmean": 19, "fit_predict": [19, 56, 57, 60, 228, 235, 238, 290, 380, 392, 405, 423, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 465, 559, 673, 792, 793, 843, 849, 857, 901, 991, 1032, 1035, 1036, 1040, 1042, 1044], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 55, 59, 63, 64, 70, 117, 132, 220, 238, 345, 507, 509], "get_indic": [19, 420, 447, 449], "float_info": 19, "row_compl": 19, "logical_not": [19, 64, 105, 202], "rows_": [19, 402, 420, 447, 449], "col_compl": 19, "columns_": [19, 402, 420, 447, 449], "ident": [19, 64, 123, 194, 199, 217, 228, 232, 329, 349, 373, 380, 392, 402, 405, 406, 407, 409, 415, 418, 434, 435, 448, 460, 461, 469, 471, 472, 475, 476, 477, 484, 499, 547, 555, 556, 560, 561, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 639, 675, 676, 695, 700, 701, 731, 780, 790, 796, 799, 809, 810, 811, 813, 814, 839, 840, 846, 854, 855, 861, 862, 874, 886, 905, 906, 978, 979, 982, 985, 988, 989, 1000, 1031, 1035, 1036, 1037, 1041], "most_common": 19, "counter": [19, 111, 267, 405, 672, 673, 674, 1040], "itemgett": 19, "revers": [19, 75, 148, 204, 260, 530, 537, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 607, 784, 857, 985, 1027, 1028, 1037, 1039, 1043], "best_idx": [19, 259], "get_shap": [19, 420, 447, 449], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 58], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "127": [19, 22, 123, 170, 261, 1027], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 402, 447, 449, 507, 509], "simultan": [20, 55, 96, 264, 268, 321, 344, 357, 370, 402, 405, 974, 985, 986, 1001, 1009, 1034], "aim": [20, 81, 164, 203, 291, 326, 340, 366, 373, 376, 378, 392, 399, 405, 407, 413, 444, 981, 985, 988, 995, 1000, 1005, 1011, 1019, 1041], "identifi": [20, 90, 97, 104, 124, 125, 168, 169, 199, 202, 203, 248, 250, 258, 263, 269, 292, 312, 317, 340, 349, 350, 372, 373, 377, 378, 382, 383, 392, 405, 406, 409, 412, 413, 442, 446, 453, 483, 492, 504, 505, 551, 552, 559, 602, 639, 645, 695, 708, 769, 822, 843, 862, 892, 893, 974, 981, 985, 991, 998, 1009, 1018, 1034, 1036, 1041, 1042], "particularli": [20, 31, 70, 71, 74, 105, 129, 200, 230, 260, 307, 316, 346, 360, 364, 378, 387, 392, 405, 406, 408, 411, 413, 492, 800, 816, 834, 934, 953, 954, 981, 982, 985, 987, 1006, 1009, 1019, 1027, 1032, 1034, 1035, 1041], "suit": [20, 95, 129, 169, 199, 200, 228, 250, 318, 319, 321, 349, 365, 378, 380, 383, 384, 386, 390, 395, 408, 410, 412, 446, 448, 499, 673, 834, 878, 928, 974, 977, 982, 985, 987, 988, 999, 1005, 1006, 1009, 1013, 1034, 1041], "arrang": [20, 281, 628, 828, 829, 830, 831, 985], "genom": [20, 509], "rearrang": [20, 21, 402], "kemaleren": [20, 21], "make_checkerboard": [20, 507, 1029], "uniform": [20, 31, 37, 53, 123, 124, 127, 144, 152, 157, 160, 178, 179, 213, 225, 228, 231, 268, 286, 289, 290, 295, 299, 306, 308, 309, 312, 319, 321, 335, 380, 383, 405, 434, 435, 547, 565, 566, 606, 607, 624, 635, 645, 646, 650, 664, 672, 673, 674, 695, 717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 785, 786, 798, 806, 808, 832, 833, 836, 839, 840, 847, 848, 862, 874, 876, 886, 922, 936, 974, 975, 984, 985, 988, 1033, 1035, 1037, 1041, 1043], "deviat": [20, 34, 61, 80, 114, 117, 118, 119, 120, 148, 151, 156, 158, 160, 169, 178, 205, 238, 257, 258, 259, 260, 261, 263, 289, 290, 305, 310, 370, 374, 375, 383, 387, 392, 409, 412, 415, 446, 468, 497, 507, 508, 509, 510, 512, 513, 514, 518, 520, 521, 526, 548, 590, 607, 630, 640, 641, 667, 719, 747, 800, 816, 843, 866, 867, 877, 886, 887, 888, 981, 985, 991, 995, 1018, 1033, 1034, 1035, 1038, 1039, 1040], "matshow": [20, 21, 66, 119, 146, 301, 498], "afterward": [20, 382, 531, 537, 821], "row_idx_shuffl": 20, "permut": [20, 21, 37, 81, 119, 125, 140, 166, 167, 173, 215, 253, 276, 312, 394, 400, 405, 412, 460, 492, 496, 500, 555, 556, 560, 561, 623, 626, 630, 675, 700, 701, 713, 731, 732, 750, 752, 790, 811, 813, 822, 823, 857, 871, 902, 905, 906, 934, 954, 956, 959, 985, 999, 1015, 1018, 1022, 1027, 1033, 1040, 1042], "col_idx_shuffl": 20, "redefin": [20, 124, 169], "lost": [20, 57, 82, 373, 379, 390, 982, 985], "ground": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 127, 159, 183, 193, 199, 200, 238, 251, 263, 350, 392, 404, 405, 699, 700, 701, 704, 708, 709, 710, 711, 713, 714, 717, 718, 719, 723, 724, 725, 729, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 778, 779, 780, 781, 782, 785, 786, 790, 791, 985, 998, 1011, 1019, 1035], "truth": [20, 32, 40, 45, 49, 57, 58, 61, 78, 82, 86, 98, 103, 127, 159, 183, 193, 199, 200, 238, 251, 263, 350, 392, 404, 405, 699, 700, 701, 704, 708, 709, 710, 711, 713, 714, 717, 718, 719, 721, 723, 724, 725, 729, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 778, 779, 780, 781, 782, 785, 786, 790, 791, 985, 1011, 1019, 1035, 1041], "consensus_scor": [20, 21, 402, 1029], "biclusters_": [20, 21, 420, 447, 449], "consensu": [20, 21, 37, 377, 378, 393, 402, 405, 645, 667, 674, 675, 715, 985], "1f": [20, 50, 53, 98, 179, 199, 232, 245, 247, 267, 315, 350, 351], "perfect": [20, 26, 37, 70, 81, 98, 100, 195, 199, 349, 350, 378, 382, 405, 409, 549, 550, 686, 690, 700, 701, 704, 713, 721, 723, 726, 732, 738, 751, 752, 780, 781, 790, 981, 985, 988, 1000, 1009, 1018, 1041], "ascend": [20, 71, 171, 311, 412, 446, 452, 623, 631, 909, 910, 911, 999, 1037, 1043], "column_labels_": [20, 21, 402, 447, 449], "reorder": [20, 45, 102, 392, 693, 714, 1006, 1035], "reordered_row": 20, "reordered_data": 20, "step": [20, 26, 33, 42, 54, 55, 58, 67, 70, 71, 72, 73, 74, 81, 86, 98, 103, 111, 116, 120, 121, 131, 145, 146, 147, 153, 156, 169, 171, 199, 207, 217, 229, 230, 233, 239, 242, 251, 258, 261, 267, 269, 283, 285, 286, 291, 299, 302, 307, 310, 311, 316, 319, 329, 332, 336, 350, 351, 354, 360, 364, 367, 373, 376, 377, 378, 380, 382, 383, 386, 390, 392, 402, 403, 405, 407, 408, 410, 412, 413, 414, 438, 443, 445, 532, 533, 534, 535, 542, 559, 584, 585, 587, 589, 590, 593, 602, 623, 640, 644, 662, 663, 665, 672, 674, 675, 676, 690, 696, 792, 793, 794, 797, 798, 808, 828, 829, 830, 831, 853, 854, 855, 857, 858, 860, 897, 898, 899, 900, 902, 903, 933, 934, 956, 960, 975, 981, 984, 989, 990, 995, 999, 1001, 1002, 1005, 1008, 1016, 1020, 1027, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1043], "outer": [20, 100, 265, 326, 447, 510, 636, 646, 647, 650, 977, 1028], "product": [20, 71, 95, 132, 151, 156, 170, 340, 360, 364, 380, 381, 384, 387, 399, 402, 410, 412, 447, 534, 536, 543, 578, 585, 586, 587, 609, 610, 629, 636, 660, 661, 681, 682, 756, 758, 770, 772, 869, 872, 889, 890, 935, 974, 977, 981, 983, 995, 997, 999, 1000, 1005, 1009, 1035], "shade": [20, 53, 182, 286, 291, 332, 410], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 367, 413, 420, 445, 447, 449, 484, 507, 509, 587, 715, 790, 985, 1021, 1022, 1029, 1033], "make_biclust": [21, 509, 1029], "implant": 21, "row_idx": [21, 199], "col_idx": 21, "fit_data": 21, "320": [21, 22, 350, 373, 974, 999, 1027], "plot_spectral_coclust": [21, 22], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 34, 35, 55, 75, 92, 110, 132, 135, 143, 150, 151, 152, 153, 161, 166, 169, 220, 224, 229, 232, 260, 263, 266, 267, 270, 305, 309, 315, 317, 327, 329, 364, 367, 373, 374, 380, 384, 390, 392, 405, 409, 410, 413, 414, 415, 431, 432, 433, 434, 435, 442, 443, 445, 500, 508, 511, 519, 523, 545, 546, 547, 549, 551, 553, 555, 557, 558, 560, 563, 565, 566, 589, 590, 606, 609, 610, 618, 623, 627, 628, 629, 654, 655, 667, 672, 688, 694, 696, 698, 699, 702, 703, 705, 708, 712, 716, 721, 722, 724, 734, 735, 736, 737, 751, 777, 779, 782, 783, 784, 789, 792, 793, 794, 797, 798, 808, 822, 823, 826, 828, 829, 832, 833, 834, 835, 836, 839, 842, 847, 853, 854, 878, 890, 891, 892, 893, 894, 897, 899, 902, 905, 907, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 995, 997, 998, 999, 1001, 1006, 1007, 1008, 1020, 1022, 1027, 1029, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041], "confid": [24, 25, 26, 27, 156, 158, 246, 260, 263, 327, 393, 403, 415, 632, 654, 655, 662, 664, 667, 670, 671, 672, 694, 698, 703, 716, 721, 722, 734, 735, 751, 784, 825, 864, 897, 899, 902, 981, 984, 985, 986, 991, 998, 999, 1000, 1009, 1020, 1037], "being": [24, 27, 34, 45, 52, 55, 82, 86, 90, 100, 111, 115, 128, 151, 156, 169, 171, 175, 193, 235, 238, 254, 260, 302, 309, 310, 336, 340, 349, 351, 376, 377, 378, 380, 382, 383, 390, 392, 393, 399, 405, 407, 409, 412, 413, 414, 415, 416, 418, 437, 438, 440, 441, 446, 452, 465, 471, 489, 519, 565, 636, 645, 652, 668, 670, 683, 686, 690, 708, 714, 724, 729, 731, 778, 784, 792, 837, 838, 843, 845, 847, 848, 849, 872, 890, 935, 974, 975, 981, 984, 985, 988, 991, 992, 993, 995, 997, 999, 1000, 1001, 1027, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "postprocess": [24, 403, 531, 537], "brier": [24, 25, 403, 705], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 370, 412, 433, 448, 531, 557, 616, 635, 639, 760, 769, 772, 854, 855, 899, 900, 901, 902, 903, 990, 1000, 1022, 1040, 1044], "isoton": [24, 25, 166, 227, 243, 367, 433, 653, 920, 1007, 1022, 1028, 1029, 1030, 1031, 1033, 1040, 1043], "belong": [24, 27, 30, 55, 60, 238, 260, 315, 321, 326, 372, 373, 402, 403, 405, 406, 408, 409, 412, 420, 436, 439, 443, 444, 445, 447, 449, 519, 708, 726, 801, 807, 818, 844, 864, 878, 941, 942, 981, 984, 985, 987, 988, 989, 991, 1000, 1005, 1011, 1018], "mblondel": [24, 48, 190, 221, 261, 349, 372, 504], "telecom": [24, 25, 42, 228, 1009], "balaz": [24, 1031], "kegl": [24, 1031], "jhm": [24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234], "informatik": [24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234, 985], "uni": [24, 25, 26, 27, 74, 115, 151, 152, 154, 155, 156, 157, 158, 160, 190, 233, 234, 326, 344], "bremen": [24, 25, 26, 27, 151, 152, 154, 155, 156, 157, 158, 160, 234], "style": [24, 26, 81, 124, 188, 207, 217, 264, 378, 385, 405, 413, 439, 443, 455, 696, 800, 816, 917, 918, 1027, 1030, 1041], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 91, 191, 211, 228, 248, 308, 316, 319, 334, 337, 338, 345, 374, 380, 381, 412, 511, 1035, 1038, 1041], "50000": 24, "n_bin": [24, 25, 27, 53, 199, 217, 306, 308, 312, 434, 435, 862, 995], "calibration_curv": [24, 403, 433, 434, 1036, 1041], "blob": [24, 33, 34, 42, 44, 57, 62, 64, 91, 405, 444, 508, 1032], "sample_weight": [24, 180, 199, 212, 217, 235, 316, 321, 346, 378, 392, 396, 405, 412, 416, 422, 428, 433, 439, 440, 443, 445, 455, 456, 461, 465, 478, 479, 480, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 606, 607, 628, 629, 630, 631, 633, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 693, 694, 696, 698, 699, 703, 704, 705, 708, 709, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 729, 730, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 777, 778, 779, 780, 782, 783, 784, 785, 786, 789, 791, 794, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 862, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 945, 973, 985, 999, 1000, 1001, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "sw_train": [24, 316], "sw_test": [24, 316], "calibratedclassifiercv": [24, 25, 26, 360, 392, 396, 403, 672, 974, 1000, 1006, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "brier_score_loss": [24, 25, 403, 985, 1035, 1036, 1037], "gaussiannb": [24, 25, 27, 31, 133, 262, 360, 403, 412, 433, 565, 832, 833, 834, 836, 858, 979, 986, 987, 1031, 1032, 1033, 1035, 1040, 1043], "With": [24, 34, 44, 67, 75, 90, 100, 122, 144, 166, 170, 199, 201, 227, 229, 234, 236, 242, 243, 260, 287, 364, 367, 373, 378, 380, 392, 405, 406, 409, 412, 414, 433, 435, 497, 578, 628, 629, 654, 763, 855, 858, 860, 871, 877, 878, 904, 906, 978, 981, 982, 985, 986, 988, 989, 992, 999, 1001, 1011, 1012, 1019, 1024, 1030, 1034, 1035, 1037, 1039, 1041], "itself": [24, 49, 55, 111, 124, 127, 170, 183, 197, 235, 241, 269, 283, 312, 336, 350, 364, 366, 377, 378, 380, 382, 392, 396, 404, 405, 416, 436, 437, 440, 441, 442, 465, 466, 467, 468, 469, 470, 471, 472, 523, 527, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 547, 562, 565, 579, 588, 591, 592, 594, 595, 596, 598, 599, 635, 636, 637, 638, 639, 641, 651, 685, 687, 787, 788, 832, 833, 834, 835, 836, 837, 838, 842, 850, 851, 862, 863, 864, 892, 893, 942, 977, 981, 982, 984, 988, 989, 993, 1005, 1031, 1042], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 129, 133, 148, 152, 153, 154, 155, 235, 269, 299, 307, 310, 315, 317, 349, 380, 385, 392, 403, 404, 412, 433, 434, 545, 546, 547, 549, 551, 553, 555, 557, 560, 563, 565, 589, 590, 606, 615, 616, 618, 619, 627, 628, 629, 654, 655, 672, 694, 696, 698, 736, 737, 783, 792, 793, 794, 797, 798, 808, 818, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 839, 847, 854, 857, 864, 892, 893, 894, 899, 902, 905, 907, 981, 985, 987, 989, 992, 998, 999, 1000, 1001, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 113, 126, 183, 191, 205, 207, 208, 235, 325, 341, 344, 355, 375, 386, 390, 395, 405, 470, 555, 556, 586, 587, 631, 641, 660, 672, 674, 681, 682, 792, 981], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": 24, "109": [24, 53, 189, 218, 225, 226, 986, 1029], "y_uniqu": 24, "rainbow": [24, 222], "this_i": [24, 205], "this_x": [24, 197, 205, 1018], "this_sw": 24, "lexsort": 24, "linewidth": [24, 33, 34, 37, 40, 58, 73, 78, 86, 92, 112, 124, 128, 151, 155, 159, 188, 189, 193, 194, 195, 197, 200, 202, 205, 213, 216, 228, 236, 238, 269, 273, 289, 293, 306, 316, 334, 335, 337, 342, 356, 1016], "uncalibr": [24, 25, 26, 433], "gnb": [24, 25, 27, 133, 412, 565, 987], "372": [24, 28], "plot_calibr": [24, 28], "reliabl": [25, 27, 403, 409, 434, 435, 642, 1001, 1009], "diagram": [25, 27, 71, 240, 316, 380, 403, 405, 434, 435, 464, 895, 995, 1038, 1039, 1044], "redund": [25, 27, 106, 147, 246, 251, 360, 374, 377, 378, 383, 392, 403, 511, 630, 1006, 1020, 1039], "uninform": [25, 27, 312, 374, 383, 413, 974, 981, 1035], "rest": [25, 30, 121, 125, 166, 177, 183, 214, 218, 235, 238, 248, 278, 315, 328, 333, 384, 392, 404, 415, 508, 606, 627, 640, 654, 655, 672, 749, 783, 825, 826, 827, 846, 897, 899, 902, 981, 985, 986, 989, 992, 1000, 1009, 1031, 1032, 1041, 1042, 1043], "make_classif": [25, 27, 31, 91, 115, 116, 118, 122, 145, 147, 257, 263, 271, 272, 293, 299, 307, 315, 317, 321, 344, 360, 374, 381, 401, 433, 434, 508, 549, 551, 553, 560, 662, 693, 694, 696, 698, 816, 821, 827, 854, 857, 897, 974, 985, 986, 995, 1000, 1033, 1034, 1035, 1037], "100_000": [25, 27, 169], "n_inform": [25, 27, 31, 91, 115, 118, 145, 147, 178, 183, 202, 203, 257, 263, 273, 293, 299, 307, 315, 344, 380, 383, 511, 520, 549, 550, 551, 552, 560, 561, 661, 827, 986, 1035], "n_redund": [25, 27, 31, 91, 118, 145, 147, 257, 263, 293, 299, 307, 383, 433, 511, 549, 551, 560, 827], "logisticregress": [25, 27, 30, 71, 73, 116, 133, 139, 147, 148, 182, 189, 190, 191, 192, 206, 214, 215, 229, 230, 240, 242, 263, 269, 281, 302, 307, 315, 316, 317, 318, 319, 321, 349, 364, 378, 380, 384, 386, 391, 396, 403, 406, 412, 414, 434, 563, 565, 593, 627, 630, 639, 648, 655, 668, 669, 670, 671, 672, 683, 696, 783, 808, 816, 828, 829, 831, 882, 883, 885, 886, 887, 888, 904, 929, 981, 985, 986, 995, 999, 1000, 1016, 1018, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "baselin": [25, 111, 121, 124, 134, 148, 172, 178, 217, 270, 281, 317, 350, 375, 405, 414, 547, 548, 630, 985, 988, 1020, 1043], "regular": [25, 36, 68, 71, 73, 79, 100, 110, 135, 158, 163, 166, 177, 178, 179, 183, 184, 186, 187, 188, 190, 199, 213, 217, 218, 234, 246, 254, 261, 264, 273, 288, 289, 298, 301, 302, 303, 310, 311, 331, 333, 335, 336, 337, 340, 347, 349, 351, 354, 364, 378, 390, 391, 403, 405, 407, 408, 410, 411, 412, 415, 433, 439, 443, 467, 468, 472, 474, 475, 476, 477, 500, 508, 510, 511, 516, 518, 520, 524, 534, 535, 536, 539, 543, 544, 546, 555, 557, 558, 584, 585, 587, 634, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 685, 689, 730, 736, 745, 792, 793, 811, 823, 824, 854, 855, 858, 877, 897, 898, 899, 900, 902, 903, 904, 974, 975, 977, 978, 979, 982, 984, 990, 991, 995, 998, 999, 1000, 1007, 1009, 1015, 1016, 1018, 1022, 1027, 1028, 1029, 1031, 1032, 1036, 1037, 1039, 1040], "logist": [25, 27, 30, 69, 71, 76, 116, 139, 166, 177, 218, 229, 242, 281, 302, 310, 319, 349, 392, 393, 403, 406, 412, 414, 415, 433, 485, 492, 498, 500, 508, 537, 555, 557, 567, 606, 627, 642, 653, 654, 655, 662, 664, 672, 736, 794, 808, 823, 853, 854, 855, 857, 877, 904, 920, 922, 985, 989, 990, 999, 1000, 1007, 1009, 1016, 1022, 1031, 1034, 1035, 1037, 1038], "guid": [25, 55, 69, 95, 117, 160, 166, 169, 170, 187, 220, 267, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 367, 376, 377, 378, 383, 384, 385, 391, 392, 393, 396, 404, 406, 412, 416, 417, 418, 419, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 911, 930, 985, 986, 1013, 1020, 1027, 1028, 1029, 1030, 1032, 1034, 1036, 1037, 1044], "gridspec": [25, 27, 65, 245, 385], "calibrationdisplai": [25, 27, 403, 1040, 1041], "lr": [25, 27, 116, 133, 134, 202, 214, 230, 231, 256, 263, 391, 396, 412, 564, 565, 566, 708], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 341], "dark2": [25, 27, 221], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 110, 135, 166, 199, 232, 266, 288, 305, 317, 403, 486, 555, 556, 557, 558, 560, 561, 638, 753, 754, 794, 799, 977, 983, 995, 1021, 1022, 1039, 1042], "grid_posit": [25, 27], "y_prob": [25, 27, 154, 434, 435, 705, 828, 854, 985, 1041], "poorli": [25, 62, 78, 86, 114, 126, 224, 365, 405, 412, 524, 626, 981, 982, 1033], "violat": [25, 336, 386, 390, 392, 631, 921, 992, 999, 1001], "independ": [25, 27, 37, 46, 96, 97, 99, 116, 120, 158, 170, 237, 238, 260, 263, 265, 269, 281, 305, 312, 315, 350, 360, 364, 365, 374, 380, 382, 391, 392, 395, 402, 403, 404, 405, 406, 407, 408, 409, 413, 417, 445, 460, 484, 499, 511, 512, 513, 514, 516, 528, 529, 531, 533, 535, 536, 542, 543, 547, 548, 600, 603, 604, 621, 636, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 668, 669, 670, 671, 700, 701, 713, 731, 732, 750, 752, 790, 796, 822, 826, 828, 830, 831, 869, 873, 874, 875, 877, 881, 882, 883, 884, 886, 887, 888, 891, 899, 900, 901, 902, 903, 928, 974, 977, 979, 981, 982, 985, 986, 987, 990, 992, 995, 1000, 1001, 1021, 1022, 1027, 1028, 1033, 1035, 1037, 1042], "overli": [25, 26, 188, 265, 360, 410, 985], "typic": [25, 27, 99, 109, 175, 183, 199, 203, 217, 234, 262, 263, 267, 269, 270, 289, 290, 317, 336, 350, 364, 371, 372, 373, 376, 380, 381, 382, 387, 391, 392, 403, 404, 405, 406, 409, 410, 412, 413, 415, 439, 443, 445, 492, 547, 549, 551, 552, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 625, 634, 636, 639, 650, 651, 652, 667, 678, 679, 708, 864, 871, 875, 878, 933, 934, 942, 945, 970, 974, 978, 981, 982, 984, 985, 986, 987, 991, 993, 1009, 1020, 1036, 1040, 1043], "transpos": [25, 260, 417, 522, 534, 536, 543, 656, 657, 658, 659, 783, 934, 971, 985, 997, 1019, 1027, 1041], "nearli": [25, 263, 373, 392, 404, 759, 985, 988, 997, 1020], "albeit": 25, "strongli": [25, 27, 82, 86, 98, 121, 125, 169, 181, 214, 235, 266, 349, 378, 394, 395, 403, 412, 654, 731, 790, 981, 982, 1022, 1036, 1043], "plenti": 25, "greater": [25, 92, 111, 113, 169, 216, 233, 238, 248, 266, 281, 289, 290, 354, 364, 374, 383, 392, 403, 405, 408, 412, 437, 441, 445, 448, 459, 468, 532, 537, 553, 554, 555, 556, 557, 558, 560, 561, 562, 589, 590, 593, 606, 607, 624, 636, 638, 641, 660, 662, 663, 667, 672, 673, 674, 688, 705, 708, 716, 730, 731, 734, 737, 783, 790, 792, 793, 827, 839, 840, 847, 848, 854, 855, 860, 875, 887, 891, 894, 897, 898, 905, 906, 907, 908, 934, 954, 974, 980, 981, 982, 985, 986, 991, 995, 1000, 1001, 1030, 1035, 1038, 1040, 1041, 1042], "exploit": [25, 281, 986, 1006, 1030], "f1_score": [25, 267, 328, 373, 733, 985, 1027, 1029, 1030, 1031, 1032, 1036, 1037, 1043], "log_loss": [25, 26, 123, 126, 152, 310, 328, 349, 392, 403, 412, 553, 555, 557, 560, 642, 654, 672, 905, 907, 974, 981, 985, 999, 1001, 1029, 1031, 1033, 1041, 1042, 1043, 1044], "precision_scor": [25, 267, 704, 782, 985, 1027, 1029, 1030, 1031, 1032, 1037, 1043], "recall_scor": [25, 267, 409, 704, 779, 985, 1027, 1029, 1030, 1031, 1032, 1037, 1043], "roc_auc_scor": [25, 148, 260, 269, 315, 698, 702, 703, 704, 784, 985, 1029, 1030, 1035, 1037, 1041, 1042], "score_nam": [25, 37, 234, 262, 275, 321, 350, 800, 816], "score_df": 25, "set_index": [25, 111, 124, 156, 188, 217, 260, 311, 350], "decim": [25, 157, 467, 468, 910, 1034, 1035], "098932": 25, "323200": 25, "937443": 25, "871965": 25, "851348": 25, "861533": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 82, 468, 705, 985, 1020], "alter": [25, 164, 380, 392, 724, 725, 733, 778, 779, 782, 1032, 1036, 1039], "uncertainti": [25, 151, 158, 178, 262, 403, 405, 563, 564, 639, 857, 975, 997], "linearsvc": [25, 27, 70, 72, 144, 145, 166, 175, 233, 257, 259, 267, 307, 315, 331, 333, 344, 347, 349, 364, 380, 384, 403, 413, 414, 433, 508, 563, 573, 627, 635, 639, 648, 668, 669, 670, 671, 672, 683, 730, 737, 820, 825, 898, 899, 902, 904, 981, 985, 986, 1000, 1027, 1028, 1029, 1033, 1035, 1038, 1043], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 217, 231, 305, 336, 631, 672, 736, 867, 995, 1031, 1038, 1039], "proba_neg_class": [25, 27], "proba": [25, 27, 133, 433, 905, 907], "dual": [25, 27, 70, 72, 144, 145, 175, 233, 257, 259, 267, 307, 315, 333, 334, 344, 349, 413, 414, 467, 468, 474, 563, 564, 607, 635, 642, 643, 648, 649, 654, 655, 656, 657, 658, 659, 677, 680, 730, 825, 837, 838, 897, 898, 899, 902, 985, 986, 1000, 1029, 1038, 1041, 1043], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 67, 100, 169, 170, 188, 267, 392, 403, 407, 409, 414, 439, 443, 445, 465, 534, 536, 543, 559, 708, 725, 843, 901, 1027], "behavior": [25, 27, 37, 39, 52, 163, 166, 169, 170, 199, 217, 235, 251, 253, 263, 276, 301, 302, 305, 307, 312, 336, 360, 365, 372, 375, 378, 380, 382, 386, 387, 392, 403, 405, 409, 413, 532, 547, 562, 662, 663, 664, 672, 673, 674, 695, 697, 724, 725, 778, 779, 782, 795, 796, 799, 811, 812, 813, 814, 815, 834, 870, 897, 898, 974, 981, 986, 991, 995, 1000, 1009, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "hing": [25, 206, 209, 211, 268, 333, 334, 338, 340, 392, 662, 672, 730, 897, 904, 981, 999, 1000, 1020], "focus": [25, 78, 188, 278, 373, 390, 982, 995, 1005], "far": [25, 60, 82, 121, 152, 158, 169, 199, 217, 336, 340, 349, 351, 378, 387, 415, 716, 877, 960, 990, 991, 1000, 1009, 1018], "awai": [25, 26, 27, 60, 78, 120, 151, 152, 156, 202, 340, 341, 373, 403, 415, 624, 839, 840, 847, 848, 984, 985, 1000, 1018], "shown": [25, 48, 57, 89, 109, 113, 117, 124, 160, 168, 170, 183, 189, 197, 217, 225, 228, 233, 238, 247, 260, 263, 266, 269, 278, 288, 300, 301, 305, 306, 307, 324, 344, 349, 350, 378, 383, 393, 403, 405, 406, 409, 410, 411, 413, 415, 434, 456, 628, 694, 696, 697, 698, 709, 794, 808, 909, 911, 980, 981, 982, 985, 988, 993, 995, 999, 1000, 1001, 1020, 1031, 1036, 1037, 1038, 1041], "varieti": [25, 163, 247, 311, 336, 386, 390, 404, 405, 407, 413, 639, 988, 1001, 1005, 1009, 1029, 1042, 1043], "niculescu": [25, 27, 403, 433, 435], "mizil": [25, 27, 403, 433, 435], "caruana": [25, 27, 403, 433, 435], "144943": 25, "465660": 25, "937597": 25, "872186": 25, "851792": 25, "861868": 25, "099820": 25, "376999": 25, "936480": 25, "853174": 25, "877981": 25, "865400": 25, "098758": 25, "321301": 25, "937532": 25, "873724": 25, "848743": 25, "861053": 25, "deal": [25, 57, 71, 163, 169, 183, 224, 278, 340, 351, 378, 383, 406, 413, 414, 415, 470, 492, 699, 704, 758, 782, 863, 934, 981, 1009, 1017, 1030, 1042, 1043], "situat": [25, 44, 57, 72, 168, 169, 205, 228, 263, 378, 386, 407, 409, 410, 412, 464, 524, 530, 578, 870, 873, 885, 895, 979, 981, 987, 988, 998, 1001, 1035], "supervis": [25, 27, 37, 49, 54, 58, 86, 104, 116, 139, 140, 221, 236, 247, 260, 292, 317, 327, 330, 350, 364, 367, 373, 380, 391, 392, 403, 405, 408, 409, 410, 412, 413, 415, 433, 435, 460, 484, 499, 500, 549, 584, 586, 589, 590, 630, 672, 724, 795, 796, 799, 801, 802, 803, 804, 809, 810, 811, 812, 813, 814, 817, 818, 819, 820, 822, 823, 846, 856, 857, 861, 871, 878, 892, 893, 894, 902, 979, 982, 985, 987, 988, 991, 995, 996, 1000, 1001, 1002, 1005, 1006, 1008, 1011, 1012, 1014, 1020, 1022, 1027, 1033, 1039], "icml": [25, 27, 403, 405, 413, 433, 435, 832, 834, 853, 985, 987, 999, 1004], "2005": [25, 27, 81, 375, 403, 433, 435, 846, 981, 988, 998], "358": [25, 28, 350], "plot_calibration_curv": [25, 28], "simplex": [26, 666, 792, 872], "arrow": [26, 1041], "green": [26, 81, 92, 114, 128, 133, 151, 175, 225, 300, 306, 310, 316, 392, 986, 1035, 1036, 1038, 1039], "600": [26, 50, 130, 131, 373, 676], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 57, 59, 60, 62, 63, 64, 211, 228, 248, 308, 338, 508], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 56, 115, 116, 117, 118, 119, 120, 133, 171, 172, 240, 241, 257, 272, 315, 317, 349, 360, 391, 392, 403, 412, 414, 553, 554, 555, 557, 562, 563, 565, 797, 798, 827, 907, 974, 975, 986, 1009, 1024, 1031, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "concaten": [26, 34, 39, 50, 61, 69, 76, 81, 113, 127, 159, 166, 178, 181, 213, 221, 228, 245, 249, 250, 256, 267, 269, 270, 288, 302, 309, 312, 325, 335, 349, 406, 460, 463, 500, 505, 527, 533, 537, 538, 595, 776, 794, 856, 857, 859, 862, 870, 902, 986, 1015, 1028], "randomforestclassifierifittedrandomforestclassifi": [26, 118, 119], "cal_clf": 26, "prefit": [26, 392, 403, 414, 433, 563, 564, 593, 1006, 1039, 1040, 1041], "x27": [26, 71, 72, 116, 131, 134, 145, 169, 170, 171, 229, 230, 239, 240, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 326], "calibratedclassifiercvifittedcalibratedclassifiercv": 26, "randomforestclassifierrandomforestclassifi": [26, 171, 240, 272], "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1039], "unit": [26, 70, 80, 169, 175, 199, 217, 288, 301, 305, 350, 373, 378, 379, 380, 384, 386, 387, 410, 413, 417, 460, 485, 486, 515, 520, 528, 529, 530, 537, 538, 585, 586, 587, 607, 654, 655, 672, 681, 695, 765, 844, 853, 854, 855, 861, 867, 869, 873, 875, 877, 883, 884, 885, 887, 888, 897, 898, 981, 983, 984, 985, 990, 995, 1001, 1005, 1018, 1031, 1035, 1041, 1042], "mid": [26, 336, 985, 987], "frac": [26, 80, 81, 111, 260, 267, 269, 318, 402, 403, 405, 407, 410, 411, 412, 413, 415, 428, 459, 461, 478, 479, 480, 550, 552, 554, 556, 558, 561, 564, 566, 607, 611, 615, 618, 619, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 674, 675, 676, 692, 750, 764, 830, 831, 840, 848, 855, 898, 900, 903, 906, 908, 977, 979, 980, 981, 982, 983, 985, 987, 988, 989, 990, 992, 993, 995, 997, 999, 1000, 1001, 1018], "shrink": [26, 82, 95, 125, 170, 183, 194, 197, 203, 220, 249, 305, 344, 410, 555, 556, 672, 674, 844, 854, 855, 899, 900, 901, 902, 903, 988, 1000, 1018], "perfectli": [26, 37, 263, 274, 340, 394, 405, 412, 434, 563, 602, 700, 701, 711, 713, 731, 732, 752, 781, 790, 870, 980, 982, 985, 1000, 1040, 1041], "incur": [26, 615, 897, 1000, 1035], "correct": [26, 27, 57, 81, 111, 159, 169, 183, 188, 199, 217, 245, 254, 260, 267, 269, 278, 336, 338, 349, 360, 375, 378, 380, 382, 393, 403, 404, 405, 409, 410, 412, 413, 446, 452, 465, 470, 484, 497, 499, 631, 663, 672, 674, 699, 700, 704, 708, 709, 714, 717, 718, 719, 723, 724, 725, 729, 733, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 778, 779, 780, 782, 785, 786, 789, 791, 825, 826, 827, 834, 842, 868, 970, 981, 985, 986, 1000, 1011, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "decreas": [26, 39, 46, 55, 58, 66, 75, 128, 147, 148, 159, 169, 170, 172, 207, 231, 232, 262, 267, 273, 299, 307, 310, 315, 354, 364, 366, 378, 403, 405, 412, 437, 441, 459, 517, 530, 531, 537, 553, 554, 555, 556, 557, 558, 560, 561, 562, 598, 631, 632, 633, 672, 673, 674, 702, 708, 722, 777, 784, 854, 855, 905, 906, 907, 908, 974, 976, 981, 982, 985, 988, 989, 992, 993, 999, 1000, 1009, 1018, 1029, 1034, 1037, 1040], "cal_scor": 26, "327": [26, 339, 347, 725, 1018], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 133], "p2": [26, 133, 217], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 403, 433], "this_p": 26, "sure": [26, 56, 192, 205, 235, 236, 360, 364, 365, 372, 376, 377, 378, 379, 380, 382, 383, 386, 390, 403, 406, 413, 489, 519, 645, 917, 918, 928, 971, 975, 982, 999, 1005, 1006, 1034, 1035, 1037, 1042], "renorm": 26, "multiclass": [26, 30, 117, 177, 218, 236, 238, 253, 267, 270, 276, 279, 281, 333, 345, 367, 373, 374, 380, 381, 383, 392, 396, 405, 412, 433, 448, 458, 485, 492, 500, 553, 555, 557, 560, 563, 564, 567, 590, 598, 606, 627, 628, 629, 654, 655, 662, 664, 669, 670, 671, 672, 698, 702, 704, 724, 725, 729, 730, 733, 738, 749, 778, 779, 782, 783, 784, 789, 794, 795, 797, 798, 799, 800, 808, 810, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 864, 878, 897, 899, 902, 905, 907, 979, 981, 995, 996, 1000, 1001, 1007, 1008, 1020, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1042, 1043, 1044], "argmax": [26, 103, 259, 273, 380, 412, 565, 825, 905, 1000, 1040], "546": [26, 28], "plot_calibration_multiclass": [26, 28], "gave": [27, 403, 794, 797, 798, 808, 864], "four": [27, 144, 159, 175, 181, 200, 247, 248, 325, 333, 374, 378, 392, 553, 560, 715, 905, 907, 923, 981, 983, 984, 985, 995, 1004], "naiv": [27, 31, 129, 260, 262, 349, 351, 367, 373, 403, 412, 413, 433, 540, 832, 833, 834, 835, 836, 979, 980, 988, 1007, 1022, 1027, 1028, 1029, 1030, 1035, 1037, 1040, 1042], "bay": [27, 31, 114, 129, 151, 188, 250, 262, 349, 367, 373, 403, 410, 412, 413, 532, 545, 546, 652, 832, 833, 834, 835, 836, 878, 979, 980, 981, 995, 1007, 1020, 1022, 1027, 1028, 1029, 1030, 1035, 1037, 1040, 1042], "train_sampl": [27, 214, 215], "against": [27, 37, 86, 105, 114, 125, 143, 175, 190, 191, 208, 216, 235, 269, 311, 315, 336, 373, 378, 393, 403, 405, 409, 413, 434, 505, 538, 544, 547, 672, 674, 750, 752, 783, 796, 801, 803, 822, 826, 951, 977, 981, 985, 986, 988, 1000, 1004, 1011], "rfc": [27, 241, 315, 1024], "contrast": [27, 104, 170, 201, 234, 260, 262, 292, 310, 350, 392, 403, 405, 408, 412, 415, 445, 448, 458, 615, 639, 808, 853, 975, 978, 980, 981, 985, 988, 990, 993, 995, 998, 999, 1001, 1037], "push": [27, 378, 382, 403, 1008], "equat": [27, 344, 378, 405, 410, 412, 553, 554, 555, 556, 560, 561, 562, 586, 623, 654, 655, 678, 679, 683, 758, 877, 905, 906, 907, 908, 975, 982, 985, 990, 1035], "twice": [27, 272, 349, 351, 380, 415, 615, 725, 727, 936, 1036, 1044], "approx": [27, 95, 233, 410, 412, 413, 985, 992, 999], "rare": [27, 170, 311, 360, 382, 390, 392, 394, 403, 405, 409, 585, 644, 654, 655, 665, 676, 897, 922, 953, 981, 995, 1009, 1034, 1035, 1036, 1040, 1042], "explan": [27, 86, 235, 364, 377, 378, 403, 413, 974, 984, 986, 1001, 1009, 1030], "bag": [27, 70, 110, 115, 117, 126, 135, 166, 171, 278, 350, 351, 374, 403, 404, 512, 513, 514, 551, 552, 553, 554, 555, 556, 559, 560, 561, 736, 799, 823, 906, 983, 986, 1007, 1022, 1027, 1029, 1030, 1031, 1032, 1033, 1040, 1041, 1043], "underli": [27, 56, 80, 130, 148, 172, 200, 202, 203, 235, 265, 287, 288, 340, 357, 365, 378, 390, 392, 394, 396, 401, 403, 405, 407, 409, 410, 411, 412, 414, 415, 433, 447, 448, 449, 458, 460, 461, 467, 468, 474, 520, 563, 564, 565, 566, 589, 590, 593, 598, 654, 655, 661, 664, 676, 687, 691, 794, 797, 798, 808, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 840, 842, 897, 905, 906, 907, 908, 950, 981, 982, 986, 991, 998, 1000, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1044], "restrict": [27, 66, 67, 163, 166, 216, 298, 303, 380, 384, 390, 403, 405, 412, 413, 461, 489, 498, 528, 577, 606, 649, 650, 651, 652, 654, 678, 679, 709, 777, 783, 784, 823, 845, 847, 848, 849, 851, 853, 854, 855, 857, 883, 985, 1001, 1021, 1022, 1027, 1029, 1037, 1039], "interv": [27, 110, 135, 158, 166, 183, 199, 200, 201, 217, 260, 373, 392, 403, 409, 412, 415, 434, 435, 512, 513, 514, 553, 554, 556, 558, 560, 561, 631, 632, 634, 673, 737, 743, 745, 798, 815, 823, 860, 862, 876, 899, 900, 901, 921, 977, 981, 985, 995, 1001, 1034, 1038], "move": [27, 120, 261, 302, 336, 377, 378, 382, 384, 403, 405, 545, 546, 567, 568, 569, 571, 573, 574, 952, 1019, 1027, 1028, 1032, 1035, 1037, 1040, 1041], "characterist": [27, 44, 62, 148, 156, 166, 228, 253, 257, 276, 305, 360, 373, 375, 383, 403, 409, 412, 415, 499, 500, 619, 634, 654, 698, 702, 704, 722, 777, 783, 784, 813, 823, 826, 864, 902, 981], "difficult": [27, 55, 111, 169, 207, 238, 378, 386, 403, 410, 412, 549, 550, 555, 557, 558, 980, 982, 984, 988, 990, 992, 1001, 1009, 1027, 1041], "bayesian": [27, 54, 166, 177, 183, 187, 218, 244, 246, 250, 251, 252, 410, 433, 520, 524, 528, 607, 640, 641, 652, 653, 792, 793, 858, 860, 872, 877, 974, 1005, 1007, 1021, 1022, 1033, 1040], "domingo": [27, 783, 985], "pazzani": 27, "proc": [27, 79, 403, 413, 446, 685, 689, 832, 974, 982, 987, 991], "13th": 27, "intl": [27, 409], "1996": [27, 405, 412, 416, 440, 512, 513, 514, 551, 552, 995], "zadrozni": [27, 403, 433, 672], "bianca": 27, "charl": [27, 759, 1027, 1030, 1033, 1037, 1039, 1042], "elkan": [27, 316, 403, 433, 439, 443, 455, 672, 1033, 1037, 1038, 1040, 1041], "vol": [27, 159, 183, 266, 375, 405, 470, 555, 556, 624, 631, 641, 660, 681, 682, 792, 822, 834, 975, 987, 988], "2001": [27, 156, 171, 259, 402, 405, 412, 433, 447, 448, 449, 458, 507, 555, 556, 560, 624, 630, 635, 641, 687, 692, 730, 783, 878, 890, 922, 975, 981, 985, 991, 993, 995, 997, 1000], "268": [27, 28, 232, 246], "plot_compare_calibr": [27, 28], "544": 28, "auto_examples_calibr": 28, "calibr": [28, 30, 217, 367, 392, 396, 508, 511, 560, 565, 654, 672, 705, 724, 736, 779, 782, 783, 823, 835, 894, 897, 974, 981, 985, 998, 1000, 1007, 1022, 1024, 1031, 1033], "discrimin": [29, 35, 104, 143, 145, 148, 166, 175, 214, 221, 236, 292, 367, 375, 403, 412, 471, 508, 545, 546, 562, 627, 778, 846, 974, 982, 985, 988, 999, 1001, 1007, 1018, 1022, 1030], "ellipsoid": [29, 35, 166, 244, 245, 252, 545, 546, 627, 792, 793, 979, 984], "ledoit": [29, 35, 77, 78, 82, 83, 166, 469, 471, 475, 476, 508, 545, 979], "wolf": [29, 35, 77, 78, 82, 83, 166, 469, 471, 475, 476, 508, 545, 979, 1034], "oa": [29, 35, 77, 83, 166, 407, 465, 466, 469, 470, 472, 473, 508, 545, 794, 979], "hand": [29, 35, 86, 89, 97, 100, 117, 124, 143, 156, 166, 169, 170, 192, 203, 206, 224, 231, 232, 234, 235, 238, 257, 262, 269, 336, 364, 372, 373, 375, 378, 380, 384, 386, 391, 399, 410, 411, 412, 414, 498, 639, 693, 709, 783, 823, 878, 902, 974, 978, 981, 985, 987, 989, 993, 998, 1000, 1009, 1011, 1014, 1017, 1018], "built": [30, 86, 109, 111, 112, 120, 122, 171, 207, 263, 278, 296, 315, 355, 358, 364, 376, 378, 379, 380, 382, 384, 386, 387, 390, 391, 392, 395, 399, 404, 405, 406, 409, 412, 414, 441, 499, 549, 550, 551, 552, 555, 556, 557, 558, 584, 585, 589, 593, 635, 636, 637, 638, 639, 642, 643, 648, 654, 656, 657, 658, 659, 668, 669, 670, 671, 677, 797, 798, 805, 828, 831, 837, 838, 907, 908, 969, 981, 985, 986, 998, 999, 1001, 1005, 1009, 1020, 1027, 1030, 1031, 1033, 1039], "enabl": [30, 50, 72, 122, 170, 207, 222, 235, 307, 316, 318, 319, 321, 345, 376, 378, 383, 386, 390, 392, 395, 396, 401, 404, 405, 406, 410, 412, 413, 445, 460, 464, 530, 531, 537, 555, 556, 557, 558, 559, 575, 576, 586, 587, 598, 606, 792, 793, 794, 797, 818, 819, 820, 857, 858, 870, 871, 894, 895, 897, 898, 899, 900, 901, 902, 903, 912, 945, 952, 975, 977, 982, 984, 985, 988, 995, 996, 999, 1000, 1006, 1009, 1027, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "troubl": [30, 413], "ovr": [30, 191, 214, 278, 281, 315, 345, 654, 655, 783, 826, 897, 899, 902, 981, 985, 986, 1000, 1027, 1032, 1033, 1035, 1036, 1037, 1041, 1042], "gpc": [30, 150, 161, 166, 500, 606, 607, 609, 610, 615, 616, 618, 619, 699, 736, 1007, 1022, 1037], "gaussian_process": [30, 31, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 367, 392, 415, 639, 986, 1030, 1033, 1034], "gaussianprocessclassifi": [30, 31, 152, 153, 154, 155, 159, 392, 415, 607, 615, 616, 618, 619, 986, 1033, 1035, 1037, 1041], "accuracy_scor": [30, 111, 152, 264, 310, 327, 349, 360, 391, 396, 401, 553, 560, 704, 724, 725, 729, 733, 778, 779, 782, 789, 791, 974, 985, 1028, 1029, 1030, 1039, 1044], "iri": [30, 41, 45, 74, 88, 93, 94, 99, 106, 107, 110, 122, 132, 135, 140, 144, 150, 161, 166, 177, 182, 192, 218, 242, 247, 254, 265, 266, 269, 270, 286, 294, 300, 317, 323, 330, 331, 332, 336, 339, 347, 353, 358, 359, 371, 372, 391, 405, 406, 409, 410, 412, 492, 500, 537, 545, 549, 553, 560, 606, 618, 627, 672, 794, 808, 892, 893, 894, 897, 902, 905, 909, 910, 911, 974, 975, 979, 984, 985, 988, 992, 995, 998, 999, 1000, 1001, 1011, 1018, 1019, 1022, 1040], "load_iri": [30, 41, 45, 74, 90, 99, 102, 104, 106, 120, 122, 132, 140, 144, 153, 182, 192, 208, 242, 247, 254, 265, 266, 267, 269, 270, 286, 291, 294, 300, 315, 317, 320, 329, 332, 333, 336, 339, 355, 358, 391, 399, 405, 406, 409, 412, 414, 557, 563, 598, 606, 615, 616, 618, 619, 627, 654, 655, 783, 794, 797, 798, 800, 808, 825, 846, 892, 893, 894, 905, 907, 909, 910, 911, 975, 980, 985, 986, 987, 988, 992, 995, 1001, 1011, 1017, 1018, 1019, 1033, 1035, 1038], "saga": [30, 190, 214, 215, 654, 655, 668, 670, 683, 808, 981, 1034, 1036], "multi_class": [30, 191, 214, 269, 315, 565, 606, 654, 655, 783, 831, 897, 981, 986, 1000, 1027, 1031, 1035, 1040, 1042], "n_classifi": [30, 565, 566], "classifier_idx": 30, "class_of_interest": [30, 269, 627, 1044], "vmin": [30, 40, 82, 95, 98, 106, 154, 157, 178, 183, 190, 215, 233, 249, 255, 301, 336], "vmax": [30, 51, 82, 95, 98, 106, 154, 157, 178, 183, 190, 215, 233, 249, 255, 301, 336], "mask_y_pr": 30, "04": [30, 40, 42, 54, 67, 68, 85, 97, 105, 135, 141, 148, 149, 156, 161, 169, 180, 198, 217, 236, 245, 251, 260, 261, 273, 276, 296, 297, 322, 343, 375, 412, 414, 467, 468, 783, 794, 808, 981, 985, 989, 999], "scalarmapp": 30, "viridi": [30, 38, 283, 693], "cax": [30, 154, 271], "orient": [30, 95, 169, 220, 305, 392, 909, 982], "horizont": [30, 95, 220, 233, 305, 308, 383, 392, 460, 511, 693, 697], "346": [30, 35, 412, 497, 551, 552], "plot_classification_prob": [30, 35], "salt": [31, 233, 307, 1041], "convei": [31, 225, 307, 1018], "linearli": [31, 100, 113, 148, 169, 178, 213, 221, 228, 269, 270, 307, 310, 340, 349, 364, 375, 390, 410, 412, 511, 638, 703, 866, 867, 985, 988, 991, 1000, 1018, 1034, 1043], "semi": [31, 236, 307, 317, 330, 367, 373, 392, 484, 500, 531, 584, 586, 672, 724, 823, 857, 861, 892, 893, 894, 902, 983, 988, 991, 1007, 1022, 1027, 1039, 1042], "transpar": [31, 307, 970, 1009], "ga\u00ebl": [31, 45, 51, 73, 89, 90, 102, 182, 196, 197, 307, 340, 341, 393, 1009], "modifi": [31, 45, 51, 73, 75, 89, 90, 182, 183, 196, 197, 209, 220, 221, 222, 235, 238, 247, 321, 341, 346, 376, 378, 380, 382, 392, 405, 412, 415, 439, 443, 450, 455, 464, 478, 479, 480, 481, 491, 506, 577, 606, 607, 609, 615, 672, 674, 685, 689, 724, 725, 763, 778, 779, 782, 915, 981, 998, 999, 1006, 1017, 1021, 1022, 1027, 1029, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042], "listedcolormap": [31, 34, 120, 291, 294, 299, 307], "make_circl": [31, 44, 62, 100, 129, 225, 299, 300, 307, 326, 374, 1028, 1035, 1038], "make_moon": [31, 44, 62, 228, 260, 299, 300, 307, 374, 974, 1034, 1038], "discriminant_analysi": [31, 33, 34, 104, 221, 292, 360, 367, 401, 532, 846, 979, 986, 1027, 1030, 1031, 1032, 1033, 1034], "quadraticdiscriminantanalysi": [31, 34, 545, 979, 986, 988, 1027, 1032, 1034, 1042], "adaboostclassifi": [31, 113, 120, 396, 412, 550, 555, 557, 1029, 1030, 1033, 1034, 1036, 1037, 1040, 1042, 1043, 1044], "kneighborsclassifi": [31, 132, 139, 285, 286, 291, 292, 310, 317, 319, 349, 412, 598, 840, 844, 845, 846, 847, 848, 986, 988, 1018, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "neural_network": [31, 166, 170, 239, 298, 299, 300, 301, 302, 366, 367, 390, 986, 989, 1029, 1044], "mlpclassifi": [31, 166, 298, 299, 301, 303, 366, 498, 500, 510, 518, 567, 853, 855, 867, 986, 989, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "decisiontreeclassifi": [31, 111, 113, 120, 132, 264, 278, 321, 354, 355, 358, 392, 412, 549, 551, 553, 555, 557, 560, 627, 800, 821, 906, 907, 909, 910, 911, 975, 986, 1001, 1028, 1029, 1031, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "net": [31, 166, 177, 183, 190, 210, 218, 273, 384, 404, 409, 467, 468, 474, 497, 520, 553, 554, 555, 556, 560, 561, 562, 642, 643, 648, 653, 654, 655, 656, 657, 658, 659, 664, 672, 674, 677, 680, 853, 905, 906, 907, 908, 974, 985, 990, 999, 1007, 1009, 1022, 1027, 1032, 1036, 1037, 1039], "adaboost": [31, 110, 120, 135, 166, 515, 547, 549, 550, 555, 627, 699, 823, 905, 906, 1007, 1022, 1029], "qda": [31, 375, 545, 546, 1007, 1022, 1032], "025": [31, 201, 238, 257, 686, 690], "samm": [31, 111, 113, 120, 412, 549, 1043, 1044], "n_clusters_per_class": [31, 91, 115, 145, 147, 257, 293, 299, 307, 383, 511], "linearly_separ": [31, 299], "ds_cnt": [31, 307, 308], "rdbu": [31, 34, 95, 215, 299, 336, 341], "cm_bright": [31, 299, 307], "ff0000": [31, 291, 299], "0000ff": [31, 291, 299], "ep": [31, 44, 46, 49, 55, 65, 182, 184, 223, 232, 390, 405, 416, 440, 446, 451, 467, 468, 474, 627, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 677, 678, 679, 680, 686, 690, 710, 736, 849, 889, 890, 891, 997, 1042, 1043], "lstrip": [31, 44, 62, 228, 299, 307], "297": [31, 35, 373], "plot_classifier_comparison": [31, 35, 307], "8x8": [32, 89, 190, 232, 292, 302, 375, 498, 1017], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 58, 72, 73, 89, 138, 139, 146, 190, 206, 221, 232, 233, 258, 259, 262, 268, 275, 285, 287, 292, 300, 302, 321, 324, 325, 384, 406, 441, 442, 528, 529, 530, 531, 595, 596, 634, 635, 664, 684, 685, 686, 687, 1011, 1015, 1016, 1017, 1018, 1019, 1033, 1038], "set_axis_off": 32, "gray_r": [32, 89, 98, 154, 221, 302, 324, 325, 1017], "entir": [32, 163, 199, 207, 302, 305, 316, 340, 358, 360, 372, 379, 380, 392, 399, 405, 409, 411, 413, 468, 488, 530, 584, 585, 586, 587, 643, 647, 649, 651, 654, 655, 657, 659, 661, 662, 664, 672, 678, 679, 729, 791, 825, 826, 829, 854, 856, 857, 870, 882, 883, 885, 886, 887, 888, 954, 974, 975, 985, 995, 999, 1001, 1018, 1036, 1037], "97": [32, 105, 148, 172, 236, 251, 325, 336, 375, 384, 391, 409, 654, 980, 986, 995, 1027], "98": [32, 42, 44, 54, 62, 64, 82, 98, 148, 228, 258, 299, 307, 325, 375, 382, 409, 412, 655, 832, 980, 987, 1015, 1020], "86": [32, 70, 145, 190, 307, 324, 325, 783, 905, 985, 1016], "92": [32, 50, 98, 145, 175, 258, 302, 324, 325, 336, 373, 375, 534, 536, 543, 558, 593, 794, 808, 980, 1020], "899": [32, 258], "confus": [32, 166, 229, 253, 269, 276, 324, 325, 349, 392, 464, 500, 627, 648, 693, 709, 711, 714, 724, 725, 733, 749, 779, 782, 823, 895, 902, 1020, 1027, 1028, 1032, 1036, 1037, 1039, 1040, 1041, 1042], "figure_": [32, 170, 239, 315, 317, 385, 434, 627, 628, 693, 694, 696, 697, 698, 800, 816], "confusion_matrix": [32, 229, 254, 324, 325, 693, 709, 749, 820, 985, 1020, 1028, 1033, 1034, 1037, 1038, 1040], "gt": [32, 71, 72, 116, 131, 169, 250, 258, 272, 376, 378, 382], "rebuilt": [32, 837, 838], "408": [32, 35], "plot_digits_classif": [32, 35], "oracl": [33, 199, 217, 418, 465, 466, 469, 470, 471, 472, 979, 1027], "shrinkag": [33, 77, 79, 82, 83, 103, 126, 166, 294, 418, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 535, 539, 545, 557, 558, 794, 981, 995, 1007, 1022, 1027, 1031, 1032, 1034], "lineardiscriminantanalysi": [33, 34, 104, 221, 292, 360, 401, 532, 546, 846, 979, 986, 988, 1027, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1041, 1042, 1043], "200": [33, 34, 44, 50, 54, 60, 75, 98, 113, 122, 124, 130, 155, 185, 194, 200, 203, 204, 205, 211, 216, 221, 240, 245, 261, 267, 269, 270, 305, 308, 326, 335, 336, 357, 360, 373, 380, 390, 410, 412, 417, 436, 450, 464, 467, 468, 529, 530, 531, 534, 535, 536, 539, 543, 580, 645, 647, 667, 675, 688, 808, 854, 855, 895, 899, 900, 901, 902, 903, 1000], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 132, 133, 412, 565], "lsqr": [33, 312, 545, 668, 670, 683, 979, 1028, 1034, 1041], "clf2": [33, 132, 133, 380, 399, 412, 565], "store_precis": [33, 79, 465, 466, 469, 470, 471, 472], "assume_cent": [33, 79, 407, 418, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476], "clf3": [33, 132, 133, 380, 412, 565], "covariance_estim": [33, 545, 979, 1039], "features_samples_ratio": 33, "gold": [33, 193, 200, 202, 205, 209, 213, 216, 246, 251, 267, 289, 335, 384], "navi": [33, 70, 79, 99, 104, 105, 130, 178, 202, 210, 223, 246, 247, 248, 251, 267, 269, 288, 295, 326, 357], "plot_lda": [33, 35], "doubl": [34, 117, 272, 378, 392, 410, 534, 536, 543, 837, 838, 848, 969, 975, 1000, 1001, 1027, 1037, 1038], "own": [34, 117, 217, 235, 250, 283, 285, 326, 350, 365, 372, 381, 382, 383, 386, 387, 395, 404, 405, 417, 421, 436, 450, 529, 553, 560, 642, 792, 793, 839, 840, 841, 843, 845, 847, 848, 849, 871, 905, 907, 923, 928, 953, 981, 987, 988, 991, 995, 1000, 1005, 1009, 1019, 1020, 1034, 1035, 1037, 1044], "dispers": [34, 405, 706, 720, 981], "cov_class_1": 34, "cov_class_2": 34, "matric": [34, 39, 40, 80, 82, 95, 204, 246, 247, 249, 250, 251, 283, 296, 316, 328, 349, 350, 370, 372, 380, 381, 390, 391, 392, 405, 406, 407, 408, 410, 413, 414, 420, 446, 447, 449, 460, 469, 478, 479, 480, 530, 531, 534, 536, 537, 540, 543, 545, 546, 551, 552, 559, 562, 577, 578, 585, 639, 654, 660, 668, 670, 683, 749, 755, 763, 769, 773, 774, 775, 776, 787, 792, 793, 823, 841, 844, 849, 860, 864, 866, 869, 872, 874, 875, 877, 880, 882, 884, 886, 887, 888, 889, 890, 899, 900, 902, 903, 913, 934, 940, 949, 956, 958, 959, 975, 979, 982, 983, 984, 986, 988, 989, 997, 999, 1000, 1005, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "make_data": [34, 61], "share": [34, 85, 129, 169, 250, 349, 358, 360, 364, 365, 380, 386, 405, 410, 413, 545, 664, 700, 704, 792, 793, 797, 798, 979, 992, 1027, 1029, 1035, 1037, 1039, 1042], "spheric": [34, 57, 85, 127, 222, 247, 249, 250, 296, 374, 759, 792, 793, 981, 984, 988, 1005], "isotrop": [34, 55, 57, 61, 100, 153, 155, 220, 222, 405, 407, 415, 508, 515, 528, 611, 615, 616, 618, 619], "third": [34, 120, 125, 143, 148, 159, 217, 228, 251, 278, 288, 307, 321, 365, 373, 377, 390, 393, 413, 530, 584, 585, 586, 587, 796, 797, 798, 803, 839, 840, 841, 843, 845, 875, 887, 953, 974, 996, 1003, 1027, 1038, 1043, 1044], "x_isotropic_covari": 34, "y_isotropic_covari": 34, "x_shared_covari": 34, "y_shared_covari": 34, "x_different_covari": 34, "y_different_covari": 34, "piec": [34, 47, 200, 365, 984], "misclassifi": [34, 111, 254, 340, 349, 1000], "mark": [34, 58, 92, 143, 164, 264, 271, 370, 378, 380, 382, 386, 387, 392, 405, 531, 603, 604, 607, 628, 654, 850, 851, 892, 893, 910, 924, 929, 934, 981, 1009, 1022, 1027, 1028, 1033, 1035, 1036, 1043], "star": [34, 92, 134, 378], "ellips": [34, 228, 245, 246, 247, 250, 251, 991], "mpl": [34, 245, 246, 247, 251, 305], "plot_ellips": [34, 245], "cov": [34, 82, 86, 113, 250, 378, 392, 395, 398, 408, 418, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 515, 528, 530, 537, 544], "linalg": [34, 54, 78, 79, 82, 101, 103, 105, 185, 245, 246, 247, 250, 251, 378, 384, 410, 447, 448, 449, 458, 528, 531, 537, 540, 653, 668, 670, 683, 687, 691, 932], "eigh": [34, 245, 246, 247, 250, 251, 410, 417, 529, 531, 1042], "arctan": [34, 246, 251, 374, 514], "180": [34, 245, 246, 247, 250, 251, 292, 296, 350, 384, 498], "ell": [34, 245, 246, 247, 251, 402], "patch": [34, 50, 238, 245, 246, 247, 250, 251, 255, 373, 382, 390, 410, 412, 551, 552, 579, 580, 583, 1027, 1035], "set_clip_box": [34, 245, 246, 247, 250, 251], "set_alpha": [34, 245, 246, 247, 250, 251], "add_artist": [34, 221, 245, 246, 247, 250, 251], "plot_result": [34, 121, 245, 246, 251], "pcolormesh": [34, 129, 140, 182, 286, 291, 332, 336, 340, 627], "x_right": 34, "y_right": 34, "x_wrong": 34, "y_wrong": 34, "means_": [34, 245, 246, 247, 248, 250, 251, 545, 546, 792, 793], "yellow": [34, 92, 336, 986], "set_box_aspect": 34, "svd": [34, 101, 103, 129, 221, 350, 387, 401, 408, 417, 447, 449, 478, 479, 481, 528, 529, 530, 531, 535, 536, 537, 540, 542, 545, 546, 660, 668, 669, 670, 681, 682, 683, 856, 934, 979, 1020, 1029, 1033, 1034, 1040, 1042], "store_covari": [34, 545, 546, 1032, 1034], "ax_row": 34, "align": [34, 125, 164, 220, 245, 271, 351, 392, 685, 689, 988, 999, 1021, 1022, 1043, 1044], "perpendicular": [34, 341], "bisector": 34, "wherea": [34, 48, 53, 67, 80, 127, 213, 238, 261, 262, 263, 269, 286, 310, 340, 344, 345, 366, 393, 409, 412, 440, 561, 654, 655, 796, 812, 825, 977, 984, 986, 988, 995, 1001, 1040], "singl": [34, 39, 48, 52, 53, 55, 58, 61, 62, 72, 110, 111, 112, 120, 121, 122, 130, 135, 148, 151, 157, 163, 166, 170, 172, 175, 183, 199, 201, 203, 239, 241, 250, 256, 269, 278, 301, 319, 321, 336, 349, 350, 351, 355, 357, 360, 364, 365, 372, 373, 378, 383, 385, 386, 387, 390, 391, 392, 403, 404, 406, 408, 409, 410, 412, 413, 414, 430, 433, 436, 437, 441, 442, 443, 445, 450, 460, 462, 463, 489, 490, 492, 502, 505, 530, 549, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 578, 588, 595, 596, 598, 602, 623, 628, 630, 639, 662, 663, 669, 672, 673, 674, 686, 688, 690, 706, 717, 718, 719, 720, 731, 732, 733, 736, 769, 780, 792, 793, 794, 797, 798, 808, 815, 819, 820, 822, 823, 826, 834, 837, 838, 842, 854, 855, 856, 866, 867, 870, 871, 872, 877, 878, 892, 893, 905, 906, 907, 908, 913, 943, 949, 953, 972, 974, 980, 981, 982, 985, 986, 988, 990, 992, 993, 995, 999, 1000, 1001, 1005, 1009, 1011, 1018, 1020, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "419": [34, 35, 78, 83, 612], "plot_lda_qda": [34, 35], "580": [35, 52, 68, 351, 837, 838], "auto_examples_classif": 35, "modul": [36, 37, 49, 53, 77, 84, 88, 94, 95, 110, 142, 150, 160, 162, 166, 167, 174, 177, 214, 219, 220, 244, 253, 277, 278, 280, 284, 298, 300, 301, 304, 323, 331, 348, 353, 356, 372, 373, 376, 377, 378, 379, 380, 382, 383, 384, 386, 387, 390, 392, 394, 395, 399, 403, 404, 405, 408, 412, 413, 414, 416, 440, 499, 531, 575, 576, 655, 926, 974, 979, 981, 983, 985, 986, 989, 991, 992, 995, 997, 999, 1001, 1002, 1009, 1014, 1015, 1020, 1028, 1029, 1030, 1032, 1033, 1037, 1039, 1041], "handwritten": [36, 68, 166, 219, 224, 226, 232, 258, 301, 302, 324, 325, 371, 405, 412, 443, 498, 537, 540, 545, 562, 684, 685, 686, 687, 688, 700, 701, 713, 732, 788, 790, 846, 858, 867, 877, 890, 982, 988, 1011, 1022], "hierarch": [36, 40, 54, 68, 166, 172, 319, 392, 413, 437, 439, 441, 442, 500, 508, 510, 518, 526, 543, 726, 850, 877, 1002, 1006, 1021, 1022, 1027, 1030, 1031, 1043], "coin": [36, 68, 166, 405, 413, 437, 458, 997, 1019], "shift": [36, 44, 68, 166, 178, 223, 250, 288, 302, 305, 340, 407, 411, 436, 444, 454, 457, 465, 508, 511, 685, 689, 843, 866, 995, 1021, 1022, 1027, 1031, 1035], "chanc": [36, 49, 68, 111, 166, 172, 199, 207, 214, 217, 260, 266, 269, 270, 311, 344, 350, 360, 377, 405, 409, 696, 698, 700, 701, 704, 712, 750, 752, 781, 790, 822, 985, 993, 1001, 1043], "agglom": [36, 44, 47, 68, 166, 405, 437, 441, 498, 687, 773, 850, 1030], "bisect": [36, 68, 166, 439, 443, 508, 1041], "quantiz": [36, 68, 166, 372, 373, 405, 439, 443, 445, 502, 774, 862, 959, 995], "birch": [36, 44, 68, 166, 319, 366, 392, 442, 445, 508, 1021, 1022, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "toi": [36, 49, 53, 57, 68, 86, 99, 114, 127, 132, 133, 166, 181, 189, 203, 213, 227, 243, 245, 300, 333, 343, 371, 384, 390, 412, 413, 436, 437, 438, 440, 442, 444, 445, 446, 448, 454, 465, 508, 510, 518, 559, 635, 673, 721, 751, 793, 843, 850, 858, 877, 901, 982, 984, 985, 991, 995, 1022], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 56, 67, 68, 166, 172, 436, 437, 441, 442, 459, 508, 510, 518, 877, 1005, 1019, 1030, 1035, 1038], "dbscan": [36, 44, 55, 65, 68, 166, 321, 390, 392, 442, 446, 448, 451, 508, 700, 701, 713, 732, 788, 790, 849, 877, 988, 1021, 1022, 1027, 1029, 1031, 1032, 1034, 1035, 1036, 1043], "hdbscan": [36, 44, 68, 166, 440, 508, 877, 975, 1005, 1021, 1022, 1043, 1044], "optic": [36, 44, 68, 166, 319, 371, 416, 440, 442, 451, 452, 453, 498, 1021, 1022, 1036, 1040, 1041, 1042, 1043, 1044], "affin": [36, 44, 68, 166, 305, 370, 380, 392, 404, 410, 436, 437, 441, 448, 450, 458, 508, 531, 687, 691, 700, 701, 713, 732, 788, 790, 893, 979, 982, 985, 1021, 1022, 1027, 1028, 1031, 1037, 1038, 1040, 1042], "propag": [36, 68, 166, 323, 330, 373, 404, 436, 450, 498, 508, 510, 693, 700, 701, 709, 710, 713, 714, 732, 788, 790, 857, 871, 892, 893, 894, 951, 952, 989, 1007, 1021, 1022, 1027, 1039, 1042], "agglomer": [36, 68, 166, 370, 405, 413, 441, 498, 596, 602, 641, 794, 799, 857, 1022], "unstructur": [36, 68, 166, 301, 405, 437, 441, 459, 499, 526, 850, 997, 1009, 1031], "dendrogram": [36, 68, 166, 172, 405, 437, 441, 500, 1039], "pictur": [36, 68, 166, 232, 251, 373, 393, 405, 410, 413, 458, 489, 490, 517, 1006], "greek": [36, 68, 166, 405, 458], "silhouett": [36, 38, 49, 57, 58, 68, 166, 350, 378, 443, 508, 787, 788, 1027, 1031], "embed": [36, 44, 46, 68, 116, 151, 166, 219, 222, 224, 226, 227, 243, 283, 292, 384, 392, 404, 405, 437, 448, 458, 485, 498, 540, 545, 562, 578, 635, 684, 685, 686, 687, 688, 689, 690, 691, 692, 846, 858, 867, 889, 890, 891, 977, 988, 991, 997, 1002, 1005, 1021, 1022, 1027, 1028, 1038, 1039, 1041], "explor": [37, 114, 115, 172, 224, 225, 238, 261, 262, 268, 269, 278, 312, 317, 336, 350, 360, 372, 375, 377, 384, 399, 405, 412, 468, 794, 797, 805, 878, 974, 981, 982, 984, 990, 992, 993, 995, 1009, 1014, 1020, 1033], "uniformli": [37, 117, 124, 143, 228, 245, 315, 380, 512, 513, 514, 547, 638, 798, 806, 808, 876, 974, 975, 985, 988, 995, 1031, 1036], "divid": [37, 43, 48, 91, 95, 145, 156, 199, 238, 245, 350, 360, 374, 375, 402, 405, 409, 410, 465, 466, 467, 468, 469, 470, 471, 472, 508, 515, 530, 537, 646, 647, 650, 651, 652, 660, 661, 672, 673, 674, 715, 721, 729, 733, 751, 789, 791, 854, 855, 899, 902, 934, 937, 938, 974, 982, 984, 985, 988, 995, 999, 1020, 1027, 1034, 1035, 1038], "randomli": [37, 48, 50, 61, 71, 88, 93, 114, 127, 163, 166, 170, 216, 232, 236, 250, 255, 266, 278, 281, 324, 360, 365, 387, 390, 391, 405, 409, 412, 415, 445, 454, 508, 511, 515, 519, 527, 533, 541, 542, 547, 555, 556, 559, 560, 561, 606, 607, 667, 675, 686, 690, 712, 792, 793, 853, 891, 905, 906, 907, 908, 984, 986, 988, 991, 993, 997, 1001, 1018, 1020, 1038, 1042], "quiroz": [37, 57, 117, 178, 183, 238, 261, 263, 310, 349, 350, 351], "fundament": [37, 49, 81, 350, 376, 391, 408, 492, 534, 536, 543, 704, 981, 985], "homogen": [37, 38, 39, 44, 46, 49, 55, 58, 350, 373, 390, 392, 407, 412, 415, 442, 610, 700, 713, 726, 731, 732, 752, 790, 982, 983, 985, 1036], "frequent": [37, 111, 164, 263, 269, 270, 350, 367, 375, 378, 413, 547, 586, 626, 847, 870, 871, 874, 886, 975, 977, 985, 999, 1003, 1006], "ari": [37, 58, 350, 405, 701, 1032, 1038], "mutual": [37, 38, 49, 55, 58, 142, 149, 166, 392, 412, 414, 442, 588, 591, 592, 595, 596, 602, 603, 604, 605, 700, 701, 711, 750, 752, 781, 790, 974, 981, 985, 986, 1027, 1033, 1043], "mi": [37, 143, 405, 603, 604, 700, 750, 752, 975, 985, 999], "theoret": [37, 57, 151, 404, 405, 412, 549, 550, 635, 700, 721, 751, 897, 974, 981, 982, 984, 985, 987, 997, 999, 1000, 1008, 1009], "nmi": [37, 405, 713, 731, 732, 752], "ami": [37, 49, 58, 405, 700], "score_func": [37, 71, 72, 588, 591, 592, 594, 595, 596, 737, 1027, 1029], "rand_scor": [37, 405, 711, 985, 1039], "adjusted_rand_scor": [37, 38, 49, 58, 350, 405, 700, 711, 752, 781, 985, 1040], "mutual_info_scor": [37, 405, 700, 985, 1035, 1038, 1039], "normalized_mutual_info_scor": [37, 405, 731, 750, 790, 985, 1035, 1041], "adjusted_mutual_info_scor": [37, 38, 49, 58, 405, 701, 711, 750, 752, 781, 985, 1027, 1035, 1039, 1043], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 61, 175, 350], "seaborn": [37, 112, 168, 169, 178, 183, 250, 260, 378, 395, 398, 1005], "sn": [37, 112, 168, 169, 178, 183, 250, 260], "color_palett": [37, 112, 250], "colorblind": [37, 112], "vx": 37, "errorbar": [37, 61, 79, 81, 147, 157, 158, 285, 327, 339, 800, 816], "refer": [37, 38, 60, 63, 71, 90, 125, 131, 148, 160, 217, 235, 238, 267, 286, 293, 305, 315, 316, 317, 318, 319, 320, 321, 350, 365, 367, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 395, 396, 399, 406, 416, 417, 418, 433, 434, 435, 436, 438, 440, 442, 443, 444, 446, 447, 448, 449, 450, 453, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 494, 499, 507, 509, 511, 512, 513, 514, 515, 516, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 540, 543, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 586, 589, 590, 591, 598, 603, 604, 606, 607, 610, 615, 618, 619, 623, 624, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 643, 645, 647, 649, 651, 652, 654, 657, 659, 661, 662, 663, 664, 667, 669, 671, 672, 674, 675, 678, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 697, 700, 701, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 729, 730, 731, 732, 733, 735, 736, 738, 751, 753, 754, 764, 778, 780, 781, 783, 784, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 827, 828, 832, 833, 834, 836, 839, 842, 843, 844, 846, 853, 854, 855, 857, 862, 863, 864, 866, 867, 869, 870, 871, 873, 874, 875, 877, 878, 885, 890, 891, 892, 893, 894, 895, 897, 899, 900, 902, 903, 905, 906, 907, 908, 922, 934, 951, 996, 1001, 1006, 1011, 1015, 1019, 1020, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "satur": [37, 169, 305], "uniform_labelings_scor": 37, "nwith": [37, 57, 61, 147, 350], "constantli": [37, 199, 1009], "unbound": [37, 984, 1041], "cardin": [37, 118, 119, 125, 171, 172, 311, 312, 321, 405, 412, 459, 549, 550, 553, 554, 555, 556, 560, 561, 562, 675, 870, 871, 878, 905, 906, 907, 908, 985, 986, 993, 995, 1041, 1042], "why": [37, 52, 95, 111, 117, 169, 171, 175, 188, 257, 260, 278, 349, 350, 378, 386, 392, 405, 407, 410, 416, 440, 443, 447, 985, 987, 1000, 1015, 1018, 1030], "chart": [37, 265, 986, 1013, 1030], "henc": [37, 60, 72, 169, 203, 232, 269, 336, 349, 350, 364, 373, 380, 382, 384, 392, 395, 405, 409, 412, 413, 483, 504, 535, 537, 538, 539, 559, 586, 639, 642, 648, 656, 658, 668, 683, 700, 701, 705, 711, 726, 752, 781, 790, 813, 814, 832, 833, 834, 835, 836, 872, 942, 982, 984, 985, 986, 991, 992, 995, 1006, 1034, 1035, 1038, 1039, 1041], "safe": [37, 169, 188, 235, 350, 378, 380, 405, 406, 430, 504, 505, 584, 587, 593, 769, 773, 891, 951, 957, 988, 1033, 1034, 1035, 1040, 1041], "stabil": [37, 115, 169, 221, 265, 305, 344, 350, 392, 402, 442, 646, 650, 666, 835, 854, 855, 873, 885, 933, 975, 981, 984, 995, 1006, 1011, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "mislead": [37, 118, 119, 125, 169, 379, 394, 412, 549, 550, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 1022, 1040], "meaning": [37, 172, 225, 292, 351, 402, 409, 413, 414, 544, 724, 725, 733, 778, 779, 782, 846, 989, 999, 1000, 1027, 1043], "931": [37, 68], "plot_adjusted_for_chance_measur": [37, 68], "brendan": [38, 436, 450, 1043], "frei": [38, 436, 450, 1037], "delbert": [38, 436, 450], "dueck": [38, 436, 450], "messag": [38, 44, 62, 70, 95, 235, 349, 350, 373, 376, 377, 378, 382, 383, 386, 387, 405, 436, 450, 464, 535, 539, 544, 570, 623, 708, 794, 797, 798, 800, 808, 816, 821, 824, 826, 846, 854, 855, 895, 916, 917, 918, 921, 924, 948, 969, 985, 995, 1027, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "feb": [38, 436, 450], "affinitypropag": [38, 44, 319, 405, 1027, 1030, 1031, 1035, 1038, 1040, 1041, 1042, 1043], "labels_tru": [38, 49, 55, 64, 405, 700, 701, 710, 711, 713, 726, 731, 732, 750, 752, 781, 790], "af": 38, "prefer": [38, 44, 55, 251, 269, 305, 360, 364, 365, 366, 376, 378, 379, 380, 392, 405, 409, 410, 412, 413, 436, 450, 467, 468, 474, 483, 504, 505, 623, 628, 629, 650, 654, 655, 697, 721, 723, 737, 752, 753, 846, 872, 897, 898, 939, 951, 974, 977, 979, 981, 985, 990, 1000, 1001, 1005, 1018, 1028, 1034, 1036, 1040, 1041, 1044], "cluster_centers_indic": [38, 450], "cluster_centers_indices_": [38, 436], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 55, 58, 61, 62, 63, 65, 67, 319, 321, 350, 378, 392, 405, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 451, 1019, 1032], "n_clusters_": [38, 49, 55, 63, 437, 441], "homogeneity_scor": [38, 49, 58, 350, 405, 713, 731, 790, 985], "completeness_scor": [38, 49, 58, 316, 350, 405, 731, 732, 790, 985], "silhouette_scor": [38, 49, 58, 60, 350, 378, 405, 1027, 1031, 1033, 1035, 1037, 1041], "sqeuclidean": [38, 446, 453, 773, 774, 775], "872": [38, 993], "912": 38, "871": [38, 80, 81, 407, 470], "753": [38, 349], "cycler": 38, "class_memb": 38, "cluster_cent": [38, 61, 63, 64, 457], "303": [38, 68, 217, 631], "plot_affinity_propag": [38, 68, 436, 450], "impos": [39, 57, 128, 193, 203, 311, 390, 405, 410, 412, 413, 523, 653, 981], "simpli": [39, 86, 129, 151, 159, 224, 236, 238, 269, 296, 317, 318, 364, 373, 378, 380, 383, 390, 392, 407, 408, 409, 410, 412, 413, 481, 691, 757, 760, 864, 936, 977, 985, 986, 987, 988, 999, 1012, 1020, 1034, 1035, 1036], "There": [39, 46, 117, 151, 217, 224, 235, 251, 255, 257, 260, 349, 371, 373, 375, 378, 379, 380, 383, 390, 392, 393, 395, 402, 404, 405, 410, 412, 413, 414, 442, 448, 458, 530, 549, 550, 555, 556, 584, 585, 587, 602, 641, 975, 981, 982, 983, 984, 985, 988, 992, 995, 999, 1000, 1001, 1004, 1008, 1019, 1027, 1035], "unstabl": [39, 66, 169, 405, 407, 408, 685, 689, 933, 934, 1001, 1031, 1032, 1034, 1039, 1041, 1043], "quickli": [39, 239, 300, 315, 375, 378, 379, 409, 412, 688, 981, 988, 989, 1009, 1020, 1038], "fight": [39, 203, 1009], "percol": 39, "distanc": [39, 40, 55, 57, 60, 61, 65, 67, 77, 81, 83, 100, 148, 163, 166, 172, 185, 200, 220, 222, 225, 232, 238, 283, 285, 286, 291, 293, 295, 296, 305, 310, 315, 319, 320, 340, 349, 350, 364, 375, 387, 390, 392, 402, 405, 407, 410, 411, 415, 416, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 451, 452, 453, 454, 455, 457, 458, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 534, 536, 543, 603, 604, 611, 615, 616, 618, 619, 624, 654, 655, 662, 664, 670, 671, 672, 673, 674, 684, 685, 686, 688, 689, 690, 691, 692, 695, 699, 720, 729, 753, 755, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 773, 774, 775, 776, 787, 788, 791, 826, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 876, 891, 895, 897, 899, 901, 902, 903, 905, 906, 907, 908, 975, 979, 982, 983, 985, 991, 995, 997, 999, 1000, 1006, 1018, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "merg": [39, 41, 46, 51, 318, 376, 378, 381, 386, 390, 393, 405, 436, 437, 438, 441, 442, 459, 814, 1019, 1027, 1034], "exagger": [39, 169, 688, 982], "behaviour": [39, 100, 200, 201, 217, 338, 378, 392, 405, 412, 555, 556, 560, 561, 598, 737, 795, 796, 799, 811, 812, 813, 814, 815, 895, 905, 906, 958, 974, 975, 985, 995, 1035, 1038, 1039, 1042, 1043], "shortest": [39, 383, 387, 684, 939, 982, 1040], "mechan": [39, 235, 345, 349, 365, 378, 380, 405, 413, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 606, 607, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 983, 1001, 1009], "resembl": [39, 203], "brittl": [39, 405], "pronounc": [39, 40, 52, 156], "kneighbors_graph": [39, 44, 62, 67, 283, 392, 405, 437, 441, 839, 840, 841, 843, 845, 847, 848, 849, 851, 988, 1027, 1031, 1036], "geometri": [39, 405, 982, 988], "instabl": [39, 169, 293, 415, 448, 531, 535, 539, 691, 1034, 1037, 1040], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 56, 62, 67, 392, 405, 436, 438, 441, 1019, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042], "1500": [39, 50, 57, 62, 67, 92, 220, 224, 245], "knn_graph": 39, "include_self": [39, 44, 67, 850, 851, 1031], "817": [39, 68, 161], "plot_agglomerative_clust": [39, 68], "waveform": 40, "euclidean": [40, 57, 58, 185, 232, 238, 283, 286, 291, 315, 320, 340, 350, 402, 404, 405, 410, 411, 412, 413, 415, 436, 437, 440, 441, 442, 446, 448, 453, 456, 459, 527, 533, 585, 611, 615, 618, 619, 672, 674, 686, 688, 691, 692, 695, 757, 758, 764, 765, 766, 767, 773, 774, 775, 776, 787, 788, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 891, 975, 979, 983, 986, 988, 997, 1006, 1031, 1034, 1035, 1036, 1037, 1043, 1044], "cityblock": [40, 44, 405, 446, 453, 757, 773, 774, 775, 988], "invari": [40, 375, 392, 405, 415, 610, 685, 742, 812, 813, 981, 982, 985, 1000, 1006, 1035, 1038, 1039, 1040], "ie": [40, 66, 96, 436, 700, 763, 981, 995], "inter": [40, 118, 360, 412, 712, 940], "character": [40, 217, 354, 405, 409, 982], "ill": [40, 82, 204, 302, 467, 468, 474, 646, 647, 650, 651, 652, 678, 679, 981, 984, 1019, 1037], "recov": [40, 65, 82, 96, 97, 103, 121, 151, 168, 183, 198, 199, 203, 220, 351, 407, 411, 414, 417, 456, 529, 555, 981, 982, 984, 1006, 1019, 1033], "put": [40, 58, 140, 151, 153, 233, 240, 245, 299, 307, 319, 329, 341, 346, 366, 380, 382, 383, 386, 415, 439, 443, 455, 511, 610, 643, 657, 792, 874, 878, 886, 899, 900, 901, 902, 903, 924, 975, 982, 984, 985, 986, 992, 995, 1008, 1012, 1014, 1020, 1039], "cc": [40, 376], "patheffect": 40, "pairwise_dist": [40, 392, 405, 416, 437, 440, 441, 442, 446, 453, 684, 692, 757, 766, 774, 775, 787, 788, 841, 843, 845, 849, 983, 1027, 1031, 1033, 1035, 1036, 1038, 1039, 1044], "sqr": 40, "sign": [40, 79, 86, 96, 99, 113, 183, 250, 299, 344, 378, 405, 410, 413, 540, 578, 585, 602, 631, 632, 654, 655, 662, 664, 670, 671, 672, 673, 730, 737, 897, 901, 932, 934, 950, 981, 985, 990, 995, 999, 1000, 1019, 1027, 1031, 1036, 1040, 1042], "phi": [40, 410, 738, 863, 977, 985, 995, 1000], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 62, 63, 228], "f781bf": [40, 44, 62, 63], "set_label": [40, 154, 232], "tight": [40, 105, 113, 120, 140, 144, 184, 186, 191, 192, 193, 204, 208, 211, 216, 222, 225, 249, 283, 289, 290, 294, 295, 332, 336, 339, 341, 355, 578, 688, 1039], "avg_dist": [40, 776], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 66], "cividi": 40, "45": [40, 64, 73, 85, 144, 156, 171, 173, 188, 199, 217, 267, 271, 272, 325, 336, 409, 412, 413, 560, 623, 630, 783, 792, 901, 975, 985, 993, 1004, 1016, 1023, 1027, 1030], "interclass": 40, "026": [40, 68, 86, 230, 243, 311, 313], "plot_agglomerative_clustering_metr": [40, 68], "hierarchi": [41, 172, 378, 446, 452, 459, 990, 1019], "plot_dendrogram": 41, "kwarg": [41, 98, 235, 380, 385, 419, 423, 427, 434, 438, 444, 446, 460, 465, 531, 534, 536, 559, 613, 627, 642, 643, 648, 649, 656, 657, 658, 659, 673, 677, 680, 694, 695, 696, 698, 737, 837, 838, 856, 857, 861, 901, 912, 931, 945, 1034, 1038, 1040, 1044], "children_": [41, 437, 441, 459], "current_count": 41, "child_idx": 41, "leaf": [41, 116, 127, 129, 354, 358, 405, 412, 416, 437, 438, 439, 440, 441, 442, 446, 453, 459, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 905, 906, 907, 908, 909, 910, 988, 1001, 1030, 1032, 1034, 1038, 1041], "linkage_matrix": 41, "column_stack": [41, 299, 307], "distances_": [41, 437, 441, 1039], "distance_threshold": [41, 437, 441, 1036, 1039], "truncate_mod": 41, "parenthesi": [41, 378], "098": [41, 68, 173, 209, 218, 351], "plot_agglomerative_dendrogram": [41, 68], "scalabl": [42, 44, 62, 166, 174, 176, 253, 276, 320, 350, 378, 405, 412, 413, 444, 487, 498, 585, 636, 800, 811, 821, 823, 835, 858, 867, 869, 897, 899, 902, 903, 977, 980, 982, 985, 998, 1000, 1009, 1027, 1030, 1031, 1037, 1038, 1041, 1042], "hundr": [42, 123, 221, 309, 373, 409, 412, 557, 558, 982, 1038], "thousand": [42, 117, 232, 234, 309, 350, 373, 405, 412, 854, 855, 902, 982, 1020, 1036, 1038], "million": [42, 56, 156, 175, 413, 688, 982, 1000, 1009, 1041, 1042], "chose": [42, 169, 1015], "usag": [42, 53, 71, 74, 85, 99, 109, 122, 145, 169, 170, 229, 233, 235, 254, 292, 294, 301, 332, 351, 364, 373, 377, 378, 380, 381, 385, 386, 388, 392, 393, 395, 404, 405, 409, 410, 415, 416, 440, 442, 446, 460, 485, 508, 511, 515, 519, 557, 558, 587, 605, 636, 644, 654, 655, 656, 662, 663, 664, 665, 672, 673, 674, 675, 676, 686, 773, 776, 787, 788, 856, 897, 905, 906, 907, 908, 934, 974, 975, 977, 984, 985, 986, 988, 1000, 1007, 1011, 1015, 1022, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "enjoi": 42, "edit": [42, 375, 377, 378, 381, 382, 386, 390, 395, 526, 530, 827, 979, 981, 986, 992, 1020], "158": [42, 261, 276, 412, 665], "manojkumarsivaraj334": 42, "joblib": [42, 54, 72, 117, 283, 316, 373, 376, 378, 381, 387, 390, 392, 395, 398, 399, 404, 406, 416, 433, 437, 440, 441, 442, 444, 446, 448, 453, 454, 457, 460, 463, 468, 504, 527, 531, 532, 533, 535, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 590, 598, 606, 628, 630, 635, 643, 647, 649, 651, 653, 654, 655, 657, 659, 661, 662, 664, 672, 675, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 843, 845, 847, 848, 850, 851, 856, 857, 858, 859, 892, 893, 951, 952, 953, 955, 970, 985, 1006, 1027, 1028, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1042, 1044], "cpu_count": [42, 117, 283, 953], "xx": [42, 58, 80, 120, 124, 129, 140, 153, 154, 155, 170, 186, 206, 209, 210, 211, 212, 213, 225, 228, 236, 249, 289, 299, 307, 308, 329, 335, 336, 341, 342, 345, 346, 382], "yy": [42, 58, 80, 120, 129, 140, 153, 155, 170, 206, 210, 211, 212, 213, 225, 228, 236, 289, 299, 307, 308, 329, 335, 336, 341, 342, 345, 346], "n_center": [42, 508], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 57, 58, 166, 284, 297, 308, 319, 350, 374, 405, 438, 439, 442, 443, 444, 445, 448, 455, 456, 458, 500, 545, 627, 844, 1007, 1022, 1027, 1031, 1034, 1039, 1043], "subcluster_centers_": [42, 438], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 64], "256": [42, 48, 53, 123, 311, 365, 373, 405, 412, 445, 464, 533, 542, 559, 853, 885, 895, 1020, 1041], "max_no_improv": [42, 61, 64, 445, 533, 534, 535, 542, 1041, 1042], "t_mini_batch": [42, 64], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 58, 60, 61, 63, 64, 95, 319, 350, 436, 439, 443, 444, 445, 1019], "415": [42, 68, 321, 322], "plot_birch_vs_minibatchkmean": [42, 68], "cloud": [43, 85, 94, 101, 107, 166, 386, 410, 529, 537, 688, 985, 1004, 1005, 1019], "bisectingkmean": [43, 405, 1041, 1042, 1043], "__doc__": [43, 75, 156, 248, 392], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 62], "variant": [43, 95, 162, 165, 166, 260, 318, 319, 350, 351, 384, 405, 408, 410, 413, 415, 445, 456, 486, 489, 490, 508, 511, 539, 555, 556, 561, 611, 615, 618, 619, 623, 626, 634, 635, 637, 641, 668, 700, 795, 799, 801, 802, 803, 812, 819, 840, 858, 894, 975, 981, 982, 983, 984, 985, 987, 988, 999, 1006, 1020, 1027, 1035], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 378, 386, 832, 833, 834, 835, 836, 1030, 1035, 1043], "flat": [43, 95, 101, 170, 220, 221, 222, 258, 405, 413, 436, 442, 444, 457, 505, 992, 1019, 1027, 1028, 1043], "label_out": 43, "967": [43, 68, 74, 985, 989], "plot_bisect_kmean": [43, 68], "null": [44, 71, 169, 170, 171, 260, 266, 405, 409, 644, 665, 676, 700, 726, 752, 790, 822, 981, 982, 985, 1000, 1037], "mismatch": [44, 984, 1036], "warn": [44, 62, 72, 199, 214, 235, 263, 283, 300, 301, 309, 364, 367, 378, 381, 382, 383, 392, 399, 406, 413, 443, 445, 455, 492, 534, 536, 543, 546, 549, 550, 553, 554, 555, 556, 560, 561, 562, 567, 568, 569, 570, 571, 572, 574, 598, 632, 666, 686, 689, 690, 708, 709, 724, 725, 733, 778, 779, 782, 832, 833, 834, 836, 847, 861, 862, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 917, 918, 924, 934, 942, 951, 955, 971, 972, 974, 985, 995, 1018, 1027, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "noisy_circl": [44, 62], "noisy_moon": [44, 62], "no_structur": [44, 62], "anisotropicli": [44, 62], "170": [44, 57, 58, 62, 384], "x_aniso": [44, 57, 62], "aniso": [44, 62], "plot_num": [44, 62, 228], "default_bas": [44, 62], "quantil": [44, 53, 63, 91, 111, 113, 166, 177, 218, 305, 308, 309, 390, 412, 434, 435, 454, 515, 548, 556, 558, 653, 666, 718, 740, 743, 745, 820, 862, 874, 875, 876, 886, 887, 985, 995, 1007, 1022, 1027, 1031, 1034, 1036, 1040, 1041, 1043], "damp": [44, 405, 436, 450], "min_sampl": [44, 49, 65, 390, 392, 405, 416, 440, 442, 446, 452, 453, 667, 981, 1036, 1040], "xi": [44, 65, 375, 405, 408, 413, 446, 452, 505, 999, 1038], "min_cluster_s": [44, 65, 321, 405, 442, 446, 452, 1036], "allow_single_clust": [44, 442], "hdbscan_min_cluster_s": 44, "hdbscan_min_sampl": 44, "220": [44, 159, 161, 1027], "i_dataset": [44, 62, 228], "algo_param": [44, 62], "param": [44, 55, 61, 62, 71, 123, 125, 126, 220, 234, 235, 258, 260, 268, 272, 287, 300, 378, 380, 392, 396, 412, 415, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 806, 808, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 941, 942, 974, 1033, 1037, 1038, 1040, 1041, 1044], "estimate_bandwidth": [44, 63, 405, 444, 457], "symmetr": [44, 124, 172, 201, 392, 403, 405, 448, 458, 459, 470, 515, 523, 525, 686, 690, 691, 700, 701, 711, 712, 713, 719, 723, 731, 732, 750, 752, 758, 780, 790, 792, 793, 971, 974, 981, 985, 988, 1043], "meanshift": [44, 319, 405, 436, 1030, 1031, 1032, 1035, 1037, 1038, 1041, 1042, 1043], "bin_seed": [44, 63, 444, 457, 1038], "two_mean": 44, "spectralclust": [44, 319, 405, 436, 988, 1027, 1028, 1037, 1039, 1040, 1041, 1042, 1043], "nearest_neighbor": [44, 448, 687], "average_linkag": 44, "gmm": [44, 166, 244, 246, 249, 250, 251, 252, 500, 508, 793, 813, 984, 1027, 1028, 1031, 1032, 1033], "gaussianmixtur": [44, 57, 246, 247, 248, 249, 250, 251, 411, 792, 984, 1033, 1035, 1036, 1040, 1041, 1043], "covariance_typ": [44, 246, 247, 249, 250, 251, 792, 793, 1043], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 62, 301, 386, 387], "catch_warn": [44, 62, 235, 300, 301], "filterwarn": [44, 62, 214, 300, 301, 378, 995], "userwarn": [44, 62, 113, 160, 191, 208, 341, 355, 383, 708, 995, 1033, 1035, 1040], "fulli": [44, 55, 118, 124, 364, 372, 373, 392, 405, 411, 412, 414, 439, 443, 553, 554, 560, 561, 905, 906, 907, 908, 909, 911, 974, 975, 981, 990, 998, 1005, 1040, 1041], "t1": [44, 46, 62, 214, 222, 225, 228], "ff7f00": [44, 62, 228], "4daf4a": [44, 62], "a65628": [44, 62], "984ea3": [44, 62], "999999": [44, 62], "e41a1c": [44, 62], "dede00": [44, 62, 63], "000000": [44, 169, 188, 217, 260, 309, 732], "transax": [44, 62, 224, 228, 247, 291, 307], "plot_cluster_comparison": [44, 68], "bad": [45, 60, 61, 152, 169, 349, 360, 378, 405, 415, 688, 741, 974, 981, 982, 987, 993, 1019, 1027], "eight": [45, 1020], "deliv": [45, 364, 1009], "though": [45, 55, 117, 148, 175, 178, 238, 266, 288, 307, 309, 350, 351, 360, 364, 372, 375, 378, 380, 391, 392, 405, 410, 411, 412, 413, 414, 695, 801, 803, 897, 974, 975, 977, 982, 985, 988, 995, 999, 1020, 1035], "3d": [45, 48, 67, 90, 101, 102, 196, 220, 222, 224, 358, 413, 502, 582, 948, 1034, 1035, 1037], "mplot3d": [45, 67, 90, 101, 102, 170, 196, 220, 222], "noqa": [45, 67, 90, 101, 102, 124, 148, 163, 164, 170, 196, 220, 222, 271, 272, 317, 349, 382, 575, 576, 623, 797, 798, 974, 1036], "f401": [45, 67, 90, 101, 102, 170, 196, 220, 222], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 131, 169, 235, 237, 307, 317, 360, 399, 412, 558, 730, 862, 974, 985, 995, 999, 1038, 1039], "elev": [45, 67, 90, 101, 102, 170, 196, 220, 224], "azim": [45, 67, 90, 101, 102, 170, 196, 220, 224], "134": [45, 53, 102, 123, 260, 1030], "xaxi": [45, 90, 101, 102, 117, 196, 220, 222, 225, 283, 288, 349], "set_ticklabel": [45, 90, 101, 102, 196, 349], "zaxi": [45, 90, 101, 102, 196, 220], "petal": [45, 90, 104, 106, 120, 242, 317, 320, 375, 406, 910, 1001, 1017, 1018], "sepal": [45, 90, 104, 106, 120, 153, 182, 242, 286, 317, 320, 333, 375, 995, 1017, 1018], "length": [45, 70, 89, 90, 92, 104, 106, 120, 148, 151, 152, 153, 156, 157, 159, 175, 182, 235, 236, 239, 242, 286, 317, 320, 333, 351, 371, 375, 378, 386, 387, 392, 406, 410, 412, 413, 415, 441, 486, 504, 505, 508, 511, 519, 547, 559, 577, 578, 585, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 628, 642, 643, 646, 647, 648, 649, 650, 652, 653, 656, 657, 658, 659, 677, 680, 776, 794, 797, 798, 808, 823, 825, 828, 829, 831, 839, 840, 841, 843, 845, 884, 910, 917, 919, 923, 939, 940, 956, 959, 984, 991, 995, 1011, 1017, 1018, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1043], "set_zlabel": [45, 90, 196], "setosa": [45, 90, 102, 104, 269, 270, 375, 500, 1011, 1018], "versicolour": [45, 90, 102, 104, 375, 1018], "virginica": [45, 90, 102, 104, 269, 270, 375, 500, 985, 1018], "text3d": [45, 102], "291": [45, 68, 148, 373, 375], "plot_cluster_iri": [45, 68], "voxel": [46, 66, 581], "multipl": [46, 69, 76, 92, 105, 111, 117, 119, 120, 166, 169, 193, 233, 260, 272, 278, 285, 315, 321, 364, 365, 366, 372, 374, 375, 378, 380, 381, 382, 383, 390, 392, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 440, 456, 460, 462, 463, 465, 470, 484, 487, 488, 491, 492, 493, 499, 500, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 547, 549, 550, 551, 552, 555, 556, 557, 558, 559, 577, 595, 603, 604, 606, 607, 623, 628, 630, 635, 636, 637, 638, 642, 643, 646, 648, 649, 650, 653, 656, 657, 658, 659, 662, 663, 664, 667, 669, 672, 674, 675, 685, 686, 688, 689, 690, 717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 783, 785, 786, 788, 792, 793, 794, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 819, 820, 821, 823, 827, 828, 829, 830, 831, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 859, 862, 874, 878, 886, 889, 890, 897, 898, 899, 902, 913, 928, 933, 934, 956, 959, 977, 980, 981, 982, 986, 987, 988, 992, 993, 998, 999, 1001, 1005, 1006, 1011, 1020, 1027, 1028, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043], "partli": [46, 764], "procedur": [46, 56, 117, 124, 148, 179, 187, 250, 262, 308, 312, 336, 349, 360, 378, 380, 390, 391, 392, 393, 403, 404, 407, 409, 410, 412, 414, 527, 533, 534, 536, 541, 542, 543, 549, 550, 551, 552, 555, 556, 589, 591, 598, 605, 640, 668, 670, 683, 723, 780, 854, 855, 874, 886, 956, 974, 981, 987, 993, 995, 998, 999, 1000, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "solut": [46, 178, 183, 188, 190, 204, 213, 228, 234, 318, 336, 376, 380, 392, 402, 405, 407, 409, 410, 413, 414, 445, 447, 449, 527, 533, 534, 535, 536, 538, 539, 541, 542, 543, 544, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 606, 642, 644, 646, 648, 650, 651, 652, 654, 656, 658, 660, 661, 662, 663, 664, 665, 668, 670, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 792, 793, 808, 846, 854, 855, 978, 979, 981, 982, 984, 989, 991, 999, 1000, 1004, 1009, 1015, 1018, 1020, 1027, 1030, 1040, 1041, 1042], "closest": [46, 64, 203, 380, 405, 436, 438, 439, 443, 444, 445, 455, 649, 774, 775, 827, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 976, 979, 986, 988, 1018], "partit": [46, 66, 70, 127, 129, 260, 301, 392, 402, 403, 405, 409, 412, 445, 447, 449, 458, 507, 553, 554, 555, 556, 559, 560, 561, 700, 701, 711, 781, 845, 905, 906, 907, 908, 984, 988, 991, 995, 1001, 1020], "cluster_qr": [46, 405, 448, 458, 1041], "qr": [46, 201, 401, 530, 537, 540, 933, 934, 982, 1033, 1044], "pivot": [46, 271, 272], "cheung": [46, 1028], "andrew": [46, 405, 458, 687, 691, 713, 732, 790, 872, 989, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "knyazev": [46, 405, 448, 458, 691, 1037, 1040, 1041], "ucdenv": 46, "skimag": [46, 47, 372, 1019], "spectral_clust": [46, 66, 1035, 1037, 1039, 1040, 1041, 1042], "orig_coin": [46, 47], "speed": [46, 47, 57, 70, 98, 109, 117, 164, 170, 185, 188, 192, 283, 317, 325, 349, 351, 366, 367, 378, 381, 387, 390, 392, 401, 403, 405, 410, 412, 413, 416, 439, 440, 443, 444, 445, 446, 448, 453, 455, 456, 457, 458, 527, 528, 606, 623, 628, 629, 630, 635, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 660, 677, 680, 688, 792, 793, 800, 821, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 872, 934, 974, 982, 984, 986, 999, 1009, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "down": [46, 47, 81, 111, 214, 215, 222, 232, 233, 235, 263, 278, 302, 305, 340, 360, 372, 381, 386, 407, 410, 439, 446, 452, 586, 589, 590, 635, 645, 769, 773, 776, 866, 867, 872, 875, 876, 887, 899, 902, 909, 981, 1011, 1019, 1035], "alias": [46, 47, 235, 376, 378, 381, 396, 443, 455, 593, 1027, 1031, 1041], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 1019], "anti_alias": [46, 47, 1019], "img_to_graph": [46, 66, 413, 1030, 1040], "exponenti": [46, 75, 151, 156, 288, 293, 411, 412, 415, 445, 532, 550, 555, 610, 615, 618, 635, 639, 753, 754, 837, 838, 842, 854, 855, 872, 977, 981, 985, 1000, 1018, 1034, 1040], "beta": [46, 85, 168, 203, 384, 403, 405, 408, 532, 534, 536, 543, 640, 724, 725, 731, 737, 778, 790, 792, 985, 1018, 1029, 1032, 1034, 1036, 1037], "voronoi": [46, 66, 405], "n_region": 46, "extra": [46, 120, 237, 283, 351, 376, 377, 379, 382, 392, 412, 413, 434, 439, 443, 455, 460, 528, 553, 554, 562, 586, 587, 696, 697, 698, 818, 841, 907, 908, 924, 984, 985, 988, 1027, 1030, 1032, 1033, 1035, 1040, 1042], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 448, 458, 684, 687, 691, 1037, 1040, 1041, 1042], "amg": [46, 66, 405, 448, 458, 687, 691, 1037, 1041, 1042], "pyamg": [46, 395, 398, 405, 448, 458, 687, 691], "toler": [46, 73, 163, 190, 192, 215, 216, 340, 351, 373, 380, 387, 405, 417, 439, 443, 448, 455, 458, 467, 468, 474, 478, 479, 480, 527, 528, 529, 531, 532, 536, 537, 538, 539, 540, 541, 543, 544, 555, 556, 557, 558, 623, 642, 643, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 672, 674, 675, 677, 678, 679, 680, 684, 685, 686, 687, 689, 690, 691, 837, 838, 842, 846, 854, 855, 892, 893, 897, 898, 899, 900, 901, 902, 903, 971, 981, 985, 999, 1000, 1016, 1039, 1040, 1041, 1042], "eigen_tol": [46, 448, 458, 687, 691, 1028, 1041, 1042], "todo": [46, 232, 382, 386, 392, 405, 1044], "21243": 46, "assign_label": [46, 405, 448, 458], "individu": [46, 60, 80, 110, 114, 131, 135, 143, 160, 166, 167, 172, 173, 199, 217, 229, 238, 263, 265, 315, 340, 344, 365, 379, 382, 385, 387, 392, 394, 402, 406, 409, 412, 413, 433, 448, 458, 460, 492, 497, 499, 505, 551, 552, 555, 556, 558, 559, 561, 563, 564, 565, 566, 599, 605, 606, 628, 629, 639, 641, 653, 654, 655, 664, 667, 668, 669, 670, 671, 672, 673, 674, 683, 708, 715, 723, 729, 745, 746, 780, 785, 786, 794, 808, 825, 829, 830, 832, 833, 834, 835, 836, 855, 858, 866, 867, 869, 870, 871, 874, 876, 877, 882, 883, 884, 897, 898, 985, 986, 995, 1000, 1015, 1020, 1022, 1028, 1031, 1033, 1039, 1041, 1043], "comment": [46, 349, 376, 377, 378, 379, 381, 382, 386, 483, 575, 985], "paus": 46, "21194": [46, 1040], "58": [46, 66, 79, 375, 407, 418, 471, 759, 995, 1016], "929": [46, 68, 115, 135], "plot_coin_segment": [46, 68], "spatial": [47, 49, 55, 172, 183, 216, 301, 373, 392, 405, 416, 440, 442, 446, 448, 453, 675, 688, 755, 758, 773, 774, 775, 776, 787, 788, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 981, 988, 995, 1029, 1033, 1040, 1043], "constrain": [47, 95, 121, 128, 170, 190, 299, 316, 334, 336, 371, 392, 404, 405, 410, 412, 505, 557, 558, 631, 654, 655, 686, 690, 822, 981, 984, 1031], "grid_to_graph": [47, 51, 54, 405, 413, 1019, 1040], "st": [47, 67, 260, 320, 1030, 1033, 1035], "151": [47, 172, 173, 231, 241, 243, 320, 384, 412, 997], "4697": 47, "316": [47, 68, 156, 160, 607, 610, 621, 873], "plot_coin_ward_segment": [47, 68], "vq": [48, 58], "palac": 48, "china": [48, 405, 502, 503, 580], "615": 48, "literatur": [48, 156, 260, 278, 350, 375, 378, 384, 386, 390, 391, 405, 408, 410, 412, 439, 443, 445, 497, 532, 534, 536, 543, 551, 552, 584, 587, 704, 792, 974, 977, 981, 985, 1037], "codebook": [48, 278, 562, 827], "palett": [48, 169, 260], "byte": [48, 53, 413, 483, 499, 504, 505, 578, 584, 585, 587, 950, 1018, 1020, 1027, 1034, 1035, 1042], "rgb": [48, 373, 413, 489, 490, 579, 580, 583], "gif": 48, "pick": [48, 55, 60, 172, 236, 268, 319, 324, 373, 378, 382, 405, 412, 439, 456, 519, 669, 907, 908, 974, 981, 982, 984, 999, 1038], "017": [48, 384, 467, 468], "040": [48, 58], "robertlayton": 48, "load_sample_imag": [48, 579, 580, 1036], "pairwise_distances_argmin": [48, 64, 319, 775, 1035, 1041, 1042, 1043], "n_color": 48, "photo": 48, "jpg": [48, 502, 580], "255": [48, 98, 283, 301, 311, 318, 373, 489, 490, 557, 558], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 239], "book": [48, 70, 439, 443, 445, 827, 832, 836, 981, 982, 983, 986, 1003, 1039], "alongsid": [48, 378, 384, 392, 395, 414, 818, 819, 820, 985, 992, 1005, 1006], "513": [48, 68, 846, 988], "plot_color_quant": [48, 68], "750": [49, 55, 119, 260], "math": [49, 70, 148, 238, 260, 261, 375, 395, 759], "db": [49, 55, 405], "n_noise_": 49, "come": [49, 67, 70, 80, 86, 100, 101, 148, 151, 233, 315, 349, 350, 364, 366, 371, 375, 378, 379, 382, 386, 390, 392, 395, 405, 409, 412, 413, 435, 446, 452, 468, 546, 701, 790, 815, 899, 902, 974, 975, 979, 982, 984, 988, 991, 1000, 1011, 1027, 1038, 1041, 1043], "handi": [49, 71, 350, 351, 379, 1043], "883": 49, "917": 49, "916": 49, "626": [49, 185], "unique_label": [49, 55, 350, 380, 387], "core_samples_mask": 49, "zeros_lik": [49, 201, 269], "bool": [49, 66, 81, 164, 217, 358, 378, 417, 418, 419, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 504, 505, 506, 507, 508, 509, 510, 511, 515, 518, 519, 520, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 696, 698, 699, 703, 704, 705, 707, 708, 709, 710, 721, 722, 723, 724, 725, 726, 733, 736, 737, 745, 746, 749, 751, 756, 758, 762, 763, 764, 769, 773, 777, 778, 779, 780, 782, 784, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 808, 812, 813, 816, 817, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 916, 917, 918, 928, 934, 935, 947, 950, 956, 958, 966, 971, 972, 973, 975, 1036, 1039, 1040], "core_sample_indices_": [49, 440], "class_member_mask": 49, "markerfacecolor": [49, 55, 61, 63, 64], "markeredgecolor": [49, 55, 61, 63, 64], "markers": [49, 55, 58, 61, 63, 64, 124, 154, 158, 231, 319], "159": [49, 53, 68, 373, 1027], "plot_dbscan": [49, 68, 416, 440], "constitut": [50, 392, 409, 412, 446, 452, 584, 585, 587, 989], "standpoint": 50, "proce": [50, 145, 180, 376, 382, 408, 409, 412, 436, 981], "reassign": [50, 378, 443, 445, 1028, 1032], "success": [50, 166, 253, 267, 276, 360, 400, 405, 409, 410, 412, 511, 560, 575, 794, 797, 798, 815, 902, 988, 1009, 1015, 1019, 1022, 1039], "becom": [50, 55, 57, 72, 80, 201, 203, 235, 238, 262, 283, 306, 310, 336, 340, 349, 360, 372, 378, 380, 382, 386, 392, 393, 405, 407, 412, 413, 415, 436, 446, 450, 451, 453, 549, 577, 584, 585, 587, 615, 623, 654, 655, 672, 674, 871, 897, 898, 904, 980, 981, 982, 984, 988, 995, 1000, 1018, 1020, 1028, 1035, 1036, 1039, 1040, 1041, 1042], "fetch_olivetti_fac": [50, 95, 119, 237, 373, 1035, 1036, 1037], "extract_patches_2d": [50, 98, 413, 1035], "patch_siz": [50, 98, 413, 579, 580], "buffer": [50, 1040], "max_patch": [50, 413, 579, 580, 1035], "4i": 50, "dt": [50, 98, 132, 412, 413, 1001], "2400": 50, "700": [50, 317], "800": [50, 122, 199, 218, 318, 373, 580, 688], "1100": 50, "1200": [50, 123, 305, 412], "1300": 50, "1400": [50, 470], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 318], "2200": [50, 373, 489], "2300": [50, 188], "ntrain": 50, "plot_dict_face_patch": [50, 68], "agglo": [51, 441, 1019], "featureagglomer": [51, 54, 436, 437, 1002, 1019, 1030, 1036, 1037, 1040, 1041, 1043], "x_reduc": [51, 90, 129, 441, 1019], "x_restor": 51, "images_restor": 51, "135": [51, 68, 148, 320, 375], "plot_digits_agglomer": [51, 68], "rich": [52, 386, 390, 405, 435, 1009, 1038, 1041], "richer": [52, 105, 405], "uneven": [52, 255, 405, 409], "patholog": [52, 984, 1033], "clean": [52, 71, 198, 360, 370, 376, 411, 991, 995, 1037], "fring": [52, 405], "sensibl": [52, 163, 278, 350, 380, 981, 995], "resampl": [52, 124, 156, 169, 217, 287, 387, 390, 392, 551, 552, 959, 1006, 1036, 1040], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 220, 221, 222, 684, 685, 686, 688, 982, 1028, 1033, 1037, 1041, 1042], "plot_digits_linkag": [52, 68], "raccoon": [53, 98, 410], "addition": [53, 72, 113, 169, 199, 217, 235, 316, 318, 350, 378, 390, 403, 413, 606, 607, 642, 648, 667, 874, 974, 975, 985, 993, 1005, 1033, 1044], "adapt": [53, 55, 111, 123, 124, 154, 245, 246, 307, 340, 365, 376, 377, 378, 387, 405, 412, 415, 511, 512, 513, 514, 672, 673, 674, 854, 855, 981, 987, 989, 995, 999, 1005, 1006, 1035, 1036, 1043, 1044], "pooch": [53, 378, 395, 398], "instal": [53, 242, 283, 315, 316, 317, 318, 319, 320, 321, 364, 365, 367, 378, 379, 381, 382, 384, 386, 390, 391, 398, 401, 405, 413, 448, 458, 492, 687, 691, 1001, 1003, 1020, 1034, 1035, 1036, 1040, 1041], "raccoon_fac": [53, 98], "nbyte": [53, 232], "768": 53, "1024": [53, 105, 445, 464, 534, 895, 1040], "uint8": [53, 98, 372, 493, 502, 503, 1039], "786432": 53, "unsign": [53, 99, 373, 578, 950], "786": [53, 71], "kilobyt": 53, "behind": [53, 80, 111, 278, 380, 382, 386, 404, 407, 412, 984, 988, 997, 1043], "simplest": [53, 409, 982, 985, 1018, 1019], "certainli": [53, 70, 350], "subsampl": [53, 105, 123, 126, 170, 199, 216, 217, 256, 308, 312, 317, 454, 555, 556, 557, 558, 559, 628, 675, 697, 797, 798, 823, 862, 874, 886, 913, 923, 977, 981, 1006, 1008, 1027, 1037, 1041, 1043], "200_000": [53, 308, 862, 1043], "compressed_raccoon_uniform": 53, "spot": [53, 230, 405], "leav": [53, 111, 116, 125, 170, 172, 217, 267, 310, 358, 360, 364, 375, 377, 383, 392, 405, 412, 437, 438, 441, 442, 459, 499, 553, 554, 555, 556, 557, 558, 560, 561, 562, 669, 671, 796, 801, 802, 803, 804, 812, 813, 837, 838, 886, 905, 906, 907, 908, 974, 982, 988, 992, 1001, 1015, 1018, 1027, 1034, 1036, 1038, 1039, 1043], "bin_edg": 53, "bin_edges_": [53, 306, 862], "bin_cent": [53, 199], "625": [53, 199, 704], "875": [53, 152, 292, 297, 665], "375": [53, 445, 745, 985], "140": [53, 412, 506, 512, 513, 514, 551, 552, 986], "171": [53, 148, 375, 384, 783, 985], "203": 53, "234": [53, 832, 836, 854, 855, 987], "axvlin": [53, 60, 73, 82, 103, 123, 133, 169, 171, 172, 188, 266, 344, 1016], "get_ybound": 53, "state": [53, 57, 70, 72, 80, 201, 232, 240, 246, 266, 317, 360, 365, 366, 378, 380, 384, 386, 390, 392, 393, 404, 413, 418, 436, 439, 443, 445, 450, 455, 471, 540, 585, 675, 797, 798, 806, 808, 810, 837, 838, 844, 892, 893, 920, 974, 975, 981, 987, 990, 997, 1005, 1006, 1009, 1029, 1031, 1033, 1035, 1037, 1040, 1043], "compressed_raccoon_kmean": 53, "90885631": 53, "34346583": 53, "64447187": 53, "28225276": 53, "70763101": 53, "78681467": 53, "185": [53, 148, 160, 270, 276, 293, 297, 375, 384, 854, 855], "17226834": 53, "224": [53, 85, 129, 405, 720], "02069427": 53, "save": [53, 70, 72, 238, 302, 377, 378, 382, 384, 385, 386, 392, 399, 409, 417, 464, 530, 531, 623, 837, 838, 895, 981, 985, 995, 1001, 1009, 1020, 1027, 1030, 1034, 1037], "verifi": [53, 60, 109, 169, 199, 378, 383, 401, 969, 988], "6291456": 53, "surpris": [53, 170, 981, 1005, 1029], "x8": 53, "ndarrai": [53, 58, 90, 199, 242, 258, 259, 260, 378, 379, 380, 384, 385, 401, 413, 416, 417, 420, 421, 423, 426, 427, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 493, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 696, 697, 698, 711, 714, 717, 718, 719, 722, 723, 733, 740, 741, 743, 745, 746, 748, 749, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 784, 785, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 915, 916, 917, 922, 923, 933, 934, 935, 936, 940, 947, 949, 950, 954, 957, 958, 960, 961, 962, 963, 966, 971, 972, 985, 1000, 1006, 1030, 1034, 1037, 1038, 1041, 1042, 1043, 1044], "practic": [53, 71, 80, 86, 98, 117, 121, 151, 168, 169, 175, 183, 201, 228, 234, 261, 268, 289, 290, 317, 336, 340, 365, 367, 378, 380, 381, 384, 386, 391, 392, 405, 407, 409, 410, 411, 412, 413, 415, 443, 448, 458, 517, 520, 585, 628, 629, 666, 792, 836, 890, 897, 974, 975, 979, 981, 984, 985, 986, 987, 988, 991, 992, 995, 1005, 1006, 1007, 1009, 1011, 1020, 1021, 1022, 1029, 1033, 1035, 1037, 1039], "gain": [53, 222, 267, 283, 285, 325, 349, 350, 358, 377, 384, 386, 390, 412, 528, 553, 557, 558, 560, 721, 751, 792, 793, 826, 905, 907, 986, 990, 998, 1001, 1030, 1034, 1037], "206": [53, 68, 333, 347], "plot_face_compress": [53, 68], "anova": [54, 142, 149, 166, 331, 347, 406, 500, 511, 588, 591, 592, 594, 595, 596, 600, 601, 602, 605, 709, 819, 823, 857, 858, 877, 897, 902, 1000], "bayesianridg": [54, 163, 178, 179, 183, 317, 623, 640, 981, 1034, 1035, 1036, 1037, 1040, 1041, 1043], "shutil": [54, 72, 406], "tempfil": [54, 285, 315, 406, 988], "feature_select": [54, 71, 72, 74, 142, 143, 144, 145, 146, 147, 148, 166, 242, 317, 319, 339, 360, 367, 392, 396, 406, 414, 577, 974, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "kfold": [54, 117, 123, 137, 255, 265, 360, 409, 433, 468, 563, 564, 590, 598, 643, 647, 649, 651, 657, 659, 661, 669, 794, 797, 798, 800, 802, 804, 808, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 878, 1015, 1028, 1029, 1030, 1032, 1033, 1035, 1037], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 78, 271, 1005], "cachedir": [54, 72, 387, 406], "mkdtemp": [54, 406], "mem": [54, 384, 504], "n_x": [54, 581], "n_y": [54, 581, 987, 995], "parcel": [54, 67, 405], "ward__n_clust": 54, "n_job": [54, 72, 73, 117, 118, 119, 124, 125, 131, 138, 147, 148, 163, 169, 170, 171, 172, 221, 223, 240, 259, 261, 262, 264, 275, 278, 283, 315, 316, 317, 320, 344, 365, 378, 392, 412, 416, 433, 440, 442, 444, 446, 448, 453, 454, 457, 460, 463, 468, 527, 531, 532, 533, 535, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 590, 598, 606, 628, 630, 635, 643, 647, 649, 651, 653, 654, 655, 657, 659, 661, 662, 664, 672, 675, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 856, 859, 892, 893, 951, 953, 974, 985, 986, 988, 1015, 1016, 1020, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 437, 441, 1027, 1031], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 114, 115, 126, 230, 254, 259, 267, 269, 316, 350, 354, 358, 367, 375, 377, 378, 380, 387, 393, 402, 404, 405, 409, 410, 412, 413, 416, 440, 442, 448, 460, 483, 504, 508, 510, 516, 518, 522, 523, 527, 533, 534, 536, 546, 553, 554, 555, 556, 560, 561, 562, 563, 564, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 613, 628, 654, 655, 662, 663, 664, 672, 673, 674, 703, 713, 722, 729, 731, 741, 758, 764, 773, 777, 783, 784, 827, 837, 838, 839, 840, 841, 843, 845, 847, 848, 852, 854, 855, 860, 876, 877, 880, 884, 897, 902, 905, 906, 907, 908, 936, 937, 938, 956, 958, 959, 979, 981, 985, 986, 989, 992, 995, 996, 997, 1001, 1009, 1011, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1043], "return_dist": [54, 459, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 988, 1031], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 143, 414, 588, 591, 592, 594, 595, 596, 600, 601, 605, 1030, 1034, 1041, 1044], "cach": [54, 166, 261, 283, 284, 297, 364, 365, 373, 392, 437, 441, 446, 464, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 504, 794, 839, 841, 857, 858, 895, 899, 900, 901, 902, 903, 970, 988, 1000, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043], "selectpercentil": [54, 71, 242, 339, 414, 588, 591, 592, 594, 595, 599, 602, 1028, 1033, 1043], "percentag": [54, 104, 121, 190, 217, 255, 263, 266, 409, 414, 530, 537, 540, 545, 589, 590, 644, 665, 676, 699, 729, 741, 812, 813, 814, 827, 909, 911, 986, 1001, 1029, 1033, 1039, 1040], "anova__percentil": [54, 339], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 146, 148, 149, 373, 375, 1029], "638768": 54, "rdbu_r": [54, 82, 106, 336], "temporari": [54, 70, 72, 364, 464, 683, 776, 895, 988, 1030, 1031, 1034, 1040, 1041], "worri": [54, 982, 1012], "rmtree": [54, 72, 406], "ignore_error": 54, "502": [54, 68], "plot_feature_agglomeration_vs_univariate_select": [54, 68], "perspect": [55, 60, 199, 364, 373, 390, 393, 526, 639, 897, 978], "certain": [55, 169, 204, 216, 235, 260, 283, 309, 340, 360, 373, 374, 376, 382, 392, 394, 405, 410, 414, 634, 645, 649, 654, 659, 680, 857, 862, 897, 974, 977, 981, 982, 985, 986, 989, 995, 1000, 1005, 1011, 1015, 1032, 1036, 1039, 1042], "conveni": [55, 203, 238, 370, 386, 390, 406, 409, 413, 415, 420, 439, 443, 445, 447, 449, 460, 485, 607, 672, 674, 695, 723, 780, 856, 857, 959, 975, 977, 981, 982, 992, 1009, 1020, 1027], "ground_truth": [55, 290], "proba_map": 55, "class_index": 55, "ci": [55, 365, 381, 382, 386, 987, 1033, 1035], "preambl": 55, "parameters_str": 55, "greatest": [55, 395, 405, 864, 1035], "remark": [55, 86, 148, 366, 378, 995], "unlik": [55, 56, 117, 169, 170, 220, 222, 250, 305, 334, 378, 380, 384, 390, 392, 396, 407, 409, 410, 413, 442, 446, 531, 646, 647, 650, 651, 652, 678, 679, 780, 815, 837, 838, 877, 888, 900, 981, 984, 985, 992, 1000, 1027, 1033], "bi": [55, 413], "worth": [55, 120, 170, 199, 378, 386, 1009], "rememb": [55, 380, 383, 395, 413, 988, 992, 1001], "hardli": [55, 603, 604], "proper": [55, 188, 217, 366, 384, 403, 412, 445, 537, 549, 672, 934, 960, 980, 981, 982, 985, 1000, 1027, 1037, 1038, 1039, 1040, 1041, 1042], "must": [55, 169, 170, 172, 180, 183, 216, 217, 228, 239, 255, 289, 306, 311, 349, 360, 373, 377, 378, 379, 380, 382, 384, 386, 392, 393, 396, 401, 403, 405, 406, 409, 410, 412, 413, 414, 415, 416, 426, 434, 437, 440, 441, 442, 443, 445, 446, 447, 451, 453, 455, 457, 458, 460, 462, 463, 465, 470, 483, 504, 505, 508, 519, 527, 533, 534, 535, 536, 537, 539, 540, 543, 549, 550, 555, 556, 557, 558, 563, 564, 577, 578, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 606, 607, 613, 616, 623, 624, 625, 626, 628, 629, 634, 638, 639, 644, 645, 648, 654, 655, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 695, 699, 702, 705, 730, 741, 759, 766, 769, 773, 776, 783, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 801, 803, 804, 806, 808, 809, 810, 812, 813, 815, 818, 821, 823, 824, 832, 833, 834, 835, 836, 839, 840, 841, 843, 845, 846, 847, 848, 849, 852, 853, 854, 855, 857, 860, 861, 862, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 897, 898, 899, 900, 901, 902, 903, 904, 910, 953, 960, 969, 971, 974, 975, 981, 982, 983, 985, 988, 989, 991, 992, 999, 1000, 1001, 1011, 1020, 1027, 1030, 1034, 1038, 1040, 1041], "maintain": [55, 204, 217, 220, 235, 260, 365, 367, 377, 381, 384, 385, 386, 390, 392, 395, 405, 412, 436, 438, 866, 867, 873, 874, 877, 882, 885, 886, 888, 981, 982, 995, 1005, 1006, 1011, 1022, 1042], "mitig": [55, 171, 312, 365, 366, 982, 1001, 1018, 1019, 1039], "great": [55, 168, 169, 197, 360, 378, 390, 410, 759, 1006, 1009, 1027, 1034], "appropri": [55, 57, 103, 156, 169, 203, 235, 269, 354, 360, 376, 378, 380, 386, 392, 404, 405, 409, 411, 412, 416, 440, 446, 453, 485, 486, 487, 492, 496, 497, 498, 500, 501, 506, 573, 578, 587, 588, 591, 592, 594, 595, 596, 668, 670, 683, 705, 839, 840, 841, 843, 845, 847, 848, 849, 969, 981, 984, 985, 995, 1031, 1034, 1040, 1043], "immedi": [55, 378, 390, 794, 808, 818, 819, 1035], "hdb": [55, 442], "probabilities_": [55, 442], "capabl": [55, 56, 86, 156, 203, 224, 380, 392, 395, 986, 989, 1000, 1001, 1009, 1027, 1036, 1044], "constraint": [55, 57, 67, 95, 110, 135, 166, 194, 203, 238, 255, 300, 301, 302, 316, 378, 390, 410, 413, 483, 504, 505, 553, 554, 557, 558, 560, 561, 628, 631, 812, 813, 905, 906, 907, 908, 954, 974, 976, 981, 982, 999, 1031, 1034, 1035, 1038, 1040, 1042, 1044], "reachabl": [55, 65, 442, 446, 451, 452, 453, 843, 939], "extend": [55, 56, 67, 109, 200, 249, 267, 336, 375, 376, 390, 392, 403, 404, 405, 410, 412, 627, 716, 826, 829, 830, 862, 864, 881, 897, 898, 912, 977, 985, 986, 1000, 1006, 1007, 1022, 1032, 1033, 1034, 1035, 1037, 1042], "fragment": [55, 98], "sparser": [55, 178, 190, 410, 467, 474, 535, 539, 981, 988, 999], "Not": [55, 137, 170, 364, 390, 405, 423, 424, 427, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 465, 466, 467, 468, 469, 470, 471, 472, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 559, 562, 565, 566, 577, 578, 579, 584, 585, 587, 623, 624, 625, 626, 673, 684, 685, 686, 687, 689, 763, 789, 792, 793, 794, 797, 798, 808, 834, 837, 838, 841, 842, 843, 845, 849, 861, 869, 872, 873, 875, 878, 889, 890, 901, 985, 991, 1005, 1036], "mention": [55, 86, 111, 217, 316, 360, 364, 378, 382, 383, 390, 392, 405, 692, 889, 890, 974, 979, 981, 1006, 1009, 1020, 1034, 1035, 1036], "until": [55, 122, 148, 207, 272, 317, 319, 383, 392, 393, 402, 405, 409, 414, 504, 505, 553, 554, 555, 556, 560, 561, 562, 589, 642, 643, 648, 649, 654, 655, 656, 657, 658, 659, 662, 663, 664, 667, 672, 673, 674, 690, 792, 793, 797, 798, 854, 855, 894, 897, 905, 906, 907, 908, 960, 974, 981, 982, 990, 998, 1001, 1020, 1030, 1034, 1035, 1041], "tradeoff": [55, 114, 166, 233, 253, 267, 268, 276, 349, 364, 378, 386, 411, 511, 560, 694, 698, 722, 784, 823, 858, 877, 897, 982, 1018, 1036, 1039], "comfort": [55, 412], "epsilon": [55, 65, 181, 223, 234, 321, 343, 410, 442, 451, 639, 645, 663, 672, 674, 741, 854, 855, 898, 900, 903, 978, 981, 985, 989, 999, 1000, 1018, 1027], "incap": 55, "suffici": [55, 122, 131, 207, 274, 336, 364, 392, 405, 414, 528, 542, 653, 678, 679, 813, 814, 986, 988, 1006, 1036, 1042, 1043], "intervent": 55, "inaccess": 55, "ultim": [55, 224, 379], "world": [55, 70, 74, 169, 203, 224, 238, 349, 364, 367, 371, 375, 405, 410, 413, 975, 985, 987, 1004, 1006, 1009, 1014, 1022, 1027], "whose": [55, 79, 80, 81, 148, 156, 199, 334, 373, 386, 387, 392, 403, 405, 407, 412, 414, 415, 418, 433, 434, 435, 444, 457, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 511, 530, 534, 536, 537, 540, 543, 545, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 636, 667, 691, 714, 794, 801, 808, 822, 843, 862, 889, 890, 933, 964, 965, 979, 986, 990, 991, 992, 1000, 1030, 1035, 1036, 1038, 1041], "respect": [55, 67, 90, 100, 111, 115, 117, 120, 128, 159, 175, 178, 183, 188, 201, 213, 216, 220, 222, 229, 232, 234, 238, 250, 269, 289, 290, 302, 310, 319, 333, 340, 364, 365, 373, 374, 378, 403, 405, 408, 410, 412, 413, 415, 442, 460, 463, 466, 467, 468, 469, 470, 471, 472, 530, 536, 537, 543, 549, 557, 558, 593, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 632, 639, 667, 686, 690, 708, 723, 777, 780, 792, 793, 833, 843, 854, 855, 909, 911, 974, 978, 979, 981, 982, 985, 988, 989, 990, 991, 995, 1000, 1005, 1009, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "neighborhood": [55, 82, 166, 220, 284, 286, 297, 375, 392, 405, 410, 416, 440, 442, 446, 453, 498, 500, 511, 537, 545, 624, 627, 692, 823, 839, 840, 843, 845, 846, 847, 848, 849, 851, 857, 858, 877, 982, 991, 1007, 1022, 1036], "recomput": [55, 56, 239, 241, 285, 315, 465, 470, 981, 997, 1032, 1043], "span": [55, 78, 124, 233, 257, 373, 405, 413, 545, 632, 794, 797, 985, 1019], "cut_dist": [55, 442], "plot_hdbscan": [55, 68], "intract": [56, 410, 982, 990], "inferenti": 56, "meta": [56, 70, 110, 134, 135, 166, 199, 235, 269, 277, 279, 321, 360, 372, 376, 380, 382, 390, 392, 396, 401, 403, 414, 415, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 492, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 571, 577, 578, 584, 586, 587, 590, 593, 599, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 794, 795, 796, 801, 803, 810, 812, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 945, 974, 986, 1006, 1007, 1022, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1044], "chirag": 56, "nagpal": 56, "christo": [56, 1036, 1037, 1039, 1041], "arida": [56, 1036, 1037, 1039, 1041], "baseestim": [56, 109, 235, 283, 378, 391, 392, 415, 429, 628, 629, 926, 1027, 1034, 1037, 1039, 1041, 1042], "clone": [56, 124, 159, 170, 235, 302, 360, 376, 378, 381, 382, 384, 386, 392, 403, 406, 415, 433, 461, 565, 566, 593, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 800, 816, 821, 824, 828, 831, 857, 858, 894, 1006, 1027, 1033, 1035, 1039, 1043, 1044], "metaestim": [56, 380, 392, 404, 894, 1031, 1040, 1041], "available_if": [56, 392, 1040, 1041], "check_is_fit": [56, 109, 235, 381, 387, 392, 1037, 1040, 1041], "5000": [56, 185, 214, 215, 217, 317, 878], "_classifier_ha": 56, "deleg": [56, 384, 430, 910, 1031, 1033, 1039], "unfit": [56, 406, 430, 460, 565, 566, 598, 607, 1035, 1037, 1044], "classifier_": [56, 235], "inductivecluster": 56, "clusterer_": 56, "plot_scatt": 56, "cluster_label": [56, 60], "x_new": [56, 406, 410, 414, 429, 438, 439, 441, 443, 445, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 545, 563, 565, 566, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 624, 626, 631, 634, 635, 636, 637, 638, 684, 685, 686, 687, 688, 846, 853, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 889, 890, 997, 1011], "y_new": 56, "declar": [56, 221, 235, 360, 378, 379, 380, 384, 392, 439, 442, 443, 455, 467, 468, 474, 686, 690, 1034, 1038], "membership": [56, 393, 402, 404, 405, 507, 508, 509, 510, 511, 515, 518, 1000], "inductive_learn": 56, "probable_clust": 56, "113": [56, 68, 278, 384, 1030], "plot_inductive_clust": [56, 68], "meant": [57, 148, 238, 373, 380, 387, 470, 489, 673, 843, 951, 952, 975, 989, 991, 995, 1028], "unintuit": 57, "possibli": [57, 86, 148, 199, 214, 340, 350, 375, 377, 386, 399, 405, 412, 413, 447, 449, 585, 832, 833, 834, 835, 836, 902, 903, 905, 906, 907, 908, 974, 977, 982, 988, 995, 1042], "undesir": [57, 152, 415], "phil": [57, 1032, 1043], "roth": [57, 1032, 1035, 1042], "mr": [57, 320, 1028, 1031, 1041], "anisotrop": [57, 153, 415, 613, 615, 618], "ellipt": [57, 981], "60834549": 57, "63667341": 57, "40887718": 57, "85253229": 57, "x_vari": 57, "y_vari": 57, "unequ": [57, 1035], "x_filter": 57, "unevenli": [57, 199, 255], "y_filter": 57, "set_i": 57, "scenario": [57, 70, 151, 175, 203, 263, 360, 385, 395, 409, 412, 533, 539, 541, 542, 979, 985, 995, 1037], "criteria": [57, 117, 166, 177, 188, 207, 218, 250, 260, 386, 405, 414, 462, 478, 479, 480, 497, 553, 554, 555, 556, 560, 561, 642, 648, 652, 654, 655, 667, 688, 858, 877, 897, 898, 905, 906, 907, 908, 975, 984, 989, 999, 1019, 1030, 1035, 1038], "knowledg": [57, 119, 169, 216, 238, 260, 367, 373, 378, 381, 384, 391, 392, 405, 409, 412, 416, 440, 507, 551, 552, 559, 716, 731, 735, 778, 826, 985, 986, 997, 1020], "consequ": [57, 103, 217, 260, 261, 305, 333, 360, 410, 412, 557, 558, 562, 651, 652, 975, 981, 985, 1001, 1036, 1038, 1043], "likelihood": [57, 77, 79, 80, 81, 83, 103, 151, 152, 153, 155, 156, 157, 158, 160, 166, 187, 217, 249, 253, 260, 266, 276, 302, 305, 380, 392, 403, 407, 410, 412, 415, 433, 465, 466, 467, 468, 469, 470, 471, 472, 473, 511, 528, 532, 537, 545, 546, 547, 606, 607, 627, 641, 654, 708, 736, 792, 793, 794, 820, 823, 842, 853, 873, 885, 899, 900, 902, 903, 981, 984, 987, 995, 1000, 1030, 1031, 1036, 1042], "inertia": [57, 58, 61, 350, 405, 439, 443, 445, 448, 455, 456, 458, 459, 1038], "common_param": [57, 124, 170, 234, 262, 263, 340], "unexpect": [57, 235, 360, 378, 383, 386, 399, 531, 692, 985, 1000, 1029, 1035, 1036, 1039, 1041, 1043], "suffic": [57, 58, 380, 1020], "propos": [57, 78, 79, 283, 373, 378, 380, 390, 392, 405, 407, 412, 417, 418, 446, 471, 531, 603, 604, 672, 673, 674, 854, 855, 981, 984, 988, 999, 1003, 1034], "inflat": [57, 168, 169, 171, 405, 409, 985, 995], "allevi": [57, 178, 183, 405, 987], "fastest": [57, 258, 351, 443, 666, 668, 670, 683, 933, 934, 984], "restart": [57, 381, 386, 443, 527, 533, 534, 539, 541, 542, 606, 607, 982, 1040], "072": [57, 68, 337, 341, 347, 433, 644], "plot_kmeans_assumpt": [57, 68], "judg": [58, 205, 405, 1015], "definit": [58, 81, 187, 199, 267, 283, 350, 378, 379, 380, 392, 394, 405, 407, 408, 410, 523, 525, 531, 607, 624, 688, 704, 714, 723, 753, 792, 793, 974, 977, 979, 981, 983, 985, 988, 999, 1004, 1022, 1031, 1035, 1042], "shorthand": [58, 392, 406, 463, 557, 558, 858, 859, 1030], "homo": 58, "compl": 58, "mea": 58, "context": [58, 238, 242, 283, 364, 365, 372, 377, 379, 391, 392, 405, 406, 411, 412, 413, 415, 416, 433, 440, 442, 444, 446, 448, 453, 454, 457, 460, 463, 464, 468, 527, 531, 532, 533, 535, 538, 539, 540, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 590, 598, 606, 622, 623, 626, 628, 630, 635, 643, 647, 649, 651, 653, 654, 655, 657, 659, 661, 662, 664, 672, 675, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 843, 845, 847, 848, 850, 851, 856, 859, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 953, 975, 981, 985, 991, 995, 999, 1006, 1009, 1018, 1027, 1034, 1035, 1040, 1043], "n_digit": 58, "1797": [58, 89, 258, 302, 324, 375, 441, 498, 528, 529, 530, 531, 595, 596, 684, 685, 686, 687, 988, 1017], "bench_k_mean": 58, "tabl": [58, 217, 260, 378, 379, 382, 387, 405, 413, 578, 654, 676, 794, 808, 834, 950, 981, 985, 986, 991, 1005, 1028], "fit_tim": [58, 121, 188, 207, 262, 409, 820, 821], "inertia_": [58, 61, 64, 439, 443, 445, 1038], "clustering_metr": 58, "sample_s": [58, 233, 350, 788], "formatter_result": 58, "determinist": [58, 124, 365, 374, 380, 392, 405, 439, 443, 445, 447, 448, 449, 454, 455, 458, 547, 555, 556, 560, 561, 579, 580, 687, 691, 805, 806, 853, 905, 906, 977, 981, 1028, 1031, 1033, 1035, 1036, 1039, 1042, 1043], "ttime": 58, "tinertia": 58, "thomo": 58, "tcompl": 58, "tv": 58, "tari": 58, "tami": 58, "tsilhouett": 58, "__________________________________________________________________________________": 58, "033": [58, 993], "69545": 58, "598": [58, 103, 152, 537], "645": [58, 68, 149], "621": [58, 764], "469": 58, "617": [58, 160, 161, 263, 327, 330, 405, 764], "152": [58, 384], "69735": 58, "681": [58, 384], "723": [58, 234, 303], "701": [58, 351], "574": [58, 118, 530, 537], "698": 58, "012": [58, 172, 175], "72686": 58, "636": [58, 183, 350, 384], "658": [58, 86], "647": [58, 93], "521": 58, "643": [58, 258], "reduced_data": 58, "mesh": [58, 120, 129, 153, 233, 291, 299, 307, 329, 332], "white": [58, 60, 95, 156, 169, 213, 220, 289, 302, 307, 329, 335, 410, 413, 621, 1001, 1027, 1030, 1033, 1037, 1041], "169": [58, 302], "741": [58, 68], "plot_kmeans_digit": [58, 68], "kmeans_plusplu": [59, 405, 1039, 1044], "4000": [59, 126, 248], "centers_init": 59, "4eacc5": [59, 64], "ff9c34": [59, 64], "4e9a06": [59, 64], "cluster_data": 59, "059": [59, 68], "plot_kmeans_plusplu": [59, 68], "wrong": [60, 199, 289, 349, 360, 375, 378, 380, 413, 500, 721, 751, 788, 985, 991, 1000, 1030, 1032, 1034, 1035, 1036, 1037, 1040], "wide": [60, 61, 90, 114, 232, 306, 390, 405, 410, 413, 974, 981, 1005, 1009, 1020, 1027, 1029, 1043], "ambival": 60, "thick": [60, 293, 988], "ow": 60, "7049787496083262": 60, "5882004012129721": 60, "6505186632729437": 60, "561464362648773": 60, "4857596147013469": 60, "silhouette_sampl": [60, 788, 1031, 1033, 1035, 1043], "distinct": [60, 260, 326, 349, 351, 373, 380, 383, 392, 393, 409, 412, 413, 585, 795, 804, 812, 871, 872, 892, 893, 974, 981, 988, 991, 1020, 1035], "center_box": [60, 508], "range_n_clust": 60, "set_size_inch": [60, 137, 239], "lie": [60, 85, 147, 169, 233, 305, 326, 334, 336, 410, 412, 602, 845, 847, 848, 849, 897, 898, 979, 982, 985, 995, 1000], "insert": [60, 169, 199, 390, 405, 483, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 912], "blank": [60, 383, 975, 1001], "demarc": 60, "silhouette_avg": 60, "sample_silhouette_valu": 60, "y_lower": [60, 124], "aggreg": [60, 115, 217, 263, 269, 319, 321, 405, 412, 414, 530, 551, 552, 590, 717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 785, 786, 986, 988, 995, 1043], "ith_cluster_silhouette_valu": 60, "size_cluster_i": 60, "y_upper": [60, 124], "fill_betweenx": 60, "2nd": [60, 90, 159, 310, 405, 416, 440, 526, 995, 1042], "lw": [60, 78, 79, 81, 99, 104, 105, 193, 200, 202, 205, 209, 216, 223, 248, 255, 270, 288, 305, 326, 343], "fontweight": [60, 194], "bold": [60, 124, 188, 194, 378], "074": [60, 68, 258], "plot_kmeans_silhouette_analysi": [60, 68], "reach": [61, 117, 148, 199, 201, 215, 217, 262, 319, 336, 358, 383, 393, 395, 405, 410, 414, 446, 453, 504, 505, 589, 590, 623, 640, 641, 642, 643, 648, 649, 650, 651, 652, 656, 657, 658, 659, 662, 663, 664, 672, 673, 674, 675, 677, 678, 679, 680, 724, 725, 778, 792, 793, 854, 855, 894, 974, 985, 989, 999, 1001, 1009, 1038, 1042, 1043, 1044], "optimum": [61, 157, 169, 175, 273, 410, 468, 981, 984], "stuck": [61, 688, 982], "check_random_st": [61, 215, 222, 231, 237, 380, 387, 392], "trade": [61, 78, 117, 171, 203, 259, 261, 262, 336, 349, 404, 405, 407, 549, 550, 555, 556, 630, 652, 688, 794, 797, 798, 808, 820, 982, 989, 997, 999, 1000, 1006], "n_init_rang": 61, "n_samples_per_cent": 61, "n_clusters_tru": 61, "init_s": [61, 350, 445], "factori": [61, 260, 413, 955, 985], "empti": [61, 70, 105, 211, 327, 364, 373, 380, 382, 405, 417, 479, 529, 557, 558, 627, 805, 862, 902, 904, 912, 917, 918, 924, 944, 945, 975, 1000, 1018, 1029, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043], "run_id": 61, "km": [61, 319, 350], "fmt": [61, 210], "my_memb": [61, 63, 64], "282": [61, 68, 1016, 1027], "plot_kmeans_stability_low_dim_dens": [61, 68], "fast": [62, 175, 183, 188, 214, 215, 233, 234, 306, 351, 364, 373, 378, 387, 405, 407, 409, 410, 412, 413, 417, 442, 443, 465, 470, 504, 528, 529, 531, 534, 536, 540, 543, 560, 561, 562, 584, 585, 587, 628, 629, 636, 654, 655, 668, 670, 683, 695, 794, 808, 818, 819, 829, 830, 837, 838, 842, 853, 934, 954, 977, 981, 984, 987, 988, 990, 991, 1001, 1005, 1009, 1020, 1027, 1028, 1033, 1034, 1037, 1038], "globular": [62, 405], "cleanli": [62, 1027], "808": [62, 68], "plot_linkage_comparison": [62, 68], "dorin": [63, 444], "comaniciu": [63, 405, 444], "meer": [63, 405, 444], "ieee": [63, 79, 81, 375, 405, 407, 414, 418, 444, 471, 530, 559, 660, 681, 682, 720, 764, 981, 985, 991], "transact": [63, 375, 405, 407, 416, 418, 440, 444, 471, 530, 534, 536, 543, 559, 640, 660, 681, 682, 720, 721, 751, 764, 981, 985], "intellig": [63, 148, 349, 375, 405, 412, 444, 551, 552, 634, 692, 720, 827, 854, 855, 986, 997, 1006, 1009], "2002": [63, 403, 405, 412, 433, 444, 589, 590, 721, 751, 844, 892, 977, 985], "603": [63, 444], "619": [63, 350, 444], "labels_uniqu": 63, "394": [63, 68, 70, 160], "plot_mean_shift": [63, 68, 457], "3000": [64, 223, 889, 890], "k_mean": [64, 387, 392, 1019, 1035, 1043], "t_batch": 64, "pairwis": [64, 168, 169, 232, 269, 315, 319, 320, 349, 364, 370, 380, 392, 405, 410, 415, 442, 454, 457, 458, 464, 483, 504, 505, 531, 557, 558, 616, 634, 635, 636, 637, 638, 639, 684, 686, 688, 690, 692, 695, 773, 776, 783, 787, 788, 825, 841, 845, 849, 863, 895, 977, 985, 988, 997, 1000, 1022, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044], "k_means_cluster_cent": 64, "mbk_means_cluster_cent": 64, "k_means_label": 64, "mbk_means_label": 64, "ninertia": 64, "bbbbbb": 64, "168": [64, 68, 1027], "plot_mini_batch_kmean": [64, 68], "shane": [65, 1036, 1039, 1042], "grigsbi": 65, "refug": 65, "rocktalu": 65, "cluster_optics_dbscan": [65, 405], "n_points_per_clust": 65, "c1": [65, 121, 159, 231, 311], "c2": [65, 121, 159, 231, 311], "c3": [65, 121, 311], "c4": [65, 311, 1007, 1022], "c5": [65, 1007, 1022], "c6": 65, "clust": [65, 446, 453], "labels_050": 65, "reachability_": [65, 405, 446, 451, 452, 453], "core_dist": [65, 451], "core_distances_": [65, 446, 451, 453], "ordering_": [65, 405, 446, 451, 452, 453], "labels_200": 65, "ax3": [65, 327], "ax4": 65, "klass": 65, "xk": [65, 546], "rk": 65, "full_lik": 65, "noptic": 65, "ndbscan": 65, "476": [65, 68], "plot_opt": [65, 68], "tri": [66, 104, 220, 292, 340, 365, 380, 383, 390, 393, 403, 445, 447, 449, 627, 628, 629, 666, 688, 694, 696, 698, 808, 953, 990, 1008, 1011, 1029, 1035, 1039], "intens": [66, 98, 283, 375, 379, 410, 439, 443, 455, 603, 604, 628, 629, 796, 974, 992, 1009, 1035], "weakli": 66, "outlin": [66, 120, 378, 380, 392, 393, 394, 405, 974, 1022], "center1": 66, "center2": 66, "center3": 66, "center4": 66, "radius1": 66, "radius2": 66, "radius3": 66, "radius4": 66, "circle1": 66, "circle2": 66, "circle3": 66, "circle4": 66, "label_im": 66, "cleaner": 66, "492": [66, 68, 639, 978, 1018], "plot_segmentation_toi": [66, 68], "swiss": [67, 166, 219, 226, 405, 526, 688, 689, 1041], "roll": [67, 166, 219, 226, 381, 405, 526, 688, 689, 928, 1009, 1037, 1042, 1044], "sole": [67, 390, 405], "oppos": [67, 235, 382, 401, 405, 893, 988, 1000, 1011, 1027], "make_swiss_rol": [67, 224, 1041], "thinner": 67, "fig1": 67, "set_posit": [67, 101, 102, 210, 305], "jet": 67, "fig2": 67, "121": [67, 113, 164, 233, 665, 995], "356": [67, 68, 993], "plot_ward_structured_vs_unstructur": [67, 68], "auto_examples_clust": 68, "chain": [69, 76, 111, 166, 280, 282, 283, 286, 360, 367, 370, 390, 392, 404, 415, 492, 498, 537, 607, 623, 654, 733, 794, 823, 826, 828, 829, 830, 831, 857, 858, 877, 974, 975, 986, 990, 1002, 1005, 1009, 1020, 1022], "raster": 70, "caption": 70, "serv": [70, 99, 111, 157, 263, 340, 406, 542, 547, 634, 977, 1041], "matt": [70, 1030, 1031, 1032, 1037, 1038, 1042, 1043], "terri": [70, 1031], "truncatedsvd": [70, 129, 221, 350, 410, 530, 531, 535, 536, 537, 688, 856, 859, 982, 1029, 1034, 1038, 1039, 1041], "dictvector": [70, 166, 348, 350, 352, 373, 413, 484, 578, 584, 585, 586, 587, 870, 1027, 1028, 1031, 1037, 1039, 1040, 1043], "compris": [70, 124, 258, 349, 350, 351, 373, 390, 410, 412, 511, 801, 982], "subject": [70, 128, 251, 263, 349, 373, 378, 380, 382, 390, 392, 393, 403, 404, 407, 409, 410, 491, 654, 655, 681, 860, 955, 976, 981, 1000, 1004, 1020, 1036, 1037, 1040, 1042, 1044], "mccall": 70, "mksol": 70, "dseg": 70, "ti": [70, 199, 247, 250, 258, 345, 364, 403, 405, 595, 596, 631, 716, 721, 751, 792, 793, 899, 902, 905, 984, 985, 1000, 1028, 1030, 1031, 1035, 1037, 1041, 1042, 1043], "fred": [70, 1027, 1040], "575": [70, 199, 350], "3539": 70, "1993apr6": 70, "131900": 70, "8407": 70, "perhap": [70, 120, 375, 377, 386, 392, 411, 1006], "militari": 70, "slug": 70, "school": [70, 375, 405, 783, 985], "physic": [70, 117, 365, 501, 950, 981, 1043], "teacher": 70, "ex": [70, 376, 379, 395, 1031, 1032], "fighter": 70, "jock": 70, "wasn": [70, 235, 1036], "poundal": 70, "flink": 70, "funni": 70, "propon": 70, "si": 70, "insist": 70, "safeti": [70, 390, 406, 951, 1006, 1037], "ball": [70, 288, 296, 405, 411, 444, 688, 837, 838, 842, 845, 847, 848, 849, 1027, 1029, 1032, 1038], "mari": [70, 1035, 1036, 1037, 1038, 1041], "shafer": 70, "nasa": [70, 349, 350, 375], "am": [70, 75, 80, 131, 170, 349, 383, 407, 470, 489, 1034], "dryden": 70, "stateless": [70, 350, 366, 380, 392, 413, 578, 579, 585, 634, 860, 861, 869, 995, 1043], "subject_body_extractor": 70, "startswith": [70, 221, 296], "subject_body_transform": 70, "sentenc": [70, 349, 351, 373, 393, 413], "text_stat": 70, "num_sent": 70, "text_stats_transform": 70, "subjectbodyextractor": 70, "subjectbodi": 70, "union": [70, 169, 406, 733, 749, 856, 1034], "body_bow": 70, "pull": [70, 318, 365, 376, 381, 392, 393, 1037], "body_stat": 70, "transformer_weight": [70, 460, 463, 856, 1032, 1039], "396": [70, 148, 352, 375, 1020], "660": [70, 76, 242], "plot_column_transform": [70, 76], "imput": [71, 131, 165, 171, 230, 240, 242, 316, 319, 367, 370, 382, 391, 392, 396, 406, 412, 486, 497, 561, 576, 635, 641, 668, 819, 840, 858, 916, 918, 1005, 1006, 1022, 1029, 1030, 1044], "miss": [71, 131, 148, 165, 171, 230, 240, 260, 283, 316, 320, 360, 364, 367, 370, 373, 375, 377, 378, 380, 382, 383, 392, 401, 404, 405, 406, 407, 442, 468, 486, 492, 494, 497, 553, 554, 557, 558, 560, 561, 562, 623, 624, 625, 626, 635, 641, 668, 686, 690, 722, 764, 819, 840, 858, 866, 867, 871, 873, 874, 877, 878, 882, 885, 886, 888, 905, 906, 907, 908, 981, 982, 985, 1005, 1006, 1007, 1009, 1022, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "chi": [71, 80, 111, 309, 370, 414, 515, 588, 591, 592, 594, 595, 596, 600, 601, 602, 605, 634, 635, 636, 637, 638, 753, 754, 1022, 1027, 1032, 1033], "dispatch": [71, 367, 401, 464, 794, 808, 818, 819, 820, 895, 951, 952, 1015, 1022, 1042], "processor": [71, 131, 169, 367, 416, 433, 440, 442, 444, 446, 448, 453, 454, 457, 460, 463, 468, 527, 531, 532, 533, 535, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 590, 598, 606, 628, 630, 635, 643, 647, 649, 651, 653, 654, 655, 657, 659, 661, 662, 664, 672, 675, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 839, 840, 843, 845, 847, 848, 850, 851, 856, 859, 892, 893], "pedro": [71, 1028, 1030, 1031, 1035], "chi2": [71, 413, 414, 448, 577, 588, 591, 592, 594, 595, 596, 601, 602, 605, 616, 634, 635, 636, 637, 638, 639, 754, 760, 769, 1027, 1034, 1041], "simpleimput": [71, 131, 163, 164, 171, 230, 240, 242, 316, 319, 360, 392, 623, 624, 625, 975, 995, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "40945": 71, "titan": [71, 171, 242, 315, 319, 320], "surviv": [71, 171, 974, 1005], "ag": [71, 148, 169, 171, 187, 188, 199, 217, 239, 240, 242, 305, 318, 319, 320, 373, 375, 1009, 1011, 1018], "fare": [71, 171, 242, 319, 320, 1031, 1032], "embark": [71, 171, 242, 315, 319, 320], "sex": [71, 148, 169, 171, 187, 188, 242, 320, 375, 993, 1018], "femal": [71, 169, 320, 383, 870, 871, 995], "male": [71, 169, 320, 383, 870, 871, 995], "pclass": [71, 171, 242, 315, 319, 320], "numeric_featur": [71, 319], "numeric_transform": [71, 319], "categorical_transform": 71, "selector": [71, 144, 145, 238, 344, 386, 413, 414, 462, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 1029, 1037, 1039, 1043], "preprocessor": [71, 131, 169, 199, 230, 238, 240, 311, 316, 318, 319, 320, 406, 413, 584, 585, 587, 1005, 1020, 1027, 1030, 1035, 1037], "798": [71, 412], "lt": [71, 72, 116, 131, 169, 250, 258, 272, 376, 378], "0x7fcbbe959e50": 71, "pipelineifittedpipelin": [71, 116, 145, 169, 171, 229, 239, 242, 267, 319], "columntransformercolumntransform": [71, 131, 169, 171, 230, 240, 311, 316, 319], "simpleimputersimpleimput": [71, 131, 171, 230, 240, 316, 319], "standardscalerstandardscal": [71, 131, 169, 229, 230, 239, 240, 242, 267, 316, 319], "onehotencoderonehotencod": [71, 116, 131, 169, 170, 230, 240, 316, 319], "selectpercentileselectpercentil": [71, 242], "logisticregressionlogisticregress": [71, 116, 229, 230, 240, 242, 316, 319], "make_column_selector": [71, 121, 131, 238, 406, 460, 463, 1037], "subset_featur": 71, "Then": [71, 112, 116, 119, 131, 134, 145, 169, 175, 183, 187, 199, 203, 224, 229, 235, 241, 262, 263, 278, 349, 372, 382, 384, 386, 395, 402, 403, 405, 408, 410, 413, 414, 566, 589, 715, 751, 794, 808, 897, 898, 975, 984, 985, 991, 1000, 1020, 1036], "1047": 71, "1118": 71, "684": [71, 80], "1045": 71, "841": 71, "1046": [71, 250], "kb": [71, 169, 170], "numerical_transform": 71, "yourself": [71, 377, 378, 379, 383, 386, 989], "dtype_exclud": [71, 462], "dtype_includ": [71, 121, 131, 238, 406, 462], "_column_transform": [71, 131], "0x7fcb99bbd760": 71, "0x7fcb9a483d00": 71, "exactli": [71, 111, 168, 178, 183, 192, 199, 203, 251, 268, 306, 344, 349, 378, 380, 402, 405, 409, 410, 413, 418, 442, 449, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 511, 522, 586, 587, 611, 672, 674, 699, 701, 758, 795, 812, 818, 977, 981, 982, 983, 985, 986, 1001, 1019, 1020, 1027, 1033, 1034, 1040], "hyperparamet": [71, 151, 152, 158, 159, 163, 166, 170, 178, 183, 188, 213, 217, 228, 238, 253, 258, 263, 265, 276, 285, 302, 349, 380, 392, 405, 409, 410, 412, 415, 498, 531, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 639, 649, 655, 661, 669, 672, 723, 780, 794, 808, 974, 979, 980, 981, 984, 985, 987, 989, 991, 999, 1006, 1020, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043], "cartesian": [71, 402, 629, 988, 1042], "preprocessor__num__imputer__strategi": 71, "preprocessor__cat__selector__percentil": 71, "classifier__c": 71, "search_cv": 71, "param_distribut": [71, 151, 261, 268, 272, 317, 391, 798, 806, 808, 1043], "randomizedsearchcvinot": 71, "fittedrandomizedsearchcv": 71, "pipelinepipelin": [71, 72, 240], "trigger": [71, 72, 382, 406, 854, 855, 857, 858, 917, 918, 934, 981, 1020, 1035, 1041, 1042], "best_params_": [71, 73, 124, 151, 234, 250, 258, 264, 317, 336, 391, 794, 797, 798, 808, 974, 1016, 1020], "best_score_": [71, 73, 234, 261, 264, 265, 336, 669, 671, 794, 797, 798, 808, 1015, 1016, 1020, 1038], "cv_results_": [71, 72, 73, 82, 117, 137, 147, 250, 258, 259, 260, 261, 264, 268, 271, 272, 285, 336, 468, 590, 794, 797, 798, 808, 1020, 1033, 1037, 1039, 1040], "sort_valu": [71, 171, 172, 242, 250, 260, 271, 311, 312], "mean_test_scor": [71, 72, 73, 82, 117, 137, 147, 250, 259, 260, 261, 268, 271, 272, 285, 336, 468, 590, 794, 808, 974, 1033, 1040], "std_test_scor": [71, 73, 117, 137, 147, 259, 260, 261, 268, 285, 468, 590, 794, 808, 1033, 1040], "param_preprocessor__num__imputer__strategi": 71, "param_preprocessor__cat__selector__percentil": 71, "param_classifier__c": 71, "786015": 71, "031020": 71, "785063": 71, "030498": 71, "783149": 71, "030462": 71, "228": [71, 76], "plot_column_transformer_mixed_typ": [71, 76], "instanti": [72, 154, 318, 381, 396, 412, 446, 563, 564, 598, 626, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 924, 991, 1017, 1027, 1035, 1039, 1043], "argument": [72, 200, 229, 232, 235, 365, 372, 373, 378, 379, 381, 383, 384, 386, 387, 390, 392, 405, 406, 409, 410, 412, 414, 416, 417, 419, 423, 427, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 453, 455, 457, 459, 464, 465, 489, 492, 499, 504, 529, 531, 532, 534, 536, 547, 555, 556, 559, 563, 564, 565, 566, 573, 577, 578, 584, 585, 587, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 627, 635, 639, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 662, 664, 672, 673, 677, 680, 684, 688, 692, 694, 695, 696, 697, 698, 710, 715, 730, 737, 758, 774, 775, 800, 816, 818, 819, 820, 825, 826, 829, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 854, 857, 861, 895, 901, 911, 915, 924, 929, 931, 952, 953, 954, 955, 969, 974, 977, 981, 982, 983, 985, 988, 992, 993, 1000, 1001, 1011, 1015, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "memoiz": [72, 373, 392], "costli": [72, 78, 118, 163, 261, 345, 365, 379, 384, 405, 439, 623, 802, 804, 889, 890, 934, 985, 988, 997, 1006], "mcgibbon": [72, 1029, 1030, 1033], "selectkbest": [72, 74, 144, 145, 319, 360, 378, 396, 406, 414, 577, 588, 591, 592, 594, 596, 602, 974, 1028, 1033, 1043], "mutual_info_classif": [72, 414, 588, 591, 592, 595, 596, 1033, 1039, 1042], "pipe": [72, 73, 121, 240, 259, 311, 317, 318, 391, 396, 406, 413, 586, 857, 882, 883, 885, 886, 887, 888, 974, 995, 1016], "reduce_dim": [72, 240, 259, 406], "popul": [72, 78, 80, 169, 199, 238, 263, 305, 373, 387, 392, 407, 436, 708, 714, 839, 840, 841, 843, 845, 847, 848, 849, 954, 985, 991, 995, 1001], "n_features_opt": 72, "c_option": 72, "iterated_pow": [72, 528, 531, 537, 1033], "reduce_dim__n_compon": [72, 259, 406], "classify__c": 72, "reduce_dim__k": 72, "reducer_label": 72, "kbest": [72, 588], "0x7fcbbe95b280": 72, "gridsearchcvifittedgridsearchcv": [72, 250, 258, 260], "minmaxscalerminmaxscal": 72, "passthroughpassthrough": [72, 169, 170, 311], "linearsvclinearsvc": [72, 145, 267], "mean_scor": [72, 269, 272, 350, 1040], "alphabet": [72, 392, 736], "eas": [72, 172, 250, 310, 378, 381, 384, 981, 999, 1005, 1006, 1009, 1038, 1039, 1041], "sometim": [72, 131, 168, 260, 301, 350, 360, 365, 366, 378, 380, 382, 384, 391, 392, 405, 407, 410, 412, 413, 445, 530, 531, 534, 536, 537, 862, 863, 864, 912, 980, 981, 982, 985, 990, 995, 996, 1000, 1011, 1019, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043], "worthwhil": [72, 392], "slower": [72, 98, 117, 121, 163, 234, 269, 351, 412, 413, 414, 442, 447, 449, 534, 536, 543, 551, 552, 554, 559, 561, 584, 585, 587, 627, 628, 629, 639, 655, 668, 670, 683, 688, 700, 825, 829, 830, 978, 982, 983, 984, 986, 988, 1001, 1020, 1031, 1038], "constructor": [72, 231, 365, 380, 392, 404, 406, 413, 460, 463, 545, 546, 551, 563, 564, 565, 566, 577, 578, 584, 585, 593, 664, 672, 673, 839, 840, 841, 843, 844, 845, 847, 848, 849, 856, 857, 858, 859, 953, 974, 986, 995, 1000, 1006, 1011, 1027, 1028, 1030, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042], "folder": [72, 373, 376, 378, 382, 386, 395, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 988, 1020], "cached_pip": [72, 406], "delet": [72, 325, 327, 382, 383, 465, 470, 482], "exit": [72, 283, 382, 386, 464], "benefici": [72, 74, 78, 95, 129, 305, 306, 376, 982], "345": [72, 76, 119, 135, 148, 375], "plot_compare_reduct": [72, 76], "874": [73, 783, 784, 985], "logistic__c": [73, 1016], "54434690031882": 73, "pca__n_compon": [73, 856, 1016], "truncat": [73, 129, 221, 387, 530, 531, 535, 536, 537, 540, 672, 674, 721, 751, 792, 846, 910, 934, 974, 984, 985, 999, 1016, 1020, 1021, 1022, 1033, 1035], "x_digit": [73, 139, 300, 406, 1015, 1016, 1018], "y_digit": [73, 139, 300, 406, 1015, 1016, 1018], "__": [73, 261, 392, 406, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 1016, 1035, 1036], "spectrum": [73, 520, 540, 691, 934, 1009, 1016, 1035], "ax0": [73, 75, 199, 231, 350, 1016], "n_components_": [73, 103, 392, 437, 441, 530, 534, 535, 536, 537, 538, 539, 889, 890, 1016, 1036, 1038], "explained_variance_ratio_": [73, 104, 350, 410, 530, 537, 540, 545, 1016, 1030, 1033], "named_step": [73, 86, 406, 589, 590, 593, 857, 858, 897, 898, 981, 1016, 1034, 1036], "prop": [73, 81, 205, 247, 289, 335, 358, 942, 945, 1016], "components_col": 73, "param_pca__n_compon": 73, "best_clf": 73, "nlargest": 73, "yerr": [73, 79, 81, 118, 121, 147, 285, 311, 327], "val": [73, 211, 260, 936], "062": [73, 76], "plot_digits_pip": [73, 76], "candid": [74, 250, 258, 261, 268, 317, 366, 378, 382, 405, 412, 444, 446, 794, 797, 798, 806, 808, 981, 988, 1001, 1033], "features__pca__n_compon": 74, "features__univ_select__k": 74, "svm__c": 74, "867": 74, "transformer_list": [74, 406, 856, 859, 975, 1038, 1039], "univ_select": 74, "amuel": [74, 115, 190, 233, 326, 344], "ai": [74, 115, 190, 233, 326, 344, 409], "bonn": [74, 115, 190, 233, 326, 344], "mayb": [74, 301, 392, 413, 1000, 1006], "combined_featur": 74, "x_featur": [74, 636, 637, 638, 977], "grid_search": [74, 117, 240, 250, 258, 268, 406, 953, 1029, 1030, 1031, 1032, 1033, 1034], "409": [74, 76, 129, 135], "plot_feature_union": [74, 76], "overview": [75, 166, 277, 279, 379, 381, 391, 392, 492, 729, 738, 794, 810, 820, 825, 826, 827, 905, 987, 999, 1021, 1022], "transformedtargetregressor": [75, 169, 199, 390, 396, 406, 589, 590, 593, 1035, 1037, 1040], "hous": [75, 131, 163, 164, 305, 317, 371, 486, 1022], "translat": [75, 380, 415, 523, 610, 866, 867, 883, 982, 985, 1003, 1009], "lowest": [75, 86, 170, 183, 250, 372, 405, 409, 631, 633, 797, 798, 801, 904, 905, 982, 985, 1001, 1042], "logarithm": [75, 131, 169, 203, 232, 261, 336, 392, 414, 456, 586, 654, 655, 672, 700, 721, 736, 746, 750, 751, 752, 786, 800, 837, 838, 932, 1001, 1015, 1034], "log1p": [75, 231, 861, 985, 995], "expm1": 75, "y_tran": 75, "At": [75, 111, 204, 272, 278, 324, 327, 364, 365, 382, 393, 396, 401, 408, 412, 433, 436, 461, 584, 585, 587, 598, 825, 827, 864, 949, 974, 981, 984, 986, 990, 999, 1009], "meda": [75, 169, 985], "median_absolute_error": [75, 169, 985, 1031, 1037, 1039], "r2_score": [75, 168, 183, 194, 195, 412, 428, 461, 478, 479, 480, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 719, 723, 830, 831, 840, 848, 855, 898, 900, 903, 906, 908, 974, 985, 1028, 1030, 1036, 1040, 1041], "compute_scor": [75, 103, 178, 179, 640, 641, 1036], "r2": [75, 112, 117, 131, 168, 170, 194, 234, 380, 406, 412, 550, 566, 669, 820, 855, 985, 993, 1036], "ridge_cv": 75, "y_pred_ridg": 75, "ridge_cv_with_trans_target": 75, "inverse_func": [75, 169, 406, 461, 861, 995, 1035], "y_pred_ridge_with_trans_target": 75, "sell": 75, "quantile_transform": [75, 874, 885, 995, 1034, 1035, 1036], "house_pric": [75, 131], "select_dtyp": [75, 121, 320, 462], "nan": [75, 121, 163, 164, 169, 217, 238, 240, 242, 255, 263, 311, 315, 320, 321, 364, 370, 380, 387, 392, 412, 442, 464, 492, 551, 552, 553, 557, 558, 560, 589, 590, 593, 599, 602, 605, 623, 624, 625, 626, 631, 708, 709, 710, 717, 718, 719, 723, 724, 725, 764, 773, 778, 779, 780, 782, 794, 797, 798, 800, 808, 816, 819, 820, 821, 824, 866, 867, 871, 873, 874, 877, 878, 882, 885, 886, 888, 915, 916, 917, 918, 960, 974, 985, 995, 1001, 1022, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "inf": [75, 154, 293, 387, 405, 415, 442, 446, 453, 457, 467, 468, 474, 549, 550, 555, 556, 589, 590, 593, 602, 603, 604, 615, 623, 631, 633, 644, 645, 646, 648, 665, 667, 668, 672, 676, 683, 723, 725, 741, 773, 780, 784, 853, 862, 869, 915, 917, 918, 932, 985, 995, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "lotfrontag": 75, "garageyrblt": 75, "masvnrarea": [75, 131], "to_fram": 75, "n_quantil": [75, 170, 309, 874, 886, 1036], "output_distribut": [75, 305, 309, 406, 873, 874, 885, 886, 995], "squeez": [75, 157, 158, 238, 283, 305, 1019], "quantiletransform": [75, 170, 309, 406, 461, 873, 886, 975, 995, 1034, 1035, 1036, 1037, 1038, 1043], "weaker": 75, "residu": [75, 195, 201, 256, 428, 461, 478, 479, 480, 548, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 674, 675, 681, 682, 697, 739, 780, 830, 831, 840, 848, 855, 898, 900, 903, 906, 908, 981, 985, 1018, 1039, 1040, 1042], "smile": [75, 373, 1041], "plot_transformed_target": [75, 76], "54": [76, 92, 148, 175, 183, 199, 202, 238, 373, 375, 405, 487, 1028, 1029], "auto_examples_compos": 76, "mahalanobi": [77, 83, 166, 405, 407, 446, 453, 465, 466, 467, 468, 469, 470, 471, 472, 695, 773, 774, 775, 844, 979, 991, 1035, 1038, 1039], "ledoitwolf": [77, 79, 83, 103, 166, 407, 465, 466, 470, 471, 472, 473, 794, 1031], "empiricalcovari": [78, 80, 81, 407, 465, 469, 470, 471, 472, 991], "unbias": [78, 403, 407, 410, 433, 546, 652, 668, 670, 683, 981, 1015], "shrunk": [78, 103, 305, 312, 321, 418, 469, 471, 472, 475, 476, 477, 545, 878, 979, 999, 1021, 1022], "base_x_train": 78, "base_x_test": 78, "coloring_matrix": [78, 79], "shrunkcovari": [78, 103, 407, 465, 466, 469, 470, 471], "empirical_covari": [78, 407, 1043], "log_likelihood": [78, 606, 607, 792, 793], "negative_loglik": 78, "real_cov": [78, 79, 466, 469, 470, 471, 472], "emp_cov": [78, 80, 82, 474, 477], "loglik_r": 78, "inv": [78, 82, 300], "formula": [78, 79, 402, 405, 407, 418, 469, 471, 512, 513, 514, 586, 639, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 660, 672, 674, 700, 724, 750, 759, 974, 979, 981, 985, 990, 991, 995, 999, 1032, 1034, 1036], "asymptot": [78, 79, 188, 364, 407, 470, 532, 725, 981, 984, 1037], "criterion": [78, 79, 172, 187, 207, 250, 272, 316, 380, 387, 392, 405, 410, 437, 441, 445, 448, 455, 458, 528, 533, 535, 542, 549, 550, 553, 554, 555, 556, 560, 561, 562, 602, 623, 640, 641, 644, 652, 662, 663, 664, 665, 667, 668, 670, 672, 673, 674, 676, 687, 691, 706, 793, 894, 899, 900, 901, 902, 903, 905, 906, 907, 908, 981, 984, 985, 993, 998, 1001, 1007, 1019, 1022, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044], "chen": [78, 79, 407, 412, 418, 471, 721, 751, 977, 985, 1030, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043], "Its": [78, 258, 262, 374, 380, 392, 410, 415, 534, 980, 981, 990, 993, 999, 1005, 1009, 1030, 1044], "tuned_paramet": [78, 137, 258], "loglik_lw": 78, "loglik_oa": 78, "unseen": [78, 122, 145, 188, 203, 207, 273, 289, 340, 366, 370, 380, 391, 392, 405, 409, 843, 874, 886, 976, 985, 991, 993, 995, 1001, 1011, 1030, 1035, 1039], "loglog": [78, 232], "lik_max": 78, "amax": [78, 122], "lik_min": 78, "amin": 78, "vline": [78, 97, 186, 187, 188, 200, 260, 273, 306], "shrinkage_": [78, 79, 469, 471], "magenta": [78, 126], "purpl": [78, 92, 224], "cyan": [78, 114, 169, 294], "realli": [78, 171, 188, 382, 383, 384, 985, 991, 1009, 1041], "interestingli": [78, 148, 995], "outperform": [78, 86, 131, 278, 310, 390, 409, 412, 448, 458, 987, 995], "plot_covariance_estim": [78, 83], "inspir": [79, 128, 170, 217, 378, 390, 412, 557, 558, 922, 975, 1005, 1036], "mmse": [79, 407, 418, 471], "tran": 79, "octob": [79, 373, 1027, 1034, 1040, 1041, 1043], "choleski": [79, 199, 217, 387, 467, 468, 474, 523, 607, 644, 646, 647, 650, 651, 652, 654, 655, 665, 668, 670, 676, 678, 679, 683, 792, 793, 981, 1030, 1034, 1036, 1039, 1042, 1043], "toeplitz": 79, "simul": [79, 97, 169, 193, 236, 260, 1009], "n_samples_rang": [79, 232], "lw_mse": 79, "oa_ms": 79, "lw_shrinkag": 79, "oa_shrinkag": 79, "error_norm": [79, 81, 465, 466, 467, 468, 469, 470, 471, 472], "darkorang": [79, 99, 104, 105, 200, 210, 223, 246, 247, 248, 251, 267, 269, 288, 294, 295, 326, 356], "338": [79, 83, 238], "plot_lw_vs_oa": [79, 83], "x_i": [80, 115, 143, 169, 200, 318, 344, 405, 410, 411, 412, 415, 610, 611, 615, 618, 619, 621, 832, 833, 836, 976, 977, 981, 987, 988, 989, 995, 999, 1000, 1001], "d_": [80, 405, 410, 644, 665, 676, 773, 982, 987], "mle": [80, 103, 537, 1035, 1038], "resist": [80, 81, 378], "erron": [80, 81, 410, 981, 1028, 1035, 1039], "breakdown": [80, 81, 216, 675, 981], "n_": [80, 81, 172, 260, 318, 405, 410, 412, 642, 648, 681, 692, 977, 981, 985, 987, 988, 992, 995, 997, 1000, 1001], "smallest": [80, 81, 199, 283, 354, 373, 405, 407, 414, 523, 537, 626, 650, 651, 652, 678, 679, 686, 690, 691, 794, 797, 798, 808, 813, 867, 1001, 1040], "pure": [80, 81, 86, 183, 199, 392, 405, 469, 475, 492, 553, 554, 555, 556, 560, 561, 562, 701, 711, 781, 790, 905, 906, 907, 908, 995], "rousseuw": [80, 81], "rousseeuw": [80, 81, 405, 407, 465, 470, 787, 788, 991], "ass": [80, 81, 407, 470], "1984": [80, 81, 407, 470, 905, 906, 1001], "wilson": [80, 375, 1027, 1030], "hilferti": 80, "1931": 80, "proceed": [80, 148, 373, 375, 405, 416, 435, 440, 507, 692, 704, 721, 751, 844, 894, 985, 997, 998, 999], "academi": [80, 844], "688": 80, "n_outlier": [80, 81, 127, 202, 228, 290], "gen_cov": 80, "ey": [80, 81, 247, 251, 336, 373, 530, 537, 546], "outliers_cov": 80, "mincovdet": [80, 81, 407, 465, 466, 469, 471, 472, 991, 1027, 1034], "robust_cov": 80, "nmcd": 80, "nmle": 80, "26253567e": 80, "06695631e": 80, "22747343e": 80, "23773583": 80, "24640578": 80, "51963999": 80, "inlier": [80, 127, 202, 228, 238, 305, 392, 407, 427, 465, 559, 667, 673, 843, 874, 886, 900, 901, 903, 981, 991, 1034, 1035, 1040], "inlier_plot": 80, "outlier_plot": 80, "get_xlim": [80, 194, 204, 305], "zz": 80, "mahal_emp_cov": 80, "emp_cov_contour": 80, "pubu_r": 80, "mahal_robust_cov": 80, "robust_contour": 80, "ylorbr_r": 80, "dist": [80, 221, 232, 382, 465, 466, 467, 468, 469, 470, 471, 472, 695, 758, 764, 837, 838], "borderaxespad": 80, "cubic": [80, 415], "suggest": [80, 98, 114, 118, 169, 172, 260, 336, 364, 377, 378, 385, 392, 409, 410, 412, 465, 470, 561, 641, 822, 979, 981, 982, 990, 1000, 1020, 1031, 1038, 1041], "emp_mah": 80, "markeredgewidth": [80, 264], "rm": [80, 154, 382, 386, 407], "mahal": 80, "robust_mah": 80, "location_": [80, 81, 465, 466, 467, 468, 469, 470, 471, 472], "273": [80, 83], "plot_mahalanobis_dist": [80, 83], "compens": [81, 168, 170, 175, 199, 217, 261, 407, 410], "soon": [81, 392, 1018], "5n_": 81, "johanna": 81, "hardin": 81, "rock": 81, "decemb": [81, 156, 373, 660, 681, 682, 1027, 1035, 1037, 1039, 1042], "928": [81, 433], "946": 81, "zoubir": 81, "koivunen": 81, "chakhchoukh": 81, "muma": 81, "signal": [81, 95, 96, 97, 105, 124, 151, 156, 157, 166, 177, 198, 200, 218, 251, 318, 404, 405, 407, 413, 414, 415, 418, 471, 499, 517, 522, 527, 530, 533, 537, 621, 640, 641, 642, 643, 648, 649, 659, 660, 668, 680, 681, 682, 780, 815, 823, 871, 981, 985, 1002, 1009, 1014, 1021, 1022], "tutori": [81, 137, 138, 139, 140, 188, 201, 217, 260, 367, 378, 379, 384, 386, 391, 399, 405, 448, 458, 687, 1000, 1018, 1030], "treatment": [81, 168, 372, 410, 465, 470], "concept": [81, 117, 122, 235, 269, 367, 378, 390, 404, 405, 411, 413, 977, 985, 988, 1001, 1009], "magazin": [81, 414], "61": [81, 170, 217, 372, 375, 384, 406, 537, 556, 709], "font_manag": [81, 289, 335], "range_n_outli": 81, "err_loc_mcd": 81, "err_cov_mcd": 81, "err_loc_emp_ful": 81, "err_cov_emp_ful": 81, "err_loc_emp_pur": 81, "err_cov_emp_pur": 81, "outliers_index": 81, "outliers_offset": 81, "inliers_mask": 81, "pure_x": 81, "pure_loc": 81, "pure_emp_cov": 81, "font_prop": 81, "fontproperti": [81, 289, 335], "hat": [81, 105, 256, 260, 288, 318, 376, 403, 407, 411, 412, 976, 981, 982, 985, 987, 989], "_2": [81, 156, 340, 410, 413, 527, 533, 541, 542, 642, 648, 981, 989, 999, 1000], "x_size": 81, "699": [81, 83, 308, 313], "plot_robust_vs_empirical_covari": [81, 83], "graphicallasso": [82, 407, 465, 466, 468, 469, 470, 471, 472, 474, 1035, 1043], "largest": [82, 97, 117, 148, 201, 375, 405, 407, 410, 439, 523, 537, 553, 554, 555, 556, 560, 561, 584, 705, 792, 793, 813, 835, 867, 905, 906, 907, 908, 934, 982, 985, 995, 1000, 1001], "invert": [82, 100, 145, 221, 350, 351, 390, 407, 413, 626, 685, 689, 995, 1036], "fairli": [82, 123, 222, 275, 300, 386, 405, 555, 556, 695, 986, 1018], "tweak": [82, 235, 409, 951, 984, 1020, 1038], "readabl": [82, 261, 318, 383, 384, 386, 399, 530, 1036, 1039, 1040, 1041, 1042], "make_sparse_spd_matrix": [82, 525, 1044], "prng": 82, "prec": [82, 229, 523, 985], "smallest_coef": [82, 523], "largest_coef": [82, 523], "multivariate_norm": [82, 86, 245, 465, 466, 467, 468, 469, 470, 471, 472], "ledoit_wolf": [82, 407, 1040], "prec_": 82, "lw_cov_": 82, "lw_prec_": 82, "this_cov": 82, "this_prec": 82, "ma": [82, 311, 336, 981, 1033, 1038], "masked_equ": 82, "set_facecolor": [82, 245], "set_axis_bgcolor": 82, "497": [82, 83], "plot_sparse_cov": [82, 83], "226": [83, 405, 416, 440], "auto_examples_covari": 83, "cross_decomposit": [84, 85, 86, 166, 236, 367, 1031, 1032, 1034, 1035, 1036], "plscanon": [85, 478, 480, 481, 1007, 1022, 1031, 1035, 1037, 1039, 1041], "plsregress": [85, 86, 1007, 1022, 1034, 1037, 1039, 1041, 1043], "appar": [85, 987, 1009], "scatterplot": [85, 178, 260], "maxim": [85, 86, 90, 95, 106, 124, 178, 250, 251, 261, 265, 269, 270, 293, 310, 317, 336, 340, 354, 358, 375, 392, 402, 405, 408, 410, 414, 415, 545, 590, 606, 607, 640, 641, 644, 665, 675, 676, 716, 794, 797, 798, 808, 866, 872, 882, 979, 981, 984, 985, 988, 990, 1000, 1015, 1018, 1030, 1032, 1037, 1040, 1042], "weak": [85, 122, 125, 203, 217, 266, 409, 553, 554, 555, 560, 561, 562, 626, 988, 1009, 1043], "var": [85, 86, 101, 114, 148, 179, 260, 375, 379, 414, 637, 641, 899, 900, 901, 902, 903, 985, 1035], "corr": [85, 172, 260], "corrcoef": [85, 106], "plsca": [85, 479], "x_train_r": 85, "y_train_r": 85, "x_test_r": 85, "y_test_r": 85, "221": [85, 129, 1030], "222": [85, 87, 114, 129, 135, 295, 297, 1000], "223": [85, 129, 148, 375], "yj": [85, 309], "noiz": 85, "xb": [85, 876], "11693539": 85, "19803308": 85, "12190903": 85, "77322639": 85, "77777215": 85, "04995982": 85, "34990341": 85, "37257991": 85, "27597342": 85, "95433992": 85, "9403917": 85, "02818216": 85, "06880943": 85, "08604995": 85, "05216586": 85, "72295655": 85, "70432034": 85, "79769376": 85, "exce": [85, 281, 316, 415, 438, 511, 598, 645, 654, 1036, 1039, 1041], "plot_compare_cross_decomposit": [85, 87], "pcr": [86, 408], "pl": [86, 203, 375, 408, 478, 479, 480, 481, 1032], "greedili": [86, 148, 405, 409, 414, 456], "despit": [86, 197, 199, 217, 234, 292, 392, 396, 407, 623, 624, 626, 981, 988, 1009, 1035, 1036], "suffer": [86, 119, 171, 283, 305, 350, 364, 405, 412, 540, 758, 980, 981, 985, 988, 1019, 1036], "dive": [86, 378, 384], "explained_variance_": [86, 530, 537, 540, 1019, 1034], "onto": [86, 221, 222, 233, 305, 390, 410, 413, 417, 442, 444, 457, 529, 535, 539, 623, 624, 626, 684, 979, 983, 988], "recommend": [86, 119, 163, 216, 229, 235, 256, 269, 309, 317, 340, 364, 365, 367, 372, 376, 378, 380, 384, 386, 390, 395, 408, 409, 410, 412, 414, 434, 443, 445, 447, 456, 492, 504, 531, 534, 540, 545, 557, 558, 565, 578, 579, 585, 602, 607, 627, 628, 634, 666, 672, 688, 693, 694, 696, 698, 800, 806, 808, 816, 853, 860, 862, 869, 876, 877, 882, 883, 885, 886, 887, 888, 890, 899, 902, 934, 953, 974, 982, 985, 987, 989, 992, 995, 997, 999, 1000, 1001, 1004, 1009, 1022, 1029, 1030, 1036, 1037, 1038, 1039, 1041, 1043], "linearregress": [86, 134, 168, 178, 189, 194, 195, 196, 197, 202, 205, 216, 231, 235, 237, 256, 274, 306, 360, 378, 390, 391, 406, 412, 461, 566, 628, 631, 642, 645, 648, 650, 667, 668, 683, 981, 985, 995, 1018, 1031, 1032, 1036, 1039, 1040, 1041, 1043], "retriev": [86, 169, 203, 267, 350, 358, 382, 392, 410, 413, 414, 464, 492, 586, 589, 590, 622, 649, 659, 680, 695, 721, 725, 727, 728, 751, 776, 832, 836, 869, 895, 981, 983, 985, 987, 1005, 1006, 1019, 1032, 1037, 1039, 1041], "predit": 86, "pca_2": 86, "673": [86, 384], "539": [86, 87, 268, 276], "plot_pcr_vs_pl": [86, 87], "761": 87, "auto_examples_cross_decomposit": 87, "multilabel": [88, 93, 166, 227, 243, 267, 281, 373, 380, 381, 392, 400, 478, 483, 493, 504, 505, 511, 519, 537, 553, 560, 563, 670, 671, 699, 703, 709, 721, 724, 725, 729, 730, 733, 734, 749, 751, 778, 779, 782, 783, 789, 791, 826, 830, 854, 861, 864, 868, 870, 881, 902, 905, 907, 923, 947, 948, 949, 996, 1007, 1008, 1020, 1022, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043], "052": [89, 93, 271, 276, 533], "plot_digits_last_imag": [89, 93], "iris": [90, 266, 267, 1017], "150x4": 90, "legend_el": [90, 127, 212, 263, 286, 340], "flower": [90, 104, 269, 502, 503, 985, 1005], "versicolor": [90, 269, 270, 500], "differenti": [90, 267, 412, 415, 555, 556, 615, 618], "unus": [90, 101, 102, 170, 196, 220, 222, 459, 575, 758, 766, 974, 982, 1027, 1035, 1037, 1038, 1040, 1042], "110": [90, 178, 196, 206, 208, 218, 231, 311, 433, 979, 980], "3rd": [90, 159, 832, 875, 987, 995], "eigenvalu": [90, 250, 402, 405, 407, 448, 458, 465, 466, 467, 468, 469, 470, 471, 472, 531, 537, 545, 669, 684, 685, 687, 689, 691, 863, 982, 995, 1029, 1033, 1036, 1037, 1038, 1039], "plot_iris_dataset": [90, 93], "easi": [91, 170, 207, 217, 248, 258, 260, 336, 349, 360, 373, 384, 386, 390, 391, 405, 412, 496, 500, 506, 864, 974, 980, 984, 992, 995, 1005, 1006, 1009, 1020, 1037, 1042, 1043], "make_gaussian_quantil": [91, 111, 113, 374, 466, 470, 471, 472, 516], "321": [91, 140, 141], "323": [91, 232], "y2": [91, 113, 712, 986], "324": [91, 204, 218, 373], "multi": [91, 110, 135, 166, 177, 215, 218, 219, 222, 226, 227, 228, 236, 239, 243, 253, 257, 269, 276, 281, 298, 303, 315, 320, 349, 353, 358, 359, 365, 373, 375, 380, 381, 387, 392, 395, 405, 412, 413, 415, 422, 433, 448, 458, 465, 470, 491, 492, 500, 501, 506, 510, 511, 515, 516, 518, 537, 545, 546, 547, 549, 551, 553, 554, 555, 557, 560, 561, 563, 565, 606, 627, 629, 639, 642, 643, 648, 649, 653, 654, 656, 657, 658, 659, 662, 664, 668, 669, 670, 671, 672, 677, 680, 686, 699, 709, 716, 724, 729, 735, 737, 778, 794, 808, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 844, 845, 847, 853, 854, 855, 858, 864, 877, 881, 892, 893, 897, 899, 902, 905, 906, 907, 909, 910, 911, 917, 920, 923, 974, 986, 988, 992, 995, 999, 1005, 1006, 1007, 1011, 1017, 1021, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044], "325": 91, "326": 91, "286": [91, 93, 170, 412], "plot_random_dataset": [91, 93], "make_multilabel_classif": [92, 236, 374, 511, 532, 783, 828, 829, 985, 1029, 1030, 1032, 1038], "degener": [92, 246, 417, 436, 450, 529, 716, 981, 985, 1036, 1040, 1041], "vocabulari": [92, 214, 349, 350, 390, 413, 584, 585, 586, 587, 987, 1011, 1020, 1027, 1029, 1032, 1035, 1038, 1040], "73": [92, 113, 264, 325, 391, 794, 808, 843, 906, 995, 1016, 1023, 1027, 1029], "w0": 92, "w1": [92, 412, 653], "38": [92, 170, 190, 198, 203, 254, 269, 288, 321, 358, 412, 628, 725, 878, 985, 995, 1027, 1028, 1029], "make_ml_clf": 92, "ff3333": 92, "0198e1": 92, "bf5fff": 92, "fcd116": 92, "ff7216": 92, "4dbd33": 92, "87421f": 92, "plot_2d": [92, 220], "p_c": [92, 519], "p_w_c": [92, 519], "allow_unlabel": [92, 236, 519], "return_distribut": [92, 519], "sep": [92, 269], "p_w": 92, "plot_random_multilabel_dataset": [92, 93], "auto_examples_dataset": 93, "blind": [94, 107, 166, 349, 410, 529, 537], "fastica": [94, 107, 166, 410, 528, 531, 537, 1019, 1027, 1029, 1035, 1041, 1042], "increment": [94, 107, 166, 263, 382, 384, 438, 443, 459, 500, 529, 530, 531, 532, 535, 537, 540, 598, 642, 654, 662, 800, 821, 829, 830, 832, 833, 834, 835, 836, 866, 867, 877, 897, 898, 960, 981, 987, 1030, 1031], "fa": [94, 106, 107, 166, 384, 410, 469, 472, 528, 537, 794, 819], "precomput": [94, 107, 166, 177, 218, 223, 283, 285, 380, 387, 390, 392, 405, 413, 416, 428, 436, 437, 440, 441, 442, 446, 448, 453, 461, 467, 478, 479, 480, 520, 527, 531, 533, 536, 538, 544, 550, 552, 554, 556, 558, 561, 564, 566, 606, 607, 616, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 677, 678, 680, 681, 684, 686, 687, 688, 692, 769, 773, 776, 787, 788, 830, 831, 839, 840, 841, 843, 844, 845, 847, 848, 849, 855, 898, 899, 900, 901, 902, 903, 906, 908, 961, 962, 963, 977, 983, 988, 1000, 1006, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043], "olivetti": [95, 119, 371, 410, 491, 1022, 1027, 1035], "chapter": [95, 360, 380, 405, 410, 412, 415, 526, 528, 530, 610, 615, 618, 639, 975, 978, 981, 1000, 1001], "decompos": [95, 99, 114, 307, 404, 530, 534, 705, 818, 934, 980, 981, 985, 1002, 1021, 1022], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 237], "constrained_layout": [95, 170, 220, 311, 312, 320], "set_constrained_layout_pad": 95, "w_pad": [95, 120, 355], "h_pad": [95, 120, 355], "set_edgecolor": 95, "vec": [95, 413, 534, 536, 543], "im": [95, 106, 271, 287, 1008], "pad": [95, 120, 163, 170, 220, 238, 349, 355, 413, 584, 585, 587], "initialis": [95, 534, 536, 543, 1027, 1035, 1036], "mathbb": [95, 114, 154, 408, 985, 992, 1000], "4096": [95, 373, 410, 491], "human": [95, 170, 349, 399, 405, 410, 854, 855, 985, 992, 1036], "friendli": [95, 365, 378, 386, 410, 890, 997, 998, 1005, 1006], "visualis": [95, 98, 106, 236, 540, 795, 796, 799, 811, 812, 813, 814, 815, 988, 1006], "64x64": [95, 373, 410], "singular": [95, 387, 402, 405, 408, 447, 449, 478, 479, 480, 481, 517, 520, 530, 534, 536, 537, 540, 543, 545, 546, 653, 668, 669, 670, 683, 934, 981, 982, 984, 1021, 1022, 1033, 1034], "scalar": [95, 318, 384, 392, 406, 415, 417, 460, 463, 520, 529, 611, 612, 613, 618, 619, 623, 624, 733, 737, 913, 921, 977, 989, 991, 995, 999, 1005, 1037, 1038, 1041, 1043], "noise_variance_": [95, 187, 528, 530, 537, 652, 1034, 1041], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 169, 370, 407, 410, 413, 469, 512, 513, 514, 623, 624, 625, 626, 645, 667, 674, 675, 832, 833, 834, 835, 836, 979, 981, 984, 987, 1005, 1011, 1019, 1022], "subcompon": [95, 410], "ica_estim": 95, "15e": 95, "sparsepca": [95, 527, 529, 530, 531, 533, 535, 536, 537, 538, 541, 542, 1027, 1034, 1035, 1037, 1038, 1040, 1041, 1042], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 366, 410, 527, 534, 538, 541, 542, 1028, 1030, 1037, 1038, 1040, 1041, 1042, 1043], "batch_dict_estim": 95, "That": [95, 111, 148, 188, 228, 260, 264, 350, 351, 365, 372, 386, 392, 409, 414, 415, 439, 442, 443, 553, 560, 589, 812, 905, 906, 974, 982, 983, 985, 991, 1001, 1036, 1037], "enhanc": [95, 203, 377, 378, 382, 390, 392, 405, 985, 1003, 1025, 1026, 1027, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "consum": [95, 360, 372, 380, 392, 396, 405, 409, 412, 445, 797, 798, 857, 858, 941, 942, 981, 1009, 1032, 1044], "kmeans_estim": 95, "factoranalysi": [95, 103, 106, 410, 540, 1028, 1030, 1039, 1041], "heteroscedast": [95, 103, 124, 201, 410, 873, 885], "fa_estim": 95, "wrap": [95, 116, 124, 283, 372, 380, 392, 429, 504, 581, 582, 653, 672, 823, 881, 975, 985, 988, 1000, 1005, 1027, 1032, 1035, 1037, 1038, 1040, 1042], "colormap": [95, 113, 159, 191, 208, 336, 341, 355, 693, 1040], "uv": [95, 410], "x_1": [95, 143, 154, 196, 200, 408, 410, 412, 415, 609, 621, 653, 870, 897, 898, 981, 987, 989, 995, 999], "x_n": [95, 410, 897, 898, 987, 989, 999], "dict_pos_dict_estim": 95, "positive_dict": [95, 527, 533, 541, 542], "dict_pos_code_estim": 95, "fit_algorithm": [95, 527, 533, 1042, 1043], "cd": [95, 148, 375, 376, 378, 382, 384, 410, 467, 468, 474, 527, 533, 535, 536, 539, 541, 542, 543, 981, 1020, 1032, 1042], "positive_cod": [95, 527, 533, 538, 541, 542], "dict_pos_estim": 95, "016": [95, 107, 145, 149, 329, 330], "plot_faces_decomposit": [95, 107], "imagin": [96, 151, 235, 340, 409, 410, 413, 981], "plai": [96, 125, 153, 182, 208, 254, 294, 332, 333, 364, 390, 1020], "microphon": 96, "s1": [96, 148, 159, 187, 188, 375, 1019], "sinusoid": [96, 112, 124, 183, 234, 978, 1019], "s2": [96, 148, 159, 187, 188, 375, 546, 1019], "sawtooth": [96, 1019], "saw": [96, 200, 203, 1019], "tooth": [96, 1019], "s_": [96, 264, 982, 993, 995, 1019], "a_": [96, 402, 405, 534, 536, 543, 981, 1019], "mixing_": [96, 97, 529, 1019], "prove": [96, 1009], "revert": [96, 626, 628, 629, 1034, 1039], "unmix": [96, 417, 529], "allclos": [96, 128, 997, 1019], "mean_": [96, 264, 528, 529, 530, 535, 537, 539, 877, 995, 1019, 1035], "orthogon": [96, 97, 98, 166, 177, 218, 404, 410, 522, 527, 533, 535, 538, 539, 544, 660, 661, 681, 682, 997, 1007, 1022, 1027], "steelblu": [96, 97, 133], "sig": 96, "353": [96, 107, 1020], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 404, 417, 1001, 1021, 1022], "geometr": [97, 405, 684, 700, 726, 752, 982, 1035], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 251], "axis_list": 97, "x_axi": [97, 207, 264], "y_axi": [97, 207], "quiver": 97, "hline": 97, "set_zord": 97, "plot_ica_vs_pca": [97, 107], "firstli": [98, 364, 390, 653, 1020], "undistort": 98, "noiseless": [98, 983], "pursuit": [98, 166, 177, 218, 410, 470, 522, 527, 533, 538, 544, 660, 661, 681, 682, 1007, 1022, 1027], "omp": [98, 105, 198, 410, 527, 533, 538, 544, 660, 661, 681, 682, 1007, 1022, 1027, 1035], "promin": [98, 392], "reminisc": 98, "downsampl": 98, "075": [98, 330, 350], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_steps_": [98, 445, 533, 534, 1040], "reconstruct_from_patches_2d": [98, 413, 579], "intercept": [98, 191, 208, 216, 345, 392, 478, 479, 480, 545, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 683, 872, 876, 879, 897, 898, 904, 981, 983, 985, 990, 999, 1000, 1030, 1032, 1036, 1037], "transform_algorithm": [98, 105, 527, 533, 538, 1043], "n1": 98, "atom": [98, 105, 410, 527, 533, 535, 538, 539, 541, 542, 649, 659, 680, 981, 1027, 1040], "transform_n_nonzero_coef": [98, 105, 527, 533, 538], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 527, 533, 538, 1040], "set_param": [98, 106, 115, 121, 124, 170, 171, 179, 187, 188, 192, 203, 207, 233, 238, 273, 286, 315, 339, 350, 381, 392, 405, 406, 412, 415, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 975, 991, 1011, 1018, 1027, 1033, 1034, 1035, 1040, 1041], "62": [98, 170, 175, 217, 254, 320, 325, 360, 373, 405, 489, 490, 837, 838, 1023, 1030], "288": [98, 107, 531, 537], "plot_image_denois": [98, 107], "ipca": [99, 529, 530], "flip": [99, 578, 737, 934, 987, 1031, 1040], "incrementalpca": [99, 366, 410, 529, 531, 535, 537, 540, 1031, 1034, 1035, 1037, 1038, 1041], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 126, 205, 216, 223, 247, 248, 267], "x_transform": [99, 129, 235, 481, 527, 528, 529, 530, 531, 533, 535, 539, 562, 634, 635, 684, 685, 686, 687], "nmean": 99, "shadow": [99, 104, 105, 223, 326, 343, 351, 413], "scatterpoint": [99, 104, 223, 247, 326], "plot_incremental_pca": [99, 107], "nest": [100, 111, 166, 188, 235, 253, 276, 365, 384, 392, 395, 405, 409, 415, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 458, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 500, 515, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 799, 808, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 985, 988, 1027, 1028, 1031, 1033, 1034, 1035, 1041], "train_ax": 100, "test_ax": 100, "straight": [100, 189, 195, 197, 257, 340, 364], "inner": [100, 124, 261, 265, 326, 364, 413, 439, 510, 542, 578, 585, 644, 665, 676, 770, 772, 977, 985, 995, 1000, 1028, 1031, 1041], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 381, 982], "untangl": 100, "mind": [100, 168, 169, 170, 217, 309, 310, 349, 350, 360, 378, 399, 407, 409, 412, 642, 643, 700, 981, 1000, 1005, 1011, 1018], "investig": [100, 106, 111, 164, 344, 378, 981], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 117, 121, 148, 172, 187, 188, 278, 283, 316, 320, 349, 364, 365, 380, 383, 386, 387, 390, 392, 401, 402, 405, 410, 412, 413, 545, 581, 582, 589, 593, 603, 604, 821, 824, 862, 951, 974, 977, 979, 981, 985, 988, 995, 1000, 1009, 1035, 1036, 1037, 1041, 1043, 1044], "analyt": [100, 410, 415, 528, 616, 704, 975, 979, 985, 1004, 1009], "kernelridg": [100, 151, 234, 668, 978, 1031], "kernal": 100, "relianc": [100, 203], "578": [100, 107], "plot_kernel_pca": [100, 107], "aid": [101, 257, 405, 787, 788, 982, 1009, 1027, 1039], "kevin": [101, 639, 1029, 1031, 1033, 1034, 1037, 1038, 1039, 1041, 1042], "hugh": [101, 872, 1029, 1040], "pdf": [101, 148, 260, 288, 305, 375, 378, 405, 414, 438, 445, 527, 530, 533, 537, 637, 640, 645, 654, 660, 662, 663, 667, 672, 675, 678, 679, 681, 682, 688, 834, 835, 846, 853, 890, 892, 981, 998, 1001, 1008, 1023, 1027], "30000": [101, 373], "pdf_z": 101, "plot_fig": [101, 196], "fig_num": [101, 196], "pca_scor": [101, 103], "vt": [101, 546], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 170, 196], "172": [101, 107, 384, 489, 490, 645, 981], "plot_pca_3d": [101, 107], "cla": 102, "plot_pca_iri": [102, 107], "homoscedast": [103, 231, 309, 985, 1035], "succe": [103, 183], "subspac": [103, 408, 412, 448, 511, 551, 552, 687, 691, 934, 979, 988, 991, 997, 1009, 1019], "overestim": [103, 360, 409], "circumst": [103, 217, 988, 1005], "nip": [103, 375, 511, 537, 562, 637, 985], "604": [103, 170, 537], "minka": [103, 537, 981], "deni": [103, 1029, 1030, 1034, 1035, 1036, 1042, 1043], "engemann": [103, 1029, 1030, 1034], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 138, 163, 164, 166, 253, 256, 265, 274, 276, 321, 339, 360, 378, 380, 390, 396, 409, 412, 516, 571, 699, 737, 794, 818, 820, 905, 906, 974, 985, 1015, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1039, 1040, 1043, 1044], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 137, 189, 259, 263], "violet": [103, 1043], "364": [103, 107, 133, 135, 217, 218, 467, 468, 1028], "plot_pca_vs_fa_model_select": [103, 107], "92461872": 104, "05306648": 104, "x_r": [104, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "x_r2": 104, "195": [104, 107, 489, 490], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 410, 527, 533, 536, 544, 1034, 1035, 1037, 1039, 1041], "mexican": 105, "piecewis": [105, 318, 402, 976, 981, 995, 1001], "matter": [105, 251, 340, 360, 405, 406, 412, 563, 664, 672, 674, 981, 1031], "motiv": [105, 378, 380, 392, 977, 985, 995, 1009, 1040], "heavier": [105, 407, 981], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 527, 533, 538, 544, 1037], "n_nonzero": 105, "coder": [105, 538, 712], "flatnonzero": [105, 187, 259, 268, 269, 776], "soft": [105, 132, 133, 378, 392, 565, 566, 893, 901, 999, 1009, 1032], "debias": 105, "lstsq": [105, 378, 653, 666], "rcond": 105, "281": [105, 107], "plot_sparse_cod": [105, 107], "uncov": [106, 691], "inher": [106, 194, 360, 405, 410, 975, 977, 979, 980, 982, 986], "varimax": [106, 410, 528, 1039], "jona": [106, 1039], "sassenhagen": [106, 1039], "set_yticklabel": [106, 154, 163, 164, 172, 271, 351], "n_comp": [106, 175], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "437": [106, 107, 350], "plot_varimax_fa": [106, 107], "411": [107, 169, 407, 417, 469, 529], "auto_examples_decomposit": 107, "custom": [108, 166, 239, 253, 261, 276, 285, 290, 315, 331, 336, 347, 349, 351, 370, 373, 376, 380, 385, 386, 387, 390, 391, 392, 404, 405, 406, 409, 415, 464, 485, 489, 490, 498, 500, 534, 536, 543, 545, 553, 554, 560, 561, 567, 569, 598, 627, 686, 695, 709, 794, 823, 861, 895, 902, 969, 974, 979, 985, 988, 1005, 1006, 1009, 1020, 1022, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044], "__sklearn_is_fitted__": [108, 166, 380, 419, 422, 969, 1040, 1041], "convent": [109, 260, 367, 378, 380, 381, 382, 384, 392, 423, 424, 427, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 465, 466, 467, 468, 469, 470, 471, 472, 504, 505, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 543, 559, 562, 565, 566, 577, 578, 579, 584, 585, 587, 623, 624, 625, 626, 673, 684, 685, 686, 687, 714, 792, 793, 825, 826, 841, 843, 845, 849, 861, 869, 872, 873, 875, 878, 889, 890, 901, 928, 929, 985, 1012, 1027, 1034, 1035, 1038, 1040, 1041, 1043, 1044], "subclass": [109, 380, 415, 570, 951, 1032, 1035, 1040], "showcas": [109, 380], "statu": [109, 160, 372, 382, 395, 492, 837, 838], "_is_fit": 109, "snippet": [109, 360, 378, 383, 386, 390, 401, 412, 413, 414, 975, 995, 1008, 1040], "customestim": 109, "classifiermixin": [109, 235, 378, 380, 392, 409, 1038], "kushan": 109, "kushansharma1": 109, "classes_": [109, 191, 208, 229, 235, 269, 324, 325, 378, 380, 392, 433, 434, 545, 546, 547, 549, 551, 553, 555, 557, 560, 563, 565, 589, 590, 606, 627, 654, 655, 662, 664, 670, 671, 672, 693, 696, 698, 783, 794, 797, 798, 808, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 839, 844, 847, 854, 857, 864, 865, 868, 878, 892, 893, 894, 897, 899, 902, 905, 907, 910, 985, 996, 999, 1028, 1031, 1032, 1034, 1037, 1039], "track": [109, 115, 123, 325, 378, 381, 382, 401, 530, 954, 986, 1005, 1006, 1034, 1037], "notfittederror": [109, 392, 846, 969, 1031, 1033, 1036, 1037, 1043], "boolean": [109, 358, 373, 378, 380, 387, 406, 412, 413, 414, 460, 557, 558, 577, 578, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 625, 628, 629, 632, 645, 667, 695, 826, 832, 853, 860, 880, 913, 969, 975, 981, 987, 992, 995, 1001, 1027, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042], "sklearn_is_fit": 109, "predictor": [110, 135, 166, 199, 217, 380, 391, 392, 406, 408, 409, 412, 415, 462, 463, 478, 479, 480, 492, 512, 513, 514, 551, 552, 558, 561, 564, 598, 606, 626, 628, 629, 644, 649, 653, 665, 669, 676, 697, 818, 820, 829, 830, 857, 858, 870, 871, 877, 959, 981, 986, 1028, 1034, 1037], "stack": [110, 135, 166, 288, 358, 377, 386, 390, 392, 404, 411, 460, 462, 463, 492, 511, 558, 561, 563, 564, 608, 623, 624, 626, 649, 669, 697, 818, 820, 858, 862, 870, 871, 877, 959, 975, 1005, 1006, 1007, 1008, 1022, 1027, 1030, 1034, 1035, 1036, 1037, 1038], "isolationforest": [110, 135, 166, 228, 238, 627, 823, 901, 991, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043], "oob": [110, 123, 135, 166, 412, 511, 560, 1006, 1029, 1040], "votingclassifi": [110, 135, 166, 396, 500, 560, 566, 627, 654, 835, 839, 902, 905, 974, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041], "vote": [110, 117, 132, 133, 135, 166, 281, 340, 392, 393, 404, 497, 551, 552, 553, 556, 560, 561, 565, 566, 653, 825, 839, 840, 845, 847, 986, 988, 1007, 1018, 1022, 1027, 1030, 1032, 1037], "versu": [110, 131, 135, 166, 169, 177, 208, 214, 218, 234, 248, 253, 276, 291, 323, 330, 405, 409, 412, 415, 500, 530, 552, 606, 627, 635, 654, 655, 662, 664, 670, 671, 672, 673, 778, 794, 799, 819, 829, 858, 893, 894, 901, 902, 906, 974, 981, 985, 986, 991, 998, 999, 1000, 1018, 1035], "experi": [111, 154, 158, 168, 169, 170, 171, 175, 201, 278, 310, 344, 350, 351, 365, 372, 378, 381, 404, 409, 511, 723, 780, 981, 986, 997, 1003, 1004, 1005, 1009, 1018, 1020], "depict": [111, 262, 412, 984], "zhu": [111, 412, 515, 549, 654, 892], "principl": [111, 158, 288, 310, 351, 378, 390, 392, 393, 409, 412, 934, 974, 984, 988, 999, 1034], "repeatedli": [111, 319, 360, 392, 405, 412, 415, 504, 542, 662, 663, 672, 673, 674, 776, 975, 989, 1015], "zou": [111, 187, 412, 515, 549, 652, 981, 999], "rosset": [111, 412, 515, 549], "hasti": [111, 114, 115, 122, 126, 148, 187, 259, 375, 409, 412, 515, 516, 549, 555, 556, 624, 652, 717, 718, 719, 827, 844, 890, 905, 906, 975, 979, 981, 986, 992, 997, 999, 1001], "2009": [111, 114, 115, 126, 183, 405, 409, 410, 412, 413, 515, 516, 524, 527, 533, 534, 536, 537, 540, 543, 549, 555, 556, 631, 667, 675, 692, 828, 905, 906, 933, 934, 981, 985, 986, 992, 1001], "349": [111, 384, 549], "360": [111, 549], "sphere": [111, 166, 219, 220, 226, 350, 411, 515, 585, 684, 685, 686, 687, 688, 759, 920, 979, 983, 988], "roughli": [111, 124, 188, 251, 270, 283, 310, 364, 392, 410, 413, 515, 982, 1027], "2_000": 111, "percent": [111, 488, 596, 998], "base_estim": [111, 317, 380, 403, 433, 549, 550, 551, 552, 828, 831, 894, 974, 981, 1038, 1040, 1041, 1042, 1043], "predecessor": [111, 446, 452, 453], "mistak": [111, 145, 325, 360, 405, 409, 730, 868, 882, 883, 885, 886, 887, 888, 981, 986], "incorrect": [111, 168, 267, 327, 360, 378, 405, 603, 604, 628, 629, 729, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "consecut": [111, 200, 403, 409, 413, 439, 443, 445, 446, 448, 452, 455, 458, 533, 534, 535, 542, 598, 641, 662, 663, 664, 672, 673, 674, 792, 793, 799, 832, 833, 834, 835, 836, 854, 855, 974, 995, 1020, 1035], "weak_learn": 111, "max_leaf_nod": [111, 117, 126, 199, 318, 358, 412, 553, 554, 555, 556, 557, 558, 560, 561, 562, 905, 906, 907, 908, 1030, 1036, 1038], "adaboost_clf": 111, "misclassification_error": 111, "dummyclassifi": [111, 263, 548, 985, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037], "preval": [111, 315, 392, 696, 708, 985], "dummi": [111, 112, 199, 217, 235, 263, 367, 380, 383, 400, 870, 879, 995, 1001, 1022, 1028, 1030, 1031, 1032, 1034], "dummy_clf": [111, 547], "weak_learners_misclassification_error": 111, "dummy_classifiers_misclassification_error": 111, "475": [111, 148, 301, 303], "692": 111, "surpass": [111, 340, 854, 855], "staged_predict": [111, 125, 412, 549, 550, 555, 556, 557, 558, 1027, 1039], "conclud": [111, 169, 179, 217, 260, 351, 360, 393, 857], "boosting_error": 111, "missclassif": 111, "jitter": [111, 646, 650, 1038], "stagewis": 111, "estimator_errors_": [111, 549, 550], "estimator_weights_": [111, 549, 550], "weak_learners_info": 111, "layout": [111, 305, 390, 897, 898, 899, 902, 918, 1000, 1030, 1032, 1044], "get_figur": 111, "reweight": [111, 350, 392, 407, 412, 586, 587, 644, 665, 676], "formul": [111, 151, 160, 203, 269, 378, 407, 410, 413, 415, 418, 471, 545, 546, 553, 560, 646, 647, 650, 651, 652, 654, 655, 661, 666, 758, 764, 793, 899, 902, 905, 907, 981, 985, 986, 995, 1007, 1022], "mathemat": [111, 169, 187, 216, 263, 370, 375, 378, 392, 394, 407, 410, 411, 545, 546, 553, 560, 631, 642, 652, 787, 788, 793, 855, 899, 902, 905, 907, 981, 985, 995, 997, 1007, 1009, 1018, 1022, 1041], "th": [111, 238, 318, 358, 391, 405, 409, 412, 420, 437, 441, 447, 449, 455, 459, 468, 553, 554, 555, 556, 557, 558, 560, 561, 562, 589, 590, 628, 644, 645, 665, 667, 676, 692, 714, 775, 815, 878, 922, 975, 981, 985, 989, 992, 999, 1000, 1042], "boil": [111, 381, 407], "forc": [111, 151, 184, 203, 283, 309, 349, 372, 376, 382, 400, 409, 412, 446, 453, 492, 602, 605, 642, 643, 648, 649, 653, 656, 657, 658, 659, 668, 669, 670, 677, 680, 683, 749, 773, 776, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 899, 900, 901, 902, 903, 915, 917, 918, 995, 1022, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043], "442": [111, 135, 148, 164, 375, 497, 1018], "plot_adaboost_multiclass": [111, 135], "1d": [112, 114, 166, 170, 200, 232, 284, 297, 343, 356, 378, 385, 387, 391, 392, 406, 411, 460, 463, 613, 629, 649, 653, 656, 659, 680, 699, 708, 709, 715, 724, 725, 729, 733, 737, 778, 779, 782, 791, 839, 840, 841, 842, 843, 845, 847, 848, 849, 862, 913, 917, 918, 948, 972, 986, 1011, 1018, 1027, 1032, 1033, 1034, 1036, 1040, 1041], "299": [112, 676], "drucker": [112, 412, 550], "1997": [112, 373, 410, 412, 531, 550, 686, 690, 981, 982, 985], "decisiontreeregressor": [112, 114, 239, 306, 315, 321, 356, 357, 383, 550, 552, 554, 555, 556, 558, 561, 628, 629, 905, 908, 910, 929, 975, 1001, 1028, 1029, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "adaboostregressor": [112, 396, 412, 549, 558, 1029, 1030, 1033, 1036, 1037, 1040, 1042, 1043], "regr_1": [112, 356, 357], "regr_2": [112, 356, 357], "y_1": [112, 356, 357, 408, 985, 989, 999], "y_2": [112, 356, 357, 989], "466": [112, 135, 992], "plot_adaboost_regress": [112, 135], "stump": [113, 412, 555, 1038], "puriti": [113, 909, 911], "circleci": [113, 155, 157, 159, 160, 191, 208, 246, 302, 341, 355, 378], "plot_adaboost_twoclass": [113, 135], "bdt": 113, "plot_color": [113, 355], "br": 113, "plot_step": [113, 120, 355], "class_nam": [113, 254, 878, 909, 910, 911, 1001, 1043], "xx0": [113, 627], "xx1": [113, 627], "twoclass_output": 113, "plot_rang": 113, "726": [113, 135, 993], "irreduc": [114, 985], "dark": [114, 169, 336, 373, 1044], "light": [114, 373], "beam": [114, 1027], "pointwis": [114, 158, 416, 440], "offset": [114, 175, 390, 407, 410, 465, 504, 505, 559, 628, 629, 637, 638, 640, 641, 673, 723, 770, 772, 843, 901, 985, 999, 1018, 1035], "narrow": [114, 124, 305, 307, 383, 837, 838], "bootstrap": [114, 115, 123, 163, 263, 272, 317, 409, 412, 550, 551, 552, 553, 554, 559, 560, 561, 923, 956, 981, 1027, 1028, 1030, 1032, 1035, 1037, 1040], "stem": [114, 171, 198, 251, 409, 413, 977, 987], "tibshirani": [114, 115, 126, 148, 187, 259, 375, 409, 412, 516, 555, 556, 624, 652, 717, 718, 719, 827, 844, 905, 906, 975, 979, 981, 986, 992, 1001], "friedman": [114, 115, 126, 259, 407, 409, 412, 474, 512, 513, 514, 516, 554, 555, 556, 561, 589, 590, 827, 905, 906, 908, 979, 981, 986, 992, 1001], "springer": [114, 115, 126, 259, 403, 405, 409, 410, 412, 516, 531, 555, 556, 686, 690, 692, 701, 716, 721, 735, 736, 751, 792, 905, 906, 982, 985, 986, 992, 1001], "0255": 114, "0003": 114, "0152": 114, "0098": 114, "0196": 114, "0004": [114, 310], "0092": 114, "baggingregressor": [114, 396, 412, 551, 908, 975, 1030, 1033, 1035, 1038, 1042, 1043], "n_repeat": [114, 118, 125, 147, 169, 171, 172, 260, 278, 315, 409, 511, 630, 809, 810, 993], "knn": [114, 132, 139, 163, 286, 291, 292, 295, 310, 317, 326, 349, 412, 598, 846, 892, 893, 988, 998, 1018, 1033], "y_predict": [114, 380, 1027], "y_error": [114, 205], "y_nois": 114, "y_bia": 114, "y_var": 114, "plot_bias_vari": [114, 135], "z_i": [115, 989], "y_i": [115, 318, 344, 403, 412, 976, 977, 981, 985, 989, 999, 1000, 1001], "whilst": [115, 222], "practition": [115, 203], "suitabl": [115, 124, 183, 185, 203, 300, 351, 372, 373, 384, 387, 405, 410, 413, 448, 458, 464, 483, 501, 504, 623, 631, 832, 833, 836, 871, 872, 895, 950, 954, 979, 981, 984, 995, 997, 999, 1005, 1008, 1020, 1041, 1042], "ed": [115, 126, 405, 412, 516, 555, 556, 997, 1027, 1034], "p592": 115, "593": 115, "kian": [115, 1032, 1042, 1043], "ho": [115, 412, 551, 552, 985, 1032, 1035, 1036, 1041], "hui": [115, 187, 534, 536, 543, 652, 981], "ordereddict": 115, "123": [115, 133, 234, 249, 252, 350, 360, 412, 512, 513, 514, 551, 552, 830, 986, 993], "warm_start": [115, 155, 192, 318, 380, 384, 392, 412, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 606, 642, 644, 645, 648, 654, 656, 658, 662, 663, 664, 665, 672, 673, 674, 676, 792, 793, 846, 854, 855, 991, 1007, 1022, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1041, 1043], "disabl": [115, 312, 349, 376, 378, 396, 413, 445, 456, 464, 533, 534, 535, 542, 555, 556, 557, 558, 856, 895, 917, 918, 995, 1033, 1036, 1040, 1042], "trajectori": 115, "ensemble_clf": 115, "oob_scor": [115, 412, 551, 552, 553, 554, 560, 561, 1032, 1034], "log2": [115, 209, 240, 553, 554, 555, 556, 560, 561, 905, 906, 907, 908, 986], "error_r": 115, "min_estim": 115, "max_estim": 115, "oob_error": 115, "oob_score_": [115, 551, 552, 553, 554, 555, 556, 560, 561, 1029, 1043], "clf_err": 115, "plot_ensemble_oob": [115, 135], "betatim": [116, 130, 1042], "leak": [116, 265, 349, 360, 406, 409, 857, 882, 883, 885, 886, 887, 888, 995, 1027, 1034, 1037, 1043, 1044], "80_000": 116, "x_full_train": 116, "y_full_train": 116, "x_train_ensembl": 116, "x_train_linear": 116, "y_train_ensembl": 116, "y_train_linear": 116, "gradientboostingclassifi": [116, 122, 123, 126, 307, 360, 390, 549, 557, 628, 629, 986, 992, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "random_forest": 116, "gradient_boost": [116, 1029, 1030, 1036], "histgradientboostingclassifi": [116, 117, 315, 316, 317, 318, 320, 365, 555, 560, 628, 629, 975, 1005, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "randomtreesembed": [116, 129, 221, 412, 907, 1028, 1035, 1036, 1040, 1041, 1042], "random_tree_embed": 116, "rt_model": 116, "randomtreesembeddingrandomtreesembed": 116, "rf_appli": 116, "rf_leaves_yield": 116, "kw_arg": [116, 861, 995, 1033], "rf_model": 116, "0x7fcbb4263ca0": 116, "functiontransformerfunctiontransform": 116, "gbdt_appli": 116, "gbdt_leaves_yield": 116, "gbdt_model": 116, "0x7fcb9bf57280": 116, "roccurvedisplai": [116, 238, 241, 257, 269, 270, 315, 385, 783, 784, 991, 1024, 1037, 1043, 1044], "rt": 116, "rf": [116, 117, 130, 133, 134, 171, 315, 360, 412, 563, 565, 566], "gbdt": [116, 170, 315, 316, 321, 383, 412], "model_displai": 116, "plot_feature_transform": [116, 135], "hgbt": [117, 412], "fetch_california_h": [117, 163, 164, 305, 317, 373, 391, 406, 1036, 1038], "20640": [117, 164, 373, 486], "n_core": 117, "only_physical_cor": 117, "unnecessari": [117, 245, 383, 439, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 701, 988, 995, 1006, 1009, 1030, 1032, 1037, 1038, 1040, 1043], "min_samples_leaf": [117, 123, 124, 171, 315, 318, 354, 412, 553, 554, 555, 556, 557, 558, 560, 561, 562, 905, 906, 907, 908, 1001, 1033], "return_train_scor": [117, 264, 311, 409, 794, 797, 798, 808, 820, 1033, 1034, 1036], "wast": [117, 384, 409, 410, 974], "plotli": [117, 261, 378, 395, 398], "cursor": [117, 261], "px": [117, 261], "make_subplot": 117, "shared_yax": 117, "subplot_titl": 117, "model_nam": [117, 238, 281], "colors_list": 117, "param_nam": [117, 261, 275, 321, 344, 396, 816, 824, 980, 1020], "param_": 117, "scatter_fig": 117, "mean_fit_tim": [117, 285, 794, 808], "error_x": [117, 261], "std_fit_tim": [117, 285, 794, 808], "error_i": [117, 261], "hover_data": [117, 261], "line_fig": 117, "scatter_trac": 117, "line_trac": 117, "add_trac": 117, "mean_score_tim": [117, 258, 261, 794, 808], "std_score_tim": [117, 261, 794, 808], "update_layout": [117, 261], "xaxis2": 117, "traceord": 117, "borderwidth": 117, "plateau": [117, 147, 258, 262], "earlier": [117, 170, 203, 372, 378, 408, 828, 831, 995, 1003, 1025, 1028, 1040, 1042], "never": [117, 236, 360, 378, 387, 390, 399, 405, 406, 408, 409, 446, 453, 519, 542, 551, 552, 553, 560, 857, 858, 977, 995, 1037, 1040], "hgbdt": 117, "domin": [117, 164, 172, 199, 204, 238, 269, 310, 373, 384, 403, 877, 987, 995, 1001, 1043], "ever": [117, 130, 387, 412, 1009], "disput": 117, "alwai": [117, 121, 124, 178, 199, 217, 225, 232, 263, 266, 270, 312, 333, 340, 344, 350, 360, 364, 365, 372, 376, 378, 379, 380, 384, 391, 392, 395, 403, 405, 406, 409, 412, 413, 414, 415, 428, 439, 445, 460, 461, 463, 465, 478, 479, 480, 484, 492, 504, 505, 540, 545, 547, 548, 550, 552, 554, 555, 556, 557, 558, 560, 561, 564, 566, 577, 584, 585, 587, 590, 607, 623, 624, 626, 628, 629, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 672, 674, 675, 691, 701, 705, 711, 717, 718, 719, 727, 729, 730, 734, 777, 780, 781, 792, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 830, 831, 840, 841, 848, 849, 855, 862, 870, 875, 877, 890, 898, 899, 900, 902, 903, 905, 906, 908, 935, 944, 945, 974, 975, 977, 979, 981, 984, 985, 988, 991, 993, 997, 998, 1000, 1001, 1009, 1011, 1018, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042], "thumb": [117, 175, 364, 378, 379, 390, 405, 654, 655, 662, 663, 664, 672, 673, 674, 897, 985], "55": [117, 135, 169, 175, 194, 199, 217, 222, 325, 383, 405, 409, 487, 593, 794, 800, 808, 821, 985, 1027], "412": [117, 135, 213, 218, 267, 276, 492, 981], "plot_forest_hist_grad_boosting_comparison": [117, 135], "artifici": [118, 121, 128, 148, 164, 203, 220, 234, 302, 349, 373, 374, 375, 383, 402, 404, 405, 409, 410, 531, 692, 827, 854, 855, 978, 982, 984, 986, 992, 997, 1001, 1006, 1009, 1027], "feature_importances_": [118, 119, 125, 148, 171, 172, 392, 412, 414, 549, 550, 553, 554, 555, 556, 560, 561, 562, 589, 590, 593, 905, 906, 907, 908, 1029, 1032, 1036], "estimators_": [118, 120, 236, 315, 392, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 825, 826, 827, 828, 829, 830, 831, 1028, 1034, 1041], "005": [118, 260, 264, 288, 305, 350, 384], "forest_import": 118, "mdi": [118, 125, 166, 167, 172, 173, 412, 460, 492, 560, 626, 630, 823, 857, 871, 993], "overcom": [118, 203, 364, 413], "permutation_import": [118, 119, 125, 171, 172, 315, 412, 549, 550, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 993, 1037, 1039, 1040], "importances_mean": [118, 125, 171, 172, 315, 630, 993], "importances_std": [118, 630, 993], "omit": [118, 168, 169, 329, 383, 418, 471, 530, 662, 664, 672, 801, 803, 825, 826, 829, 832, 833, 834, 835, 836, 854, 983, 990], "plot_forest_import": [118, 135], "hotter": 119, "job": [119, 248, 378, 382, 386, 412, 416, 433, 440, 442, 444, 446, 448, 453, 454, 457, 460, 463, 464, 468, 527, 531, 532, 533, 535, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 598, 606, 630, 635, 653, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 856, 859, 892, 893, 895, 951, 1009, 1013], "five": [119, 246, 325, 328, 373, 527, 535, 541, 982, 988, 1000, 1009, 1027], "drawback": [119, 216, 977, 980], "img_shap": 119, "imp_reshap": 119, "met": [119, 235, 380, 414, 530, 537, 623, 667, 981, 985, 1035], "plot_forest_importances_fac": [119, 135], "fourth": [120, 1011], "descend": [120, 623, 1037], "extratreesclassifi": [120, 129, 412, 414, 554, 560, 562, 907, 908, 986, 1030, 1031, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "decisiontre": [120, 1032], "consol": [120, 376, 1012], "extratre": [120, 129, 364, 1030], "sequenti": [120, 142, 149, 166, 193, 261, 317, 376, 410, 412, 413, 496, 497, 530, 589, 593, 598, 599, 601, 602, 642, 643, 648, 649, 654, 656, 657, 658, 659, 669, 783, 857, 858, 877, 975, 993, 999, 1005, 1007, 1022, 1027, 1036, 1039], "9266666666666666": 120, "9933333333333333": 120, "9866666666666667": 120, "rdylbu": [120, 355], "plot_step_coars": 120, "plot_idx": 120, "model_titl": 120, "model_detail": 120, "blend": [120, 131, 311, 392, 409, 1005], "estimator_alpha": 120, "coarser": [120, 124], "regularli": [120, 278, 390, 987], "xx_coarser": 120, "yy_coars": 120, "z_points_coars": 120, "cs_point": 120, "866": [120, 135, 993], "plot_forest_iri": [120, 135], "equidist": [121, 688], "lowa": 121, "sale": [121, 238, 260, 985, 1009], "42165": 121, "categorical_columns_subset": 121, "bldgtype": 121, "garagefinish": 121, "lotconfig": 121, "masvnrtyp": [121, 131], "housestyl": [121, 131], "fireplacequ": 121, "extercond": 121, "exterqu": [121, 131], "poolqc": 121, "numerical_columns_subset": 121, "3ssnporch": 121, "fireplac": 121, "bsmthalfbath": 121, "halfbath": 121, "garagecar": [121, 131], "totrmsabvgrd": 121, "bsmtfinsf1": [121, 131], "bsmtfinsf2": 121, "grlivarea": 121, "screenporch": 121, "n_categorical_featur": [121, 557, 558, 628, 629], "n_numerical_featur": 121, "1460": [121, 131], "make_column_transform": [121, 131, 169, 230, 316, 406, 460, 462, 1035], "dropper": 121, "hist_drop": 121, "hist_one_hot": 121, "etc": [121, 199, 217, 255, 264, 265, 360, 364, 366, 378, 380, 382, 383, 390, 391, 392, 396, 402, 406, 409, 413, 485, 499, 523, 553, 554, 560, 561, 664, 672, 688, 714, 766, 794, 808, 828, 831, 861, 872, 905, 906, 907, 908, 909, 911, 917, 918, 928, 943, 974, 975, 979, 985, 988, 1005, 1006, 1009, 1027, 1034, 1036, 1037], "use_encoded_valu": [121, 131, 171, 238, 311, 871, 995, 1039], "unknown_valu": [121, 131, 171, 238, 311, 871, 995, 1039, 1041, 1042], "hist_ordin": 121, "n_unique_categori": [121, 311], "hist_n": 121, "mean_absolute_percentage_error": [121, 985, 1039, 1041], "neg_mean_absolute_percentage_error": [121, 985, 993], "n_cv_fold": [121, 311, 800, 816, 821, 824], "dropped_result": 121, "one_hot_result": 121, "ordinal_result": 121, "native_result": 121, "figure_titl": 121, "plot_info": 121, "test_scor": [121, 123, 125, 207, 259, 262, 278, 311, 344, 354, 391, 409, 800, 816, 820, 821, 824], "y_limit": 121, "mape_cv_mean": 121, "mape_cv_std": 121, "c0": [121, 231, 311], "slowest": [121, 933, 934], "theori": [121, 234, 250, 344, 375, 404, 405, 409, 412, 686, 690, 721, 751, 889, 890, 934, 974, 981, 982, 984, 985, 986, 1000, 1001], "poorer": [121, 360, 410], "slight": [121, 204, 317, 412, 445, 1037], "acf": 121, "bde": 121, "isol": [121, 127, 228, 238, 350, 376, 378, 384, 395, 559, 843, 901, 1036, 1037], "bcde": 121, "histgradientboostingregressor__max_depth": 121, "histgradientboostingregressor__max_it": 121, "altogeth": [121, 384, 1035], "337": [121, 135, 384], "plot_gradient_boosting_categor": [121, 135], "denot": [122, 387, 392, 395, 403, 405, 409, 412, 584, 585, 587, 794, 800, 808, 816, 870, 871, 970, 974, 977, 981, 983, 985, 986, 995, 998, 1011, 1044], "kept": [122, 250, 283, 344, 372, 382, 399, 415, 492, 531, 534, 536, 537, 542, 543, 593, 606, 607, 615, 616, 640, 691, 792, 793, 918, 995, 1035, 1036], "asid": [122, 207, 399, 555, 556, 557, 558, 662, 663, 664, 672, 674, 854, 855], "n_estimators_": [122, 555, 556], "vighnesh": [122, 1032, 1033, 1035], "birodkar": [122, 1032, 1033, 1035], "vighneshbirodkar": 122, "rvraghav93": [122, 264, 305], "data_list": 122, "make_hastie_10_2": [122, 126, 264, 374, 412, 555, 992], "n_gb": 122, "score_gb": 122, "time_gb": 122, "n_gbe": 122, "gbe": 122, "gb": [122, 134, 412, 549, 629], "bar_width": 122, "bar1": 122, "crimson": 122, "bar2": 122, "coral": 122, "n_est": 122, "max_i": [122, 236, 987], "plot_gradient_boosting_early_stop": [122, 135], "fly": [123, 383, 386, 504, 505, 578, 1027, 1029, 1036], "pessimist": [123, 412], "cumul": [123, 199, 217, 405, 721, 730, 751, 874, 886, 995, 999, 1034, 1036, 1037], "demand": [123, 413, 794, 808, 818, 819], "6860": 123, "special": [123, 169, 189, 217, 278, 293, 311, 336, 372, 374, 380, 384, 390, 392, 405, 408, 410, 460, 463, 549, 551, 555, 818, 909, 974, 979, 981, 983, 984, 985, 986, 988, 1001, 1034, 1037, 1039, 1041], "expit": [123, 189, 412, 557, 981, 1034], "ridgewai": [123, 412], "gbm": [123, 412, 1030], "x3": [123, 406, 1019], "binomi": [123, 126, 412, 549, 555, 557, 981, 1041], "acc": 123, "heldout_scor": 123, "devianc": [123, 126, 199, 217, 321, 412, 549, 554, 555, 557, 558, 561, 644, 665, 676, 717, 718, 719, 742, 744, 747, 906, 908, 981, 1001, 1028, 1037, 1038, 1040, 1041, 1043], "y_proba": [123, 126, 310, 392, 857], "staged_predict_proba": [123, 126, 549, 555, 557, 1027], "cv_estim": 123, "cv_clf": 123, "val_scor": 123, "cv_score": 123, "cumsum": [123, 199, 217, 1034], "oob_improvement_": [123, 412, 555, 556, 1029], "oob_best_it": 123, "test_best_it": 123, "cv_best_it": 123, "brew": [123, 376, 395], "oob_color": 123, "174": [123, 302, 384, 580], "212": [123, 148, 265, 327, 375, 465, 496, 991, 1018], "test_color": 123, "201": [123, 148, 375, 580], "cv_color": 123, "253": [123, 530], "192": [123, 334, 347, 384, 1027], "oob_lin": 123, "test_lin": 123, "cv_line": 123, "dashdot": [123, 151, 154, 238], "xticks_po": 123, "tolist": [123, 163, 259, 317, 373], "xticks_label": 123, "357": [123, 135, 148, 350, 375, 496, 898], "plot_gradient_boosting_oob": [123, 135], "atleast_2d": [124, 380], "expected_i": 124, "amplitud": [124, 156, 158, 193, 981], "lognorm": [124, 157, 180, 249, 309, 995], "tail": [124, 164, 169, 199, 201, 260, 305, 517, 520, 981], "imposs": [124, 351, 1006], "mean_pinball_loss": [124, 318, 981, 985, 1040], "all_model": 124, "min_samples_split": [124, 125, 126, 264, 272, 306, 317, 412, 553, 554, 555, 556, 560, 561, 562, 797, 798, 905, 906, 907, 908, 974, 1001, 1033], "gbr": 124, "gbr_l": 124, "5th": [124, 159, 405], "95th": [124, 743], "y_med": 124, "fill_between": [124, 137, 151, 156, 158, 160, 178, 179, 217, 260, 262, 263, 264, 270, 800, 816], "unfortun": [124, 168, 169, 217, 386, 390, 412, 504, 505], "sinoisoid": 124, "highlight_min": [124, 188], "font": [124, 188, 213, 233, 909, 911], "pbl": 124, "715413": 124, "750348": 124, "127128": 124, "253445": 124, "379763": 124, "933253": 124, "305438": 124, "622811": 124, "940184": 124, "827917": 124, "909909": 124, "145957": 124, "382005": 124, "667219": 124, "asymmetr": [124, 201, 392, 1032], "nor": [124, 263, 349, 360, 364, 383, 390, 413, 433, 442, 590, 921, 989, 1001, 1038], "917281": 124, "767498": 124, "617715": 124, "692901": 124, "144204": 124, "245961": 124, "347717": 124, "648026": 124, "412021": 124, "607752": 124, "803483": 124, "874771": 124, "354394": 124, "355445": 124, "356497": 124, "852774": 124, "underestim": [124, 170, 199, 217, 260, 378], "extrem": [124, 199, 201, 237, 238, 305, 312, 327, 350, 378, 381, 405, 410, 553, 554, 560, 561, 562, 628, 629, 675, 719, 747, 907, 908, 909, 911, 985, 987], "coverage_fract": 124, "y_low": 124, "y_high": 124, "868": [124, 144], "hypothesi": [124, 260, 266, 409, 686, 690, 822, 982], "pinbal": [124, 318, 558, 666, 718, 743, 981, 1040, 1041], "experiment": [124, 163, 164, 199, 271, 272, 317, 318, 367, 378, 380, 381, 388, 390, 392, 396, 409, 492, 545, 623, 692, 797, 798, 955, 974, 975, 981, 984, 985, 1005, 1006, 1014, 1022, 1035, 1036, 1039, 1040, 1041, 1042, 1044], "enable_halving_search_cv": [124, 271, 272, 317, 382, 797, 798, 974], "halvingrandomsearchcv": [124, 272, 317, 396, 575, 797, 974, 1039, 1041, 1042, 1043, 1044], "make_scor": [124, 264, 396, 409, 794, 819, 820, 985, 1036, 1044], "neg_mean_pinball_loss_05p_scor": 124, "greater_is_bett": [124, 737, 985], "search_05p": 124, "max_resourc": [124, 797, 798, 974], "min_resourc": [124, 797, 798], "neg_mean_pinball_loss_95p_scor": 124, "search_95p": 124, "estimator__alpha": 124, "did": [124, 151, 169, 172, 199, 207, 217, 246, 312, 373, 623, 708, 813, 899, 1019, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042], "untun": 124, "joint": [124, 166, 170, 177, 218, 220, 406, 607, 648, 658, 688, 832, 833, 834, 835, 836, 897, 981, 982, 986, 990, 992, 996, 1027], "9026666666666666": 124, "796": 124, "sadli": 124, "plot_gradient_boosting_quantil": [124, 135], "tackl": [125, 260, 365, 378, 405, 834, 987, 1009, 1014], "katrina": [125, 1038], "ni": [125, 1033, 1038], "nilichen": 125, "reg": [125, 169, 179, 235, 306, 316, 341, 412, 554, 556, 564, 646, 647, 649, 650, 651, 652, 653, 659, 660, 661, 666, 667, 674, 675, 685, 689, 908, 981, 1032], "3025": 125, "3785": 125, "train_score_": [125, 412, 555, 556, 557, 558], "impur": [125, 172, 358, 394, 412, 414, 549, 550, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 909, 911, 1001, 1022, 1032, 1033, 1034, 1035], "feature_import": 125, "sorted_idx": [125, 315], "po": [125, 223, 413], "vert": [125, 171, 172, 315, 999], "488": [125, 135], "plot_gradient_boosting_regress": [125, 135], "consider": [126, 152, 155, 238, 255, 261, 267, 378, 415, 615, 794, 808, 974, 981, 987, 991, 999, 1009, 1044], "return_invers": [126, 380], "original_param": 126, "test_devi": 126, "143": [126, 135, 148, 222, 226, 375, 467, 468, 997, 1027, 1028], "plot_gradient_boosting_regular": [126, 135], "anomali": [127, 166, 227, 238, 243, 289, 290, 373, 404, 465, 508, 518, 559, 635, 673, 843, 858, 901, 991, 1005, 1033, 1034], "recurs": [127, 142, 149, 166, 354, 380, 404, 405, 409, 436, 437, 438, 441, 459, 498, 511, 559, 589, 590, 593, 598, 628, 629, 654, 813, 902, 985, 988, 991, 992, 1001, 1007, 1019, 1022, 1027, 1037, 1038], "deform": [127, 250, 346], "notat": [127, 392, 406, 410, 413, 586, 708, 981, 985, 1011, 1036, 1043], "120": [127, 221, 309, 313, 336, 347, 414, 586, 1027], "cluster_1": 127, "cluster_2": 127, "nuniformli": 127, "max_sampl": [127, 163, 412, 551, 552, 553, 554, 559, 560, 561, 630, 1037, 1040, 1043], "isolationforestifittedisolationforest": 127, "ax_": [127, 254, 263, 267, 269, 275, 286, 310, 315, 385, 434, 627, 693, 694, 696, 697, 698, 800, 816], "nof": 127, "444": [127, 135, 151, 161], "plot_isolation_forest": [127, 135], "trend": [128, 156, 170, 231, 300, 1009, 1034], "xgboost": [128, 412, 1005], "partialdependencedisplai": [128, 170, 239, 316, 317, 318, 320, 385, 629, 992, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "f_0": 128, "f_1": [128, 267, 985], "gbdt_no_cst": [128, 316], "histgradientboostingregressorifittedhistgradientboostingregressor": [128, 320], "gbdt_with_monotonic_cst": 128, "monotonic_cst": [128, 316, 318, 412, 553, 554, 557, 558, 560, 561, 905, 906, 907, 908, 1042], "line_kw": [128, 239, 262, 316, 628, 800, 816], "unconstrain": [128, 170, 316, 373, 999], "axes_": [128, 239, 316, 385, 628], "f_idx": 128, "oscil": [128, 170, 204, 405, 436], "x_df": 128, "gbdt_with_monotonic_cst_df": 128, "662": [128, 135], "plot_monotonic_constraint": [128, 135], "excel": [129, 372, 378, 412, 686, 690, 981, 1009], "bernoullinb": [129, 366, 833, 834, 835, 836, 986, 987, 1028, 1029, 1031, 1034, 1039, 1040, 1042], "hasher": [129, 351, 413], "transformed_grid": 129, "y_grid_pr": 129, "plot_random_forest_embed": [129, 135], "multioutput": [130, 269, 281, 367, 380, 392, 396, 428, 461, 478, 479, 480, 547, 550, 552, 553, 554, 556, 558, 560, 561, 564, 566, 607, 628, 629, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 783, 785, 786, 818, 826, 840, 848, 855, 864, 898, 900, 903, 905, 906, 907, 908, 923, 948, 949, 985, 1007, 1022, 1027, 1028, 1029, 1033, 1034, 1040, 1041], "multioutputregressor": [130, 396, 428, 461, 478, 479, 480, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 829, 831, 840, 848, 855, 898, 900, 903, 906, 908, 1033, 1034, 1036, 1038, 1039, 1043], "centr": 130, "regr_multirf": 130, "regr_rf": 130, "y_multirf": 130, "y_rf": 130, "cornflowerblu": [130, 193, 202, 209, 246, 248, 251, 267, 269, 288, 294, 356, 357], "532": [130, 135], "plot_random_forest_regression_multioutput": [130, 135], "compil": [131, 283, 351, 364, 365, 378, 379, 380, 381, 386, 387, 390, 1005, 1027], "dean": [131, 1035, 1041, 1043], "cock": [131, 1036], "becam": [131, 393, 1035], "kaggl": [131, 391], "residenti": 131, "iowa": [131, 238], "won": [131, 301, 350, 382, 405, 464, 492, 623, 624, 626, 683, 700, 713, 731, 732, 750, 752, 790, 984, 995, 1032, 1033, 1038], "load_ames_h": 131, "yrsold": 131, "heatingqc": 131, "street": [131, 148, 375], "yearremodadd": 131, "heat": [131, 336, 405, 448, 458, 691], "bsmtunfsf": 131, "mssubclass": 131, "condition2": 131, "garagetyp": 131, "overallqu": 131, "totalbsmtsf": 131, "miscfeatur": 131, "mosold": 131, "cat_selector": 131, "num_selector": 131, "besid": [131, 231, 378, 383, 585, 974, 1035], "cat_tree_processor": 131, "encoded_missing_valu": [131, 171, 871, 995, 1041, 1042], "num_tree_processor": 131, "add_ind": [131, 164, 623, 624, 626, 975, 1036, 1039, 1043], "tree_preprocessor": [131, 199], "0x7fcb9b4508e0": 131, "0x7fcb9b450550": 131, "columntransformerinot": [131, 170], "fittedcolumntransform": [131, 170], "ordinalencoderordinalencod": [131, 170, 171, 311], "cat_linear_processor": 131, "num_linear_processor": 131, "linear_preprocessor": 131, "tediou": 131, "wrote": [131, 373], "lasso_pipelin": 131, "pipelineinot": [131, 230, 240, 261, 311, 316], "fittedpipelin": [131, 230, 240, 261, 311, 316], "lassocvlassocv": 131, "rf_pipelin": 131, "randomforestregressorrandomforestregressor": [131, 134], "gbdt_pipelin": 131, "histgradientboostingregressorhistgradientboostingregressor": [131, 311], "stackingregressor": [131, 315, 392, 396, 412, 563, 1037, 1038, 1039, 1040, 1041], "stacking_regressor": 131, "final_estim": [131, 315, 412, 563, 564], "unknown_v": 131, "stackingregressorinot": 131, "fittedstackingregressor": 131, "ridgecvridgecv": [131, 169], "cross_val_predict": [131, 256, 315, 396, 403, 409, 412, 433, 563, 564, 819, 820, 1031, 1032, 1033, 1034, 1036, 1038, 1040, 1044], "scorer": [131, 217, 264, 380, 392, 396, 409, 412, 414, 557, 558, 590, 598, 630, 655, 669, 671, 707, 727, 728, 737, 794, 797, 798, 800, 808, 816, 819, 820, 821, 824, 943, 974, 981, 985, 993, 1006, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "test_": [131, 409], "line_kwarg": [131, 697], "nevalu": 131, "plot_stack_predictor": [131, 135], "exemplari": [132, 133], "eclf": [132, 133, 412], "axarr": [132, 305], "tt": [132, 255, 461], "703": [132, 135, 403, 509], "plot_voting_decision_region": [132, 135], "class1_1": 133, "class2_1": 133, "lightgreen": [133, 205, 216], "p3": 133, "p4": 133, "nweight": 133, "plot_voting_proba": [133, 135], "votingregressor": [134, 396, 412, 565, 1036, 1037, 1038, 1041], "cohort": 134, "reg1": [134, 412], "reg2": [134, 412], "reg3": [134, 412], "ereg": [134, 412], "votingregressorifittedvotingregressor": 134, "gradientboostingregressorgradientboostingregressor": 134, "linearregressionlinearregress": 134, "xt": [134, 283, 392, 441, 534, 536, 623, 625, 794, 797, 798, 808, 841, 849, 857, 862, 867, 874, 886, 915, 1043], "pred1": 134, "pred2": 134, "pred3": 134, "pred4": 134, "labelbottom": [134, 260], "plot_voting_regressor": [134, 135], "525": [135, 435, 624, 975], "auto_examples_ensembl": 135, "n_fold": [137, 643, 647, 649, 651, 655, 657, 659, 1028, 1029, 1033], "scores_std": [137, 138], "semilogx": [137, 138, 188, 273], "std_error": 137, "transluc": 137, "999999999999999e": 137, "31622776601683794": 137, "answer": [137, 168, 260, 378, 390, 721, 751, 985, 1009], "extern": [137, 151, 366, 367, 371, 375, 378, 380, 383, 390, 392, 402, 405, 413, 414, 415, 589, 606, 607, 713, 732, 790, 981, 984, 985, 988, 1001, 1006, 1012, 1018, 1022, 1035, 1039], "lasso_cv": 137, "k_fold": [137, 1015], "maximis": [137, 246, 291, 979, 988], "5f": [137, 319], "moreov": [137, 157, 307, 319, 360, 382, 405, 409, 415, 890, 955, 985, 1009, 1035, 1041, 1042], "substanti": [137, 285, 289, 290, 306, 378, 843, 991, 1031, 1034], "05968": 137, "54209": 137, "04520": 137, "15521": 137, "07880": 137, "45192": 137, "528": [137, 141], "plot_cv_diabet": [137, 141], "this_scor": [138, 339], "565": [138, 141, 260], "plot_cv_digit": [138, 141], "961111": 139, "933333": [139, 846], "073": [139, 141, 258, 299, 303, 467, 468], "plot_digits_classification_exercis": [139, 141], "200j": 140, "plot_iris_exercis": [140, 141], "487": [141, 719], "auto_examples_exercis": 141, "exercis": [141, 366, 367, 375, 378, 497, 498, 500, 501, 648, 649, 654, 794, 799, 819, 839, 902, 1012, 1030], "elimin": [142, 149, 166, 404, 405, 409, 444, 498, 511, 589, 590, 593, 598, 654, 797, 798, 813, 902, 971, 985, 1007, 1009, 1022, 1027], "x_2": [143, 154, 196, 410, 412, 413, 415, 609, 621, 981, 989, 995], "x_3": [143, 995], "irrelev": [143, 183, 360, 384, 407, 412, 414, 600, 735, 985], "agre": [143, 386, 393, 404, 405, 781, 1011], "percept": [143, 170, 992], "correctli": [143, 147, 199, 217, 235, 267, 269, 274, 293, 312, 326, 336, 378, 387, 410, 412, 422, 433, 465, 489, 545, 546, 547, 549, 551, 553, 555, 557, 560, 563, 565, 606, 654, 662, 664, 670, 671, 672, 699, 789, 791, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 844, 847, 854, 877, 892, 893, 897, 899, 900, 901, 902, 903, 905, 907, 935, 982, 985, 988, 989, 995, 1000, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "mutual_info_regress": [143, 319, 414, 588, 591, 592, 595, 596, 605, 1033, 1034, 1039, 1041, 1042, 1043], "f_test": 143, "x_": [143, 152, 251, 260, 315, 380, 405, 408, 410, 623, 631, 759, 892, 893, 981, 987, 992, 1033], "plot_f_test_vs_mi": [143, 149], "examin": [144, 384, 386, 405, 846], "f_classif": [144, 145, 339, 414, 588, 591, 592, 594, 595, 596, 600, 602, 605], "log10": [144, 157, 169, 184, 192, 261, 336], "pvalues_": [144, 588, 591, 592, 594, 595, 596, 1027], "x_indic": 144, "p_": [144, 985, 988, 1001], "svm_weight": 144, "789": [144, 412], "clf_select": 144, "svm_weights_select": 144, "get_support": [144, 148, 317, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 1029], "230": [144, 149, 580], "plot_feature_select": [144, 149], "anova_filt": 145, "anova_svm": 145, "selectkbestselectkbest": [145, 319], "Be": [145, 160, 349, 378, 407, 563, 564, 644, 650, 651, 652, 654, 655, 665, 676, 700, 812, 813, 872, 995, 1024, 1028], "75788833": 145, "27161955": 145, "26113448": 145, "plot_feature_selection_pipelin": [145, 149], "rfe": [146, 147, 396, 414, 590, 593, 598, 1027, 1031, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "n_features_to_select": [146, 148, 317, 414, 589, 598, 1039, 1041], "ranking_": [146, 589, 590], "plot_rfe_digit": [146, 149], "introduct": [147, 217, 258, 367, 378, 409, 410, 413, 586, 783, 784, 832, 836, 981, 983, 985, 987, 1004, 1012, 1018, 1021, 1022], "class_sep": [147, 293, 511], "rfecv": [147, 396, 414, 589, 593, 598, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1043, 1044], "stratifiedkfold": [147, 247, 255, 266, 270, 327, 409, 433, 563, 564, 590, 598, 655, 669, 794, 795, 797, 798, 799, 800, 802, 804, 808, 812, 814, 816, 817, 818, 819, 820, 821, 822, 824, 878, 1015, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1040], "min_features_to_select": [147, 590, 1035], "n_features_": [147, 537, 589, 590, 1040, 1042], "n_score": 147, "494": [147, 149, 234], "plot_rfe_with_cross_valid": [147, 149], "selectfrommodel": [148, 392, 396, 589, 598, 599, 1007, 1022, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1044], "sequentialfeatureselector": [148, 396, 414, 589, 593, 599, 1039, 1040, 1041, 1042, 1043], "greedi": [148, 412, 414, 443, 445, 456, 555, 556, 598, 981, 1001], "descript": [148, 169, 311, 371, 372, 377, 378, 382, 383, 386, 392, 405, 413, 448, 458, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 503, 506, 540, 626, 672, 757, 760, 773, 985, 999, 1000, 1006, 1008, 1020, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "descr": [148, 371, 372, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 503, 506, 1017, 1035], "_diabetes_dataset": 148, "mass": [148, 239, 375, 442, 792, 981, 992], "blood": [148, 229, 375, 1018], "pressur": [148, 375, 1018], "six": [148, 200, 221, 309, 375, 1036], "serum": [148, 375], "bmi": [148, 187, 188, 239, 375, 993], "tc": [148, 375, 393], "cholesterol": [148, 375], "ldl": [148, 375], "lipoprotein": [148, 375], "hdl": [148, 375], "s4": [148, 187, 188, 375], "tch": [148, 375], "s5": [148, 187, 188, 375, 993], "ltg": [148, 375, 497], "triglycerid": [148, 375], "s6": [148, 187, 188, 375], "glu": [148, 375], "sugar": [148, 375], "www4": [148, 375], "ncsu": [148, 375], "boo": [148, 375], "bradlei": [148, 375, 981], "efron": [148, 375, 678, 679, 981], "trevor": [148, 187, 320, 375, 624, 652, 717, 718, 719, 975, 981, 997, 1031, 1032, 1035, 1036, 1037, 1039], "iain": [148, 375, 981], "johnston": [148, 375, 981, 1036], "annal": [148, 183, 187, 375, 412, 470, 512, 513, 514, 555, 556, 652, 981], "499": [148, 325, 330, 375, 384], "web": [148, 372, 373, 375, 378, 381, 386, 405, 413, 517, 890, 985, 995, 1023, 1027], "stanford": [148, 375, 645, 678, 679, 832, 835, 836, 890, 983], "leastangle_2002": [148, 375], "pitfal": [148, 166, 167, 171, 173, 317, 367, 391, 392, 394, 409, 461, 463, 492, 649, 668, 669, 697, 748, 809, 820, 823, 858, 870, 877, 981, 1022], "e501": [148, 349], "accept": [148, 151, 235, 257, 315, 336, 349, 351, 360, 364, 365, 372, 378, 380, 387, 390, 391, 392, 393, 396, 399, 401, 405, 410, 413, 433, 437, 440, 441, 444, 457, 460, 463, 504, 505, 551, 552, 557, 558, 565, 566, 577, 578, 589, 590, 593, 624, 631, 635, 639, 675, 722, 737, 773, 792, 793, 797, 798, 839, 840, 847, 848, 857, 861, 915, 917, 918, 921, 981, 983, 985, 988, 993, 995, 1000, 1005, 1006, 1015, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tic": [148, 170, 238, 271, 987], "sfm": 148, "toc": [148, 238], "sf": [148, 260, 317, 373, 414, 488, 598], "backward": [148, 235, 317, 381, 392, 414, 492, 573, 598, 610, 611, 614, 615, 616, 618, 619, 910, 913, 985, 989, 1006, 1027, 1030, 1035, 1036, 1037, 1039, 1041, 1043], "tic_fwd": 148, "sfs_forward": 148, "toc_fwd": 148, "tic_bwd": 148, "sfs_backward": 148, "toc_bwd": 148, "183": [148, 325, 384, 986, 1027], "isn": [148, 315, 349, 351, 360, 365, 378, 386, 511, 557, 558, 590, 789, 797, 798, 870, 988, 1000, 1037], "sound": [148, 360], "finish": [148, 248, 982], "expos": [148, 235, 278, 318, 320, 365, 371, 375, 392, 396, 403, 406, 412, 414, 415, 433, 460, 549, 550, 563, 564, 565, 566, 589, 590, 598, 607, 794, 797, 798, 808, 826, 827, 828, 829, 830, 831, 912, 953, 981, 985, 987, 1015, 1017, 1019, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "breast": [148, 371, 496, 1022, 1032], "cancer": [148, 371, 496, 589, 590, 844, 1022, 1032], "569": [148, 327, 375, 496, 588, 591, 592, 594], "load_breast_canc": [148, 172, 327, 354, 383, 588, 591, 592, 594, 670, 671, 783, 985, 1032, 1033, 1038], "breast_cancer_data": 148, "_breast_cancer_dataset": 148, "wisconsin": [148, 172, 371, 496, 1022, 1032], "diagnost": [148, 172, 263, 371, 392, 496, 708, 819, 820, 985, 1005, 1006, 1022], "radiu": [148, 275, 290, 336, 375, 405, 438, 446, 684, 759, 776, 837, 838, 839, 840, 841, 845, 847, 848, 849, 851, 988, 1029, 1031, 1041, 1044], "perimet": [148, 375], "textur": [148, 375, 753, 754, 983], "compact": [148, 175, 305, 364, 375, 837, 838, 1001, 1029], "concav": [148, 375], "symmetri": [148, 375, 695, 870, 873, 885, 983], "fractal": [148, 375], "worst": [148, 199, 311, 375, 405, 440, 443, 704, 724, 725, 778, 779, 782, 787, 788, 822, 985, 1009, 1027, 1040], "field": [148, 217, 375, 402, 405, 406, 413, 494, 497, 613, 981, 983, 992, 1000, 1005, 1008, 1020, 1028], "se": [148, 222, 375, 395], "wdbc": [148, 375], "malign": [148, 375, 496], "benign": [148, 375, 496], "summari": [148, 319, 358, 360, 375, 390, 688, 709, 910, 983, 986, 1005, 1020], "981": [148, 375, 985], "43": [148, 158, 196, 232, 260, 283, 375, 383, 794, 808, 878], "188": [148, 156, 375, 384, 580], "2501": [148, 375], "163": [148, 278, 375, 993], "019": [148, 350, 375, 384, 467], "427": [148, 375, 502, 503, 579, 580], "106": [148, 242, 375, 873, 979, 1028], "304": [148, 309, 375], "873": [148, 375], "757": [148, 258, 283, 375], "542": [148, 183, 375], "031": [148, 375], "079": [148, 375], "41": [148, 199, 238, 358, 373, 375, 465, 488, 617, 620, 631, 654, 660, 681, 682, 695, 776, 832, 987, 991], "251": [148, 222, 228, 232, 243, 375], "4254": [148, 375], "071": [148, 375, 433], "027": [148, 350, 375], "058": [148, 258, 375], "252": [148, 222, 375, 530, 873, 885], "156": [148, 169, 294, 297, 375], "664": [148, 375], "055": [148, 375, 985], "208": [148, 283, 375], "creator": [148, 372, 375], "william": [148, 373, 375, 415, 606, 607, 610, 615, 618, 635, 985, 989, 1034, 1035, 1036, 1037, 1042, 1043], "wolberg": [148, 375], "nick": [148, 375, 1027, 1033, 1034, 1035, 1036], "olvi": [148, 375], "mangasarian": [148, 375], "donor": [148, 375], "novemb": [148, 199, 217, 375, 1032, 1033, 1035], "1995": [148, 260, 375, 403, 412, 549, 550, 827, 894, 986], "goo": [148, 375], "gl": [148, 375], "u2uwz2": [148, 375], "needl": [148, 375], "aspir": [148, 375, 378], "fna": [148, 375], "nuclei": [148, 375], "multisurfac": [148, 375], "msm": [148, 375], "bennett": [148, 375, 985], "4th": [148, 159, 375], "midwest": [148, 375], "cognit": [148, 375], "societi": [148, 375, 405, 407, 465, 470, 537, 623, 873, 885, 981, 999], "101": [148, 181, 218, 234, 278, 375, 843, 1028], "1992": [148, 373, 375, 409, 412, 563, 564, 641, 981], "exhaust": [148, 261, 315, 316, 317, 318, 319, 320, 321, 364, 375, 383, 391, 400, 405, 794, 797, 798, 808, 887, 888, 890, 981, 1020, 1022], "insepar": [148, 375], "uw": [148, 375, 1039], "ftp": [148, 375, 678, 679], "wisc": [148, 375, 892], "prog": [148, 375], "cpo": [148, 375], "nuclear": [148, 375], "tumor": [148, 375], "diagnosi": [148, 263, 375, 844], "spie": [148, 375], "1993": [148, 375, 470, 660, 681, 682, 1001], "symposium": [148, 375, 405, 456], "technologi": [148, 375, 405, 1005, 1009], "1905": [148, 375], "861": [148, 375, 783, 784, 985], "870": [148, 375], "san": [148, 375, 413, 997], "jose": [148, 375, 654, 985, 1035, 1037], "ca": [148, 375, 405, 438, 905, 906, 997, 1001], "prognosi": [148, 375], "570": [148, 375, 1018], "577": [148, 375], "juli": [148, 375, 414, 729, 878, 995, 1030, 1034, 1035, 1036], "august": [148, 375, 405, 507, 530, 1000, 1027, 1029, 1030, 1034, 1041], "diagnos": [148, 263, 375, 386, 394, 406], "letter": [148, 159, 373, 375, 382, 413, 783, 784, 800, 816, 985], "1994": [148, 373, 375, 640], "feature_selector": 148, "ntol": 148, "313": [148, 1018], "998": [148, 989], "511": 148, "535": [148, 149], "plot_select_from_model_diabet": [148, 149], "auto_examples_feature_select": 149, "gpr": [150, 160, 161, 166, 492, 606, 607, 609, 610, 611, 612, 617, 618, 619, 620, 621, 1007, 1022, 1037], "co2": [150, 161, 166, 415, 492, 607, 611, 618, 619, 621, 1034], "mona": [150, 161, 166, 415, 492, 607, 611, 618, 619, 621], "loa": [150, 161, 166, 415, 492, 607, 611, 618, 619, 621], "basic": [150, 161, 164, 166, 197, 312, 341, 364, 366, 367, 378, 380, 382, 390, 392, 405, 409, 410, 412, 607, 618, 893, 905, 906, 907, 908, 974, 975, 988, 999, 1004, 1005, 1006, 1009, 1018], "introductori": [150, 161, 166, 227, 415, 607, 618, 1009], "xor": [150, 161, 166, 342, 606, 610, 618, 981, 1001, 1034], "posterior": [150, 151, 152, 161, 166, 178, 260, 410, 415, 545, 546, 548, 606, 607, 609, 610, 611, 615, 618, 619, 623, 640, 641, 704, 792, 979, 1005, 1033, 1036], "iso": [150, 161, 166, 222, 606, 609, 610], "trick": [151, 234, 293, 340, 351, 363, 366, 367, 381, 390, 406, 578, 585, 639, 668, 977, 978, 989, 999, 1000, 1018, 1019, 1022, 1028, 1036], "drastic": [151, 232, 268, 405, 409, 988, 998], "theorem": [151, 344, 404, 987], "period": [151, 156, 160, 382, 392, 393, 403, 415, 611, 815, 876, 1035, 1040, 1042], "reus": [151, 192, 261, 315, 351, 380, 392, 405, 406, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 630, 642, 644, 645, 648, 654, 656, 658, 662, 663, 664, 665, 672, 673, 674, 676, 854, 855, 993, 997, 1009, 1034], "training_sample_indic": 151, "training_data": 151, "training_noisy_target": 151, "newer": [151, 377, 395, 410], "expsinesquar": [151, 156, 160, 415], "emb": [151, 221, 232, 292, 371, 372, 458, 691, 982], "kernel_ridg": [151, 234, 367, 1031], "length_scal": [151, 152, 155, 156, 157, 158, 160, 415, 608, 611, 615, 617, 618, 619, 620], "tell": [151, 169, 170, 235, 260, 336, 341, 365, 373, 405, 413, 559, 575, 974, 979, 992, 1020], "1e0": [151, 234, 251, 268, 974], "kernel__length_scal": 151, "kernel__period": 151, "1e1": [151, 157, 199, 234, 336], "kernel_ridge_tun": 151, "9915849773450223": 151, "7986499491396727": 151, "607275806426107": 151, "predictions_kr": 151, "gaussianprocessregressor": [151, 156, 157, 158, 159, 160, 415, 606, 609, 610, 611, 612, 613, 617, 620, 621, 639, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "whitekernel": [151, 156, 157, 415, 607, 608, 610, 1038], "periodicity_bound": [151, 156, 160, 611], "030": [151, 350], "kernel_": [151, 152, 153, 154, 155, 156, 157, 158, 160, 606, 607], "675": 151, "57": [151, 169, 215, 226, 269, 302, 375, 376, 395, 397, 398, 406, 701, 776, 830, 985, 995, 1027], "noise_level": [151, 156, 157, 608, 621], "182": [151, 302, 384, 412], "mean_predictions_gpr": 151, "std_predictions_gpr": 151, "return_std": [151, 156, 157, 158, 160, 178, 179, 392, 548, 563, 564, 607, 609, 610, 611, 612, 621, 623, 640, 641, 857, 1034, 1035, 1039], "capac": [151, 171], "length_scale_bound": [151, 157, 158, 160, 415, 607, 611, 615, 618, 619], "attenu": 151, "plot_compare_gpr_krr": [151, 161], "arbitrarili": [152, 246, 251, 349, 392, 415, 428, 461, 478, 479, 480, 548, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 665, 666, 668, 669, 674, 675, 676, 717, 718, 719, 741, 780, 784, 830, 831, 840, 848, 855, 878, 898, 900, 903, 906, 908, 985, 988, 995, 1001], "lml": [152, 153, 157, 415], "exhibit": [152, 204, 340, 349, 394, 409, 410, 412, 415, 993], "steep": [152, 170, 269, 270, 405, 409, 415, 446, 452], "laplac": [152, 415, 606, 607, 832, 833, 834, 836, 987], "214": [152, 580], "319": [152, 1020], "gp_fix": 152, "gp_opt": 152, "log_marginal_likelihood": [152, 153, 155, 157, 160, 415, 606, 607, 1037], "theta": [152, 153, 155, 157, 159, 160, 236, 410, 415, 519, 532, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 688, 987, 1001], "landscap": 152, "theta0": 152, "theta1": 152, "pcolor": 152, "xscale": [152, 157, 234, 800], "yscale": [152, 157, 199, 234, 349, 800], "129": [152, 161, 201, 1016, 1027], "plot_gpc": [152, 161], "gpc_rbf_isotrop": 153, "gpc_rbf_anisotrop": 153, "m_max": 153, "plot_gpc_iri": [153, 161], "0256": 154, "dotproduct": [154, 155, 160, 415, 607, 621], "sigma_0": [154, 155, 160, 415, 610], "constantkernel": [154, 160, 415, 607, 613, 617, 620], "lim": [154, 530], "61611719": 154, "00099547": 154, "10469096": 154, "32782448": 154, "00000000": 154, "50000000": 154, "17289014": 154, "6984743": 154, "3109306": 154, "93271427": 154, "03823144": 154, "10584743": 154, "87600388": 154, "74310541": 154, "21301203": 154, "26386883": 154, "gp": [154, 159, 415, 606, 607, 618, 1033], "cb": [154, 232, 249], "widehat": 154, "mathbf": [154, 340, 410, 981, 985, 989, 990, 999], "leq": [154, 410, 412, 981, 985, 988, 999, 1000, 1001], "clim": 154, "clabel": [154, 210], "334": 154, "141": [154, 161, 278, 530, 897, 986], "plot_gpc_isoprob": [154, 161], "stationari": [155, 415, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "coincid": [155, 201, 415], "434": [155, 157], "convergencewarn": [155, 157, 159, 160, 207, 214, 246, 300, 301, 307, 387, 392, 792, 793, 1035, 1036, 1039], "k1__constant_valu": 155, "bound": [155, 157, 159, 166, 201, 217, 227, 243, 259, 376, 385, 405, 410, 413, 415, 416, 440, 485, 498, 508, 519, 532, 591, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 628, 631, 633, 646, 650, 654, 673, 701, 730, 792, 793, 837, 838, 874, 886, 889, 890, 891, 899, 900, 901, 904, 921, 953, 981, 984, 985, 988, 997, 999, 1000, 1002, 1035, 1038, 1039, 1041], "100000": [155, 234, 245, 378, 609, 610, 611, 615, 616, 618, 619, 621, 886, 978, 1018, 1020], "puor_r": [155, 342], "481": [155, 160, 161], "plot_gpc_xor": [155, 161], "rw2006": [156, 415, 606, 607], "ascent": [156, 415], "monthli": [156, 393, 985], "atmospher": 156, "ppm": 156, "mauna": 156, "observatori": 156, "hawaii": 156, "1958": [156, 410, 412, 528], "air": [156, 759], "41187": 156, "flag": [156, 238, 376, 378, 379, 381, 396, 401, 460, 606, 607, 623, 669, 671, 723, 780, 1000, 1033, 1037, 1038, 1040, 1041, 1042, 1043], "station": 156, "mlo": 156, "317": 156, "co2_data": 156, "to_datetim": 156, "timestamp": 156, "march": [156, 721, 751, 985, 1027, 1031, 1035, 1037, 1042], "dropna": 156, "nfrom": 156, "upcom": [156, 376], "to_numpi": 156, "rise": 156, "irregular": [156, 340, 405, 988], "long_term_trend_kernel": 156, "decai": [156, 540, 854, 855, 934, 985, 999, 1031], "seasonal_kernel": 156, "ration": [156, 619, 983], "diffus": 156, "accommod": [156, 1035], "rationalquadrat": [156, 160, 415, 612], "irregularities_kernel": 156, "shall": 156, "phenomena": 156, "noise_kernel": 156, "noise_level_bound": [156, 157, 621], "co2_kernel": 156, "subtract": [156, 169, 238, 408, 410, 439, 443, 455, 530, 640, 641, 646, 647, 650, 651, 652, 660, 661, 1034], "normalize_i": [156, 415, 607, 1041], "y_mean": [156, 157, 160, 607, 640, 641], "gaussianprocessregressorifittedgaussianprocessregressor": 156, "futur": [156, 200, 241, 318, 321, 376, 378, 380, 382, 390, 392, 393, 399, 409, 413, 492, 530, 631, 955, 985, 986, 1000, 1001, 1009, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "todai": [156, 390, 1020], "current_month": 156, "mean_y_pr": 156, "std_y_pr": 156, "536": [156, 283], "968": [156, 168, 258], "0367": 156, "6ppm": 156, "713": [156, 161], "plot_gpr_co2": [156, 161], "target_gener": 157, "add_nois": 157, "minima": [157, 187, 410, 443, 688, 982, 1019, 1035], "y_std": [157, 160, 548, 607, 640, 641, 1040], "k1__k2__length_scal": [157, 415], "noptimum": 157, "nlog": 157, "length_scale_grid": 157, "noise_level_grid": 157, "newshap": 157, "581": [157, 161, 175, 201, 218, 239, 243], "plot_gpr_noisi": [157, 161], "tikhonov": [158, 415, 668], "training_indic": 158, "n_restarts_optim": [158, 415, 606, 607], "mean_predict": 158, "std_predict": 158, "whenev": [158, 168, 360, 372, 386, 392, 395, 403, 478, 479, 480, 492, 624, 626, 976, 984, 1006, 1037], "noise_std": 158, "y_train_noisi": 158, "471": [158, 161, 375], "plot_gpr_noisy_target": [158, 161], "gene": [159, 372, 402, 447, 509, 589, 590, 844, 877], "among": [159, 170, 172, 175, 199, 250, 281, 358, 366, 373, 380, 392, 393, 403, 404, 408, 443, 445, 508, 515, 789, 822, 840, 845, 847, 899, 902, 905, 906, 907, 908, 974, 977, 985, 986, 992, 995, 1000, 1027, 1033, 1034, 1037], "brighter": 159, "6th": 159, "haussler": 159, "1999": [159, 373, 403, 405, 407, 410, 412, 433, 446, 453, 465, 470, 530, 537, 551, 552, 555, 556, 718, 891, 899, 900, 902, 903, 991, 997], "646": 159, "technic": [159, 200, 221, 319, 373, 375, 378, 392, 412, 648, 660, 681, 682, 892, 981, 982, 988], "depart": [159, 405], "california": [159, 163, 164, 305, 311, 317, 371, 375, 486, 1022], "santa": [159, 1042], "cruz": 159, "generickernelmixin": [159, 1037], "sequencekernel": 159, "baseline_similar": 159, "baseline_similarity_bound": 159, "hyperparameter_baseline_similar": 159, "_f": [159, 981], "_g": 159, "__call__": [159, 336, 392, 413, 415, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 1034], "eval_gradi": [159, 415, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "is_stationari": [159, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "clone_with_theta": [159, 415, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "agct": 159, "agc": 159, "aact": 159, "taa": 159, "aaa": 159, "gaaca": 159, "training_idx": 159, "cga": 159, "taac": 159, "tcg": 159, "cttt": 159, "tgct": 159, "atag": 159, "ctc": 159, "424": [159, 217], "plot_gpr_on_structured_data": [159, 161], "plot_gpr_sampl": 160, "gpr_model": 160, "y_sampl": [160, 607], "sample_i": [160, 415, 607, 1041], "single_prior": 160, "pm": [160, 170, 270, 412, 985], "dev": [160, 169, 217, 265, 270, 376, 378, 382, 384, 386, 985, 1009, 1023, 1034, 1039, 1042, 1043], "594": [160, 199], "279": [160, 981], "alpha_bound": [160, 619], "1e15": 160, "05e": 160, "799": [160, 350], "791": 160, "sigma_0_bound": [160, 610], "_gpr": 160, "663": [160, 891, 993, 997], "lbfg": [160, 299, 380, 644, 645, 654, 655, 665, 668, 670, 676, 683, 828, 831, 854, 855, 981, 989, 1031, 1032, 1034, 1035, 1040, 1041, 1042, 1044], "abnormal_termination_in_lnsrch": 160, "479": 160, "7337046907": 160, "matern": [160, 415, 1038, 1042], "609": [160, 350, 384], "484": 160, "plot_gpr_prior_posterior": [160, 161], "auto_examples_gaussian_process": 161, "iterativeimput": [162, 164, 165, 166, 396, 486, 561, 576, 624, 625, 626, 635, 641, 668, 819, 840, 858, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "robin": [163, 164, 623, 975, 1033, 1036, 1041, 1042], "kneighborsregressor": [163, 237, 295, 319, 412, 566, 839, 845, 847, 848, 988, 1027, 1029, 1031, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "mimic": [163, 199, 349, 812], "missforest": [163, 975], "popular": [163, 224, 373, 376, 383, 386, 390, 392, 404, 411, 412, 413, 415, 448, 458, 975, 977, 981, 983, 990, 999, 1006, 1015, 1020], "enable_iterative_imput": [163, 164, 382, 623, 975, 1036], "x_full": [163, 164, 305], "y_full": [163, 164, 305], "2k": 163, "br_estim": 163, "score_full_data": 163, "neg_mean_squared_error": [163, 164, 201, 234, 274, 820, 985, 993, 1033], "x_miss": [163, 164], "y_miss": [163, 164], "missing_sampl": [163, 164], "missing_featur": [163, 164], "score_simple_imput": 163, "missing_valu": [163, 164, 240, 392, 623, 624, 625, 626, 764, 975, 1035, 1036], "score_iterative_imput": 163, "stricter": 163, "impute_estim": 163, "__class__": [163, 199, 201, 235, 238, 262, 307, 349, 350, 351, 385], "xerr": [163, 164, 350], "263": [163, 165], "plot_iterative_imputer_variants_comparison": [163, 165], "ness": [164, 217], "auxiliari": [164, 376, 404, 1009, 1042], "district": [164, 373], "neither": [164, 169, 315, 349, 360, 390, 433, 590, 624, 921, 988, 1001], "feel": [164, 305, 377, 378, 386, 405, 442, 1001], "x_diabet": [164, 1015], "y_diabet": [164, 1015], "x_california": 164, "y_california": 164, "add_missing_valu": 164, "missing_r": 164, "n_missing_sampl": 164, "x_miss_california": 164, "y_miss_california": 164, "x_miss_diabet": 164, "y_miss_diabet": 164, "knnimput": [164, 315, 623, 626, 975, 1037, 1038, 1041, 1042, 1043, 1044], "get_scores_for_imput": 164, "impute_scor": 164, "x_label": 164, "mses_california": 164, "stds_california": 164, "mses_diabet": 164, "stds_diabet": 164, "get_full_scor": 164, "full_scor": 164, "get_impute_zero_scor": 164, "fill_valu": [164, 230, 240, 316, 623, 626, 995, 1035, 1043], "zero_impute_scor": 164, "unweight": [164, 212, 459, 643, 649, 674, 703, 709, 724, 725, 733, 778, 779, 782, 783, 832, 833, 834, 835, 836, 975], "get_impute_knn_scor": 164, "knn_impute_scor": 164, "get_impute_mean": 164, "mean_impute_scor": 164, "obvious": [164, 364, 1020], "get_impute_it": 164, "n_nearest_featur": [164, 623], "sample_posterior": [164, 623, 975], "iterative_impute_scor": 164, "n_bar": 164, "xval": 164, "invert_yaxi": [164, 351], "493": [164, 165, 639, 897, 978], "plot_missing_valu": [164, 165], "755": 165, "auto_examples_imput": 165, "prune": [166, 353, 359, 414, 496, 553, 554, 555, 556, 560, 561, 589, 640, 823, 905, 906, 907, 908, 988, 1007, 1022, 1027, 1030, 1037, 1038], "elast": [166, 177, 183, 190, 210, 218, 273, 404, 467, 468, 474, 497, 520, 642, 643, 648, 653, 654, 655, 656, 657, 658, 659, 664, 672, 674, 677, 680, 974, 985, 999, 1007, 1022, 1027, 1032, 1036, 1037], "gram": [166, 177, 218, 380, 410, 413, 485, 520, 544, 584, 585, 586, 587, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 660, 661, 677, 678, 679, 680, 681, 682, 762, 770, 772, 974, 995, 1000, 1020, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1040, 1041], "huberregressor": [166, 177, 203, 205, 218, 520, 666, 667, 668, 674, 675, 981, 1033, 1034, 1035, 1036], "aic": [166, 177, 187, 218, 250, 497, 647, 649, 650, 651, 652, 793, 858, 877, 974, 1027, 1034, 1040, 1041], "bic": [166, 177, 187, 218, 414, 497, 647, 649, 650, 651, 652, 793, 858, 877, 974, 984, 1027, 1034, 1040, 1041], "mnist": [166, 177, 207, 218, 283, 298, 303, 492, 567, 654, 823, 854, 877, 920, 981, 989], "20newgroup": [166, 177, 218, 485, 567, 654, 823, 981], "ordinari": [166, 177, 178, 183, 201, 202, 204, 216, 218, 318, 631, 642, 648, 650, 651, 652, 653, 668, 674, 678, 679, 683, 999, 1007, 1022], "spline": [166, 177, 218, 512, 513, 514, 668, 858, 872, 876, 1005, 1040], "ransac": [166, 177, 205, 216, 218, 520, 645, 653, 667, 674, 675], "convex": [166, 177, 218, 220, 345, 350, 405, 407, 410, 418, 442, 448, 458, 469, 471, 472, 475, 476, 477, 654, 672, 688, 981, 982, 988, 989, 999, 1040], "theil": [166, 177, 205, 218, 645, 653, 667, 674, 675], "sen": [166, 177, 205, 218, 645, 653, 667, 674, 675], "tweedi": [166, 177, 218, 460, 492, 548, 644, 665, 676, 702, 719, 740, 742, 744, 745, 747, 823, 858, 861, 862, 870, 877, 981, 1037, 1038, 1040], "insur": [166, 177, 199, 218, 460, 492, 548, 644, 665, 676, 702, 740, 745, 747, 823, 858, 861, 862, 870, 877, 981], "claim": [166, 177, 218, 378, 460, 492, 548, 644, 665, 676, 702, 740, 745, 747, 823, 858, 861, 862, 870, 877, 981], "failur": [166, 167, 169, 173, 378, 386, 653, 780, 823, 917, 918, 1008, 1009, 1040, 1041], "infer": [166, 167, 169, 173, 246, 250, 251, 260, 355, 372, 380, 390, 404, 409, 410, 492, 504, 505, 511, 530, 532, 534, 536, 543, 545, 546, 549, 555, 556, 628, 631, 653, 705, 718, 736, 780, 792, 793, 800, 816, 823, 833, 871, 878, 892, 893, 905, 906, 907, 908, 948, 975, 981, 984, 985, 990, 995, 998, 1001, 1005, 1006, 1014, 1028, 1032, 1033, 1038, 1041, 1044], "causal": [166, 167, 173, 653, 780, 823], "multicollinear": [166, 167, 173, 408, 496, 560, 630, 651, 823, 981, 993], "isomap": [166, 219, 222, 226, 315, 319, 412, 498, 540, 545, 562, 685, 686, 687, 688, 846, 858, 867, 890, 988, 1021, 1022, 1035, 1037, 1040, 1041, 1042, 1043, 1044], "And": [166, 219, 226, 235, 260, 349, 386, 399, 405, 409, 413, 526, 584, 585, 587, 688, 689, 981, 985, 1003, 1034], "hole": [166, 219, 226, 526, 688, 689, 1041], "perplex": [166, 219, 220, 224, 226, 283, 510, 521, 532, 688, 982, 1032, 1034, 1041], "metadata": [166, 227, 243, 350, 367, 372, 373, 399, 419, 422, 425, 428, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 484, 485, 492, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 941, 942, 943, 944, 945, 969, 985, 1005, 1006, 1011, 1022, 1043], "rout": [166, 227, 243, 367, 419, 422, 425, 428, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 942, 943, 944, 945, 969, 1022, 1041, 1043], "johnson": [166, 227, 243, 305, 309, 370, 404, 485, 498, 873, 885, 889, 890, 891, 995, 1002, 1022, 1035, 1041, 1043], "lindenstrauss": [166, 227, 243, 370, 404, 485, 498, 889, 890, 891, 1002, 1022], "halv": [166, 253, 276, 400, 511, 560, 575, 794, 797, 798, 902, 1022, 1039], "det": [166, 253, 276, 378, 407, 511, 560, 694, 698, 722, 784, 823, 858, 877, 897, 932, 1039], "tsne": [166, 220, 221, 222, 224, 225, 284, 297, 319, 392, 419, 429, 492, 684, 685, 686, 841, 845, 858, 959, 982, 988, 1030, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "novelti": [166, 228, 284, 290, 297, 335, 843, 1007, 1021, 1022, 1027, 1035], "lof": [166, 228, 238, 284, 297, 559, 843, 901, 991], "boltzmann": [166, 298, 303, 498, 654, 709, 823, 853, 854, 855, 857, 883, 1021, 1022, 1029], "mlp": [166, 170, 239, 298, 300, 303, 492, 567, 823, 854, 855, 989], "semi_supervis": [166, 317, 319, 323, 324, 325, 326, 327, 328, 329, 367, 396, 986, 998, 1028, 1033, 1034, 1041, 1042], "tie": [166, 331, 347, 390, 412, 508, 825, 902, 986, 1000, 1001, 1028, 1043], "unbalanc": [166, 263, 331, 347, 409, 508, 627, 902, 922, 923, 974, 999], "featurehash": [166, 348, 350, 352, 366, 373, 413, 460, 484, 577, 584, 585, 586, 587, 870, 1028, 1033, 1034, 1035, 1041, 1042], "auto_examples_python": 166, "auto_examples_jupyt": 166, "unless": [168, 235, 246, 251, 378, 380, 381, 390, 392, 403, 405, 408, 416, 433, 440, 442, 444, 446, 448, 453, 454, 457, 460, 463, 468, 485, 492, 504, 505, 527, 531, 532, 533, 535, 538, 539, 541, 542, 543, 544, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 590, 598, 606, 607, 628, 630, 635, 642, 643, 647, 648, 649, 651, 653, 654, 655, 657, 659, 661, 662, 664, 672, 675, 684, 685, 686, 687, 688, 689, 690, 705, 710, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 843, 845, 847, 848, 850, 851, 854, 855, 856, 859, 878, 882, 883, 885, 886, 887, 888, 892, 893, 905, 906, 907, 908, 913, 917, 918, 934, 953, 981, 984, 986, 1027, 1029, 1033, 1035, 1038, 1039], "willing": [168, 257], "econom": [168, 169, 260], "educ": [168, 169, 378, 712, 986], "earn": [168, 169, 393], "polici": [168, 169, 199, 217, 392, 531, 537, 981, 1042, 1044], "maker": [168, 169], "ovb": [168, 169], "parent_hourly_wag": 168, "college_degre": 168, "true_coef": [168, 183, 194], "hourly_wag": 168, "stori": [168, 260, 278, 373, 984], "pairplot": [168, 169], "diag_kind": [168, 169], "kde": [168, 169, 278, 287, 288, 296, 411, 842], "features_nam": [168, 1034], "regressor_with_": 168, "y_pred_with_": 168, "r2_with_abl": 168, "model_coef": 168, "intellectu": 168, "proxi": [168, 169, 410, 853, 1015, 1032], "inadvert": [168, 392], "iq": 168, "regressor_without_": 168, "y_pred_without_": 168, "r2_without_": 168, "brought": [168, 549, 550, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "unobserv": [168, 169, 410], "confound": [168, 169], "conduct": [168, 260, 415, 1041], "prohibit": [168, 409, 412, 623, 990, 998, 1034], "uneth": 168, "iv": [168, 985], "710": [168, 173, 218, 403], "plot_causal_interpret": [168, 173], "hint": [169, 364, 379, 383, 399, 444, 985, 1018], "aris": [169, 263, 344, 365, 383, 405, 711, 981, 982, 1039], "survei": [169, 408], "1985": [169, 405, 701, 711, 781], "534": 169, "race": [169, 373, 1030], "occup": [169, 305], "sector": 169, "marr": 169, "not_memb": 169, "marri": 169, "freq": [169, 183, 351], "378": [169, 350, 412, 1020, 1027], "289": 169, "438": [169, 993], "440": 169, "350": 169, "018727": 169, "822097": 169, "833333": 169, "615373": 169, "379710": 169, "726573": 169, "thereaft": [169, 178], "hispan": 169, "manufactur": 169, "unmarri": 169, "dollar": [169, 373], "exploratori": [169, 1009], "emul": [169, 386], "train_dataset": [169, 372], "rangeindex": 169, "533": 169, "normalis": [169, 607, 1020], "numerical_column": [169, 171, 463], "if_binari": [169, 242, 870, 995, 1038], "prepend": [169, 1027], "exp10": 169, "ufunc": 169, "transformedtargetregressortransformedtargetregressor": 169, "ridgeridg": 169, "mae_train": 169, "mae_test": 169, "learnt": [169, 312, 360, 392, 409, 878, 974, 995], "obviou": [169, 340, 360, 364, 402, 410], "regressor_": [169, 461, 589, 590, 593], "race_hispan": 169, "013519": 169, "race_oth": 169, "009075": 169, "race_whit": 169, "022594": 169, "occupation_cler": 169, "000045": 169, "occupation_manag": 169, "090528": 169, "occupation_oth": 169, "025102": 169, "occupation_profession": 169, "071964": 169, "occupation_sal": 169, "046636": 169, "occupation_servic": 169, "091053": 169, "sector_construct": 169, "000198": 169, "sector_manufactur": 169, "031255": 169, "sector_oth": 169, "031025": 169, "marr_unmarri": 169, "032405": 169, "union_not_memb": 169, "117154": 169, "sex_mal": 169, "090808": 169, "south_y": 169, "033823": 169, "054699": 169, "035005": 169, "030867": 169, "adimension": 169, "Their": [169, 373, 375, 393, 405, 640, 1027], "visibl": [169, 170, 201, 346, 372, 378, 405, 853, 990, 1032, 1042], "gaug": 169, "decad": [169, 1006], "x_train_preprocess": 169, "multipli": [169, 203, 217, 260, 364, 387, 392, 410, 412, 413, 418, 460, 471, 511, 534, 536, 537, 543, 553, 557, 560, 642, 644, 648, 650, 654, 655, 656, 658, 664, 665, 666, 668, 672, 673, 674, 676, 682, 683, 685, 689, 759, 899, 900, 901, 902, 903, 905, 907, 923, 961, 962, 963, 974, 981, 985, 999, 1038], "coef_i": 169, "std_i": 169, "emphas": [169, 346, 384, 410, 985], "perturb": [169, 216, 302, 410, 412, 984], "caution": [169, 382, 436, 450, 1035], "repeatedkfold": [169, 409, 799, 810, 1034], "cv_model": 169, "train_idx": [169, 392], "stripplot": 169, "whi": [169, 171], "collinear": [169, 172, 204, 217, 412, 563, 644, 665, 676, 870, 981, 1027], "teas": 169, "apart": [169, 318, 336, 390, 392, 406, 408, 414, 720, 1000, 1009, 1035], "vice": [169, 257, 349, 405, 415, 438, 603, 604, 826, 1031], "versa": [169, 257, 349, 405, 415, 438, 603, 604, 826, 1031], "column_to_drop": 169, "said": [169, 228, 261, 373, 378, 787, 983, 991, 1011, 1018], "unchang": [169, 217, 267, 412, 429, 433, 438, 439, 440, 441, 442, 443, 445, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 688, 758, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 886, 889, 890, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 988, 1011, 1035, 1041, 1043], "neglig": [169, 988, 1030, 1044], "littl": [169, 170, 171, 172, 228, 373, 413, 458, 640, 794, 808, 934, 975, 982, 984, 1000, 1001, 1018, 1028, 1039, 1044], "alon": [169, 203, 266, 336, 392, 399, 403, 644, 665, 676, 737, 1034, 1036], "suppress": [169, 364, 386, 688, 988, 1034], "themselv": [169, 305, 374, 380, 386, 392, 396, 402, 405, 412, 413, 415, 442, 611, 787, 1001, 1020, 1037], "bring": [169, 305, 410, 672, 674, 982, 1005, 1009], "entic": 169, "pursu": 169, "tempt": 169, "deflat": [169, 408, 417, 529], "presum": [169, 281, 405, 413, 832], "respond": [169, 378, 405], "832": [169, 171, 173, 412, 551, 552], "plot_linear_model_coefficient_interpret": [169, 173], "complement": [170, 270, 349, 628, 629, 796, 811, 814, 823, 832, 833, 834, 835, 836, 992, 1007, 1022, 1035], "molnar": [170, 992], "christoph": [170, 410, 415, 528, 606, 607, 610, 615, 618, 792, 981, 986, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042], "goldstein": [170, 992], "kapeln": [170, 992], "bleich": [170, 992], "pitkin": [170, 992], "peek": [170, 378, 992], "settingwithcopywarn": 170, "2284": 170, "904": [170, 258, 328, 406], "287": [170, 997], "1747": 170, "1729": 170, "mask_train": [170, 217], "accordingli": [170, 238, 340, 378, 382, 383, 1034, 1035, 1042], "8640": 170, "nomin": [170, 372, 392, 393, 412, 413, 577, 578, 712, 995, 1006], "numerical_featur": [170, 311], "xtick_start": 170, "xtick_period": 170, "average_bike_rent": 170, "numeric_onli": 170, "decor": [170, 315, 378, 379, 380, 387, 800, 816, 924, 928, 929, 946, 952, 1037, 1040, 1043], "strike": [170, 203], "mlp_preprocessor": 170, "quantiletransformerquantiletransform": 170, "catindex": 170, "hgbdt_preprocessor": 170, "sparse_threshold": [170, 460, 463, 1035], "mlp_model": 170, "hidden_layer_s": [170, 239, 299, 301, 854, 855, 989], "learning_rate_init": [170, 300, 301, 854, 855], "693": [170, 985], "forget": [170, 360, 365, 372, 382, 390, 410, 982, 1008], "poor": [170, 175, 266, 275, 327, 403, 409, 410, 686, 690, 733, 834, 837, 838, 979, 980, 982, 987, 1006, 1011, 1034, 1035, 1036, 1038, 1040], "grid_resolut": [170, 317, 334, 627, 628, 629], "features_info": 170, "908": [170, 985], "hgbdt_model": 170, "cheaper": [170, 405, 415, 669, 977, 981], "922": [170, 1015], "temperatur": [170, 413, 992], "wind": [170, 986], "meaningless": [170, 413, 899, 902, 1030], "429": [170, 278], "celsiu": [170, 992], "interaction_cst": [170, 320, 412, 557, 558, 1042], "hgbdt_model_without_interact": 170, "histgradientboostingregressor__interaction_cst": 170, "heatmap": [170, 172, 178, 183, 271, 320, 336, 628, 992], "985": 170, "slope": [170, 197, 201, 216, 405, 718, 743, 983, 985], "dry": 170, "wetter": 170, "spike": 170, "degrad": [170, 228, 305, 344, 350, 411], "somehow": 170, "forbidden": [170, 412], "noisili": 170, "partial_depend": [170, 628, 992, 1028, 1036, 1037, 1038, 1039, 1042, 1043], "grid_valu": [170, 629, 1043], "add_ax": [170, 224, 271], "surf": 170, "rstride": 170, "cstride": 170, "bupu": 170, "nthe": [170, 258, 358], "pretti": [170, 224, 258, 349, 364, 378, 390, 854, 855, 989, 1036], "view_init": [170, 220, 222, 224], "clb": 170, "ndepend": 170, "399": [170, 173], "plot_partial_depend": [170, 173, 315, 316, 317, 1032, 1036, 1037, 1038, 1039, 1040, 1041], "breiman": [171, 409, 412, 512, 513, 514, 551, 552, 560, 630, 905, 906, 993, 1001], "random_num": 171, "random_cat": 171, "sibsp": [171, 320], "parch": [171, 320], "categorical_encod": 171, "numerical_pip": 171, "memor": 171, "814": [171, 1018], "mdi_import": [171, 172], "sorted_importances_idx": 171, "retri": [171, 492, 1035, 1041], "classifier__min_samples_leaf": 171, "anymor": [171, 199, 262, 315, 316, 336, 360, 382, 406, 666, 1033, 1036, 1039, 1040, 1041, 1043], "810": [171, 310, 313], "train_result": 171, "test_result": 171, "train_import": 171, "test_import": 171, "plot_permutation_import": [171, 172, 173], "contradict": [172, 1006], "spearman": [172, 631, 632, 976], "perm_sorted_idx": 172, "tree_importance_sorted_idx": 172, "tree_indic": 172, "gini": [172, 199, 217, 240, 272, 317, 549, 550, 553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 974, 993, 1001, 1035, 1036, 1043, 1044], "dilut": [172, 375], "squareform": 172, "spearmanr": 172, "fill_diagon": [172, 223], "distance_matrix": 172, "dist_linkag": 172, "dendro": 172, "to_list": 172, "leaf_rot": 172, "dendro_idx": 172, "ivl": 172, "cluster_id": [172, 350], "fcluster": 172, "cluster_id_to_feature_id": 172, "selected_featur": 172, "selected_features_nam": 172, "x_train_sel": 172, "x_test_sel": 172, "clf_sel": 172, "plot_permutation_importance_multicollinear": [172, 173], "auto_examples_inspect": 173, "polynomialcountsketch": [175, 635, 637, 977, 1039, 1041, 1044], "covtyp": 175, "tensor": [175, 370, 401, 410, 534, 536, 543, 635, 636, 637, 1022, 1039], "sketch": [175, 366, 370, 387, 404, 635, 636, 637, 950, 1022, 1039], "daniel": [175, 320, 364, 878, 995, 1009, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1039, 1041], "lopez": 175, "sanchez": [175, 1035, 1036], "lope": 175, "usal": 175, "cartograph": 175, "remot": [175, 325, 378, 381], "fetch_covtyp": [175, 238, 317, 373, 1036, 1039, 1041], "5_000": 175, "mm": 175, "lsvm": 175, "lsvm_time": 175, "lsvm_score": 175, "condens": [175, 442], "ps_lsvm_time": 175, "ps_lsvm_score": 175, "ksvm": 175, "ksvm_time": 175, "ksvm_score": 175, "pham": [175, 977, 1034], "ninh": 175, "rasmu": [175, 1034], "pagh": [175, 977], "kdd": [175, 373, 403, 433, 997], "doi": [175, 199, 217, 378, 405, 672], "1145": [175, 405, 672], "2487575": 175, "2487591": 175, "csie": [175, 372, 483, 504, 505, 654], "ntu": [175, 372, 483, 504, 505, 654], "tw": [175, 372, 483, 504, 505, 654, 1000], "cjlin": [175, 372, 483, 504, 505, 654, 1030], "libsvmtool": [175, 372, 483, 504, 505], "plot_scalable_poly_kernel": [175, 176], "auto_examples_kernel_approxim": 176, "ard": [178, 640, 641], "ol": [178, 189, 194, 196, 197, 205, 216, 318, 652, 981], "true_weight": 178, "ardregress": [178, 183, 641, 981, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043], "olr": 178, "brr": 178, "symlognorm": [178, 183], "linthresh": [178, 183], "10e": [178, 183], "cbar_kw": [178, 183], "seismic_r": [178, 183], "stabilis": 178, "retain": [178, 392, 405, 408, 409, 413, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 490, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 691, 692, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 870, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 998, 1027], "ard_scor": 178, "scores_": [178, 179, 588, 591, 592, 594, 595, 596, 640, 641, 655, 1027, 1037], "brr_score": 178, "cutoff": [178, 939, 995, 1036], "full_data": 178, "input_featur": [178, 380, 392, 421, 426, 438, 439, 441, 443, 445, 460, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 1043], "x_plot": [178, 200, 205, 234, 263, 288, 310], "y_plot": [178, 200, 205, 263], "ard_poli": 178, "brr_poli": 178, "y_ard": 178, "y_ard_std": 178, "y_brr": 178, "y_brr_std": 178, "queri": [178, 286, 296, 364, 382, 411, 416, 440, 442, 446, 453, 548, 606, 607, 624, 640, 641, 721, 751, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 985, 988, 1001, 1005, 1029, 1031, 1032, 1035], "lambda_init": [178, 179, 641, 981, 1037], "intrins": [178, 392, 410, 412, 988, 993, 999, 1039], "669": [178, 218], "plot_ard": [178, 218, 640], "alpha_init": [179, 641, 981, 1037], "yoshihiro": [179, 1037], "uchida": [179, 1037], "nimbus1after2a1sun7show": 179, "1234": [179, 248, 263, 378], "n_order": 179, "vander": 179, "ymean": 179, "ystd": 179, "pink": 179, "_init": 179, "lambda_": [179, 640, 641, 873, 981, 1034], "278": [179, 218, 285, 297, 375, 837, 838], "plot_bayesian_ridge_curvefit": [179, 218], "normalized_weight": 180, "x_offset": 180, "x_center": 180, "x_scale": [180, 867, 883, 995], "uncent": 180, "incorrectli": [180, 412, 413, 549, 555, 557, 729, 735, 985, 1028, 1033, 1035, 1036, 1038, 1043], "lm": 180, "98809919e": 180, "48938813e": 180, "03237920e": 180, "25349312e": 180, "53959628e": 180, "67451144e": 180, "00768662e": 180, "19112072e": 180, "07963978e": 180, "47987268e": 180, "76195467e": 180, "00393284e": 180, "07582983e": 180, "66670169e": 180, "65799352e": 180, "99891212e": 180, "58195950e": 180, "58667835e": 180, "98350372e": 180, "60836363e": 180, "00911944e": 180, "elasticnetifittedelasticnet": 180, "812": [180, 218], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [180, 218], "huber": [181, 209, 404, 412, 556, 645, 672, 674, 999, 1027, 1029, 1030, 1039], "mks542": 181, "x_outlier": [181, 213, 289, 290, 335], "y_outlier": 181, "epsilon_valu": 181, "intercept_": [181, 189, 191, 208, 236, 334, 341, 345, 380, 392, 478, 479, 480, 545, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 897, 898, 899, 900, 901, 902, 903, 979, 981, 999, 1000, 1027, 1034, 1039, 1041, 1044], "coef_ridg": 181, "plot_huber_vs_ridg": [181, 218], "logreg": [182, 831], "047": [182, 218, 350, 384], "plot_iris_logist": [182, 218], "underdetermin": 183, "time_step": [183, 855], "anti": [183, 360, 602, 832, 987], "9502547": 183, "8059798": 183, "63394388": 183, "70359377": 183, "62241605": 183, "84077985": 183, "30506066": 183, "63327171": 183, "74495357": 183, "02456369": 183, "random_sampl": [183, 837, 838, 842], "sensor": 183, "monitor": [183, 207, 381, 392, 549, 550, 555, 556, 557, 558, 989, 1030, 1035, 1037, 1039], "superposit": 183, "tempor": [183, 1005, 1006], "y_pred_lasso": 183, "r2_score_lasso": 183, "480": 183, "y_pred_ard": 183, "r2_score_ard": 183, "091": 183, "elasticnetcv": [183, 392, 396, 642, 648, 656, 657, 658, 659, 677, 981, 1027, 1030, 1038, 1040, 1041, 1044], "enet": [183, 273], "y_pred_enet": 183, "r2_score_enet": 183, "nlasso": 183, "meinshausen": 183, "yu": [183, 405, 448, 458, 654, 981, 989, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "246": [183, 276, 993, 1027], "270": [183, 325], "490": [183, 218], "plot_lasso_and_elasticnet": [183, 218], "penalis": [184, 197, 214, 692], "enet_path": [184, 392, 643, 1029, 1031, 1040], "lasso_path": [184, 647, 648, 649, 650, 651, 652, 659, 678, 679, 981, 1027, 1029, 1031, 1040], "alphas_lasso": 184, "coefs_lasso": 184, "alphas_positive_lasso": 184, "coefs_positive_lasso": 184, "alphas_enet": 184, "coefs_enet": 184, "alphas_positive_enet": 184, "coefs_positive_enet": 184, "neg_log_alphas_lasso": 184, "neg_log_alphas_enet": 184, "coef_l": 184, "neg_log_alphas_positive_lasso": 184, "coef_pl": 184, "neg_log_alphas_positive_enet": 184, "coef_p": 184, "295": [184, 218], "plot_lasso_coordinate_descent_path": [184, 218, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680], "sai": [185, 228, 344, 349, 350, 378, 403, 405, 406, 410, 412, 413, 442, 443, 496, 500, 506, 673, 974, 991, 998, 1009, 1017, 1018, 1020], "x_sp": 185, "sparse_lasso": 185, "dense_lasso": 185, "coeff_diff": 185, "2e": [185, 274], "102": [185, 384, 1018, 1029], "039": [185, 258, 746, 776, 985], "01e": 185, "xs_sp": 185, "tocsc": 185, "nnz": [185, 350, 373, 695], "167": [185, 384, 1027], "863": 185, "65e": 185, "239": [185, 218, 297, 357, 359, 1027], "plot_lasso_dense_vs_sparse_data": [185, 218], "lars_path": [186, 387, 527, 533, 535, 538, 539, 541, 542, 544, 646, 647, 648, 649, 650, 651, 652, 659, 660, 661, 679, 680, 681, 682, 981, 1027, 1029, 1032, 1036, 1038], "plot_lasso_lar": [186, 218], "zht2007": 187, "lassolars": [187, 188, 414, 647, 650, 651, 981, 1027, 1034, 1036, 1040, 1041], "2173": [187, 652, 981], "2192": [187, 652, 981], "038076": [187, 188], "050680": [187, 188], "061696": [187, 188], "021872": [187, 188], "044223": [187, 188], "034821": [187, 188], "043401": [187, 188], "002592": [187, 188], "019907": [187, 188], "017646": [187, 188], "001882": [187, 188], "044642": [187, 188], "051474": [187, 188], "026328": [187, 188], "008449": [187, 188], "019163": [187, 188], "074412": [187, 188], "039493": [187, 188], "068332": [187, 188], "092204": [187, 188], "085299": [187, 188], "044451": [187, 188], "005670": [187, 188], "045599": [187, 188], "034194": [187, 188], "032356": [187, 188], "002861": [187, 188], "025930": [187, 188], "089063": [187, 188], "011595": [187, 188], "036656": [187, 188], "012191": [187, 188], "024991": [187, 188], "036038": [187, 188], "034309": [187, 188], "022688": [187, 188], "009362": [187, 188], "005383": [187, 188], "036385": [187, 188], "003935": [187, 188], "015596": [187, 188], "008142": [187, 188], "031988": [187, 188], "046641": [187, 188], "akaik": [187, 188, 250, 652, 793, 974, 981], "lasso_lars_": [187, 188], "zou_et_al_criterion_resc": 187, "noise_vari": [187, 528, 652, 981, 1041], "aic_criterion": 187, "criterion_": [187, 188, 652], "index_alpha_path_a": 187, "alphas_": [187, 188, 643, 646, 647, 649, 650, 651, 652, 657, 659, 678, 679, 1027, 1030, 1040], "lassolarsic__criterion": [187, 188], "bic_criterion": 187, "index_alpha_path_b": 187, "096": [187, 218], "plot_lasso_lars_": [187, 218], "n_random_featur": 188, "x_random": 188, "random_": 188, "02d": 188, "random_02": 188, "random_05": 188, "random_08": 188, "random_11": 188, "647689": 188, "234137": 188, "469474": 188, "465730": 188, "012831": 188, "412304": 188, "067528": 188, "110923": 188, "601707": 188, "057711": 188, "208864": 188, "196861": 188, "478522": 188, "057122": 188, "324084": 188, "611676": 188, "331263": 188, "185659": 188, "812526": 188, "003533": 188, "alpha_a": 188, "alpha_b": 188, "160030": 188, "5244": 188, "764779": 188, "300343": 188, "5208": 188, "250639": 188, "5212": 188, "341949": 188, "542052": 188, "4928": 188, "018900": 188, "4936": 188, "201520": 188, "034077": 188, "4869": 188, "678359": 188, "4881": [188, 1032], "952289": 188, "189631": 188, "4815": 188, "437362": 188, "4831": [188, 651], "802601": 188, "329616": 188, "4810": 188, "423641": 188, "4830": 188, "880191": 188, "306012": 188, "4803": 188, "573491": 188, "4828": 188, "121351": 188, "124225": 188, "4804": 188, "126502": 188, "4832": 188, "765671": 188, "820705": 188, "621645": 188, "4836": 188, "352124": 188, "750389": 188, "4805": 188, "012521": 188, "4841": 188, "834310": 188, "570655": 188, "290075": 188, "4846": 188, "203174": 188, "550213": 188, "4807": 188, "075887": 188, "4852": 188, "080295": 188, "358295": 188, "4806": 188, "878051": 188, "4855": 188, "973770": 188, "259297": 188, "706026": 188, "4860": 188, "893055": 188, "237703": 188, "4809": [188, 263], "440409": 188, "4866": 188, "718747": 188, "850031": 188, "989341": 188, "4867": 188, "358990": 188, "384338": 188, "4801": 188, "702266": 188, "163224": 188, "296575": 188, "4802": 188, "594754": 188, "4872": 188, "147022": 188, "031555": 188, "236720": 188, "4874": 188, "880298": 188, "618263": 188, "4798": 188, "484109": 188, "4876": 188, "218997": 188, "526599": 188, "4799": 188, "543841": 188, "370039": 188, "586798": 188, "4794": 188, "238744": 188, "4880": 188, "156252": 188, "445978": 188, "4795": 188, "589715": 188, "4885": 188, "598533": 188, "259031": 188, "4796": 188, "966981": 188, "4891": 188, "067109": 188, "032179": 188, "662409": 188, "4894": 188, "853846": 188, "019069": 188, "652739": 188, "4888": 188, "752867": 188, "626286": 188, "817724": 188, "set_xscal": [188, 204, 800], "optimist": [188, 265, 349, 360, 703, 981, 985], "badli": [188, 199, 349, 366, 877, 981, 995], "lassolarscv": [188, 396, 414, 648, 649, 650, 652, 659, 661, 678, 679, 680, 981, 1027, 1034, 1040, 1044], "3800": 188, "mse_path_": [188, 643, 647, 649, 651, 657, 659], "cv_alphas_": [188, 647, 651, 1039], "kink": 188, "heavili": [188, 364, 365, 378, 386, 645, 651, 1002], "efficaci": 188, "887": [188, 218], "plot_lasso_model_select": [188, 218, 643, 649], "plot_logist": [189, 218], "axes_row": 190, "clf_l1_lr": 190, "clf_l2_lr": 190, "clf_en_lr": 190, "coef_l1_lr": 190, "coef_l2_lr": 190, "coef_en_lr": 190, "sparsity_l1_lr": 190, "sparsity_l2_lr": 190, "sparsity_en_lr": 190, "nl1_ratio": 190, "plot_logistic_l1_l2_spars": [190, 218], "995": 191, "plot_logistic_multinomi": [191, 218], "976": [191, 268], "dupr": [191, 207, 283, 285, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "m4x": [191, 215], "sag": [191, 206, 654, 655, 668, 670, 683, 981, 999, 1005, 1032, 1033, 1034, 1036, 1037], "bry": [191, 208], "plot_hyperplan": [191, 208, 236], "187": [191, 218, 260, 384, 580, 986, 1018, 1029], "looser": 192, "liblinear": [192, 334, 384, 654, 655, 783, 897, 898, 899, 902, 903, 981, 985, 1000, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1043], "l1_min_c": [192, 981, 1000, 1027], "intercept_sc": [192, 654, 655, 897, 898, 904, 981, 1000], "coefs_": [192, 301, 854, 855, 989, 1032], "plot_logistic_path": [192, 218], "jointli": [193, 267, 404, 405, 410, 981], "instant": 193, "wave": [193, 378, 984], "n_task": [193, 981], "n_relevant_featur": 193, "multitasklasso": [193, 648, 656, 659, 981, 1027, 1035, 1038, 1040], "coef_lasso_": 193, "coef_multi_task_lasso_": 193, "spy": 193, "feature_to_plot": 193, "seagreen": 193, "237": [193, 218, 1018], "plot_multi_task_lasso_support": [193, 218], "reg_nnl": 194, "y_pred_nnl": 194, "r2_score_nnl": 194, "nnl": [194, 653], "8225220806196526": 194, "reg_ol": 194, "y_pred_ol": 194, "r2_score_ol": 194, "7436926291700353": 194, "low_x": 194, "high_x": 194, "low_i": 194, "high_i": 194, "get_ylim": [194, 305, 306], "847222222222214": 194, "061": [194, 218, 222, 258], "plot_nnl": [194, 218], "23786125": 195, "2548": 195, "diabetes_x": [195, 1018], "diabetes_i": [195, 1018], "diabetes_x_train": [195, 1018], "diabetes_x_test": [195, 1018], "diabetes_y_train": [195, 1018], "diabetes_y_test": [195, 1018], "regr": [195, 406, 550, 552, 561, 642, 643, 663, 830, 855, 898, 900, 903, 1000, 1018], "diabetes_y_pr": 195, "036": [195, 218, 384, 468], "plot_ol": [195, 218], "plot_ols_3d": [196, 218], "greatli": [197, 233, 320, 378, 386, 448, 988, 1001, 1033, 1041], "265": [197, 218, 730, 832, 836, 987], "plot_ols_ridge_vari": [197, 218], "make_sparse_coded_sign": [198, 527, 533, 1041, 1043], "orthogonalmatchingpursuit": [198, 661, 681, 682, 981, 1027, 1029, 1032, 1035, 1040], "orthogonalmatchingpursuitcv": [198, 396, 660, 1029, 1040, 1044], "512": 198, "n_nonzero_coef": [198, 522, 527, 533, 538, 544, 646, 660, 681, 682], "xw": [198, 318, 642, 643, 645, 648, 649, 650, 651, 652, 656, 657, 658, 659, 668, 677, 678, 679, 680, 981], "_0": [198, 681, 981, 985, 1000], "distort": [198, 232, 375, 403, 404, 874, 886, 891, 982, 995, 997], "y_noisi": 198, "idx_r": 198, "omp_cv": 198, "197": [198, 218], "plot_omp": [198, 218], "gbrt": [199, 412], "contract": [199, 217, 340, 365, 392, 1006], "compani": [199, 217, 405, 1009], "policyhold": [199, 217, 981], "vehicl": [199, 217], "driver": [199, 217, 1042], "exposur": [199, 217, 981], "car": 199, "accid": [199, 217], "noll": [199, 217], "salzmann": [199, 217], "wuthrich": [199, 217], "2139": [199, 217], "ssrn": [199, 217], "3164764": [199, 217], "ch": [199, 201, 217, 327, 329], "rth": [199, 217], "41214": [199, 217], "idpol": [199, 217], "claimnb": [199, 217], "vehpow": [199, 217], "vehag": [199, 217], "drivag": [199, 217], "bonusmalu": [199, 217], "vehbrand": [199, 217], "vehga": [199, 217], "b12": [199, 217], "1217": 199, "r82": 199, "77000": 199, "75000": 199, "diesel": [199, 217], "r22": 199, "09000": 199, "r72": 199, "84000": 199, "678008": 199, "6114326": 199, "00274": 199, "3317": 199, "r93": 199, "678009": 199, "6114327": 199, "9850": 199, "r11": [199, 217], "678010": 199, "6114328": 199, "1323": 199, "678011": 199, "6114329": 199, "r26": 199, "678012": 199, "6114330": 199, "678013": [199, 217], "10070308464041304": 199, "log_scale_transform": [199, 217], "linear_model_preprocessor": 199, "passthrough_numer": [199, 217], "binned_numer": [199, 217], "2e5": [199, 217], "log_scaled_numer": [199, 217], "onehot_categor": [199, 217], "imbalanc": [199, 263, 267, 269, 350, 390, 403, 409, 699, 704, 782, 795, 799, 834, 985, 987, 993, 1005], "simplist": [199, 413], "pertin": 199, "dummyregressor": [199, 217, 547, 985, 1028, 1030, 1031, 1034, 1035, 1037, 1040, 1041], "df_train": [199, 217], "df_test": [199, 217], "regressor__sample_weight": 199, "mean_absolute_error": [199, 201, 217, 985, 1028, 1030], "mean_poisson_devi": [199, 985, 1037], "score_estim": [199, 217], "n_mask": 199, "564": 199, "189": [199, 384, 894, 998], "commonli": [199, 257, 340, 371, 392, 405, 406, 415, 610, 753, 754, 792, 826, 869, 982, 983, 985, 986, 988, 1043], "ridge_glm": 199, "strictli": [199, 217, 235, 305, 321, 350, 383, 392, 403, 408, 410, 413, 504, 505, 531, 537, 540, 557, 558, 584, 587, 638, 666, 667, 691, 696, 734, 761, 794, 797, 798, 804, 808, 820, 846, 873, 885, 889, 890, 892, 893, 897, 898, 902, 903, 932, 974, 976, 981, 985, 995, 999, 1028, 1038, 1043], "domain": [199, 311, 392, 394, 409, 631, 717, 718, 719, 795, 796, 801, 802, 803, 981, 1006], "560": [199, 513, 514], "186": [199, 223, 226, 302, 328, 384, 783, 985], "595": 199, "223745": 199, "597": 199, "glm": [199, 217, 316, 644, 665, 676, 981, 1027, 1038], "vanilla": [199, 401, 405, 443, 445, 456, 625], "poissonregressor": [199, 217, 316, 319, 644, 676, 981, 1038, 1041, 1042], "poisson_glm": 199, "newton": [199, 217, 302, 606, 644, 654, 655, 665, 676, 854, 855, 981, 1031, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "deep": [199, 380, 392, 412, 419, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 764, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 989, 990, 1005, 1006, 1009, 1032, 1038, 1039, 1041], "implicit": [199, 392, 412, 413, 568, 678, 679, 979, 984, 1005, 1036], "concis": [199, 378, 383, 1038, 1040], "poisson_gbrt": 199, "566": 199, "prone": [199, 247, 309, 390, 403], "set_yscal": [199, 800], "5e5": 199, "realiz": [199, 1009], "priori": [199, 216, 269, 281, 305, 392, 405, 412, 584, 590, 984, 1043], "wrongli": [199, 336], "gen_even_slic": [199, 387, 937], "_mean_frequency_by_risk_group": 199, "y_true_bin": 199, "y_pred_bin": 199, "idx_sort": 199, "sl": 199, "y_true_seg": 199, "y_pred_seg": 199, "11935": 199, "11933": 199, "11932": 199, "12196": 199, "11931": 199, "portfolio": [199, 217, 979], "riskiest": [199, 217], "safest": [199, 217, 360, 372], "irrespect": [199, 232, 269, 283, 602], "lorenz": [199, 217, 1032], "summar": [199, 251, 267, 269, 351, 378, 380, 394, 412, 517, 654, 690, 702, 703, 981, 982, 985, 991], "lorenz_curv": [199, 217], "ranked_frequ": 199, "ranked_exposur": [199, 217], "cumulated_claim": 199, "cumulated_exposur": 199, "cum_exposur": 199, "cum_claim": [199, 217], "0x7fcb8a3eff10": 199, "occurr": [199, 311, 350, 351, 373, 378, 405, 413, 565, 566, 577, 585, 586, 613, 623, 624, 625, 626, 778, 832, 860, 987, 1028, 1033], "circumstanti": 199, "extractor": [199, 302, 366, 373, 392, 413, 499, 577, 578, 584, 585, 587, 974, 1027], "discrim": 199, "profil": [199, 364, 378, 381, 517, 520, 981, 1009], "ideal": [199, 201, 217, 257, 260, 267, 269, 270, 360, 377, 378, 382, 383, 386, 390, 392, 403, 721, 751, 974, 984, 999, 1000, 1006], "meaningfulli": [199, 985], "plot_poisson_regression_non_normal_loss": [199, 218], "monomi": 200, "vandermond": [200, 995], "x_0": [200, 653], "pseudo": [200, 302, 380, 409, 417, 436, 448, 450, 458, 465, 466, 467, 469, 470, 471, 472, 529, 557, 558, 559, 623, 630, 635, 637, 638, 642, 643, 648, 649, 656, 657, 658, 659, 673, 687, 691, 797, 798, 806, 808, 846, 853, 889, 890, 894, 897, 898, 899, 902, 933, 934, 981, 997, 1032, 1041], "basis_1": 200, "basis_2": 200, "infinit": [200, 245, 263, 340, 364, 415, 442, 618, 619, 773, 792, 915, 917, 918, 977, 984, 995, 1000, 1035, 1037, 1040, 1041, 1042], "malt": [200, 1040, 1041, 1042], "londschien": [200, 1040], "prepar": [200, 235, 349, 364, 380, 381, 384, 386, 1001, 1009, 1035, 1043], "set_prop_cycl": 200, "teal": [200, 209, 267], "yellowgreen": [200, 202, 209, 356], "tomato": 200, "unwant": [200, 349], "oscillatori": [200, 995], "danger": [200, 409], "pft": 200, "splt": 200, "bsplines_": [200, 876], "refrain": [200, 378], "dec": [200, 278, 673, 876, 901, 1000], "31st": [200, 876], "advis": [200, 235, 360, 376, 378, 405, 413, 433, 642, 648, 650, 656, 658, 668, 683, 953, 977, 981, 987, 989, 1000, 1041], "x_plot_ext": 200, "y_plot_ext": 200, "433": [200, 218, 354, 359, 375], "plot_polynomial_interpol": [200, 218, 872, 876], "pareto": 201, "dale": [201, 1040], "mail": [201, 310, 373, 378, 382, 386, 390, 393, 1003, 1035, 1036], "ru": 201, "glemaitre58": 201, "y_true_mean": 201, "y_normal": 201, "y_pareto": 201, "huge": [201, 204, 364, 384, 623, 1030], "heavi": [201, 402, 1006], "parse_vers": [201, 666], "sp_version": [201, 666], "incompat": [201, 382, 492, 975, 1035, 1036], "older": [201, 235, 377, 382, 1030, 1037, 1039], "recent": [201, 235, 367, 376, 379, 383, 386, 392, 405, 464, 534, 561, 999, 1009, 1030, 1039], "interior": [201, 666, 981, 1042], "out_bounds_predict": 201, "bool_": 201, "logical_or": [201, 207, 269, 384], "hit": [201, 384], "wider": [201, 413, 910, 981], "asymmetri": [201, 349], "linger": 201, "linear_regress": [201, 274], "quantile_regress": 201, "y_pred_lr": 201, "y_pred_qr": 201, "805": 201, "670": 201, "cv_results_lr": 201, "cv_results_qr": 201, "test_neg_mean_squared_error": [201, 820], "732": 201, "690": 201, "679": [201, 897], "plot_quantile_regress": [201, 218], "robustli": [202, 404], "faulti": [202, 1027], "1903908407869": 202, "17236387": 202, "08533159": 202, "ransacregressor": [202, 205, 216, 396, 645, 674, 675, 981, 1030, 1032, 1033, 1034, 1035, 1038, 1040, 1041], "inlier_mask": 202, "inlier_mask_": [202, 667], "outlier_mask": 202, "line_x": [202, 216], "line_i": 202, "line_y_ransac": 202, "estimator_": [202, 235, 549, 550, 551, 552, 553, 554, 559, 560, 561, 562, 589, 590, 593, 667, 969, 1042], "093": [202, 218, 240, 243, 467, 1032], "plot_ransac": [202, 218], "mathcal": [203, 344, 410, 412, 623, 692, 977, 979, 981, 985, 999, 1040], "discourag": [203, 390, 395, 685], "beta_": [203, 410], "excess": [203, 442, 995, 1034], "encourag": [203, 299, 336, 377, 378, 390, 1000, 1005], "kornel": [203, 1033], "kielczewski": [203, 1033], "plusnet": 203, "32634568": 203, "49665188": 203, "75747153": 203, "08699432": 203, "44381023": 203, "69892343": 203, "28808734": 203, "75949622": 203, "errors_coef": 203, "regularis": [203, 418, 469, 471], "logx": [203, 344], "gradual": [203, 854, 855, 999], "formerli": [203, 1028, 1031, 1033, 1034], "intric": [203, 508], "rapidli": [203, 262, 1000, 1009, 1014], "influenti": [203, 350, 1009], "pose": [203, 268, 981, 1019], "lose": [203, 216, 351, 373, 392, 408, 413, 415, 542, 933, 934, 975, 981, 1020], "concret": [203, 379, 393, 414, 664, 670, 671, 672, 673, 889, 890, 981, 999, 1005], "674": [203, 218], "plot_ridge_coeff": [203, 218], "practis": 204, "10x10": 204, "hilbert": [204, 863, 977, 995], "n_alpha": [204, 468, 642, 643, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 669, 671, 677, 678, 679, 680, 1030], "plot_ridge_path": [204, 218], "theilsen": 205, "lessen": [205, 654, 655], "theilsenregressor": [205, 216, 645, 667, 674, 981, 1031, 1039, 1041], "x_error": 205, "y_errors_larg": 205, "x_errors_larg": 205, "deviant": [205, 991], "legend_titl": 205, "nabsolut": 205, "nto": [205, 269], "811": [205, 218], "plot_robust_fit": [205, 218], "asgd": [206, 999], "rob": [206, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1039, 1042], "zinkov": [206, 1027, 1028, 1029, 1031, 1032], "heldout": 206, "squared_hing": [206, 344, 662, 672, 897, 904, 981, 1000], "0e4": 206, "yy_": 206, "368": [206, 218], "plot_sgd_comparison": [206, 218], "_test": [207, 307, 380, 1040], "ignore_warn": [207, 307, 1033], "load_mnist": [207, 283], "class_0": [207, 375, 506], "class_1": [207, 375, 506], "554": [207, 215, 301], "mnist_784": [207, 215, 283, 301], "fit_and_scor": 207, "train_scor": [207, 311, 344, 354, 800, 816, 820, 821, 824, 980], "estimator_dict": 207, "flush": 207, "results_df": [207, 260, 311], "group_df": 207, "589": [207, 218, 258, 276], "plot_sgd_early_stop": [207, 218], "ova": [208, 662, 664, 672, 999], "plot_sgd_iri": [208, 218], "ugli": [208, 291, 294, 332], "dim": [208, 232, 291, 292, 294, 332, 333, 523, 695], "modified_huber_loss": 209, "darkorchid": 209, "plot_sgd_loss_funct": [209, 218], "l1_color": 210, "l2_color": 210, "elastic_net_color": 210, "1001": [210, 242], "rho": [210, 410, 673, 981, 999, 1028], "elastic_net": 210, "dpi": [210, 911, 1040], "elastic_net_contour": 210, "l2_contour": 210, "l1_contour": 210, "inlin": [210, 378, 379, 1001], "277": [210, 218, 993, 1029], "plot_sgd_penalti": [210, 218], "ndenumer": 211, "070": [211, 218], "plot_sgd_separating_hyperplan": [211, 218], "no_weight": 212, "samples_weight": 212, "no_weights_handl": 212, "weights_handl": 212, "plot_sgd_weighted_sampl": [212, 218], "sgdoneclasssvm": [213, 228, 318, 901, 991, 999, 1040, 1042, 1043], "rc": [213, 382], "novel": [213, 289, 335, 360, 403, 974], "abnorm": [213, 228, 289, 335, 373, 488, 559, 843, 991, 1035], "y_pred_train": [213, 335], "y_pred_test": [213, 289, 335], "y_pred_outli": [213, 289, 335], "n_error_train": [213, 335], "n_error_test": [213, 289, 335], "n_error_outli": [213, 289, 335], "clf_sgd": 213, "pipe_sgd": 213, "y_pred_train_sgd": 213, "y_pred_test_sgd": 213, "y_pred_outliers_sgd": 213, "n_error_train_sgd": 213, "n_error_test_sgd": 213, "n_error_outliers_sgd": 213, "pubu": [213, 232, 289, 335], "darkr": [213, 289, 335], "palevioletr": [213, 289, 335], "b1": [213, 289, 335], "b2": [213, 289, 335], "blueviolet": [213, 289, 335], "plot_sgdocsvm_vs_ocsvm": [213, 218], "newgroups20": 214, "trim": [214, 405, 837, 838], "20newsgroup": [214, 371, 1027], "4500": 214, "130107": [214, 232, 485], "epoch": [214, 392, 532, 662, 663, 664, 672, 673, 674, 854, 855, 999, 1034, 1035, 1040], "5960": 214, "26593496": 214, "43348936": 214, "26362917": 214, "31973683": 214, "37815029": 214, "2928359": 214, "27054655": 214, "62717609": 214, "19522393": 214, "30897646": 214, "34586917": 214, "28207552": 214, "34125758": 214, "29898468": 214, "34279478": 214, "59489497": 214, "38353048": 214, "35278655": 214, "19829832": 214, "14603365": 214, "6440": 214, "36047253": 214, "1268187": 214, "10606655": 214, "17985197": 214, "5395559": 214, "07993421": 214, "06686804": 214, "21443888": 214, "11528972": 214, "2075215": 214, "10914094": 214, "11144673": 214, "13988486": 214, "09684337": 214, "26286057": 214, "11682692": 214, "55800226": 214, "17370318": 214, "11452112": 214, "584": 214, "arthur": [214, 215, 405, 443, 456, 1032, 1033, 1034, 1035, 1036, 1039, 1041], "mensch": [214, 215, 1032, 1033, 1034, 1035], "timeit": [214, 248, 384], "default_tim": [214, 248], "model_param": 214, "this_max_it": 214, "train_tim": [214, 234, 349, 350], "ndataset": [214, 307], "run_tim": [214, 215], "plot_sparse_logistic_regression_20newsgroup": [214, 218], "8253": 215, "551": 215, "l1_plot": 215, "614": [215, 218], "plot_sparse_logistic_regression_mnist": [215, 218], "subpopul": [216, 675, 981], "residual_threshold": [216, 667, 981, 1040], "remedi": 216, "max_subpopul": [216, 675, 1041], "florian": [216, 1009, 1027, 1031, 1033, 1037], "wilhelm": [216, 1031, 1033, 1037], "indigo": 216, "555": [216, 218, 712], "plot_theilsen": [216, 218], "motor": 217, "parti": [217, 278, 321, 365, 377, 390, 796, 803, 953, 1003, 1027, 1038, 1043, 1044], "liabil": 217, "functool": 217, "mean_tweedie_devi": [217, 985, 1037], "load_mtpl2": 217, "fremtpl2freq": 217, "df_freq": 217, "fremtpl2sev": 217, "41215": 217, "df_sev": 217, "claimamount": 217, "fillna": [217, 238], "unquot": 217, "column_nam": 217, "plot_obs_pr": 217, "y_label": 217, "fill_legend": 217, "df_": 217, "tweedie_pow": 217, "d\u00b2": 217, "subset_label": 217, "score_label": [217, 266], "est_freq": 217, "est_sev": 217, "unstack": [217, 263], "fremtpl2": 217, "unreason": [217, 409], "exception": 217, "200000": 217, "column_tran": [217, 406], "purepremium": 217, "indirectli": [217, 340], "avgclaimamount": 217, "fmax": 217, "option_context": 217, "max_column": 217, "139": [217, 283, 384, 412, 448, 458, 687, 691, 986], "414": [217, 406, 721, 751, 873, 885, 985], "463": [217, 278, 350], "27000": 217, "404": 217, "333333": 217, "r25": 217, "1981": [217, 981], "14156": 217, "142857": 217, "4792": 217, "1456": 217, "10403": 217, "928571": 217, "10834": 217, "17474": 217, "193548": 217, "225806": 217, "r73": 217, "3986": 217, "12860": [217, 1036], "5417": 217, "seemingli": [217, 360, 390], "169504": 217, "6237": 217, "upon": [217, 225, 296, 373, 378, 390, 392, 399, 557, 558, 623, 626, 667, 784, 792, 793, 837, 838, 974, 981, 1001, 1011, 1020, 1041], "glm_freq": 217, "0448": 217, "0427": [217, 465, 470], "1379": 217, "1378": 217, "2441": 217, "surprisingli": [217, 373, 413], "bonu": [217, 378, 1015, 1020], "malu": 217, "younger": 217, "infti": [217, 415, 615, 981, 995, 1034], "gammaregressor": [217, 316, 319, 676, 981, 1038, 1041, 1042], "mask_test": 217, "glm_sev": 217, "900000e": 217, "400000e": 217, "756746e": 217, "744042e": 217, "801770e": 217, "030677e": 217, "dummy_sev": 217, "000000e": 217, "756687e": 217, "744497e": 217, "803882e": 217, "033764e": 217, "avgclaim": 217, "nbclaim": 217, "1951": 217, "1940": 217, "1978": [217, 981], "apriori": 217, "regardless": [217, 261, 262, 263, 365, 378, 405, 531, 628, 629, 654, 700, 711, 985, 997, 1035, 1042, 1043], "glm_pure_premium": 217, "999": [217, 260, 345, 347, 382, 412, 713, 854, 855], "scores_product_model": 217, "scores_glm_pure_premium": 217, "expand_frame_repr": 217, "640000e": 217, "370000e": 217, "669930e": 217, "617050e": 217, "640770e": 217, "640880e": 217, "7000": 217, "695740e": 217, "683980e": 217, "682880e": 217, "692270e": 217, "8000": [217, 263, 264], "046010e": 217, "040530e": 217, "037600e": 217, "045390e": 217, "9000": 217, "387580e": 217, "385000e": 217, "382120e": 217, "387830e": 217, "9900": 217, "015716e": 217, "015414e": 217, "015347e": 217, "015587e": 217, "9990": 217, "914573e": 217, "914370e": 217, "914538e": 217, "914387e": 217, "904751e": 217, "904556e": 217, "904747e": 217, "904558e": 217, "730119e": 217, "722128e": 217, "739865e": 217, "731249e": 217, "295040e": 217, "212197e": 217, "295505e": 217, "213056e": 217, "917618e": 217, "299546e": 217, "916555e": 217, "313276e": 217, "951751e": 217, "325198e": 217, "riski": 217, "operation": [217, 1009], "simpler": [217, 336, 364, 377, 405, 410, 981, 986, 1018, 1032], "develop": [217, 258, 260, 278, 315, 321, 349, 364, 367, 373, 377, 378, 384, 390, 392, 393, 394, 396, 399, 402, 404, 407, 408, 412, 413, 419, 422, 429, 489, 794, 969, 981, 985, 988, 1001, 1003, 1005, 1006, 1008, 1009, 1018, 1027, 1035, 1036, 1037, 1040, 1042, 1044], "ranked_pure_premium": 217, "cumulated_claim_amount": 217, "cumulated_sampl": 217, "y_pred_product": 217, "y_pred_tot": 217, "ordered_sampl": 217, "plot_tweedie_regression_insurance_claim": [217, 218], "auto_examples_linear_model": 218, "md": [220, 221, 222, 223, 382, 684, 688, 690, 1021, 1022, 1027, 1039, 1042], "seek": [220, 222, 224, 377, 378, 390, 393, 504, 505, 982, 1012, 1014], "ticker": [220, 222, 225, 283], "s_point": 220, "s_color": 220, "make_s_curv": [220, 225], "plot_3d": 220, "points_color": 220, "subplot_kw": [220, 287], "set_major_loc": [220, 288], "multipleloc": [220, 288], "add_2d_scatt": 220, "set_major_formatt": [220, 222, 225, 283, 288], "nullformatt": [220, 222, 225, 283], "lle": [220, 221, 222, 224, 526, 685, 689, 982, 1039], "thought": [220, 288, 392, 405, 442, 982, 986], "analys": [220, 358, 410, 797, 798, 982, 1005, 1009], "lle_standard": 220, "s_standard": 220, "lle_ltsa": 220, "ltsa": [220, 221, 222, 685, 689, 982], "s_ltsa": 220, "lle_hessian": 220, "hessian": [220, 221, 222, 412, 644, 654, 655, 665, 676, 685, 689, 981, 989, 1021, 1022, 1042], "s_hessian": 220, "lle_mod": 220, "s_mod": 220, "lle_method": 220, "tangent": [220, 340, 685, 689, 983, 1021, 1022], "eigenmap": [220, 685, 687, 689, 691, 1021, 1022, 1028], "isometr": [220, 684, 686, 687, 688, 982], "geodes": [220, 684, 982], "s_isomap": 220, "md_scale": 220, "normalized_stress": [220, 221, 222, 223, 686, 690, 982, 1042], "s_scale": 220, "laplacian": [220, 370, 402, 436, 448, 458, 616, 635, 639, 687, 691, 760, 761, 769, 893, 981, 982, 998, 1022, 1028, 1033], "s_spectral": 220, "t_sne": [220, 1035], "s_t_sne": 220, "751": [220, 226], "plot_compare_method": [220, 226], "offsetbox": 221, "plot_embed": 221, "425": [221, 611], "shown_imag": 221, "someth": [221, 235, 278, 349, 378, 380, 381, 382, 386, 413, 985, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "4e": 221, "imagebox": 221, "annotationbbox": 221, "offsetimag": 221, "neighborhoodcomponentsanalysi": [221, 291, 292, 293, 988, 1036, 1041], "random_project": [221, 232, 367, 997, 1002, 1028, 1033, 1043], "sparserandomproject": [221, 232, 889, 997, 1028, 1033, 1041, 1043], "n_iter_without_progress": [221, 688, 1032, 1033], "nca": [221, 291, 292, 293, 846, 988], "plot_lle_digit": [221, 226], "pole": 222, "thin": [222, 616], "earth": [222, 350, 759, 1005], "sphere_data": 222, "trans_data": 222, "2g": [222, 225, 693, 1038], "257": [222, 258], "258": 222, "plot_manifold_spher": [222, 226], "euclidean_dist": [223, 232, 380, 446, 453, 684, 757, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 1027, 1032, 1035, 1036, 1044], "finfo": [223, 467, 468, 474, 602, 646, 647, 650, 651, 652, 678, 679, 736, 1042], "x_true": 223, "dissimilar": [223, 340, 392, 402, 448, 686, 690, 982, 1033, 1043], "embedding_": [223, 392, 684, 685, 686, 687, 688], "nmd": 223, "npo": 223, "plot_md": [223, 226], "sr_point": 224, "sr_color": 224, "ambient": 224, "text2d": 224, "unrol": 224, "unnecessarili": [224, 1034, 1037], "clump": 224, "sr_lle": 224, "sr_err": 224, "locally_linear_embed": [224, 982], "sr_tsne": 224, "stretch": [224, 249], "byproduct": 224, "sh_point": 224, "sh_color": 224, "topologi": [224, 225], "sh_lle": 224, "sh_err": 224, "sh_tsne": 224, "583": [224, 226, 405, 1018], "plot_swissrol": [224, 226], "tendenc": [225, 981, 982, 984, 987, 990], "clearer": [225, 1000], "distil": 225, "pub": [225, 835, 892], "misread": 225, "narin": [225, 1034, 1035], "kokhlikyan": [225, 1034, 1035], "plot_t_sne_perplex": [225, 226], "173": [226, 384, 580], "auto_examples_manifold": 226, "cope": [228, 366, 373, 981], "multimod": 228, "inli": [228, 981, 991], "unimod": [228, 470], "localoutlierfactor": [228, 238, 289, 290, 319, 392, 559, 901, 991, 1034, 1035, 1037, 1041, 1042, 1043], "modal": [228, 470, 936], "hypercub": [228, 511], "decent": [228, 259, 373, 987], "handpick": 228, "absenc": [228, 263, 392, 708, 860, 984, 985], "negative_linestyl": 228, "outliers_fract": 228, "n_inlier": 228, "anomaly_algorithm": 228, "blobs_param": 228, "plot_anomaly_comparison": [228, 243], "transfus": 229, "1464": 229, "donat": 229, "cm_displai": 229, "y_score": [229, 267, 269, 392, 478, 479, 480, 703, 716, 721, 722, 734, 735, 751, 777, 783, 784, 789, 794, 797, 798, 808, 857, 985, 1033, 1041, 1043], "pos_label": [229, 238, 392, 434, 435, 694, 696, 698, 702, 703, 705, 722, 724, 725, 733, 777, 778, 779, 782, 784, 864, 881, 985, 1035, 1039, 1041], "roc_displai": 229, "previs": 229, "precision_recall_curv": [229, 267, 696, 702, 703, 722, 985, 1028, 1029, 1033, 1040, 1041, 1043], "pr_displai": 229, "easlii": 229, "310": [229, 243], "plot_display_object_visu": [229, 243], "summaris": [230, 316], "composit": [230, 316, 367, 370, 409, 654, 783, 975, 981, 994, 1022, 1028], "num_proc": [230, 316], "cat_proc": [230, 316], "feat1": [230, 316, 413], "feat3": [230, 316, 413], "feat0": [230, 316], "feat2": [230, 316, 413], "plot_estimator_represent": [230, 243], "isotonicregress": [231, 976, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1039, 1041, 1042, 1043], "ir": [231, 410, 586, 721, 751, 832, 836, 983, 985], "out_of_bound": [231, 631], "y_": [231, 246, 250, 251, 295, 380, 408, 410, 633, 644, 665, 676, 724, 725, 733, 759, 778, 779, 782, 981, 985, 1033], "linearregressionifittedlinearregress": 231, "x_thresholds_": [231, 631, 1039], "y_thresholds_": [231, 631, 1039], "plot_isotonic_regress": [231, 243], "lemma": [232, 370, 404, 530, 537, 545, 889, 890, 891, 979, 1022, 1030], "johnson_lindenstrauss_min_dim": [232, 997, 1028], "achliopta": [232, 890, 891, 997], "_compon": [232, 532], "geq": [232, 403, 410, 412, 981, 985, 995, 999, 1000], "_sampl": [232, 410, 534, 536, 543], "admiss": [232, 365], "eps_rang": 232, "min_n_compon": 232, "nn_sampl": [232, 272], "semilogi": 232, "nn_compon": [232, 233], "100k": 232, "n_components_rang": 232, "rp": 232, "projected_data": 232, "n_byte": 232, "projected_dist": 232, "min_dist": 232, "max_dist": 232, "hexbin": 232, "gridsiz": 232, "293": 232, "829": 232, "770": 232, "jl": [232, 890], "436": 232, "328": [232, 243, 350, 725], "plot_johnson_lindenstrauss_bound": [232, 243], "rbfsampler": [233, 635, 636, 638, 977, 1011, 1031, 1041, 1042], "mont": [233, 415, 607, 637, 638, 977, 990], "fourier": [233, 404, 634, 635, 636, 637, 638, 753, 754, 977], "acceler": [233, 320, 364, 390, 401, 405, 464, 688, 895, 982, 1005, 1009, 1036, 1040, 1042, 1044], "data_train": [233, 261, 349], "targets_train": 233, "data_test": [233, 261, 349], "targets_test": 233, "kernel_svm": 233, "linear_svm": 233, "feature_map_fouri": 233, "feature_map_nystroem": [233, 635], "fourier_approx_svm": 233, "feature_map": [233, 305], "nystroem_approx_svm": 233, "kernel_svm_tim": 233, "kernel_svm_scor": 233, "linear_svm_tim": 233, "linear_svm_scor": 233, "fourier_scor": 233, "nystroem_scor": 233, "fourier_tim": 233, "nystroem_tim": 233, "feature_map__n_compon": 233, "timescal": 233, "ly": [233, 845, 847, 848, 849, 1031], "flat_grid": 233, "lv_ep": 233, "tab10": [233, 250], "695": [233, 243, 258], "plot_kernel_approxim": [233, 243], "krr": [234, 639, 978], "insensit": [234, 639, 672, 674, 783, 898, 978, 999, 1000, 1027], "fifth": [234, 978, 1011], "kr": [234, 260, 1041], "svr_fit": 234, "kr_fit": 234, "sv_ratio": 234, "support_": [234, 343, 465, 470, 589, 590, 598, 899, 900, 901, 902, 903, 1000], "y_svr": 234, "svr_predict": 234, "y_kr": 234, "kr_predict": 234, "09999999999999999": [234, 268, 336], "737": [234, 520], "340": [234, 324], "sv_ind": 234, "arithmet": [234, 384, 386, 405, 547, 644, 665, 676, 700, 713, 731, 732, 752, 790, 985, 1035], "test_tim": [234, 349], "train_test_s": 234, "learningcurvedisplai": [234, 262, 320, 980, 1042, 1043], "negate_scor": [234, 800, 816], "score_typ": [234, 262, 275, 321, 800, 816, 1043], "std_display_styl": [234, 262, 800, 816], "get_legend_handles_label": [234, 262, 267], "plot_kernel_ridge_regress": [234, 243], "set_config": [235, 240, 242, 312, 316, 364, 365, 396, 406, 433, 439, 440, 443, 445, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 593, 606, 607, 622, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 795, 796, 801, 803, 812, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 1036, 1038, 1041, 1043], "metaestimatormixin": 235, "regressormixin": [235, 380, 392, 461, 1038], "transformermixin": [235, 283, 380, 392, 461, 1035, 1042, 1043, 1044], "metadata_rout": [235, 404, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908], "metadatarout": [235, 433, 460, 593, 643, 647, 649, 651, 655, 657, 659, 661, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 857, 944, 1044], "methodmap": [235, 942], "get_routing_for_object": [235, 942], "process_rout": [235, 1044], "my_group": [235, 396], "my_weight": [235, 396], "my_other_weight": [235, 396], "enable_metadata_rout": [235, 396, 433, 439, 440, 443, 445, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 593, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 794, 795, 796, 797, 798, 801, 803, 808, 812, 818, 819, 820, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 1043], "check_metadata": 235, "obj": [235, 399, 563, 564, 942, 943, 944, 945, 946, 951], "print_rout": 235, "get_metadata_rout": [235, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 941, 942, 943, 944, 945, 985, 1044], "_serial": 235, "exampleclassifi": 235, "smart": [235, 439, 455, 456, 586], "accomplish": [235, 380, 403, 542, 982, 986, 988, 1009, 1044], "magic": [235, 379, 384, 415, 612, 617, 620], "set_fit_request": [235, 396, 433, 439, 440, 443, 445, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 584, 587, 590, 631, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 686, 829, 830, 832, 833, 834, 835, 836, 842, 862, 863, 876, 877, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908], "set_predict_request": [235, 439, 443, 445, 478, 479, 480, 548, 607, 631, 640, 641, 905, 906, 907, 908], "set_score_request": [235, 396, 433, 439, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 606, 607, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 839, 840, 844, 847, 848, 854, 855, 857, 892, 893, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 985], "inherit": [235, 378, 380, 391, 392, 573, 672, 926, 928, 981, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044], "metaclassifi": [235, 236], "owner": [235, 373, 375, 941, 942], "method_map": [235, 942], "fit_param": [235, 392, 429, 433, 438, 441, 461, 528, 530, 532, 533, 535, 538, 539, 545, 563, 565, 566, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 624, 626, 631, 634, 635, 636, 637, 638, 661, 800, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 841, 846, 849, 853, 856, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 889, 890, 945, 1034, 1037, 1038, 1039, 1041, 1043, 1044], "metadatarequest": [235, 419, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 465, 466, 467, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 591, 592, 594, 595, 596, 599, 606, 607, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 650, 652, 653, 654, 656, 658, 660, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 942, 944, 1044], "request_rout": 235, "validate_metadata": [235, 942], "routed_param": [235, 945], "route_param": [235, 942], "caller": [235, 406, 642, 643, 648, 656, 657, 658, 677, 887, 888, 942, 943, 953, 961, 962, 963, 1036], "predict_param": [235, 461, 563, 564, 1040], "object_nam": [235, 942, 945], "method_nam": [235, 942, 945], "silent": [235, 413, 577, 853, 995, 1032, 1033, 1035, 1036, 1040, 1041], "bug": [235, 315, 316, 317, 318, 319, 320, 321, 367, 376, 380, 381, 383, 386, 390, 392, 1003, 1006, 1027, 1028, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "notabl": [235, 305, 372, 392, 492, 723, 870, 982, 984, 988, 1031, 1034, 1041], "metaclassifierifittedmetaclassifi": 235, "exampleclassifierexampleclassifi": 235, "typeerror": [235, 318, 383, 707, 921, 942, 969, 1034, 1035, 1038, 1040, 1044], "got": [235, 267, 360, 383, 547, 645, 661, 1040, 1042], "sample_weight1": 235, "sample_weight2": 235, "aliased_sample_weight": 235, "alia": [235, 379, 382, 386, 392, 433, 439, 440, 443, 445, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 529, 530, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 584, 586, 587, 590, 606, 607, 613, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 686, 795, 796, 801, 803, 812, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 842, 844, 847, 848, 854, 855, 857, 860, 862, 863, 864, 869, 876, 877, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 959, 991, 1006, 1027, 1041], "calle": [235, 943], "predict_log_proba": [235, 380, 392, 545, 546, 547, 549, 551, 553, 555, 560, 589, 590, 654, 655, 672, 794, 797, 798, 808, 818, 832, 833, 834, 835, 836, 854, 857, 894, 899, 902, 905, 907, 1000, 1027, 1040], "meta_est": 235, "routerconsumerclassifi": 235, "add_self_request": [235, 942], "self_request": 235, "clf_sample_weight": 235, "meta_clf_sample_weight": 235, "routerconsumerclassifierifittedrouterconsumerclassifi": 235, "complic": [235, 299, 384, 415, 690, 988], "simplepipelin": 235, "_required_paramet": [235, 380], "transformer_": [235, 461], "child": [235, 349, 358, 365, 390, 392, 396, 405, 412, 438, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 905, 906, 907, 908, 942, 943, 945, 953, 1001, 1034], "boilerpl": [235, 380, 1009, 1020], "exampletransform": 235, "set_transform_request": [235, 478, 479, 480, 529, 578, 584, 586, 587, 631, 860, 863, 869, 877], "metaregressor": 235, "weightedmetaregressor": 235, "__metadata_request__fit": 235, "compat": [235, 263, 283, 316, 372, 381, 387, 388, 390, 392, 395, 396, 413, 459, 465, 504, 562, 573, 581, 582, 585, 599, 610, 611, 614, 615, 616, 618, 619, 628, 629, 630, 654, 655, 669, 671, 769, 773, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 841, 842, 857, 862, 870, 871, 909, 910, 913, 948, 982, 985, 988, 990, 1005, 1006, 1009, 1022, 1027, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "silenc": [235, 492], "exampleregressor": 235, "commun": [235, 371, 377, 381, 383, 386, 392, 405, 412, 534, 536, 543, 688, 706, 869, 975, 982, 988, 995, 999, 1003, 1005, 1009, 1035, 1036], "vendor": [235, 1032, 1035, 1036], "NOT": [235, 289, 375, 381, 804, 837, 838], "signatur": [235, 349, 350, 373, 484, 485, 553, 554, 560, 561, 590, 606, 607, 655, 669, 671, 707, 737, 800, 816, 819, 821, 824, 870, 945, 974, 1034, 1040, 1044], "050": [235, 243, 993], "plot_metadata_rout": [235, 243], "theta_c": [236, 519], "reject": [236, 392, 393, 519, 667, 722, 917, 918, 981, 985, 1035], "likewis": [236, 405, 519], "surround": [236, 378, 843, 991], "cca": [236, 408, 479, 481, 1031, 1035, 1036, 1037, 1039, 1041], "onevsrestclassifi": [236, 267, 269, 278, 281, 396, 403, 825, 827, 897, 1011, 1028, 1029, 1031, 1033, 1034, 1040, 1041, 1044], "min_x": 236, "max_x": 236, "plot_subfigur": 236, "min_i": 236, "zero_class": 236, "one_class": 236, "160": [236, 974, 1018], "nfor": 236, "196": [236, 243, 255, 276, 894, 998], "plot_multilabel": [236, 243], "extratreesregressor": [237, 412, 553, 561, 562, 907, 908, 1030, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "n_face": 237, "face_id": 237, "n_pixel": [237, 258], "nn": [237, 413, 691, 1018], "y_test_predict": 237, "true_fac": 237, "completed_fac": 237, "707": [237, 243, 873, 885], "plot_multioutput_face_complet": [237, 243], "iforest": 238, "pharuj": 238, "rajborirug": 238, "ra": 238, "kmitl": 238, "ac": [238, 526, 660, 681, 682, 981, 998, 1020], "robustscal": [238, 874, 887, 975, 995, 1032, 1033, 1035, 1037, 1038, 1039, 1043], "make_estim": 238, "iforest_kw": 238, "lof_kw": 238, "outlier_detector": 238, "perf_count": 238, "negative_outlier_factor_": [238, 290, 843, 991], "expected_n_anomali": 238, "expected_anomaly_fract": 238, "kddcup": [238, 371, 488, 1022], "inject": [238, 373, 412], "attack": [238, 373], "fetch_kddcup99": [238, 373, 1034, 1035, 1036, 1039, 1040], "percent10": [238, 488], "int32": [238, 283, 312, 378, 392, 439, 443, 445, 447, 449, 899, 900, 901, 902, 903, 950, 1000, 1036, 1042, 1043, 1044], "anomaly_frac": 238, "10065": 238, "protocol_typ": 238, "cat_column": 238, "wilderness_area": 238, "soil_typ": 238, "x_forestcov": 238, "14302": 238, "137": [238, 384, 1028], "forestcov": 238, "usd": 238, "sqft": 238, "ames_h": 238, "div": 238, "lot_area": 238, "misc_featur": 238, "add_categori": 238, "noinfo": 238, "mas_vnr_typ": 238, "2714": 238, "categorical_columns_selector": 238, "fetal": 238, "cardiotocogram": 238, "heart": 238, "fhr": 238, "minor": [238, 263, 267, 373, 381, 393, 492, 985, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "x_cardiotocographi": 238, "2126": 238, "datasets_nam": 238, "ceil": [238, 553, 554, 555, 556, 559, 560, 561, 562, 590, 667, 797, 798, 905, 906, 907, 908, 999], "dataset_nam": [238, 283], "model_idx": 238, "plot_chance_level": [238, 267, 269, 270, 696, 698, 1043], "chance_level_kw": [238, 696, 698, 1043], "privileg": [238, 386], "n_neighbors_list": [238, 285], "localoutlierfactor__n_neighbor": 238, "preprocessor_list": 238, "interquartil": [238, 875, 887], "iqr": [238, 875, 887], "75th": [238, 875], "squash": [238, 382, 415, 527, 533, 538, 544], "plot_outlier_detection_bench": [238, 243], "recalcul": [239, 241, 405, 1024, 1027], "mlpregressormlpregressor": 239, "tree_disp": 239, "mlp_disp": 239, "0x7fcb99e072b0": 239, "plot_partial_dependence_visualization_api": [239, 243], "deactiv": [240, 372, 379, 384, 395, 406, 797, 798, 1041], "standard_scal": 240, "polynomialfeaturespolynomialfeatur": 240, "pcapca": 240, "svcsvc": [240, 258, 260, 317], "numeric_preprocessor": 240, "imputation_mean": 240, "categorical_preprocessor": [240, 311], "imputation_const": 240, "onehot": [240, 306, 307, 406, 862, 995], "gender": [240, 870, 995], "classifier__n_estim": 240, "classifier__max_featur": 240, "classifier__max_depth": 240, "classifier__criterion": 240, "gridsearchcvinot": 240, "fittedgridsearchcv": 240, "plot_pipeline_displai": [240, 243], "svcifittedsvc": 241, "svc_disp": [241, 315, 1024], "rfc_disp": [241, 315, 1024], "plot_roc_curve_visualization_api": [241, 243], "transform_output": [242, 312, 464, 895, 1042, 1043], "slep018": [242, 380, 1042], "x_test_scal": 242, "894264": 242, "798301": 242, "271411": 242, "327605": 242, "244466": 242, "086944": 242, "327407": 242, "459074": 242, "660797": 242, "462234": 242, "576989": 242, "159419": 242, "933197": 242, "427329": 242, "414810": 242, "039497": 242, "275851": 242, "scaler2": 242, "x_test_np": 242, "x_test_df": 242, "feature_names_in_": [242, 312, 318, 392, 426, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 623, 624, 625, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 1040, 1041, 1042, 1043], "num_pip": 242, "num_col": 242, "7621951219512195": 242, "log_reg": [242, 319], "config_context": [242, 364, 365, 401, 622, 895, 1034, 1040, 1043], "reset": [242, 360, 386, 530, 672, 673, 674, 837, 838, 866, 867, 877, 1029], "standardscalerifittedstandardscal": 242, "1088": 242, "151101": 242, "479229": 242, "188153": 242, "393297": 242, "263234": 242, "657": [242, 260], "975455": 242, "532843": 242, "546068": 242, "1511007": 242, "47922861": 242, "18815268": 242, "39329747": 242, "26323428": 242, "97545464": 242, "53284267": 242, "54606834": 242, "plot_set_output": [242, 243], "465": 243, "auto_examples_miscellan": 243, "bayesiangaussianmixtur": [245, 246, 251, 793, 984, 1033, 1035, 1036, 1040, 1041], "weight_concentration_prior_typ": [245, 251, 792, 984, 1033], "dirichlet_distribut": [245, 792, 984, 1033], "dirichlet_process": [245, 251, 792, 984, 1033], "weight_concentration_prior": [245, 251, 792, 984], "finit": [245, 251, 364, 373, 392, 464, 534, 547, 578, 602, 605, 606, 607, 654, 723, 773, 780, 792, 818, 895, 915, 917, 918, 981, 984, 985, 1009, 1011, 1018, 1034, 1035, 1039, 1041, 1042], "covar": [245, 246, 251], "eig_val": 245, "eig_vec": 245, "unit_eig_vec": 245, "arctan2": [245, 247, 250], "56b4e9": 245, "plot_titl": 245, "weights_": [245, 792, 793, 1041], "covariances_": [245, 246, 247, 250, 251, 792, 793, 1034], "get_xaxi": [245, 293, 305], "set_tick_param": 245, "007": [245, 268, 283, 350], "labelleft": 245, "0072b2": 245, "f0e442": 245, "d55e00": 245, "mean_precision_prior": [245, 251, 792], "nprior": 245, "gamma_0": [245, 251], "reg_covar": [245, 792, 793], "init_param": [245, 248, 251, 792, 793], "concentrations_prior": 245, "896": [245, 252, 644], "plot_concentration_prior": [245, 252], "_base": [246, 380], "color_it": [246, 250, 251], "splot": [246, 251], "dp": [246, 251], "shouldn": [246, 251, 378], "em": [246, 247, 251, 439, 443, 455, 532, 792, 793, 984, 1041], "dpgmm": [246, 251, 1027, 1031, 1033], "233": [246, 252], "plot_gmm": [246, 252], "ronweiss": 247, "make_ellips": 247, "datalim": 247, "skf": [247, 409, 813], "train_index": [247, 327, 409, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815], "test_index": [247, 327, 409, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815], "cov_typ": 247, "means_init": [247, 248, 793], "y_train_pr": 247, "train_accuraci": 247, "y_test_pr": 247, "test_accuraci": [247, 261], "202": [247, 252], "plot_gmm_covari": [247, 252], "random_from_data": [248, 792, 793, 984], "diamond": 248, "colour": [248, 375, 413, 583, 986], "eventu": [248, 404, 405, 414, 589, 1009], "walsh": [248, 1039, 1041], "timer": [248, 384], "_samples_gener": 248, "extmath": [248, 349, 387, 404, 449, 1027, 1028, 1033, 1034, 1037, 1041, 1042, 1044], "row_norm": 248, "x_squared_norm": [248, 456], "get_initial_mean": 248, "times_init": 248, "relative_tim": 248, "ini": 248, "init_tim": 248, "2fx": 248, "572": [248, 252], "plot_gmm_init": [248, 252], "shifted_gaussian": 249, "stretched_gaussian": 249, "score_sampl": [249, 288, 289, 290, 296, 392, 411, 465, 528, 537, 559, 673, 792, 793, 794, 797, 798, 808, 842, 843, 853, 857, 901, 991, 1030, 1035, 1037, 1039], "plot_gmm_pdf": [249, 252], "component_1": 250, "component_2": 250, "best_parameters_": 250, "gmm_bic_scor": 250, "callabl": [250, 264, 392, 409, 413, 414, 416, 417, 437, 439, 440, 441, 442, 443, 445, 446, 448, 453, 455, 456, 460, 461, 462, 463, 527, 529, 531, 533, 535, 541, 542, 553, 554, 555, 556, 557, 558, 560, 561, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 606, 607, 616, 624, 630, 635, 639, 655, 662, 667, 669, 671, 684, 687, 688, 692, 707, 715, 727, 737, 766, 769, 773, 774, 775, 776, 787, 788, 794, 797, 798, 800, 808, 816, 819, 820, 821, 822, 824, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 861, 870, 892, 893, 899, 900, 901, 902, 903, 946, 952, 955, 969, 974, 985, 995, 1027, 1031, 1034, 1035, 1036, 1037, 1039, 1041, 1043], "0x7fcb9a447d30": 250, "gaussianmixturegaussianmixtur": 250, "param_n_compon": 250, "param_covariance_typ": 250, "renam": [250, 261, 378, 382, 405, 437, 441, 442, 443, 455, 467, 468, 474, 532, 549, 550, 551, 552, 553, 554, 559, 560, 561, 562, 870, 1027, 1028, 1029, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "829429": 250, "1084": 250, "038689": 250, "1114": 250, "517272": 250, "1148": 250, "512281": 250, "1179": 250, "977890": 250, "catplot": 250, "hue": [250, 260, 310, 375], "280": [250, 252, 325], "plot_gmm_select": [250, 252], "loos": [251, 257, 1000, 1035], "liberti": 251, "judgment": [251, 985], "panel": [251, 288, 305, 411, 1005], "primarili": [251, 265, 378, 392, 401, 405, 943, 1009, 1036, 1037], "covariance_prior": [251, 792], "439": [251, 252], "plot_gmm_sin": [251, 252], "746": [252, 375], "auto_examples_mixtur": 252, "mislabel": [254, 412, 987], "imbal": [254, 263, 409, 703, 724, 725, 733, 778, 779, 782, 783, 985], "life": [254, 386, 982], "set_printopt": 254, "titles_opt": 254, "165": [254, 276, 986], "plot_confusion_matrix": [254, 276, 315, 1037, 1038, 1039, 1040], "groupkfold": [255, 265, 396, 409, 590, 799, 800, 801, 802, 803, 812, 816, 818, 819, 820, 821, 824, 1015, 1033, 1040], "groupshufflesplit": [255, 409, 1015, 1033], "shufflesplit": [255, 262, 344, 409, 796, 802, 804, 814, 823, 1015, 1027, 1028, 1030, 1032, 1033], "stratifiedgroupkfold": [255, 1040], "stratifiedshufflesplit": [255, 336, 409, 1015, 1027, 1028, 1033, 1034, 1040], "1338": 255, "cmap_data": 255, "cmap_cv": 255, "coolwarm": [255, 333], "n_point": [255, 837, 838], "percentiles_class": 255, "perc": 255, "group_prior": 255, "visualize_group": 255, "yticklabel": [255, 349], "ngroup": 255, "nclass": 255, "plot_cv_indic": [255, 276], "tr": [255, 375, 382, 405, 407, 465, 466, 467, 468, 469, 470, 471, 472, 835], "this_cv": 255, "179": [256, 276, 375, 384, 412, 1027], "plot_cv_predict": [256, 276], "fnr": [257, 694, 722], "det_curv": [257, 694, 777, 784, 985, 1039, 1040], "detcurvedisplai": [257, 318, 722, 1039, 1040], "ax_roc": 257, "ax_det": 257, "feedback": [257, 377, 378, 379, 393, 1005, 1035], "175": [257, 276, 384, 995], "plot_det": [257, 276], "n_imag": 258, "print_datafram": 258, "filtered_cv_result": 258, "mean_precis": 258, "std_precis": 258, "mean_recal": 258, "std_recal": 258, "mean_test_precis": [258, 264], "std_test_precis": 258, "mean_test_recal": 258, "std_test_recal": 258, "03f": 258, "refit_strategi": 258, "best_index": [258, 264], "precision_threshold": 258, "high_precision_cv_result": 258, "rank_test_recal": 258, "rank_test_precis": [258, 264], "best_recall_std": 258, "best_recal": 258, "best_recall_threshold": 258, "high_recall_cv_result": 258, "fastest_top_recall_high_precision_index": 258, "idxmin": 258, "854": 258, "063": [258, 260, 433], "069": 258, "780": 258, "905": 258, "889": [258, 433], "743": [258, 1018], "065": [258, 384], "066": [258, 644], "611": [258, 260, 537], "028": [258, 350], "744": [258, 283], "618": 258, "004898": 258, "877206": 258, "069196": 258, "0x7fcb9b1b2e50": 258, "807": [258, 260], "plot_grid_search_digit": [258, 276], "minimis": [259, 405, 409, 654, 655, 1001], "219": [259, 300, 303], "260": [259, 1040], "york": [259, 783, 792, 975, 985, 997], "usa": [259, 373, 894, 975, 982, 997, 998], "best_index_": [259, 264, 794, 797, 798, 808], "wenhao": [259, 1035, 1036], "zhang": [259, 405, 438, 660, 675, 681, 682, 685, 689, 753, 754, 981, 982, 983, 987, 999, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1043], "wenhaoz": 259, "ucla": [259, 981], "lower_bound": 259, "best_score_idx": 259, "best_low_complex": 259, "fewest": [259, 623], "candidate_idx": 259, "param_reduce_dim__n_compon": 259, "339": [259, 276], "plot_grid_search_refit_cal": [259, 276], "moon": [260, 300, 307, 349, 350, 518], "moder": [260, 378, 415, 450, 991], "352": [260, 384], "repeatedstratifiedkfold": [260, 278, 409, 809, 813, 1034], "repetit": [260, 278, 383, 409, 809, 810, 993, 1041], "rank_test_scor": [260, 268, 794, 808, 1033], "rename_axi": 260, "9400": 260, "079297": 260, "9300": 260, "077846": 260, "3_poli": 260, "9044": [260, 1034], "098776": 260, "2_poli": 260, "6852": 260, "169106": 260, "certainti": [260, 380, 737, 985], "repreat": 260, "model_scor": [260, 281], "regex": [260, 351, 460, 462], "_test_scor": [260, 468, 590, 1040], "lineplot": 260, "set1": [260, 292, 293], "labelpad": 260, "882561": 260, "783392": 260, "351390": 260, "746492": 260, "298688": 260, "355440": 260, "nadeau": [260, 1035], "bengio": [260, 854, 855, 974, 998], "framework": [260, 364, 380, 390, 392, 399, 405, 633, 684, 792, 981, 982, 989, 1003, 1006, 1009, 1027, 1033], "diebold": 260, "mariano": 260, "proven": [260, 979, 983, 1009], "replic": [260, 377, 380], "cdot": [260, 340, 402, 405, 410, 411, 415, 610, 611, 615, 618, 619, 863, 977, 979, 985, 989, 995], "sum_": [260, 269, 344, 402, 403, 405, 410, 411, 412, 534, 536, 543, 692, 750, 979, 981, 982, 985, 987, 989, 990, 992, 993, 995, 999, 1000, 1001], "ij": [260, 293, 402, 405, 410, 534, 536, 543, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 981, 982, 985, 987, 990, 995, 1000], "corrected_std": 260, "crossvalid": [260, 274], "corrected_var": 260, "ddof": [260, 877, 888], "compute_corrected_ttest": 260, "t_stat": 260, "p_val": 260, "model_1_scor": 260, "model_2_scor": 260, "ncorrect": 260, "227": [260, 405, 720], "uncorrect": [260, 591, 594], "t_stat_uncorrect": 260, "p_val_uncorrect": 260, "benavoli": 260, "colleagu": 260, "conjug": [260, 448, 458, 668, 670, 683, 691, 981], "overlin": [260, 402], "t_post": 260, "ppf": 260, "infin": [260, 344, 537, 678, 679, 708, 818, 904, 916, 988], "minu": [260, 755, 985], "better_prob": 260, "cdf": 260, "773": [260, 644, 835], "essenti": [260, 320, 376, 380, 405, 409, 410, 505, 977, 985, 988, 1006, 1009, 1035], "rope": 260, "rope_interv": 260, "rope_prob": 260, "432": [260, 407], "x_rope": 260, "uncertain": [260, 325, 377], "credibl": 260, "cred_interv": 260, "cred_int_df": 260, "000977": 260, "019023": 260, "005422": 260, "025422": 260, "016445": 260, "036445": 260, "bonferroni": 260, "n_comparison": 260, "pairwise_t_test": 260, "model_i": 260, "model_k": 260, "model_i_scor": 260, "model_k_scor": 260, "pairwise_comp_df": 260, "model_1": 260, "model_2": 260, "302": [260, 623], "276": 260, "851": 260, "pairwise_bayesian": 260, "worse_prob": 260, "pairwise_bayesian_df": 260, "068": 260, "018": [260, 468], "882": 260, "dietterich": [260, 827, 986], "1998": [260, 373, 375, 410, 412, 551, 552, 827, 832, 863, 986, 987, 989, 995, 999], "bouckaert": 260, "frank": [260, 828, 986, 1032, 1036, 1037], "pacif": 260, "asia": [260, 995], "confer": [260, 373, 405, 410, 416, 435, 440, 446, 507, 531, 559, 692, 704, 721, 751, 853, 854, 855, 985, 991, 997, 1001], "discoveri": [260, 373, 384, 387, 405, 412, 414, 416, 440, 507, 551, 552, 559, 588, 591, 592, 594, 595, 596, 602, 716, 735, 778, 985, 997, 1009, 1041, 1042], "corani": 260, "dem\u0161ar": 260, "zaffalon": 260, "accompani": [260, 1035], "144": [260, 384, 1027], "697": [260, 276], "plot_grid_search_stat": [260, 276], "loader": [261, 328, 349, 371, 372, 373, 494, 495, 504, 1006, 1020, 1027, 1032, 1034, 1035, 1038], "857": [261, 350], "complementnb": [261, 349, 832, 833, 835, 836, 987, 1035, 1039, 1040, 1042], "tfidfvectorizertfidfvector": 261, "complementnbcomplementnb": 261, "vect__": 261, "clf__": 261, "parameter_grid": 261, "vect__max_df": 261, "vect__min_df": 261, "vect__ngram_rang": [261, 1020], "unigram": [261, 373, 413, 584, 585, 587, 1034], "bigram": [261, 413, 584, 585, 587, 1020], "vect__norm": 261, "clf__alpha": [261, 1020], "parallelis": [261, 464, 895, 1034], "random_search": [261, 268], "best_paramet": 261, "get_param": [261, 381, 392, 415, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 974, 1037, 1038, 1039, 1041, 1042], "816": [261, 467, 468], "709": 261, "ambigu": [261, 383, 413, 568, 708, 934, 988, 1036, 1038, 1040], "shorten_param": 261, "xanchor": 261, "yanchor": 261, "autom": [261, 382, 395, 688, 974, 981, 982, 985, 1005, 1009], "parallel_coordin": 261, "understood": [261, 378, 405, 942, 1017], "column_result": 261, "transform_func": 261, "fromkei": [261, 912], "ngram_rang": [261, 328, 413, 584, 585, 587], "color_continuous_scal": 261, "viridis_r": 261, "slide": [261, 640, 981, 1004, 1005], "intersect": [261, 333, 402, 405, 733], "undo": [261, 867, 1031], "stronger": [261, 639, 648, 654, 655, 668, 669, 670, 671, 672, 674, 683], "plot_grid_search_text_feature_extract": [261, 276], "ax_idx": 262, "resort": [262, 373, 551, 1037], "learning_curv": [262, 320, 396, 800, 980, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042], "return_tim": [262, 821, 1037], "test_scores_nb": 262, "fit_times_nb": 262, "score_times_nb": 262, "test_scores_svm": 262, "fit_times_svm": 262, "score_times_svm": 262, "score_tim": [262, 409, 820, 821], "inflect": 262, "plot_learning_curv": [262, 276], "class_likelihood_ratio": [263, 985, 1042], "medicin": [263, 708, 985], "medic": [263, 409, 708, 981, 1009], "truli": [263, 267, 366, 708, 985], "odd": [263, 412, 510, 708, 985, 1034, 1035], "suppos": [263, 324, 364, 365, 380, 384, 407, 412, 413, 414, 553, 557, 560, 654, 655, 662, 664, 670, 671, 672, 737, 843, 897, 899, 902, 905, 907, 923, 989, 1036, 1038, 1044], "physiolog": [263, 375, 1018], "hopefulli": [263, 386, 1027], "indirect": [263, 379, 392], "bio": 263, "pos_lr": 263, "neg_lr": 263, "raise_warn": [263, 708, 971], "positive_likelihood_ratio": [263, 708], "negative_likelihood_ratio": [263, 708], "extract_scor": 263, "test_positive_likelihood_ratio": 263, "test_negative_likelihood_ratio": 263, "661086": 263, "724702": 263, "383973": 263, "054045": 263, "108843": 263, "986989": 263, "268147": 263, "034278": 263, "most_frequ": [263, 547, 623, 626, 847, 975, 985, 1035, 1037, 1039], "undefin": [263, 392, 708, 724, 733, 736, 778, 954, 985, 1035, 1039, 1043], "373333": 263, "5557": 263, "235430": 263, "stand": [263, 351, 382, 390, 410, 527, 533, 541, 542, 592, 605, 674, 701, 713, 731, 732, 752, 781, 783, 790, 984, 985, 991], "lr_base": 263, "pos_lr_bas": 263, "pos_lr_base_std": 263, "neg_lr_bas": 263, "neg_lr_base_std": 263, "plot_indic": 263, "scoring_on_bootstrap": 263, "n_bootstrap": [263, 1028], "results_for_preval": 263, "bootstrap_indic": 263, "default_rng": 263, "2039": 263, "507943": 263, "113516": 263, "207667": 263, "009778": 263, "3419": 263, "443238": 263, "125140": 263, "198766": 263, "008915": 263, "421087": 263, "123828": 263, "192913": 263, "006360": 263, "6196": [263, 1032], "409717": 263, "164009": 263, "193949": 263, "005861": 263, "7578": [263, 1034], "334795": 263, "175298": 263, "189267": 263, "005840": 263, "8963": 263, "197666": 263, "238955": 263, "185654": 263, "005027": 263, "band": [263, 307, 995], "plot_likelihood_ratio": [263, 276], "scorer_nam": [264, 794, 808], "predefin": [264, 807, 974, 988, 1015, 1042], "403": 264, "402": 264, "maskedarrai": [264, 1033], "param_min_samples_split": 264, "sample_score_mean": 264, "sample_score_std": 264, "std_": [264, 1032], "rank_test_": 264, "best_scor": 264, "mean_test_": 264, "920": [264, 276], "plot_multi_metric_evalu": [264, 276], "cawlei": [265, 985], "talbot": 265, "mach": [265, 403, 409, 589, 590], "2079": 265, "2107": 265, "007581": 265, "007833": 265, "num_trial": 265, "x_iri": [265, 1019], "y_iri": [265, 1019], "p_grid": 265, "non_nested_scor": 265, "nested_scor": 265, "leaveoneout": [265, 409, 1015], "leaveonegroupout": [265, 409, 795, 802, 803, 1015, 1033], "inner_cv": 265, "outer_cv": 265, "non_nest": 265, "score_differ": 265, "211": [265, 320, 327, 873, 885], "non_nested_scores_lin": 265, "nested_lin": 265, "difference_plot": 265, "plot_nested_cross_validation_iri": [265, 276], "permutation_test_scor": [266, 396, 409, 1027, 1034, 1039], "plant": [266, 269, 270, 371, 985, 1022], "uncorrel": [266, 374, 524, 530, 537, 985, 1018], "n_uncorrelated_featur": 266, "x_rand": 266, "undergo": 266, "score_iri": 266, "perm_scores_iri": 266, "pvalue_iri": 266, "n_permut": [266, 409, 822], "score_rand": 266, "perm_scores_rand": 266, "pvalue_rand": 266, "evid": [266, 349, 386, 405, 409, 410, 412, 640, 792, 984], "ndata": 266, "destroi": [266, 413, 790, 866, 995], "ojala": [266, 409, 822], "garriga": [266, 409, 822], "391": [266, 276, 692], "plot_permutation_tests_for_classif": [266, 276], "t_p": 267, "plu": [267, 375, 383, 675, 828, 831, 986, 999], "f_p": 267, "f_n": 267, "denomin": [267, 413, 418, 471, 586, 700, 752, 979], "stairstep": 267, "ap": [267, 703, 704, 985], "sum_n": [267, 703, 985], "r_n": [267, 703, 985], "p_n": [267, 703, 985], "nth": [267, 703, 985], "r_k": 267, "p_k": [267, 985], "trapezoid": [267, 702, 703, 985], "binar": [267, 269, 270, 370, 372, 404, 749, 832, 861, 862, 864, 868, 870, 878, 881, 985, 987, 1011, 1022, 1041, 1043], "average_precision_scor": [267, 696, 702, 704, 777, 783, 985, 1027, 1030, 1034, 1035, 1041, 1043], "mt19937": [267, 272, 1038], "0x7fcb885ead40": 267, "precisionrecalldisplai": [267, 318, 777, 779, 782, 985, 1037, 1040, 1043, 1044], "label_binar": [267, 269, 864, 1031], "average_precis": [267, 696, 703, 737, 985], "prevalence_pos_label": [267, 696], "setup": [267, 269, 364, 376, 380, 384, 386, 988, 1012], "f_score": 267, "extens": [267, 269, 288, 364, 365, 372, 373, 376, 379, 381, 382, 386, 387, 390, 399, 405, 410, 492, 499, 530, 736, 928, 936, 982, 984, 985, 1004, 1005, 1009, 1027, 1033, 1040, 1041, 1043], "plot_precision_recal": [267, 276], "deem": [268, 269, 530, 993, 1040], "991": [268, 985], "05063247886572012": 268, "13822072286080167": 268, "987": [268, 350], "010877306503748912": 268, "9226260871125187": 268, "023": [268, 898, 993], "7271482064048191": 268, "25183501383331797": 268, "993": 268, "1111111111111111": 268, "5555555555555556": 268, "n_top": 268, "param_dist": [268, 272, 317], "n_iter_search": 268, "plot_randomized_search": [268, 276], "unambigu": [269, 986, 1033], "notion": [269, 340, 350, 366, 390, 405, 410, 412, 981, 985], "scheme": [269, 288, 311, 312, 373, 392, 405, 409, 411, 413, 562, 586, 654, 655, 701, 807, 864, 865, 868, 870, 874, 878, 881, 886, 897, 902, 974, 981, 995, 999, 1027, 1035, 1038, 1039, 1044], "harder": [269, 270, 309, 373, 377, 380, 386, 405, 511, 557, 558, 1008], "bulk": [269, 416, 440], "scrutin": 269, "labelbinar": [269, 392, 736, 826, 861, 870, 878, 881, 986, 1011, 1030, 1031, 1032, 1036, 1041], "y_onehot_test": 269, "class_id": [269, 270], "nvirginica": 269, "tp_c": 269, "fn_c": 269, "fp_c": 269, "tn_c": 269, "briefli": [269, 377, 391, 412, 974, 1037], "nreceiv": 269, "micro_roc_auc_ovr": 269, "mcclish": [269, 783], "deci": 269, "1989": [269, 631, 783, 854, 855, 981, 988], "jul": 269, "fpr_grid": 269, "mean_tpr": [269, 270], "interp": [269, 270, 336], "macro_roc_auc_ovr": 269, "deeppink": 269, "aqua": 269, "role": [269, 364, 377, 390, 410, 1003], "pair_list": 269, "pair_scor": 269, "label_a": 269, "label_b": 269, "a_mask": 269, "b_mask": 269, "ab_mask": 269, "a_tru": 269, "b_true": 269, "idx_a": 269, "idx_b": 269, "fpr_a": 269, "tpr_a": 269, "fpr_b": 269, "tpr_b": 269, "macro_roc_auc_ovo": 269, "ovo_tpr": 269, "pool": [269, 390, 441, 631, 954, 1006, 1038], "633": [269, 276], "plot_roc": [269, 276], "mean_fpr": 270, "viz": [270, 385], "interp_tpr": 270, "mean_auc": 270, "std_auc": 270, "std_tpr": 270, "tprs_upper": 270, "tprs_lower": 270, "plot_roc_crossv": [270, 276], "halvinggridsearchcv": [271, 272, 317, 396, 575, 798, 974, 1039, 1041, 1042, 1044], "1e4": [271, 655, 675, 891, 997], "gsh": 271, "gsh_time": 271, "gs_time": 271, "make_heatmap": 271, "is_sh": 271, "make_cbar": 271, "param_c": [271, 794], "param_gamma": [271, 794, 808], "sh": [271, 382, 386, 974], "scores_matrix": 271, "pivot_t": 271, "aggfunc": 271, "0e": [271, 545, 546], "get_xticklabel": 271, "rotation_mod": 271, "cbar_ax": 271, "plot_successive_halving_heatmap": [271, 276], "rsh": [272, 317], "0x7fcb9a5e1440": 272, "_distn_infrastructur": 272, "rv_discrete_frozen": 272, "0x7fcb88806b80": 272, "0x7fcb7af41bb0": 272, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 272, "params_str": 272, "drop_dupl": 272, "n_resources_": [272, 797, 798, 974], "nn_candid": 272, "n_candidates_": [272, 797, 798, 974], "n_iterations_": [272, 797, 798], "multialign": 272, "762": [272, 276, 349], "plot_successive_halving_iter": [272, 276], "n_samples_train": [273, 899, 900, 901, 902, 903], "n_samples_test": [273, 899, 900, 901, 902, 903, 988, 995], "train_error": 273, "test_error": 273, "i_alpha_optim": 273, "alpha_optim": 273, "00020991037201085544": 273, "244": [273, 276, 278, 580], "plot_train_error_vs_test_error": [273, 276], "nonlinear": [274, 318, 640, 684, 685, 689, 692, 863, 981, 982, 990, 995], "true_fun": 274, "polynomial_featur": 274, "194": [274, 276, 302, 349], "plot_underfitting_overfit": [274, 276], "validationcurvedisplai": [275, 980, 1043], "subset_mask": 275, "isin": [275, 325], "param_rang": [275, 321, 344, 816, 824, 980, 1043], "547": [275, 276, 351], "plot_validation_curv": [275, 276], "auto_examples_model_select": 276, "ovo": [278, 315, 783, 825, 899, 902, 985, 986, 1000], "onevsoneclassifi": [278, 396, 826, 827, 1028, 1030, 1031, 1033, 1034, 1036, 1039, 1041, 1044], "review": [278, 311, 364, 373, 380, 381, 382, 383, 384, 390, 393, 409, 410, 531, 537, 985, 995, 1012], "181": [278, 302, 384], "sort_index": 278, "class_protein_loc": 278, "cyt": 278, "erl": 278, "exc": 278, "me1": 278, "me2": 278, "me3": 278, "mit": [278, 373, 384, 405, 415, 606, 607, 610, 615, 618, 639, 662, 663, 672, 834, 978], "nuc": 278, "pox": 278, "vac": 278, "outputcodeclassifi": [278, 396, 825, 826, 1034, 1039, 1043, 1044], "code_s": [278, 827, 986], "ovo_tre": 278, "ovr_tre": 278, "ecoc": 278, "cv_results_tre": 278, "cv_results_ovo": 278, "cv_results_ovr": 278, "cv_results_ecoc": 278, "glanc": [278, 377], "tree_optim": 278, "unifi": [278, 379, 387, 390, 391, 412, 633, 1005, 1027], "allwein": 278, "erin": [278, 1039], "yoram": [278, 730], "singer": [278, 662, 663, 730, 981, 985, 999, 1000], "defens": 278, "715": [278, 279], "plot_multiclass_overview": [278, 279], "auto_examples_multiclass": 279, "yeast": [281, 828], "2417": 281, "103": [281, 283, 373, 412, 493, 551, 552, 1027], "jaccard": [281, 402, 446, 453, 695, 699, 715, 724, 729, 733, 773, 774, 775, 791, 988, 1035, 1036], "preced": [281, 365, 378, 483, 985, 1027], "adam": [281, 300, 854, 855, 989, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "kleczewski": [281, 1034, 1035], "jaccard_scor": [281, 699, 724, 729, 791, 985, 1036, 1039], "classifierchain": [281, 392, 396, 829, 831, 1034, 1039, 1042], "40597": 281, "wrapper": [281, 283, 384, 387, 409, 415, 540, 616, 667, 737, 897, 1001, 1005, 1031, 1039], "base_lr": [281, 828], "y_pred_ovr": 281, "ovr_jaccard_scor": 281, "y_pred_chain": 281, "chain_jaccard_scor": 281, "y_pred_ensembl": 281, "ensemble_jaccard_scor": 281, "x_po": 281, "557": [281, 282], "plot_classifier_chain_yeast": [281, 282], "auto_examples_multioutput": 282, "kneighborstransform": [283, 285, 315, 849, 988, 1037, 1041, 1042], "nmslib": 283, "pynndesc": 283, "pip": [283, 315, 316, 317, 318, 319, 320, 321, 365, 376, 378, 382, 384, 395, 401, 1001], "pynndescenttransform": 283, "csr_matrix": [283, 316, 436, 440, 448, 492, 530, 540, 553, 554, 555, 556, 559, 560, 561, 562, 584, 589, 590, 710, 823, 870, 872, 899, 900, 902, 903, 905, 906, 907, 908, 986, 995, 999, 1000, 1001, 1042], "nmslibtransform": 283, "sw": 283, "n_samples_fit_": [283, 839, 840, 841, 843, 845, 847, 848, 849], "cosinesimil": 283, "nmslib_": 283, "adddatapointbatch": 283, "createindex": 283, "n_samples_transform": [283, 841, 849], "thread": [283, 316, 319, 376, 390, 392, 405, 412, 829, 830, 951, 952, 953, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "num_thread": 283, "knnquerybatch": 283, "benchmark": [283, 317, 350, 351, 364, 371, 373, 378, 390, 395, 398, 403, 464, 511, 895], "mnist_10000": 283, "mnist_20000": 283, "20_000": 283, "tsne_param": 283, "barnes_hut": [283, 688, 1034, 1035], "parallel_batch_queri": 283, "msg": [283, 969], "transformer_nam": 283, "longest": 283, "fit_dur": 283, "transform_dur": 283, "315": [283, 375], "823": 283, "884": 283, "769": 283, "733": 283, "077": 283, "448": 283, "759": 283, "numba": [283, 1006], "cold": 283, "nearestneighbor": [283, 319, 395, 405, 416, 440, 442, 444, 457, 684, 685, 689, 839, 840, 841, 843, 847, 848, 849, 988, 1027, 1031, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "i_ax": 283, "828": 283, "955": [283, 302, 303, 317, 322, 409, 650], "994": 283, "brute": [283, 390, 400, 409, 416, 440, 442, 446, 453, 628, 629, 684, 685, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 992, 1022, 1031, 1035, 1039, 1042, 1043, 1044], "spent": [283, 311, 379, 384, 821, 1042], "approximate_nearest_neighbor": [283, 297], "slow": [285, 305, 349, 364, 372, 376, 378, 410, 413, 443, 695, 871, 872, 876, 899, 902, 934, 982, 988, 1006, 1019, 1034], "temporarydirectori": [285, 315], "graph_model": 285, "classifier_model": 285, "sklearn_graph_cache_": 285, "tmpdir": [285, 315], "full_model": 285, "classifier__n_neighbor": 285, "grid_model": 285, "plot_caching_nearest_neighbor": [285, 297], "beforehand": [286, 1001], "entitl": [286, 443, 607, 839], "knn__weight": 286, "unifom": 286, "541": [286, 297, 448, 458], "plot_classif": [286, 297], "79269019073225": 287, "kerneldens": [287, 288, 296, 411, 1029, 1035, 1036, 1040, 1041, 1042], "new_data": [287, 380], "4x11": 287, "real_data": 287, "set_clim": 287, "plot_digits_kde_sampl": [287, 297], "block": [288, 305, 319, 373, 375, 378, 383, 386, 392, 402, 405, 408, 411, 448, 449, 458, 469, 475, 476, 484, 485, 507, 509, 691, 953, 988, 990], "wildli": [288, 984], "kd": [288, 405, 411, 988, 1035, 1036, 1037], "jakevdp": [288, 296], "aaaaff": [288, 291], "tophat": [288, 411, 837, 838, 842], "log_den": 288, "x_src": 288, "format_func": 288, "ih": 288, "epanechnikov": [288, 411, 837, 838, 842], "funcformatt": 288, "nullloc": 288, "true_den": 288, "631": [288, 297], "plot_kde_1d": [288, 297], "736": [289, 297], "plot_lof_novelty_detect": [289, 297], "x_inlier": 290, "n_error": 290, "x_score": [290, 478, 479, 480, 481], "legend_handl": 290, "handlerpathcollect": 290, "update_legend_marker_s": 290, "update_from": 290, "set_siz": 290, "handler_map": 290, "update_func": 290, "086": [290, 297], "plot_lof_outlier_detect": [290, 297], "cmap_light": [291, 294], "ffaaaa": 291, "aaffaa": 291, "cmap_bold": [291, 294], "00ff00": 291, "793": [291, 297], "plot_nca_classif": [291, 297], "neighborhoodcomponentanalysi": 292, "dim_reduction_method": 292, "acc_knn": 292, "x_embed": [292, 293, 688, 692, 846, 988], "ntest": 292, "plot_nca_dim_reduct": [292, 297], "logsumexp": [293, 1034], "get_yaxi": [293, 305], "link_thickness_i": 293, "diff_embed": 293, "dist_embed": 293, "einsum": 293, "exp_dist_embed": 293, "relate_point": 293, "pt_i": 293, "pt_j": 293, "plot_nca_illustr": [293, 297], "8133333333333334": 294, "nearestcentroid": [294, 349, 986, 988, 1027, 1031, 1034, 1039, 1042], "darkblu": 294, "shrink_threshold": [294, 844, 988, 1027, 1039], "plot_nearest_centroid": [294, 297], "barycent": [295, 1027], "plot_regress": [295, 297], "geospati": [296, 411], "haversin": [296, 411, 695, 757, 759, 988, 1036, 1039], "latitud": [296, 305, 373, 494, 695, 759], "longitud": [296, 305, 373, 494, 695, 759], "xtrain": 296, "ytrain": 296, "radian": [296, 695, 759], "land_mask": 296, "ball_tre": [296, 416, 440, 442, 446, 453, 684, 685, 839, 840, 841, 842, 843, 845, 847, 848, 849, 988, 1027, 1044], "ocean": 296, "452": [296, 297], "plot_species_kd": [296, 297], "auto_examples_neighbor": 297, "combat": [299, 410], "lesser": [299, 392, 438, 537, 981], "curvatur": 299, "plot_mlp_alpha": [299, 303], "bfg": [300, 606, 607, 644, 645, 654, 665, 668, 670, 676, 683, 988, 989, 1042], "980000": 300, "096950": 300, "momentum": [300, 854, 855, 989], "049530": 300, "nesterov": [300, 854, 855, 989, 1043], "049540": 300, "360000": 300, "978444": 300, "860000": 300, "503452": 300, "504185": 300, "045311": 300, "956038": 300, "243802": 300, "992766": 300, "041297": 300, "993879": 300, "042898": 300, "638843": 300, "855465": 300, "912632": 300, "290584": 300, "909293": 300, "318387": 300, "991653": 300, "045934": 300, "840000": 300, "601052": 300, "940000": 300, "157334": 300, "154453": 300, "500000": 300, "692470": 300, "689143": 300, "689751": 300, "150527": 300, "850000": 300, "341523": 300, "336188": 300, "335919": 300, "689015": 300, "830000": 300, "512595": 300, "513034": 300, "930000": 300, "170087": 300, "schedul": [300, 365, 672, 673, 674, 854, 855, 999, 1009, 1034], "nesterovs_momentum": [300, 854, 855], "invscal": [300, 672, 673, 674, 854, 855, 999], "plot_arg": 300, "plot_on_dataset": 300, "nlearn": 300, "loss_": [300, 854, 855, 989, 1041], "loss_curve_": [300, 854, 855], "data_set": 300, "get_lin": 300, "plot_mlp_training_curv": [300, 303], "28x28": 301, "784": 301, "throw": [301, 387, 916, 1031, 1034, 1035, 1036, 1037, 1041], "infrastructur": [301, 321, 1003, 1005, 1006], "44139186": 301, "19174891": 301, "13983521": 301, "11378556": 301, "09443967": 301, "07846529": 301, "06506307": 301, "05534985": 301, "986429": 301, "953061": 301, "plot_mnist_filt": [301, 303], "greyscal": 302, "bernoulli": [302, 413, 414, 832, 833, 834, 835, 836, 853, 854, 855, 860, 981, 995, 1007, 1022, 1027], "bernoullirbm": [302, 854, 855, 990, 995, 1029, 1030, 1039, 1041, 1044], "yann": [302, 1027, 1029], "dauphin": [302, 1029], "gabriel": [302, 1035, 1036, 1037, 1040, 1041], "synnaev": 302, "convolv": 302, "minmax_scal": [302, 305, 867, 1032, 1035], "nudge_dataset": 302, "1px": 302, "direction_vector": 302, "apply_along_axi": 302, "feature_rang": [302, 867, 883, 995, 1029, 1039], "cg": [302, 654, 655, 668, 670, 683, 981, 1031, 1032, 1034, 1038, 1040, 1041, 1044], "rbm": [302, 853, 854, 855, 990], "rbm_features_classifi": 302, "6000": [302, 623], "raw_pixel_classifi": 302, "logisticregressionifittedlogisticregress": 302, "_classif": 302, "1465": 302, "undefinedmetricwarn": [302, 724, 725, 778, 779, 782, 1036], "zero_divis": [302, 709, 724, 725, 733, 778, 779, 782, 1037, 1039, 1043], "207": [302, 1027], "154": [302, 326, 330, 647, 986], "plot_rbm_logistic_classif": [302, 303], "auto_examples_neural_network": 303, "incom": [305, 373, 436], "unscal": [305, 310, 981, 985, 1035, 1041], "unterthin": [305, 1030, 1031, 1032], "medinc": [305, 317, 373], "houseag": [305, 317, 373], "averoom": [305, 317, 373], "room": [305, 373, 383, 405, 1008], "avebedrm": [305, 373], "bedroom": [305, 373], "aveoccup": [305, 317, 373], "features_idx": 305, "quantile_rang": [305, 875, 887, 1033], "yeo": [305, 309, 873, 885, 995, 1035, 1041, 1043], "cox": [305, 309, 873, 885, 995, 1035, 1043], "plasma": 305, "plasma_r": 305, "create_ax": 305, "bottom_h": 305, "left_h": 305, "rect_scatt": 305, "rect_histx": 305, "rect_histi": 305, "ax_scatt": 305, "ax_histx": 305, "ax_histi": 305, "ax_scatter_zoom": 305, "ax_histx_zoom": 305, "ax_histy_zoom": 305, "rect_colorbar": 305, "ax_colorbar": 305, "plot_distribut": 305, "hist_nbin": 305, "x0_label": 305, "x1_label": 305, "hist_x1": 305, "hist_x0": 305, "aesthet": [305, 1001, 1032], "tick_bottom": 305, "tick_left": 305, "outward": 305, "ec": [305, 526], "make_plot": 305, "item_idx": 305, "ax_zoom_out": 305, "ax_zoom_in": 305, "zoom_in_percentile_rang": 305, "cutoffs_x0": 305, "cutoffs_x1": 305, "non_outliers_mask": 305, "colorbarbas": 305, "OR": [305, 405, 416, 440, 1038], "indistinguish": 305, "quadrant": 305, "641": [305, 313], "plot_all_sc": [305, 313], "straightforward": [306, 377, 410, 1009], "anywher": 306, "qinhanmin2005": 306, "sina": [306, 1040], "rnd": 306, "enc": [306, 308, 319, 321, 870, 871, 995], "x_bin": 306, "line_bin": 306, "249": [306, 313, 349], "plot_discret": [306, 313], "get_nam": 307, "broader": [307, 981], "logisticregression__c": 307, "linearsvc__c": 307, "kbinsdiscretizer__n_bin": 307, "gradientboostingclassifier__learning_r": 307, "svc__c": [307, 857], "cm_piyg": 307, "piyg": 307, "b30065": 307, "178000": 307, "est_idx": 307, "548": [307, 313], "plot_discretization_classif": [307, 313], "centers_0": 308, "centers_1": 308, "x_list": 308, "grid_encod": 308, "stripe": 308, "plot_discretization_strategi": [308, 313], "powertransform": [309, 874, 885, 975, 995, 1035, 1038, 1041, 1043], "johnwon": 309, "weibul": 309, "bimod": [309, 411], "ineffect": [309, 995, 1035, 1036], "eric": [309, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "ericchang2017": 309, "northwestern": [309, 654], "contact": [309, 390, 1005], "font_siz": 309, "bc": 309, "qt": [309, 874], "x_lognorm": [309, 995], "x_chisq": 309, "chisquar": 309, "x_weibul": 309, "x_gaussian": 309, "x_uniform": 309, "loc_a": 309, "loc_b": 309, "105": 309, "x_a": 309, "x_b": 309, "x_bimod": 309, "d81b60": 309, "0188ff": 309, "ffc107": 309, "b7a2ff": 309, "2ec5ac": 309, "figaspect": 309, "axes_idx": 309, "axes_list": 309, "x_trans_bc": 309, "lmbda_bc": 309, "lambdas_": [309, 873, 1040, 1043], "x_trans_yj": 309, "lmbda_yj": 309, "x_trans_qt": 309, "ax_origin": 309, "ax_bc": 309, "ax_yj": 309, "ax_qt": 309, "x_tran": [309, 321, 380, 401, 438, 460, 873, 878, 885, 995], "meth_nam": 309, "lmbda": 309, "plot_map_data_to_norm": [309, 313], "involv": [310, 312, 315, 336, 340, 364, 366, 373, 378, 382, 392, 393, 408, 415, 695, 825, 826, 982, 986, 988, 992, 1000, 1005, 1009, 1018, 1035], "kneighbor": [310, 319, 839, 840, 841, 843, 845, 988, 1031, 1036, 1040, 1041, 1042, 1043], "obatin": 310, "tyler": [310, 1034, 1040, 1041, 1042], "lanigan": [310, 1034], "tylerlanigan": 310, "sebastian": [310, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "raschka": [310, 1032, 1033, 1034, 1035, 1036, 1039], "sebastianraschka": 310, "alcohol": [310, 375], "malic": [310, 375], "acid": [310, 375], "scaled_x_train": 310, "x_plot_scal": 310, "fit_and_plot_model": 310, "scaled_pca": 310, "x_train_transform": [310, 360, 409], "x_train_std_transform": 310, "first_pca_compon": 310, "target_class": 310, "repercuss": 310, "logisticregressioncv": [310, 392, 396, 654, 981, 986, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1042, 1044], "unscaled_clf": 310, "scaled_clf": 310, "y_pred_scal": 310, "y_proba_sc": 310, "0825": 310, "vastli": 310, "plot_scaling_import": [310, 313], "targetencod": [311, 312, 392, 870, 871, 975, 995, 1005, 1043, 1044], "wine_review": 311, "42074": 311, "countri": [311, 982], "provinc": 311, "region_1": 311, "region_2": 311, "wineri": 311, "tremend": [311, 412], "variet": 311, "hail": 311, "martha": 311, "vineyard": 311, "235": 311, "napa": 311, "vallei": 311, "cabernet": 311, "sauvignon": 311, "heitz": 311, "spain": 311, "ripe": 311, "aroma": 311, "blackberri": 311, "cassi": 311, "carodorum": 311, "selecci\u00f3n": 311, "reserva": 311, "northern": 311, "toro": 311, "tinta": 311, "bodega": 311, "carmen": 311, "rodr\u00edguez": 311, "watson": [311, 406], "honor": 311, "late": [311, 366], "harvest": 311, "knight": 311, "sonoma": 311, "blanc": 311, "macaulei": 311, "oak": 311, "reserv": [311, 557, 558, 1009, 1011], "oregon": 311, "willamett": 311, "pinot": 311, "noir": 311, "ponzi": 311, "franc": [311, 759], "b\u00e9gude": 311, "aft": [311, 1030], "br\u00fblade": 311, "provenc": 311, "bandol": 311, "one_hot": 311, "max_categori": [311, 319, 321, 870, 871, 995, 1041, 1043], "target_typ": [311, 878, 921, 948, 1044], "evaluate_model_and_stor": 311, "rmse_test_scor": 311, "rmse_train_scor": 311, "rmse_test_mean": 311, "rmse_test_std": 311, "rmse_train_mean": 311, "rmse_train_std": 311, "nuniqu": 311, "14810": 311, "1236": 311, "632": 311, "455": 311, "workaround": [311, 378, 794, 808], "high_cardinality_featur": 311, "low_cardinality_featur": 311, "mixed_encoded_preprocessor": 311, "high_cardin": 311, "low_cardin": 311, "mixed_pip": 311, "high_cardinalityindex": 311, "targetencodertargetencod": 311, "low_cardinalityindex": 311, "mixed_target": 311, "name_to_color": 311, "rmse_": 311, "_mean": 311, "_std": 311, "explod": 311, "unrel": [311, 365, 383, 386, 413, 511], "plot_target_encod": [311, 313], "near_uniqu": 312, "50_000": [312, 350], "n_categori": [312, 833, 871, 995], "kbin": [312, 320], "x_inform": 312, "permuted_categori": 312, "x_shuffl": 312, "catastroph": [312, 758, 1006], "x_near_unique_categori": 312, "assembl": [312, 351, 857], "raw_model": 312, "0049896314219657345": 312, "00457762158159003": 312, "model_with_cf": 312, "cf": [312, 405, 408, 438, 696, 981, 995, 1006], "8000184677460285": 312, "7927845601690948": 312, "coefs_cf": 312, "target_encod": 312, "x_train_no_cf_encod": 312, "x_test_no_cf_encod": 312, "model_no_cf": 312, "858486250088675": 312, "6338211367110066": 312, "coefs_no_cf": 312, "330": [312, 313, 325], "plot_target_encoder_cross_v": [312, 313], "421": [313, 721, 751, 985], "auto_examples_preprocess": 313, "announc": [315, 316, 317, 318, 319, 320, 321, 382], "latest": [315, 316, 317, 318, 319, 320, 321, 376, 378, 382, 384, 386, 1001, 1003, 1041], "upgrad": [315, 316, 317, 318, 319, 320, 321, 395, 1006, 1027, 1032, 1035], "conda": [315, 316, 317, 318, 319, 320, 321, 365, 378, 379, 381, 382, 384, 386, 395, 398, 1001], "forg": [315, 316, 317, 318, 319, 320, 321, 365, 379, 381, 382, 386, 395], "plot_roc_curv": [315, 1037, 1039], "plot_precision_recall_curv": [315, 1037, 1039, 1040], "stackingclassifi": [315, 360, 392, 396, 412, 564, 1037, 1038, 1039, 1040, 1041, 1042], "9473684210526315": 315, "radiusneighborstransform": [315, 841, 988, 1037, 1039, 1041, 1042], "sklearn_cache_": 315, "isomap__n_neighbor": 315, "nan_euclidean_dist": [315, 757, 975, 1037], "ccp_alpha": [315, 354, 553, 554, 555, 556, 560, 561, 905, 906, 907, 908, 1001, 1037], "tree_": [315, 354, 358, 842, 905, 906, 907, 908], "node_count": [315, 354, 358, 905, 906, 907, 908], "check_estim": [315, 380, 392, 929, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042], "pytest": [315, 365, 376, 378, 380, 381, 395, 398, 401, 928, 929, 1037, 1040], "estimator_check": [315, 380, 392, 404, 1034, 1035, 1037, 1038, 1041, 1042, 1043], "parametrize_with_check": [315, 380, 928, 1037, 1038], "test_sklearn_compatible_estim": [315, 929], "decision_function_shap": [315, 345, 899, 902, 1000, 1032, 1033, 1036, 1037], "9924844017094018": 315, "130": [315, 322, 384], "plot_release_highlights_0_22_0": [315, 322], "await": 316, "lam": [316, 317, 1038], "35776189065725783": 316, "42425183539869404": 316, "openmp": [316, 376, 381, 390, 392, 405, 412, 953, 1038, 1040, 1043], "6436465474371388": 316, "10k": [316, 443], "monotoinc": 316, "gbdt_cst": 316, "999791942438998": 316, "659": [316, 322], "plot_release_highlights_0_23_0": [316, 322], "art": [317, 384, 645, 688, 1005, 1009], "footprint": [317, 320, 364, 366, 405, 410, 551, 552, 559, 1029, 1032, 1033, 1038, 1039, 1042], "yarowski": [317, 894, 998], "selftrainingclassifi": [317, 327, 328, 329, 396, 998, 1039], "random_unlabeled_point": [317, 892, 893, 894], "self_training_model": [317, 894], "selftrainingclassifierifittedselftrainingclassifi": 317, "7362": 317, "linear_baselin": 317, "714": 317, "decisiontreeregressorifitteddecisiontreeregressor": 317, "effort": [317, 378, 384, 1005, 1009, 1038, 1040], "plot_release_highlights_0_24_0": [317, 322], "l2_regular": [318, 412, 557, 558], "max_bin": [318, 319, 412, 557, 558], "quantileregressor": [318, 981, 985, 1040, 1041, 1042], "min_": [318, 405, 412, 867, 981, 995, 999, 1000, 1001], "sum_i": [318, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 976, 977, 981, 983, 985, 990], "pb_q": [318, 981], "_1": [318, 340, 407, 410, 413, 527, 533, 534, 536, 541, 542, 543, 642, 643, 648, 649, 650, 651, 652, 656, 657, 658, 659, 677, 678, 679, 680, 761, 981, 983, 985, 1000], "get_feature_nam": [318, 1035, 1036, 1038, 1039, 1040], "pet": [318, 783, 985], "dog": [318, 319, 321, 578, 778, 878, 995], "fish": 318, "pet_cat": 318, "pet_dog": 318, "pet_fish": 318, "plot_": [318, 395], "015": [318, 322, 350, 354, 993], "plot_release_highlights_1_0_0": [318, 322], "x_1d": 319, "hist_quantil": 319, "log_reg_input_featur": 319, "gather": [319, 321, 386, 393, 404, 405, 995, 1009], "min_frequ": [319, 321, 870, 871, 995, 1041, 1043], "rabbit": [319, 321, 995], "snake": [319, 321, 578, 878, 995], "infrequent_categories_": [319, 321, 870, 871, 878, 995], "x0_cat": [319, 995], "x0_rabbit": [319, 995], "x0_infrequent_sklearn": [319, 995], "refactor": [319, 1027, 1029, 1030, 1031, 1037, 1040, 1041, 1042], "radius_neighbor": [319, 845, 847, 848, 849, 1031, 1036, 1037, 1039, 1040, 1041, 1042], "pairwise_distances_argmin_min": [319, 774, 1030, 1035, 1041, 1042, 1043], "radiusneighborsclassifi": [319, 839, 840, 845, 848, 986, 988, 1027, 1029, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "radiusneighborsregressor": [319, 839, 840, 845, 847, 988, 1027, 1029, 1035, 1037, 1039, 1040, 1041, 1042, 1043], "trustworthi": [319, 1035, 1036, 1041, 1042, 1043, 1044], "labelpropag": [319, 326, 893, 894, 986, 998, 1028, 1033, 1034, 1037, 1038, 1039, 1041, 1042, 1043], "labelspread": [319, 324, 325, 326, 328, 329, 892, 894, 986, 998, 1028, 1033, 1034, 1037, 1038, 1041, 1042, 1043], "blog": [319, 364, 378, 384, 386, 393, 1038], "cython": [319, 364, 365, 367, 376, 378, 381, 387, 390, 395, 398, 401, 404, 405, 412, 504, 995, 996, 999, 1000, 1005, 1006, 1027, 1030, 1031, 1033, 1039, 1042, 1043, 1044], "readili": [319, 410, 1001, 1009], "true_w": 319, "true_h": 319, "x_reconstruct": [319, 478, 479, 480, 579], "00364": 319, "divis": [319, 405, 413, 586, 587, 590, 708, 709, 724, 725, 733, 741, 778, 779, 782, 985, 1019, 1031, 1035, 1036, 1039, 1043], "bisect_km": 319, "plot_release_highlights_1_1_0": [319, 322], "video": [320, 367, 372, 381, 499, 986, 1009, 1012], "sepal_col": 320, "petal_col": 320, "x_out": [320, 861, 870, 871], "114": [320, 1027], "052506": 320, "592373": 320, "189830": 320, "973554": 320, "416010": 320, "630382": 320, "107": [320, 405, 892, 986, 1029], "765012": 320, "362176": 320, "021849": 320, "788808": 320, "hist_no_interact": 320, "v1": [320, 372, 395, 751, 792, 793, 832, 833, 834, 836, 1039, 1042, 1043], "liac": [320, 372, 378, 492, 1042, 1043], "arff": [320, 378, 492, 1039, 1042, 1043], "ticket": [320, 378], "cabin": 320, "boat": 320, "allen": [320, 1030, 1032, 1034, 1037], "elisabeth": 320, "walton": 320, "24160": 320, "3375": 320, "b5": 320, "loui": [320, 1032, 1033, 1037, 1039, 1041, 1043], "mo": [320, 1038], "allison": 320, "hudson": 320, "9167": 320, "113781": 320, "5500": [320, 684, 982], "c22": 320, "c26": 320, "montreal": 320, "pq": 320, "chestervil": 320, "ON": 320, "helen": 320, "lorain": 320, "joshua": [320, 373, 1029, 1030, 1032, 1033, 1039, 1042, 1043], "creighton": 320, "bessi": 320, "waldo": 320, "compliant": [320, 378], "cupi": [320, 401], "gpu": [320, 401, 989, 1006, 1020], "changelog": [320, 382, 392], "plot_release_highlights_1_2_0": [320, 322], "throughout": [321, 360, 392, 623, 795, 854, 855, 1011, 1030, 1035], "codebas": [321, 360, 378, 379, 380, 413, 1027, 1033], "ongo": [321, 379, 393], "incorpor": [321, 378, 406, 412, 984, 1005, 1009], "contrib": [321, 378, 380, 386, 390, 392, 405, 1005, 1006, 1043], "adpot": 321, "true_label": [321, 324, 325], "non_noisy_label": 321, "9694149248180188": 321, "encodings_": [321, 878, 995], "validation_curv": [321, 344, 396, 816, 980, 1034, 1035, 1036, 1039, 1043], "geomspac": 321, "make_low_rank_matrix": [321, 520], "46858513287221654": 321, "plot_release_highlights_1_3_0": [321, 322], "auto_examples_release_highlight": 322, "semisupervis": [324, 392], "clai": [324, 325, 326, 329, 1027], "woolam": [324, 325, 326, 329, 1027], "n_total_sampl": [324, 325], "n_labeled_point": [324, 325], "unlabeled_set": 324, "everyth": [324, 360, 382, 384, 390, 460, 940, 1005, 1006, 1027], "lp_model": [324, 325], "predicted_label": [324, 325], "transduction_": [324, 325, 326, 892, 893, 894], "_plot": 324, "0x7fcb98d54c10": 324, "pred_entropi": [324, 325], "label_distributions_": [324, 325, 892, 893, 1038], "uncertainty_index": [324, 325], "image_index": [324, 325], "329": [324, 330, 446], "plot_label_propagation_digit": [324, 330], "max_iter": 325, "______________________________________________________________________": 325, "290": [325, 684, 685, 689, 982], "unlabeled_indic": 325, "transduc": 325, "delete_indic": 325, "nfit": 325, "delete_index": 325, "plot_label_propagation_digits_active_learn": [325, 330], "label_spread": 326, "labelspreadingifittedlabelspread": 326, "output_label": 326, "output_label_arrai": 326, "outer_numb": 326, "inner_numb": 326, "plot_label_propagation_structur": [326, 330], "breast_canc": 327, "augment": [327, 626, 879, 1009], "oliv": [327, 329, 1035, 1036, 1038, 1039, 1040], "rausch": [327, 329, 1035, 1036, 1039], "rauscho": [327, 329], "ethz": [327, 329], "total_sampl": [327, 532], "base_classifi": [327, 329, 998], "x_valu": 327, "99999": 327, "amount_label": 327, "amount_iter": 327, "self_training_clf": 327, "skfold": 327, "y_test_tru": 327, "labeled_iter_": [327, 894], "return_count": [327, 350, 849], "capsiz": 327, "twinx": 327, "plot_self_training_varying_threshold": [327, 330], "2823": 328, "2117": 328, "441": 328, "758": 328, "1676": 328, "1108": 328, "847": 328, "tfidftransform": [328, 350, 351, 413, 485, 587, 1020, 1034, 1035, 1041, 1043, 1044], "sdg_param": 328, "vectorizer_param": 328, "selftrain": 328, "st_pipelin": 328, "ls_pipelin": 328, "eval_and_print_metr": 328, "y_mask": 328, "x_20": 328, "y_20": 328, "459": [328, 330, 405, 438], "plot_semi_supervised_newsgroup": [328, 330], "y_rand": 329, "y_30": 329, "y_50": 329, "ls30": 329, "ls50": 329, "ls100": 329, "st30": 329, "st50": 329, "rbf_svc": [329, 1000], "color_map": 329, "plot_semi_supervised_versus_svm_iri": [329, 330], "auto_examples_semi_supervis": 330, "my_kernel": [332, 1000], "plot_custom_kernel": [332, 347], "2x2": [333, 405, 749], "plot_iris_svc": [333, 347], "convention": [334, 392, 893], "support_vector_indic": 334, "plot_linearsvc_support_vector": [334, 347], "145": [335, 347, 405], "plot_oneclass": [335, 347], "midpoint": 336, "blink": 336, "act": [336, 349, 378, 391, 411, 412, 709, 724, 725, 733, 778, 779, 782, 872, 876, 982, 985, 988, 1000, 1035], "spuriou": [336, 386, 995, 1040, 1041, 1042], "c_rang": 336, "gamma_rang": 336, "midpointnorm": 336, "masked_arrai": [336, 794, 808], "x_2d": 336, "y_2d": 336, "cheat": [336, 989, 999, 1029], "c_2d_rang": 336, "gamma_2d_rang": 336, "bright": 336, "brutal": 336, "plot_rbf_paramet": [336, 347], "plot_separating_hyperplan": [337, 347], "plain": [338, 415, 653, 999], "n_samples_1": [338, 1000], "n_samples_2": [338, 1000], "clusters_std": 338, "wclf": 338, "wdisp": 338, "177": [338, 347, 384], "plot_separating_hyperplane_unbalanc": [338, 347], "blown": 339, "score_mean": 339, "score_std": 339, "plot_svm_anova": [339, 347], "outermost": 340, "hinge_loss": [340, 985, 1031, 1039, 1040], "enrich": 340, "plot_training_data_with_decision_boundari": 340, "cosine_similar": [340, 755, 760, 983, 1032], "untransform": [340, 460, 463, 996], "bend": 340, "tanh": [340, 772, 854, 855, 983, 1000], "hyperbol": [340, 638, 854, 855, 983, 989], "generaliz": [340, 412], "comprehens": [340, 413, 753, 754, 983, 1009, 1035], "443": [340, 347], "plot_svm_kernel": [340, 347], "plot_svm_margin": [341, 347], "fignum": 341, "unreg": 341, "yy_down": 341, "yy_up": 341, "nusvc": [342, 364, 900, 986, 1000, 1027, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1041], "639": [342, 347], "plot_svm_nonlinear": [342, 347], "svr_rbf": 343, "svr_lin": 343, "svr_poli": 343, "kernel_label": 343, "model_color": 343, "setdiff1d": 343, "fancybox": 343, "410": [343, 347], "plot_svm_regress": [343, 347], "omega": [344, 408, 979], "dependen": 344, "reparametr": 344, "model_l1": 344, "shuffle_param": 344, "best_c": 344, "idxmax": 344, "train_size_idx": 344, "results_sc": 344, "c_scale": 344, "best_c_scal": 344, "somewhat": [344, 360, 366, 378, 380, 410, 412, 899, 902, 981, 1000, 1001], "dantzig": 344, "model_l2": 344, "plot_svm_scale_c": [344, 347], "break_ti": [345, 899, 902, 1000, 1037], "accent": [345, 584, 585, 587, 1037], "plot_svm_tie_break": [345, 347], "emphasi": [346, 408, 899, 900, 901, 902, 903, 992, 1005], "subtl": [346, 360, 984, 1006], "plot_decision_funct": 346, "sample_weight_last_ten": 346, "sample_weight_const": 346, "clf_no_weight": 346, "clf_weight": 346, "527": [346, 347], "plot_weighted_sampl": [346, 347], "365": [347, 407, 469], "auto_examples_svm": 347, "size_mb": 349, "utf": [349, 351, 413, 483, 499, 578, 584, 585, 587], "load_dataset": 349, "sublinear_tf": [349, 410, 413, 586, 587], "duration_train": 349, "duration_test": 349, "data_train_size_mb": 349, "data_test_size_mb": 349, "2034": [349, 373], "98mb": 349, "1353": 349, "87mb": 349, "942mb": 349, "7831": 349, "498mb": 349, "ridgeclassifi": [349, 364, 668, 669, 671, 981, 986, 1032, 1036, 1040, 1041, 1042], "sparse_cg": [349, 668, 670, 683, 981, 1028, 1034, 1036, 1037, 1041, 1043], "rarer": [349, 351, 413], "deeper": [349, 1001], "plot_feature_effect": 349, "average_feature_effect": 349, "top5": 349, "top_indic": 349, "predictive_word": 349, "bar_siz": 349, "y_loc": 349, "keyword": [349, 372, 378, 380, 383, 385, 392, 405, 416, 419, 434, 440, 441, 446, 448, 453, 460, 463, 492, 499, 531, 534, 536, 555, 556, 563, 564, 565, 566, 616, 624, 627, 628, 635, 639, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 684, 688, 693, 694, 695, 696, 697, 698, 769, 773, 774, 775, 776, 787, 788, 800, 816, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 857, 861, 929, 931, 952, 974, 982, 985, 988, 998, 1027, 1031, 1033, 1034, 1035, 1037, 1039, 1041, 1042, 1043, 1044], "keith": [349, 1027, 1032], "atheist": 349, "orbit": [349, 350], "caltech": 349, "expectedli": 349, "pollut": [349, 723, 780, 985, 991], "sender": [349, 373], "livesei": 349, "solntz": 349, "wpd": 349, "sgi": 349, "jon": [349, 1034, 1037, 1038, 1040, 1041], "nntp": [349, 373, 1020], "1qlettinn8oi": 349, "cco": 349, "allan": [349, 403, 1039], "schneider": [349, 1040], "me": 349, "instinct": 349, "happi": [349, 390, 393, 812, 813], "listen": 349, "murder": 349, "voluntari": 349, "disregard": [349, 392, 413, 428, 461, 478, 479, 480, 548, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 717, 718, 719, 780, 830, 831, 840, 848, 855, 866, 867, 873, 874, 877, 882, 885, 886, 888, 898, 900, 903, 906, 908, 985, 1035], "beings": 349, "bahavior": 349, "theirs": 349, "mimicri": 349, "imit": 349, "parrot": 349, "polli": 349, "pulchritud": 349, "anim": [349, 413], "kill": 349, "Or": [349, 358, 409, 410, 870, 985, 991, 999], "sigh": 349, "wonder": 349, "bahaviour": 349, "believ": [349, 350, 386, 390, 1009], "primat": 349, "arbitarili": 349, "poster": [349, 377, 378, 1019], "weren": [349, 871, 1036], "slai": 349, "mate": 349, "ritual": 349, "whatnot": 349, "aren": [349, 373, 382, 395, 404, 721, 751, 990, 1037, 1039], "ye": [349, 386, 392, 864, 881, 981], "gorilla": 349, "dolphin": 349, "platypu": 349, "writer": 349, "launch": [349, 350, 395, 1009], "custom_nam": 349, "clf_descr": 349, "rocchio": [349, 844], "000625": 349, "772": [349, 718], "5316": 349, "0381": 349, "000642": 349, "000989": 349, "0587": 349, "704": 349, "0323": 349, "000623": 349, "752": 349, "0277": 349, "000627": 349, "00287": 349, "00165": 349, "748": [349, 384], "00183": 349, "00054": 349, "779": 349, "training_tim": 349, "txt": [349, 372, 489, 499], "curs": [349, 350, 405, 411, 987, 988, 1014, 1019], "harm": [349, 380, 413, 790], "563": [349, 352], "plot_document_classification_20newsgroup": [349, 352], "discov": [350, 404, 405, 410, 413, 416, 440, 444, 1011, 1042], "category_s": 350, "true_k": 350, "3387": 350, "evaluations_std": 350, "fit_and_evalu": 350, "evaluation_std": 350, "score_valu": 350, "std_score": [350, 1040], "collis": [350, 351, 413, 578, 585], "x_tfidf": 350, "7929": [350, 1034], "prod": [350, 617], "phenomenon": [350, 995], "cluster_s": 350, "2050": 350, "711": 350, "446": [350, 721, 751, 985], "485": [350, 692], "1708": 350, "3384": 350, "1887": 350, "311": 350, "332": [350, 885], "1688": 350, "454": 350, "973": [350, 409], "628": 350, "405": 350, "380": [350, 1020], "217": [350, 531, 537], "redo": 350, "x_lsa": 350, "explained_vari": [350, 985], "385": 350, "398": [350, 643, 1020], "010": [350, 384, 993], "435": 350, "minibatch_kmean": 350, "348": 350, "092": 350, "376": [350, 993], "292": [350, 395, 412, 730], "original_space_centroid": 350, "order_centroid": 350, "ve": [350, 378, 413, 1008, 1009, 1020, 1034], "shuttl": 350, "bibl": 350, "sparciti": 350, "lsa_vector": 350, "x_hashed_lsa": 350, "774": 350, "392": 350, "413": 350, "022": [350, 993], "043": [350, 384], "367": [350, 412, 1027], "df_std": 350, "speak": [350, 364, 378, 999], "safer": [350, 360, 376, 405, 409, 1027], "649": [350, 352], "plot_document_clust": [350, 352], "18000": [351, 373], "raw_data": 351, "data_size_mb": 351, "3803": 351, "245mb": 351, "anyth": [351, 382, 384, 392, 396, 406, 409, 945, 949, 1041], "unicod": [351, 413, 483, 499, 578, 584, 585, 587, 950, 1027, 1035, 1039], "charact": [351, 378, 383, 392, 413, 499, 504, 505, 584, 585, 587, 909, 990, 1020, 1027, 1040, 1042], "underscor": [351, 380, 392, 969, 1017, 1027, 1037, 1040], "tok": [351, 413], "findal": 351, "token_freq": 351, "dict_count_vector": 351, "47928": 351, "vocabulary_": [351, 413, 577, 584, 587, 1020, 1027], "19145": 351, "n_nonzero_column": 351, "43873": 351, "inact": [351, 372, 378], "576": 351, "47668": 351, "input_typ": [351, 413, 460, 578], "y_po": 351, "downsid": 351, "featureheash": 351, "implicitli": [351, 387, 412, 593, 628, 629, 876, 975, 977, 992, 995, 1000], "token_pattern": [351, 413, 584, 585, 587], "694": 351, "47885": 351, "510": [351, 1018], "plot_hashing_vs_dict_vector": [351, 352], "auto_examples_text": 352, "parameter": [354, 415, 610, 611, 618, 619, 792, 793, 981, 982, 990, 995, 1001], "weakest": [354, 1001], "cost_complexity_pruning_path": [354, 905, 906, 907, 908], "drawstyl": [354, 696], "3272984419327777": 354, "plot_cost_complexity_prun": [354, 359], "ryb": 355, "pairidx": 355, "borderpad": 355, "handletextpad": 355, "plot_iris_dtc": [355, 359], "plot_tre": [355, 358, 1001, 1036, 1038, 1039, 1040, 1042, 1043], "856": [355, 359], "085": [356, 359], "plot_tree_regress": [356, 359], "regr_3": 357, "y_3": 357, "plot_tree_regression_multioutput": [357, 359], "decision_path": [358, 553, 554, 560, 561, 562, 905, 906, 907, 908, 1033, 1038], "decisiontreeclassifierifitteddecisiontreeclassifi": 358, "compute_node_depth": 358, "children_left": 358, "children_right": 358, "n_node_sampl": 358, "weighted_n_node_sampl": 358, "travers": [358, 988, 992], "n_node": [358, 437, 441, 459, 553, 554, 560, 561, 562, 905, 906, 907, 908, 939], "node_depth": 358, "is_leav": 358, "pop": [358, 390, 912, 1015, 1035], "visit": [358, 378, 992], "node_id": [358, 909, 911], "is_split_nod": 358, "children": [358, 405, 412, 437, 441, 459, 562, 1031], "800000011920929": 358, "950000047683716": 358, "n_output": [358, 392, 412, 422, 428, 429, 433, 438, 441, 461, 465, 478, 479, 480, 528, 530, 532, 533, 535, 538, 539, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 566, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 624, 626, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 674, 675, 717, 718, 723, 740, 741, 743, 745, 746, 748, 749, 780, 783, 785, 786, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 844, 846, 847, 848, 853, 854, 855, 856, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 889, 890, 892, 893, 897, 898, 899, 900, 902, 903, 905, 906, 907, 908, 923, 956, 985, 986, 1001, 1034, 1037], "node_index": 358, "node_ind": 358, "leaf_id": 358, "sample_id": [358, 373, 493], "threshold_sign": 358, "inequ": [358, 392, 405, 439, 443, 455, 695, 982, 983, 988], "common_nod": 358, "common_node_id": 358, "plot_unveil_tree_structur": [358, 359], "696": 359, "auto_examples_tre": 359, "x_test_transform": [360, 409], "standard_norm": 360, "unfair": 360, "x_select": 360, "gbc": 360, "x_train_select": 360, "x_test_select": 360, "tip": [360, 363, 367, 378, 381, 384, 400, 413, 530, 537, 641, 688, 981, 1007, 1021, 1022, 1025, 1030], "glossari": [360, 367, 378, 380, 384, 404, 416, 417, 433, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 460, 463, 465, 468, 470, 484, 487, 488, 491, 493, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 590, 598, 603, 604, 606, 607, 623, 628, 630, 635, 636, 637, 638, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 683, 684, 685, 686, 687, 688, 689, 690, 691, 697, 769, 773, 776, 788, 792, 793, 794, 796, 797, 798, 799, 800, 806, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 839, 840, 842, 843, 845, 846, 847, 848, 850, 851, 853, 854, 855, 856, 859, 862, 874, 878, 886, 889, 890, 892, 893, 897, 898, 899, 902, 905, 906, 907, 908, 933, 934, 956, 959, 974, 975, 981, 1011, 1035], "mtrand": 360, "_rand": 360, "85418642": 360, "79084103": 360, "13077794": 360, "11915045": 360, "56479934": 360, "70814003": 360, "25291366": 360, "55212743": 360, "18197458": 360, "37845099": 360, "mutat": [360, 1035], "debug": [360, 365, 379, 381, 384, 392, 394, 623, 896, 951, 1005, 1020, 1035, 1039], "govern": [360, 364, 367, 378, 392, 1003, 1009], "implic": [360, 378], "rf_123": 360, "rf_inst": 360, "didn": [360, 392, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "strict": [360, 376, 392, 410, 499, 531, 584, 585, 587, 981, 1027, 1036, 1039], "pervas": [360, 378], "unlucki": 360, "lucki": 360, "fairer": 360, "temptat": [360, 378], "throughput": [363, 1005, 1022, 1030], "switch": [363, 674, 700, 713, 732, 750, 752, 790, 837, 838, 933, 934, 985, 988, 1022, 1027], "offlin": [364, 378], "bottleneck": [364, 384, 412, 444, 854, 855], "hurt": [364, 530, 1035], "toolkit": [364, 1005, 1009], "branch": [364, 376, 378, 381, 382, 405, 412, 438, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 905, 906, 907, 908, 910, 988, 992, 1001], "sklearn_assume_finit": 364, "assume_finit": [364, 365, 464, 895], "assert_all_finit": [364, 387, 464], "nm": 364, "csc": [364, 390, 392, 413, 523, 547, 549, 550, 666, 688, 864, 866, 872, 877, 880, 882, 888, 913, 917, 918, 948, 960, 961, 963, 964, 965, 966, 988, 995, 1035, 1036, 1038, 1041], "32bit": [364, 950], "speedup": [364, 410, 412, 646, 650, 653, 1027, 1028, 1029, 1030, 1042], "multithread": [364, 405, 897, 898, 899, 900, 901, 902, 903], "bla": [364, 365, 376, 379, 384, 1027, 1035, 1036, 1038, 1039], "sparsity_ratio": 364, "gbt": 364, "speedi": 364, "packet": 364, "reuter": [364, 373], "carefulli": [364, 410, 1000], "spawn": [364, 390, 794, 808, 818, 819, 820, 1038], "gil": [364, 365, 379, 953, 1030, 1035, 1036, 1039, 1040, 1044], "ought": 364, "lapack": [364, 365, 376, 528, 531, 537, 684, 1042], "dgemm": 364, "show_vers": [364, 376, 378, 386, 395, 1035], "atla": [364, 376], "rebuild": [364, 399, 413, 438], "openbla": [364, 365, 376, 390, 953, 1040, 1044], "mkl": [364, 365, 376, 390, 953, 1027], "veclib": [364, 390], "osx": 364, "nouri": [364, 1028, 1030], "instruct": [364, 378, 379, 380, 381, 382, 383, 386, 390, 391, 499, 584, 585, 587, 1011, 1020, 1027], "ubuntu": [364, 376, 384, 386], "1gb": 364, "mib": [364, 464, 895], "working_memori": [364, 365, 464, 776, 895, 1035], "adher": [364, 380, 392, 928, 929, 1027, 1028], "pairwise_distances_chunk": [364, 773, 1035, 1038, 1044], "facilit": [364, 392, 399, 1005, 1006, 1033, 1036], "moment": [364, 410, 415, 436, 611, 619, 854, 855, 949, 989, 990], "000024": 364, "027400": 364, "mileag": 364, "deploi": [364, 394, 399, 1006, 1009], "upstream": [364, 378, 382, 386, 390, 995, 1036], "lighter": [364, 696, 698, 777, 784, 1043], "threadpoolctl": [365, 376, 395, 398], "subsect": [365, 378, 404], "worker": [365, 392, 413, 951, 952, 953, 1042], "14228": 365, "loki": [365, 953, 985, 1035, 1038], "duplic": [365, 377, 378, 392, 405, 416, 440, 444, 445, 511, 631, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 821, 868, 971, 988, 1027, 1030, 1039, 1041, 1043, 1044], "memmap": [365, 373, 392, 410, 504, 530, 1035], "1mb": [365, 1032], "parallel_backend": [365, 416, 433, 440, 442, 444, 446, 448, 453, 454, 457, 460, 463, 468, 527, 531, 532, 533, 535, 538, 539, 541, 542, 544, 551, 552, 553, 554, 559, 560, 561, 562, 563, 564, 565, 566, 590, 598, 606, 628, 630, 635, 643, 647, 649, 651, 653, 654, 655, 657, 659, 661, 662, 664, 672, 675, 684, 685, 686, 687, 688, 689, 690, 769, 773, 776, 794, 797, 798, 800, 808, 816, 818, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 839, 840, 843, 845, 847, 848, 850, 851, 856, 859, 892, 893, 1035], "exclus": [365, 390, 392, 410, 412, 623, 624, 626, 974, 981, 985, 986, 1009, 1034, 1038], "omp_num_thread": 365, "my_script": 365, "algebra": [365, 376, 381, 390, 410, 413, 458, 863, 995], "bli": [365, 376, 390], "mkl_num_thread": 365, "openblas_num_thread": 365, "blis_num_thread": 365, "bash": [365, 386], "zsh": 365, "termin": [365, 383, 384, 386, 395, 405, 444, 457, 549, 550, 554, 555, 556, 559, 561, 662, 663, 664, 672, 674, 854, 855, 906, 908, 991, 1001], "prompt": [365, 376, 378, 395, 398, 413, 1011], "pypi": [365, 376, 378, 380, 382, 384, 395, 1001, 1035, 1039, 1041, 1042, 1044], "channel": [365, 373, 376, 390, 395, 413, 489, 490, 579, 580, 582, 583], "subscript": [365, 1040], "max_thread": [365, 379], "n_cpu": [365, 392], "lib": [365, 376, 395, 1005], "_num_thread": 365, "singleton": [365, 802, 920, 1040, 1043], "aforement": [365, 986], "global_random_se": 365, "fixtur": [365, 378], "build_numb": 365, "disrupt": 365, "config": [365, 378, 379, 386, 622, 1035], "contributor": [365, 381, 382, 383, 386, 390, 392, 985, 1003, 1006, 1028, 1029, 1030], "encount": [365, 376, 399, 405, 412, 413, 492, 557, 558, 577, 832, 833, 834, 836, 870, 960, 995, 999, 1005, 1008, 1009, 1020, 1035, 1038], "watch": 365, "annoi": 365, "test_your_test_nam": 365, "skip": [365, 378, 380, 387, 401, 413, 464, 564, 642, 643, 648, 656, 657, 658, 667, 677, 895, 1020, 1031, 1034, 1037, 1039, 1041, 1043], "global_dtyp": 365, "boundscheck": [365, 379], "segfault": [365, 379, 1027, 1035, 1040], "posix": [365, 390], "pairwisedistancesreduct": 365, "adequ": [365, 384, 563, 1011, 1040], "drive": [366, 410, 411, 545, 999, 1009, 1020], "passiveaggressiveregressor": [366, 981, 1028, 1031, 1034, 1035, 1038, 1040], "maxabsscal": [366, 401, 861, 882, 975, 995, 1032, 1035, 1036, 1037, 1038, 1043, 1044], "routin": [366, 372, 375, 378, 379, 380, 381, 386, 390, 392, 414, 668, 670, 683, 840, 899, 900, 901, 902, 903, 982, 988, 995, 996, 999, 1005, 1009, 1027, 1041, 1042, 1043], "passiveaggress": [366, 413], "fledg": [366, 413], "naivebay": 366, "dramat": 366, "welcom": [367, 377, 378, 386, 393, 1006, 1008], "roadmap": [367, 1003], "persist": [367, 386, 390, 410, 442, 606, 607, 853, 990, 1005, 1022, 1033, 1036], "miscellan": [367, 371, 372, 1033, 1034, 1041, 1042, 1044], "craft": [367, 381], "curat": [367, 378, 381, 382], "fetcher": [371, 1032, 1034, 1043], "linnerrud": [371, 1022], "covertyp": [371, 487, 1022], "rcv1": [371, 493, 1022, 1032], "svmlight": [371, 483, 504, 505, 1022, 1027, 1028, 1034, 1036], "jpeg": [372, 373, 489, 490], "publish": [372, 373, 380, 382, 386, 392, 997, 1006, 1039], "creativ": 372, "spare": [372, 670, 671], "pyplpt": 372, "load_svmlight_fil": [372, 1027, 1028, 1033, 1034, 1035, 1042], "test_dataset": 372, "everybodi": [372, 378], "upload": [372, 376, 382, 390, 667], "mice": [372, 623, 975], "brain": 372, "miceprotein": 372, "1080": [372, 405], "sc": [372, 405], "clara": [372, 1039], "higuera": 372, "katheleen": 372, "gardin": 372, "krzysztof": 372, "cio": 372, "protein": 372, "cite": [372, 405, 1003], "kj": [372, 987], "critic": [372, 378, 391, 399, 412, 688, 982, 985, 993, 1000, 1009, 1038], "syndrom": 372, "plo": [372, 603, 604], "ONE": [372, 603, 604], "e0129126": 372, "40966": 372, "upload_d": 372, "08t16": 372, "17928620": 372, "file_id": 372, "default_target_attribut": 372, "row_id_attribut": 372, "mouseid": 372, "ignore_attribut": 372, "genotyp": 372, "cc18": 372, "study_135": 372, "study_98": 372, "study_99": 372, "md5_checksum": 372, "3c479a6885bfa0438971388283a1ce32": 372, "websit": [372, 373, 375, 378, 393, 989, 999, 1009, 1020, 1028, 1029, 1030], "4550": 372, "17t14": 372, "1804243": 372, "pone": 372, "0129126": 372, "openml100": 372, "study_14": 372, "study_34": 372, "earliest": [372, 982], "iris_61": 372, "iris_969": 372, "969": 372, "iris_version_3": 372, "vanschoren": [372, 1039], "rijn": [372, 1035], "bischl": 372, "torgo": 372, "acm": [372, 373, 405, 416, 440, 446, 453, 456, 507, 559, 672, 721, 751, 843, 985, 988, 991, 997], "sigkdd": [372, 373, 507, 672, 878, 995, 997], "newslett": 372, "legaci": [372, 382, 392, 953, 1027, 1034, 1039], "my": [372, 378, 383, 386, 492], "columnar": [372, 460, 1005], "usabl": [372, 378, 380, 392, 399, 413, 794, 953, 1027, 1034, 1041, 1042], "io": [372, 375, 376, 378, 382, 384, 386, 392, 399, 688, 1005, 1025], "json": [372, 378, 395], "sql": 372, "smoothli": 372, "manipul": [372, 401, 503, 953, 1005, 1033], "mat": [372, 413], "load_fil": [372, 373, 1020, 1029, 1041], "audio": [372, 499], "wish": [372, 378, 385, 387, 395, 405, 646, 647, 650, 651, 652, 660, 661, 934, 1012, 1020, 1034], "imageio": 372, "wavfil": 372, "wav": 372, "hdf5": 372, "h5py": 372, "pytabl": 372, "april": [373, 660, 681, 682, 1031, 1039], "AT": [373, 491], "laboratori": [373, 1005], "cambridg": [373, 410, 586, 832, 836, 981, 983, 987], "facial": 373, "glass": 373, "upright": 373, "frontal": 373, "movement": 373, "credit": [373, 386, 412, 981, 1009], "18846": [373, 484, 485], "scikit_learn_data": [373, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "20news_hom": 373, "newsgroups_train": 373, "11314": 373, "1073": 373, "20new": [373, 1020], "34118": 373, "01327": 373, "newsgroups_test": 373, "vectors_test": 373, "class_prior": [373, 832, 833, 834, 836, 1028, 1031], "fit_prior": [373, 832, 833, 834, 836], "88213": 373, "suspici": 373, "show_top10": 373, "top10": 373, "affili": 373, "abund": 373, "clue": [373, 386, 982], "bare": [373, 982, 1020], "quotat": 373, "77310": 373, "76995": 373, "cleveland": 373, "indian": 373, "leagu": 373, "team": [373, 381, 390, 392, 1003, 1005, 1009, 1027], "ohio": 373, "spark": [373, 1006], "death": 373, "floyd": [373, 684, 982], "reckon": 373, "coloni": 373, "paul": [373, 1030, 1033, 1034, 1035, 1036, 1040, 1041], "dolan": 373, "nicknam": 373, "tribe": 373, "theme": [373, 1027], "mlb": [373, 868], "inappropri": [373, 409, 415, 705, 815], "nlp": [373, 410, 413, 832, 836, 983, 1009], "cultur": 373, "inflammatori": 373, "famou": [373, 375, 412, 1000], "internet": [373, 383, 995, 1018], "offici": [373, 380, 392, 395, 489, 493, 1005, 1020, 1035, 1036, 1039], "verif": [373, 985, 1009], "identif": [373, 378, 405, 493, 974, 1012], "viola": [373, 1035], "opencv": 373, "detector": [373, 392, 843], "5749": [373, 489, 490], "13233": [373, 489, 490], "5828": [373, 489, 490], "200m": 373, "lfw_home": 373, "rectangular": [373, 392, 934, 1006], "1140": 373, "fetch_lfw_pair": [373, 1032, 1042], "lfw_pairs_train": 373, "subdivid": [373, 415], "10_fold": [373, 489], "gari": [373, 1034], "huang": [373, 654, 1033, 1038], "manu": 373, "ramesh": [373, 1009, 1030, 1033, 1037], "tamara": 373, "berg": [373, 1028, 1029, 1039], "erik": [373, 1009, 1030], "miller": [373, 1035, 1036, 1040], "massachusett": 373, "amherst": 373, "30m": 373, "seven": [373, 978], "homepag": [373, 526, 1001], "581012": [373, 487], "newswir": 373, "ltd": [373, 1009], "804414": [373, 493], "47236": [373, 493], "fetch_rcv1": [373, 1032, 1036], "v2": [373, 493, 660, 681, 682, 981], "chronolog": [373, 493], "23149": [373, 493, 1041], "781265": [373, 493], "lyrl2004": [373, 493], "2286": 373, "810596": 373, "2288": 373, "uint32": [373, 493], "gmil": 373, "381327": 373, "ccat": 373, "e11": 373, "ecat": 373, "m11": 373, "656": 373, "lewi": [373, 1034, 1038], "yang": [373, 405, 410, 530, 635, 1033, 1034, 1037, 1039, 1040, 1041, 1043], "rose": 373, "361": [373, 412, 551, 552], "397": 373, "cup": [373, 985], "tcpdump": 373, "darpa": 373, "intrus": 373, "lincoln": 373, "unrealist": 373, "sa": [373, 488], "logged_in": 373, "smtp": [373, 488], "resp": [373, 412, 593, 792, 793, 999, 1035], "4898431": [373, 488], "976158": 373, "699691": 373, "619052": 373, "95373": 373, "kddcup99": [373, 488], "richard": [373, 414, 654, 1028, 1037, 1039, 1041, 1042], "lippmann": 373, "hain": 373, "jonathan": [373, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043], "korba": 373, "da": [373, 1042, 1043], "yamanishi": 373, "takeuchi": 373, "miln": 373, "discount": [373, 405, 721, 751, 1034, 1037], "sixth": 373, "press": [373, 405, 410, 415, 416, 440, 586, 606, 607, 610, 615, 618, 639, 832, 836, 978, 981, 983, 987], "household": 373, "statlib": 373, "dcc": 373, "ltorgo": 373, "cal_hous": 373, "1990": 373, "censu": 373, "bureau": 373, "resid": 373, "vacat": 373, "pace": 373, "kellei": [373, 1029, 1030], "ronald": [373, 989, 1030, 1040], "barri": [373, 1035], "autoregress": 373, "hyperspher": [374, 1005], "interleav": [374, 518], "simplif": [374, 377, 383, 1027, 1033], "realiti": 374, "make_sparse_uncorrel": 374, "make_friedman1": [374, 412, 535, 539, 589, 590, 628], "make_friedman2": [374, 607, 609, 610, 611, 612, 613, 617, 620, 621], "reciproc": [374, 985], "make_friedman3": 374, "7826": 375, "4194": 375, "9490": 375, "9565": 375, "fisher": [375, 412, 500, 632, 1005], "michael": [375, 403, 405, 446, 624, 633, 687, 792, 975, 981, 1009, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042], "marshal": 375, "arc": [375, 412], "1988": 375, "sir": 375, "referenc": [375, 378, 380, 386, 392, 889, 890, 988, 1034, 1040], "duda": [375, 979], "hart": [375, 979, 1035], "taxonom": 375, "annual": [375, 405, 721, 751, 894, 985, 998], "eugen": [375, 1028, 1033], "1936": 375, "john": [375, 413, 532, 704, 730, 764, 872, 899, 900, 902, 903, 975, 981, 985, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1040, 1042, 1043], "wilei": [375, 975], "1950": [375, 985], "1973": [375, 403], "scene": [375, 988, 990, 1040], "q327": 375, "d83": 375, "son": [375, 975], "isbn": [375, 405, 981], "22361": 375, "218": [375, 467, 711, 781], "dasarathi": 375, "1980": 375, "nose": [375, 1030, 1034], "pami": [375, 405, 720], "gate": [375, 1040], "1972": 375, "431": 375, "mlc": 375, "cheeseman": 375, "autoclass": 375, "conceptu": [375, 412, 983], "alpaydin": 375, "boun": 375, "nist": [375, 985], "bitmap": 375, "preprint": 375, "32x32": 375, "nonoverlap": 375, "4x4": [375, 410, 413], "garri": 375, "candela": 375, "dimmick": 375, "geist": 375, "grother": 375, "janet": 375, "handprint": 375, "nistir": 375, "5469": 375, "kaynak": 375, "msc": 375, "graduat": 375, "bogazici": 375, "cascad": 375, "kybernetika": 375, "ken": [375, 1020, 1029, 1036], "tang": [375, 1037, 1038, 1039], "ponnuthurai": 375, "suganthan": 375, "yao": [375, 1033, 1034, 1035, 1036, 1043, 1044], "kai": [375, 559, 991, 1034], "dimensionalityreduct": 375, "nanyang": 375, "technolog": 375, "claudio": [375, 1041, 1042], "gentil": [375, 1039], "linnerud": [375, 501], "men": 375, "club": 375, "waist": 375, "puls": 375, "chin": [375, 1031], "situp": 375, "tenenhau": 375, "pratiqu": 375, "alcalin": 375, "magnesium": 375, "phenol": 375, "nonflavanoid": 375, "proanthocyanin": 375, "od280": 375, "od315": 375, "class_2": [375, 506], "162": 375, "1680": 375, "chemic": 375, "grown": [375, 412, 549, 550, 551, 552, 553, 554, 560, 561, 905, 906, 907, 908, 1001], "itali": 375, "cultiv": 375, "thirteen": 375, "constitu": 375, "forina": 375, "parvu": 375, "pharmaceut": 375, "food": 375, "brigata": 375, "salerno": 375, "16147": 375, "genoa": 375, "lichman": 375, "irvin": 375, "aeberhard": 375, "cooman": 375, "vel": 375, "rep": 375, "dept": 375, "cook": [375, 1027, 1033], "north": [375, 405], "queensland": 375, "submit": [375, 376, 377, 380, 381, 382, 383, 386, 392, 393], "technometr": [375, 407, 465, 470, 991], "rda": 375, "1nn": 375, "THE": 375, "OF": 375, "chemometr": 375, "wheel": [376, 378, 382, 395, 1037, 1039, 1041], "quickest": 376, "registri": [376, 395, 1005], "uninstal": 376, "git": [376, 380, 382, 384, 386, 1008, 1023, 1027, 1043], "fork": [376, 378, 382, 386, 390], "miniforge3": [376, 386], "miniforg": [376, 386, 395], "env": [376, 386, 395], "newli": [376, 391, 412, 459, 992, 1033, 1034, 1042], "virtualenv": [376, 378, 395], "python3": [376, 395], "venv": [376, 395], "pep517": [376, 378], "dev0": [376, 382, 1008, 1023], "pyx": [376, 378, 379, 384, 386], "pxd": [376, 378], "sklearn_fail_no_openmp": 376, "checkout": [376, 378, 382, 386], "cumbersom": 376, "reinstal": [376, 395], "setuptool": 376, "unix": [376, 413], "makefil": 376, "studio": [376, 1009], "vs_buildtool": 376, "desktop": 376, "screenshot": 376, "secondli": [376, 390, 405, 412, 653, 981, 1020], "architectur": [376, 380, 386, 390, 395, 399, 464, 895, 989, 1003, 1009, 1027, 1044], "cmd": 376, "powershel": 376, "struct": [376, 392, 1030], "calcsiz": 376, "distutils_use_sdk": 376, "x86": 376, "buildtool": 376, "vc": 376, "vcvarsal": 376, "bat": 376, "x64": 376, "clang": [376, 379], "confusingli": 376, "usr": 376, "gcc": [376, 379, 384, 390], "libomp": [376, 1039], "silicon": 376, "m1": [376, 401], "januari": [376, 378, 1027, 1028, 1037, 1039, 1042], "arm64": [376, 381], "llvm": 376, "toolchain": 376, "xcode": 376, "conflict": [376, 378, 382, 386, 395, 1034, 1035], "condarc": 376, "channel_prior": 376, "echo": [376, 382], "cxx": 376, "cflag": 376, "cxxflag": 376, "ldflag": 376, "subfold": [376, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 1040], "fopenmp": [376, 379], "export": [376, 379, 380, 395, 399, 909, 910, 1001, 1005, 1008, 1036], "cppflag": 376, "xpreprocessor": 376, "wl": 376, "rpath": 376, "lomp": 376, "sudo": [376, 395], "apt": [376, 386, 395], "pip3": [376, 395], "pythonx": 376, "site": [376, 378, 381, 386, 395, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 1009, 1035], "precompil": 376, "arm": [376, 378, 386, 974], "cython3": 376, "cento": 376, "yum": 376, "devel": 376, "gnu": 376, "port": [376, 395, 1037], "pkg": 376, "build_ext": [376, 384], "build_clib": 376, "linker": [376, 379], "sysconfig": 376, "counterpart": [376, 974, 982, 1000, 1015], "get_config_var": 376, "sklearn_build_parallel": 376, "tracker": [377, 381, 386, 390, 393, 395, 399, 1003, 1006], "prioriti": [377, 628, 825, 826, 1006, 1030], "guidelin": [377, 381, 383, 384, 386, 404, 405, 412], "reformul": 377, "xyz": 377, "someestim": 377, "relabel": [377, 812, 813, 894], "stall": [377, 381], "sprint": [377, 378, 1003, 1027], "unfinish": [377, 378], "supersed": [377, 1032], "overflow": [377, 386, 390, 1030, 1034, 1035, 1036, 1037, 1038, 1040], "submitt": 377, "strive": [377, 393, 1009], "expertis": [377, 378, 390], "unclear": [377, 378, 497], "pleasant": [377, 1009], "chime": 377, "permiss": [377, 382, 393, 395, 1009, 1042], "matthew": [377, 383, 532, 738, 1027, 1030, 1034, 1036, 1040, 1041], "rocklin": [377, 383], "acknowledg": [377, 605], "struggl": [377, 393, 405], "everyon": [378, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "underrepres": 378, "merit": [378, 382, 393], "teach": 378, "priceless": 378, "abid": 378, "codeofconduct": 378, "hesit": 378, "typo": [378, 393, 396, 1027], "send": [378, 405, 417, 529], "valuabl": [378, 975, 1009], "burden": [378, 869, 1006], "slep": [378, 392, 1003], "templat": [378, 382, 383, 392, 393, 553, 554, 559, 560, 561, 562, 1005], "ecosystem": [378, 975, 1004, 1009], "numpydoc": [378, 392, 395, 398], "compli": [378, 392, 928, 1006], "fulfil": [378, 405, 412, 794, 797, 798, 808, 857, 861, 981], "anyon": [378, 393, 1009], "gist": [378, 386, 1008], "repo": [378, 382, 1006], "feasibl": [378, 866, 867, 877], "traceback": [378, 383, 386, 390, 464, 1008], "doubt": [378, 379, 382, 981, 991, 1005], "companion": [378, 995], "transcript": 378, "inclus": [378, 380, 386, 446, 452, 749, 781, 985, 986, 1027, 1041], "yourlogin": 378, "ruff": [378, 395, 398], "mypi": [378, 382, 395, 398, 1038], "synchron": [378, 413], "my_featur": 378, "commit": [378, 382, 386, 1008, 1027, 1028, 1029, 1030], "modified_fil": 378, "committ": [378, 1027], "modif": [378, 408, 412, 413, 442, 998], "approv": [378, 393, 412], "mrg": [378, 386], "incomplet": [378, 395, 401, 405, 701, 790, 975, 982, 1020, 1031, 1033], "wip": [378, 386, 395], "matur": [378, 1005, 1006], "broad": [378, 392, 1005], "collabor": 378, "_logist": 378, "doctest": [378, 392, 1012, 1027], "test_logist": [378, 386], "rst": [378, 382, 386, 1020, 1027, 1032], "test_common": [378, 386], "caught": [378, 386, 399], "submodul": [378, 382, 384, 404, 977, 983, 1027], "intricaci": 378, "narr": [378, 392, 654, 897, 902, 1027, 1028], "unittest": 378, "tests_for_packag": 378, "static": [378, 380, 384, 386, 642, 643, 648, 649, 656, 657, 658, 659], "astropi": 378, "linux": [378, 380, 381, 386, 1005, 1027], "gh": 378, "lint": [378, 386], "nogil": [378, 379], "cpython": [378, 379, 384, 1042], "pyodid": [378, 953], "sklearn_run_float32_test": 378, "lengthi": [378, 390], "etiquett": 378, "she": [378, 887, 888, 1037], "he": [378, 721, 751, 854, 855, 887, 888, 985, 1020, 1034, 1041, 1042], "shorten": [378, 1000, 1040], "leader": [378, 1009], "grab": 378, "familiar": [378, 411, 1035], "acquaint": 378, "experienc": 378, "abandon": 378, "someon": [378, 382, 392, 1027], "glad": 378, "restructuredtext": 378, "some_param": 378, "hello": [378, 386, 946], "goodby": 378, "liter": [378, 382, 1009], "array_paramet": 378, "list_param": 378, "typed_ndarrai": 378, "multioutput_arrai": 378, "bracket": [378, 981], "delimit": [378, 991, 1042], "colon": 378, "selectfpr": [378, 414, 588, 591, 594, 595, 596, 602, 1043], "defer": 378, "backtick": [378, 383], "nowadai": 378, "dropdown": 378, "syntax": [378, 383, 386, 406, 464, 856, 857, 895, 974, 1011, 1038, 1040], "pragmat": 378, "bibliograph": 378, "arxiv": [378, 458], "_my": 378, "ref": [378, 385, 386, 975, 1033], "currentmodul": 378, "succeed": 378, "editor": [378, 386, 390], "_build": 378, "viewabl": 378, "pillow": [378, 395, 398], "sphinxext": [378, 395, 398], "opengraph": [378, 395, 398], "copybutton": [378, 395, 398], "vast": 378, "examples_pattern": 378, "your_regex_goes_her": 378, "no_mathjax": 378, "latexpdf": 378, "stone": [378, 905, 906, 1001], "subdirectori": 378, "subpackag": [378, 382, 1003, 1031, 1036], "cleanup": [378, 1027], "charg": 378, "test_requiring_mpl_fixtur": 378, "hang": [378, 1008, 1037, 1038], "fruit": [378, 986], "asv": 378, "asv_benchmark": 378, "airspe": 378, "veloc": 378, "publicli": [378, 1037], "zero_on": [378, 1028], "zero_one_loss": [378, 401, 699, 729, 985, 1028, 1029, 1030, 1044], "futurewarn": [378, 386, 1034, 1035, 1036, 1038, 1040, 1043], "example_funct": 378, "exampleestim": 378, "_n_cluster": 378, "versionchang": 378, "meet": [378, 390, 393, 414, 568, 599, 854, 855, 894, 985, 998, 1009, 1035, 1036, 1037], "nit": 378, "retract": 378, "grammar": 378, "disambigu": [378, 825, 894, 998, 1042], "Will": [378, 493, 530, 623, 640, 641, 642, 648, 652, 653, 656, 657, 658, 659, 660, 661, 669, 671, 703, 710, 783, 862, 866, 870, 876, 877, 1030, 1031, 1033, 1035], "clariti": [378, 386], "unhelp": 378, "extran": 378, "rewritten": [378, 645, 1029, 1031], "generos": 378, "reward": 378, "heard": 378, "enemi": 378, "courtesi": 378, "justifi": [378, 384, 403, 561], "occas": 378, "deserv": [378, 384], "digest": [378, 1042], "overwhelm": 378, "sheer": [378, 1009], "myself": 378, "trickiest": 378, "buri": 378, "mixin": [378, 392, 420, 421, 422, 423, 424, 426, 427, 428, 429, 597, 928, 1029, 1038, 1042], "grep": 378, "delai": [378, 492, 794, 808, 818, 819, 953, 1041, 1042], "some_funct": [378, 924], "some_iter": 378, "flavor": [378, 988], "pointer": [378, 386, 438, 1036], "mandatori": [378, 413, 627], "favorit": [378, 390, 1009], "Being": [378, 392, 393, 399, 981, 988], "killer": [378, 1009], "blame": 378, "migrat": [378, 1027], "ignorerevsfil": 378, "rev": [378, 603, 604], "ruin": 378, "maco": [379, 381, 395, 401, 1035, 1039, 1041], "sklearn_enable_debug_cython_direct": 379, "scratch": [379, 438, 985, 1029], "gdb": [379, 381, 1008], "entrypoint_to_bug_reproduc": 379, "cdef": 379, "state_to_print": 379, "test_val": 379, "fuse": [379, 1033, 1043], "shell": [379, 386, 390, 1011, 1020], "cythonx": 379, "language_level": 379, "wraparound": 379, "initializedcheck": 379, "nonecheck": 379, "cdivis": 379, "recompil": [379, 384, 395], "pep073": 379, "pathwai": 379, "memoryview": 379, "cnp": 379, "lightweight": [379, 794, 808, 818, 819, 1005], "virtual": [379, 395, 409, 1009], "enter": [379, 382, 405, 438, 992], "prang": 379, "void": 379, "my_func": [379, 384], "st\u00e9fan": 379, "benhel": 379, "_cython_bla": 379, "protect": [379, 382, 951], "_openmp_help": 379, "cimport": [379, 387, 1035], "omp_get_max_thread": 379, "prolifer": 380, "adopt": [380, 392, 893, 985, 999, 1035, 1042, 1044], "predomin": [380, 1028], "overrid": [380, 413, 442, 446, 453, 538, 544, 584, 585, 587, 589, 590, 593, 652, 660, 681, 682, 800, 816, 839, 840, 841, 843, 845, 847, 848, 849, 1027, 1035, 1037, 1041, 1043], "creation": [380, 507, 508, 509, 511, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 652, 837, 838, 1009, 1034, 1035, 1036, 1040], "optimis": [380, 405, 988, 1030, 1040, 1042], "param1": [380, 1017], "param2": [380, 1017], "param3": 380, "postpon": [380, 382], "requisit": 380, "liner": [380, 823], "ipython": [380, 383, 384, 386, 1012, 1020], "session": [380, 384, 390, 395, 1004, 1009, 1020], "trainabl": 380, "trail": [380, 969], "overridden": [380, 392, 415, 538, 544, 612, 617, 620, 690, 1035, 1036, 1043], "n_features_in_": [380, 392, 426, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 606, 607, 623, 624, 625, 626, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 1038, 1040, 1042], "slep010": [380, 1038], "duck": [380, 392, 1037], "check_x_i": [380, 387, 1031, 1035, 1036, 1041], "check_arrai": [380, 387, 464, 530, 895, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "templateclassifi": 380, "demo_param": 380, "myestim": 380, "subestim": 380, "my_extra_param": 380, "my_estim": [380, 406], "subestimator__c": 380, "subestimator__class_weight": 380, "subestimator__du": 380, "subestimator__fit_intercept": 380, "subestimator__intercept_sc": 380, "subestimator__l1_ratio": 380, "subestimator__max_it": 380, "subestimator__multi_class": 380, "subestimator__n_job": 380, "subestimator__penalti": 380, "subestimator__random_st": 380, "subestimator__solv": 380, "subestimator__tol": 380, "subestimator__verbos": 380, "subestimator__warm_start": 380, "__c": 380, "__class_weight": 380, "unpack": 380, "easiest": [380, 386, 406, 982], "__repr__": [380, 1006, 1036], "setattr": 380, "deepcopi": 380, "__sklearn_clone__": [380, 430, 1043], "frozen": 380, "frozentransform": 380, "fitted_transform": [380, 460], "__getattr__": 380, "_estimator_typ": [380, 392, 1032], "clustermixin": [380, 1044], "is_classifi": [380, 392], "programmat": [380, 495, 1036], "_get_tag": [380, 1038], "allow_nan": [380, 916, 918, 1043], "array_api_support": [380, 401], "binary_onli": [380, 1037, 1038], "multioutput_onli": 380, "no_valid": 380, "non_determinist": [380, 1041], "primari": [380, 392, 410, 511, 992, 1009], "_safe_split": 380, "preserves_dtyp": 380, "poor_scor": 380, "requires_fit": 380, "requires_positive_x": [380, 1037, 1042], "requires_i": [380, 1038], "requires_positive_i": 380, "_skip_test": 380, "_xfail_check": 380, "check_nam": 380, "xfail": [380, 386], "skiptestwarn": 380, "x_type": 380, "2darrai": 380, "signifi": [380, 405, 577, 805, 990], "1dlabel": 380, "2dlabel": 380, "_more_tag": 380, "mymultioutputestim": 380, "ridgeregress": 380, "idiosyncrat": 380, "onetoonefeaturemixin": [380, 429], "classnameprefixfeaturesoutmixin": [380, 429, 1042], "auto_wrap_output_kei": 380, "mytransform": 380, "__init_subclass__": 380, "invok": [380, 527, 533, 535, 541, 542, 563, 565, 566, 818, 894, 1039], "estimator_html_repr": [380, 406, 1038, 1039, 1040, 1041, 1044], "icon": 380, "_doc_link_modul": 380, "_doc_link_templ": 380, "_doc_link_url_param_gener": 380, "estimator_modul": 380, "ownership": 380, "pep8": [380, 382, 386], "indent": [380, 951], "nsampl": [380, 792, 793], "statement": [380, 383, 386, 390, 392, 410, 1003, 1020], "flow": 380, "client": [380, 953], "corollari": 380, "foo": [380, 577, 989], "baz": [380, 577], "pyflak": 380, "asanyarrai": 380, "hadamard": 380, "choose_random_sampl": 380, "freestand": 380, "unmodifi": [380, 392], "random_state_": [380, 532, 623, 846, 1041], "gaussiannois": 380, "quasi": [380, 854, 855, 981], "assert_allclos": 380, "rtol": [380, 837, 838, 842], "atol": [380, 668, 670, 837, 838, 842], "checklist": 381, "unclaim": 381, "workflow": [381, 382, 391, 409], "markdown": 381, "saniti": [381, 861, 985, 1027, 1028], "outdat": 381, "diff": [381, 985], "valgrind": 381, "platform": [381, 390, 392, 393, 399, 1005, 1009, 1032, 1035, 1036, 1038, 1040, 1041], "x86_64": [381, 395], "yep": 381, "gperftool": 381, "debugg": [381, 386], "gprof": 381, "callgrind": 381, "kcachegrind": 381, "warm": [381, 392, 527, 533, 539, 541, 542, 606, 649, 655, 662, 663, 664, 672, 673, 674, 981, 1006, 1037, 1039, 1041], "homebrew": [381, 395], "freebsd": 381, "rrrcn": 382, "pep101": 382, "build_tool": 382, "blocker": 382, "mileston": 382, "maint_tool": 382, "sort_whats_new": 382, "whats_miss": 382, "fixm": [382, 392], "feedstock": 382, "recip": [382, 982, 1009], "yaml": 382, "whats_new": [382, 386], "v0": [382, 467, 468, 474, 508, 584, 585, 587, 794, 808, 856, 859, 1028, 1035, 1036, 1037], "freez": [382, 395, 399, 1006, 1009, 1035], "0rc1": 382, "__version__": 382, "draft": [382, 393], "rebas": 382, "bugfix": [382, 1027, 1041], "backport": [382, 387, 1034], "maint": 382, "enh": 382, "blindli": 382, "invit": 382, "cherri": 382, "shortlog": 382, "f2": [382, 986], "sed": [382, 1027], "front": [382, 1034], "rc1": 382, "suffix": [382, 395, 820, 985, 1037], "brows": 382, "3a": 382, "22wheel": 382, "pyproject": 382, "toml": 382, "oldest": [382, 492], "abi": 382, "acronym": 382, "deliveri": 382, "whl": 382, "22publish": 382, "went": [382, 985], "bot": [382, 990, 1041], "sync": 382, "testpypi": 382, "tarbal": [382, 1042], "wheelhouse_upload": 382, "twine": 382, "rrr": 382, "symlink": 382, "latestst": 382, "tmp": 382, "ln": [382, 981, 989, 995], "versionwarn": 382, "secur": [382, 392, 1005, 1006, 1009, 1022], "twitter": 382, "linkedin": 382, "authorship": 382, "permalink": 382, "_hist_gradient_boost": 382, "_iter": 382, "pickl": [382, 392, 399, 413, 584, 585, 587, 837, 838, 1005, 1006, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043], "checker": [382, 817], "type_check": 382, "test_enable_hist_gradient_boost": 382, "enable_hist_gradient_boost": [382, 1036], "enable_my_experimental_featur": 382, "indefinit": 382, "incentiv": 382, "workabl": 383, "stackoverflow": [383, 386, 390, 1008], "blogpost": 383, "mcve": [383, 390], "my_data": 383, "with_mean": [383, 877, 888, 995, 1035, 1040], "default_scor": 383, "other_scor": 383, "scrollbar": 383, "tripl": 383, "fenc": 383, "qualifi": 383, "a674e682c281": 383, "lda_featur": 383, "lda_model": 383, "n_topic": [383, 532, 1034], "minimalist": [383, 413, 1008], "continuous_featur": 383, "positive_featur": 383, "invest": [384, 1009], "idiom": 384, "crunch": 384, "performancetip": 384, "reimplement": [384, 392, 1033, 1037], "spottabl": 384, "amen": [384, 415, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 974], "cpp": 384, "engag": [384, 393], "tent": 384, "somewher": [384, 985, 1020], "prun": 384, "14496": [384, 1036], "682": 384, "ncall": 384, "tottim": 384, "percal": 384, "cumtim": 384, "lineno": 384, "042": 384, "_nls_subproblem": 384, "1263": 384, "157": 384, "_po": 384, "057": 384, "_initialize_nmf": 384, "_spars": 384, "_neg": 384, "461": 384, "hotspot": 384, "16159": [384, 1038], "840": 384, "2833": 384, "653": [384, 607, 610, 621], "_dotbla": 384, "1397": 384, "2780": 384, "064": [384, 993], "1542": 384, "2734": 384, "fromnumer": 384, "1185": 384, "lapack_lit": 384, "dgesdd": 384, "rewrit": [384, 1001, 1019, 1027], "shallow": [384, 412, 557, 558, 912], "4x": [384, 1042], "line_profil": 384, "wire": [384, 530, 537], "profile_default": 384, "ipython_config": 384, "terminalipythonapp": 384, "interactiveshellapp": 384, "lprun": 384, "qtconsol": 384, "_nmf": 384, "73153": 384, "h_init": 384, "138": [384, 412, 985], "5863": 384, "nl": 384, "112141": 384, "2336": 384, "wtv": 384, "176": [384, 830, 986, 993], "16144": 384, "336": [384, 995], "wtw": 384, "638": 384, "1880": 384, "195133": 384, "305": 384, "grad": [384, 1009], "495761": 384, "777": 384, "proj_gradi": 384, "2449": 384, "1474": 384, "4474": 384, "inner_it": 384, "83833": 384, "hn": 384, "194239": 384, "191": [384, 986], "48858": 384, "150407": 384, "gradd": 384, "193": [384, 412, 711, 781, 998], "515390": 384, "dqd": 384, "pin": 384, "memory_profil": [384, 395, 398], "memit": 384, "mprun": 384, "1e7": 384, "402344": 384, "standalon": [384, 654, 897, 1008], "bianp": 384, "reactiv": 384, "conda_prefix": 384, "pydebug": 384, "extra_cflag": 384, "dpy_debug": 384, "num_cor": 384, "dbg": 384, "fortun": [384, 412, 1020, 1040, 1041], "my_fil": 384, "callgrin": 384, "prof": 384, "encapsul": [385, 406, 419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 465, 466, 467, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 599, 606, 607, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908], "artist": [385, 434, 628, 694, 696, 697, 698, 800, 816, 911], "classmethod": [385, 434, 627, 628, 693, 694, 695, 696, 697, 698, 800, 816, 943], "line_": [385, 434, 694, 696, 697, 698, 800, 816], "gridspecfromsubplotspec": 385, "subplot_spec": 385, "get_subplotspec": 385, "ax_top_left": 385, "ax_top_right": 385, "ax_bottom": 385, "bounding_ax_": [385, 628], "lines_": [385, 628, 800, 816], "contours_": [385, 628], "advic": [386, 415, 618, 619], "forth": 386, "userscript": 386, "tampermonkei": 386, "greasemonkei": 386, "shortcut": [386, 415], "pr_number": 386, "navig": [386, 1029], "overlai": [386, 628], "codecov": 386, "test_sparsifi": 386, "pdb": 386, "ipdb": [386, 1020], "pdbcl": 386, "terminalpdb": 386, "lf": 386, "ff": 386, "tb": [386, 567, 568, 569, 570, 571, 572, 573, 574], "runxfail": 386, "werror": 386, "mailman": 386, "listinfo": 386, "crowd": [386, 393, 982, 1006, 1008], "imped": 386, "attent": [386, 603, 604, 999], "minimal_reproduc": 386, "pytb": 386, "stdin": [386, 1020], "perman": 386, "25163598": 386, "issuenumb": 386, "1506": 386, "volunt": 386, "establish": [386, 390, 393, 975], "clarifi": [386, 393, 788], "regression_test": 386, "0008": 386, "patienc": [386, 392], "crop": [386, 1042], "manifest": [386, 982, 988], "fault": [386, 1035, 1037, 1039], "glibc": 386, "uniniti": 386, "trace": [386, 405, 418, 469, 471, 472, 475, 476, 477, 685, 689, 982, 1038], "supp": 386, "readm": [386, 413, 489], "my_test_script": 386, "mobil": 386, "deploy": [386, 1005, 1006, 1009], "scalewai": 386, "aw": 386, "graviton": 386, "laptop": [386, 464, 895, 1041, 1042, 1043], "workstat": 386, "qemu": 386, "docker": [386, 399, 1040, 1041], "multiarch": 386, "ppc64le": 386, "filesystem": [386, 395, 1040], "pushd": 386, "wget": 386, "aarch64": 386, "arm64v8": 386, "mount": 386, "pwd": 386, "reinit": 386, "bashrc": 386, "ephemer": 386, "evolv": [387, 1042, 1044], "as_float_arrai": 387, "column_or_1d": [387, 1038, 1042], "multitarget": 387, "multi_output": [387, 917], "safe_index": [387, 1037], "check_memori": [387, 392, 1034], "5488135": 387, "71518937": 387, "60276338": 387, "54488318": 387, "has_fit_paramet": 387, "randomized_range_find": [387, 1028, 1033], "arrayfunc": [387, 404], "cholesky_delet": 387, "min_po": 387, "least_angl": 387, "fast_logdet": 387, "safe_sparse_dot": [387, 1037], "weighted_mod": 387, "sample_without_replac": [387, 1033], "n_popul": [387, 954], "sparsefunc": [387, 404, 1040], "mean_variance_axi": [387, 1033, 1040], "sparsefuncs_fast": [387, 404], "inplace_csr_row_normalize_l1": 387, "inplace_csr_row_normalize_l2": 387, "inplace_csr_column_scal": 387, "sort_graph_by_row_valu": [387, 1042], "single_source_shortest_path_length": 387, "dijkstra": [387, 684, 982], "graph_shortest_path": [387, 1040], "all_estim": [387, 1037, 1038, 1042], "all_displai": [387, 1042], "all_funct": [387, 1042], "is_multilabel": 387, "dict_learn": [387, 527, 533, 542, 1028, 1035, 1037, 1040, 1041, 1043], "gen_batch": [387, 938], "safe_mask": 387, "safe_sqr": 387, "murmurhash3_32": 387, "murmurhash3_x86_32": [387, 950], "cryptograph": 387, "lookup": [387, 950, 1036], "bloom": [387, 950], "384616559": 387, "3910350737": 387, "murmurhash": 387, "graphical_lasso": [387, 467, 468, 1035, 1043], "kit": 390, "toolbox": [390, 1005, 1009], "multilay": [390, 983], "kera": [390, 1005], "forese": 390, "redesign": [390, 1027], "pystruct": [390, 1005], "ssvm": 390, "seqlearn": 390, "4143": 390, "meanwhil": [390, 1000], "pipegraph": 390, "squared_loss": [390, 1040], "undertak": 390, "slowli": [390, 392, 540, 934], "ordinarili": [390, 392], "corrobor": 390, "proof": [390, 412, 891, 997], "road": 390, "bridg": [390, 982, 1005], "reproduct": [390, 981, 1008], "guidanc": [390, 415], "gitter": [390, 1003, 1034, 1035], "value_kei": [390, 912], "levenshtein": 390, "dna": [390, 624, 975], "rna": 390, "pain": 390, "suppli": [390, 405, 642, 917, 918, 988, 1009, 1031, 1033, 1035, 1040], "leven": 390, "acctcctagaag": 390, "acctactagaagtt": 390, "gaatattaggccga": 390, "lev_metr": 390, "multiprocess": [390, 392, 951, 953, 988, 1027, 1035, 1041], "exec": 390, "cuda": [390, 401], "reiniti": 390, "culprit": 390, "refus": [390, 887, 888], "forkserv": 390, "joblib_start_method": 390, "set_start_method": 390, "dozen": [391, 415], "leakag": [391, 392, 406, 1022], "disclos": 391, "entail": [391, 875, 877, 999], "r_squar": 391, "searchcv": [391, 1042], "tacit": 392, "inconsist": [392, 399, 413, 504, 505, 572, 899, 902, 921, 991, 1000, 1022, 1027, 1032, 1033, 1034, 1035, 1037, 1040, 1042, 1043], "elsewher": [392, 458, 459, 467, 468, 474], "formal": [392, 393, 405, 412, 837, 838, 982, 985, 986, 989], "thereof": 392, "transduct": [392, 405, 892, 893, 1006], "position": 392, "serial": [392, 941, 1005, 1006, 1022, 1027, 1035, 1039, 1044], "unpickl": [392, 399, 572, 837, 838, 1033, 1039, 1043], "pep257": 392, "nuanc": 392, "flaw": [392, 412], "terminologi": [392, 1035], "est1": [392, 628], "est2": [392, 628], "exemplifi": 392, "_score": [392, 794, 808, 820, 985, 1027, 1040], "_loss": [392, 985], "divers": [392, 412], "abstract": [392, 410, 415, 614, 764, 1005, 1027], "descriptor": [392, 504, 505], "hoc": 392, "spectral_embed": [392, 982, 1028, 1031, 1033, 1035, 1037, 1040, 1041, 1042], "maxabs_scal": [392, 866, 1035], "astrai": 392, "readthedoc": 392, "entireti": 392, "shield": 392, "n_target": [392, 408, 478, 479, 480, 481, 520, 552, 607, 639, 642, 643, 646, 647, 648, 649, 650, 652, 653, 656, 657, 658, 659, 660, 661, 667, 668, 669, 670, 671, 677, 678, 679, 680, 681, 682, 683, 986, 1039, 1041, 1043], "synonym": [392, 839, 840, 841, 847, 848, 849], "themat": 392, "alphanumer": [392, 584, 585, 587], "statistician": [392, 877], "prescrib": 392, "baggingclassifi": [392, 396, 412, 552, 907, 975, 1030, 1033, 1034, 1035, 1038, 1042, 1043], "estimator__max_depth": [392, 974], "improp": [392, 1034], "pairwise_kernel": [392, 415, 448, 639, 760, 863, 983, 1027, 1034, 1044], "redundantli": 392, "distancemetr": [392, 411, 840, 988, 1035, 1039, 1040, 1041, 1044], "di": [392, 405, 410, 527, 533, 660, 681, 682, 890, 1031, 1040], "vectori": [392, 1037], "noun": 392, "venu": [392, 1008], "broadli": [392, 405], "consolid": [392, 393, 1027], "coo": [392, 549, 550, 688, 864, 913, 917, 918, 988, 1028, 1044], "lil": [392, 549, 550, 864, 913, 939, 988], "csgraph": [392, 1040], "absent": [392, 413, 749, 818], "densifi": [392, 410, 654, 655, 662, 663, 664, 672, 673, 674, 897, 975, 1029], "lossili": 392, "unnorm": [392, 532, 982, 1033, 1034], "encompass": [392, 446, 452, 551, 552, 982], "is_regressor": 392, "get_n_split": [392, 795, 796, 799, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815], "estimatorcv": [392, 1006], "loo": [392, 802, 1038], "router": [392, 396, 942, 943, 944, 945], "metadta": 392, "type_of_target": [392, 864, 878, 986, 1041, 1042, 1044], "hashabl": [392, 865, 868, 996], "labelencod": [392, 565, 871, 996, 1027, 1035, 1042, 1043], "canonic": 392, "xxx": 392, "everywher": 392, "multilabelbinar": [392, 826, 861, 870, 986, 1011, 1030, 1032, 1033, 1035, 1036], "nonetheless": [392, 985], "wherein": 392, "amber": 392, "return_cov": [392, 563, 564, 607, 857], "test_idx": 392, "_idx": 392, "label1": 392, "label2": 392, "class_label": [392, 553, 557, 560, 654, 655, 662, 664, 670, 671, 672, 905, 907, 923, 1000], "bincount": [392, 409, 553, 557, 560, 654, 655, 662, 664, 670, 671, 672, 897, 899, 902, 905, 907, 922, 923, 1034], "rebalanc": 392, "compute_class_weight": [392, 1030, 1041], "check_cv": [392, 1032], "obei": [392, 983], "triangl": [392, 410, 439, 443, 455, 695, 983, 988], "concurr": [392, 413, 951, 1039, 1041], "unset": [392, 1035], "get_scor": [392, 728, 1034, 1043], "check_scor": 392, "uppercas": [392, 1040], "unavail": [392, 654, 655, 946, 1034, 1040], "deadlock": 393, "meritocrat": 393, "somebodi": 393, "unanim": 393, "emeritu": [393, 1003], "recant": 393, "outreach": 393, "brand": [393, 395], "social": [393, 405, 1009], "authorit": 393, "strateg": 393, "entiti": [393, 721, 751], "duti": 393, "resign": 393, "occasion": [393, 722, 1036], "escal": 393, "fallback": [393, 395, 825, 826, 985], "hereaft": 393, "lazi": [393, 413, 999, 1031], "opinion": 393, "slep020": 393, "veto": 393, "appeal": 393, "revis": [393, 666], "slep000": 393, "insuffici": [394, 984, 1019], "afraid": 395, "64bit": [395, 1027], "miniconda": 395, "administr": 395, "dnf": 395, "pacman": 395, "raspberri": 395, "polar": [395, 398, 1020], "pyarrow": [395, 398], "lock": [395, 398, 951, 953], "py3": 395, "apk": 395, "bind": [395, 1005, 1027, 1034, 1035], "pkgsrc": 395, "py39": 395, "intelex": [395, 1005], "oned": 395, "sklearnex": 395, "plugin": 395, "appdata": 395, "usernam": 395, "windowsapp": 395, "oserror": [395, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494], "errno": 395, "pythonsoftwarefound": 395, "7_qbz5n2kfra8p0": 395, "localcach": 395, "python37": 395, "data_nam": 395, "australian": 395, "data_vers": 395, "lift": 395, "regedit": 395, "menu": 395, "hkey_local_machin": 395, "currentcontrolset": 395, "longpathsen": 395, "broken": [395, 409, 595, 596, 631, 716, 913, 985, 1001, 1030, 1034, 1035, 1036, 1038, 1041], "unsupport": [396, 399, 489, 1035, 1040], "set_": 396, "_request": 396, "weighted_acc": 396, "sample_weigh": 396, "sel": [396, 414], "scoring_weight": 396, "fitting_weight": 396, "hasn": 396, "larscv": [396, 646, 661, 678, 679, 1034, 1040, 1044], "multitaskelasticnetcv": [396, 642, 643, 648, 656, 658, 659, 677, 981, 1030, 1037, 1038, 1040, 1044], "multitasklassocv": [396, 657, 658, 1030, 1037, 1038, 1040, 1044], "multioutputclassifi": [396, 783, 826, 828, 830, 985, 1034, 1036, 1037, 1038, 1039, 1043], "regressorchain": [396, 828, 830, 1035, 1038, 1042], "ridgeclassifiercv": [396, 669, 670, 783, 985, 986, 1035, 1037, 1038, 1040, 1041], "retrain": [399, 1006, 1043], "inconsistentversionwarn": [399, 1043], "simplefilt": 399, "model_from_prevision_vers": 399, "original_sklearn_vers": [399, 572], "untrust": 399, "malici": 399, "inadvis": 399, "immut": 399, "snapshot": [399, 555, 556, 1006], "portabl": [399, 1005], "alex": [399, 413, 1000, 1027, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1043], "gaynor": 399, "sio": 399, "get_untrusted_typ": 399, "unknown_typ": 399, "exchang": [399, 1008], "markup": 399, "pmml": [399, 1005], "onnx": [399, 1005, 1006], "xml": 399, "sklearn2pmml": [399, 1005], "affero": 399, "gplv3": 399, "datastructur": [401, 1035, 1039], "namespac": 401, "array_api": 401, "x_np": 401, "y_np": 401, "x_cu": 401, "y_cu": 401, "array_api_dispatch": [401, 464, 895], "_estimator_with_converted_arrai": 401, "transfer": [401, 981, 1006], "_array_api": 401, "cupy_to_ndarrai": 401, "lda_np": 401, "torch": 401, "x_torch": 401, "y_torch": 401, "power_iteration_norm": [401, 537, 540, 933, 934, 1041], "kernelcenter": [401, 995, 1037, 1041, 1043, 1044], "array_api_compat": 401, "metal": 401, "shader": 401, "m2": 401, "chip": [401, 1009], "77764": 401, "pytorch_enable_mps_fallback": 401, "submatrix": [402, 420, 447, 449], "unusu": [402, 991, 995, 1035], "submatric": 402, "bipartit": [402, 449, 507, 990], "subgraph": 402, "a_n": 402, "lceil": [402, 991], "log_2": [402, 559, 991], "rceil": [402, 991], "bmatrix": 402, "u_2": 402, "u_": [402, 478, 479, 480], "n_column": [402, 447, 449], "inderjit": [402, 449], "spectralbiclust": [402, 449, 1029, 1033, 1034, 1038], "blockwis": [402, 981], "bistochast": [402, 447], "l_": [402, 607, 648, 736, 985], "k_": [402, 415, 612, 615, 617, 620, 769, 995], "u_1": 402, "v_1": 402, "v_2": 402, "v_": [402, 413], "kluger": [402, 447, 509], "yuval": [402, 447], "microarrai": [402, 447, 509, 624, 975], "cap": [402, 405, 750, 985, 1036], "hochreit": [402, 715], "hungarian": [402, 715], "bodenhof": [402, 715], "fabia": [402, 715], "acquisit": [402, 715], "murphi": [403, 639, 978], "discriminatori": 403, "wilk": 403, "tricki": [403, 982], "logit": [403, 415, 654, 655, 981], "f_i": 403, "train_set": 403, "test_set": 403, "disjoint": [403, 405, 406, 433, 700, 726, 750, 752, 982], "platt": [403, 433, 899, 900, 902, 903, 1000], "_i": [403, 412, 976, 981, 985, 989, 1000], "_j": [403, 976], "f_j": [403, 993], "meteorologi": 403, "climatologi": 403, "precipit": 403, "wea": 403, "640": [403, 486, 502, 503, 579, 580, 974], "650": 403, "1990a": 403, "menon": 403, "ak": [403, 1041, 1042], "jiang": [403, 1031, 1038], "xj": 403, "vembu": 403, "ohno": 403, "machado": [403, 718], "kull": [403, 985], "silva": [403, 684, 982, 1038, 1040], "filho": 403, "flach": [403, 985], "mario": [403, 1031, 1033, 1041, 1042, 1043], "w\u00fcthrich": 403, "merz": 403, "actuari": 403, "refurbish": 404, "rough": [404, 991, 1013], "uniti": 404, "lipschitz": [404, 997], "mod": 404, "usecas": 405, "mu_j": 405, "coher": 405, "elong": 405, "lloyd": [405, 439, 443, 445, 455, 1041, 1042], "distant": [405, 688, 705, 988], "sergei": [405, 1029, 1033, 1034, 1035, 1036, 1037], "vassilvitskii": [405, 443, 456], "eighteenth": 405, "siam": [405, 409, 448, 456, 458, 531, 537], "industri": [405, 1005], "predetermin": [405, 982], "scullei": 405, "19th": 405, "exemplar": [405, 436, 450, 1019], "sent": [405, 826], "leftarrow": [405, 989, 999], "foral": [405, 415, 609], "neq": [405, 985, 987, 995], "notin": 405, "hill": [405, 444, 457, 1037], "climb": [405, 444, 457], "maxima": 405, "x_j": [405, 415, 610, 611, 615, 618, 619, 621, 976, 977, 981, 988, 1000, 1001], "dictat": 405, "solvabl": 405, "stella": [405, 448, 458], "jianbo": [405, 448, 458, 687], "shi": [405, 448, 458, 687], "anil": [405, 448, 458], "daml": [405, 448, 458], "victor": [405, 448, 458, 1034, 1037], "minden": [405, 448, 458], "lex": [405, 448, 458], "ying": [405, 448, 458, 1041], "adjac": [405, 410, 448, 458, 581, 582, 631, 687, 691, 939, 982, 988, 1019], "adjacency_matrix": 405, "ulrik": [405, 448, 458, 687], "von": [405, 448, 458, 687, 1005, 1034, 1035], "luxburg": [405, 448, 458, 687], "jitendra": [405, 448, 458, 687], "malik": [405, 448, 458, 687], "walk": [405, 411, 1030], "marina": 405, "meila": 405, "ng": [405, 410, 687, 843, 989, 991, 1038], "jordan": [405, 410, 687, 792, 1037, 1038, 1041, 1042], "yair": [405, 687], "precondit": [405, 448, 458, 691, 1001, 1043], "zhuzhunashvili": [405, 458], "forbid": [405, 412], "macroscop": 405, "occupi": [405, 985], "manhattan": [405, 437, 441, 446, 453, 695, 757, 766, 773, 774, 775, 844, 983, 988, 1031, 1036, 1043], "bisecting_strategi": [405, 439], "largest_clust": [405, 439], "biggest_inertia": [405, 439], "biggest": [405, 408, 410, 439], "steinbach": [405, 1042], "karypi": 405, "vipin": 405, "egin": 405, "minnesota": 405, "june": [405, 982, 1033, 1043], "weblog": 405, "abirami": 405, "mayilvahanan": 405, "emerg": [405, 1009], "ijet": 405, "jian": 405, "xinyu": 405, "gou": 405, "baod": 405, "hebei": 405, "knee": 405, "triangular": [405, 459, 607, 982], "whichev": [405, 412, 442, 540, 557, 558, 629, 646, 650, 652, 660, 678, 679, 693], "conjunct": [405, 590, 800, 816, 818, 819, 820, 821, 824, 952, 975, 981, 1042], "extract_dbscan": 405, "radius_neighbors_graph": [405, 416, 440, 839, 840, 841, 843, 845, 847, 848, 849, 850, 988, 1031, 1036, 1039], "ester": [405, 416, 440], "kriegel": [405, 416, 440, 446, 453, 843, 991], "sander": [405, 416, 440, 442, 446, 453, 843, 991, 1036, 1037], "xu": [405, 408, 416, 440, 999, 1040, 1041, 1044], "portland": [405, 416, 440], "aaai": [405, 416, 440, 832, 987], "revisit": [405, 416, 440], "schubert": [405, 416, 440, 446, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041], "tod": [405, 416, 440], "lj2017": 405, "d_c": 405, "x_p": [405, 981], "d_m": 405, "x_q": 405, "g_": 405, "varepsilon": [405, 999, 1000], "cm2013": 405, "mst": 405, "minimum_cluster_s": 405, "campello": [405, 442], "moulavi": [405, 442], "pei": [405, 1034], "tseng": 405, "cao": 405, "motoda": 405, "pakdd": 405, "lectur": [405, 640, 977, 1004], "7819": [405, 1034], "berlin": [405, 410, 531, 692, 721, 751, 985], "heidelberg": [405, 410, 531, 692, 721, 751, 985], "mcinn": [405, 1033, 1034, 1035, 1037, 1038, 1043], "heali": 405, "icdmw": 405, "max_ep": [405, 446, 451, 453], "nearbi": [405, 988], "cluster_hierarchy_": [405, 446], "planar": 405, "peripheri": 405, "wall": 405, "ankerst": [405, 446, 453], "mihael": [405, 446, 453], "marku": [405, 446, 453, 1035, 1037, 1038, 1039], "breunig": [405, 446, 453, 843, 991], "han": [405, 438, 446, 453, 1027, 1035, 1036, 1040], "j\u00f6rg": [405, 446, 453, 1035], "sigmod": [405, 446, 453, 843, 991], "cft": 405, "lossi": 405, "subclust": [405, 438], "till": [405, 438, 783, 985], "temporarili": [405, 1032], "farthest": 405, "brc": [405, 438], "tian": [405, 438, 1032, 1033, 1034], "raghu": [405, 438], "ramakrishnan": [405, 438], "maron": [405, 438], "livni": [405, 438], "sfu": [405, 438], "coursecentr": [405, 438], "zhang96": [405, 438], "roberto": [405, 438], "perdisci": [405, 438], "jbirch": [405, 438], "java": [405, 438, 1005], "satisfi": [405, 646, 650, 695, 713, 731, 732, 837, 838], "labels_pr": [405, 700, 701, 710, 711, 713, 726, 731, 732, 750, 752, 781, 790], "unadjust": [405, 985, 1039], "swap": [405, 410, 712, 731, 964, 965, 1027], "ri": [405, 701, 781], "c_2": [405, 982], "unord": [405, 412, 995], "esp": [405, 1027], "hubert": [405, 701, 711, 781], "arabi": [405, 701, 711, 781], "steinlei": [405, 701], "psycholog": [405, 701, 712], "agreement": [405, 700, 712, 750, 752, 790, 985], "22504": 405, "10526": 405, "u_i": [405, 478, 479, 480, 750], "v_j": [405, 750, 990], "veb2009": 405, "a_i": 405, "b_j": 405, "yat2016": 405, "average_method": [405, 700, 752, 1035], "vinh": [405, 700], "veb2010": 405, "strehl": 405, "joydeep": 405, "1162": 405, "153244303321897735": 405, "epp": [405, 700], "bailei": [405, 700], "26th": [405, 721, 751, 985], "1553374": 405, "1553511": 405, "9781605585161": 405, "csail": [405, 662, 663, 672, 834], "volume11": 405, "vinh10a": 405, "algesheim": 405, "tesson": 405, "30750": 405, "1038": 405, "srep30750": 405, "rosenberg": [405, 713, 732, 790], "hirschberg": [405, 713, 732, 790], "b2011": 405, "homogeneity_completeness_v_measur": [405, 1036], "n_k": [405, 546], "n_c": [405, 655], "julia": [405, 713, 732, 790], "media": [405, 1009], "hila": 405, "becker": [405, 1009, 1030, 1039], "fowlkes_mallows_scor": [405, 985, 1033, 1035], "fmi": [405, 726], "tp": [405, 708, 714, 726, 777, 778, 779, 782, 909, 985], "fp": [405, 708, 714, 726, 777, 778, 779, 782, 985], "fn": [405, 708, 714, 726, 777, 778, 779, 782, 985, 986], "47140": 405, "fowkl": [405, 726], "1983": [405, 726, 877], "tandfonlin": 405, "01621459": 405, "10478008": 405, "kmeans_model": 405, "1987": [405, 603, 604, 787, 788], "calinski_harabasz_scor": [405, 1035], "561": 405, "n_e": 405, "mathrm": [405, 407, 410, 414, 981, 1001], "b_k": 405, "w_k": [405, 981], "c_q": 405, "n_q": 405, "c_e": 405, "cali\u0144ski": 405, "1974": [405, 413, 706], "dendrit": [405, 706], "davies_bouldin_scor": [405, 1035], "6619": 405, "bould": 405, "c_i": [405, 988], "c_j": [405, 990], "s_i": [405, 981, 995], "diamet": 405, "nonneg": [405, 410, 449, 534, 536, 543, 874], "s_j": 405, "max_": [405, 985], "1979": [405, 720, 764], "halkidi": 405, "batistaki": 405, "yanni": 405, "vazirgianni": 405, "michali": 405, "contingency_matrix": [405, 750, 1035], "pair_confusion_matrix": [405, 1039], "permit": [406, 463, 584, 585, 587, 794, 797, 798, 808, 819, 858, 859, 985, 986, 987, 1033], "clf__c": 406, "pca1": [406, 421], "svm1": 406, "77484909e": 406, "07058917e": 406, "pca2": [406, 421], "svm2": 406, "raw_target_regr": 406, "bypass": [406, 595, 642, 648, 905, 906, 907, 908, 1043], "check_invers": [406, 461, 861, 995, 1035, 1041, 1042], "linear_pca": 406, "make_union": [406, 856, 1030, 1034], "unreli": 406, "citi": [406, 413, 462, 1020], "london": [406, 413, 462], "sallisaw": [406, 462], "bow": 406, "moveabl": 406, "feast": 406, "grape": 406, "wrath": 406, "expert_r": 406, "user_r": 406, "city_categori": 406, "title_bow": 406, "city_london": 406, "city_pari": 406, "city_sallisaw": 406, "507": 406, "301": [406, 999], "ignored_new_col": 406, "shrunk_covari": 407, "sigma_": [407, 640, 641, 1040], "wiesel": [407, 418, 471], "eldar": [407, 418, 471], "hero": [407, 418, 471], "5016": [407, 418, 471], "5029": [407, 418, 471], "_k": [407, 979, 981], "glasso": [407, 474], "biostatist": [407, 474], "uncommon": [407, 654, 897, 1000], "downweight": [407, 532], "driessen": [407, 465, 470, 991], "fastmcd": [407, 465, 470], "raw_location_": [407, 465, 470], "raw_covariance_": [407, 465, 470], "multidimension": [408, 684, 686, 688, 690, 982, 988], "plsw2a": 408, "u_k": [408, 410], "v_k": [408, 410, 527, 533, 541, 542], "x_k": [408, 410, 979, 988], "y_k": [408, 995], "xi_k": 408, "omega_k": [408, 979], "gamma_k": 408, "delta_k": 408, "nipal": [408, 479, 480], "xp": [408, 872], "x_rotations_": [408, 478, 479, 480], "y_rotations_": [408, 478, 479, 480], "ty": 408, "x_weights_": [408, 478, 479, 480, 481], "y_weights_": [408, 478, 479, 480, 481], "yv": 408, "tx": 408, "pls1": [408, 480], "pls2": [408, 480], "tx_k": [408, 979], "ty_k": 408, "ja": [408, 1034], "wegelin": 408, "methodolog": [409, 1008], "academ": [409, 1009], "commerci": [409, 1009], "flowchart": [409, 1013], "f1_macro": [409, 985, 1031], "custom_cv_2fold": 409, "custom_cv": 409, "9333": 409, "scorer1_nam": 409, "scorer2_nam": 409, "return_indic": [409, 820, 1043], "precision_macro": [409, 1015], "recall_macro": [409, 985], "test_precision_macro": 409, "test_recall_macro": 409, "prec_macro": 409, "rec_macro": 409, "test_prec_macro": 409, "test_rec_macro": 409, "train_prec_macro": 409, "train_rec_macro": 409, "undistinguish": 409, "devic": [409, 578, 1005], "kf": [409, 799], "12883823": 409, "rkf": [409, 809], "weigh": [409, 1034], "caveat": [409, 415], "part3": 409, "spector": 409, "submodel": 409, "kohavi": 409, "jnt": 409, "bharat": [409, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "rao": [409, 1039, 1042], "fung": 409, "rosal": 409, "witten": 409, "leavepout": [409, 802, 1015], "ss": 409, "gkf": 409, "sgkf": [409, 812], "suboptim": [409, 696, 698, 777, 784, 988, 1035, 1043], "leavepgroupsout": [409, 796, 1015, 1033], "n_group": [409, 803, 1015, 1033], "lpgo": [409, 803], "gss": [409, 796], "withheld": 409, "predefinedsplit": [409, 1015, 1031], "test_fold": [409, 807], "train_indx": 409, "test_indx": 409, "autocorrel": 409, "superset": [409, 815, 985], "surplu": 409, "tscv": [409, 815], "inbuilt": 409, "some_integ": 409, "n_cv": [409, 433], "isotropi": 410, "alik": [410, 983], "halko": [410, 531, 537, 540, 933, 934], "szlam": [410, 933, 934], "disadvantag": [410, 415, 981, 982, 989, 999, 1000, 1001], "parsimoni": [410, 995], "jen09": 410, "mrl09": 410, "ell_1": [410, 981], "underset": [410, 981, 988, 1001], "operatornam": [410, 736, 981, 985, 1001], "fro": [410, 534, 536, 543, 689, 981], "gentli": 410, "spirit": 410, "mairal": [410, 527, 533], "bach": [410, 527, 532, 533, 534, 654, 981], "ponc": [410, 527, 533], "sapiro": [410, 527, 533], "jenatton": 410, "obozinski": 410, "scholkopf1997": 410, "bakir2003": 410, "smola": [410, 413, 531, 863, 995, 1000], "klau": [410, 531, 863], "eigendecompos": 410, "eigensolv": [410, 448, 458, 531, 540, 691, 982], "eigsh": [410, 531, 1033, 1034], "lehoucq": 410, "sorensen": 410, "lsa": [410, 540, 1029], "synonymi": 410, "polysemi": 410, "lsi": 410, "sigma_k": [410, 979], "columnwis": 410, "sublinear": [410, 586, 587], "use_idf": [410, 413, 586, 587, 1020], "textual": [410, 1001, 1036], "man": [410, 586, 764, 832, 836, 983, 985, 987], "prabhakar": 410, "raghavan": [410, 586, 832, 836, 983, 985, 987], "hinrich": 410, "sch\u00fctze": [410, 586, 983, 985, 987], "transform_method": 410, "split_cod": 410, "dictionarylearn": [410, 533, 535, 536, 538, 539, 540, 541, 542, 1028, 1032, 1034, 1037, 1040, 1041, 1042, 1043], "overcomplet": 410, "mammalian": 410, "cortex": 410, "inpaint": 410, "h_i": [410, 990], "psi": 410, "sim": [410, 1018], "wh_i": 410, "ww": 410, "superflu": 410, "psi_1": 410, "psi_2": 410, "psi_n": 410, "superimpos": 410, "plug": [410, 981, 1009, 1020], "wh": [410, 534, 536, 543], "hoyer": [410, 1030], "nndsvd": [410, 534, 536, 543, 1036, 1039], "nndsvdar": [410, 534, 536, 543, 1036], "elementwis": [410, 534, 536, 543], "_featur": [410, 534, 536, 543], "kl": [410, 982, 1035], "itakura": [410, 534, 536, 543, 1034], "saito": [410, 534, 536, 543, 1034], "w_new": 410, "forget_factor": [410, 534], "lee": [410, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1042], "seung": 410, "boutsidi": 410, "gallopoulo": 410, "cichocki": [410, 534, 536, 543], "phan": 410, "fevott": [410, 534, 536, 543], "idier": [410, 534, 536, 543], "lefevr": [410, 534], "corpora": 410, "hoffman": [410, 532, 1032, 1039], "unshad": 410, "beta_k": 410, "eta": [410, 532, 672, 673, 674, 989, 999, 1032], "topic_word_prior": [410, 532], "theta_d": 410, "doc_topic_prior": [410, 532], "z_": 410, "w_": [410, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 981, 985, 987, 990], "elbo": 410, "overset": [410, 992], "e_": 410, "blei": [410, 532, 792], "wang": [410, 532, 675, 685, 689, 721, 751, 981, 982, 985, 1030, 1032, 1033, 1034, 1035, 1039, 1042, 1043], "paislei": [410, 532], "kaiser": [410, 528], "talli": 411, "disproportion": 411, "41075698": 411, "41076071": 411, "rho_k": 411, "unsmooth": 411, "scott": [411, 842, 1027, 1028, 1033, 1035, 1036, 1037, 1042, 1043], "silvermann": 411, "propto": [411, 987], "2h": 411, "angular": [411, 688, 759], "contin": [411, 710, 995], "semin": 412, "friedman2001": 412, "lightgbm": [412, 557, 558, 1005, 1036, 1043], "8965": 412, "absolute_error": [412, 554, 556, 558, 561, 667, 906, 908, 1040], "grower": [412, 557, 558], "missing": [412, 623, 624, 626, 1036], "fisher1958": 412, "loan": [412, 530, 981, 1009], "mayer2022": 412, "mayer": [412, 1039, 1041], "bourassa": 412, "hoesli": 412, "scognamiglio": 412, "valuat": 412, "tianqi": 412, "guestrin": 412, "ke": [412, 1038, 1039], "boostingdecis": 412, "913": [412, 555], "nr": 412, "f_m": 412, "h_m": 412, "f_": [412, 631, 985], "l_m": 412, "taylor": [412, 1035, 1037, 1038, 1041], "g_i": [412, 645], "sum_m": 412, "softmax": [412, 557, 654, 655, 981, 988, 989], "superior": 412, "ineffici": [412, 439, 570, 825, 826, 988, 990], "htf": 412, "r2007": 412, "friedman2002": 412, "1189": 412, "1232": 412, "b1998": 412, "decoupl": [412, 987], "cancel": [412, 413, 758], "b2001": 412, "bear": [412, 1005], "geurt": [412, 551, 552, 553, 554, 562, 907, 908], "ernst": [412, 553, 554, 562, 907, 908], "wehenkel": [412, 553, 554, 562, 907, 908], "l2014": 412, "lieg": 412, "flavour": 412, "b1999": 412, "b1996": 412, "h1998": 412, "lg2012": 412, "bootstrap_featur": [412, 551, 552], "844": [412, 551, 552], "w2": 412, "w3": 412, "lr__c": 412, "rf__n_estim": 412, "w1992": 412, "knr": 412, "stack_method": [412, 563], "225": 412, "126": 412, "164": 412, "stack_method_": [412, 563, 564], "final_layer_rfr": 412, "final_layer_gbr": 412, "final_lay": 412, "multi_layer_regressor": 412, "wolpert": [412, 563, 564], "241": [412, 563, 564], "freund": [412, 549, 550], "fs1995": 412, "w_1": [412, 981, 989], "w_2": [412, 981, 989], "w_n": 412, "w_i": [412, 976, 985], "reappli": 412, "zzrh2009": 412, "d1997": 412, "dubai": 413, "francisco": [413, 997], "movi": [413, 1012], "movie_entri": 413, "thriller": [413, 868], "drama": 413, "000e": 413, "003e": 413, "011e": 413, "974e": 413, "unseen_featur": [413, 577], "speech": [413, 985], "chunker": 413, "pos_window": 413, "pos_vector": 413, "1x6": 413, "part_of_speech": 413, "token_featur": 413, "isupp": 413, "uppercase_initi": 413, "all_uppercas": 413, "raw_x": [413, 578], "pos_tagg": 413, "murmurhash3": [413, 578, 585, 950], "weinberg": 413, "modulo": [413, 1038], "kilian": [413, 1042, 1043], "anirban": 413, "dasgupta": [413, 442, 891, 997], "langford": [413, 684, 982], "josh": [413, 1034], "attenberg": 413, "multitask": [413, 986], "punctuat": [413, 584, 585, 587], "diminish": 413, "4x9": 413, "build_analyz": [413, 584, 585, 587, 1037], "interrog": 413, "bigram_vector": 413, "cool": [413, 1027], "feature_index": 413, "him": 413, "constru": 413, "nqy18": 413, "smooth_idf": [413, 586, 587], "_n": [413, 985], "textbook": [413, 586], "6x3": 413, "81940995": 413, "57320793": 413, "47330339": 413, "88089948": 413, "58149261": 413, "81355169": 413, "term1": 413, "term2": 413, "term3": 413, "0986": [413, 861], "819": 413, "573": 413, "8473": 413, "8515": [413, 1034], "5243": 413, "85151335": 413, "52433293": 413, "55422893": 413, "83236428": 413, "63035731": 413, "77630514": 413, "idf_": [413, 586, 587, 1035], "western": 413, "europ": [413, 995], "koi8": 413, "russian": 413, "unicodedecodeerror": [413, 584, 585, 587], "told": 413, "troubleshoot": [413, 1003], "chardet": 413, "chardetect": 413, "damag": 413, "sloppili": 413, "ftfy": 413, "mish": 413, "mash": 413, "text1": 413, "sei": 413, "mir": 413, "gegr": 413, "xc3": 413, "xbc": 413, "x9ft": 413, "mein": 413, "sauerkraut": 413, "text2": 413, "holdselig": 413, "sind": 413, "dein": 413, "ger": 413, "xfcche": 413, "text3": 413, "xff": 413, "xfea": 413, "x00u": 413, "x00f": 413, "x00": 413, "x00l": 413, "xfc": 413, "x00g": 413, "x00e": 413, "x00n": 413, "x00d": 413, "x00a": 413, "x00h": 413, "x00r": 413, "x00z": 413, "x00i": 413, "x00b": 413, "x00c": 413, "x00t": 413, "x00o": 413, "spolski": 413, "nnmf": [413, 1021, 1022, 1027], "phrase": 413, "misspel": 413, "rescu": 413, "resili": 413, "wprd": 413, "ngram_vector": 413, "char_wb": [413, 584, 585, 587], "rd": 413, "wo": 413, "wp": [413, 653, 667], "char": [413, 584, 585, 587, 1027], "jumpi": 413, "fox": [413, 1043], "1x4": 413, "umpi": 413, "1x5": 413, "mpy": 413, "fo": 413, "paragraph": [413, 499, 1020], "barrier": 413, "hv": 413, "4x10": 413, "discrep": [413, 1020, 1031], "4x1048576": 413, "collid": 413, "ingest": 413, "spend": 413, "my_token": 413, "lowercas": [413, 421, 438, 439, 441, 443, 445, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 584, 585, 587, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 858, 863, 889, 890, 1040], "lucen": 413, "build_preprocessor": [413, 584, 585, 587, 1037], "whitespac": 413, "fanci": 413, "lemmat": 413, "nltk": [413, 1004, 1005], "word_token": 413, "wordnetlemmat": 413, "lemmatoken": 413, "wnl": 413, "british": 413, "spell": 413, "to_british": 413, "1or": 413, "bt": 413, "1er": 413, "ing": 413, "ation": 413, "1z": 413, "ogu": 413, "og": 413, "customvector": 413, "asian": 413, "one_imag": [413, 580], "fake": 413, "assert_array_equ": 413, "patchextractor": [413, 1043], "five_imag": 413, "variancethreshold": [414, 862, 975, 1030, 1037, 1040, 1043], "selectfdr": [414, 588, 592, 594, 595, 596, 602, 1031, 1033, 1034, 1043], "selectfw": [414, 588, 591, 592, 595, 596, 602, 1043], "genericunivariateselect": [414, 591, 592, 594, 595, 596, 598, 1041, 1043], "r_regress": [414, 602, 1040, 1041, 1044], "nonparametr": [414, 415, 603, 604], "bewar": 414, "importance_gett": [414, 589, 590, 593, 1039], "unimport": 414, "lsvc": 414, "baraniuk": 414, "isr": 414, "ist": 414, "utl": 414, "aguiar": 414, "cs_note": 414, "ferri": [414, 985], "versatil": [415, 1000, 1009], "optima": 415, "markov": [415, 607, 990, 1005, 1027], "nuisanc": 415, "one_vs_on": [415, 606, 986], "ingredi": 415, "duv2014": 415, "theta_l": 415, "x_bound": [415, 613], "operand": 415, "k1__": 415, "k2__": 415, "constant_valu": [415, 609, 613], "constant_value_bound": [415, 607, 609, 613], "k1__k1__constant_valu": 415, "value_typ": [415, 613], "n_element": [415, 613], "k2__length_scal": 415, "k1": [415, 617, 620], "k1__k1": 415, "k1__k1__constant_value_bound": 415, "k1__k2": 415, "k1__k2__length_scale_bound": 415, "k2": [415, 617, 620], "k2__length_scale_bound": 415, "69314718": [415, 608, 995], "30258509": 415, "interoper": [415, 1003, 1006, 1022], "pairwisekernel": 415, "_valu": [415, 609], "_level": [415, 621], "k_1": [415, 617, 620], "k_2": [415, 617, 620], "__add__": [415, 620], "__mul___": 415, "__pow__": [415, 612], "2l": [415, 618], "bigg": [415, 615], "bessel": [415, 615], "rightarrow": [415, 615, 989], "quad": [415, 988, 999], "tfrac": 415, "3l": 415, "pp84": 415, "x_d": [415, 610], "inhomogen": [415, 610], "expon": [415, 612, 672, 673, 674, 806, 854, 855, 872, 974], "carl": [415, 606, 607, 610, 615, 618], "rasmussen": [415, 606, 607, 610, 615, 618], "duvenaud": [415, 618, 619], "cookbook": [415, 618, 619], "minkowski": [416, 440, 446, 453, 684, 695, 773, 774, 775, 837, 838, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 988, 1027, 1030, 1041, 1042, 1043], "metric_param": [416, 440, 442, 446, 453, 684, 688, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 1031, 1034, 1041], "leaf_siz": [416, 440, 442, 446, 453, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849], "kd_tree": [416, 440, 442, 446, 453, 684, 685, 839, 840, 841, 842, 843, 845, 847, 848, 849, 988, 1040, 1044], "balltre": [416, 440, 442, 446, 453, 684, 685, 695, 839, 840, 841, 842, 843, 845, 847, 848, 849, 982, 1027, 1029, 1031, 1035, 1040, 1043, 1044], "ckdtree": [416, 440, 1029], "inhibit": [416, 440], "core_sampl": 416, "n_core_sampl": [416, 440], "attract": [416, 440, 979, 988, 1005], "fun": [417, 529, 1009], "logcosh": [417, 529], "fun_arg": [417, 529], "w_init": [417, 529], "whiten_solv": [417, 529, 1042], "return_x_mean": 417, "compute_sourc": 417, "return_n_it": [417, 450, 455, 474, 541, 542, 642, 643, 648, 649, 656, 657, 658, 659, 677, 678, 679, 680, 681, 682, 683, 690, 1041], "cube": [417, 529], "my_g": [417, 529], "x_mean": 417, "AS": 417, "fortran": [417, 537, 642, 643, 648, 649, 656, 657, 658, 659, 661, 677, 680, 681, 682, 917, 918, 1027, 1030, 1031, 1035], "hyvarinen": [417, 529], "oja": [417, 529], "430": [417, 529], "shrunk_cov": [418, 475, 477], "eq": [418, 471, 717, 718, 719], "subobject": [419, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 577, 578, 579, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 792, 793, 794, 797, 798, 808, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908], "row_ind": [420, 447, 449], "intp": [420, 447, 449], "col_ind": [420, 447, 449], "get_submatrix": [420, 447, 449], "pca0": 421, "_n_features_out": 421, "class_name0": [421, 438, 439, 441, 443, 445, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 863, 889, 890], "class_name1": [421, 438, 439, 441, 443, 445, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 863, 889, 890], "class_name2": [421, 438, 439, 441, 443, 445, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 863, 889, 890], "feature_names_out": [421, 426, 438, 439, 441, 443, 445, 460, 478, 479, 480, 481, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 562, 563, 564, 565, 566, 577, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 623, 624, 625, 626, 631, 634, 635, 636, 637, 638, 684, 685, 688, 841, 846, 849, 853, 856, 857, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 889, 890, 1041], "harsh": [422, 433, 465, 545, 546, 547, 549, 551, 553, 555, 557, 560, 563, 565, 606, 654, 662, 664, 670, 671, 672, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 844, 847, 854, 892, 893, 897, 899, 902, 905, 907, 1037, 1039, 1042], "n_samples_fit": [428, 461, 478, 479, 480, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 684, 830, 831, 839, 840, 841, 843, 845, 847, 848, 849, 855, 898, 900, 903, 906, 908], "uniform_averag": [428, 461, 478, 479, 480, 550, 552, 554, 556, 558, 561, 564, 566, 607, 631, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 663, 666, 668, 669, 674, 675, 717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 785, 786, 830, 831, 840, 848, 855, 898, 900, 903, 906, 908, 985, 1036], "n_features_new": [429, 438, 441, 528, 530, 532, 533, 535, 538, 539, 545, 563, 565, 566, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 624, 626, 631, 634, 635, 636, 637, 638, 846, 853, 860, 861, 862, 863, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 889, 890], "base_clf": 433, "calibrated_clf": 433, "927": 433, "x_calib": 433, "y_calib": 433, "prob_tru": [434, 435], "prob_pr": [434, 435], "ref_lin": 434, "alexandru": 435, "22nd": 435, "convergence_it": [436, 450], "hardcod": [436, 450, 1035], "affinity_matrix_": [436, 448, 687], "cluster_center_indic": [436, 450], "compute_full_tre": [437, 441, 1031], "compute_dist": [437, 441, 1039], "inferior": [437, 441, 1038], "n_leaves_": [437, 441], "n_connected_components_": [437, 441, 1036], "branching_factor": 438, "compute_label": [438, 445], "promot": [438, 704, 1005, 1038, 1040], "redistribut": 438, "overwritten": [438, 528, 529, 530, 532, 537, 544, 603, 604, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 668, 670, 675, 677, 678, 679, 680, 682, 953, 955, 1040], "root_": 438, "_cfnode": 438, "cftree": 438, "dummy_leaf_": 438, "subcluster_labels_": 438, "centroids_": [438, 442, 844], "copy_x": [439, 443, 455, 531, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 668, 670, 675, 677, 678, 679, 680, 681, 1029, 1035, 1036], "k_init": [439, 455], "sse": 439, "bisect_mean": 439, "denser": 440, "pooling_func": [441, 1035], "xred": [441, 1043], "cluster_selection_epsilon": 442, "max_cluster_s": 442, "cluster_selection_method": 442, "eom": 442, "store_cent": 442, "kdtree": [442, 446, 453, 684, 685, 837, 839, 840, 841, 842, 843, 845, 847, 848, 849, 1029, 1031, 1035, 1039, 1040, 1043, 1044], "neighbour": [442, 458, 688, 990], "medoid": 442, "overwrit": [442, 492, 627, 1011, 1027, 1038, 1043], "medoids_": 442, "zimek": 442, "chaudhuri": 442, "jaskowiak": 442, "malzer": 442, "baum": 442, "hybrid": [442, 645, 1005], "dbscan_clust": 442, "border": [442, 1037], "unclust": 442, "socg2006": 443, "min_bin_freq": [444, 457], "cluster_al": [444, 457], "get_bin_se": 444, "orphan": [444, 457, 1027], "reassignment_ratio": 445, "eec": [445, 637], "tuft": 445, "dscullei": 445, "fastkmean": 445, "55102041": 445, "48979592": 445, "06896552": 445, "set_partial_fit_request": [445, 530, 534, 662, 663, 664, 672, 673, 674, 825, 826, 829, 830, 832, 833, 834, 835, 836, 854, 877], "cluster_method": 446, "predecessor_correct": [446, 452], "unprocess": [446, 584, 585, 587], "heap": 446, "braycurti": [446, 453, 695, 773, 774, 775, 988], "canberra": [446, 453, 695, 773, 774, 775, 988], "chebyshev": [446, 453, 695, 773, 774, 775, 988], "dice": [446, 453, 695, 773, 774, 775, 988], "kulsinski": [446, 453, 695, 773, 774, 775], "rogerstanimoto": [446, 453, 695, 773, 774, 775, 988], "russellrao": [446, 453, 695, 773, 774, 775, 988], "seuclidean": [446, 453, 695, 773, 774, 775, 844, 988, 1035, 1038, 1039], "sokalmichen": [446, 453, 695, 773, 774, 775, 988], "sokalsneath": [446, 453, 695, 773, 774, 775, 988], "yule": [446, 453, 773, 774, 775], "manhattan_dist": [446, 453, 684, 757, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 1027, 1037, 1042, 1043], "minkowski_dist": [446, 453, 684, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851], "l_p": [446, 453, 684, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851], "upward": [446, 452], "successor": [446, 452, 1001, 1005], "predecessor_": [446, 453], "erich": [446, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041], "gertz": 446, "lernen": 446, "wissen": 446, "daten": [446, 1035, 1036], "analysen": 446, "lwda": 446, "318": 446, "n_best": 447, "n_svd_vec": [447, 449], "mini_batch": [447, 449], "n_row_clust": [447, 449, 509], "n_column_clust": [447, 449, 509], "ncv": [447, 449], "n_oversampl": [447, 449, 537, 540, 934, 1041], "kernel_param": [448, 531, 635, 639], "precomputed_nearest_neighbor": [448, 687], "eigen": [448, 545, 669, 687, 691, 979, 1033, 1036], "dist_matrix": 448, "csc_matrix": [448, 553, 554, 559, 560, 561, 562, 874, 905, 906, 907, 908, 975, 995, 1001, 1032], "best_n_it": 455, "n_local_tri": 456, "n_seed": 457, "multigrid": 458, "eigendecomposit": [458, 669, 687, 691, 863], "multiscal": 458, "preliminari": 458, "heapq": 459, "topolog": [459, 1005], "n_connected_compon": 459, "n_leav": [459, 905, 906, 907, 908], "transformers_": [460, 1044], "remaining_column": 460, "named_transformers_": 460, "sparse_output_": [460, 547], "output_indices_": [460, 1040], "datatyp": [460, 462, 1034, 1037], "norm1": 460, "norm2": 460, "text_preprocess": 460, "num_preprocess": 460, "x_t": [460, 623, 856], "sum_n_compon": [460, 856], "notimplementederror": [461, 468, 549, 550, 551, 552, 563, 564, 565, 566, 589, 590, 598, 623, 667, 669, 671, 856, 884, 894, 1034, 1044], "y_hat": 461, "90453403": 462, "50755672": 462, "30151134": 462, "print_changed_onli": [464, 895, 1036, 1038, 1039], "pairwise_dist_chunk_s": [464, 895], "enable_cython_pairwise_dist": [464, 895], "skip_parameter_valid": [464, 895, 1043], "cache_s": [464, 895, 899, 900, 901, 902, 903, 1000], "get_config": [464, 776, 895, 952, 1042], "offset_": [465, 559, 673, 843, 901, 1035], "raw_support_": [465, 470], "dist_": [465, 470], "true_cov": [465, 467, 468], "7411": [465, 470, 1033], "2535": [465, 470], "3053": [465, 470], "0813": [465, 470], "correct_covari": [465, 470], "rvd": [465, 470], "covariance_correct": [465, 470], "comp_cov": [465, 466, 467, 468, 469, 470, 471, 472], "get_precis": [465, 466, 467, 468, 469, 470, 471, 472, 528, 530, 537], "getter": [465, 466, 467, 468, 469, 470, 471, 472, 589, 590, 593], "is_inli": [465, 559, 843], "reweight_covari": [465, 470], "rvdriessen": [465, 470], "location_reweight": [465, 470], "covariance_reweight": [465, 470], "support_reweight": [465, 470], "negative_mahal_dist": 465, "7569": 466, "2818": 466, "3928": 466, "0622": [466, 472], "0193": [466, 472], "enet_tol": [467, 468, 474, 1032], "220446049250313e": [467, 468, 474, 646, 647, 650, 651, 652, 678, 679], "graphlasso": [467, 1032, 1035], "costs_": [467, 468, 1043], "dual_gap": [467, 468, 474, 642, 643, 648, 649, 656, 657, 658, 659, 677, 680], "return_cost": [467, 468, 474], "049": 467, "034": 467, "038": [467, 468, 854], "n_refin": 468, "graphlassocv": [468, 1029, 1035], "dualiti": [468, 981], "051": 468, "094": 468, "block_siz": [469, 475, 476, 1031], "4406": 469, "1616": 469, "0595": 469, "0075": [469, 537], "rouseeuw1984": 470, "butlerdavi": 470, "butler": [470, 1030, 1038, 1039], "davi": [470, 720, 985, 1031], "jhun": 470, "1385": 470, "7533": [471, 1034], "2763": 471, "3964": 471, "7833": 471, "2431": 471, "3889": 471, "0195": 471, "7387": 472, "2536": 472, "4110": 472, "cov_init": [474, 1043], "graph_lasso": [474, 1035], "x_loadings_": [478, 479, 480], "y_loadings_": [478, 479, 480], "plssvd": [478, 479, 1007, 1022, 1039, 1041], "x_c": [478, 479, 481, 992], "y_c": [478, 479, 481], "y_reconstruct": [478, 479, 480], "x_scores_": [480, 1039], "y_scores_": [480, 1039], "y_transform": 481, "data_hom": [482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 1034, 1043], "zero_bas": [483, 504, 505], "query_id": [483, 504, 505], "grok": 483, "qid": [483, 504, 505, 1028, 1033], "download_if_miss": [484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 1034], "stopword": [485, 1020], "target_column": [485, 486, 492], "494021": 488, "slice_": [489, 490, 1042], "unrestrict": 489, "2914": 490, "5748": 490, "pathlik": [492, 1043], "n_retri": [492, 1041], "read_csv_kwarg": [492, 1043], "timeout": [492, 951, 1041], "ith": [492, 769, 773, 833, 854, 855, 870, 871], "1592": 494, "1212": 494, "1624": 494, "620": 494, "data_filenam": [497, 501], "target_filenam": [497, 501], "container_path": 499, "load_cont": 499, "allowed_extens": 499, "container_fold": 499, "category_1_fold": 499, "file_1": 499, "file_2": 499, "file_42": 499, "category_2_fold": 499, "file_43": 499, "file_44": 499, "image_nam": 502, "first_img_data": 503, "backup": [504, 1027], "instantan": 504, "mycach": 504, "get_data": 504, "mysvmlightfil": 504, "xn": 505, "yn": [505, 986, 987], "q1": 505, "qn": 505, "yi": [505, 987, 1031, 1035, 1036, 1039], "qi": [505, 1039], "triplet": 505, "minval": [507, 509], "maxval": [507, 509], "seventh": [507, 997], "269": 507, "274": 507, "return_cent": [508, 1038], "basri": 509, "gerstein": 509, "716": 509, "flip_i": 511, "interdepend": 511, "polytop": 511, "guyon": [511, 589, 590, 985], "madelon": 511, "1991": [512, 513, 514], "12000": 516, "effective_rank": [517, 520], "tail_strength": [517, 520], "bell": [517, 1035, 1037, 1039, 1040], "fat": [517, 520], "crawl": [517, 926], "return_ind": 519, "4967": 520, "1382": 520, "6476": 520, "523": 520, "2341": 520, "4694": 520, "5425": 520, "579": 520, "7674": [520, 1034], "4017": 520, "data_transpos": [522, 1041, 1043], "norm_diag": 523, "sparse_format": [523, 1044], "make_spd_matrix": 523, "celeux": 524, "el": [524, 1040, 1042, 1043], "anbari": 524, "marin": 524, "frequentist": 524, "n_dim": [525, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "marsland": 526, "vuw": 526, "nz": 526, "marslast": 526, "ch6": 526, "code_init": [527, 541], "dict_init": [527, 533, 541, 542], "callback": [527, 533, 535, 541, 542, 846, 951, 1006, 1043], "split_sign": [527, 533, 538], "transform_max_it": [527, 533, 534, 538, 1037], "_fro": [527, 533, 541, 542, 642, 643, 648, 656, 657, 658, 677], "lasso_cd": [527, 533, 538, 544], "error_": [527, 539], "minibatchsparsepca": [527, 529, 533, 536, 538, 539, 541, 542, 1027, 1028, 1038, 1040, 1041, 1042, 1043], "sierra": [527, 533], "icml09": [527, 533], "x_hat": [527, 533], "noise_variance_init": 528, "quartimax": [528, 1039], "loglike_": 528, "barber": 528, "bishop": [528, 530, 537, 736, 792, 981, 986, 1000], "get_covari": [528, 530, 537], "unmixing_matrix": 529, "whitening_": 529, "kpca": [529, 530, 531, 1021, 1022, 1027], "set_inverse_transform_request": [529, 577, 864, 877], "unsaf": 530, "singular_values_": [530, 537, 540, 1034], "var_": [530, 835, 877, 1040], "miketip": [530, 537], "mppca": [530, 537], "n_samples_seen_": [530, 866, 867, 877, 1035], "batch_size_": 530, "ross": [530, 603, 604, 1001, 1041, 1042], "vision": [530, 753, 754, 977, 981, 983, 1001, 1005, 1009, 1028], "toronto": [530, 640, 853], "dross": 530, "ivt": 530, "rosslimlinyang_ijcv": 530, "karhunen": 530, "loev": 530, "levi": [530, 1034], "lindenbaum": 530, "1371": 530, "1374": 530, "abstain": 530, "holub": 530, "opportun": [530, 999], "golub": [530, 835, 877], "x_spars": [530, 956, 959], "sigma2": [530, 537], "x_origin": [530, 535, 537, 539, 540, 626, 889, 890], "check_input": [530, 544, 642, 643, 648, 656, 657, 658, 677, 683, 905, 906, 907, 908, 1035], "remove_zero_eig": [531, 1029, 1036], "x_fit_": [531, 639], "eigenvalues_": [531, 1040], "eigenvectors_": [531, 1040], "dual_coef_": [531, 639, 899, 900, 901, 902, 903, 1000, 1031], "x_transformed_fit_": 531, "gamma_": [531, 1043], "nathan": [531, 1035, 1039, 1042], "gunnar": [531, 934], "tropp": [531, 537], "vladimir": [531, 934, 981, 1037, 1041], "rokhlin": [531, 537, 934], "tygert": [531, 537, 934], "learning_decai": 532, "evaluate_everi": 532, "perp_tol": 532, "mean_change_tol": 532, "max_doc_update_it": 532, "kappa": [532, 712], "tau_0": 532, "pseudocount": [532, 1035], "exp_dirichlet_component_": 532, "n_batch_iter_": 532, "bound_": 532, "doc_topic_prior_": 532, "topic_word_prior_": 532, "franci": [532, 654, 981, 1033], "onlineldavb": 532, "chong": 532, "00360392": 532, "25499205": 532, "0036211": 532, "64236448": 532, "09541846": 532, "15297572": 532, "00362644": 532, "44412786": 532, "39568399": 532, "003586": 532, "vb": 532, "sub_sampl": 532, "doc_topic_distr": [532, 1034], "fresh_restart": 534, "fresh_restarts_max_it": 534, "_w": [534, 536, 543], "_ratio": [534, 536, 543], "_h": [534, 536, 543], "fresh": [534, 1006, 1037], "reconstruction_err_": [534, 536], "andrzej": [534, 536, 543], "anh": [534, 536, 543], "ieic": [534, 536, 543], "708": [534, 536, 543, 745], "721": [534, 536, 543], "waspa": 534, "ridge_alpha": [535, 539, 1034], "500x500": 537, "lu": [537, 540, 933, 934, 1033, 1034, 1035, 1036, 1043], "n_samples_": 537, "royal": [537, 623, 873, 885, 999], "methodologi": [537, 870, 975, 985, 1009], "622": 537, "9924": 537, "30061": 537, "54980": 537, "00755": 537, "99244": 537, "ascontiguousarrai": 537, "sparse_encod": [538, 646, 647, 648, 649, 650, 651, 652, 659, 660, 661, 678, 679, 680, 681, 682, 1027, 1034, 1035, 1037, 1041], "u_init": 539, "v_init": 539, "9666": 539, "oversampl": [540, 1027], "indeterminaci": 540, "x_dens": 540, "0157": 540, "0512": 540, "0499": 540, "0479": 540, "0453": 540, "2102": 540, "2410": 540, "5981": 540, "5420": 540, "4486": 540, "3288": 540, "method_max_it": [541, 542, 1037], "dict_learning_onlin": [541, 1028, 1037, 1040, 1041], "return_cod": 542, "iter_offset": [542, 1041], "return_inner_stat": [542, 1041], "inner_stat": [542, 1041], "update_h": 543, "_n_compon": 543, "hal": [543, 654, 753, 754, 983], "copy_cov": 544, "orthogonal_mp": [544, 660, 661, 682, 981], "sum_k": [545, 1001], "prior_k": 545, "c_k": 545, "priors_": [545, 546], "scalings_": [545, 546], "xbar_": 545, "reg_param": 546, "scaling_": 546, "colinear": 546, "rotations_": 546, "n_classes_": [547, 549, 551, 553, 555, 560, 606, 825, 826, 905, 907, 1028, 1037, 1039], "class_prior_": [547, 835], "n_outputs_": [547, 548, 553, 554, 560, 561, 562, 854, 855, 905, 906, 907, 908], "constant_": 548, "dummy_regr": 548, "base_estimator_": [549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 606, 894, 1042], "dok": [549, 550, 864, 1040], "staged_decision_funct": [549, 555, 557], "staged_scor": [549, 550], "7972": 550, "9771": 550, "estimators_samples_": [551, 552, 559, 1033, 1035, 1038], "estimators_features_": [551, 552, 559], "oob_decision_function_": [551, 553, 560], "oob_prediction_": [552, 554, 561], "8720": [552, 1035], "min_weight_fraction_leaf": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 1001, 1030, 1033, 1034], "min_impurity_decreas": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908, 1001, 1034], "shannon": [553, 560, 905, 907, 982, 1001], "unlimit": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "n_t": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "n_t_r": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "right_impur": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "n_t_l": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "left_impur": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "balanced_subsampl": [553, 560, 1035], "subtre": [553, 554, 555, 556, 560, 561, 905, 906, 907, 908, 1001], "extratreeclassifi": [553, 562, 908, 986, 1031, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "unprun": [553, 554, 560, 561, 905, 906, 907, 908], "x_leav": [553, 554, 555, 556, 560, 561, 562, 905, 906, 907, 908], "n_nodes_ptr": [553, 554, 560, 561, 562], "friedman_ms": [554, 555, 556, 561, 906, 908, 1001, 1043, 1044], "extratreeregressor": [554, 559, 562, 907, 991, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "2727": 554, "dummyestim": [555, 556], "eras": [555, 556, 642, 648, 654, 656, 658, 662, 663, 664, 672, 673, 674, 854, 855], "n_trees_per_iteration_": [555, 556, 557, 558], "oob_scores_": [555, 556, 1043], "init_": [555, 556], "max_features_": [555, 556, 593, 905, 906, 907, 908, 1041], "_fit_stag": [555, 556], "crossentropi": 557, "deepest": [557, 558, 1038], "no_interact": [557, 558, 1042], "do_early_stopping_": [557, 558], "validation_score_": [557, 558], "is_categorical_": [557, 558], "n_trees_per_iter": 557, "max_samples_": 559, "fei": [559, 991], "ting": [559, 991, 1035, 1036], "ming": [559, 991, 1031, 1035, 1036, 1037, 1041], "zhou": [559, 635, 893, 991, 1035, 1043], "zhi": [559, 991], "hua": [559, 991], "icdm": [559, 991], "eighth": [559, 991], "tkdd": 559, "n_left": 559, "32987858": 561, "n_out": 562, "one_hot_encoder_": 562, "moosmann": 562, "trigg": 562, "juri": 562, "random_tre": 562, "x_sparse_embed": 562, "randomtreesembedding_": 562, "final_estimator_": [563, 564], "named_estimators_": [563, 564, 565, 566, 1035, 1037], "named_estim": [563, 564, 565, 566], "parameter_nam": [563, 564, 565, 566], "new_valu": [563, 564, 565, 566], "linearsvr": [564, 903, 1000, 1031, 1033, 1038, 1043], "flatten_transform": [565, 1034], "le_": 565, "eclf1": 565, "array_equ": [565, 1034], "eclf2": 565, "eclf3": 565, "maj": 565, "probabilities_or_label": 565, "n_regressor": 566, "r1": 566, "r3": 566, "er": 566, "with_traceback": [567, 568, 569, 570, 571, 572, 573, 574], "__traceback__": [567, 568, 569, 570, 571, 572, 573, 574], "current_sklearn_vers": 572, "repr": [573, 1038, 1039, 1041], "linter": 575, "flake8": 575, "spam": [577, 705, 736, 832, 985, 987, 1009], "feature_names_": 577, "xa": 577, "dict_typ": 577, "conform": [577, 624, 825, 826, 985, 1005, 1006, 1034, 1040], "1048576": [578, 585], "non_neg": [578, 1034], "eleph": 578, "bird": [578, 714, 749, 985], "patch_height": [579, 580, 583], "patch_width": [579, 580, 583], "img_height": 579, "img_width": 579, "pe": 579, "pe_tran": 579, "263758": 579, "image_height": [579, 580, 583], "image_width": [579, 580, 583], "n_channel": [579, 580, 583], "n_patch": [579, 580, 583], "272214": 580, "243": 580, "215": 580, "n_z": 581, "return_a": [581, 582, 951, 1030], "_coo": [581, 582], "image_s": 583, "strip_acc": [584, 585, 587], "nfkd": [584, 585, 587, 1037], "unicodedata": [584, 585, 587], "regexp": [584, 585, 587], "min_n": [584, 585, 587, 1027], "max_n": [584, 585, 587, 1027], "fixed_vocabulary_": [584, 587], "stop_words_": [584, 587], "delattr": [584, 587, 1039], "vectorizer2": 584, "raw_docu": [584, 587], "get_stop_word": [584, 585, 587], "x_inv": [584, 587], "con": 585, "yates2011": 586, "baeza": [586, 725, 1030], "yate": [586, 725], "ribeiro": [586, 725, 1040], "neto": [586, 725], "addison": [586, 725], "weslei": [586, 725], "mrs2008": 586, "118": 586, "tfid": 586, "22314355": 586, "51082562": 586, "91629073": 586, "_check_stop_list": 587, "pvalu": [588, 591, 592, 594, 595, 596, 822], "k_best": [588, 894, 998], "fdr": 588, "fwe": 588, "iff": [588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 868], "retent": [588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "n_selected_featur": [588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "n_original_featur": [588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "attrgett": [589, 593], "barnhil": [589, 590], "vapnik": [589, 590], "389": [589, 590, 1020], "422": [589, 590, 721, 751, 985], "n_subsets_of_featur": 590, "narrai": 590, "benjamini": [591, 1033, 1034], "hochberg": [591, 1033, 1034], "false_discovery_r": 591, "norm_ord": [593, 1034], "threshold_": [593, 1034], "3252": 593, "8345": 593, "4976": 593, "55249": 593, "half_cal": 593, "half_selector": 593, "partial_fit_param": [593, 825, 826, 829, 830], "unspecifi": [595, 596, 796, 982], "_get_support_mask": 597, "n_features_to_select_": 598, "variances_": 599, "weed": 600, "p_valu": [600, 601, 602], "f_statist": [601, 602], "force_finit": [602, 605, 723, 780, 985, 1041], "pearson": [602, 605, 1040], "discrete_featur": [603, 604], "essenc": [603, 604, 738, 982, 985], "kraskov": [603, 604], "stogbauer": [603, 604], "grassberg": [603, 604], "phy": [603, 604], "kozachenko": [603, 604], "leonenko": [603, 604], "probl": [603, 604], "peredachi": [603, 604], "correlation_coeffici": 605, "fmin_l_bfgs_b": [606, 607], "max_iter_predict": 606, "copy_x_train": [606, 607], "one_vs_rest": [606, 986], "compoundkernel": [606, 1041], "obj_func": [606, 607], "initial_theta": [606, 607], "theta_opt": [606, 607], "func_min": [606, 607], "_posterior_mod": 606, "log_marginal_likelihood_value_": [606, 607], "9866": [606, 615, 618], "83548752": 606, "03228706": 606, "13222543": 606, "79064206": 606, "06525643": 606, "14410151": 606, "clone_kernel": [606, 607, 1037], "n_kernel_param": [606, 607], "log_likelihood_gradi": [606, 607], "x_train_": 607, "y_train_": 607, "3680": [607, 610, 621], "592": [607, 610, 621, 992], "y_cov": 607, "n_samples_x": [607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 769, 770, 771, 772, 773, 774, 775, 776], "requires_vector_input": [608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "51292546": 608, "09861229": [608, 995], "n_samples_i": [608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 769, 770, 771, 772, 773, 774, 775, 776], "n_kernel": 608, "k_gradient": [608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621], "k_diag": [608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621], "hyperparameter_constant_valu": 609, "3696": 609, "606": [609, 827, 986], "hyperparameter_sigma_0": 610, "edward": [610, 615, 618, 1030, 1035, 1036, 1037, 1038, 1042], "hyperparameter_length_scal": [611, 615, 618, 619], "hyperparameter_period": 611, "0144": 611, "457": 611, "3894": 611, "3467": 611, "559": 612, "namedtupl": [613, 943, 1043], "maxsiz": 613, "mat\u00e9rn": 615, "appr": 615, "8513": 615, "0368": 615, "1117": 615, "8086": [615, 1034], "0693": 615, "1220": 615, "gamma_bound": 616, "pairwise_kernels_kwarg": 616, "additive_chi2": [616, 634, 760, 769], "pairwise_kernel_funct": [616, 639, 769], "hyperparameter_gamma": 616, "9733": [616, 619], "8880": 616, "05663": 616, "05532": 616, "8676": [616, 1034], "07073": 616, "06165": 616, "__mul__": 617, "8354": [618, 1034], "03228": 618, "1322": 618, "7906": [618, 645], "0652": 618, "1441": 618, "hyperparameter_alpha": 619, "8881": 619, "0566": 619, "05518": 619, "8678": 619, "0707": 619, "0614": 619, "hyperparameter_noise_level": 621, "initial_strategi": 623, "imputation_ord": [623, 1037], "skip_complet": 623, "min_valu": [623, 1038, 1039], "max_valu": [623, 1038, 1039], "keep_empty_featur": [623, 624, 626, 975, 1042], "nullabl": [623, 624, 625, 626, 1038, 1042], "na": [623, 624, 625, 626, 764, 773, 915, 917, 918, 1037, 1038, 1041, 1042, 1043], "known_val": 623, "Nearness": 623, "arab": 623, "broadcast": 623, "missingind": [623, 624, 626, 975, 1035, 1036, 1037, 1041, 1043], "initial_imputer_": 623, "imputation_sequence_": 623, "feat_idx": 623, "neighbor_feat_idx": 623, "n_features_with_missing_": 623, "indicator_": [623, 624, 626], "knp": 623, "stef": [623, 975], "buuren": [623, 975], "karin": [623, 975], "groothui": [623, 975], "oudshoorn": [623, 975], "buck": 623, "1960": [623, 712], "306": 623, "imp_mean": [623, 626], "9584": [623, 1034], "nan_euclidean": [624, 757, 773], "_pairwise_cal": 624, "kwd": [624, 766, 769, 773, 776, 787, 788], "olga": [624, 975], "troyanskaya": [624, 975], "cantor": [624, 975], "gavin": [624, 975], "sherlock": [624, 975], "pat": [624, 975], "botstein": [624, 975], "russ": [624, 975], "altman": [624, 975], "bioinformat": [624, 975], "520": [624, 846, 975, 988], "n_output_featur": 624, "error_on_new": 625, "features_": [625, 975], "n_missing_featur": 625, "x2_tr": 625, "n_features_with_miss": 625, "statistics_": 626, "n_features_missing_ind": 626, "x_imput": 626, "n_features_out": 626, "surface_": 627, "quadcontourset": 627, "quadmesh": 627, "feature_1": [627, 910], "feature_2": 627, "nicer": 627, "pd_result": 628, "target_idx": 628, "decil": [628, 1038], "is_categor": 628, "pdp": [628, 992, 1041], "nonexist": 628, "deciles_vlines_": 628, "vlines_": 628, "deciles_hlines_": 628, "bars_": 628, "heatmaps_": 628, "pdp_lim": 628, "ice_lines_kw": 628, "pd_line_kw": 628, "contour_kw": 628, "disp1": 628, "disp2": 628, "pdp_line_kw": 628, "bar_kw": 628, "heatmap_kw": 628, "seq": 629, "n_values_feature_j": 629, "bre": [630, 1001], "4666": 630, "2211": 630, "x_min_": 631, "x_max_": 631, "n_threshold": [631, 722, 777, 784], "stepwis": [631, 650, 651, 652, 678, 679, 981], "increasing_": 631, "isotonic_regress": [631, 1040], "secondari": [631, 1031], "leeuw": 631, "1977": 631, "nilotp": [631, 633], "chakravarti": [631, 633], "308": 631, "pava": 631, "hornik": 631, "mair": 631, "kruskal": [631, 686, 690, 982], "psychometrica": 631, "iso_reg": 631, "8628": 631, "7256": 631, "isotonicregression0": 631, "increasing_bool": 632, "fisher_transform": 632, "sample_step": 634, "sample_interv": 634, "sample_interval_": [634, 1043], "skewedchi2sampl": [634, 635, 636, 637, 977, 1034, 1041, 1042], "chi2_kernel": [634, 638, 753, 760, 983, 1028], "additive_chi2_kernel": [634, 754, 760, 977], "vedaldi": [634, 977], "zisserman": [634, 977, 985], "chi2sampl": 634, "9499": 634, "component_indices_": [635, 1040], "normalization_": 635, "additivechi2sampl": [635, 636, 637, 638, 753, 754, 977, 1041, 1043], "kernel_metr": [635, 636, 637, 638], "seeger": 635, "mahdavi": 635, "jin": [635, 1038, 1039], "data_transform": 635, "9987": 635, "fft": 636, "indexhash": 636, "bithash": 636, "indexhash_": 636, "bithash_": 636, "kitchen": [637, 977], "sink": [637, 977], "random_offset_": [637, 638], "random_weights_": [637, 638], "rahimi": [637, 977], "benjamin": [637, 1029, 1030, 1038, 1039, 1040, 1041, 1042, 1043], "recht": [637, 977], "berkelei": [637, 905, 906], "brecht": 637, "rah": 637, "rbf_featur": [637, 977], "skewed": [638, 1034], "secant": 638, "fuxin": 638, "catalin": 638, "ionescu": [638, 977, 1037], "cristian": 638, "sminchisescu": [638, 977], "chi2_featur": 638, "2c": [639, 648, 668, 669, 670, 671, 683, 977], "alpha_1": [640, 641, 981], "alpha_2": [640, 641, 981], "lambda_1": [640, 641, 981], "lambda_2": [640, 641, 981], "threshold_lambda": 640, "x_offset_": [640, 641, 1039], "x_scale_": [640, 641, 1039], "mackai": [640, 641, 981], "ashra": 640, "salakhutdinov": [640, 846, 988], "utstat": 640, "rsalakhu": 640, "sta4273": 640, "lecture2": 640, "computed_scor": 641, "appendix": [641, 672, 981, 995], "wipf": [641, 981], "nagarajan": [641, 981], "2_2": [642, 643, 648, 649, 650, 651, 652, 656, 657, 658, 659, 668, 677, 678, 679, 680], "glmnet": [642, 643, 1027], "sparse_coef_": [642, 648, 656, 658, 1027], "dual_gap_": [642, 643, 648, 649, 656, 657, 658, 659, 1040], "max_j": [642, 648], "w_j": [642, 648, 985, 999], "ext": 642, "83816048": 642, "55968825": 642, "451": 642, "coef_init": [642, 643, 648, 649, 656, 657, 658, 659, 662, 663, 664, 672, 673, 674, 677, 680], "mono": [642, 643, 648, 649, 656, 657, 658, 659, 677, 680], "_21": [642, 643, 648, 649, 656, 657, 658, 659, 677, 680], "sum_j": [642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 981, 985, 990], "alpha_min": [642, 643, 646, 648, 649, 650, 652, 656, 657, 658, 659, 677, 678, 679, 680], "alpha_max": [642, 643, 648, 649, 656, 657, 658, 659, 677, 680], "ndim": [642, 643, 648, 649, 656, 657, 658, 659, 677, 680, 917, 918], "multitaskelasticnet": [642, 643, 648, 657, 658, 659, 677, 981, 1027, 1034, 1035, 1038, 1040], "l1_ratio_": [643, 655, 657], "n_l1_ratio": [643, 655, 657, 1030], "199": [643, 786, 1000], "unpen": [644, 665, 676, 981], "raphson": [644, 665, 676], "g_j": [644, 665, 676], "483": 644, "795": 644, "pg_i": 645, "scale_": [645, 866, 867, 875, 877, 887, 995, 1032], "outliers_": 645, "elvezio": [645, 981], "ronchetti": [645, 981], "concomit": [645, 981], "owen": [645, 1036, 1037], "statweb": [645, 678, 679], "hhu": [645, 1036], "284": 645, "806": 645, "7200": 645, "4923": 645, "1698": 645, "0106": 645, "9221": 645, "0226": 645, "fit_path": [646, 650, 651, 652, 678, 679], "coef_path_": [646, 647, 650, 651, 981], "active_": [646, 647, 650, 651], "1111": [646, 652], "max_n_alpha": [647, 651], "n_cv_alpha": [647, 651], "cv_alpha": [647, 651], "lassolar": [647, 648, 649, 651, 652, 659, 660, 661, 678, 679, 680, 981, 1018, 1027, 1028, 1030, 1034, 1037, 1038, 1040], "9996": 647, "2961": 647, "3996": 647, "2_f": 648, "_11": 648, "4951": 649, "2_fro": [649, 658, 659, 680], "coef_path": [649, 659, 680], "46874778": [649, 659, 680], "2159048": [649, 659, 680], "4425765": [649, 659, 680], "23689075": [649, 659, 680], "coef_path_lar": [649, 659, 680], "coef_path_continu": [649, 659, 680], "interp1d": [649, 659, 680], "46915237": [649, 659, 680], "23668876": [649, 659, 680], "congruenc": [650, 651, 652, 678, 679], "fragil": 651, "3972": 651, "2222": 652, "rank_": 653, "singular_": 653, "maxent": [654, 655, 981], "primal": [654, 655, 673, 897, 898, 999, 1000], "synthetic_feature_weight": [654, 655], "ciyou": 654, "byrd": 654, "jorg": [654, 1030, 1039, 1041], "noced": 654, "lui": [654, 1028, 1030, 1031, 1035], "iem": 654, "lbfgsb": 654, "schmidt": [654, 981, 1030], "le": [654, 865, 976, 981, 988, 996, 998, 1035, 1039, 1040], "roux": [654, 981, 998], "00860051": 654, "defazio": [654, 981], "lacost": [654, 981], "hsiang": [654, 1031], "fu": [654, 1031], "fang": [654, 1034, 1035], "lan": [654, 1042, 1043], "chih": [654, 1032], "jen": [654, 1035], "maxent_du": 654, "cs_": 655, "l1_ratios_": 655, "coefs_paths_": [655, 1037], "coefs_path": 655, "n_l1_ratios_": 655, "score_param": [655, 1044], "w_ij": 656, "eps_": [656, 658], "45663524": 656, "45612256": 656, "0872422": 656, "fro_2": [657, 659], "52875032": 657, "46958558": 657, "00166409": 657, "60809415": 658, "94592424": 658, "41888636": 658, "87382323": 658, "9994": 659, "5713": 659, "153": 659, "7971": 659, "9015": [659, 1035], "n_nonzero_coefs_": [660, 661], "orthogonal_mp_gram": [660, 661, 681, 1041], "mallat": [660, 681, 682, 981], "3397": [660, 681, 682], "3415": [660, 681, 682], "papier": [660, 681, 682], "mallatpursuit93": [660, 681, 682], "rubinstein": [660, 681, 682], "zibulevski": [660, 681, 682], "elad": [660, 681, 682], "technion": [660, 681, 682, 981], "ronrubin": [660, 681, 682, 981], "ksvd": [660, 681, 682, 981], "9991": [660, 661, 1035], "3854": [660, 661], "previous_loss": [662, 663, 664, 673], "pa": [662, 663, 894, 981, 985, 998], "preset": [662, 664, 672, 989], "t_": [662, 663, 664, 672, 673, 674, 854, 855, 999], "loss_function_": [662, 664, 672, 673], "volume7": [662, 663], "crammer06a": [662, 663], "crammer": [662, 663, 730, 981, 985, 1000], "dekel": [662, 663, 981], "keshat": [662, 663, 981], "shalev": [662, 663, 981, 999], "shwartz": [662, 663, 981, 999], "26642044": 662, "45070924": 662, "67251877": 662, "64185414": 662, "84127814": 662, "intercept_init": [662, 663, 664, 672, 674], "y_all": [662, 664, 672, 825, 826, 854], "epsilon_insensit": [663, 672, 674, 898, 981, 999], "squared_epsilon_insensit": [663, 672, 674, 898, 981, 1033], "48736655": 663, "18818427": 663, "59122734": 663, "94731329": 663, "02306214": 663, "eta0": [664, 672, 673, 674, 999], "lossfunct": [664, 672, 673, 1036], "therein": 664, "939": [664, 1015], "990": [665, 985], "676": 665, "solver_opt": 666, "ipm": 666, "linprog": [666, 981], "is_data_valid": [667, 981], "is_model_valid": [667, 981], "max_trial": [667, 981], "max_skip": 667, "stop_n_inli": [667, 981], "stop_scor": [667, 981], "stop_prob": 667, "mad": [667, 1033], "costlier": 667, "n_trials_": 667, "n_skips_no_inliers_": 667, "n_skips_invalid_data_": 667, "n_skips_invalid_model_": 667, "sri": [667, 981, 1034, 1035], "bmva": 667, "bmvc": [667, 981], "paper355": 667, "9885": 667, "9417": 667, "15000": [668, 683, 854, 855], "btol": [668, 670], "gcv_mode": [669, 1029], "store_cv_valu": [669, 671, 1035, 1038], "alpha_per_target": [669, 1039], "cv_values_": [669, 671], "5166": 669, "gcv": [669, 671], "9595": 670, "9630": 671, "power_t": [672, 673, 674, 854, 855, 999], "best_loss": [672, 674], "leon": [672, 673, 674, 1027], "bottou": [672, 673, 674, 989, 999], "pow": [672, 673, 674, 854, 855], "dl": 672, "775047": 672, "775151": 672, "justif": 672, "volume2": 672, "zhang02c": 672, "offset_init": 673, "unshifft": 673, "n_subsampl": [675, 923], "breakdown_": 675, "n_subpopulation_": 675, "xin": [675, 981, 1035], "dang": [675, 981], "hanxiang": [675, 981], "peng": [675, 981, 1033, 1034, 1035, 1037, 1039], "xueqin": [675, 981], "hepe": [675, 981], "olemiss": 675, "xdang": 675, "mtse": 675, "9884": 675, "5871": 675, "coeff": 676, "839": 676, "copy_gram": [678, 679, 682], "return_path": [678, 679, 681, 682], "lars_path_gram": [678, 981, 1036], "tib": [678, 679], "xgamma": 681, "norms_squar": 682, "copy_xi": 682, "return_intercept": [683, 1036], "linearoper": 683, "_preprocess_data": 683, "path_method": [684, 982], "neighbors_algorithm": [684, 685], "arnoldi": [684, 685, 689], "fw": 684, "warshal": [684, 982], "kernel_pca_": 684, "nbrs_": [684, 685], "dist_matrix_": 684, "tenenbaum": [684, 982], "reconstruction_error": 684, "frobenius_norm": 684, "d_fit": 684, "x_fit": 684, "n_queri": [684, 839, 840, 841, 843, 845, 847, 848, 849], "hessian_tol": [685, 689], "modified_tol": [685, 689], "reconstruction_error_": 685, "rowei": [685, 689, 846, 982, 988], "saul": [685, 689, 982, 1034, 1035, 1037], "2323": [685, 689, 982], "donoho": [685, 689, 982], "grime": [685, 689, 982], "natl": [685, 689, 982], "acad": [685, 689, 982], "5591": [685, 689, 982], "mlle": [685, 689, 982], "zha": [685, 689, 982], "shanghai": [685, 689, 982], "univ": [685, 689, 982], "406": [685, 689, 982], "immers": [686, 690], "nonmetr": [686, 690, 982], "smacof": [686, 1042], "stress": [686, 690, 982, 1042], "stress_": 686, "dispar": [686, 690, 982], "dissimilarity_matrix_": 686, "psychometrika": [686, 690, 982], "1964": [686, 690, 873, 885, 982], "borg": [686, 690, 982], "groenen": [686, 690, 982], "affinity_matrix": 687, "n_neighbors_": [687, 843], "early_exagger": 688, "min_grad_norm": [688, 1033], "der": [688, 692, 982, 1030, 1031, 1035], "maaten": [688, 692, 982], "bhtsne": [688, 1034], "opentsn": 688, "abort": 688, "pdist": [688, 773, 776], "pairwise_distance_funct": [688, 692, 773, 776, 988], "barn": [688, 982, 1032, 1034, 1037], "hut": [688, 982, 1032, 1034, 1037], "nlogn": 688, "kl_divergence_": [688, 1034], "learning_rate_": [688, 855], "hinton": [688, 846, 853, 854, 855, 982, 988, 989, 990], "2579": 688, "2605": 688, "lvdmaaten": [688, 1034], "oct": [688, 764, 982, 988], "3221": [688, 982], "3245": [688, 982], "jmlr_2014": 688, "belkina": [688, 982], "ciccolella": [688, 982], "anno": [688, 982], "halpert": [688, 982], "spidlen": [688, 982], "snyder": [688, 982], "cappion": [688, 982], "kobak": [688, 1040], "beren": 688, "transcriptom": 688, "guttman": 690, "norm_laplacian": 691, "drop_first": 691, "nk": 692, "2n": [692, 977, 989], "3k": 692, "cosine_dist": [692, 757, 988, 1033], "jarkko": 692, "venna": 692, "samuel": [692, 1009, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "kaski": 692, "icann": 692, "verlag": 692, "491": 692, "twelfth": 692, "pmlr": 692, "384": [692, 898], "im_": 693, "axesimag": 693, "text_": 693, "include_valu": 693, "values_format": [693, 1037], "im_kw": [693, 1041], "text_kw": [693, 1042], "get_metr": 695, "euclideandist": 695, "manhattandist": 695, "chebyshevdist": 695, "minkowskidist": [695, 1040], "seuclideandist": 695, "mahalanobisdist": 695, "haversinedist": 695, "arcsin": [695, 759], "hammingdist": 695, "n_unequ": 695, "n_tot": 695, "canberradist": 695, "braycurtisdist": 695, "abbrevi": 695, "ntt": 695, "ntf": 695, "nft": 695, "nff": 695, "nneq": 695, "jaccarddist": 695, "matchingdist": 695, "dicedist": 695, "kulsinskidist": [695, 1043], "rogerstanimotodist": 695, "russellraodist": 695, "sokalmichenerdist": 695, "sokalsneathdist": 695, "pyfunc": [695, 988], "pyfuncdist": 695, "metric_obj": 695, "chance_level_": [696, 698, 1043], "drop_intermedi": [696, 698, 777, 784, 1043], "errors_lines_": 697, "with_error": 697, "scatter_": 697, "balanced_accuracy_scor": [699, 782, 985, 1035], "imperfectli": [699, 729, 985], "label_tru": [700, 713, 732, 750, 752, 790], "upperlimit": 700, "nat": [700, 750, 752, 1041], "expected_ri": 701, "discord": 701, "hubert1985": 701, "1007": 701, "2fbf01908075": 701, "steinley2004": 701, "wk": 701, "rand_index": 701, "adjusted_rand_index": 701, "chacon": 701, "chac\u00f3n": 701, "rastrojo": 701, "balanced_accuraci": [704, 985, 1035], "brodersen": 704, "ong": 704, "stephan": [704, 1030, 1036, 1037, 1039], "buhmann": 704, "20th": 704, "3121": 704, "kelleh": [704, 985], "aoif": [704, 985], "arci": [704, 985], "y_true_categor": [705, 985], "037": 705, "calinski": [706, 1033], "harabasz": 706, "allow_non": 707, "thrown": [707, 1036, 1037], "tn": [708, 714, 985], "negative_class": 708, "zebra": 708, "output_dict": [709, 1035, 1039], "precision_recall_fscore_support": [709, 724, 725, 779, 782, 985, 1031, 1035, 1037, 1043], "multilabel_confusion_matrix": [709, 724, 725, 733, 779, 782, 985, 1036], "conting": [710, 711, 726, 750, 1033], "n_classes_tru": [710, 750], "n_classes_pr": [710, 750], "cohen": [712, 1035], "p_o": 712, "p_e": 712, "artstein": 712, "poesio": 712, "linguist": [712, 894, 998], "596": 712, "label_pr": [713, 731, 732, 750, 752, 790], "ant": [714, 749, 985], "a_row": 715, "a_column": 715, "b_row": 715, "b_column": 715, "tsoumaka": [716, 729, 735, 985], "kataki": [716, 729, 735, 985], "vlahava": [716, 735, 985], "handbook": [716, 735, 985], "667": [716, 735, 985], "685": [716, 735, 985], "raw_valu": [717, 718, 723, 740, 741, 743, 745, 746, 748, 780, 785, 786, 985, 1035, 1038], "wainwright": [717, 718, 719], "su": [717, 718, 719], "statlearnspars": [717, 718, 719], "764": [717, 985], "691": 717, "8125": 717, "57142857": 717, "d2": 718, "d2_absolute_error_scor": [718, 985, 1041], "koenker": [718, 981], "roger": [718, 1034, 1035, 1039], "jos\u00e9": [718, 1030, 1040], "045": 718, "630": 719, "bouldin": 720, "farther": 720, "log_bas": 721, "ignore_ti": [721, 751], "ndcg": [721, 751, 985, 1034], "ndcg_score": [721, 985, 1034, 1037, 1042, 1043], "sharper": 721, "discounted_cumulative_gain": 721, "dcg": [721, 751, 985, 1034], "jarvelin": [721, 751, 985], "kekalainen": [721, 751, 985], "colt": [721, 751, 985], "mcsherri": [721, 751, 985], "najork": [721, 751, 985], "european": [721, 751, 985], "groud": [721, 751], "true_relev": [721, 751], "imperfect": [723, 780, 985, 1029], "variance_weight": [723, 780, 985], "983": 723, "n_unique_label": [724, 725, 733, 778, 779, 782, 949], "fbeta_scor": [724, 737, 778, 985, 1029, 1030, 1031, 1032, 1037, 1043], "y_true_empti": 724, "y_pred_empti": [724, 725], "66666667": [724, 777, 847, 995], "fowlk": [726, 1033], "mallow": [726, 1033], "get_scorer_nam": [727, 985, 1041], "forgiv": 729, "upperbound": 729, "grigorio": 729, "ioanni": 729, "wareh": 729, "septemb": [729, 985, 1027, 1030, 1033, 1035, 1040, 1043], "pred_decis": [730, 985, 1040], "disagre": [730, 992], "kobi": 730, "AND": 730, "denero": 730, "gluster": 731, "v_measur": [731, 790], "6666": [733, 985, 1033], "5833": [733, 985], "lrap": [734, 985], "209": [736, 873], "21616": 736, "needs_proba": [737, 1036, 1044], "needs_threshold": [737, 1044], "ftwo_scor": [737, 985], "mcc": [738, 985, 1041], "baldi": 738, "brunak": 738, "chauvin": 738, "andersen": [738, 1041], "nielsen": [738, 1035], "gorodkin": 738, "jurman": 738, "riccadonna": 738, "furlanello": 738, "cen": 738, "mape": [741, 985], "3273": 741, "5515": 741, "6198": 741, "112589990684262": 741, "0568": 742, "4260": [744, 747], "root_mean_squared_error": [745, 985, 1044], "41666667": 745, "825": 745, "msle": [746, 985], "rmsle": [746, 985], "root_mean_squared_log_error": [746, 985, 1044], "00462428": 746, "08377444": 746, "samplewis": [749, 985], "mcm": [749, 985], "mcm_": 749, "multi_confus": 749, "normalized_discounted_cumulative_gain": 751, "dcg_score": [751, 985, 1034, 1037], "kernel_matrix": [753, 754, 761, 771], "marszalek": [753, 754, 983], "lazebnik": [753, 754, 983], "schmid": [753, 754, 983], "ouvert": [753, 754, 983], "00171412": [753, 754, 983], "dense_output": [756, 762, 890, 935, 1035], "linear_kernel": [756, 760, 983, 1035], "haversine_dist": [757, 1036], "y_norm_squar": 758, "x_norm_squar": [758, 1032, 1044], "paired_dist": [758, 764, 773, 1031], "41421356": [758, 764, 988], "lon": 759, "ezeiza": 759, "airport": 759, "bueno": 759, "argentina": 759, "gaull": 759, "bsa": 759, "83333": 759, "5166646": 759, "0083899664": 759, "53844117956": 759, "bsas_in_radian": 759, "paris_in_radian": 759, "6371000": 759, "kilomet": 759, "11099": 759, "54035582": 759, "polynomial_kernel": [760, 983], "rbf_kernel": [760, 983, 1031], "laplacian_kernel": [760, 983, 1032], "sigmoid_kernel": [760, 983], "sum_over_featur": [763, 1027, 1042], "componentwis": 763, "sq": 764, "dixon": [764, 1037, 1038], "cybernet": 764, "ieeexplor": 764, "4310090": 764, "filter_param": 769, "jth": [769, 773], "force_all_finit": [773, 915, 917, 918, 1038, 1041], "distance_metr": [773, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851], "metric_kwarg": [774, 775], "reduce_func": [776, 1038], "d_chunk": 776, "sought": 776, "neigh": [776, 839, 840, 841, 843, 845, 847, 848, 849], "gen": 776, "probas_pr": 777, "warn_for": 778, "shantanu": 778, "godbol": 778, "sunita": 778, "sarawagi": 778, "pig": 778, "948": [780, 985], "max_fpr": [783, 985, 1035], "provost": [783, 985], "ceder": [783, 985], "stern": [783, 985], "fawcett": [783, 784, 985], "generalis": [783, 985, 1006], "612": 785, "822": 785, "n_samples_a": [787, 788], "favour": [787, 982, 984, 1036], "mean_prior": 792, "degrees_of_freedom_prior": 792, "verbose_interv": [792, 793], "wishart": 792, "emipr": 792, "precisions_": [792, 793], "precisions_cholesky_": [792, 793, 1041], "converged_": [792, 793], "lower_bound_": [792, 793, 1035], "weight_concentration_prior_": 792, "weight_concentration_": 792, "mean_precision_prior_": 792, "mean_precision_": 792, "mean_prior_": 792, "degrees_of_freedom_prior_": 792, "degrees_of_freedom_": 792, "covariance_prior_": 792, "hagai": 792, "attia": 792, "bgm": 792, "n_dimens": [792, 793], "log_prob": [792, 793], "weights_init": 793, "precisions_init": [793, 1041, 1043], "gm": 793, "pre_dispatch": [794, 800, 808, 816, 818, 819, 820, 821, 824, 951, 1030], "error_scor": [794, 797, 798, 800, 808, 816, 819, 820, 821, 824, 974, 1031, 1035, 1039, 1042], "explos": [794, 808, 818, 819, 820], "fitfailedwarn": [794, 797, 798, 800, 808, 816, 819, 820, 821, 824], "param_kernel": [794, 808], "param_degre": 794, "split0_test_scor": [794, 808, 1033], "rank_t": 794, "split1_test_scor": [794, 808], "split0_train_scor": [794, 808, 1033], "split1_train_scor": [794, 808], "mean_train_scor": [794, 808, 1033], "std_train_scor": [794, 808, 1033], "split0_test_precis": [794, 808], "mean_train_precis": [794, 808], "best_estim": [794, 797, 798, 808], "scorer_": [794, 797, 798, 808], "n_splits_": [794, 797, 798, 808], "refit_time_": [794, 797, 798, 808, 1035], "multimetric_": [794, 797, 798, 808], "parametergrid": [794, 1029, 1035], "split2_test_scor": 794, "num_sampl": [794, 808, 1042], "versionad": [794, 797, 798, 808], "stratif": [795, 796, 802, 803, 812, 813, 814, 956, 1036], "group_kfold": 795, "set_split_request": [795, 796, 801, 803, 812], "aggressive_elimin": [797, 798, 974], "r0": [797, 798], "replai": [797, 798], "n_remaining_candidates_": [797, 798], "n_candid": [797, 798, 974], "max_resources_": [797, 798], "min_resources_": [797, 798], "n_required_iterations_": [797, 798], "n_possible_iterations_": [797, 798], "exceed": [797, 798, 1033], "n_unique_tick": [800, 821], "n_tick": [800, 816, 821, 824], "neg_": [800, 816, 1033], "errorbar_": [800, 816], "errorbarcontain": [800, 816], "fill_between_": [800, 816], "polycollect": [800, 816], "exploit_incremental_learn": [800, 821], "log_scal": [800, 1043], "fill_between_kw": [800, 816], "errorbar_kw": [800, 816], "predispatch": [800, 816, 821, 824], "negat": [800, 816, 985], "combinator": 804, "lpo": 804, "param_list": 806, "rounded_list": 806, "89856": 806, "923223": 806, "878964": 806, "038159": 806, "parametersampl": [808, 1029, 1035, 1039], "2652124": 809, "rskf": 810, "36851234": 810, "sizeabl": [811, 814], "sad": [812, 813], "sss": 814, "logistic_regress": 816, "n_valu": [816, 824, 1035], "checked_cv": 817, "3315057": [819, 820], "08022103": [819, 820], "03531816": [819, 820], "test_r2": 820, "test_auc": 820, "train_r2": 820, "train_auc": 820, "3635": 820, "3573": 820, "6114": 820, "28009951": 820, "3908844": 820, "22784907": 820, "train_sizes_ab": 821, "train_size_ab": 821, "cv_train_scor": 821, "cv_test_scor": 821, "permutation_scor": 822, "pairwise_indices_": 825, "label_binarizer_": 826, "multilabel_": [826, 1032], "code_book_": 827, "bakiri": [827, 986], "pict": [827, 986], "order_": [828, 831], "jess": [828, 986, 1040], "pfahring": [828, 986], "geoff": [828, 986], "holm": [828, 986], "eib": [828, 986], "8387": 828, "9431": 828, "4576": 828, "8878": 828, "3684": 828, "2640": 828, "0321": 828, "9935": 828, "0626": 828, "y_decis": 828, "load_linnerud": [830, 1033, 1038], "force_alpha": [832, 833, 834, 836, 1042], "lidston": [832, 833, 834, 836, 987], "class_count_": [832, 833, 834, 835, 836], "class_log_prior_": [832, 833, 834, 836], "feature_count_": [832, 834, 836], "feature_log_prob_": [832, 833, 834, 836], "categoricalnb": [832, 834, 835, 836, 987, 1037, 1038, 1039, 1040, 1042], "renni": [832, 834, 987, 1035], "schuetz": [832, 836], "htmledit": [832, 836, 983], "mccallum": [832, 987], "nigam": [832, 987], "metsi": [832, 987], "androutsopoulo": [832, 987], "palioura": [832, 987], "cea": [832, 987], "predict_joint_log_proba": [832, 833, 834, 835, 836, 1042], "min_categori": [833, 1039], "category_count_": 833, "n_categories_": 833, "mirror": [834, 974], "mahout": 834, "weka": 834, "feature_all_": 834, "shih": [834, 987], "teevan": [834, 987], "karger": [834, 987], "616": [834, 987, 995], "623": [834, 987], "jrenni": 834, "icml03": 834, "var_smooth": [835, 1035], "stan": 835, "levequ": [835, 877], "cstr": 835, "epsilon_": 835, "theta_": [835, 987], "clf_pf": 835, "distancemetric64": [837, 838], "valid_metr": [837, 838, 988, 1043], "19662693": [837, 838], "29473397": [837, 838], "tree_copi": [837, 838], "query_radiu": [837, 838], "count_onli": [837, 838], "kernel_dens": [837, 838], "94114649": [837, 838], "83281226": [837, 838], "2071716": [837, 838], "two_point_correl": [837, 838], "get_arrai": [837, 838], "get_n_cal": [837, 838], "n_call": [837, 838], "get_tree_stat": [837, 838], "tree_stat": [837, 838], "breadth_first": [837, 838, 842], "return_log": [837, 838], "k_true": [837, 838], "k_ret": [837, 838], "breadth": [837, 838, 842, 1009, 1029], "dualtre": [837, 838], "sort_result": [837, 838, 845, 847, 848, 849, 1039], "radii": [837, 838], "reset_n_cal": [837, 838], "effective_metric_": [839, 840, 841, 843, 845, 847, 848, 849, 988], "callbl": 839, "effective_metric_params_": [839, 840, 841, 843, 845, 847, 848, 849], "outputs_2d_": [839, 847, 1037], "nearest_neighbor_algorithm": [839, 847, 848], "333": 839, "n_index": [839, 840, 841, 843, 845, 847, 848], "neigh_dist": [839, 840, 841, 843, 845, 847, 848, 849], "neigh_ind": [839, 840, 841, 843, 845, 847, 848, 849], "nearest_neighbors_algorithm": [840, 845], "nearer": [841, 849, 988], "x_dist_graph": 841, "silverman": [842, 1042], "binarytre": [842, 1031, 1035, 1039], "bandwidth_": 842, "log_dens": 842, "52955942": 842, "51462041": 842, "60244657": 842, "logprob": 842, "negative_outlier_factor": 843, "9821": 843, "0370": 843, "3697": 843, "shifted_opposite_lof_scor": 843, "opposite_lof_scor": 843, "wminkowski": [844, 1039, 1041], "narasimhan": 844, "chu": [844, 1043], "shrunken": [844, 1027], "6567": 844, "6572": 844, "nbr": [845, 988], "neighborsclassifi": [845, 847, 848, 849, 1027], "n_features_a": 846, "n_features_b": 846, "goldberg": [846, 988], "neighbourhood": [846, 988], "ncanip": 846, "neighbourhood_components_analysi": 846, "961904": 846, "outlier_label": [847, 1037], "outlier_label_": 847, "33333333": [847, 995], "x_cluster": 849, "warn_when_not_sort": 852, "efficiencywarn": [852, 1042], "sml": [853, 990], "pcd": [853, 990], "sweep": 853, "gibb": [853, 990, 1005], "intercept_hidden_": 853, "intercept_visible_": 853, "h_samples_": 853, "osindero": [853, 990], "teh": [853, 990], "1527": 853, "1554": 853, "absp": 853, "fastnc": 853, "tieleman": [853, 990], "v_new": 853, "pseudo_likelihood": 853, "relu": [854, 855], "beta_1": [854, 855], "beta_2": [854, 855], "max_fun": [854, 855, 1037], "n_layer": [854, 855], "neuron": [854, 855, 983, 989], "tan": [854, 855, 989, 1034], "rectifi": [854, 855], "kingma": [854, 855, 989], "diederik": [854, 855, 989, 1042], "jimmi": [854, 855, 989, 1033, 1035], "effective_learning_r": [854, 855], "best_loss_": [854, 855, 1042], "best_validation_score_": [854, 855, 1042], "validation_scores_": [854, 855, 1042], "intercepts_": [854, 855, 989], "n_layers_": [854, 855], "out_activation_": [854, 855], "geoffrei": [854, 855, 989, 1038, 1039, 1040, 1041, 1043], "connectionist": [854, 855], "glorot": [854, 855], "xavier": [854, 855, 1035, 1036, 1037, 1039, 1040], "yoshua": [854, 855, 998], "feedforward": [854, 855], "kaim": [854, 855], "delv": [854, 855], "imagenet": [854, 855], "961": 854, "log_y_prob": 854, "named_transform": [856, 1042], "transform_list": 856, "s__p": 857, "n_transformed_featur": 857, "y_log_proba": 857, "analyst": 860, "x_tr": [860, 866, 869, 870, 871, 875, 877, 880, 882, 883, 887, 888], "accept_spars": [861, 917, 918, 1034], "inv_kw_arg": 861, "pickleabl": [861, 1033], "6931": 861, "3862": 861, "n_bins_": 862, "regener": 862, "xinv": 862, "tild": [863, 993, 995], "k_fit_rows_": 863, "k_fit_all_": 863, "1299": [863, 995], "1319": [863, 995], "n_samples1": 863, "n_samples2": 863, "k_new": 863, "neg_label": [864, 881], "y_type_": 864, "sparse_input_": 864, "lb": [864, 996], "tokyo": [865, 996], "amsterdam": [865, 996], "max_abs_": 866, "x_std": [867, 883, 995], "data_min_": [867, 1032], "data_max_": [867, 1032], "data_range_": [867, 1032], "unwieldi": 868, "fi": 868, "comedi": 868, "y_indic": 868, "yt": 868, "ands": 868, "feature_name_combin": [870, 1043], "categories_": [870, 871, 878, 995, 1035, 1042], "unregular": [870, 893, 1018, 1036], "intact": [870, 1020], "infrequ": [870, 871, 878, 985, 1027, 1041, 1042, 1043], "infrequent_if_exist": [870, 995], "x_6": 870, "x_7": 870, "drop_idx_": [870, 1038, 1042], "drop_idx": 870, "gender_femal": 870, "gender_mal": 870, "group_1": 870, "group_2": 870, "group_3": 870, "drop_enc": [870, 995], "drop_binary_enc": 870, "custom_combin": 870, "custom_fnames_enc": 870, "x0_str_femal": 870, "x0_str_male": 870, "x1_int_1": 870, "x1_int_2": 870, "x1_int_3": 870, "oh": [870, 1037], "infrequent_sklearn": [870, 995], "n_encoded_featur": [870, 871], "_csr": 870, "onward": [871, 1031], "bpo": 871, "43475": 871, "lenient": [871, 1006], "min_degre": [872, 1040], "max_degre": [872, 1040], "powers_": 872, "n_output_features_": 872, "nystrom": [872, 1036, 1037], "featurewis": 873, "power_transform": [873, 886, 1035], "biometrika": [873, 885], "954": [873, 885], "959": [873, 885], "386": 873, "ignore_implicit_zero": [874, 886], "landmark": [874, 886, 995], "n_quantiles_": 874, "quantiles_": [874, 995, 1037], "references_": 874, "with_cent": [875, 887], "with_scal": [875, 887], "unit_vari": [875, 887, 1039], "quartil": 875, "q_min": [875, 887], "q_max": [875, 887], "center_": 875, "robust_scal": [875, 886, 1035], "interquartile_rang": 875, "bspline": 876, "n_features_out_": 876, "with_std": [877, 888, 995, 1035], "n_samples_seen": 877, "5a": 877, "randal": [877, 1031, 1041], "242": [877, 1027], "247": 877, "mic": [878, 995], "target_mean_": [878, 995], "target_type_": 878, "f0_c0": 878, "f0_c1": 878, "f0_c2": 878, "f1_c0": 878, "f1_c1": 878, "f1_c2": 878, "micci": [878, 995], "barreca": [878, 995], "newsl": [878, 995], "enc_auto": 878, "enc_high_smooth": 878, "enc_low_smooth": 878, "type_of_target_": 878, "ahead": 881, "return_norm": [884, 1034], "compute_inverse_compon": [889, 890, 997], "inverse_components_": [889, 890, 997, 1041], "2759": [889, 890], "afor": [889, 890], "baserandomproject": [889, 890], "ping": [890, 997, 1033, 1034], "density_": 890, "gaussianrandomproject": [890, 997, 1028, 1041, 1043], "church": [890, 997], "kdd06_rp": 890, "cgi": 890, "uoa": 890, "gr": 890, "opta": 890, "0182": 890, "e2": [891, 981], "93lindenstrauss_lemma": 891, "sanjoi": [891, 997], "anupam": [891, 997, 1042], "gupta": [891, 997, 1034, 1035, 1038, 1039, 1040, 1041, 1043], "elementari": [891, 997], "11841": [891, 997], "1112658": [891, 997], "7894": [891, 997], "9868": [891, 997], "steadi": [892, 893], "xiaojin": 892, "zoubin": 892, "ghahramani": 892, "cmu": 892, "cald": 892, "carnegi": 892, "mellon": 892, "jerryzhu": 892, "label_prop_model": [892, 893], "clamp": [893, 998], "dengyong": 893, "bousquet": 893, "navin": 893, "lal": 893, "schoelkopf": 893, "termination_condition_": 894, "no_chang": 894, "all_label": 894, "33rd": [894, 998], "acl": [894, 998, 999], "stroudsburg": [894, 998], "crammer_sing": [897, 986, 1000, 1027], "seldom": 897, "w_x_1": [897, 898], "w_x_n": [897, 898], "w_intercept": [897, 898], "readonli": [897, 898, 1040, 1042, 1043], "raw_coef_": [897, 898], "smo": [897, 898], "526": 897, "1693": 897, "unsur": 898, "582": 898, "522": 898, "class_weight_": [899, 900, 901, 902, 903, 1042], "n_sv": [899, 900, 901, 902, 903, 1000, 1037], "fit_status_": [899, 900, 901, 902, 903], "n_support_": [899, 900, 901, 902, 903, 1000, 1037], "proba_": [899, 902, 1038], "probb_": [899, 902, 1038], "shape_fit_": [899, 900, 901, 902, 903], "n_dimensions_of_x": [899, 900, 901, 902, 903], "7798": 901, "0547": 901, "0556": 901, "0561": 901, "7332": 901, "unshift": 901, "impract": 902, "tube": [903, 1000], "_tree": [905, 906, 907, 908, 1028, 1030], "decision_tree_learn": [905, 906, 1001], "olshen": [905, 906, 1001], "wadsworth": [905, 906, 1001], "belmont": [905, 906, 1001], "cutler": [905, 906], "cc_home": [905, 906], "htm": [905, 906], "ccp_path": [905, 906, 907, 908], "get_depth": [905, 906, 907, 908, 1036], "get_n_leav": [905, 906, 907, 908, 1036], "set_predict_proba_request": [905, 907], "extra_tre": [907, 908], "8947": 907, "decision_tre": [909, 910, 911, 1001], "out_fil": [909, 1001], "leaves_parallel": 909, "special_charact": [909, 1001], "fontnam": [909, 1040], "helvetica": [909, 911], "graphviz": [909, 1001], "postscript": 909, "tpng": 909, "paint": [909, 911], "dot_data": [909, 1001], "digraph": 909, "show_weight": 910, "feature_0": 910, "unrepresent": 912, "keyerror": [912, 1037], "popitem": 912, "lifo": 912, "input_nam": [916, 918, 948, 1041], "accept_large_spars": [917, 918, 1035], "ensure_2d": [917, 918], "allow_nd": [917, 918], "ensure_min_sampl": [917, 918], "ensure_min_featur": [917, 918], "y_numer": 917, "bsr": [917, 918, 1040], "x_convert": 917, "y_convert": 917, "array_convert": 918, "min_val": 921, "max_val": 921, "include_boundari": [921, 1041], "y_org": 922, "class_weight_vect": 922, "king": 922, "zen": 922, "sample_weight_vect": 923, "parenthes": 924, "type_filt": 926, "generate_onli": [928, 1037], "checks_gener": 928, "test_check_estim": 929, "check_estimators_fit_returns_self": 929, "array_lik": 932, "logdet": 932, "slogdet": 932, "6375861597263857": 932, "flip_sign": 934, "svd_lapack_driv": 934, "gesdd": 934, "p5": 934, "transposit": 934, "gesvd": 934, "conquer": 934, "unitari": 934, "vh": 934, "dot_product": 935, "deweight": 936, "min_batch_s": 937, "n_pack": [937, 938], "path_length": 939, "sliceabl": 940, "methodmetadatarequest": 941, "routemappingpair": 942, "routing_info": 942, "from_str": [942, 943], "methodpair": 943, "_obj": 945, "_method": 945, "any_method": 945, "truthi": 946, "helloifeven": 946, "_x_is_even": 946, "say_hello": 946, "temp_fold": 951, "max_nbyt": 951, "1m": 951, "mmap_mod": 951, "dispatch_next": 951, "dispatch_one_batch": 951, "unprotect": 951, "prefetch": 951, "print_progress": 951, "inner_max_num_thread": 953, "backend_param": 953, "parallel_config": 953, "register_parallel_backend": [953, 1035], "dask": [953, 1006, 1035], "localclust": 953, "workload": [953, 1005], "register_rai": 953, "backend_nam": 953, "oversubscript": [953, 1041], "threadpool": 953, "effective_n_job": 953, "tracking_select": 954, "reservoir_sampl": 954, "reservoir": 954, "make_default": 955, "parallelbackendbas": 955, "resampled_arrai": 956, "3x2": [956, 959], "shuffled_arrai": 959, "last_mean": 960, "last_var": 960, "last_n": 960, "return_sum_weight": 966, "sum_weight": 966, "all_or_ani": [969, 1037], "is_fit": 969, "eg": 969, "substitut": [969, 1006, 1033], "raise_except": 971, "array_sym": 971, "is_paramet": 973, "enclos": 974, "set_stat": 974, "bergstra": [974, 1027, 1028], "tournament": 974, "dispos": [974, 1020], "n_resources_i": 974, "n_resources_0": 974, "n_candidates_i": 974, "n_candidates_0": 974, "r_0": 974, "n_resourc": 974, "983667": 974, "951958": 974, "947958": 974, "961009": 974, "955989": 974, "jamieson": 974, "talwalkar": 974, "desalvo": 974, "rostamizadeh": 974, "hyperband": 974, "bandit": 974, "multimetr": [974, 1037, 1042], "calibrated_forest": 974, "select__k": 974, "model__estimator__max_depth": 974, "imp": 975, "sophist": [975, 987], "14338": 975, "13286": 975, "15611": 975, "amelia": 975, "scientist": [975, 1009], "roderick": 975, "rubin": 975, "1986": [975, 1001], "ol2001": 975, "mask_missing_values_onli": 975, "mask_al": 975, "rr2007": 977, "2x_iy_i": 977, "vz2010": 977, "vvz2010": 977, "prod_i": 977, "ls2010": 977, "c_0": [977, 983], "tensorsketch": 977, "pp2013": 977, "wikic": 977, "ccf2002": 977, "mercer": 977, "langl": [977, 985, 999, 1000], "rangl": [977, 985, 999, 1000], "y_j": [977, 985, 987, 995, 1000], "obviat": 977, "dagm": 977, "vempati": 977, "jawahar": 977, "charikar": 977, "farach": 977, "colton": 977, "m2012": 978, "mu_k": 979, "cst": 979, "omega_": 979, "k0": 979, "h_l": 979, "extrema": 979, "119": [979, 1030], "honei": 979, "stork": 979, "dilemma": 980, "valid_scor": 980, "w_0": 981, "w_p": 981, "34545455": 981, "13636": [981, 1036], "rifkin": 981, "lippert": 981, "2n_": 981, "softw": 981, "kim": [981, 1035, 1036, 1037, 1041], "koh": [981, 1009], "lustig": 981, "boyd": 981, "gorinevski": 981, "c_p": 981, "cherkasski": 981, "yunqian": 981, "1691": 981, "1714": 981, "ell_2": 981, "equiangular": 981, "weisberg": 981, "ell_0": [981, 985], "_coef": 981, "mp": 981, "ell_": 981, "posteriori": [981, 987], "radford": 981, "neal": [981, 1040], "50000013": 981, "49999993": 981, "lambda_i": [981, 995], "srikantan": 981, "tristan": 981, "fletcher": [981, 1027, 1031], "nomenclatur": [981, 1033], "deliber": 981, "overparameter": 981, "ldot": [981, 985, 987, 989, 999], "w_l": 981, "min_w": 981, "iverson": 981, "hood": [981, 1000], "broyden": 981, "goldfarb": 981, "shanno": 981, "shortcom": 981, "aaron": [981, 1030, 1031, 1032, 1037], "simon": [981, 1009, 1030, 1031, 1040, 1041, 1042, 1043], "93fletcher": 981, "93goldfarb": 981, "93shanno_algorithm": 981, "noah": 981, "multirespons": 981, "statsmodel": [981, 1005], "edm": 981, "agricultur": 981, "rainfal": 981, "paid": 981, "fraud": [981, 1009], "cash": 981, "fraudul": [981, 1009], "interrupt": 981, "drug": 981, "cure": 981, "entertain": 981, "mccullagh": 981, "nelder": 981, "boca": 981, "raton": 981, "chapman": 981, "hall": [981, 1034, 1038], "crc": 981, "31760": 981, "j\u00f8rgensen": 981, "monografia": 981, "matem\u00e1tica": 981, "2463": 981, "4337": 981, "7638": 981, "disappear": [981, 1027], "photogrammetr": 981, "hypothes": 981, "paradigm": 981, "cartographi": 981, "fischler": 981, "boll": 981, "sunglok": 981, "choi": 981, "taemin": 981, "wonpil": 981, "binom": 981, "infeas": [981, 988, 990], "k\u00e4rkk\u00e4inen": 981, "\u00e4yr\u00e4m\u00f6": 981, "h_": 981, "oarc": 981, "dae": 981, "bassett": 981, "jr": 981, "econometrica": 981, "econometr": 981, "portnoi": 981, "hare": 981, "tortois": 981, "paraboloid": 981, "w_3": 981, "w_4": 981, "w_5": 981, "z_1": 981, "z_2": 981, "z_3": 981, "z_4": 981, "z_5": 981, "streamlin": 981, "gotten": [981, 995], "necess": [982, 988], "strife": 982, "mother": 982, "baloo": 982, "song": 982, "jungl": 982, "rubric": 982, "defici": [982, 999], "hlle": 982, "revolv": 982, "belkin": 982, "niyogi": 982, "1373": 982, "1396": 982, "molecul": 982, "jk": 982, "delta_": 982, "c_1": 982, "disentangl": 982, "legitim": 982, "die": 982, "noisier": 982, "5415": 982, "brief": 983, "num_featur": [983, 1042], "quantum": 983, "nutshel": 983, "36787944": 983, "89483932": 983, "58364548": 983, "51341712": 983, "83822343": 983, "7768366": 983, "facil": 984, "equi": 984, "agnost": [984, 993], "cue": 984, "came": 984, "quicker": 984, "unpract": 984, "analogi": [984, 985], "top_k_accuraci": 985, "top_k_accuracy_scor": [985, 1039, 1041], "neg_brier_scor": [985, 1037], "f1_micro": [985, 1031], "f1_weight": [985, 1031], "f1_sampl": 985, "neg_log_loss": 985, "roc_auc_ovr": [985, 1037], "roc_auc_ovo": [985, 1037], "roc_auc_ovr_weight": [985, 1037], "roc_auc_ovo_weight": [985, 1037], "explained_variance_scor": [985, 1030, 1034, 1041], "max_error": [985, 1036], "neg_mean_squared_log_error": 985, "mean_squared_log_error": [985, 1034, 1040, 1044], "neg_root_mean_squared_log_error": 985, "neg_median_absolute_error": 985, "neg_mean_poisson_devi": 985, "neg_mean_gamma_devi": 985, "mean_gamma_devi": [985, 1037], "d2_pinball_scor": [985, 1041], "d2_tweedie_scor": [985, 1040], "invalidparametererror": 985, "_error": 985, "my_custom_loss_func": 985, "protocol": [985, 1030, 1043, 1044], "custom_scoring_funct": 985, "custom_scorer_modul": 985, "confusion_matrix_scor": 985, "test_tp": 985, "test_fn": 985, "untru": 985, "dividend": 985, "divisor": 985, "quotient": 985, "texttt": 985, "_class": 985, "youden": 985, "informed": 985, "mosley2013": 985, "kelleher2015": 985, "guyon2015": 985, "urbanowicz2015": 985, "escalant": 985, "escalera": 985, "maci\u00e0": [985, 1040, 1042], "saeed": 985, "statnikov": 985, "viega": 985, "chalearn": 985, "automl": [985, 1005], "ijcnn": 985, "moslei": 985, "ijcv": 985, "urbanowicz": 985, "exstrac": 985, "evol": 985, "intel": [985, 1005], "cohen_kappa_scor": [985, 1032, 1034], "4285714285714286": 985, "manning2008": 985, "everingham2010": 985, "davis2006": 985, "flach2015": 985, "everingham": 985, "gool": 985, "winn": 985, "pascal": 985, "voc": 985, "goadrich": 985, "y_l": 985, "_l": 985, "emptyset": 985, "f_beta": 985, "ne": [985, 988], "1738": 985, "matthews_corrcoef": [985, 1027, 1033, 1034, 1041], "t_k": [985, 1001], "ik": 985, "ki": 985, "kk": 985, "auroc": 985, "ht2001": 985, "fc2009": 985, "pd2000": 985, "f2006": 985, "f2001": 985, "inner_clf": 985, "c\u00e8sar": 985, "hernandez": 985, "orallo": 985, "modroiu": 985, "wikipediadet2017": 985, "martin1997": 985, "navratil2007": 985, "consult": 985, "encyclopedia": 985, "utc": 985, "php": [985, 1005], "detection_error_tradeoff": 985, "oldid": 985, "798982054": 985, "doddington": 985, "kamm": 985, "ordowski": 985, "przybocki": 985, "navractil": 985, "klusacek": 985, "acoust": 985, "icassp": 985, "honolulu": 985, "229": 985, "232": 985, "brier1950": 985, "p_i": [985, 988], "bella2012": 985, "flach2008": 985, "bella": 985, "hern\u00e1ndez": 985, "ram\u00edrez": 985, "quintana": 985, "khosrow": 985, "pour": 985, "hershei": 985, "edson": [985, 1032], "matsubara": 985, "dagstuhl": 985, "seminar": 985, "schloss": 985, "leibniz": 985, "zentrum": 985, "lr_": 985, "brenner": 985, "gefel": 985, "coverage_error": [985, 1031, 1041], "label_ranking_average_precision_scor": [985, 1031, 1035, 1036, 1042], "label_ranking_loss": [985, 1032], "grade": 985, "unalt": 985, "epsilon_i": 985, "925": [985, 1015], "7083": 985, "rsme": 985, "log_": 985, "growth": [985, 1032, 1033], "commod": 985, "mapd": 985, "2e6": 985, "2666": 985, "y_n": [985, 989, 999], "elicit": 985, "2500": 985, "mean_pinball_loss_95p": 985, "skill": 985, "mcfadden": 985, "d2_tweedie_score_15": 985, "d2_pinball_score_08": 985, "heteroschedast": 985, "homoschedast": 985, "pear": 986, "y_dens": 986, "y_spars": 986, "advoc": 986, "elabor": 986, "financ": 986, "f3": 986, "y3": 986, "multi_target_forest": 986, "75474165": 986, "147": 986, "03498585": 986, "03812219": 986, "12165031": 986, "12914884": 986, "46081961": 986, "8948621": 986, "44373091": 986, "88978285": 986, "62745778": 986, "02891072": 986, "48204257": 986, "03260883": 986, "34867495": 986, "52003279": 986, "92529176": 986, "25719016": 986, "84253": 986, "25193977": 986, "16443186": 986, "12274212": 986, "170388": 986, "80956739": 986, "16979946": 986, "72667194": 986, "50941682": 986, "50447799": 986, "149": [986, 1027], "37967282": 986, "15699552": 986, "72850319": 986, "prod_": 987, "downarrow": 987, "spite": 987, "famous": 987, "serious": 987, "flair": 987, "2_y": 987, "mu_i": 987, "sigma_i": [987, 995], "theta_i": 987, "cnb": 987, "mnb": 987, "inventor": 987, "alpha_i": [987, 1000], "cj": [987, 1030, 1031, 1032, 1033, 1034], "summat": [987, 989], "min_c": 987, "t_i": 987, "poorest": 987, "n_i": [987, 995], "satellit": 988, "kdt": 988, "farawai": 988, "invent": 988, "orthotrop": 988, "bentlei": 988, "1975": 988, "omohundro": 988, "characteris": 988, "unaffect": 988, "amort": 988, "cache_path": 988, "gettempdir": 988, "unsort": [988, 1028, 1031, 1035], "5807": 988, "nca_pip": 988, "96190476": 988, "limits_": 988, "lx": 988, "x_m": 989, "leftmost": 989, "w_1x_1": 989, "w_2x_2": 989, "w_mx_m": 989, "backpropag": 989, "b_1": 989, "b_2": 989, "z_l": 989, "dfrac": [989, 995], "nabla": 989, "deduct": 989, "rumelhart": 989, "jiquan": 989, "ngiam": 989, "chuan": 989, "yifan": 989, "carolin": 989, "suen": 989, "backprop": [989, 999], "lecun": [989, 999], "orr": [989, 999], "strai": 990, "v_ih_j": 990, "b_iv_i": 990, "c_jh_j": 990, "h_j": 990, "v_i": 990, "b_i": 990, "sum_h": 990, "fantasi": 990, "particl": 990, "thoroughli": 990, "hereund": 991, "1443": 991, "1471": 991, "outlying": 991, "h2009": 992, "g2015": 992, "absurd": 992, "m2019": 992, "bike": 992, "mc_clf": 992, "624": 992, "overlaid": 992, "obscur": [992, 1043], "cice": [992, 1041], "pd_": 992, "dx_c": 992, "footnot": [992, 1005], "opaqu": 993, "x_val": 993, "y_val": 993, "probe": 993, "204": [993, 998], "048": 993, "056": 993, "r_multi": 993, "081": 993, "029": 993, "1013": 993, "445": 993, "298": 993, "i_j": 993, "min_max_scal": 995, "x_train_minmax": 995, "x_test_minmax": 995, "max_abs_scal": 995, "x_train_maxab": 995, "x_test_maxab": 995, "unintention": 995, "semidefinit": [995, 1000], "scholkopf1998": 995, "1_": 995, "x_train_tran": 995, "x_test_tran": 995, "8pt": 995, "x_normal": 995, "firefox": 995, "chrome": 995, "safari": 995, "africa": 995, "dragon": 995, "lexicon": 995, "par": 995, "tau": 995, "iy_j": 995, "l_i": 995, "pargent": 995, "pfister": 995, "2671": 995, "2692": 995, "infant": 995, "kid": 995, "teen": 995, "adult": 995, "senior": [995, 1009], "citizen": 995, "retbin": 995, "x_1x_2": 995, "x_1x_3": 995, "x_2x_3": 995, "x_1x_2x_3": 995, "rung": 995, "eiler": 995, "marx": 995, "perperogl": 995, "sauerbrei": 995, "abrahamowicz": 995, "bmc": 995, "methodol": 995, "38629436": 995, "sixteenth": 997, "uai": 997, "craig": [997, 1030, 1035], "boutili": 997, "mois\u00e9": 997, "goldszmidt": 997, "morgan": [997, 1001, 1003], "kaufmann": [997, 1001, 1039], "ella": 997, "bingham": 997, "heikki": 997, "mannila": 997, "245": [997, 1029], "explic": 997, "3947": 997, "671": 997, "687": 997, "kenneth": [997, 1027, 1028, 1033, 1034, 1041, 1042], "12th": 997, "296": 997, "x_new_invers": 997, "x_new_again": 997, "delalleau": 998, "216": 998, "aistat": 998, "gatsbi": 998, "ucl": 998, "uk": [998, 1020], "fullpap": 998, "xi_i": 999, "slack": 999, "t_0": 999, "l\u00e9on": [999, 1041, 1042, 1043], "_init_t": 999, "basesgd": 999, "eta_0": 999, "_t": 999, "svmsgd": 999, "pegaso": 999, "srebro": 999, "tsuruoka": 999, "tsujii": 999, "ananiad": 999, "afnlp": 999, "lin_clf": 1000, "grasp": [1000, 1006], "sv": 1000, "builtin": 1000, "qp": 1000, "linear_svc": 1000, "gram_train": 1000, "gram_test": 1000, "zeta": 1000, "zeta_i": 1000, "textrm": [1000, 1018], "q_": 1000, "equiv": 1000, "reparameter": 1000, "wu": [1000, 1031, 1039], "weng": 1000, "1005": 1000, "rong": 1000, "aug": 1000, "1871": 1000, "1874": 1000, "ofmulticlass": 1000, "fitter": 1001, "pariti": 1001, "multiplex": 1001, "export_graphviz": [1001, 1032, 1034, 1040, 1042, 1043], "export_text": [1001, 1036, 1043], "dumont": 1001, "subwindow": 1001, "dichotomis": 1001, "quinlan": 1001, "multiwai": 1001, "proprietari": 1001, "ruleset": 1001, "q_m": 1001, "n_m": 1001, "t_m": 1001, "setminu": 1001, "mk": 1001, "_m": 1001, "ge0": 1001, "widetild": 1001, "tradition": 1001, "t_t": 1001, "eff": 1001, "predictive_analyt": 1001, "artwork": 1003, "fund": 1003, "spotifi": 1003, "betawork": 1003, "evernot": 1003, "aweb": 1003, "yhat": 1003, "rangespan": 1003, "birchbox": 1003, "bestofmedia": 1003, "phimeca": 1003, "howaboutw": 1003, "peerindex": 1003, "datarobot": 1003, "okcupid": 1003, "love": [1003, 1020], "publica": 1003, "machinali": 1003, "solido": 1003, "infonea": 1003, "dataiku": 1003, "otto": 1003, "zopa": 1003, "bnp": 1003, "pariba": 1003, "cardif": 1003, "post1": [1003, 1025], "foot": 1004, "gear": 1004, "neuroimag": [1004, 1009], "astronom": 1004, "pycon": 1004, "thirti": 1004, "nyc": [1004, 1009], "sister": 1005, "sklearn_panda": 1005, "sklearn_xarrai": 1005, "xarrai": 1005, "autoviml": 1005, "tpot": 1005, "featuretool": 1005, "neuraxl": 1005, "neat": [1005, 1027], "checkpoint": 1005, "funki": 1005, "saver": 1005, "evalml": 1005, "mlflow": 1005, "lifecycl": [1005, 1006], "neptun": 1005, "mlop": 1005, "sacr": 1005, "dtreeviz": 1005, "eli5": 1005, "yellowbrick": 1005, "deap": 1005, "evolutionari": 1005, "interchang": [1005, 1044], "skop": [1005, 1022], "jpmml": 1005, "porter": 1005, "transpil": 1005, "javascript": 1005, "m2cgen": 1005, "dart": 1005, "haskel": 1005, "rust": 1005, "treelit": 1005, "micromlgen": 1005, "microml": 1005, "microcontrol": 1005, "emlearn": 1005, "c99": 1005, "arima": 1005, "sktime": 1005, "skforecast": 1005, "tslearn": 1005, "hmmlearn": 1005, "pomegran": 1005, "crfsuit": 1005, "skorch": 1005, "scikera": 1005, "scikit_learn": 1005, "feder": 1005, "privaci": 1005, "homomorph": 1005, "encrypt": 1005, "mlxtend": 1005, "lego": 1005, "subsembl": 1005, "lightn": 1005, "sdca": 1005, "adagrad": 1005, "svrg": 1005, "gplearn": 1005, "genet": 1005, "multilearn": 1005, "seglearn": 1005, "fastfm": 1005, "kmode": 1005, "sphereclust": 1005, "mise": 1005, "giotto": 1005, "tda": 1005, "pymc": 1005, "censor": 1005, "lightfm": 1005, "openrec": 1005, "gensim": 1005, "nilearn": 1005, "neuro": 1005, "astroml": 1005, "astronomi": 1005, "dissemin": 1005, "chines": 1005, "persian": 1005, "spanish": 1005, "korean": 1005, "disclaim": 1005, "promis": 1006, "eleven": 1006, "incept": 1006, "scala": 1006, "reinforc": 1006, "era": 1006, "7242": 1006, "12147": 1006, "5523": 1006, "10733": 1006, "13902": [1006, 1037], "12800": 1006, "12866": 1006, "15550": 1006, "5853": 1006, "11805": 1006, "15319": 1006, "11977": 1006, "12852": [1006, 1037], "13911": [1006, 1037], "amput": 1006, "6284": 1006, "beginn": 1006, "priorit": [1006, 1034], "4497": 1006, "7646": 1006, "6425": 1006, "6424": 1006, "8480": 1006, "6231": 1006, "8100": 1006, "6599": 1006, "6715": 1006, "14582": 1006, "3855": 1006, "13227": 1006, "6323": 1006, "14180": [1006, 1038], "9173": 1006, "13146": [1006, 1037], "8614": 1006, "7608": 1006, "5082": 1006, "8243": 1006, "searchgrid": 1006, "6929": 1006, "__array_function__": [1006, 1037], "etl": [1006, 1009], "8370": 1006, "6451": 1006, "8157": 1006, "7382": 1006, "drift": 1006, "11047": [1006, 1037], "9326": 1006, "slep011": 1006, "1626": 1006, "10463": 1006, "id3": [1007, 1022], "cart": [1007, 1022], "touch": 1008, "savetxt": 1008, "cloneabl": 1008, "datafil": 1008, "printabl": 1008, "indispens": 1009, "stephen": [1009, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040], "simmon": 1009, "vp": 1009, "athena": 1009, "music": 1009, "bernhardsson": 1009, "pariet": [1009, 1027], "lear": 1009, "visag": 1009, "fantast": 1009, "startup": 1009, "bitli": 1009, "chartbeat": 1009, "digg": [1009, 1034], "poncho": 1009, "gilad": 1009, "lotan": 1009, "chief": 1009, "chat": 1009, "bread": 1009, "butter": 1009, "chaumond": [1009, 1035], "offic": 1009, "ayzenshtat": [1009, 1035], "undergrad": 1009, "professor": 1009, "hotel": 1009, "destin": 1009, "agent": 1009, "melani": [1009, 1034, 1035], "awesom": 1009, "stuff": 1009, "randomizedpca": [1009, 1027, 1029, 1030, 1032, 1033, 1034], "boston": 1009, "mdbecker": 1009, "pydata_2013": 1009, "ninja": 1009, "thorough": 1009, "notch": 1009, "production": 1009, "greg": [1009, 1033, 1034, 1036, 1037], "lamp": 1009, "founder": 1009, "prototyp": 1009, "jurgen": 1009, "director": 1009, "commerc": 1009, "inventori": 1009, "bertin": 1009, "mahieux": 1009, "invalu": 1009, "vijai": [1009, 1030], "surrog": 1009, "traine": 1009, "impress": 1009, "traffic": 1009, "tenur": 1009, "matchmak": 1009, "weitzenfeld": 1009, "tweet": 1009, "ferenc": 1009, "huszar": 1009, "shop": 1009, "ourselv": 1009, "jeremi": [1009, 1032, 1033, 1034, 1035, 1038, 1039], "achin": 1009, "ceo": 1009, "marketplac": 1009, "frid": [1009, 1030], "radar": 1009, "partnership": 1009, "lebourgeoi": 1009, "charron": [1009, 1030, 1031, 1038, 1039, 1040], "cornerston": 1009, "sheep": 1009, "featureforg": 1009, "rafael": [1009, 1028, 1029, 1031, 1034], "carrascosa": [1009, 1031], "law": 1009, "semiconductor": 1009, "fab": [1009, 1037, 1038], "bleed": 1009, "smartphon": 1009, "automobil": 1009, "trent": [1009, 1033], "mcconaghi": 1009, "rapid": 1009, "immens": 1009, "thorsten": 1009, "kranz": 1009, "coma": 1009, "dss": 1009, "douetteau": 1009, "b2c": 1009, "retail": 1009, "palladium": 1009, "rammig": [1009, 1033], "peer": 1009, "lend": 1009, "billion": 1009, "gbp": 1009, "grate": 1009, "vlasio": [1009, 1034], "vasilei": [1009, 1034], "petfood": 1009, "cocoa": 1009, "worldwid": 1009, "toolset": 1009, "equip": 1009, "fitzk": 1009, "sr": 1009, "fondat": 1009, "s\u00e9bastien": [1009, 1033, 1035], "conort": 1009, "salmon": 1011, "nine": 1011, "sentiment": 1012, "cli": 1012, "doctest_mod": 1012, "hardest": 1013, "tightli": 1014, "knit": 1014, "x_fold": 1015, "array_split": 1015, "y_fold": 1015, "934": 1015, "train_indic": 1015, "test_indic": 1015, "963": 1015, "930": 1015, "96388889": 1015, "92222222": 1015, "9637883": 1015, "93036212": 1015, "96578289": 1015, "92708922": 1015, "96681476": 1015, "96362897": 1015, "93192644": 1015, "0077": 1015, "943": 1015, "00375": 1015, "lfw_": 1016, "_lfw": 1016, "gerhard_schroed": 1016, "donald_rumsfeld": 1016, "tony_blair": 1016, "colin_powel": 1016, "george_w_bush": 1016, "estimated_param_": 1017, "iris_x": 1018, "iris_i": 1018, "iris_x_train": 1018, "iris_y_train": 1018, "iris_x_test": 1018, "iris_y_test": 1018, "pave": 1018, "paltri": 1018, "exabyt": 1018, "30349955": 1018, "63931533": 1018, "53060544": 1018, "73698041": 1018, "13170937": 1018, "81458798": 1018, "84845219": 1018, "60648906": 1018, "51961675": 1018, "09517222": 1018, "585": 1018, "5854": 1018, "5855": 1018, "occam": 1018, "razor": 1018, "best_alpha": [1018, 1027], "025118864315095794": 1018, "508": 1018, "knew": 1019, "taxonomist": 1019, "face_compress": 1019, "x_approx": 1019, "images_approx": 1019, "18565811e": 1019, "19346747e": 1019, "43026679e": 1019, "text_analyt": 1020, "skeleton": [1020, 1030], "sklearn_tut_workspac": 1020, "cp": 1020, "work_directori": 1020, "tutorial_hom": 1020, "fetch_data": 1020, "lang": 1020, "newsweed": 1020, "netnew": 1020, "bydat": 1020, "twenty_train": 1020, "holder": 1020, "2257": 1020, "sd345": 1020, "collier": 1020, "laserjet": 1020, "iii": [1020, 1041], "hampton": 1020, "4gb": 1020, "count_vect": 1020, "x_train_count": 1020, "35788": 1020, "4690": 1020, "downscal": 1020, "tf_transform": 1020, "x_train_tf": 1020, "tfidf_transform": 1020, "x_train_tfidf": 1020, "na\u00efv": 1020, "docs_new": 1020, "opengl": 1020, "x_new_count": 1020, "x_new_tfidf": 1020, "text_clf": 1020, "twenty_test": 1020, "docs_test": 1020, "8348": 1020, "9101": [1020, 1035], "1502": 1020, "tfidf__use_idf": 1020, "searcher": 1020, "gs_clf": 1020, "workspac": 1020, "fear": 1020, "fire": 1020, "exercise_xx_script": 1020, "arg1": 1020, "arg2": 1020, "arg3": 1020, "mortem": 1020, "exercise_01_language_train_model": 1020, "exercise_02_senti": 1020, "movie_review": 1020, "txt_sentoken": 1020, "cpickl": 1020, "subtleti": 1022, "subscrib": 1025, "gzip": 1027, "bzip2": 1027, "decompress": 1027, "auc_scor": [1027, 1029], "kernc": [1027, 1041, 1042], "led": 1027, "probabilisticpca": [1027, 1030], "hmm": [1027, 1028, 1029, 1030, 1032], "gaussianhmm": 1027, "multinomialhmm": 1027, "n_gram_rang": 1027, "alexi": [1027, 1030, 1031, 1034], "mignon": [1027, 1030, 1031, 1034], "subhodeep": [1027, 1028, 1029], "moitra": [1027, 1028, 1029], "yannick": [1027, 1029], "schwartz": [1027, 1029, 1041], "duckworth": 1027, "benediktsson": [1027, 1028, 1029], "marko": [1027, 1036, 1037, 1043], "burjek": 1027, "pinto": 1027, "abraham": [1027, 1028, 1033, 1037], "hoenig": 1027, "flyingimmidev": 1027, "francoi": [1027, 1040], "savard": 1027, "hann": 1027, "schulz": 1027, "welind": 1027, "companioni": 1027, "brandyn": 1027, "bussonni": [1027, 1039], "matthia": [1027, 1029, 1030, 1033, 1034, 1035, 1039, 1042], "pierr": [1027, 1035, 1036, 1038, 1040, 1042], "astolfi": 1027, "huiginn": 1027, "goodman": [1027, 1032], "ludwig": 1027, "schwardt": 1027, "hervieu": 1027, "sergio": [1027, 1029, 1030, 1039, 1042], "medina": [1027, 1029], "sheerman": 1027, "buguen": 1027, "seq_dataset": [1027, 1037], "weight_vector": [1027, 1037], "reuben": 1027, "costin": 1027, "_basehmm": 1027, "neighborsregressor": 1027, "gone": [1027, 1028], "vbgmm": [1027, 1031, 1033], "_pvalu": 1027, "charset": [1027, 1029], "test_fract": 1027, "train_fract": 1027, "198": 1027, "marek": 1027, "fcostin": 1027, "adrien": 1027, "gaidon": 1027, "joona": 1027, "sillanp\u00e4\u00e4": 1027, "mccarthi": [1027, 1035], "roi": [1027, 1041], "hyunjin": 1027, "ibay": 1027, "scheidegg": 1027, "clair": 1027, "revillet": 1027, "conrad": [1027, 1028, 1042], "meng": [1027, 1028, 1031, 1033, 1034], "xinfan": [1027, 1028, 1031], "udi": 1027, "weinsberg": 1027, "janso": 1027, "palafox": 1027, "overwrite_": 1027, "copy_": 1027, "buffer_mb": 1027, "sparse_encode_parallel": 1027, "accident": [1027, 1031, 1036], "basedictionarylearn": 1027, "sparsecodingmixin": 1027, "fast_svd": 1027, "arnold": [1027, 1028], "bala": [1027, 1030], "subrahmanyam": [1027, 1030], "varanasi": [1027, 1030], "draxu": 1027, "eickenberg": [1027, 1029, 1030, 1031, 1032], "bogdan": 1027, "trach": 1027, "f\u00e9lix": [1027, 1029, 1030, 1031, 1035], "antoin": [1027, 1029, 1030, 1031, 1034], "fortin": [1027, 1029, 1030, 1031], "manuel": [1027, 1031, 1035, 1036, 1039, 1040], "caicedo": 1027, "carvaj": 1027, "tiziano": 1027, "zito": [1027, 1040], "jean": [1027, 1030, 1031, 1032, 1033, 1034, 1040], "kossaifi": [1027, 1031, 1032], "thumbnail": 1027, "mldata": [1027, 1035], "pietro": [1027, 1030], "berk": 1027, "macosx": 1027, "xarg": 1027, "bscikit": 1027, "cross_val": 1027, "bcross_val": 1027, "lurk": 1027, "l1_distanc": 1027, "387": 1027, "andi": [1027, 1034], "amit": [1027, 1041, 1042], "salvator": [1027, 1041, 1042], "masecchia": 1027, "schut": 1027, "metaireau": [1027, 1030], "bryan": [1027, 1030, 1036, 1037, 1040], "silverthorn": 1027, "minwoo": 1027, "luca": [1027, 1037, 1038, 1039, 1040], "wiman": 1027, "schl\u00fcter": [1027, 1035], "malet": 1027, "miott": [1027, 1030], "feth": 1027, "arezki": 1027, "yamin": 1027, "notes_neighbor": 1027, "netbsd": 1027, "kamel": 1027, "ibn": 1027, "hassen": 1027, "derouich": 1027, "virgilefritsch": 1027, "example_gaussian_process_plot_gp_regress": 1027, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1027, "tast": 1027, "2x": 1027, "10x": 1027, "200x": 1027, "ann": [1027, 1039, 1041], "laur": 1027, "fouqu": 1027, "ronan": [1027, 1030, 1035], "amicel": [1027, 1030], "osendorf": [1027, 1028], "gmmhmm": [1027, 1028], "latex": 1027, "mlcomp": 1027, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1027, "pybrain": 1027, "262": 1027, "116": 1027, "rokem": [1027, 1033], "100x": [1027, 1030], "obsolet": [1027, 1043], "attrselect": 1027, "unmaintain": 1027, "lite": 1027, "filo": [1027, 1030], "mailhot": 1027, "huard": 1027, "dave": [1027, 1034, 1035, 1041, 1043], "morril": 1027, "schofield": 1027, "travi": [1027, 1035], "oliph": 1027, "pearu": 1027, "peterson": [1027, 1029], "0d": 1028, "marchman": [1028, 1029], "hrishikesh": [1028, 1029], "huilgolkar": [1028, 1029], "bastiaan": [1028, 1029], "diego": [1028, 1029], "molla": [1028, 1029], "cunha": [1028, 1029], "almeida": [1028, 1029, 1040], "rolando": [1028, 1029], "espinoza": [1028, 1029], "fuent": [1028, 1029], "beauchamp": [1028, 1031], "longstand": [1028, 1034], "shaun": 1028, "jackman": 1028, "winterman": 1028, "seberg": 1028, "n_atom": 1028, "label_propag": 1028, "learn_rat": 1028, "basegradientboost": 1028, "mean_square_error": 1028, "gmm_": 1028, "eig_tol": 1028, "chunk_siz": 1028, "zero_one_scor": 1028, "117": 1028, "aymer": 1028, "masurel": 1028, "syhw": [1028, 1029], "corei": [1028, 1035, 1036], "lynch": [1028, 1034], "shu": [1028, 1031, 1035], "tadej": [1028, 1029], "jane\u017e": [1028, 1029], "caje": 1028, "tiago": [1028, 1032], "nune": 1028, "cow": 1028, "anz": 1028, "jauvin": 1028, "jacqu": [1028, 1030], "kvam": [1028, 1030], "doug": [1028, 1029, 1039], "coleman": [1028, 1029], "dickerson": 1028, "approximateident": 1028, "veronda": 1028, "matti": [1028, 1031, 1032], "lyra": [1028, 1031, 1032], "mikhail": [1028, 1029, 1030, 1033, 1034, 1042, 1043], "korobov": [1028, 1029, 1030, 1033, 1034], "alejandro": [1028, 1033, 1044], "weinstein": 1028, "deil": [1028, 1038, 1039], "nizhibitski": 1028, "coelho": [1028, 1030, 1031, 1035], "miroslav": [1028, 1029, 1032], "batchkarov": [1028, 1032], "pavel": [1028, 1036], "bob": [1028, 1034], "dengemann": 1028, "emanuel": 1028, "x006": 1028, "justin": [1029, 1035, 1039], "stochastic_gradi": [1029, 1030, 1036], "crombach": 1029, "sheet": 1029, "jaccard_similarity_scor": [1029, 1031, 1036], "jochen": 1029, "wersd\u00f6rfer": 1029, "sinayev": 1029, "unpleas": 1029, "novic": 1029, "tini": [1029, 1042], "hyperlink": 1029, "luessi": 1029, "philipp": [1029, 1030, 1033, 1042], "gervai": [1029, 1030], "cleverless": 1029, "nosetest": 1029, "compute_import": 1029, "return_model": [1029, 1031], "itergrid": 1029, "tacitli": 1029, "charset_error": 1029, "precompute_gram": 1029, "2224": 1029, "jim": 1029, "holmstr\u00f6m": 1029, "steven": [1029, 1030, 1032, 1034, 1035, 1040, 1042, 1043], "gryze": [1029, 1032], "sergeyf": 1029, "ben": [1029, 1030, 1031, 1034, 1035, 1036, 1039], "speer": 1029, "federico": [1029, 1030, 1035, 1036, 1041], "vaggi": [1029, 1030], "raul": [1029, 1030], "garreta": [1029, 1030], "gei": 1029, "flaxman": [1029, 1031], "denton": 1029, "cockburn": 1029, "dougal": [1029, 1031, 1032, 1034, 1035, 1036, 1037], "sutherland": [1029, 1031, 1032, 1034, 1035, 1036, 1037], "ian": [1029, 1031, 1036, 1037, 1039, 1042, 1043], "ozsvald": 1029, "johann": [1029, 1030, 1035, 1037, 1038, 1041], "sch\u00f6nberger": [1029, 1030], "szabo": [1029, 1030], "roland": [1029, 1030], "imran": [1029, 1030, 1031], "haqu": [1029, 1030, 1031], "karayev": 1029, "jamestwebb": [1029, 1030], "abhijeet": 1029, "kolh": 1029, "velkov": 1029, "fazlul": 1029, "shahriar": 1029, "felix": [1029, 1034, 1035, 1037, 1039, 1040, 1041], "brockherd": 1029, "harikrishnan": 1029, "jack": [1029, 1032, 1040, 1041, 1042, 1043], "hale": [1029, 1041], "jakemick": 1029, "mcdermott": 1029, "zwinck": 1029, "vredevoogd": [1029, 1030], "pati": 1029, "ekman": [1029, 1033], "shubernetskii": 1029, "naoki": [1029, 1039], "orii": 1029, "seamu": 1029, "absher": 1029, "feldman": [1029, 1034, 1035, 1036, 1037], "stefano": 1029, "lattarini": 1029, "steve": [1029, 1031, 1035, 1040, 1042], "koch": [1029, 1035, 1036, 1038, 1039], "sturla": 1029, "molden": 1029, "jarosch": 1029, "nikolai": [1030, 1031, 1032, 1033, 1035, 1036, 1041, 1043], "mayorov": [1030, 1031, 1032, 1033], "msvc": 1030, "mingw": 1030, "resourcewarn": 1030, "calvin": [1030, 1031], "gile": [1030, 1031], "billing": [1030, 1031, 1032], "safe_realloc": 1030, "bradshaw": [1030, 1031, 1034], "pico": [1030, 1031], "restor": [1030, 1035, 1036, 1037, 1038, 1042], "raff": 1030, "__array__": [1030, 1037], "jeffrei": [1030, 1033], "blackburn": [1030, 1033], "danni": [1030, 1031, 1032], "sullivan": [1030, 1031, 1032], "wignal": [1030, 1031, 1037, 1038], "grid_tograph": 1030, "gracefulli": [1030, 1031], "novak": 1030, "tulloch": [1030, 1031], "wardagglomer": 1030, "wardclust": 1030, "mean_l1_ratio": 1030, "phlypo": 1030, "312": 1030, "148": 1030, "bommarito": [1030, 1031], "brook": [1030, 1031, 1039], "osborn": [1030, 1031], "eltermann": 1030, "bwignal": 1030, "ankit": [1030, 1037, 1039, 1041], "agraw": [1030, 1035, 1041, 1042], "carei": [1030, 1031, 1032, 1033, 1034], "ugurthemast": [1030, 1031], "schumach": [1030, 1031, 1032], "baptist": [1030, 1038], "lagard": 1030, "rajat": [1030, 1037], "khanduja": 1030, "pascual": 1030, "ignacio": 1030, "rossi": 1030, "s\u00e4ger": [1030, 1033], "ilambharathi": [1030, 1031], "kanniah": [1030, 1031], "sdenton4": 1030, "alyssa": [1030, 1034], "amo": 1030, "waterland": 1030, "murad": 1030, "maud": 1030, "karol": 1030, "pysniak": 1030, "cgohlk": [1030, 1031], "jacobsen": 1030, "collin": 1030, "kaushik94": 1030, "erwin": 1030, "marsi": 1030, "csytraci": 1030, "lk": 1030, "laurent": [1030, 1031, 1034, 1035, 1042, 1043], "direr": [1030, 1031, 1034, 1035], "shilt": 1030, "yoshiki": [1030, 1033], "v\u00e1zquez": 1030, "yung": [1030, 1033], "siang": 1030, "liau": 1030, "abhishek": [1030, 1031, 1037, 1041, 1043], "thakur": [1030, 1031], "rohit": [1030, 1031, 1035, 1036], "sivaprasad": [1030, 1031], "amormachin": 1030, "oscar": [1030, 1034], "carlsson": 1030, "nanta": 1030, "nardelli": 1030, "jess010": 1030, "kowalski87": 1030, "clegg": 1030, "ralf": [1030, 1033, 1034, 1042, 1043], "gommer": [1030, 1033, 1034, 1042, 1043], "rupesh": 1030, "srivastava": [1030, 1042], "ryan": [1030, 1033, 1035, 1036], "skipper": [1030, 1032, 1033], "seabold": [1030, 1032, 1033], "stefan": [1030, 1031, 1035, 1037], "walt": [1030, 1031, 1035], "riddel": [1030, 1032, 1034], "valentin": [1030, 1032, 1042, 1043], "haenel": 1030, "myer": [1030, 1034], "yoni": 1030, "meshulam": 1030, "yuri": [1030, 1032], "zaytsev": 1030, "adrinjalali": [1030, 1039], "ai8rahim": 1030, "alemagnani": 1030, "chalmerlow": 1030, "dziki": 1030, "dro\u017cd\u017c": 1030, "matrixorz": 1030, "popo": 1030, "samuela": 1030, "fran\u00e7oi": 1030, "boulogn": 1030, "ethan": [1030, 1033], "guilherm": 1030, "trein": 1030, "heuer": 1030, "ivicajov": 1030, "rouli": 1030, "eduardo": [1030, 1032, 1040, 1041], "ari\u00f1o": 1030, "rubia": 1030, "jell": 1030, "zijlstra": 1030, "eddi": 1030, "jansson": [1030, 1042], "ca\u00f1ardo": 1030, "alastuei": 1030, "joseph": [1030, 1031, 1032, 1033, 1039, 1041, 1042], "perla": 1030, "ricardo": [1030, 1040, 1041], "kenta": 1030, "sato": 1030, "medri": 1030, "luce": 1030, "pierron": 1030, "danielweitzenfeld": 1030, "thompson": [1030, 1042, 1043], "brett": [1030, 1032, 1033, 1034, 1035, 1042], "feurer": [1030, 1035], "earl": 1030, "hank": 1030, "orr\u00f9": 1030, "lunt": 1030, "kearn": 1030, "pawe\u0142": [1030, 1034, 1039, 1040], "mandera": 1030, "zambelli": 1030, "staubda": 1030, "dedupl": 1031, "heilman": [1031, 1032], "precompute_dist": [1031, 1038], "lshforest": [1031, 1034], "qiang": 1031, "luo": 1031, "clemen": 1031, "brunner": 1031, "matteo": [1031, 1033, 1041], "visconti": 1031, "oleggio": 1031, "castello": 1031, "linkage_tre": 1031, "jatin": [1031, 1033], "shah": [1031, 1032, 1033, 1039], "saurabh": [1031, 1032, 1033, 1034, 1035, 1039], "jha": [1031, 1037, 1041], "blanchard": [1031, 1032], "michal": [1031, 1034, 1040, 1041], "romaniuk": 1031, "gilmor": 1031, "stapl": 1031, "hedyati": 1031, "antoni": [1031, 1033, 1039, 1042], "parel": 1031, "herv\u00e9": 1031, "bredin": 1031, "hasil": 1031, "sharma": [1031, 1033, 1035, 1036, 1038, 1039, 1041], "ducktyp": 1031, "download_20newsgroup": 1031, "friend": 1031, "cathi": [1031, 1037], "deng": [1031, 1032, 1033], "dawson": 1031, "garret": 1031, "hanna": [1031, 1032, 1038], "wallach": [1031, 1032], "yan": [1031, 1039], "artem": [1031, 1034], "sobolev": 1031, "fit_ovr": 1031, "predict_ovr": 1031, "predict_proba_ovr": 1031, "fit_ovo": 1031, "predict_ovo": 1031, "fit_ecoc": 1031, "predict_ecoc": 1031, "lamond": 1031, "outweigh": 1031, "thresh": 1031, "akshai": [1031, 1034, 1039], "akshayah3": 1031, "aldrian": 1031, "obaja": 1031, "ander": [1031, 1037], "aagaard": 1031, "cranenburgh": 1031, "walker": 1031, "banilo": [1031, 1032], "barmalei": [1031, 1032], "benedikt": 1031, "koehler": 1031, "bhsu": 1031, "bori": [1031, 1039, 1043], "feld": [1031, 1043], "borja": 1031, "ayerdi": 1031, "boyuan": [1031, 1032, 1033], "brent": [1031, 1035, 1036], "pedersen": [1031, 1043], "celeo": 1031, "chebee7i": 1031, "stade": 1031, "schuldt": 1031, "christof": [1031, 1032], "angermuel": [1031, 1032], "daiki": 1031, "aminaka": 1031, "danfrankj": 1031, "dmitrij": 1031, "milajev": 1031, "floydsoft": 1031, "garrett": 1031, "gpassino": 1031, "gwulf": [1031, 1032], "hampu": 1031, "bengtsson": 1031, "harri": [1031, 1033, 1039, 1040], "mavroforaki": [1031, 1033], "helder": [1031, 1040, 1041], "herv": 1031, "hugu": 1031, "salamin": 1031, "ism": 1031, "dlabal": 1031, "javier": 1031, "l\u00f3pez": [1031, 1035, 1036, 1039], "pe\u00f1a": 1031, "jdcaballero": 1031, "jeff": [1031, 1033, 1040, 1041], "hammerbach": 1031, "helmu": 1031, "kaicheng": 1031, "markham": [1031, 1038, 1039], "lagacheri": 1031, "leepei": 1031, "loic": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "estev": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "luka": [1031, 1038], "michelbach": 1031, "krell": [1031, 1033], "ku": [1031, 1032], "mateusz": [1031, 1038, 1039, 1044], "susik": 1031, "mehdi": [1031, 1040], "cherti": 1031, "mlg": 1031, "montecchio": 1031, "okal": 1031, "billi": 1031, "\u00f3scar": [1031, 1032, 1033, 1034], "n\u00e1jera": [1031, 1032, 1033, 1034], "puggioni": 1031, "pratap": [1031, 1034, 1041], "vardhan": 1031, "pvnguyen": 1031, "queqichao": 1031, "rahiel": 1031, "kasim": 1031, "mason": 1031, "saket": [1031, 1032, 1039], "choudhari": [1031, 1032, 1041, 1043], "sam": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042], "nichol": 1031, "sethdandridg": 1031, "sinhrk": [1031, 1032], "snuderl": 1031, "ott": 1031, "tjoa": 1031, "swu": 1031, "zimmer": [1031, 1041], "tejesh95": 1031, "terrycojon": 1031, "delteil": 1031, "toma": 1031, "kazmar": 1031, "trevorstephen": [1031, 1033], "tttthomasssss": 1031, "tzu": 1031, "kuo": 1031, "ugurcaliskan": 1031, "vinayak": [1031, 1032, 1033, 1035, 1036, 1042, 1043], "mehta": [1031, 1032, 1033, 1035, 1036, 1037, 1038, 1042, 1043], "vjacheslav": 1031, "murashkin": 1031, "wadawson": 1031, "x0l": 1031, "6147": 1032, "presort": [1032, 1037], "5857": 1032, "mcculloh": [1032, 1033], "6258": 1032, "giorgio": [1032, 1033, 1034], "patrini": [1032, 1033, 1034], "joe": 1032, "jevnik": 1032, "labelkfold": [1032, 1033], "labelshufflesplit": [1032, 1033], "mcfee": [1032, 1033], "3659": 1032, "4738": 1032, "projectedgradientnmf": 1032, "nls_max_it": 1032, "erick": 1032, "moodi": 1032, "4025": 1032, "mean_shift": [1032, 1035], "martino": 1032, "sorbaro": 1032, "cori": 1032, "konstantin": [1032, 1033, 1034], "shmelkov": 1032, "backlink": 1032, "jaidev": 1032, "deshpand": [1032, 1033], "dictlearn": 1032, "kashif": 1032, "rasul": [1032, 1034, 1035], "galvez": 1032, "sonni": 1032, "hu": [1032, 1035, 1037], "santi": [1032, 1034, 1035], "villalba": [1032, 1035, 1039], "5186": 1032, "stolbunov": 1032, "booster": 1032, "graham": [1032, 1033], "clenaghan": [1032, 1033], "clyde": 1032, "subproblem": 1032, "forestclassifi": 1032, "ankur": [1032, 1043], "ankan": 1032, "henri": [1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042], "5431": 1032, "buddha": 1032, "prakash": [1032, 1034, 1040], "5182": 1032, "lamb": [1032, 1040], "5282": 1032, "5355": 1032, "5360": 1032, "4478": 1032, "5337": 1032, "4362": 1032, "5495": 1032, "elvi": [1032, 1033, 1034], "dohmatob": [1032, 1033, 1034], "data_min": 1032, "data_max": 1032, "data_rang": 1032, "_learntselectormixin": 1032, "gradientboost": 1032, "metatransfom": 1032, "load_lfw_pair": 1032, "wardagglom": 1032, "residues_": 1032, "indicator_matrix_": 1032, "adithya": 1032, "ganesh": 1032, "akitti": 1032, "alexei": 1032, "grigorev": 1032, "ali": [1032, 1035, 1036, 1039, 1040, 1042, 1043], "baharev": 1032, "ando": 1032, "saaba": 1032, "anish": [1032, 1033], "anthoni": [1032, 1034, 1035], "erling": 1032, "rouvinen": 1032, "rachez": [1032, 1033], "benjaminirv": 1032, "naul": [1032, 1033], "gohlk": 1032, "bourguignat": 1032, "cindi": [1032, 1040], "sridharan": 1032, "kronovet": 1032, "data1010": 1032, "dotson": 1032, "djipei": [1032, 1033], "dmitri": [1032, 1034, 1035, 1036, 1040, 1043], "spikhalskii": 1032, "donn": 1032, "duart": [1032, 1040, 1042], "caro": 1032, "larson": [1032, 1036, 1037, 1039, 1041], "fernando": [1032, 1039], "carrillo": 1032, "eckert": 1032, "zalkow": 1032, "ganiev": [1032, 1033, 1034], "ibraim": [1032, 1033, 1034], "giorgiop": 1032, "gryllo": [1032, 1035], "prokopi": [1032, 1035], "hsuan": 1032, "tien": 1032, "ishank": [1032, 1033, 1034], "gulati": [1032, 1033, 1034], "jeffrey04": [1032, 1033], "jfraj": 1032, "jiali": 1032, "mei": [1032, 1037], "kirkham": [1032, 1033, 1035], "wittenau": 1032, "loyal": 1032, "jungkook": 1032, "park": [1032, 1037, 1039, 1042, 1043], "kamalakerdadi": [1032, 1033], "kyler": 1032, "lilian": [1032, 1033, 1044], "besson": [1032, 1033], "tiao": [1032, 1033], "marktab": 1032, "spacek": 1032, "martinbpr": [1032, 1033], "martinosorb": 1032, "maryanmorel": [1032, 1033], "masafumi": 1032, "oyamada": 1032, "krump": 1032, "kolganov": 1032, "mbilling": 1032, "mhg": 1032, "patterson": 1032, "omer": 1032, "katz": [1032, 1039, 1040], "pauli": 1032, "virtanen": 1032, "fischer": [1032, 1033], "pianomania": 1032, "preston": [1032, 1033, 1034], "parri": [1032, 1033, 1034], "rohan": [1032, 1033, 1035, 1036, 1040], "ramanath": 1032, "bansod": [1032, 1033, 1034], "scls19fr": 1032, "saeger": [1032, 1033, 1034], "shivan": 1032, "sornarajah": 1032, "simonpl": 1032, "sseg": 1032, "hoover": [1032, 1033, 1034, 1036], "seguin": 1032, "theodor": 1032, "vasiloudi": 1032, "freita": [1032, 1034, 1035], "pereira": [1032, 1035, 1036], "timothi": [1032, 1040], "hopper": 1032, "tokoroten": 1032, "vstolbunov": 1032, "wangz10": 1032, "yucheng": 1032, "zhauniarovich": 1032, "zac": 1032, "stewart": [1032, 1037, 1040, 1042], "zhai_pro": 1032, "zichen": 1032, "7946": 1033, "8355": 1033, "9010": 1033, "8040": 1033, "9149": 1033, "aman": [1033, 1034, 1035, 1041, 1042], "dalmia": [1033, 1034, 1035], "nate": [1033, 1034, 1040], "guerin": [1033, 1034], "lebedev": [1033, 1034], "utilis": 1033, "6497": 1033, "7724": 1033, "bing": [1033, 1034], "explained_variance_ratio": 1033, "7632": 1033, "jpfrancoia": [1033, 1034], "7676": 1033, "moham": [1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "affan": 1033, "7756": 1033, "7786": 1033, "srivatsan": [1033, 1034, 1037], "7799": 1033, "7490": [1033, 1034], "6282": 1033, "7301": 1033, "6178": 1033, "7680": 1033, "n_iters_": 1033, "7553": 1033, "ekaterina": [1033, 1034, 1035, 1036, 1038, 1043], "krivich": [1033, 1034, 1036], "5874": 1033, "7593": 1033, "7594": 1033, "7660": 1033, "7750": 1033, "7732": 1033, "artsion": 1033, "lieu": [1033, 1034], "grid_scores_": [1033, 1039, 1040], "leaveonelabelout": 1033, "leaveplabelout": 1033, "plural": 1033, "mean_tim": 1033, "std_time": 1033, "3204": 1033, "5291": 1033, "sounder": 1033, "7295": 1033, "5299": 1033, "bravi": 1033, "fouchet": 1033, "calinski_harabaz_scor": [1033, 1035], "harabaz": 1033, "6586": 1033, "4294": 1033, "6667": 1033, "6954": 1033, "unveil": 1033, "yelit": 1033, "basebag": [1033, 1035], "staub": 1033, "5805": 1033, "5251": 1033, "imacul": 1033, "1000x": 1033, "arfa": 1033, "6691": 1033, "6913": 1033, "5762": 1033, "utkarsh": [1033, 1034, 1035, 1036], "upadhyai": [1033, 1034, 1035, 1036], "6846": 1033, "5929": 1033, "podshumok": [1033, 1034], "6173": 1033, "ryad": 1033, "zenin": 1033, "devashish": 1033, "asish": [1033, 1034], "dowl": 1033, "6697": 1033, "ori": 1033, "ziv": 1033, "sear": 1033, "merritt": 1033, "7325": 1033, "7239": 1033, "hong": [1033, 1035, 1039, 1040, 1041, 1043], "guangguo": 1033, "jensen": [1033, 1039], "7419": 1033, "gregori": [1033, 1037, 1038, 1039, 1040], "stupp": [1033, 1034], "bernardo": 1033, "stein": 1033, "sparse_func": [1033, 1039], "incr_mean_variance_axi": [1033, 1039], "7049": 1033, "7152": 1033, "load_boston": [1033, 1035, 1040], "7154": 1033, "manvendra": [1033, 1034], "singh": [1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "5540": 1033, "7248": 1033, "6764": 1033, "wenhua": 1033, "6817": 1033, "6902": 1033, "leonieborn": 1033, "5141": 1033, "4995": 1033, "5012": 1033, "_transform_select": 1033, "7194": 1033, "caio": [1033, 1035, 1037], "oliveira": [1033, 1035, 1037, 1041], "6182": 1033, "6121": 1033, "6472": 1033, "7350": 1033, "russel": [1033, 1034], "smith": [1033, 1034, 1035, 1036, 1037, 1039], "7159": 1033, "yichuan": [1033, 1034], "5460": 1033, "document_clust": 1033, "7353": 1033, "_search": 1033, "_check_param_grid": 1033, "xrang": 1033, "7323": 1033, "viacheslav": 1033, "kovalevskyi": 1033, "7101": 1033, "residual_metr": 1033, "6651": 1033, "reorgan": 1033, "7187": 1033, "7260": 1033, "sebasti\u00e1n": 1033, "vanrel": 1033, "leaveplabelsout": 1033, "6660": 1033, "unprefix": 1033, "7261": 1033, "aditya": [1033, 1035, 1036, 1037, 1041, 1042], "joshi": [1033, 1035, 1041, 1044], "loginov": 1033, "minyushkin": 1033, "rudi": 1033, "abadi": [1033, 1034], "saint": 1033, "alexfield": 1033, "alvaro": [1033, 1035], "ulloa": 1033, "alyssaq": 1033, "amlan": 1033, "kar": 1033, "giessel": 1033, "jackson": [1033, 1034, 1036], "murrai": [1033, 1034], "arafat": 1033, "archit": 1033, "asnt": 1033, "b0noi": 1033, "behzad": 1033, "tabibian": 1033, "kratzwald": 1033, "bhargav": 1033, "mangipudi": 1033, "blakeflei": 1033, "brandon": [1033, 1034, 1041, 1042], "carter": [1033, 1034, 1042], "camilo": 1033, "lamu": 1033, "carol": [1033, 1034], "Willing": [1033, 1034], "cass": 1033, "ceshin": 1033, "truong": 1033, "codevig": 1033, "shiebler": 1033, "hnyk": [1033, 1034], "elli": [1033, 1036], "nicholson": [1033, 1034, 1035], "thaler": 1033, "warshaw": 1033, "lasagna": 1033, "deborah": [1033, 1034], "definitelyuncertain": 1033, "didi": [1033, 1034, 1035, 1036], "zev": [1033, 1034, 1035, 1036], "dsquareindia": 1033, "edwinensa": 1033, "elia": 1033, "kuth": 1033, "fabio": 1033, "ticconi": 1033, "fisach": 1033, "donovan": 1033, "ghg": 1033, "giovanni": [1033, 1035], "cherubin": 1033, "lanzani": 1033, "glenn": 1033, "qian": [1033, 1038], "mohr": 1033, "govin": 1033, "vatsan": 1033, "reda": 1033, "gustav": 1033, "m\u00f6rtberg": 1033, "halwai": 1033, "harizo": [1033, 1034], "rajaona": [1033, 1034], "hashcode55": 1033, "hdmetor": 1033, "hobson": 1033, "lane": 1033, "bown": 1033, "igor": [1033, 1034, 1040], "andriushchenko": [1033, 1034], "inki": 1033, "hwang": 1033, "isaac": [1033, 1034, 1036, 1037, 1044], "sijaranamu": 1033, "iver": 1033, "jordal": 1033, "jackmartin": 1033, "fiedler": 1033, "routlei": 1033, "zike": 1033, "janna": 1033, "brettingen": 1033, "jarfa": 1033, "laska": 1033, "jblackburn": 1033, "levesqu": 1033, "hintz": 1033, "jeremynixon": 1033, "jeroen": 1033, "jessica": 1033, "jill": 1033, "j\u00eann": 1033, "vie": 1033, "jia": 1033, "jiyuan": 1033, "johannah": 1033, "boersma": 1033, "moeller": 1033, "striebel": [1033, 1034], "joncral": 1033, "jordi": 1033, "munoz": [1033, 1039], "jrfiedler": 1033, "juliankahnert": 1033, "juliathebrav": 1033, "kaichogami": 1033, "lyon": [1033, 1034], "kingjr": 1033, "kjell": 1033, "krishna": [1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042], "kalyan": 1033, "krishnakalyan3": 1033, "kvle": 1033, "putnam": 1033, "ldavid": 1033, "leig": 1033, "leightonzhang": 1033, "leland": [1033, 1034, 1035, 1037, 1038, 1043], "liang": [1033, 1038, 1039], "hsieh": 1033, "lizsz": 1033, "l\u00e9oni": 1033, "born": 1033, "maniteja": [1033, 1034, 1035], "nandana": [1033, 1034, 1035], "marco": [1033, 1035, 1036, 1040, 1041, 1042], "bao": [1033, 1041], "szepieniec": 1033, "madsen": [1033, 1035], "massil": 1033, "matheu": 1033, "duboi": [1033, 1035], "moroz": 1033, "scherer": 1033, "michiaki": 1033, "ariga": 1033, "moussa": 1033, "taifi": 1033, "mrandrewandrad": 1033, "mridul": 1033, "seth": 1033, "nadya": 1033, "naoya": [1033, 1034, 1035, 1036], "kanai": [1033, 1034, 1035], "nickledav": 1033, "nico": [1033, 1040], "ningchi": 1033, "nlathia": 1033, "okbalefthand": 1033, "okhlopkov": [1033, 1034], "pano": 1033, "lourida": 1033, "strickland": 1033, "perrin": 1033, "letelli": 1033, "pestrickland": 1033, "practicalswift": 1033, "qimu": 1033, "zheng": [1033, 1034, 1039], "rachit": [1033, 1039, 1042], "kansal": 1033, "ramana": [1033, 1034], "randi": 1033, "olson": 1033, "lutz": [1033, 1037, 1040], "schucker": 1033, "jain": [1033, 1034, 1035, 1039, 1041, 1042], "ruifeng": [1033, 1034, 1039], "r\u00e9my": 1033, "l\u00e9one": 1033, "saihttam": 1033, "saiw": 1033, "yeung": 1033, "shleifer": [1033, 1034], "sartaj": 1033, "sasank": 1033, "chilamkurthi": 1033, "seal": 1033, "shagun": 1033, "sodhani": 1033, "shanmuga": 1033, "shashank": [1033, 1039], "shekhar": 1033, "shawpan": 1033, "shengxiduan": 1033, "shota": 1033, "shuckle16": 1033, "smedbergm": 1033, "srvanrel": 1033, "leriqu": [1033, 1035], "taranjeet": 1033, "themrmax": [1033, 1034], "hallock": 1033, "moreau": [1033, 1034, 1035, 1036, 1037], "tkammi": 1033, "toastedcornflak": [1033, 1034], "tomdlt": 1033, "toshihiro": [1033, 1034, 1040], "kamishima": [1033, 1034], "tracer0tong": 1033, "hauck": 1033, "vo": [1033, 1041], "varun": [1033, 1034, 1035, 1041, 1042], "jewalikar": 1033, "vikram": [1033, 1042, 1043], "villu": 1033, "ruusmann": 1033, "walter": 1033, "waterponei": [1033, 1034], "wenjian": 1033, "welch": 1033, "wyseguy7": 1033, "xyguo": [1033, 1035], "yanlend": 1033, "yen": [1033, 1034], "yenchenlin": 1033, "yoav": 1033, "zivori": 1033, "10723": [1034, 1035], "9623": 1034, "undocu": 1034, "deleteri": 1034, "9677": 1034, "ashutosh": [1034, 1035, 1037, 1039], "correlation_model": 1034, "regression_model": 1034, "belatedli": 1034, "9717": 1034, "9693": 1034, "steingold": [1034, 1035], "9711": 1034, "goncalo": [1034, 1035], "rodrigu": [1034, 1035, 1040], "9641": 1034, "bourbeau": [1034, 1035, 1036], "9865": 1034, "sachin": [1034, 1035, 1041], "kelkar": [1034, 1035, 1037], "9922": 1034, "charli": [1034, 1035, 1043], "brummitt": [1034, 1035], "9945": 1034, "9830": 1034, "9600": 1034, "kerimov": [1034, 1035], "9593": 1034, "reiichiro": [1034, 1035], "nakano": [1034, 1035], "9604": 1034, "interim": 1034, "9558": 1034, "9847": 1034, "joan": [1034, 1035, 1036, 1037], "massich": [1034, 1035, 1036, 1037], "oli": 1034, "blum": 1034, "9697": 1034, "9750": 1034, "9788": 1034, "9815": 1034, "9802": 1034, "vrishank": [1034, 1035], "bhardwaj": [1034, 1035], "nagarjuna": [1034, 1035], "nathaniel": [1034, 1035, 1037], "diegodlh": [1034, 1035], "jkleint": [1034, 1035], "oliblum90": [1034, 1035], "pasbi": [1034, 1035], "lawson": [1034, 1035, 1036], "nielsenmarkus11": [1034, 1035], "excit": 1034, "cautiou": 1034, "min_impurity_split": 1034, "7823": [1034, 1035], "8446": 1034, "5279": 1034, "8363": 1034, "5295": 1034, "7388": 1034, "userguid": 1034, "7655": 1034, "karan": [1034, 1035, 1036], "desai": [1034, 1036, 1039, 1040, 1042, 1043], "7739": 1034, "gasquez": 1034, "8120": 1034, "neeraj": 1034, "gangwar": 1034, "7548": 1034, "9206": 1034, "7441": 1034, "6101": 1034, "8698": 1034, "7794": 1034, "herilalaina": [1034, 1035, 1037], "rakotoarison": [1034, 1035, 1037], "5036": 1034, "4939": 1034, "esuli": [1034, 1039], "n_skips_": 1034, "7914": 1034, "horrel": 1034, "8591": 1034, "hadrien": [1034, 1037], "7838": 1034, "8835": 1034, "8061": 1034, "cordier": 1034, "6288": 1034, "9145": 1034, "reddi": [1034, 1035, 1036, 1041], "chinthala": 1034, "7721": 1034, "crall": [1034, 1040], "7685": 1034, "tommi": [1034, 1035, 1036], "l\u00f6fstedt": 1034, "9277": 1034, "hongkahjun": 1034, "7089": 1034, "randomized_svd_low_rank": 1034, "9067": 1034, "6181": 1034, "wendling": 1034, "8065": 1034, "lejeun": 1034, "7567": 1034, "jay": 1034, "doepk": 1034, "7573": 1034, "romain": [1034, 1039], "brault": 1034, "5229": 1034, "7990": 1034, "8586": 1034, "7723": 1034, "8028": 1034, "booth": 1034, "8005": 1034, "7863": 1034, "7506": 1034, "5991": 1034, "8845": 1034, "8053": 1034, "8282": 1034, "8117": 1034, "9259": 1034, "8094": 1034, "8335": 1034, "poughon": 1034, "7880": 1034, "karnofski": 1034, "935": 1034, "8931": 1034, "attractador": [1034, 1035], "8002": 1034, "8549": 1034, "zerodivisionerror": [1034, 1037, 1043], "7501": 1034, "dominik": [1034, 1043], "krzeminski": 1034, "7970": 1034, "8006": 1034, "p\u00f6lsterl": [1034, 1037, 1040], "8936": 1034, "8672": 1034, "mike": 1034, "benfield": 1034, "broke": 1034, "8068": 1034, "5732": 1034, "ytrue": 1034, "ypred": 1034, "8087": 1034, "7983": 1034, "8512": 1034, "8251": 1034, "aivision2020": 1034, "5814": 1034, "7849": 1034, "jair": 1034, "montoya": 1034, "martinez": 1034, "randomizedlasso": 1034, "5359": 1034, "9302": 1034, "8160": 1034, "8224": 1034, "gedeck": 1034, "vathsala": [1034, 1035, 1036, 1037], "achar": [1034, 1035, 1036, 1037], "9022": 1034, "mehmet": [1034, 1040], "basbug": 1034, "9024": 1034, "8973": 1034, "paulo": [1034, 1040, 1042], "haddad": 1034, "unmeaning": 1034, "6573": 1034, "quazi": [1034, 1035], "marufur": 1034, "rahman": [1034, 1035, 1039], "baselabelpropag": 1034, "9239": 1034, "andr": [1034, 1041], "ambrosio": 1034, "boechat": 1034, "early_exager": 1034, "assertionerror": 1034, "8992": 1034, "7954": 1034, "foreman": 1034, "9105": 1034, "9108": 1034, "8306": 1034, "7872": 1034, "_c_step": 1034, "3367": 1034, "steward": 1034, "8768": 1034, "detomaso": 1034, "6507": 1034, "jayzed82": 1034, "6126": 1034, "7814": 1034, "7702": 1034, "9219": 1034, "7771": 1034, "ang": 1034, "randomizedlogisticregress": 1034, "8259": 1034, "mandatorili": 1034, "7565": 1034, "8181": 1034, "basesearchcv": [1034, 1035], "8344": 1034, "eriksson": 1034, "7661": 1034, "8295": 1034, "batula": 1034, "dylan": [1034, 1037], "werner": [1034, 1039], "meier": 1034, "7365": 1034, "aleksandr": 1034, "sandrovskii": 1034, "5697": 1034, "stijn": 1034, "tonk": 1034, "6250": 1034, "8093": 1034, "bull": 1034, "9507": 1034, "7356": 1034, "dingwal": 1034, "_check_target": 1034, "8377": 1034, "5211": 1034, "rhinehart": 1034, "8159": 1034, "8198": 1034, "fetch_": 1034, "7944": 1034, "7825": 1034, "kathleen": 1034, "7376": 1034, "7331": 1034, "yangarbit": 1034, "__getstate__": [1034, 1042], "obstruct": 1034, "8316": 1034, "holger": 1034, "8010": 1034, "7986": 1034, "najera": 1034, "9289": 1034, "makedir": 1034, "9284": 1034, "sebastin": [1034, 1035], "alert": 1034, "lgtm": 1034, "9278": 1034, "heli": 1034, "8449": 1034, "9078": 1034, "purport": 1034, "sergul": [1034, 1035, 1038], "aydor": [1034, 1035, 1038], "8922": 1034, "8137": 1034, "8139": 1034, "8995": 1034, "2879": 1034, "7459": 1034, "7812": 1034, "9100": 1034, "8481": 1034, "8174": 1034, "tahar": 1034, "zanouda": 1034, "8854": 1034, "8874": 1034, "7998": 1034, "jiacheng": 1034, "argpartit": 1034, "frombuffer_empti": 1034, "in1d": 1034, "rankdata": 1034, "safe_copi": 1034, "eig": 1034, "fast_dot": 1034, "pinvh": [1034, 1036], "graph_laplacian": 1034, "sparsetool": 1034, "connected_compon": 1034, "check_decision_proba_consist": 1034, "shubham": [1034, 1037], "9019": 1034, "baseensembl": [1034, 1037], "7464": 1034, "rishikesh": 1034, "taehoon": [1034, 1035], "aashil": 1034, "balakumaran": [1034, 1035], "manoharan": [1034, 1035], "petrov": [1034, 1035, 1043], "minghui": [1034, 1035], "jc": [1034, 1035], "alexandercbooth": 1034, "chkoar": 1034, "aarshai": [1034, 1035], "gilliam": 1034, "subramanyam": 1034, "clement": [1034, 1035, 1039], "joudet": [1034, 1035], "robl": 1034, "kati": 1034, "luangkot": 1034, "lacchia": 1034, "akshay0724": 1034, "omtcyfz": 1034, "rickiepark": 1034, "jbdelafoss": 1034, "vivek": [1034, 1035, 1036], "elliott": 1034, "ldirer": 1034, "sid": 1034, "kapur": 1034, "midina": 1034, "mikebenfield": 1034, "sourav": [1034, 1037], "aseem": 1034, "bansal": 1034, "aishwaryark": 1034, "howel": 1034, "dokato": 1034, "kathi": [1034, 1037], "ferria": 1034, "nikita": [1034, 1035, 1037, 1040, 1041, 1042], "basil": 1034, "beirouti": 1034, "possa": 1034, "bednar": 1034, "janin": 1034, "harper": 1034, "artsiom": 1034, "ligo": 1034, "rahn": [1034, 1037], "seanpwilliam": 1034, "julian": [1034, 1035], "kuhlmann": [1034, 1035], "aubert": 1034, "j\u00f6rn": 1034, "hee": [1034, 1037], "shivamgargsya": [1034, 1038, 1040], "kat": 1034, "hempstalk": 1034, "kaushik": [1034, 1041, 1042, 1043], "lakshmikanth": 1034, "kennedi": [1034, 1037], "yap": 1034, "kiril": [1034, 1035, 1037, 1039], "bobyrev": 1034, "imbert": [1034, 1036, 1039, 1041], "lera": 1034, "douillard": 1034, "mainak": 1034, "tobychees": [1034, 1035], "manraj": 1034, "marc": [1034, 1036, 1037, 1043], "meketon": 1034, "marcofalk": 1034, "gilch": 1034, "mehul": 1034, "ahuja": [1034, 1041, 1042], "goetz": [1034, 1035], "dezub": 1034, "baumgartn": 1034, "vibrantabhi19": 1034, "golubin": 1034, "milen": 1034, "paskov": 1034, "antonin": 1034, "carett": 1034, "morikko": 1034, "mrmjauh": 1034, "nalepa": 1034, "namiya": 1034, "narinek": [1034, 1035], "angu": [1034, 1035, 1041], "nicol": 1034, "vavrova": 1034, "nitish": 1034, "pandei": [1034, 1039], "daniil": 1034, "olegovich": 1034, "craze": 1034, "om": 1034, "parmind": 1034, "patrick": [1034, 1035, 1040, 1041, 1044], "carlson": 1034, "ganssl": 1034, "lorek": 1034, "pete": [1034, 1038, 1039], "bachant": 1034, "csizsek": 1034, "jong": 1034, "puneet": 1034, "mathur": [1034, 1036, 1037, 1042, 1043], "quentin": [1034, 1035, 1036, 1043], "hibon": 1034, "1kastner": 1034, "rameshwar": [1034, 1035], "bhaskaran": [1034, 1035], "rebecca": 1034, "bilbro": 1034, "remi": 1034, "rampin": 1034, "pratik": 1034, "agarw": [1034, 1035, 1037], "sailesh": [1034, 1035], "choyal": [1034, 1035], "samson": 1034, "samu\u00ebl": 1034, "weber": 1034, "sarah": [1034, 1036, 1039], "abhyudai": 1034, "sharan": [1034, 1035], "yalburgi": [1034, 1035], "willduan": 1034, "siddharth": [1034, 1038], "almer": 1034, "theofilo": 1034, "papapanagiot": 1034, "alison": 1034, "boucher": 1034, "folkman": 1034, "jung": [1034, 1038, 1042], "shenoi": 1034, "vilhelm": [1034, 1035], "ehrenheim": [1034, 1035], "alan": [1034, 1035, 1038, 1040, 1041], "yee": [1034, 1035], "warut": [1034, 1035], "vijitbenjaronk": [1034, 1035], "yuichi": 1034, "fujikawa": 1034, "affanv14": 1034, "andreh7": 1034, "bradi": 1034, "salz": 1034, "campustrampu": 1034, "agamemnon": [1034, 1035, 1036, 1037, 1039, 1040], "krasouli": [1034, 1035, 1036, 1037, 1039, 1040], "ditenberg": 1034, "elena": 1034, "sharova": 1034, "filipj8": [1034, 1035], "fukatani": 1034, "guiniol": 1034, "guoci": 1034, "hakaa1": [1034, 1035], "xhy": 1034, "jakirkham": [1034, 1035, 1036, 1042, 1043], "jaroslaw": 1034, "jeroko": 1034, "jmontoyam": 1034, "josephsalmon": [1034, 1035, 1036], "jschendel": [1034, 1035], "leereev": 1034, "hahn": [1034, 1035], "mathurinm": [1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "mehak": 1034, "sachdeva": 1034, "mlewis1729": 1034, "mlliou112": 1034, "mthorrel": [1034, 1037], "ndingwal": 1034, "nuff": 1034, "plagre": 1034, "pldtc325": 1034, "breno": [1034, 1035], "olsen": 1034, "alfano": 1034, "burn": [1034, 1035], "polmauri": 1034, "charlton": 1034, "austin": 1034, "chayant": 1034, "t15h": 1034, "chinmaya": 1034, "pancholi": 1034, "danielsen": 1034, "chung": [1034, 1035], "pravarmahajan": [1034, 1035], "dariu": [1034, 1035], "morawiec": [1034, 1035], "haberth\u00fcr": 1034, "heryanto": 1034, "kirkbi": [1034, 1035], "rashchedrin": 1034, "gertrud": 1034, "devansh": [1034, 1035], "dickson": 1034, "baxlei": 1034, "don86": 1034, "klarup": 1034, "elizabeth": [1034, 1036, 1039], "ferriss": 1034, "ellen": 1034, "egli": 1034, "chieh": [1034, 1035], "chou": [1034, 1035], "grzegorz": [1034, 1037], "szpak": [1034, 1037], "zxcvbniu": 1034, "icyblad": 1034, "ilya": 1034, "laughlin": 1034, "iv\u00e1n": [1034, 1040], "vall\u00e9": 1034, "aur\u00e9lien": [1034, 1035, 1036, 1040, 1041], "bellet": [1034, 1035, 1036], "mahapatra": 1034, "bundl": [1035, 1036], "indexerror": [1035, 1036], "11756": [1035, 1036], "14237": [1035, 1036], "schuder": [1035, 1036, 1037], "13903": [1035, 1036], "13124": [1035, 1036], "13772": [1035, 1036], "vya": [1035, 1036, 1037], "12949": 1035, "prabakaran": [1035, 1036, 1039, 1041, 1042], "kumaresshan": [1035, 1036, 1039], "12946": 1035, "tallott": 1035, "13276": 1035, "13005": 1035, "13312": 1035, "11295": 1035, "vacaliuc": [1035, 1036], "13046": 1035, "12360": 1035, "aakanksha": 1035, "13134": 1035, "sandro": [1035, 1042], "casagrand": [1035, 1036], "12881": 1035, "13165": 1035, "13221": 1035, "bertrandhaut": [1035, 1036], "raghunathan": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "dowon": [1035, 1036], "aria": [1035, 1036, 1042], "fibins": [1035, 1036], "finn": [1035, 1036], "shea": [1035, 1036], "joaak": [1035, 1036], "m\u00e9hault": [1035, 1036], "kms15": [1035, 1036], "kossori": [1035, 1036], "aruku": [1035, 1036], "lakshya": [1035, 1036, 1037], "ib\u00e1\u00f1ez": [1035, 1036, 1039], "gorelli": [1035, 1036, 1040, 1042], "marcogorelli": [1035, 1036], "mferrari3": [1035, 1036], "micka\u00ebl": [1035, 1036], "schoentgen": [1035, 1036], "pavlo": [1035, 1036], "kalli": [1035, 1036], "glaser": [1035, 1036], "pierretallott": [1035, 1036, 1037], "kapoor": [1035, 1036], "sandrocasagrand": [1035, 1036], "tashai": [1035, 1036], "vishaal": [1035, 1036], "zhuyi": [1035, 1036], "ziji": [1035, 1036], "zj": [1035, 1036], "poh": [1035, 1036], "12704": 1035, "12701": 1035, "12685": 1035, "12699": 1035, "adanhawth": [1035, 1036], "stine": [1035, 1036], "feda": [1035, 1036], "curic": [1035, 1036], "jeremiedbb": [1035, 1036, 1037], "katrin": [1035, 1036], "leinweb": [1035, 1036], "muhammad": [1035, 1036, 1040], "hassaan": [1035, 1036], "rafiqu": [1035, 1036], "paczuski": [1035, 1036], "waterburi": [1035, 1036], "shivam": [1035, 1036, 1037], "kotwalia": [1035, 1036], "12159": 1035, "12105": 1035, "11912": 1035, "12304": 1035, "12339": 1035, "12246": 1035, "10811": 1035, "feldbauer": [1035, 1036, 1037, 1038, 1041], "12441": 1035, "12517": 1035, "12234": 1035, "12165": 1035, "12388": 1035, "connor": [1035, 1040], "tann": [1035, 1040], "12393": 1035, "12122": 1035, "sharedmem": 1035, "12518": 1035, "12481": 1035, "12612": 1035, "12211": 1035, "lisa": [1035, 1036, 1038, 1039, 1041, 1042], "hannel": [1035, 1036], "melissa": 1035, "ferrari": 1035, "12451": 1035, "12171": 1035, "12365": 1035, "_encod": 1035, "12514": 1035, "12522": 1035, "12471": 1035, "marzinotto": [1035, 1036], "12317": 1035, "12338": 1035, "bauk": [1035, 1036], "12625": 1035, "sklearn_site_joblib": 1035, "12350": 1035, "12467": 1035, "unvendor": 1035, "12345": 1035, "navarret": [1035, 1036, 1037], "benjastudio": [1035, 1036], "cheuk": [1035, 1036], "connossor": [1035, 1036], "levinson": [1035, 1036], "kieker": [1035, 1036], "kataev": [1035, 1036], "dillon": [1035, 1036, 1037], "gardner": [1035, 1036], "vukolov": [1035, 1036], "caselli": [1035, 1036], "gauravahlawat": [1035, 1036], "gustavo": [1035, 1036, 1041], "haroldfox": [1035, 1036], "jacklangerman": [1035, 1036], "jacopo": [1035, 1036], "notarstefano": [1035, 1036], "janvanrijn": [1035, 1036], "jdethuren": [1035, 1036], "koen": [1035, 1036], "kushal": [1035, 1036], "chauhan": [1035, 1036, 1042, 1043], "jie": [1035, 1036, 1039], "lili": [1035, 1036], "xiong": [1035, 1036, 1041], "liam": [1035, 1036], "melsyt": [1035, 1036], "nichola": [1035, 1036, 1038], "shebanov": [1035, 1036], "oleksandr": [1035, 1036, 1037, 1038, 1041], "pavlyk": [1035, 1036, 1037, 1038], "hausamann": [1035, 1036], "pulkit": [1035, 1036, 1038], "maloo": [1035, 1036], "batista": [1035, 1036, 1040], "radostin": [1035, 1036], "stoyanov": [1035, 1036], "ramil": [1035, 1036], "nugmanov": [1035, 1036], "rebekah": [1035, 1036, 1037], "roopam": [1035, 1036], "tiernei": [1035, 1036, 1037], "sylvainlan": [1035, 1036, 1037, 1038, 1039], "takingitcasu": [1035, 1036], "tulio": [1035, 1036], "xing": [1035, 1036], "zach": [1035, 1036, 1041], "mountain": 1035, "sorri": 1035, "basemultilayerperceptron": [1035, 1037], "11924": 1035, "macbook": 1035, "9354": 1035, "9372": 1035, "astel": 1035, "10933": 1035, "hansen": 1035, "10471": 1035, "gaurav": [1035, 1036, 1037, 1038, 1039, 1041], "dhingra": [1035, 1036, 1039], "8003": 1035, "jo\u00ebl": 1035, "billaud": 1035, "10059": 1035, "braun": 1035, "9612": 1035, "jonatan": 1035, "samoocha": 1035, "8129": 1035, "margeta": 1035, "k_means_elkan": 1035, "11353": 1035, "11901": 1035, "9875": 1035, "9012": 1035, "11315": 1035, "9041": 1035, "9858": 1035, "artiem": 1035, "krinitsyn": 1035, "9908": 1035, "8617": 1035, "maskani": [1035, 1037, 1038, 1039], "filali": 1035, "konstantino": 1035, "katriopla": 1035, "10774": 1035, "catalfo": 1035, "10795": 1035, "takeshi": [1035, 1040, 1041, 1042], "yoshizawa": 1035, "11082": 1035, "sadhana": 1035, "srinivasan": [1035, 1038], "9731": 1035, "10045": 1035, "fetch_mldata": 1035, "11466": 1035, "6374": 1035, "normalize_compon": [1035, 1037], "11585": 1035, "ivan": [1035, 1036, 1039, 1042], "panico": [1035, 1039], "11420": 1035, "6452": 1035, "walli": 1035, "gauz": 1035, "9492": 1035, "8484": 1035, "9886": 1035, "underflow": [1035, 1040], "10142": 1035, "5956": 1035, "_class_mean": 1035, "_class_cov": 1035, "10898": 1035, "nanxin": 1035, "9832": 1035, "11951": 1035, "r\u00fcdiger": [1035, 1036, 1038], "busch": [1035, 1036, 1038], "9707": 1035, "wan": 1035, "7071": 1035, "9157": 1035, "11176": 1035, "forsyth": 1035, "11542": 1035, "anna": 1035, "9524": 1035, "9723": 1035, "10908": 1035, "10899": 1035, "melderi": 1035, "10101": 1035, "10\u2079": 1035, "9147": 1035, "clae": 1035, "fredrik": 1035, "mannbi": 1035, "10441": 1035, "mayur": 1035, "kulkarni": 1035, "6689": 1035, "nihar": 1035, "sheth": 1035, "11293": 1035, "9656": 1035, "greenhal": 1035, "n_features_to_comput": 1035, "9222": 1035, "hoh": 1035, "9234": 1035, "andrewww": 1035, "8075": 1035, "11211": 1035, "9484": 1035, "dalla": 1035, "card": 1035, "9043": 1035, "10112": 1035, "logistic_regression_path": [1035, 1036], "11724": 1035, "9939": 1035, "westov": 1035, "10998": 1035, "vazelh": [1035, 1036, 1037], "10071": 1035, "10153": 1035, "d\u00f6pfert": 1035, "10095": 1035, "cv_valu": 1035, "10297": 1035, "mabel": [1035, 1039], "10581": 1035, "yacin": 1035, "mazari": 1035, "10687": 1035, "10836": 1035, "aishwarya": 1035, "10397": 1035, "10992": 1035, "11327": 1035, "11905": 1035, "9837": 1035, "10593": 1035, "10610": 1035, "8554": 1035, "9775": 1035, "10827": 1035, "osa": 1035, "8066": 1035, "10587": 1035, "3840": 1035, "niederb\u00fchl": 1035, "9521": 1035, "11124": 1035, "arya": 1035, "11160": 1035, "barkhorn": 1035, "11679": 1035, "pacha": 1035, "10845": 1035, "perez": [1035, 1042], "parra": 1035, "toledano": 1035, "10999": 1035, "memoryerror": [1035, 1039], "11135": 1035, "10377": 1035, "9786": 1035, "10093": 1035, "alexryndin": 1035, "9772": 1035, "9515": 1035, "liddel": 1035, "manh": 1035, "dao": 1035, "9851": 1035, "10280": 1035, "10336": 1035, "haoran": 1035, "basemixtur": [1035, 1036], "10740": 1035, "10869": 1035, "g\u00e9ron": 1035, "9686": 1035, "11310": 1035, "_fit_and_scor": 1035, "11576": 1035, "ronsin": [1035, 1036, 1044], "_run_search": 1035, "9599": 1035, "11006": 1035, "11557": 1035, "boucaud": 1035, "iid": 1035, "9085": 1035, "10677": 1035, "zhdanovich": 1035, "10982": 1035, "juliet": 1035, "lawton": 1035, "10928": 1035, "solutu": 1035, "immensu": 1035, "9257": 1035, "8190": 1035, "alcorn": 1035, "9681": 1035, "mottl": [1035, 1036], "10005": 1035, "10346": 1035, "tobia": [1035, 1040, 1042], "10887": 1035, "11136": 1035, "4394": 1035, "9579": 1035, "kober": 1035, "9655": 1035, "bjerr": 1035, "11556": 1035, "11774": 1035, "9456": 1035, "unexpectedli": 1035, "9304": 1035, "11144": [1035, 1036], "9151": 1035, "10521": 1035, "7668": 1035, "9647": 1035, "10195": 1035, "10192": 1035, "11272": 1035, "11467": 1035, "11505": 1035, "giusepp": [1035, 1036], "costa": [1035, 1040], "10210": 1035, "11520": 1035, "11011": 1035, "11005": 1035, "11308": 1035, "11206": 1035, "11306": 1035, "10437": 1035, "lucija": 1035, "gregov": 1035, "10452": 1035, "10181": 1035, "nirvan": [1035, 1039], "anjirbag": 1035, "9399": 1035, "10913": 1035, "rodrigo": 1035, "agundez": 1035, "10458": 1035, "9816": 1035, "newei": 1035, "11042": 1035, "11235": 1035, "active_features_": 1035, "feature_indices_": 1035, "n_values_": 1035, "9726": 1035, "10829": 1035, "gilberto": 1035, "olimpio": 1035, "10655": 1035, "python2": 1035, "10412": 1035, "jiongyan": 1035, "9497": 1035, "8361": 1035, "neo": 1035, "_criterion": 1035, "classificationcriterion": 1035, "regressioncriterion": 1035, "10325": 1035, "camil": [1035, 1043], "stap": 1035, "basedecisiontre": [1035, 1036, 1039], "10536": 1035, "ohayon": [1035, 1036, 1043], "11464": 1035, "stott": 1035, "10663": 1035, "10229": 1035, "11553": 1035, "10881": 1035, "sevin": 1035, "ridge_regress": [1035, 1036, 1042], "10306": 1035, "siebert": 1035, "11741": 1035, "11166": 1035, "pypy3": 1035, "v5": 1035, "11010": 1035, "lami": 1035, "11596": 1035, "marcu": 1035, "voss": 1035, "9569": 1035, "12462": 1035, "zachariah": 1035, "10474": 1035, "10500": 1035, "9701": 1035, "9378": 1035, "check_set_param": 1035, "7738": 1035, "alvin": 1035, "chiang": 1035, "8102": 1035, "ankita": 1035, "sinha": 1035, "check_methods_subset_invari": [1035, 1041], "10428": 1035, "check_sample_weights_pandas_seri": 1035, "11558": 1035, "211217613": 1035, "absolutelynowarranti": 1035, "richi": 1035, "halford": [1035, 1042, 1043], "adelr": 1035, "adityadaflapurkar": 1035, "aidan": 1035, "fitzgerald": 1035, "aishgrt1": 1035, "akash": 1035, "shivram": 1035, "lenail": [1035, 1039], "egg": 1035, "diaz": 1035, "amanda": [1035, 1038, 1039, 1040, 1041], "aniruddha": 1035, "annaayzenshtat": 1035, "antonio": [1035, 1037], "quinonez": 1035, "anubhav": 1035, "marwaha": 1035, "arik": 1035, "pamnani": 1035, "ozga": 1035, "arunava": 1035, "geron": [1035, 1040, 1041], "ayush": [1035, 1040], "bangda": 1035, "bastian": 1035, "venthur": 1035, "benn": 1035, "koonc": 1035, "cclauss": 1035, "chadi": 1035, "kamar": 1035, "holdgraf": 1035, "hirsch": 1035, "hogan": 1035, "cnx": 1035, "cwitt": 1035, "ferreira": [1035, 1040, 1041], "gomez": [1035, 1042], "klevebr": 1035, "shwed": 1035, "mohn": [1035, 1039], "danil": 1035, "baibak": [1035, 1036], "beach": 1035, "pickup": 1035, "derek": 1035, "niederhut": [1035, 1037], "dilutedsauc": 1035, "dlovel": 1035, "dor": 1035, "dougla": 1035, "duhaim": 1035, "tuzova": 1035, "eunji": 1035, "farahsae": 1035, "raimundo": 1035, "fenx": 1035, "frankhui": 1035, "franz": 1035, "wompner": 1035, "freija": 1035, "descamp": 1035, "frsi": 1035, "calvo": [1035, 1036], "georgi": [1035, 1038], "peev": [1035, 1038], "gkevinyen5418": 1035, "vermeil": 1035, "hongh": 1035, "hossein": [1035, 1036, 1037], "pourbozorg": [1035, 1036, 1037], "hristo": [1035, 1042], "hunan": 1035, "rostomyan": 1035, "iampat": 1035, "jaewon": 1035, "malcolm": 1035, "jami": 1035, "wolosonovich": 1035, "jeb": 1035, "bearer": 1035, "jinkun": 1035, "jjabl": 1035, "johnstott": 1035, "jotasi": 1035, "julietcl": 1035, "shenk": 1035, "karl": 1035, "kasper": 1035, "primdal": 1035, "lauritzen": 1035, "ksemb": 1035, "kuai": [1035, 1036], "kyeongpil": 1035, "kang": [1035, 1037], "kye": 1035, "kyledrogo": 1035, "l\u00e9o": 1035, "liutong": 1035, "lizao": 1035, "lkjcalc": 1035, "louib": [1035, 1036], "luciano": [1035, 1042], "luke": 1035, "persola": 1035, "markiwanchyshyn": 1035, "marsgui": 1035, "gubri": [1035, 1036], "koko": [1035, 1041, 1042], "copeland": [1035, 1036], "meghann": [1035, 1037], "minh": 1035, "jamaoui": [1035, 1036, 1039], "mohammad": [1035, 1036], "shahebaz": 1035, "muayyad": 1035, "alsadi": 1035, "nabarun": 1035, "pal": [1035, 1041], "narendran": 1035, "santhanam": 1035, "suh": 1035, "eng": 1035, "av": 1035, "nicolau": 1035, "werneck": 1035, "titov": [1035, 1037, 1040, 1041], "nilesh": 1035, "kevlani": 1035, "notmatthancock": [1035, 1037], "nzw": 1035, "oren": 1035, "milman": 1035, "osaid": 1035, "rehman": 1035, "nasir": 1035, "fernand": [1035, 1041, 1042], "olden": 1035, "pierreablin": 1035, "pietruh": 1035, "pinaki": 1035, "nath": 1035, "chowdhuri": [1035, 1041], "piotr": [1035, 1036], "szyma\u0144ski": [1035, 1036], "pradeep": [1035, 1036], "raamana": [1035, 1036], "pravar": 1035, "mahajan": [1035, 1037], "qingi": 1035, "rajendra": 1035, "arora": [1035, 1042], "rankylau": 1035, "kosobrodov": 1035, "rragundez": 1035, "sagnik": 1035, "bhattacharya": 1035, "radhakrishnan": 1035, "saqib": 1035, "nizam": 1035, "shamsi": 1035, "satish": 1035, "gigant": [1035, 1037, 1042, 1043], "flennerhag": 1035, "sebastien": 1035, "shalil": 1035, "awalei": 1035, "shangwu": [1035, 1036], "sharad": 1035, "vijalapuram": 1035, "shenhanc78": 1035, "rastogi": 1035, "siftikha": 1035, "sinclert": 1035, "p\u00e9rez": 1035, "solutusimmensu": 1035, "somya": 1035, "anand": [1035, 1039], "srajan": 1035, "paliw": 1035, "sriharsha": [1035, 1036], "hatwar": [1035, 1036], "mcdowel": 1035, "syonekura": 1035, "takanori": 1035, "hayashi": 1035, "tarcusx": 1035, "theriley106": 1035, "heavei": 1035, "augspurg": [1035, 1037], "trishnendu": 1035, "ghorai": 1035, "twosigmajab": 1035, "umar": [1035, 1036], "farouk": [1035, 1036], "urvang": [1035, 1037], "patel": [1035, 1037, 1038, 1039, 1041], "vadim": [1035, 1039, 1040], "markovtsev": 1035, "vinit": 1035, "vinod": 1035, "viraj": 1035, "mavani": 1035, "navkal": 1035, "vqean3": [1035, 1036], "vufg": 1035, "wallygauz": 1035, "wdevazelh": 1035, "barnett": 1035, "rosenfeld": 1035, "yime": 1035, "ymazari": 1035, "yufeng": 1035, "griffith": [1035, 1036], "z\u00e9": 1035, "vin\u00edciu": 1035, "zhenq": 1035, "zhiqe": 1035, "xiao": [1035, 1037, 1040, 1041, 1042, 1043, 1044], "couldn": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "12955": 1036, "klopfer": 1036, "14197": 1036, "14024": 1036, "nicolashug": 1036, "13974": 1036, "hoang": [1036, 1037], "fhoang7": 1036, "14393": 1036, "guillem": [1036, 1037, 1042], "subi": [1036, 1037, 1042], "14087": 1036, "14067": 1036, "stalei": [1036, 1037], "14092": 1036, "14053": 1036, "13947": 1036, "instanci": 1036, "13910": 1036, "13894": 1036, "myatt": [1036, 1037], "min_max_axi": 1036, "13741": 1036, "roddi": [1036, 1037], "macsween": [1036, 1037], "14309": 1036, "13864": 1036, "paresh": [1036, 1037], "13877": 1036, "_sag": 1036, "sag_solv": 1036, "3591": 1036, "13317": 1036, "13157": 1036, "13086": 1036, "cole": 1036, "13485": 1036, "assia": 1036, "benbihi": 1036, "13651": 1036, "reloc": 1036, "13486": 1036, "13427": 1036, "couvreur": [1036, 1037], "9069": 1036, "13835": 1036, "10727": 1036, "wood": 1036, "13250": 1036, "13241": 1036, "12143": 1036, "11650": 1036, "non_negative_factor": [1036, 1038, 1039, 1040, 1044], "12988": 1036, "8769": 1036, "11000": 1036, "thibault": 1036, "sejourn": 1036, "changedbehaviourwarn": 1036, "11526": 1036, "6848": 1036, "glemaitr": [1036, 1037, 1039], "11727": 1036, "13266": 1036, "13545": 1036, "sorro": 1036, "12807": 1036, "12513": 1036, "12543": 1036, "storch": 1036, "13260": 1036, "13283": 1036, "13524": 1036, "13174": 1036, "13496": 1036, "13620": 1036, "12436": 1036, "12983": 1036, "13251": 1036, "joshuakennethjon": 1036, "12715": 1036, "13164": 1036, "12834": 1036, "leastsquareserror": 1036, "update_terminal_region": 1036, "6463": 1036, "movelikeriv": 1036, "13193": 1036, "12599": 1036, "13779": 1036, "13780": 1036, "12916": 1036, "13641": 1036, "8478": 1036, "12177": 1036, "12583": 1036, "13601": 1036, "danylo": 1036, "densif": 1036, "13240": 1036, "bartosz": 1036, "13562": 1036, "11646": 1036, "11699": 1036, "make_dataset": 1036, "13336": 1036, "toleranbc": 1036, "11754": 1036, "13397": 1036, "fagan": 1036, "12174": 1036, "12972": 1036, "lucio": 1036, "fernandez": 1036, "arjona": 1036, "coeffeci": 1036, "13279": 1036, "13328": 1036, "13389": 1036, "basesgdclassifi": 1036, "13422": 1036, "cl\u00e9ment": [1036, 1040, 1042], "doumouro": 1036, "unhandl": 1036, "13363": 1036, "12821": 1036, "13350": 1036, "j\u00e9r\u00f4me": [1036, 1037, 1038, 1044], "dock\u00e8": [1036, 1037, 1038, 1044], "9907": 1036, "12232": 1036, "sangeeth": 1036, "11179": 1036, "13151": 1036, "12568": 1036, "8216": 1036, "romuald": 1036, "menuet": 1036, "12732": 1036, "12334": 1036, "13607": 1036, "12855": 1036, "pawel": 1036, "sendyk": 1036, "13628": 1036, "13447": 1036, "10580": 1036, "sandra": [1036, 1042], "mitrov": 1036, "13554": 1036, "celelibi": 1036, "13142": 1036, "11354": 1036, "12613": 1036, "12669": 1036, "torrella": [1036, 1037, 1043], "12861": 1036, "8773": 1036, "13366": 1036, "fournier": 1036, "10440": 1036, "12222": 1036, "10058": 1036, "chiotelli": 1036, "12279": 1036, "12582": 1036, "my_pipelin": 1036, "2568": 1036, "make_": 1036, "11364": 1036, "baze": 1036, "petrushev": 1036, "__len__": 1036, "13439": 1036, "12908": 1036, "drew": 1036, "13253": 1036, "12116": 1036, "12197": 1036, "12251": 1036, "float16": 1036, "13007": 1036, "raffaello": 1036, "baluyot": 1036, "13333": 1036, "13459": 1036, "hunter": 1036, "mcgushion": 1036, "8508": 1036, "6261": 1036, "vettigli": 1036, "justglow": 1036, "12300": 1036, "11458": 1036, "mitar": 1036, "milutinov": 1036, "12344": 1036, "13549": 1036, "warn_on_dtyp": 1036, "check_pairwise_arrai": 1036, "13382": 1036, "prathmesh": 1036, "saval": 1036, "11705": 1036, "11973": 1036, "our_rand_r": 1036, "madhura": [1036, 1038, 1039, 1042, 1043], "parikh": [1036, 1041, 1042, 1043], "13531": 1036, "check_fit_idempot": 1036, "alberto": [1036, 1040, 1041], "torr": 1036, "amourav": 1036, "assiaben": 1036, "micha\u0142owski": 1036, "brentfagan": 1036, "chenal": [1036, 1037, 1039], "choe": 1036, "drewmjohnston": 1036, "dror": 1036, "atariah": 1036, "esvhd": 1036, "falak": 1036, "gandenberg": 1036, "luqi": 1036, "jf": 1036, "kulbear": 1036, "leandro": [1036, 1040], "hermida": [1036, 1040], "luk": 1036, "manimaran": [1036, 1038, 1039, 1040, 1041], "gaido": 1036, "marinelm": 1036, "masstran": 1036, "roeschk": 1036, "aftab": 1036, "abdela": 1036, "ibraheem": 1036, "mwestt": 1036, "iijima": 1036, "oresti": 1036, "osman": [1036, 1042], "flanagan": [1036, 1037], "soriano": 1036, "peai": 1036, "pim": 1036, "haan": 1036, "raf": 1036, "rajdeep": 1036, "dua": 1036, "ra\u00fal": 1036, "garc\u00eda": [1036, 1037, 1042], "lekhwani": 1036, "varma": 1036, "shiyu": 1036, "duan": [1036, 1038], "smari": [1036, 1037, 1038], "st\u00e9phane": [1036, 1037, 1041, 1042], "surgan12": 1036, "thibsej": 1036, "xhan": 1036, "xinyuliu12": 1036, "zayd": 1036, "hammoudeh": 1036, "16397": [1037, 1038], "16500": 1037, "16505": 1037, "16076": 1037, "shack": [1037, 1038, 1039], "15930": 1037, "inder128": 1037, "15810": 1037, "15898": 1037, "gargsya": 1037, "15933": 1037, "15760": 1037, "15888": 1037, "15936": 1037, "dizietasahi": 1037, "15879": 1037, "bibhash": [1037, 1038], "chandra": [1037, 1038, 1041], "mitra": [1037, 1038, 1042], "15937": 1037, "blyston": [1037, 1038], "15863": 1037, "abstractmethod": 1037, "_check_x": 1037, "basenb": 1037, "15996": 1037, "brigitta": [1037, 1038, 1039, 1043], "sip\u0151cz": [1037, 1038, 1039, 1043], "15751": 1037, "tirth": [1037, 1038], "15868": 1037, "nikla": [1037, 1038], "smedemark": 1037, "marguli": 1037, "15797": 1037, "15947": 1037, "revamp": 1037, "14849": 1037, "_name_estim": 1037, "_gb": 1037, "facto": 1037, "_birch": 1037, "9250": 1037, "12927": 1037, "deprecationwarn": 1037, "interfer": 1037, "hinder": 1037, "15080": 1037, "14464": 1037, "13575": 1037, "10482": 1037, "13726": 1037, "shuzh": 1037, "9288": 1037, "15057": 1037, "korolev": 1037, "15120": 1037, "7943": 1037, "12303": 1037, "14510": 1037, "14890": 1037, "miguel": 1037, "cabrera": 1037, "14544": 1037, "15304": 1037, "jaim": 1037, "ferrando": 1037, "huerta": 1037, "12068": 1037, "12145": 1037, "13609": 1037, "camila": 1037, "williamson": 1037, "15661": 1037, "15160": 1037, "14259": 1037, "14764": 1037, "14740": 1037, "st\u00e9phan": 1037, "tulken": 1037, "14623": 1037, "sarra": 1037, "habchi": 1037, "15257": 1037, "willocx": 1037, "12650": 1037, "13960": 1037, "multiouput": 1037, "14908": 1037, "martina": [1037, 1039], "vila": [1037, 1039], "15382": 1037, "14933": 1037, "15138": 1037, "cusick": 1037, "14406": 1037, "14012": 1037, "faouzi": [1037, 1038], "13769": 1037, "14194": 1037, "least_absolute_devi": [1037, 1039, 1040], "13896": 1037, "13933": 1037, "14710": 1037, "categorical_crossentropi": [1037, 1041], "14869": 1037, "14682": 1037, "hancock": 1037, "5963": 1037, "pablo": [1037, 1040, 1041], "dubou": 1037, "14287": 1037, "15375": 1037, "14305": 1037, "14114": 1037, "15084": 1037, "14294": 1037, "14907": 1037, "14602": 1037, "chawla": 1037, "vectorizermixin": 1037, "14430": 1037, "strip_accents_unicod": 1037, "15100": 1037, "gradi": 1037, "overflowerror": 1037, "15463": 1037, "norvan": 1037, "sahin": 1037, "14520": 1037, "11635": 1037, "alec": 1037, "13704": 1037, "15557": 1037, "14378": 1037, "masashi": [1037, 1039], "shibata": 1037, "ashim": 1037, "bhattarai": 1037, "15010": 1037, "skip_comput": 1037, "13773": 1037, "14356": 1037, "15393": 1037, "venkatachalam": [1037, 1038, 1039, 1040, 1041], "14646": 1037, "14028": 1037, "15429": 1037, "14706": 1037, "14108": 1037, "14170": 1037, "14296": 1037, "13618": 1037, "13995": 1037, "14458": 1037, "14591": 1037, "14864": 1037, "15044": 1037, "15086": 1037, "15038": 1037, "15082": 1037, "13213": 1037, "14647": 1037, "linalgerror": 1037, "13393": 1037, "13707": 1037, "training_data_": 1037, "14357": 1037, "14900": 1037, "socastro": [1037, 1043], "9951": 1037, "14936": 1037, "15083": 1037, "12789": 1037, "15274": 1037, "13938": 1037, "15049": 1037, "toccac": 1037, "ptocca": 1037, "13231": 1037, "dong": 1037, "13467": 1037, "14595": 1037, "14865": 1037, "l\u00e9onard": [1037, 1042], "binet": [1037, 1042], "14732": 1037, "14417": 1037, "15625": 1037, "12258": 1037, "14898": 1037, "matcovici": 1037, "14593": 1037, "reboul": 1037, "14549": 1037, "14704": 1037, "15096": 1037, "14629": 1037, "15488": 1037, "15490": 1037, "12569": 1037, "bicker": 1037, "9597": 1037, "wenbo": [1037, 1039], "zhao": [1037, 1039, 1040, 1041, 1042], "14336": 1037, "dexter": 1037, "9274": 1037, "perri": 1037, "13806": 1037, "ana\u00ebl": 1037, "beaugnon": 1037, "15119": 1037, "15053": 1037, "13290": 1037, "13987": 1037, "_pairwis": [1037, 1039], "13925": 1037, "robson": 1037, "15524": 1037, "xun": [1037, 1039], "12557": 1037, "14286": 1037, "15099": 1037, "baselibsvm": 1037, "_sparse_fit": 1037, "14894": 1037, "danna": 1037, "naser": 1037, "12887": 1037, "15028": 1037, "guan": 1037, "14381": 1037, "11232": 1037, "sievert": 1037, "10815": 1037, "14035": 1037, "14475": 1037, "14538": 1037, "14872": 1037, "upcast": [1037, 1041], "15094": 1037, "choose_check_classifiers_label": 1037, "enforce_estimator_tags_i": 1037, "mock": 1037, "mockdatafram": 1037, "checkingclassifi": 1037, "newton_cg": 1037, "random_choice_csc": 1037, "fast_dict": 1037, "parallel_help": 1037, "14902": 1037, "14971": 1037, "nep": 1037, "14702": 1037, "13013": 1037, "13875": 1037, "14680": 1037, "check_classifier_multioutput": 1037, "check_regressor_multioutput": 1037, "13392": 1037, "rok": 1037, "mihevc": 1037, "check_transformer_data_not_an_arrai": 1037, "mro": [1037, 1038], "14884": 1037, "alphonsu": 1037, "abbi": [1037, 1038], "popa": [1037, 1038], "abdur": 1037, "rahmaan": 1037, "janhang": 1037, "abenbihi": 1037, "abhinav": [1037, 1040], "sagar": 1037, "jana": 1037, "lagat": 1037, "alessandro": [1037, 1039, 1042], "surac": 1037, "siqueira": 1037, "alexgoryainov": 1037, "itk": [1037, 1038, 1039], "alexshack": [1037, 1038, 1039], "akinkunl": 1037, "kaseorg": 1037, "maldonado": [1037, 1040], "angela": [1037, 1038, 1042], "ambroz": [1037, 1038], "anisha": 1037, "keshavan": 1037, "gutierrez": 1037, "anuja": 1037, "archana": [1037, 1039], "alva": 1037, "arnaudstiegl": 1037, "arpanchowdhri": 1037, "ashimb9": 1037, "ayomid": 1037, "bamidel": 1037, "baran": 1037, "buluttekin": 1037, "barrycg": 1037, "bill": [1037, 1038], "mill": 1037, "biswadip": 1037, "mandal": 1037, "blackd0t": 1037, "barklei": 1037, "c56poni": 1037, "camilaagw": 1037, "cartman_nabana": 1037, "catajara": 1037, "cgsavard": [1037, 1038], "vesteghem": 1037, "dakota": 1037, "grusak": 1037, "datenbergwerk": 1037, "dormagen": 1037, "deeplook": 1037, "drgfreeman": 1037, "cashman": 1037, "edvardlindelof": 1037, "ndirangu": [1037, 1041], "eunseop": 1037, "jeong": 1037, "fanni": 1037, "federicopisanu": 1037, "divo": 1037, "flaviomorelli": 1037, "francidona": 1037, "franco": 1037, "luqu": 1037, "freder": 1037, "haas": 1037, "g0g0gadget": 1037, "altai": 1037, "vale": 1037, "rio": [1037, 1039, 1040, 1041], "ganevgv": 1037, "gdex1": 1037, "getgaurav2": 1037, "gideon": 1037, "sonoiya": 1037, "gpapadok": [1037, 1041], "mogavero": 1037, "h4dr1en": 1037, "hadshirt": 1037, "hailei": [1037, 1038], "nguyen": [1037, 1038, 1041, 1042], "hannah": [1037, 1039, 1041], "bruce": [1037, 1038], "macdonald": [1037, 1038], "honglu": 1037, "ingrid": 1037, "spielman": 1037, "a16": [1037, 1038], "jaehong": 1037, "jai": [1037, 1041], "jeromedock": 1037, "jesper": 1037, "dramsch": 1037, "joanna": 1037, "ortiz": [1037, 1043], "kanika": 1037, "sabharw": 1037, "katarina": [1037, 1039], "slama": [1037, 1039], "kellycarmodi": 1037, "eth": 1037, "kensuk": 1037, "arai": 1037, "kesshi": [1037, 1038], "kevad": 1037, "lofti": [1037, 1038], "winata": [1037, 1039], "sheng": 1037, "dolmatov": 1037, "kirthi": 1037, "shankar": 1037, "sivamani": 1037, "katyal": 1037, "lakshmi": 1037, "krishnan": 1037, "lalliacqua": [1037, 1040], "lbfin": 1037, "loopym": 1037, "lostcoast": 1037, "huynh": [1037, 1039], "lrjball": [1037, 1038], "roeder": 1037, "maggiecheg": [1037, 1041], "maithreyi": 1037, "venkatesh": 1037, "maltimor": 1037, "maocx": 1037, "douriez": [1037, 1038], "oywa": 1037, "aladago": 1037, "mbillingr": 1037, "clare": 1037, "micah": 1037, "miguelbarao": 1037, "mina": [1037, 1038], "naghshhnejad": [1037, 1038], "motmoti": 1037, "mschaffenroth": 1037, "natasha": 1037, "nezar": 1037, "nidhin": 1037, "pattaniyil": 1037, "nishan": 1037, "mann": 1037, "nitya": 1037, "mandyam": 1037, "novaya": [1037, 1040], "nxorabl": 1037, "oleg": 1037, "stikhin": 1037, "saleem": 1037, "panpiort8": [1037, 1039], "paula": [1037, 1038], "poorna": [1037, 1039], "pspachtholz": [1037, 1038, 1039], "qdeffens": [1037, 1040], "garg": [1037, 1038], "rapha\u00ebl": 1037, "bournhonesqu": 1037, "reza": 1037, "gharibi": 1037, "payn": 1037, "rlm": 1037, "juergen": [1037, 1042], "sanjabi": 1037, "ruchitagard": 1037, "ruth": 1037, "waithera": 1037, "sackei": 1037, "samesh": [1037, 1038], "lakhotia": [1037, 1038], "sewook": 1037, "dare": 1037, "shreya": 1037, "simoncw": 1037, "smujjiga": 1037, "s\u00f6nke": 1037, "behrend": 1037, "soumirai": 1037, "steinfurt": [1037, 1039], "cowlei": 1037, "th0rwa": [1037, 1038], "theoptip": [1037, 1038], "theotheo": 1037, "thierno": 1037, "ibrahima": 1037, "diop": 1037, "schmitt": [1037, 1038], "tilen": 1037, "kusterl": 1037, "timsaur": 1037, "tola": 1037, "topisan": 1037, "ttang131": 1037, "veerlosar": 1037, "luzgin": 1037, "jeanselm": 1037, "lostanlen": 1037, "vnherdeiro": 1037, "wendi": 1037, "willdarnel": 1037, "wolframalpha": 1037, "xcjason": 1037, "martian": 1037, "xsat": 1037, "yinglr": 1037, "yokasr": 1037, "maxin": [1037, 1038], "yulia": 1037, "zamrii": 1037, "feng": [1037, 1039, 1040, 1041], "17959": 1038, "17848": 1038, "17742": 1038, "17995": 1038, "thomaz": 1038, "santana": [1038, 1041], "dsouza": [1038, 1039, 1040, 1041], "17433": 1038, "17985": 1038, "multinomialdevi": 1038, "logloss": 1038, "17694": 1038, "rempfler": 1038, "tsutomu": 1038, "kusanagi": [1038, 1040], "17357": 1038, "18016": 1038, "x_copi": 1038, "17914": 1038, "15730": 1038, "forrest": [1038, 1039], "17309": 1038, "swier": [1038, 1039], "heer": 1038, "17812": 1038, "bruno": [1038, 1039, 1040], "idl": 1038, "17210": 1038, "17235": 1038, "17204": 1038, "changed_onli": 1038, "17205": 1038, "15005": [1038, 1040], "slep009": [1038, 1040, 1041], "estimator_samples_": 1038, "16149": 1038, "11950": 1038, "11514": 1038, "16075": 1038, "16484": 1038, "16257": 1038, "simona": [1038, 1039, 1040], "maggio": [1038, 1039, 1040], "16801": 1038, "rcwoolston": 1038, "16431": 1038, "14048": 1038, "15963": 1038, "16084": 1038, "15950": 1038, "stephani": 1038, "15980": 1038, "wconnel": 1038, "15709": 1038, "15707": 1038, "maciej": 1038, "mikulski": 1038, "16006": 1038, "rushabh": 1038, "vasani": 1038, "streamhandl": 1038, "logger": 1038, "handler": 1038, "16451": 1038, "16280": 1038, "16837": 1038, "wornbb": 1038, "15669": 1038, "chaitanya": 1038, "16224": 1038, "schwetlick": [1038, 1039], "gelavizh": 1038, "ahmadi": 1038, "marija": [1038, 1039], "vlajic": [1038, 1039], "wheeler": [1038, 1039], "16841": 1038, "16655": 1038, "16718": 1038, "miotto": 1038, "16981": 1038, "g\u00f3rski": [1038, 1039], "14696": 1038, "14516": 1038, "15582": 1038, "16069": 1038, "bail": 1038, "16183": 1038, "16182": 1038, "santhosh": 1038, "16437": 1038, "hwan": 1038, "cho": 1038, "16539": 1038, "deros": 1038, "16692": 1038, "16663": 1038, "15834": 1038, "santiago": 1038, "mola": 1038, "16103": 1038, "divyaprabha": 1038, "selectormixin": 1038, "16132": 1038, "trimeta": 1038, "15503": 1038, "15782": 1038, "plgreenliru": 1038, "16403": 1038, "narendra": 1038, "mukherje": 1038, "16508": 1038, "15864": 1038, "14300": 1038, "15436": 1038, "15652": 1038, "15179": 1038, "angelaambroz": 1038, "15773": 1038, "15655": 1038, "14848": 1038, "absgrad": 1038, "_newton_cg": 1038, "16266": 1038, "standard_coef_": 1038, "standard_intercept_": 1038, "average_coef_": 1038, "average_intercept_": 1038, "16261": 1038, "brandt": 1038, "16849": 1038, "14264": 1038, "17021": 1038, "16323": 1038, "16362": 1038, "16442": 1038, "parson": [1038, 1040], "rick": 1038, "mackenbach": 1038, "16993": 1038, "emit": 1038, "15622": 1038, "mors": 1038, "15918": 1038, "kubin": 1038, "fit_grid_point": 1038, "16401": 1038, "pratama": 1038, "sutiono": 1038, "15953": 1038, "15959": 1038, "16111": 1038, "16090": 1038, "jayaratn": [1038, 1039, 1042, 1043], "14075": 1038, "meyer89": 1038, "16117": 1038, "15785": 1038, "16245": 1038, "16585": 1038, "15762": 1038, "16466": 1038, "16632": 1038, "maura": 1038, "pintor": 1038, "battista": 1038, "biggio": 1038, "15946": 1038, "ngshya": 1038, "32767": 1038, "mersenn": 1038, "twister": 1038, "31bit": 1038, "63bit": 1038, "crude": 1038, "postprocessor": 1038, "lemir": 1038, "13511": 1038, "kennel": 1038, "11296": 1038, "15558": 1038, "15806": 1038, "16331": 1038, "batiss": 1038, "15926": 1038, "16021": 1038, "sparsearrai": 1038, "16728": 1038, "uint": 1038, "17032": 1038, "_safe_tag": 1038, "16950": 1038, "15380": 1038, "16726": 1038, "16112": 1038, "16622": 1038, "17061": 1038, "aleksandra": 1038, "kocot": 1038, "alonso": [1038, 1040], "allend": [1038, 1040], "ana": [1038, 1040], "casado": 1038, "ankit810": 1038, "arunav": 1038, "konwar": 1038, "maingret": 1038, "beier": 1038, "berni": 1038, "bharathi": 1038, "brigi": [1038, 1039], "castachick": 1038, "castor": 1038, "corri": 1038, "bartelheim": 1038, "dani\u00ebl": 1038, "gelder": 1038, "daphn": 1038, "breuer": 1038, "cort": [1038, 1039, 1042, 1043], "dbauer9": 1038, "borovikova": 1038, "eln": 1038, "emili": [1038, 1039], "leung": 1038, "evgeni": 1038, "chasnovski": 1038, "fabiana": 1038, "facundo": [1038, 1041], "ferr\u00edn": 1038, "franziska": 1038, "boenisch": 1038, "bolmier": [1038, 1039, 1043], "gholdman1": 1038, "gonthier": 1038, "hao": [1038, 1039, 1041, 1042], "chun": [1038, 1039, 1041, 1042, 1043], "haoyin": [1038, 1040, 1041], "h\u00e9lion": 1038, "bourboux": 1038, "himanshu": [1038, 1041], "hirofumi": [1038, 1039], "suzuki": [1038, 1039], "huangk10": 1038, "kemenad": 1038, "hye": 1038, "sung": 1038, "indecisiveus": [1038, 1039], "inderjeet": 1038, "jjmistri": 1038, "haitz": [1038, 1040, 1041], "legarreta": [1038, 1040, 1041], "gorro\u00f1o": [1038, 1040, 1041], "judithabk6": 1038, "jumon": 1038, "kathryn": 1038, "krishnachaitanya9": 1038, "gia": 1038, "thuan": 1038, "lkubin": 1038, "lopusz": 1038, "lucgiffon": 1038, "lucyleeow": 1038, "kemk": 1038, "magda": 1038, "zielinska": 1038, "mandi": [1038, 1041], "gu": [1038, 1039, 1041], "manish": 1038, "aradwad": 1038, "mariana": 1038, "meirel": 1038, "mariel": 1038, "mc4229": 1038, "shoemak": 1038, "micha\u0142": 1038, "s\u0142apek": 1038, "mojca": 1038, "bertoncelj": 1038, "narendramukherje": 1038, "nicolasservel": 1038, "nkish": 1038, "noa": 1038, "tamir": [1038, 1041], "olicairn": 1038, "ur": 1038, "lenz": [1038, 1042], "delanou": 1038, "qizhi": 1038, "quang": 1038, "rachelcjordan": 1038, "raduspaimoc": 1038, "riccardo": [1038, 1044], "folloni": 1038, "ritchi": 1038, "rori": 1038, "hartong": 1038, "redden": 1038, "sambhav": 1038, "kothari": 1038, "santhoshbala18": 1038, "sarat": 1038, "addep": 1038, "scibol": 1038, "kie\u00dfl": 1038, "sergiodsr": 1038, "shiki": 1038, "shubh": 1038, "chatterje": 1038, "simonamaggio": [1038, 1039, 1040], "snowhit": 1038, "stareh": 1038, "marsh": 1038, "sunmi": 1038, "yoon": 1038, "talgatomarov": 1038, "tamirlan1": 1038, "nonner": 1038, "vink": [1038, 1040], "tiphain": 1038, "viard": 1038, "titu": 1038, "vachan": 1038, "vandana": 1038, "iyer": 1038, "waelbenamara": 1038, "wderos": 1038, "wenliwyan": 1038, "windber": 1038, "19579": 1039, "19646": 1039, "stopiter": 1039, "19922": 1039, "19732": 1039, "ishikawa": [1039, 1040], "19407": 1039, "ushtanit": [1039, 1040], "19982": 1039, "19939": 1039, "halvic": 1039, "19703": 1039, "sobkevich": 1039, "villaz\u00f3n": 1039, "terraza": 1039, "fonari": [1039, 1040], "19182": 1039, "yosuk": [1039, 1040], "kobayashi": [1039, 1040], "19721": 1039, "19659": 1039, "19211": 1039, "19847": 1039, "xiaoyu": 1039, "chai": [1039, 1042, 1043], "19308": 1039, "19234": 1039, "19727": 1039, "delong": [1039, 1040], "19888": 1039, "19924": 1039, "19271": 1039, "zhaowei": 1039, "19580": 1039, "brice": [1039, 1040], "adamson": 1039, "wil": 1039, "yegelwel": 1039, "css": 1039, "19417": 1039, "19179": 1039, "19126": 1039, "17448": 1039, "17107": 1039, "17546": 1039, "17856": 1039, "17984": 1039, "riedmann": 1039, "francesco": [1039, 1042], "casalegno": 1039, "18052": 1039, "sean": [1039, 1040, 1042], "stallei": 1039, "17937": 1039, "counts_": 1039, "init_size_": 1039, "17864": 1039, "17616": 1039, "18167": 1039, "18256": 1039, "jayratn": 1039, "16392": 1039, "17095": 1039, "18746": 1039, "norm_y_weight": 1039, "x_mean_": 1039, "y_mean_": 1039, "x_std_": 1039, "y_std_": 1039, "18768": 1039, "18302": 1039, "md5": 1039, "checksum": 1039, "14800": 1039, "17396": 1039, "jiaxiang": 1039, "17491": 1039, "18280": 1039, "17499": 1039, "17610": 1039, "18525": 1039, "11064": 1039, "17414": 1039, "18149": 1039, "17679": 1039, "18528": 1039, "villanova": [1039, 1040], "14446": 1039, "18394": 1039, "16985": 1039, "garbag": 1039, "18334": 1039, "multicor": [1039, 1040], "18341": 1039, "egor": 1039, "smirnov": 1039, "18410": 1039, "17702": 1039, "18326": 1039, "changedbehaviorwarn": 1039, "nonblasdotwarn": 1039, "17804": 1039, "17367": 1039, "15427": 1039, "gangesh": 1039, "gudmalwar": 1039, "6545": 1039, "17159": 1039, "15361": 1039, "17878": 1039, "17090": 1039, "_check_bounds_param": 1039, "12638": 1039, "lannuzel": 1039, "17526": 1039, "ayako": 1039, "yagi": 1039, "17612": 1039, "srimukh": 1039, "sripada": 1039, "16493": 1039, "darshan": 1039, "15636": 1039, "18987": 1039, "16619": 1039, "16906": 1039, "roei": 1039, "kahni": 1039, "18293": 1039, "16289": 1039, "kishimoto": 1039, "18639": 1039, "13003": 1039, "s\u00e1nchez": 1039, "18545": 1039, "laurenz": 1039, "reitsam": 1039, "17578": 1039, "knox": 1039, "6624": 1039, "marijn": 1039, "vliet": 1039, "18121": 1039, "18607": 1039, "fhaselbeck": 1039, "18622": 1039, "haesun": [1039, 1042, 1043], "10493": 1039, "17997": 1039, "maisonneuv": 1039, "square_dist": 1039, "17662": 1039, "18278": 1039, "17412": 1039, "16625": 1039, "10591": 1039, "karnowski": 1039, "plot_det_curv": [1039, 1040], "18176": 1039, "10708": 1039, "15007": 1039, "hathidara": 1039, "10711": 1039, "17192": 1039, "avi": [1039, 1040], "17225": 1039, "17569": 1039, "17651": 1039, "mato": 1039, "17777": 1039, "shubhanshu": 1039, "mishra": [1039, 1040], "17826": 1039, "decal": 1039, "willard": 1039, "17935": 1039, "cari": 1039, "goltermann": 1039, "18114": 1039, "18405": 1039, "yakov": 1039, "pchelintsev": 1039, "13900": 1039, "17478": 1039, "teon": 1039, "13204": 1039, "kosic": 1039, "18527": 1039, "18343": 1039, "devi": 1039, "sandeep": 1039, "18595": 1039, "18222": 1039, "18266": 1039, "subrat": 1039, "sahu": 1039, "15126": 1039, "17987": 1039, "17233": 1039, "zolisa": 1039, "bleki": 1039, "histgradientboost": 1039, "18124": 1039, "brocchini": 1039, "armstrong": 1039, "17427": 1039, "17038": 1039, "neighborsbas": [1039, 1042], "17148": 1039, "18691": 1039, "18370": 1039, "18612": 1039, "17603": 1039, "17604": 1039, "17606": 1039, "17608": 1039, "17609": 1039, "17633": 1039, "17661": 1039, "17932": 1039, "16352": 1039, "17759": 1039, "18269": 1039, "17876": 1039, "18429": 1039, "biernat": 1039, "17317": 1039, "17406": 1039, "wick": 1039, "18406": 1039, "17833": 1039, "yashika": 1039, "18510": 1039, "18447": 1039, "16066": 1039, "18682": 1039, "16935": 1039, "17193": 1039, "16335": 1039, "14982": 1039, "11682": 1039, "patric": [1039, 1040], "15763": 1039, "16530": 1039, "shuhua": 1039, "17386": 1039, "17187": 1039, "x_idx_sort": 1039, "17614": 1039, "check_methods_sample_order_invari": [1039, 1041], "17598": 1039, "ngo": 1039, "17992": 1039, "endian": 1039, "17644": 1039, "18508": 1039, "abo7atm": 1039, "spannbauer": 1039, "deodhar": 1039, "alexandracraciun": 1039, "amy12xx": 1039, "tiwari": 1039, "choraria": 1039, "subramaniyan": 1039, "kushwaha": 1039, "atsushi": [1039, 1040], "nukariya": [1039, 1040], "aura": 1039, "autoviz": 1039, "auto_viml": 1039, "avinash": 1039, "anak": 1039, "barankaraku": 1039, "barberogaston": 1039, "beatrizsmg": 1039, "mainy": 1039, "bossan": [1039, 1041, 1042, 1043], "pedigo": [1039, 1040], "bhavika": 1039, "devnani": 1039, "biprateep": 1039, "dei": 1039, "bmaisonn": 1039, "byron": 1039, "ceethinwa": [1039, 1040], "chaitanyamog": 1039, "clmbst": 1039, "coelhudo": 1039, "crispinlogan": [1039, 1042, 1043], "cristina": 1039, "mula": 1039, "darioka": [1039, 1041, 1042], "declan": 1039, "neill": 1039, "deeksha": 1039, "madan": 1039, "fiegel": [1039, 1040, 1042], "khoo": 1039, "eschibli": 1039, "fran": [1039, 1040, 1041], "larsson": [1039, 1040, 1041], "sheni": 1039, "genvalen": [1039, 1040, 1041, 1042, 1043], "kiragu": 1039, "gesa": 1039, "stupperich": 1039, "ghislain": 1039, "vaillant": 1039, "gim": 1039, "seng": 1039, "chevali": 1039, "bohl": [1039, 1041], "schole": 1039, "hitesh": 1039, "somani": 1039, "hoda1394": 1039, "moin": 1039, "hugorichard": 1039, "isuru": 1039, "wiryadi": 1039, "j0rd1smit": 1039, "jaehyun": 1039, "ahn": 1039, "tae": 1039, "hoctor": 1039, "vese": 1039, "jeevan": 1039, "jeroenpeterbo": 1039, "jhay": 1039, "jigna": 1039, "panchal": 1039, "jim0421": 1039, "joaquin": 1039, "gorb": 1039, "moya": 1039, "kartik": 1039, "chugh": 1039, "kaylani2": 1039, "kendrick": 1039, "cetina": 1039, "kenni": 1039, "isakov": 1039, "koki": 1039, "nishihara": 1039, "krum": [1039, 1041], "arnaudov": [1039, 1041], "oldja": 1039, "guitton": 1039, "mariam": 1039, "l\u00f6ning": 1039, "scheubrein": 1039, "megasari": 1039, "mathschi": 1039, "giudic": 1039, "milan": 1039, "straka": 1039, "muoki": 1039, "caleb": 1039, "haiat": 1039, "nadia": 1039, "tahiri": 1039, "ph": 1039, "hamada": 1039, "neil": 1039, "botelho": 1039, "nil": 1039, "noelano": 1039, "oj_lappi": 1039, "oleh": [1039, 1041], "kozynet": [1039, 1041], "pankaj": 1039, "jindal": 1039, "pardeep": 1039, "parthiv": 1039, "chigurupati": 1039, "pgithub": 1039, "probinette4": 1039, "pwalchessen": 1039, "rachel": [1039, 1042], "fischoff": 1039, "toshniw": 1039, "rafei": 1039, "iqbal": 1039, "rahul": 1039, "jakhar": 1039, "rachum": 1039, "ramyanp": [1039, 1040], "rauwuckl": 1039, "ravi": [1039, 1042], "kiran": 1039, "boggavarapu": 1039, "rishi": 1039, "advani": 1039, "rithvik": 1039, "romijnd": 1039, "tavenard": 1039, "rubi": 1039, "werman": 1039, "ryotaro": 1039, "tsukada": 1039, "sadak": 1039, "khandelw": 1039, "ezebunandu": 1039, "kimbinyi": 1039, "shail": 1039, "keller": 1039, "shao": [1039, 1040, 1041], "shooter23": [1039, 1040], "soledad": 1039, "galli": 1039, "subrat93": 1039, "sunitha": 1039, "selvan": 1039, "kusanagi2": 1039, "terenc": [1039, 1040], "honl": [1039, 1040], "thij": [1039, 1042, 1043], "thomas9292": 1039, "thorben": 1039, "tijanajovanov": 1039, "timo": 1039, "tnwei": 1039, "ufmay": 1039, "umberto": 1039, "lupo": 1039, "vika": [1039, 1041], "viniciu": [1039, 1040], "fuck": [1039, 1040], "violeta": 1039, "watchtheblur": 1039, "willpeppo": 1039, "xethan": 1039, "qianm": 1039, "yue": 1039, "yutaro": 1039, "ikeda": 1039, "zacchari": 1039, "ramzi": 1039, "zoj613": 1039, "21271": 1040, "21833": 1040, "siavash": 1040, "rezazadeh": 1040, "19210": 1040, "21295": 1040, "22050": 1040, "21991": 1040, "19869": 1040, "21481": [1040, 1041], "andr\u00e9": [1040, 1041, 1043], "babino": [1040, 1041], "disconnect": 1040, "21915": 1040, "21694": 1040, "minknowski": 1040, "cdist": 1040, "21741": 1040, "21871": 1040, "21845": 1040, "21517": 1040, "21917": 1040, "21552": 1040, "escap": [1040, 1042], "21493": 1040, "21199": 1040, "20638": 1040, "bohn\u00e9": 1040, "21179": 1040, "21195": 1040, "21130": 1040, "20761": 1040, "21251": 1040, "min_idf": 1040, "max_idf": 1040, "20752": 1040, "alek": [1040, 1041], "lefebvr": [1040, 1041], "21340": 1040, "21093": 1040, "21351": 1040, "cve": 1040, "28975": 1040, "21336": 1040, "_check_sample_weight": 1040, "only_non_neg": 1040, "20880": 1040, "andr\u00e1": [1040, 1041, 1042, 1043], "if_delegate_has_method": [1040, 1041], "21145": 1040, "zahlii": 1040, "21389": 1040, "20002": 1040, "19310": 1040, "least_squar": 1040, "19733": 1040, "lad": 1040, "absolute_loss": 1040, "20165": 1040, "18444": 1040, "18010": 1040, "threadsaf": 1040, "18736": 1040, "17443": 1040, "19641": 1040, "20087": 1040, "fauchereau": 1040, "19002": 1040, "19052": 1040, "yusuk": 1040, "nagasaka": 1040, "17622": 1040, "19024": 1040, "franki": 1040, "robertson": 1040, "20117": 1040, "natchiappan": [1040, 1041], "19883": 1040, "20597": 1040, "20899": 1040, "20200": 1040, "fit_": 1040, "partial_fit_": 1040, "19297": 1040, "20560": 1040, "18393": 1040, "bittarello": 1040, "19263": 1040, "19244": 1040, "18459": 1040, "nd": 1040, "18898": 1040, "ora": 1040, "phongpanagnam": 1040, "21080": 1040, "ledoit_wolf_shrinkag": 1040, "20416": 1040, "defoi": 1040, "20583": 1040, "19365": 1040, "ateif": 1040, "sara": 1040, "19669": 1040, "importlib": 1040, "pyoxid": 1040, "20297": 1040, "20209": 1040, "19011": 1040, "20729": 1040, "12069": 1040, "19046": 1040, "surya": [1040, 1041], "18433": 1040, "19198": 1040, "19159": 1040, "beno\u00eet": 1040, "mal\u00e9zieux": 1040, "19908": 1040, "20512": 1040, "20960": 1040, "cgroup": [1040, 1041], "quota": [1040, 1041], "20477": 1040, "19799": 1040, "19564": 1040, "19836": 1040, "19162": 1040, "10096": 1040, "fenil": 1040, "suchak": 1040, "20159": 1040, "murata": [1040, 1041], "20534": 1040, "19296": 1040, "19035": 1040, "19520": 1040, "18964": 1040, "19401": 1040, "relova": 1040, "17169": 1040, "dmytro": 1040, "lituiev": 1040, "20380": 1040, "pulido": 1040, "felip": [1040, 1041, 1042, 1043], "bidu": [1040, 1041], "rutter": 1040, "20515": 1040, "carsten": 1040, "allefeld": 1040, "19568": 1040, "shyam": 1040, "20207": 1040, "tomohiro": 1040, "endo": 1040, "20161": 1040, "shuhei": 1040, "kayawari": 1040, "arka204": [1040, 1042], "20431": 1040, "pfaffel": 1040, "19428": 1040, "hamoumi": 1040, "19411": 1040, "20959": 1040, "20554": 1040, "xiangyin": 1040, "kong": 1040, "9978": 1040, "10027": 1040, "16449": 1040, "20231": 1040, "naka": 1040, "19571": 1040, "20155": 1040, "oura": [1040, 1041, 1042], "19004": 1040, "midvidi": 1040, "19055": 1040, "19172": 1040, "19426": 1040, "19499": 1040, "strubel": 1040, "19616": 1040, "19391": 1040, "19390": 1040, "linearmodel": 1040, "17743": 1040, "17772": 1040, "17746": 1040, "17785": 1040, "17750": 1040, "17769": 1040, "20683": 1040, "19491": 1040, "19472": 1040, "shortest_path": 1040, "20531": 1040, "19415": 1040, "17036": 1040, "20326": 1040, "uttam": 1040, "9843": 1040, "19643": 1040, "attard": 1040, "19784": 1040, "18328": 1040, "20312": 1040, "divyanshu": 1040, "deoli": 1040, "18543": 1040, "20552": 1040, "19278": 1040, "20030": 1040, "tingshan": 1040, "18649": 1040, "rodion": 1040, "martynov": 1040, "20619": 1040, "baseshufflesplit": 1040, "20056": 1040, "pabloduque0": 1040, "prematur": 1040, "20904": 1040, "tomasz": 1040, "jakubek": [1040, 1041], "18925": 1040, "poznik": [1040, 1041, 1042], "18842": 1040, "19473": 1040, "jiefangxuanyan": 1040, "20072": 1040, "20842": 1040, "mart\u00edn": [1040, 1041], "19631": 1040, "19790": 1040, "flynn": [1040, 1042], "18368": 1040, "19483": 1040, "20526": 1040, "19069": 1040, "19041": 1040, "20250": 1040, "20652": 1040, "19934": 1040, "gleb": [1040, 1042, 1043], "levitskii": 1040, "19734": 1040, "robinson": 1040, "19752": 1040, "zhehao": [1040, 1041, 1042, 1043], "19527": 1040, "19788": 1040, "19356": 1040, "makoeppel": 1040, "19879": 1040, "19906": 1040, "20727": 1040, "20961": 1040, "n_input_features_": 1040, "20240": 1040, "20843": 1040, "18959": 1040, "wstate": 1040, "20023": 1040, "19336": 1040, "20272": 1040, "19459": 1040, "bezuidenhout": 1040, "clifford": 1040, "akai": 1040, "nettei": 1040, "19948": 1040, "20657": 1040, "19766": 1040, "20385": 1040, "_weighted_percentil": 1040, "huberlossfunct": 1040, "20528": 1040, "_safe_index": 1040, "20673": 1040, "is_scalar_nan": 1040, "assert_warn": 1040, "assert_warns_messag": 1040, "20521": 1040, "abdulelah": 1040, "mesfer": 1040, "adrian": [1040, 1041, 1042], "garcia": 1040, "badaracco": 1040, "sad\u0142ocha": 1040, "rubial": 1040, "alessia": 1040, "marcolini": 1040, "alihan": 1040, "zihna": 1040, "alin": 1040, "amol": 1040, "deshmukh": 1040, "pessoa": 1040, "anavelyz": 1040, "ashish": [1040, 1043], "ashvith": 1040, "shetti": 1040, "baam": [1040, 1041], "baptbillard": 1040, "bmalezieux": 1040, "bumblebe": 1040, "caherrera": 1040, "meli": [1040, 1041, 1042], "chrissobel": 1040, "yeh": 1040, "chuliang": 1040, "cliffordemmanuel": 1040, "conner": 1040, "shen": 1040, "dimitri": [1040, 1041, 1042, 1043], "papadopoulo": [1040, 1041, 1042, 1043], "orfano": [1040, 1041, 1042, 1043], "dmallia17": 1040, "ds_ana": 1040, "jardim": 1040, "edwinwenink": 1040, "eleni": 1040, "markou": 1040, "ericellwang": [1040, 1041], "ezri": 1040, "mudd": 1040, "fato": 1040, "morina": 1040, "hafner": 1040, "flyingdutchman23": 1040, "uwha": [1040, 1041], "bereng": 1040, "frederick": 1040, "frellwan": 1040, "vicent": [1040, 1041, 1042], "geroldcsend": 1040, "glen": 1040, "gl\u00f2ria": [1040, 1042], "mu\u00f1oz": [1040, 1042], "gregorystrubel": 1040, "groceryheist": 1040, "guiweb": 1040, "haidar": [1040, 1041], "almubarak": [1040, 1041], "moritz": [1040, 1042], "g\u00fcnther": 1040, "mirza": 1040, "harutaka": 1040, "kawamura": 1040, "hassan": 1040, "alsawadi": 1040, "geovan": [1040, 1041], "gome": [1040, 1041], "lima": [1040, 1041], "ilic": 1040, "ikko": 1040, "ashimin": 1040, "isaack": 1040, "mungui": 1040, "ishaan": 1040, "bhat": [1040, 1042, 1043, 1044], "ishan": [1040, 1041], "iwhalv": 1040, "preiss": 1040, "budarz": 1040, "jannik": 1040, "jennif": 1040, "jianzhu": 1040, "guo": 1040, "jnboehm": 1040, "johanwork": 1040, "paton": 1040, "n\u00e1pole": 1040, "julio": 1040, "julyrashchenko": 1040, "jvm": 1040, "kadatatlu": 1040, "kishor": 1040, "karen": 1040, "palacio": 1040, "kmatt10": 1040, "kobaski": 1040, "kot271828": 1040, "kunj": 1040, "kurumeyuta": 1040, "kxytim": 1040, "lacrosse91": 1040, "laveen": 1040, "bagai": 1040, "leonardo": 1040, "rocco": [1040, 1041, 1042], "uieda": 1040, "leopoldo": 1040, "corona": 1040, "lsturtew": 1040, "lucca": 1040, "quadro": 1040, "ly648499246": 1040, "mabu": 1040, "manaileng": 1040, "mariangela": 1040, "marielaraj": 1040, "hirzel": 1040, "mateo": 1040, "nore\u00f1a": 1040, "mathi": 1040, "batoul": 1040, "calcot": 1040, "prieur": 1040, "\u00f6zer": 1040, "miao": 1040, "cai": 1040, "karbownik": 1040, "michalkrawczyk": [1040, 1041], "mitzi": [1040, 1041], "mlondschien": 1040, "haseeb": [1040, 1041], "khoual": 1040, "jarir": 1040, "kanji": 1040, "nadim": 1040, "kawwa": 1040, "nanshan": 1040, "naozin555": 1040, "fultz": 1040, "nic": 1040, "annau": 1040, "stefani": [1040, 1042, 1043, 1044], "nigel": 1040, "bosch": 1040, "nodar": 1040, "okroshiashvili": 1040, "ogbonna": 1040, "chibuik": 1040, "ogordon100": 1040, "phongpanangam": 1040, "duqu": 1040, "ibieta": 1040, "jimenez": [1040, 1041], "lacouth": 1040, "olszewski": 1040, "dye": 1040, "pierreattard": [1040, 1041], "yve": 1040, "borgn": 1040, "pranayanchuri": 1040, "princ": 1040, "canuma": 1040, "putschblo": 1040, "ranjanikrishnan": 1040, "rene": 1040, "corneil": 1040, "ricardojnf": 1040, "richardscottoz": 1040, "sandi": 1040, "khosasi": 1040, "benhur": 1040, "flore": 1040, "shinehid": 1040, "shinnar": 1040, "tootoonian": 1040, "solosil": 1040, "kolawol": 1040, "stagg": 1040, "swpeas": 1040, "tfifi": 1040, "caswel": [1040, 1043], "timotheemathieu": 1040, "wolodzko": 1040, "tliu68": 1040, "uhmann": 1040, "tom1092": 1040, "tom\u00e1": [1040, 1041], "moreyra": 1040, "tommaso": 1040, "noto": 1040, "tsuga": 1040, "vang": 1040, "gkiasta": 1040, "vil\u00e9m": 1040, "zouhar": 1040, "vlasovet": 1040, "waijean": 1040, "whidou": 1040, "xiaoyuchai": 1040, "yasmeen": 1040, "alsaedi": 1040, "yoch": 1040, "yusukenagasaka": 1040, "yzhenman": 1040, "zeyusun": 1040, "zhaoweiwang": 1040, "msvcp140": 1041, "dll": 1041, "24631": 1041, "24446": 1041, "10805": 1041, "mathia": 1041, "23471": 1041, "24015": 1041, "23990": 1041, "23833": 1041, "24017": 1041, "sorski": [1041, 1042], "23395": 1041, "23636": 1041, "22063": 1041, "22059": 1041, "kurz": [1041, 1042], "23608": 1041, "23548": 1041, "24087": 1041, "23273": 1041, "23194": 1041, "23198": 1041, "lise": 1041, "kleiber": 1041, "23358": 1041, "23264": 1041, "feature_names_in": 1041, "23299": 1041, "23214": 1041, "collot": [1041, 1042], "baak": 1041, "23370": 1041, "23410": 1041, "compute_sample_weight": 1041, "23115": 1041, "22868": 1041, "multiindex": 1041, "22410": 1041, "23271": 1041, "21987": 1041, "22064": 1041, "22065": 1041, "22288": 1041, "22320": 1041, "21219": 1041, "21542": 1041, "23098": 1041, "22318": 1041, "23036": 1041, "binary_crossentropi": 1041, "23040": 1041, "23046": 1041, "22856": 1041, "21032": 1041, "18170": 1041, "21038": 1041, "14975": 1041, "22526": 1041, "23095": 1041, "silk": 1041, "20031": 1041, "krawczyk": 1041, "21148": 1041, "22255": 1041, "21881": 1041, "vassard": 1041, "22217": 1041, "21735": 1041, "22154": 1041, "22537": 1041, "iofal": 1041, "arisa": [1041, 1042], "22775": 1041, "22913": 1041, "randomgeek78": 1041, "22493": 1041, "19680": 1041, "thibaut": 1041, "22119": 1041, "22016": 1041, "22015": 1041, "19747": 1041, "attalla": 1041, "22498": 1041, "21482": 1041, "pujalt": 1041, "22412": 1041, "16605": 1041, "21901": 1041, "rileran": 1041, "23113": 1041, "ilion": 1041, "beyst": 1041, "21425": 1041, "stefanini": 1041, "16948": 1041, "patricio": 1041, "cerda": 1041, "22002": 1041, "21109": 1041, "inner_stats_": 1041, "iter_offset_": 1041, "18975": 1041, "22111": 1041, "22181": 1041, "21334": 1041, "21705": 1041, "stanlei": [1041, 1042, 1043], "21432": 1041, "22806": 1041, "jihan": 1041, "benni": 1041, "21713": 1041, "haya": 1041, "21567": 1041, "maggi": 1041, "chege": 1041, "22300": 1041, "15948": 1041, "sysuresh": 1041, "22553": 1041, "19490": 1041, "ferrin": 1041, "22120": 1041, "15984": 1041, "okon": 1041, "22696": 1041, "22486": 1041, "21800": 1041, "20567": 1041, "22159": 1041, "20811": 1041, "21814": 1041, "16748": 1041, "siqi": 1041, "22215": 1041, "23047": 1041, "22695": 1041, "22697": 1041, "21762": 1041, "22106": 1041, "gijsber": 1041, "21632": 1041, "genesi": [1041, 1043], "valencia": [1041, 1043], "22566": 1041, "22908": 1041, "23097": 1041, "23079": 1041, "20803": 1041, "23023": 1041, "21573": 1041, "21832": 1041, "20145": 1041, "22356": 1041, "18482": 1041, "gameiro": 1041, "kharsa": 1041, "22370": 1041, "17819": 1041, "22235": 1041, "21837": 1041, "wagner": 1041, "22199": 1041, "aidar": 1041, "shakerimoff": 1041, "tenavi": 1041, "nakamura": 1041, "22223": 1041, "marcom": 1041, "21617": 1041, "ritter": [1041, 1042], "21114": 1041, "21078": 1041, "21448": 1041, "16061": 1041, "19438": 1041, "18310": 1041, "elfner": 1041, "22249": 1041, "22137": 1041, "22694": 1041, "22808": 1041, "22950": 1041, "21086": 1041, "22206": 1041, "21808": 1041, "22548": 1041, "22062": 1041, "trujillo": [1041, 1042], "22148": 1041, "22240": 1041, "9087": 1041, "22525": 1041, "19689": 1041, "21606": 1041, "21341": 1041, "preservs": 1041, "21767": 1041, "21724": 1041, "yar": 1041, "khine": 1041, "phyo": 1041, "21998": 1041, "22891": 1041, "22899": 1041, "23256": 1041, "19794": 1041, "21534": 1041, "22254": 1041, "21805": 1041, "jeann": 1041, "dionisi": 1041, "22685": 1041, "n_neighbour": 1041, "18832": 1041, "23033": 1041, "21565": 1041, "17266": 1041, "22118": 1041, "ohad": 1041, "22284": 1041, "19158": 1041, "nicki": 1041, "skaft": 1041, "20753": 1041, "22108": 1041, "22635": 1041, "19085": 1041, "22866": 1041, "21576": 1041, "emil": 1041, "dugnat": 1041, "21873": 1041, "21177": 1041, "20408": 1041, "ceballo": 1041, "22058": 1041, "23034": 1041, "22203": 1041, "21026": 1041, "21880": 1041, "mrinal": 1041, "tyagi": 1041, "22982": 1041, "22508": 1041, "comb": 1041, "22604": 1041, "22212": 1041, "21430": 1041, "desislava": 1041, "vasileva": 1041, "22687": 1041, "22150": 1041, "22248": 1041, "20860": 1041, "shubhraneel": 1041, "21888": 1041, "21954": 1041, "22953": 1041, "16018": 1041, "21445": 1041, "21988": 1041, "get_output_feature_nam": 1041, "21569": 1041, "21079": 1041, "20653": 1041, "21434": 1041, "19916": 1041, "22735": 1041, "compute_inverse_transform": 1041, "21701": 1041, "22114": 1041, "21330": 1041, "21408": 1041, "22149": 1041, "21436": 1041, "22191": 1041, "22476": 1041, "21278": 1041, "21316": 1041, "clickabl": 1041, "21298": 1041, "22237": 1041, "check_scalar": 1041, "22218": 1041, "validationerror": 1041, "check_requires_y_non": 1041, "22578": 1041, "arcidiacono": [1041, 1042], "22595": 1041, "21310": 1041, "22027": 1041, "lanterni": 1041, "23077": 1041, "22188": 1041, "22830": 1041, "2357juan": [1041, 1042, 1043], "adamgonzo": 1041, "adijohar": 1041, "kumawat": 1041, "raghuwanshi": 1041, "duron": 1041, "ahmadjubair33": 1041, "aj": 1041, "druck": 1041, "peixinho": 1041, "arroyo": 1041, "alexanmv": 1041, "almeidayoel": 1041, "amar": [1041, 1042, 1043], "amrcod": 1041, "griva": [1041, 1042], "andrii": 1041, "herrou": 1041, "ducout": 1041, "arth": 1041, "arthurmello": 1041, "arturoamor": 1041, "atharva": 1041, "patil": 1041, "aufarkari": 1041, "avm19": [1041, 1042], "ayan": 1041, "bardiya": [1041, 1042], "behrouz": 1041, "ben3940": 1041, "bijil": 1041, "subhash": 1041, "bmreinig": 1041, "brenden": 1041, "kadota": 1041, "cdrig": 1041, "chalmer": 1041, "chitteti": 1041, "srinath": [1041, 1042], "chloe": 1041, "agath": 1041, "azencott": 1041, "christopherlim98": 1041, "weidemann": 1041, "combsccod": 1041, "daniela": [1041, 1042], "darren": [1041, 1042], "eargl": 1041, "gilbertson": [1041, 1042], "dea": [1041, 1042, 1043], "mar\u00eda": [1041, 1042, 1043], "denni": 1041, "osei": 1041, "dessyvv": 1041, "dev514": 1041, "diwakar": 1041, "ries": 1041, "drskd": 1041, "emiko": 1041, "sano": 1041, "emmanouil": 1041, "gionanidi": 1041, "ermolaevpa": [1041, 1042], "estefania": 1041, "barreto": 1041, "ojeda": 1041, "eyast": 1041, "fatima": 1041, "gasmi": 1041, "luna": 1041, "glushchenkov": 1041, "fkaren27": 1041, "fpgawesom": 1041, "ftorres16": [1041, 1042], "gabor": 1041, "berei": 1041, "kertesz": 1041, "gauthier": 1041, "giancarlo": 1041, "glennfrutiz": 1041, "guillermo": 1041, "fern\u00e1ndez": 1041, "hansin": [1041, 1042], "henrymooresc": [1041, 1042], "hideaki": 1041, "imamura": 1041, "hind": 1041, "hmasdev": 1041, "hvassard": 1041, "aki": [1041, 1042, 1043], "iasoon": 1041, "ingela": 1041, "cowton": 1041, "jalexand3r": 1041, "jauhar": 1041, "jaya": 1041, "kommireddi": 1041, "je": 1041, "jelfner": 1041, "jenni": 1041, "jirka": 1041, "borovec": 1041, "cipri\u00e1n": 1041, "loayza": 1041, "chazalon": 1041, "mess": 1041, "jovan": [1041, 1042], "stojanov": [1041, 1042], "jschuerz": 1041, "katotten": 1041, "ken4git": 1041, "doucet": 1041, "kimayoung": 1041, "koushik": 1041, "kranthi": 1041, "sedamaki": 1041, "krumetoft": 1041, "lesne": 1041, "casino": [1041, 1042], "logan": [1041, 1042, 1043], "lucieclair": 1041, "luiz": 1041, "magali": 1041, "mandjev": 1041, "wurp": [1041, 1042], "boerner": 1041, "wimld": 1041, "martel": 1041, "corentin": 1041, "mat\u00eda": 1041, "matjansen": 1041, "francia": 1041, "megabyt": 1041, "mehrdad": 1041, "moradizadeh": 1041, "melemo2": 1041, "micky774": [1041, 1042], "milana2": 1041, "millawel": 1041, "miwojc": 1041, "mizuki": 1041, "mlant": 1041, "mohit": [1041, 1044], "moonkyung94": 1041, "mpoemsl": 1041, "mrinaltyagi": 1041, "leu": 1041, "msabati": 1041, "nadirhan": 1041, "\u015fahin": 1041, "naipawat": [1041, 1042], "poolsawat": [1041, 1042], "nartayxd": 1041, "nastegiano": 1041, "nathansquan": 1041, "detlefsen": 1041, "niket": 1041, "nikhil": 1041, "suresh": 1041, "kondratyev": 1041, "husak": 1041, "partev": [1041, 1042, 1043], "pelennor": 1041, "piet": [1041, 1042], "br\u00f6mmel": [1041, 1042], "pinki": 1041, "poloso": 1041, "pramod": 1041, "anantharam": 1041, "puhuk": [1041, 1042], "purna": 1041, "mansingh": 1041, "quadv": 1041, "rahil": [1041, 1042, 1043], "boy": 1041, "raz": 1041, "hoshia": 1041, "rishabh": 1041, "barnowski": [1041, 1042], "rsnegrin": 1041, "yadav": 1041, "sakinaouisrani": 1041, "sanjai": 1041, "marreddi": 1041, "seel": 1041, "sele": [1041, 1042], "seyedsaman": 1041, "emami": 1041, "shandeng123": 1041, "sharmadharmp": 1041, "shaymernaturalint": 1041, "shuangchi": [1041, 1042], "siavrez": 1041, "slishak": 1041, "spikebh": 1041, "sply88": 1041, "kailasa": [1041, 1042], "sultan": 1041, "orazbayev": 1041, "sumit": 1041, "saha": 1041, "sven": [1041, 1042], "eschlbeck": 1041, "stehl": [1041, 1042], "swapnil": 1041, "teunp": 1041, "ferr\u00e9": 1041, "hjortkj\u00e6r": 1041, "thiruvenkadam": 1041, "toastedyeast": [1041, 1042], "mctiernan": [1041, 1042], "udit": 1041, "ugo": 1041, "marchand": 1041, "vera": [1041, 1042], "komey": [1041, 1042], "victoireloui": 1041, "vishwakarma": 1041, "vikrant": 1041, "khedkar": 1041, "chernyi": 1041, "weijiadu": 1041, "yuan": [1041, 1042, 1043], "yiyangq": 1041, "yosshi999": 1041, "yuki": 1041, "koyama": 1041, "zeel": 1041, "zempleni": 1041, "zhenfish": 1041, "\u8d75\u4e30": 1041, "25747": 1042, "base_estimator__": 1042, "25477": 1042, "25563": 1042, "25570": 1042, "25664": 1042, "25774": 1042, "25500": 1042, "25589": 1042, "25704": 1042, "min_sample_split": 1042, "25744": 1042, "25619": 1042, "25638": 1042, "25354": 1042, "25174": 1042, "25089": 1042, "25129": 1042, "25363": 1042, "25188": 1042, "25295": 1042, "spec": [1042, 1043], "25312": 1042, "backslash": 1042, "25511": 1042, "25172": 1042, "25341": 1042, "25094": 1042, "25250": 1042, "25370": 1042, "23101": 1042, "24873": 1042, "25694": 1042, "25274": 1042, "25296": 1042, "25147": 1042, "23619": 1042, "24354": 1042, "safiuddin": 1042, "khaja": 1042, "gsiisg": 1042, "23935": 1042, "22527": 1042, "_sgd_fast": 1042, "_plain_sgd": 1042, "oversc": 1042, "23798": 1042, "24543": 1042, "24465": 1042, "23734": 1042, "24699": 1042, "23865": 1042, "simd": 1042, "primit": 1042, "23446": 1042, "23197": 1042, "23604": 1042, "23585": 1042, "24556": 1042, "maladi\u00e8r": [1042, 1043], "24617": 1042, "sim4n6": 1042, "24688": 1042, "22054": 1042, "roic": 1042, "24264": 1042, "maladier": 1042, "14736": 1042, "hunt": 1042, "zhan": 1042, "20802": 1042, "pokorni": 1042, "22965": 1042, "22968": 1042, "23038": 1042, "23210": 1042, "24258": 1042, "23470": 1042, "21938": 1042, "23127": 1042, "19075": 1042, "ramo": 1042, "carre\u00f1o": 1042, "24951": 1042, "22268": 1042, "mohamedbsh": 1042, "23905": 1042, "11860": 1042, "ablin": 1042, "24528": 1042, "23726": 1042, "24421": 1042, "kshitij": [1042, 1043], "22554": 1042, "24218": 1042, "molin": 1042, "21020": 1042, "24856": 1042, "22014": 1042, "23252": 1042, "24538": 1042, "24889": 1042, "24146": 1042, "peretti": 1042, "nestor": 1042, "navarro": 1042, "nati": 1042, "tomatti": 1042, "24855": 1042, "24849": 1042, "20415": 1042, "24283": 1042, "24894": 1042, "23819": [1042, 1043], "edoardo": [1042, 1044], "abati": [1042, 1044], "24747": 1042, "24245": 1042, "24405": 1042, "16695": 1042, "vitor": 1042, "rosa": 1042, "18298": 1042, "25077": 1042, "24317": 1042, "24350": 1042, "24755": 1042, "levitski": [1042, 1043], "24637": 1042, "24767": 1042, "23275": 1042, "maxwelllzh": 1042, "24433": 1042, "yogendrasingh": 1042, "23637": 1042, "23877": 1042, "10168": 1042, "\u0142ukasz": 1042, "borchmann": 1042, "12285": 1042, "miltenberg": 1042, "13042": 1042, "parizi": 1042, "18094": 1042, "22562": 1042, "24714": 1042, "23834": 1042, "24051": 1042, "22518": 1042, "18020": 1042, "24338": 1042, "23442": 1042, "atukorala": 1042, "22710": 1042, "conroi": 1042, "trinh": 1042, "23461": 1042, "24365": 1042, "24630": 1042, "rushil": [1042, 1043], "24084": 1042, "iinfo": 1042, "24141": 1042, "24539": 1042, "23977": 1042, "23683": 1042, "andrei": 1042, "melnik": 1042, "16747": 1042, "18805": 1042, "hongshaoyang": 1042, "22269": 1042, "23139": 1042, "24645": 1042, "10468": 1042, "ruben": 1042, "22993": 1042, "24750": 1042, "rudresh": 1042, "veerkhar": 1042, "23874": 1042, "24075": 1042, "22665": 1042, "24683": 1042, "24058": 1042, "perdok": 1042, "20331": 1042, "23993": 1042, "22629": 1042, "24412": 1042, "22898": 1042, "23480": 1042, "21469": 1042, "lapack_svd_driv": 1042, "20617": 1042, "25067": 1042, "14862": 1042, "24512": 1042, "24667": 1042, "25080": 1042, "24523": 1042, "mia": 1042, "bajic": 1042, "3llobo": 1042, "kania": [1042, 1043], "anulekh": 1042, "admir": [1042, 1043], "demiraj": [1042, 1043], "adoublet": [1042, 1043], "ahmedbgh": [1042, 1043], "aiko": 1042, "akshita": 1042, "prasanth": 1042, "ala": [1042, 1043], "miola": 1042, "lebel": 1042, "buzenet": [1042, 1043], "kassa": [1042, 1043], "bera": 1042, "maennel": 1042, "aniket": 1042, "shirsat": 1042, "anthony22": [1042, 1043], "apostolo": 1042, "tsetogl": 1042, "aravindh": 1042, "artur": [1042, 1043], "hermano": [1042, 1043], "ashah002": [1042, 1043], "ashwin": [1042, 1043], "azaria": [1042, 1043], "gebremichael": [1042, 1043], "b0rxington": 1042, "badr": 1042, "moufad": 1042, "bart\u0142omiej": 1042, "go\u0144da": 1042, "bdegraaff": 1042, "berkecanrizai": 1042, "bernd": 1042, "fritzk": 1042, "bhoomika": 1042, "biswaroop": 1042, "cannon": 1042, "bsh": 1042, "ceh": 1042, "chalulu": 1042, "changyao": [1042, 1043], "zablit": 1042, "veenhui": [1042, 1043], "christianwaldmann": 1042, "christin": [1042, 1043], "verrier": 1042, "dangonite57": [1042, 1043], "danielgaerb": 1042, "davidblnc": [1042, 1043], "dayn": [1042, 1043], "khant": 1042, "dhanshre": 1042, "diadochokinet": 1042, "diederikwp": 1042, "litsidi": [1042, 1043], "drewhogg": 1042, "oc": 1042, "dwight": 1042, "lindquist": 1042, "eden": 1042, "brekk": 1042, "edern": [1042, 1043], "eleanor": 1042, "eliaschiavon": 1042, "emir": [1042, 1043], "fabrizio": 1042, "damicelli": 1042, "fcharra": 1042, "siola": [1042, 1043], "tuveri": 1042, "franck": 1042, "charra": 1042, "geevarghes": 1042, "georgiamaydai": 1042, "gianr": 1042, "lazz": 1042, "guitar": 1042, "gunesbayir": [1042, 1043], "harshit5674": 1042, "hasan": 1042, "yaman": 1042, "vrigazov": 1042, "htsedebenham": 1042, "humahn": 1042, "ido": [1042, 1043], "iglesi": 1042, "iliya": 1042, "zhechev": 1042, "iren": [1042, 1043], "ivanllt": 1042, "sedykh": 1042, "mcivor": [1042, 1043], "janfidor": [1042, 1043], "jiten": 1042, "sidhpura": 1042, "jkarolczak": 1042, "jo\u00e3o": 1042, "johnathanpi": [1042, 1043], "koumenti": 1042, "panga": [1042, 1043], "johnthagen": 1042, "fleme": 1042, "choo": [1042, 1043], "yun": [1042, 1043], "keat": [1042, 1043], "juanfe88": 1042, "juliaschoepp": [1042, 1043], "jygerardi": [1042, 1043], "ka00ri": [1042, 1043], "kanishk": 1042, "sachdev": 1042, "kanissh": 1042, "kendal": 1042, "kento": [1042, 1043], "nozawa": [1042, 1043], "eliasi": [1042, 1043], "kluge": [1042, 1043], "lieret": 1042, "kirandevraj": 1042, "kraig": 1042, "vamsi": 1042, "kapadni": 1042, "lingyi1110": 1042, "mantovani": 1042, "maascha": 1042, "madinak": 1042, "maksym": 1042, "mansi": 1042, "kostelac": [1042, 1043], "marvin": [1042, 1043], "krawutschk": [1042, 1043], "masanori": [1042, 1043], "kanazu": [1042, 1043], "haberland": [1042, 1043], "mauroantonioserrano": 1042, "maxi": 1042, "marufo": 1042, "maximesaur": [1042, 1043], "smolskii": 1042, "bou": [1042, 1043], "mehgarg": 1042, "mehmetcanakbai": 1042, "baji\u0107": 1042, "flak": 1042, "hornstein": 1042, "ruiter": 1042, "paradi": 1042, "iljin": [1042, 1043], "misa": 1042, "ogura": 1042, "wilksch": 1042, "mrastgoo": 1042, "naois": [1042, 1044], "holohan": [1042, 1044], "nass": 1042, "jacobi": 1042, "nawazish": [1042, 1043], "alam": [1042, 1043], "nguy\u1ec5n": 1042, "v\u0103n": 1042, "di\u1ec5n": 1042, "fanelli": [1042, 1043], "nihal": 1042, "thukarama": 1042, "jare": 1042, "nima10khodaveisi": 1042, "nima": 1042, "sarajpoor": 1042, "nitinramvelraj": 1042, "nnlnr": [1042, 1043], "npach": [1042, 1043], "nwanna": 1042, "nymark": 1042, "kho": 1042, "holman": 1042, "oll": 1042, "lukowski": 1042, "hassoun": 1042, "tamer": 1042, "ouss1508": [1042, 1043], "oyindamola": 1042, "olatunji": 1042, "pab": [1042, 1043], "pandata": [1042, 1043], "soar": 1042, "petar": 1042, "mlinari\u0107": 1042, "pooja": [1042, 1043], "subramaniam": [1042, 1043], "priyam": 1042, "kakati": 1042, "freeland": 1042, "keerti": 1042, "rafal": [1042, 1043], "wojdyla": [1042, 1043], "raghuv": [1042, 1043], "makhija": 1042, "rehan": 1042, "guha": 1042, "klima": 1042, "crockett": 1042, "homm": 1042, "roman4oo": 1042, "rowan": 1042, "mankoo": 1042, "sabri": 1042, "monaf": 1042, "safikh": 1042, "salahuddin": 1042, "yojana": 1042, "menes": 1042, "ephrem": 1042, "sangam": 1042, "sangamswadik": 1042, "sanjai_3": [1042, 1043], "sarahremu": 1042, "sashka": [1042, 1043], "savkomax": 1042, "gustafson": [1042, 1043], "sec65": 1042, "seljak": 1042, "shadi": [1042, 1043], "gewili": [1042, 1043], "shellyfung": 1042, "shinsuk": 1042, "mori": 1042, "shiva": [1042, 1043], "shoaib": 1042, "khan": [1042, 1043], "shogo": [1042, 1043], "hida": [1042, 1043], "shrankhla": 1042, "sonniv": [1042, 1043], "sortofamudkip": [1042, 1043], "stanislav": [1042, 1043], "modrak": [1042, 1043], "stellalin7": 1042, "vaerenbergh": [1042, 1043], "schmerler": 1042, "tabea": [1042, 1043], "kossen": [1042, 1043], "thedevpanda": 1042, "syd": 1042, "sre": 1042, "weezel": [1042, 1043], "bonald": 1042, "germer": [1042, 1043], "ion": 1042, "timofei": 1042, "kornev": 1042, "pitter": 1042, "tomiock": [1042, 1043], "mathew": 1042, "tspeng": [1042, 1043], "egashira": 1042, "rey": 1042, "puerta": 1042, "vishal": 1042, "vyom": [1042, 1043], "pathak": [1042, 1043], "wattai": 1042, "wchathura": 1042, "wen": 1042, "x110": 1042, "xuniu": 1042, "yanhong": 1042, "ef": 1042, "yusuf": [1042, 1043], "raji": [1042, 1043], "adil": 1042, "khwaja": 1042, "zeeshan": [1042, 1043], "lone": [1042, 1043], "27468": 1043, "27583": 1043, "paralel": 1043, "27573": 1043, "27580": 1043, "18488": 1043, "26814": 1043, "27044": 1043, "26913": 1043, "27167": 1043, "27243": 1043, "26602": 1043, "26521": 1043, "26748": 1043, "26600": 1043, "shreesha": [1043, 1044], "27002": 1043, "26416": 1043, "tao": 1043, "26772": 1043, "reintroduc": 1043, "26754": 1043, "26893": 1043, "senger": [1043, 1044], "26760": 1043, "26940": 1043, "26931": 1043, "26903": 1043, "roehr": 1043, "27292": 1043, "25196": 1043, "24871": 1043, "25752": 1043, "25438": 1043, "yotam": 1043, "avidar": 1043, "constantini": 1043, "26337": 1043, "25120": 1043, "27311": 1043, "25294": 1043, "25308": 1043, "25291": 1043, "25367": 1043, "25402": 1043, "25044": 1043, "smt": 1043, "26082": 1043, "24027": 1043, "25815": 1043, "24568": 1043, "26121": 1043, "25805": 1043, "26385": 1043, "26657": 1043, "binesh": 1043, "bannerje": 1043, "25251": 1043, "26503": 1043, "26286": 1043, "26323": 1043, "26033": 1043, "26108": 1043, "barth\u00e9lemi": 1043, "26433": 1043, "26386": 1043, "26551": 1043, "26579": 1043, "25784": 1043, "25490": 1043, "25956": 1043, "22409": 1043, "25177": 1043, "24882": 1043, "25186": 1043, "breve": 1043, "26318": 1043, "25506": 1043, "25601": 1043, "fidor": 1043, "25931": 1043, "25629": 1043, "26242": 1043, "toplak": 1043, "sckit": 1043, "25297": 1043, "24230": 1043, "25102": 1043, "25973": 1043, "25232": 1043, "26454": 1043, "25209": 1043, "26644": 1043, "lemo": 1043, "21809": 1043, "25732": 1043, "25190": 1043, "26207": 1043, "25587": 1043, "25697": 1043, "25214": 1043, "26653": 1043, "25531": 1043, "17388": 1043, "24769": 1043, "25713": 1043, "18723": 1043, "sahil": 1043, "24677": 1043, "24668": 1043, "dberenbaum": 1043, "25987": 1043, "26019": 1043, "25432": 1043, "25672": 1043, "lene": 1043, "preuss": 1043, "25299": 1043, "omarmanzoor": 1043, "26194": 1043, "26264": 1043, "barata": 1043, "onggo": 1043, "23099": 1043, "26021": 1043, "jiawei": 1043, "25659": 1043, "26333": 1043, "24140": 1043, "24076": 1043, "25417": 1043, "24083": 1043, "25443": 1043, "feature_union": 1043, "25093": 1043, "25220": 1043, "26325": 1043, "25334": 1043, "25677": 1043, "20524": 1043, "niuk": 1043, "23731": 1043, "24145": 1043, "22506": 1043, "24935": 1043, "seladu": 1043, "25257": 1043, "26424": 1043, "26400": 1043, "26566": 1043, "26093": 1043, "23595": 1043, "26376": 1043, "25387": 1043, "26289": 1043, "25813": 1043, "26106": 1043, "25814": 1043, "check_transformers_unfitted_stateless": 1043, "25733": 1043, "19664": 1043, "environmenterror": 1043, "ioerror": 1043, "windowserror": 1043, "26466": 1043, "kushwah": 1043, "handk": 1043, "adien": 1043, "mansouri": 1043, "alexl": 1043, "amai": 1043, "annegnx": 1043, "ansam": 1043, "zedan": 1043, "dutt": 1043, "aymericbasset": 1043, "tripramudya": 1043, "benedek": 1043, "harsanyi": 1043, "brevin": 1043, "kund": 1043, "troillard": 1043, "carla": 1043, "berenbaum": 1043, "proding": 1043, "butyugina": 1043, "elabonga": 1043, "atuo": 1043, "farhan": 1043, "hujiahong726": 1043, "ili": 1043, "jb": 1043, "mountford": 1043, "jessicakk0711": 1043, "joei": 1043, "hedlund": 1043, "linu": 1043, "fouquet": 1043, "harfouch": 1043, "mdarii": 1043, "murezzda": 1043, "nightwalkx": 1043, "nishu": 1043, "piontek": 1043, "pnucci": 1043, "sadra": 1043, "barikbin": 1043, "searchforpass": 1043, "seoeun": 1043, "th\u00e9ophil": 1043, "barang": 1043, "veghit": 1043, "vignesh": 1043, "vijeth": 1043, "moudgalya": 1043, "windiana42": 1043, "yuchen": 1043, "sooner": 1044, "26721": 1044, "27670": 1044, "26464": 1044, "26616": 1044, "cappuzzo": 1044, "Ines": 1044, "ibnukhsein": 1044, "boulard": 1044, "26648": 1044, "27538": 1044, "27308": 1044, "26789": 1044, "26896": 1044, "27058": 1044, "27005": 1044, "26525": 1044, "27490": 1044, "27500": 1044, "27389": 1044, "27478": 1044, "compute_optics_graph": 1044, "27104": 1044, "27250": 1044, "27179": 1044, "nurseit": 1044, "kamchyev": 1044, "27100": 1044, "virshup": 1044, "27239": 1044, "korobko": 1044, "27274": 1044, "27219": 1044, "27277": 1044, "27301": 1044, "lohit": 1044, "sundaramahalingam": 1044, "27252": 1044, "27166": 1044, "outliermixin": 1044, "26506": 1044, "correspondingli": 1044, "26831": 1044, "26786": 1044, "26909": 1044, "27185": 1044, "26744": 1044, "27204": 1044, "27438": 1044, "26634": 1044, "landeau": 1044, "vigni": 1044, "26315": 1044, "27098": 1044, "sok\u00f3\u0142": 1044, "26391": 1044, "13649": 1044, "reilli": 1044, "26278": 1044, "26957": 1044, "26830": 1044, "21807": 1044, "27291": 1044, "27417": 1044, "27624": 1044, "5x": 1044, "26765": 1044, "27006": 1044, "26366": 1044, "mojdeh": 1044, "rastgoo": 1044, "neg_root_mean_squared_log_error_scor": 1044, "26734": 1044, "27137": 1044, "26840": 1044, "26855": 1044, "27018": 1044, "26267": 1044, "26828": 1044, "26243": 1044, "27110": 1044, "27556": 1044, "27017": 1044, "xuefeng": 1044, "26944": 1044, "26674": 1044, "27309": 1044, "27328": 1044, "26862": 1044, "goh": 1044, "yisheng": 1044, "dia": 1044, "datastuctur": 1044, "27372": 1044, "may_share_memori": 1044, "27336": 1044, "log_logist": 1044, "logaddexp": 1044, "27544": 1044, "check_estimators_pickl": 1044, "readonly_memmap": 1044, "misdetect": 1044, "27614": 1044}, "objects": {"": [[404, 0, 0, "-", "sklearn"]], "sklearn": [[404, 0, 0, "-", "base"], [404, 0, 0, "-", "calibration"], [404, 0, 0, "-", "cluster"], [404, 0, 0, "-", "compose"], [464, 4, 1, "", "config_context"], [404, 0, 0, "-", "covariance"], [404, 0, 0, "-", "cross_decomposition"], [404, 0, 0, "-", "datasets"], [404, 0, 0, "-", "decomposition"], [404, 0, 0, "-", "discriminant_analysis"], [404, 0, 0, "-", "dummy"], [404, 0, 0, "-", "ensemble"], [404, 0, 0, "-", "exceptions"], [404, 0, 0, "-", "experimental"], [404, 0, 0, "-", "feature_extraction"], [404, 0, 0, "-", "feature_selection"], [404, 0, 0, "-", "gaussian_process"], [622, 4, 1, "", "get_config"], [404, 0, 0, "-", "impute"], [404, 0, 0, "-", "inspection"], [404, 0, 0, "-", "isotonic"], [404, 0, 0, "-", "kernel_approximation"], [404, 0, 0, "-", "kernel_ridge"], [404, 0, 0, "-", "linear_model"], [404, 0, 0, "-", "manifold"], [404, 0, 0, "-", "metrics"], [404, 0, 0, "-", "mixture"], [404, 0, 0, "-", "model_selection"], [404, 0, 0, "-", "multiclass"], [404, 0, 0, "-", "multioutput"], [404, 0, 0, "-", "naive_bayes"], [404, 0, 0, "-", "neighbors"], [404, 0, 0, "-", "neural_network"], [404, 0, 0, "-", "pipeline"], [404, 0, 0, "-", "preprocessing"], [404, 0, 0, "-", "random_projection"], [404, 0, 0, "-", "semi_supervised"], [895, 4, 1, "", "set_config"], [896, 4, 1, "", "show_versions"], [404, 0, 0, "-", "svm"], [404, 0, 0, "-", "tree"], [404, 0, 0, "-", "utils"]], "sklearn.base": [[419, 1, 1, "", "BaseEstimator"], [420, 1, 1, "", "BiclusterMixin"], [421, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [422, 1, 1, "", "ClassifierMixin"], [423, 1, 1, "", "ClusterMixin"], [424, 1, 1, "", "DensityMixin"], [425, 1, 1, "", "MetaEstimatorMixin"], [426, 1, 1, "", "OneToOneFeatureMixin"], [427, 1, 1, "", "OutlierMixin"], [428, 1, 1, "", "RegressorMixin"], [429, 1, 1, "", "TransformerMixin"], [430, 4, 1, "", "clone"], [431, 4, 1, "", "is_classifier"], [432, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[419, 2, 1, "", "get_metadata_routing"], [419, 2, 1, "", "get_params"], [419, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[420, 3, 1, "", "biclusters_"], [420, 2, 1, "", "get_indices"], [420, 2, 1, "", "get_shape"], [420, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[421, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[422, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[423, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[424, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[426, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[427, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[428, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[429, 2, 1, "", "fit_transform"], [429, 2, 1, "", "set_output"]], "sklearn.calibration": [[433, 1, 1, "", "CalibratedClassifierCV"], [434, 1, 1, "", "CalibrationDisplay"], [435, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "get_metadata_routing"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "predict_proba"], [433, 2, 1, "", "score"], [433, 2, 1, "", "set_fit_request"], [433, 2, 1, "", "set_params"], [433, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[434, 2, 1, "", "from_estimator"], [434, 2, 1, "", "from_predictions"], [434, 2, 1, "", "plot"]], "sklearn.cluster": [[436, 1, 1, "", "AffinityPropagation"], [437, 1, 1, "", "AgglomerativeClustering"], [438, 1, 1, "", "Birch"], [439, 1, 1, "", "BisectingKMeans"], [440, 1, 1, "", "DBSCAN"], [441, 1, 1, "", "FeatureAgglomeration"], [442, 1, 1, "", "HDBSCAN"], [443, 1, 1, "", "KMeans"], [444, 1, 1, "", "MeanShift"], [445, 1, 1, "", "MiniBatchKMeans"], [446, 1, 1, "", "OPTICS"], [447, 1, 1, "", "SpectralBiclustering"], [448, 1, 1, "", "SpectralClustering"], [449, 1, 1, "", "SpectralCoclustering"], [450, 4, 1, "", "affinity_propagation"], [451, 4, 1, "", "cluster_optics_dbscan"], [452, 4, 1, "", "cluster_optics_xi"], [453, 4, 1, "", "compute_optics_graph"], [416, 4, 1, "", "dbscan"], [454, 4, 1, "", "estimate_bandwidth"], [455, 4, 1, "", "k_means"], [456, 4, 1, "", "kmeans_plusplus"], [457, 4, 1, "", "mean_shift"], [458, 4, 1, "", "spectral_clustering"], [459, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[436, 2, 1, "", "fit"], [436, 2, 1, "", "fit_predict"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "predict"], [436, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "fit_transform"], [438, 2, 1, "", "get_feature_names_out"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "partial_fit"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "set_output"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "get_feature_names_out"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "score"], [439, 2, 1, "", "set_fit_request"], [439, 2, 1, "", "set_output"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "set_predict_request"], [439, 2, 1, "", "set_score_request"], [439, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "set_fit_request"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[441, 2, 1, "", "fit"], [441, 3, 1, "", "fit_predict"], [441, 2, 1, "", "fit_transform"], [441, 2, 1, "", "get_feature_names_out"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "inverse_transform"], [441, 2, 1, "", "set_output"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[442, 2, 1, "", "dbscan_clustering"], [442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_predict_request"], [443, 2, 1, "", "set_score_request"], [443, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "partial_fit"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "set_partial_fit_request"], [445, 2, 1, "", "set_predict_request"], [445, 2, 1, "", "set_score_request"], [445, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[447, 3, 1, "", "biclusters_"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "get_indices"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "get_shape"], [447, 2, 1, "", "get_submatrix"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[449, 3, 1, "", "biclusters_"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "get_indices"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_shape"], [449, 2, 1, "", "get_submatrix"], [449, 2, 1, "", "set_params"]], "sklearn.compose": [[460, 1, 1, "", "ColumnTransformer"], [461, 1, 1, "", "TransformedTargetRegressor"], [462, 4, 1, "", "make_column_selector"], [463, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[460, 2, 1, "", "fit"], [460, 2, 1, "", "fit_transform"], [460, 2, 1, "", "get_feature_names_out"], [460, 2, 1, "", "get_metadata_routing"], [460, 2, 1, "", "get_params"], [460, 3, 1, "", "named_transformers_"], [460, 2, 1, "", "set_output"], [460, 2, 1, "", "set_params"], [460, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[461, 2, 1, "", "fit"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 3, 1, "", "n_features_in_"], [461, 2, 1, "", "predict"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[465, 1, 1, "", "EllipticEnvelope"], [466, 1, 1, "", "EmpiricalCovariance"], [467, 1, 1, "", "GraphicalLasso"], [468, 1, 1, "", "GraphicalLassoCV"], [469, 1, 1, "", "LedoitWolf"], [470, 1, 1, "", "MinCovDet"], [471, 1, 1, "", "OAS"], [472, 1, 1, "", "ShrunkCovariance"], [473, 4, 1, "", "empirical_covariance"], [474, 4, 1, "", "graphical_lasso"], [475, 4, 1, "", "ledoit_wolf"], [476, 4, 1, "", "ledoit_wolf_shrinkage"], [418, 4, 1, "", "oas"], [477, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[465, 2, 1, "", "correct_covariance"], [465, 2, 1, "", "decision_function"], [465, 2, 1, "", "error_norm"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_predict"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "get_precision"], [465, 2, 1, "", "mahalanobis"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "reweight_covariance"], [465, 2, 1, "", "score"], [465, 2, 1, "", "score_samples"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[466, 2, 1, "", "error_norm"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "get_precision"], [466, 2, 1, "", "mahalanobis"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[470, 2, 1, "", "correct_covariance"], [470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "reweight_covariance"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[478, 1, 1, "", "CCA"], [479, 1, 1, "", "PLSCanonical"], [480, 1, 1, "", "PLSRegression"], [481, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[478, 2, 1, "", "fit"], [478, 2, 1, "", "fit_transform"], [478, 2, 1, "", "get_feature_names_out"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "inverse_transform"], [478, 2, 1, "", "predict"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_output"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_predict_request"], [478, 2, 1, "", "set_score_request"], [478, 2, 1, "", "set_transform_request"], [478, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[479, 2, 1, "", "fit"], [479, 2, 1, "", "fit_transform"], [479, 2, 1, "", "get_feature_names_out"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "inverse_transform"], [479, 2, 1, "", "predict"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_output"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_predict_request"], [479, 2, 1, "", "set_score_request"], [479, 2, 1, "", "set_transform_request"], [479, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[480, 2, 1, "", "fit"], [480, 2, 1, "", "fit_transform"], [480, 2, 1, "", "get_feature_names_out"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "inverse_transform"], [480, 2, 1, "", "predict"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_output"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_predict_request"], [480, 2, 1, "", "set_score_request"], [480, 2, 1, "", "set_transform_request"], [480, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "transform"]], "sklearn.datasets": [[482, 4, 1, "", "clear_data_home"], [483, 4, 1, "", "dump_svmlight_file"], [484, 4, 1, "", "fetch_20newsgroups"], [485, 4, 1, "", "fetch_20newsgroups_vectorized"], [486, 4, 1, "", "fetch_california_housing"], [487, 4, 1, "", "fetch_covtype"], [488, 4, 1, "", "fetch_kddcup99"], [489, 4, 1, "", "fetch_lfw_pairs"], [490, 4, 1, "", "fetch_lfw_people"], [491, 4, 1, "", "fetch_olivetti_faces"], [492, 4, 1, "", "fetch_openml"], [493, 4, 1, "", "fetch_rcv1"], [494, 4, 1, "", "fetch_species_distributions"], [495, 4, 1, "", "get_data_home"], [496, 4, 1, "", "load_breast_cancer"], [497, 4, 1, "", "load_diabetes"], [498, 4, 1, "", "load_digits"], [499, 4, 1, "", "load_files"], [500, 4, 1, "", "load_iris"], [501, 4, 1, "", "load_linnerud"], [502, 4, 1, "", "load_sample_image"], [503, 4, 1, "", "load_sample_images"], [504, 4, 1, "", "load_svmlight_file"], [505, 4, 1, "", "load_svmlight_files"], [506, 4, 1, "", "load_wine"], [507, 4, 1, "", "make_biclusters"], [508, 4, 1, "", "make_blobs"], [509, 4, 1, "", "make_checkerboard"], [510, 4, 1, "", "make_circles"], [511, 4, 1, "", "make_classification"], [512, 4, 1, "", "make_friedman1"], [513, 4, 1, "", "make_friedman2"], [514, 4, 1, "", "make_friedman3"], [515, 4, 1, "", "make_gaussian_quantiles"], [516, 4, 1, "", "make_hastie_10_2"], [517, 4, 1, "", "make_low_rank_matrix"], [518, 4, 1, "", "make_moons"], [519, 4, 1, "", "make_multilabel_classification"], [520, 4, 1, "", "make_regression"], [521, 4, 1, "", "make_s_curve"], [522, 4, 1, "", "make_sparse_coded_signal"], [523, 4, 1, "", "make_sparse_spd_matrix"], [524, 4, 1, "", "make_sparse_uncorrelated"], [525, 4, 1, "", "make_spd_matrix"], [526, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[527, 1, 1, "", "DictionaryLearning"], [528, 1, 1, "", "FactorAnalysis"], [529, 1, 1, "", "FastICA"], [530, 1, 1, "", "IncrementalPCA"], [531, 1, 1, "", "KernelPCA"], [532, 1, 1, "", "LatentDirichletAllocation"], [533, 1, 1, "", "MiniBatchDictionaryLearning"], [534, 1, 1, "", "MiniBatchNMF"], [535, 1, 1, "", "MiniBatchSparsePCA"], [536, 1, 1, "", "NMF"], [537, 1, 1, "", "PCA"], [538, 1, 1, "", "SparseCoder"], [539, 1, 1, "", "SparsePCA"], [540, 1, 1, "", "TruncatedSVD"], [541, 4, 1, "", "dict_learning"], [542, 4, 1, "", "dict_learning_online"], [417, 4, 1, "", "fastica"], [543, 4, 1, "", "non_negative_factorization"], [544, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_covariance"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "get_precision"], [528, 2, 1, "", "score"], [528, 2, 1, "", "score_samples"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "inverse_transform"], [529, 2, 1, "", "set_inverse_transform_request"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "set_transform_request"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_covariance"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "get_precision"], [530, 2, 1, "", "inverse_transform"], [530, 2, 1, "", "partial_fit"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "set_partial_fit_request"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "partial_fit"], [532, 2, 1, "", "perplexity"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "partial_fit"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_partial_fit_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_covariance"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "get_precision"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "score"], [537, 2, 1, "", "score_samples"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 3, 1, "", "n_components_"], [538, 3, 1, "", "n_features_in_"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[545, 1, 1, "", "LinearDiscriminantAnalysis"], [546, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[545, 2, 1, "", "decision_function"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "predict_log_proba"], [545, 2, 1, "", "predict_proba"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "set_score_request"], [545, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[546, 2, 1, "", "decision_function"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_log_proba"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[547, 1, 1, "", "DummyClassifier"], [548, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_fit_request"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_fit_request"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_predict_request"], [548, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[549, 1, 1, "", "AdaBoostClassifier"], [550, 1, 1, "", "AdaBoostRegressor"], [551, 1, 1, "", "BaggingClassifier"], [552, 1, 1, "", "BaggingRegressor"], [553, 1, 1, "", "ExtraTreesClassifier"], [554, 1, 1, "", "ExtraTreesRegressor"], [555, 1, 1, "", "GradientBoostingClassifier"], [556, 1, 1, "", "GradientBoostingRegressor"], [557, 1, 1, "", "HistGradientBoostingClassifier"], [558, 1, 1, "", "HistGradientBoostingRegressor"], [559, 1, 1, "", "IsolationForest"], [560, 1, 1, "", "RandomForestClassifier"], [561, 1, 1, "", "RandomForestRegressor"], [562, 1, 1, "", "RandomTreesEmbedding"], [563, 1, 1, "", "StackingClassifier"], [564, 1, 1, "", "StackingRegressor"], [565, 1, 1, "", "VotingClassifier"], [566, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[549, 3, 1, "", "base_estimator_"], [549, 2, 1, "", "decision_function"], [549, 3, 1, "", "feature_importances_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"], [549, 2, 1, "", "staged_decision_function"], [549, 2, 1, "", "staged_predict"], [549, 2, 1, "", "staged_predict_proba"], [549, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[550, 3, 1, "", "base_estimator_"], [550, 3, 1, "", "feature_importances_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "staged_predict"], [550, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[551, 3, 1, "", "base_estimator_"], [551, 2, 1, "", "decision_function"], [551, 3, 1, "", "estimators_samples_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[552, 3, 1, "", "base_estimator_"], [552, 3, 1, "", "estimators_samples_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[553, 2, 1, "", "apply"], [553, 3, 1, "", "base_estimator_"], [553, 2, 1, "", "decision_path"], [553, 3, 1, "", "feature_importances_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[554, 2, 1, "", "apply"], [554, 3, 1, "", "base_estimator_"], [554, 2, 1, "", "decision_path"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[555, 2, 1, "", "apply"], [555, 3, 1, "", "base_estimator_"], [555, 2, 1, "", "decision_function"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_decision_function"], [555, 2, 1, "", "staged_predict"], [555, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[556, 2, 1, "", "apply"], [556, 3, 1, "", "base_estimator_"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[557, 2, 1, "", "decision_function"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 3, 1, "", "n_iter_"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_decision_function"], [557, 2, 1, "", "staged_predict"], [557, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 3, 1, "", "n_iter_"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[559, 3, 1, "", "base_estimator_"], [559, 2, 1, "", "decision_function"], [559, 3, 1, "", "estimators_samples_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_predict"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score_samples"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[560, 2, 1, "", "apply"], [560, 3, 1, "", "base_estimator_"], [560, 2, 1, "", "decision_path"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[561, 2, 1, "", "apply"], [561, 3, 1, "", "base_estimator_"], [561, 2, 1, "", "decision_path"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[562, 2, 1, "", "apply"], [562, 3, 1, "", "base_estimator_"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[563, 2, 1, "", "decision_function"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_features_in_"], [563, 3, 1, "", "named_estimators"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "n_features_in_"], [564, 3, 1, "", "named_estimators"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "n_features_in_"], [565, 3, 1, "", "named_estimators"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_features_in_"], [566, 3, 1, "", "named_estimators"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "transform"]], "sklearn.exceptions": [[567, 1, 1, "", "ConvergenceWarning"], [568, 1, 1, "", "DataConversionWarning"], [569, 1, 1, "", "DataDimensionalityWarning"], [570, 1, 1, "", "EfficiencyWarning"], [571, 1, 1, "", "FitFailedWarning"], [572, 1, 1, "", "InconsistentVersionWarning"], [573, 1, 1, "", "NotFittedError"], [574, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[567, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[568, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[569, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[575, 0, 0, "-", "enable_halving_search_cv"], [576, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[577, 1, 1, "", "DictVectorizer"], [578, 1, 1, "", "FeatureHasher"], [404, 0, 0, "-", "image"], [404, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_metadata_routing"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "restrict"], [577, 2, 1, "", "set_inverse_transform_request"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_metadata_routing"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "set_transform_request"], [578, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[579, 1, 1, "", "PatchExtractor"], [580, 4, 1, "", "extract_patches_2d"], [581, 4, 1, "", "grid_to_graph"], [582, 4, 1, "", "img_to_graph"], [583, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[584, 1, 1, "", "CountVectorizer"], [585, 1, 1, "", "HashingVectorizer"], [586, 1, 1, "", "TfidfTransformer"], [587, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[584, 2, 1, "", "build_analyzer"], [584, 2, 1, "", "build_preprocessor"], [584, 2, 1, "", "build_tokenizer"], [584, 2, 1, "", "decode"], [584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "get_stop_words"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_fit_request"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "set_transform_request"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[585, 2, 1, "", "build_analyzer"], [585, 2, 1, "", "build_preprocessor"], [585, 2, 1, "", "build_tokenizer"], [585, 2, 1, "", "decode"], [585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_stop_words"], [585, 2, 1, "", "partial_fit"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 3, 1, "", "idf_"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "set_transform_request"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[587, 2, 1, "", "build_analyzer"], [587, 2, 1, "", "build_preprocessor"], [587, 2, 1, "", "build_tokenizer"], [587, 2, 1, "", "decode"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_stop_words"], [587, 3, 1, "", "idf_"], [587, 2, 1, "", "inverse_transform"], [587, 2, 1, "", "set_fit_request"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "set_transform_request"], [587, 2, 1, "", "transform"]], "sklearn.feature_selection": [[588, 1, 1, "", "GenericUnivariateSelect"], [589, 1, 1, "", "RFE"], [590, 1, 1, "", "RFECV"], [591, 1, 1, "", "SelectFdr"], [592, 1, 1, "", "SelectFpr"], [593, 1, 1, "", "SelectFromModel"], [594, 1, 1, "", "SelectFwe"], [595, 1, 1, "", "SelectKBest"], [596, 1, 1, "", "SelectPercentile"], [597, 1, 1, "", "SelectorMixin"], [598, 1, 1, "", "SequentialFeatureSelector"], [599, 1, 1, "", "VarianceThreshold"], [600, 4, 1, "", "chi2"], [601, 4, 1, "", "f_classif"], [602, 4, 1, "", "f_regression"], [603, 4, 1, "", "mutual_info_classif"], [604, 4, 1, "", "mutual_info_regression"], [605, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_support"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[589, 3, 1, "", "classes_"], [589, 2, 1, "", "decision_function"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "predict"], [589, 2, 1, "", "predict_log_proba"], [589, 2, 1, "", "predict_proba"], [589, 2, 1, "", "score"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[590, 3, 1, "", "classes_"], [590, 2, 1, "", "decision_function"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "predict"], [590, 2, 1, "", "predict_log_proba"], [590, 2, 1, "", "predict_proba"], [590, 2, 1, "", "score"], [590, 2, 1, "", "set_fit_request"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 3, 1, "", "n_features_in_"], [593, 2, 1, "", "partial_fit"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 3, 1, "", "threshold_"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[606, 1, 1, "", "GaussianProcessClassifier"], [607, 1, 1, "", "GaussianProcessRegressor"], [404, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "kernel_"], [606, 2, 1, "", "log_marginal_likelihood"], [606, 2, 1, "", "predict"], [606, 2, 1, "", "predict_proba"], [606, 2, 1, "", "score"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "log_marginal_likelihood"], [607, 2, 1, "", "predict"], [607, 2, 1, "", "sample_y"], [607, 2, 1, "", "score"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "set_predict_request"], [607, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[608, 1, 1, "", "CompoundKernel"], [609, 1, 1, "", "ConstantKernel"], [610, 1, 1, "", "DotProduct"], [611, 1, 1, "", "ExpSineSquared"], [612, 1, 1, "", "Exponentiation"], [613, 1, 1, "", "Hyperparameter"], [614, 1, 1, "", "Kernel"], [615, 1, 1, "", "Matern"], [616, 1, 1, "", "PairwiseKernel"], [617, 1, 1, "", "Product"], [618, 1, 1, "", "RBF"], [619, 1, 1, "", "RationalQuadratic"], [620, 1, 1, "", "Sum"], [621, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameter_length_scale"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[613, 2, 1, "", "__call__"], [613, 5, 1, "", "bounds"], [613, 2, 1, "", "count"], [613, 5, 1, "", "fixed"], [613, 2, 1, "", "index"], [613, 5, 1, "", "n_elements"], [613, 5, 1, "", "name"], [613, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.impute": [[623, 1, 1, "", "IterativeImputer"], [624, 1, 1, "", "KNNImputer"], [625, 1, 1, "", "MissingIndicator"], [626, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_metadata_routing"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_metadata_routing"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_metadata_routing"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "inverse_transform"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.inspection": [[627, 1, 1, "", "DecisionBoundaryDisplay"], [628, 1, 1, "", "PartialDependenceDisplay"], [629, 4, 1, "", "partial_dependence"], [630, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[627, 2, 1, "", "from_estimator"], [627, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[628, 2, 1, "", "from_estimator"], [628, 2, 1, "", "plot"]], "sklearn.isotonic": [[631, 1, 1, "", "IsotonicRegression"], [632, 4, 1, "", "check_increasing"], [633, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_fit_request"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "set_predict_request"], [631, 2, 1, "", "set_score_request"], [631, 2, 1, "", "set_transform_request"], [631, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[634, 1, 1, "", "AdditiveChi2Sampler"], [635, 1, 1, "", "Nystroem"], [636, 1, 1, "", "PolynomialCountSketch"], [637, 1, 1, "", "RBFSampler"], [638, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "fit_transform"], [634, 2, 1, "", "get_feature_names_out"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "set_output"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[639, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[640, 1, 1, "", "ARDRegression"], [641, 1, 1, "", "BayesianRidge"], [642, 1, 1, "", "ElasticNet"], [643, 1, 1, "", "ElasticNetCV"], [644, 1, 1, "", "GammaRegressor"], [645, 1, 1, "", "HuberRegressor"], [646, 1, 1, "", "Lars"], [647, 1, 1, "", "LarsCV"], [648, 1, 1, "", "Lasso"], [649, 1, 1, "", "LassoCV"], [650, 1, 1, "", "LassoLars"], [651, 1, 1, "", "LassoLarsCV"], [652, 1, 1, "", "LassoLarsIC"], [653, 1, 1, "", "LinearRegression"], [654, 1, 1, "", "LogisticRegression"], [655, 1, 1, "", "LogisticRegressionCV"], [656, 1, 1, "", "MultiTaskElasticNet"], [657, 1, 1, "", "MultiTaskElasticNetCV"], [658, 1, 1, "", "MultiTaskLasso"], [659, 1, 1, "", "MultiTaskLassoCV"], [660, 1, 1, "", "OrthogonalMatchingPursuit"], [661, 1, 1, "", "OrthogonalMatchingPursuitCV"], [662, 1, 1, "", "PassiveAggressiveClassifier"], [663, 1, 1, "", "PassiveAggressiveRegressor"], [664, 1, 1, "", "Perceptron"], [665, 1, 1, "", "PoissonRegressor"], [666, 1, 1, "", "QuantileRegressor"], [667, 1, 1, "", "RANSACRegressor"], [668, 1, 1, "", "Ridge"], [669, 1, 1, "", "RidgeCV"], [670, 1, 1, "", "RidgeClassifier"], [671, 1, 1, "", "RidgeClassifierCV"], [672, 1, 1, "", "SGDClassifier"], [673, 1, 1, "", "SGDOneClassSVM"], [674, 1, 1, "", "SGDRegressor"], [675, 1, 1, "", "TheilSenRegressor"], [676, 1, 1, "", "TweedieRegressor"], [677, 4, 1, "", "enet_path"], [678, 4, 1, "", "lars_path"], [679, 4, 1, "", "lars_path_gram"], [680, 4, 1, "", "lasso_path"], [681, 4, 1, "", "orthogonal_mp"], [682, 4, 1, "", "orthogonal_mp_gram"], [683, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_predict_request"], [640, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_predict_request"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "path"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_score_request"], [642, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "path"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "path"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"], [648, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "path"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[654, 2, 1, "", "decision_function"], [654, 2, 1, "", "densify"], [654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "predict_log_proba"], [654, 2, 1, "", "predict_proba"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"], [654, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[655, 2, 1, "", "decision_function"], [655, 2, 1, "", "densify"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "predict_log_proba"], [655, 2, 1, "", "predict_proba"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"], [655, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "partial_fit"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_partial_fit_request"], [662, 2, 1, "", "set_score_request"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "partial_fit"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_partial_fit_request"], [663, 2, 1, "", "set_score_request"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[664, 2, 1, "", "decision_function"], [664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "partial_fit"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_partial_fit_request"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[670, 3, 1, "", "classes_"], [670, 2, 1, "", "decision_function"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[671, 3, 1, "", "classes_"], [671, 2, 1, "", "decision_function"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[672, 2, 1, "", "decision_function"], [672, 2, 1, "", "densify"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "partial_fit"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "predict_log_proba"], [672, 2, 1, "", "predict_proba"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_partial_fit_request"], [672, 2, 1, "", "set_score_request"], [672, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[673, 2, 1, "", "decision_function"], [673, 2, 1, "", "densify"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "fit_predict"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "partial_fit"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score_samples"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_partial_fit_request"], [673, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "set_score_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[684, 1, 1, "", "Isomap"], [685, 1, 1, "", "LocallyLinearEmbedding"], [686, 1, 1, "", "MDS"], [687, 1, 1, "", "SpectralEmbedding"], [688, 1, 1, "", "TSNE"], [689, 4, 1, "", "locally_linear_embedding"], [690, 4, 1, "", "smacof"], [691, 4, 1, "", "spectral_embedding"], [692, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[684, 2, 1, "", "fit"], [684, 2, 1, "", "fit_transform"], [684, 2, 1, "", "get_feature_names_out"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "reconstruction_error"], [684, 2, 1, "", "set_output"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "fit_transform"], [685, 2, 1, "", "get_feature_names_out"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "set_output"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "fit_transform"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "set_fit_request"], [686, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "fit_transform"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_feature_names_out"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "set_output"], [688, 2, 1, "", "set_params"]], "sklearn.metrics": [[693, 1, 1, "", "ConfusionMatrixDisplay"], [694, 1, 1, "", "DetCurveDisplay"], [695, 1, 1, "", "DistanceMetric"], [696, 1, 1, "", "PrecisionRecallDisplay"], [697, 1, 1, "", "PredictionErrorDisplay"], [698, 1, 1, "", "RocCurveDisplay"], [699, 4, 1, "", "accuracy_score"], [700, 4, 1, "", "adjusted_mutual_info_score"], [701, 4, 1, "", "adjusted_rand_score"], [702, 4, 1, "", "auc"], [703, 4, 1, "", "average_precision_score"], [704, 4, 1, "", "balanced_accuracy_score"], [705, 4, 1, "", "brier_score_loss"], [706, 4, 1, "", "calinski_harabasz_score"], [707, 4, 1, "", "check_scoring"], [708, 4, 1, "", "class_likelihood_ratios"], [709, 4, 1, "", "classification_report"], [404, 0, 0, "-", "cluster"], [712, 4, 1, "", "cohen_kappa_score"], [713, 4, 1, "", "completeness_score"], [714, 4, 1, "", "confusion_matrix"], [715, 4, 1, "", "consensus_score"], [716, 4, 1, "", "coverage_error"], [717, 4, 1, "", "d2_absolute_error_score"], [718, 4, 1, "", "d2_pinball_score"], [719, 4, 1, "", "d2_tweedie_score"], [720, 4, 1, "", "davies_bouldin_score"], [721, 4, 1, "", "dcg_score"], [722, 4, 1, "", "det_curve"], [723, 4, 1, "", "explained_variance_score"], [724, 4, 1, "", "f1_score"], [725, 4, 1, "", "fbeta_score"], [726, 4, 1, "", "fowlkes_mallows_score"], [727, 4, 1, "", "get_scorer"], [728, 4, 1, "", "get_scorer_names"], [729, 4, 1, "", "hamming_loss"], [730, 4, 1, "", "hinge_loss"], [731, 4, 1, "", "homogeneity_completeness_v_measure"], [732, 4, 1, "", "homogeneity_score"], [733, 4, 1, "", "jaccard_score"], [734, 4, 1, "", "label_ranking_average_precision_score"], [735, 4, 1, "", "label_ranking_loss"], [736, 4, 1, "", "log_loss"], [737, 4, 1, "", "make_scorer"], [738, 4, 1, "", "matthews_corrcoef"], [739, 4, 1, "", "max_error"], [740, 4, 1, "", "mean_absolute_error"], [741, 4, 1, "", "mean_absolute_percentage_error"], [742, 4, 1, "", "mean_gamma_deviance"], [743, 4, 1, "", "mean_pinball_loss"], [744, 4, 1, "", "mean_poisson_deviance"], [745, 4, 1, "", "mean_squared_error"], [746, 4, 1, "", "mean_squared_log_error"], [747, 4, 1, "", "mean_tweedie_deviance"], [748, 4, 1, "", "median_absolute_error"], [749, 4, 1, "", "multilabel_confusion_matrix"], [750, 4, 1, "", "mutual_info_score"], [751, 4, 1, "", "ndcg_score"], [752, 4, 1, "", "normalized_mutual_info_score"], [404, 0, 0, "-", "pairwise"], [773, 4, 1, "", "pairwise_distances"], [774, 4, 1, "", "pairwise_distances_argmin"], [775, 4, 1, "", "pairwise_distances_argmin_min"], [776, 4, 1, "", "pairwise_distances_chunked"], [777, 4, 1, "", "precision_recall_curve"], [778, 4, 1, "", "precision_recall_fscore_support"], [779, 4, 1, "", "precision_score"], [780, 4, 1, "", "r2_score"], [781, 4, 1, "", "rand_score"], [782, 4, 1, "", "recall_score"], [783, 4, 1, "", "roc_auc_score"], [784, 4, 1, "", "roc_curve"], [785, 4, 1, "", "root_mean_squared_error"], [786, 4, 1, "", "root_mean_squared_log_error"], [787, 4, 1, "", "silhouette_samples"], [788, 4, 1, "", "silhouette_score"], [789, 4, 1, "", "top_k_accuracy_score"], [790, 4, 1, "", "v_measure_score"], [791, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[693, 2, 1, "", "from_estimator"], [693, 2, 1, "", "from_predictions"], [693, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[694, 2, 1, "", "from_estimator"], [694, 2, 1, "", "from_predictions"], [694, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[695, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[696, 2, 1, "", "from_estimator"], [696, 2, 1, "", "from_predictions"], [696, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[710, 4, 1, "", "contingency_matrix"], [711, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[753, 4, 1, "", "additive_chi2_kernel"], [754, 4, 1, "", "chi2_kernel"], [755, 4, 1, "", "cosine_distances"], [756, 4, 1, "", "cosine_similarity"], [757, 4, 1, "", "distance_metrics"], [758, 4, 1, "", "euclidean_distances"], [759, 4, 1, "", "haversine_distances"], [760, 4, 1, "", "kernel_metrics"], [761, 4, 1, "", "laplacian_kernel"], [762, 4, 1, "", "linear_kernel"], [763, 4, 1, "", "manhattan_distances"], [764, 4, 1, "", "nan_euclidean_distances"], [765, 4, 1, "", "paired_cosine_distances"], [766, 4, 1, "", "paired_distances"], [767, 4, 1, "", "paired_euclidean_distances"], [768, 4, 1, "", "paired_manhattan_distances"], [769, 4, 1, "", "pairwise_kernels"], [770, 4, 1, "", "polynomial_kernel"], [771, 4, 1, "", "rbf_kernel"], [772, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[792, 1, 1, "", "BayesianGaussianMixture"], [793, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[792, 2, 1, "", "fit"], [792, 2, 1, "", "fit_predict"], [792, 2, 1, "", "get_metadata_routing"], [792, 2, 1, "", "get_params"], [792, 2, 1, "", "predict"], [792, 2, 1, "", "predict_proba"], [792, 2, 1, "", "sample"], [792, 2, 1, "", "score"], [792, 2, 1, "", "score_samples"], [792, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[793, 2, 1, "", "aic"], [793, 2, 1, "", "bic"], [793, 2, 1, "", "fit"], [793, 2, 1, "", "fit_predict"], [793, 2, 1, "", "get_metadata_routing"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "predict"], [793, 2, 1, "", "predict_proba"], [793, 2, 1, "", "sample"], [793, 2, 1, "", "score"], [793, 2, 1, "", "score_samples"], [793, 2, 1, "", "set_params"]], "sklearn.model_selection": [[794, 1, 1, "", "GridSearchCV"], [795, 1, 1, "", "GroupKFold"], [796, 1, 1, "", "GroupShuffleSplit"], [797, 1, 1, "", "HalvingGridSearchCV"], [798, 1, 1, "", "HalvingRandomSearchCV"], [799, 1, 1, "", "KFold"], [800, 1, 1, "", "LearningCurveDisplay"], [801, 1, 1, "", "LeaveOneGroupOut"], [802, 1, 1, "", "LeaveOneOut"], [803, 1, 1, "", "LeavePGroupsOut"], [804, 1, 1, "", "LeavePOut"], [805, 1, 1, "", "ParameterGrid"], [806, 1, 1, "", "ParameterSampler"], [807, 1, 1, "", "PredefinedSplit"], [808, 1, 1, "", "RandomizedSearchCV"], [809, 1, 1, "", "RepeatedKFold"], [810, 1, 1, "", "RepeatedStratifiedKFold"], [811, 1, 1, "", "ShuffleSplit"], [812, 1, 1, "", "StratifiedGroupKFold"], [813, 1, 1, "", "StratifiedKFold"], [814, 1, 1, "", "StratifiedShuffleSplit"], [815, 1, 1, "", "TimeSeriesSplit"], [816, 1, 1, "", "ValidationCurveDisplay"], [817, 4, 1, "", "check_cv"], [818, 4, 1, "", "cross_val_predict"], [819, 4, 1, "", "cross_val_score"], [820, 4, 1, "", "cross_validate"], [821, 4, 1, "", "learning_curve"], [822, 4, 1, "", "permutation_test_score"], [823, 4, 1, "", "train_test_split"], [824, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[794, 3, 1, "", "classes_"], [794, 2, 1, "", "decision_function"], [794, 2, 1, "", "fit"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "inverse_transform"], [794, 3, 1, "", "n_features_in_"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "predict_log_proba"], [794, 2, 1, "", "predict_proba"], [794, 2, 1, "", "score"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_params"], [794, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "set_split_request"], [795, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "set_split_request"], [796, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[797, 3, 1, "", "classes_"], [797, 2, 1, "", "decision_function"], [797, 2, 1, "", "fit"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "inverse_transform"], [797, 3, 1, "", "n_features_in_"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_log_proba"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "score"], [797, 2, 1, "", "score_samples"], [797, 2, 1, "", "set_params"], [797, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[798, 3, 1, "", "classes_"], [798, 2, 1, "", "decision_function"], [798, 2, 1, "", "fit"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "inverse_transform"], [798, 3, 1, "", "n_features_in_"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_log_proba"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"], [798, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[800, 2, 1, "", "from_estimator"], [800, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "set_split_request"], [801, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "set_split_request"], [803, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_n_splits"], [807, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "inverse_transform"], [808, 3, 1, "", "n_features_in_"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "score_samples"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "set_split_request"], [812, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[816, 2, 1, "", "from_estimator"], [816, 2, 1, "", "plot"]], "sklearn.multiclass": [[825, 1, 1, "", "OneVsOneClassifier"], [826, 1, 1, "", "OneVsRestClassifier"], [827, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[825, 2, 1, "", "decision_function"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 3, 1, "", "n_classes_"], [825, 2, 1, "", "partial_fit"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_partial_fit_request"], [825, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[826, 2, 1, "", "decision_function"], [826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 3, 1, "", "multilabel_"], [826, 3, 1, "", "n_classes_"], [826, 2, 1, "", "partial_fit"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_partial_fit_request"], [826, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[828, 1, 1, "", "ClassifierChain"], [829, 1, 1, "", "MultiOutputClassifier"], [830, 1, 1, "", "MultiOutputRegressor"], [831, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[828, 2, 1, "", "decision_function"], [828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "partial_fit"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_fit_request"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "partial_fit"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_fit_request"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_partial_fit_request"], [830, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[832, 1, 1, "", "BernoulliNB"], [833, 1, 1, "", "CategoricalNB"], [834, 1, 1, "", "ComplementNB"], [835, 1, 1, "", "GaussianNB"], [836, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "predict_joint_log_proba"], [832, 2, 1, "", "predict_log_proba"], [832, 2, 1, "", "predict_proba"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_fit_request"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_joint_log_proba"], [833, 2, 1, "", "predict_log_proba"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_fit_request"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_joint_log_proba"], [834, 2, 1, "", "predict_log_proba"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_fit_request"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_joint_log_proba"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_fit_request"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_joint_log_proba"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[837, 1, 1, "", "BallTree"], [838, 1, 1, "", "KDTree"], [839, 1, 1, "", "KNeighborsClassifier"], [840, 1, 1, "", "KNeighborsRegressor"], [841, 1, 1, "", "KNeighborsTransformer"], [842, 1, 1, "", "KernelDensity"], [843, 1, 1, "", "LocalOutlierFactor"], [844, 1, 1, "", "NearestCentroid"], [845, 1, 1, "", "NearestNeighbors"], [846, 1, 1, "", "NeighborhoodComponentsAnalysis"], [847, 1, 1, "", "RadiusNeighborsClassifier"], [848, 1, 1, "", "RadiusNeighborsRegressor"], [849, 1, 1, "", "RadiusNeighborsTransformer"], [850, 4, 1, "", "kneighbors_graph"], [851, 4, 1, "", "radius_neighbors_graph"], [852, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[837, 2, 1, "", "get_arrays"], [837, 2, 1, "", "get_n_calls"], [837, 2, 1, "", "get_tree_stats"], [837, 2, 1, "", "kernel_density"], [837, 2, 1, "", "query"], [837, 2, 1, "", "query_radius"], [837, 2, 1, "", "reset_n_calls"], [837, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[838, 2, 1, "", "get_arrays"], [838, 2, 1, "", "get_n_calls"], [838, 2, 1, "", "get_tree_stats"], [838, 2, 1, "", "kernel_density"], [838, 2, 1, "", "query"], [838, 2, 1, "", "query_radius"], [838, 2, 1, "", "reset_n_calls"], [838, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "kneighbors"], [839, 2, 1, "", "kneighbors_graph"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "kneighbors"], [840, 2, 1, "", "kneighbors_graph"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "kneighbors"], [841, 2, 1, "", "kneighbors_graph"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "sample"], [842, 2, 1, "", "score"], [842, 2, 1, "", "score_samples"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[843, 2, 1, "", "decision_function"], [843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_predict"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "kneighbors"], [843, 2, 1, "", "kneighbors_graph"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "score_samples"], [843, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "kneighbors"], [845, 2, 1, "", "kneighbors_graph"], [845, 2, 1, "", "radius_neighbors"], [845, 2, 1, "", "radius_neighbors_graph"], [845, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "radius_neighbors"], [847, 2, 1, "", "radius_neighbors_graph"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "radius_neighbors"], [848, 2, 1, "", "radius_neighbors_graph"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "radius_neighbors"], [849, 2, 1, "", "radius_neighbors_graph"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.neural_network": [[853, 1, 1, "", "BernoulliRBM"], [854, 1, 1, "", "MLPClassifier"], [855, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "gibbs"], [853, 2, 1, "", "partial_fit"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "partial_fit"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_log_proba"], [854, 2, 1, "", "predict_proba"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_partial_fit_request"], [854, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "partial_fit"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[856, 1, 1, "", "FeatureUnion"], [857, 1, 1, "", "Pipeline"], [858, 4, 1, "", "make_pipeline"], [859, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[856, 3, 1, "", "feature_names_in_"], [856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 3, 1, "", "n_features_in_"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[857, 3, 1, "", "classes_"], [857, 2, 1, "", "decision_function"], [857, 3, 1, "", "feature_names_in_"], [857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_predict"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 3, 1, "", "n_features_in_"], [857, 3, 1, "", "named_steps"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "predict_log_proba"], [857, 2, 1, "", "predict_proba"], [857, 2, 1, "", "score"], [857, 2, 1, "", "score_samples"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing": [[860, 1, 1, "", "Binarizer"], [861, 1, 1, "", "FunctionTransformer"], [862, 1, 1, "", "KBinsDiscretizer"], [863, 1, 1, "", "KernelCenterer"], [864, 1, 1, "", "LabelBinarizer"], [865, 1, 1, "", "LabelEncoder"], [866, 1, 1, "", "MaxAbsScaler"], [867, 1, 1, "", "MinMaxScaler"], [868, 1, 1, "", "MultiLabelBinarizer"], [869, 1, 1, "", "Normalizer"], [870, 1, 1, "", "OneHotEncoder"], [871, 1, 1, "", "OrdinalEncoder"], [872, 1, 1, "", "PolynomialFeatures"], [873, 1, 1, "", "PowerTransformer"], [874, 1, 1, "", "QuantileTransformer"], [875, 1, 1, "", "RobustScaler"], [876, 1, 1, "", "SplineTransformer"], [877, 1, 1, "", "StandardScaler"], [878, 1, 1, "", "TargetEncoder"], [879, 4, 1, "", "add_dummy_feature"], [880, 4, 1, "", "binarize"], [881, 4, 1, "", "label_binarize"], [882, 4, 1, "", "maxabs_scale"], [883, 4, 1, "", "minmax_scale"], [884, 4, 1, "", "normalize"], [885, 4, 1, "", "power_transform"], [886, 4, 1, "", "quantile_transform"], [887, 4, 1, "", "robust_scale"], [888, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_transform_request"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "set_fit_request"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "set_fit_request"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_transform_request"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_inverse_transform_request"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "partial_fit"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "partial_fit"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "set_transform_request"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 3, 1, "", "infrequent_categories_"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 3, 1, "", "infrequent_categories_"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "powers_"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "set_fit_request"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "partial_fit"], [877, 2, 1, "", "set_fit_request"], [877, 2, 1, "", "set_inverse_transform_request"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "set_partial_fit_request"], [877, 2, 1, "", "set_transform_request"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "infrequent_categories_"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.random_projection": [[889, 1, 1, "", "GaussianRandomProjection"], [890, 1, 1, "", "SparseRandomProjection"], [891, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "inverse_transform"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "inverse_transform"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[892, 1, 1, "", "LabelPropagation"], [893, 1, 1, "", "LabelSpreading"], [894, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "predict_proba"], [892, 2, 1, "", "score"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "predict_proba"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[894, 2, 1, "", "decision_function"], [894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "predict_log_proba"], [894, 2, 1, "", "predict_proba"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_params"]], "sklearn.svm": [[897, 1, 1, "", "LinearSVC"], [898, 1, 1, "", "LinearSVR"], [899, 1, 1, "", "NuSVC"], [900, 1, 1, "", "NuSVR"], [901, 1, 1, "", "OneClassSVM"], [902, 1, 1, "", "SVC"], [903, 1, 1, "", "SVR"], [904, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[897, 2, 1, "", "decision_function"], [897, 2, 1, "", "densify"], [897, 2, 1, "", "fit"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "predict"], [897, 2, 1, "", "score"], [897, 2, 1, "", "set_fit_request"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "set_score_request"], [897, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[898, 2, 1, "", "fit"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_fit_request"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[899, 3, 1, "", "coef_"], [899, 2, 1, "", "decision_function"], [899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 3, 1, "", "n_support_"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "predict_log_proba"], [899, 2, 1, "", "predict_proba"], [899, 3, 1, "", "probA_"], [899, 3, 1, "", "probB_"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[900, 3, 1, "", "coef_"], [900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 3, 1, "", "n_support_"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[901, 3, 1, "", "coef_"], [901, 2, 1, "", "decision_function"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "fit_predict"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 3, 1, "", "n_support_"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "score_samples"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[902, 3, 1, "", "coef_"], [902, 2, 1, "", "decision_function"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 3, 1, "", "n_support_"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_log_proba"], [902, 2, 1, "", "predict_proba"], [902, 3, 1, "", "probA_"], [902, 3, 1, "", "probB_"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[903, 3, 1, "", "coef_"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 3, 1, "", "n_support_"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.tree": [[905, 1, 1, "", "DecisionTreeClassifier"], [906, 1, 1, "", "DecisionTreeRegressor"], [907, 1, 1, "", "ExtraTreeClassifier"], [908, 1, 1, "", "ExtraTreeRegressor"], [909, 4, 1, "", "export_graphviz"], [910, 4, 1, "", "export_text"], [911, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[905, 2, 1, "", "apply"], [905, 2, 1, "", "cost_complexity_pruning_path"], [905, 2, 1, "", "decision_path"], [905, 3, 1, "", "feature_importances_"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_depth"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_n_leaves"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "predict_log_proba"], [905, 2, 1, "", "predict_proba"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_predict_proba_request"], [905, 2, 1, "", "set_predict_request"], [905, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[906, 2, 1, "", "apply"], [906, 2, 1, "", "cost_complexity_pruning_path"], [906, 2, 1, "", "decision_path"], [906, 3, 1, "", "feature_importances_"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_depth"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_n_leaves"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_predict_request"], [906, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[907, 2, 1, "", "apply"], [907, 2, 1, "", "cost_complexity_pruning_path"], [907, 2, 1, "", "decision_path"], [907, 3, 1, "", "feature_importances_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_depth"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_n_leaves"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_log_proba"], [907, 2, 1, "", "predict_proba"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_predict_proba_request"], [907, 2, 1, "", "set_predict_request"], [907, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[908, 2, 1, "", "apply"], [908, 2, 1, "", "cost_complexity_pruning_path"], [908, 2, 1, "", "decision_path"], [908, 3, 1, "", "feature_importances_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_depth"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_n_leaves"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_predict_request"], [908, 2, 1, "", "set_score_request"]], "sklearn.utils": [[912, 1, 1, "", "Bunch"], [913, 4, 1, "", "_safe_indexing"], [404, 0, 0, "-", "arrayfuncs"], [915, 4, 1, "", "as_float_array"], [916, 4, 1, "", "assert_all_finite"], [917, 4, 1, "", "check_X_y"], [918, 4, 1, "", "check_array"], [919, 4, 1, "", "check_consistent_length"], [920, 4, 1, "", "check_random_state"], [921, 4, 1, "", "check_scalar"], [404, 0, 0, "-", "class_weight"], [924, 4, 1, "", "deprecated"], [404, 0, 0, "-", "discovery"], [404, 0, 0, "-", "estimator_checks"], [930, 4, 1, "", "estimator_html_repr"], [404, 0, 0, "-", "extmath"], [937, 4, 1, "", "gen_batches"], [938, 4, 1, "", "gen_even_slices"], [404, 0, 0, "-", "graph"], [940, 4, 1, "", "indexable"], [404, 0, 0, "-", "metadata_routing"], [404, 0, 0, "-", "metaestimators"], [404, 0, 0, "-", "multiclass"], [950, 4, 1, "", "murmurhash3_32"], [404, 0, 0, "-", "parallel"], [953, 4, 1, "", "parallel_backend"], [404, 0, 0, "-", "random"], [955, 4, 1, "", "register_parallel_backend"], [956, 4, 1, "", "resample"], [957, 4, 1, "", "safe_mask"], [958, 4, 1, "", "safe_sqr"], [959, 4, 1, "", "shuffle"], [404, 0, 0, "-", "sparsefuncs"], [404, 0, 0, "-", "sparsefuncs_fast"], [404, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[912, 2, 1, "", "clear"], [912, 2, 1, "", "copy"], [912, 2, 1, "", "fromkeys"], [912, 2, 1, "", "get"], [912, 2, 1, "", "items"], [912, 2, 1, "", "keys"], [912, 2, 1, "", "pop"], [912, 2, 1, "", "popitem"], [912, 2, 1, "", "setdefault"], [912, 2, 1, "", "update"], [912, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[914, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[922, 4, 1, "", "compute_class_weight"], [923, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[925, 4, 1, "", "all_displays"], [926, 4, 1, "", "all_estimators"], [927, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[928, 4, 1, "", "check_estimator"], [929, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[931, 4, 1, "", "density"], [932, 4, 1, "", "fast_logdet"], [933, 4, 1, "", "randomized_range_finder"], [934, 4, 1, "", "randomized_svd"], [935, 4, 1, "", "safe_sparse_dot"], [936, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[939, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[941, 1, 1, "", "MetadataRequest"], [942, 1, 1, "", "MetadataRouter"], [943, 1, 1, "", "MethodMapping"], [944, 4, 1, "", "get_routing_for_object"], [945, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[941, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[942, 2, 1, "", "add"], [942, 2, 1, "", "add_self_request"], [942, 2, 1, "", "consumes"], [942, 2, 1, "", "route_params"], [942, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[943, 2, 1, "", "add"], [943, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[946, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[947, 4, 1, "", "is_multilabel"], [948, 4, 1, "", "type_of_target"], [949, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[951, 1, 1, "", "Parallel"], [952, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[951, 2, 1, "", "dispatch_next"], [951, 2, 1, "", "dispatch_one_batch"], [951, 2, 1, "", "format"], [951, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[954, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[960, 4, 1, "", "incr_mean_variance_axis"], [961, 4, 1, "", "inplace_column_scale"], [962, 4, 1, "", "inplace_csr_column_scale"], [963, 4, 1, "", "inplace_row_scale"], [964, 4, 1, "", "inplace_swap_column"], [965, 4, 1, "", "inplace_swap_row"], [966, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[967, 4, 1, "", "inplace_csr_row_normalize_l1"], [968, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[969, 4, 1, "", "check_is_fitted"], [970, 4, 1, "", "check_memory"], [971, 4, 1, "", "check_symmetric"], [972, 4, 1, "", "column_or_1d"], [973, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 390], "u": 0, "histori": [0, 1025], "govern": [0, 393], "author": [0, 1027], "document": [0, 8, 19, 166, 317, 318, 348, 349, 350, 378, 393, 1005, 1006, 1008, 1023, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "team": [0, 377, 393], "contributor": [0, 377, 378, 393, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "experi": [0, 37, 377, 393], "commun": [0, 378, 393], "emeritu": 0, "core": [0, 8, 366, 377, 382, 384, 390, 393, 987], "develop": [0, 108, 109, 166, 235, 376, 379, 380, 381, 382, 385, 386, 387, 974, 1022, 1043], "cite": 0, "scikit": [0, 235, 255, 315, 316, 317, 318, 319, 320, 321, 363, 364, 376, 379, 380, 382, 383, 390, 393, 395, 404, 1003, 1005, 1006, 1009, 1011, 1012, 1017, 1020, 1023], "learn": [0, 5, 12, 50, 95, 98, 150, 166, 168, 169, 170, 175, 219, 220, 221, 222, 234, 235, 255, 262, 293, 300, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 363, 364, 366, 374, 376, 378, 379, 380, 382, 383, 390, 393, 395, 404, 410, 412, 980, 982, 990, 998, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1023], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 86, 100, 104, 232, 378, 380, 390, 404, 997, 1002, 1005], "infrastructur": 0, "support": [0, 25, 121, 166, 193, 311, 315, 316, 317, 318, 320, 321, 331, 334, 343, 390, 395, 396, 401, 403, 404, 412, 1000, 1001, 1008, 1018, 1033, 1044], "exampl": [3, 6, 9, 53, 59, 75, 88, 102, 109, 127, 158, 166, 195, 196, 203, 341, 345, 366, 372, 373, 383, 390, 394, 396, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 422, 425, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 500, 502, 506, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 577, 578, 580, 583, 584, 585, 586, 587, 589, 590, 593, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 609, 610, 611, 613, 614, 615, 618, 619, 621, 623, 624, 626, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 648, 649, 651, 652, 653, 654, 655, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 684, 685, 686, 687, 688, 689, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 709, 713, 714, 715, 722, 724, 729, 730, 732, 733, 736, 737, 740, 743, 744, 745, 747, 748, 750, 752, 756, 773, 774, 777, 779, 780, 781, 782, 783, 784, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 850, 853, 854, 855, 856, 857, 858, 861, 862, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 883, 886, 890, 891, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 911, 912, 920, 929, 931, 938, 942, 943, 944, 945, 946, 959, 969, 974, 977, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1011, 1017, 1018, 1019, 1024, 1027], "base": [3, 4, 85, 118, 119, 148, 166, 183, 234, 315, 316, 318, 320, 321, 378, 404, 405, 409, 412, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 981, 993, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "real": [3, 9, 75, 166, 373], "world": [3, 75, 166, 373], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 44, 58, 62, 70, 85, 88, 89, 90, 91, 92, 95, 104, 111, 117, 120, 121, 131, 137, 138, 151, 153, 155, 156, 158, 160, 166, 168, 169, 170, 178, 181, 183, 188, 199, 201, 208, 217, 220, 221, 228, 233, 238, 239, 258, 266, 267, 278, 312, 328, 329, 333, 340, 349, 355, 370, 371, 372, 373, 374, 375, 383, 390, 404, 415, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 1011, 1017, 1018, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "time": [4, 15, 22, 28, 35, 68, 76, 83, 87, 93, 107, 117, 122, 135, 141, 149, 161, 165, 173, 176, 193, 218, 226, 233, 234, 243, 252, 276, 279, 282, 297, 303, 313, 322, 330, 347, 349, 352, 359, 409], "relat": [4, 8, 372, 378, 993, 1005, 1034], "featur": [4, 51, 54, 74, 100, 116, 118, 119, 121, 125, 128, 129, 142, 144, 146, 147, 148, 166, 171, 172, 175, 178, 193, 196, 217, 233, 239, 261, 302, 306, 307, 310, 311, 315, 317, 318, 339, 349, 350, 364, 366, 378, 382, 396, 404, 406, 412, 413, 414, 975, 993, 995, 1002, 1019, 1020, 1030, 1031, 1032, 1033, 1034], "engin": [4, 171, 1005, 1009], "data": [4, 7, 9, 12, 17, 20, 24, 26, 34, 38, 47, 49, 50, 55, 57, 58, 63, 64, 66, 67, 70, 75, 78, 80, 82, 85, 86, 96, 97, 100, 101, 102, 103, 112, 118, 119, 125, 127, 131, 144, 147, 148, 157, 159, 164, 168, 171, 172, 175, 179, 185, 192, 193, 203, 229, 234, 241, 250, 255, 257, 261, 266, 267, 269, 270, 273, 286, 290, 295, 302, 305, 309, 310, 311, 324, 336, 339, 343, 344, 350, 351, 360, 364, 366, 373, 383, 390, 392, 405, 406, 408, 409, 414, 995, 999, 1009, 1011, 1014, 1017, 1019, 1020], "explor": 4, "bike": [4, 170], "share": [4, 170], "demand": 4, "cross": [4, 84, 85, 137, 138, 147, 166, 188, 255, 256, 258, 259, 263, 265, 270, 312, 339, 360, 404, 408, 409, 974, 981, 1015], "valid": [4, 137, 138, 147, 188, 232, 255, 256, 258, 259, 263, 265, 270, 275, 339, 360, 364, 380, 387, 404, 409, 969, 970, 971, 972, 973, 974, 980, 981, 988, 1015], "gradient": [4, 117, 121, 122, 123, 124, 125, 126, 170, 199, 207, 213, 315, 316, 318, 320, 321, 412, 981, 999], "boost": [4, 117, 121, 122, 123, 124, 125, 126, 170, 199, 315, 316, 318, 320, 321, 412], "naiv": [4, 24, 25, 404, 987], "linear": [4, 25, 33, 34, 124, 151, 166, 169, 177, 178, 195, 199, 202, 205, 220, 221, 233, 316, 335, 340, 342, 343, 364, 387, 390, 404, 979, 981, 982, 983, 995, 1018], "regress": [4, 73, 75, 85, 86, 112, 124, 125, 134, 151, 156, 157, 158, 159, 178, 179, 182, 188, 190, 191, 192, 195, 197, 199, 201, 214, 216, 217, 231, 234, 295, 343, 356, 357, 374, 404, 406, 412, 415, 976, 978, 981, 985, 986, 988, 989, 999, 1000, 1001, 1018], "step": [4, 240, 391, 406], "categori": [4, 319, 321, 995], "trigonometr": 4, "period": [4, 200], "spline": [4, 200, 318, 995], "qualit": 4, "analysi": [4, 33, 34, 60, 95, 101, 103, 106, 111, 124, 170, 183, 245, 262, 263, 270, 291, 292, 293, 349, 404, 408, 410, 979, 988, 1002, 1019, 1020], "impact": [4, 61, 1042, 1043, 1044], "model": [4, 7, 11, 57, 75, 85, 96, 103, 117, 118, 119, 121, 125, 127, 147, 148, 151, 156, 166, 169, 170, 171, 175, 177, 178, 183, 187, 188, 193, 199, 202, 217, 229, 234, 238, 239, 244, 246, 250, 251, 253, 259, 260, 262, 267, 290, 295, 302, 310, 316, 318, 340, 343, 349, 364, 380, 390, 391, 393, 399, 400, 404, 409, 974, 980, 981, 984, 985, 987, 989, 990, 1011, 1015, 1018, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "predict": [4, 10, 24, 86, 112, 124, 134, 152, 168, 179, 199, 234, 256, 267, 324, 364, 390, 391, 408, 409, 415, 985, 996, 1011, 1018], "pairwis": [4, 260, 404, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 983], "interact": [4, 170, 320, 412, 1018], "polynomi": [4, 175, 178, 179, 200, 340, 977, 981, 983, 995, 1018], "non": [4, 14, 95, 124, 194, 199, 203, 220, 265, 335, 342, 343, 410, 981, 995], "kernel": [4, 5, 100, 151, 156, 157, 159, 160, 166, 174, 175, 233, 234, 287, 288, 296, 317, 332, 335, 340, 343, 404, 410, 411, 415, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 977, 978, 983, 995, 1000, 1018], "conclud": [4, 224], "remark": [4, 57, 224, 232], "imag": [5, 47, 50, 53, 66, 98, 372, 404, 413, 579, 580, 581, 582, 583], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 128, 129, 131, 148, 156, 186, 202, 213, 215, 260, 264, 269, 306, 343, 349, 350, 358, 360, 366, 379, 383, 384, 386, 390, 404, 409, 410, 412, 413, 414, 419, 422, 425, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 500, 502, 506, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 577, 578, 580, 583, 584, 585, 586, 587, 589, 590, 593, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 609, 610, 611, 613, 614, 615, 618, 619, 621, 623, 624, 626, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 648, 649, 651, 652, 653, 654, 655, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 684, 685, 686, 687, 688, 689, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 709, 713, 714, 715, 722, 724, 729, 730, 732, 733, 736, 737, 740, 743, 744, 745, 747, 748, 750, 752, 756, 773, 774, 777, 779, 780, 781, 782, 783, 784, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 850, 853, 854, 855, 856, 857, 858, 861, 862, 864, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 883, 886, 890, 891, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 911, 912, 920, 929, 931, 938, 942, 943, 944, 945, 946, 959, 969, 979, 981, 982, 985, 989, 999, 1000, 1001, 1009, 1018, 1020, 1037], "pca": [5, 58, 73, 90, 95, 96, 99, 100, 101, 102, 103, 104, 310, 410, 537, 1002, 1019], "refer": [5, 11, 25, 27, 80, 81, 98, 111, 114, 171, 175, 183, 187, 260, 265, 266, 278, 296, 372, 373, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 998, 999, 1000], "load": [5, 7, 17, 50, 58, 90, 117, 119, 121, 125, 137, 148, 171, 192, 217, 221, 229, 233, 241, 261, 269, 270, 286, 310, 311, 336, 339, 349, 350, 351, 371, 372, 383, 390, 413, 1011, 1019, 1020], "via": [5, 53, 187, 188, 217, 412, 977], "openml": [5, 311, 315, 372], "basi": [5, 160, 415, 977, 981, 1018], "reconstruct": [5, 13, 98], "test": [5, 78, 143, 263, 266, 273, 349, 354, 376, 378, 380, 386, 387, 409, 1011, 1018, 1020], "face": [6, 50, 95, 237, 373, 1009, 1016], "recognit": [6, 373, 375, 1016], "eigenfac": [6, 95, 1016], "svm": [6, 140, 144, 145, 175, 213, 233, 318, 329, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 404, 897, 898, 899, 900, 901, 902, 903, 904, 981, 991, 999, 1018, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "complex": [7, 230, 240, 259, 262, 326, 354, 364, 405, 981, 988, 989, 999, 1000, 1001], "influenc": [7, 10, 364], "benchmark": [7, 10, 58, 349], "choos": [7, 974, 1011, 1013, 1015], "paramet": [7, 78, 124, 258, 317, 336, 344, 378, 380, 391, 392, 404, 406, 412, 974, 981, 985, 1000, 1011, 1015, 1020], "run": [7, 58, 264], "code": [7, 95, 105, 378, 380, 383, 384, 386, 410, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "plot": [7, 8, 10, 20, 24, 30, 34, 38, 41, 47, 49, 50, 57, 63, 64, 66, 67, 78, 82, 85, 90, 91, 92, 96, 97, 101, 112, 117, 120, 125, 127, 131, 132, 133, 134, 137, 147, 164, 170, 178, 179, 183, 191, 192, 193, 203, 204, 208, 221, 229, 233, 238, 239, 241, 250, 256, 257, 262, 264, 267, 269, 273, 275, 290, 302, 311, 315, 317, 318, 324, 333, 334, 339, 340, 349, 355, 385, 404, 980, 992, 1024], "result": [7, 8, 20, 38, 47, 49, 50, 57, 58, 63, 64, 67, 78, 80, 82, 96, 97, 112, 117, 131, 134, 164, 175, 183, 204, 234, 238, 264, 273, 290, 311, 343, 350, 360, 974], "conclus": [7, 151, 183, 188, 278, 286, 312, 340], "out": [8, 123, 366, 386, 409, 974, 981, 987], "classif": [8, 26, 29, 30, 32, 33, 70, 91, 139, 152, 153, 154, 155, 159, 166, 215, 236, 263, 266, 267, 270, 286, 294, 302, 315, 323, 328, 340, 349, 374, 404, 412, 415, 981, 985, 986, 988, 989, 999, 1000, 1001, 1018, 1020], "text": [8, 166, 230, 261, 328, 348, 349, 350, 351, 373, 404, 413, 584, 585, 586, 587, 1020], "reuter": 8, "routin": [8, 365, 387], "main": [8, 199], "outlier": [9, 181, 216, 228, 238, 289, 290, 305, 404, 981, 991, 995], "detect": [9, 228, 238, 257, 289, 290, 985, 991, 1000], "set": [9, 75, 78, 102, 131, 164, 203, 267, 336, 354, 390, 404, 409, 981, 1011, 1017, 1018, 1020], "first": [9, 37, 378], "second": [9, 37], "latenc": [10, 364], "helper": [10, 160, 221, 387], "function": [10, 34, 160, 189, 203, 204, 209, 221, 255, 273, 317, 339, 351, 387, 404, 409, 412, 415, 977, 981, 985, 1000, 1018], "bulk": [10, 364], "atom": [10, 364], "speed": [10, 384], "variou": [10, 52, 206, 225], "regressor": [10, 112, 124, 178, 203, 312, 315, 318, 404, 412], "n_featur": 10, "throughput": [10, 364], "speci": [11, 296], "distribut": [11, 217, 220, 296, 309, 395, 982, 995], "visual": [12, 58, 106, 229, 234, 241, 255, 301, 316, 336, 404, 405, 406, 985, 1024], "stock": [12, 1016], "market": [12, 1016], "structur": [12, 39, 47, 67, 159, 326, 358, 1016], "retriev": [12, 315], "from": [12, 98, 148, 171, 311, 315, 365, 372, 376, 390, 404, 413, 985, 1011, 1018, 1019, 1020, 1037], "internet": 12, "graph": [12, 315, 387, 390, 404, 405, 413, 939], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 56, 58, 60, 63, 64, 65, 66, 67, 95, 166, 319, 321, 350, 374, 402, 404, 405, 410, 416, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 710, 711, 985, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "affin": [12, 38, 405, 983], "propag": [12, 38, 324, 325, 326, 405, 998], "embed": [12, 52, 220, 221, 232, 293, 412, 982], "2d": [12, 52, 97, 104, 170], "space": [12, 100, 406, 974, 982], "compress": [13, 53, 364], "sens": 13, "tomographi": 13, "l1": [13, 183, 190, 192, 215, 344, 414], "prior": [13, 160, 245], "lasso": [13, 183, 184, 185, 186, 187, 188, 193, 316, 648, 981], "topic": 14, "extract": [14, 74, 98, 217, 261, 350, 364, 366, 404, 413, 1020], "neg": [14, 95, 148, 194, 410, 981], "matrix": [14, 17, 159, 180, 254, 404, 405, 410, 985], "factor": [14, 95, 103, 106, 289, 290, 410, 991], "latent": [14, 85, 410], "dirichlet": [14, 410, 984], "alloc": [14, 410], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 63, 64, 67, 68, 76, 78, 83, 87, 93, 107, 117, 135, 141, 149, 161, 165, 173, 176, 192, 204, 218, 226, 243, 252, 273, 276, 279, 282, 297, 303, 313, 322, 330, 347, 352, 359, 363, 364, 404, 405, 406, 409, 992], "libsvm": [16, 372], "gui": 16, "wikipedia": 17, "princip": [17, 86, 101, 410, 1002, 1019], "eigenvector": 17, "download": [17, 131, 164, 372], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 395, 413, 1020], "adjac": 17, "singular": [17, 410], "vector": [17, 25, 53, 166, 331, 334, 343, 349, 351, 404, 413, 1000, 1018, 1019], "random": [17, 95, 115, 117, 129, 130, 171, 172, 232, 241, 266, 268, 360, 380, 387, 404, 409, 410, 412, 954, 974, 981, 997, 1002], "svd": [17, 95, 410], "central": 17, "score": [17, 85, 117, 122, 137, 147, 164, 178, 250, 259, 266, 267, 339, 396, 405, 409, 980, 985, 1000, 1015], "biclust": [18, 19, 20, 166, 374, 402, 404], "spectral": [19, 20, 21, 66, 220, 402, 405, 982], "co": [19, 21, 402], "algorithm": [19, 20, 21, 38, 44, 49, 55, 63, 64, 65, 220, 228, 384, 390, 979, 981, 986, 988, 989, 993, 1001, 1018], "A": [20, 21, 47, 58, 63, 199, 318, 377, 384, 399, 409, 1014, 1017], "demo": [20, 21, 38, 47, 49, 55, 58, 63, 65], "gener": [20, 24, 34, 38, 47, 49, 55, 57, 63, 64, 66, 67, 78, 80, 82, 91, 92, 96, 97, 98, 118, 127, 144, 147, 151, 157, 158, 160, 166, 177, 178, 179, 183, 193, 199, 201, 234, 250, 257, 273, 290, 295, 302, 316, 324, 343, 344, 360, 374, 378, 392, 404, 410, 412, 981, 995, 1006, 1015], "sampl": [20, 38, 55, 63, 78, 96, 97, 144, 180, 212, 234, 261, 273, 295, 316, 343, 346, 372, 387, 392, 404, 405, 412, 981], "fit": [20, 26, 57, 96, 103, 118, 119, 122, 124, 125, 156, 178, 179, 180, 193, 196, 201, 205, 267, 290, 295, 312, 343, 360, 380, 391, 396, 412, 987, 991, 1011], "spectralbiclust": [20, 447], "calibr": [23, 24, 25, 26, 27, 124, 166, 199, 403, 404, 433, 434, 435, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "probabl": [24, 25, 26, 30, 133, 154, 403, 404, 412, 1000], "classifi": [24, 25, 27, 31, 109, 134, 182, 240, 257, 281, 286, 315, 329, 333, 336, 349, 358, 403, 404, 412, 979, 988, 1018, 1020], "synthet": [24, 75, 178, 183, 257, 312, 383], "gaussian": [24, 25, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 244, 245, 246, 249, 250, 251, 305, 404, 415, 984, 987, 995, 997], "bay": [24, 25, 404, 987], "curv": [25, 27, 179, 234, 241, 251, 257, 262, 267, 269, 275, 403, 980], "summari": [25, 188, 350, 351, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "3": [26, 182, 321, 1020, 1035, 1036, 1041, 1043], "class": [26, 37, 111, 113, 133, 182, 208, 213, 263, 267, 269, 318, 335, 338, 392, 404, 409, 412, 413, 985, 988, 991, 999, 1000, 1027, 1028], "compar": [26, 42, 44, 62, 78, 85, 117, 122, 130, 144, 175, 178, 185, 201, 206, 228, 234, 260, 268, 291, 300, 305, 311, 390], "comparison": [27, 31, 34, 43, 64, 80, 104, 121, 143, 151, 220, 221, 234, 260, 271, 278, 351, 405, 981], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 58, 89, 138, 139, 221, 302, 324, 325, 375, 1017], "normal": [33, 175, 199, 305, 309, 404, 869, 884, 985, 995], "ledoit": [33, 79, 407], "wolf": [33, 79, 407], "oa": [33, 78, 79, 418, 471], "discrimin": [33, 34, 404, 979], "quadrat": [34, 415, 979], "covari": [34, 77, 78, 80, 81, 82, 166, 247, 404, 407, 418, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 979, 1035, 1039, 1040, 1041, 1043], "ellipsoid": [34, 246], "lda": [34, 104, 410, 979], "qda": [34, 979], "adjust": 37, "chanc": 37, "perform": [37, 43, 263, 310, 317, 319, 324, 350, 364, 378, 379, 405, 409, 1020], "evalu": [37, 58, 61, 81, 199, 238, 261, 264, 302, 311, 350, 391, 400, 402, 405, 409, 412, 974, 980, 985, 1020], "defin": [37, 47, 58, 67, 220, 255, 257, 258, 351, 985], "list": [37, 1008], "metric": [37, 40, 124, 264, 401, 404, 405, 409, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 974, 983, 985, 988, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "fix": [37, 382, 1027, 1030, 1031, 1032, 1033, 1034, 1040], "ground": [37, 178], "truth": [37, 178], "label": [37, 267, 324, 325, 326, 373, 374, 404, 405, 409, 412, 985, 996, 998], "grow": 37, "number": [37, 60, 121, 147, 272, 364, 380, 974, 975], "vari": [37, 299, 327, 405], "agglom": [39, 40, 52, 1019], "without": [39, 122, 291, 349], "differ": [40, 44, 62, 78, 160, 170, 305, 308, 311, 333, 340, 380, 390, 396, 405, 981, 1018], "hierarch": [41, 47, 62, 67, 321, 405, 1019], "dendrogram": 41, "birch": [42, 405, 438], "minibatchkmean": [42, 64, 95, 445], "bisect": [43, 405], "k": [43, 45, 48, 57, 58, 59, 61, 64, 67, 85, 286, 310, 350, 405, 409, 985, 988, 995, 1018, 1019], "mean": [43, 45, 48, 57, 58, 59, 61, 63, 64, 118, 119, 164, 171, 203, 350, 405, 985, 995, 1019], "regular": [43, 78, 126, 169, 192, 203, 204, 299, 344, 981, 989], "toi": [44, 62, 228, 375], "segment": [46, 66], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 260], "ward": [47, 67, 405, 1019], "an": [47, 59, 109, 164, 180, 188, 293, 315, 319, 390, 413, 974, 991, 1011, 1017, 1018], "color": 48, "quantiz": [48, 53, 1019], "dbscan": [49, 405, 416, 440], "onlin": [50, 206, 318, 319, 999], "dictionari": [50, 95, 98, 105, 410], "part": [50, 414], "agglomer": [51, 54, 1002, 1019], "origin": [53, 100, 266, 293, 305], "encod": [53, 121, 311, 312, 321, 995, 996], "strategi": [53, 258, 278, 300, 308, 321, 366, 404, 405, 985], "memori": [53, 364, 384, 386, 405], "footprint": 53, "v": [54, 67, 78, 79, 81, 86, 100, 147, 170, 171, 181, 191, 217, 263, 269, 273, 274, 354, 405, 412, 975, 995, 1011], "univari": [54, 85, 144, 339, 414, 975], "select": [54, 60, 72, 103, 137, 142, 144, 147, 148, 166, 187, 188, 193, 250, 253, 339, 390, 396, 400, 404, 409, 414, 974, 981, 1015, 1033], "hdbscan": [55, 321, 405, 442], "scale": [55, 169, 220, 223, 310, 344, 366, 888, 982, 991, 995, 1002], "invari": [55, 263], "multi": [55, 111, 130, 170, 193, 208, 223, 237, 264, 267, 299, 357, 384, 404, 981, 982, 985, 989, 1000, 1001], "hyperparamet": [55, 156, 157, 261, 268, 278, 613], "robust": [55, 80, 81, 178, 202, 205, 360, 404, 407, 974, 981], "min_cluster_s": 55, "min_sampl": 55, "dbscan_clust": 55, "induct": 56, "demonstr": [57, 264, 308, 324], "assumpt": 57, "possibl": [57, 383], "solut": 57, "final": [57, 151], "handwritten": [58, 221, 375], "our": [58, 255, 258, 378], "reduc": [58, 364], "initi": [59, 61, 248], "silhouett": [60, 405], "kmean": [60, 64, 316, 443], "empir": [61, 81, 232, 407], "linkag": [62, 405], "method": [62, 74, 85, 110, 151, 166, 220, 222, 248, 277, 280, 392, 404, 405, 977, 991, 992, 1019], "shift": [63, 405], "meanshift": [63, 444], "establish": [64, 175], "pariti": 64, "between": [64, 271, 981], "optic": [65, 375, 405, 446], "four": 66, "circl": 66, "two": [66, 113, 185, 239, 260], "unstructur": 67, "we": 67, "ar": [67, 318, 390], "nearest": [67, 166, 283, 284, 285, 286, 291, 294, 295, 315, 404, 975, 988, 1018], "neighbor": [67, 166, 220, 283, 284, 285, 286, 291, 295, 310, 315, 404, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 975, 982, 988, 1018, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "10": [67, 1027], "pipelin": [69, 70, 72, 73, 131, 145, 166, 169, 230, 235, 240, 261, 311, 339, 380, 390, 391, 404, 406, 414, 856, 857, 858, 859, 1002, 1016, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "composit": [69, 166, 404, 406, 974], "estim": [69, 77, 78, 79, 80, 81, 82, 108, 109, 114, 121, 123, 130, 157, 164, 166, 178, 202, 205, 230, 235, 237, 238, 249, 268, 278, 287, 288, 296, 315, 316, 317, 320, 360, 380, 390, 391, 392, 401, 404, 406, 407, 409, 411, 412, 974, 975, 979, 981, 985, 1000, 1005, 1013, 1015, 1017, 1028, 1035, 1036, 1037], "column": [70, 71, 240], "transform": [70, 71, 72, 75, 85, 116, 129, 240, 317, 318, 319, 370, 390, 391, 406, 408, 409, 988, 995, 996, 997, 1019], "heterogen": [70, 406], "sourc": [70, 96, 376], "20": [70, 349, 373, 1020, 1035], "newsgroup": [70, 349, 373, 1020], "creat": [70, 101, 103, 111, 203, 229, 267, 312, 339, 340, 390], "mix": 71, "type": [71, 245, 380, 392, 405, 1011], "dimension": [72, 220, 223, 240, 292, 310, 350, 979, 982, 988, 1002, 1018], "reduct": [72, 220, 224, 240, 292, 310, 350, 979, 988, 1002], "gridsearchcv": [72, 137, 264, 412, 794], "illustr": [72, 155, 160, 293, 415], "cach": [72, 285, 406], "within": 72, "chain": [73, 240, 281, 391, 406], "logist": [73, 182, 189, 190, 191, 192, 214, 215, 981, 1018], "concaten": 74, "multipl": [74, 240, 264, 360, 385, 409, 974, 975, 985, 1035, 1036], "effect": [75, 168, 225, 305, 310, 327, 354, 988], "target": [75, 158, 217, 311, 312, 390, 392, 404, 406, 408, 986, 995, 996], "shrinkag": [78, 407, 412, 979, 1018], "ledoitwolf": [78, 469], "max": [78, 985], "likelihood": [78, 178, 179, 263, 985, 990], "approach": [78, 188, 260], "mahalanobi": [80, 988], "distanc": [80, 404, 988], "relev": [80, 183, 981], "minimum": [81, 407], "determin": [81, 183, 407, 981, 985], "spars": [82, 95, 105, 169, 183, 185, 214, 315, 349, 350, 387, 404, 407, 410, 414, 995, 997, 999, 1044], "invers": [82, 407, 997], "decomposit": [84, 85, 94, 95, 114, 166, 374, 404, 408, 410, 417, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "variabl": [85, 168, 169, 365, 390, 404, 1018], "canon": [85, 408], "symmetr": 85, "pl": 85, "scatter": [85, 90], "multivari": [85, 975], "respons": [85, 393], "pls2": 85, "pls1": 85, "cca": [85, 478], "mode": [85, 364, 376], "b": 85, "deflat": 85, "compon": [86, 95, 101, 291, 292, 293, 410, 988, 1002, 1019], "partial": [86, 168, 170, 239, 992], "least": [86, 124, 188, 194, 197, 981], "squar": [86, 124, 160, 194, 197, 203, 415, 977, 981, 983, 985], "The": [86, 89, 90, 168, 169, 199, 225, 232, 258, 267, 278, 373, 382, 409, 413, 984, 985, 997, 1018, 1019], "one": [86, 121, 239, 981, 985], "power": [86, 199], "iri": [90, 102, 104, 120, 153, 208, 329, 333, 355, 375, 415, 1017], "represent": [90, 170, 230, 316, 364, 380, 413, 1019], "randomli": [91, 92], "multilabel": [92, 236, 374, 387, 404, 985, 986, 1011], "prepar": [95, 112, 175, 220, 269, 270, 310, 336, 382], "nmf": [95, 319, 410, 536], "independ": [95, 410, 1019], "fastica": [95, 96, 97, 417, 529], "minibatchsparsepca": [95, 410, 535], "center": [95, 995], "fa": [95, 103], "posit": [95, 318], "blind": 96, "separ": [96, 211, 337, 338], "ica": [96, 410, 1019], "point": [97, 293], "cloud": 97, "distort": 98, "displai": [98, 204, 229, 230, 240, 320, 321, 386, 1024, 1043], "patch": [98, 413], "noisi": [98, 158, 203], "them": [98, 377], "increment": [99, 366, 410], "kernelpca": [100, 531], "figur": 101, "probabilist": [103, 152, 410, 415], "precomput": [105, 180, 315, 410], "rotat": 106, "pattern": 106, "__sklearn_is_fitted__": 109, "api": [109, 241, 242, 315, 318, 320, 365, 380, 385, 392, 396, 401, 404, 415, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037], "custom": [109, 258, 332, 413, 995, 1000], "implement": [109, 185, 390, 405, 985, 988, 999, 1000], "simpl": [109, 151, 235, 288, 384, 1017], "ensembl": [110, 116, 120, 166, 319, 404, 412, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "adaboost": [111, 112, 113, 412], "decis": [111, 112, 120, 127, 132, 166, 233, 286, 321, 329, 340, 353, 354, 355, 356, 357, 358, 390, 393, 404, 1001], "tree": [111, 112, 116, 118, 119, 120, 129, 166, 171, 199, 315, 320, 321, 353, 354, 355, 356, 357, 358, 390, 404, 412, 414, 905, 906, 907, 908, 909, 910, 911, 988, 993, 1001, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "train": [111, 112, 125, 127, 134, 147, 203, 229, 234, 238, 239, 241, 250, 273, 278, 302, 311, 312, 317, 327, 336, 340, 349, 354, 355, 358, 409, 988, 998, 1011, 1018, 1020], "adaboostclassifi": [111, 549], "converg": 111, "error": [111, 115, 124, 137, 178, 203, 257, 273, 386, 395, 981, 985], "weight": [111, 178, 180, 212, 301, 316, 346, 396, 404, 412, 413], "weak": [111, 412], "learner": [111, 412], "decisiontre": 112, "singl": [114, 131, 217, 229, 374, 405, 975], "versu": [114, 213, 265, 329, 364], "bag": [114, 123, 349, 412, 413, 974, 1020], "bia": 114, "varianc": [114, 197, 414, 985, 995], "oob": 115, "forest": [115, 117, 118, 119, 130, 171, 172, 238, 241, 373, 412, 991], "histogram": [117, 316, 318, 320, 411, 412], "import": [118, 119, 125, 148, 171, 172, 233, 278, 310, 315, 412, 993], "decreas": [118, 119, 171], "impur": [118, 119, 171, 354, 993], "permut": [118, 171, 172, 266, 315, 409, 993], "pixel": 119, "parallel": [119, 365, 376, 384, 404, 405, 412, 951, 952, 974], "mdi": [119, 171], "surfac": [120, 233, 355], "categor": [121, 311, 317, 390, 412, 987, 995], "am": [121, 238], "hous": [121, 238, 373], "drop": 121, "hot": 121, "ordin": 121, "nativ": [121, 311, 315, 317], "limit": [121, 151, 364, 395, 399, 413], "split": [121, 317, 360, 409], "earli": [122, 207], "stop": [122, 207, 413, 999], "interv": 124, "quantil": [124, 201, 318, 319, 981], "confid": 124, "tune": [124, 258, 261, 317, 974, 1020], "hyper": [124, 258, 317, 404, 974], "preprocess": [125, 131, 166, 169, 170, 238, 240, 304, 321, 351, 360, 390, 404, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 995, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "devianc": [125, 985], "isolationforest": [127, 559], "discret": [127, 159, 306, 307, 995], "boundari": [127, 132, 286, 329, 340], "path": [127, 186, 192, 204, 358, 395], "length": [127, 395], "monoton": [128, 412], "constraint": [128, 320, 405, 412], "name": [128, 318, 390, 406], "specifi": [128, 390, 974], "hash": [129, 387, 413], "total": [129, 354, 412], "output": [130, 237, 305, 320, 357, 1001, 1018], "meta": [130, 278, 317, 404, 412], "combin": [131, 229], "predictor": 131, "stack": [131, 315, 412], "make": [131, 134, 164, 378, 382, 393], "measur": [131, 263, 405, 985], "votingclassifi": [132, 133, 412, 565], "calcul": 133, "individu": [134, 170, 317, 992], "vote": [134, 412], "tutori": [136, 166, 1004, 1012, 1014, 1020], "exercis": [136, 137, 138, 139, 140, 166, 1015, 1018, 1020], "diabet": [137, 239, 375, 1018], "appli": 137, "line": [137, 154], "show": [137, 269], "std": [137, 178], "bonu": 137, "how": [137, 360, 378, 384, 390], "much": 137, "can": [137, 390], "you": [137, 390], "trust": 137, "alpha": [137, 354], "f": [143, 985], "mutual": [143, 405], "inform": [143, 164, 187, 188, 382, 404, 405, 974, 981], "anova": [145, 339], "recurs": [146, 147, 414], "elimin": [146, 147, 414, 974], "sequenti": [148, 414], "coeffici": [148, 169, 178, 203, 204, 405, 985], "toler": 148, "valu": [148, 162, 163, 164, 166, 225, 235, 315, 321, 358, 378, 410, 412, 975, 985, 993, 995, 1001], "process": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 169, 360, 393, 404, 415, 984, 1014], "machin": [150, 166, 168, 169, 170, 302, 331, 386, 404, 990, 1000, 1011, 1018], "ridg": [151, 179, 181, 197, 203, 204, 234, 312, 404, 668, 978, 981], "gpc": [152, 153, 154, 155, 415], "iso": [154, 267], "xor": [155, 415], "forecast": 156, "co2": 156, "level": [156, 157, 365, 405, 412], "mona": 156, "loa": 156, "gpr": [156, 157, 415], "build": [156, 164, 376, 378, 386, 406, 1020], "design": 156, "proper": 156, "extrapol": 156, "interpret": [156, 169, 203, 238, 410, 412], "abil": 157, "nois": [157, 158, 179], "optimis": 157, "basic": [158, 217, 391, 407, 415], "introductori": 158, "free": 158, "sequenc": [159, 390], "similar": [159, 983, 985], "under": [159, 390, 1022, 1043], "posterior": 160, "cookbook": 160, "radial": [160, 415, 977, 1018], "ration": [160, 415], "quadradt": 160, "exp": [160, 415], "sine": [160, 251, 415], "dot": [160, 415], "product": [160, 217, 386, 390, 415, 617], "mat\u00e9rn": [160, 415], "miss": [162, 163, 164, 166, 315, 321, 412, 975, 995, 1001], "imput": [162, 163, 164, 166, 315, 404, 623, 624, 625, 626, 975, 995, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "variant": 163, "iterativeimput": [163, 623, 975], "befor": [164, 382], "replac": 164, "0": [164, 315, 316, 317, 318, 1001, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "knn": [164, 315], "iter": [164, 272, 409, 974], "releas": [166, 314, 315, 316, 317, 318, 319, 320, 321, 382, 395, 1025, 1033], "highlight": [166, 314, 315, 316, 317, 318, 319, 320, 321, 1027, 1030, 1031, 1034, 1035], "mixtur": [166, 244, 245, 246, 249, 250, 251, 404, 792, 793, 984, 1035, 1036, 1040, 1041, 1043], "inspect": [166, 167, 394, 404, 627, 628, 629, 630, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "approxim": [166, 174, 175, 233, 283, 317, 404, 407, 977], "manifold": [166, 219, 220, 221, 222, 374, 404, 684, 685, 686, 687, 688, 689, 690, 691, 692, 982, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "miscellan": [166, 227, 404, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "multiclass": [166, 214, 269, 277, 278, 315, 387, 403, 404, 825, 826, 827, 947, 948, 949, 985, 986, 1011, 1018, 1036, 1039, 1040, 1041], "multioutput": [166, 280, 404, 828, 829, 830, 831, 986, 1035, 1036, 1037, 1038, 1039, 1042, 1043], "neural": [166, 170, 298, 404, 989, 990], "network": [166, 170, 298, 404, 989, 990], "semi": [166, 323, 324, 328, 329, 404, 998], "supervis": [166, 323, 324, 328, 329, 404, 989, 998, 1007, 1018], "work": [166, 348, 364, 377, 390, 404, 1020], "failur": [168, 974], "infer": 168, "causal": [168, 169], "simul": 168, "hourli": 168, "wage": [168, 169], "descript": 168, "incom": 168, "fulli": 168, "observ": [168, 1018, 1019], "lesson": [168, 169], "common": [169, 360, 392, 401, 413, 985], "pitfal": [169, 360], "matter": 169, "check": [169, 262, 315, 386, 401, 1035, 1036, 1037], "problem": [169, 410, 1000, 1001, 1011, 1016, 1018, 1019], "correl": [169, 172, 408, 985, 993], "numer": [169, 365, 380], "wrong": [169, 390], "depend": [170, 235, 239, 376, 992, 1027, 1040, 1041], "condit": [170, 317, 992], "expect": [170, 317, 992], "preprocessor": 170, "1": [170, 196, 318, 319, 320, 321, 390, 1020, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "wai": [170, 378, 390], "layer": [170, 299, 989], "perceptron": [170, 299, 664, 981, 989], "ic": [170, 992], "pdp": 170, "3d": 170, "accuraci": [171, 233, 349, 354, 985], "": [171, 310, 312, 381, 390, 412, 985], "multicollinear": 172, "breast": [172, 375], "cancer": [172, 375], "handl": [172, 404, 975], "scalabl": [175, 262, 316], "partit": 175, "baselin": [175, 199], "bayesian": [178, 179, 245, 260, 404, 981, 984], "recov": 178, "true": [178, 179], "margin": [178, 179, 211, 337, 341], "log": [178, 179, 985], "expans": 178, "sinusoid": 179, "cubic": 179, "l": 179, "elast": [180, 184, 981], "net": [180, 184, 981], "gram": 180, "huberregressor": [181, 645], "strong": 181, "signal": [183, 410, 1019], "automat": [183, 391, 981], "ard": [183, 981], "elasticnet": [183, 316, 642], "dens": 185, "lar": [186, 646, 981], "criteria": [187, 390, 981, 1001], "aic": [188, 981], "bic": [188, 250, 981], "criterion": [188, 317, 974, 999], "coordin": 188, "descent": [188, 207, 213, 981, 999], "angl": [188, 981], "penalti": [190, 210, 344], "sparsiti": [190, 196, 413, 1018], "multinomi": [191, 215, 981, 987], "One": [191, 213, 269, 318, 335, 409, 991, 999], "rest": [191, 269], "joint": 193, "task": [193, 404, 981, 1005], "seri": [193, 409], "onli": [196, 216, 1038, 1040], "2": [196, 320, 1020, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ordinari": [197, 981], "orthogon": [198, 981], "match": [198, 981], "pursuit": [198, 981], "poisson": [199, 217, 316, 317, 985], "loss": [199, 209, 316, 319, 321, 412, 985], "french": 199, "motor": 199, "third": [199, 235, 395], "parti": [199, 235, 395], "liabil": 199, "claim": [199, 217], "constant": [199, 975], "rank": [199, 404, 985], "takeawai": 199, "interpol": 200, "quantileregressor": [201, 666], "linearregress": [201, 653], "ransac": [202, 981], "l2": [203, 344], "purpos": [203, 351, 1006], "thi": [203, 1006], "solver": [206, 410, 981], "stochast": [207, 213, 220, 300, 981, 982, 990, 999], "sgd": [208, 209, 210, 211, 212, 981, 999], "convex": 209, "maximum": [211, 337, 990], "hyperplan": [211, 337, 338], "20newgroup": 214, "mnist": [215, 301], "theil": [216, 981], "sen": [216, 981], "y": [216, 390, 408, 996, 998], "direct": 216, "x": 216, "tweedi": [217, 985], "insur": 217, "definit": [217, 302, 992, 1037], "frequenc": [217, 1020], "sever": [217, 222], "gamma": [217, 321, 985], "pure": 217, "premium": 217, "tweedieregressor": [217, 676], "local": [220, 221, 289, 290, 982, 991], "isomap": [220, 221, 684, 982], "multidimension": 220, "t": [220, 225, 982], "techniqu": 221, "sphere": 222, "swiss": 224, "roll": [224, 380], "And": [224, 393], "hole": 224, "sne": [225, 982], "perplex": 225, "shape": [225, 1011], "anomali": 228, "object": [229, 255, 380, 390, 404, 974, 985, 1017, 1024], "confusionmatrixdisplai": [229, 693], "roccurvedisplai": [229, 698], "precisionrecalldisplai": [229, 696], "compact": 230, "rich": [230, 316], "html": [230, 380], "isoton": [231, 403, 404, 631, 632, 633, 976, 1035, 1036, 1037, 1039, 1041, 1042], "johnson": [232, 997], "lindenstrauss": [232, 997], "bound": 232, "theoret": 232, "explicit": 233, "map": [233, 309, 995], "rbf": [233, 335, 336, 340, 415, 618, 983, 1000, 1018], "python": [233, 365, 384, 399, 1004, 1005, 1033], "packag": [233, 1005, 1039], "svr": [234, 343, 903, 1000], "construct": 234, "look": [234, 343], "metadata": [235, 321, 349, 392, 396, 404, 1044], "rout": [235, 321, 392, 396, 404, 1044], "router": 235, "consum": 235, "deprec": [235, 378, 404, 924, 1037], "default": [235, 290, 378], "chang": [235, 378, 393, 1009, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "complet": [237, 405], "kddcup99": 238, "sa": 238, "covertyp": [238, 373], "cardiotocographi": 238, "ablat": 238, "studi": 238, "advanc": [239, 396], "With": [239, 1020], "togeth": [239, 269, 1016, 1019], "grid": [240, 258, 260, 268, 271, 974, 1015, 1020], "search": [240, 258, 260, 268, 271, 278, 391, 974, 1015, 1020], "over": 240, "roc": [241, 257, 269, 270, 315, 985], "svc": [241, 340, 344, 902, 1000], "introduc": 242, "set_output": [242, 320, 380], "concentr": 245, "variat": [245, 984], "gmm": [247, 248], "densiti": [249, 287, 288, 296, 321, 411, 931, 1000], "best": [250, 379, 390], "confus": [254, 405, 985], "behavior": 255, "indic": 255, "mani": [255, 320, 365, 390], "cv": [255, 360], "tradeoff": [257, 985], "det": [257, 985], "refit": [258, 1011], "balanc": [259, 985], "statist": [260, 1005, 1014, 1017], "frequentist": 260, "practic": [260, 360, 379, 383, 982, 989, 999, 1000, 1001], "equival": 260, "all": [260, 269, 319, 395, 1016, 1042, 1043, 1044], "take": 260, "home": 260, "messag": 260, "ratio": [263, 985], "pre": [263, 360, 391], "post": [263, 354], "respect": 263, "preval": 263, "cross_val_scor": [264, 819], "nest": [265, 406, 1015], "see": [265, 406], "also": [265, 382, 406], "signific": 266, "precis": [267, 985], "recal": [267, 985], "In": 267, "binari": [267, 981, 985], "averag": [267, 269, 405, 412, 985], "micro": [267, 269], "each": [267, 272, 349, 974], "f1": 267, "receiv": [269, 270, 985], "oper": [269, 270, 377, 387, 404, 415, 985], "characterist": [269, 270, 985], "specif": [269, 376, 380, 399, 974, 1005, 1006], "ovr": 269, "macro": 269, "ovo": 269, "success": [271, 272, 317, 974], "halv": [271, 272, 317, 974], "candid": [272, 974], "amount": [272, 974], "resourc": [272, 365, 378, 974, 1004, 1008], "underfit": 274, "overfit": 274, "overview": [278, 385, 405, 991], "yeast": 278, "uci": 278, "tsne": [283, 688], "1d": 288, "novelti": [289, 991, 1000], "lof": [289, 290], "neighborhood": [291, 292, 293, 988], "centroid": [294, 988], "mlpclassifi": [300, 854], "mlp": 301, "restrict": [302, 990], "boltzmann": [302, 990], "scaler": 305, "standardscal": [305, 877], "minmaxscal": [305, 867], "maxabsscal": [305, 866], "robustscal": [305, 875], "powertransform": [305, 873], "quantiletransform": [305, 874], "uniform": [305, 995], "kbinsdiscret": [306, 308, 862], "continu": [306, 378], "rescal": 310, "other": [311, 372, 390, 412, 1005, 1027], "intern": 312, "22": [315, 1037], "new": [315, 317, 318, 320, 321, 378, 390, 1004, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "prune": [315, 354, 1001], "datafram": [315, 390], "compat": [315, 378, 380, 401, 404], "auc": [315, 702], "now": [315, 318, 1037], "23": [316, 1038], "stabil": 316, "improv": [316, 317, 318, 319, 320, 377, 378, 1030, 1031], "24": [317, 1039], "histgradientboost": 317, "self": [317, 327, 998], "sequentialfeatureselector": [317, 598], "polynomialcountsketch": [317, 636], "decisiontreeregressor": [317, 906], "keyword": [318, 1038, 1040], "argument": [318, 380, 1038, 1040], "more": [318, 390, 399, 989], "flexibl": [318, 975], "stabl": 318, "histgradientboostingregressor": [319, 558], "get_feature_names_out": 319, "avail": [319, 974, 1023, 1024], "group": [319, 321, 409, 1009, 1019], "infrequ": [319, 321, 995], "onehotencod": [319, 870], "minibatchnmf": [319, 534], "version": [319, 372, 376, 382, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "bisectingkmean": [319, 439], "divid": 319, "panda": [320, 383, 390], "enhanc": [320, 393, 1005, 1030, 1031, 1032, 1033, 1034], "faster": [320, 412], "parser": [320, 372], "fetch_openml": [320, 492], "experiment": [320, 382, 401, 404, 575, 576, 1043], "arrai": [320, 358, 387, 401, 404, 1011, 1044], "lineardiscriminantanalysi": [320, 545], "effici": [320, 387], "targetencod": [321, 878], "model_select": [321, 404, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "validationcurvedisplai": [321, 816], "ordinalencod": [321, 871], "most": 324, "uncertain": 324, "activ": 325, "threshold": 327, "linearsvc": [334, 897], "unbalanc": [338, 1000], "some": 339, "plai": 339, "percentil": 339, "sigmoid": [340, 403, 983, 1018], "case": [344, 981, 985], "tie": 345, "break": 345, "word": [349, 413, 1020], "strip": 349, "quantifi": [350, 985], "qualiti": [350, 985], "tfidfvector": [350, 351, 587], "lsa": 350, "top": [350, 985], "term": [350, 392, 413], "per": 350, "hashingvector": [350, 585], "featurehash": [351, 578], "dictvector": [351, 577], "special": 351, "cost": [354, 1001], "leav": [354, 409, 981], "understand": 358, "what": [358, 390], "i": [358, 383, 390, 409, 1009], "here": [358, 1020], "recommend": [360, 373, 1005], "inconsist": 360, "leakag": 360, "dure": 360, "avoid": [360, 406], "control": [360, 412, 989], "none": 360, "randomst": 360, "instanc": [360, 366], "repeat": [360, 406, 409], "call": [360, 377], "splitter": [360, 404], "subtleti": 360, "get": [360, 390, 391], "reproduc": [360, 383], "across": 360, "execut": [360, 390], "configur": [364, 365], "overhead": 364, "input": [364, 380, 401, 404, 405, 995], "tip": [364, 379, 386, 974, 982, 989, 999, 1000, 1001], "trick": [364, 384, 386, 413], "algebra": [364, 387], "librari": [364, 365], "reshap": [364, 1017], "link": [364, 372, 985], "manag": [365, 395], "higher": 365, "joblib": [365, 384], "lower": 365, "openmp": [365, 379], "numpi": [365, 383], "scipi": [365, 1044], "oversubscript": 365, "spawn": 365, "too": 365, "thread": 365, "switch": 365, "environ": 365, "sklearn_assume_finit": 365, "sklearn_working_memori": 365, "sklearn_se": 365, "sklearn_tests_global_random_se": 365, "sklearn_skip_network_test": 365, "sklearn_run_float32_test": 365, "sklearn_enable_debug_cython_direct": 365, "sklearn_build_enable_debug_symbol": 365, "sklearn_pairwise_dist_chunk_s": 365, "computation": 366, "bigger": 366, "stream": 366, "note": [366, 401, 409], "tabl": [367, 390], "Of": 367, "content": [367, 390, 1011], "util": [371, 383, 387, 404, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 1020, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "svmlight": 372, "format": [372, 383, 390, 399, 986], "org": [372, 382, 1009], "repositori": 372, "arff": 372, "extern": [372, 1004, 1011, 1027, 1036], "olivetti": 373, "consider": 373, "wild": 373, "rcv1": 373, "kddcup": 373, "99": 373, "california": 373, "plant": 375, "linnerrud": 375, "wine": 375, "wisconsin": 375, "diagnost": 375, "instal": [376, 395], "nightli": 376, "runtim": 376, "tag": [376, 378, 380], "edit": 376, "platform": [376, 386, 395], "instruct": 376, "window": [376, 395], "maco": 376, "compil": [376, 384], "conda": 376, "forg": 376, "homebrew": 376, "linux": [376, 390, 395], "system": 376, "freebsd": 376, "altern": [376, 974], "bug": [377, 378, 382, 1008, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "triag": 377, "issu": [377, 378], "curat": 377, "fruit": 377, "discuss": 377, "pr": [377, 382], "help": [377, 378, 390], "review": [377, 378, 386, 1020], "member": 377, "close": 377, "tough": 377, "typic": 377, "workflow": [377, 378], "contribut": [378, 390], "submit": 378, "report": [378, 383, 985], "request": [378, 382, 386, 390], "good": [378, 383], "video": [378, 1004], "git": 378, "pull": [378, 382, 386, 390], "checklist": [378, 382], "integr": 378, "ci": 378, "stall": 378, "unclaim": 378, "easi": 378, "want": 378, "github": 378, "action": 378, "coverag": [378, 386, 985], "write": 378, "matplotlib": 378, "monitor": 378, "tracker": [378, 1008], "maintain": [378, 382, 393, 399], "backward": 378, "guidelin": [378, 380], "read": 378, "exist": 378, "cython": [379, 384, 386], "convent": [379, 1011], "knowledg": 379, "eas": 379, "instanti": 380, "attribut": [380, 392, 974], "option": 380, "univers": 380, "your": [380, 383, 985], "own": [380, 390, 985], "templat": 380, "baseestim": [380, 419], "mixin": 380, "get_param": 380, "set_param": 380, "init": 380, "clone": [380, 430], "check_is_fit": [380, 969], "assert": 380, "guid": [381, 1022], "major": [382, 412, 1035, 1036], "minor": 382, "known": [382, 1035, 1036], "merg": 382, "web": 382, "site": 382, "craft": 383, "minim": [383, 1001, 1040, 1041], "provid": 383, "fail": 383, "comment": 383, "boil": 383, "down": 383, "script": 383, "someth": 383, "small": 383, "do": [383, 390], "NOT": 383, "unless": 383, "extrem": [383, 412], "necessari": 383, "markdown": 383, "make_regress": [383, 520], "make_classif": [383, 511], "make_blob": [383, 508], "optim": [384, 404, 974], "c": 384, "profil": 384, "usag": [384, 390, 396, 401, 403, 406, 412, 413, 981], "extens": [384, 395], "yep": 384, "gperftool": 384, "debugg": 384, "gdb": 384, "gprof": 384, "valgrind": [384, 386], "callgrind": 384, "kcachegrind": 384, "warm": 384, "restart": 384, "ax": 385, "saniti": 386, "preserv": 386, "fold": [386, 409], "unfold": 386, "outdat": 386, "diff": 386, "remot": 386, "track": [386, 406], "branch": 386, "pytest": 386, "alias": 386, "flag": 386, "standard": [386, 995], "repli": 386, "debug": 386, "arm64": 386, "x86_64": 386, "tool": [387, 390, 401, 404], "matric": [387, 404, 995], "warn": [387, 404], "except": [387, 404, 567, 568, 569, 570, 571, 572, 573, 574, 1039, 1043], "dispatch": 388, "frequent": 390, "ask": 390, "question": [390, 1008], "lot": 390, "peopl": [390, 1027, 1028, 1029, 1030], "pronounc": 390, "why": [390, 412], "pypi": 390, "deep": 390, "reinforc": 390, "Will": 390, "add": 390, "graphic": [390, 990], "did": 390, "remov": [390, 414, 995, 1027], "hmm": 390, "gpu": 390, "need": 390, "doe": 390, "directli": 390, "plan": 390, "so": 390, "my": 390, "ani": 390, "attent": 390, "inclus": 390, "includ": 390, "should": 390, "save": 390, "export": 390, "deploi": 390, "bunch": [390, 912], "usabl": 390, "deal": [390, 404], "string": 390, "sometim": 390, "crash": 390, "freez": 390, "n_job": 390, "osx": [390, 395], "job": 390, "than": 390, "random_st": 390, "entir": 390, "start": 391, "processor": 391, "next": 391, "glossari": 392, "element": 392, "concept": [392, 981], "properti": 392, "role": 393, "technic": 393, "committe": 393, "propos": 393, "slep": 393, "latest": 395, "alpin": 395, "arch": 395, "debian": 395, "ubuntu": 395, "fedora": 395, "netbsd": 395, "macport": 395, "mac": 395, "anaconda": 395, "enthought": 395, "deploy": 395, "intel": 395, "winpython": 395, "troubleshoot": 395, "caus": 395, "unweight": 396, "interfac": [396, 404], "statu": 396, "persist": 399, "serial": 399, "secur": 399, "skop": 399, "interoper": [399, 1005], "pytorch": 401, "mp": 401, "devic": 401, "mathemat": [402, 404, 405, 412, 977, 979, 988, 989, 992, 999, 1000, 1001], "formul": [402, 405, 412, 979, 988, 989, 999, 1000, 1001], "sklearn": [404, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "compos": [404, 460, 461, 462, 463, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "cross_decomposit": [404, 478, 479, 480, 481, 1037, 1039, 1041, 1043], "loader": 404, "discriminant_analysi": [404, 545, 546, 1035, 1036, 1039, 1041, 1042, 1043], "dummi": [404, 547, 548, 985, 1035, 1036, 1037, 1040, 1041], "feature_extract": [404, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "feature_select": [404, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "gaussian_process": [404, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "kernel_approxim": [404, 634, 635, 636, 637, 638, 1037, 1039, 1040, 1041, 1042, 1043], "kernel_ridg": [404, 639], "linear_model": [404, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "classic": 404, "glm": 404, "naive_bay": [404, 832, 833, 834, 835, 836, 1035, 1037, 1038, 1039, 1040, 1042, 1043], "neural_network": [404, 853, 854, 855, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "random_project": [404, 889, 890, 891, 1041], "semi_supervis": [404, 892, 893, 894, 1037, 1038, 1039, 1043], "discoveri": [404, 925, 926, 927], "checker": 404, "recent": 404, "low": [405, 412, 414], "mini": [405, 410], "batch": [405, 410], "assign": 405, "featureagglomer": [405, 441], "hierarchi": 405, "ad": 405, "connect": [405, 413, 1019], "consumpt": 405, "larg": [405, 413], "size": [405, 412], "reachabl": 405, "rand": 405, "index": [405, 940], "advantag": 405, "drawback": 405, "homogen": 405, "fowlk": 405, "mallow": 405, "calinski": 405, "harabasz": 405, "davi": 405, "bouldin": 405, "conting": 405, "pair": 405, "access": 406, "featureunion": [406, 856], "columntransform": [406, 460], "shrunk": 407, "oracl": 407, "plscanon": [408, 479], "plssvd": [408, 481], "plsregress": [408, 480], "held": 409, "cross_valid": [409, 820], "obtain": 409, "d": [409, 988], "loo": 409, "p": [409, 1009], "lpo": 409, "shuffl": [409, 959], "stratif": 409, "stratifi": 409, "stratifiedgroupkfold": [409, 812], "predefin": [409, 985], "decompos": 410, "exact": 410, "sparsepca": [410, 539], "kpca": 410, "choic": [410, 988], "truncat": 410, "semant": 410, "nnmf": 410, "frobeniu": 410, "norm": 410, "beta": 410, "diverg": 410, "gradientboostingclassifi": [412, 555], "histgradientboostingclassifi": [412, 557], "gradientboostingregressor": [412, 556], "addit": [412, 977], "rate": 412, "subsampl": 412, "hard": 412, "soft": 412, "dict": 413, "tf": 413, "idf": 413, "decod": 413, "applic": [413, 1019], "corpu": 413, "selectfrommodel": [414, 593], "biclustermixin": 420, "classnameprefixfeaturesoutmixin": 421, "classifiermixin": 422, "clustermixin": 423, "densitymixin": 424, "metaestimatormixin": 425, "onetoonefeaturemixin": 426, "outliermixin": 427, "regressormixin": 428, "transformermixin": 429, "is_classifi": 431, "is_regressor": 432, "calibratedclassifiercv": 433, "calibrationdisplai": 434, "from_estim": [434, 627, 628, 693, 694, 696, 697, 698, 800, 816], "calibration_curv": 435, "affinitypropag": 436, "agglomerativeclust": 437, "spectralclust": 448, "spectralcoclust": 449, "affinity_propag": 450, "cluster_optics_dbscan": 451, "cluster_optics_xi": 452, "compute_optics_graph": 453, "estimate_bandwidth": 454, "k_mean": 455, "kmeans_plusplu": 456, "mean_shift": 457, "spectral_clust": 458, "ward_tre": 459, "transformedtargetregressor": 461, "make_column_selector": 462, "make_column_transform": 463, "config_context": 464, "ellipticenvelop": 465, "empiricalcovari": 466, "graphicallasso": 467, "graphicallassocv": 468, "mincovdet": 470, "shrunkcovari": 472, "empirical_covari": 473, "graphical_lasso": 474, "ledoit_wolf": 475, "ledoit_wolf_shrinkag": 476, "shrunk_covari": 477, "clear_data_hom": 482, "dump_svmlight_fil": 483, "fetch_20newsgroup": 484, "fetch_20newsgroups_vector": 485, "fetch_california_h": 486, "fetch_covtyp": 487, "fetch_kddcup99": 488, "fetch_lfw_pair": 489, "fetch_lfw_peopl": 490, "fetch_olivetti_fac": 491, "fetch_rcv1": 493, "fetch_species_distribut": 494, "get_data_hom": 495, "load_breast_canc": 496, "load_diabet": 497, "load_digit": 498, "load_fil": 499, "load_iri": 500, "load_linnerud": 501, "load_sample_imag": [502, 503], "load_svmlight_fil": [504, 505], "load_win": 506, "make_biclust": 507, "make_checkerboard": 509, "make_circl": 510, "make_friedman1": 512, "make_friedman2": 513, "make_friedman3": 514, "make_gaussian_quantil": 515, "make_hastie_10_2": 516, "make_low_rank_matrix": 517, "make_moon": 518, "make_multilabel_classif": 519, "make_s_curv": 521, "make_sparse_coded_sign": 522, "make_sparse_spd_matrix": 523, "make_sparse_uncorrel": 524, "make_spd_matrix": 525, "make_swiss_rol": 526, "dictionarylearn": 527, "factoranalysi": 528, "incrementalpca": 530, "latentdirichletalloc": 532, "minibatchdictionarylearn": 533, "sparsecod": 538, "truncatedsvd": 540, "dict_learn": 541, "dict_learning_onlin": 542, "non_negative_factor": 543, "sparse_encod": 544, "quadraticdiscriminantanalysi": 546, "dummyclassifi": 547, "dummyregressor": 548, "adaboostregressor": 550, "baggingclassifi": 551, "baggingregressor": 552, "extratreesclassifi": 553, "extratreesregressor": 554, "randomforestclassifi": 560, "randomforestregressor": 561, "randomtreesembed": 562, "stackingclassifi": 563, "stackingregressor": 564, "votingregressor": 566, "convergencewarn": 567, "dataconversionwarn": 568, "datadimensionalitywarn": 569, "efficiencywarn": 570, "fitfailedwarn": 571, "inconsistentversionwarn": 572, "notfittederror": 573, "undefinedmetricwarn": 574, "enable_halving_search_cv": 575, "enable_iterative_imput": 576, "patchextractor": 579, "extract_patches_2d": 580, "grid_to_graph": 581, "img_to_graph": 582, "reconstruct_from_patches_2d": 583, "countvector": 584, "tfidftransform": 586, "genericunivariateselect": 588, "rfe": 589, "rfecv": 590, "selectfdr": 591, "selectfpr": 592, "selectfw": 594, "selectkbest": 595, "selectpercentil": 596, "selectormixin": 597, "variancethreshold": 599, "chi2": 600, "f_classif": 601, "f_regress": 602, "mutual_info_classif": 603, "mutual_info_regress": 604, "r_regress": 605, "gaussianprocessclassifi": 606, "gaussianprocessregressor": 607, "compoundkernel": 608, "constantkernel": 609, "dotproduct": 610, "expsinesquar": 611, "exponenti": 612, "matern": 615, "pairwisekernel": 616, "rationalquadrat": 619, "sum": 620, "whitekernel": 621, "get_config": 622, "knnimput": 624, "missingind": 625, "simpleimput": 626, "decisionboundarydisplai": 627, "partialdependencedisplai": 628, "partial_depend": 629, "permutation_import": 630, "isotonicregress": 631, "check_increas": 632, "isotonic_regress": 633, "additivechi2sampl": 634, "nystroem": [635, 977], "rbfsampler": 637, "skewedchi2sampl": 638, "kernelridg": 639, "ardregress": 640, "bayesianridg": 641, "elasticnetcv": 643, "gammaregressor": 644, "larscv": 647, "lassocv": 649, "lassolar": 650, "lassolarscv": 651, "lassolars": 652, "logisticregress": 654, "logisticregressioncv": 655, "multitaskelasticnet": 656, "multitaskelasticnetcv": 657, "multitasklasso": 658, "multitasklassocv": 659, "orthogonalmatchingpursuit": 660, "orthogonalmatchingpursuitcv": 661, "passiveaggressiveclassifi": 662, "passiveaggressiveregressor": 663, "poissonregressor": 665, "ransacregressor": 667, "ridgecv": 669, "ridgeclassifi": 670, "ridgeclassifiercv": 671, "sgdclassifi": 672, "sgdoneclasssvm": 673, "sgdregressor": 674, "theilsenregressor": 675, "enet_path": 677, "lars_path": 678, "lars_path_gram": 679, "lasso_path": 680, "orthogonal_mp": 681, "orthogonal_mp_gram": 682, "ridge_regress": 683, "locallylinearembed": 685, "md": [686, 982], "spectralembed": 687, "locally_linear_embed": 689, "smacof": 690, "spectral_embed": 691, "trustworthi": 692, "from_predict": [693, 696, 697, 698], "detcurvedisplai": 694, "distancemetr": 695, "predictionerrordisplai": 697, "accuracy_scor": 699, "adjusted_mutual_info_scor": 700, "adjusted_rand_scor": 701, "average_precision_scor": 703, "balanced_accuracy_scor": 704, "brier_score_loss": 705, "calinski_harabasz_scor": 706, "check_scor": 707, "class_likelihood_ratio": 708, "classification_report": 709, "contingency_matrix": 710, "pair_confusion_matrix": 711, "cohen_kappa_scor": 712, "completeness_scor": 713, "confusion_matrix": 714, "consensus_scor": 715, "coverage_error": 716, "d2_absolute_error_scor": 717, "d2_pinball_scor": 718, "d2_tweedie_scor": 719, "davies_bouldin_scor": 720, "dcg_score": 721, "det_curv": 722, "explained_variance_scor": 723, "f1_score": 724, "fbeta_scor": 725, "fowlkes_mallows_scor": 726, "get_scor": 727, "get_scorer_nam": 728, "hamming_loss": 729, "hinge_loss": 730, "homogeneity_completeness_v_measur": 731, "homogeneity_scor": 732, "jaccard_scor": 733, "label_ranking_average_precision_scor": 734, "label_ranking_loss": 735, "log_loss": 736, "make_scor": 737, "matthews_corrcoef": 738, "max_error": 739, "mean_absolute_error": 740, "mean_absolute_percentage_error": 741, "mean_gamma_devi": 742, "mean_pinball_loss": 743, "mean_poisson_devi": 744, "mean_squared_error": 745, "mean_squared_log_error": 746, "mean_tweedie_devi": 747, "median_absolute_error": 748, "multilabel_confusion_matrix": 749, "mutual_info_scor": 750, "ndcg_score": 751, "normalized_mutual_info_scor": 752, "additive_chi2_kernel": 753, "chi2_kernel": 754, "cosine_dist": 755, "cosine_similar": 756, "distance_metr": 757, "euclidean_dist": 758, "haversine_dist": 759, "kernel_metr": 760, "laplacian_kernel": 761, "linear_kernel": 762, "manhattan_dist": 763, "nan_euclidean_dist": 764, "paired_cosine_dist": 765, "paired_dist": 766, "paired_euclidean_dist": 767, "paired_manhattan_dist": 768, "pairwise_kernel": 769, "polynomial_kernel": 770, "rbf_kernel": 771, "sigmoid_kernel": 772, "pairwise_dist": 773, "pairwise_distances_argmin": 774, "pairwise_distances_argmin_min": 775, "pairwise_distances_chunk": 776, "precision_recall_curv": 777, "precision_recall_fscore_support": 778, "precision_scor": 779, "r2_score": 780, "rand_scor": 781, "recall_scor": 782, "roc_auc_scor": 783, "roc_curv": 784, "root_mean_squared_error": 785, "root_mean_squared_log_error": 786, "silhouette_sampl": 787, "silhouette_scor": 788, "top_k_accuracy_scor": 789, "v_measure_scor": 790, "zero_one_loss": 791, "bayesiangaussianmixtur": 792, "gaussianmixtur": 793, "groupkfold": 795, "groupshufflesplit": 796, "halvinggridsearchcv": 797, "halvingrandomsearchcv": 798, "kfold": 799, "learningcurvedisplai": 800, "leaveonegroupout": 801, "leaveoneout": 802, "leavepgroupsout": 803, "leavepout": 804, "parametergrid": 805, "parametersampl": 806, "predefinedsplit": 807, "randomizedsearchcv": 808, "repeatedkfold": 809, "repeatedstratifiedkfold": 810, "shufflesplit": 811, "stratifiedkfold": 813, "stratifiedshufflesplit": 814, "timeseriessplit": 815, "check_cv": 817, "cross_val_predict": 818, "learning_curv": 821, "permutation_test_scor": 822, "train_test_split": 823, "validation_curv": 824, "onevsoneclassifi": [825, 986], "onevsrestclassifi": [826, 986], "outputcodeclassifi": [827, 986], "classifierchain": [828, 986], "multioutputclassifi": [829, 986], "multioutputregressor": [830, 986], "regressorchain": [831, 986], "bernoullinb": 832, "categoricalnb": 833, "complementnb": 834, "gaussiannb": 835, "multinomialnb": 836, "balltre": [837, 988], "kdtree": [838, 988], "kneighborsclassifi": 839, "kneighborsregressor": 840, "kneighborstransform": 841, "kerneldens": 842, "localoutlierfactor": 843, "nearestcentroid": 844, "nearestneighbor": 845, "neighborhoodcomponentsanalysi": 846, "radiusneighborsclassifi": 847, "radiusneighborsregressor": 848, "radiusneighborstransform": 849, "kneighbors_graph": 850, "radius_neighbors_graph": 851, "sort_graph_by_row_valu": 852, "bernoullirbm": 853, "mlpregressor": 855, "make_pipelin": 858, "make_union": 859, "binar": [860, 880, 995, 996], "functiontransform": 861, "kernelcenter": 863, "labelbinar": [864, 996], "labelencod": 865, "multilabelbinar": [868, 996], "polynomialfeatur": 872, "splinetransform": 876, "add_dummy_featur": 879, "label_binar": 881, "maxabs_scal": 882, "minmax_scal": 883, "power_transform": 885, "quantile_transform": 886, "robust_scal": 887, "gaussianrandomproject": 889, "sparserandomproject": 890, "johnson_lindenstrauss_min_dim": 891, "labelpropag": 892, "labelspread": 893, "selftrainingclassifi": 894, "set_config": 895, "show_vers": 896, "linearsvr": 898, "nusvc": 899, "nusvr": 900, "oneclasssvm": 901, "l1_min_c": 904, "decisiontreeclassifi": 905, "extratreeclassifi": 907, "extratreeregressor": 908, "export_graphviz": 909, "export_text": 910, "plot_tre": 911, "_safe_index": 913, "arrayfunc": 914, "min_po": 914, "as_float_arrai": 915, "assert_all_finit": 916, "check_x_i": 917, "check_arrai": 918, "check_consistent_length": 919, "check_random_st": 920, "check_scalar": 921, "class_weight": [922, 923], "compute_class_weight": 922, "compute_sample_weight": 923, "all_displai": 925, "all_estim": 926, "all_funct": 927, "estimator_check": [928, 929], "check_estim": 928, "parametrize_with_check": 929, "estimator_html_repr": 930, "extmath": [931, 932, 933, 934, 935, 936], "fast_logdet": 932, "randomized_range_find": 933, "randomized_svd": 934, "safe_sparse_dot": 935, "weighted_mod": 936, "gen_batch": 937, "gen_even_slic": 938, "single_source_shortest_path_length": 939, "metadata_rout": [941, 942, 943, 944, 945], "metadatarequest": 941, "metadatarout": 942, "methodmap": 943, "get_routing_for_object": 944, "process_rout": 945, "metaestim": 946, "available_if": 946, "is_multilabel": 947, "type_of_target": 948, "unique_label": 949, "murmurhash3_32": 950, "delai": 952, "parallel_backend": 953, "sample_without_replac": 954, "register_parallel_backend": 955, "resampl": 956, "safe_mask": 957, "safe_sqr": 958, "sparsefunc": [960, 961, 962, 963, 964, 965, 966, 1036], "incr_mean_variance_axi": 960, "inplace_column_scal": 961, "inplace_csr_column_scal": 962, "inplace_row_scal": 963, "inplace_swap_column": 964, "inplace_swap_row": 965, "mean_variance_axi": 966, "sparsefuncs_fast": [967, 968], "inplace_csr_row_normalize_l1": 967, "inplace_csr_row_normalize_l2": 968, "check_memori": 970, "check_symmetr": 971, "column_or_1d": 972, "has_fit_paramet": 973, "exhaust": 974, "min_resourc": 974, "aggress": [974, 981], "analyz": 974, "cv_results_": 974, "brute": [974, 988], "forc": [974, 988], "keep": 975, "mark": 975, "nan": 975, "chi": [977, 983], "skew": 977, "tensor": 977, "sketch": 977, "detail": [977, 999, 1000], "omp": 981, "passiv": 981, "scenario": 981, "trade": 981, "off": 981, "which": 981, "consensu": 981, "median": [981, 985], "huber": 981, "extend": 981, "introduct": [982, 1011], "modifi": 982, "hessian": 982, "eigenmap": 982, "tangent": 982, "align": 982, "cosin": 983, "laplacian": 983, "pro": 984, "con": 984, "rule": 985, "cohen": 985, "kappa": 985, "ham": 985, "jaccard": 985, "hing": 985, "matthew": 985, "zero": 985, "brier": 985, "discount": 985, "cumul": 985, "gain": 985, "r\u00b2": 985, "absolut": 985, "logarithm": 985, "percentag": 985, "explain": 985, "pinbal": 985, "d\u00b2": 985, "complement": 987, "bernoulli": [987, 990], "unsupervis": [988, 990, 1002, 1019, 1021], "find": 988, "ball": 988, "leaf_siz": 988, "shrunken": 988, "warm_start": 989, "parametr": 990, "up": 991, "ellipt": 991, "envelop": 991, "isol": 991, "outlin": 993, "mislead": 993, "strongli": 993, "rang": 995, "whiten": 995, "bin": 995, "lemma": 997, "unlabel": 998, "entri": 998, "id3": 1001, "c4": 1001, "5": [1001, 1027], "c5": 1001, "cart": 1001, "welcom": 1003, "talk": 1004, "scientif": [1004, 1014], "framework": 1005, "domain": 1005, "translat": 1005, "roadmap": 1006, "statement": 1006, "2018": 1006, "architectur": 1006, "goal": 1006, "subpackag": 1006, "mail": 1008, "user": [1008, 1022], "gitter": 1008, "who": 1009, "j": 1009, "morgan": 1009, "spotifi": 1009, "inria": 1009, "betawork": 1009, "hug": 1009, "evernot": 1009, "t\u00e9l\u00e9com": 1009, "paristech": 1009, "book": 1009, "com": 1009, "aweb": 1009, "yhat": 1009, "rangespan": 1009, "birchbox": 1009, "bestofmedia": 1009, "phimeca": 1009, "howaboutw": 1009, "peerindex": 1009, "datarobot": 1009, "okcupid": 1009, "love": 1009, "publica": 1009, "machinali": 1009, "solido": 1009, "infonea": 1009, "dataiku": 1009, "otto": 1009, "zopa": 1009, "mar": 1009, "bnp": 1009, "pariba": 1009, "cardif": 1009, "section": 1011, "cast": 1011, "updat": [1011, 1037], "right": 1013, "put": 1016, "open": 1016, "ship": 1017, "would": 1017, "high": 1018, "solv": [1018, 1019], "vocabulari": 1018, "curs": 1018, "iris": 1018, "same": 1018, "seek": 1019, "constrain": 1019, "inverse_transform": 1019, "setup": 1020, "token": 1020, "occurr": 1020, "languag": 1020, "identif": 1020, "sentiment": 1020, "movi": 1020, "cli": 1020, "where": 1020, "12": 1027, "changelog": [1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "11": 1027, "9": 1027, "8": 1027, "7": 1027, "6": [1027, 1033], "modul": [1027, 1035, 1036, 1042, 1043, 1044], "misc": 1027, "4": [1027, 1035, 1044], "earlier": 1027, "13": 1028, "14": 1029, "15": 1030, "16": 1031, "17": 1032, "18": 1033, "last": 1033, "19": 1034, "21": 1036, "legend": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "post1": 1037, "websit": 1037, "clear": 1037, "public": 1037, "futurewarn": 1037, "enforc": [1038, 1040]}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1027, "authors"], [1027, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [393, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [166, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [224, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [81, "references"], [114, "references"], [175, "references"], [183, "references"], [187, null], [260, null], [278, "references"], [296, "references"], [373, null], [373, null], [373, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [413, null], [415, "references"], [975, "references"], [975, null], [992, null], [995, null], [995, null], [998, null], [998, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [125, "load-the-data"], [286, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [188, "conclusion"], [278, "conclusion"], [286, "conclusion"], [312, "conclusion"], [340, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [78, "plot-results"], [96, "plot-results"], [97, "plot-results"], [117, "plot-results"], [290, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [364, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [336, "visualization"], [404, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [68, "computation-times"], [76, "computation-times"], [83, "computation-times"], [87, "computation-times"], [93, "computation-times"], [107, "computation-times"], [135, "computation-times"], [141, "computation-times"], [149, "computation-times"], [161, "computation-times"], [165, "computation-times"], [173, "computation-times"], [176, "computation-times"], [218, "computation-times"], [226, "computation-times"], [243, "computation-times"], [252, "computation-times"], [276, "computation-times"], [279, "computation-times"], [282, "computation-times"], [297, "computation-times"], [303, "computation-times"], [313, "computation-times"], [322, "computation-times"], [330, "computation-times"], [347, "computation-times"], [352, "computation-times"], [359, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [166, "biclustering"], [374, "biclustering"], [402, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [38, "generate-sample-data"], [55, "generate-sample-data"], [63, "generate-sample-data"], [78, "generate-sample-data"], [96, "generate-sample-data"], [97, "generate-sample-data"], [144, "generate-sample-data"], [234, "generate-sample-data"], [273, "generate-sample-data"], [295, "generate-sample-data"], [343, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [166, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [178, "generate-synthetic-dataset"], [178, "id1"], [183, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [188, "dataset"], [266, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [403, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [987, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [351, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [159, "classification"], [166, "classification"], [412, "classification"], [412, "id10"], [981, "classification"], [988, "id4"], [989, "classification"], [999, "classification"], [1000, "classification"], [1001, "classification"], [1018, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[34, "data-generation"], [49, "data-generation"], [57, "data-generation"], [127, "data-generation"], [147, "data-generation"], [157, "data-generation"], [250, "data-generation"], [324, "data-generation"], [344, "data-generation"]], "Plotting Functions": [[34, "plotting-functions"]], "Comparison of LDA and QDA": [[34, "comparison-of-lda-and-qda"]], "Clustering": [[36, "clustering"], [166, "clustering"], [405, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [63, "plot-result"], [67, "plot-result"], [67, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [67, "generate-data"], [80, "generate-data"], [193, "generate-data"], [302, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [67, "compute-clustering"], [67, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [82, "plot-the-results"], [134, "plot-the-results"], [164, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [1002, "feature-agglomeration"], [1019, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[55, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[55, "scale-invariance"]], "Multi-Scale Clustering": [[55, "multi-scale-clustering"]], "Hyperparameter Robustness": [[55, "hyperparameter-robustness"]], "min_cluster_size": [[55, "min-cluster-size"]], "min_samples": [[55, "min-samples"]], "dbscan_clustering": [[55, "dbscan-clustering"]], "Inductive Clustering": [[56, "inductive-clustering"]], "Demonstration of k-means assumptions": [[57, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[57, "fit-models-and-plot-results"]], "Possible solutions": [[57, "possible-solutions"]], "Final remarks": [[57, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[58, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[58, "load-the-dataset"]], "Define our evaluation benchmark": [[58, "define-our-evaluation-benchmark"]], "Run the benchmark": [[58, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[58, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[59, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[60, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[61, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[62, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[63, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[63, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[64, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[64, "generate-the-data"], [66, "generate-the-data"], [82, "generate-the-data"]], "Compute clustering with KMeans": [[64, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[64, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[64, "establishing-parity-between-clusters"]], "Plotting the results": [[64, "plotting-the-results"], [112, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[65, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[66, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[66, "plotting-four-circles"]], "Plotting two circles": [[66, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[67, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[67, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[69, "pipelines-and-composite-estimators"], [166, "pipelines-and-composite-estimators"], [406, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[70, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[70, "newsgroups-dataset"]], "Creating transformers": [[70, "creating-transformers"]], "Classification pipeline": [[70, "classification-pipeline"]], "Column Transformer with Mixed Types": [[71, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[72, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[72, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[72, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[73, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[74, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[75, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[75, "synthetic-example"]], "Real-world data set": [[75, "real-world-data-set"]], "Covariance estimation": [[77, "covariance-estimation"], [166, "covariance-estimation"], [407, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[78, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[78, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[78, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[79, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[80, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[80, null], [111, null], [171, null], [265, null], [266, null], [372, null], [373, null], [402, null], [402, null], [402, null], [403, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [407, null], [407, null], [407, null], [407, null], [409, null], [409, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [413, null], [413, null], [974, null], [974, null], [977, null], [978, null], [979, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [983, null], [983, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [986, null], [986, null], [986, null], [987, null], [987, null], [987, null], [988, null], [988, null], [988, null], [989, null], [990, null], [991, null], [991, null], [991, null], [991, null], [993, null], [995, null], [995, null], [997, null], [997, null], [997, null], [999, null], [999, null], [1000, null]], "Comparison of results": [[80, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[81, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[81, "minimum-covariance-determinant-estimator"]], "Evaluation": [[81, "evaluation"], [302, "evaluation"]], "Sparse inverse covariance estimation": [[82, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[82, "estimate-the-covariance"]], "Cross decomposition": [[84, "cross-decomposition"], [166, "cross-decomposition"], [408, "cross-decomposition"]], "Compare cross decomposition methods": [[85, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[85, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[85, "canonical-symmetric-pls"]], "Transform data": [[85, "transform-data"]], "Scatter plot of scores": [[85, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[85, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[85, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[85, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[86, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[86, "the-data"]], "Projection on one component and predictive power": [[86, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[88, "dataset-examples"], [166, "dataset-examples"]], "The Digit Dataset": [[89, "the-digit-dataset"]], "The Iris Dataset": [[90, "the-iris-dataset"]], "Loading the iris dataset": [[90, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[90, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[90, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[91, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[92, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[94, "decomposition"], [95, "decomposition"], [166, "decomposition"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [220, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[99, "incremental-pca"], [410, "incremental-pca"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Create the data": [[101, "create-the-data"], [103, "create-the-data"]], "Plot the figures": [[101, "plot-the-figures"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [410, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[108, "developing-estimators"], [166, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[109, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[109, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[110, "ensemble-methods"], [166, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[111, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[111, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[111, "training-the-adaboostclassifier"]], "Analysis": [[111, "analysis"]], "Convergence of the AdaBoostClassifier": [[111, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[111, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[112, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[112, "preparing-the-data"], [175, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[112, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[113, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[114, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[115, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[116, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[117, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[117, "load-dataset"]], "Compute score and computation times": [[117, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[118, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[118, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[118, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[118, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[119, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[119, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[119, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[120, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[121, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[121, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[121, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[121, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[121, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[121, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[121, "model-comparison"]], "Limiting the number of splits": [[121, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[122, "early-stopping-in-gradient-boosting"]], "Compare scores with and without early stopping": [[122, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[122, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[123, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[124, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[124, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[124, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[124, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[124, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[125, "gradient-boosting-regression"]], "Data preprocessing": [[125, "data-preprocessing"]], "Fit regression model": [[125, "fit-regression-model"], [295, "fit-regression-model"], [343, "fit-regression-model"]], "Plot training deviance": [[125, "plot-training-deviance"]], "Plot feature importance": [[125, "plot-feature-importance"]], "Gradient Boosting regularization": [[126, "gradient-boosting-regularization"]], "IsolationForest example": [[127, "isolationforest-example"]], "Training of the model": [[127, "training-of-the-model"]], "Plot discrete decision boundary": [[127, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[127, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[128, "monotonic-constraints"], [412, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[128, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[129, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[130, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[131, "combine-predictors-using-stacking"]], "Download the dataset": [[131, "download-the-dataset"]], "Make pipeline to preprocess the data": [[131, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[131, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[131, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[132, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[133, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[134, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[134, "training-classifiers"]], "Making predictions": [[134, "making-predictions"]], "Tutorial exercises": [[136, "tutorial-exercises"], [166, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[137, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[137, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[137, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[137, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[138, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[139, "digits-classification-exercise"]], "SVM Exercise": [[140, "svm-exercise"]], "Feature Selection": [[142, "feature-selection"], [166, "feature-selection"]], "Comparison of F-test and mutual information": [[143, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[144, "univariate-feature-selection"]], "Univariate feature selection": [[144, "id1"], [414, "univariate-feature-selection"]], "Compare with SVMs": [[144, "compare-with-svms"]], "Pipeline ANOVA SVM": [[145, "pipeline-anova-svm"]], "Recursive feature elimination": [[146, "recursive-feature-elimination"], [414, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[147, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[147, "model-training-and-selection"], [250, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[147, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[148, "model-based-and-sequential-feature-selection"]], "Loading the data": [[148, "loading-the-data"]], "Feature importance from coefficients": [[148, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[148, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[148, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[148, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[150, "gaussian-process-for-machine-learning"], [166, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[151, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[151, "generating-a-dataset"]], "Limitations of a simple linear model": [[151, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[151, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[151, "kernel-ridge"]], "Gaussian process regression": [[151, "gaussian-process-regression"]], "Final conclusion": [[151, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[152, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[153, "gaussian-process-classification-gpc-on-iris-dataset"], [415, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[154, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[155, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[156, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[156, "build-the-dataset"]], "Design the proper kernel": [[156, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[156, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[156, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[157, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[157, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[158, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[158, "dataset-generation"], [201, "dataset-generation"]], "Example with noise-free target": [[158, "example-with-noise-free-target"]], "Example with noisy targets": [[158, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[159, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[159, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[159, "regression"], [412, "regression"], [412, "id9"], [981, "regression"], [989, "regression"], [999, "regression"], [1000, "regression"], [1001, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[160, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[160, "helper-function"]], "Dataset and Gaussian process generation": [[160, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[160, "kernel-cookbook"]], "Radial Basis Function kernel": [[160, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[160, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[160, "exp-sine-squared-kernel"], [415, "exp-sine-squared-kernel"]], "Dot-product kernel": [[160, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[160, "matern-kernel"], [415, "matern-kernel"]], "Missing Value Imputation": [[162, "missing-value-imputation"], [166, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[163, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[164, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[164, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[164, "impute-the-missing-data-and-score"]], "Missing information": [[164, "missing-information"]], "Estimate the score": [[164, "estimate-the-score"]], "Replace missing values by 0": [[164, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[164, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[164, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[164, "iterative-imputation-of-the-missing-values"]], "Examples": [[166, "examples"], [366, "examples"], [373, null], [409, null], [409, null], [414, null], [414, null], [415, null], [981, null], [981, null], [981, null], [998, null], [998, null], [1002, null], [1002, null], [1002, null], [1027, "examples"]], "Release Highlights": [[166, "release-highlights"], [314, "release-highlights"]], "Decision Trees": [[166, "decision-trees"], [353, "decision-trees"], [1001, "decision-trees"]], "Gaussian Mixture Models": [[166, "gaussian-mixture-models"], [244, "gaussian-mixture-models"]], "Generalized Linear Models": [[166, "generalized-linear-models"], [177, "generalized-linear-models"], [981, "generalized-linear-models"]], "Inspection": [[166, "inspection"], [167, "inspection"], [394, "inspection"]], "Kernel Approximation": [[166, "kernel-approximation"], [174, "kernel-approximation"], [977, "kernel-approximation"]], "Manifold learning": [[166, "manifold-learning"], [219, "manifold-learning"], [982, "manifold-learning"]], "Miscellaneous": [[166, "miscellaneous"], [227, "miscellaneous"], [404, "miscellaneous"], [1035, "miscellaneous"], [1035, "id40"], [1036, "miscellaneous"], [1037, "miscellaneous"], [1038, "miscellaneous"], [1038, "id13"], [1039, "miscellaneous"], [1040, "miscellaneous"], [1043, "miscellaneous"]], "Model Selection": [[166, "model-selection"], [253, "model-selection"]], "Multiclass methods": [[166, "multiclass-methods"], [277, "multiclass-methods"]], "Multioutput methods": [[166, "multioutput-methods"], [280, "multioutput-methods"]], "Nearest Neighbors": [[166, "nearest-neighbors"], [284, "nearest-neighbors"], [988, "nearest-neighbors"]], "Neural Networks": [[166, "neural-networks"], [298, "neural-networks"]], "Preprocessing": [[166, "preprocessing"], [304, "preprocessing"]], "Semi Supervised Classification": [[166, "semi-supervised-classification"], [323, "semi-supervised-classification"]], "Support Vector Machines": [[166, "support-vector-machines"], [331, "support-vector-machines"], [1000, "support-vector-machines"]], "Working with text documents": [[166, "working-with-text-documents"], [348, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[168, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[168, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[168, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[168, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[168, "income-prediction-with-partial-observations"]], "Lessons learned": [[168, "lessons-learned"], [169, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[169, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[169, "the-dataset-wages"]], "The machine-learning pipeline": [[169, "the-machine-learning-pipeline"]], "Processing the dataset": [[169, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[169, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[169, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[169, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[169, "preprocessing-numerical-variables"]], "Linear models with regularization": [[169, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[169, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[169, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[170, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[170, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[170, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[170, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[170, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[170, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[170, "multi-layer-perceptron"]], "Gradient boosting": [[170, "gradient-boosting"]], "Analysis of the plots": [[170, "analysis-of-the-plots"]], "ICE vs. PDP": [[170, "ice-vs-pdp"]], "2D interaction plots": [[170, "d-interaction-plots"]], "3D representation": [[170, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[171, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[171, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[171, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[171, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[172, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[172, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[172, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[175, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[175, "partitioning-the-data"]], "Feature normalization": [[175, "feature-normalization"]], "Establishing a baseline model": [[175, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[175, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[175, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[175, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[178, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[178, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[178, "fit-the-regressors"], [178, "id2"]], "Plot the true and estimated coefficients": [[178, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[178, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[178, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[178, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[179, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[179, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[179, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[179, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[180, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[181, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[182, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[183, "l1-based-models-for-sparse-signals"]], "Lasso": [[183, "lasso"], [981, "lasso"]], "Automatic Relevance Determination (ARD)": [[183, "automatic-relevance-determination-ard"]], "ElasticNet": [[183, "elasticnet"]], "Plot and analysis of the results": [[183, "plot-and-analysis-of-the-results"]], "Conclusions": [[183, "conclusions"]], "Lasso and Elastic Net": [[184, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[185, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[185, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[185, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[186, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[187, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[188, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[188, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[188, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[188, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[188, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[188, "summary-of-cross-validation-approach"]], "Logistic function": [[189, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[190, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[191, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[192, "regularization-path-of-l1-logistic-regression"]], "Load data": [[192, "load-data"]], "Compute regularization path": [[192, "compute-regularization-path"]], "Plot regularization path": [[192, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[193, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[193, "fit-models"]], "Plot support and time series": [[193, "plot-support-and-time-series"]], "Non-negative least squares": [[194, "non-negative-least-squares"]], "Linear Regression Example": [[195, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[196, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[197, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[198, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[199, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[199, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[199, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[199, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[199, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[199, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[199, "evaluation-of-the-ranking-power"]], "Main takeaways": [[199, "main-takeaways"]], "Polynomial and Spline interpolation": [[200, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[200, "periodic-splines"]], "Quantile regression": [[201, "quantile-regression"]], "Fitting a QuantileRegressor": [[201, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[201, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[202, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[203, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[203, "purpose-of-this-example"]], "Creating a non-noisy data set": [[203, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[203, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[203, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[203, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[204, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[204, "compute-paths"]], "Display results": [[204, "display-results"]], "Robust linear estimator fitting": [[205, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[206, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[207, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[208, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[209, "sgd-convex-loss-functions"]], "SGD: Penalties": [[210, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[211, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[212, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[213, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[214, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[215, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[216, "theil-sen-regression"]], "Outliers only in the y direction": [[216, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[216, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[217, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[217, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[217, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[217, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[217, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[220, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[220, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[220, "locally-linear-embeddings"]], "Isomap Embedding": [[220, "isomap-embedding"]], "Multidimensional scaling": [[220, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[220, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[220, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[221, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[221, "load-digits-dataset"]], "Helper function to plot embedding": [[221, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[221, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[222, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[223, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[224, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[224, "swiss-roll"]], "Swiss-Hole": [[224, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[225, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[228, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[229, "visualizations-with-display-objects"]], "Load Data and train model": [[229, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[229, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[229, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[229, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[229, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[230, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[230, "compact-text-representation"]], "Rich HTML representation": [[230, "rich-html-representation"]], "Isotonic Regression": [[231, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[232, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[232, "theoretical-bounds"]], "Empirical validation": [[232, "empirical-validation"]], "Remarks": [[232, "remarks"]], "Explicit feature map approximation for RBF kernels": [[233, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[233, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[233, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[233, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[234, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[234, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[234, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[234, "look-at-the-results"], [343, "look-at-the-results"]], "Visualize training and prediction times": [[234, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[234, "visualize-the-learning-curves"]], "Metadata Routing": [[235, "metadata-routing"], [321, "metadata-routing"], [392, "metadata-routing"], [396, "id1"], [1044, "metadata-routing"]], "Estimators": [[235, "estimators"], [360, "estimators"], [360, "id2"], [380, "estimators"], [401, "estimators"], [404, "estimators"]], "Router and Consumer": [[235, "router-and-consumer"]], "Simple Pipeline": [[235, "simple-pipeline"]], "Deprecation / Default Value Change": [[235, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[235, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[236, "multilabel-classification"], [986, "multilabel-classification"]], "Face completion with a multi-output estimators": [[237, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[238, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[238, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[238, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[238, "forest-covertypes-dataset"]], "Ames Housing dataset": [[238, "ames-housing-dataset"]], "Cardiotocography dataset": [[238, "cardiotocography-dataset"]], "Plot and interpret results": [[238, "plot-and-interpret-results"]], "Ablation study": [[238, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[239, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[239, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[239, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[239, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[239, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[240, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[240, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[240, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[240, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[240, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[240, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[241, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[241, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[241, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[241, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[242, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[245, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[246, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[247, "gmm-covariances"]], "GMM Initialization Methods": [[248, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[249, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[250, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[250, "plot-the-bic-scores"]], "Plot the best model": [[250, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[251, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[254, "confusion-matrix"], [985, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[255, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[255, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[255, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[255, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[256, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[257, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[257, "generate-synthetic-data"]], "Define the classifiers": [[257, "define-the-classifiers"]], "Plot ROC and DET curves": [[257, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[258, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[258, "the-dataset"]], "Define our grid-search strategy": [[258, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[258, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[259, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[260, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[260, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[260, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[260, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[260, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[260, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[260, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[261, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[261, "data-loading"]], "Pipeline with hyperparameter tuning": [[261, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[262, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[262, "learning-curve"]], "Complexity analysis": [[262, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[263, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[263, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[263, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[263, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[264, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[264, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[264, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[265, "nested-versus-non-nested-cross-validation"]], "See Also:": [[265, null], [406, null]], "Test with permutations the significance of a classification score": [[266, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[266, "permutation-test-score"], [409, "permutation-test-score"]], "Original data": [[266, "original-data"], [305, "original-data"]], "Random data": [[266, "random-data"]], "Precision-Recall": [[267, "precision-recall"]], "In binary classification settings": [[267, "in-binary-classification-settings"]], "Dataset and model": [[267, "dataset-and-model"]], "Plot the Precision-Recall curve": [[267, "plot-the-precision-recall-curve"]], "In multi-label settings": [[267, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[267, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[267, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[267, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[267, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[268, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[269, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[269, "load-and-prepare-data"], [270, "load-and-prepare-data"], [310, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[269, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[269, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[269, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[269, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[269, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[269, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[269, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[269, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[270, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[270, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[271, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[272, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[272, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[273, "train-error-vs-test-error"]], "Compute train and test errors": [[273, "compute-train-and-test-errors"]], "Plot results functions": [[273, "plot-results-functions"]], "Underfitting vs. Overfitting": [[274, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[275, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[278, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[278, "the-yeast-uci-dataset"]], "Strategies comparison": [[278, "strategies-comparison"]], "The importance of hyperparameters search": [[278, "the-importance-of-hyperparameters-search"]], "Classifier Chain": [[281, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[283, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[285, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[286, "nearest-neighbors-classification"], [988, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[286, "k-nearest-neighbors-classifier"]], "Decision boundary": [[286, "decision-boundary"]], "Kernel Density Estimation": [[287, "kernel-density-estimation"], [411, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[288, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[289, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[290, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[290, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[290, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[291, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[292, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[293, "neighborhood-components-analysis-illustration"]], "Original points": [[293, "original-points"]], "Learning an embedding": [[293, "learning-an-embedding"]], "Nearest Centroid Classification": [[294, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[295, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[296, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[299, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[300, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[301, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[302, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[302, "models-definition"]], "Training": [[302, "training"], [988, "training"]], "Plotting": [[302, "plotting"], [404, "plotting"], [404, "id7"], [404, "id9"]], "Compare the effect of different scalers on data with outliers": [[305, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[305, "standardscaler"]], "MinMaxScaler": [[305, "minmaxscaler"]], "MaxAbsScaler": [[305, "maxabsscaler"]], "RobustScaler": [[305, "robustscaler"]], "PowerTransformer": [[305, "powertransformer"]], "QuantileTransformer (uniform output)": [[305, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[305, "quantiletransformer-gaussian-output"]], "Normalizer": [[305, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[306, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[307, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[308, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[309, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[310, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[310, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[310, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[310, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[311, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[311, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[311, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[311, "native-categorical-feature-support"]], "Plotting the Results": [[311, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[312, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[312, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[312, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[315, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[315, "new-plotting-api"]], "Stacking Classifier and Regressor": [[315, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[315, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[315, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[315, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[315, "knn-based-imputation"]], "Tree pruning": [[315, "tree-pruning"]], "Retrieve dataframes from OpenML": [[315, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[315, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[315, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[316, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[316, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[316, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[316, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[316, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[316, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[317, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[317, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[317, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[317, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[317, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[317, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[317, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[317, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[317, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[317, "new-documentation-improvements"], [318, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[318, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[318, "keyword-and-positional-arguments"]], "Spline Transformers": [[318, "spline-transformers"]], "Quantile Regressor": [[318, "quantile-regressor"]], "Feature Names Support": [[318, "feature-names-support"]], "A more flexible plotting API": [[318, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[318, "online-one-class-svm"], [999, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[318, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[319, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[319, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[319, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[319, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[319, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[319, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[319, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[320, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[320, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[320, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[320, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[320, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[320, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[320, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[321, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[321, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[321, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[321, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[321, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[321, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[321, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Label Propagation digits: Demonstrating performance": [[324, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[324, "semi-supervised-learning"], [998, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[324, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[325, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[326, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[327, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[328, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[329, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[332, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[333, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[334, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[335, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[336, "rbf-svm-parameters"]], "Load and prepare data set": [[336, "load-and-prepare-data-set"]], "Train classifiers": [[336, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[337, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[338, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[339, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[339, "load-some-data-to-play-with"]], "Create the pipeline": [[339, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[339, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[340, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[340, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[340, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[340, "linear-kernel"], [983, "linear-kernel"], [1018, "linear-kernel"]], "Polynomial kernel": [[340, "polynomial-kernel"], [983, "polynomial-kernel"], [1018, "polynomial-kernel"]], "RBF kernel": [[340, "rbf-kernel"], [983, "rbf-kernel"]], "Sigmoid kernel": [[340, "sigmoid-kernel"], [983, "sigmoid-kernel"], [1018, "sigmoid-kernel"]], "SVM Margins Example": [[341, "svm-margins-example"]], "Non-linear SVM": [[342, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[343, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[344, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[344, "l1-penalty-case"]], "L2-penalty case": [[344, "l2-penalty-case"]], "SVM Tie Breaking Example": [[345, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[346, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[349, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[349, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[349, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[349, "model-without-metadata-stripping"]], "Model with metadata stripping": [[349, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[349, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[349, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[350, "clustering-text-documents-using-k-means"]], "Loading text data": [[350, "loading-text-data"]], "Quantifying the quality of clustering results": [[350, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[350, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[350, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[350, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[350, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[350, "top-terms-per-cluster"]], "HashingVectorizer": [[350, "hashingvectorizer"]], "Clustering evaluation summary": [[350, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[351, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[351, "load-data"]], "Define preprocessing functions": [[351, "define-preprocessing-functions"]], "DictVectorizer": [[351, "dictvectorizer"]], "FeatureHasher": [[351, "featurehasher"]], "Comparison with special purpose text vectorizers": [[351, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[351, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[354, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[354, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[354, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[355, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[356, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[357, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[358, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[358, "train-tree-classifier"]], "Tree structure": [[358, "tree-structure"]], "What is the values array used here?": [[358, "what-is-the-values-array-used-here"]], "Decision path": [[358, "decision-path"]], "Common pitfalls and recommended practices": [[360, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[360, "inconsistent-preprocessing"]], "Data leakage": [[360, "data-leakage"]], "Data leakage during pre-processing": [[360, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[360, "how-to-avoid-data-leakage"]], "Controlling randomness": [[360, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[360, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[360, "cv-splitters"], [360, "id3"]], "Common pitfalls and subtleties": [[360, "common-pitfalls-and-subtleties"]], "General recommendations": [[360, "general-recommendations"]], "Getting reproducible results across multiple executions": [[360, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[360, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[363, "computing-with-scikit-learn"]], "Computational Performance": [[364, "computational-performance"]], "Bulk versus Atomic mode": [[364, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[364, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[364, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[364, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[364, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[364, "feature-extraction-latency"]], "Prediction Throughput": [[364, "prediction-throughput"]], "Tips and Tricks": [[364, "tips-and-tricks"]], "Linear algebra libraries": [[364, "linear-algebra-libraries"]], "Limiting Working Memory": [[364, "limiting-working-memory"]], "Model Compression": [[364, "model-compression"]], "Model Reshaping": [[364, "model-reshaping"]], "Links": [[364, "links"]], "Parallelism, resource management, and configuration": [[365, "parallelism-resource-management-and-configuration"]], "Parallelism": [[365, "parallelism"], [974, "parallelism"]], "Higher-level parallelism with joblib": [[365, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[365, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[365, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[365, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[365, "configuration-switches"]], "Python API": [[365, "python-api"]], "Environment variables": [[365, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[365, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[365, "sklearn-working-memory"]], "SKLEARN_SEED": [[365, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[365, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[365, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[365, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[365, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[365, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[365, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[366, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[366, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[366, "streaming-instances"]], "Extracting features": [[366, "extracting-features"]], "Incremental learning": [[366, "incremental-learning"]], "Notes": [[366, "notes"]], "Table Of Contents": [[367, "table-of-contents"]], "Dataset transformations": [[370, "dataset-transformations"]], "Dataset loading utilities": [[371, "dataset-loading-utilities"], [383, "dataset-loading-utilities"]], "Loading other datasets": [[372, "loading-other-datasets"]], "Sample images": [[372, "sample-images"]], "Examples:": [[372, null], [373, null], [394, null], [402, null], [402, null], [403, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [405, null], [406, null], [406, null], [406, null], [406, null], [406, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [408, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [410, null], [411, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [414, null], [414, null], [414, null], [414, null], [974, null], [974, null], [974, null], [977, null], [977, null], [979, null], [979, null], [979, null], [980, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [981, null], [982, null], [984, null], [984, null], [984, null], [984, null], [985, null], [985, null], [985, null], [985, null], [985, null], [986, null], [988, null], [988, null], [988, null], [988, null], [988, null], [989, null], [989, null], [990, null], [991, null], [991, null], [991, null], [991, null], [991, null], [991, null], [992, null], [993, null], [995, null], [995, null], [995, null], [999, null], [999, null], [1000, null], [1000, null], [1000, null], [1000, null], [1000, null], [1000, null], [1001, null], [1001, null], [1001, null], [1001, null], [1024, null]], "Datasets in svmlight / libsvm format": [[372, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[372, null]], "Downloading datasets from the openml.org repository": [[372, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[372, "dataset-versions"]], "ARFF parser": [[372, "arff-parser"]], "Loading from external datasets": [[372, "loading-from-external-datasets"], [1011, null]], "Real world datasets": [[373, "real-world-datasets"]], "The Olivetti faces dataset": [[373, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[373, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[373, null]], "Recommendation": [[373, null]], "The Labeled Faces in the Wild face recognition dataset": [[373, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[373, "forest-covertypes"]], "RCV1 dataset": [[373, "rcv1-dataset"]], "Kddcup 99 dataset": [[373, "kddcup-99-dataset"]], "California Housing dataset": [[373, "california-housing-dataset"]], "Generated datasets": [[374, "generated-datasets"]], "Generators for classification and clustering": [[374, "generators-for-classification-and-clustering"]], "Single label": [[374, "single-label"]], "Multilabel": [[374, "multilabel"]], "Generators for regression": [[374, "generators-for-regression"]], "Generators for manifold learning": [[374, "generators-for-manifold-learning"]], "Generators for decomposition": [[374, "generators-for-decomposition"]], "Toy datasets": [[375, "toy-datasets"]], "Iris plants dataset": [[375, "iris-plants-dataset"]], "Diabetes dataset": [[375, "diabetes-dataset"], [1018, null]], "Optical recognition of handwritten digits dataset": [[375, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[375, "linnerrud-dataset"]], "Wine recognition dataset": [[375, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[375, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[376, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[376, "installing-nightly-builds"]], "Building from source": [[376, "building-from-source"]], "Dependencies": [[376, "dependencies"]], "Runtime dependencies": [[376, "runtime-dependencies"]], "Build dependencies": [[376, "build-dependencies"]], "Test dependencies": [[376, "test-dependencies"]], "Building a specific version from a tag": [[376, "building-a-specific-version-from-a-tag"]], "Editable mode": [[376, "editable-mode"]], "Platform-specific instructions": [[376, "platform-specific-instructions"]], "Windows": [[376, "windows"]], "macOS": [[376, "macos"]], "macOS compilers from conda-forge": [[376, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[376, "macos-compilers-from-homebrew"]], "Linux": [[376, "linux"]], "Linux compilers from the system": [[376, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[376, "linux-compilers-from-conda-forge"]], "FreeBSD": [[376, "freebsd"]], "Alternative compilers": [[376, "alternative-compilers"]], "Parallel builds": [[376, "parallel-builds"]], "Bug triaging and issue curation": [[377, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[377, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[377, null]], "Working on PRs to help review": [[377, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[377, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[377, null]], "A typical workflow for triaging issues": [[377, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[378, "contributing"], [390, "contributing"]], "Our community, our values": [[378, null]], "Ways to contribute": [[378, "ways-to-contribute"]], "Contributing to related projects": [[378, null]], "Submitting a bug report or a feature request": [[378, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[378, "how-to-make-a-good-bug-report"]], "Contributing code": [[378, "contributing-code"]], "Video resources": [[378, "video-resources"]], "How to contribute": [[378, "how-to-contribute"]], "Learning git:": [[378, null]], "Pull request checklist": [[378, "pull-request-checklist"]], "Continuous Integration (CI)": [[378, "continuous-integration-ci"]], "Stalled pull requests": [[378, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[378, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[378, "issues-for-new-contributors"]], "good first issue tag": [[378, null]], "Easy tag": [[378, null]], "help wanted tag": [[378, null]], "Documentation": [[378, "documentation"], [1027, "documentation"]], "Building the documentation": [[378, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[378, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[378, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[378, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[378, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[378, "monitoring-performance"]], "Issue Tracker Tags": [[378, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[378, "maintaining-backwards-compatibility"]], "Deprecation": [[378, "deprecation"]], "Change the default value of a parameter": [[378, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[378, "code-review-guidelines"]], "Communication Guidelines": [[378, "communication-guidelines"]], "Reading the existing code base": [[378, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[379, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[379, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[379, "tips-to-ease-development"]], "Tips for performance": [[379, "tips-for-performance"]], "Using OpenMP": [[379, "using-openmp"]], "Developing scikit-learn estimators": [[380, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[380, "apis-of-scikit-learn-objects"]], "Different objects": [[380, "different-objects"]], "Instantiation": [[380, "instantiation"]], "Fitting": [[380, "fitting"]], "Estimated Attributes": [[380, "estimated-attributes"]], "Optional Arguments": [[380, "optional-arguments"]], "Universal attributes": [[380, "universal-attributes"]], "Rolling your own estimator": [[380, "rolling-your-own-estimator"]], "Project template:": [[380, null]], "BaseEstimator and mixins:": [[380, null]], "get_params and set_params": [[380, "get-params-and-set-params"]], "Parameters and init": [[380, "parameters-and-init"]], "Cloning": [[380, "cloning"]], "Pipeline compatibility": [[380, "pipeline-compatibility"]], "Estimator types": [[380, "estimator-types"]], "Specific models": [[380, "specific-models"]], "Estimator Tags": [[380, "estimator-tags"]], "Developer API for set_output": [[380, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[380, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[380, "developer-api-for-html-representation"]], "Coding guidelines": [[380, "coding-guidelines"]], "Input validation": [[380, "input-validation"]], "Random Numbers": [[380, "random-numbers"]], "Numerical assertions in tests": [[380, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[381, "developer-s-guide"]], "Maintainer / core-developer information": [[382, "maintainer-core-developer-information"]], "Releasing": [[382, "releasing"]], "Before a release": [[382, "before-a-release"]], "Preparing a release PR": [[382, "preparing-a-release-pr"]], "Major version release": [[382, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[382, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[382, "making-a-release"]], "Release checklist": [[382, "release-checklist"]], "Merging Pull Requests": [[382, "merging-pull-requests"]], "The scikit-learn.org web site": [[382, "the-scikit-learn-org-web-site"]], "Experimental features": [[382, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[383, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[383, "good-practices"]], "Provide a failing code example with minimal comments": [[383, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[383, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[383, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[383, "use-markdown-formatting"]], "Synthetic dataset": [[383, "synthetic-dataset"]], "NumPy": [[383, "numpy"]], "Pandas": [[383, "pandas"]], "make_regression": [[383, "make-regression"]], "make_classification": [[383, "make-classification"]], "make_blobs": [[383, "make-blobs"]], "How to optimize for speed": [[384, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[384, "python-cython-or-c-c"]], "Profiling Python code": [[384, "profiling-python-code"]], "Memory usage profiling": [[384, "memory-usage-profiling"]], "Using Cython": [[384, "using-cython"]], "Profiling compiled extensions": [[384, "profiling-compiled-extensions"]], "Using yep and gperftools": [[384, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[384, "using-a-debugger-gdb"]], "Using gprof": [[384, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[384, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[384, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[384, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[384, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[385, "developing-with-the-plotting-api"]], "Plotting API Overview": [[385, "plotting-api-overview"]], "Plotting with Multiple Axes": [[385, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[386, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[386, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[386, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[386, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[386, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[386, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[386, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[386, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[386, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[387, "utilities-for-developers"]], "Validation Tools": [[387, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[387, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[387, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[387, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[387, "graph-routines"]], "Testing Functions": [[387, "testing-functions"]], "Multiclass and multilabel utility function": [[387, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[387, "helper-functions"]], "Hash Functions": [[387, "hash-functions"]], "Warnings and Exceptions": [[387, "warnings-and-exceptions"]], "Dispatching": [[388, "dispatching"]], "Frequently Asked Questions": [[390, "frequently-asked-questions"]], "Table of Contents": [[390, "table-of-contents"]], "About the project": [[390, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[390, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[390, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[390, "why-scikit"]], "Do you support PyPy?": [[390, "do-you-support-pypy"]], "Implementation decisions": [[390, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[390, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[390, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[390, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[390, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[390, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[390, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[390, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[390, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[390, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[390, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[390, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[390, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[390, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[390, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[390, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[390, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[390, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[390, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[390, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[390, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[390, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[391, "getting-started"]], "Fitting and predicting: estimator basics": [[391, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[391, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[391, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[391, "model-evaluation"]], "Automatic parameter searches": [[391, "automatic-parameter-searches"]], "Next steps": [[391, "next-steps"]], "Glossary of Common Terms and API Elements": [[392, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[392, "general-concepts"]], "Class APIs and Estimator Types": [[392, "class-apis-and-estimator-types"]], "Target Types": [[392, "target-types"]], "Methods": [[392, "methods"]], "Parameters": [[392, "parameters"], [412, "parameters"]], "Attributes": [[392, "attributes"]], "Data and sample properties": [[392, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[393, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[393, "roles-and-responsibilities"]], "Contributors": [[393, "contributors"]], "Core Contributors": [[393, "core-contributors"]], "Communication team": [[393, "communication-team"]], "Documentation team": [[393, "documentation-team"]], "Maintainers": [[393, "maintainers"]], "Technical Committee": [[393, "technical-committee"]], "Decision Making Process": [[393, "decision-making-process"]], "Governance Model Changes": [[393, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[393, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[395, "installing-scikit-learn"]], "Installing the latest release": [[395, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[395, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[395, "alpine-linux"]], "Arch Linux": [[395, "arch-linux"]], "Debian/Ubuntu": [[395, "debian-ubuntu"]], "Fedora": [[395, "fedora"]], "NetBSD": [[395, "netbsd"]], "MacPorts for Mac OSX": [[395, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[395, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[395, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[395, "winpython-for-windows"]], "Troubleshooting": [[395, "troubleshooting"]], "Error caused by file path length limit on Windows": [[395, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[396, "usage-examples"]], "Weighted scoring and fitting": [[396, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[396, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[396, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[396, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[396, "api-interface"]], "Metadata Routing Support Status": [[396, "metadata-routing-support-status"]], "Model persistence": [[399, "model-persistence"]], "Python specific serialization": [[399, "python-specific-serialization"]], "Security & maintainability limitations": [[399, "security-maintainability-limitations"]], "A more secure format: skops": [[399, "a-more-secure-format-skops"]], "Interoperable formats": [[399, "interoperable-formats"]], "Model selection and evaluation": [[400, "model-selection-and-evaluation"]], "Array API support (experimental)": [[401, "array-api-support-experimental"]], "Example usage": [[401, "example-usage"]], "PyTorch Support": [[401, "pytorch-support"]], "Support for Array API-compatible inputs": [[401, "support-for-array-api-compatible-inputs"]], "Metrics": [[401, "metrics"]], "Tools": [[401, "tools"]], "Common estimator checks": [[401, "common-estimator-checks"]], "Note on MPS device support": [[401, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[402, "spectral-co-clustering"]], "Mathematical formulation": [[402, "mathematical-formulation"], [402, "id3"], [405, "mathematical-formulation"], [405, "id16"], [405, "id23"], [405, "id33"], [405, "id37"], [412, "mathematical-formulation"], [988, "mathematical-formulation"], [989, "mathematical-formulation"], [999, "mathematical-formulation"], [1000, "mathematical-formulation"], [1001, "mathematical-formulation"]], "Spectral Biclustering": [[402, "spectral-biclustering"]], "Biclustering evaluation": [[402, "biclustering-evaluation"]], "Probability calibration": [[403, "probability-calibration"]], "Calibrating a classifier": [[403, "calibrating-a-classifier"]], "Usage": [[403, "usage"], [406, "usage"], [406, "id1"], [412, "usage"], [412, "id24"], [412, "id25"], [412, "id27"], [412, "id35"], [981, "usage"]], "Sigmoid": [[403, "sigmoid"]], "Isotonic": [[403, "isotonic"]], "Multiclass support": [[403, "multiclass-support"]], "API Reference": [[404, "api-reference"]], "sklearn: Settings and information tools": [[404, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[404, "module-sklearn.base"]], "Base classes": [[404, "base-classes"]], "Functions": [[404, "functions"], [404, "id1"]], "sklearn.calibration: Probability Calibration": [[404, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[404, "module-sklearn.cluster"]], "Classes": [[404, "classes"]], "sklearn.compose: Composite Estimators": [[404, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[404, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[404, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[404, "module-sklearn.datasets"]], "Loaders": [[404, "loaders"]], "Samples generator": [[404, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[404, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[404, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[404, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[404, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[404, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[404, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[404, "module-sklearn.feature_extraction"]], "From images": [[404, "module-sklearn.feature_extraction.image"]], "From text": [[404, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[404, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[404, "module-sklearn.gaussian_process"]], "Kernels": [[404, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[404, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[404, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[404, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[404, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[404, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[404, "module-sklearn.linear_model"]], "Linear classifiers": [[404, "linear-classifiers"]], "Classical linear regressors": [[404, "classical-linear-regressors"]], "Regressors with variable selection": [[404, "regressors-with-variable-selection"]], "Bayesian regressors": [[404, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[404, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[404, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[404, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[404, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[404, "sklearn-metrics-metrics"]], "Model Selection Interface": [[404, "model-selection-interface"]], "Classification metrics": [[404, "classification-metrics"], [985, "classification-metrics"]], "Regression metrics": [[404, "regression-metrics"], [985, "regression-metrics"]], "Multilabel ranking metrics": [[404, "multilabel-ranking-metrics"], [985, "multilabel-ranking-metrics"]], "Clustering metrics": [[404, "clustering-metrics"], [985, "clustering-metrics"]], "Biclustering metrics": [[404, "biclustering-metrics"]], "Distance metrics": [[404, "distance-metrics"]], "Pairwise metrics": [[404, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[404, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[404, "module-sklearn.model_selection"]], "Splitter Classes": [[404, "splitter-classes"]], "Splitter Functions": [[404, "splitter-functions"]], "Hyper-parameter optimizers": [[404, "hyper-parameter-optimizers"]], "Model validation": [[404, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[404, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[404, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[404, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[404, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[404, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[404, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[404, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[404, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[404, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[404, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[404, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[404, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[404, "module-sklearn.utils"]], "Input and parameter validation": [[404, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[404, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[404, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[404, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[404, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[404, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[404, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[404, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[404, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[404, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[404, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[404, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[404, "module-sklearn.utils.parallel"]], "Recently deprecated": [[404, "recently-deprecated"]], "Input data": [[405, null]], "Overview of clustering methods": [[405, "overview-of-clustering-methods"]], "K-means": [[405, "k-means"]], "Low-level parallelism": [[405, "low-level-parallelism"], [412, "low-level-parallelism"]], "Mini Batch K-Means": [[405, "mini-batch-k-means"]], "Affinity Propagation": [[405, "affinity-propagation"]], "Mean Shift": [[405, "mean-shift"]], "Spectral clustering": [[405, "spectral-clustering"]], "Different label assignment strategies": [[405, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[405, "spectral-clustering-graphs"]], "Hierarchical clustering": [[405, "hierarchical-clustering"]], "FeatureAgglomeration": [[405, null]], "Different linkage type: Ward, complete, average, and single linkage": [[405, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[405, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[405, "adding-connectivity-constraints"]], "Varying the metric": [[405, "varying-the-metric"]], "Bisecting K-Means": [[405, "bisecting-k-means"]], "DBSCAN": [[405, "dbscan"]], "Implementation": [[405, null], [988, "implementation"]], "Memory consumption for large sample sizes": [[405, null]], "HDBSCAN": [[405, "hdbscan"]], "Mutual Reachability Graph": [[405, "mutual-reachability-graph"]], "Hierarchical Clustering": [[405, "id11"]], "OPTICS": [[405, "optics"]], "Comparison with DBSCAN": [[405, null]], "Computational Complexity": [[405, null]], "BIRCH": [[405, "birch"]], "Clustering performance evaluation": [[405, "clustering-performance-evaluation"]], "Rand index": [[405, "rand-index"]], "Advantages": [[405, "advantages"], [405, "id14"], [405, "id21"], [405, "id25"], [405, "id28"], [405, "id31"], [405, "id35"], [405, "id39"]], "Drawbacks": [[405, "drawbacks"], [405, "id15"], [405, "id22"], [405, "id26"], [405, "id29"], [405, "id32"], [405, "id36"], [405, "id40"]], "Mutual Information based scores": [[405, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[405, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[405, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[405, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[405, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[405, "davies-bouldin-index"]], "Contingency Matrix": [[405, "contingency-matrix"]], "Pair Confusion Matrix": [[405, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[406, "pipeline-chaining-estimators"]], "Build a pipeline": [[406, "build-a-pipeline"]], "Access pipeline steps": [[406, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[406, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[406, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[406, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[406, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[406, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[406, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[406, "visualizing-composite-estimators"]], "Empirical covariance": [[407, "empirical-covariance"]], "Shrunk Covariance": [[407, "shrunk-covariance"]], "Basic shrinkage": [[407, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[407, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[407, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[407, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[407, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[407, "minimum-covariance-determinant"]], "PLSCanonical": [[408, "plscanonical"]], "Transforming data": [[408, "transforming-data"]], "Predicting the targets Y": [[408, "predicting-the-targets-y"]], "PLSSVD": [[408, "plssvd"]], "PLSRegression": [[408, "plsregression"]], "Canonical Correlation Analysis": [[408, "canonical-correlation-analysis"]], "Reference:": [[408, null]], "Cross-validation: evaluating estimator performance": [[409, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[409, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[409, null]], "The cross_validate function and multiple metric evaluation": [[409, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[409, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[409, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[409, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[409, "k-fold"]], "Repeated K-Fold": [[409, "repeated-k-fold"]], "Leave One Out (LOO)": [[409, "leave-one-out-loo"]], "Leave P Out (LPO)": [[409, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[409, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[409, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[409, "stratified-k-fold"]], "Stratified Shuffle Split": [[409, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[409, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[409, "group-k-fold"]], "StratifiedGroupKFold": [[409, "stratifiedgroupkfold"]], "Leave One Group Out": [[409, "leave-one-group-out"]], "Leave P Groups Out": [[409, "leave-p-groups-out"]], "Group Shuffle Split": [[409, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[409, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[409, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[409, "cross-validation-of-time-series-data"]], "Time Series Split": [[409, "time-series-split"]], "A note on shuffling": [[409, "a-note-on-shuffling"]], "Cross validation and model selection": [[409, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[410, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[410, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[410, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[410, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[410, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[410, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[410, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[410, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[410, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[410, "dictionary-learning"]], "Generic dictionary learning": [[410, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[410, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[410, null]], "Factor Analysis": [[410, "factor-analysis"]], "Independent component analysis (ICA)": [[410, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[410, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[410, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[410, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[410, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[410, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[411, "density-estimation"]], "Density Estimation: Histograms": [[411, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[412, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[412, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[412, null]], "Histogram-Based Gradient Boosting": [[412, "histogram-based-gradient-boosting"]], "Missing values support": [[412, "missing-values-support"]], "Sample weight support": [[412, "sample-weight-support"]], "Categorical Features Support": [[412, "categorical-features-support"]], "Interaction constraints": [[412, "interaction-constraints"]], "Why it\u2019s faster": [[412, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[412, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[412, "fitting-additional-weak-learners"]], "Controlling the tree size": [[412, "controlling-the-tree-size"]], "Loss Functions": [[412, "loss-functions"]], "Shrinkage via learning rate": [[412, "shrinkage-via-learning-rate"]], "Subsampling": [[412, "subsampling"]], "Interpretation with feature importance": [[412, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[412, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[412, "random-forests"]], "Extremely Randomized Trees": [[412, "extremely-randomized-trees"]], "Parallelization": [[412, "parallelization"]], "Feature importance evaluation": [[412, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[412, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[412, "bagging-meta-estimator"]], "Voting Classifier": [[412, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[412, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[412, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[412, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[412, "voting-regressor"]], "Stacked generalization": [[412, "stacked-generalization"]], "AdaBoost": [[412, "adaboost"]], "Feature extraction": [[413, "feature-extraction"]], "Loading features from dicts": [[413, "loading-features-from-dicts"]], "Feature hashing": [[413, "feature-hashing"]], "Text feature extraction": [[413, "text-feature-extraction"]], "The Bag of Words representation": [[413, "the-bag-of-words-representation"]], "Sparsity": [[413, "sparsity"], [1018, "sparsity"]], "Common Vectorizer usage": [[413, "common-vectorizer-usage"]], "Using stop words": [[413, "using-stop-words"]], "Tf\u2013idf term weighting": [[413, "tfidf-term-weighting"]], "Decoding text files": [[413, "decoding-text-files"]], "Applications and examples": [[413, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[413, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[413, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[413, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[413, "image-feature-extraction"]], "Patch extraction": [[413, "patch-extraction"]], "Connectivity graph of an image": [[413, "connectivity-graph-of-an-image"]], "Feature selection": [[414, "feature-selection"]], "Removing features with low variance": [[414, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[414, null]], "Feature selection using SelectFromModel": [[414, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[414, "l1-based-feature-selection"]], "Reference": [[414, null], [414, null]], "Tree-based feature selection": [[414, "tree-based-feature-selection"]], "Sequential Feature Selection": [[414, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[414, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[415, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[415, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[415, "gaussian-process-classification-gpc"]], "GPC examples": [[415, "gpc-examples"]], "Probabilistic predictions with GPC": [[415, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[415, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[415, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[415, "gaussian-process-kernel-api"]], "Basic kernels": [[415, "basic-kernels"]], "Kernel operators": [[415, "kernel-operators"]], "Radial basis function (RBF) kernel": [[415, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[415, "rational-quadratic-kernel"]], "Dot-Product kernel": [[415, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[416, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[417, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[418, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[419, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[419, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[420, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[421, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[422, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[422, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[423, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[424, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[425, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[425, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[426, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[427, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[428, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[428, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[429, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[429, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[430, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[431, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[432, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[433, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[433, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[434, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[434, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[435, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[436, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[436, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[437, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[437, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[438, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[438, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[439, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[439, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[440, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[440, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[441, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[441, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[442, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[442, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[443, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[443, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[444, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[444, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[445, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[445, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[446, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[446, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[447, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[447, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[448, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[448, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[449, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[449, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[450, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[450, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[451, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[451, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[452, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[453, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[454, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[454, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[455, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[456, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[456, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[457, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[458, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[458, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[459, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[460, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[460, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[461, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[461, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[462, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[462, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[463, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[463, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[464, "sklearn-config-context"]], "Examples using sklearn.config_context": [[464, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[465, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[465, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[466, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[466, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[467, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[468, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[468, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[469, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[469, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[470, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[470, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[471, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[471, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[472, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[472, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[473, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[473, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[474, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[475, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[475, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[476, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[477, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[478, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[478, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[479, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[479, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[480, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[480, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[481, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[482, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[483, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[483, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[484, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[484, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[485, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[485, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[486, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[486, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[487, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[487, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[488, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[488, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[489, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[490, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[490, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[491, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[491, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[492, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[492, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[493, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[494, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[494, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[495, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[495, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[496, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[496, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[497, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[497, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[498, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[498, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[499, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[500, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[500, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[501, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[502, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[502, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[503, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[504, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[505, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[506, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[506, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[507, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[507, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[508, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[508, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[509, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[509, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[510, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[510, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[511, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[511, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[512, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[513, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[514, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[515, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[515, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[516, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[516, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[517, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[517, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[518, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[518, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[519, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[519, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[520, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[520, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[521, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[521, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[522, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[522, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[523, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[523, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[524, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[525, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[526, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[526, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[527, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[528, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[528, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[529, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[529, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[530, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[530, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[531, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[531, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[532, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[532, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[533, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[533, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[534, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[534, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[535, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[535, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[536, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[536, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[537, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[537, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[538, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[538, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[539, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[539, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[540, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[540, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[541, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[542, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[543, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[544, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[545, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[545, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[546, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[546, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[547, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[547, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[548, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[548, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[549, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[549, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[550, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[550, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[551, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[552, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[552, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[553, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[553, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[554, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[554, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[555, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[555, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[556, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[556, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[557, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[557, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[558, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[558, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[559, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[559, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[560, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[560, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[561, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[561, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[562, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[562, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[563, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[563, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[564, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[564, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[565, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[565, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[566, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[566, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[567, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[567, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[568, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[569, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[570, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[571, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[572, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[573, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[574, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[575, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[576, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[577, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[577, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[578, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[578, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[579, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[580, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[580, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[581, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[582, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[583, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[583, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[584, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[584, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[585, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[585, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[586, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[586, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[587, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[587, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[588, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[589, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[589, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[590, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[590, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[591, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[592, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[593, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[593, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[594, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[595, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[595, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[596, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[596, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[597, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[598, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[598, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[599, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[600, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[600, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[601, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[601, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[602, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[602, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[603, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[603, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[604, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[604, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[605, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[606, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[606, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[607, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[607, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[608, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[609, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[609, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[610, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[610, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[611, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[611, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[612, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[613, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[613, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[614, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[614, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[615, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[615, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[616, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[617, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[618, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[618, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[619, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[619, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[620, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[621, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[621, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[622, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[623, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[623, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[624, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[624, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[625, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[626, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[626, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[627, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[627, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[627, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[628, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[628, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[628, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[629, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[629, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[630, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[630, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[631, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[631, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[632, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[633, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[634, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[635, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[635, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[636, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[636, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[637, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[637, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[638, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[639, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[639, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[640, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[640, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[641, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[641, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[642, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[642, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[643, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[643, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[644, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[644, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[645, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[645, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[646, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[647, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[648, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[648, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[649, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[649, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[650, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[651, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[651, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[652, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[652, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[653, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[653, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[654, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[654, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[655, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[655, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[656, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[657, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[658, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[658, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[659, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[660, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[660, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[661, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[661, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[662, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[662, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[663, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[664, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[664, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[665, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[665, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[666, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[666, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[667, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[667, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[668, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[668, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[669, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[669, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[670, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[670, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[671, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[672, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[672, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[673, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[673, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[674, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[674, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[675, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[675, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[676, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[676, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[677, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[677, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[678, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[678, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[679, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[680, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[680, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[681, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[682, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[683, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[684, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[684, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[685, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[685, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[686, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[686, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[687, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[687, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[688, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[688, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[689, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[689, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[690, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[691, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[692, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[693, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[693, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[693, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[693, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[694, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[694, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[695, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[696, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[696, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[696, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[696, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[697, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[697, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[697, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[697, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[698, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[698, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[698, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[699, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[699, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[700, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[700, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[701, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[701, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[702, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[702, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[703, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[703, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[704, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[705, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[705, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[706, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[707, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[708, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[708, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[709, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[709, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[710, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[711, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[712, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[713, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[713, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[714, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[714, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[715, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[715, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[716, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[717, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[718, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[719, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[720, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[721, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[722, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[722, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[723, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[724, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[724, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[725, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[726, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[727, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[728, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[729, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[729, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[730, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[730, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[731, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[732, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[732, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[733, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[733, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[734, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[735, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[736, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[736, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[737, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[737, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[738, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[739, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[740, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[740, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[741, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[742, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[743, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[743, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[744, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[744, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[745, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[745, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[746, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[747, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[747, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[748, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[748, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[749, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[750, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[750, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[751, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[752, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[752, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[753, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[754, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[755, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[756, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[756, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[757, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[758, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[759, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[760, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[761, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[762, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[763, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[764, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[765, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[766, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[767, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[768, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[769, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[770, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[771, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[772, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[773, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[773, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[774, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[774, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[775, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[776, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[777, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[777, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[778, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[779, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[779, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[780, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[780, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[781, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[781, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[782, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[782, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[783, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[783, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[784, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[784, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[785, "sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[786, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[787, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[787, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[788, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[788, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[789, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[790, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[790, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[791, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[792, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[792, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[793, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[793, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[794, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[794, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[795, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[795, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[796, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[796, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[797, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[797, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[798, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[798, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[799, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[799, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[800, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[800, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[800, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[801, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[802, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[803, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[804, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[805, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[806, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[807, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[808, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[808, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[809, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[809, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[810, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[810, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[811, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[811, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[812, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[812, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[813, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[813, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[814, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[814, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[815, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[815, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[816, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[816, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[817, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[818, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[818, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[819, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[819, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[820, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[820, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[821, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[821, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[822, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[822, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[823, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[823, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[824, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[824, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[825, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[825, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[826, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[826, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[827, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[827, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[828, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[828, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[829, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[830, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[830, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[831, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[832, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[832, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[833, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[834, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[834, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[835, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[835, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[836, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[836, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[837, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[838, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[839, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[839, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[840, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[840, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[841, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[841, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[842, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[842, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[843, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[843, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[844, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[844, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[845, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[845, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[846, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[846, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[847, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[848, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[849, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[850, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[850, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[851, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[852, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[853, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[853, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[854, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[854, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[855, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[855, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[856, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[856, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[857, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[857, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[858, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[858, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[859, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[860, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[861, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[861, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[862, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[862, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[863, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[864, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[864, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[865, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[866, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[866, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[867, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[867, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[868, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[869, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[869, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[870, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[870, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[871, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[871, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[872, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[872, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[873, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[873, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[874, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[874, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[875, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[875, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[876, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[876, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[877, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[877, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[878, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[878, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[879, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[880, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[881, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[881, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[882, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[883, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[883, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[884, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[885, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[886, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[886, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[887, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[888, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[889, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[890, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[890, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[891, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[891, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[892, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[893, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[893, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[894, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[894, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[895, "sklearn-set-config"]], "Examples using sklearn.set_config": [[895, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[896, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[897, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[897, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[898, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[899, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[899, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[900, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[900, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[901, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[901, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[902, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[902, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[903, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[903, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[904, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[904, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[905, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[905, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[906, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[906, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[907, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[908, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[909, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[910, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[911, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[911, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[912, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[912, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[913, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[914, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[915, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[916, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[917, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[918, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[919, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[920, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[920, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[921, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[922, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[923, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[924, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[925, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[926, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[927, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[928, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[929, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[929, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[930, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[931, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[931, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[932, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[933, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[934, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[935, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[936, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[937, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[938, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[938, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[939, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[940, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[941, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[942, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[942, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[943, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[943, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[944, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[944, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[945, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[945, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[946, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[946, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[947, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[948, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[949, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[950, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[951, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[952, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[953, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[954, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[955, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[956, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[957, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[958, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[959, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[959, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[960, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[961, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[962, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[963, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[964, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[965, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[966, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[967, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[968, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[969, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[969, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[970, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[971, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[972, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[973, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[974, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[974, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[974, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[974, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[974, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[974, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[974, "choosing-a-resource"]], "Exhausting the available resources": [[974, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[974, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[974, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[974, "tips-for-parameter-search"]], "Specifying an objective metric": [[974, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[974, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[974, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[974, "model-selection-development-and-evaluation"]], "Robustness to failure": [[974, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[974, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[974, "model-specific-cross-validation"]], "Information Criterion": [[974, "information-criterion"]], "Out of Bag Estimates": [[974, "out-of-bag-estimates"]], "Imputation of missing values": [[975, "imputation-of-missing-values"], [995, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[975, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[975, "univariate-feature-imputation"]], "Multivariate feature imputation": [[975, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[975, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[975, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[975, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[975, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[975, "marking-imputed-values"]], "Estimators that handle NaN values": [[975, "estimators-that-handle-nan-values"]], "Isotonic regression": [[976, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[977, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[977, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[977, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[977, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[977, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[977, "mathematical-details"]], "Kernel ridge regression": [[978, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[979, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[979, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[979, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[979, "qda"]], "LDA": [[979, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[979, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[979, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[979, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[980, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[980, "validation-curve"]], "Learning curve": [[980, "learning-curve"]], "Linear Models": [[981, "linear-models"]], "Ordinary Least Squares": [[981, "ordinary-least-squares"]], "Non-Negative Least Squares": [[981, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[981, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[981, "ridge-regression-and-classification"]], "Ridge Complexity": [[981, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[981, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[981, "setting-regularization-parameter"]], "Using cross-validation": [[981, "using-cross-validation"]], "Information-criteria based model selection": [[981, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[981, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[981, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[981, "multi-task-lasso"]], "Elastic-Net": [[981, "elastic-net"]], "Multi-task Elastic-Net": [[981, "multi-task-elastic-net"]], "Least Angle Regression": [[981, "least-angle-regression"]], "LARS Lasso": [[981, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[981, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[981, "bayesian-regression"]], "Bayesian Ridge Regression": [[981, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[981, "automatic-relevance-determination-ard"]], "Logistic regression": [[981, "logistic-regression"]], "Binary Case": [[981, "binary-case"]], "Multinomial Case": [[981, "multinomial-case"]], "Solvers": [[981, "solvers"]], "Differences between solvers": [[981, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[981, "stochastic-gradient-descent-sgd"]], "Perceptron": [[981, "perceptron"]], "Passive Aggressive Algorithms": [[981, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[981, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[981, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[981, null]], "RANSAC: RANdom SAmple Consensus": [[981, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[981, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[981, "huber-regression"]], "Quantile Regression": [[981, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[981, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[982, "introduction"]], "Isomap": [[982, "isomap"]], "Locally Linear Embedding": [[982, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[982, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[982, "hessian-eigenmapping"]], "Spectral Embedding": [[982, "spectral-embedding"]], "Local Tangent Space Alignment": [[982, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[982, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[982, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[982, "tips-on-practical-use"], [1001, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[983, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[983, "cosine-similarity"]], "Laplacian kernel": [[983, "laplacian-kernel"]], "Chi-squared kernel": [[983, "chi-squared-kernel"]], "Gaussian mixture models": [[984, "gaussian-mixture-models"]], "Gaussian Mixture": [[984, "gaussian-mixture"]], "Pros:": [[984, null], [984, null]], "Cons:": [[984, null], [984, null]], "Variational Bayesian Gaussian Mixture": [[984, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[984, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[985, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[985, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[985, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[985, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[985, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[985, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[985, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[985, "accuracy-score"]], "Example:": [[985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [985, null], [997, null], [1018, null]], "Top-k accuracy score": [[985, "top-k-accuracy-score"]], "Balanced accuracy score": [[985, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[985, "cohen-s-kappa"]], "Classification report": [[985, "classification-report"]], "Hamming loss": [[985, "hamming-loss"]], "Precision, recall and F-measures": [[985, "precision-recall-and-f-measures"]], "Binary classification": [[985, "binary-classification"]], "Multiclass and multilabel classification": [[985, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[985, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[985, "hinge-loss"]], "Log loss": [[985, "log-loss"]], "Matthews correlation coefficient": [[985, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[985, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[985, "receiver-operating-characteristic-roc"]], "Binary case": [[985, "binary-case"]], "Multi-class case": [[985, "multi-class-case"]], "Multi-label case": [[985, "multi-label-case"]], "Detection error tradeoff (DET)": [[985, "detection-error-tradeoff-det"]], "Zero one loss": [[985, "zero-one-loss"]], "Brier score loss": [[985, "brier-score-loss"]], "Class likelihood ratios": [[985, "class-likelihood-ratios"]], "Coverage error": [[985, "coverage-error"]], "Label ranking average precision": [[985, "label-ranking-average-precision"]], "Ranking loss": [[985, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[985, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[985, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[985, "mean-absolute-error"]], "Mean squared error": [[985, "mean-squared-error"]], "Mean squared logarithmic error": [[985, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[985, "mean-absolute-percentage-error"]], "Median absolute error": [[985, "median-absolute-error"]], "Max error": [[985, "max-error"]], "Explained variance score": [[985, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[985, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[985, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[985, "pinball-loss"]], "D\u00b2 score": [[985, "d2-score"]], "D\u00b2 Tweedie score": [[985, "d2-tweedie-score"]], "D\u00b2 pinball score": [[985, "d2-pinball-score"]], "D\u00b2 absolute error score": [[985, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[985, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[985, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[986, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[986, "multiclass-classification"], [1018, null]], "Target format": [[986, "target-format"], [986, "id5"], [986, "id8"], [986, "id10"]], "OneVsRestClassifier": [[986, "onevsrestclassifier"]], "OneVsOneClassifier": [[986, "onevsoneclassifier"]], "OutputCodeClassifier": [[986, "outputcodeclassifier"]], "MultiOutputClassifier": [[986, "multioutputclassifier"]], "ClassifierChain": [[986, "classifierchain"]], "Multiclass-multioutput classification": [[986, "multiclass-multioutput-classification"]], "Multioutput regression": [[986, "multioutput-regression"]], "MultiOutputRegressor": [[986, "multioutputregressor"]], "RegressorChain": [[986, "regressorchain"]], "Naive Bayes": [[987, "naive-bayes"]], "Multinomial Naive Bayes": [[987, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[987, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[987, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[987, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[987, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[988, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[988, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[988, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[988, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[988, "nearest-neighbor-algorithms"]], "Brute Force": [[988, "brute-force"]], "K-D Tree": [[988, "k-d-tree"]], "Ball Tree": [[988, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[988, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[988, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[988, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[988, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[988, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[988, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[988, "neighborhood-components-analysis"]], "Dimensionality reduction": [[988, "dimensionality-reduction"]], "Mahalanobis distance": [[988, "mahalanobis-distance"]], "Complexity": [[988, "complexity"], [989, "complexity"], [999, "complexity"], [1000, "complexity"], [1001, "complexity"]], "Transform": [[988, "transform"]], "Neural network models (supervised)": [[989, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[989, "multi-layer-perceptron"]], "Regularization": [[989, "regularization"]], "Algorithms": [[989, "algorithms"]], "Tips on Practical Use": [[989, "tips-on-practical-use"], [999, "tips-on-practical-use"], [1000, "tips-on-practical-use"]], "More control with warm_start": [[989, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[990, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[990, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[990, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[990, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[990, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[991, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[991, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[991, "novelty-detection"]], "Scaling up the One-Class SVM": [[991, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[991, "id1"]], "Fitting an elliptic envelope": [[991, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[991, "isolation-forest"]], "Local Outlier Factor": [[991, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[991, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[992, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[992, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[992, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[992, "mathematical-definition"]], "Computation methods": [[992, "computation-methods"]], "Permutation feature importance": [[993, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[993, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[993, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[993, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[995, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[995, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[995, "scaling-features-to-a-range"]], "Scaling sparse data": [[995, "scaling-sparse-data"]], "Scaling data with outliers": [[995, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[995, null]], "Centering kernel matrices": [[995, "centering-kernel-matrices"]], "Non-linear transformation": [[995, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[995, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[995, "mapping-to-a-gaussian-distribution"]], "Normalization": [[995, "normalization"]], "Sparse input": [[995, null], [995, null]], "Encoding categorical features": [[995, "encoding-categorical-features"]], "Infrequent categories": [[995, "infrequent-categories"]], "Target Encoder": [[995, "target-encoder"]], "Discretization": [[995, "discretization"]], "K-bins discretization": [[995, "k-bins-discretization"]], "Feature binarization": [[995, "feature-binarization"]], "Generating polynomial features": [[995, "generating-polynomial-features"]], "Polynomial features": [[995, "polynomial-features"]], "Spline transformer": [[995, "spline-transformer"]], "Custom transformers": [[995, "custom-transformers"]], "Transforming the prediction target (y)": [[996, "transforming-the-prediction-target-y"]], "Label binarization": [[996, "label-binarization"]], "LabelBinarizer": [[996, "labelbinarizer"]], "MultiLabelBinarizer": [[996, "multilabelbinarizer"]], "Label encoding": [[996, "label-encoding"]], "Random Projection": [[997, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[997, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[997, "gaussian-random-projection"]], "Sparse random projection": [[997, "sparse-random-projection"]], "Inverse Transform": [[997, "inverse-transform"]], "Unlabeled entries in y": [[998, null]], "Self Training": [[998, "self-training"]], "Label Propagation": [[998, "label-propagation"]], "Stochastic Gradient Descent": [[999, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[999, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[999, "stopping-criterion"]], "SGD": [[999, "id5"]], "Implementation details": [[999, "implementation-details"], [1000, "implementation-details"]], "Multi-class classification": [[1000, "multi-class-classification"]], "Scores and probabilities": [[1000, "scores-and-probabilities"]], "Unbalanced problems": [[1000, "unbalanced-problems"]], "Density estimation, novelty detection": [[1000, "density-estimation-novelty-detection"]], "Kernel functions": [[1000, "kernel-functions"]], "Parameters of the RBF Kernel": [[1000, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[1000, "custom-kernels"]], "SVC": [[1000, "svc"]], "SVR": [[1000, "svr"]], "Multi-output problems": [[1001, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1001, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[1001, "classification-criteria"]], "Regression criteria": [[1001, "regression-criteria"]], "Missing Values Support": [[1001, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[1001, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[1002, "unsupervised-dimensionality-reduction"]], "Pipelining": [[1002, null], [1016, "pipelining"]], "PCA: principal component analysis": [[1002, "pca-principal-component-analysis"]], "Random projections": [[1002, "random-projections"]], "Feature scaling": [[1002, null]], "Welcome to scikit-learn": [[1003, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[1004, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1004, "new-to-scientific-python"]], "External Tutorials": [[1004, "external-tutorials"]], "Videos": [[1004, "videos"]], "Related Projects": [[1005, "related-projects"]], "Interoperability and framework enhancements": [[1005, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1005, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1005, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1005, "recommendation-engine-packages"]], "Domain specific packages": [[1005, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1005, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1006, "id1"]], "Purpose of this document": [[1006, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1006, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1006, "architectural-general-goals"]], "Subpackage-specific goals": [[1006, "subpackage-specific-goals"]], "Supervised learning": [[1007, "supervised-learning"]], "Support": [[1008, "support"]], "Mailing List": [[1008, "mailing-list"]], "User questions": [[1008, "user-questions"]], "Bug tracker": [[1008, "bug-tracker"]], "Gitter": [[1008, "gitter"]], "Documentation resources": [[1008, "documentation-resources"]], "Who is using scikit-learn?": [[1009, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1009, "id1"]], "Spotify": [[1009, "id2"]], "Inria": [[1009, "id3"]], "betaworks": [[1009, "id4"]], "Hugging Face": [[1009, "id5"]], "Evernote": [[1009, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1009, "id7"]], "Booking.com": [[1009, "id8"]], "AWeber": [[1009, "id9"]], "Yhat": [[1009, "id10"]], "Rangespan": [[1009, "id11"]], "Birchbox": [[1009, "id12"]], "Bestofmedia Group": [[1009, "id13"]], "Change.org": [[1009, "id14"]], "PHIMECA Engineering": [[1009, "id15"]], "HowAboutWe": [[1009, "id16"]], "PeerIndex": [[1009, "id17"]], "DataRobot": [[1009, "id18"]], "OkCupid": [[1009, "id19"]], "Lovely": [[1009, "id20"]], "Data Publica": [[1009, "id21"]], "Machinalis": [[1009, "id22"]], "solido": [[1009, "id23"]], "INFONEA": [[1009, "id24"]], "Dataiku": [[1009, "id25"]], "Otto Group": [[1009, "id26"]], "Zopa": [[1009, "id27"]], "MARS": [[1009, "id28"]], "BNP Paribas Cardif": [[1009, "id29"]], "An introduction to machine learning with scikit-learn": [[1011, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1011, null]], "Machine learning: the problem setting": [[1011, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1011, null], [1018, null]], "Loading an example dataset": [[1011, "loading-an-example-dataset"]], "Shape of the data arrays": [[1011, null]], "Learning and predicting": [[1011, "learning-and-predicting"]], "Choosing the parameters of the model": [[1011, null]], "Conventions": [[1011, "conventions"]], "Type casting": [[1011, "type-casting"]], "Refitting and updating parameters": [[1011, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1011, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1012, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1013, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1014, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1014, null]], "Model selection: choosing estimators and their parameters": [[1015, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1015, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1015, "cross-validation-generators"]], "Exercise": [[1015, null], [1015, null], [1018, null], [1018, null]], "Grid-search and cross-validated estimators": [[1015, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1015, "grid-search"]], "Nested cross-validation": [[1015, null]], "Cross-validated estimators": [[1015, "cross-validated-estimators"]], "Putting it all together": [[1016, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1016, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1016, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1017, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1017, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1017, null]], "An example of reshaping data would be the digits dataset": [[1017, null]], "Estimators objects": [[1017, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1018, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1018, null]], "Vocabulary: classification and regression": [[1018, null]], "Nearest neighbor and the curse of dimensionality": [[1018, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1018, null]], "k-Nearest neighbors classifier": [[1018, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1018, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1018, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1018, "linear-regression"]], "Shrinkage": [[1018, "shrinkage"]], "Different algorithms for the same problem": [[1018, null]], "Shrinkage and sparsity with logistic regression": [[1018, null]], "Support vector machines (SVMs)": [[1018, "support-vector-machines-svms"]], "Linear SVMs": [[1018, "linear-svms"]], "Using kernels": [[1018, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1018, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1018, null]], "Unsupervised learning: seeking representations of the data": [[1019, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1019, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1019, null]], "K-means clustering": [[1019, "k-means-clustering"]], "Application example: vector quantization": [[1019, null]], "Hierarchical agglomerative clustering: Ward": [[1019, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1019, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1019, null]], "Decompositions: from a signal to components and loadings": [[1019, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1019, null]], "Principal component analysis: PCA": [[1019, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1019, "independent-component-analysis-ica"]], "Working With Text Data": [[1020, "working-with-text-data"]], "Tutorial setup": [[1020, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1020, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1020, "extracting-features-from-text-files"]], "Bags of words": [[1020, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1020, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1020, "from-occurrences-to-frequencies"]], "Training a classifier": [[1020, "training-a-classifier"]], "Building a pipeline": [[1020, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1020, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1020, "parameter-tuning-using-grid-search"]], "Exercises": [[1020, "exercises"]], "Exercise 1: Language identification": [[1020, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1020, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1020, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1020, "where-to-from-here"]], "Unsupervised learning": [[1021, "unsupervised-learning"]], "User Guide": [[1022, "user-guide"]], "Under Development": [[1022, "under-development"]], "Available documentation for Scikit-learn": [[1023, "available-documentation-for-scikit-learn"]], "Visualizations": [[1024, "visualizations"]], "Available Plotting Utilities": [[1024, "available-plotting-utilities"]], "Display Objects": [[1024, "display-objects"]], "Release History": [[1025, "release-history"]], "Version 0.12.1": [[1027, "version-0-12-1"]], "Changelog": [[1027, "changelog"], [1027, "id1"], [1027, "id3"], [1027, "id6"], [1027, "id9"], [1027, "id12"], [1027, "id14"], [1027, "id16"], [1027, "id18"], [1027, "id19"], [1028, "changelog"], [1028, "id1"], [1029, "changelog"], [1030, "changelog"], [1031, "changelog"], [1031, "id1"], [1032, "changelog"], [1032, "id1"], [1033, "changelog"], [1033, "id1"], [1033, "id2"], [1034, "changelog"], [1034, "id1"], [1035, "changelog"], [1035, "id1"], [1035, "id5"], [1035, "id10"], [1035, "id23"], [1036, "changelog"], [1036, "id1"], [1036, "id2"], [1036, "id7"], [1037, "changelog"], [1037, "id1"], [1037, "id4"], [1038, "changelog"], [1038, "id1"], [1038, "id4"], [1039, "changelog"], [1039, "id1"], [1039, "id4"], [1040, "changelog"], [1040, "id1"], [1040, "id7"], [1041, "changelog"], [1041, "id1"], [1041, "id7"], [1042, "changelog"], [1042, "id1"], [1042, "id9"], [1043, "changelog"], [1043, "id1"], [1043, "id6"], [1044, "changelog"]], "People": [[1027, "people"], [1027, "id2"], [1027, "id5"], [1027, "id8"], [1027, "id11"], [1027, "id13"], [1027, "id15"], [1027, "id17"], [1028, "people"], [1028, "id2"], [1029, "people"], [1030, "people"]], "Version 0.12": [[1027, "version-0-12"]], "API changes summary": [[1027, "api-changes-summary"], [1027, "id4"], [1027, "id7"], [1027, "id10"], [1028, "api-changes-summary"], [1029, "api-changes-summary"], [1030, "api-changes-summary"], [1031, "api-changes-summary"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1033, "id5"], [1034, "api-changes-summary"]], "Version 0.11": [[1027, "version-0-11"]], "Highlights": [[1027, "highlights"], [1030, "highlights"], [1031, "highlights"], [1034, "highlights"], [1035, "highlights"]], "Other changes": [[1027, "other-changes"]], "Version 0.10": [[1027, "version-0-10"]], "Version 0.9": [[1027, "version-0-9"]], "Version 0.8": [[1027, "version-0-8"]], "Version 0.7": [[1027, "version-0-7"]], "Version 0.6": [[1027, "version-0-6"]], "Version 0.5": [[1027, "version-0-5"]], "New classes": [[1027, "new-classes"]], "Fixes": [[1027, "fixes"]], "External dependencies": [[1027, "external-dependencies"]], "Removed modules": [[1027, "removed-modules"]], "Misc": [[1027, "misc"]], "Version 0.4": [[1027, "version-0-4"]], "Earlier versions": [[1027, "earlier-versions"]], "Version 0.13.1": [[1028, "version-0-13-1"]], "Version 0.13": [[1028, "version-0-13"]], "New Estimator Classes": [[1028, "new-estimator-classes"]], "Version 0.14": [[1029, "version-0-14"]], "Version 0.15.2": [[1030, "version-0-15-2"]], "Bug fixes": [[1030, "bug-fixes"], [1030, "id1"], [1030, "id2"], [1031, "bug-fixes"], [1031, "id2"], [1032, "bug-fixes"], [1032, "id2"], [1033, "bug-fixes"], [1033, "id4"], [1034, "bug-fixes"], [1034, "id3"]], "Version 0.15.1": [[1030, "version-0-15-1"]], "Version 0.15": [[1030, "version-0-15"]], "New features": [[1030, "new-features"], [1031, "new-features"], [1032, "new-features"], [1033, "new-features"], [1034, "new-features"]], "Enhancements": [[1030, "enhancements"], [1031, "enhancements"], [1032, "enhancements"], [1033, "enhancements"], [1033, "id3"], [1034, "enhancements"], [1034, "id2"]], "Documentation improvements": [[1030, "documentation-improvements"], [1031, "documentation-improvements"]], "Version 0.16.1": [[1031, "version-0-16-1"]], "Version 0.16": [[1031, "version-0-16"]], "Code Contributors": [[1031, "code-contributors"], [1032, "code-contributors"], [1033, "code-contributors"], [1033, "id6"]], "Version 0.17.1": [[1032, "version-0-17-1"]], "Version 0.17": [[1032, "version-0-17"]], "Version 0.18.2": [[1033, "version-0-18-2"]], "Last release with Python 2.6 support": [[1033, null], [1033, null]], "Version 0.18.1": [[1033, "version-0-18-1"]], "Version 0.18": [[1033, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1033, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1034, "version-0-19-2"]], "Related changes": [[1034, "related-changes"]], "Version 0.19.1": [[1034, "version-0-19-1"]], "API changes": [[1034, "api-changes"]], "Code and Documentation Contributors": [[1034, "code-and-documentation-contributors"], [1034, "id9"], [1035, "code-and-documentation-contributors"], [1035, "id8"], [1035, "id21"], [1035, "id41"], [1036, "code-and-documentation-contributors"], [1037, "code-and-documentation-contributors"], [1038, "code-and-documentation-contributors"], [1039, "code-and-documentation-contributors"], [1040, "code-and-documentation-contributors"], [1041, "code-and-documentation-contributors"], [1042, "code-and-documentation-contributors"], [1043, "code-and-documentation-contributors"], [1044, "code-and-documentation-contributors"]], "Version 0.19": [[1034, "version-0-19"]], "Changed models": [[1034, "changed-models"], [1035, "changed-models"], [1035, "id9"], [1035, "id22"], [1036, "changed-models"], [1036, "id6"], [1037, "changed-models"], [1038, "changed-models"], [1038, "id3"], [1039, "changed-models"], [1040, "changed-models"], [1041, "changed-models"], [1041, "id6"], [1042, "changed-models"], [1042, "id7"], [1043, "changed-models"], [1043, "id4"], [1044, "changed-models"]], "Version 0.20.4": [[1035, "version-0-20-4"]], "sklearn.cluster": [[1035, "sklearn-cluster"], [1035, "id2"], [1035, "id11"], [1035, "id24"], [1036, "sklearn-cluster"], [1036, "id8"], [1037, "sklearn-cluster"], [1037, "id5"], [1038, "sklearn-cluster"], [1038, "id2"], [1038, "id5"], [1039, "sklearn-cluster"], [1040, "sklearn-cluster"], [1040, "id2"], [1040, "id9"], [1041, "sklearn-cluster"], [1041, "id8"], [1042, "sklearn-cluster"], [1042, "id12"], [1043, "sklearn-cluster"], [1043, "id8"], [1044, "sklearn-cluster"]], "sklearn.compose": [[1035, "sklearn-compose"], [1035, "id3"], [1035, "id6"], [1035, "id12"], [1035, "id25"], [1036, "sklearn-compose"], [1036, "id9"], [1037, "sklearn-compose"], [1038, "sklearn-compose"], [1039, "sklearn-compose"], [1039, "id5"], [1040, "sklearn-compose"], [1041, "sklearn-compose"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1044, "sklearn-compose"]], "sklearn.decomposition": [[1035, "sklearn-decomposition"], [1035, "id4"], [1035, "id14"], [1035, "id28"], [1036, "sklearn-decomposition"], [1036, "id11"], [1037, "sklearn-decomposition"], [1038, "sklearn-decomposition"], [1038, "id6"], [1039, "sklearn-decomposition"], [1039, "id7"], [1040, "sklearn-decomposition"], [1040, "id11"], [1041, "sklearn-decomposition"], [1041, "id10"], [1042, "sklearn-decomposition"], [1042, "id14"], [1043, "sklearn-decomposition"], [1043, "id10"], [1044, "sklearn-decomposition"]], "sklearn.model_selection": [[1035, "sklearn-model-selection"], [1035, "id35"], [1036, "sklearn-model-selection"], [1037, "sklearn-model-selection"], [1037, "id9"], [1037, "id13"], [1038, "sklearn-model-selection"], [1039, "sklearn-model-selection"], [1039, "id13"], [1040, "sklearn-model-selection"], [1041, "sklearn-model-selection"], [1042, "sklearn-model-selection"], [1042, "id20"], [1043, "sklearn-model-selection"], [1044, "sklearn-model-selection"]], "sklearn.neighbors": [[1035, "sklearn-neighbors"], [1035, "id7"], [1035, "id18"], [1035, "id36"], [1036, "sklearn-neighbors"], [1036, "id5"], [1036, "id17"], [1037, "sklearn-neighbors"], [1037, "id11"], [1039, "sklearn-neighbors"], [1040, "sklearn-neighbors"], [1040, "id5"], [1040, "id18"], [1041, "sklearn-neighbors"], [1042, "sklearn-neighbors"], [1043, "sklearn-neighbors"], [1043, "id16"], [1044, "sklearn-neighbors"]], "Version 0.20.3": [[1035, "version-0-20-3"]], "sklearn.covariance": [[1035, "sklearn-covariance"], [1035, "id26"], [1039, "sklearn-covariance"], [1040, "sklearn-covariance"], [1041, "sklearn-covariance"], [1043, "sklearn-covariance"]], "sklearn.datasets": [[1035, "sklearn-datasets"], [1035, "id13"], [1035, "id27"], [1036, "sklearn-datasets"], [1036, "id10"], [1037, "sklearn-datasets"], [1038, "sklearn-datasets"], [1039, "sklearn-datasets"], [1040, "sklearn-datasets"], [1040, "id10"], [1041, "sklearn-datasets"], [1041, "id9"], [1042, "sklearn-datasets"], [1042, "id13"], [1043, "sklearn-datasets"], [1043, "id9"], [1044, "sklearn-datasets"]], "sklearn.feature_extraction": [[1035, "sklearn-feature-extraction"], [1035, "id15"], [1035, "id30"], [1036, "sklearn-feature-extraction"], [1037, "sklearn-feature-extraction"], [1038, "sklearn-feature-extraction"], [1038, "id8"], [1039, "sklearn-feature-extraction"], [1039, "id9"], [1040, "sklearn-feature-extraction"], [1040, "id13"], [1041, "sklearn-feature-extraction"], [1042, "sklearn-feature-extraction"], [1043, "sklearn-feature-extraction"]], "sklearn.impute": [[1035, "sklearn-impute"], [1035, "id31"], [1036, "sklearn-impute"], [1036, "id13"], [1037, "sklearn-impute"], [1037, "id6"], [1038, "sklearn-impute"], [1039, "sklearn-impute"], [1040, "sklearn-impute"], [1041, "sklearn-impute"], [1041, "id12"], [1042, "sklearn-impute"], [1043, "sklearn-impute"], [1043, "id13"]], "sklearn.linear_model": [[1035, "sklearn-linear-model"], [1035, "id16"], [1035, "id32"], [1036, "sklearn-linear-model"], [1036, "id15"], [1037, "sklearn-linear-model"], [1038, "sklearn-linear-model"], [1038, "id9"], [1039, "sklearn-linear-model"], [1039, "id11"], [1040, "sklearn-linear-model"], [1040, "id4"], [1040, "id15"], [1041, "sklearn-linear-model"], [1041, "id13"], [1042, "sklearn-linear-model"], [1042, "id18"], [1043, "sklearn-linear-model"], [1044, "sklearn-linear-model"]], "sklearn.preprocessing": [[1035, "sklearn-preprocessing"], [1035, "id19"], [1035, "id37"], [1036, "sklearn-preprocessing"], [1036, "id18"], [1037, "sklearn-preprocessing"], [1037, "id12"], [1038, "sklearn-preprocessing"], [1039, "sklearn-preprocessing"], [1039, "id15"], [1040, "sklearn-preprocessing"], [1040, "id20"], [1041, "sklearn-preprocessing"], [1041, "id4"], [1041, "id16"], [1042, "sklearn-preprocessing"], [1042, "id4"], [1042, "id22"], [1043, "sklearn-preprocessing"], [1043, "id17"], [1044, "sklearn-preprocessing"]], "sklearn.svm": [[1035, "sklearn-svm"], [1035, "id38"], [1036, "sklearn-svm"], [1037, "sklearn-svm"], [1038, "sklearn-svm"], [1039, "sklearn-svm"], [1040, "sklearn-svm"], [1040, "id21"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1043, "sklearn-svm"]], "Version 0.20.2": [[1035, "version-0-20-2"]], "sklearn.metrics": [[1035, "sklearn-metrics"], [1035, "id17"], [1035, "id33"], [1036, "sklearn-metrics"], [1036, "id4"], [1036, "id16"], [1037, "sklearn-metrics"], [1037, "id2"], [1037, "id8"], [1038, "sklearn-metrics"], [1038, "id10"], [1039, "sklearn-metrics"], [1039, "id2"], [1039, "id12"], [1040, "sklearn-metrics"], [1040, "id17"], [1041, "sklearn-metrics"], [1041, "id3"], [1041, "id15"], [1042, "sklearn-metrics"], [1043, "sklearn-metrics"], [1043, "id2"], [1043, "id14"], [1044, "sklearn-metrics"]], "sklearn.utils": [[1035, "sklearn-utils"], [1035, "id20"], [1035, "id39"], [1036, "sklearn-utils"], [1037, "sklearn-utils"], [1037, "id14"], [1038, "sklearn-utils"], [1038, "id12"], [1039, "sklearn-utils"], [1039, "id18"], [1040, "sklearn-utils"], [1040, "id6"], [1040, "id23"], [1041, "sklearn-utils"], [1041, "id18"], [1042, "sklearn-utils"], [1042, "id6"], [1042, "id24"], [1043, "sklearn-utils"], [1044, "sklearn-utils"]], "Version 0.20.1": [[1035, "version-0-20-1"]], "sklearn.ensemble": [[1035, "sklearn-ensemble"], [1035, "id29"], [1036, "sklearn-ensemble"], [1036, "id12"], [1037, "sklearn-ensemble"], [1038, "sklearn-ensemble"], [1038, "id7"], [1039, "sklearn-ensemble"], [1039, "id8"], [1040, "sklearn-ensemble"], [1040, "id3"], [1040, "id12"], [1041, "sklearn-ensemble"], [1042, "sklearn-ensemble"], [1042, "id3"], [1042, "id15"], [1043, "sklearn-ensemble"], [1043, "id11"], [1044, "sklearn-ensemble"]], "sklearn.mixture": [[1035, "sklearn-mixture"], [1035, "id34"], [1036, "sklearn-mixture"], [1040, "sklearn-mixture"], [1041, "sklearn-mixture"], [1043, "sklearn-mixture"], [1043, "id15"]], "Version 0.20.0": [[1035, "version-0-20-0"]], "Known Major Bugs": [[1035, "known-major-bugs"], [1036, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1035, "sklearn-discriminant-analysis"], [1036, "sklearn-discriminant-analysis"], [1039, "sklearn-discriminant-analysis"], [1041, "sklearn-discriminant-analysis"], [1042, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1035, "sklearn-dummy"], [1036, "sklearn-dummy"], [1037, "sklearn-dummy"], [1040, "sklearn-dummy"], [1041, "sklearn-dummy"]], "sklearn.feature_selection": [[1035, "sklearn-feature-selection"], [1037, "sklearn-feature-selection"], [1038, "sklearn-feature-selection"], [1039, "sklearn-feature-selection"], [1040, "sklearn-feature-selection"], [1040, "id14"], [1041, "sklearn-feature-selection"], [1041, "id2"], [1041, "id11"], [1042, "sklearn-feature-selection"], [1042, "id16"], [1043, "sklearn-feature-selection"], [1043, "id12"], [1044, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1035, "sklearn-gaussian-process"], [1037, "sklearn-gaussian-process"], [1038, "sklearn-gaussian-process"], [1039, "sklearn-gaussian-process"], [1039, "id10"], [1040, "sklearn-gaussian-process"], [1041, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1035, "sklearn-isotonic"], [1036, "sklearn-isotonic"], [1037, "sklearn-isotonic"], [1039, "sklearn-isotonic"], [1041, "sklearn-isotonic"], [1042, "sklearn-isotonic"]], "sklearn.manifold": [[1035, "sklearn-manifold"], [1036, "sklearn-manifold"], [1037, "sklearn-manifold"], [1038, "sklearn-manifold"], [1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1040, "id16"], [1041, "sklearn-manifold"], [1041, "id14"], [1042, "sklearn-manifold"], [1042, "id19"], [1043, "sklearn-manifold"]], "sklearn.multioutput": [[1035, "sklearn-multioutput"], [1036, "sklearn-multioutput"], [1037, "sklearn-multioutput"], [1038, "sklearn-multioutput"], [1039, "sklearn-multioutput"], [1039, "id14"], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1035, "sklearn-naive-bayes"], [1037, "sklearn-naive-bayes"], [1037, "id10"], [1038, "sklearn-naive-bayes"], [1039, "sklearn-naive-bayes"], [1040, "sklearn-naive-bayes"], [1042, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1035, "sklearn-neural-network"], [1036, "sklearn-neural-network"], [1037, "sklearn-neural-network"], [1038, "sklearn-neural-network"], [1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1042, "id21"], [1043, "sklearn-neural-network"]], "sklearn.pipeline": [[1035, "sklearn-pipeline"], [1036, "sklearn-pipeline"], [1037, "sklearn-pipeline"], [1038, "sklearn-pipeline"], [1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1040, "id19"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"]], "sklearn.tree": [[1035, "sklearn-tree"], [1036, "sklearn-tree"], [1036, "id19"], [1037, "sklearn-tree"], [1038, "sklearn-tree"], [1039, "sklearn-tree"], [1039, "id17"], [1040, "sklearn-tree"], [1040, "id22"], [1041, "sklearn-tree"], [1041, "id5"], [1041, "id17"], [1042, "sklearn-tree"], [1042, "id5"], [1042, "id23"], [1043, "sklearn-tree"], [1043, "id3"], [1043, "id18"], [1044, "sklearn-tree"]], "Multiple modules": [[1035, "multiple-modules"], [1036, "multiple-modules"]], "Changes to estimator checks": [[1035, "changes-to-estimator-checks"], [1036, "changes-to-estimator-checks"], [1037, "changes-to-estimator-checks"]], "Version 0.21.3": [[1036, "version-0-21-3"]], "Legend for changelogs": [[1036, "legend-for-changelogs"], [1037, "legend-for-changelogs"], [1038, "legend-for-changelogs"], [1039, "legend-for-changelogs"], [1040, "legend-for-changelogs"], [1041, "legend-for-changelogs"], [1042, "legend-for-changelogs"], [1043, "legend-for-changelogs"], [1044, "legend-for-changelogs"]], "sklearn.inspection": [[1036, "sklearn-inspection"], [1036, "id3"], [1036, "id14"], [1037, "sklearn-inspection"], [1037, "id7"], [1038, "sklearn-inspection"], [1038, "id11"], [1039, "sklearn-inspection"], [1040, "sklearn-inspection"], [1041, "sklearn-inspection"], [1042, "sklearn-inspection"], [1042, "id17"], [1043, "sklearn-inspection"], [1044, "sklearn-inspection"]], "Version 0.21.2": [[1036, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1036, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1036, "version-0-21-1"]], "Version 0.21.0": [[1036, "version-0-21-0"]], "sklearn.base": [[1036, "sklearn-base"], [1037, "sklearn-base"], [1039, "sklearn-base"], [1040, "sklearn-base"], [1041, "sklearn-base"], [1042, "sklearn-base"], [1042, "id2"], [1042, "id10"], [1043, "sklearn-base"], [1044, "sklearn-base"]], "sklearn.calibration": [[1036, "sklearn-calibration"], [1037, "sklearn-calibration"], [1039, "sklearn-calibration"], [1040, "sklearn-calibration"], [1040, "id8"], [1041, "sklearn-calibration"], [1042, "sklearn-calibration"], [1042, "id11"], [1043, "sklearn-calibration"], [1043, "id7"], [1044, "sklearn-calibration"]], "sklearn.externals": [[1036, "sklearn-externals"]], "sklearn.multiclass": [[1036, "sklearn-multiclass"], [1039, "sklearn-multiclass"], [1040, "sklearn-multiclass"], [1041, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1037, "version-0-22-2-post1"]], "Version 0.22.1": [[1037, "version-0-22-1"]], "sklearn.semi_supervised": [[1037, "sklearn-semi-supervised"], [1038, "sklearn-semi-supervised"], [1039, "sklearn-semi-supervised"], [1039, "id3"], [1039, "id16"], [1043, "sklearn-semi-supervised"]], "Version 0.22.0": [[1037, "version-0-22-0"]], "Website update": [[1037, "website-update"]], "Clear definition of the public API": [[1037, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1037, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1037, "sklearn-cross-decomposition"], [1039, "sklearn-cross-decomposition"], [1039, "id6"], [1041, "sklearn-cross-decomposition"], [1043, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1037, "sklearn-kernel-approximation"], [1039, "sklearn-kernel-approximation"], [1040, "sklearn-kernel-approximation"], [1041, "sklearn-kernel-approximation"], [1042, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1038, "version-0-23-2"]], "Version 0.23.1": [[1038, "version-0-23-1"]], "Version 0.23.0": [[1038, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1038, "enforcing-keyword-only-arguments"], [1040, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1039, "version-0-24-2"]], "Version 0.24.1": [[1039, "version-0-24-1"]], "Packaging": [[1039, "packaging"]], "Version 0.24.0": [[1039, "version-0-24-0"]], "sklearn.exceptions": [[1039, "sklearn-exceptions"], [1043, "sklearn-exceptions"]], "Version 1.0.2": [[1040, "version-1-0-2"]], "Version 1.0.1": [[1040, "version-1-0-1"]], "Fixed models": [[1040, "fixed-models"]], "Version 1.0.0": [[1040, "version-1-0-0"]], "Minimal dependencies": [[1040, "minimal-dependencies"], [1041, "minimal-dependencies"]], "Version 1.1.3": [[1041, "version-1-1-3"]], "Version 1.1.2": [[1041, "version-1-1-2"]], "Version 1.1.1": [[1041, "version-1-1-1"]], "Version 1.1.0": [[1041, "version-1-1-0"]], "sklearn.random_projection": [[1041, "sklearn-random-projection"]], "Version 1.2.2": [[1042, "version-1-2-2"]], "Version 1.2.1": [[1042, "version-1-2-1"]], "Changes impacting all modules": [[1042, "changes-impacting-all-modules"], [1042, "id8"], [1043, "changes-impacting-all-modules"], [1043, "id5"], [1044, "changes-impacting-all-modules"]], "Version 1.2.0": [[1042, "version-1-2-0"]], "Version 1.3.2": [[1043, "version-1-3-2"]], "Version 1.3.1": [[1043, "version-1-3-1"]], "Version 1.3.0": [[1043, "version-1-3-0"]], "Changed displays": [[1043, "changed-displays"]], "Experimental / Under Development": [[1043, "experimental-under-development"]], "sklearn": [[1043, "sklearn"]], "Version 1.4.0": [[1044, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1044, "support-for-scipy-sparse-arrays"]]}, "indexentries": {"1d": [[392, "term-1d"]], "1d array": [[392, "term-1d-array"]], "2d": [[392, "term-2d"]], "2d array": [[392, "term-2d-array"]], "api": [[392, "term-API"]], "cv splitter": [[392, "term-CV-splitter"]], "slep": [[392, "term-SLEP"]], "sleps": [[392, "term-SLEPs"]], "x": [[392, "term-X"]], "xt": [[392, "term-Xt"]], "y": [[392, "term-Y"], [392, "term-y"]], "_estimator_type": [[392, "term-_estimator_type"]], "array-like": [[392, "term-array-like"]], "attribute": [[392, "term-attribute"]], "attributes": [[392, "term-attributes"]], "backwards compatibility": [[392, "term-backwards-compatibility"]], "binary": [[392, "term-binary"]], "callable": [[392, "term-callable"]], "categorical feature": [[392, "term-categorical-feature"]], "class_weight": [[392, "term-class_weight"]], "classes_": [[392, "term-classes_"]], "classifier": [[392, "term-classifier"]], "classifiers": [[392, "term-classifiers"]], "clone": [[392, "term-clone"]], "cloned": [[392, "term-cloned"]], "clusterer": [[392, "term-clusterer"]], "clusterers": [[392, "term-clusterers"]], "coef_": [[392, "term-coef_"]], "common tests": [[392, "term-common-tests"]], "components_": [[392, "term-components_"]], "consumer": [[392, "term-consumer"]], "continuous": [[392, "term-continuous"]], "continuous multi-output": [[392, "term-continuous-multi-output"]], "continuous multioutput": [[392, "term-continuous-multioutput"]], "cross fitting": [[392, "term-0"]], "cross validation": [[392, "term-1"]], "cross-fitting": [[392, "term-cross-fitting"]], "cross-validation": [[392, "term-cross-validation"]], "cross-validation estimator": [[392, "term-cross-validation-estimator"]], "cross-validation generator": [[392, "term-cross-validation-generator"]], "cross-validation splitter": [[392, "term-cross-validation-splitter"]], "cv": [[392, "term-cv"]], "data leakage": [[392, "term-data-leakage"]], "data type": [[392, "term-data-type"]], "decision_function": [[392, "term-decision_function"]], "density estimator": [[392, "term-density-estimator"]], "deprecation": [[392, "term-deprecation"]], "dimensionality": [[392, "term-dimensionality"]], "docstring": [[392, "term-docstring"]], "double underscore": [[392, "term-double-underscore"]], "double underscore notation": [[392, "term-double-underscore-notation"]], "dtype": [[392, "term-dtype"]], "duck typing": [[392, "term-duck-typing"]], "early stopping": [[392, "term-early-stopping"]], "embedding_": [[392, "term-embedding_"]], "estimator": [[392, "term-estimator"]], "estimator instance": [[392, "term-estimator-instance"]], "estimator tags": [[392, "term-estimator-tags"]], "estimators": [[392, "term-estimators"]], "evaluation metric": [[392, "term-evaluation-metric"]], "evaluation metrics": [[392, "term-evaluation-metrics"]], "examples": [[392, "term-examples"]], "experimental": [[392, "term-experimental"]], "feature": [[392, "term-feature"]], "feature extractor": [[392, "term-feature-extractor"]], "feature extractors": [[392, "term-feature-extractors"]], "feature vector": [[392, "term-feature-vector"]], "feature_importances_": [[392, "term-feature_importances_"]], "features": [[392, "term-features"]], "fit": [[392, "term-fit"]], "fit_predict": [[392, "term-fit_predict"]], "fit_transform": [[392, "term-fit_transform"]], "fitted": [[392, "term-fitted"]], "fitting": [[392, "term-fitting"]], "function": [[392, "term-function"]], "gallery": [[392, "term-gallery"]], "get_feature_names_out": [[392, "term-get_feature_names_out"]], "get_n_splits": [[392, "term-get_n_splits"]], "get_params": [[392, "term-get_params"]], "groups": [[392, "term-groups"]], "hyper-parameter": [[392, "term-hyper-parameter"]], "hyperparameter": [[392, "term-hyperparameter"]], "imputation": [[392, "term-imputation"]], "impute": [[392, "term-impute"]], "indexable": [[392, "term-indexable"]], "induction": [[392, "term-induction"]], "inductive": [[392, "term-inductive"]], "joblib": [[392, "term-joblib"]], "kernel": [[392, "term-kernel"]], "label indicator matrix": [[392, "term-label-indicator-matrix"]], "labels_": [[392, "term-labels_"]], "leakage": [[392, "term-leakage"]], "max_iter": [[392, "term-max_iter"]], "memmapping": [[392, "term-memmapping"]], "memory": [[392, "term-memory"]], "memory map": [[392, "term-memory-map"]], "memory mapping": [[392, "term-memory-mapping"]], "meta-estimator": [[392, "term-meta-estimator"]], "meta-estimators": [[392, "term-meta-estimators"]], "metadata": [[392, "term-metadata"]], "metaestimator": [[392, "term-metaestimator"]], "metaestimators": [[392, "term-metaestimators"]], "metric": [[392, "term-metric"]], "missing values": [[392, "term-missing-values"]], "multi-class": [[392, "term-multi-class"]], "multi-class multi-output": [[392, "term-multi-class-multi-output"]], "multi-label": [[392, "term-multi-label"]], "multi-output": [[392, "term-multi-output"]], "multi-output continuous": [[392, "term-multi-output-continuous"]], "multi-output multi-class": [[392, "term-multi-output-multi-class"]], "multiclass": [[392, "term-multiclass"]], "multiclass multioutput": [[392, "term-multiclass-multioutput"]], "multilabel": [[392, "term-multilabel"]], "multilabel indicator matrices": [[392, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[392, "term-multilabel-indicator-matrix"]], "multioutput": [[392, "term-multioutput"]], "multioutput continuous": [[392, "term-multioutput-continuous"]], "multioutput multiclass": [[392, "term-multioutput-multiclass"]], "n_components": [[392, "term-n_components"]], "n_features": [[392, "term-n_features"]], "n_iter_": [[392, "term-n_iter_"]], "n_iter_no_change": [[392, "term-n_iter_no_change"]], "n_jobs": [[392, "term-n_jobs"]], "n_outputs": [[392, "term-n_outputs"]], "n_samples": [[392, "term-n_samples"]], "n_targets": [[392, "term-n_targets"]], "narrative docs": [[392, "term-narrative-docs"]], "narrative documentation": [[392, "term-narrative-documentation"]], "np": [[392, "term-np"]], "online learning": [[392, "term-online-learning"]], "out-of-core": [[392, "term-out-of-core"]], "outlier detector": [[392, "term-outlier-detector"]], "outlier detectors": [[392, "term-outlier-detectors"]], "outputs": [[392, "term-outputs"]], "pair": [[392, "term-pair"]], "pairwise metric": [[392, "term-pairwise-metric"]], "pairwise metrics": [[392, "term-pairwise-metrics"]], "param": [[392, "term-param"]], "parameter": [[392, "term-parameter"]], "parameters": [[392, "term-parameters"]], "params": [[392, "term-params"]], "partial_fit": [[392, "term-partial_fit"]], "pd": [[392, "term-pd"]], "pos_label": [[392, "term-pos_label"]], "precomputed": [[392, "term-precomputed"]], "predict": [[392, "term-predict"]], "predict_log_proba": [[392, "term-predict_log_proba"]], "predict_proba": [[392, "term-predict_proba"]], "predictor": [[392, "term-predictor"]], "predictors": [[392, "term-predictors"]], "random_state": [[392, "term-random_state"]], "rectangular": [[392, "term-rectangular"]], "regressor": [[392, "term-regressor"]], "regressors": [[392, "term-regressors"]], "router": [[392, "term-router"]], "sample": [[392, "term-sample"]], "sample properties": [[392, "term-sample-properties"]], "sample property": [[392, "term-sample-property"]], "sample_weight": [[392, "term-sample_weight"]], "samples": [[392, "term-samples"]], "scikit-learn enhancement proposals": [[392, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[392, "term-scikit-learn-contrib"]], "score": [[392, "term-score"]], "score_samples": [[392, "term-score_samples"]], "scorer": [[392, "term-scorer"]], "scoring": [[392, "term-scoring"]], "semi-supervised": [[392, "term-semi-supervised"]], "semi-supervised learning": [[392, "term-semi-supervised-learning"]], "semisupervised": [[392, "term-semisupervised"]], "set_params": [[392, "term-set_params"]], "sparse graph": [[392, "term-sparse-graph"]], "sparse matrix": [[392, "term-sparse-matrix"]], "split": [[392, "term-split"]], "stateless": [[392, "term-stateless"]], "supervised": [[392, "term-supervised"]], "supervised learning": [[392, "term-supervised-learning"]], "target": [[392, "term-target"]], "targets": [[392, "term-targets"]], "transduction": [[392, "term-transduction"]], "transductive": [[392, "term-transductive"]], "transform": [[392, "term-transform"]], "transformer": [[392, "term-transformer"]], "transformers": [[392, "term-transformers"]], "unlabeled": [[392, "term-unlabeled"]], "unlabeled data": [[392, "term-unlabeled-data"]], "unsupervised": [[392, "term-unsupervised"]], "unsupervised learning": [[392, "term-unsupervised-learning"]], "vectorizer": [[392, "term-vectorizer"]], "vectorizers": [[392, "term-vectorizers"]], "verbose": [[392, "term-verbose"]], "warm_start": [[392, "term-warm_start"]], "module": [[404, "module-sklearn"], [404, "module-sklearn.base"], [404, "module-sklearn.calibration"], [404, "module-sklearn.cluster"], [404, "module-sklearn.compose"], [404, "module-sklearn.covariance"], [404, "module-sklearn.cross_decomposition"], [404, "module-sklearn.datasets"], [404, "module-sklearn.decomposition"], [404, "module-sklearn.discriminant_analysis"], [404, "module-sklearn.dummy"], [404, "module-sklearn.ensemble"], [404, "module-sklearn.exceptions"], [404, "module-sklearn.experimental"], [404, "module-sklearn.feature_extraction"], [404, "module-sklearn.feature_extraction.image"], [404, "module-sklearn.feature_extraction.text"], [404, "module-sklearn.feature_selection"], [404, "module-sklearn.gaussian_process"], [404, "module-sklearn.gaussian_process.kernels"], [404, "module-sklearn.impute"], [404, "module-sklearn.inspection"], [404, "module-sklearn.isotonic"], [404, "module-sklearn.kernel_approximation"], [404, "module-sklearn.kernel_ridge"], [404, "module-sklearn.linear_model"], [404, "module-sklearn.manifold"], [404, "module-sklearn.metrics"], [404, "module-sklearn.metrics.cluster"], [404, "module-sklearn.metrics.pairwise"], [404, "module-sklearn.mixture"], [404, "module-sklearn.model_selection"], [404, "module-sklearn.multiclass"], [404, "module-sklearn.multioutput"], [404, "module-sklearn.naive_bayes"], [404, "module-sklearn.neighbors"], [404, "module-sklearn.neural_network"], [404, "module-sklearn.pipeline"], [404, "module-sklearn.preprocessing"], [404, "module-sklearn.random_projection"], [404, "module-sklearn.semi_supervised"], [404, "module-sklearn.svm"], [404, "module-sklearn.tree"], [404, "module-sklearn.utils"], [404, "module-sklearn.utils.arrayfuncs"], [404, "module-sklearn.utils.class_weight"], [404, "module-sklearn.utils.discovery"], [404, "module-sklearn.utils.estimator_checks"], [404, "module-sklearn.utils.extmath"], [404, "module-sklearn.utils.graph"], [404, "module-sklearn.utils.metadata_routing"], [404, "module-sklearn.utils.metaestimators"], [404, "module-sklearn.utils.multiclass"], [404, "module-sklearn.utils.parallel"], [404, "module-sklearn.utils.random"], [404, "module-sklearn.utils.sparsefuncs"], [404, "module-sklearn.utils.sparsefuncs_fast"], [404, "module-sklearn.utils.validation"], [575, "module-sklearn.experimental.enable_halving_search_cv"], [576, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[404, "module-sklearn"]], "sklearn.base": [[404, "module-sklearn.base"]], "sklearn.calibration": [[404, "module-sklearn.calibration"]], "sklearn.cluster": [[404, "module-sklearn.cluster"]], "sklearn.compose": [[404, "module-sklearn.compose"]], "sklearn.covariance": [[404, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[404, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[404, "module-sklearn.datasets"]], "sklearn.decomposition": [[404, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[404, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[404, "module-sklearn.dummy"]], "sklearn.ensemble": [[404, "module-sklearn.ensemble"]], "sklearn.exceptions": [[404, "module-sklearn.exceptions"]], "sklearn.experimental": [[404, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[404, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[404, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[404, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[404, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[404, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[404, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[404, "module-sklearn.impute"]], "sklearn.inspection": [[404, "module-sklearn.inspection"]], "sklearn.isotonic": [[404, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[404, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[404, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[404, "module-sklearn.linear_model"]], "sklearn.manifold": [[404, "module-sklearn.manifold"]], "sklearn.metrics": [[404, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[404, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[404, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[404, "module-sklearn.mixture"]], "sklearn.model_selection": [[404, "module-sklearn.model_selection"]], "sklearn.multiclass": [[404, "module-sklearn.multiclass"]], "sklearn.multioutput": [[404, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[404, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[404, "module-sklearn.neighbors"]], "sklearn.neural_network": [[404, "module-sklearn.neural_network"]], "sklearn.pipeline": [[404, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[404, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[404, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[404, "module-sklearn.semi_supervised"]], "sklearn.svm": [[404, "module-sklearn.svm"]], "sklearn.tree": [[404, "module-sklearn.tree"]], "sklearn.utils": [[404, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[404, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[404, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[404, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[404, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[404, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[404, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[404, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[404, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[404, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[404, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[404, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[404, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[404, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[404, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[416, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[417, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[418, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[419, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[419, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[419, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[419, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[420, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[420, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[420, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[420, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[420, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[421, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[421, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[422, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[422, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[423, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[423, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[424, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[424, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[425, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[426, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[426, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[427, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[427, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[428, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[428, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[429, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[429, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[429, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[430, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[431, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[432, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[433, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[433, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[434, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[434, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[434, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[434, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[435, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[436, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[436, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[436, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[436, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[436, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[436, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[436, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[437, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[437, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[437, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[437, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[437, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[437, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[438, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[438, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[439, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[439, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[440, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[440, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[440, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[440, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[440, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[440, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[440, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[441, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[441, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[441, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[442, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[442, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[442, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[442, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[442, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[442, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[442, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[443, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[443, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[444, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[444, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[444, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[444, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[444, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[444, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[444, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[445, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[445, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[446, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[446, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[446, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[446, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[446, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[446, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[447, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[447, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[447, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[448, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[448, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[448, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[448, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[448, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[448, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[449, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[449, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[449, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[450, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[451, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[452, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[453, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[454, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[455, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[456, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[457, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[458, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[459, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[460, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[460, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[460, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[461, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[461, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[461, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[462, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[463, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[464, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[465, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[465, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[466, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[466, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[467, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[467, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[468, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[468, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[469, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[469, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[470, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[470, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[471, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[471, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[472, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[472, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[473, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[474, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[475, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[476, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[477, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[478, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[478, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[479, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[479, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[480, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[480, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[481, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[482, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[483, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[484, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[495, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[496, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[497, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[527, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[527, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[528, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[528, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[529, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[529, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[530, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[530, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[531, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[531, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[532, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[532, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[533, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[534, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[534, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[535, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[536, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[536, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[537, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[538, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[538, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[538, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[538, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[539, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[540, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[540, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[541, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[542, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[543, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[544, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[545, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[547, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[547, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[548, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[548, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[549, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[549, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[549, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[549, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[550, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[550, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[550, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[550, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[551, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[551, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[551, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[551, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[552, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[552, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[552, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[552, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[553, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[553, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[553, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[554, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[554, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[554, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[555, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[555, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[555, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[556, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[556, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[556, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[557, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[558, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[559, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[559, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[559, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[559, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[560, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[560, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[560, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[561, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[561, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[561, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[562, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[562, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[562, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[562, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[563, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[563, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[563, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[564, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[564, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[564, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[565, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[565, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[565, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[566, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[566, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[566, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[567, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[567, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[568, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[568, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[569, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[570, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[570, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[571, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[572, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[573, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[573, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[574, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[575, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[576, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[577, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[577, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[578, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[578, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[579, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[579, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[580, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[581, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[582, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[584, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[584, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[585, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[585, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[586, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[586, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[587, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[588, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[588, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[589, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[589, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[590, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[590, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[591, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[592, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[593, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[593, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[593, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[594, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[595, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[596, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[597, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[597, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[597, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[597, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[597, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[597, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[598, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[599, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[600, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[601, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[602, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[606, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[607, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[608, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[609, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[610, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[610, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[610, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[610, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[610, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[610, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[610, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[610, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[610, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[610, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[610, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[611, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[612, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[613, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[614, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[614, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[614, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[614, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[614, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[614, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[614, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[614, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[614, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[614, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[614, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[615, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[615, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[615, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[615, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[615, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[615, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[615, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[615, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[615, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[615, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[615, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[616, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[617, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[617, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[617, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[617, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[617, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[617, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[617, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[617, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[617, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[617, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[617, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[618, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[618, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[618, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[618, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[618, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[618, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[618, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[618, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[618, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[618, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[618, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[619, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[620, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[620, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[620, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[620, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[620, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[620, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[620, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[620, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[620, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[620, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[620, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[621, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[622, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[623, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[623, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[624, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[624, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[625, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[625, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[626, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[626, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[627, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[627, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[627, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[628, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[628, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[628, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[629, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[630, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[631, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[631, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[632, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[633, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[634, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[635, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[635, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[636, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[637, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[637, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[638, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[639, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[639, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[640, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[640, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[641, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[641, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[642, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[642, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[642, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[642, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[643, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[643, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[643, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[644, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[644, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[645, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[645, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[646, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[646, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[647, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[647, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[648, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[648, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[648, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[648, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[649, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[649, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[649, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[650, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[650, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[651, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[652, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[653, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[654, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[655, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[656, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[656, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[656, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[657, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[658, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[658, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[658, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[658, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[659, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[660, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[662, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[663, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[664, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[664, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[665, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[665, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[666, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[666, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[667, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[668, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[668, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[669, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[669, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[670, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[670, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[670, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[671, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[671, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[672, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[672, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[673, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[673, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[674, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[675, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[676, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[677, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[678, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[679, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[684, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[684, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[685, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[685, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[686, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[686, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[686, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[686, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[686, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[686, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[686, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[687, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[687, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[687, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[687, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[687, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[687, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[688, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[688, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[689, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[690, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[691, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[692, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[693, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[693, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[693, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[693, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[694, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[694, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[694, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[694, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[695, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[695, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[696, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[696, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[696, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[696, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[697, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[697, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[697, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[698, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[698, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[698, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[702, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[705, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[707, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[708, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[709, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[710, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[711, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[714, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[716, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[722, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[727, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[728, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[729, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[730, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[731, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[735, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[736, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[737, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[738, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[739, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[740, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[741, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[749, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[750, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[751, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[752, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[773, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[774, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[775, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[776, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[777, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[778, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[779, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[780, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[782, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[784, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[785, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[786, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[787, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[791, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[792, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[792, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[793, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[793, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[794, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[794, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[794, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[794, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[795, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[795, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[795, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[795, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[795, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[796, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[796, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[796, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[796, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[796, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[797, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[797, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[797, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[797, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[798, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[798, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[799, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[799, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[799, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[799, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[800, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[800, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[800, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[801, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[801, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[801, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[801, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[801, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[802, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[802, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[802, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[802, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[803, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[803, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[803, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[803, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[803, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[804, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[804, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[804, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[804, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[805, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[806, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[807, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[807, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[807, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[807, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[808, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[808, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[808, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[808, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[809, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[809, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[809, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[809, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[810, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[810, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[810, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[810, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[811, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[811, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[811, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[811, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[812, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[812, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[812, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[812, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[812, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[813, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[813, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[813, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[813, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[814, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[814, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[814, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[814, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[815, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[815, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[815, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[815, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[816, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[816, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[816, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[817, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[818, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[819, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[820, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[821, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[822, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[823, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[825, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[825, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[825, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[826, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[826, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[826, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[826, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[827, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[827, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[828, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[828, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[829, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[829, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[830, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[830, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[831, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[831, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[832, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[832, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[833, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[833, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[834, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[834, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[835, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[835, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[836, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[836, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[837, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[837, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[838, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[838, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[839, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[839, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[840, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[840, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[841, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[841, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[842, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[842, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[843, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[843, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[844, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[844, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[845, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[845, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[846, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[847, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[848, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[849, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[850, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[851, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[852, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[853, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[853, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[854, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[854, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[855, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[855, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[856, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[856, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[856, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[856, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[857, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[857, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[857, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[857, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[857, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[857, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[858, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[859, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[860, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[861, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[862, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[863, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[864, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[865, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[866, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[867, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[868, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[869, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[870, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[870, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[871, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[871, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[872, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[872, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[873, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[874, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[875, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[876, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[877, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[878, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[878, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[879, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[880, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[885, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[889, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[889, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[890, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[890, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[891, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[892, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[892, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[893, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[893, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[894, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[895, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[896, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[897, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[897, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[898, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[898, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[899, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[899, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[899, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[899, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[899, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[899, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[900, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[900, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[900, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[900, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[901, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[901, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[901, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[901, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[902, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[902, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[902, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[902, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[902, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[902, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[903, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[903, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[903, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[903, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[904, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[905, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[905, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[905, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[906, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[906, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[906, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[907, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[907, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[907, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[908, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[908, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[908, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[909, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[910, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[911, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[912, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[912, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[913, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[914, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[915, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[916, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[917, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[918, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[919, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[920, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[921, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[922, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[923, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[924, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[925, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[926, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[927, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[928, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[929, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[930, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[931, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[932, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[933, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[934, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[935, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[936, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[937, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[938, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[939, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[940, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[941, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[941, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[942, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[942, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[942, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[942, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[942, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[942, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[943, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[943, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[943, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[944, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[945, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[946, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[947, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[948, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[949, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[950, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[951, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[951, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[951, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[951, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[951, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[952, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[953, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[954, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[955, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[956, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[957, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[958, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[959, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[960, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[961, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[962, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[963, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[964, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[965, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[966, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[967, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[968, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[969, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[970, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[971, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[972, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[973, "sklearn.utils.validation.has_fit_parameter"]]}})