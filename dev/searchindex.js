Search.setIndex({"alltitles": {"(Generalized) linear models": [[218, "generalized-linear-models"]], "1-way partial dependence with different models": [[192, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[104, "newsgroups-dataset"]], "2D interaction plots": [[192, "d-interaction-plots"]], "3D representation": [[192, "d-representation"]], "A constant prediction baseline": [[218, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[93, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[82, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[98, null]], "A more flexible plotting API": [[329, "a-more-flexible-plotting-api"]], "A note on shuffling": [[420, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[390, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[383, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1006, "aic-and-bic-criteria"]], "API Interface": [[407, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1048, "api-changes"]], "API changes summary": [[1041, "api-changes-summary"], [1041, "id4"], [1041, "id7"], [1041, "id10"], [1042, "api-changes-summary"], [1043, "api-changes-summary"], [1044, "api-changes-summary"], [1045, "api-changes-summary"], [1046, "api-changes-summary"], [1047, "api-changes-summary"], [1047, "id6"], [1048, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[386, "apis-of-scikit-learn-objects"]], "ARDRegression": [[653, null]], "ARFF parser": [[378, "arff-parser"]], "AWeber": [[1034, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[181, null]], "Ablation study": [[255, "ablation-study"]], "About the project": [[396, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[417, "access-pipeline-steps"]], "Access to nested parameters": [[417, "access-to-nested-parameters"]], "Accuracy of the Model": [[193, "accuracy-of-the-model"]], "Accuracy score": [[1010, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[362, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[423, "adaboost"]], "AdaBoostClassifier": [[562, null]], "AdaBoostRegressor": [[563, null]], "Add support for monotonic constraints in tree-based models": [[333, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[416, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[1002, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[647, null]], "Addressing the problem with a business metric": [[270, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[256, null]], "Advantages:": [[416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null]], "Affinity Propagation": [[416, "affinity-propagation"]], "AffinityPropagation": [[448, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[449, null]], "Aggressive elimination of candidates": [[999, "aggressive-elimination-of-candidates"]], "Algorithms": [[1014, "algorithms"]], "Alpine Linux": [[402, "alpine-linux"]], "Alternatives to brute force parameter search": [[999, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[255, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[136, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[94, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[402, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[138, "analysis"]], "Analysis of a bag-of-words document classifier": [[358, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[151, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[192, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[999, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[424, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[297, null]], "Arch Linux": [[402, "arch-linux"]], "Architectural / general goals": [[1030, "architectural-general-goals"]], "Array API support (experimental)": [[412, null]], "Artwork": [[0, "artwork"]], "Attributes": [[398, "attributes"]], "Authors": [[1041, "authors"], [1041, "id20"]], "Automated Contributions Policy": [[384, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[203, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1006, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[397, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1038, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1037, null]], "BIRCH": [[416, "birch"]], "BNP Paribas Cardif": [[1034, "id29"]], "Bagging meta-estimator": [[423, "bagging-meta-estimator"]], "BaggingClassifier": [[564, null]], "BaggingRegressor": [[565, null]], "Balance model complexity and cross-validated score": [[275, null]], "Balanced accuracy score": [[1010, "balanced-accuracy-score"]], "Ball Tree": [[1013, "ball-tree"]], "BallTree": [[853, null]], "BaseEstimator": [[430, null]], "BaseEstimator and mixins:": [[386, null]], "Basic kernels": [[426, "basic-kernels"]], "Basic shrinkage": [[418, "basic-shrinkage"]], "Bayesian Regression": [[1006, "bayesian-regression"]], "Bayesian Ridge Regression": [[1006, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[198, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[806, null]], "BayesianRidge": [[654, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[358, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1012, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1015, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[848, null]], "BernoulliRBM": [[869, null]], "Bestofmedia Group": [[1034, "id13"]], "BiclusterMixin": [[431, null]], "Biclustering": [[56, null], [188, "biclustering"], [380, "biclustering"], [413, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[413, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[192, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[876, null]], "Binary Case": [[1006, "binary-case"]], "Binary case": [[1010, "binary-case"]], "Binary classification": [[1010, "binary-classification"]], "Birch": [[450, null]], "Birchbox": [[1034, "id12"]], "Bisecting K-Means": [[416, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[451, null]], "BisectingKMeans: divide and cluster": [[330, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[125, null]], "Boil down your script to something as small as possible": [[389, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[164, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1034, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[381, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1010, "brier-score-loss"]], "Brute Force": [[1013, "brute-force"]], "Bug Tracker": [[1033, "bug-tracker"]], "Bug fixes": [[1044, "bug-fixes"], [1044, "id1"], [1044, "id3"], [1045, "bug-fixes"], [1045, "id3"], [1046, "bug-fixes"], [1046, "id3"], [1047, "bug-fixes"], [1047, "id5"], [1048, "bug-fixes"], [1048, "id4"]], "Bug triaging and issue curation": [[383, null]], "Build a pipeline": [[417, "build-a-pipeline"]], "Build dependencies": [[382, "build-dependencies"]], "Build the dataset": [[180, "build-the-dataset"]], "Building a specific version from a tag": [[382, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[392, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[382, "building-from-source"]], "Building the documentation": [[384, "building-the-documentation"]], "Bulk versus Atomic mode": [[371, "bulk-versus-atomic-mode"]], "Bunch": [[928, null]], "CCA": [[490, null]], "CCA (PLS mode B with symmetric deflation)": [[117, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[367, "cv-splitters"], [367, "id3"]], "Caching nearest neighbors": [[299, null]], "Caching transformers within a Pipeline": [[106, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[417, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[445, null]], "Calibrating a classifier": [[414, "calibrating-a-classifier"]], "Calibration": [[60, null], [188, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [414, "calibration-curves"]], "Calibration of the confidence interval": [[151, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[446, null]], "California Housing dataset": [[379, "california-housing-dataset"]], "Calinski-Harabasz Index": [[416, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[117, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[419, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[255, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[148, null]], "Categorical Features Support": [[423, "categorical-features-support"]], "Categorical Naive Bayes": [[1012, "categorical-naive-bayes"]], "CategoricalNB": [[849, null]], "Centering kernel matrices": [[1020, "centering-kernel-matrices"]], "Chain of binary classifiers": [[296, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[384, "change-the-default-value-of-a-parameter"]], "Change.org": [[1034, "id14"]], "Changed displays": [[1057, "changed-displays"]], "Changed models": [[1048, "changed-models"], [1049, "changed-models"], [1049, "id9"], [1049, "id22"], [1050, "changed-models"], [1050, "id6"], [1051, "changed-models"], [1052, "changed-models"], [1052, "id3"], [1053, "changed-models"], [1054, "changed-models"], [1055, "changed-models"], [1055, "id6"], [1056, "changed-models"], [1056, "id7"], [1057, "changed-models"], [1057, "id4"], [1058, "changed-models"], [1058, "id1"], [1059, "changed-models"]], "Changelog": [[1041, "changelog"], [1041, "id1"], [1041, "id3"], [1041, "id6"], [1041, "id9"], [1041, "id12"], [1041, "id14"], [1041, "id16"], [1041, "id18"], [1041, "id19"], [1042, "changelog"], [1042, "id2"], [1043, "changelog"], [1044, "changelog"], [1045, "changelog"], [1045, "id2"], [1046, "changelog"], [1046, "id2"], [1047, "changelog"], [1047, "id1"], [1047, "id3"], [1048, "changelog"], [1048, "id2"], [1049, "changelog"], [1049, "id1"], [1049, "id5"], [1049, "id10"], [1049, "id23"], [1050, "changelog"], [1050, "id1"], [1050, "id2"], [1050, "id7"], [1051, "changelog"], [1051, "id1"], [1051, "id4"], [1052, "changelog"], [1052, "id1"], [1052, "id4"], [1053, "changelog"], [1053, "id1"], [1053, "id4"], [1054, "changelog"], [1054, "id6"], [1055, "changelog"], [1055, "id1"], [1055, "id7"], [1056, "changelog"], [1056, "id1"], [1056, "id9"], [1057, "changelog"], [1057, "id1"], [1057, "id6"], [1058, "changelog"], [1058, "id3"], [1059, "changelog"], [1059, "id2"], [1059, "id6"], [1060, "changelog"]], "Changes impacting all modules": [[1056, "changes-impacting-all-modules"], [1056, "id8"], [1057, "changes-impacting-all-modules"], [1057, "id5"], [1058, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1058, "changes-impacting-many-modules"], [1059, "changes-impacting-many-modules"], [1059, "id1"], [1059, "id5"], [1060, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1049, "changes-to-estimator-checks"], [1050, "changes-to-estimator-checks"], [1051, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[392, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[326, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[191, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1008, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[421, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[404, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[398, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[279, null]], "Class likelihood ratios": [[1010, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[432, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [183, "classification"], [188, "classification"], [1006, "classification"], [1013, "id4"], [1014, "classification"], [1024, "classification"], [1025, "classification"], [1026, "classification"]], "Classification and ROC analysis": [[286, "classification-and-roc-analysis"]], "Classification criteria": [[1026, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1010, "classification-metrics"]], "Classification of text documents using sparse features": [[358, null]], "Classification pipeline": [[104, "classification-pipeline"]], "Classification report": [[1010, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[844, null], [1011, "classifierchain"]], "ClassifierMixin": [[433, null]], "ClassifierTags": [[929, null]], "Clear definition of the public API": [[1051, "clear-definition-of-the-public-api"]], "Cloning": [[386, "cloning"]], "Closing issues: a tough call": [[383, null]], "Cluster centers - MiniBatchKMeans": [[124, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[434, null]], "Clustering": [[71, null], [188, "clustering"], [416, null]], "Clustering evaluation summary": [[359, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[421, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1010, "clustering-metrics"]], "Clustering performance evaluation": [[416, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[359, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[359, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1045, "code-contributors"], [1046, "code-contributors"], [1047, "code-contributors"], [1047, "id7"]], "Code Review Guidelines": [[384, "code-review-guidelines"]], "Code and Documentation Contributors": [[1048, "code-and-documentation-contributors"], [1048, "id10"], [1049, "code-and-documentation-contributors"], [1049, "id8"], [1049, "id21"], [1049, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[386, "coding-guidelines"]], "Cohen\u2019s kappa": [[1010, "cohen-s-kappa"]], "Color Quantization using K-Means": [[83, null]], "Column Transformer with Heterogeneous Data Sources": [[104, null]], "Column Transformer with Mixed Types": [[105, null]], "ColumnTransformer": [[472, null]], "ColumnTransformer for heterogeneous data": [[417, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[334, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[159, null]], "Combining the display objects into a single plot": [[246, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[384, "commit-message-markers"]], "Common Vectorizer usage": [[424, "common-vectorizer-usage"]], "Common cases: predefined values": [[1010, "common-cases-predefined-values"]], "Common estimator checks": [[412, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[367, null]], "Common pitfalls and subtleties": [[367, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[191, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[247, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[313, null]], "Compare cross decomposition methods": [[117, null]], "Compare different approaches to setting the regularization parameter": [[111, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[317, null]], "Compare times of SVR and Kernel Ridge Regression": [[251, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[169, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[198, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[305, null]], "Comparing QuantileRegressor and LinearRegression": [[220, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[144, null]], "Comparing Target Encoder with Other Encoders": [[323, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[245, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[97, null]], "Comparing random forests and the multi-output meta estimator": [[158, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[284, null]], "Comparing the results": [[196, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[204, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[204, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[276, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[276, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[225, null]], "Comparison between grid search and successive halving": [[287, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[168, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[132, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[238, null]], "Comparison of kernel ridge and Gaussian process regression": [[175, null]], "Comparison of kernel ridge regression and SVR": [[251, null]], "Comparison of results": [[113, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[99, null]], "Comparison with special purpose text vectorizers": [[360, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1006, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1012, "complement-naive-bayes"]], "ComplementNB": [[850, null]], "Complexity": [[1013, "complexity"], [1014, "complexity"], [1024, "complexity"], [1025, "complexity"], [1026, "complexity"]], "Complexity analysis": [[278, "complexity-analysis"]], "Composite estimators and parameter spaces": [[999, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[621, null]], "Compression via vector quantization": [[88, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1017, "computation-methods"]], "Computation times": [[1031, null]], "Computational Performance": [[371, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[84, "compute-dbscan"]], "Compute clustering": [[82, "compute-clustering"], [102, "compute-clustering"], [102, "id1"]], "Compute clustering with KMeans": [[99, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[98, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[99, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[223, "compute-paths"]], "Compute regularization path": [[211, "compute-regularization-path"]], "Compute score and computation times": [[144, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[111, "compute-the-likelihood-on-test-data"]], "Compute train and test errors": [[289, "compute-train-and-test-errors"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[420, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[370, null]], "Concatenating multiple feature extraction methods": [[108, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[261, null]], "Concluding remarks": [[43, "concluding-remarks"], [242, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [207, "conclusion"], [294, "conclusion"], [300, "conclusion"], [324, "conclusion"], [351, "conclusion"]], "Conclusions": [[203, "conclusions"]], "Configuration switches": [[372, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[371, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[269, null], [1010, "confusion-matrix"]], "ConfusionMatrixDisplay": [[706, null]], "Connectivity graph of an image": [[424, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[270, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[622, null]], "Construct the kernel-based regression models": [[251, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[252, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[252, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[416, "contingency-matrix"]], "Continuous Integration (CI)": [[384, "continuous-integration-ci"]], "Contributing": [[384, null], [396, "contributing"]], "Contributing code": [[384, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[399, "contributors"]], "Controlling randomness": [[367, "controlling-randomness"]], "Controlling the tree size": [[423, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[138, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[580, null]], "Core Contributors": [[399, "core-contributors"]], "Cosine similarity": [[1008, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[270, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[270, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[597, null]], "Covariance estimation": [[110, null], [188, "covariance-estimation"], [418, null]], "Coverage error": [[1010, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[389, null]], "Create ConfusionMatrixDisplay": [[246, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[246, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[246, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[324, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[283, "create-multi-label-data-fit-and-predict"]], "Create the data": [[131, "create-the-data"]], "Create the pipeline": [[350, "create-the-pipeline"]], "Creating a dataset": [[351, "creating-a-dataset"]], "Creating a non-noisy data set": [[222, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[138, "creating-the-dataset"]], "Creating transformers": [[104, "creating-transformers"]], "Cross decomposition": [[116, null], [188, "cross-decomposition"], [419, null]], "Cross validation and model selection": [[420, "cross-validation-and-model-selection"]], "Cross validation iterators": [[420, "cross-validation-iterators"]], "Cross validation of time series data": [[420, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[420, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[420, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[420, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[279, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[164, null]], "Cross-validation: evaluating estimator performance": [[420, null]], "Curve Fitting with Bayesian Ridge Regression": [[199, null]], "Custom Kernels": [[1025, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[334, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[274, null]], "Custom transformers": [[1020, "custom-transformers"]], "Customizing the vectorizer classes": [[424, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[385, null]], "DBSCAN": [[416, "dbscan"], [452, null]], "DO NOT report your data unless it is extremely necessary": [[389, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[193, "data-loading-and-feature-engineering"]], "Data Preparation": [[149, "data-preparation"]], "Data Publica": [[1034, "id21"]], "Data and sample properties": [[398, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [84, "data-generation"], [92, "data-generation"], [155, "data-generation"], [172, "data-generation"], [181, "data-generation"], [266, "data-generation"], [336, "data-generation"], [354, "data-generation"]], "Data generation and model fitting": [[145, "data-generation-and-model-fitting"]], "Data leakage": [[367, "data-leakage"]], "Data leakage during pre-processing": [[367, "data-leakage-during-pre-processing"]], "Data loading": [[277, "data-loading"]], "Data preprocessing": [[152, "data-preprocessing"]], "DataConversionWarning": [[581, null]], "DataDimensionalityWarning": [[582, null]], "DataFrame Support": [[1058, "dataframe-support"]], "DataRobot": [[1034, "id18"]], "Dataiku": [[1034, "id25"]], "Dataset": [[62, "dataset"], [207, "dataset"], [282, "dataset"]], "Dataset Versions": [[378, "dataset-versions"]], "Dataset and Gaussian process generation": [[184, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[283, "dataset-and-model"]], "Dataset based latent variables model": [[117, "dataset-based-latent-variables-model"]], "Dataset examples": [[119, null], [188, "dataset-examples"]], "Dataset generation": [[182, "dataset-generation"], [220, "dataset-generation"]], "Dataset loading utilities": [[377, null], [389, "dataset-loading-utilities"]], "Dataset preparation": [[124, "dataset-preparation"], [238, "dataset-preparation"]], "Dataset preprocessing and model training": [[255, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[376, null]], "Datasets in svmlight / libsvm format": [[378, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[416, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[402, "debian-ubuntu"]], "Debugging CI issues": [[392, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[392, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[399, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[250, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[364, null]], "Decision Tree Regression with AdaBoost": [[139, null]], "Decision Trees": [[188, "decision-trees"], [361, null], [1026, null]], "Decision boundary": [[300, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[341, null]], "Decision path": [[366, "decision-path"]], "DecisionBoundaryDisplay": [[640, null]], "DecisionTreeClassifier": [[921, null]], "DecisionTreeRegressor": [[922, null]], "Decoding text files": [[424, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[421, null]], "Decomposition": [[123, null], [124, "decomposition"], [188, "decomposition"]], "Decomposition: Dictionary learning": [[124, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[271, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[238, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[93, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[274, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[360, "define-preprocessing-functions"]], "Define structure of the data": [[82, "define-structure-of-the-data"]], "Define the classifiers": [[273, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1010, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[84, null]], "Demo of HDBSCAN clustering algorithm": [[90, null]], "Demo of OPTICS clustering algorithm": [[100, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[320, null]], "Demonstration of k-means assumptions": [[92, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[280, null]], "Density Estimation": [[422, null]], "Density Estimation for a Gaussian mixture": [[265, null]], "Density Estimation: Histograms": [[422, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1025, "density-estimation-novelty-detection"]], "DensityMixin": [[435, null]], "Dependencies": [[382, "dependencies"]], "Deprecation": [[384, "deprecation"]], "Deprecation / Default Value Change": [[252, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1051, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[190, "description-of-the-simulated-data"]], "Design the proper kernel": [[180, "design-the-proper-kernel"]], "DetCurveDisplay": [[707, null]], "Detection error tradeoff (DET)": [[1010, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[273, null]], "Developer API for HTML representation": [[386, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[386, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[386, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[392, null]], "Developer\u2019s Guide": [[387, null]], "Developing Estimators": [[135, null], [188, "developing-estimators"]], "Developing scikit-learn estimators": [[386, null]], "Developing with the Plotting API": [[391, null]], "Diabetes dataset": [[381, "diabetes-dataset"]], "DictVectorizer": [[360, "dictvectorizer"], [590, null]], "Dictionary Learning": [[421, "dictionary-learning"]], "Dictionary learning": [[124, "dictionary-learning"]], "Dictionary learning - positive code": [[124, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[124, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[124, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[540, null]], "Differences between solvers": [[1006, "differences-between-solvers"]], "Different label assignment strategies": [[416, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[416, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[386, "different-objects"]], "Different scenario and useful concepts": [[1006, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[407, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[165, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[306, null]], "Dimensionality reduction": [[1013, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[1004, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1020, "discretization"]], "Dispatching": [[394, null]], "Display Objects": [[1038, "display-objects"]], "Display code coverage in pull requests": [[392, "display-code-coverage-in-pull-requests"]], "Display results": [[223, "display-results"]], "Display the distorted image": [[127, "display-the-distorted-image"]], "Displaying Pipelines": [[257, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[257, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[257, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[257, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[257, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[257, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[247, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[708, null]], "Do you plan to implement transform for target y in a pipeline?": [[396, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[396, "do-you-support-pypy"]], "Documentation": [[384, "documentation"], [1041, "documentation"]], "Documentation Resources": [[1033, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1044, "documentation-improvements"], [1045, "documentation-improvements"]], "Domain specific packages": [[1029, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[426, "dot-product-kernel"]], "Dot-product kernel": [[184, "dot-product-kernel"]], "DotProduct": [[623, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[187, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[159, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[378, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null], [416, null]], "Dropping official support for PyPy": [[1060, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1060, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[1010, "dummy-estimators"]], "DummyClassifier": [[560, null]], "DummyRegressor": [[561, null]], "D\u00b2 score": [[1010, "d2-score"]], "D\u00b2 score for classification": [[1010, "d2-score-for-classification"]], "Earlier versions": [[1041, "earlier-versions"]], "Early stopping in Gradient Boosting": [[149, null]], "Early stopping of Stochastic Gradient Descent": [[226, null]], "Effect of number of trees and early stopping": [[154, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[322, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[322, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[322, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[109, null]], "Effect of varying threshold for self-training": [[339, null]], "EfficiencyWarning": [[583, null]], "Efficient Linear Algebra & Array Operations": [[393, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[393, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[393, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[124, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1006, "elastic-net"]], "ElasticNet": [[203, "elasticnet"], [655, null]], "ElasticNetCV": [[656, null]], "EllipticEnvelope": [[477, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[239, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[418, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[96, null]], "Empirical validation": [[249, "empirical-validation"]], "EmpiricalCovariance": [[478, null]], "Encoding categorical features": [[1020, "encoding-categorical-features"]], "Encoding strategy": [[88, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1052, "enforcing-keyword-only-arguments"], [1054, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[399, "enhancement-proposals-sleps"]], "Enhancements": [[1044, "enhancements"], [1045, "enhancements"], [1046, "enhancements"], [1047, "enhancements"], [1047, "id4"], [1048, "enhancements"], [1048, "id3"]], "Enriched estimator displays": [[333, "enriched-estimator-displays"]], "Ensemble methods": [[137, null], [188, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[423, null]], "Environment variables": [[372, "environment-variables"]], "Error Calculation": [[149, "error-calculation"]], "Error caused by file path length limit on Windows": [[402, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[138, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[196, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[99, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[196, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[196, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[115, "estimate-the-covariance"]], "Estimate the score": [[187, "estimate-the-score"]], "Estimated Attributes": [[386, "estimated-attributes"]], "Estimation algorithms": [[1004, "estimation-algorithms"]], "Estimator Tags": [[386, "estimator-tags"]], "Estimator types": [[386, "estimator-types"]], "Estimators": [[367, "estimators"], [367, "id2"], [386, "estimators"], [412, "estimators"]], "Estimators that handle NaN values": [[1000, "estimators-that-handle-nan-values"]], "Evaluation": [[114, "evaluation"], [315, "evaluation"]], "Evaluation metrics": [[270, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[255, null]], "Evaluation of the calibration of predictions": [[218, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[218, "evaluation-of-the-ranking-power"]], "Evernote": [[1034, "id6"]], "Exact Kernel PCA": [[421, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[421, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[412, "example-usage"]], "Example with noise-free target": [[182, "example-with-noise-free-target"]], "Example with noisy targets": [[182, "example-with-noisy-targets"]], "Examples": [[188, null], [373, "examples"], [415, "examples"], [1041, "examples"]], "Examples based on real world datasets": [[42, null], [188, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[999, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[184, "exp-sine-squared-kernel"], [426, "exp-sine-squared-kernel"]], "ExpSineSquared": [[624, null]], "Experimental / Under Development": [[1057, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[331, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[388, "experimental-features"]], "Explained variance score": [[1010, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[250, null]], "Exponentiation": [[625, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1028, null]], "External Tutorials": [[1028, "external-tutorials"]], "External dependencies": [[1041, "external-dependencies"]], "ExtraTreeClassifier": [[923, null]], "ExtraTreeRegressor": [[924, null]], "ExtraTreesClassifier": [[566, null]], "ExtraTreesRegressor": [[567, null]], "Extract noisy patches and reconstruct them using the dictionary": [[127, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[127, "extract-reference-patches"]], "Extracting features": [[373, "extracting-features"]], "Extremely Randomized Trees": [[423, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[254, null]], "Faces dataset decompositions": [[124, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[421, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[134, null]], "Factor Analysis components - FA": [[124, "factor-analysis-components-fa"]], "FactorAnalysis": [[541, null]], "Failure of Machine Learning to infer causal effects": [[190, null]], "FastICA": [[542, null]], "FastICA on 2D point clouds": [[126, null]], "Faster parser in fetch_openml": [[331, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[371, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[359, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[329, "feature-names-support"]], "Feature Selection": [[167, null], [188, "feature-selection"]], "Feature agglomeration": [[86, null], [1027, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[89, null]], "Feature binarization": [[1020, "feature-binarization"]], "Feature discretization": [[319, null]], "Feature extraction": [[424, null]], "Feature hashing": [[424, "feature-hashing"]], "Feature importance based on feature permutation": [[145, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[145, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[146, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[423, "feature-importance-evaluation"]], "Feature importance from coefficients": [[173, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[145, null]], "Feature normalization": [[196, "feature-normalization"]], "Feature scaling": [[1027, null]], "Feature selection": [[425, null]], "Feature selection as part of a pipeline": [[425, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[425, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[425, null]], "Feature transformations with ensembles of trees": [[143, null]], "FeatureAgglomeration": [[416, null], [453, null]], "FeatureHasher": [[360, "featurehasher"], [591, null]], "FeatureHasher and DictVectorizer Comparison": [[360, null]], "FeatureUnion": [[872, null]], "FeatureUnion: composite feature spaces": [[417, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[154, null]], "Fedora": [[402, "fedora"]], "Final conclusion": [[175, "final-conclusion"]], "Final remarks": [[92, "final-remarks"]], "Finding the Nearest Neighbors": [[1013, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[125, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[199, "fit-by-cubic-polynomial"]], "Fit models": [[212, "fit-models"], [296, "fit-models"]], "Fit models and plot results": [[92, "fit-models-and-plot-results"]], "Fit regression model": [[152, "fit-regression-model"], [309, "fit-regression-model"], [353, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[304, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[131, "fit-the-models"]], "Fit the regressors": [[198, "fit-the-regressors"], [198, "id2"]], "FitFailedWarning": [[584, null]], "Fitting": [[386, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[220, "fitting-a-quantileregressor"]], "Fitting additional trees": [[423, "fitting-additional-trees"]], "Fitting additional weak-learners": [[423, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[200, null]], "Fitting an elliptic envelope": [[1016, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[397, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[151, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1054, "fixed-models"]], "FixedThresholdClassifier": [[808, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[334, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1041, "fixes"]], "Flexibility of IterativeImputer": [[1000, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[392, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[180, null]], "Forest covertypes": [[379, "forest-covertypes"]], "Forest covertypes dataset": [[255, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[416, "fowlkes-mallows-scores"]], "FreeBSD": [[382, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[236, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[396, null]], "From binary to multiclass and multilabel": [[1010, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[383, null]], "FunctionTransformer": [[877, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[264, null]], "GMM covariances": [[263, null]], "GPC examples": [[426, "gpc-examples"]], "Gallery examples": [[430, "gallery-examples"], [433, "gallery-examples"], [436, "gallery-examples"], [439, "gallery-examples"], [440, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [459, "gallery-examples"], [460, "gallery-examples"], [461, "gallery-examples"], [462, "gallery-examples"], [463, "gallery-examples"], [466, "gallery-examples"], [468, "gallery-examples"], [470, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [478, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [484, "gallery-examples"], [485, "gallery-examples"], [487, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [505, "gallery-examples"], [507, "gallery-examples"], [508, "gallery-examples"], [509, "gallery-examples"], [510, "gallery-examples"], [511, "gallery-examples"], [513, "gallery-examples"], [515, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [539, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [553, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [575, "gallery-examples"], [576, "gallery-examples"], [577, "gallery-examples"], [578, "gallery-examples"], [579, "gallery-examples"], [590, "gallery-examples"], [591, "gallery-examples"], [593, "gallery-examples"], [596, "gallery-examples"], [597, "gallery-examples"], [598, "gallery-examples"], [599, "gallery-examples"], [600, "gallery-examples"], [602, "gallery-examples"], [603, "gallery-examples"], [606, "gallery-examples"], [608, "gallery-examples"], [609, "gallery-examples"], [611, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [616, "gallery-examples"], [617, "gallery-examples"], [619, "gallery-examples"], [620, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [624, "gallery-examples"], [626, "gallery-examples"], [627, "gallery-examples"], [628, "gallery-examples"], [631, "gallery-examples"], [632, "gallery-examples"], [634, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [642, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [658, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [664, "gallery-examples"], [665, "gallery-examples"], [666, "gallery-examples"], [667, "gallery-examples"], [668, "gallery-examples"], [671, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [687, "gallery-examples"], [688, "gallery-examples"], [689, "gallery-examples"], [690, "gallery-examples"], [691, "gallery-examples"], [693, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [699, "gallery-examples"], [700, "gallery-examples"], [701, "gallery-examples"], [702, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [712, "gallery-examples"], [713, "gallery-examples"], [714, "gallery-examples"], [715, "gallery-examples"], [716, "gallery-examples"], [718, "gallery-examples"], [721, "gallery-examples"], [722, "gallery-examples"], [726, "gallery-examples"], [727, "gallery-examples"], [728, "gallery-examples"], [736, "gallery-examples"], [738, "gallery-examples"], [741, "gallery-examples"], [743, "gallery-examples"], [744, "gallery-examples"], [746, "gallery-examples"], [747, "gallery-examples"], [750, "gallery-examples"], [751, "gallery-examples"], [754, "gallery-examples"], [755, "gallery-examples"], [757, "gallery-examples"], [758, "gallery-examples"], [759, "gallery-examples"], [761, "gallery-examples"], [762, "gallery-examples"], [764, "gallery-examples"], [766, "gallery-examples"], [770, "gallery-examples"], [787, "gallery-examples"], [788, "gallery-examples"], [791, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [795, "gallery-examples"], [796, "gallery-examples"], [797, "gallery-examples"], [798, "gallery-examples"], [799, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [804, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [811, "gallery-examples"], [812, "gallery-examples"], [813, "gallery-examples"], [814, "gallery-examples"], [815, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [840, "gallery-examples"], [841, "gallery-examples"], [842, "gallery-examples"], [843, "gallery-examples"], [844, "gallery-examples"], [846, "gallery-examples"], [848, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [858, "gallery-examples"], [859, "gallery-examples"], [860, "gallery-examples"], [861, "gallery-examples"], [862, "gallery-examples"], [866, "gallery-examples"], [869, "gallery-examples"], [870, "gallery-examples"], [871, "gallery-examples"], [872, "gallery-examples"], [873, "gallery-examples"], [874, "gallery-examples"], [877, "gallery-examples"], [878, "gallery-examples"], [880, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [890, "gallery-examples"], [891, "gallery-examples"], [892, "gallery-examples"], [893, "gallery-examples"], [894, "gallery-examples"], [897, "gallery-examples"], [899, "gallery-examples"], [902, "gallery-examples"], [906, "gallery-examples"], [907, "gallery-examples"], [909, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [913, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [918, "gallery-examples"], [919, "gallery-examples"], [920, "gallery-examples"], [921, "gallery-examples"], [922, "gallery-examples"], [927, "gallery-examples"], [928, "gallery-examples"], [942, "gallery-examples"], [952, "gallery-examples"], [954, "gallery-examples"], [961, "gallery-examples"], [966, "gallery-examples"], [967, "gallery-examples"], [968, "gallery-examples"], [969, "gallery-examples"], [970, "gallery-examples"], [983, "gallery-examples"], [993, "gallery-examples"]], "Gamma loss for gradient boosting": [[332, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[657, null]], "Gaussian Mixture": [[1009, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[262, null]], "Gaussian Mixture Model Selection": [[266, null]], "Gaussian Mixture Model Sine Curve": [[267, null]], "Gaussian Mixture Models": [[188, "gaussian-mixture-models"], [260, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1012, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[426, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[426, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[174, null], [188, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[426, null]], "Gaussian Processes regression: basic introductory example": [[182, null]], "Gaussian mixture models": [[1009, null]], "Gaussian process classification (GPC) on iris dataset": [[177, null], [426, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[175, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[183, null]], "Gaussian random projection": [[1022, "gaussian-random-projection"]], "GaussianMixture": [[807, null]], "GaussianNB": [[851, null]], "GaussianProcessClassifier": [[619, null]], "GaussianProcessRegressor": [[620, null]], "GaussianRandomProjection": [[905, null]], "General Concepts": [[398, "general-concepts"]], "General recommendations": [[367, "general-recommendations"]], "Generalized Linear Models": [[188, "generalized-linear-models"], [197, null], [1006, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[327, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[82, "generate-data"], [102, "generate-data"], [113, "generate-data"], [212, "generate-data"], [315, "generate-data"]], "Generate data with outliers": [[304, "generate-data-with-outliers"]], "Generate distorted image": [[127, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [90, "generate-sample-data"], [98, "generate-sample-data"], [111, "generate-sample-data"], [125, "generate-sample-data"], [126, "generate-sample-data"], [169, "generate-sample-data"], [251, "generate-sample-data"], [289, "generate-sample-data"], [309, "generate-sample-data"], [353, "generate-sample-data"]], "Generate sinusoidal data with noise": [[199, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[273, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [198, "generate-synthetic-dataset"], [198, "id1"], [203, "generate-synthetic-dataset"]], "Generate the data": [[99, "generate-the-data"], [101, "generate-the-data"], [115, "generate-the-data"]], "Generated datasets": [[380, null]], "Generated documentation on GitHub Actions": [[384, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[175, "generating-a-dataset"]], "Generating polynomial features": [[1020, "generating-polynomial-features"]], "Generators for classification and clustering": [[380, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[380, "generators-for-decomposition"]], "Generators for manifold learning": [[380, "generators-for-manifold-learning"]], "Generators for regression": [[380, "generators-for-regression"]], "Generic dictionary learning": [[421, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[601, null]], "Getting Started": [[397, null]], "Getting reproducible results across multiple executions": [[367, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1033, "gitter"]], "Glossary of Common Terms and API Elements": [[398, null]], "Good practices": [[389, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[399, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[150, null]], "Gradient Boosting Regression Trees for Poisson regression": [[218, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[152, null]], "Gradient Boosting regularization": [[153, null]], "Gradient boosting": [[192, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[148, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[148, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[148, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[148, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[423, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[568, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[423, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[423, null]], "GradientBoostingRegressor": [[569, null]], "Graph Routines": [[393, "graph-routines"]], "Graphical model and parametrization": [[1015, "graphical-model-and-parametrization"]], "GraphicalLasso": [[479, null]], "GraphicalLassoCV": [[480, null]], "GridSearchCV": [[809, null]], "Group Shuffle Split": [[420, "group-shuffle-split"]], "Group k-fold": [[420, "group-k-fold"]], "GroupKFold": [[810, null]], "GroupShuffleSplit": [[811, null]], "Grouping infrequent categories in OneHotEncoder": [[330, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[332, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[416, "hdbscan"], [454, null]], "HDBSCAN: hierarchical density-based clustering": [[332, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[812, null]], "HalvingRandomSearchCV": [[813, null]], "Hamming loss": [[1010, "hamming-loss"]], "Handling Multicollinear Features": [[194, "handling-multicollinear-features"]], "Hash Functions": [[393, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[157, null]], "HashingVectorizer": [[359, "hashingvectorizer"], [598, null]], "Helper Functions": [[393, "helper-functions"]], "Helper function": [[184, "helper-function"]], "Helper function to plot embedding": [[239, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1007, "hessian-eigenmapping"]], "Hierarchical Clustering": [[416, "id11"]], "Hierarchical clustering": [[416, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[102, null]], "Higher-level parallelism with joblib": [[372, "higher-level-parallelism-with-joblib"]], "Highlights": [[1041, "highlights"], [1044, "highlights"], [1045, "highlights"], [1048, "highlights"], [1049, "highlights"]], "Hinge loss": [[1010, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[333, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[570, null]], "HistGradientBoostingRegressor": [[571, null]], "Histogram-Based Gradient Boosting": [[423, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[329, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[416, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[396, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[396, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[396, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[396, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[396, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[396, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[396, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[396, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[367, "how-to-avoid-data-leakage"]], "How to contribute": [[384, "how-to-contribute"]], "How to make a good bug report": [[384, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[390, null]], "HowAboutWe": [[1034, "id16"]], "Huber Regression": [[1006, "huber-regression"]], "HuberRegressor": [[658, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[201, null]], "Hugging Face": [[1034, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[626, null]], "Hyperparameter Robustness": [[90, "hyperparameter-robustness"]], "ICE vs. PDP": [[192, "ice-vs-pdp"]], "INFONEA": [[1034, "id24"]], "Illustration of GPC on the XOR dataset": [[426, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[179, null]], "Illustration of Pipeline and GridSearchCV": [[106, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[184, null]], "Image denoising using dictionary learning": [[127, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[424, "image-feature-extraction"]], "Implementation": [[1013, "implementation"]], "Implementation decisions": [[396, "implementation-decisions"]], "Implementation details": [[1024, "implementation-details"], [1025, "implementation-details"]], "Implementing your own scoring object": [[1010, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[322, null]], "Important notes regarding the internal cross-validation": [[415, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[331, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[333, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[328, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[327, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[1000, null], [1020, "imputation-of-missing-values"]], "Impute missing values with mean": [[187, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[187, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[187, null]], "Imputing missing values with variants of IterativeImputer": [[186, null]], "In binary classification settings": [[283, "in-binary-classification-settings"]], "In multi-label settings": [[283, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[190, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[190, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[367, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[585, null]], "Incremental PCA": [[128, null], [421, "incremental-pca"]], "Incremental learning": [[373, "incremental-learning"]], "IncrementalPCA": [[543, null]], "Independent component analysis (ICA)": [[421, "independent-component-analysis-ica"]], "Independent components - FastICA": [[124, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[328, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1017, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[91, null]], "Influence of the Input Data Representation": [[371, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[371, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[371, "influence-of-the-number-of-features"]], "Information Criterion": [[999, "information-criterion"]], "Information-criteria based model selection": [[1006, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1020, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[416, null]], "Input validation": [[386, "input-validation"]], "InputTags": [[930, null]], "Inria": [[1034, "id3"]], "Inspection": [[188, "inspection"], [189, null], [401, null]], "Installing nightly builds": [[382, "installing-nightly-builds"]], "Installing scikit-learn": [[402, null]], "Installing the development version of scikit-learn": [[382, null]], "Installing the latest release": [[402, "installing-the-latest-release"]], "Instantiation": [[386, "instantiation"]], "Intel Extension for Scikit-learn": [[402, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[423, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[331, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1029, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[180, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[423, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[191, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[191, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[222, "interpreting-the-plots"]], "Introducing the set_output API": [[259, null]], "Introduction": [[1007, "introduction"]], "Invariance with respect to prevalence": [[279, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1022, "inverse-transform"]], "Iris plants dataset": [[381, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[178, null]], "Isolation Forest": [[1016, "isolation-forest"]], "IsolationForest": [[572, null]], "IsolationForest example": [[155, null]], "Isomap": [[697, null], [1007, "isomap"]], "Isomap Embedding": [[238, "isomap-embedding"]], "Isotonic": [[414, "isotonic"]], "Isotonic Regression": [[248, null]], "Isotonic regression": [[1001, null]], "IsotonicRegression": [[644, null]], "Issue Tracker Tags": [[384, "issue-tracker-tags"]], "Issues for New Contributors": [[384, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[187, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[636, null]], "J.P.Morgan": [[1034, "id1"]], "Jaccard similarity coefficient score": [[1010, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[212, null]], "K-D Tree": [[1013, "k-d-tree"]], "K-bins discretization": [[1020, "k-bins-discretization"]], "K-fold": [[420, "k-fold"]], "K-means": [[416, "k-means"]], "K-means Clustering": [[80, null]], "K-means clustering on text features": [[359, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[300, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[878, null]], "KDDCup99 - SA dataset": [[255, "kddcup99-sa-dataset"]], "KDTree": [[854, null]], "KDTree and BallTree Classes": [[1013, "kdtree-and-balltree-classes"]], "KFold": [[814, null]], "KMeans": [[455, null]], "KNN Based Imputation": [[326, "knn-based-imputation"]], "KNNImputer": [[637, null]], "KNeighborsClassifier": [[855, null]], "KNeighborsRegressor": [[856, null]], "KNeighborsTransformer": [[857, null]], "Kddcup 99 dataset": [[379, "kddcup-99-dataset"]], "Keeping the number of features constant": [[1000, "keeping-the-number-of-features-constant"]], "Kernel": [[627, null]], "Kernel Approximation": [[188, "kernel-approximation"], [195, null], [1002, null]], "Kernel Density Estimate of Species Distributions": [[310, null]], "Kernel Density Estimation": [[301, null], [422, "kernel-density-estimation"]], "Kernel PCA": [[129, null]], "Kernel Principal Component Analysis (kPCA)": [[421, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[184, "kernel-cookbook"]], "Kernel functions": [[1025, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[175, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[426, "kernel-operators"]], "Kernel ridge": [[175, "kernel-ridge"]], "Kernel ridge regression": [[1003, null]], "KernelCenterer": [[879, null]], "KernelDensity": [[858, null]], "KernelPCA": [[544, null]], "KernelRidge": [[652, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[426, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[329, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1049, "known-major-bugs"], [1050, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[209, null]], "L1-based feature selection": [[425, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[203, null]], "L1-penalty case": [[354, "l1-penalty-case"]], "L2-penalty case": [[354, "l2-penalty-case"]], "LARS Lasso": [[1006, "lars-lasso"]], "LDA": [[1004, "lda"]], "Label Propagation": [[1023, "label-propagation"]], "Label Propagation digits active learning": [[337, null]], "Label Propagation digits: Demonstrating performance": [[336, null]], "Label Propagation learning a complex structure": [[338, null]], "Label binarization": [[1021, "label-binarization"]], "Label encoding": [[1021, "label-encoding"]], "Label ranking average precision": [[1010, "label-ranking-average-precision"]], "LabelBinarizer": [[880, null], [1021, "labelbinarizer"]], "LabelEncoder": [[881, null]], "LabelPropagation": [[908, null]], "LabelSpreading": [[909, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1008, "laplacian-kernel"]], "Lars": [[659, null]], "LarsCV": [[660, null]], "Lasso": [[203, "lasso"], [661, null], [1006, "lasso"]], "Lasso model selection via information criteria": [[205, null]], "Lasso model selection: AIC-BIC / cross-validation": [[207, null]], "Lasso on dense and sparse data": [[204, null]], "Lasso via coordinate descent": [[207, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[207, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[206, null]], "LassoCV": [[662, null]], "LassoLars": [[663, null]], "LassoLarsCV": [[664, null]], "LassoLarsIC": [[665, null]], "Latent Dirichlet Allocation (LDA)": [[421, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[545, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[127, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[85, "learn-the-dictionary-of-images"]], "Learning Curve": [[278, "learning-curve"]], "Learning Git": [[384, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[307, "learning-an-embedding"]], "Learning curve": [[1005, "learning-curve"]], "LearningCurveDisplay": [[815, null]], "Least Angle Regression": [[1006, "least-angle-regression"]], "Leave One Group Out": [[420, "leave-one-group-out"]], "Leave One Out (LOO)": [[420, "leave-one-out-loo"]], "Leave P Groups Out": [[420, "leave-p-groups-out"]], "Leave P Out (LPO)": [[420, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[816, null]], "LeaveOneOut": [[817, null]], "LeavePGroupsOut": [[818, null]], "LeavePOut": [[819, null]], "Ledoit-Wolf shrinkage": [[418, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[112, null]], "LedoitWolf": [[481, null]], "Lessons learned": [[190, "lessons-learned"], [191, "lessons-learned"]], "Limitations of a simple linear model": [[175, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[424, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[371, "limiting-working-memory"]], "Limiting the number of splits": [[148, "limiting-the-number-of-splits"]], "Linear Models": [[1006, null]], "Linear Regression Example": [[214, null]], "Linear algebra libraries": [[371, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[1004, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[351, "linear-kernel"], [1008, "linear-kernel"]], "Linear models with regularization": [[191, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[191, "linear-models-with-sparse-coefficients"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[558, null]], "LinearRegression": [[666, null]], "LinearSVC": [[913, null]], "LinearSVR": [[914, null]], "Link to R\u00b2 score, the coefficient of determination": [[1010, null]], "Links": [[371, "links"]], "Linnerrud dataset": [[381, "linnerrud-dataset"]], "Linux": [[382, "linux"]], "Linux compilers from conda-forge": [[382, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[382, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[148, "load-ames-housing-dataset"]], "Load Data": [[360, "load-data"]], "Load Data and Train a SVC": [[258, "load-data-and-train-a-svc"]], "Load Data and train model": [[246, "load-data-and-train-model"]], "Load and prepare data": [[285, "load-and-prepare-data"], [286, "load-and-prepare-data"], [322, "load-and-prepare-data"]], "Load and prepare data set": [[347, "load-and-prepare-data-set"]], "Load data": [[211, "load-data"]], "Load dataset": [[144, "load-dataset"]], "Load dataset and apply GridSearchCV": [[164, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[239, "load-digits-dataset"]], "Load some data to play with": [[350, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [85, "load-the-data"], [152, "load-the-data"], [300, "load-the-data"]], "Load the dataset": [[93, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[323, "loading-data-from-openml"]], "Loading a dataset": [[296, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[358, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[236, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[424, "loading-features-from-dicts"]], "Loading from external datasets": [[378, "loading-from-external-datasets"]], "Loading other datasets": [[378, null]], "Loading text data": [[359, "loading-text-data"]], "Loading the data": [[173, "loading-the-data"]], "Loading the data and model fitting": [[146, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[120, "loading-the-iris-dataset"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1016, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1007, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[859, null]], "Locally Linear Embedding": [[1007, "locally-linear-embedding"]], "Locally Linear Embeddings": [[238, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[698, null]], "Lock files": [[384, "lock-files"]], "Log loss": [[1010, "log-loss"]], "Logistic Regression 3-class Classifier": [[202, null]], "Logistic function": [[208, null]], "Logistic regression": [[1006, "logistic-regression"]], "LogisticRegression": [[667, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[296, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[668, null]], "Look at the results": [[251, "look-at-the-results"], [353, "look-at-the-results"]], "Loss Functions": [[423, "loss-functions"]], "Lovely": [[1034, "id20"]], "Low-level parallelism": [[416, "low-level-parallelism"], [423, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[372, "lower-level-parallelism-with-openmp"]], "MARS": [[1034, "id28"]], "MDS": [[699, null]], "MLPClassifier": [[870, null]], "MLPRegressor": [[871, null]], "MNIST classification using multinomial logistic + L1": [[234, null]], "MacPorts for Mac OSX": [[402, "macports-for-mac-osx"]], "Machinalis": [[1034, "id22"]], "Mailing Lists": [[1033, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[218, "main-takeaways"]], "Maintainer Information": [[388, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[384, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[423, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[159, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[162, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[240, null]], "Manifold learning": [[188, "manifold-learning"], [237, null], [1007, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[239, null]], "Manually setting the decision threshold": [[415, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[270, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[321, null]], "Mapping to a Gaussian distribution": [[1020, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1020, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[1000, "marking-imputed-values"]], "Matern": [[628, null]], "Mathematical Definition": [[1017, "mathematical-definition"]], "Mathematical Details": [[1002, "mathematical-details"]], "Mathematical formulation": [[413, "mathematical-formulation"], [413, "id3"], [423, "mathematical-formulation"], [1013, "mathematical-formulation"], [1024, "mathematical-formulation"], [1025, "mathematical-formulation"], [1026, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[1004, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[1004, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1010, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[184, "matern-kernel"], [426, "matern-kernel"]], "Max error": [[1010, "max-error"]], "MaxAbsScaler": [[317, "maxabsscaler"], [882, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1010, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[416, "mean-shift"]], "Mean absolute error": [[1010, "mean-absolute-error"]], "Mean absolute percentage error": [[1010, "mean-absolute-percentage-error"]], "Mean squared error": [[1010, "mean-squared-error"]], "Mean squared logarithmic error": [[1010, "mean-squared-logarithmic-error"]], "MeanShift": [[456, null]], "Measure and plot the results": [[159, "measure-and-plot-the-results"]], "Median absolute error": [[1010, "median-absolute-error"]], "Memory footprint": [[88, "memory-footprint"]], "Memory usage profiling": [[390, "memory-usage-profiling"]], "Merging Pull Requests": [[388, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [412, "meta-estimators"]], "MetaEstimatorMixin": [[436, null]], "Metadata Routing": [[252, null], [332, "metadata-routing"], [398, "metadata-routing"], [407, null], [1058, "metadata-routing"], [1058, "id2"], [1059, "metadata-routing"], [1060, "metadata-routing"]], "Metadata Routing Support": [[333, "metadata-routing-support"]], "Metadata Routing Support Status": [[407, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[965, null]], "MetadataRouter": [[966, null]], "MethodMapping": [[967, null]], "Methods": [[398, "methods"]], "Metrics": [[412, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1010, null]], "MinCovDet": [[482, null]], "MinMaxScaler": [[317, "minmaxscaler"], [883, null]], "Mini Batch K-Means": [[416, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[421, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[421, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[546, null]], "MiniBatchKMeans": [[457, null]], "MiniBatchNMF": [[547, null]], "MiniBatchNMF: an online version of NMF": [[330, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[548, null]], "Minimal Cost-Complexity Pruning": [[1026, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1054, "minimal-dependencies"], [1055, "minimal-dependencies"]], "Minimum Covariance Determinant": [[418, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[114, "minimum-covariance-determinant-estimator"]], "Misc": [[1041, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [188, "miscellaneous"], [244, null], [1049, "miscellaneous"], [1049, "id40"], [1050, "miscellaneous"], [1051, "miscellaneous"], [1052, "miscellaneous"], [1052, "id13"], [1053, "miscellaneous"], [1054, "miscellaneous"], [1057, "miscellaneous"]], "Misleading values on strongly correlated features": [[1018, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[185, null], [188, "missing-value-imputation"]], "Missing Values Support": [[1026, "missing-values-support"]], "Missing information": [[187, "missing-information"]], "Missing value support for Random Forest": [[333, "missing-value-support-for-random-forest"]], "Missing values support": [[423, "missing-values-support"]], "Missing values support in decision trees": [[332, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[638, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[371, "model-compression"]], "Model Reshaping": [[371, "model-reshaping"]], "Model Selection": [[188, "model-selection"], [268, null]], "Model Selection Enhancements and API Changes": [[1047, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[149, "model-training-and-comparison"]], "Model comparison": [[148, "model-comparison"]], "Model evaluation": [[397, "model-evaluation"]], "Model fitting and extrapolation": [[180, "model-fitting-and-extrapolation"]], "Model persistence": [[410, null]], "Model selection and evaluation": [[411, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[131, null]], "Model selection: development and evaluation": [[999, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[999, "model-specific-cross-validation"]], "Model training and selection": [[172, "model-training-and-selection"], [266, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[358, "model-with-metadata-stripping"]], "Model without metadata stripping": [[358, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[173, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[315, "models-definition"]], "Models robustness to recover the ground truth weights": [[198, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1007, "modified-locally-linear-embedding"]], "Monitoring performance": [[384, "monitoring-performance"]], "Monotonic Constraints": [[156, null], [423, "monotonic-constraints"]], "Monotonic constraints": [[154, "monotonic-constraints"]], "More control with warm_start": [[1014, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[90, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[138, null]], "Multi-class case": [[1010, "multi-class-case"]], "Multi-class classification": [[1025, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[390, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1007, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[241, null]], "Multi-label case": [[1010, "multi-label-case"]], "Multi-label confusion matrix": [[1010, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1014, "multi-layer-perceptron"]], "Multi-layer perceptron": [[192, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[365, null]], "Multi-output problems": [[1026, "multi-output-problems"]], "Multi-task Elastic-Net": [[1006, "multi-task-elastic-net"]], "Multi-task Lasso": [[1006, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[884, null], [1021, "multilabelbinarizer"]], "MultiOutputClassifier": [[845, null], [1011, "multioutputclassifier"]], "MultiOutputRegressor": [[846, null], [1011, "multioutputregressor"]], "MultiTaskElasticNet": [[669, null]], "MultiTaskElasticNetCV": [[670, null]], "MultiTaskLasso": [[671, null]], "MultiTaskLassoCV": [[672, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[285, null]], "Multiclass and multilabel classification": [[1010, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[393, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1011, null]], "Multiclass classification": [[1011, "multiclass-classification"]], "Multiclass methods": [[188, "multiclass-methods"], [293, null]], "Multiclass sparse logistic regression on 20newgroups": [[233, null]], "Multiclass support": [[414, "multiclass-support"]], "Multiclass-multioutput classification": [[1011, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[238, "multidimensional-scaling"]], "Multilabel": [[380, "multilabel"]], "Multilabel classification": [[253, null], [1011, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[296, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1010, "multilabel-ranking-metrics"]], "Multinomial Case": [[1006, "multinomial-case"]], "Multinomial Naive Bayes": [[1012, "multinomial-naive-bayes"]], "MultinomialNB": [[852, null]], "Multioutput methods": [[188, "multioutput-methods"], [295, null]], "Multioutput regression": [[1011, "multioutput-regression"]], "Multiple modules": [[1049, "multiple-modules"], [1050, "multiple-modules"]], "Multiple vs. Single Imputation": [[1000, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[1000, "multivariate-feature-imputation"]], "Mutual Information based scores": [[416, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[416, "mutual-reachability-graph"]], "NMF": [[549, null]], "NMF with a beta-divergence": [[421, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[421, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1012, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[323, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[328, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[326, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[308, null]], "Nearest Centroid Classifier": [[1013, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1013, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[188, "nearest-neighbors"], [298, null], [1013, null]], "Nearest Neighbors Classification": [[300, null], [1013, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1013, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1013, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[309, null]], "Nearest Shrunken Centroid": [[1013, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[1000, "nearest-neighbors-imputation"]], "NearestCentroid": [[860, null]], "NearestNeighbors": [[861, null]], "Neighborhood Components Analysis": [[1013, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[307, null]], "NeighborhoodComponentsAnalysis": [[862, null]], "Nested versus non-nested cross-validation": [[281, null]], "NetBSD": [[402, "netbsd"]], "Neural Networks": [[188, "neural-networks"], [311, null]], "Neural network models (supervised)": [[1014, null]], "Neural network models (unsupervised)": [[1015, null]], "New Estimator Classes": [[1042, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[328, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[328, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[328, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[331, "new-and-enhanced-displays"]], "New classes": [[1041, "new-classes"]], "New display ValidationCurveDisplay": [[332, "new-display-validationcurvedisplay"]], "New documentation improvements": [[328, "new-documentation-improvements"], [329, "new-documentation-improvements"]], "New features": [[1044, "new-features"], [1045, "new-features"], [1046, "new-features"], [1047, "new-features"], [1048, "new-features"]], "New plotting API": [[326, "new-plotting-api"]], "New self-training meta-estimator": [[328, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1028, "new-to-scientific-python"]], "Next steps": [[397, "next-steps"]], "Non-Negative Least Squares": [[1006, "non-negative-least-squares"]], "Non-linear transformation": [[1020, "non-linear-transformation"]], "Non-negative components - NMF": [[124, "non-negative-components-nmf"]], "Non-negative least squares": [[213, null]], "Non-negative matrix factorization (NMF or NNMF)": [[421, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1020, "normalization"]], "Normalized Discounted Cumulative Gain": [[1010, "normalized-discounted-cumulative-gain"]], "Normalizer": [[317, "normalizer"], [885, null]], "NotFittedError": [[586, null]], "Note on MPS device support": [[412, "note-on-mps-device-support"]], "Note on device support for float64": [[412, "note-on-device-support-for-float64"]], "Notes": [[373, "notes"]], "Novelty Detection": [[1016, "novelty-detection"]], "Novelty and Outlier Detection": [[1016, null]], "Novelty detection with Local Outlier Factor": [[1016, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[303, null]], "NuSVC": [[915, null]], "NuSVR": [[916, null]], "NumPy": [[389, "numpy"]], "Number of candidates and amount of resource at each iteration": [[288, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[386, "numerical-assertions-in-tests"]], "Nystroem": [[648, null]], "Nystroem Method for Kernel Approximation": [[1002, "nystroem-method-for-kernel-approximation"]], "OAS": [[483, null]], "ONNX": [[410, "onnx"]], "OOB Errors for Random Forests": [[142, null]], "OPTICS": [[416, "optics"], [458, null]], "Obtaining predictions by cross-validation": [[420, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1034, "id19"]], "Older Versions": [[1041, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[232, null]], "One-class SVM with non-linear kernel (RBF)": [[346, null]], "One-vs-One multiclass ROC": [[285, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[285, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[917, null]], "OneHotEncoder": [[886, null]], "OneToOneFeatureMixin": [[437, null]], "OneVsOneClassifier": [[841, null], [1011, "onevsoneclassifier"]], "OneVsRestClassifier": [[842, null], [1011, "onevsrestclassifier"]], "Online One-Class SVM": [[329, "online-one-class-svm"], [1024, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[85, null]], "Optical recognition of handwritten digits dataset": [[381, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[181, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[386, "optional-arguments"]], "Options to tune the decision threshold": [[415, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[418, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[887, null]], "Ordinary Least Squares": [[1006, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1006, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[216, null]], "Original data": [[282, "original-data"], [317, "original-data"]], "Original image": [[88, "original-image"]], "Original points": [[307, "original-points"]], "Orthogonal Matching Pursuit": [[217, null]], "Orthogonal Matching Pursuit (OMP)": [[1006, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[673, null]], "OrthogonalMatchingPursuitCV": [[674, null]], "Other changes": [[1041, "other-changes"]], "Other estimators and tasks": [[1029, "other-estimators-and-tasks"]], "Otto Group": [[1034, "id26"]], "Our community, our values": [[384, null]], "Our vanilla classifier": [[290, "our-vanilla-classifier"]], "Out of Bag Estimates": [[999, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1012, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1016, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[304, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[438, null]], "Outliers in the X direction": [[235, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[235, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1018, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[843, null], [1011, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[372, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[416, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[294, null]], "Overview of outlier detection methods": [[1016, "overview-of-outlier-detection-methods"]], "PCA": [[550, null]], "PCA example with Iris Data-set": [[130, null]], "PCA using randomized SVD": [[421, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1027, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1034, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[117, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[117, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[419, "plscanonical"], [491, null]], "PLSRegression": [[419, "plsregression"], [492, null]], "PLSSVD": [[419, "plssvd"], [493, null]], "Packaging": [[1053, "packaging"]], "Pair Confusion Matrix": [[416, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[276, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[276, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[334, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1008, null]], "PairwiseKernel": [[629, null]], "Pandas": [[389, "pandas"]], "Pandas output with set_output API": [[331, "pandas-output-with-set-output-api"]], "Parallel": [[975, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[372, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[372, "parallelism"], [999, "parallelism"]], "Parallelism, resource management, and configuration": [[372, null]], "Parallelization": [[423, "parallelization"]], "ParameterGrid": [[820, null]], "ParameterSampler": [[821, null]], "Parameters": [[398, "parameters"], [423, "parameters"]], "Parameters and init": [[386, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1025, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[192, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1017, null]], "Partial dependence plots": [[1017, "partial-dependence-plots"]], "PartialDependenceDisplay": [[641, null]], "Partitioning the data": [[196, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1006, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[675, null]], "PassiveAggressiveRegressor": [[676, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[424, "patch-extraction"]], "PatchExtractor": [[592, null]], "PeerIndex": [[1034, "id17"]], "People": [[1041, "people"], [1041, "id2"], [1041, "id5"], [1041, "id8"], [1041, "id11"], [1041, "id13"], [1041, "id15"], [1041, "id17"], [1042, "people"], [1042, "id3"], [1043, "people"], [1044, "people"]], "Perceptron": [[677, null], [1006, "perceptron"]], "Performance improvements": [[330, "performance-improvements"]], "Performance improvements in PCA": [[334, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[359, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[219, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[193, null]], "Permutation Importance with Multicollinear or Correlated Features": [[194, null]], "Permutation feature importance": [[1018, null]], "Permutation test score": [[282, "permutation-test-score"], [420, "permutation-test-score"]], "Permutation-based feature importance": [[326, "permutation-based-feature-importance"]], "Pinball loss": [[1010, "pinball-loss"]], "Pipeline": [[873, null]], "Pipeline ANOVA SVM": [[170, null]], "Pipeline compatibility": [[386, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[277, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[417, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[103, null], [188, "pipelines-and-composite-estimators"], [417, null]], "Pipelines: chaining pre-processors and estimators": [[397, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1027, null]], "Pipelining: chaining a PCA and a logistic regression": [[107, null]], "Pixel importances with a parallel forest of trees": [[146, null]], "Platform-specific instructions": [[382, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[283, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[273, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[223, null]], "Plot a PCA representation": [[120, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[358, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[285, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[285, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[203, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[255, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[161, null]], "Plot classification boundaries with different SVM Kernels": [[351, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[344, null]], "Plot discrete decision boundary": [[155, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[164, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[152, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[162, null]], "Plot multi-class SGD on the iris dataset": [[227, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[210, null]], "Plot number of features VS. cross-validation scores": [[172, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[155, "plot-path-length-decision-boundary"]], "Plot randomly generated classification dataset": [[121, null]], "Plot randomly generated multilabel dataset": [[122, null]], "Plot regularization path": [[211, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [98, "plot-result"], [102, "plot-result"], [102, "id2"]], "Plot results": [[47, "plot-results"], [84, "plot-results"], [111, "plot-results"], [125, "plot-results"], [126, "plot-results"], [144, "plot-results"], [296, "plot-results"], [304, "plot-results"]], "Plot results functions": [[289, "plot-results-functions"]], "Plot support and time series": [[212, "plot-support-and-time-series"]], "Plot the BIC scores": [[266, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[283, "plot-the-precision-recall-curve"]], "Plot the best model": [[266, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[350, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[160, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[363, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[147, null]], "Plot the marginal log-likelihood": [[198, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[283, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[336, "plot-the-most-uncertain-predictions"]], "Plot the results": [[85, "plot-the-results"], [115, "plot-the-results"], [162, "plot-the-results"], [187, "plot-the-results"]], "Plot the results on an image": [[82, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[345, null]], "Plot the true and estimated coefficients": [[198, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[199, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[152, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [315, "plotting"]], "Plotting API Overview": [[391, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[272, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[278, null]], "Plotting Validation Curves": [[292, null]], "Plotting four circles": [[101, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[256, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[256, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[256, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[198, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[258, "plotting-the-roc-curve"]], "Plotting the Results": [[323, "plotting-the-results"]], "Plotting the result": [[280, "plotting-the-result"]], "Plotting the results": [[99, "plotting-the-results"], [139, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[222, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[101, "plotting-two-circles"]], "Plotting with Multiple Axes": [[391, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[218, null]], "PoissonRegressor": [[678, null]], "Polars output in set_output": [[333, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[1002, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[219, null]], "Polynomial features": [[1020, "polynomial-features"]], "Polynomial kernel": [[351, "polynomial-kernel"], [1008, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1006, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[649, null]], "PolynomialFeatures": [[888, null]], "Possible solutions": [[92, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[362, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[290, null]], "Post-tuning the decision threshold": [[415, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[270, null]], "PowerTransformer": [[317, "powertransformer"], [889, null]], "Pre-test vs. post-test analysis": [[279, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1010, "precision-recall-and-f-measures"]], "Precision-Recall": [[283, null]], "PrecisionRecallDisplay": [[709, null]], "Precomputed sparse nearest neighbors graph": [[326, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[420, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[822, null]], "Prediction Intervals for Gradient Boosting Regression": [[151, null]], "Prediction Latency": [[49, null], [371, "prediction-latency"]], "Prediction Throughput": [[371, "prediction-throughput"]], "PredictionErrorDisplay": [[710, null]], "Preparing the data": [[139, "preparing-the-data"], [154, "preparing-the-data"], [196, "preparing-the-data"]], "Preprocessing": [[188, "preprocessing"], [316, null]], "Preprocessing data": [[1020, null]], "Preprocessing numerical variables": [[191, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[192, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[192, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[192, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[118, null]], "Principal component analysis (PCA)": [[421, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1058, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[426, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[176, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[414, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[191, "processing-the-dataset"]], "Product": [[630, null]], "Productivity and sanity-preserving tips": [[392, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[390, "profiling-python-code"]], "Profiling compiled extensions": [[390, "profiling-compiled-extensions"]], "Project template:": [[386, null]], "Projecting data: PCA vs. KernelPCA": [[129, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[129, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[118, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[389, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[384, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[236, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1030, "purpose-of-this-document"]], "Purpose of this example": [[222, "purpose-of-this-example"]], "PyTorch Support": [[412, "pytorch-support"]], "Python API": [[372, "python-api"]], "Python package and dataset imports, load dataset": [[250, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[390, "python-cython-or-c-c"]], "QDA": [[1004, "qda"]], "QuadraticDiscriminantAnalysis": [[559, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[359, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1006, "quantile-regression"]], "Quantile Regressor": [[329, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[330, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[220, null]], "QuantileRegressor": [[679, null]], "QuantileTransformer": [[890, null]], "QuantileTransformer (Gaussian output)": [[317, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[317, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1006, "ransac-random-sample-consensus"]], "RANSACRegressor": [[680, null]], "RBF": [[631, null]], "RBF SVM parameters": [[347, null]], "RBF kernel": [[351, "rbf-kernel"], [1008, "rbf-kernel"]], "RBFSampler": [[650, null]], "RCV1 dataset": [[379, "rcv1-dataset"]], "RFE": [[602, null]], "RFECV": [[603, null]], "ROC AUC now supports multiclass classification": [[326, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[258, null]], "ROC curve showing a specific class": [[285, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[285, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[285, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[285, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[1002, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[184, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[426, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[863, null]], "RadiusNeighborsRegressor": [[864, null]], "RadiusNeighborsTransformer": [[865, null]], "Rand index": [[416, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[194, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[423, "random-forests"]], "Random Numbers": [[386, "random-numbers"]], "Random Projection": [[1022, null]], "Random data": [[282, "random-data"]], "Random forests and other randomized tree ensembles": [[423, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[420, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1027, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[573, null]], "RandomForestRegressor": [[574, null]], "RandomTreesEmbedding": [[575, null]], "Randomized Parameter Optimization": [[999, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[823, null]], "Rangespan": [[1034, "id11"]], "Ranking loss": [[1010, "ranking-loss"]], "Rational Quadratic kernel": [[184, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[426, "rational-quadratic-kernel"]], "RationalQuadratic": [[632, null]], "Reading the existing code base": [[384, "reading-the-existing-code-base"]], "Real world datasets": [[379, null]], "Real-world data set": [[109, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[286, null]], "Receiver operating characteristic (ROC)": [[1010, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1029, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[171, null], [425, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[172, null]], "Reference Steps": [[388, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [114, "references"], [141, "references"], [196, "references"], [203, "references"], [294, "references"], [310, "references"], [426, "references"], [1000, "references"]], "Region of Practical Equivalence": [[276, "region-of-practical-equivalence"]], "Regression": [[183, "regression"], [1006, "regression"], [1014, "regression"], [1024, "regression"], [1025, "regression"], [1026, "regression"]], "Regression criteria": [[1026, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1010, "regression-metrics"]], "RegressorChain": [[847, null], [1011, "regressorchain"]], "RegressorMixin": [[439, null]], "RegressorTags": [[931, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1014, "regularization"]], "Regularization path of L1- Logistic Regression": [[211, null]], "Related Projects": [[1029, null]], "Related changes": [[1048, "related-changes"]], "Relation to impurity-based importance in trees": [[1018, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[188, "release-highlights"], [325, null]], "Release Highlights for scikit-learn 0.22": [[326, null]], "Release Highlights for scikit-learn 0.23": [[327, null]], "Release Highlights for scikit-learn 0.24": [[328, null]], "Release Highlights for scikit-learn 1.0": [[329, null]], "Release Highlights for scikit-learn 1.1": [[330, null]], "Release Highlights for scikit-learn 1.2": [[331, null]], "Release Highlights for scikit-learn 1.3": [[332, null]], "Release Highlights for scikit-learn 1.4": [[333, null]], "Release Highlights for scikit-learn 1.5": [[334, null]], "Release History": [[1039, null]], "Releasing": [[388, "releasing"]], "Remarks": [[249, "remarks"]], "Removed modules": [[1041, "removed-modules"]], "Removing features with low variance": [[425, "removing-features-with-low-variance"]], "Repeated K-Fold": [[420, "repeated-k-fold"]], "RepeatedKFold": [[824, null]], "RepeatedStratifiedKFold": [[825, null]], "Replace missing values by 0": [[187, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[410, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[315, null]], "Restricted Boltzmann machines": [[1015, "restricted-boltzmann-machines"]], "Results interpretation": [[296, "results-interpretation"]], "Retrieve dataframes from OpenML": [[326, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[247, "rich-html-representation"]], "Rich visual representation of estimators": [[327, "rich-visual-representation-of-estimators"]], "Ridge": [[681, null]], "Ridge Complexity": [[1006, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[222, null]], "Ridge regression and classification": [[1006, "ridge-regression-and-classification"]], "RidgeCV": [[682, null]], "RidgeClassifier": [[683, null]], "RidgeClassifierCV": [[684, null]], "Roadmap": [[1030, null]], "Robust Covariance Estimation": [[418, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[113, null]], "Robust linear estimator fitting": [[224, null]], "Robust linear model estimation using RANSAC": [[221, null]], "Robust vs Empirical covariance estimate": [[114, null]], "RobustScaler": [[317, "robustscaler"], [891, null]], "Robustness of cross-validation results": [[367, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1006, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[999, "robustness-to-failure"]], "RocCurveDisplay": [[711, null]], "Roles And Responsibilities": [[399, "roles-and-responsibilities"]], "Rolling your own estimator": [[386, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[252, "routing-meta-estimator"]], "Run the benchmark": [[93, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[280, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[382, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1010, "r2-score-the-coefficient-of-determination"]], "SGD": [[1024, "id5"]], "SGD: Maximum margin separating hyperplane": [[230, null]], "SGD: Penalties": [[229, null]], "SGD: Weighted samples": [[231, null]], "SGD: convex loss functions": [[228, null]], "SGDClassifier": [[685, null]], "SGDOneClassSVM": [[686, null]], "SGDRegressor": [[687, null]], "SKLEARN_ASSUME_FINITE": [[372, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[372, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[372, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[372, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[372, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[372, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[372, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[372, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[372, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[372, "sklearn-working-memory"]], "SVC": [[918, null], [1025, "svc"]], "SVM Exercise": [[166, null]], "SVM Margins Example": [[352, null]], "SVM Tie Breaking Example": [[355, null]], "SVM with custom kernel": [[343, null]], "SVM-Anova: SVM with univariate feature selection": [[350, null]], "SVM: Maximum margin separating hyperplane": [[348, null]], "SVM: Separating hyperplane for unbalanced classes": [[349, null]], "SVM: Weighted samples": [[356, null]], "SVR": [[919, null], [1025, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[378, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[277, null]], "Sample weight support": [[423, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[327, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[327, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[196, null]], "Scale Invariance": [[90, "scale-invariance"]], "Scaling data with outliers": [[1020, "scaling-data-with-outliers"]], "Scaling features to a range": [[1020, "scaling-features-to-a-range"]], "Scaling sparse data": [[1020, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[354, null]], "Scaling up the One-Class SVM": [[1016, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[373, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[120, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[117, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[399, null]], "Scores and probabilities": [[1025, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[999, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1059, "security"]], "Security & Maintainability Limitations": [[410, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[81, null]], "SelectFdr": [[604, null]], "SelectFpr": [[605, null]], "SelectFromModel": [[606, null]], "SelectFwe": [[607, null]], "SelectKBest": [[608, null]], "SelectPercentile": [[609, null]], "Selecting Lasso via an information criterion": [[207, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[207, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[106, null]], "Selecting features based on importance": [[173, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[173, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[95, null]], "SelectorMixin": [[610, null]], "Self Training": [[1023, "self-training"]], "SelfTrainingClassifier": [[910, null]], "Semi Supervised Classification": [[188, "semi-supervised-classification"], [335, null]], "Semi-supervised Classification on a Text Dataset": [[340, null]], "Semi-supervised learning": [[336, "semi-supervised-learning"], [1023, null]], "Sequence similarity matrix under the kernel": [[183, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[425, "sequential-feature-selection"]], "SequentialFeatureSelector": [[611, null]], "Serving the model artifact": [[410, "serving-the-model-artifact"]], "Setting regularization parameter": [[1006, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1006, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[236, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[1004, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[111, null]], "Shrinkage via learning rate": [[423, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[418, "shrunk-covariance"]], "ShrunkCovariance": [[484, null]], "ShuffleSplit": [[826, null]], "Sigmoid": [[414, "sigmoid"]], "Sigmoid kernel": [[351, "sigmoid-kernel"], [1008, "sigmoid-kernel"]], "Silhouette Coefficient": [[416, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[302, null]], "Simple Pipeline": [[252, "simple-pipeline"]], "SimpleImputer": [[639, null]], "Single estimator versus bagging: bias-variance decomposition": [[141, null]], "Single label": [[380, "single-label"]], "Skewed Chi Squared Kernel": [[1002, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[651, null]], "Social Media": [[1033, "social-media"]], "Solvers": [[1006, "solvers"]], "Sparse coding with a precomputed dictionary": [[133, null], [421, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[124, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1020, null]], "Sparse inverse covariance": [[418, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[115, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[421, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1022, "sparse-random-projection"]], "SparseCoder": [[551, null]], "SparsePCA": [[552, null]], "SparseRandomProjection": [[906, null]], "Sparsity": [[424, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[215, null]], "Species distribution dataset": [[379, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[386, "specific-models"]], "Specifying an objective metric": [[999, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[999, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[413, "spectral-biclustering"]], "Spectral Clustering Graphs": [[416, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[413, "spectral-co-clustering"]], "Spectral Embedding": [[1007, "spectral-embedding"]], "Spectral clustering": [[416, "spectral-clustering"]], "Spectral clustering for image segmentation": [[101, null]], "Spectral embedding for non-linear dimensionality reduction": [[238, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[459, null]], "SpectralClustering": [[460, null]], "SpectralCoclustering": [[461, null]], "SpectralEmbedding": [[700, null]], "Sphinx version": [[384, null]], "Spline Transformers": [[329, "spline-transformers"]], "Spline transformer": [[1020, "spline-transformer"]], "SplineTransformer": [[892, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1034, "id2"]], "Stack of predictors on a single data set": [[159, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[423, "stacked-generalization"]], "Stacking Classifier and Regressor": [[326, "stacking-classifier-and-regressor"]], "StackingClassifier": [[576, null]], "StackingRegressor": [[577, null]], "Stalled and Unclaimed Issues": [[384, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[384, "stalled-pull-requests"]], "Standard replies for reviewing": [[392, "standard-replies-for-reviewing"]], "StandardScaler": [[317, "standardscaler"], [893, null]], "Standardization, or mean removal and variance scaling": [[1020, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1030, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[276, null]], "Statistical learning with Python": [[1029, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1024, null]], "Stochastic Gradient Descent - SGD": [[1006, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1024, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1015, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1024, "stopping-criterion"]], "Strategies comparison": [[294, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[373, null]], "Stratified Shuffle Split": [[420, "stratified-shuffle-split"]], "Stratified k-fold": [[420, "stratified-k-fold"]], "StratifiedGroupKFold": [[420, "stratifiedgroupkfold"], [827, null]], "StratifiedKFold": [[828, null]], "StratifiedShuffleSplit": [[829, null]], "Streaming instances": [[373, "streaming-instances"]], "Submitting a bug report or a feature request": [[384, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1030, "subpackage-specific-goals"]], "Subsampling": [[423, "subsampling"]], "Successive Halving Iterations": [[288, null]], "Successive Halving estimators for tuning hyper-parameters": [[328, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[633, null]], "Summarizing the key points": [[410, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [149, "summary"], [360, "summary"]], "Summary of cross-validation approach": [[207, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[410, "id2"]], "Supervised learning": [[1032, null]], "Support": [[1033, null]], "Support Vector Machines": [[188, "support-vector-machines"], [342, null], [1025, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[353, null]], "Support for Array API": [[1058, "support-for-array-api"], [1059, "support-for-array-api"], [1060, "support-for-array-api"]], "Support for Array API-compatible inputs": [[412, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1058, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1059, "support-for-building-with-meson"]], "Support for missing values": [[154, "support-for-missing-values"]], "Support for quantile loss": [[154, "support-for-quantile-loss"]], "Swiss Roll": [[242, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[242, null]], "Swiss-Hole": [[242, "swiss-hole"]], "Synthetic dataset": [[389, "synthetic-dataset"]], "Synthetic example": [[109, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[238, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[701, null]], "Table of Contents": [[396, "table-of-contents"]], "Tags": [[932, null]], "Take-home messages": [[276, "take-home-messages"]], "Target Encoder": [[1020, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[324, null]], "Target Types": [[398, "target-types"]], "Target format": [[1011, "target-format"], [1011, "id5"], [1011, "id8"], [1011, "id10"]], "TargetEncoder": [[894, null]], "TargetEncoder: a new category encoding strategy": [[332, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[933, null]], "Technical Committee": [[399, "technical-committee"]], "Test dependencies": [[382, "test-dependencies"]], "Test with permutations the significance of a classification score": [[282, null]], "Testing Functions": [[393, "testing-functions"]], "Testing and improving test coverage": [[384, "testing-and-improving-test-coverage"]], "Text feature extraction": [[424, "text-feature-extraction"]], "TfidfTransformer": [[599, null]], "TfidfVectorizer": [[360, "tfidfvectorizer"], [600, null]], "Tf\u2013idf term weighting": [[424, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[379, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[424, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1009, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[218, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[120, null]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[249, null]], "The Johnson-Lindenstrauss lemma": [[1022, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[379, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[392, "the-meson-build-backend"]], "The Olivetti faces dataset": [[379, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[294, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[283, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[270, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[420, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[118, "the-data"]], "The dataset": [[274, "the-dataset"]], "The dataset: simulated hourly wages": [[190, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[191, "the-dataset-wages"]], "The diabetes dataset": [[290, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[294, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[191, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[191, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[388, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1010, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[235, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1006, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[688, null]], "Theoretical bounds": [[249, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[252, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[402, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[420, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[830, null]], "Timing and accuracy plots": [[250, "timing-and-accuracy-plots"]], "Tips and Tricks": [[371, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[385, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[999, "tips-for-parameter-search"]], "Tips for performance": [[385, "tips-for-performance"]], "Tips on Practical Use": [[1014, "tips-on-practical-use"], [1024, "tips-on-practical-use"], [1025, "tips-on-practical-use"]], "Tips on practical use": [[1007, "tips-on-practical-use"], [1026, "tips-on-practical-use"]], "Tips to ease development": [[385, "tips-to-ease-development"]], "Tools": [[412, "tools"]], "Top terms per cluster": [[359, "top-terms-per-cluster"]], "Top-k accuracy score": [[1010, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[362, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[423, "totally-random-trees-embedding"]], "Toy datasets": [[381, null]], "Tracking feature names in a pipeline": [[417, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1006, null]], "Train and Persist the Model": [[410, "train-and-persist-the-model"]], "Train classifiers": [[347, "train-classifiers"]], "Train error vs Test error": [[289, null]], "Train models on the diabetes dataset": [[256, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[366, "train-tree-classifier"]], "Training": [[315, "training"], [1013, "training"]], "Training SVC model and plotting decision boundaries": [[351, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[258, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[324, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[323, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[139, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[162, "training-classifiers"]], "Training of the model": [[155, "training-of-the-model"]], "Training the AdaBoostClassifier": [[138, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[222, "training-the-ridge-regressor"]], "Transform": [[1013, "transform"]], "Transform data": [[117, "transform-data"]], "TransformedTargetRegressor": [[473, null]], "TransformerMixin": [[440, null]], "TransformerTags": [[934, null]], "Transformers and pre-processors": [[397, "transformers-and-pre-processors"]], "Transforming target in regression": [[417, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1021, null]], "Translations of scikit-learn documentation": [[1029, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1026, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[326, "tree-pruning"]], "Tree structure": [[366, "tree-structure"]], "Tree-based feature selection": [[425, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[193, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[383, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[402, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[421, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[553, null]], "TunedThresholdClassifierCV": [[831, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[334, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[274, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[270, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[270, "tuning-the-decision-threshold"], [290, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[415, null]], "Tuning the hyper-parameters of an estimator": [[999, null]], "Tuning the hyper-parameters of the quantile regressors": [[151, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[163, null], [188, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[236, null]], "TweedieRegressor": [[689, null]], "Two-class AdaBoost": [[140, null]], "Type of return values and fitted attributes": [[412, "type-of-return-values-and-fitted-attributes"]], "Types": [[385, "types"]], "T\u00e9l\u00e9com ParisTech": [[1034, "id7"]], "Unbalanced problems": [[1025, "unbalanced-problems"]], "UndefinedMetricWarning": [[587, null]], "Under Development": [[1036, "under-development"]], "Underfitting vs. Overfitting": [[291, null]], "Understanding the decision tree structure": [[366, null]], "Univariate Feature Selection": [[169, null]], "Univariate feature imputation": [[1000, "univariate-feature-imputation"]], "Univariate feature selection": [[169, "id1"], [425, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[1000, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[386, "universal-attributes"]], "Unlabeled entries in y": [[1023, null]], "Unsupervised Nearest Neighbors": [[1013, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1027, null]], "Unsupervised learning": [[1035, null]], "Unweighted feature selection": [[407, "unweighted-feature-selection"]], "Updating Authors List": [[388, "updating-authors-list"]], "Usage": [[414, "usage"], [417, "usage"], [417, "id1"], [423, "usage"], [423, "id24"], [423, "id25"], [423, "id27"], [423, "id35"], [1006, "usage"]], "Usage Examples": [[407, "usage-examples"]], "Use markdown formatting": [[389, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[392, "useful-pytest-aliases-and-flags"]], "User Guide": [[1036, null]], "User Questions": [[1033, "user-questions"]], "Using Cython": [[390, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[318, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[367, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[385, "using-openmp"]], "Using a debugger, gdb": [[390, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[392, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1006, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[420, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[156, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[390, "using-gprof"]], "Using multiple metric evaluation": [[1010, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[173, "using-negative-tolerance-values"]], "Using scikit-learn": [[396, "using-scikit-learn"]], "Using stop words": [[424, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[390, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[390, "using-yep-and-gperftools"]], "Utilities for Developers": [[393, null]], "Validation Tools": [[393, "validation-tools"]], "Validation curve": [[1005, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[1005, null]], "ValidationCurveDisplay": [[832, null]], "Vanilla predictive model": [[270, "vanilla-predictive-model"]], "VarianceThreshold": [[612, null]], "Variational Bayesian Gaussian Mixture": [[1009, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[87, null]], "Varying regularization in Multi-layer Perceptron": [[312, null]], "Varying the metric": [[416, "varying-the-metric"]], "Vector Quantization Example": [[88, null]], "Vectorizing a large text corpus with the hashing trick": [[424, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1041, "version-0-10"]], "Version 0.11": [[1041, "version-0-11"]], "Version 0.12": [[1041, "version-0-12"]], "Version 0.12.1": [[1041, "version-0-12-1"]], "Version 0.13": [[1042, null], [1042, "changes-0-13"]], "Version 0.13.1": [[1042, "version-0-13-1"]], "Version 0.14": [[1043, null], [1043, "changes-0-14"]], "Version 0.15": [[1044, null], [1044, "changes-0-15"]], "Version 0.15.1": [[1044, "version-0-15-1"]], "Version 0.15.2": [[1044, "version-0-15-2"]], "Version 0.16": [[1045, null], [1045, "changes-0-16"]], "Version 0.16.1": [[1045, "version-0-16-1"]], "Version 0.17": [[1046, null], [1046, "changes-0-17"]], "Version 0.17.1": [[1046, "version-0-17-1"]], "Version 0.18": [[1047, null], [1047, "changes-0-18"]], "Version 0.18.1": [[1047, "version-0-18-1"]], "Version 0.18.2": [[1047, "version-0-18-2"]], "Version 0.19": [[1048, null], [1048, "id1"]], "Version 0.19.1": [[1048, "version-0-19-1"]], "Version 0.19.2": [[1048, "version-0-19-2"]], "Version 0.20": [[1049, null]], "Version 0.20.0": [[1049, "version-0-20-0"]], "Version 0.20.1": [[1049, "version-0-20-1"]], "Version 0.20.2": [[1049, "version-0-20-2"]], "Version 0.20.3": [[1049, "version-0-20-3"]], "Version 0.20.4": [[1049, "version-0-20-4"]], "Version 0.21": [[1050, null]], "Version 0.21.0": [[1050, "version-0-21-0"]], "Version 0.21.1": [[1050, "version-0-21-1"]], "Version 0.21.2": [[1050, "version-0-21-2"]], "Version 0.21.3": [[1050, "version-0-21-3"]], "Version 0.22": [[1051, null]], "Version 0.22.0": [[1051, "version-0-22-0"]], "Version 0.22.1": [[1051, "version-0-22-1"]], "Version 0.22.2.post1": [[1051, "version-0-22-2-post1"]], "Version 0.23": [[1052, null]], "Version 0.23.0": [[1052, "version-0-23-0"]], "Version 0.23.1": [[1052, "version-0-23-1"]], "Version 0.23.2": [[1052, "version-0-23-2"]], "Version 0.24": [[1053, null]], "Version 0.24.0": [[1053, "version-0-24-0"]], "Version 0.24.1": [[1053, "version-0-24-1"]], "Version 0.24.2": [[1053, "version-0-24-2"]], "Version 0.4": [[1041, "version-0-4"]], "Version 0.5": [[1041, "version-0-5"]], "Version 0.6": [[1041, "version-0-6"]], "Version 0.7": [[1041, "version-0-7"]], "Version 0.8": [[1041, "version-0-8"]], "Version 0.9": [[1041, "version-0-9"]], "Version 1.0": [[1054, null]], "Version 1.0.0": [[1054, "version-1-0-0"]], "Version 1.0.1": [[1054, "version-1-0-1"]], "Version 1.0.2": [[1054, "version-1-0-2"]], "Version 1.1": [[1055, null]], "Version 1.1.0": [[1055, "version-1-1-0"]], "Version 1.1.1": [[1055, "version-1-1-1"]], "Version 1.1.2": [[1055, "version-1-1-2"]], "Version 1.1.3": [[1055, "version-1-1-3"]], "Version 1.2": [[1056, null]], "Version 1.2.0": [[1056, "version-1-2-0"]], "Version 1.2.1": [[1056, "version-1-2-1"]], "Version 1.2.2": [[1056, "version-1-2-2"]], "Version 1.3": [[1057, null]], "Version 1.3.0": [[1057, "version-1-3-0"]], "Version 1.3.1": [[1057, "version-1-3-1"]], "Version 1.3.2": [[1057, "version-1-3-2"]], "Version 1.4": [[1058, null]], "Version 1.4.0": [[1058, "version-1-4-0"]], "Version 1.4.1": [[1058, "version-1-4-1"]], "Version 1.4.2": [[1058, "version-1-4-2"]], "Version 1.5": [[1059, null]], "Version 1.5.0": [[1059, "version-1-5-0"]], "Version 1.5.1": [[1059, "version-1-5-1"]], "Version 1.5.2": [[1059, "version-1-5-2"]], "Version 1.6": [[1060, null]], "Version 1.6.0": [[1060, "version-1-6-0"]], "Video resources": [[384, "video-resources"]], "Videos": [[1028, "videos"]], "Visual evaluation of regression models": [[1010, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [347, "visualization"]], "Visualization of MLP weights on MNIST": [[314, null]], "Visualization of cluster hierarchy": [[416, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1038, null]], "Visualizations with Display Objects": [[246, null]], "Visualize Comparison": [[149, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[271, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[271, "visualize-our-data"]], "Visualize the learning curves": [[251, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[93, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[251, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[417, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[271, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[423, "voting-classifier"]], "Voting Regressor": [[423, "voting-regressor"]], "VotingClassifier": [[578, null]], "VotingRegressor": [[579, null]], "Warnings and Exceptions": [[393, "warnings-and-exceptions"]], "Ways to contribute": [[384, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[102, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1051, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[423, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[407, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[407, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[396, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[396, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[366, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[396, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[634, null]], "Who is using scikit-learn?": [[1034, null]], "Why are there so many different estimators for linear models?": [[396, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[396, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[396, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[396, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[396, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[396, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[396, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[396, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[396, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[423, "why-it-s-faster"]], "Why scikit?": [[396, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[396, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[396, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[402, "winpython-for-windows"]], "Windows": [[382, "windows"]], "Wine recognition dataset": [[381, "wine-recognition-dataset"]], "Workflow Overview": [[410, "workflow-overview"]], "Working on PRs to help review": [[383, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[383, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[188, "working-with-text-documents"], [357, null]], "Wrong causal interpretation": [[191, "wrong-causal-interpretation"]], "XOR dataset": [[351, "xor-dataset"]], "Yhat": [[1034, "id10"]], "Zero one loss": [[1010, "zero-one-loss"]], "Zopa": [[1034, "id27"]], "__sklearn_is_fitted__ as Developer API": [[136, null]], "_safe_indexing": [[935, null]], "accuracy_score": [[712, null]], "add_dummy_feature": [[895, null]], "additive_chi2_kernel": [[767, null]], "adjusted_mutual_info_score": [[713, null]], "adjusted_rand_score": [[714, null]], "affinity_propagation": [[462, null]], "all_displays": [[948, null]], "all_estimators": [[949, null]], "all_functions": [[950, null]], "as_float_array": [[937, null]], "assert_all_finite": [[938, null]], "auc": [[715, null]], "available_if": [[970, null]], "average_precision_score": [[716, null]], "balanced_accuracy_score": [[717, null]], "betaworks": [[1034, "id4"]], "binarize": [[896, null]], "brier_score_loss": [[718, null]], "calibration_curve": [[447, null]], "calinski_harabasz_score": [[719, null]], "check_X_y": [[939, null]], "check_array": [[940, null]], "check_consistent_length": [[941, null]], "check_cv": [[833, null]], "check_estimator": [[951, null]], "check_increasing": [[645, null]], "check_is_fitted": [[993, null]], "check_memory": [[994, null]], "check_random_state": [[942, null]], "check_scalar": [[943, null]], "check_scoring": [[720, null]], "check_symmetric": [[995, null]], "chi2": [[613, null]], "chi2_kernel": [[768, null]], "class_likelihood_ratios": [[721, null]], "classification_report": [[722, null]], "clear_data_home": [[494, null]], "clone": [[441, null]], "cluster_optics_dbscan": [[463, null]], "cluster_optics_xi": [[464, null]], "cohen_kappa_score": [[725, null]], "column_or_1d": [[996, null]], "completeness_score": [[726, null]], "compute_class_weight": [[944, null]], "compute_optics_graph": [[465, null]], "compute_sample_weight": [[945, null]], "config_context": [[476, null]], "confusion_matrix": [[727, null]], "consensus_score": [[728, null]], "contingency_matrix": [[723, null]], "cosine_distances": [[769, null]], "cosine_similarity": [[770, null]], "coverage_error": [[729, null]], "cross_val_predict": [[834, null]], "cross_val_score": [[835, null]], "cross_validate": [[836, null]], "d2_absolute_error_score": [[730, null]], "d2_log_loss_score": [[731, null]], "d2_pinball_score": [[732, null]], "d2_tweedie_score": [[733, null]], "davies_bouldin_score": [[734, null]], "dbscan": [[427, null]], "dbscan_clustering": [[90, "dbscan-clustering"]], "dcg_score": [[735, null]], "default_tags": [[946, null]], "delayed": [[976, null]], "density": [[954, null]], "deprecated": [[947, null]], "det_curve": [[736, null]], "dict_learning": [[554, null]], "dict_learning_online": [[555, null]], "distance_metrics": [[771, null]], "dump_svmlight_file": [[495, null]], "empirical_covariance": [[485, null]], "enable_halving_search_cv": [[588, null]], "enable_iterative_imputer": [[589, null]], "enet_path": [[690, null]], "estimate_bandwidth": [[466, null]], "estimator_html_repr": [[953, null]], "euclidean_distances": [[772, null]], "explained_variance_score": [[737, null]], "export_graphviz": [[925, null]], "export_text": [[926, null]], "extract_patches_2d": [[593, null]], "f1_score": [[738, null]], "f_classif": [[614, null]], "f_regression": [[615, null]], "fast_logdet": [[955, null]], "fastica": [[428, null]], "fbeta_score": [[739, null]], "fetch_20newsgroups": [[496, null]], "fetch_20newsgroups_vectorized": [[497, null]], "fetch_california_housing": [[498, null]], "fetch_covtype": [[499, null]], "fetch_file": [[500, null]], "fetch_kddcup99": [[501, null]], "fetch_lfw_pairs": [[502, null]], "fetch_lfw_people": [[503, null]], "fetch_olivetti_faces": [[504, null]], "fetch_openml": [[505, null]], "fetch_rcv1": [[506, null]], "fetch_species_distributions": [[507, null]], "fowlkes_mallows_score": [[740, null]], "gen_batches": [[960, null]], "gen_even_slices": [[961, null]], "get_config": [[635, null]], "get_data_home": [[508, null]], "get_feature_names_out Available in all Transformers": [[330, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[386, "get-params-and-set-params"]], "get_routing_for_object": [[968, null]], "get_scorer": [[741, null]], "get_scorer_names": [[742, null]], "get_tags": [[962, null]], "graphical_lasso": [[486, null]], "grid_to_graph": [[594, null]], "hamming_loss": [[743, null]], "has_fit_parameter": [[997, null]], "haversine_distances": [[773, null]], "hinge_loss": [[744, null]], "homogeneity_completeness_v_measure": [[745, null]], "homogeneity_score": [[746, null]], "img_to_graph": [[595, null]], "incr_mean_variance_axis": [[984, null]], "indexable": [[964, null]], "inplace_column_scale": [[985, null]], "inplace_csr_column_scale": [[986, null]], "inplace_csr_row_normalize_l1": [[991, null]], "inplace_csr_row_normalize_l2": [[992, null]], "inplace_row_scale": [[987, null]], "inplace_swap_column": [[988, null]], "inplace_swap_row": [[989, null]], "is_classifier": [[442, null]], "is_clusterer": [[443, null]], "is_multilabel": [[971, null]], "is_regressor": [[444, null]], "isotonic_regression": [[646, null]], "jaccard_score": [[747, null]], "johnson_lindenstrauss_min_dim": [[907, null]], "kNN-imputation of the missing values": [[187, "knn-imputation-of-the-missing-values"]], "k_means": [[467, null]], "kcachegrind": [[390, "kcachegrind"]], "kernel_metrics": [[774, null]], "kmeans_plusplus": [[468, null]], "kneighbors_graph": [[866, null]], "l1_min_c": [[920, null]], "label_binarize": [[897, null]], "label_ranking_average_precision_score": [[748, null]], "label_ranking_loss": [[749, null]], "laplacian_kernel": [[775, null]], "lars_path": [[691, null]], "lars_path_gram": [[692, null]], "lasso_path": [[693, null]], "learning_curve": [[837, null]], "ledoit_wolf": [[487, null]], "ledoit_wolf_shrinkage": [[488, null]], "linear_kernel": [[776, null]], "load_breast_cancer": [[509, null]], "load_diabetes": [[510, null]], "load_digits": [[511, null]], "load_files": [[512, null]], "load_iris": [[513, null]], "load_linnerud": [[514, null]], "load_sample_image": [[515, null]], "load_sample_images": [[516, null]], "load_svmlight_file": [[517, null]], "load_svmlight_files": [[518, null]], "load_wine": [[519, null]], "locally_linear_embedding": [[702, null]], "log_loss": [[750, null]], "macOS": [[382, "macos"]], "macOS compilers from Homebrew": [[382, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[382, "macos-compilers-from-conda-forge"]], "make_biclusters": [[520, null]], "make_blobs": [[389, "make-blobs"], [521, null]], "make_checkerboard": [[522, null]], "make_circles": [[523, null]], "make_classification": [[389, "make-classification"], [524, null]], "make_column_selector": [[474, null]], "make_column_transformer": [[475, null]], "make_friedman1": [[525, null]], "make_friedman2": [[526, null]], "make_friedman3": [[527, null]], "make_gaussian_quantiles": [[528, null]], "make_hastie_10_2": [[529, null]], "make_low_rank_matrix": [[530, null]], "make_moons": [[531, null]], "make_multilabel_classification": [[532, null]], "make_pipeline": [[874, null]], "make_regression": [[389, "make-regression"], [533, null]], "make_s_curve": [[534, null]], "make_scorer": [[751, null]], "make_sparse_coded_signal": [[535, null]], "make_sparse_spd_matrix": [[536, null]], "make_sparse_uncorrelated": [[537, null]], "make_spd_matrix": [[538, null]], "make_swiss_roll": [[539, null]], "make_union": [[875, null]], "manhattan_distances": [[777, null]], "matthews_corrcoef": [[752, null]], "max_error": [[753, null]], "maxabs_scale": [[898, null]], "mean_absolute_error": [[754, null]], "mean_absolute_percentage_error": [[755, null]], "mean_gamma_deviance": [[756, null]], "mean_pinball_loss": [[757, null]], "mean_poisson_deviance": [[758, null]], "mean_shift": [[469, null]], "mean_squared_error": [[759, null]], "mean_squared_log_error": [[760, null]], "mean_tweedie_deviance": [[761, null]], "mean_variance_axis": [[990, null]], "median_absolute_error": [[762, null]], "min_cluster_size": [[90, "min-cluster-size"]], "min_pos": [[936, null]], "min_samples": [[90, "min-samples"]], "minmax_scale": [[899, null]], "multilabel_confusion_matrix": [[763, null]], "murmurhash3_32": [[974, null]], "mutual_info_classif": [[616, null]], "mutual_info_regression": [[617, null]], "mutual_info_score": [[764, null]], "nan_euclidean_distances": [[778, null]], "ndcg_score": [[765, null]], "non_negative_factorization": [[556, null]], "normalize": [[900, null]], "normalized_mutual_info_score": [[766, null]], "oas": [[429, null]], "orthogonal_mp": [[694, null]], "orthogonal_mp_gram": [[695, null]], "pair_confusion_matrix": [[724, null]], "paired_cosine_distances": [[779, null]], "paired_distances": [[780, null]], "paired_euclidean_distances": [[781, null]], "paired_manhattan_distances": [[782, null]], "pairwise_distances": [[787, null]], "pairwise_distances_argmin": [[788, null]], "pairwise_distances_argmin_min": [[789, null]], "pairwise_distances_chunked": [[790, null]], "pairwise_kernels": [[783, null]], "parallel_backend": [[977, null]], "parametrize_with_checks": [[952, null]], "partial_dependence": [[642, null]], "permutation_importance": [[643, null]], "permutation_test_score": [[838, null]], "pickle, joblib, and cloudpickle": [[410, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[927, null]], "polynomial_kernel": [[784, null]], "power_transform": [[901, null]], "precision_recall_curve": [[791, null]], "precision_recall_fscore_support": [[792, null]], "precision_score": [[793, null]], "process_routing": [[969, null]], "quantile_transform": [[902, null]], "r2_score": [[794, null]], "r_regression": [[618, null]], "radius_neighbors_graph": [[867, null]], "rand_score": [[795, null]], "randomized_range_finder": [[956, null]], "randomized_svd": [[957, null]], "rbf_kernel": [[785, null]], "recall_score": [[796, null]], "reconstruct_from_patches_2d": [[596, null]], "register_parallel_backend": [[979, null]], "resample": [[980, null]], "ridge_regression": [[696, null]], "robust_scale": [[903, null]], "roc_auc_score": [[797, null]], "roc_curve": [[798, null]], "root_mean_squared_error": [[799, null]], "root_mean_squared_log_error": [[800, null]], "safe_mask": [[981, null]], "safe_sparse_dot": [[958, null]], "safe_sqr": [[982, null]], "sample_without_replacement": [[978, null]], "scale": [[904, null]], "set_config": [[911, null]], "show_versions": [[912, null]], "shrunk_covariance": [[489, null]], "shuffle": [[983, null]], "sigmoid_kernel": [[786, null]], "silhouette_samples": [[801, null]], "silhouette_score": [[802, null]], "single_source_shortest_path_length": [[963, null]], "sklearn": [[3, null], [1057, "sklearn"]], "sklearn.base": [[4, null], [1050, "sklearn-base"], [1051, "sklearn-base"], [1053, "sklearn-base"], [1054, "sklearn-base"], [1055, "sklearn-base"], [1056, "sklearn-base"], [1056, "id2"], [1056, "id10"], [1057, "sklearn-base"], [1058, "sklearn-base"], [1060, "sklearn-base"]], "sklearn.calibration": [[5, null], [1050, "sklearn-calibration"], [1051, "sklearn-calibration"], [1053, "sklearn-calibration"], [1054, "sklearn-calibration"], [1054, "id7"], [1055, "sklearn-calibration"], [1056, "sklearn-calibration"], [1056, "id11"], [1057, "sklearn-calibration"], [1057, "id7"], [1058, "sklearn-calibration"], [1058, "id4"], [1059, "sklearn-calibration"], [1059, "id7"]], "sklearn.cluster": [[6, null], [1049, "sklearn-cluster"], [1049, "id2"], [1049, "id11"], [1049, "id24"], [1050, "sklearn-cluster"], [1050, "id8"], [1051, "sklearn-cluster"], [1051, "id5"], [1052, "sklearn-cluster"], [1052, "id2"], [1052, "id5"], [1053, "sklearn-cluster"], [1054, "sklearn-cluster"], [1054, "id1"], [1054, "id8"], [1055, "sklearn-cluster"], [1055, "id8"], [1056, "sklearn-cluster"], [1056, "id12"], [1057, "sklearn-cluster"], [1057, "id8"], [1058, "sklearn-cluster"], [1058, "id5"], [1059, "sklearn-cluster"], [1060, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1049, "sklearn-compose"], [1049, "id3"], [1049, "id6"], [1049, "id12"], [1049, "id25"], [1050, "sklearn-compose"], [1050, "id9"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1053, "sklearn-compose"], [1053, "id5"], [1054, "sklearn-compose"], [1055, "sklearn-compose"], [1056, "sklearn-compose"], [1057, "sklearn-compose"], [1058, "sklearn-compose"], [1058, "id6"], [1059, "sklearn-compose"], [1059, "id3"], [1059, "id8"], [1060, "sklearn-compose"]], "sklearn.covariance": [[8, null], [1049, "sklearn-covariance"], [1049, "id26"], [1053, "sklearn-covariance"], [1054, "sklearn-covariance"], [1055, "sklearn-covariance"], [1057, "sklearn-covariance"], [1058, "sklearn-covariance"], [1060, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1051, "sklearn-cross-decomposition"], [1053, "sklearn-cross-decomposition"], [1053, "id6"], [1055, "sklearn-cross-decomposition"], [1057, "sklearn-cross-decomposition"], [1059, "sklearn-cross-decomposition"], [1060, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1049, "sklearn-datasets"], [1049, "id13"], [1049, "id27"], [1050, "sklearn-datasets"], [1050, "id10"], [1051, "sklearn-datasets"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"], [1054, "sklearn-datasets"], [1054, "id9"], [1055, "sklearn-datasets"], [1055, "id9"], [1056, "sklearn-datasets"], [1056, "id13"], [1057, "sklearn-datasets"], [1057, "id9"], [1058, "sklearn-datasets"], [1059, "sklearn-datasets"], [1060, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1049, "sklearn-decomposition"], [1049, "id4"], [1049, "id14"], [1049, "id28"], [1050, "sklearn-decomposition"], [1050, "id11"], [1051, "sklearn-decomposition"], [1052, "sklearn-decomposition"], [1052, "id6"], [1053, "sklearn-decomposition"], [1053, "id7"], [1054, "sklearn-decomposition"], [1054, "id10"], [1055, "sklearn-decomposition"], [1055, "id10"], [1056, "sklearn-decomposition"], [1056, "id14"], [1057, "sklearn-decomposition"], [1057, "id10"], [1058, "sklearn-decomposition"], [1059, "sklearn-decomposition"], [1059, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1049, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1053, "sklearn-discriminant-analysis"], [1055, "sklearn-discriminant-analysis"], [1056, "sklearn-discriminant-analysis"], [1057, "sklearn-discriminant-analysis"], [1060, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1049, "sklearn-dummy"], [1050, "sklearn-dummy"], [1051, "sklearn-dummy"], [1054, "sklearn-dummy"], [1055, "sklearn-dummy"], [1059, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1049, "sklearn-ensemble"], [1049, "id29"], [1050, "sklearn-ensemble"], [1050, "id12"], [1051, "sklearn-ensemble"], [1052, "sklearn-ensemble"], [1052, "id7"], [1053, "sklearn-ensemble"], [1053, "id8"], [1054, "sklearn-ensemble"], [1054, "id2"], [1054, "id11"], [1055, "sklearn-ensemble"], [1056, "sklearn-ensemble"], [1056, "id3"], [1056, "id15"], [1057, "sklearn-ensemble"], [1057, "id11"], [1058, "sklearn-ensemble"], [1058, "id7"], [1059, "sklearn-ensemble"], [1060, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1053, "sklearn-exceptions"], [1057, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1050, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1049, "sklearn-feature-extraction"], [1049, "id15"], [1049, "id30"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1052, "id8"], [1053, "sklearn-feature-extraction"], [1053, "id9"], [1054, "sklearn-feature-extraction"], [1054, "id12"], [1055, "sklearn-feature-extraction"], [1056, "sklearn-feature-extraction"], [1057, "sklearn-feature-extraction"], [1058, "sklearn-feature-extraction"], [1059, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1049, "sklearn-feature-selection"], [1051, "sklearn-feature-selection"], [1052, "sklearn-feature-selection"], [1053, "sklearn-feature-selection"], [1054, "sklearn-feature-selection"], [1054, "id13"], [1055, "sklearn-feature-selection"], [1055, "id2"], [1055, "id11"], [1056, "sklearn-feature-selection"], [1056, "id16"], [1057, "sklearn-feature-selection"], [1057, "id12"], [1058, "sklearn-feature-selection"], [1059, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1049, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1052, "sklearn-gaussian-process"], [1053, "sklearn-gaussian-process"], [1053, "id10"], [1054, "sklearn-gaussian-process"], [1055, "sklearn-gaussian-process"], [1056, "sklearn-gaussian-process"], [1057, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1049, "sklearn-impute"], [1049, "id31"], [1050, "sklearn-impute"], [1050, "id13"], [1051, "sklearn-impute"], [1051, "id6"], [1052, "sklearn-impute"], [1053, "sklearn-impute"], [1054, "sklearn-impute"], [1055, "sklearn-impute"], [1055, "id12"], [1056, "sklearn-impute"], [1057, "sklearn-impute"], [1057, "id13"], [1058, "sklearn-impute"], [1059, "sklearn-impute"], [1060, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1050, "sklearn-inspection"], [1050, "id3"], [1050, "id14"], [1051, "sklearn-inspection"], [1051, "id7"], [1052, "sklearn-inspection"], [1052, "id11"], [1053, "sklearn-inspection"], [1054, "sklearn-inspection"], [1055, "sklearn-inspection"], [1056, "sklearn-inspection"], [1056, "id17"], [1057, "sklearn-inspection"], [1058, "sklearn-inspection"], [1058, "id8"], [1059, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1049, "sklearn-isotonic"], [1050, "sklearn-isotonic"], [1051, "sklearn-isotonic"], [1053, "sklearn-isotonic"], [1055, "sklearn-isotonic"], [1056, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1051, "sklearn-kernel-approximation"], [1053, "sklearn-kernel-approximation"], [1054, "sklearn-kernel-approximation"], [1055, "sklearn-kernel-approximation"], [1056, "sklearn-kernel-approximation"], [1057, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1058, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1049, "sklearn-linear-model"], [1049, "id16"], [1049, "id32"], [1050, "sklearn-linear-model"], [1050, "id15"], [1051, "sklearn-linear-model"], [1052, "sklearn-linear-model"], [1052, "id9"], [1053, "sklearn-linear-model"], [1053, "id11"], [1054, "sklearn-linear-model"], [1054, "id3"], [1054, "id14"], [1055, "sklearn-linear-model"], [1055, "id13"], [1056, "sklearn-linear-model"], [1056, "id18"], [1057, "sklearn-linear-model"], [1058, "sklearn-linear-model"], [1058, "id9"], [1059, "sklearn-linear-model"], [1060, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1049, "sklearn-manifold"], [1050, "sklearn-manifold"], [1051, "sklearn-manifold"], [1052, "sklearn-manifold"], [1053, "sklearn-manifold"], [1054, "sklearn-manifold"], [1054, "id15"], [1055, "sklearn-manifold"], [1055, "id14"], [1056, "sklearn-manifold"], [1056, "id19"], [1057, "sklearn-manifold"], [1059, "sklearn-manifold"], [1060, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1049, "sklearn-metrics"], [1049, "id17"], [1049, "id33"], [1050, "sklearn-metrics"], [1050, "id4"], [1050, "id16"], [1051, "sklearn-metrics"], [1051, "id2"], [1051, "id8"], [1052, "sklearn-metrics"], [1052, "id10"], [1053, "sklearn-metrics"], [1053, "id2"], [1053, "id12"], [1054, "sklearn-metrics"], [1054, "id16"], [1055, "sklearn-metrics"], [1055, "id3"], [1055, "id15"], [1056, "sklearn-metrics"], [1057, "sklearn-metrics"], [1057, "id2"], [1057, "id14"], [1058, "sklearn-metrics"], [1059, "sklearn-metrics"], [1059, "id4"], [1059, "id10"], [1060, "sklearn-metrics"]], "sklearn.mixture": [[28, null], [1049, "sklearn-mixture"], [1049, "id34"], [1050, "sklearn-mixture"], [1054, "sklearn-mixture"], [1055, "sklearn-mixture"], [1057, "sklearn-mixture"], [1057, "id15"], [1059, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1049, "sklearn-model-selection"], [1049, "id35"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1051, "id9"], [1051, "id13"], [1052, "sklearn-model-selection"], [1053, "sklearn-model-selection"], [1053, "id13"], [1054, "sklearn-model-selection"], [1055, "sklearn-model-selection"], [1056, "sklearn-model-selection"], [1056, "id20"], [1057, "sklearn-model-selection"], [1058, "sklearn-model-selection"], [1059, "sklearn-model-selection"], [1059, "id11"], [1060, "sklearn-model-selection"]], "sklearn.multiclass": [[30, null], [1050, "sklearn-multiclass"], [1053, "sklearn-multiclass"], [1054, "sklearn-multiclass"], [1055, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1053, "sklearn-multioutput"], [1053, "id14"], [1056, "sklearn-multioutput"], [1057, "sklearn-multioutput"], [1058, "sklearn-multioutput"], [1059, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1049, "sklearn-naive-bayes"], [1051, "sklearn-naive-bayes"], [1051, "id10"], [1052, "sklearn-naive-bayes"], [1053, "sklearn-naive-bayes"], [1054, "sklearn-naive-bayes"], [1056, "sklearn-naive-bayes"], [1057, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1049, "sklearn-neighbors"], [1049, "id7"], [1049, "id18"], [1049, "id36"], [1050, "sklearn-neighbors"], [1050, "id5"], [1050, "id17"], [1051, "sklearn-neighbors"], [1051, "id11"], [1053, "sklearn-neighbors"], [1054, "sklearn-neighbors"], [1054, "id4"], [1054, "id17"], [1055, "sklearn-neighbors"], [1056, "sklearn-neighbors"], [1057, "sklearn-neighbors"], [1057, "id16"], [1058, "sklearn-neighbors"], [1059, "sklearn-neighbors"], [1060, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1052, "sklearn-neural-network"], [1053, "sklearn-neural-network"], [1054, "sklearn-neural-network"], [1055, "sklearn-neural-network"], [1056, "sklearn-neural-network"], [1056, "id21"], [1057, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1053, "sklearn-pipeline"], [1054, "sklearn-pipeline"], [1054, "id18"], [1055, "sklearn-pipeline"], [1056, "sklearn-pipeline"], [1057, "sklearn-pipeline"], [1059, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1049, "sklearn-preprocessing"], [1049, "id19"], [1049, "id37"], [1050, "sklearn-preprocessing"], [1050, "id18"], [1051, "sklearn-preprocessing"], [1051, "id12"], [1052, "sklearn-preprocessing"], [1053, "sklearn-preprocessing"], [1053, "id15"], [1054, "sklearn-preprocessing"], [1054, "id19"], [1055, "sklearn-preprocessing"], [1055, "id4"], [1055, "id16"], [1056, "sklearn-preprocessing"], [1056, "id4"], [1056, "id22"], [1057, "sklearn-preprocessing"], [1057, "id17"], [1058, "sklearn-preprocessing"], [1058, "id10"], [1059, "sklearn-preprocessing"], [1060, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1055, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1051, "sklearn-semi-supervised"], [1052, "sklearn-semi-supervised"], [1053, "sklearn-semi-supervised"], [1053, "id3"], [1053, "id16"], [1057, "sklearn-semi-supervised"], [1060, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1049, "sklearn-svm"], [1049, "id38"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1052, "sklearn-svm"], [1053, "sklearn-svm"], [1054, "sklearn-svm"], [1054, "id20"], [1055, "sklearn-svm"], [1056, "sklearn-svm"], [1057, "sklearn-svm"], [1059, "sklearn-svm"]], "sklearn.tree": [[40, null], [1049, "sklearn-tree"], [1050, "sklearn-tree"], [1050, "id19"], [1051, "sklearn-tree"], [1052, "sklearn-tree"], [1053, "sklearn-tree"], [1053, "id17"], [1054, "sklearn-tree"], [1054, "id21"], [1055, "sklearn-tree"], [1055, "id5"], [1055, "id17"], [1056, "sklearn-tree"], [1056, "id5"], [1056, "id23"], [1057, "sklearn-tree"], [1057, "id3"], [1057, "id18"], [1058, "sklearn-tree"], [1058, "id11"], [1059, "sklearn-tree"], [1059, "id12"], [1060, "sklearn-tree"]], "sklearn.utils": [[41, null], [1049, "sklearn-utils"], [1049, "id20"], [1049, "id39"], [1050, "sklearn-utils"], [1051, "sklearn-utils"], [1051, "id14"], [1052, "sklearn-utils"], [1052, "id12"], [1053, "sklearn-utils"], [1053, "id18"], [1054, "sklearn-utils"], [1054, "id5"], [1054, "id22"], [1055, "sklearn-utils"], [1055, "id18"], [1056, "sklearn-utils"], [1056, "id6"], [1056, "id24"], [1057, "sklearn-utils"], [1058, "sklearn-utils"], [1058, "id12"], [1059, "sklearn-utils"], [1059, "id13"], [1060, "sklearn-utils"]], "sklearn.utils.sparsefuncs": [[1050, "sklearn-utils-sparsefuncs"]], "skops.io": [[410, "skops-io"]], "smacof": [[703, null]], "solido": [[1034, "id23"]], "sort_graph_by_row_values": [[868, null]], "sparse_encode": [[557, null]], "spectral_clustering": [[470, null]], "spectral_embedding": [[704, null]], "t-SNE: The effect of various perplexity values on the shape": [[243, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1007, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[803, null]], "train_test_split": [[839, null]], "trustworthiness": [[705, null]], "type_of_target": [[972, null]], "unique_labels": [[973, null]], "v_measure_score": [[804, null]], "validate_data": [[998, null]], "validation_curve": [[840, null]], "ward_tree": [[471, null]], "weighted_mode": [[959, null]], "zero_one_loss": [[805, null]], "\u201cStatlog\u201d German credit dataset": [[270, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[398, "term-1d", true]], "1d array": [[398, "term-1d-array", true]], "2d": [[398, "term-2d", true]], "2d array": [[398, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[474, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[623, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[627, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[628, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[630, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[631, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[633, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[947, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[975, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[398, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[935, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[966, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[967, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[966, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[462, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[448, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[449, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[948, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[949, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[950, "sklearn.utils.discovery.all_functions", false]], "api": [[398, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[653, "sklearn.linear_model.ARDRegression", false]], "array-like": [[398, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[937, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[938, "sklearn.utils.assert_all_finite", false]], "attribute": [[398, "term-attribute", true]], "attributes": [[398, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[715, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[970, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[398, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[853, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[430, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[806, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[654, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[848, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[869, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[431, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[431, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[459, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[461, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.Binarizer", false]], "binary": [[398, "term-binary", true]], "birch (class in sklearn.cluster)": [[450, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[451, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[623, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[627, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[628, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[630, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[631, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[633, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[718, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[928, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[445, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[447, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[446, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[398, "term-callable", true]], "categorical feature": [[398, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[849, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[490, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[940, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[941, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[951, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[645, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[993, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[994, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[942, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[943, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[720, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[995, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[939, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[721, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[398, "term-class_weight", true]], "classes_": [[398, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[602, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[603, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[683, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[684, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[808, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[809, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[812, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[823, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[873, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[722, "sklearn.metrics.classification_report", false]], "classifier": [[398, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[844, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[433, "sklearn.base.ClassifierMixin", false]], "classifiers": [[398, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[929, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[432, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[494, "sklearn.datasets.clear_data_home", false]], "clone": [[398, "term-clone", true]], "clone() (in module sklearn.base)": [[441, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[623, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[627, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[628, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[630, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[631, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[633, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[398, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[463, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[464, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[398, "term-clusterer", true]], "clusterers": [[398, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[434, "sklearn.base.ClusterMixin", false]], "coef_": [[398, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[915, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[916, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[917, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[918, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[919, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[996, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[472, "sklearn.compose.ColumnTransformer", false]], "common tests": [[398, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[850, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.completeness_score", false]], "components_": [[398, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[944, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[465, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[945, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[476, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[727, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[398, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[965, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[966, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[723, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[398, "term-continuous", true]], "continuous multi-output": [[398, "term-continuous-multi-output", true]], "continuous multioutput": [[398, "term-continuous-multioutput", true]], "convergencewarning": [[580, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[597, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[729, "sklearn.metrics.coverage_error", false]], "cross fitting": [[398, "term-0", true]], "cross validation": [[398, "term-1", true]], "cross-fitting": [[398, "term-cross-fitting", true]], "cross-validation": [[398, "term-cross-validation", true]], "cross-validation estimator": [[398, "term-cross-validation-estimator", true]], "cross-validation generator": [[398, "term-cross-validation-generator", true]], "cross-validation splitter": [[398, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[836, "sklearn.model_selection.cross_validate", false]], "cv": [[398, "term-cv", true]], "cv splitter": [[398, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[398, "term-data-leakage", true]], "data type": [[398, "term-data-type", true]], "dataconversionwarning": [[581, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[582, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[452, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[427, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[454, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.dcg_score", false]], "decision_function": [[398, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[640, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[921, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[922, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[946, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[976, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[398, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[954, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[435, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[947, "sklearn.utils.deprecated", false]], "deprecation": [[398, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[736, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[707, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[623, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[627, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[628, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[630, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[631, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[633, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[554, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[555, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[540, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[590, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[398, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[975, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[975, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[708, "sklearn.metrics.DistanceMetric", false]], "docstring": [[398, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[398, "term-double-underscore", true]], "double underscore notation": [[398, "term-double-underscore-notation", true]], "dtype": [[398, "term-dtype", true]], "duck typing": [[398, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[560, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[561, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[495, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[398, "term-early-stopping", true]], "efficiencywarning": [[583, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[655, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[477, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[398, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[485, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[478, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[466, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[398, "term-estimator", true]], "estimator instance": [[398, "term-estimator-instance", true]], "estimator tags": [[398, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[953, "sklearn.utils.estimator_html_repr", false]], "estimators": [[398, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[564, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[565, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[566, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[567, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[572, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[573, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[574, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[575, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[398, "term-evaluation-metric", true]], "evaluation metrics": [[398, "term-evaluation-metrics", true]], "examples": [[398, "term-examples", true]], "experimental": [[398, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[925, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[926, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[593, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[923, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[924, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[614, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[615, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[541, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[955, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[542, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[428, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.fbeta_score", false]], "feature": [[398, "term-feature", true]], "feature extractor": [[398, "term-feature-extractor", true]], "feature extractors": [[398, "term-feature-extractors", true]], "feature vector": [[398, "term-feature-vector", true]], "feature_importances_": [[398, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[562, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[563, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[566, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[567, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[568, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[569, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[573, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[574, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[575, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[921, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[922, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[923, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[924, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[872, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[873, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[453, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[591, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[398, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[872, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[503, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[504, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[505, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[506, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[507, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[398, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[448, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[449, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[452, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[454, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[456, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[458, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[460, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[699, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[700, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[398, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[453, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[434, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[438, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[448, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[449, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[452, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[454, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[456, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[458, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[460, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[398, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[440, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[610, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[699, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[700, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[584, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[398, "term-fitted", true]], "fitting": [[398, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[808, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[975, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[446, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[640, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[641, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[706, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[707, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[709, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[710, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[711, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[815, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[832, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[446, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[706, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[707, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[709, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[710, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[711, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.fromkeys", false]], "function": [[398, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[398, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[657, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[807, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[851, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[905, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[960, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[961, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[635, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[508, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[398, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[432, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[437, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[610, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[431, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[430, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[448, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[449, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[452, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[454, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[456, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[458, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[460, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[699, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[700, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[810, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[811, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[814, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[816, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[817, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[818, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[819, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[822, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[824, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[825, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[826, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[827, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[828, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[829, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[830, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[708, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[398, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[810, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[811, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[814, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[816, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[817, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[818, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[819, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[822, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[824, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[825, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[826, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[827, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[828, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[829, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[830, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[398, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[430, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[448, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[449, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[452, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[454, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[456, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[458, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[460, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[623, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[627, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[628, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[630, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[631, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[633, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[699, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[700, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[968, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[741, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[742, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[431, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[431, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[610, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[962, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[486, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[479, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[480, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[594, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[809, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[810, "sklearn.model_selection.GroupKFold", false]], "groups": [[398, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[811, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[812, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[813, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[743, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[997, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[598, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[454, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[745, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[746, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[658, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[398, "term-hyper-parameter", true]], "hyperparameter": [[398, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[623, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[627, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[628, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[630, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[631, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[633, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[595, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[398, "term-imputation", true]], "impute": [[398, "term-impute", true]], "inconsistentversionwarning": [[585, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[398, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[964, "sklearn.utils.indexable", false]], "induction": [[398, "term-induction", true]], "inductive": [[398, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[886, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[887, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[894, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[985, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[986, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[991, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[992, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[987, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[988, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[989, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[930, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[610, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[442, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[443, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[971, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[444, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[623, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[627, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[628, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[630, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[631, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[633, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[572, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[697, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[646, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[644, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[636, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[747, "sklearn.metrics.jaccard_score", false]], "joblib": [[398, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[907, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[467, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[854, "sklearn.neighbors.KDTree", false]], "kernel": [[398, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[858, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[652, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[814, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[455, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[468, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[866, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[855, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[856, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[857, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[637, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[920, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[398, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[748, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[749, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[908, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[398, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[909, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[659, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[692, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[661, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[693, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[665, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[545, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[398, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[837, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[815, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[816, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[817, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[818, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[819, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[487, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[488, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[481, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[666, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[913, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[914, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[515, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[516, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[517, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[518, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[519, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[702, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[698, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[859, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[750, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[667, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[474, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[475, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[874, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[751, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[535, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[536, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[537, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[538, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[539, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[875, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[752, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.max_error", false]], "max_iter": [[398, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[699, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[757, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[758, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[469, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[759, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[760, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[761, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[990, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[456, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[762, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[398, "term-memmapping", true]], "memory": [[398, "term-memory", true]], "memory map": [[398, "term-memory-map", true]], "memory mapping": [[398, "term-memory-mapping", true]], "meta-estimator": [[398, "term-meta-estimator", true]], "meta-estimators": [[398, "term-meta-estimators", true]], "metadata": [[398, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[965, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[966, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[398, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[436, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[398, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[967, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[398, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[936, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[482, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[457, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[547, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[548, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[398, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[638, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[870, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[871, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [588, "module-sklearn.experimental.enable_halving_search_cv", false], [589, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[398, "term-multi-class", true]], "multi-class multi-output": [[398, "term-multi-class-multi-output", true]], "multi-label": [[398, "term-multi-label", true]], "multi-output": [[398, "term-multi-output", true]], "multi-output continuous": [[398, "term-multi-output-continuous", true]], "multi-output multi-class": [[398, "term-multi-output-multi-class", true]], "multiclass": [[398, "term-multiclass", true]], "multiclass multioutput": [[398, "term-multiclass-multioutput", true]], "multilabel": [[398, "term-multilabel", true]], "multilabel indicator matrices": [[398, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[398, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[842, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[763, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[852, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[398, "term-multioutput", true]], "multioutput continuous": [[398, "term-multioutput-continuous", true]], "multioutput multiclass": [[398, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[845, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[846, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[669, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[671, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[672, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[974, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[616, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[617, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[841, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[842, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[398, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[551, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[623, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[627, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[628, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[630, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[631, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[633, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[398, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[473, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[551, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[576, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[577, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[578, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[579, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[606, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[809, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[812, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[823, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[872, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[873, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[398, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[398, "term-n_iter_no_change", true]], "n_jobs": [[398, "term-n_jobs", true]], "n_outputs": [[398, "term-n_outputs", true]], "n_samples": [[398, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[915, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[916, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[917, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[918, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[919, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[398, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[576, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[577, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[578, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[579, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[873, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[472, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[398, "term-narrative-docs", true]], "narrative documentation": [[398, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[765, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[860, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[861, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[549, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[556, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[900, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[766, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[586, "sklearn.exceptions.NotFittedError", false]], "np": [[398, "term-np", true]], "nusvc (class in sklearn.svm)": [[915, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[916, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[648, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[483, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[429, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[917, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[437, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[841, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[842, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[398, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[458, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[694, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[695, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[398, "term-out-of-core", true]], "outlier detector": [[398, "term-outlier-detector", true]], "outlier detectors": [[398, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[438, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[843, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[398, "term-outputs", true]], "pair": [[398, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[724, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[782, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[398, "term-pairwise-metric", true]], "pairwise metrics": [[398, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[787, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[788, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[789, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[790, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[783, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[975, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[977, "sklearn.utils.parallel_backend", false]], "param": [[398, "term-param", true]], "parameter": [[398, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[820, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[398, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[821, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[952, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[398, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[642, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[398, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[641, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[592, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[655, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[656, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[661, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[662, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[671, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[550, "sklearn.decomposition.PCA", false]], "pd": [[398, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[677, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[643, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[838, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[873, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[446, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[640, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[641, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[706, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[707, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[709, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[710, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[711, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[815, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[832, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[927, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[491, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[492, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[493, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[784, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[398, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[901, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[888, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[791, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[792, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[709, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[398, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[822, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[398, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[448, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[456, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[398, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[398, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[710, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[398, "term-predictor", true]], "predictors": [[398, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[975, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[915, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[918, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[915, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[918, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[969, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[630, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[902, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[890, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[618, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[867, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.rand_score", false]], "random_state": [[398, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[573, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[574, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[956, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[957, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[823, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[575, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[631, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[785, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[650, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[796, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[596, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[398, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[979, "sklearn.utils.register_parallel_backend", false]], "regressor": [[398, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[847, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[439, "sklearn.base.RegressorMixin", false]], "regressors": [[398, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[931, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[824, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[825, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[623, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[627, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[628, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[630, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[631, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[633, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[980, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[681, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[696, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[683, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[684, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[682, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[903, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[891, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[797, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[798, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[711, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[799, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[800, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[966, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[398, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[981, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[958, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[982, "sklearn.utils.safe_sqr", false]], "sample": [[398, "term-sample", true]], "sample properties": [[398, "term-sample-properties", true]], "sample property": [[398, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[398, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[978, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[398, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[904, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[398, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[398, "term-scikit-learn-contrib", true]], "score": [[398, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[433, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[435, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[439, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[398, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[398, "term-scorer", true]], "scoring": [[398, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[608, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[610, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[609, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[398, "term-semi-supervised", true]], "semi-supervised learning": [[398, "term-semi-supervised-learning", true]], "semisupervised": [[398, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[611, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[911, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[452, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[699, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[440, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[610, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[398, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[430, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[448, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[449, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[452, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[454, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[456, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[458, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[459, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[460, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[461, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[572, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[623, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[627, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[628, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[630, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[631, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[633, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[680, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[699, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[700, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[701, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[806, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[807, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[858, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[859, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[861, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[910, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[917, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[845, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[445, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[473, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[477, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[478, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[479, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[480, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[481, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[482, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[483, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[484, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[559, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[560, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[561, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[564, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[565, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[566, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[567, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[573, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[574, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[619, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[620, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[652, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[653, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[654, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[655, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[656, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[657, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[658, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[659, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[660, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[661, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[662, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[663, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[664, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[665, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[666, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[669, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[670, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[671, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[672, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[674, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[678, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[679, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[681, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[683, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[684, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[682, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[688, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[689, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[808, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[841, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[842, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[843, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[844, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[846, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[847, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[848, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[849, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[850, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[851, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[852, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[855, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[856, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[860, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[863, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[864, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[870, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[871, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[908, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[909, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[914, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[915, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[916, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[918, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[919, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[921, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[922, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[923, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[924, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[810, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[811, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[816, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[818, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[827, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[685, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[686, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[687, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[912, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[489, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[484, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[983, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[826, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[786, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[801, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[802, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[639, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[963, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[588, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[589, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[398, "term-SLEP", true]], "sleps": [[398, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[703, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[868, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[398, "term-sparse-graph", true]], "sparse matrix": [[398, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[655, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[661, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[669, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[671, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[557, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[551, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[552, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[906, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[667, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[668, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[675, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[676, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[677, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[685, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[686, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[687, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[913, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[470, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[704, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[459, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[460, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[461, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[700, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[892, "sklearn.preprocessing.SplineTransformer", false]], "split": [[398, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[810, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[811, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[814, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[816, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[817, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[818, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[819, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[822, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[824, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[825, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[826, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[827, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[828, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[829, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[830, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[576, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[577, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[569, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[571, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[568, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[570, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[562, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[563, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[893, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[398, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[827, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[828, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[829, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[633, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[398, "term-supervised", true]], "supervised learning": [[398, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[918, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[919, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[932, "sklearn.utils.Tags", false]], "target": [[398, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[894, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[398, "term-targets", true]], "targettags (class in sklearn.utils)": [[933, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[599, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[688, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[621, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[622, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[623, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[625, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[624, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[627, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[628, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[629, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[630, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[632, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[631, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[633, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[606, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[830, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[803, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[839, "sklearn.model_selection.train_test_split", false]], "transduction": [[398, "term-transduction", true]], "transductive": [[398, "term-transductive", true]], "transform": [[398, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[450, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[451, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[453, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[455, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[457, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[472, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[490, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[491, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[492, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[493, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[540, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[541, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[542, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[543, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[544, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[545, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[546, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[547, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[548, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[549, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[550, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[551, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[552, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[553, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[575, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[576, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[577, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[578, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[579, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[590, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[591, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[592, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[597, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[598, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[599, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[600, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[601, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[602, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[603, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[604, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[605, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[606, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[607, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[608, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[610, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[609, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[611, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[612, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[636, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[637, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[638, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[639, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[644, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[647, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[648, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[649, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[650, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[651, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[697, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[698, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[809, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[812, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[813, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[823, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[857, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[862, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[865, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[869, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[872, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[873, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[876, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[877, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[878, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[879, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[880, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[881, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[882, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[883, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[884, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[885, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[886, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[887, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[888, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[889, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[890, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[891, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[892, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[893, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[894, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[905, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[906, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[473, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[398, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[440, "sklearn.base.TransformerMixin", false]], "transformers": [[398, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[934, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[553, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[705, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[701, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[831, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[689, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[853, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[854, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[972, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[587, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[973, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[398, "term-unlabeled", true]], "unlabeled data": [[398, "term-unlabeled-data", true]], "unsupervised": [[398, "term-unsupervised", true]], "unsupervised learning": [[398, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[804, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[998, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[966, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[840, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[832, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[626, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[928, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[612, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[398, "term-vectorizer", true]], "vectorizers": [[398, "term-vectorizers", true]], "verbose": [[398, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[578, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[579, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[471, "sklearn.cluster.ward_tree", false]], "warm_start": [[398, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[959, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[634, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[398, "term-X", true]], "xt": [[398, "term-Xt", true]], "y": [[398, "term-Y", true], [398, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[805, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [476, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [635, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [911, 4, 1, "", "set_config"], [912, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[430, 1, 1, "", "BaseEstimator"], [431, 1, 1, "", "BiclusterMixin"], [432, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [433, 1, 1, "", "ClassifierMixin"], [434, 1, 1, "", "ClusterMixin"], [435, 1, 1, "", "DensityMixin"], [436, 1, 1, "", "MetaEstimatorMixin"], [437, 1, 1, "", "OneToOneFeatureMixin"], [438, 1, 1, "", "OutlierMixin"], [439, 1, 1, "", "RegressorMixin"], [440, 1, 1, "", "TransformerMixin"], [441, 4, 1, "", "clone"], [442, 4, 1, "", "is_classifier"], [443, 4, 1, "", "is_clusterer"], [444, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[430, 2, 1, "", "get_metadata_routing"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[431, 3, 1, "", "biclusters_"], [431, 2, 1, "", "get_indices"], [431, 2, 1, "", "get_shape"], [431, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[432, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[433, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[434, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[435, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[437, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[438, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[439, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "set_output"]], "sklearn.calibration": [[445, 1, 1, "", "CalibratedClassifierCV"], [446, 1, 1, "", "CalibrationDisplay"], [447, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "predict_proba"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[446, 2, 1, "", "from_estimator"], [446, 2, 1, "", "from_predictions"], [446, 2, 1, "", "plot"]], "sklearn.cluster": [[448, 1, 1, "", "AffinityPropagation"], [449, 1, 1, "", "AgglomerativeClustering"], [450, 1, 1, "", "Birch"], [451, 1, 1, "", "BisectingKMeans"], [452, 1, 1, "", "DBSCAN"], [453, 1, 1, "", "FeatureAgglomeration"], [454, 1, 1, "", "HDBSCAN"], [455, 1, 1, "", "KMeans"], [456, 1, 1, "", "MeanShift"], [457, 1, 1, "", "MiniBatchKMeans"], [458, 1, 1, "", "OPTICS"], [459, 1, 1, "", "SpectralBiclustering"], [460, 1, 1, "", "SpectralClustering"], [461, 1, 1, "", "SpectralCoclustering"], [462, 4, 1, "", "affinity_propagation"], [463, 4, 1, "", "cluster_optics_dbscan"], [464, 4, 1, "", "cluster_optics_xi"], [465, 4, 1, "", "compute_optics_graph"], [427, 4, 1, "", "dbscan"], [466, 4, 1, "", "estimate_bandwidth"], [467, 4, 1, "", "k_means"], [468, 4, 1, "", "kmeans_plusplus"], [469, 4, 1, "", "mean_shift"], [470, 4, 1, "", "spectral_clustering"], [471, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "partial_fit"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "fit_transform"], [451, 2, 1, "", "get_feature_names_out"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "predict"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_fit_request"], [451, 2, 1, "", "set_output"], [451, 2, 1, "", "set_params"], [451, 2, 1, "", "set_score_request"], [451, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_fit_request"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[453, 2, 1, "", "fit"], [453, 3, 1, "", "fit_predict"], [453, 2, 1, "", "fit_transform"], [453, 2, 1, "", "get_feature_names_out"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "inverse_transform"], [453, 2, 1, "", "set_output"], [453, 2, 1, "", "set_params"], [453, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[454, 2, 1, "", "dbscan_clustering"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "fit_transform"], [455, 2, 1, "", "get_feature_names_out"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "predict"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_fit_request"], [455, 2, 1, "", "set_output"], [455, 2, 1, "", "set_params"], [455, 2, 1, "", "set_score_request"], [455, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_predict"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "predict"], [456, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[457, 2, 1, "", "fit"], [457, 2, 1, "", "fit_predict"], [457, 2, 1, "", "fit_transform"], [457, 2, 1, "", "get_feature_names_out"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "partial_fit"], [457, 2, 1, "", "predict"], [457, 2, 1, "", "score"], [457, 2, 1, "", "set_fit_request"], [457, 2, 1, "", "set_output"], [457, 2, 1, "", "set_params"], [457, 2, 1, "", "set_partial_fit_request"], [457, 2, 1, "", "set_score_request"], [457, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[458, 2, 1, "", "fit"], [458, 2, 1, "", "fit_predict"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[459, 3, 1, "", "biclusters_"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_indices"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_shape"], [459, 2, 1, "", "get_submatrix"], [459, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[460, 2, 1, "", "fit"], [460, 2, 1, "", "fit_predict"], [460, 2, 1, "", "get_metadata_routing"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[461, 3, 1, "", "biclusters_"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "get_indices"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "get_shape"], [461, 2, 1, "", "get_submatrix"], [461, 2, 1, "", "set_params"]], "sklearn.compose": [[472, 1, 1, "", "ColumnTransformer"], [473, 1, 1, "", "TransformedTargetRegressor"], [474, 1, 1, "", "make_column_selector"], [475, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[472, 2, 1, "", "fit"], [472, 2, 1, "", "fit_transform"], [472, 2, 1, "", "get_feature_names_out"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 3, 1, "", "named_transformers_"], [472, 2, 1, "", "set_output"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 3, 1, "", "n_features_in_"], [473, 2, 1, "", "predict"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[474, 2, 1, "", "__call__"]], "sklearn.covariance": [[477, 1, 1, "", "EllipticEnvelope"], [478, 1, 1, "", "EmpiricalCovariance"], [479, 1, 1, "", "GraphicalLasso"], [480, 1, 1, "", "GraphicalLassoCV"], [481, 1, 1, "", "LedoitWolf"], [482, 1, 1, "", "MinCovDet"], [483, 1, 1, "", "OAS"], [484, 1, 1, "", "ShrunkCovariance"], [485, 4, 1, "", "empirical_covariance"], [486, 4, 1, "", "graphical_lasso"], [487, 4, 1, "", "ledoit_wolf"], [488, 4, 1, "", "ledoit_wolf_shrinkage"], [429, 4, 1, "", "oas"], [489, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[477, 2, 1, "", "correct_covariance"], [477, 2, 1, "", "decision_function"], [477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "fit_predict"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "predict"], [477, 2, 1, "", "reweight_covariance"], [477, 2, 1, "", "score"], [477, 2, 1, "", "score_samples"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[480, 2, 1, "", "error_norm"], [480, 2, 1, "", "fit"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "get_precision"], [480, 2, 1, "", "mahalanobis"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[481, 2, 1, "", "error_norm"], [481, 2, 1, "", "fit"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "get_precision"], [481, 2, 1, "", "mahalanobis"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[482, 2, 1, "", "correct_covariance"], [482, 2, 1, "", "error_norm"], [482, 2, 1, "", "fit"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "get_precision"], [482, 2, 1, "", "mahalanobis"], [482, 2, 1, "", "reweight_covariance"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[483, 2, 1, "", "error_norm"], [483, 2, 1, "", "fit"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "get_precision"], [483, 2, 1, "", "mahalanobis"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[484, 2, 1, "", "error_norm"], [484, 2, 1, "", "fit"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "get_precision"], [484, 2, 1, "", "mahalanobis"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[490, 1, 1, "", "CCA"], [491, 1, 1, "", "PLSCanonical"], [492, 1, 1, "", "PLSRegression"], [493, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_metadata_routing"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "inverse_transform"], [490, 2, 1, "", "predict"], [490, 2, 1, "", "score"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "set_predict_request"], [490, 2, 1, "", "set_score_request"], [490, 2, 1, "", "set_transform_request"], [490, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[491, 2, 1, "", "fit"], [491, 2, 1, "", "fit_transform"], [491, 2, 1, "", "get_feature_names_out"], [491, 2, 1, "", "get_metadata_routing"], [491, 2, 1, "", "get_params"], [491, 2, 1, "", "inverse_transform"], [491, 2, 1, "", "predict"], [491, 2, 1, "", "score"], [491, 2, 1, "", "set_output"], [491, 2, 1, "", "set_params"], [491, 2, 1, "", "set_predict_request"], [491, 2, 1, "", "set_score_request"], [491, 2, 1, "", "set_transform_request"], [491, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[492, 2, 1, "", "fit"], [492, 2, 1, "", "fit_transform"], [492, 2, 1, "", "get_feature_names_out"], [492, 2, 1, "", "get_metadata_routing"], [492, 2, 1, "", "get_params"], [492, 2, 1, "", "inverse_transform"], [492, 2, 1, "", "predict"], [492, 2, 1, "", "score"], [492, 2, 1, "", "set_output"], [492, 2, 1, "", "set_params"], [492, 2, 1, "", "set_predict_request"], [492, 2, 1, "", "set_score_request"], [492, 2, 1, "", "set_transform_request"], [492, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[493, 2, 1, "", "fit"], [493, 2, 1, "", "fit_transform"], [493, 2, 1, "", "get_feature_names_out"], [493, 2, 1, "", "get_metadata_routing"], [493, 2, 1, "", "get_params"], [493, 2, 1, "", "set_output"], [493, 2, 1, "", "set_params"], [493, 2, 1, "", "transform"]], "sklearn.datasets": [[494, 4, 1, "", "clear_data_home"], [495, 4, 1, "", "dump_svmlight_file"], [496, 4, 1, "", "fetch_20newsgroups"], [497, 4, 1, "", "fetch_20newsgroups_vectorized"], [498, 4, 1, "", "fetch_california_housing"], [499, 4, 1, "", "fetch_covtype"], [500, 4, 1, "", "fetch_file"], [501, 4, 1, "", "fetch_kddcup99"], [502, 4, 1, "", "fetch_lfw_pairs"], [503, 4, 1, "", "fetch_lfw_people"], [504, 4, 1, "", "fetch_olivetti_faces"], [505, 4, 1, "", "fetch_openml"], [506, 4, 1, "", "fetch_rcv1"], [507, 4, 1, "", "fetch_species_distributions"], [508, 4, 1, "", "get_data_home"], [509, 4, 1, "", "load_breast_cancer"], [510, 4, 1, "", "load_diabetes"], [511, 4, 1, "", "load_digits"], [512, 4, 1, "", "load_files"], [513, 4, 1, "", "load_iris"], [514, 4, 1, "", "load_linnerud"], [515, 4, 1, "", "load_sample_image"], [516, 4, 1, "", "load_sample_images"], [517, 4, 1, "", "load_svmlight_file"], [518, 4, 1, "", "load_svmlight_files"], [519, 4, 1, "", "load_wine"], [520, 4, 1, "", "make_biclusters"], [521, 4, 1, "", "make_blobs"], [522, 4, 1, "", "make_checkerboard"], [523, 4, 1, "", "make_circles"], [524, 4, 1, "", "make_classification"], [525, 4, 1, "", "make_friedman1"], [526, 4, 1, "", "make_friedman2"], [527, 4, 1, "", "make_friedman3"], [528, 4, 1, "", "make_gaussian_quantiles"], [529, 4, 1, "", "make_hastie_10_2"], [530, 4, 1, "", "make_low_rank_matrix"], [531, 4, 1, "", "make_moons"], [532, 4, 1, "", "make_multilabel_classification"], [533, 4, 1, "", "make_regression"], [534, 4, 1, "", "make_s_curve"], [535, 4, 1, "", "make_sparse_coded_signal"], [536, 4, 1, "", "make_sparse_spd_matrix"], [537, 4, 1, "", "make_sparse_uncorrelated"], [538, 4, 1, "", "make_spd_matrix"], [539, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[540, 1, 1, "", "DictionaryLearning"], [541, 1, 1, "", "FactorAnalysis"], [542, 1, 1, "", "FastICA"], [543, 1, 1, "", "IncrementalPCA"], [544, 1, 1, "", "KernelPCA"], [545, 1, 1, "", "LatentDirichletAllocation"], [546, 1, 1, "", "MiniBatchDictionaryLearning"], [547, 1, 1, "", "MiniBatchNMF"], [548, 1, 1, "", "MiniBatchSparsePCA"], [549, 1, 1, "", "NMF"], [550, 1, 1, "", "PCA"], [551, 1, 1, "", "SparseCoder"], [552, 1, 1, "", "SparsePCA"], [553, 1, 1, "", "TruncatedSVD"], [554, 4, 1, "", "dict_learning"], [555, 4, 1, "", "dict_learning_online"], [428, 4, 1, "", "fastica"], [556, 4, 1, "", "non_negative_factorization"], [557, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_covariance"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "get_precision"], [541, 2, 1, "", "score"], [541, 2, 1, "", "score_samples"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_inverse_transform_request"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "set_transform_request"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_covariance"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "get_precision"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "partial_fit"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "set_partial_fit_request"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "partial_fit"], [545, 2, 1, "", "perplexity"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "partial_fit"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "partial_fit"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_covariance"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "get_precision"], [550, 2, 1, "", "inverse_transform"], [550, 2, 1, "", "score"], [550, 2, 1, "", "score_samples"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 3, 1, "", "n_components_"], [551, 3, 1, "", "n_features_in_"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "inverse_transform"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "inverse_transform"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[558, 1, 1, "", "LinearDiscriminantAnalysis"], [559, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[558, 2, 1, "", "decision_function"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "fit_transform"], [558, 2, 1, "", "get_feature_names_out"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_output"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[559, 2, 1, "", "decision_function"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[560, 1, 1, "", "DummyClassifier"], [561, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_predict_request"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[562, 1, 1, "", "AdaBoostClassifier"], [563, 1, 1, "", "AdaBoostRegressor"], [564, 1, 1, "", "BaggingClassifier"], [565, 1, 1, "", "BaggingRegressor"], [566, 1, 1, "", "ExtraTreesClassifier"], [567, 1, 1, "", "ExtraTreesRegressor"], [568, 1, 1, "", "GradientBoostingClassifier"], [569, 1, 1, "", "GradientBoostingRegressor"], [570, 1, 1, "", "HistGradientBoostingClassifier"], [571, 1, 1, "", "HistGradientBoostingRegressor"], [572, 1, 1, "", "IsolationForest"], [573, 1, 1, "", "RandomForestClassifier"], [574, 1, 1, "", "RandomForestRegressor"], [575, 1, 1, "", "RandomTreesEmbedding"], [576, 1, 1, "", "StackingClassifier"], [577, 1, 1, "", "StackingRegressor"], [578, 1, 1, "", "VotingClassifier"], [579, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[562, 2, 1, "", "decision_function"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_decision_function"], [562, 2, 1, "", "staged_predict"], [562, 2, 1, "", "staged_predict_proba"], [562, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_predict"], [563, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[564, 2, 1, "", "decision_function"], [564, 3, 1, "", "estimators_samples_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_log_proba"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[565, 3, 1, "", "estimators_samples_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_log_proba"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_path"], [567, 3, 1, "", "estimators_samples_"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[568, 2, 1, "", "apply"], [568, 2, 1, "", "decision_function"], [568, 3, 1, "", "feature_importances_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_log_proba"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "staged_decision_function"], [568, 2, 1, "", "staged_predict"], [568, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[569, 2, 1, "", "apply"], [569, 3, 1, "", "feature_importances_"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[570, 2, 1, "", "decision_function"], [570, 2, 1, "", "fit"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_iter_"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "staged_decision_function"], [570, 2, 1, "", "staged_predict"], [570, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_iter_"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[572, 2, 1, "", "decision_function"], [572, 3, 1, "", "estimators_samples_"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_predict"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "score_samples"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[573, 2, 1, "", "apply"], [573, 2, 1, "", "decision_path"], [573, 3, 1, "", "estimators_samples_"], [573, 3, 1, "", "feature_importances_"], [573, 2, 1, "", "fit"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "predict_log_proba"], [573, 2, 1, "", "predict_proba"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[574, 2, 1, "", "apply"], [574, 2, 1, "", "decision_path"], [574, 3, 1, "", "estimators_samples_"], [574, 3, 1, "", "feature_importances_"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[575, 2, 1, "", "apply"], [575, 2, 1, "", "decision_path"], [575, 3, 1, "", "estimators_samples_"], [575, 3, 1, "", "feature_importances_"], [575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "set_fit_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[576, 2, 1, "", "decision_function"], [576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "n_features_in_"], [576, 3, 1, "", "named_estimators"], [576, 2, 1, "", "predict"], [576, 2, 1, "", "predict_proba"], [576, 2, 1, "", "score"], [576, 2, 1, "", "set_fit_request"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "set_score_request"], [576, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_metadata_routing"], [577, 2, 1, "", "get_params"], [577, 3, 1, "", "n_features_in_"], [577, 3, 1, "", "named_estimators"], [577, 2, 1, "", "predict"], [577, 2, 1, "", "score"], [577, 2, 1, "", "set_fit_request"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "set_score_request"], [577, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_metadata_routing"], [578, 2, 1, "", "get_params"], [578, 3, 1, "", "n_features_in_"], [578, 3, 1, "", "named_estimators"], [578, 2, 1, "", "predict"], [578, 2, 1, "", "predict_proba"], [578, 2, 1, "", "score"], [578, 2, 1, "", "set_fit_request"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "set_score_request"], [578, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 3, 1, "", "n_features_in_"], [579, 3, 1, "", "named_estimators"], [579, 2, 1, "", "predict"], [579, 2, 1, "", "score"], [579, 2, 1, "", "set_fit_request"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "set_score_request"], [579, 2, 1, "", "transform"]], "sklearn.exceptions": [[580, 5, 1, "", "ConvergenceWarning"], [581, 5, 1, "", "DataConversionWarning"], [582, 5, 1, "", "DataDimensionalityWarning"], [583, 5, 1, "", "EfficiencyWarning"], [584, 5, 1, "", "FitFailedWarning"], [585, 5, 1, "", "InconsistentVersionWarning"], [586, 5, 1, "", "NotFittedError"], [587, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[588, 0, 0, "-", "enable_halving_search_cv"], [589, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[590, 1, 1, "", "DictVectorizer"], [591, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "restrict"], [590, 2, 1, "", "set_inverse_transform_request"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[592, 1, 1, "", "PatchExtractor"], [593, 4, 1, "", "extract_patches_2d"], [594, 4, 1, "", "grid_to_graph"], [595, 4, 1, "", "img_to_graph"], [596, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[597, 1, 1, "", "CountVectorizer"], [598, 1, 1, "", "HashingVectorizer"], [599, 1, 1, "", "TfidfTransformer"], [600, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[597, 2, 1, "", "build_analyzer"], [597, 2, 1, "", "build_preprocessor"], [597, 2, 1, "", "build_tokenizer"], [597, 2, 1, "", "decode"], [597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_stop_words"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_fit_request"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "set_transform_request"], [597, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[598, 2, 1, "", "build_analyzer"], [598, 2, 1, "", "build_preprocessor"], [598, 2, 1, "", "build_tokenizer"], [598, 2, 1, "", "decode"], [598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_stop_words"], [598, 2, 1, "", "partial_fit"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "set_transform_request"], [599, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[600, 2, 1, "", "build_analyzer"], [600, 2, 1, "", "build_preprocessor"], [600, 2, 1, "", "build_tokenizer"], [600, 2, 1, "", "decode"], [600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_stop_words"], [600, 3, 1, "", "idf_"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_fit_request"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "set_transform_request"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection": [[601, 1, 1, "", "GenericUnivariateSelect"], [602, 1, 1, "", "RFE"], [603, 1, 1, "", "RFECV"], [604, 1, 1, "", "SelectFdr"], [605, 1, 1, "", "SelectFpr"], [606, 1, 1, "", "SelectFromModel"], [607, 1, 1, "", "SelectFwe"], [608, 1, 1, "", "SelectKBest"], [609, 1, 1, "", "SelectPercentile"], [610, 1, 1, "", "SelectorMixin"], [611, 1, 1, "", "SequentialFeatureSelector"], [612, 1, 1, "", "VarianceThreshold"], [613, 4, 1, "", "chi2"], [614, 4, 1, "", "f_classif"], [615, 4, 1, "", "f_regression"], [616, 4, 1, "", "mutual_info_classif"], [617, 4, 1, "", "mutual_info_regression"], [618, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[602, 3, 1, "", "classes_"], [602, 2, 1, "", "decision_function"], [602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "predict"], [602, 2, 1, "", "predict_log_proba"], [602, 2, 1, "", "predict_proba"], [602, 2, 1, "", "score"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[603, 3, 1, "", "classes_"], [603, 2, 1, "", "decision_function"], [603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "predict"], [603, 2, 1, "", "predict_log_proba"], [603, 2, 1, "", "predict_proba"], [603, 2, 1, "", "score"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 3, 1, "", "n_features_in_"], [606, 2, 1, "", "partial_fit"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "threshold_"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "get_support"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "fit_transform"], [609, 2, 1, "", "get_feature_names_out"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "get_support"], [609, 2, 1, "", "inverse_transform"], [609, 2, 1, "", "set_output"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_support"], [610, 2, 1, "", "inverse_transform"], [610, 2, 1, "", "set_output"], [610, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "fit_transform"], [611, 2, 1, "", "get_feature_names_out"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "get_support"], [611, 2, 1, "", "inverse_transform"], [611, 2, 1, "", "set_output"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "fit_transform"], [612, 2, 1, "", "get_feature_names_out"], [612, 2, 1, "", "get_metadata_routing"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "get_support"], [612, 2, 1, "", "inverse_transform"], [612, 2, 1, "", "set_output"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[619, 1, 1, "", "GaussianProcessClassifier"], [620, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "get_metadata_routing"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "kernel_"], [619, 2, 1, "", "log_marginal_likelihood"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "predict_proba"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_metadata_routing"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "log_marginal_likelihood"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "sample_y"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "set_predict_request"], [620, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[621, 1, 1, "", "CompoundKernel"], [622, 1, 1, "", "ConstantKernel"], [623, 1, 1, "", "DotProduct"], [624, 1, 1, "", "ExpSineSquared"], [625, 1, 1, "", "Exponentiation"], [626, 1, 1, "", "Hyperparameter"], [627, 1, 1, "", "Kernel"], [628, 1, 1, "", "Matern"], [629, 1, 1, "", "PairwiseKernel"], [630, 1, 1, "", "Product"], [631, 1, 1, "", "RBF"], [632, 1, 1, "", "RationalQuadratic"], [633, 1, 1, "", "Sum"], [634, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameter_length_scale"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[626, 6, 1, "", "bounds"], [626, 2, 1, "", "count"], [626, 6, 1, "", "fixed"], [626, 2, 1, "", "index"], [626, 6, 1, "", "n_elements"], [626, 6, 1, "", "name"], [626, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[630, 2, 1, "", "__call__"], [630, 3, 1, "", "bounds"], [630, 2, 1, "", "clone_with_theta"], [630, 2, 1, "", "diag"], [630, 2, 1, "", "get_params"], [630, 3, 1, "", "hyperparameters"], [630, 2, 1, "", "is_stationary"], [630, 3, 1, "", "n_dims"], [630, 3, 1, "", "requires_vector_input"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[631, 2, 1, "", "__call__"], [631, 3, 1, "", "bounds"], [631, 2, 1, "", "clone_with_theta"], [631, 2, 1, "", "diag"], [631, 2, 1, "", "get_params"], [631, 3, 1, "", "hyperparameters"], [631, 2, 1, "", "is_stationary"], [631, 3, 1, "", "n_dims"], [631, 3, 1, "", "requires_vector_input"], [631, 2, 1, "", "set_params"], [631, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[632, 2, 1, "", "__call__"], [632, 3, 1, "", "bounds"], [632, 2, 1, "", "clone_with_theta"], [632, 2, 1, "", "diag"], [632, 2, 1, "", "get_params"], [632, 3, 1, "", "hyperparameters"], [632, 2, 1, "", "is_stationary"], [632, 3, 1, "", "n_dims"], [632, 3, 1, "", "requires_vector_input"], [632, 2, 1, "", "set_params"], [632, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[633, 2, 1, "", "__call__"], [633, 3, 1, "", "bounds"], [633, 2, 1, "", "clone_with_theta"], [633, 2, 1, "", "diag"], [633, 2, 1, "", "get_params"], [633, 3, 1, "", "hyperparameters"], [633, 2, 1, "", "is_stationary"], [633, 3, 1, "", "n_dims"], [633, 3, 1, "", "requires_vector_input"], [633, 2, 1, "", "set_params"], [633, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[634, 2, 1, "", "__call__"], [634, 3, 1, "", "bounds"], [634, 2, 1, "", "clone_with_theta"], [634, 2, 1, "", "diag"], [634, 2, 1, "", "get_params"], [634, 3, 1, "", "hyperparameters"], [634, 2, 1, "", "is_stationary"], [634, 3, 1, "", "n_dims"], [634, 3, 1, "", "requires_vector_input"], [634, 2, 1, "", "set_params"], [634, 3, 1, "", "theta"]], "sklearn.impute": [[636, 1, 1, "", "IterativeImputer"], [637, 1, 1, "", "KNNImputer"], [638, 1, 1, "", "MissingIndicator"], [639, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "inverse_transform"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.inspection": [[640, 1, 1, "", "DecisionBoundaryDisplay"], [641, 1, 1, "", "PartialDependenceDisplay"], [642, 4, 1, "", "partial_dependence"], [643, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[640, 2, 1, "", "from_estimator"], [640, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[641, 2, 1, "", "from_estimator"], [641, 2, 1, "", "plot"]], "sklearn.isotonic": [[644, 1, 1, "", "IsotonicRegression"], [645, 4, 1, "", "check_increasing"], [646, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_predict_request"], [644, 2, 1, "", "set_score_request"], [644, 2, 1, "", "set_transform_request"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[647, 1, 1, "", "AdditiveChi2Sampler"], [648, 1, 1, "", "Nystroem"], [649, 1, 1, "", "PolynomialCountSketch"], [650, 1, 1, "", "RBFSampler"], [651, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "fit_transform"], [647, 2, 1, "", "get_feature_names_out"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "set_output"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "fit_transform"], [648, 2, 1, "", "get_feature_names_out"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "set_output"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "fit_transform"], [649, 2, 1, "", "get_feature_names_out"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "set_output"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "fit_transform"], [650, 2, 1, "", "get_feature_names_out"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "set_output"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "fit_transform"], [651, 2, 1, "", "get_feature_names_out"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "set_output"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[652, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[653, 1, 1, "", "ARDRegression"], [654, 1, 1, "", "BayesianRidge"], [655, 1, 1, "", "ElasticNet"], [656, 1, 1, "", "ElasticNetCV"], [657, 1, 1, "", "GammaRegressor"], [658, 1, 1, "", "HuberRegressor"], [659, 1, 1, "", "Lars"], [660, 1, 1, "", "LarsCV"], [661, 1, 1, "", "Lasso"], [662, 1, 1, "", "LassoCV"], [663, 1, 1, "", "LassoLars"], [664, 1, 1, "", "LassoLarsCV"], [665, 1, 1, "", "LassoLarsIC"], [666, 1, 1, "", "LinearRegression"], [667, 1, 1, "", "LogisticRegression"], [668, 1, 1, "", "LogisticRegressionCV"], [669, 1, 1, "", "MultiTaskElasticNet"], [670, 1, 1, "", "MultiTaskElasticNetCV"], [671, 1, 1, "", "MultiTaskLasso"], [672, 1, 1, "", "MultiTaskLassoCV"], [673, 1, 1, "", "OrthogonalMatchingPursuit"], [674, 1, 1, "", "OrthogonalMatchingPursuitCV"], [675, 1, 1, "", "PassiveAggressiveClassifier"], [676, 1, 1, "", "PassiveAggressiveRegressor"], [677, 1, 1, "", "Perceptron"], [678, 1, 1, "", "PoissonRegressor"], [679, 1, 1, "", "QuantileRegressor"], [680, 1, 1, "", "RANSACRegressor"], [681, 1, 1, "", "Ridge"], [682, 1, 1, "", "RidgeCV"], [683, 1, 1, "", "RidgeClassifier"], [684, 1, 1, "", "RidgeClassifierCV"], [685, 1, 1, "", "SGDClassifier"], [686, 1, 1, "", "SGDOneClassSVM"], [687, 1, 1, "", "SGDRegressor"], [688, 1, 1, "", "TheilSenRegressor"], [689, 1, 1, "", "TweedieRegressor"], [690, 4, 1, "", "enet_path"], [691, 4, 1, "", "lars_path"], [692, 4, 1, "", "lars_path_gram"], [693, 4, 1, "", "lasso_path"], [694, 4, 1, "", "orthogonal_mp"], [695, 4, 1, "", "orthogonal_mp_gram"], [696, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_predict_request"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_predict_request"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "path"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"], [655, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"], [661, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[667, 2, 1, "", "decision_function"], [667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "predict_log_proba"], [667, 2, 1, "", "predict_proba"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[668, 2, 1, "", "decision_function"], [668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "predict_log_proba"], [668, 2, 1, "", "predict_proba"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "path"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"], [669, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "path"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "path"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"], [671, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "path"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[675, 2, 1, "", "decision_function"], [675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "set_score_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "set_score_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[683, 3, 1, "", "classes_"], [683, 2, 1, "", "decision_function"], [683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[684, 3, 1, "", "classes_"], [684, 2, 1, "", "decision_function"], [684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[685, 2, 1, "", "decision_function"], [685, 2, 1, "", "densify"], [685, 2, 1, "", "fit"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "partial_fit"], [685, 2, 1, "", "predict"], [685, 2, 1, "", "predict_log_proba"], [685, 2, 1, "", "predict_proba"], [685, 2, 1, "", "score"], [685, 2, 1, "", "set_fit_request"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "set_partial_fit_request"], [685, 2, 1, "", "set_score_request"], [685, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[686, 2, 1, "", "decision_function"], [686, 2, 1, "", "densify"], [686, 2, 1, "", "fit"], [686, 2, 1, "", "fit_predict"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "partial_fit"], [686, 2, 1, "", "predict"], [686, 2, 1, "", "score_samples"], [686, 2, 1, "", "set_fit_request"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "set_partial_fit_request"], [686, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[687, 2, 1, "", "densify"], [687, 2, 1, "", "fit"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "partial_fit"], [687, 2, 1, "", "predict"], [687, 2, 1, "", "score"], [687, 2, 1, "", "set_fit_request"], [687, 2, 1, "", "set_params"], [687, 2, 1, "", "set_partial_fit_request"], [687, 2, 1, "", "set_score_request"], [687, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "predict"], [688, 2, 1, "", "score"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "predict"], [689, 2, 1, "", "score"], [689, 2, 1, "", "set_fit_request"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[697, 1, 1, "", "Isomap"], [698, 1, 1, "", "LocallyLinearEmbedding"], [699, 1, 1, "", "MDS"], [700, 1, 1, "", "SpectralEmbedding"], [701, 1, 1, "", "TSNE"], [702, 4, 1, "", "locally_linear_embedding"], [703, 4, 1, "", "smacof"], [704, 4, 1, "", "spectral_embedding"], [705, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[697, 2, 1, "", "fit"], [697, 2, 1, "", "fit_transform"], [697, 2, 1, "", "get_feature_names_out"], [697, 2, 1, "", "get_metadata_routing"], [697, 2, 1, "", "get_params"], [697, 2, 1, "", "reconstruction_error"], [697, 2, 1, "", "set_output"], [697, 2, 1, "", "set_params"], [697, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[698, 2, 1, "", "fit"], [698, 2, 1, "", "fit_transform"], [698, 2, 1, "", "get_feature_names_out"], [698, 2, 1, "", "get_metadata_routing"], [698, 2, 1, "", "get_params"], [698, 2, 1, "", "set_output"], [698, 2, 1, "", "set_params"], [698, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[699, 2, 1, "", "fit"], [699, 2, 1, "", "fit_transform"], [699, 2, 1, "", "get_metadata_routing"], [699, 2, 1, "", "get_params"], [699, 2, 1, "", "set_fit_request"], [699, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[700, 2, 1, "", "fit"], [700, 2, 1, "", "fit_transform"], [700, 2, 1, "", "get_metadata_routing"], [700, 2, 1, "", "get_params"], [700, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[701, 2, 1, "", "fit"], [701, 2, 1, "", "fit_transform"], [701, 2, 1, "", "get_feature_names_out"], [701, 2, 1, "", "get_metadata_routing"], [701, 2, 1, "", "get_params"], [701, 2, 1, "", "set_output"], [701, 2, 1, "", "set_params"]], "sklearn.metrics": [[706, 1, 1, "", "ConfusionMatrixDisplay"], [707, 1, 1, "", "DetCurveDisplay"], [708, 1, 1, "", "DistanceMetric"], [709, 1, 1, "", "PrecisionRecallDisplay"], [710, 1, 1, "", "PredictionErrorDisplay"], [711, 1, 1, "", "RocCurveDisplay"], [712, 4, 1, "", "accuracy_score"], [713, 4, 1, "", "adjusted_mutual_info_score"], [714, 4, 1, "", "adjusted_rand_score"], [715, 4, 1, "", "auc"], [716, 4, 1, "", "average_precision_score"], [717, 4, 1, "", "balanced_accuracy_score"], [718, 4, 1, "", "brier_score_loss"], [719, 4, 1, "", "calinski_harabasz_score"], [720, 4, 1, "", "check_scoring"], [721, 4, 1, "", "class_likelihood_ratios"], [722, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [725, 4, 1, "", "cohen_kappa_score"], [726, 4, 1, "", "completeness_score"], [727, 4, 1, "", "confusion_matrix"], [728, 4, 1, "", "consensus_score"], [729, 4, 1, "", "coverage_error"], [730, 4, 1, "", "d2_absolute_error_score"], [731, 4, 1, "", "d2_log_loss_score"], [732, 4, 1, "", "d2_pinball_score"], [733, 4, 1, "", "d2_tweedie_score"], [734, 4, 1, "", "davies_bouldin_score"], [735, 4, 1, "", "dcg_score"], [736, 4, 1, "", "det_curve"], [737, 4, 1, "", "explained_variance_score"], [738, 4, 1, "", "f1_score"], [739, 4, 1, "", "fbeta_score"], [740, 4, 1, "", "fowlkes_mallows_score"], [741, 4, 1, "", "get_scorer"], [742, 4, 1, "", "get_scorer_names"], [743, 4, 1, "", "hamming_loss"], [744, 4, 1, "", "hinge_loss"], [745, 4, 1, "", "homogeneity_completeness_v_measure"], [746, 4, 1, "", "homogeneity_score"], [747, 4, 1, "", "jaccard_score"], [748, 4, 1, "", "label_ranking_average_precision_score"], [749, 4, 1, "", "label_ranking_loss"], [750, 4, 1, "", "log_loss"], [751, 4, 1, "", "make_scorer"], [752, 4, 1, "", "matthews_corrcoef"], [753, 4, 1, "", "max_error"], [754, 4, 1, "", "mean_absolute_error"], [755, 4, 1, "", "mean_absolute_percentage_error"], [756, 4, 1, "", "mean_gamma_deviance"], [757, 4, 1, "", "mean_pinball_loss"], [758, 4, 1, "", "mean_poisson_deviance"], [759, 4, 1, "", "mean_squared_error"], [760, 4, 1, "", "mean_squared_log_error"], [761, 4, 1, "", "mean_tweedie_deviance"], [762, 4, 1, "", "median_absolute_error"], [763, 4, 1, "", "multilabel_confusion_matrix"], [764, 4, 1, "", "mutual_info_score"], [765, 4, 1, "", "ndcg_score"], [766, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [787, 4, 1, "", "pairwise_distances"], [788, 4, 1, "", "pairwise_distances_argmin"], [789, 4, 1, "", "pairwise_distances_argmin_min"], [790, 4, 1, "", "pairwise_distances_chunked"], [791, 4, 1, "", "precision_recall_curve"], [792, 4, 1, "", "precision_recall_fscore_support"], [793, 4, 1, "", "precision_score"], [794, 4, 1, "", "r2_score"], [795, 4, 1, "", "rand_score"], [796, 4, 1, "", "recall_score"], [797, 4, 1, "", "roc_auc_score"], [798, 4, 1, "", "roc_curve"], [799, 4, 1, "", "root_mean_squared_error"], [800, 4, 1, "", "root_mean_squared_log_error"], [801, 4, 1, "", "silhouette_samples"], [802, 4, 1, "", "silhouette_score"], [803, 4, 1, "", "top_k_accuracy_score"], [804, 4, 1, "", "v_measure_score"], [805, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[707, 2, 1, "", "from_estimator"], [707, 2, 1, "", "from_predictions"], [707, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[708, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[709, 2, 1, "", "from_estimator"], [709, 2, 1, "", "from_predictions"], [709, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[710, 2, 1, "", "from_estimator"], [710, 2, 1, "", "from_predictions"], [710, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[711, 2, 1, "", "from_estimator"], [711, 2, 1, "", "from_predictions"], [711, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[723, 4, 1, "", "contingency_matrix"], [724, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[767, 4, 1, "", "additive_chi2_kernel"], [768, 4, 1, "", "chi2_kernel"], [769, 4, 1, "", "cosine_distances"], [770, 4, 1, "", "cosine_similarity"], [771, 4, 1, "", "distance_metrics"], [772, 4, 1, "", "euclidean_distances"], [773, 4, 1, "", "haversine_distances"], [774, 4, 1, "", "kernel_metrics"], [775, 4, 1, "", "laplacian_kernel"], [776, 4, 1, "", "linear_kernel"], [777, 4, 1, "", "manhattan_distances"], [778, 4, 1, "", "nan_euclidean_distances"], [779, 4, 1, "", "paired_cosine_distances"], [780, 4, 1, "", "paired_distances"], [781, 4, 1, "", "paired_euclidean_distances"], [782, 4, 1, "", "paired_manhattan_distances"], [783, 4, 1, "", "pairwise_kernels"], [784, 4, 1, "", "polynomial_kernel"], [785, 4, 1, "", "rbf_kernel"], [786, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[806, 1, 1, "", "BayesianGaussianMixture"], [807, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[806, 2, 1, "", "fit"], [806, 2, 1, "", "fit_predict"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "sample"], [806, 2, 1, "", "score"], [806, 2, 1, "", "score_samples"], [806, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[807, 2, 1, "", "aic"], [807, 2, 1, "", "bic"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "fit_predict"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "sample"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"]], "sklearn.model_selection": [[808, 1, 1, "", "FixedThresholdClassifier"], [809, 1, 1, "", "GridSearchCV"], [810, 1, 1, "", "GroupKFold"], [811, 1, 1, "", "GroupShuffleSplit"], [812, 1, 1, "", "HalvingGridSearchCV"], [813, 1, 1, "", "HalvingRandomSearchCV"], [814, 1, 1, "", "KFold"], [815, 1, 1, "", "LearningCurveDisplay"], [816, 1, 1, "", "LeaveOneGroupOut"], [817, 1, 1, "", "LeaveOneOut"], [818, 1, 1, "", "LeavePGroupsOut"], [819, 1, 1, "", "LeavePOut"], [820, 1, 1, "", "ParameterGrid"], [821, 1, 1, "", "ParameterSampler"], [822, 1, 1, "", "PredefinedSplit"], [823, 1, 1, "", "RandomizedSearchCV"], [824, 1, 1, "", "RepeatedKFold"], [825, 1, 1, "", "RepeatedStratifiedKFold"], [826, 1, 1, "", "ShuffleSplit"], [827, 1, 1, "", "StratifiedGroupKFold"], [828, 1, 1, "", "StratifiedKFold"], [829, 1, 1, "", "StratifiedShuffleSplit"], [830, 1, 1, "", "TimeSeriesSplit"], [831, 1, 1, "", "TunedThresholdClassifierCV"], [832, 1, 1, "", "ValidationCurveDisplay"], [833, 4, 1, "", "check_cv"], [834, 4, 1, "", "cross_val_predict"], [835, 4, 1, "", "cross_val_score"], [836, 4, 1, "", "cross_validate"], [837, 4, 1, "", "learning_curve"], [838, 4, 1, "", "permutation_test_score"], [839, 4, 1, "", "train_test_split"], [840, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[809, 3, 1, "", "classes_"], [809, 2, 1, "", "decision_function"], [809, 2, 1, "", "fit"], [809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "inverse_transform"], [809, 3, 1, "", "n_features_in_"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "score_samples"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "set_split_request"], [811, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[812, 3, 1, "", "classes_"], [812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "inverse_transform"], [812, 3, 1, "", "n_features_in_"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_log_proba"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "score_samples"], [812, 2, 1, "", "set_params"], [812, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[813, 3, 1, "", "classes_"], [813, 2, 1, "", "decision_function"], [813, 2, 1, "", "fit"], [813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "inverse_transform"], [813, 3, 1, "", "n_features_in_"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "predict_log_proba"], [813, 2, 1, "", "predict_proba"], [813, 2, 1, "", "score"], [813, 2, 1, "", "score_samples"], [813, 2, 1, "", "set_params"], [813, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[815, 2, 1, "", "from_estimator"], [815, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "set_split_request"], [816, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "set_split_request"], [818, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[823, 3, 1, "", "classes_"], [823, 2, 1, "", "decision_function"], [823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "inverse_transform"], [823, 3, 1, "", "n_features_in_"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_log_proba"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "score_samples"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_n_splits"], [826, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_n_splits"], [827, 2, 1, "", "set_split_request"], [827, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_n_splits"], [828, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_n_splits"], [829, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_n_splits"], [830, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[831, 3, 1, "", "classes_"], [831, 2, 1, "", "decision_function"], [831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_log_proba"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[832, 2, 1, "", "from_estimator"], [832, 2, 1, "", "plot"]], "sklearn.multiclass": [[841, 1, 1, "", "OneVsOneClassifier"], [842, 1, 1, "", "OneVsRestClassifier"], [843, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[841, 2, 1, "", "decision_function"], [841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 3, 1, "", "n_classes_"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[842, 2, 1, "", "decision_function"], [842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 3, 1, "", "multilabel_"], [842, 3, 1, "", "n_classes_"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[844, 1, 1, "", "ClassifierChain"], [845, 1, 1, "", "MultiOutputClassifier"], [846, 1, 1, "", "MultiOutputRegressor"], [847, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[844, 2, 1, "", "decision_function"], [844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[848, 1, 1, "", "BernoulliNB"], [849, 1, 1, "", "CategoricalNB"], [850, 1, 1, "", "ComplementNB"], [851, 1, 1, "", "GaussianNB"], [852, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_joint_log_proba"], [848, 2, 1, "", "predict_log_proba"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_fit_request"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_partial_fit_request"], [848, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_joint_log_proba"], [849, 2, 1, "", "predict_log_proba"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_partial_fit_request"], [849, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "partial_fit"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_joint_log_proba"], [850, 2, 1, "", "predict_log_proba"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_fit_request"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_partial_fit_request"], [850, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "partial_fit"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "predict_joint_log_proba"], [851, 2, 1, "", "predict_log_proba"], [851, 2, 1, "", "predict_proba"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_fit_request"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_partial_fit_request"], [851, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "partial_fit"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "predict_joint_log_proba"], [852, 2, 1, "", "predict_log_proba"], [852, 2, 1, "", "predict_proba"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_fit_request"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_partial_fit_request"], [852, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[853, 1, 1, "", "BallTree"], [854, 1, 1, "", "KDTree"], [855, 1, 1, "", "KNeighborsClassifier"], [856, 1, 1, "", "KNeighborsRegressor"], [857, 1, 1, "", "KNeighborsTransformer"], [858, 1, 1, "", "KernelDensity"], [859, 1, 1, "", "LocalOutlierFactor"], [860, 1, 1, "", "NearestCentroid"], [861, 1, 1, "", "NearestNeighbors"], [862, 1, 1, "", "NeighborhoodComponentsAnalysis"], [863, 1, 1, "", "RadiusNeighborsClassifier"], [864, 1, 1, "", "RadiusNeighborsRegressor"], [865, 1, 1, "", "RadiusNeighborsTransformer"], [866, 4, 1, "", "kneighbors_graph"], [867, 4, 1, "", "radius_neighbors_graph"], [868, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[853, 2, 1, "", "get_arrays"], [853, 2, 1, "", "get_n_calls"], [853, 2, 1, "", "get_tree_stats"], [853, 2, 1, "", "kernel_density"], [853, 2, 1, "", "query"], [853, 2, 1, "", "query_radius"], [853, 2, 1, "", "reset_n_calls"], [853, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[854, 2, 1, "", "get_arrays"], [854, 2, 1, "", "get_n_calls"], [854, 2, 1, "", "get_tree_stats"], [854, 2, 1, "", "kernel_density"], [854, 2, 1, "", "query"], [854, 2, 1, "", "query_radius"], [854, 2, 1, "", "reset_n_calls"], [854, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "kneighbors"], [855, 2, 1, "", "kneighbors_graph"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "predict_proba"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "kneighbors"], [856, 2, 1, "", "kneighbors_graph"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "kneighbors"], [857, 2, 1, "", "kneighbors_graph"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "sample"], [858, 2, 1, "", "score"], [858, 2, 1, "", "score_samples"], [858, 2, 1, "", "set_fit_request"], [858, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[859, 2, 1, "", "decision_function"], [859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_predict"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "kneighbors"], [859, 2, 1, "", "kneighbors_graph"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "score_samples"], [859, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "predict"], [860, 2, 1, "", "score"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "kneighbors"], [861, 2, 1, "", "kneighbors_graph"], [861, 2, 1, "", "radius_neighbors"], [861, 2, 1, "", "radius_neighbors_graph"], [861, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "predict"], [863, 2, 1, "", "predict_proba"], [863, 2, 1, "", "radius_neighbors"], [863, 2, 1, "", "radius_neighbors_graph"], [863, 2, 1, "", "score"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "radius_neighbors"], [864, 2, 1, "", "radius_neighbors_graph"], [864, 2, 1, "", "score"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "radius_neighbors"], [865, 2, 1, "", "radius_neighbors_graph"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.neural_network": [[869, 1, 1, "", "BernoulliRBM"], [870, 1, 1, "", "MLPClassifier"], [871, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "gibbs"], [869, 2, 1, "", "partial_fit"], [869, 2, 1, "", "score_samples"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "partial_fit"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "predict_log_proba"], [870, 2, 1, "", "predict_proba"], [870, 2, 1, "", "score"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_partial_fit_request"], [870, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "partial_fit"], [871, 2, 1, "", "predict"], [871, 2, 1, "", "score"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[872, 1, 1, "", "FeatureUnion"], [873, 1, 1, "", "Pipeline"], [874, 4, 1, "", "make_pipeline"], [875, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[872, 3, 1, "", "feature_names_in_"], [872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "n_features_in_"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[873, 3, 1, "", "classes_"], [873, 2, 1, "", "decision_function"], [873, 3, 1, "", "feature_names_in_"], [873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_predict"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 3, 1, "", "n_features_in_"], [873, 3, 1, "", "named_steps"], [873, 2, 1, "", "predict"], [873, 2, 1, "", "predict_log_proba"], [873, 2, 1, "", "predict_proba"], [873, 2, 1, "", "score"], [873, 2, 1, "", "score_samples"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_score_request"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing": [[876, 1, 1, "", "Binarizer"], [877, 1, 1, "", "FunctionTransformer"], [878, 1, 1, "", "KBinsDiscretizer"], [879, 1, 1, "", "KernelCenterer"], [880, 1, 1, "", "LabelBinarizer"], [881, 1, 1, "", "LabelEncoder"], [882, 1, 1, "", "MaxAbsScaler"], [883, 1, 1, "", "MinMaxScaler"], [884, 1, 1, "", "MultiLabelBinarizer"], [885, 1, 1, "", "Normalizer"], [886, 1, 1, "", "OneHotEncoder"], [887, 1, 1, "", "OrdinalEncoder"], [888, 1, 1, "", "PolynomialFeatures"], [889, 1, 1, "", "PowerTransformer"], [890, 1, 1, "", "QuantileTransformer"], [891, 1, 1, "", "RobustScaler"], [892, 1, 1, "", "SplineTransformer"], [893, 1, 1, "", "StandardScaler"], [894, 1, 1, "", "TargetEncoder"], [895, 4, 1, "", "add_dummy_feature"], [896, 4, 1, "", "binarize"], [897, 4, 1, "", "label_binarize"], [898, 4, 1, "", "maxabs_scale"], [899, 4, 1, "", "minmax_scale"], [900, 4, 1, "", "normalize"], [901, 4, 1, "", "power_transform"], [902, 4, 1, "", "quantile_transform"], [903, 4, 1, "", "robust_scale"], [904, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_transform_request"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_fit_request"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "set_fit_request"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "set_transform_request"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_inverse_transform_request"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "partial_fit"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "partial_fit"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "set_transform_request"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "infrequent_categories_"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 3, 1, "", "infrequent_categories_"], [887, 2, 1, "", "inverse_transform"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 3, 1, "", "powers_"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "inverse_transform"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "inverse_transform"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "inverse_transform"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_transform"], [892, 2, 1, "", "get_feature_names_out"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "set_fit_request"], [892, 2, 1, "", "set_output"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "fit_transform"], [893, 2, 1, "", "get_feature_names_out"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "inverse_transform"], [893, 2, 1, "", "partial_fit"], [893, 2, 1, "", "set_fit_request"], [893, 2, 1, "", "set_inverse_transform_request"], [893, 2, 1, "", "set_output"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_partial_fit_request"], [893, 2, 1, "", "set_transform_request"], [893, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[894, 2, 1, "", "fit"], [894, 2, 1, "", "fit_transform"], [894, 2, 1, "", "get_feature_names_out"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 3, 1, "", "infrequent_categories_"], [894, 2, 1, "", "set_output"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "transform"]], "sklearn.random_projection": [[905, 1, 1, "", "GaussianRandomProjection"], [906, 1, 1, "", "SparseRandomProjection"], [907, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "fit_transform"], [905, 2, 1, "", "get_feature_names_out"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "inverse_transform"], [905, 2, 1, "", "set_output"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[906, 2, 1, "", "fit"], [906, 2, 1, "", "fit_transform"], [906, 2, 1, "", "get_feature_names_out"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "inverse_transform"], [906, 2, 1, "", "set_output"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[908, 1, 1, "", "LabelPropagation"], [909, 1, 1, "", "LabelSpreading"], [910, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "predict_proba"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_proba"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[910, 2, 1, "", "decision_function"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "predict_log_proba"], [910, 2, 1, "", "predict_proba"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_params"]], "sklearn.svm": [[913, 1, 1, "", "LinearSVC"], [914, 1, 1, "", "LinearSVR"], [915, 1, 1, "", "NuSVC"], [916, 1, 1, "", "NuSVR"], [917, 1, 1, "", "OneClassSVM"], [918, 1, 1, "", "SVC"], [919, 1, 1, "", "SVR"], [920, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[913, 2, 1, "", "decision_function"], [913, 2, 1, "", "densify"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"], [913, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[914, 2, 1, "", "fit"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[915, 3, 1, "", "coef_"], [915, 2, 1, "", "decision_function"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_params"], [915, 3, 1, "", "n_support_"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "predict_log_proba"], [915, 2, 1, "", "predict_proba"], [915, 3, 1, "", "probA_"], [915, 3, 1, "", "probB_"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[916, 3, 1, "", "coef_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_params"], [916, 3, 1, "", "n_support_"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[917, 3, 1, "", "coef_"], [917, 2, 1, "", "decision_function"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "fit_predict"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_params"], [917, 3, 1, "", "n_support_"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "score_samples"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[918, 3, 1, "", "coef_"], [918, 2, 1, "", "decision_function"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_params"], [918, 3, 1, "", "n_support_"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "predict_log_proba"], [918, 2, 1, "", "predict_proba"], [918, 3, 1, "", "probA_"], [918, 3, 1, "", "probB_"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[919, 3, 1, "", "coef_"], [919, 2, 1, "", "fit"], [919, 2, 1, "", "get_metadata_routing"], [919, 2, 1, "", "get_params"], [919, 3, 1, "", "n_support_"], [919, 2, 1, "", "predict"], [919, 2, 1, "", "score"], [919, 2, 1, "", "set_fit_request"], [919, 2, 1, "", "set_params"], [919, 2, 1, "", "set_score_request"]], "sklearn.tree": [[921, 1, 1, "", "DecisionTreeClassifier"], [922, 1, 1, "", "DecisionTreeRegressor"], [923, 1, 1, "", "ExtraTreeClassifier"], [924, 1, 1, "", "ExtraTreeRegressor"], [925, 4, 1, "", "export_graphviz"], [926, 4, 1, "", "export_text"], [927, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[921, 2, 1, "", "apply"], [921, 2, 1, "", "cost_complexity_pruning_path"], [921, 2, 1, "", "decision_path"], [921, 3, 1, "", "feature_importances_"], [921, 2, 1, "", "fit"], [921, 2, 1, "", "get_depth"], [921, 2, 1, "", "get_metadata_routing"], [921, 2, 1, "", "get_n_leaves"], [921, 2, 1, "", "get_params"], [921, 2, 1, "", "predict"], [921, 2, 1, "", "predict_log_proba"], [921, 2, 1, "", "predict_proba"], [921, 2, 1, "", "score"], [921, 2, 1, "", "set_fit_request"], [921, 2, 1, "", "set_params"], [921, 2, 1, "", "set_predict_proba_request"], [921, 2, 1, "", "set_predict_request"], [921, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[922, 2, 1, "", "apply"], [922, 2, 1, "", "cost_complexity_pruning_path"], [922, 2, 1, "", "decision_path"], [922, 3, 1, "", "feature_importances_"], [922, 2, 1, "", "fit"], [922, 2, 1, "", "get_depth"], [922, 2, 1, "", "get_metadata_routing"], [922, 2, 1, "", "get_n_leaves"], [922, 2, 1, "", "get_params"], [922, 2, 1, "", "predict"], [922, 2, 1, "", "score"], [922, 2, 1, "", "set_fit_request"], [922, 2, 1, "", "set_params"], [922, 2, 1, "", "set_predict_request"], [922, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[923, 2, 1, "", "apply"], [923, 2, 1, "", "cost_complexity_pruning_path"], [923, 2, 1, "", "decision_path"], [923, 3, 1, "", "feature_importances_"], [923, 2, 1, "", "fit"], [923, 2, 1, "", "get_depth"], [923, 2, 1, "", "get_metadata_routing"], [923, 2, 1, "", "get_n_leaves"], [923, 2, 1, "", "get_params"], [923, 2, 1, "", "predict"], [923, 2, 1, "", "predict_log_proba"], [923, 2, 1, "", "predict_proba"], [923, 2, 1, "", "score"], [923, 2, 1, "", "set_fit_request"], [923, 2, 1, "", "set_params"], [923, 2, 1, "", "set_predict_proba_request"], [923, 2, 1, "", "set_predict_request"], [923, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[924, 2, 1, "", "apply"], [924, 2, 1, "", "cost_complexity_pruning_path"], [924, 2, 1, "", "decision_path"], [924, 3, 1, "", "feature_importances_"], [924, 2, 1, "", "fit"], [924, 2, 1, "", "get_depth"], [924, 2, 1, "", "get_metadata_routing"], [924, 2, 1, "", "get_n_leaves"], [924, 2, 1, "", "get_params"], [924, 2, 1, "", "predict"], [924, 2, 1, "", "score"], [924, 2, 1, "", "set_fit_request"], [924, 2, 1, "", "set_params"], [924, 2, 1, "", "set_predict_request"], [924, 2, 1, "", "set_score_request"]], "sklearn.utils": [[928, 1, 1, "", "Bunch"], [929, 1, 1, "", "ClassifierTags"], [930, 1, 1, "", "InputTags"], [931, 1, 1, "", "RegressorTags"], [932, 1, 1, "", "Tags"], [933, 1, 1, "", "TargetTags"], [934, 1, 1, "", "TransformerTags"], [935, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [937, 4, 1, "", "as_float_array"], [938, 4, 1, "", "assert_all_finite"], [939, 4, 1, "", "check_X_y"], [940, 4, 1, "", "check_array"], [941, 4, 1, "", "check_consistent_length"], [942, 4, 1, "", "check_random_state"], [943, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [946, 4, 1, "", "default_tags"], [947, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [953, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [960, 4, 1, "", "gen_batches"], [961, 4, 1, "", "gen_even_slices"], [962, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [964, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [974, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [977, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [979, 4, 1, "", "register_parallel_backend"], [980, 4, 1, "", "resample"], [981, 4, 1, "", "safe_mask"], [982, 4, 1, "", "safe_sqr"], [983, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[928, 2, 1, "", "clear"], [928, 2, 1, "", "copy"], [928, 2, 1, "", "fromkeys"], [928, 2, 1, "", "get"], [928, 2, 1, "", "items"], [928, 2, 1, "", "keys"], [928, 2, 1, "", "pop"], [928, 2, 1, "", "popitem"], [928, 2, 1, "", "setdefault"], [928, 2, 1, "", "update"], [928, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[936, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[944, 4, 1, "", "compute_class_weight"], [945, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[947, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[948, 4, 1, "", "all_displays"], [949, 4, 1, "", "all_estimators"], [950, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[951, 4, 1, "", "check_estimator"], [952, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[954, 4, 1, "", "density"], [955, 4, 1, "", "fast_logdet"], [956, 4, 1, "", "randomized_range_finder"], [957, 4, 1, "", "randomized_svd"], [958, 4, 1, "", "safe_sparse_dot"], [959, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[963, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[965, 1, 1, "", "MetadataRequest"], [966, 1, 1, "", "MetadataRouter"], [967, 1, 1, "", "MethodMapping"], [968, 4, 1, "", "get_routing_for_object"], [969, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[965, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[966, 2, 1, "", "add"], [966, 2, 1, "", "add_self_request"], [966, 2, 1, "", "consumes"], [966, 2, 1, "", "route_params"], [966, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[967, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[970, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[971, 4, 1, "", "is_multilabel"], [972, 4, 1, "", "type_of_target"], [973, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[975, 1, 1, "", "Parallel"], [976, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[975, 2, 1, "", "__call__"], [975, 2, 1, "", "dispatch_next"], [975, 2, 1, "", "dispatch_one_batch"], [975, 2, 1, "", "format"], [975, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[978, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[984, 4, 1, "", "incr_mean_variance_axis"], [985, 4, 1, "", "inplace_column_scale"], [986, 4, 1, "", "inplace_csr_column_scale"], [987, 4, 1, "", "inplace_row_scale"], [988, 4, 1, "", "inplace_swap_column"], [989, 4, 1, "", "inplace_swap_row"], [990, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[991, 4, 1, "", "inplace_csr_row_normalize_l1"], [992, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[993, 4, 1, "", "check_is_fitted"], [994, 4, 1, "", "check_memory"], [995, 4, 1, "", "check_symmetric"], [996, 4, 1, "", "column_or_1d"], [997, 4, 1, "", "has_fit_parameter"], [998, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 81, 82, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 111, 112, 115, 117, 120, 121, 122, 124, 125, 126, 129, 132, 133, 134, 136, 138, 140, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 166, 168, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 192, 194, 196, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 216, 218, 220, 222, 224, 225, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 249, 251, 252, 253, 255, 261, 263, 264, 266, 270, 271, 276, 277, 278, 279, 280, 283, 287, 289, 291, 297, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 320, 323, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 344, 345, 346, 347, 348, 351, 352, 353, 356, 358, 359, 360, 363, 364, 365, 366, 367, 371, 372, 373, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 398, 399, 401, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 428, 430, 437, 441, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 497, 499, 505, 507, 509, 513, 519, 520, 528, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 696, 697, 698, 699, 700, 701, 702, 709, 710, 711, 717, 720, 725, 729, 731, 744, 750, 767, 768, 788, 789, 806, 807, 808, 809, 811, 812, 813, 818, 823, 827, 828, 831, 834, 835, 836, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 937, 939, 940, 943, 957, 959, 966, 967, 969, 993, 997, 998, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1034, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 378, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 402, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 439, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 935, 936, 937, 939, 940, 944, 945, 948, 949, 950, 951, 952, 954, 956, 957, 959, 960, 961, 963, 970, 971, 972, 974, 975, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1036, 1037, 1038, 1039], "00": [52, 68, 113, 127, 191, 192, 209, 236, 249, 270, 274, 277, 315, 333, 336, 337, 359, 378, 381, 390, 416, 423, 424, 614, 615, 722, 724, 797, 809, 823, 837, 922, 1006, 1010, 1020, 1022, 1024, 1031], "000": [43, 44, 59, 62, 64, 77, 108, 176, 193, 196, 249, 270, 274, 276, 278, 322, 329, 358, 359, 367, 379, 390, 423, 424, 498, 570, 571, 653, 686, 1024, 1031, 1052], "0000": [43, 331], "000000": [79, 191, 207, 236, 276, 321, 746], "00000000": 178, "000000e": 236, "000024": 371, "000045": 191, "00005": 54, "0000ff": [67, 305, 312], "0001": [49, 164, 173, 226, 274, 386, 428, 451, 455, 467, 479, 480, 486, 542, 547, 549, 556, 558, 559, 568, 569, 655, 656, 657, 658, 661, 662, 667, 668, 669, 670, 671, 672, 677, 678, 681, 683, 685, 687, 689, 696, 698, 702, 870, 871, 913, 914, 999], "000198": 191, "000203": 46, "000207": 46, "000231": 46, "00026529484644318975": 289, "000269": 46, "000273": 46, "0003": 141, "000307": 46, "000348": 46, "0004": [52, 141, 322, 613], "000432": 46, "000482": 358, "000609": 358, "000645": 46, "000649": 358, "000676": 358, "0008": 392, "000874": 46, "000875": 358, "000977": 276, "00099547": 178, "000e": 424, "001": [46, 53, 68, 79, 97, 149, 173, 175, 191, 203, 227, 245, 255, 261, 274, 276, 278, 339, 359, 381, 390, 420, 545, 546, 548, 555, 636, 653, 654, 655, 656, 661, 662, 669, 670, 671, 672, 675, 676, 677, 685, 686, 687, 688, 690, 693, 698, 699, 702, 703, 806, 807, 870, 871, 908, 909, 915, 916, 917, 918, 919, 999], "00107": 358, "0012": [43, 703], "0013": 43, "0014": 43, "0015": 43, "00153": 358, "001540": 52, "00166409": 670, "00171412": [767, 768, 1008], "001727": 270, "00177": 358, "001882": [205, 207], "002": [43, 51, 173, 175, 381], "00255": 358, "002592": [205, 207], "00274": 218, "0028": 43, "002861": [205, 207], "003": [43, 173], "0032": 43, "0034189458230957995": 45, "003533": 207, "003586": 545, "00360392": 545, "0036211": 545, "00362644": 545, "00364": 330, "00393284e": 200, "003935": [205, 207], "003e": 424, "004": [43, 359], "0044": 920, "004577621581492997": 324, "00462428": 760, "004904": 274, "0049896314219659565": 324, "005": [43, 276, 280, 302, 317, 359, 390], "005027": 279, "005383": [205, 207], "005422": 276, "005670": [205, 207], "005840": 279, "005861": 279, "006": [43, 45, 284, 390], "006360": 279, "007": [145, 261, 284, 297, 359], "0072b2": 261, "0075": [481, 550], "00755": 550, "007581": 281, "00768662e": 200, "007822": 290, "007833": 281, "008": [173, 381, 390], "008142": [205, 207], "0083899664": 773, "008449": [205, 207], "00860051": 667, "008915": 279, "009": [43, 355, 359, 390, 1031], "009077": 191, "00911944e": 200, "0092": 141, "009362": [205, 207], "009747": 290, "009778": 279, "009788": 290, "0098": 141, "00ff00": 305, "01": [45, 47, 49, 52, 53, 75, 79, 86, 97, 124, 126, 127, 141, 150, 152, 154, 156, 157, 173, 180, 184, 191, 192, 200, 203, 209, 225, 230, 231, 236, 238, 239, 245, 249, 250, 251, 255, 256, 263, 267, 269, 270, 275, 276, 277, 281, 283, 284, 285, 302, 313, 315, 317, 327, 333, 349, 364, 365, 379, 381, 389, 416, 425, 457, 479, 524, 530, 541, 548, 552, 554, 604, 605, 607, 614, 651, 655, 663, 667, 687, 705, 724, 809, 823, 907, 978, 1006, 1010, 1014, 1020, 1022, 1024, 1031], "010": [359, 390, 838, 1018], "0106": 658, "010877306503748912": 284, "011": [43, 93, 162, 284, 297, 359, 390, 1031], "011595": [205, 207], "0116": 613, "011e": 424, "012": [52, 194, 196], "012191": [205, 207], "012521": 207, "012831": 207, "0129126": 378, "013": [43, 52, 170, 284, 359, 1031], "01327": 379, "013520": 191, "014": [43, 67, 284, 329, 390, 1031], "0144": 624, "015": [362, 1018], "0152": 141, "015347e": 236, "015414e": 236, "015579": 290, "015587e": 236, "015596": [205, 207], "0157": 553, "015716e": 236, "01621459": 416, "016445": 276, "017": [83, 359, 390, 479, 480], "017379": 52, "017646": [205, 207], "018": [52, 242, 276, 480, 1031], "0182": 906, "018727": 191, "0188ff": 321, "018900": 207, "019": [173, 203, 313, 381, 390, 479, 1031], "019023": 276, "019069": 207, "01915283": 134, "019163": [205, 207], "0193": [478, 484], "0195": [429, 483], "0196": 141, "0198e1": 122, "019907": [205, 207], "01e": 204, "02": [43, 51, 66, 79, 85, 87, 93, 97, 99, 115, 117, 124, 127, 140, 147, 173, 177, 182, 190, 191, 200, 236, 245, 253, 255, 270, 271, 277, 283, 284, 302, 312, 315, 317, 319, 341, 343, 359, 363, 378, 381, 389, 415, 420, 449, 453, 606, 614, 667, 685, 809, 823, 892, 908, 922, 1006, 1031], "020": [43, 52, 1018], "02069427": 88, "021": 359, "021849": 331, "021872": [205, 207], "022": 1018, "022593": 191, "0226": 658, "022688": [205, 207], "023": [52, 284, 359, 914, 1018], "02306214": 676, "024": [92, 1031], "02449161": 134, "02456369": 203, "024991": [205, 207], "025": [67, 220, 255, 273, 699, 703], "025102": 191, "025422": 276, "0255": 141, "0256": 178, "025930": [205, 207], "026": [118, 359, 366], "026328": [205, 207], "026711": 89, "027": [52, 173, 192, 247, 381, 1031], "027400": 371, "028": [83, 274, 359], "02818216": 117, "02891072": 1011, "029": [359, 1018], "02d": 207, "03": [51, 52, 87, 102, 113, 124, 154, 173, 180, 191, 200, 236, 249, 261, 267, 270, 277, 337, 381, 424, 757, 809, 1006, 1010, 1031], "030": [154, 359], "030462": 105, "030498": 105, "030585": 290, "030677e": 236, "0308": 358, "030867": 191, "031": [62, 93, 173, 381, 1031], "031020": 105, "031026": 191, "031255": 191, "031555": 207, "03162278": 51, "0318": 358, "031988": [205, 207], "0321": 844, "032179": 207, "03228": 631, "03228706": 619, "032356": [205, 207], "03237920e": 200, "032405": 191, "0325": 358, "03260883": 1011, "033": 1018, "033764e": 236, "033823": 191, "034": [93, 154, 239, 479, 1031], "034077": 207, "034194": [205, 207], "034278": 279, "034309": [205, 207], "03433306457": 45, "034674": 46, "034821": [205, 207], "03498585": 1011, "035": [184, 1031], "035005": 191, "03531816": [835, 836], "035445": 290, "0358": 46, "035914": 290, "036": [333, 390, 480, 1031], "036038": [205, 207], "036385": [205, 207], "036445": 276, "036592": 290, "036656": [205, 207], "0367": 180, "0368": 628, "037": 718, "0370": 859, "037600e": 236, "038": [240, 479, 480, 870], "038012": 46, "038076": [205, 207], "03812219": 1011, "038159": 821, "03823144": 178, "038689": 266, "0387": 613, "039": [204, 214, 274, 760, 790, 1010, 1031], "039493": [205, 207], "039497": 259, "03f": 274, "04": [47, 66, 75, 77, 87, 89, 117, 126, 133, 173, 180, 191, 200, 217, 236, 253, 261, 267, 270, 276, 277, 289, 310, 334, 353, 359, 381, 423, 425, 479, 480, 655, 656, 661, 669, 670, 671, 690, 797, 809, 823, 1006, 1010, 1014, 1024, 1031], "040": [252, 1031], "040530e": 236, "041": 52, "041297": 313, "0416": 415, "042": [175, 390], "0427": [236, 477, 482], "042898": 313, "043": [359, 390], "043401": [205, 207], "044": [43, 54, 274, 760, 1010, 1031], "044223": [205, 207], "044451": [205, 207], "044642": [205, 207], "0448": 236, "045": [95, 732, 1031], "04520": 164, "0453": 553, "045311": 313, "045390e": 236, "045453": 46, "045599": [205, 207], "045934": 313, "046": [45, 359], "046010e": 236, "046636": 191, "046641": [205, 207], "047": 390, "0479": 553, "048": 1018, "049": [202, 479, 1031], "049530": 313, "049540": 313, "0499": 553, "04995982": 117, "05": [46, 47, 52, 54, 61, 63, 72, 79, 85, 87, 95, 97, 99, 100, 102, 109, 117, 121, 129, 141, 144, 151, 154, 157, 169, 173, 183, 184, 191, 199, 200, 217, 220, 232, 242, 243, 245, 255, 261, 263, 264, 267, 270, 276, 277, 285, 287, 302, 305, 310, 317, 319, 326, 330, 337, 339, 352, 381, 425, 458, 464, 486, 534, 539, 540, 555, 601, 604, 605, 607, 622, 623, 624, 628, 629, 631, 632, 634, 641, 642, 658, 699, 703, 765, 809, 862, 913, 914, 1006, 1014, 1020, 1031], "050": [52, 1018], "05063247886572012": 284, "050680": [205, 207], "051": 480, "0512": 553, "051474": [205, 207], "0517578125e": 46, "052": [240, 546], "05216586": 117, "052506": 331, "053": [43, 173, 381, 390], "05306648": 132, "05317": 180, "054045": 279, "054699": 191, "0547": [358, 917], "055": [173, 381, 1010], "05518": 632, "05532": 629, "05534985": 314, "0556": 917, "056": [52, 764, 1018], "0561": 917, "0566": 632, "05663": 629, "0568": 756, "057": [390, 838], "057122": 207, "05752333": 134, "057711": 207, "058": [94, 173, 274, 381, 1031], "05840206": 134, "0595": 481, "05968": 164, "059862": 46, "05994843": 51, "06": [52, 191, 209, 217, 218, 255, 270, 276, 277, 315, 319, 353, 390, 415, 490, 491, 492, 653, 654, 698, 702, 806, 807, 809, 823, 922, 1006, 1020, 1022, 1031], "060": [43, 52, 275, 760, 1031], "0602": 46, "061": 274, "0614": 632, "06165": 629, "061696": [205, 207], "0622": [478, 484], "0626": 844, "063": [274, 276, 288, 445, 1031], "0631": 52, "063184": 274, "064": [196, 390, 1018, 1031], "065": [274, 390], "06506307": 314, "0652": 631, "06525643": 619, "066": [274, 657], "06686804": 233, "06694199": 134, "06695631e": 113, "067": 184, "067109": 207, "067528": 207, "068": [43, 52, 83, 85, 249, 276, 1031], "068332": [205, 207], "06880943": 117, "0689": 358, "06896552": 457, "069": 274, "0693": 628, "07": [52, 57, 117, 133, 191, 214, 236, 270, 285, 367, 379, 416, 570, 571, 701, 703, 1010, 1024, 1031], "070": [213, 1031], "0707": 632, "07073": 629, "071": [173, 334, 381, 445], "071964": 191, "072": [321, 348, 445, 657, 1031], "073": [230, 274, 479, 480, 1031], "074": 274, "074412": [205, 207], "075": [127, 165, 1031], "07582983e": 200, "075887": 207, "076": [43, 366, 901, 1031], "077": [297, 352, 1031], "077846": 276, "0779": 46, "078": 43, "07846529": 314, "07880": 164, "079": [173, 381], "079297": 276, "07963978e": 200, "07993421": 233, "08": [43, 79, 85, 127, 184, 191, 192, 203, 315, 381, 486, 540, 552, 554, 572, 650, 667, 809, 870, 871, 892, 1016, 1031], "080": [359, 364, 1031], "08022103": [835, 836], "080295": 207, "081": 1018, "0813": [477, 482], "082": [43, 45], "0825": 322, "083": [274, 366], "08377444": 760, "084": 61, "085299": [205, 207], "08533159": 221, "085711": 89, "086": 233, "08604995": 117, "086944": 259, "08699432": 222, "0872422": 669, "088": [678, 1018], "089": [54, 231, 359, 1031], "089063": [205, 207], "08d": 55, "08t16": 378, "09": [126, 127, 133, 191, 249, 253, 289, 416, 538, 616, 744, 851, 1010, 1020, 1024, 1031], "090": [130, 304, 1031], "09000": 218, "090528": 191, "090808": 191, "091": [76, 1031], "091053": 191, "091621": 89, "092": [147, 1031], "092204": [205, 207], "093": [251, 479], "094": [257, 480, 1031], "09443967": 314, "09541846": 545, "096": [261, 1031], "09684337": 233, "096950": 313, "097": [43, 173, 326, 381, 1031], "098": [45, 221, 359, 1031], "098332": 62, "0986": [424, 877], "09861229": [621, 1020], "098758": 62, "098776": 276, "098932": 62, "099": 43, "099820": 62, "0d": 1042, "0e": [287, 558, 559], "0e4": 225, "0f": [57, 93], "0min": 89, "0rc1": 388, "0rcn": 388, "0x": 942, "0x7f1cba56d700": 266, "0x7f1cba85b190": 218, "0x7f1cbb0bf2b0": 288, "0x7f1cbb5aca60": 256, "0x7f1cbb7c3140": [283, 288], "0x7f1cbbb37310": 288, "0x7f1cc81cb0d0": 274, "0x7f1cc8277840": 288, "0x7f1cc8959c10": 143, "0x7f1cca4402e0": 105, "0x7f1cca440370": 105, "0x7f1cca4a9490": 159, "0x7f1cca4a9dc0": 159, "0x7f1cca98ab80": 143, "0x7f1ccb115c40": 336, "0x7f1cdae54a60": 105, "0x7f1cdaed8c10": 106, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 397, 398, 399, 402, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 931, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 951, 952, 954, 955, 956, 957, 958, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1037, 1039, 1043], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 105, 106, 108, 111, 112, 113, 114, 115, 117, 118, 122, 126, 127, 128, 129, 133, 134, 138, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 160, 162, 166, 170, 173, 176, 177, 179, 181, 182, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 203, 208, 209, 211, 212, 216, 218, 219, 220, 221, 222, 223, 224, 225, 229, 230, 231, 234, 235, 236, 239, 240, 245, 248, 249, 250, 251, 252, 254, 255, 256, 258, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 287, 290, 291, 294, 296, 302, 312, 313, 314, 315, 317, 318, 320, 321, 322, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 340, 345, 346, 347, 349, 350, 352, 353, 354, 356, 358, 359, 360, 367, 371, 378, 379, 380, 381, 382, 384, 389, 390, 396, 397, 398, 402, 407, 408, 409, 413, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 446, 451, 455, 457, 459, 460, 461, 467, 468, 470, 483, 496, 501, 502, 505, 509, 510, 511, 513, 519, 520, 521, 522, 525, 529, 530, 533, 535, 537, 540, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 557, 561, 564, 565, 566, 567, 570, 571, 573, 574, 575, 576, 577, 579, 591, 592, 596, 602, 603, 608, 609, 614, 616, 620, 626, 628, 636, 639, 641, 643, 644, 645, 646, 649, 651, 652, 653, 655, 656, 658, 661, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 681, 682, 684, 685, 686, 687, 690, 694, 695, 700, 701, 704, 705, 708, 714, 724, 735, 751, 765, 778, 806, 807, 809, 810, 811, 812, 813, 820, 823, 824, 825, 826, 827, 829, 830, 832, 837, 839, 840, 841, 842, 848, 849, 850, 852, 853, 854, 860, 869, 870, 871, 873, 879, 883, 886, 887, 890, 902, 910, 916, 919, 921, 922, 926, 931, 943, 954, 957, 961, 973, 978, 979, 985, 986, 995, 999, 1000, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1014, 1016, 1017, 1020, 1024, 1025, 1031, 1038, 1039, 1042, 1043, 1044, 1049, 1051, 1052, 1053, 1055, 1056], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 77, 85, 88, 92, 96, 101, 105, 106, 109, 112, 113, 124, 126, 127, 133, 139, 144, 154, 155, 158, 161, 176, 180, 183, 184, 191, 192, 194, 196, 198, 199, 201, 203, 204, 208, 209, 210, 212, 217, 218, 219, 220, 222, 227, 228, 229, 231, 233, 234, 236, 240, 241, 243, 248, 249, 250, 251, 252, 256, 261, 263, 267, 270, 271, 272, 274, 276, 279, 281, 286, 287, 291, 302, 303, 304, 315, 318, 319, 321, 323, 324, 329, 333, 334, 340, 341, 345, 346, 348, 349, 350, 353, 354, 356, 358, 359, 362, 365, 366, 371, 373, 379, 381, 384, 386, 389, 390, 407, 413, 416, 417, 420, 421, 422, 423, 424, 445, 449, 453, 457, 479, 480, 486, 498, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 539, 543, 545, 548, 553, 554, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 614, 616, 619, 640, 641, 642, 648, 649, 650, 651, 655, 656, 657, 658, 661, 662, 667, 668, 669, 670, 671, 672, 674, 676, 678, 680, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 755, 806, 807, 811, 831, 837, 838, 843, 848, 849, 850, 852, 853, 854, 858, 870, 871, 889, 891, 894, 903, 920, 999, 1000, 1003, 1007, 1010, 1011, 1017, 1020, 1022, 1049, 1050, 1051, 1054, 1055], "1000": [43, 46, 47, 54, 63, 67, 72, 85, 106, 109, 117, 133, 141, 143, 145, 149, 150, 151, 156, 161, 165, 168, 181, 196, 204, 210, 221, 240, 248, 249, 251, 261, 265, 270, 274, 276, 282, 285, 287, 302, 304, 318, 321, 327, 328, 330, 332, 333, 348, 349, 355, 358, 359, 389, 390, 397, 414, 424, 445, 481, 487, 488, 540, 541, 546, 548, 550, 551, 552, 554, 555, 557, 562, 572, 573, 641, 655, 656, 660, 661, 662, 664, 669, 670, 671, 672, 675, 676, 677, 681, 685, 686, 687, 696, 701, 707, 710, 773, 890, 902, 908, 913, 914, 999, 1003, 1025, 1048, 1050, 1059], "10000": [43, 50, 52, 66, 78, 98, 106, 107, 152, 164, 204, 211, 218, 226, 234, 249, 251, 289, 328, 344, 346, 367, 373, 423, 424, 570, 571, 653, 688, 890, 919, 1022], "100000": [179, 251, 261, 384, 622, 623, 624, 628, 629, 631, 632, 634, 902, 1003], "1000000": [55, 545], "10005": 1049, "1000x": 1047, "1001": [229, 259], "10027": 1054, "10045": 1049, "1005": 1025, "10058": 1050, "10059": 1049, "10065": 255, "1007": 714, "10070308464041304": 218, "10071": 1049, "10093": 1049, "10095": 1049, "10096": 1054, "100_000": [62, 64, 191], "100k": [249, 404], "100ksampl": 404, "100x": [1041, 1044, 1058], "101": [64, 173, 294, 381, 859, 1042], "10101": 1049, "10112": 1049, "1013": 1018, "10142": 1049, "10153": 1049, "10168": 1056, "10181": 1049, "10192": 1049, "10195": 1049, "101alexmartin": [1058, 1059], "102": [343, 390, 1031, 1043], "10210": 1049, "10229": 1049, "1024": [88, 133, 457, 476, 547, 911, 1054], "10280": 1049, "10297": 1049, "103": [154, 228, 296, 297, 379, 423, 506, 564, 565, 1031, 1041], "10306": 1049, "10325": 1049, "10336": 1049, "10346": 1049, "10377": 1049, "1038": 416, "10397": 1049, "104": [43, 61], "10403": 236, "10412": 1049, "10428": 1049, "10437": 1049, "10440": 1050, "10441": 1049, "1045": 105, "10452": 1049, "10458": 1049, "1046": [105, 266], "10463": 1030, "10468": 1056, "10469096": 178, "1047": 105, "10471": 1049, "10474": 1049, "10478008": 416, "10482": 1051, "1048576": [424, 591, 598], "10493": 1053, "105": 321, "10500": 1049, "10521": 1049, "10526": 416, "10536": 1049, "10580": 1050, "10581": 1049, "10584743": 178, "10587": 1049, "10591": 1053, "10593": 1049, "106": [173, 259, 381, 889, 1004, 1042], "10606655": 233, "10610": 1049, "10655": 1049, "10663": 1049, "10677": 1049, "10687": 1049, "107": [154, 331, 416, 908, 1011, 1043], "10708": 1053, "10711": 1053, "10723": [1048, 1049], "10727": 1050, "1073": [379, 496], "10733": 1030, "10740": 1049, "1076": 340, "10774": 1049, "10795": 1049, "108": [0, 47, 52, 1031, 1042], "1080": [378, 416], "10805": 1055, "10811": 1049, "10815": 1051, "10827": 1049, "10829": 1049, "10834": 236, "10836": 1049, "1084": 266, "10845": 1049, "10869": 1049, "1088": 259, "10881": 1049, "108843": 279, "10887": 1049, "108880": 62, "10898": 1049, "10899": 1049, "109": [61, 88, 205, 1011, 1031, 1043], "10908": 1049, "10913": 1049, "10914094": 233, "10928": 1049, "10933": 1049, "10982": 1049, "10992": 1049, "10998": 1049, "10999": 1049, "10_000": [46, 62, 109, 143, 151, 190, 196, 249, 279, 297, 334, 568, 569, 573, 574, 890], "10_fold": [379, 502], "10e": [198, 203], "10k": [327, 404, 455], "10ksampl": 404, "10x": 1041, "10x10": 223, "10\u2079": 1049, "11": [43, 57, 108, 114, 126, 173, 178, 191, 192, 203, 218, 219, 220, 223, 255, 270, 273, 281, 282, 288, 300, 301, 303, 315, 321, 328, 331, 332, 346, 350, 354, 358, 360, 378, 381, 382, 390, 397, 416, 419, 420, 423, 458, 465, 490, 491, 492, 493, 505, 510, 526, 527, 621, 659, 665, 679, 724, 730, 732, 733, 787, 788, 789, 810, 813, 827, 830, 838, 865, 922, 958, 973, 1002, 1006, 1008, 1020, 1024, 1025, 1031, 1039, 1043, 1047, 1049, 1050, 1052, 1055, 1056], "110": [120, 198, 204, 215, 225, 248, 323, 333, 445, 1004, 1005], "1100": 85, "11000": 1050, "11005": 1049, "11006": 1049, "11010": 1049, "11011": 1049, "11021": 154, "11042": 1049, "11047": [1030, 1051], "11064": 1053, "11082": 1049, "110923": 207, "11099": 773, "111": [43, 46, 47, 102, 120, 130, 192, 215, 233, 242, 276, 297, 865, 1044], "1111": [659, 665], "1111111111111111": 284, "11124": 1049, "1112658": [907, 1022], "11135": 1049, "11136": 1049, "1114": 266, "11144": [1049, 1050], "11144673": 233, "11160": 1049, "11166": 1049, "1117": 628, "11176": 1049, "11179": 1050, "1118": 105, "112": [89, 173, 192, 251, 379, 381, 1043], "11206": 1049, "11211": 1049, "112141": 390, "11232": 1051, "11235": 1049, "112589990684262": 755, "11272": 1049, "11293": 1049, "11295": 1049, "11296": 1052, "113": [294, 390, 1044], "11306": 1049, "11308": 1049, "11310": 1049, "11314": 379, "11315": 1049, "11327": 1049, "113516": 279, "11353": 1049, "11354": 1050, "11364": 1050, "11364637": 51, "113781": 331, "11378556": 314, "114": [211, 331, 719, 1031, 1041], "1140": 379, "11413": 43, "11420": 1049, "1145": [196, 416, 685], "11452112": 233, "11458": 1050, "11464": 1049, "11466": 1049, "11467": 1049, "1148": 266, "115": [192, 1018], "11505": 1049, "11514": 1052, "11520": 1049, "11526": 1050, "11528972": 233, "11542": 1049, "11553": 1049, "11556": 1049, "11557": 1049, "11558": 1049, "11576": 1049, "11585": 1049, "11596": 1049, "116": [201, 208, 1031, 1041], "1162": 416, "11635": 1051, "11646": 1050, "11650": 1050, "11679": 1049, "11680": 47, "11682": 1053, "11682692": 233, "11693539": 117, "11699": 1050, "117": [122, 227, 1031, 1042], "11705": 1050, "117154": 191, "11724": 1049, "11727": 1050, "11741": 1049, "11754": 1050, "11756": [1049, 1050], "117608": 62, "11774": 1049, "1179": 266, "118": 599, "11805": 1030, "11841": [907, 1022], "1185": 390, "11860": 1056, "1189": 423, "119": [1004, 1044], "11901": 1049, "11905": 1049, "11912": 1049, "11915045": 367, "11924": 1049, "11931": 218, "11932": 218, "11933": 218, "11935": 218, "11950": 1052, "11951": 1049, "11958": 180, "11973": 1050, "11977": 1030, "12": [0, 43, 45, 52, 58, 70, 75, 77, 78, 88, 90, 91, 92, 107, 108, 117, 147, 148, 149, 152, 154, 173, 178, 179, 180, 187, 191, 192, 194, 199, 203, 204, 218, 226, 236, 238, 241, 242, 243, 245, 246, 248, 256, 259, 263, 264, 270, 275, 276, 278, 279, 282, 288, 290, 300, 321, 322, 323, 331, 334, 354, 360, 381, 382, 389, 397, 399, 402, 408, 409, 410, 416, 420, 424, 451, 455, 457, 465, 490, 491, 492, 493, 505, 541, 543, 550, 579, 655, 656, 661, 669, 670, 671, 673, 678, 680, 690, 694, 695, 698, 701, 702, 734, 739, 806, 807, 810, 827, 830, 844, 865, 881, 990, 999, 1000, 1002, 1006, 1008, 1010, 1011, 1020, 1024, 1025, 1031, 1039, 1042, 1044, 1048, 1049, 1051, 1052, 1057, 1058], "120": [155, 181, 239, 333, 425, 599, 1031, 1041], "1200": [85, 150, 317, 423], "12000": 529, "12068": 1051, "12069": 1054, "121": [102, 140, 187, 250, 627, 678, 1020], "12105": 1049, "12116": 1050, "1212": 507, "12122": 1049, "121351": 207, "12143": 1050, "12145": 1051, "12147": 1030, "12159": 1049, "12165": 1049, "12165031": 1011, "1217": 218, "12171": 1049, "12174": 1050, "12177": 1050, "12190903": 117, "12196": 218, "12197": 1050, "122": [0, 140, 180, 187, 192, 250, 390, 1011], "1220": 628, "12211": 1049, "12222": 1050, "12232": 1050, "12234": 1049, "12246": 1049, "12251": 1050, "12258": 1051, "12274212": 1011, "12279": 1050, "12285": 1056, "1229": 526, "123": [142, 161, 367, 423, 525, 526, 527, 564, 565, 846, 1011, 1018], "12300": 1050, "12303": 1051, "12304": 1049, "12317": [180, 1049], "1232": 423, "12326": 43, "12327": 43, "12328": [43, 1050], "12329": 43, "12330": [43, 1049], "12334": 1050, "12338": 1049, "12339": 1049, "1234": [199, 264, 279, 384], "12344": 1050, "12345": 1049, "12350": 1049, "1236": 323, "12360": 1049, "12365": 1049, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 279, "12383": 43, "12388": 1049, "12393": 1049, "124": [46, 423, 1043], "124225": 207, "12436": 1050, "12441": 1049, "12451": 1049, "12462": 1049, "12467": 1049, "12471": 1049, "12481": 1049, "125": [43, 88, 113, 127, 329, 543, 999, 1010, 1020], "12513": 1050, "12514": 1049, "125140": 279, "12517": 1049, "12518": 1049, "12522": 1049, "125247168": 52, "12543": 1050, "12557": 1051, "12568": 1050, "12569": 1051, "12582": 1050, "12583": 1050, "1259": 57, "12599": 1050, "126": [86, 423, 1031], "12612": 1049, "12613": 1050, "12625": 1049, "1263": 390, "12638": 1053, "12650": 1051, "126502": 207, "12669": 1050, "1268187": 233, "12685": 1049, "12699": 1049, "127": [150, 1041], "12701": 1049, "12704": 1049, "127128": 151, "12715": 1050, "12732": 1050, "1276": 47, "12789": 1051, "128": [53, 54, 218, 371, 545], "12800": 1030, "12807": 1050, "12821": 1050, "12834": 1050, "12852": [1030, 1051], "12855": 1050, "12860": [236, 1050], "12861": 1050, "12866": 1030, "1288": [45, 379], "12881": 1049, "12883823": 420, "12887": 1051, "129": [220, 1041], "12908": 1050, "12914884": 1011, "12916": 1050, "12927": 1051, "12946": 1049, "12949": 1049, "12955": 1050, "12972": 1050, "12983": 1050, "12988": 1050, "1299": [879, 1020], "12th": 1022, "13": [43, 45, 49, 50, 52, 54, 79, 108, 129, 133, 147, 150, 152, 173, 186, 191, 196, 204, 227, 243, 269, 270, 277, 280, 282, 315, 317, 321, 334, 347, 379, 381, 384, 390, 397, 420, 428, 505, 519, 522, 541, 542, 560, 561, 591, 615, 644, 648, 743, 768, 827, 857, 872, 879, 905, 906, 1006, 1010, 1011, 1016, 1017, 1020, 1025, 1031, 1039, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1053], "130": 390, "1300": 85, "13003": 1053, "13005": 1049, "13007": 1050, "130107": [233, 249, 497], "13013": 1051, "13042": 1056, "13046": 1049, "13077794": 367, "13086": 1050, "131": [43, 53, 91, 359, 390, 1010, 1042], "13124": [1049, 1050], "13134": 1049, "13142": 1050, "13146": [1030, 1051], "13151": 1050, "13157": 1050, "13164": 1050, "13165": 1049, "13174": 1050, "1319": [879, 1020], "131900": 104, "13193": 1050, "132": [43, 47, 53, 91, 423], "13204": 1053, "13213": 1051, "1322": 631, "13221": 1049, "13222543": 619, "13227": 1030, "1323": 218, "13231": 1051, "13233": [379, 502, 503], "13240": 1050, "13241": 1050, "13250": 1050, "13251": 1050, "13253": 1050, "13260": 1050, "13266": 1050, "13276": 1049, "13279": 1050, "13283": 1050, "13286": 1000, "13290": 1051, "133": [53, 91], "13312": 1049, "13317": 1050, "13328": 1050, "13333": 1050, "13336": 1050, "13350": 1050, "13363": 1050, "13366": 1050, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 271, "13382": 1050, "13389": 1050, "13392": 1051, "13393": 1051, "13397": 1050, "134": [54, 80, 88, 130, 145, 150, 270, 276, 1031, 1044], "13422": 1050, "13427": 1050, "13439": 1050, "13447": 1050, "13459": 1050, "13467": 1051, "13485": 1050, "13486": 1050, "13496": 1050, "135": [173, 331, 381], "13511": 1052, "13524": 1050, "1353": 358, "13531": 1050, "13545": 1050, "13549": 1050, "13554": 1050, "13562": 1050, "13575": 1051, "136": [259, 1031], "13601": 1050, "13607": 1050, "13609": 1051, "13618": 1051, "13620": 1050, "13628": 1050, "13636": [1006, 1050], "13641": 1050, "13649": 1058, "13651": 1050, "137": [44, 255, 390, 1031, 1042], "13704": 1051, "13707": 1051, "1371": 543, "13726": 1051, "1373": 1007, "1374": 543, "13741": 1050, "13769": 1051, "13772": [1049, 1050], "13773": 1051, "13779": 1050, "1378": 236, "13780": 1050, "1379": 236, "138": [390, 423, 1010], "13806": 1051, "1382": 533, "13822072286080167": 284, "13835": 1050, "1385": 482, "13864": 1050, "13875": 1051, "13877": 1050, "13894": 1050, "13896": 1051, "139": [236, 297, 390, 423, 460, 470, 700, 704, 1011], "13900": 1053, "13902": [1030, 1051], "13903": [1049, 1050], "13910": 1050, "13911": [1030, 1051], "13925": 1051, "13933": 1051, "13938": 1051, "13947": 1050, "1396": 1007, "13960": 1051, "1397": 390, "13974": 1050, "13983521": 314, "13987": 1051, "13988486": 233, "13995": 1051, "13th": 64, "14": [43, 50, 52, 73, 84, 95, 97, 98, 101, 108, 114, 127, 129, 168, 192, 203, 207, 209, 236, 240, 245, 250, 255, 270, 275, 281, 282, 291, 296, 297, 315, 320, 321, 331, 353, 356, 372, 379, 381, 382, 397, 402, 408, 409, 416, 420, 505, 507, 519, 562, 563, 644, 652, 701, 823, 827, 879, 1003, 1006, 1010, 1020, 1025, 1039, 1041, 1042, 1044, 1045, 1049, 1054], "140": [88, 248, 333, 423, 519, 525, 526, 527, 564, 565, 1011, 1031], "1400": [85, 482], "14012": 1051, "14024": 1050, "14028": 1051, "14035": 1051, "14048": 1052, "14053": 1050, "14067": 1050, "14075": 1052, "14087": 1050, "14092": 1050, "141": [294, 510, 543, 913, 1011], "14108": 1051, "14114": 1051, "14156": 236, "14170": 1051, "14180": [1030, 1052], "1419": 43, "14194": 1051, "14197": 1050, "142": [43, 82, 423], "1422": 43, "14228": 372, "14237": [1049, 1050], "14259": 1051, "14264": 1052, "142857": 236, "14286": 1051, "14287": 1051, "14294": 1051, "14296": 1051, "143": [131, 173, 234, 381, 479, 480, 1022, 1031, 1041, 1042], "14300": 1052, "14302": 255, "14305": 1051, "14309": 1050, "14336": 1051, "14338": 1000, "14356": 1051, "14357": 1051, "14378": 1051, "14381": 1051, "14393": 1050, "144": [276, 390, 1041], "1440": 43, "14406": 1051, "1441": 631, "14410151": 619, "14417": 1051, "144204": 151, "1443": 1016, "14430": 1051, "14446": 1053, "14458": 1051, "14464": 1051, "14475": 1051, "144943": 62, "14496": [390, 1050], "145": [52, 416], "1451": 47, "14510": 1051, "14516": 1052, "14520": 1051, "14538": 1051, "14544": 1051, "14549": 1051, "1456": 236, "14582": 1030, "1459": 47, "14591": 1051, "14593": 1051, "14595": 1051, "145957": 151, "146": [45, 423], "1460": [148, 159], "14602": 1051, "14603365": 233, "14623": 1051, "14625": 47, "14629": 1051, "1464": 246, "14646": 1051, "14647": 1051, "14680": 1051, "14682": 1051, "14696": 1052, "147": [245, 1011, 1031], "14702": 1051, "147022": 207, "14704": 1051, "14706": 1051, "1471": 1016, "14710": 1051, "14732": 1051, "14736": 1056, "1474": 390, "14740": 1051, "14764": 1051, "1479": 47, "148": [258, 296, 1031, 1044], "14800": 1053, "14810": 323, "14848": 1052, "14849": 1051, "1486": 47, "14862": 1056, "14864": 1051, "14865": 1051, "14869": 1051, "14872": 1051, "14884": 1051, "14890": 1051, "14894": 1051, "14898": 1051, "149": [1011, 1041], "14900": 1051, "14902": 1051, "14907": 1051, "14908": 1051, "14933": 1051, "14936": 1051, "14971": 1051, "14975": 1055, "14982": 1053, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 88, 89, 96, 97, 101, 107, 108, 113, 115, 122, 133, 142, 144, 147, 148, 151, 154, 168, 170, 172, 175, 179, 186, 190, 191, 192, 207, 215, 220, 232, 236, 240, 243, 245, 263, 264, 270, 271, 279, 281, 284, 287, 288, 291, 301, 305, 312, 313, 315, 317, 319, 321, 332, 337, 345, 347, 350, 353, 356, 363, 378, 379, 382, 384, 397, 402, 408, 409, 420, 423, 424, 448, 462, 498, 505, 506, 507, 540, 546, 554, 555, 564, 565, 607, 613, 618, 653, 661, 670, 672, 677, 685, 687, 701, 827, 842, 865, 894, 999, 1005, 1006, 1007, 1010, 1013, 1014, 1020, 1025, 1037, 1039, 1043, 1053, 1055, 1056], "150": [43, 45, 120, 122, 142, 151, 164, 239, 243, 245, 289, 333, 351, 354, 381, 420, 425, 513, 610, 611, 834, 835, 836, 1010], "1500": [74, 85, 92, 97, 102, 122, 238, 242, 261], "15000": [681, 696, 870, 871], "15005": [1052, 1054], "15007": 1053, "15010": 1051, "15028": 1051, "15038": 1051, "150407": 390, "15044": 1051, "15049": 1051, "150527": 313, "15053": 1051, "15057": 1051, "1506": 392, "15080": 1051, "15082": 1051, "15083": 1051, "15084": 1051, "15086": 1051, "15094": 1051, "15096": 1051, "15099": 1051, "150x4": 120, "151": [331, 390, 423, 510, 1022], "15100": 1051, "1511007": 259, "151101": 259, "15119": 1051, "15120": 1051, "15126": 1053, "15138": 1051, "15160": 1051, "15179": 1052, "152": [93, 146, 390], "15257": 1051, "1527": 869, "15274": 1051, "15297572": 545, "153": 672, "15304": 1051, "15319": 1030, "153244303321897735": 416, "15361": 1053, "15375": 1051, "15380": 1052, "15382": 1051, "15393": 1051, "154": [315, 346, 660, 1011, 1031], "1542": 390, "15427": 1053, "15429": 1051, "15436": 1052, "154453": 313, "15463": 1051, "15488": 1051, "15490": 1051, "155": 360, "15503": 1052, "15521": 164, "15524": 1051, "1553374": 416, "1553511": 416, "1554": 869, "15550": 1030, "15557": 1051, "15558": 1052, "15582": 1052, "156": [106, 173, 191, 338, 381, 1031], "15611": 1000, "15622": 1052, "15625": 1051, "156252": 207, "15636": 1053, "15652": 1052, "15655": 1052, "15661": 1051, "15669": 1052, "15699552": 1011, "157": [84, 390, 1031], "15707": 1052, "15709": 1052, "15730": 1052, "157334": 313, "15751": 1051, "15760": 1051, "15762": 1052, "15763": 1053, "15773": 1052, "15782": 1052, "15785": 1052, "15797": 1051, "158": [77, 423, 678], "15806": 1052, "15810": 1051, "15834": 1052, "15863": 1051, "15864": 1052, "15868": 1051, "15879": 1051, "15888": 1051, "15898": 1051, "159": [88, 265, 379, 1031, 1041], "1590": 315, "15918": 1052, "1592": 507, "15926": 1052, "15930": 1051, "15933": 1051, "15936": 1051, "15937": 1051, "159419": 259, "15946": 1052, "15947": 1051, "15948": 1055, "15950": 1052, "15953": 1052, "15959": 1052, "15963": 1052, "1597": 270, "15980": 1052, "15984": 1055, "15996": 1051, "15e": 124, "16": [43, 44, 52, 57, 64, 78, 85, 86, 89, 101, 108, 113, 124, 127, 168, 192, 211, 217, 218, 219, 236, 238, 239, 242, 250, 254, 270, 278, 279, 280, 301, 315, 317, 321, 326, 351, 359, 364, 379, 381, 382, 390, 397, 402, 408, 409, 420, 421, 424, 450, 465, 467, 479, 480, 486, 487, 506, 507, 511, 525, 543, 544, 579, 598, 604, 605, 616, 617, 648, 659, 660, 663, 664, 665, 666, 691, 692, 822, 827, 839, 888, 914, 922, 985, 986, 987, 999, 1006, 1010, 1020, 1025, 1031, 1037, 1039, 1041, 1042, 1046, 1047, 1049, 1050], "160": [233, 253, 999, 1031], "1600": 85, "160030": 207, "16006": 1052, "1600x1600": 89, "16018": 1055, "16021": 1052, "16052385": 134, "16061": 1055, "16066": 1053, "16069": 1052, "16075": 1052, "16076": 1051, "16084": 1052, "16090": 1052, "16103": 1052, "16111": 1052, "16112": 1052, "16117": 1052, "161245": 89, "16132": 1052, "16144": 390, "16147": 381, "16149": 1052, "16159": [390, 1052], "1616": 481, "16182": 1052, "16183": 1052, "162": [93, 381], "16224": 1052, "1623": 57, "1624": 507, "16245": 1052, "16257": 1052, "1626": 1030, "16261": 1052, "16266": 1052, "16280": 1052, "16289": 1053, "163": [173, 294, 381, 1018], "163224": 207, "16323": 1052, "16326": [43, 1053], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1052, "16335": 1053, "16352": 1053, "16362": 1052, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1053, "16397": [1051, 1052], "164": [99, 423, 1031], "164009": 279, "16401": 1052, "16403": 1052, "16431": 1052, "16437": 1052, "16442": 1052, "16443186": 1011, "16449": 1054, "16451": 1052, "16466": 1052, "16484": 1052, "16493": 1053, "165": [358, 1011], "16500": 1051, "16505": 1051, "16508": 1052, "16530": 1053, "16531": 154, "16539": 1052, "16585": 1052, "166": [43, 315, 390, 1010, 1041], "16605": 1055, "16619": 1053, "16622": 1052, "16625": 1053, "16632": 1052, "16655": 1052, "16663": 1052, "166667315173": 52, "16692": 1052, "16695": 1056, "167": [308, 390, 1031, 1041], "16718": 1052, "16726": 1052, "16728": 1052, "16747": 1056, "16748": 1055, "168": [51, 1031, 1041], "1680": 381, "16801": 1052, "16837": 1052, "16841": 1052, "16849": 1052, "1689": 359, "169": [93, 315], "16906": 1053, "1691": 1006, "169106": 276, "1693": 913, "16935": 1053, "16948": 1055, "16950": 1052, "169504": 236, "16979946": 1011, "1698": 658, "16981": 1052, "16985": 1053, "16993": 1052, "17": [52, 57, 74, 87, 108, 113, 154, 176, 191, 217, 249, 270, 279, 312, 321, 379, 382, 389, 402, 408, 409, 416, 420, 452, 469, 495, 506, 507, 509, 532, 540, 545, 549, 556, 558, 559, 564, 568, 569, 578, 579, 606, 637, 658, 666, 667, 668, 675, 678, 681, 683, 696, 701, 738, 739, 749, 770, 775, 792, 793, 796, 798, 827, 851, 862, 877, 882, 883, 891, 893, 899, 915, 918, 921, 922, 923, 924, 958, 999, 1000, 1011, 1013, 1020, 1037, 1039, 1041, 1042, 1043, 1044, 1047, 1050, 1055], "170": [79, 92, 93, 97, 269, 307, 390, 1031], "1700": 85, "170087": 313, "17021": 1052, "17032": 1052, "17036": 1054, "17038": 1053, "170388": 1011, "1706": 340, "17061": 1052, "17090": 1053, "17095": 1053, "171": [88, 173, 178, 381, 390, 797, 1010, 1031], "17107": 1053, "1714": 1006, "17148": 1053, "17159": 1053, "17169": 1054, "17187": 1053, "17192": 1053, "17193": 1053, "172": [120, 390, 502, 503, 658, 1006, 1031], "17204": 1052, "17205": 1052, "17210": [52, 1052], "17225": 1053, "17226834": 88, "1723": 46, "17233": 1053, "17235": 1052, "17236387": 221, "17266": 1055, "17289014": 178, "1729": 192, "173": [390, 593], "17309": 1052, "17317": 1053, "17357": 1052, "17360": [47, 1052], "17367": 1053, "17370318": 233, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1053], "1738": 1010, "17386": 1053, "17388": 1057, "17396": 1053, "174": [150, 246, 315, 390, 593], "17406": 1053, "17412": 1053, "17414": 1053, "17427": 1053, "17433": 1052, "17443": 1054, "17448": 1053, "1747": 192, "17474": 236, "17478": 1053, "17491": 1053, "17499": 1053, "175": [390, 1020], "17526": 1053, "175298": 279, "17546": 1053, "17569": 1053, "17578": 1053, "17598": 1053, "176": [390, 846, 1011, 1018], "17603": 1053, "17604": 1053, "17606": 1053, "17608": 1053, "17609": 1053, "17610": 1053, "17612": 1053, "17614": 1053, "17616": 1053, "17622": 1054, "17633": 1053, "17644": 1053, "17651": 1053, "17661": 1053, "17662": 1053, "17679": 1053, "17694": 1052, "177": [241, 253, 390, 1031], "17702": 1053, "1771": 359, "17742": 1052, "17743": 1054, "17746": 1054, "17750": 1054, "17759": 1053, "17769": 1054, "17772": 1054, "17777": 1053, "17785": 1054, "178": [46, 273, 286, 381, 390, 519, 857, 1031], "178000": 319, "17804": 1053, "17812": 1052, "17819": 1055, "17826": 1053, "17833": 1053, "17848": 1052, "1785": 359, "17856": 1053, "17864": 1053, "17876": 1053, "17878": 1053, "179": [96, 287, 381, 390, 423, 1031, 1041], "17914": 1052, "17928620": 378, "17932": 1053, "17935": 1053, "17937": 1053, "17959": 1052, "1797": [93, 274, 315, 336, 381, 428, 453, 511, 541, 542, 543, 544, 608, 609, 697, 698, 699, 700, 702, 1013], "17984": 1053, "17985": 1052, "17985197": 233, "17987": 1053, "17992": 1053, "17995": 1052, "17997": 1053, "17_760": 154, "17t14": 378, "18": [43, 46, 47, 49, 57, 75, 79, 84, 88, 95, 97, 108, 131, 151, 184, 191, 229, 243, 245, 250, 270, 276, 315, 321, 323, 337, 358, 359, 360, 384, 390, 420, 421, 424, 455, 467, 501, 509, 510, 511, 513, 514, 519, 544, 545, 547, 549, 550, 566, 567, 568, 569, 572, 573, 574, 575, 578, 580, 581, 582, 583, 584, 586, 587, 598, 603, 608, 609, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 655, 658, 667, 668, 680, 723, 727, 740, 743, 744, 750, 752, 769, 779, 806, 807, 830, 846, 869, 870, 871, 877, 883, 891, 892, 903, 913, 914, 921, 922, 923, 924, 925, 956, 957, 999, 1008, 1010, 1020, 1031, 1037, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052], "180": [70, 261, 262, 263, 266, 267, 306, 310, 390, 511], "1800": 85, "18000": [360, 379], "18010": 1054, "18016": 1052, "18020": 1056, "1804243": 378, "18052": 1053, "18094": 1056, "181": [294, 315, 390], "18108182014": 184, "18114": 1053, "18121": 1053, "18124": 1053, "18149": 1053, "18167": 1053, "18170": 1055, "18176": 1053, "18197458": 367, "182": [175, 272, 315, 390, 423, 1031], "18222": 1053, "18256": 1053, "18266": 1053, "18269": 1053, "18278": 1053, "18280": 1053, "18293": 1053, "18298": 1056, "183": [337, 349, 390, 1011, 1031, 1041], "18302": 1053, "18310": 1055, "18326": 1053, "18328": 1054, "18334": 1053, "18341": 1053, "18343": 1053, "18368": 1054, "18370": 1053, "18393": 1054, "18394": 1053, "184": [43, 69, 132, 218, 315, 390, 808, 1031], "18405": 1053, "18406": 1053, "18410": 1053, "18429": 1053, "18433": 1054, "18444": 1054, "18447": 1053, "18459": 1054, "1847": 46, "18482": 1055, "18488": 1057, "185": [88, 173, 184, 381, 390, 870, 871], "1850": [45, 379], "18508": 1053, "18510": 1053, "18525": 1053, "18527": 1053, "18528": 1053, "18543": 1054, "18545": 1053, "18555": 1059, "185654": 279, "185659": 207, "18595": 1053, "186": [218, 315, 390, 797, 1010], "18607": 1053, "18612": 1053, "18622": 1053, "18639": 1053, "18649": 1054, "1865": 47, "18682": 1053, "18689": 1058, "18691": 1053, "187": [141, 276, 390, 593, 1011, 1031, 1043], "1871": 1025, "18723": 1057, "18736": 1054, "1874": 1025, "18746": 1053, "1875": 990, "18768": 1053, "188": [173, 180, 204, 381, 390, 593], "1880": 390, "18805": 1056, "18815268": 259, "188153": 259, "18818427": 676, "18832": 1055, "18842": 1054, "18843": 1059, "18846": [379, 496, 497], "1887": 359, "18898": 1054, "189": [215, 218, 390, 910, 1023, 1031], "18925": 1054, "189267": 279, "18959": 1054, "189631": 207, "18964": 1054, "18975": 1055, "189830": 331, "18987": 1053, "19": [43, 52, 77, 180, 191, 196, 218, 222, 233, 239, 240, 266, 270, 321, 322, 337, 354, 359, 381, 382, 398, 402, 408, 409, 416, 424, 427, 452, 501, 525, 526, 527, 545, 549, 550, 556, 558, 559, 566, 567, 568, 569, 573, 574, 575, 591, 598, 616, 657, 667, 668, 675, 676, 677, 680, 681, 683, 685, 687, 696, 716, 790, 794, 808, 809, 823, 836, 841, 842, 844, 845, 859, 860, 879, 890, 911, 915, 918, 921, 922, 923, 924, 999, 1010, 1020, 1031, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1049, 1058], "190": [50, 150, 236, 285, 310, 379, 390, 507], "1900": 85, "19002": 1054, "19004": 1054, "19011": 1054, "19024": 1054, "19035": 1054, "1903908407869": 221, "19041": 1054, "19046": 1054, "19047631514961908949361222113": 52, "1905": [173, 381], "19052": 1054, "19055": 1054, "19069": 1054, "19075": 1056, "19085": 1055, "191": [210, 390, 1011, 1031], "19112072e": 200, "19126": 1053, "19145": 360, "19158": 1055, "19159": 1054, "19162": 1054, "19172": 1054, "19174891": 314, "19179": 1053, "19182": 1053, "19198": 1054, "192": [117, 150, 390, 1031, 1041], "19210": 1054, "19211": 1053, "19234": 1053, "19244": 1054, "19263": 1054, "19271": 1053, "19278": 1054, "192913": 279, "192938": 52, "19296": 1054, "19297": 1054, "193": [345, 390, 423, 724, 795, 1023, 1031], "19308": 1053, "1931": 113, "19310": 1054, "19317": 180, "19336": 1054, "193548": 236, "19356": 1054, "1936": 381, "19365": 1054, "19390": 1054, "19391": 1054, "193949": 279, "194": [251, 280, 315, 1031], "1940": 236, "19401": 1054, "19407": 1053, "19411": 1054, "19415": 1054, "19417": 1053, "194239": 390, "19426": 1054, "19428": 1054, "19438": 1055, "19459": 1054, "19472": 1054, "19473": 1054, "1948": 57, "19483": 1054, "19490": 1055, "19491": 1054, "19499": 1054, "195": [502, 503], "1950": [381, 1010], "1951": 236, "195133": 390, "19520": 1054, "19522393": 233, "19527": 1054, "19564": 1054, "19568": 1054, "19571": 1054, "19579": 1053, "1958": [180, 421, 423, 541], "19580": 1053, "196": [910, 1023], "1960": [636, 725], "19616": 1054, "19631": 1054, "1964": [699, 703, 889, 901, 1007], "19641": 1054, "19643": 1054, "19646": 1053, "19659": 1053, "19662693": [853, 854], "19664": 1057, "19669": 1054, "196795181": 52, "19680": 1055, "196861": 207, "19689": 1055, "197": [314, 1031], "19703": 1053, "1972": 381, "19721": 1053, "19727": 1053, "1973": [381, 414], "19731": 1060, "19732": 1053, "19733": 1054, "19734": 1054, "1974": [416, 424, 719], "19747": 1055, "1975": 1013, "19752": 1054, "19766": 1054, "197666": 279, "1977": 644, "1978": [236, 1006], "19784": 1054, "19788": 1054, "1979": [416, 734, 778], "19790": 1054, "19794": 1055, "19799": 1054, "198": 1041, "1980": 381, "19803308": 117, "1981": [236, 1006], "19829832": 233, "1983": [416, 740, 893], "19836": 1054, "1984": [113, 114, 418, 482, 921, 922, 1026], "19847": 1053, "1985": [191, 416, 714, 724, 795], "1986": [1000, 1026], "19869": 1054, "1987": [416, 616, 617, 801, 802], "198766": 279, "19879": 1054, "1988": 381, "19883": 1054, "19888": 1053, "1989": [285, 644, 797, 870, 871, 1006, 1013], "199": [656, 800, 1025], "1990": 379, "19906": 1054, "19908": 1054, "1990a": 414, "1991": [525, 526, 527], "19916": 1055, "1992": [173, 379, 381, 420, 423, 576, 577, 654, 1006], "19922": 1053, "19924": 1053, "1993": [173, 381, 482, 673, 694, 695, 1026], "19934": 1054, "19939": 1053, "1993apr6": 104, "1994": [173, 379, 381, 653], "19948": 1054, "1995": [173, 276, 381, 414, 423, 562, 563, 843, 910, 1011], "1996": [64, 154, 416, 423, 427, 452, 525, 526, 527, 564, 565, 1020], "1997": [139, 379, 421, 423, 544, 563, 699, 703, 1006, 1007, 1010], "1998": [154, 276, 379, 381, 421, 423, 564, 565, 843, 848, 879, 1011, 1012, 1014, 1020, 1024], "19982": 1053, "1999": [183, 379, 414, 416, 418, 421, 423, 445, 458, 465, 477, 482, 543, 550, 564, 565, 568, 569, 732, 907, 915, 916, 918, 919, 1016, 1022], "19th": 416, "1_": 1020, "1_000": [44, 64, 70, 83, 106, 129, 154, 175, 180, 182, 192, 249, 273, 354, 415, 546, 548, 710, 808, 831, 832, 840], "1d": [2, 139, 141, 188, 192, 219, 249, 298, 301, 310, 334, 353, 364, 384, 391, 393, 397, 398, 417, 422, 472, 475, 626, 639, 642, 662, 666, 669, 672, 693, 712, 721, 722, 728, 738, 739, 743, 747, 751, 792, 793, 796, 805, 855, 856, 857, 858, 859, 861, 863, 864, 865, 878, 930, 933, 935, 939, 940, 972, 996, 1011, 1031, 1041, 1046, 1047, 1048, 1050, 1054, 1055, 1059, 1060], "1e": [44, 45, 46, 49, 55, 63, 81, 124, 173, 175, 178, 180, 181, 182, 183, 184, 186, 191, 199, 211, 218, 219, 225, 232, 236, 241, 245, 251, 256, 261, 264, 267, 274, 284, 287, 314, 324, 329, 332, 340, 345, 347, 354, 358, 390, 428, 451, 455, 460, 467, 470, 479, 480, 486, 490, 491, 492, 540, 541, 542, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 568, 569, 570, 571, 601, 606, 615, 617, 618, 620, 622, 623, 624, 628, 629, 631, 632, 634, 636, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 662, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 698, 699, 700, 701, 702, 703, 704, 737, 794, 806, 807, 823, 848, 849, 850, 851, 852, 853, 854, 862, 870, 871, 878, 908, 909, 913, 914, 915, 916, 917, 918, 919, 995, 999, 1010, 1014, 1018, 1020, 1024, 1049, 1054, 1055, 1056], "1e0": [175, 251, 267, 284, 999], "1e1": [175, 181, 218, 251, 347], "1e15": 184, "1e2": [49, 175, 182, 251, 267, 347, 755, 1010], "1e3": [45, 46, 49, 175, 181, 186, 251, 287, 332, 999], "1e4": [287, 668, 688, 907, 1022], "1e5": [45, 180, 200, 202, 208, 287, 622, 623, 624, 628, 629, 631, 632, 634, 902, 907, 1022], "1e6": [47, 49, 211, 249, 334, 358, 360, 371, 545, 907, 1010, 1022], "1e7": 390, "1er": 424, "1f": [52, 58, 85, 88, 127, 199, 218, 249, 261, 263, 283, 326, 333, 359, 360], "1gb": 371, "1kastner": 1048, "1m": 975, "1mb": [372, 1046], "1mo": 180, "1nn": 381, "1or": 424, "1px": 315, "1qlettinn8oi": 358, "1st": [0, 43, 95, 120, 183, 219, 322, 891, 892], "1z": 424, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 164, 166, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 378, 379, 381, 382, 384, 386, 388, 389, 390, 391, 393, 396, 397, 398, 402, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 502, 505, 509, 510, 513, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 590, 591, 593, 594, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 714, 715, 716, 717, 720, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 772, 773, 776, 777, 778, 780, 782, 783, 784, 785, 787, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 926, 928, 935, 936, 937, 939, 940, 941, 945, 949, 955, 956, 957, 958, 959, 960, 961, 963, 964, 970, 971, 972, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1031, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1060], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 81, 82, 85, 89, 90, 96, 102, 111, 115, 122, 124, 131, 133, 140, 144, 147, 148, 151, 155, 159, 160, 162, 166, 168, 169, 170, 173, 181, 190, 192, 193, 201, 207, 208, 210, 214, 215, 217, 218, 219, 222, 227, 230, 231, 232, 233, 235, 241, 249, 255, 263, 265, 266, 270, 276, 277, 279, 280, 282, 287, 288, 291, 294, 297, 301, 302, 303, 304, 305, 308, 315, 321, 322, 323, 327, 328, 329, 330, 332, 336, 337, 340, 344, 346, 350, 352, 356, 359, 360, 364, 365, 377, 381, 382, 384, 389, 390, 402, 408, 409, 416, 423, 424, 449, 454, 455, 457, 472, 473, 477, 479, 480, 486, 496, 497, 498, 499, 501, 503, 505, 506, 509, 511, 513, 514, 520, 521, 524, 525, 532, 540, 545, 546, 551, 554, 555, 557, 561, 564, 565, 568, 569, 570, 571, 572, 578, 579, 591, 598, 599, 601, 603, 606, 608, 638, 639, 654, 658, 667, 675, 676, 677, 685, 687, 705, 713, 717, 722, 725, 734, 735, 748, 765, 766, 776, 801, 802, 806, 807, 808, 809, 823, 835, 836, 837, 840, 842, 845, 846, 847, 850, 851, 858, 859, 870, 871, 872, 873, 875, 877, 878, 886, 887, 888, 889, 894, 908, 909, 911, 912, 917, 920, 925, 931, 937, 939, 940, 943, 987, 999, 1006, 1010, 1013, 1016, 1017, 1020, 1023, 1031, 1033, 1034, 1036, 1037, 1039, 1041, 1047, 1050, 1053, 1055, 1056], "200": [69, 70, 79, 85, 89, 95, 109, 127, 140, 151, 158, 179, 204, 213, 219, 222, 223, 224, 230, 235, 239, 257, 261, 277, 283, 285, 286, 317, 320, 338, 346, 347, 365, 367, 379, 396, 421, 423, 428, 448, 462, 476, 479, 480, 531, 542, 543, 544, 547, 548, 549, 552, 556, 593, 658, 660, 680, 688, 701, 823, 870, 871, 911, 915, 916, 917, 918, 919, 931, 1025], "2000": [54, 63, 75, 85, 109, 125, 131, 196, 264, 267, 276, 294, 312, 330, 359, 379, 381, 416, 417, 423, 428, 460, 470, 542, 543, 568, 698, 700, 702, 752, 797, 806, 859, 889, 901, 1007, 1010, 1016, 1022, 1060], "20000": [57, 126], "200000": [236, 878], "20002": 1054, "2001": [2, 64, 180, 193, 270, 275, 413, 416, 423, 445, 459, 460, 461, 470, 520, 568, 569, 573, 574, 637, 643, 648, 654, 700, 705, 744, 797, 894, 906, 944, 1000, 1002, 1006, 1010, 1016, 1018, 1020, 1022, 1025], "2002": [98, 414, 416, 423, 445, 456, 602, 603, 735, 765, 860, 908, 1002, 1010], "20023": 1054, "2003": [2, 51, 180, 413, 416, 421, 424, 459, 460, 470, 522, 524, 698, 702, 848, 850, 1006, 1007, 1012, 1022, 1049], "20030": 1054, "20031": 1055, "2004": [44, 173, 276, 294, 379, 381, 416, 418, 421, 481, 544, 616, 617, 698, 702, 714, 752, 792, 909, 1004, 1006, 1007, 1012, 1025], "2005": [62, 64, 114, 381, 414, 445, 447, 862, 1006, 1013, 1023], "20056": 1054, "2006": [2, 50, 310, 379, 423, 426, 470, 507, 566, 567, 574, 575, 619, 620, 623, 628, 631, 658, 675, 676, 750, 797, 798, 806, 848, 906, 923, 924, 1006, 1010, 1012, 1015, 1022, 1023], "2007": [0, 73, 205, 379, 416, 425, 448, 460, 462, 468, 470, 575, 665, 700, 726, 743, 746, 767, 768, 804, 1002, 1006, 1008, 1010], "20072": 1054, "2008": [51, 418, 420, 421, 486, 543, 572, 599, 654, 673, 694, 695, 701, 725, 735, 765, 843, 848, 852, 869, 1004, 1007, 1008, 1010, 1011, 1012, 1015, 1016, 1025], "20087": 1054, "2009": [2, 138, 141, 142, 153, 203, 416, 420, 421, 423, 424, 528, 529, 537, 540, 546, 547, 549, 550, 553, 556, 562, 568, 569, 644, 680, 688, 705, 844, 921, 922, 956, 957, 1006, 1010, 1011, 1017, 1026], "200_000": [878, 1057], "200j": 166, "200m": 379, "200x": 1041, "201": [150, 173, 381, 593], "2010": [0, 112, 192, 281, 282, 413, 416, 418, 420, 421, 429, 483, 545, 713, 717, 728, 729, 749, 838, 870, 871, 1002, 1006, 1010, 1014, 1024, 1028, 1041], "2011": [0, 192, 390, 421, 424, 544, 547, 549, 550, 556, 599, 636, 647, 667, 739, 1000, 1014, 1024, 1028, 1041], "20117": 1054, "2012": [0, 114, 414, 423, 564, 565, 572, 648, 752, 999, 1003, 1010, 1028, 1041], "2013": [0, 196, 381, 416, 420, 421, 545, 735, 765, 1002, 1010, 1028, 1042, 1043], "2014": [0, 378, 410, 421, 423, 426, 539, 616, 617, 631, 632, 667, 701, 870, 871, 956, 957, 1007, 1014, 1034, 1044], "20145": 1055, "2015": [0, 192, 378, 717, 730, 732, 733, 870, 871, 1010, 1017, 1034, 1045, 1046], "201520": 207, "20155": 1054, "20159": 1054, "2016": [0, 243, 378, 416, 999, 1046, 1047], "20161": 1054, "20165": 1054, "2017": [0, 276, 378, 414, 416, 427, 452, 1010, 1047, 1048], "2018": [0, 218, 236, 424, 458, 999, 1010, 1034, 1048, 1049], "2019": [0, 192, 382, 416, 460, 470, 701, 1007, 1010, 1017, 1020, 1049, 1050, 1051], "2020": [0, 379, 1051, 1052, 1053, 1054], "20200": 1054, "20207": 1054, "20209": 1054, "2021": [0, 382, 384, 680, 1010, 1053, 1054], "2022": [0, 372, 416, 423, 714, 1020, 1055, 1056], "2023": [0, 396, 410, 414, 1056, 1057], "20231": 1054, "2024": [1058, 1059], "20240": 1054, "20250": 1054, "20272": 1054, "20297": 1054, "203": [88, 359], "20312": 1054, "203174": 207, "20326": 1054, "20331": 1056, "2034": [358, 379], "20380": 1054, "20385": 1054, "2039": 279, "204": [1018, 1023], "20408": 1055, "20415": 1056, "20416": 1054, "20431": 1054, "20477": 1054, "205": [291, 1031], "20512": 1054, "20515": 1054, "20521": 1054, "20524": 1057, "20526": 1054, "20528": 1054, "20531": 1054, "20534": 1054, "20552": 1054, "20554": 1054, "20560": 1054, "20567": 1055, "20583": 1054, "20597": 1054, "206": [344, 1031], "20617": 1056, "20619": 1054, "20638": 1054, "20640": [144, 187, 379, 498], "20652": 1054, "20653": 1055, "20657": 1054, "20673": 1054, "20683": 1054, "207": [315, 365, 1031, 1041], "2071716": [853, 854], "20727": 1054, "20729": 1054, "20752": 1054, "2075215": 233, "20753": 1055, "20761": 1054, "207667": 279, "2079": 281, "208": [173, 191, 297, 381, 1031], "20802": 1056, "20803": 1055, "20811": 1055, "20842": 1054, "20843": 1054, "20860": 1055, "20880": 1054, "208864": 207, "20899": 1054, "209": [249, 750, 889], "20904": 1054, "20959": 1054, "2096": 47, "20960": 1054, "20961": 1054, "20_000": 297, "20new": 379, "20newgroup": [66, 188, 197, 210, 234, 315, 497, 667, 839, 842, 1006, 1031], "20news_hom": 379, "20newsgroup": [233, 377, 1041], "20th": 717, "21": [43, 52, 107, 173, 191, 192, 207, 219, 236, 255, 266, 270, 297, 315, 319, 321, 332, 381, 382, 386, 388, 402, 413, 423, 424, 449, 453, 482, 486, 538, 541, 570, 571, 572, 578, 579, 597, 598, 600, 636, 678, 696, 763, 809, 823, 836, 879, 886, 888, 894, 911, 927, 956, 1002, 1006, 1010, 1011, 1020, 1031, 1037, 1039, 1041, 1042, 1044, 1048, 1049, 1051], "210": [217, 1031], "2100": [47, 85, 329], "2102": 553, "21020": 1056, "21026": 1055, "21032": 1055, "21038": 1055, "2107": 281, "21078": 1055, "21079": 1055, "2108": 47, "21080": 1054, "21086": 1055, "21093": 1054, "211": [281, 331, 339, 889, 901], "21109": 1055, "21114": 1055, "2112": 47, "211217613": 1049, "21130": 1054, "21145": 1054, "21148": 1055, "2117": 340, "21177": 1055, "21179": 1054, "21194": [81, 1054], "21195": 1054, "21199": 1054, "212": [150, 173, 281, 339, 381, 477, 509, 1016], "21219": 1055, "212197e": 236, "21243": 81, "21251": 1054, "2126": 255, "21271": 1054, "21278": 1055, "21295": 1054, "21298": 1055, "213": [77, 1031], "21301203": 178, "213056e": 236, "21310": 1055, "21316": 1055, "21330": 1055, "21334": 1055, "21336": 1054, "21340": 1054, "21341": 1055, "21351": 1054, "21389": 1054, "2139": [218, 236], "214": [153, 176, 234, 593, 1031], "21408": 1055, "21425": 1055, "21430": 1055, "21432": 1055, "21434": 1055, "21436": 1055, "21443888": 233, "21445": 1055, "21448": 1055, "21469": 1056, "21481": [1054, 1055], "21482": 1055, "21493": 1054, "215": 593, "21517": 1054, "21534": 1055, "21542": 1055, "21544347": 51, "21552": 1054, "21565": 1055, "2156660": 333, "21567": 1055, "21569": 1055, "21573": 1055, "21576": 1055, "21578": [47, 1054], "2159048": [662, 672, 693], "216": [112, 1023, 1031], "21606": 1055, "21616": 750, "21617": 1055, "21632": 1055, "21694": 1054, "217": [544, 550, 808], "21701": 1055, "21705": 1055, "2171": 46, "21713": 1055, "21724": 1055, "2173": [205, 665, 1006], "21735": 1055, "21741": 1054, "21762": 1055, "21767": 1055, "2179": 47, "218": [381, 479, 724, 795], "2180": 57, "21800": 1055, "21805": 1055, "21807": 1058, "21808": 1055, "21809": 1057, "21814": 1055, "21832": 1055, "21833": 1054, "21837": 1055, "21845": 1054, "21871": 1054, "21873": 1055, "21880": 1055, "21881": 1055, "21888": 1055, "218997": 207, "219": 275, "21901": 1055, "21915": 1054, "21917": 1054, "2192": [205, 665, 1006], "21938": 1056, "21954": 1055, "2198": 47, "21987": 1055, "21988": 1055, "2199": 47, "21991": 1054, "21998": 1055, "22": [43, 52, 77, 122, 142, 143, 154, 186, 187, 188, 191, 192, 193, 235, 243, 258, 266, 270, 299, 315, 317, 321, 325, 328, 331, 334, 337, 340, 360, 384, 389, 402, 413, 445, 456, 480, 486, 496, 497, 504, 505, 513, 524, 533, 540, 546, 551, 554, 555, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 603, 618, 636, 637, 641, 643, 654, 656, 660, 662, 664, 667, 668, 670, 672, 674, 678, 697, 701, 711, 713, 722, 766, 778, 787, 792, 793, 797, 809, 810, 814, 823, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 857, 859, 861, 863, 864, 865, 870, 871, 872, 874, 877, 893, 904, 913, 915, 916, 917, 918, 919, 921, 922, 923, 924, 951, 952, 1002, 1010, 1020, 1031, 1037, 1039, 1041, 1044, 1049, 1052, 1054], "220": [79, 107, 270, 1031, 1041], "2200": [85, 379, 502], "22002": 1055, "22014": 1056, "22015": 1055, "22016": 1055, "22027": 1055, "2203": 47, "2204": 47, "220446049250313e": [479, 480, 486, 659, 660, 663, 664, 665, 691, 692], "22050": 1054, "22054": 1056, "22058": 1055, "22059": 1055, "22062": 1055, "22063": 1055, "22064": 1055, "22065": 1055, "221": [117, 157, 270, 1044], "22106": 1055, "22108": 1055, "2211": 643, "22111": 1055, "22114": 1055, "22118": 1055, "22119": 1055, "22120": 1055, "22137": 1055, "22148": 1055, "22149": 1055, "22150": 1055, "22154": 1055, "22159": 1055, "22181": 1055, "22188": 1055, "22191": 1055, "22199": 1055, "222": [117, 157, 340, 1025], "22203": 1055, "22206": 1055, "22212": 1055, "22215": 1055, "22217": 1055, "22218": 1055, "2222": 665, "22223": 1055, "22235": 1055, "22237": 1055, "2224": 1043, "22240": 1055, "22248": 1055, "22249": 1055, "22254": 1055, "22255": 1055, "22268": 1056, "22269": 1056, "22284": 1055, "22288": 1055, "223": [117, 157, 173, 381], "22300": 1055, "22314355": 599, "22318": 1055, "22320": 1055, "2234": 47, "2235": 47, "22356": 1055, "22361": 381, "2237": 47, "22370": 1055, "223745": 218, "2238": 47, "224": [88, 117, 157, 416, 734, 831], "22409": 1057, "22410": 1055, "22412": 1055, "2243": 47, "22438": 396, "2245": 47, "2246": 236, "22476": 1055, "22486": 1055, "22493": 1055, "22498": 1055, "225": 423, "22504": 416, "22506": 1057, "22508": 1055, "22518": 1056, "22525": 1055, "22526": 1055, "22527": 1056, "22537": 1055, "22548": 1055, "22553": 1055, "22554": 1056, "22562": 1056, "22566": 1055, "22578": 1055, "225806": 236, "22595": 1055, "226": [416, 427, 452], "22604": 1055, "22606": 1060, "22629": 1056, "22635": 1055, "22665": 1056, "22685": 1055, "22687": 1055, "22692": 127, "22694": 1055, "22695": 1055, "22696": 1055, "22697": 1055, "227": [276, 416, 734], "22710": 1056, "22735": 1055, "22747343e": 113, "22775": 1055, "2278": 47, "22784907": 836, "2279": 47, "22806": 1055, "22808": 1055, "2281": 47, "2282": 47, "2283": 47, "22830": 1055, "2284": 192, "22856": 1055, "2286": 379, "22866": 1055, "22868": 1055, "2287": [47, 379], "2288": 379, "2289": 47, "22891": 1055, "22898": 1056, "22899": 1055, "229": 1010, "22908": 1055, "22913": 1055, "22950": 1055, "22953": 1055, "22965": 1056, "22968": 1056, "22982": 1055, "22993": 1056, "22nd": 447, "23": [43, 57, 63, 70, 85, 127, 156, 159, 173, 188, 218, 226, 243, 247, 255, 257, 259, 266, 270, 278, 315, 321, 325, 328, 329, 330, 332, 333, 337, 381, 390, 402, 423, 429, 439, 448, 455, 460, 462, 470, 473, 475, 476, 483, 486, 487, 488, 490, 491, 492, 498, 501, 509, 510, 511, 513, 514, 519, 521, 523, 531, 533, 547, 548, 549, 552, 556, 563, 565, 567, 569, 570, 571, 574, 577, 578, 579, 616, 617, 620, 636, 639, 641, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 684, 687, 688, 689, 690, 726, 739, 787, 839, 845, 846, 847, 856, 864, 871, 874, 886, 893, 901, 902, 911, 914, 916, 919, 922, 924, 937, 939, 940, 951, 952, 957, 1010, 1031, 1037, 1039, 1041, 1042, 1048, 1049, 1050, 1053], "230": 593, "2300": [85, 207], "23023": 1055, "23033": 1055, "23034": 1055, "23036": 1055, "23038": 1056, "23040": 1055, "23046": 1055, "23047": 1055, "23077": 1055, "23079": 1055, "23095": 1055, "23097": 1055, "23098": 1055, "23099": 1057, "231": [50, 309, 310, 379, 416, 427, 452, 507, 593, 1031], "23101": 1056, "23113": 1055, "23115": 1055, "23127": 1056, "23139": 1056, "23149": [379, 506, 1055], "23194": 1055, "23197": 1056, "23198": 1055, "232": [270, 1010], "23210": 1056, "23214": 1055, "2323": [698, 702, 1007], "23252": 1056, "23256": 1055, "23264": 1055, "23271": 1055, "23273": 1055, "23275": 1056, "23299": 1055, "233": [169, 1031], "2331": 43, "23317": 1058, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1055, "2336": 390, "23370": 1055, "23395": 1055, "233mb": 45, "234": [88, 128, 848, 852, 870, 871, 1012, 1031], "2341": 533, "23410": 1055, "234137": 207, "23442": 1056, "23446": 1056, "23461": 1056, "23470": 1056, "23471": 1055, "23480": 1056, "235": 323, "235430": 279, "23548": 1055, "2357juan": [1055, 1056, 1057], "23585": 1056, "23595": 1057, "23604": 1056, "23608": 1055, "23619": 1056, "23636": 1055, "23637": 1056, "23668876": [662, 672, 693], "236720": 207, "23683": 1056, "23689075": [662, 672, 693], "23726": 1056, "23731": 1057, "23734": 1056, "237703": 207, "23773583": 113, "23786125": 214, "23798": 1056, "23819": [1056, 1057], "23833": 1055, "23834": 1056, "23865": 1056, "23874": 1056, "238744": 207, "23877": 1056, "238955": 279, "239": 1041, "23905": 1056, "23935": 1056, "23977": 1056, "23990": 1055, "23993": 1056, "24": [43, 44, 52, 101, 154, 173, 188, 192, 196, 203, 270, 288, 297, 325, 326, 327, 329, 332, 333, 336, 337, 382, 384, 388, 402, 408, 409, 416, 423, 424, 445, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 468, 470, 472, 477, 478, 479, 480, 481, 482, 483, 484, 497, 498, 499, 501, 505, 513, 524, 525, 526, 527, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 590, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 622, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 707, 708, 709, 711, 717, 723, 736, 755, 762, 806, 807, 809, 812, 813, 823, 830, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 874, 876, 877, 878, 879, 882, 883, 885, 887, 888, 889, 890, 891, 893, 903, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 951, 952, 956, 984, 990, 999, 1017, 1020, 1031, 1037, 1039, 1041, 1049, 1050, 1051, 1052, 1054], "240": [43, 52, 79, 1018, 1041], "2400": 85, "24000": 529, "24015": 1055, "24017": 1055, "24027": 1057, "24051": 1056, "24058": 1056, "24075": 1056, "24076": 1057, "24083": 1057, "24084": 1056, "24087": 1055, "241": [423, 576, 577], "2410": 553, "24140": 1057, "24141": 1056, "24145": 1057, "24146": 1056, "24160": 331, "242": [173, 893, 1041], "24218": 1056, "24230": 1057, "24245": 1056, "24258": 1056, "24264": 1056, "24283": 1056, "243": [318, 593, 1031], "2431": 483, "24317": 1056, "24338": 1056, "24350": 1056, "24354": 1056, "24365": 1056, "243802": 313, "244": [270, 294, 593], "24404831511191221642141021252626109": 52, "24405": 1056, "2441": 236, "24412": 1056, "24421": 1056, "24433": 1056, "24446": 1055, "244466": 259, "24465": 1056, "2449": 390, "245": [1022, 1043], "24512": 1056, "24523": 1056, "24528": 1056, "24538": 1056, "24539": 1056, "24543": 1056, "24556": 1056, "24568": 1057, "245961": 151, "245mb": 360, "246": [203, 1018, 1041], "24617": 1056, "2463": 1006, "24630": 1056, "24631": 1055, "24637": 1056, "24640578": 113, "24645": 1056, "24667": 1056, "24668": 1057, "24677": 1057, "24683": 1056, "24688": 1056, "24699": 1056, "247": 893, "24714": 1056, "24747": 1056, "24750": 1056, "24755": 1056, "24767": 1056, "24769": 1057, "24838": 1058, "24849": 1056, "24855": 1056, "24856": 1056, "24871": 1057, "24873": 1056, "2487575": 196, "2487591": 196, "24882": 1057, "24889": 1056, "24894": 1056, "249": 270, "24935": 1057, "24951": 1056, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 77, 80, 89, 90, 113, 117, 121, 131, 133, 142, 151, 169, 170, 176, 186, 191, 199, 208, 222, 245, 263, 270, 276, 310, 312, 315, 317, 319, 323, 331, 336, 337, 358, 365, 367, 371, 390, 420, 423, 424, 427, 452, 485, 489, 510, 513, 530, 579, 606, 627, 687, 743, 805, 826, 839, 865, 883, 888, 890, 891, 894, 902, 903, 905, 906, 954, 958, 990, 1006, 1010, 1011, 1013, 1020, 1031, 1041, 1043, 1049, 1052], "250": [45, 49, 100, 151, 196, 238, 502, 701, 831, 999, 1022, 1048], "2500": 1010, "25000": 77, "2501": [173, 381], "25044": 1057, "250639": 207, "25067": 1056, "25077": 1056, "25080": 1056, "25089": 1056, "25093": 1057, "25094": 1056, "251": [66, 173, 240, 381, 1031], "25102": 1057, "25120": 1057, "25129": 1056, "25147": 1056, "25163598": 392, "25172": 1056, "25174": 1056, "25177": 1057, "25183501383331797": 284, "25186": 1057, "25188": 1056, "25190": 1057, "25193977": 1011, "25196": 1057, "252": [173, 240, 381, 543, 889, 901], "25209": 1057, "25214": 1057, "25220": 1057, "25232": 1057, "25250": 1056, "25251": 1057, "25257": 1057, "25274": 1056, "25275": 1058, "25291": 1057, "25291366": 367, "25294": 1057, "25295": 1056, "25296": 1056, "25297": 1057, "25299": 1057, "253": [150, 543], "25308": 1057, "25312": 1056, "25334": 1057, "25341": 1056, "253445": 151, "25349312e": 200, "2535": [477, 482], "25354": 1056, "2536": 484, "25363": 1056, "25367": 1057, "25370": 1056, "25387": 1057, "254": 358, "25402": 1057, "25417": 1057, "25432": 1057, "25438": 1057, "25443": 1057, "25477": 1056, "2548": 214, "25490": 1057, "25499205": 545, "255": [83, 105, 113, 127, 297, 314, 323, 329, 379, 423, 502, 503, 570, 571, 1031], "25500": 1056, "25506": 1057, "25511": 1056, "25531": 1057, "25563": 1056, "25570": 1056, "25587": 1057, "25589": 1056, "256": [77, 83, 88, 150, 212, 323, 372, 379, 416, 423, 457, 476, 546, 555, 572, 869, 901, 911, 1031, 1055], "25601": 1057, "25619": 1056, "25629": 1057, "25638": 1056, "25659": 1057, "25664": 1056, "25672": 1057, "25677": 1057, "2568": 1050, "25694": 1056, "25697": 1057, "257": [240, 274], "25704": 1056, "25713": 1057, "25719016": 1011, "25732": 1057, "25733": 1057, "25744": 1056, "25747": 1056, "25752": 1057, "25774": 1056, "25784": 1057, "2579": 701, "258": [240, 328, 1031], "25805": 1057, "25813": 1057, "25814": 1057, "25815": 1057, "259": [46, 50, 240, 310, 379, 423, 507, 576, 577, 1031], "259031": 207, "259297": 207, "25931": 1057, "25956": 1057, "25973": 1057, "25987": 1057, "25991": 1059, "25th": [43, 255, 891], "26": [43, 47, 81, 89, 113, 126, 127, 180, 191, 243, 254, 270, 289, 337, 390, 579, 657, 738, 792, 831, 889, 901, 957, 1010, 1020, 1031, 1041, 1044, 1045, 1053, 1059], "260": [275, 1054], "26019": 1057, "26021": 1057, "26033": 1057, "2605": 701, "26051493": 333, "26082": 1057, "26093": 1057, "261": [282, 1031], "26106": 1057, "26108": 1057, "26113448": 170, "26120": 1059, "26121": 1057, "26163": 1058, "26194": 1057, "262": [133, 1031, 1041], "26207": 1057, "26242": 1057, "26243": 1058, "26253567e": 113, "26264": 1057, "26267": 1058, "26278": 1058, "26286": 1057, "26286057": 233, "26289": 1057, "26299": 1058, "263": [271, 1031], "26315": 1058, "26316": 180, "26318": 1057, "26323": 1057, "263234": 259, "26323428": 259, "26325": 1057, "26333": 1057, "26337": 1057, "26362917": 233, "26366": 1058, "263758": [592, 596], "26376": 1057, "26385": 1057, "26386": 1057, "26386883": 178, "26391": 1058, "2640": 844, "26400": 1057, "26410": 1058, "26411": 1058, "26416": 1057, "26424": 1057, "26433": 1057, "26454": 1057, "26459": 1058, "26464": 1058, "26466": 1057, "265": [744, 848, 852, 1012], "26503": 1057, "26506": 1058, "26521": 1057, "2652124": 824, "26525": 1058, "26551": 1057, "26566": 1057, "26579": 1057, "26593496": 233, "266": [154, 204, 331, 1031], "26600": 1057, "26602": 1057, "26616": 1058, "26634": 1058, "26642044": 675, "26644": 1057, "26648": 1058, "26653": 1057, "26657": 1057, "2666": 1010, "2667": 507, "26674": 1058, "26683": 1058, "267": [263, 1031, 1041], "2671": 1020, "26721": 1058, "26734": 1058, "26736": 1058, "26744": 1058, "26748": 1057, "2675": 46, "26754": 1057, "26760": 1057, "26765": 1058, "267703": 89, "26772": 1057, "26786": 1058, "26789": 1058, "268": [249, 290], "26814": 1057, "268147": 279, "26828": 1058, "26830": 1058, "26831": 1058, "26837": 1059, "26840": 1058, "26855": 1058, "26862": 1058, "26893": 1057, "26896": 1058, "269": [262, 520], "26903": 1057, "26909": 1058, "26913": 1057, "2692": 1020, "26931": 1057, "26934744": 134, "26940": 1057, "26944": 1058, "26957": 1058, "26th": [416, 735, 765, 1010], "27": [43, 45, 47, 52, 57, 67, 82, 89, 127, 255, 270, 336, 337, 355, 381, 416, 424, 526, 533, 614, 722, 797, 798, 894, 914, 1010, 1020, 1041, 1043], "270": [54, 203, 337], "27000": 236, "27002": 1057, "27005": 1058, "27006": 1058, "27017": 1058, "27018": 1058, "27044": 1057, "27054655": 233, "27058": 1058, "27096": 1060, "27098": 1058, "27100": 1058, "27104": 1058, "27110": 1058, "27137": 1058, "27139": 1058, "2714": 255, "271411": 259, "27161": 1058, "27161955": 170, "27166": 1058, "27167": 1057, "27179": 1058, "27185": 1058, "27204": 1058, "27219": 1058, "272214": 593, "27239": 1058, "27240": 1058, "27243": 1057, "27250": 1058, "27252": 1058, "2727": 567, "27274": 1058, "27277": 1058, "27291": 1058, "27292": 1057, "27301": 1058, "27308": 1058, "27309": 1058, "27311": 1057, "27314": 1058, "27315": 1058, "27328": 1058, "27336": 1058, "2734": 390, "27344": 1059, "27372": 1058, "27381": 1060, "27389": 1058, "274": [121, 520, 1031], "27417": 1058, "27431": 1058, "27438": 1058, "27456": 1059, "27468": 1057, "27478": 1058, "27490": 1058, "27491": 1059, "27499706": 51, "275": [43, 337, 1044], "27500": 1058, "27526": 1059, "27538": 1058, "27544": 1058, "27556": 1058, "27558": 1058, "27560": 1059, "27566": 1059, "275706": 89, "27573": 1057, "27576": 1059, "27577": 1058, "27580": 1057, "27583": 1057, "27584": 1059, "275851": 259, "2759": [905, 906], "27597342": 117, "276": 276, "27601": 1058, "27614": 1058, "27624": 1058, "2763": [429, 483], "27636": 1059, "27639": 1058, "27645": 1058, "27650": 1058, "27651": 1058, "27657": 1059, "27668": 1058, "27670": 1058, "27675": 1058, "27678": 1058, "277": [1018, 1043], "27700": 1059, "27702": 1058, "27710": 1058, "27718": 1058, "27720": 1058, "27721": 1058, "27734": 1058, "27736": 1060, "27757": 1058, "27760": 1058, "27772182": 52, "277mb": 358, "278": [381, 853, 854], "2780": 390, "27800": 1059, "27801": 1058, "27817": 1058, "27821": 1058, "27828": 1058, "27834": 1058, "27835": 1058, "27841": 1058, "27844": 1059, "27865": 1058, "27875": 1060, "27898": 1058, "27899": 1058, "279": [73, 80, 184, 229, 1006, 1031], "27904": 1059, "27937": 1059, "27966": 1060, "27979": 1058, "27990": 1059, "28": [43, 47, 101, 151, 173, 191, 234, 270, 277, 285, 290, 314, 336, 337, 381, 390, 416, 420, 458, 465, 1020, 1031, 1041, 1044, 1047], "280": 337, "28009951": 836, "2802": 57, "28040": 1059, "28048": 1058, "28051": 1059, "28053": 1059, "28064": 1060, "28074": 1058, "28085": 1059, "28090": 1058, "28092": 1059, "28095": 1058, "28096": 1060, "28102": 1059, "28106": 1060, "28111": 1058, "28121": 1058, "28136": 1059, "28160": 1059, "28165": 1058, "28167": 1058, "28179": 1060, "2818": 478, "28184": 1058, "28187": 1059, "28188": 1058, "28191": 1058, "28195": 1058, "28198": 1058, "282": 1041, "28205": 1059, "28207552": 233, "28210": 1059, "28222": 1058, "28225276": 88, "2823": 340, "28233": 1058, "28235": 1058, "28240": 1058, "28241": 1058, "28247": 1058, "2825": 0, "28256": 1058, "28261": 1059, "28262": 1058, "28263": 1058, "28268": 1060, "28295": 1058, "283": [216, 1031], "2830": 0, "28306": 1059, "28327": 1058, "2833": 390, "28351": 1059, "28352": 1059, "28360": 1059, "28365": 1058, "28377": 1058, "28385": 1058, "28399": 1059, "284": 658, "28407": 1059, "28425": 1059, "284315": 270, "28432": 1059, "28435": 1059, "2846": [151, 319], "28471": 1059, "284806": 270, "284807": 270, "28483": 1059, "28491": 1059, "28494": 1060, "28498": 1059, "285": [259, 337, 733], "28521": 1059, "28552": 1059, "28557": 1059, "28582": 1059, "286": 423, "28604": 1059, "28612": 1059, "28622": 1060, "28651": 1059, "28664": 1059, "28670": 1059, "28692": 1059, "287": [192, 1022], "28701": 1060, "28703": 1059, "28712": 1059, "28718": 1059, "28722": 1059, "28756": 1059, "28763": 1059, "28768": 1059, "28773": 1060, "2879": 1048, "288": [54, 544, 550], "28808734": 222, "28822": 1059, "28823": 1059, "28843": 1059, "28847": 1059, "289": 191, "28915": 1059, "28925": 1059, "28934": 1060, "28936": 1060, "28951": 1059, "28975": [1054, 1060], "28988": 1059, "28992": 1060, "28x28": 314, "29": [114, 122, 176, 180, 209, 218, 222, 235, 270, 331, 337, 381, 423, 568, 569, 699, 703, 790, 806, 865, 1006, 1007, 1024], "290": [337, 697, 698, 702, 1007], "290075": 207, "29014": 1060, "29018": 1059, "290584": 313, "29067": 1060, "29078": 1059, "291": [173, 359, 379, 381, 1031], "29105": 1060, "29112": 1060, "29119": 1059, "29124": 1060, "29128": 1060, "29135": 1060, "29136": 1060, "2914": 503, "29141": 1060, "29142": 1060, "29143": 1060, "29144": 1060, "29158": 1060, "29179": 1059, "292": [402, 423, 744], "29207": 1060, "29210": 1060, "29212": 1060, "29227": 1060, "29235": 1059, "29239": 1060, "29260": 1060, "29265": 1060, "29266": 1060, "29267": 1060, "29269": 1059, "2928359": 233, "293": 249, "29300": 1060, "29312": 1060, "29314": 1059, "29316": 180, "29327": 1059, "29329": 1060, "29330": 1059, "29336": 1059, "29354": 1060, "29389": 1060, "2939931": 333, "29400": 1060, "29401": 1059, "29402": 1060, "29404": 1060, "29419": 1060, "29433": 1060, "29442": 1060, "29462": 1060, "29473397": [853, 854], "29475": 1060, "295040e": 236, "29540": 1060, "29545": 1059, "295505e": 236, "296": 1022, "2961": 660, "29612": 1059, "29639": 1060, "296575": 207, "29677": 1060, "29694": 1059, "29696": 1060, "297": [168, 379, 1031], "29709": 1060, "29710": 1060, "29738": 1060, "29751": 1060, "29780": 1059, "298": [183, 238, 1018, 1031], "29835": 1060, "29842": 1060, "298688": 276, "29869": 1060, "29880": 1060, "29884": 1060, "29898468": 233, "299": [139, 359, 689], "299546e": 236, "2_": 1002, "2_000": 138, "2_2": [655, 656, 661, 662, 663, 664, 665, 669, 670, 671, 672, 681, 690, 691, 692, 693], "2_f": 661, "2_fro": [662, 671, 672, 693], "2_poli": 276, "2_y": 1012, "2c": [652, 661, 681, 682, 683, 684, 696, 1002], "2d": [2, 43, 69, 71, 74, 79, 82, 83, 84, 88, 96, 97, 120, 123, 125, 128, 134, 157, 188, 212, 219, 224, 238, 239, 240, 243, 245, 248, 249, 306, 336, 337, 344, 347, 366, 378, 380, 384, 393, 398, 416, 417, 421, 424, 426, 449, 460, 470, 472, 475, 489, 496, 498, 499, 501, 502, 503, 509, 510, 511, 513, 519, 523, 542, 550, 558, 593, 595, 644, 652, 666, 681, 700, 747, 788, 834, 838, 842, 880, 930, 933, 935, 939, 940, 956, 972, 995, 996, 1004, 1006, 1007, 1010, 1017, 1021, 1026, 1031, 1041, 1045, 1048, 1049, 1050, 1053, 1055, 1059], "2e": [204, 291], "2e6": 1010, "2ec5ac": 321, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 81, 85, 87, 97, 99, 102, 117, 122, 127, 133, 151, 154, 158, 159, 168, 191, 192, 196, 199, 207, 209, 214, 218, 233, 234, 235, 236, 245, 249, 255, 270, 275, 279, 280, 282, 284, 285, 286, 290, 305, 306, 312, 319, 322, 330, 334, 347, 358, 359, 367, 417, 420, 423, 705, 837, 840], "2fbf01908075": 714, "2fx": 264, "2g": [240, 243, 706, 1052], "2h": 422, "2k": 186, "2l": [426, 631], "2n": [705, 1002, 1014], "2n_": 1006, "2nd": [95, 120, 183, 322, 416, 427, 452, 539, 1020, 1056], "2x": 1041, "2x2": [344, 416, 763], "2x_iy_im": 379, "31": [43, 47, 52, 104, 112, 236, 270, 302, 329, 336, 337, 413, 424, 509, 570, 571, 606, 658, 680, 688, 974, 1011, 1041], "3109306": 178, "311": 359, "312": [154, 1044], "3121": 717, "313276e": 236, "315": [297, 359, 381], "316": [59, 180, 184, 620, 623, 634, 889, 1031], "31622776601683794": 164, "3164764": [218, 236], "317": [61, 180, 1031], "31760": 1006, "318": [255, 332, 458, 1031], "318387": 313, "319": [176, 289, 1031], "31958": 180, "31973683": 233, "31bit": 1052, "31st": [219, 892], "32": [43, 44, 52, 86, 122, 190, 193, 254, 290, 330, 337, 378, 382, 389, 398, 413, 423, 424, 453, 573, 574, 591, 598, 643, 685, 892, 894, 939, 940, 974, 1018, 1020, 1041, 1044, 1047, 1049, 1050, 1053, 1054, 1055, 1058], "320": [379, 999, 1024, 1041], "3204": 1047, "321": 121, "321301": 62, "322": [45, 121, 193, 336, 359, 479, 480, 1031], "3221": [701, 1007], "323": [121, 249], "323200": 62, "324": [121, 379], "324084": 207, "3245": [701, 1007], "325": [121, 148, 1031], "325198e": 236, "3252": 606, "326": [102, 121, 246, 1031], "32634568": 222, "3264": 46, "327": [63, 739], "3272984419327777": 362, "3273": 755, "327407": 259, "327605": 259, "32767": 1052, "32782448": 178, "3279": 46, "328": [262, 359, 739, 1031], "3288": 553, "329": 458, "329616": 207, "32987858": 574, "32bit": [2, 371, 974, 1059], "32x32": 381, "33": [43, 113, 218, 331, 337, 366, 379, 381, 389, 390, 416, 424, 469, 541, 646, 657, 721, 722, 738, 739, 747, 752, 792, 793, 796, 815, 837, 839, 841, 900, 924, 991, 1006, 1010, 1020, 1041, 1049], "330": 337, "331263": 207, "3315057": [835, 836], "3317": 218, "332": [142, 359, 901, 1031], "333": [125, 240, 855, 1031], "3333": 507, "333333": 236, "33333333": [863, 1020], "334": [178, 277], "334795": 279, "335": 43, "335919": 313, "336": [154, 390, 1020], "336188": 313, "3367": 1048, "337": [151, 390, 1031], "3375": 331, "338": 255, "3383": 46, "3384": 359, "3387": 359, "339": [161, 347, 359, 1031], "3397": [673, 694, 695], "33rd": [910, 1023], "34": [43, 151, 173, 175, 302, 315, 336, 337, 366, 381, 420, 529, 538, 579, 606, 658, 676, 725, 773, 1041], "340": [251, 336], "341": [340, 1031], "34118": 379, "34125758": 233, "3415": [673, 694, 695], "341523": 313, "3419": 279, "341949": 207, "342": 831, "34279478": 233, "343": [277, 1031], "3433": 46, "34346583": 88, "3445": 46, "345": [173, 381], "34545455": 1006, "3456": 46, "34586917": 233, "346": [423, 510, 564, 565], "3467": 624, "347717": 151, "348": [126, 1031], "34867495": 1011, "349": [138, 223, 359, 390, 562, 1031], "34990341": 117, "35": [43, 45, 46, 48, 50, 90, 105, 140, 161, 191, 192, 198, 205, 245, 294, 322, 336, 337, 553, 657, 658, 665, 711, 715, 716, 736, 750, 765, 791, 798, 846, 999, 1006, 1010, 1016, 1017, 1020, 1041, 1043], "350": 191, "351390": 276, "352": [81, 276, 390, 1031], "352124": 207, "35278655": 233, "3534": 57, "3539": 104, "354394": 151, "3551": 46, "355440": 276, "355445": 151, "356": [57, 124, 1018, 1031], "356497": 151, "3565178": 974, "357": [173, 359, 381, 509, 914], "3573": 836, "35776189065725783": 327, "3582": 46, "358295": 207, "358990": 207, "359": [192, 1031], "3591": 1050, "36": [43, 45, 46, 52, 53, 126, 173, 181, 191, 236, 255, 350, 366, 381, 390, 423, 424, 564, 565, 579, 744, 768, 1010, 1041], "360": [138, 562], "360000": 313, "36047253": 233, "361": [379, 423, 564, 565], "362176": 331, "363": [52, 87, 1031], "3635": 836, "364": [479, 480, 1042], "365": [359, 418, 481], "3659": 1046, "366": 366, "367": [173, 359, 423, 1031, 1041], "36787944": 1008, "3680": [620, 623, 634], "3684": 844, "36851234": 825, "368896": 62, "3690483151908911912247722318110": 52, "3696": 622, "3697": 859, "3697178": 52, "37": [43, 203, 279, 290, 336, 366, 379, 423, 533, 725, 893, 904, 1020, 1041], "370000e": 236, "370039": 207, "370738": 62, "372": 359, "37257991": 117, "373333": 279, "375": [88, 457, 759, 1010], "376": 1018, "37647423": 52, "376999": 62, "37741762": 134, "377eb8": [75, 79, 97, 98, 245], "378": [134, 191, 359, 423, 1031, 1041], "37815029": 233, "37845099": 367, "37967282": 1011, "379710": 191, "379763": 151, "38": [122, 192, 209, 217, 222, 269, 284, 285, 302, 332, 423, 641, 894, 956, 1010, 1020, 1041, 1042, 1043], "3800": 207, "3803": 360, "381": [283, 1031], "381327": 379, "382": [70, 98, 294, 1031], "382005": 151, "382120e": 236, "38353048": 233, "383973": 279, "384": [359, 705, 914], "3840": 1049, "384338": 207, "384616559": 393, "385000e": 236, "3854": [673, 674], "3855": 1030, "386": [350, 889, 1031], "3862": 877, "38629436": 1020, "38690531511642143152471231333333107": 52, "387": [359, 1041], "387580e": 236, "387599": 52, "387830e": 236, "388": [68, 1031], "3889": 483, "3889873516666431": 52, "389": [602, 603], "3894": 624, "39": [43, 52, 173, 259, 270, 379, 381, 382, 388, 416, 424, 504, 904, 922, 958, 1031], "3908844": 836, "391": 705, "3910350737": 393, "3911": 47, "3928": 478, "393": [157, 1031], "393297": 259, "39329747": 259, "394": [104, 184], "3947": 1022, "395": [43, 111, 1031], "39568399": 545, "396": [104, 173, 381], "3964": [429, 483], "397": [109, 379, 1031], "3972": 664, "398": [359, 656], "3986": 236, "3996": 660, "3_": 1002, "3_poli": 276, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 378, "3d": [80, 83, 102, 120, 130, 215, 238, 240, 242, 366, 424, 515, 595, 930, 972, 1048, 1049, 1051], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 82, 83, 84, 93, 105, 107, 109, 118, 138, 145, 146, 154, 169, 173, 175, 176, 177, 179, 184, 190, 192, 193, 199, 203, 204, 210, 218, 220, 224, 233, 234, 236, 239, 249, 251, 274, 276, 277, 279, 282, 284, 287, 297, 312, 334, 340, 358, 359, 360, 831, 838, 1018], "3k": 705, "3l": 426, "3llobo": 1056, "3m": 51, "3rd": [120, 183, 848, 891, 1012, 1020], "3ssnporch": 148, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 97, 99, 100, 101, 105, 106, 107, 108, 114, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 133, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 164, 169, 173, 175, 178, 180, 181, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 222, 224, 225, 226, 228, 231, 232, 236, 238, 245, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261, 262, 263, 264, 266, 267, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 283, 284, 285, 287, 288, 290, 291, 296, 297, 299, 301, 302, 303, 304, 307, 312, 314, 315, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 331, 332, 334, 336, 337, 338, 339, 340, 344, 346, 350, 351, 352, 354, 355, 356, 358, 359, 360, 366, 367, 372, 378, 379, 381, 382, 384, 388, 389, 390, 393, 396, 397, 398, 402, 407, 408, 409, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 499, 505, 513, 521, 522, 525, 526, 527, 533, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 590, 591, 592, 594, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 623, 626, 627, 628, 631, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 686, 688, 689, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 707, 708, 711, 715, 716, 724, 725, 734, 735, 736, 741, 743, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 765, 777, 778, 790, 791, 797, 798, 799, 800, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 839, 841, 842, 843, 844, 847, 848, 849, 850, 852, 857, 861, 862, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 900, 901, 905, 906, 907, 911, 913, 914, 917, 921, 922, 923, 924, 935, 936, 938, 939, 940, 941, 945, 956, 957, 958, 959, 961, 963, 964, 965, 966, 973, 980, 981, 982, 984, 985, 986, 987, 990, 991, 992, 999, 1000, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1020, 1021, 1024, 1025, 1031, 1037, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1054, 1055, 1056, 1059], "40": [43, 54, 89, 101, 111, 120, 124, 155, 161, 175, 203, 209, 210, 212, 235, 240, 242, 253, 255, 265, 277, 303, 309, 314, 319, 336, 337, 345, 346, 348, 350, 352, 353, 366, 372, 379, 420, 454, 504, 526, 527, 808, 853, 854, 858, 870, 871, 999, 1011, 1020, 1041, 1042], "400": [44, 63, 85, 124, 153, 158, 175, 187, 224, 243, 288, 313, 359, 379, 421, 504], "4000": [94, 153, 264], "400000e": 236, "4017": 533, "4018260": 333, "402": 280, "402344": 390, "4025": 1046, "40264829": 333, "403": 280, "404": 236, "40597": 296, "406": [192, 351, 698, 702, 1007, 1031], "4066": 46, "407": [173, 359, 381], "408": 359, "40842387": 51, "40887718": 92, "40945": 105, "4096": [124, 379, 421, 504], "40966": 378, "409717": 279, "41": [52, 173, 218, 255, 366, 379, 381, 465, 477, 489, 501, 630, 633, 644, 655, 656, 661, 667, 669, 670, 671, 673, 690, 694, 695, 708, 790, 848, 1012, 1016], "410": [236, 1031], "41075698": 422, "41076071": 422, "41082": 44, "411": [191, 340, 418, 428, 481, 542], "4110": 484, "41187": 180, "412": [48, 180, 284, 505, 1006, 1031], "412021": 151, "41214": [218, 236], "41215": 236, "412304": 207, "414": [236, 417, 735, 765, 889, 901, 1010], "41421356": [772, 778, 1013], "4143": 396, "414810": 259, "414912": 154, "415": 359, "416": [748, 1010], "416010": 331, "41666667": 759, "41691605": 134, "417": 296, "41726413": 134, "418": [256, 301, 1031], "41888636": 671, "419": [358, 625], "4194": 381, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 67, 79, 81, 91, 111, 117, 126, 131, 138, 145, 146, 148, 149, 151, 152, 154, 155, 159, 169, 170, 187, 191, 193, 194, 196, 198, 207, 210, 212, 213, 220, 224, 225, 226, 232, 233, 235, 238, 239, 240, 245, 250, 251, 252, 255, 258, 270, 275, 277, 280, 290, 297, 303, 304, 305, 312, 317, 318, 319, 320, 322, 324, 326, 328, 330, 339, 345, 347, 358, 359, 367, 372, 389, 390, 398, 407, 416, 420, 423, 424, 427, 445, 452, 486, 496, 501, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 536, 538, 540, 546, 553, 554, 555, 566, 567, 574, 575, 576, 577, 579, 614, 615, 616, 617, 618, 686, 703, 704, 705, 769, 801, 802, 806, 808, 811, 831, 837, 839, 853, 854, 858, 862, 865, 905, 906, 908, 909, 910, 920, 923, 924, 931, 942, 956, 974, 978, 1013, 1020, 1037, 1038, 1041], "420": [232, 362, 1031], "42074": 323, "421": [735, 765, 1010], "421087": 279, "42165": 148, "422": [63, 602, 603, 735, 765, 1010, 1031], "4226193151": 52, "423": [89, 1031], "4232": [43, 52], "423641": 207, "424": [236, 249, 1031], "4242": [43, 52], "42425183539869415": 327, "425": [115, 239, 624, 1031], "4254": [173, 381], "4260": [758, 761], "427": [173, 192, 381, 515, 516, 592, 593, 596], "427329": 259, "428": [199, 1031], "4285714285714286": 1010, "429": [294, 359], "4294": 1047, "43": [52, 173, 182, 215, 249, 255, 276, 297, 381, 389, 809, 823, 894, 1031], "430": [428, 542], "431": [359, 381], "4310090": 778, "432": [276, 418], "4325": 57, "433": [270, 381], "43348936": 233, "4337": 1006, "43475": 887, "436": [249, 299, 1031], "4362": 1046, "437": [278, 1031], "437362": 207, "438": [191, 1018], "43847489": 134, "43873": 360, "4387766": 52, "4394": 1049, "44": [43, 180, 191, 192, 203, 294, 301, 487, 790, 894, 914, 917, 992, 1010, 1017, 1041], "440": 191, "44004651": 333, "440409": 207, "4406": 481, "44063": 52, "4409": [43, 52], "441": [83, 1031], "44139186": 314, "4415": 57, "442": [108, 173, 183, 187, 381, 510, 1031], "4425765": [662, 672, 693], "443": [190, 360, 1031], "44300751539296973": 52, "44300752": 52, "443238": 279, "44373091": 1011, "44381023": 222, "44412786": 545, "445": [270, 1018], "445978": 207, "446": [359, 735, 765, 1010], "447268": 89, "4472869": 134, "4474": 390, "4478": 1046, "448": [101, 127, 297, 1031], "4486": 553, "449": [44, 421, 544], "4496": [43, 52], "4497": 1030, "45": [75, 99, 106, 107, 117, 154, 169, 180, 193, 207, 218, 236, 283, 287, 288, 337, 347, 420, 423, 424, 573, 574, 636, 643, 655, 656, 661, 669, 670, 671, 690, 691, 692, 797, 806, 917, 1000, 1010, 1018, 1028, 1031, 1037, 1041, 1044], "4500": 233, "45070924": 675, "451": 655, "45192": 164, "451933": 89, "452": [54, 179, 181, 353, 1031], "453": 366, "454": 184, "4544": 43, "455": 323, "4550": 378, "456": [44, 421, 544], "45612256": 669, "45663524": 669, "457": 624, "4576": 844, "458": [219, 281, 1031], "458333315172": 52, "459": [416, 450], "459074": 259, "46": [43, 52, 77, 88, 122, 218, 255, 367, 390, 602, 603, 691, 692, 725, 831, 917, 922, 1020, 1037], "46033": 505, "46043": 505, "46081961": 1011, "461": [317, 390, 1031], "462": [100, 1031], "462234": 259, "463": [236, 294], "463088": 52, "46428631511221642143151251232633109": 52, "465660": 62, "465730": 207, "466": 1017, "4666": 643, "46779927": 51, "468": 93, "46858513287221654": 332, "46874778": [662, 672, 693], "469": 93, "46915237": [662, 672, 693], "4694": 533, "469474": 207, "46958558": 670, "4697": 82, "47": [43, 214, 379, 502, 503, 544, 550], "471": 381, "47140": 416, "47236": [379, 506], "47330339": 424, "4738": 1046, "475": 138, "47668": 360, "478522": 207, "47885": 360, "4792": 236, "47922861": 259, "479229": 259, "47928": 360, "4794": 207, "4795": 207, "4796": 207, "4798": 207, "47985": 505, "47987268e": 200, "4799": 207, "48": [43, 52, 80, 117, 130, 154, 180, 259, 323, 381, 390, 416, 519, 606, 708, 755, 837, 848, 999, 1012, 1020, 1037], "480": [203, 359], "4801": 207, "4802": 207, "4803": 207, "4804": 207, "4805": 207, "4806": 207, "4807": 207, "4809": [207, 279], "481": [139, 359, 1031], "4810": 207, "4812": 46, "4815": 207, "482": [114, 159, 176, 1031], "48204257": 1011, "4828": 207, "483": [323, 657, 1031], "4830": 207, "4831": [207, 664], "4832": 207, "4836": 207, "484": 184, "4841": 207, "484109": 207, "4846": 207, "485": 705, "4852": 207, "4855": 207, "4857596147013469": 95, "486": [118, 220, 1031], "4860": 207, "4866": 207, "4867": 207, "4869": 207, "487": [52, 58, 733, 1031], "4872": 207, "48736655": 676, "4874": 207, "4876": 207, "4880": 207, "4881": [207, 1046], "48841": 505, "48842": 505, "4885": 207, "48858": 390, "4888": 207, "4891": 207, "48938813e": 200, "4894": 207, "48979592": 457, "4898431": [379, 501], "49": [43, 173, 222, 255, 378, 379, 381, 389, 416, 458, 465, 722, 735, 765, 773, 802, 806, 809, 894, 1010, 1020, 1044], "490": [146, 194, 270, 1031], "491": 705, "492": [270, 652, 1003], "4923": 658, "4928": 207, "493": [652, 913, 1003], "4936": 207, "4939": 1048, "494021": 501, "4948": 46, "4951": 662, "495761": 390, "49665188": 222, "4967": 533, "4976": 606, "498": 251, "498mb": 358, "499": [173, 186, 203, 381, 390, 1031], "4995": 1047, "49999993": 1006, "4daf4a": [79, 97], "4dbd33": 122, "4e": 239, "4e9a06": [94, 99], "4eacc5": [94, 99], "4f": [46, 47, 57, 141, 150, 152, 233, 234, 236, 322, 920], "4i": 85, "4th": [173, 183, 381], "4x": [390, 1056, 1060], "4x11": 301, "4x4": [381, 421, 424], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 104, 105, 107, 108, 109, 112, 113, 114, 115, 117, 118, 122, 124, 125, 126, 127, 128, 130, 131, 133, 136, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 218, 219, 220, 221, 224, 226, 229, 230, 231, 232, 233, 234, 236, 239, 240, 241, 243, 245, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 306, 307, 309, 310, 312, 313, 314, 315, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 340, 341, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 379, 381, 382, 384, 388, 389, 390, 392, 396, 397, 398, 402, 408, 409, 410, 414, 415, 416, 417, 420, 421, 423, 424, 425, 426, 427, 428, 431, 445, 446, 447, 448, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 477, 480, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 537, 540, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 561, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 591, 601, 602, 603, 606, 611, 613, 614, 615, 616, 617, 619, 622, 623, 624, 625, 628, 629, 631, 632, 634, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 650, 652, 655, 656, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 697, 698, 700, 701, 702, 704, 705, 706, 708, 712, 714, 716, 718, 721, 722, 727, 729, 730, 731, 732, 733, 735, 736, 737, 739, 741, 744, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 778, 779, 787, 790, 791, 793, 794, 796, 797, 798, 799, 800, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 907, 913, 914, 915, 916, 917, 918, 919, 921, 923, 931, 935, 936, 939, 940, 944, 945, 955, 956, 957, 958, 959, 961, 963, 964, 972, 973, 978, 980, 981, 984, 985, 986, 987, 988, 989, 990, 999, 1000, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1031, 1032, 1036, 1037, 1039, 1042, 1043, 1044, 1046, 1048, 1049, 1051, 1055, 1056, 1057, 1060], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 85, 87, 94, 95, 100, 101, 104, 105, 117, 122, 124, 127, 133, 138, 141, 144, 151, 154, 157, 158, 173, 176, 178, 179, 180, 181, 190, 191, 192, 199, 203, 213, 218, 221, 225, 226, 230, 232, 234, 236, 238, 242, 243, 248, 249, 251, 259, 270, 271, 276, 278, 279, 289, 297, 315, 317, 321, 328, 330, 337, 339, 341, 345, 353, 359, 379, 381, 384, 389, 404, 420, 423, 424, 425, 428, 450, 481, 487, 488, 509, 513, 530, 532, 535, 542, 548, 553, 562, 563, 578, 602, 603, 615, 617, 618, 624, 626, 667, 668, 675, 676, 677, 679, 685, 686, 687, 701, 722, 801, 809, 823, 842, 862, 913, 922, 1005, 1006, 1010, 1011, 1013, 1016, 1020, 1033, 1041, 1058], "500": [49, 79, 85, 92, 95, 96, 98, 117, 118, 131, 133, 142, 144, 152, 172, 175, 196, 231, 232, 239, 256, 257, 261, 262, 266, 270, 276, 279, 289, 290, 297, 303, 309, 321, 327, 332, 333, 351, 356, 371, 423, 429, 477, 478, 482, 483, 484, 489, 490, 491, 492, 620, 622, 623, 625, 630, 633, 634, 659, 660, 663, 664, 665, 689, 691, 692, 871, 999, 1025, 1031], "5000": [91, 204, 233, 234, 236, 328, 894], "50000": 61, "500000": 313, "5000000": 55, "50000000": 178, "50000013": 1006, "500526": 154, "500x500": 550, "5012": 1047, "5016": [418, 429, 483], "5029": [418, 429, 483], "503452": 313, "5036": 1048, "504185": 313, "50447799": 1011, "505": [192, 838], "507": 417, "50755672": 474, "507943": 279, "5082": 1030, "50870937": 333, "50941682": 1011, "50_000": [324, 359], "50sampl": 404, "51": [50, 61, 180, 236, 294, 297, 416, 417, 775, 785, 790, 1006, 1037], "51082562": 599, "512": [152, 217, 1031], "512281": 266, "512595": 313, "51292546": 621, "513": [337, 862, 1013, 1031], "513034": 313, "5131": [46, 1046], "51341712": 1008, "5141": 1047, "51462041": 858, "5149": 46, "515": 43, "515390": 390, "5166": 682, "5166646": 773, "517": [47, 460, 470], "517272": 266, "5182": 1046, "5186": 1046, "519": [274, 1031], "5193": 46, "51958": 180, "51963999": 113, "52": [43, 180, 218, 233, 540, 642, 806, 956, 1041], "520": [637, 862, 1000, 1013], "52003279": 1011, "5208": 207, "52106591": 134, "5211": 1048, "5212": 207, "522": 914, "5224167": 52, "5229": 1048, "523": [184, 533], "524": [49, 52, 225, 327, 1031], "5243": 424, "52433293": 424, "5244": 207, "525": [447, 637, 1000], "5251": 1047, "526": 913, "526599": 207, "5279": 1048, "5282": 1046, "52875032": 670, "5289": 46, "529": [155, 1031], "5291": 1047, "5295": 1048, "52955942": 858, "5299": 1047, "53": [43, 47, 88, 255, 416, 423, 544, 550, 555, 801, 802], "53095617": 333, "5315170": 52, "5316": 358, "532": [209, 1031], "53284267": 259, "532843": 259, "533": 191, "5337": 1046, "534": 191, "5355": 1046, "5359": 1048, "536": [79, 180, 297, 1031], "5360": 1046, "53777511": 52, "53844117956": 773, "5395559": 233, "53959628e": 200, "54": [47, 122, 173, 196, 203, 218, 221, 255, 379, 381, 416, 499, 1042, 1043], "54035582": 773, "541": [460, 470], "5415": 1007, "5417": 236, "542": [173, 267, 381, 1031], "5420": 553, "542052": 207, "54209": 164, "5425": 533, "543": 203, "5431": 1046, "543841": 207, "544": 360, "54434690031882": 107, "54488318": 393, "545": [158, 1031], "5460": 1047, "546068": 259, "54606834": 259, "54675220": 52, "5469": 381, "547": 366, "548": [292, 1031], "5488135": 393, "549": 63, "5495": 1046, "54980": 550, "55": [47, 191, 196, 213, 218, 236, 240, 337, 389, 416, 420, 499, 606, 809, 815, 823, 837, 1010, 1041], "5500": [331, 697, 1007], "550213": 207, "55102041": 457, "5515": 755, "552": 1010, "55212743": 367, "5523": 1030, "55249": 606, "553": [310, 1031], "55390036": 134, "554": [226, 234, 314], "5540": 1047, "55422893": 424, "555": [354, 725, 1031], "5555555555555556": 284, "5557": 279, "5558": 46, "55800226": 233, "559": [300, 625, 1031], "5591": [698, 702, 1007], "55968825": 655, "56": [43, 52, 144, 236, 249, 340, 390, 655, 656, 661, 669, 670, 671, 690, 722, 744, 1010, 1020, 1031, 1037, 1041], "560": [218, 526, 527], "561": 416, "561464362648773": 95, "564": 218, "56479934": 367, "56485654": 134, "565": 276, "566": 218, "569": [173, 339, 359, 381, 509, 601, 604, 605, 607, 1031], "5697": 1048, "56b4e9": 261, "57": [175, 191, 234, 285, 315, 381, 382, 402, 408, 409, 417, 714, 770, 790, 846, 1010, 1020, 1041], "570": [173, 381], "570655": 207, "5713": 672, "57142857": 730, "573": 424, "5732": 1048, "57320793": 424, "573491": 207, "574": [93, 543, 550], "5748": 503, "5749": [379, 502, 503], "575": [104, 218], "5762": 1047, "576989": 259, "577": [173, 381], "579": 533, "58": [52, 101, 112, 381, 418, 429, 483, 616, 773, 1020, 1031], "580": [359, 853, 854], "5804131": 134, "5805": 1047, "5807": 1013, "581": [172, 196, 1031], "581012": [379, 499], "5814": 1048, "58149261": 424, "58195950e": 200, "582": 914, "5828": [379, 502, 503], "583": [53, 416, 1031], "5833": [747, 1010], "583333315172": 52, "58364548": 1008, "5853": 1030, "5857": 1046, "586": [179, 1031], "5863": 390, "58667835e": 200, "586798": 207, "587": 145, "5871": 688, "5874": 1047, "5882004012129721": 95, "589": [164, 1031], "589715": 207, "59": [43, 196, 203, 236, 240, 381, 390, 416, 417, 519, 831, 1010, 1037, 1041], "590": 360, "59122734": 676, "592": [220, 620, 623, 634, 1017, 1031], "592373": 331, "5925110": 52, "5929": 1047, "593": [142, 360], "594": [184, 218], "594754": 207, "59489497": 233, "595": 218, "5956": 1049, "596": 725, "5960": 233, "5963": 1051, "597": [218, 356, 1031], "598": [93, 131, 176, 550], "5981": 553, "598533": 207, "599": [192, 689], "5991": 1048, "5_000": 196, "5a": 893, "5d": 47, "5e": [44, 124, 206, 604, 605, 607], "5e5": 218, "5f": [164, 330], "5m": 55, "5n_": 114, "5th": [52, 151, 154, 183, 416], "5x": 1058, "6": [0, 43, 45, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 81, 84, 85, 87, 91, 92, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 111, 112, 113, 115, 117, 120, 124, 126, 133, 139, 151, 152, 154, 156, 158, 164, 168, 173, 175, 178, 180, 182, 183, 184, 186, 187, 191, 192, 194, 196, 198, 199, 200, 203, 207, 211, 216, 218, 219, 220, 222, 232, 233, 236, 238, 239, 240, 242, 245, 248, 249, 253, 256, 257, 261, 262, 263, 264, 266, 267, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 285, 286, 287, 288, 292, 296, 299, 302, 310, 312, 314, 315, 317, 319, 321, 322, 324, 326, 329, 330, 331, 332, 333, 334, 336, 337, 340, 341, 347, 348, 350, 352, 354, 356, 358, 359, 360, 365, 366, 367, 378, 379, 381, 382, 384, 386, 388, 389, 390, 397, 402, 408, 409, 414, 416, 417, 420, 421, 423, 424, 425, 431, 436, 443, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 490, 491, 492, 493, 498, 500, 505, 514, 526, 533, 536, 539, 546, 547, 548, 549, 550, 554, 555, 556, 562, 570, 571, 572, 576, 577, 578, 579, 602, 603, 611, 613, 614, 615, 617, 620, 623, 624, 634, 636, 637, 639, 645, 646, 653, 654, 688, 698, 702, 708, 720, 725, 730, 737, 747, 751, 754, 755, 759, 760, 762, 778, 787, 794, 797, 799, 806, 807, 808, 810, 811, 816, 818, 819, 821, 826, 827, 830, 834, 835, 836, 837, 838, 839, 840, 848, 849, 850, 852, 853, 854, 861, 863, 864, 865, 880, 881, 883, 886, 888, 891, 892, 896, 897, 910, 928, 935, 937, 939, 940, 951, 952, 956, 957, 958, 960, 963, 964, 972, 984, 987, 995, 998, 999, 1000, 1004, 1006, 1007, 1010, 1020, 1021, 1024, 1025, 1026, 1033, 1037, 1039, 1042, 1043, 1044, 1047, 1049, 1054, 1058, 1059], "60": [43, 45, 47, 94, 107, 115, 127, 218, 230, 236, 238, 239, 259, 264, 284, 289, 337, 350, 358, 378, 416, 420, 458, 465, 722, 809, 1010, 1020, 1041, 1044], "600": [63, 85, 93, 149, 158, 159, 379, 689], "6000": [315, 636], "601052": 313, "601707": 207, "60244657": 858, "60276338": 393, "603": [98, 456], "604": [131, 550], "606": [129, 622, 843, 1011, 1031], "607": [302, 1031], "6072758064261095": 175, "607752": 151, "60809415": 671, "60834549": 92, "60836363e": 200, "609": [64, 184, 390, 1031], "61": [47, 52, 81, 114, 127, 192, 236, 378, 381, 390, 417, 466, 550, 569, 655, 656, 661, 669, 670, 671, 690, 722, 831, 958], "6101": 1048, "611": [274, 276, 550], "6114": 836, "6114326": 218, "6114327": 218, "6114328": 218, "6114329": 218, "6114330": 218, "611676": 207, "612": 799, "6121": 1047, "6126": 1048, "614": [218, 1031], "6147": 1046, "615": [83, 156, 270, 1031], "615373": 191, "616": [850, 1012, 1020], "61611719": 178, "617": [93, 279, 416, 778], "617050e": 236, "6173": 1047, "617715": 151, "6178": 1047, "618": [93, 274, 360], "6181": 1048, "6182": 1047, "618263": 207, "619": [98, 456], "619052": 379, "61958": 180, "6196": [279, 1046], "6198": 755, "62": [47, 52, 192, 196, 236, 269, 331, 337, 367, 379, 502, 503, 853, 854, 1037, 1044], "620": 507, "621": [93, 778], "621645": 207, "622": [93, 550], "62241605": 203, "622811": 151, "623": [850, 1012], "6231": 1030, "6237": 236, "624": 1017, "625": [88, 218, 627, 717], "6250": 1048, "6258": 1046, "626": [84, 204, 254, 285, 1031], "6261": 1050, "626286": 207, "62717609": 233, "62722912": 52, "62745778": 1011, "628": 359, "6282": 1047, "6284": 1030, "6288": 1048, "6291456": 88, "63": [45, 81, 270, 381, 423, 566, 567, 574, 575, 655, 656, 661, 669, 670, 671, 690, 708, 735, 809, 823, 831, 923, 924, 1010], "630": 733, "63035731": 424, "630382": 331, "6312": 52, "632": 323, "6323": 1030, "6331": 43, "6332": 43, "63327171": 203, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 324, "63394388": 203, "634": [93, 1031], "635": [43, 625], "636": [203, 390], "63667341": 92, "637": [250, 1031], "6371000": 773, "6374": 1049, "6375861597263857": 955, "638": [359, 390], "638768": 89, "638843": 313, "63bit": 1052, "64": [43, 52, 68, 83, 88, 93, 124, 127, 180, 191, 239, 249, 250, 254, 274, 285, 301, 306, 371, 372, 381, 382, 390, 398, 402, 417, 421, 428, 504, 507, 511, 608, 609, 655, 667, 697, 698, 699, 700, 702, 914, 1013, 1037, 1041, 1043, 1049, 1050, 1053, 1054, 1055, 1058], "640": [235, 414, 498, 515, 516, 592, 593, 596, 999, 1031], "640000e": 236, "640770e": 236, "640880e": 236, "64185414": 675, "64236448": 545, "6424": 1030, "6425": 1030, "643": [192, 274], "644": [150, 340, 1031], "6440": 233, "64447187": 88, "645": 93, "6451": 1030, "6452": 1049, "646": 183, "6463": 1050, "647": 93, "6472": 1047, "6476": 533, "647689": 207, "648026": 151, "6497": 1047, "64_conda": 392, "64bit": 1041, "64x64": [124, 379, 421], "65": [43, 47, 69, 192, 218, 255, 285, 323, 416, 447, 511, 526, 606, 708, 750, 801, 802, 831, 1017, 1041, 1042, 1043], "650": [173, 414], "6505186632729437": 95, "6507": 1048, "651": 390, "652": 359, "652739": 207, "653": [390, 620, 623, 634], "654": [149, 1031], "6545": 1053, "655": [74, 1031], "656": 379, "6567": 860, "657": [259, 276], "6572": 860, "6573": 1048, "65799352e": 200, "658": 118, "6586": 1047, "659": [104, 1031], "6599": 1030, "65e": 204, "66": [43, 47, 242, 323, 381, 416, 433, 469, 541, 641, 721, 792, 793, 804, 892, 900, 991, 1010, 1022], "660": 259, "660797": 259, "661086": 279, "6624": 1053, "662409": 207, "663": [907, 1018, 1022], "664": [173, 381], "665": 43, "6650": 52, "6651": 1047, "666": [178, 416, 855, 1000], "6660": 1047, "6666": [747, 1010, 1047], "66666667": [738, 791, 863, 1020], "666667315174": 52, "6667": 1047, "66670169e": 200, "667": [50, 729, 749, 1010, 1031], "667219": 151, "6689": 1049, "6691": 1047, "6697": 1047, "669930e": 236, "67": [101, 191, 236, 381, 507, 525, 526, 527, 636, 676, 722, 823, 1000, 1010, 1024, 1037, 1041], "670": [220, 270], "671": [339, 1022, 1031], "6715": 1030, "67251877": 675, "673": [118, 359, 390], "67443065": 134, "67451144e": 200, "675": [175, 359], "675318": 89, "676": 678, "6764": 1047, "678008": 218, "678009": 218, "678010": 218, "678011": 218, "678012": 218, "678013": [218, 236], "678359": 207, "679": [160, 220, 913, 1031], "68": [43, 209, 315, 336, 416, 486, 544, 550, 599, 694, 695, 1041], "680": [303, 1031], "681": [93, 390], "6817": 1047, "682": 390, "6821": 47, "682880e": 236, "683980e": 236, "684": [105, 113, 173], "6846": 1047, "6848": 1050, "685": [729, 749, 1010], "6852": 276, "686": [140, 1031], "6860": 150, "687": [173, 1022], "6875": 725, "688": 113, "689015": 313, "689143": 313, "689751": 313, "69": [45, 209, 270, 322, 337, 416, 479, 480, 616, 617, 765, 1010, 1020], "690": 220, "6902": 1047, "691": 730, "6913": 1047, "692": [97, 138, 1031], "692270e": 236, "692470": 313, "6929": 1030, "692901": 151, "693": 1010, "6931": 877, "69314718": [426, 621, 1020], "694": [166, 1031], "695": 274, "69513": 93, "6954": 1047, "69545": 93, "695740e": 236, "697": 184, "69735": 93, "698": [93, 270], "6984743": 178, "69892343": 222, "699": [182, 1031], "699691": 379, "69e": 184, "6d": 47, "6f": [55, 128, 281, 746, 804], "6ppm": 180, "6th": 183, "7": [1, 2, 43, 45, 47, 51, 52, 53, 54, 57, 63, 66, 68, 69, 70, 74, 77, 79, 81, 88, 89, 90, 91, 95, 99, 100, 102, 105, 106, 108, 113, 115, 124, 127, 138, 141, 147, 151, 154, 155, 159, 160, 173, 181, 184, 190, 191, 192, 194, 196, 200, 201, 217, 218, 219, 220, 236, 238, 240, 245, 249, 250, 251, 257, 259, 261, 262, 265, 266, 270, 271, 276, 280, 282, 283, 287, 289, 294, 296, 297, 299, 302, 303, 305, 314, 315, 317, 321, 326, 329, 330, 331, 333, 336, 337, 339, 340, 344, 351, 354, 355, 358, 359, 360, 367, 379, 381, 382, 389, 390, 402, 408, 409, 414, 420, 421, 423, 424, 425, 427, 428, 431, 447, 452, 453, 456, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 475, 479, 480, 490, 491, 492, 493, 499, 505, 507, 541, 542, 543, 544, 545, 547, 549, 553, 570, 571, 597, 600, 609, 614, 615, 636, 637, 639, 646, 655, 656, 658, 661, 667, 668, 669, 670, 671, 682, 684, 690, 691, 692, 701, 708, 716, 718, 730, 732, 733, 735, 737, 753, 754, 755, 759, 760, 762, 791, 794, 799, 800, 803, 806, 808, 809, 810, 811, 812, 813, 816, 819, 823, 826, 827, 830, 836, 839, 843, 853, 854, 862, 871, 872, 873, 878, 885, 886, 908, 909, 956, 957, 960, 961, 964, 973, 978, 999, 1000, 1005, 1006, 1008, 1010, 1011, 1013, 1014, 1016, 1020, 1024, 1025, 1037, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1054, 1059], "70": [43, 45, 50, 101, 105, 107, 138, 192, 255, 261, 276, 337, 379, 381, 420, 502, 503, 691, 692, 722, 735, 765, 809, 823, 900, 999, 1020], "700": [85, 270, 320, 328, 1031], "7000": 236, "701": 93, "702": [222, 1031], "702266": 207, "703": [251, 414, 522, 1031], "70359377": 203, "704": 358, "70432034": 117, "7049": 1047, "7049787496083262": 95, "705": [198, 1031], "706026": 207, "707": [184, 889, 901], "7071": 1049, "70763101": 88, "708": [249, 547, 549, 556, 759], "70814003": 367, "7083": 1010, "708333315174": 52, "7089": 1048, "709": 277, "70x": 1058, "71": [43, 122, 173, 222, 236, 381, 519, 739, 745, 775, 785, 1010, 1037, 1043], "710": [187, 414, 1031], "7101": 1047, "714": 328, "71518937": 393, "7152": 1047, "7154": 1047, "715413": 151, "7159": 1047, "716": 522, "7187": 1047, "718747": 207, "7194": 1047, "72": [43, 45, 46, 52, 144, 178, 255, 389, 831, 837], "7200": 658, "721": [547, 549, 556], "722128e": 236, "72295655": 117, "723": [93, 251, 360], "723665": 290, "7239": 1047, "7242": 1030, "724702": 279, "7248": 1047, "725": [334, 1031], "7256": 644, "7256620138265444": 327, "726": 1018, "7260": 1047, "7261": 1047, "726573": 191, "72667194": 1011, "727": [264, 1031], "727148206404819": 284, "72850319": 1011, "729": [47, 1031], "7295": 1047, "7298221281347037": 43, "73": [122, 280, 337, 397, 489, 745, 809, 823, 859, 922, 1020, 1041, 1043], "730": 360, "7301": 1047, "730119e": 236, "731249e": 236, "7313": 46, "73153": 390, "732": 220, "7321432711315247203224138160467097": 52, "7323": 1047, "7325": 1047, "732913": 290, "733": 297, "7331": 1048, "7332": 917, "7350": 1047, "7353": 1047, "7356": 1048, "7361": 328, "7365": 1048, "73654189": 52, "737": [251, 533], "7376": 1048, "7382": 1030, "7387": 484, "7388": 1048, "739865e": 236, "739950": 290, "74": [43, 234, 336, 337, 381, 599, 703, 809, 823, 892, 1037], "7411": [477, 482, 1047], "7419": 1047, "743": 274, "74310541": 178, "7436926291700353": 213, "744": [274, 297], "744029": 290, "744042e": 236, "7441": 1048, "744497e": 236, "74495357": 203, "7459": 1048, "746": 381, "7464": 1048, "746492": 276, "748": [358, 390], "7490": [1047, 1048], "75": [43, 45, 46, 49, 52, 69, 79, 90, 115, 141, 170, 182, 183, 187, 191, 196, 198, 201, 209, 225, 236, 259, 263, 264, 270, 276, 285, 289, 302, 317, 329, 356, 358, 367, 457, 510, 560, 646, 667, 703, 715, 721, 743, 748, 749, 754, 762, 765, 803, 809, 891, 899, 903, 910, 926, 944, 945, 990, 1010, 1012, 1020, 1026, 1028, 1043], "750": [84, 90, 146, 276], "75000": 218, "7501": 1048, "750348": 151, "750389": 207, "7506": 1048, "752": 358, "752470": 290, "752867": 207, "753": 73, "7532": 497, "7533": [429, 483, 1048], "75474165": 1011, "7548": 1048, "7548291": 333, "7553": 1047, "7565": 1048, "756687e": 236, "7567": 1048, "756746e": 236, "7569": 478, "757": [173, 274, 297, 381], "7573": 1048, "75747153": 222, "7578": [279, 1048], "75788833": 170, "757915": 290, "758": 358, "759": 297, "7593": 1047, "7594": 1047, "75949622": 222, "75th": [255, 891], "76": [43, 81, 196, 218, 337, 358, 367, 381, 390, 786, 790, 873], "760": [43, 154], "7608": 1030, "76195467e": 200, "7621951219512195": 259, "7632": 1047, "7638": 1006, "764": [730, 1010], "7646": 1030, "764779": 207, "765012": 331, "7655": 1048, "765671": 207, "7660": 1047, "7661": 1048, "7668": 1049, "7674": [533, 1048], "767498": 151, "7676": 1047, "768": 88, "7680": 1047, "76823": 45, "7685": 1048, "769": 297, "76995": 379, "77": [43, 45, 79, 173, 196, 285, 337, 378, 381, 543, 716, 745, 784, 831], "770": [363, 1031], "77000": 218, "7702": 1048, "770926": 290, "772": [358, 732], "7721": 1048, "7723": 1048, "7724": 1047, "773": [276, 340, 657, 851], "77310": 379, "7732": 1047, "77322639": 117, "7738": 1049, "7739": 1048, "774": [266, 1031], "77426368": 51, "775": 57, "7750": 1047, "775047": 685, "775151": 685, "7756": 1047, "77630514": 424, "7768366": 1008, "777": 390, "7771": 1048, "77764": 412, "77777215": 117, "778": 54, "7786": 1047, "779": 358, "7794": 1048, "779751": 290, "7798": 917, "7799": 1047, "78": [43, 88, 122, 196, 236, 240, 285, 319, 337, 502, 503, 655, 656, 661, 662, 664, 669, 670, 671, 673, 674, 690, 694, 695, 809, 815, 831, 837, 1010, 1030], "780": 274, "7812": 1048, "781265": [379, 506], "7814": 1048, "7816": 52, "7819": [416, 1048], "7823": [1048, 1049], "7825": 1048, "7825594": 51, "7826": 381, "782755": 62, "7831": 358, "783149": 105, "7833": 483, "783392": 276, "7838": 1048, "784": [279, 314, 1031], "7840": 89, "7849": 1048, "785063": 105, "78571427112143152472031331383346104": 52, "786": [88, 105], "786015": 105, "7863": 1048, "786432": 88, "78681467": 88, "7872": 1048, "7880": 1048, "7887550": 52, "788808": 331, "789": [169, 423], "7894": [907, 1022], "79": [43, 45, 66, 68, 113, 114, 127, 173, 196, 315, 337, 381, 389, 418, 482, 533, 606, 703, 831, 851, 1041, 1043], "790": [43, 104], "7906": [631, 658], "79064206": 619, "79084103": 367, "791": 184, "7914": 1048, "791667315161908911936472223112": 52, "79269019073225": 301, "7927845601690917": 324, "7929": [359, 1048], "7943": 1051, "7944": 1048, "7946": 1047, "795": 657, "7954": 1048, "796": 151, "7970": 1048, "7971": 672, "7972": 563, "79769376": 117, "798": [105, 423], "7983": 1048, "798301": 259, "7986": 1048, "7986499491396734": 175, "798982054": 1010, "799": [184, 359], "7990": 1048, "7998": 1048, "7_qbz5n2kfra8p0": 402, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 70, 72, 78, 79, 80, 83, 85, 88, 90, 95, 97, 99, 100, 104, 106, 108, 109, 114, 117, 120, 121, 122, 124, 125, 127, 128, 129, 132, 134, 138, 141, 143, 144, 148, 150, 151, 153, 157, 160, 161, 164, 172, 173, 176, 178, 180, 181, 183, 184, 187, 190, 191, 192, 194, 196, 198, 199, 204, 206, 209, 212, 218, 219, 222, 225, 226, 228, 234, 236, 238, 239, 240, 242, 243, 246, 250, 251, 253, 257, 258, 259, 261, 262, 263, 265, 266, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 286, 287, 294, 296, 299, 301, 305, 309, 312, 314, 315, 317, 319, 320, 321, 322, 323, 326, 331, 336, 337, 338, 340, 341, 344, 347, 351, 352, 353, 354, 355, 358, 359, 360, 365, 367, 372, 378, 379, 381, 382, 384, 389, 390, 402, 410, 414, 416, 420, 421, 423, 424, 425, 427, 429, 447, 450, 451, 452, 455, 457, 458, 460, 463, 464, 465, 470, 471, 477, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 491, 492, 493, 495, 498, 505, 507, 511, 512, 523, 525, 540, 543, 547, 549, 552, 554, 556, 558, 559, 564, 565, 574, 579, 591, 597, 598, 599, 600, 613, 614, 637, 638, 645, 646, 657, 667, 679, 685, 688, 698, 701, 702, 703, 704, 708, 711, 715, 716, 718, 719, 724, 730, 736, 737, 738, 750, 754, 755, 759, 760, 762, 787, 791, 792, 794, 797, 798, 799, 800, 804, 806, 808, 810, 811, 816, 819, 826, 827, 830, 831, 832, 837, 839, 840, 842, 851, 853, 854, 860, 870, 871, 872, 878, 885, 892, 894, 910, 915, 918, 937, 939, 940, 955, 956, 957, 961, 978, 984, 985, 986, 987, 988, 989, 990, 999, 1000, 1006, 1007, 1008, 1010, 1013, 1018, 1020, 1024, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1048, 1049, 1054, 1055, 1057, 1060], "80": [43, 45, 50, 64, 102, 114, 159, 166, 170, 181, 192, 198, 253, 319, 323, 336, 350, 352, 358, 364, 367, 379, 381, 384, 414, 420, 425, 427, 452, 487, 519, 550, 722, 809, 823, 831, 894, 907, 926, 999, 1005, 1006, 1010, 1017, 1023, 1026], "800": [85, 329, 379, 593, 701], "8000": [236, 279, 280], "800000011920929": 366, "8000184677460305": 324, "8002": 1048, "8003": 1049, "8005": 1048, "8006": 1048, "801": 359, "8010": 1048, "801770e": 236, "802": [46, 173, 381], "8022": [46, 481, 1050], "802601": 207, "8028": 1048, "803483": 151, "803882e": 236, "8040": 1047, "804414": [379, 506], "805": 220, "8053": 1048, "8059798": 203, "806": 658, "8061": 1048, "8065": 1048, "8066": 1049, "8068": 1048, "807": [274, 276], "8075": 1049, "808": [358, 1031], "8086": [628, 1048], "8087": 1048, "8093": 1048, "8094": 1048, "80956739": 1011, "80_000": 143, "81": [43, 85, 259, 336, 337, 416, 708, 770, 797, 809, 823, 840, 1010, 1011, 1013, 1020], "810": [193, 838], "8100": 1030, "8102": 1049, "810596": 379, "8117": 1048, "8120": 1048, "8125": 730, "812526": 207, "8129": 1049, "8133333333333334": 308, "81355169": 424, "8137": 1048, "8139": 1048, "814": [177, 193, 1031], "815476315189119122164721021826110": 52, "8157": 1030, "8159": 1048, "816": [277, 479, 480, 1031], "8160": 1048, "8174": 1048, "817724": 207, "818": [138, 224, 1031], "8181": 1048, "819": 424, "8190": 1049, "81940995": 424, "8198": 1048, "82": [43, 66, 88, 93, 147, 170, 221, 308, 336, 797, 809, 823, 956, 1010, 1013, 1041], "820": [43, 52, 853, 854], "820705": 207, "8216": 1050, "822": 799, "822097": 191, "8224": 1048, "8225220806196525": 213, "823": 297, "8243": 1030, "825": 759, "8251": 1048, "8253": 234, "8259": 1048, "827917": 151, "828": 297, "8282": 1048, "829": [322, 1031], "829429": 266, "8295": 1048, "83": [45, 66, 70, 74, 336, 381, 703, 716, 795, 929, 1005, 1010, 1044], "830000": 313, "8306": 1048, "8316": 1048, "832": [193, 423, 564, 565, 1031], "83236428": 424, "83281226": [853, 854], "833": 206, "8333": 507, "83333": 773, "833333": 191, "8335": 1048, "834": 340, "834310": 207, "8344": 1048, "8345": 606, "8353": 46, "8354": [631, 1048], "83548752": 619, "8355": 1047, "8361": 1049, "836224": 62, "8363": 1048, "8370": 1030, "8377": 1048, "83816048": 655, "83822343": 1008, "83833": 390, "8387": 844, "839": [91, 689, 1031], "84": [43, 45, 104, 170, 209, 236, 255, 319, 336, 367, 381, 423, 424, 797, 823, 1010, 1020], "840": 390, "84000": 218, "840000": 313, "8407": 104, "84077985": 203, "841": 105, "84127814": 675, "84253": 1011, "844": [423, 564, 565], "8446": 1048, "8449": 1048, "847222222222214": 213, "8473": 424, "8478": 1050, "8480": 1030, "8481": 1048, "8484": 1049, "848743": 62, "849": [90, 1031], "849835": 89, "85": [45, 47, 55, 68, 85, 90, 104, 127, 170, 233, 236, 274, 287, 315, 337, 367, 423, 447, 507, 509, 564, 565, 606, 661, 667, 754, 762, 797, 809, 837, 1010, 1011, 1041], "850000": 313, "850031": 207, "8508": 1050, "851": 276, "8512": 1048, "8513": 628, "851348": 62, "8515": [424, 1048], "85151335": 424, "851792": 62, "852": [305, 1031], "85253229": 92, "852774": 151, "853": [200, 1031], "853174": 62, "853676": 274, "853846": 207, "854": 274, "85418642": 367, "8549": 1048, "855": 47, "8554": 1049, "855465": 313, "857": [277, 359], "857400": 62, "858486250088675": 324, "85857475": 134, "8586": 1048, "859": 204, "859007": 62, "8591": 1048, "86": [47, 52, 68, 104, 170, 209, 319, 336, 337, 415, 797, 921, 1010], "860000": 313, "861": [173, 381, 797, 798, 1010], "861053": 62, "861106": 62, "8614": 1030, "861533": 62, "8617": 1049, "861868": 62, "8626621": 333, "8628": 644, "8640": 192, "865400": 62, "866": 1018, "866161": 62, "866571": 62, "867": 108, "8672": 1048, "8676": [629, 1048], "8678": 632, "868": [151, 169], "868443": 50, "869": [330, 1031], "8698": 1048, "87": [45, 47, 68, 104, 184, 270, 337, 606, 676, 786, 797, 809, 831, 889, 901, 1010], "870": [173, 381], "871": [73, 113, 114, 418, 482], "871277": 62, "871965": 62, "872": [73, 1018], "8720": [565, 1049], "872186": 62, "873": [173, 175, 381, 1031], "873724": 62, "87382323": 671, "874": [107, 797, 798, 1010], "87421f": 122, "874771": 151, "875": [88, 176, 678], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 178, "8768": 1048, "8769": 1050, "877": [47, 175, 274], "8773": 1050, "877981": 62, "878": 47, "878051": 207, "878964": 821, "87mb": 358, "88": [43, 45, 68, 209, 222, 275, 315, 334, 336, 337, 362, 379, 381, 384, 415, 418, 481, 655, 656, 661, 669, 670, 671, 690, 873, 956, 1041], "880": 43, "880191": 207, "880298": 207, "88089948": 424, "88096009": 134, "882": 276, "88213": 379, "882561": 276, "883": 84, "883065": 62, "8833": 507, "8835": 1048, "884": 297, "8845": 1048, "885": [47, 144, 173, 340, 381, 1031], "8854": 1048, "887": [72, 1031], "8874": 1048, "8878": 844, "8880": 629, "8881": 632, "889": [274, 445], "88978285": 1011, "89": [43, 68, 180, 209, 336, 337, 992, 1005, 1010, 1020, 1041, 1044, 1052], "890": 274, "891": 47, "8922": 1048, "893": [312, 1031], "893055": 207, "8931": 1048, "8936": 1048, "894264": 259, "8947": 923, "8948018": 52, "89483932": 1008, "8948621": 1011, "896": 657, "8963": 279, "8965": 423, "8973": 1048, "89856": 821, "899": [68, 274], "8992": 1048, "8995": 1048, "8pt": 1020, "8x": 333, "8x8": [68, 209, 249, 306, 315, 381, 511], "9": [43, 46, 48, 51, 52, 53, 61, 63, 64, 67, 68, 70, 77, 79, 85, 90, 93, 97, 99, 108, 115, 117, 121, 147, 148, 150, 151, 152, 153, 157, 159, 165, 166, 173, 178, 182, 187, 190, 191, 192, 194, 200, 201, 209, 218, 231, 232, 235, 236, 238, 241, 249, 250, 259, 261, 262, 263, 264, 269, 270, 274, 279, 283, 285, 296, 299, 301, 302, 305, 306, 307, 312, 313, 315, 317, 319, 320, 321, 323, 324, 326, 331, 332, 334, 336, 337, 339, 340, 341, 347, 351, 356, 358, 367, 381, 382, 390, 397, 402, 408, 409, 414, 415, 417, 418, 420, 423, 424, 447, 451, 458, 465, 471, 490, 491, 492, 493, 498, 505, 507, 525, 527, 529, 536, 543, 547, 548, 549, 556, 569, 576, 579, 592, 600, 613, 614, 616, 617, 636, 639, 643, 646, 648, 655, 656, 661, 667, 669, 670, 671, 690, 691, 692, 696, 701, 708, 718, 732, 735, 750, 757, 778, 787, 788, 789, 806, 808, 810, 812, 813, 827, 830, 831, 837, 839, 842, 850, 851, 855, 856, 861, 864, 870, 871, 879, 885, 888, 956, 957, 961, 982, 999, 1005, 1006, 1010, 1014, 1020, 1024, 1025, 1037, 1039, 1042, 1043, 1044, 1046, 1055, 1057], "90": [45, 49, 52, 54, 68, 108, 133, 134, 150, 151, 152, 154, 170, 180, 194, 199, 209, 215, 217, 220, 225, 236, 261, 285, 287, 319, 323, 332, 336, 337, 367, 371, 384, 390, 420, 572, 790, 809, 837, 842, 894, 1005, 1010, 1037, 1056, 1057], "900": [47, 85, 108, 109], "9000": 236, "900000e": 236, "9010": 1047, "9012": 1049, "9015": [672, 1049], "9019": 1048, "9022": 1048, "9024": 1048, "9026666666666666": 151, "903": [47, 78, 319, 1031], "904": [192, 274, 417], "9041": 1049, "9043": 1049, "9044": [276, 1048], "90453403": 474, "904556e": 236, "904558e": 236, "904747e": 236, "904751e": 236, "905": 274, "905206": 89, "9067": 1048, "9069": 1050, "9078": 1048, "908": 1010, "90809432": 134, "9085": 1049, "9087": 1055, "90885631": 88, "909": 47, "909293": 313, "909909": 151, "91": [45, 57, 68, 86, 180, 315, 336, 337, 423, 1005, 1037], "910": 43, "9100": 1048, "9101": 1049, "9105": 1048, "9108": 1048, "912": 73, "912632": 313, "913": [423, 568], "914370e": 236, "914387e": 236, "9144057": 52, "9145": 1048, "914538e": 236, "914573e": 236, "9147": 1049, "9149": 1047, "915": 47, "9151": 1049, "9157": 1049, "916": 84, "91629073": 599, "916555e": 236, "9167": 331, "917": [84, 366], "917281": 151, "9173": 1030, "917618e": 236, "919": 270, "92": [52, 68, 85, 127, 170, 196, 274, 315, 336, 337, 347, 379, 381, 547, 549, 556, 571, 606, 705, 809, 823, 831, 1005], "9202": 152, "9206": 1048, "9219": 1048, "922": [171, 1031], "9221": 658, "9222": 1049, "9226260871125187": 284, "923223": 821, "92329566": 134, "9234": 1049, "9239": 1048, "924": 47, "92461872": 132, "925": 1010, "9250": 1051, "92529176": 1011, "9257": 1049, "9259": 1048, "9266666666666666": 147, "927": 445, "9274": 1051, "9277": 1048, "9278": 1048, "928": [114, 445], "9284": 1048, "928571": 236, "9288": 1051, "9288094357694081": 333, "9289": 1048, "929": [243, 1031], "93": [45, 68, 173, 218, 259, 337, 358, 381, 655, 656, 661, 669, 670, 671, 690, 786, 797, 809, 831, 837, 921, 1005, 1010], "9300": 276, "930000": 313, "9302": 1048, "9304": 1049, "932": 47, "9326": 1030, "93271427": 178, "933": [47, 108, 420], "933197": 259, "933253": 151, "9333": 420, "933333": [165, 862], "935": 1048, "9354": 1049, "936": [47, 445, 1010], "936480": 62, "9372": 1049, "937443": 62, "937532": 62, "937597": 62, "9378": 1049, "938": [47, 214, 794, 1010], "938613": 62, "939": 677, "9399": 1049, "93fletcher": 1006, "93goldfarb": 1006, "93lindenstrauss_lemma": 907, "93shanno_algorithm": 1006, "94": [43, 68, 70, 89, 126, 147, 217, 253, 289, 319, 336, 337, 415, 423, 672, 797, 831, 1005, 1010, 1011, 1020, 1041], "940": [43, 226, 1031], "9400": 276, "940000": 313, "940184": 151, "940201": 62, "940374": 62, "9403917": 117, "941": 47, "94114649": [853, 854], "9416": 52, "9417": 680, "943": [315, 1031], "9431": 844, "944": [47, 207, 1031], "9456": 1049, "94592424": 671, "946": 114, "94731329": 676, "9473684210526315": 326, "947958": 999, "948": [794, 1010], "9484": 1049, "949": [47, 88, 1031], "9490": 381, "9492": 1049, "9497": 1049, "9499": 647, "95": [45, 52, 54, 68, 79, 87, 92, 102, 121, 130, 147, 151, 154, 182, 191, 198, 218, 220, 225, 236, 263, 264, 267, 274, 276, 277, 302, 310, 319, 323, 330, 337, 347, 367, 423, 536, 641, 642, 645, 656, 670, 757, 831, 910, 1006, 1010, 1011, 1023, 1044], "950": 47, "950000047683716": 366, "9502547": 203, "9507": 1048, "951": [43, 1031], "9515": 1049, "951751e": 236, "951958": 999, "952": [47, 84], "9521": 1049, "952289": 207, "9524": 1049, "953": [47, 84], "953061": 314, "95373": 379, "954": [889, 901], "95433992": 117, "955": [297, 420, 663], "9558": 1048, "955989": 999, "956": 47, "956038": 313, "9565": 381, "9569": 1049, "957": [47, 322, 737, 1010], "9579": 1049, "958": 47, "9583": 415, "9584": [636, 1048], "959": [889, 901], "9593": 1048, "9595": 683, "9597": 1051, "9599": 1049, "95th": [52, 151, 154, 757], "96": [43, 52, 68, 83, 97, 182, 245, 255, 315, 319, 322, 323, 336, 337, 381, 420, 562, 691, 692, 720, 831, 999, 1005, 1010, 1020, 1041], "9600": 1048, "9604": 1048, "961": [290, 870, 1031], "961009": 999, "961111": 165, "9612": 1049, "961904": 862, "96190476": 1013, "962": 47, "96228895": 134, "9623": 1048, "9630": 684, "9641": 1048, "9647": 1049, "965": [47, 1010], "9655": 1049, "9656": 1049, "966": [45, 143, 1031], "9666": 552, "966981": 207, "967": [108, 1010, 1014], "9677": 1048, "968": [180, 190, 274], "9681": 1049, "9686": 1049, "969": 378, "9693": 1048, "9694898472080092": 332, "9697": 1048, "97": [68, 133, 173, 194, 253, 267, 337, 347, 381, 390, 397, 420, 655, 656, 661, 667, 669, 670, 671, 690, 691, 692, 1005, 1011, 1020, 1041], "970": [75, 1031], "9701": 1049, "9707": 1049, "9711": 1048, "9717": 1048, "9723": 1049, "9726": 1049, "973": [359, 420], "9731": 1049, "9733": [629, 632], "973554": 331, "973770": 207, "974": [306, 341, 366, 1031], "974e": 424, "975": [173, 190, 1025], "9750": 1048, "97545464": 259, "975455": 259, "9759": 47, "976": [210, 284], "976158": 379, "977": [43, 420], "9771": 563, "9772": 1049, "9775": 1049, "977890": 266, "978": 173, "9781605585161": 416, "978444": 313, "9786": 1049, "9788": 1048, "98": [68, 77, 79, 89, 97, 99, 115, 127, 173, 245, 274, 312, 319, 337, 381, 420, 423, 668, 848, 904, 1005, 1010, 1012], "980000": 313, "9802": 1048, "981": [173, 381, 1010], "9815": 1048, "9816": 1049, "9821": 859, "983": 737, "9830": 1048, "9832": 1049, "9833": 507, "98350372e": 200, "983667": 999, "9837": 1049, "9843": 1054, "9847": 1048, "984ea3": [79, 97], "9850": 218, "9851": 1049, "9858": 1049, "98633022": 134, "986429": 314, "9865": 1048, "9866": [619, 628, 631], "9866666666666667": 147, "9868": [907, 1022], "986989": 279, "987": [284, 359], "9875": 1049, "98809919e": 200, "9884": 688, "9885": 680, "9886": 1049, "989341": 207, "98mb": 358, "99": [45, 52, 62, 68, 79, 86, 97, 124, 236, 245, 249, 255, 261, 263, 274, 277, 317, 337, 372, 377, 381, 388, 420, 423, 424, 501, 656, 670, 680, 691, 692, 797, 831, 860, 978, 1005, 1010, 1020, 1024, 1036, 1043], "990": [678, 1010], "9900": 236, "9907": 1050, "9908": 1049, "991": [284, 1010], "991584977345022": 175, "991653": 313, "9922": 1048, "9924": 550, "99244": 550, "992766": 313, "993": 284, "9933333333333333": 147, "9935": 844, "993879": 313, "9939": 1049, "993919": 50, "994": 297, "9944000000000001": 326, "9945": 1048, "995": 210, "9951": 1051, "9969977": 52, "997": [46, 75, 173], "9978": 1054, "9979": 43, "9979281": 52, "998": [173, 1014], "9980": [43, 1049], "9981": 43, "998142": 52, "998273": 270, "9987": 648, "99891212e": 200, "999": [236, 270, 276, 423, 726, 870, 871], "9990": 236, "9991": [673, 674, 1049], "99918858": 134, "9993": [43, 662, 664, 1049], "9994": 672, "9995": 43, "9996": 660, "999791942438998": 327, "9998": [50, 310], "9999": [50, 236, 310, 339, 507, 636, 1049], "99999": 339, "999999": [79, 97], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 81, 83, 84, 88, 89, 94, 95, 96, 97, 99, 102, 109, 111, 114, 118, 122, 125, 126, 127, 139, 140, 145, 146, 148, 158, 162, 164, 165, 166, 170, 172, 175, 178, 180, 182, 183, 184, 188, 191, 192, 203, 205, 219, 222, 228, 232, 233, 236, 239, 252, 255, 264, 270, 276, 277, 279, 283, 291, 294, 312, 317, 319, 322, 326, 328, 331, 337, 338, 339, 341, 347, 351, 352, 358, 359, 360, 364, 366, 367, 371, 373, 378, 379, 381, 382, 384, 386, 387, 388, 389, 392, 396, 397, 398, 399, 401, 407, 411, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 428, 429, 430, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 498, 499, 501, 503, 506, 509, 510, 511, 512, 513, 517, 519, 520, 521, 522, 523, 529, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 616, 617, 619, 620, 626, 629, 636, 637, 638, 639, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 713, 714, 719, 720, 721, 725, 726, 728, 730, 731, 732, 733, 734, 735, 740, 745, 746, 749, 751, 752, 753, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 773, 775, 776, 783, 784, 785, 786, 787, 790, 797, 799, 800, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 955, 956, 957, 965, 966, 968, 969, 994, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1036, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "AND": 744, "AS": 428, "AT": [2, 379, 504], "And": [52, 188, 237, 238, 243, 252, 276, 358, 392, 410, 416, 420, 424, 539, 597, 598, 600, 701, 702, 1006, 1010, 1031, 1048], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 88, 90, 92, 93, 101, 115, 118, 129, 138, 139, 145, 148, 149, 150, 152, 154, 158, 168, 171, 175, 180, 181, 187, 191, 193, 194, 196, 198, 201, 203, 207, 209, 218, 222, 226, 236, 243, 252, 264, 270, 271, 273, 274, 276, 277, 279, 289, 296, 302, 318, 329, 334, 339, 347, 351, 359, 360, 362, 364, 365, 367, 371, 372, 379, 383, 384, 386, 389, 396, 397, 398, 410, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 454, 502, 563, 571, 575, 628, 641, 664, 665, 681, 683, 696, 744, 767, 773, 855, 856, 857, 859, 861, 892, 999, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1017, 1020, 1024, 1025, 1026, 1029, 1030, 1034, 1041, 1047, 1052, 1057, 1059], "At": [52, 109, 138, 223, 252, 270, 288, 294, 296, 336, 339, 371, 372, 388, 399, 407, 412, 419, 423, 445, 448, 473, 597, 598, 600, 611, 841, 843, 880, 973, 999, 1006, 1009, 1011, 1015, 1024, 1034], "Be": [170, 184, 358, 384, 418, 576, 577, 657, 663, 664, 665, 667, 668, 678, 689, 713, 827, 828, 888, 1020, 1038, 1042], "Being": [384, 398, 399, 1006, 1013], "But": [43, 48, 88, 190, 219, 220, 276, 297, 317, 384, 396, 416, 419, 422, 423, 470, 755, 921, 922, 999, 1010, 1025, 1030], "By": [57, 80, 124, 154, 155, 156, 198, 222, 252, 270, 285, 294, 317, 326, 332, 333, 351, 358, 372, 384, 386, 390, 391, 398, 407, 415, 416, 417, 419, 420, 421, 422, 423, 425, 446, 449, 453, 454, 458, 472, 475, 476, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 533, 558, 559, 566, 567, 568, 569, 573, 574, 594, 595, 597, 598, 600, 615, 618, 641, 642, 680, 682, 684, 686, 699, 701, 703, 706, 708, 709, 711, 712, 727, 738, 739, 743, 747, 792, 793, 796, 803, 805, 812, 813, 859, 873, 874, 886, 887, 889, 891, 901, 903, 911, 916, 917, 921, 922, 923, 924, 939, 940, 999, 1000, 1002, 1006, 1010, 1017, 1018, 1020, 1022, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1055, 1058, 1059], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 81, 83, 84, 88, 90, 92, 93, 95, 102, 107, 113, 118, 121, 125, 141, 143, 146, 151, 152, 154, 155, 157, 169, 170, 173, 175, 177, 182, 186, 187, 191, 192, 203, 205, 207, 218, 219, 222, 223, 226, 235, 236, 238, 240, 243, 245, 246, 248, 249, 250, 252, 259, 266, 270, 273, 276, 277, 283, 290, 292, 296, 297, 307, 312, 314, 315, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 341, 347, 349, 351, 354, 358, 359, 360, 362, 363, 366, 367, 371, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 407, 412, 413, 414, 415, 416, 417, 420, 421, 423, 424, 425, 426, 427, 432, 439, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 465, 466, 468, 469, 470, 472, 473, 474, 476, 479, 480, 482, 490, 491, 492, 493, 497, 503, 505, 507, 512, 521, 523, 524, 528, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 582, 590, 591, 592, 593, 597, 598, 600, 601, 602, 603, 606, 611, 616, 617, 618, 619, 620, 623, 628, 631, 632, 636, 637, 638, 639, 640, 641, 642, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 697, 698, 699, 701, 702, 704, 710, 713, 715, 716, 738, 739, 747, 750, 751, 772, 778, 787, 792, 793, 796, 797, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 903, 904, 905, 906, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 939, 945, 962, 972, 993, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1028, 1033, 1034, 1041, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "If": [0, 43, 50, 52, 64, 68, 77, 84, 90, 105, 115, 127, 136, 146, 151, 154, 159, 184, 187, 191, 200, 218, 233, 235, 236, 252, 255, 259, 270, 276, 283, 290, 292, 302, 310, 317, 322, 323, 347, 351, 354, 355, 358, 359, 360, 366, 367, 371, 372, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 398, 399, 402, 407, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 437, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 523, 524, 528, 531, 532, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 720, 721, 722, 723, 725, 726, 727, 731, 735, 736, 737, 738, 739, 740, 741, 745, 747, 750, 751, 754, 755, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 775, 776, 777, 778, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 821, 823, 826, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 946, 949, 955, 957, 959, 961, 966, 968, 972, 975, 978, 980, 983, 984, 990, 993, 994, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1013, 1014, 1016, 1017, 1020, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1041, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1055, 1057, 1059], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 83, 84, 88, 90, 92, 93, 95, 101, 102, 105, 106, 108, 109, 111, 113, 114, 115, 118, 120, 124, 126, 129, 131, 132, 136, 138, 141, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 159, 162, 169, 170, 172, 173, 175, 179, 180, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 203, 205, 206, 207, 209, 213, 218, 219, 220, 221, 222, 223, 226, 235, 236, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 264, 266, 269, 270, 273, 274, 276, 277, 278, 279, 281, 282, 285, 286, 288, 290, 291, 292, 294, 297, 300, 303, 304, 306, 315, 317, 318, 319, 322, 323, 324, 326, 327, 328, 330, 331, 333, 334, 338, 340, 347, 351, 354, 358, 359, 360, 362, 366, 367, 371, 372, 373, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 396, 397, 398, 399, 401, 402, 403, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 445, 448, 449, 450, 451, 452, 455, 456, 457, 460, 470, 471, 472, 477, 480, 483, 502, 505, 512, 517, 518, 520, 532, 543, 545, 547, 549, 550, 551, 553, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 600, 611, 615, 618, 619, 620, 639, 641, 642, 643, 645, 652, 653, 654, 656, 657, 658, 660, 662, 664, 667, 668, 670, 672, 674, 675, 677, 678, 683, 684, 685, 688, 689, 693, 694, 695, 705, 708, 712, 721, 727, 729, 735, 737, 738, 743, 744, 747, 749, 751, 763, 765, 766, 790, 792, 794, 797, 803, 805, 806, 807, 808, 809, 812, 813, 815, 823, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 863, 864, 865, 870, 878, 880, 886, 887, 891, 892, 894, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 918, 921, 923, 928, 938, 940, 957, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1038, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "Ines": 1058, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 88, 90, 93, 106, 111, 113, 115, 124, 127, 128, 133, 138, 141, 143, 144, 147, 149, 151, 159, 173, 180, 181, 182, 186, 187, 191, 192, 193, 199, 203, 205, 207, 215, 218, 222, 232, 235, 236, 238, 239, 245, 250, 252, 255, 270, 271, 272, 274, 276, 277, 279, 282, 283, 290, 294, 297, 303, 304, 305, 307, 308, 310, 317, 321, 322, 324, 326, 332, 334, 343, 347, 351, 354, 358, 359, 360, 367, 371, 372, 373, 377, 379, 381, 382, 384, 386, 388, 389, 390, 392, 393, 396, 397, 398, 399, 402, 407, 410, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 441, 445, 446, 449, 450, 451, 452, 453, 455, 456, 457, 460, 467, 470, 472, 475, 476, 477, 482, 486, 493, 495, 505, 517, 524, 533, 542, 544, 545, 547, 549, 550, 558, 559, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 598, 605, 611, 615, 616, 617, 620, 623, 624, 628, 629, 631, 632, 636, 639, 640, 641, 642, 650, 651, 652, 655, 656, 659, 661, 662, 663, 664, 667, 669, 670, 671, 672, 675, 676, 677, 679, 680, 681, 683, 685, 686, 687, 688, 690, 691, 692, 693, 696, 698, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 713, 717, 718, 719, 725, 732, 743, 751, 752, 756, 767, 768, 771, 774, 790, 792, 797, 808, 809, 812, 813, 815, 821, 822, 823, 831, 832, 834, 837, 840, 849, 850, 855, 856, 857, 859, 862, 863, 864, 865, 869, 870, 871, 875, 876, 877, 881, 882, 883, 887, 890, 892, 902, 905, 906, 910, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 930, 934, 943, 957, 966, 980, 983, 985, 986, 987, 988, 989, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1034, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "Its": [111, 274, 278, 380, 398, 421, 426, 547, 930, 1005, 1006, 1015, 1018, 1024, 1029, 1034, 1044, 1058], "NOT": [252, 303, 381, 387, 572, 819, 853, 854], "Nearness": 636, "No": [61, 153, 203, 224, 226, 246, 252, 270, 337, 354, 381, 392, 402, 410, 416, 482, 568, 569, 599, 600, 644, 654, 673, 685, 687, 694, 695, 806, 1006, 1058], "Not": [90, 164, 192, 371, 396, 410, 416, 434, 435, 438, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 477, 478, 479, 480, 481, 482, 483, 484, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 572, 575, 578, 579, 590, 591, 592, 597, 598, 600, 636, 637, 638, 639, 686, 697, 698, 699, 700, 702, 803, 806, 807, 809, 812, 813, 823, 850, 853, 854, 857, 858, 859, 861, 865, 877, 885, 888, 889, 891, 894, 905, 906, 917, 1010, 1016, 1029, 1050], "OF": 381, "ON": 331, "ONE": [378, 616, 617], "OR": [317, 416, 427, 452, 1052], "Of": [48, 62, 64, 186, 290, 371, 386, 416, 424, 1000], "On": [43, 51, 52, 55, 63, 102, 105, 106, 117, 118, 129, 138, 141, 143, 145, 146, 151, 155, 156, 159, 162, 168, 170, 179, 180, 191, 192, 193, 200, 205, 207, 220, 222, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 259, 261, 263, 266, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 283, 288, 290, 315, 317, 319, 321, 322, 323, 327, 328, 330, 331, 333, 338, 347, 354, 366, 371, 382, 384, 385, 386, 388, 396, 398, 412, 414, 416, 420, 421, 423, 425, 426, 652, 665, 700, 744, 770, 878, 894, 999, 1003, 1006, 1009, 1010, 1012, 1016, 1018, 1023, 1025], "One": [2, 43, 48, 51, 61, 66, 84, 90, 121, 129, 131, 146, 148, 151, 154, 155, 188, 191, 194, 197, 222, 227, 233, 245, 256, 266, 270, 276, 283, 286, 294, 303, 306, 318, 333, 342, 344, 355, 359, 366, 371, 381, 384, 397, 398, 410, 415, 416, 419, 421, 422, 423, 424, 425, 427, 452, 457, 480, 482, 486, 521, 575, 640, 648, 667, 675, 677, 682, 684, 685, 686, 797, 816, 817, 841, 842, 843, 874, 875, 886, 917, 972, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1020, 1025, 1031, 1032, 1036, 1045, 1047, 1054, 1056], "Or": [358, 366, 420, 421, 886, 1010, 1016, 1024], "Such": [53, 155, 175, 180, 190, 198, 203, 207, 219, 270, 279, 358, 398, 399, 410, 420, 421, 423, 564, 565, 665, 1000, 1010, 1013, 1020, 1026, 1051, 1056, 1058], "THE": 381, "That": [52, 64, 124, 138, 154, 173, 191, 207, 245, 276, 280, 359, 360, 372, 378, 392, 398, 415, 420, 425, 426, 451, 454, 455, 566, 573, 602, 827, 921, 922, 999, 1007, 1008, 1016, 1026, 1050, 1051], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 292, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 396, 397, 398, 399, 401, 402, 404, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436, 438, 439, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 774, 775, 776, 779, 780, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 951, 952, 953, 954, 955, 956, 957, 959, 960, 962, 965, 966, 969, 972, 974, 975, 976, 978, 979, 980, 983, 991, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "Their": [191, 379, 381, 399, 416, 653, 1041], "Then": [105, 139, 143, 146, 154, 159, 162, 170, 191, 196, 203, 205, 218, 222, 242, 246, 252, 258, 270, 278, 279, 294, 358, 366, 378, 388, 390, 392, 402, 403, 413, 416, 419, 421, 424, 425, 579, 602, 728, 765, 809, 823, 913, 914, 1000, 1009, 1010, 1016, 1025, 1026, 1050], "There": [0, 74, 81, 144, 175, 236, 242, 252, 267, 271, 273, 276, 296, 358, 377, 379, 381, 384, 385, 386, 389, 396, 398, 399, 402, 413, 416, 421, 423, 424, 425, 454, 460, 470, 543, 562, 563, 568, 569, 597, 598, 600, 615, 654, 1000, 1006, 1007, 1008, 1009, 1010, 1013, 1017, 1020, 1024, 1025, 1026, 1028, 1033, 1041, 1049], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 86, 124, 126, 143, 147, 188, 192, 207, 218, 219, 220, 246, 270, 294, 297, 301, 315, 317, 324, 325, 330, 337, 339, 367, 371, 372, 377, 380, 381, 384, 386, 388, 391, 393, 396, 398, 402, 407, 410, 413, 414, 415, 416, 419, 421, 423, 424, 425, 426, 450, 454, 456, 507, 517, 518, 524, 547, 576, 577, 611, 612, 677, 685, 686, 708, 715, 742, 787, 803, 809, 812, 813, 815, 823, 832, 834, 835, 836, 837, 838, 840, 858, 859, 878, 932, 999, 1001, 1004, 1006, 1007, 1010, 1011, 1021, 1023, 1025, 1029, 1041, 1047, 1049, 1050, 1051, 1054, 1058, 1060], "To": [1, 43, 47, 63, 64, 68, 81, 90, 92, 111, 113, 115, 118, 129, 138, 148, 151, 152, 161, 164, 173, 180, 181, 184, 186, 187, 190, 191, 196, 200, 203, 205, 218, 219, 220, 222, 226, 236, 249, 250, 252, 255, 257, 259, 266, 270, 271, 273, 274, 276, 278, 279, 281, 283, 290, 294, 296, 314, 317, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 356, 359, 362, 367, 371, 372, 377, 378, 384, 385, 386, 388, 389, 390, 392, 396, 398, 399, 402, 410, 412, 413, 416, 417, 418, 419, 420, 421, 423, 424, 454, 456, 457, 458, 469, 472, 475, 501, 505, 511, 512, 516, 517, 518, 540, 546, 547, 548, 550, 552, 553, 554, 555, 566, 567, 568, 569, 573, 574, 578, 606, 620, 636, 641, 655, 656, 661, 662, 665, 667, 668, 669, 670, 671, 672, 693, 709, 721, 737, 772, 794, 802, 812, 813, 835, 842, 873, 884, 889, 903, 904, 913, 914, 918, 921, 922, 923, 924, 947, 957, 996, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1024, 1025, 1026, 1034, 1041, 1044, 1046, 1047, 1048, 1050, 1052], "Will": [384, 506, 543, 636, 653, 654, 655, 661, 665, 666, 669, 670, 671, 672, 673, 674, 682, 684, 716, 723, 797, 878, 882, 892, 893, 1044, 1045, 1047, 1049, 1059], "Willing": [1047, 1048], "With": [61, 70, 79, 102, 109, 120, 129, 154, 156, 169, 188, 192, 218, 220, 244, 246, 251, 253, 259, 276, 301, 371, 379, 382, 384, 386, 398, 407, 416, 417, 420, 423, 425, 445, 447, 510, 550, 591, 641, 642, 667, 871, 874, 876, 887, 893, 894, 920, 922, 1003, 1006, 1007, 1010, 1011, 1013, 1014, 1017, 1024, 1026, 1031, 1038, 1044, 1048, 1049, 1051, 1053, 1055], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 85, 88, 90, 93, 98, 102, 104, 115, 120, 122, 124, 129, 131, 133, 141, 142, 143, 154, 168, 175, 180, 181, 182, 190, 191, 192, 194, 196, 198, 202, 203, 205, 206, 207, 210, 215, 216, 218, 220, 222, 231, 232, 235, 239, 242, 246, 251, 255, 259, 270, 271, 276, 278, 279, 280, 282, 283, 285, 290, 294, 300, 305, 308, 315, 319, 322, 323, 324, 327, 330, 331, 332, 334, 337, 338, 346, 351, 354, 358, 360, 363, 386, 390, 398, 421, 423, 424, 428, 454, 486, 541, 542, 543, 544, 545, 547, 548, 549, 552, 554, 555, 556, 575, 606, 655, 656, 661, 662, 669, 670, 671, 672, 690, 691, 692, 693, 697, 698, 699, 700, 702, 704, 705, 707, 709, 719, 773, 809, 815, 823, 832, 857, 865, 886, 887, 894, 1000, 1006, 1007, 1010, 1012, 1013, 1014, 1017, 1018, 1020, 1025, 1026, 1048], "_0": [217, 694, 1006, 1010, 1025], "_1": [329, 351, 418, 421, 424, 540, 546, 547, 549, 554, 555, 556, 655, 656, 661, 662, 663, 664, 665, 669, 670, 671, 672, 690, 691, 692, 693, 775, 1006, 1008, 1010, 1025], "_11": 661, "_2": [114, 180, 351, 421, 424, 540, 546, 554, 555, 655, 661, 1006, 1014, 1024, 1025], "_21": [655, 656, 661, 662, 669, 670, 671, 672, 690, 693], "__": [107, 277, 398, 417, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1049, 1050], "______________________________________________________________________": 337, "________________________________________________________________________________": [50, 89, 358], "__________________________________________________________________________________": 93, "________________________________________________________ward_tre": 89, "_____________________________________________________f_regress": 89, "__add__": [426, 633], "__array__": [1044, 1051], "__array_function__": [1030, 1051], "__c": 386, "__call__": [183, 347, 398, 424, 426, 474, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 947, 975, 1048], "__class__": [186, 218, 220, 252, 255, 278, 319, 358, 359, 360, 391], "__class_weight": 386, "__dataframe__": [570, 571], "__doc__": [78, 109, 180, 264, 398], "__file__": [47, 49, 1054], "__getattr__": 386, "__getitem__": 1059, "__getstate__": [1048, 1056], "__init__": [47, 91, 136, 183, 252, 297, 347, 384, 386, 388, 389, 390, 391, 398, 424, 430, 433, 436, 439, 440, 627, 970, 1042, 1047, 1049, 1054, 1055, 1056, 1057], "__init_subclass__": 386, "__len__": 1050, "__main__": [340, 396], "__metadata_request__fit": 252, "__mul__": 630, "__mul___": 426, "__name__": [46, 62, 96, 186, 218, 220, 252, 255, 259, 271, 278, 319, 340, 358, 359, 360, 391, 396, 886], "__pow__": [426, 625], "__repr__": [386, 1030, 1050], "__sklearn_clone__": [386, 441, 1057], "__sklearn_is_fitted__": [47, 91, 135, 183, 188, 252, 297, 386, 430, 433, 993, 1031, 1054, 1055], "__sklearn_tags__": [386, 946, 962, 1060], "__version__": [152, 194, 326, 388], "_agglom": 89, "_array_api": 412, "_bag": 949, "_base": [262, 386], "_basehmm": 1041, "_bay": 949, "_birch": 1051, "_breast_cancer_dataset": 173, "_build": 384, "_c_step": 1048, "_cfnode": 450, "_check_bounds_param": 1053, "_check_i": 998, "_check_param_grid": 1047, "_check_sample_weight": 1054, "_check_stop_list": 600, "_check_target": 1048, "_check_x": 1051, "_class": 1010, "_class_cov": 1049, "_class_mean": 1049, "_classif": 315, "_classifier_ha": 91, "_column_transform": [105, 159], "_compon": [249, 545], "_coo": [594, 595], "_count_nonzero_coeffici": 46, "_criterion": 1049, "_csr": 886, "_cython_bla": 385, "_devianc": 1010, "_diabetes_dataset": 173, "_distn_infrastructur": 288, "_doc_link_modul": 386, "_doc_link_templ": 386, "_doc_link_url_param_gener": 386, "_dotbla": 390, "_encod": 1049, "_error": 1010, "_estim": 998, "_estimator_html_repr": 953, "_estimator_typ": [386, 398, 433, 434, 435, 438, 439, 1046], "_estimator_with_converted_arrai": 412, "_f": [183, 1006], "_featur": [421, 547, 549, 556], "_fit_and_scor": 1049, "_fit_stag": [568, 569], "_fro": [540, 546, 554, 555, 655, 656, 661, 669, 670, 671, 690], "_g": 183, "_gb": 1051, "_generate_center_coordin": 53, "_get_support_mask": 610, "_get_tag": 1052, "_get_warnings_filters_info_list": 372, "_gpr": 184, "_h": [547, 549, 556], "_hist_gradient_boost": 388, "_i": [414, 423, 1001, 1006, 1010, 1014, 1025], "_idx": 398, "_init": 199, "_init_t": 1024, "_initialize_nmf": 390, "_is_fit": 136, "_iter": 388, "_j": [414, 1001], "_k": [418, 1004, 1006], "_l": 1010, "_learntselectormixin": 1046, "_level": [426, 634], "_logist": 384, "_loss": [398, 1010, 1059], "_m": 1026, "_mean": 323, "_mean_frequency_by_risk_group": 218, "_method": 969, "_my": 384, "_n": [424, 1010], "_n_cluster": 384, "_n_compon": 556, "_n_features_out": 432, "_name_estim": 1051, "_neg": 390, "_newton_cg": 1052, "_nls_subproblem": 390, "_nmf": 390, "_not_in_sphinx": [47, 49], "_num_thread": 372, "_obj": 969, "_openmp_help": 385, "_pairwis": [1051, 1053], "_plain_sgd": 1056, "_plot": [246, 336], "_po": 390, "_posterior_mod": 619, "_preprocess_data": 696, "_pvalu": 1041, "_rand": 367, "_ratio": [547, 549, 556], "_request": [252, 407, 1059], "_required_paramet": 436, "_reset": 47, "_run_search": 1049, "_safe_index": [2, 1054, 1058, 1059], "_safe_split": 930, "_safe_tag": 1052, "_sag": 1050, "_sampl": [249, 421, 547, 549, 556], "_samples_gener": 264, "_score": [398, 809, 823, 836, 1010, 1041, 1054], "_search": 1047, "_serial": 252, "_sgd_fast": 1056, "_skip_test": 932, "_spars": 390, "_sparse_fit": 1051, "_std": 323, "_t": 1024, "_test": [226, 319, 372, 386, 1054], "_test_scor": [276, 480, 603, 1054], "_transform_select": 1047, "_tree": [921, 922, 923, 924, 1042, 1044], "_typedef": 385, "_univariate_select": 89, "_validate_data": 1060, "_valu": [426, 622], "_w": [547, 549, 556], "_weight": [53, 236], "_weight_boost": 949, "_weighted_percentil": 1054, "_x_is_even": 970, "_xfail_check": 932, "a16": [1051, 1052], "a65628": [79, 97], "a674e682c281": 389, "a_": [125, 413, 416, 547, 549, 556, 1006], "a_column": 728, "a_i": 416, "a_mask": 285, "a_n": 413, "a_row": 728, "a_tru": 285, "aaa": 183, "aaaaff": [302, 305], "aaai": [416, 427, 452, 848, 1012], "aact": 183, "aaffaa": 305, "aagaard": 1045, "aakanksha": 1049, "aapl": 51, "aarch64": 392, "aaron": [503, 1006, 1044, 1045, 1046, 1051], "aarshai": [1048, 1049], "aashil": 1048, "ab": [51, 55, 75, 109, 128, 134, 140, 148, 159, 169, 173, 194, 209, 229, 231, 234, 236, 241, 276, 317, 334, 345, 356, 416, 547, 549, 556, 636, 755, 853, 854, 888, 1010], "ab_mask": 285, "abadi": [1047, 1048], "abandon": 384, "abati": [1056, 1058, 1059, 1060], "abbi": [1051, 1052], "abbrevi": 708, "abdela": 1050, "abdulaziz": 1059, "abdulelah": 1054, "abdur": 1051, "abenbihi": 1051, "abhijeet": 1043, "abhinav": [1051, 1054], "abhishek": [1044, 1045, 1051, 1055, 1057, 1058], "abhyudai": 1048, "abid": 384, "abil": [48, 52, 96, 113, 151, 174, 175, 176, 180, 182, 184, 186, 188, 190, 191, 193, 218, 222, 236, 245, 358, 373, 402, 423, 424, 426, 620, 631, 634, 791, 792, 793, 796, 797, 1007, 1010, 1013, 1016, 1026, 1030, 1031, 1041, 1043, 1048, 1050, 1054, 1055], "abirami": 416, "abl": [43, 44, 48, 61, 82, 90, 96, 115, 118, 128, 129, 154, 156, 181, 191, 194, 203, 207, 218, 234, 236, 242, 282, 287, 333, 334, 347, 367, 371, 372, 373, 378, 382, 384, 386, 388, 389, 392, 396, 410, 416, 418, 420, 424, 493, 512, 543, 838, 885, 999, 1000, 1006, 1009, 1010, 1011, 1016, 1020, 1023, 1026, 1027, 1030, 1047, 1048, 1052, 1059], "ablin": 1056, "abnorm": [232, 245, 303, 346, 379, 501, 572, 859, 1016, 1049], "abo7atm": 1053, "abort": 701, "about": [3, 46, 50, 65, 79, 88, 92, 97, 104, 118, 147, 170, 184, 188, 190, 194, 222, 235, 245, 252, 270, 273, 274, 276, 278, 283, 296, 302, 322, 326, 328, 329, 330, 331, 332, 337, 358, 360, 366, 367, 371, 372, 377, 379, 383, 384, 386, 388, 389, 390, 392, 397, 398, 399, 410, 415, 420, 421, 424, 426, 446, 501, 503, 504, 505, 506, 509, 510, 511, 513, 514, 519, 524, 570, 571, 602, 603, 616, 617, 623, 649, 685, 687, 752, 809, 815, 823, 832, 842, 892, 940, 1000, 1006, 1007, 1009, 1011, 1013, 1016, 1017, 1020, 1021, 1023, 1025, 1026, 1029, 1033, 1034, 1046, 1047, 1057, 1059], "abov": [43, 62, 63, 64, 72, 79, 101, 104, 140, 143, 144, 151, 154, 162, 172, 173, 191, 192, 204, 218, 220, 224, 229, 249, 252, 253, 270, 276, 282, 294, 302, 319, 322, 323, 327, 329, 333, 351, 359, 360, 366, 367, 371, 372, 373, 378, 379, 381, 382, 383, 384, 386, 388, 390, 396, 398, 399, 414, 416, 417, 418, 420, 421, 422, 423, 424, 426, 449, 453, 472, 475, 497, 504, 505, 506, 532, 599, 643, 713, 764, 809, 813, 821, 823, 834, 876, 877, 890, 896, 902, 910, 972, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1013, 1015, 1017, 1020, 1024, 1025, 1026, 1030, 1047, 1059], "abraham": [1041, 1042, 1047, 1051], "abrahamowicz": 1020, "absenc": [245, 279, 398, 721, 876, 1009, 1010], "absent": [398, 414, 424, 738, 763, 834], "absgrad": 1052, "absher": 1043, "absolut": [2, 43, 52, 109, 128, 148, 173, 191, 218, 220, 224, 236, 334, 366, 386, 410, 416, 418, 420, 421, 423, 424, 425, 426, 427, 452, 458, 464, 465, 540, 546, 551, 554, 555, 557, 558, 559, 567, 569, 570, 571, 574, 597, 599, 600, 602, 606, 611, 628, 636, 641, 655, 658, 659, 661, 663, 665, 680, 681, 683, 685, 687, 691, 692, 713, 726, 730, 745, 746, 754, 755, 757, 762, 764, 766, 804, 811, 815, 826, 829, 837, 839, 851, 853, 854, 858, 877, 882, 885, 898, 922, 924, 995, 1006, 1007, 1020, 1024, 1026, 1042, 1047, 1052, 1053, 1054, 1055, 1058], "absolute_error": [52, 423, 567, 569, 571, 574, 680, 922, 924, 1054], "absolute_loss": 1054, "absolutelynowarranti": 1049, "absp": 869, "abstain": 543, "abstract": [398, 421, 426, 627, 778, 1041], "abstractmethod": 1051, "absurd": 1017, "abund": 379, "ac": [539, 673, 694, 695, 1006, 1023], "acad": [698, 702, 1007], "academ": [420, 1034], "academi": [113, 860], "acategorypredict": 404, "acc": 150, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 306, "acceler": [250, 331, 371, 396, 412, 416, 476, 701, 911, 1007, 1029, 1034, 1050, 1054, 1056, 1058], "accent": [355, 597, 598, 600, 1051], "accept": [173, 175, 252, 270, 273, 326, 334, 347, 358, 360, 367, 371, 372, 378, 384, 386, 393, 396, 397, 398, 399, 407, 412, 416, 424, 445, 449, 452, 453, 456, 469, 472, 475, 517, 518, 564, 565, 570, 571, 578, 579, 590, 591, 602, 603, 606, 637, 644, 648, 652, 655, 656, 661, 662, 688, 736, 751, 787, 806, 807, 808, 812, 813, 831, 855, 856, 863, 864, 873, 877, 937, 939, 940, 943, 998, 1006, 1008, 1010, 1013, 1018, 1020, 1025, 1029, 1030, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "accept_large_spars": [939, 940, 1049], "accept_spars": [877, 939, 940, 1048, 1058], "access": [43, 84, 111, 149, 255, 262, 267, 333, 334, 358, 366, 371, 372, 384, 385, 386, 392, 396, 398, 399, 412, 416, 418, 419, 423, 424, 426, 458, 465, 472, 475, 545, 576, 577, 578, 579, 626, 871, 872, 873, 928, 999, 1006, 1009, 1010, 1016, 1017, 1018, 1024, 1025, 1030, 1034, 1041, 1043, 1047, 1048, 1049, 1050, 1053, 1055, 1056, 1057], "accid": [218, 236], "accident": [1041, 1045, 1050], "accommod": [180, 1049], "accompani": [276, 1049], "accomplish": [252, 386, 414, 555, 1007, 1011, 1013, 1034, 1058], "accord": [2, 55, 61, 63, 72, 84, 111, 144, 150, 173, 176, 202, 218, 236, 249, 326, 351, 359, 367, 384, 386, 396, 397, 398, 399, 410, 413, 414, 416, 418, 420, 421, 423, 424, 426, 445, 458, 460, 464, 468, 470, 473, 477, 513, 525, 526, 527, 534, 539, 541, 544, 545, 547, 549, 559, 562, 563, 570, 571, 572, 575, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 650, 651, 653, 654, 658, 667, 668, 679, 689, 700, 704, 744, 788, 789, 809, 810, 811, 812, 813, 816, 817, 818, 823, 834, 848, 849, 850, 851, 852, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 876, 883, 891, 903, 905, 906, 913, 914, 915, 916, 918, 919, 1004, 1006, 1010, 1012, 1013, 1020, 1023, 1024, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "accordingli": [154, 192, 255, 351, 384, 388, 389, 1048, 1049, 1056], "account": [52, 53, 90, 126, 132, 138, 154, 180, 186, 191, 236, 252, 270, 276, 300, 306, 354, 356, 359, 371, 380, 384, 398, 399, 407, 416, 419, 420, 421, 423, 424, 471, 570, 571, 576, 577, 636, 637, 639, 641, 642, 658, 682, 688, 713, 716, 737, 738, 739, 747, 752, 765, 792, 793, 796, 797, 810, 814, 827, 887, 999, 1002, 1004, 1008, 1010, 1011, 1012, 1013, 1020, 1024, 1026, 1046, 1048, 1049, 1050, 1053, 1054, 1056, 1058, 1059, 1060], "acctactagaagtt": 396, "acctcctagaag": 396, "accumul": [47, 85, 145, 146, 207, 388, 390, 416, 424, 1010, 1042, 1049], "accur": [43, 48, 52, 59, 62, 63, 113, 124, 153, 175, 182, 191, 192, 222, 233, 236, 270, 276, 283, 287, 294, 330, 358, 359, 367, 383, 398, 414, 416, 418, 421, 423, 424, 425, 445, 451, 455, 459, 461, 467, 540, 547, 549, 551, 552, 554, 555, 556, 616, 617, 643, 812, 813, 853, 854, 956, 957, 1002, 1007, 1010, 1026, 1055], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 104, 105, 106, 107, 138, 144, 145, 149, 150, 157, 169, 170, 172, 176, 194, 196, 218, 222, 226, 233, 234, 263, 274, 275, 276, 277, 278, 280, 282, 290, 292, 294, 299, 305, 306, 307, 315, 319, 322, 332, 336, 337, 339, 347, 350, 351, 354, 367, 371, 397, 398, 415, 416, 420, 423, 424, 425, 433, 445, 457, 477, 479, 480, 486, 541, 543, 550, 558, 559, 560, 562, 564, 566, 567, 568, 570, 573, 574, 576, 578, 619, 643, 667, 668, 675, 677, 680, 683, 684, 685, 701, 706, 712, 717, 720, 722, 727, 741, 742, 743, 747, 752, 763, 772, 796, 803, 805, 808, 831, 837, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 855, 860, 862, 863, 870, 908, 909, 913, 915, 918, 921, 923, 929, 956, 957, 999, 1004, 1005, 1006, 1007, 1011, 1013, 1014, 1018, 1022, 1024, 1026, 1049, 1050, 1059], "accuracy_histori": 47, "accuracy_scor": [2, 66, 138, 176, 280, 322, 339, 358, 367, 397, 407, 412, 433, 566, 573, 717, 720, 738, 739, 743, 747, 792, 793, 796, 803, 805, 950, 999, 1010, 1042, 1043, 1044, 1053, 1058, 1059], "acf": 148, "achar": [1048, 1049, 1050, 1051], "achiev": [43, 51, 55, 57, 64, 67, 127, 138, 147, 149, 154, 157, 183, 196, 218, 226, 273, 276, 283, 322, 334, 339, 347, 350, 351, 354, 358, 367, 371, 373, 378, 379, 381, 386, 390, 396, 398, 404, 413, 414, 415, 416, 420, 421, 423, 424, 562, 567, 574, 649, 658, 685, 687, 716, 738, 739, 747, 749, 772, 792, 793, 796, 812, 813, 849, 893, 999, 1000, 1002, 1006, 1010, 1020, 1023, 1025, 1054], "achin": 1034, "achliopta": [249, 906, 907, 1022], "acid": [322, 381], "acknowledg": [383, 618, 1058], "acl": [910, 1023, 1024], "acm": [378, 379, 416, 427, 452, 458, 465, 468, 520, 572, 685, 735, 765, 859, 1010, 1013, 1016, 1022], "acoust": 1010, "acq": 47, "acquaint": 384, "acquir": [53, 146, 278, 1053], "acquisit": [413, 728], "acronym": 388, "across": [0, 2, 15, 43, 52, 90, 96, 102, 117, 120, 144, 164, 191, 207, 212, 239, 271, 273, 276, 290, 297, 317, 322, 351, 385, 386, 393, 398, 410, 414, 416, 420, 423, 424, 425, 428, 445, 448, 458, 460, 462, 465, 468, 470, 477, 480, 482, 496, 499, 501, 504, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 576, 577, 597, 600, 603, 611, 616, 617, 619, 620, 641, 642, 643, 648, 649, 650, 651, 655, 656, 659, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 685, 687, 688, 694, 695, 698, 699, 700, 701, 702, 703, 704, 713, 714, 726, 740, 766, 797, 802, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 862, 869, 870, 871, 878, 882, 883, 890, 891, 893, 894, 902, 905, 906, 908, 909, 913, 914, 915, 918, 921, 922, 956, 957, 980, 983, 999, 1006, 1008, 1010, 1020, 1024, 1026, 1030, 1034, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1059], "act": [347, 358, 384, 397, 422, 423, 722, 738, 739, 747, 792, 793, 796, 888, 892, 1007, 1010, 1013, 1025, 1049], "action": [329, 358, 383, 387, 388, 402, 415, 1020, 1051], "activ": [52, 68, 188, 226, 261, 267, 277, 335, 336, 360, 378, 379, 382, 384, 385, 390, 392, 396, 398, 399, 402, 403, 407, 417, 505, 511, 535, 641, 644, 646, 659, 660, 662, 663, 664, 672, 673, 674, 691, 692, 693, 694, 695, 722, 727, 806, 869, 870, 871, 909, 975, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1023, 1031, 1033, 1052], "active_": [659, 660, 663, 664], "active_features_": 1049, "actual": [43, 52, 64, 81, 95, 109, 118, 144, 154, 173, 191, 196, 207, 218, 222, 226, 263, 272, 279, 283, 360, 366, 367, 371, 373, 381, 384, 386, 389, 390, 396, 397, 398, 414, 416, 421, 423, 424, 425, 441, 518, 524, 525, 536, 544, 547, 549, 556, 571, 572, 653, 654, 657, 667, 668, 675, 676, 677, 678, 679, 681, 683, 685, 686, 687, 689, 696, 700, 704, 710, 713, 718, 724, 730, 731, 732, 733, 794, 806, 812, 813, 825, 828, 829, 859, 890, 913, 919, 948, 949, 950, 984, 1002, 1009, 1010, 1013, 1017, 1018, 1026, 1033, 1048, 1049, 1055, 1056, 1057], "actual_vs_predict": [43, 109, 159, 191, 272, 331, 710], "actuari": 414, "ad": [43, 53, 58, 109, 131, 133, 138, 144, 154, 169, 175, 181, 182, 198, 203, 220, 222, 242, 251, 252, 276, 277, 278, 317, 327, 328, 329, 330, 331, 332, 333, 334, 340, 351, 359, 383, 384, 386, 388, 396, 398, 399, 421, 423, 424, 425, 426, 427, 428, 434, 438, 440, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 519, 521, 523, 531, 532, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 713, 717, 720, 722, 723, 725, 727, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 743, 748, 749, 750, 751, 752, 755, 762, 763, 766, 770, 775, 776, 778, 784, 786, 787, 791, 792, 793, 794, 796, 798, 799, 800, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 822, 823, 827, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 899, 902, 903, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 937, 939, 940, 947, 951, 952, 956, 957, 965, 966, 967, 968, 969, 972, 975, 979, 984, 990, 996, 998, 999, 1003, 1005, 1006, 1007, 1011, 1013, 1014, 1016, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "adaboost": [2, 67, 121, 137, 141, 147, 155, 158, 159, 162, 178, 188, 364, 365, 528, 560, 562, 563, 568, 640, 712, 839, 921, 922, 1031, 1032, 1036, 1043], "adaboost_clf": 138, "adaboostclassifi": [2, 67, 140, 147, 407, 423, 563, 568, 570, 949, 1043, 1044, 1047, 1048, 1050, 1051, 1054, 1056, 1057, 1058], "adaboostregressor": [2, 139, 407, 423, 562, 571, 949, 1043, 1044, 1047, 1050, 1051, 1054, 1056, 1057], "adam": [313, 870, 871, 1014, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "adamgonzo": 1055, "adamson": 1053, "adanhawth": [1049, 1050], "adapt": [88, 90, 138, 150, 151, 261, 262, 270, 351, 372, 383, 384, 393, 416, 423, 426, 524, 525, 526, 527, 685, 686, 687, 870, 871, 1006, 1012, 1014, 1020, 1024, 1029, 1030, 1049, 1050, 1057, 1058], "adarsh": [1058, 1059], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 89, 109, 113, 114, 118, 125, 147, 150, 169, 171, 173, 175, 180, 181, 182, 186, 187, 201, 206, 207, 213, 219, 221, 222, 233, 241, 245, 249, 251, 252, 283, 285, 286, 297, 309, 319, 321, 326, 328, 329, 350, 351, 353, 354, 359, 371, 382, 383, 384, 385, 386, 388, 390, 392, 398, 402, 412, 414, 420, 423, 424, 425, 524, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 611, 636, 637, 639, 641, 667, 668, 703, 706, 830, 853, 854, 910, 947, 966, 967, 999, 1000, 1009, 1016, 1020, 1023, 1024, 1030, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "add_2d_scatt": 238, "add_artist": [70, 239, 261, 262, 263, 266, 267], "add_ax": [192, 242, 287], "add_categori": 255, "add_collect": [51, 241, 248], "add_dummy_featur": 2, "add_ind": [159, 187, 636, 637, 639, 1000, 1050, 1053, 1057], "add_missing_valu": 187, "add_nois": 181, "add_self_request": [252, 966], "add_subplot": [46, 62, 64, 77, 80, 99, 102, 120, 130, 192, 215, 233, 240, 242, 336, 337, 391], "add_trac": 144, "adddatapointbatch": 297, "addep": 1052, "addison": [599, 739], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 101, 105, 115, 120, 124, 127, 138, 142, 144, 145, 148, 149, 172, 180, 181, 182, 187, 191, 192, 198, 203, 207, 219, 220, 222, 242, 256, 270, 278, 285, 291, 296, 317, 327, 328, 333, 338, 351, 360, 364, 367, 371, 372, 376, 377, 378, 379, 380, 383, 384, 386, 388, 389, 390, 392, 396, 398, 399, 402, 410, 415, 416, 418, 420, 421, 424, 425, 426, 427, 440, 449, 450, 452, 453, 454, 458, 465, 477, 482, 505, 512, 541, 543, 545, 546, 548, 550, 551, 552, 558, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 621, 628, 637, 639, 640, 644, 647, 648, 649, 650, 651, 652, 653, 654, 679, 696, 697, 701, 707, 708, 711, 751, 767, 768, 797, 801, 806, 807, 815, 832, 842, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 869, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 895, 905, 906, 913, 914, 951, 957, 999, 1004, 1006, 1010, 1011, 1013, 1014, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1036, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1060], "addition": [88, 106, 140, 154, 191, 218, 236, 252, 327, 329, 359, 384, 396, 414, 424, 619, 620, 655, 661, 680, 890, 999, 1000, 1010, 1018, 1029, 1047, 1058], "additional_nois": 75, "additive_chi2": [629, 647, 774, 783], "additive_chi2_kernel": [2, 412, 647, 768, 774, 1002, 1060], "additivechi2sampl": [2, 648, 649, 650, 651, 767, 768, 1002, 1055, 1057], "address": [43, 83, 222, 252, 358, 379, 384, 415, 416, 424, 455, 666, 1006, 1007, 1012, 1013, 1014, 1015, 1016, 1020, 1034, 1049], "adelr": 1049, "adequ": [372, 390, 576, 1054], "adeyemi": 1059, "adher": [2, 371, 386, 398, 951, 952, 1041, 1042], "adien": 1057, "adijohar": 1055, "adil": 1056, "adimension": 191, "adithya": 1046, "aditi": 1059, "aditya": [1047, 1049, 1050, 1051, 1055, 1056], "adityadaflapurkar": 1049, "adjac": [416, 421, 460, 470, 594, 595, 644, 700, 704, 963, 1007, 1013], "adjacency_matrix": 416, "adjust": [2, 43, 48, 71, 73, 84, 93, 111, 138, 151, 168, 188, 222, 245, 250, 258, 277, 294, 326, 340, 354, 359, 391, 416, 417, 421, 423, 424, 533, 562, 563, 566, 568, 570, 571, 573, 667, 668, 675, 677, 683, 684, 685, 713, 714, 717, 723, 724, 764, 766, 795, 804, 848, 849, 851, 852, 883, 905, 906, 913, 914, 915, 918, 921, 923, 945, 1009, 1010, 1014, 1020, 1031, 1038, 1041, 1047, 1057], "adjusted_mutual_info_scor": [2, 72, 73, 84, 93, 416, 714, 724, 742, 764, 766, 795, 1010, 1041, 1049, 1053, 1057], "adjusted_rand_index": 714, "adjusted_rand_scor": [2, 72, 73, 84, 93, 359, 416, 713, 724, 742, 766, 795, 1010, 1054], "administr": [402, 403], "admir": [1056, 1057], "admiss": [249, 372], "adopt": [386, 388, 396, 398, 909, 1010, 1024, 1049, 1056, 1058], "adoublet": [1056, 1057], "adpot": 332, "adrian": [1054, 1055, 1056], "adrien": 1041, "adrin": [0, 399, 405, 410, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "adrinjalali": [1044, 1053], "adult": [333, 505, 1020], "advanc": [44, 156, 188, 192, 244, 246, 276, 296, 373, 384, 416, 421, 497, 510, 544, 641, 648, 792, 806, 862, 871, 874, 893, 922, 999, 1002, 1010, 1013, 1020, 1031, 1034, 1038, 1043], "advani": 1053, "advantag": [43, 44, 74, 90, 92, 124, 129, 152, 218, 219, 245, 262, 277, 296, 330, 334, 367, 398, 414, 420, 421, 424, 426, 449, 453, 468, 543, 598, 658, 683, 684, 772, 841, 842, 843, 873, 874, 913, 914, 915, 916, 917, 918, 919, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1013, 1014, 1018, 1020, 1024, 1025, 1026, 1044], "advic": [392, 426, 631, 632], "advik": [1058, 1059], "advis": [52, 219, 252, 367, 384, 416, 424, 445, 655, 661, 663, 669, 671, 681, 696, 1002, 1006, 1012, 1014, 1025, 1055], "advoc": 1011, "aeberhard": 381, "aesthet": [317, 1026, 1046], "af": 73, "affan": 1047, "affanv14": 1048, "affect": [46, 62, 113, 154, 182, 190, 191, 222, 242, 255, 256, 279, 286, 322, 332, 367, 371, 372, 373, 380, 398, 401, 414, 416, 419, 420, 422, 424, 427, 429, 452, 458, 465, 481, 483, 487, 558, 559, 578, 708, 721, 797, 809, 812, 813, 814, 823, 827, 828, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 893, 894, 904, 918, 1009, 1013, 1025, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1059], "affili": 379, "affin": [2, 27, 71, 72, 79, 84, 98, 99, 188, 317, 338, 376, 386, 398, 421, 448, 449, 460, 462, 470, 521, 544, 700, 704, 713, 714, 726, 746, 802, 804, 909, 930, 1004, 1007, 1010, 1031, 1035, 1036, 1041, 1042, 1045, 1051, 1052, 1054, 1056], "affinity_matrix": [700, 704], "affinity_matrix_": [448, 460, 700], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 330, 416, 1041, 1044, 1045, 1049, 1052, 1054, 1055, 1056, 1057, 1058], "affirm": 43, "afnlp": 1024, "afor": [905, 906], "aforement": [372, 1011], "afraid": 402, "africa": 1020, "afroj": 1058, "aft": [323, 1044], "aftab": 1050, "after": [43, 55, 58, 59, 63, 81, 88, 90, 104, 105, 109, 114, 126, 138, 149, 154, 157, 159, 162, 169, 173, 180, 182, 184, 186, 191, 196, 211, 218, 255, 256, 259, 264, 276, 285, 296, 297, 305, 307, 317, 318, 321, 322, 358, 359, 373, 379, 381, 383, 384, 386, 388, 390, 391, 392, 396, 398, 410, 412, 413, 414, 416, 417, 420, 421, 424, 425, 428, 450, 455, 458, 459, 460, 461, 464, 470, 524, 541, 545, 559, 562, 563, 568, 569, 570, 571, 606, 636, 639, 667, 668, 675, 676, 677, 682, 684, 685, 686, 687, 701, 721, 735, 765, 803, 806, 807, 812, 813, 862, 869, 873, 886, 892, 913, 918, 919, 934, 999, 1000, 1004, 1006, 1010, 1014, 1015, 1020, 1022, 1024, 1025, 1026, 1030, 1041, 1044, 1048, 1049, 1052, 1053, 1056, 1059], "afterward": [58, 388, 544, 550, 837], "ag": [105, 173, 191, 193, 205, 207, 218, 236, 256, 257, 259, 270, 317, 329, 330, 331, 333, 379, 381, 505, 1034], "again": [43, 58, 102, 106, 151, 179, 181, 183, 191, 242, 277, 358, 367, 388, 393, 398, 399, 416, 417, 418, 423, 424, 480, 576, 577, 643, 656, 660, 662, 664, 670, 672, 674, 701, 999, 1006, 1010, 1024, 1038, 1041, 1049, 1058], "against": [64, 72, 118, 133, 141, 152, 168, 196, 209, 210, 227, 235, 252, 285, 323, 326, 347, 379, 384, 399, 410, 414, 416, 420, 424, 446, 518, 551, 557, 560, 685, 687, 764, 766, 797, 811, 816, 818, 838, 842, 975, 1002, 1006, 1010, 1011, 1013, 1025, 1028], "agamemnon": [1048, 1049, 1050, 1051, 1053, 1054], "agarw": [1048, 1049, 1051], "agath": 1055, "agc": 183, "agct": 183, "agent": 1034, "agg": 180, "aggfunc": 287, "agglo": [86, 453], "agglom": [2, 51, 55, 71, 72, 77, 79, 82, 95, 97, 102, 188, 239, 241, 336, 337, 416, 449, 453, 511, 700, 787, 866, 1031, 1044], "agglomer": [2, 44, 68, 71, 85, 169, 171, 188, 201, 217, 254, 289, 301, 336, 337, 376, 416, 424, 453, 511, 609, 615, 654, 809, 814, 873, 1031, 1036], "agglomerativeclust": [2, 74, 75, 76, 79, 82, 87, 91, 97, 102, 398, 416, 448, 450, 453, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1058], "aggreg": [95, 142, 236, 279, 285, 290, 330, 332, 416, 423, 425, 543, 564, 565, 603, 730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 799, 800, 1011, 1013, 1020, 1057], "aggress": [2, 47, 225, 675, 676, 812, 813, 1032, 1036, 1042], "aggressive_elimin": [812, 813, 999], "agnost": [1009, 1018, 1059], "ago": [51, 388, 1030], "agraw": [1044, 1049, 1055, 1056], "agre": [25, 168, 392, 399, 416, 795], "agreement": [0, 2, 416, 713, 725, 764, 766, 804, 1010], "agricultur": 1006, "aguiar": 425, "agundez": 1049, "ahead": 897, "ahmadi": 1052, "ahmadjubair33": 1055, "ahmedbgh": [1056, 1057], "ahn": 1053, "ahuja": [1048, 1055, 1056], "ai": 420, "ai8rahim": 1044, "aic": [2, 164, 188, 197, 203, 204, 205, 206, 212, 226, 266, 510, 660, 662, 663, 664, 665, 807, 874, 893, 999, 1031, 1041, 1048, 1054, 1055], "aic_criterion": 205, "aid": [273, 416, 801, 802, 1007, 1034, 1041, 1053], "aidan": 1049, "aidar": 1055, "aig": 51, "aiko": 1056, "aim": [52, 58, 114, 154, 187, 222, 270, 305, 338, 351, 373, 379, 382, 384, 398, 410, 416, 418, 424, 456, 1006, 1010, 1013, 1020, 1025, 1029, 1055], "air": [180, 773], "airport": 773, "airspe": 384, "aisha": 1059, "aishgrt1": 1049, "aishwarya": 1049, "aishwaryark": 1048, "aistat": 1023, "aivision2020": 1048, "aj": [503, 1055], "ak": [414, 1055, 1056], "aka": [2, 45, 312, 358, 396, 424, 460, 545, 547, 549, 553, 556, 590, 591, 624, 631, 660, 661, 663, 664, 665, 667, 668, 671, 675, 676, 677, 679, 685, 686, 687, 750, 880, 884, 886, 1006, 1014, 1024, 1043, 1055], "akai": 1054, "akaik": [205, 207, 266, 665, 807, 999, 1006], "akash": [1049, 1059], "aki": [1055, 1056, 1057], "akihiro": 1059, "akin": [43, 219, 398], "akinkunl": 1051, "akitti": 1046, "akshai": [1045, 1048, 1053], "akshay0724": 1048, "akshayah3": 1045, "akshita": 1056, "al": [0, 2, 50, 111, 112, 138, 153, 205, 310, 379, 381, 413, 416, 418, 421, 423, 424, 425, 459, 507, 528, 529, 537, 544, 550, 553, 572, 691, 692, 728, 729, 848, 850, 870, 871, 906, 956, 957, 1006, 1007, 1010, 1016, 1020, 1022, 1025, 1026, 1049, 1054, 1057, 1058], "ala": [1056, 1057], "aladago": 1051, "alam": [1056, 1057], "alan": [1048, 1049, 1052, 1054, 1055, 1059], "alastuei": 1044, "albeit": 62, "albert": [0, 374, 1048, 1049, 1050, 1053, 1054], "alberto": [1050, 1054, 1055, 1059], "alcalin": 381, "alcohol": [322, 381], "alcorn": 1049, "aldrian": 1045, "aleator": 52, "alec": 1051, "alejandro": [1042, 1047, 1058], "alek": [1054, 1055], "aleksandr": 1048, "aleksandra": 1052, "alemagnani": 1044, "alert": 1048, "alessandro": [1051, 1053, 1056], "alessia": 1054, "alex": [410, 424, 1025, 1041, 1044, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058], "alexand": [0, 406, 416, 421, 544, 879, 1043, 1044, 1045, 1047, 1048, 1049, 1053, 1054, 1055, 1058], "alexandercbooth": 1048, "alexandr": [0, 124, 399, 405, 406, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "alexandracraciun": 1053, "alexandru": 447, "alexanmv": 1055, "alexei": 1046, "alexfield": 1047, "alexgoryainov": 1051, "alexi": [1041, 1044, 1045, 1048, 1058, 1059], "alexl": [1057, 1058], "alexqiao": 1059, "alexryndin": 1049, "alexshack": [1051, 1052, 1053], "alfalfa": 57, "alfano": 1048, "alfaro": [0, 374, 1052, 1053, 1054, 1055, 1056], "alfr": 0, "algebra": [372, 382, 387, 396, 421, 424, 470, 879, 1020], "algesheim": 416, "algo": [78, 133], "algo_param": [79, 97], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 67, 71, 72, 77, 78, 80, 81, 85, 91, 92, 93, 94, 95, 96, 97, 101, 102, 104, 112, 113, 117, 124, 126, 138, 139, 140, 144, 147, 155, 188, 196, 206, 207, 221, 232, 234, 240, 242, 244, 248, 249, 255, 262, 263, 264, 267, 273, 276, 285, 297, 303, 304, 306, 310, 317, 319, 322, 326, 327, 328, 331, 333, 338, 339, 340, 346, 358, 359, 360, 367, 371, 373, 377, 378, 379, 380, 381, 384, 385, 386, 387, 392, 393, 397, 398, 401, 412, 413, 416, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 477, 482, 483, 486, 490, 491, 492, 496, 512, 520, 521, 522, 523, 524, 531, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 562, 563, 564, 565, 568, 569, 572, 600, 612, 613, 619, 620, 644, 646, 648, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 713, 714, 717, 726, 728, 744, 746, 752, 783, 787, 788, 802, 804, 806, 807, 841, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 869, 874, 878, 880, 893, 897, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 939, 956, 957, 959, 974, 978, 984, 1000, 1002, 1005, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "algorithm_nam": 78, "ali": [1046, 1049, 1050, 1053, 1054, 1056, 1057, 1058], "alia": [52, 252, 385, 392, 398, 407, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 619, 620, 626, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 983, 1016, 1030, 1041, 1055], "alias": [81, 82, 252, 382, 384, 387, 407, 606, 1041, 1045, 1055], "aliased_sample_weight": 252, "align": [70, 152, 154, 187, 238, 261, 287, 360, 398, 698, 702, 1002, 1013, 1024, 1035, 1036, 1057, 1058], "alihan": [1054, 1060], "alik": [421, 1008], "alin": 1054, "alison": 1048, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 83, 87, 88, 89, 90, 95, 99, 109, 115, 121, 124, 126, 127, 136, 143, 144, 146, 147, 151, 154, 161, 162, 173, 180, 181, 183, 188, 190, 191, 192, 194, 198, 203, 204, 210, 211, 212, 218, 219, 220, 221, 222, 227, 229, 233, 235, 236, 238, 239, 245, 251, 252, 255, 256, 259, 262, 264, 266, 270, 274, 277, 278, 279, 280, 282, 283, 284, 286, 288, 294, 297, 300, 302, 314, 317, 318, 322, 326, 327, 328, 329, 331, 332, 333, 334, 336, 338, 339, 340, 344, 347, 351, 352, 354, 355, 358, 359, 360, 363, 366, 367, 371, 372, 373, 377, 379, 380, 381, 382, 384, 386, 388, 389, 390, 392, 393, 396, 397, 398, 399, 403, 407, 410, 412, 413, 414, 415, 416, 417, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 512, 517, 518, 524, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 711, 714, 718, 722, 723, 724, 725, 726, 727, 729, 730, 732, 735, 737, 738, 739, 741, 742, 744, 745, 746, 747, 751, 754, 755, 757, 759, 760, 762, 765, 770, 778, 783, 787, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 815, 816, 818, 819, 821, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 935, 937, 939, 940, 941, 945, 948, 949, 950, 951, 963, 966, 972, 984, 993, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1060], "all_class": 47, "all_displai": [2, 393, 1056], "all_estim": [2, 393, 1051, 1052, 1056], "all_funct": [2, 393, 1056], "all_label": 910, "all_model": 151, "all_or_ani": [993, 1051], "all_scor": 742, "all_split": [43, 52], "all_uppercas": 424, "allan": [358, 414, 1053], "allclos": [125, 156, 1022], "allefeld": 1054, "allen": [331, 1044, 1046, 1048, 1051], "allend": [1052, 1054], "allevi": [92, 154, 198, 203, 416, 1012], "allison": 331, "alloc": [2, 42, 45, 62, 96, 188, 288, 328, 380, 384, 385, 416, 424, 451, 455, 467, 496, 545, 547, 549, 593, 597, 600, 655, 661, 669, 671, 812, 813, 815, 832, 837, 840, 999, 1020, 1029, 1031, 1035, 1036, 1045, 1046, 1051, 1052, 1058, 1060], "allow": [25, 43, 58, 91, 93, 108, 109, 120, 128, 129, 141, 142, 149, 157, 175, 180, 181, 182, 184, 206, 212, 218, 222, 236, 239, 246, 249, 256, 258, 259, 261, 270, 276, 290, 296, 326, 327, 328, 329, 331, 334, 351, 352, 358, 366, 367, 371, 378, 379, 384, 385, 386, 388, 391, 392, 393, 396, 398, 399, 407, 410, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 445, 451, 452, 454, 455, 457, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 505, 532, 533, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 602, 603, 606, 612, 619, 620, 624, 636, 637, 639, 643, 644, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 699, 701, 708, 751, 771, 774, 783, 787, 790, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 820, 823, 827, 830, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 863, 864, 868, 870, 871, 873, 875, 876, 878, 879, 880, 885, 892, 893, 897, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 937, 939, 940, 951, 952, 973, 999, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "allow_nan": [930, 938, 940, 1057], "allow_nd": [939, 940], "allow_non": 720, "allow_single_clust": [79, 454], "allow_unlabel": [122, 253, 532], "allowed_extens": 512, "allwein": 294, "almeida": [1042, 1043, 1054], "almeidayoel": 1055, "almer": 1048, "almost": [43, 70, 144, 150, 220, 226, 252, 255, 270, 291, 322, 334, 339, 367, 377, 379, 388, 390, 396, 397, 398, 407, 416, 420, 421, 478, 479, 480, 481, 483, 484, 485, 806, 999, 1005, 1006, 1009, 1010, 1025, 1049, 1054], "almubarak": [1054, 1055], "alon": [191, 222, 282, 347, 398, 414, 657, 678, 689, 751, 1048, 1050], "along": [2, 51, 53, 91, 94, 101, 118, 145, 151, 154, 180, 206, 218, 250, 252, 280, 326, 359, 360, 367, 379, 384, 388, 392, 393, 398, 402, 407, 410, 413, 421, 423, 424, 425, 428, 542, 559, 596, 620, 621, 639, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 685, 687, 690, 691, 692, 693, 694, 695, 788, 789, 801, 809, 823, 882, 883, 886, 887, 890, 891, 892, 893, 898, 899, 900, 902, 903, 904, 935, 959, 984, 990, 999, 1006, 1013, 1020, 1023, 1034, 1041, 1046, 1047, 1049, 1053, 1054], "alongsid": [83, 384, 390, 398, 402, 425, 834, 835, 836, 837, 838, 840, 1010, 1017, 1029, 1030], "alonso": [1052, 1054], "aloqe": 1059, "alpaydin": 381, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 80, 87, 91, 95, 100, 109, 115, 118, 124, 126, 127, 129, 130, 132, 133, 138, 140, 141, 147, 151, 154, 155, 156, 158, 159, 160, 173, 175, 178, 180, 181, 182, 183, 184, 186, 187, 191, 198, 199, 200, 201, 203, 204, 205, 206, 207, 212, 213, 215, 216, 218, 219, 220, 222, 223, 227, 230, 231, 236, 238, 239, 242, 250, 251, 258, 261, 276, 277, 278, 279, 280, 283, 284, 286, 288, 289, 296, 297, 300, 302, 305, 307, 312, 314, 317, 318, 319, 320, 322, 324, 327, 329, 330, 333, 338, 340, 344, 345, 348, 349, 351, 352, 354, 355, 356, 358, 371, 379, 386, 390, 396, 418, 419, 421, 423, 425, 426, 428, 454, 479, 480, 486, 536, 540, 542, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 569, 604, 605, 607, 620, 622, 624, 625, 632, 640, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 696, 732, 757, 848, 849, 850, 852, 870, 871, 909, 921, 922, 923, 924, 999, 1006, 1010, 1012, 1014, 1018, 1023, 1024, 1025, 1026, 1038, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "alpha_": [43, 115, 164, 191, 199, 205, 207, 480, 620, 653, 654, 656, 660, 662, 664, 665, 670, 672, 682, 684, 1006, 1026, 1041, 1048], "alpha_1": [653, 654, 1006], "alpha_2": [653, 654, 1006], "alpha_a": 207, "alpha_b": 207, "alpha_bound": [184, 632], "alpha_h": [54, 421, 547, 549, 556, 1054], "alpha_i": [1012, 1025], "alpha_init": [199, 654, 1006, 1051], "alpha_max": [655, 656, 661, 662, 669, 670, 671, 672, 690, 693], "alpha_min": [655, 656, 659, 661, 662, 663, 665, 669, 670, 671, 672, 690, 691, 692, 693], "alpha_optim": 289, "alpha_per_target": [682, 1053], "alpha_w": [54, 421, 547, 549, 556, 1054], "alphabet": [106, 398, 731, 750], "alphalpha": 57, "alphanumer": [398, 597, 598, 600], "alphas_": [205, 207, 656, 659, 660, 662, 663, 664, 665, 670, 672, 691, 692, 1041, 1044, 1054], "alphas_enet": 206, "alphas_lar": 206, "alphas_lasso": 206, "alphas_positive_enet": 206, "alphas_positive_lar": 206, "alphas_positive_lasso": 206, "alphavantag": 51, "alphonsu": 1051, "alreadi": [2, 43, 45, 49, 90, 93, 120, 129, 138, 154, 159, 173, 191, 246, 253, 255, 258, 270, 277, 283, 297, 329, 332, 384, 385, 389, 396, 398, 414, 415, 418, 420, 422, 423, 428, 445, 500, 508, 532, 542, 576, 577, 643, 655, 658, 673, 674, 675, 676, 677, 683, 685, 686, 687, 694, 695, 777, 787, 848, 868, 876, 882, 883, 885, 890, 910, 913, 914, 942, 968, 999, 1002, 1016, 1020, 1021, 1030, 1038, 1042, 1046, 1049, 1053, 1054, 1055, 1056], "alsadi": 1049, "alsaedi": 1054, "alsalhi": [0, 1044, 1045], "alsawadi": 1054, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 81, 83, 88, 92, 93, 95, 99, 104, 105, 111, 113, 117, 118, 124, 131, 133, 138, 141, 144, 146, 148, 149, 150, 151, 152, 154, 157, 159, 169, 170, 171, 173, 175, 177, 180, 187, 188, 191, 192, 193, 194, 196, 199, 200, 202, 207, 210, 211, 214, 218, 219, 220, 222, 223, 227, 235, 236, 238, 248, 250, 252, 255, 256, 267, 270, 274, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 290, 294, 296, 297, 305, 308, 309, 310, 312, 317, 318, 319, 321, 322, 326, 327, 328, 329, 333, 334, 341, 343, 344, 345, 347, 349, 351, 358, 359, 360, 362, 363, 366, 367, 371, 372, 373, 377, 378, 379, 381, 382, 383, 384, 386, 388, 390, 392, 393, 396, 397, 398, 399, 402, 404, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 445, 446, 447, 449, 450, 453, 454, 455, 456, 458, 460, 470, 471, 473, 475, 490, 492, 501, 505, 507, 512, 517, 541, 542, 544, 545, 550, 555, 558, 560, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 616, 617, 618, 619, 620, 631, 641, 642, 644, 652, 653, 654, 655, 656, 659, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 681, 685, 687, 690, 693, 696, 700, 703, 704, 708, 719, 722, 725, 732, 738, 739, 747, 752, 772, 788, 789, 792, 793, 796, 806, 807, 809, 811, 812, 813, 823, 826, 829, 835, 836, 837, 838, 839, 840, 842, 852, 855, 856, 857, 859, 860, 861, 863, 864, 865, 869, 870, 871, 873, 875, 876, 881, 882, 886, 890, 893, 898, 902, 915, 918, 921, 922, 923, 924, 932, 939, 959, 966, 973, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "alt": [57, 277, 340, 358, 359, 360, 379, 392, 496], "altai": 1051, "alter": [62, 187, 386, 398, 738, 739, 747, 792, 793, 796, 1046, 1050, 1053], "altern": [43, 63, 105, 118, 145, 146, 152, 154, 159, 193, 203, 218, 236, 246, 264, 267, 270, 285, 326, 351, 358, 359, 360, 367, 379, 382, 384, 388, 390, 396, 398, 399, 402, 410, 411, 413, 414, 416, 417, 418, 420, 421, 423, 424, 426, 449, 450, 453, 454, 455, 460, 466, 471, 508, 547, 549, 550, 556, 562, 563, 566, 567, 568, 569, 573, 574, 575, 591, 597, 598, 600, 626, 629, 652, 701, 715, 717, 780, 783, 787, 790, 811, 842, 877, 883, 886, 899, 906, 908, 921, 922, 923, 924, 976, 1004, 1006, 1007, 1009, 1010, 1013, 1014, 1018, 1020, 1022, 1023, 1025, 1026, 1030, 1036, 1046, 1048, 1054, 1055, 1059], "alternate_sign": [47, 424, 591, 598, 1048], "although": [43, 48, 62, 145, 159, 190, 215, 236, 245, 263, 296, 351, 367, 373, 386, 388, 392, 398, 416, 417, 421, 424, 505, 884, 1009, 1011, 1012, 1013, 1016, 1026, 1041, 1049, 1056], "altman": [637, 1000], "altogeth": [148, 390, 1049], "alva": 1051, "alvaro": [1047, 1049], "alvin": 1049, "alwai": [144, 148, 151, 191, 198, 218, 236, 243, 249, 270, 279, 282, 286, 324, 344, 351, 354, 359, 367, 371, 372, 378, 382, 384, 385, 386, 390, 392, 397, 398, 402, 410, 414, 416, 417, 420, 423, 424, 425, 426, 433, 439, 451, 457, 472, 473, 475, 477, 490, 491, 492, 496, 505, 517, 518, 553, 558, 560, 561, 563, 565, 567, 568, 569, 570, 571, 573, 574, 577, 579, 590, 597, 598, 600, 603, 620, 636, 637, 639, 641, 642, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 685, 687, 688, 704, 714, 718, 724, 730, 731, 732, 733, 741, 743, 744, 748, 791, 794, 795, 806, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 846, 847, 856, 857, 864, 865, 871, 878, 886, 891, 893, 896, 898, 899, 900, 901, 902, 903, 904, 906, 914, 915, 916, 918, 919, 921, 922, 924, 958, 968, 969, 999, 1000, 1002, 1004, 1006, 1009, 1010, 1013, 1016, 1018, 1022, 1023, 1025, 1026, 1034, 1041, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059], "always_accept_polici": 270, "always_reject_polici": 270, "alyssa": [1044, 1048], "alyssaq": 1047, "am": [104, 109, 113, 159, 192, 358, 389, 418, 482, 502, 1048], "amai": 1057, "aman": [1047, 1048, 1049, 1055, 1056], "amanda": [1049, 1052, 1053, 1054, 1055], "amar": [1055, 1056, 1057, 1059], "amax": 111, "amazon": 51, "amber": 398, "ambient": 242, "ambigu": [277, 389, 424, 581, 721, 957, 1013, 1050, 1052, 1054], "ambival": 95, "ambrosio": 1048, "ambroz": [1051, 1052], "amelia": 1000, "amen": [390, 396, 426, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 999], "america": [50, 51, 113, 310, 379, 860, 1020], "american": [50, 51, 104, 114, 379, 416, 418, 422, 423, 424, 477, 482, 740, 893], "amerr": 1059, "ames_h": 255, "amg": [81, 101, 416, 460, 470, 700, 704, 1051, 1055, 1056], "amherst": 379, "ami": [72, 84, 93, 416, 713], "amicel": [1041, 1044], "amin": 111, "aminaka": 1045, "amit": [1041, 1055, 1056], "amlan": 1047, "amo": 1044, "amol": 1054, "among": [2, 64, 183, 192, 194, 196, 218, 266, 283, 296, 366, 373, 379, 386, 398, 399, 414, 419, 455, 457, 521, 528, 803, 838, 856, 861, 863, 915, 918, 921, 922, 923, 924, 999, 1002, 1010, 1011, 1017, 1020, 1025, 1026, 1041, 1047, 1048, 1051, 1058], "amongst": [51, 1026], "amor": [0, 395, 1055, 1056, 1057, 1058, 1059], "amormachin": 1044, "amort": 1013, "amount": [37, 38, 47, 51, 80, 88, 101, 111, 114, 124, 128, 139, 141, 181, 191, 203, 222, 236, 250, 270, 328, 334, 336, 339, 341, 347, 354, 360, 371, 372, 373, 396, 416, 418, 421, 423, 424, 425, 451, 462, 477, 547, 548, 550, 552, 572, 605, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 674, 690, 693, 701, 812, 813, 853, 854, 859, 894, 909, 910, 923, 924, 999, 1005, 1006, 1009, 1012, 1014, 1020, 1022, 1023, 1024, 1025, 1054, 1058], "amount_fraud": 270, "amount_iter": 339, "amount_label": 339, "amount_test": 270, "amount_train": 270, "amourav": 1050, "amplitud": [151, 180, 182, 212, 1006], "amplitude_nois": 75, "amput": 1030, "amrcod": 1055, "amsterdam": [410, 881, 1021], "amy12xx": 1053, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 124, 125, 126, 127, 128, 129, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 162, 169, 173, 175, 176, 177, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 193, 196, 197, 198, 199, 202, 203, 205, 206, 213, 218, 219, 220, 222, 223, 225, 226, 232, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 248, 249, 250, 251, 252, 253, 255, 259, 261, 262, 264, 266, 267, 269, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 292, 296, 297, 300, 303, 304, 305, 308, 310, 317, 322, 323, 324, 327, 328, 329, 331, 332, 333, 334, 337, 341, 343, 344, 346, 347, 349, 350, 351, 358, 359, 360, 362, 365, 366, 367, 371, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 397, 398, 399, 401, 402, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 437, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 512, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 584, 585, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 621, 628, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 718, 720, 721, 727, 729, 730, 736, 738, 739, 743, 744, 746, 751, 752, 754, 755, 757, 759, 760, 762, 765, 767, 768, 772, 773, 775, 776, 777, 778, 779, 782, 784, 785, 786, 787, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 936, 937, 939, 940, 942, 943, 946, 947, 951, 952, 953, 955, 956, 957, 959, 961, 962, 965, 966, 967, 968, 969, 970, 972, 973, 974, 979, 980, 983, 984, 990, 993, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "ana": [1052, 1054, 1059], "anaconda": [0, 372, 382, 388], "anak": 1053, "analog": [43, 57, 153, 390, 423, 1010, 1011, 1025, 1050], "analogi": [1009, 1010], "analys": [238, 366, 421, 812, 813, 1007, 1029, 1034], "analysen": 458, "analysi": [2, 12, 27, 44, 46, 48, 49, 58, 62, 65, 71, 92, 98, 100, 111, 112, 113, 114, 115, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133, 148, 165, 187, 188, 191, 207, 239, 260, 262, 266, 267, 270, 273, 276, 277, 281, 287, 298, 299, 300, 308, 309, 317, 322, 354, 359, 376, 379, 381, 384, 386, 399, 413, 416, 418, 423, 424, 428, 447, 455, 456, 481, 483, 484, 490, 491, 493, 511, 513, 521, 524, 540, 541, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 564, 565, 640, 647, 697, 699, 700, 701, 702, 719, 728, 734, 735, 765, 797, 798, 801, 802, 806, 809, 835, 839, 855, 862, 873, 874, 879, 889, 893, 901, 956, 957, 1000, 1006, 1007, 1009, 1010, 1020, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1041, 1042, 1043, 1045, 1050], "analyst": 876, "analyt": [129, 421, 426, 541, 629, 717, 1000, 1004, 1010, 1028, 1034], "analyz": [43, 46, 55, 203, 278, 285, 331, 358, 360, 389, 390, 416, 424, 512, 597, 598, 600, 797, 1007, 1010, 1017, 1018, 1026, 1041, 1050], "anam": 1058, "anand": [1049, 1053], "ananiad": 1024, "anantharam": 1055, "anavelyz": 1054, "ana\u00ebl": 1051, "anbari": 537, "anchor": 287, "ander": [1045, 1051], "andersen": [752, 1055], "anderson": [50, 310, 379, 507, 1047, 1053, 1059], "andi": [1041, 1048], "ando": 1046, "andr": [1048, 1055], "andrea": [0, 399, 405, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "andreh7": 1048, "andrei": [1056, 1058, 1059], "andrew": [416, 470, 700, 704, 726, 746, 804, 888, 1014, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "andrewww": 1049, "andrii": 1055, "andriushchenko": [1047, 1048], "androutsopoulo": [848, 1012], "andrzej": [547, 549, 556], "andr\u00e1": [1054, 1055, 1056, 1057], "andr\u00e9": [1054, 1055, 1057], "ands": 884, "andyscanzio": 1058, "ang": 1048, "angel": [0, 406], "angela": [1051, 1052, 1056], "angelaambroz": 1052, "angelotti": 1060, "angermuel": [1045, 1046], "angl": [2, 53, 70, 127, 173, 261, 262, 263, 266, 267, 381, 421, 540, 546, 548, 551, 552, 554, 555, 557, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 687, 691, 692, 693, 694, 695, 701, 1007, 1008, 1032, 1036, 1041], "angmar": 57, "angu": [1048, 1049, 1055], "angular": [422, 701, 773], "anh": [547, 549, 556], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 81, 90, 92, 102, 156, 168, 173, 181, 182, 190, 191, 192, 193, 194, 207, 218, 222, 236, 245, 248, 249, 252, 262, 266, 267, 270, 276, 277, 279, 282, 285, 294, 310, 317, 318, 321, 326, 328, 329, 331, 334, 347, 351, 360, 367, 371, 372, 373, 378, 379, 381, 382, 384, 386, 388, 389, 390, 392, 397, 398, 399, 402, 404, 407, 410, 412, 413, 414, 416, 417, 420, 421, 422, 423, 424, 425, 441, 448, 454, 456, 457, 458, 460, 462, 464, 465, 469, 472, 475, 496, 497, 517, 518, 532, 543, 546, 548, 555, 560, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 588, 589, 591, 597, 598, 600, 602, 612, 619, 620, 629, 636, 641, 642, 654, 657, 667, 668, 675, 676, 677, 678, 685, 686, 687, 688, 689, 701, 705, 708, 709, 713, 725, 726, 728, 733, 745, 746, 761, 764, 766, 783, 787, 788, 789, 790, 801, 802, 804, 809, 812, 813, 821, 822, 842, 845, 853, 854, 859, 863, 872, 873, 877, 878, 882, 884, 886, 887, 894, 903, 904, 907, 910, 913, 914, 921, 922, 923, 924, 925, 927, 935, 939, 940, 946, 979, 993, 999, 1000, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1033, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "aniket": [1056, 1058], "anil": [416, 460, 470], "anim": [358, 424], "anirban": 424, "aniruddha": 1049, "anish": [1046, 1047], "anisha": 1051, "aniso": [79, 97], "anisotrop": [92, 177, 426, 626, 628, 631], "anisotropicli": [79, 97], "anjirbag": 1049, "ankan": 1046, "ankerst": [416, 458, 465], "ankit": [1044, 1051, 1053, 1055], "ankit810": 1052, "ankita": 1049, "ankur": [1046, 1057], "ann": [1041, 1053, 1055], "anna": 1049, "annaayzenshtat": 1049, "annal": [173, 203, 205, 381, 423, 482, 525, 526, 527, 568, 569, 665, 1006], "annau": 1054, "annegnx": 1057, "anno": [701, 1007], "annoi": 372, "annot": [2, 43, 48, 63, 161, 171, 196, 239, 280, 283, 358, 384, 385, 386, 416, 725, 927, 1010, 1026, 1050], "annotationbbox": 239, "announc": [0, 326, 327, 328, 329, 330, 331, 332, 333, 334, 388], "annual": [381, 416, 735, 765, 910, 1010, 1023], "anomali": [14, 48, 113, 155, 188, 232, 244, 255, 303, 304, 379, 477, 521, 531, 572, 648, 686, 859, 874, 917, 1016, 1029, 1031, 1047, 1048], "anomaly_algorithm": 245, "anomaly_frac": 255, "anoth": [43, 72, 124, 129, 138, 149, 153, 173, 175, 183, 187, 191, 207, 222, 226, 243, 245, 252, 256, 262, 270, 276, 278, 279, 282, 286, 290, 307, 358, 360, 362, 367, 371, 373, 378, 379, 382, 384, 386, 390, 396, 398, 410, 413, 416, 420, 421, 423, 424, 425, 427, 450, 452, 460, 463, 470, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 517, 547, 549, 556, 682, 685, 701, 718, 728, 815, 831, 832, 872, 873, 894, 999, 1000, 1005, 1006, 1007, 1010, 1011, 1013, 1016, 1020, 1024, 1025, 1050, 1051, 1058], "anova": [2, 49, 89, 108, 167, 169, 172, 173, 188, 342, 417, 513, 524, 601, 604, 605, 607, 608, 609, 613, 614, 615, 618, 722, 835, 839, 873, 874, 893, 913, 918, 1025, 1031], "anova__percentil": [89, 350], "anova_filt": 170, "anova_svm": 170, "ansam": 1057, "answer": [164, 190, 276, 384, 396, 410, 415, 735, 765, 1010, 1034], "ant": [727, 763, 1010], "anthoni": [1046, 1048, 1049], "anthony22": [1056, 1057], "anti": [203, 367, 615, 848, 1012], "anti_alias": [81, 82], "anticip": 52, "antoin": [1041, 1043, 1044, 1045, 1048], "antoni": [1045, 1047, 1053, 1056, 1060], "antonin": 1048, "antonio": [1049, 1051], "anubhav": 1049, "anuja": 1051, "anulekh": 1056, "anupam": [907, 1022, 1056], "anurag": 1060, "any_method": 969, "anymor": [154, 193, 218, 278, 326, 327, 347, 367, 388, 417, 436, 679, 1047, 1050, 1053, 1054, 1055, 1057, 1058, 1060], "anyon": [384, 399, 415, 1033, 1034], "anyth": [360, 390, 398, 407, 417, 420, 969, 973, 1055], "anywai": [48, 358, 386, 674, 694, 695], "anywher": 318, "anz": 1042, "aoif": [717, 1010], "ap": [2, 283, 716, 717, 1010], "apart": [191, 329, 347, 396, 398, 407, 417, 419, 425, 734, 1025, 1034, 1049], "api": [0, 47, 51, 85, 91, 135, 143, 183, 188, 244, 246, 252, 256, 257, 273, 278, 285, 286, 297, 333, 334, 359, 360, 373, 377, 378, 384, 387, 388, 393, 394, 396, 397, 399, 402, 410, 415, 421, 423, 424, 426, 430, 433, 434, 435, 438, 440, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 505, 513, 517, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 572, 573, 575, 576, 577, 578, 579, 588, 589, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 667, 680, 686, 697, 698, 699, 700, 701, 711, 806, 807, 812, 813, 815, 832, 839, 857, 859, 861, 862, 865, 869, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 911, 917, 918, 932, 951, 952, 975, 993, 999, 1008, 1009, 1010, 1013, 1020, 1024, 1029, 1030, 1031, 1034, 1036, 1038, 1039, 1040, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "api_refer": 384, "apk": 402, "apostolo": 1056, "appar": [117, 1012, 1034], "appdata": 402, "appeal": 399, "appear": [0, 47, 81, 83, 141, 191, 194, 271, 273, 274, 303, 304, 312, 314, 318, 337, 351, 358, 359, 360, 379, 382, 384, 389, 398, 418, 421, 496, 497, 564, 576, 577, 588, 619, 636, 637, 639, 706, 709, 711, 721, 725, 727, 791, 798, 810, 827, 848, 849, 850, 851, 852, 915, 918, 959, 1006, 1012, 1016, 1041, 1049, 1053, 1054], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 85, 96, 105, 131, 141, 142, 144, 149, 151, 154, 187, 194, 211, 222, 223, 225, 226, 233, 236, 250, 251, 276, 279, 285, 286, 289, 312, 313, 323, 339, 347, 350, 358, 359, 360, 362, 366, 390, 398, 417, 424, 667, 668, 913, 914, 920, 947, 1020], "appendix": [654, 685, 1006, 1020], "appl": [51, 371, 382, 396, 1011], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 81, 82, 90, 91, 93, 97, 105, 109, 118, 120, 124, 125, 130, 132, 134, 143, 144, 149, 151, 169, 175, 191, 193, 203, 207, 222, 223, 232, 238, 239, 240, 245, 250, 252, 276, 277, 279, 288, 290, 296, 306, 317, 321, 322, 327, 347, 351, 360, 366, 367, 371, 376, 384, 386, 388, 392, 396, 397, 398, 407, 413, 414, 416, 417, 418, 420, 421, 423, 424, 425, 426, 428, 448, 454, 460, 470, 472, 473, 475, 477, 482, 490, 491, 492, 493, 517, 518, 525, 526, 527, 533, 540, 541, 542, 543, 544, 546, 548, 550, 551, 552, 557, 558, 559, 562, 563, 566, 567, 568, 569, 573, 574, 575, 597, 598, 599, 600, 636, 641, 642, 647, 648, 650, 651, 667, 668, 677, 685, 686, 687, 700, 708, 710, 716, 720, 735, 765, 767, 768, 790, 797, 801, 802, 809, 823, 839, 842, 848, 849, 850, 851, 852, 862, 872, 873, 882, 889, 890, 893, 898, 899, 901, 902, 903, 904, 909, 920, 921, 922, 923, 924, 934, 939, 945, 949, 956, 957, 981, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1034, 1042, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055], "applic": [42, 44, 57, 84, 90, 113, 188, 196, 218, 235, 240, 269, 270, 279, 317, 334, 371, 373, 379, 381, 384, 390, 392, 393, 396, 398, 414, 415, 416, 420, 421, 422, 423, 426, 428, 452, 454, 460, 505, 507, 541, 542, 543, 562, 563, 638, 697, 698, 699, 703, 721, 738, 739, 747, 792, 793, 796, 839, 933, 999, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1022, 1026, 1029, 1030, 1031, 1033, 1034, 1041, 1042, 1047, 1049, 1052], "apply_along_axi": 315, "appr": 628, "appreci": [0, 384, 396], "approach": [44, 47, 93, 98, 101, 128, 173, 175, 186, 191, 194, 201, 205, 218, 220, 226, 236, 238, 270, 294, 323, 351, 358, 359, 360, 373, 383, 384, 390, 393, 398, 402, 404, 410, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 445, 451, 454, 456, 460, 470, 529, 541, 591, 598, 620, 644, 667, 668, 683, 684, 842, 858, 957, 999, 1000, 1006, 1007, 1010, 1011, 1013, 1014, 1020, 1024, 1025, 1028, 1029, 1034, 1045, 1057], "appropri": [25, 90, 92, 131, 180, 191, 222, 252, 285, 290, 334, 362, 367, 384, 386, 392, 398, 410, 414, 416, 420, 422, 423, 427, 452, 458, 465, 497, 498, 499, 505, 509, 510, 511, 513, 514, 519, 586, 591, 600, 601, 604, 605, 607, 608, 609, 681, 683, 696, 718, 855, 856, 857, 859, 861, 863, 864, 865, 993, 1006, 1009, 1010, 1020, 1045, 1048, 1054, 1057, 1059], "approv": [384, 399, 423], "approx": [64, 124, 250, 421, 423, 424, 1010, 1017, 1024], "approxim": [0, 2, 23, 43, 44, 64, 69, 81, 88, 113, 128, 129, 133, 142, 150, 151, 173, 176, 191, 199, 214, 218, 219, 232, 236, 240, 243, 244, 245, 248, 251, 267, 276, 281, 291, 298, 299, 306, 317, 319, 320, 322, 326, 329, 358, 360, 364, 365, 367, 376, 381, 393, 396, 398, 413, 414, 417, 419, 420, 421, 423, 426, 428, 429, 430, 440, 457, 477, 478, 481, 482, 483, 484, 490, 491, 492, 499, 505, 511, 530, 533, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 568, 569, 591, 598, 619, 620, 628, 647, 648, 649, 650, 651, 654, 666, 667, 668, 681, 683, 685, 686, 688, 696, 701, 767, 768, 773, 806, 810, 827, 834, 838, 839, 853, 854, 857, 861, 863, 864, 865, 869, 873, 874, 879, 883, 885, 886, 890, 902, 913, 918, 919, 956, 957, 983, 1003, 1004, 1005, 1006, 1007, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1036, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055], "approximate_nearest_neighbor": [297, 1031], "approximateident": 1042, "april": [379, 673, 694, 695, 1010, 1045, 1053, 1058], "apriori": 236, "apt": [382, 392, 402], "aptitud": 191, "aqua": 285, "aquantitypredict": 404, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 101, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 122, 124, 126, 129, 131, 134, 136, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 161, 169, 170, 172, 173, 175, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 227, 229, 236, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 262, 263, 264, 266, 269, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 296, 297, 299, 302, 303, 307, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 336, 338, 339, 340, 341, 345, 347, 349, 351, 354, 355, 358, 359, 360, 362, 366, 367, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 397, 398, 399, 402, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 436, 437, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 517, 518, 519, 521, 524, 525, 526, 527, 528, 529, 532, 533, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 718, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 749, 750, 751, 752, 754, 755, 757, 759, 760, 762, 763, 765, 766, 770, 771, 772, 774, 776, 777, 778, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 821, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 935, 936, 937, 939, 940, 943, 944, 945, 949, 951, 952, 956, 957, 958, 961, 962, 963, 965, 966, 969, 972, 973, 975, 980, 983, 984, 988, 989, 990, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "arab": 636, "arabi": [416, 714, 724, 795], "aradwad": 1052, "arafat": 1047, "arai": 1051, "arang": [43, 50, 52, 53, 75, 93, 95, 100, 107, 112, 113, 131, 134, 147, 148, 150, 152, 153, 157, 161, 169, 175, 177, 182, 183, 186, 187, 194, 203, 218, 221, 223, 227, 241, 248, 250, 271, 276, 279, 284, 287, 296, 297, 310, 312, 319, 329, 336, 337, 339, 341, 347, 353, 358, 360, 364, 365, 366, 367, 396, 413, 420, 424, 473, 553, 839, 888, 892, 1005, 1006, 1014, 1020, 1024], "aravindh": 1056, "arbitarili": 358, "arbitrari": [2, 43, 52, 90, 118, 124, 125, 126, 143, 182, 198, 218, 235, 236, 274, 317, 321, 323, 328, 334, 358, 366, 384, 396, 398, 410, 417, 420, 421, 423, 424, 428, 454, 458, 463, 465, 473, 541, 542, 568, 569, 590, 648, 657, 678, 689, 697, 751, 798, 810, 811, 816, 818, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 877, 879, 892, 999, 1001, 1002, 1006, 1007, 1010, 1013, 1020, 1030, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1055, 1057, 1060], "arbitrarili": [176, 262, 267, 358, 398, 426, 439, 473, 490, 491, 492, 561, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 687, 688, 689, 730, 731, 732, 733, 755, 794, 798, 846, 847, 856, 864, 871, 894, 914, 916, 919, 922, 924, 1010, 1013, 1020, 1026], "arc": [381, 423], "archana": [1051, 1053], "archit": 1047, "architectur": [382, 386, 392, 396, 402, 410, 476, 911, 1014, 1034, 1041, 1058], "archiv": [47, 294, 378, 379, 381, 382, 416, 450, 509, 511, 519, 767, 768, 1008, 1025], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [717, 1010], "arcidiacono": [1055, 1056, 1058, 1059], "arcsin": [708, 773], "arctan": [70, 262, 267, 380, 527], "arctan2": [261, 263, 266], "ard": [2, 198, 653, 654], "ard_poli": 198, "ard_scor": 198, "ardregress": [2, 198, 203, 654, 949, 1006, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058], "area": [2, 50, 52, 155, 173, 218, 236, 255, 273, 276, 283, 285, 286, 347, 351, 352, 355, 381, 384, 388, 396, 416, 424, 711, 715, 716, 717, 751, 797, 798, 1007, 1010, 1013, 1028, 1043], "aren": [16, 252, 358, 379, 388, 402, 735, 765, 1015, 1051, 1053], "arezki": 1041, "arfa": 1047, "arff": [331, 384, 505, 1053, 1056, 1057], "arg": [252, 313, 351, 385, 398, 421, 423, 430, 708, 877, 975, 977, 1006, 1012, 1013], "arg_sort_bi": 52, "argentina": 773, "argmax": [63, 131, 275, 289, 386, 423, 578, 841, 921, 1025, 1054], "argmin": [51, 150, 275, 386, 418, 540, 546, 554, 555, 694, 788, 789, 1026], "argpartit": 1048, "argsort": [54, 55, 57, 58, 59, 150, 152, 193, 194, 218, 236, 326, 336, 337, 358, 359, 379, 1018], "argument": [2, 106, 152, 194, 219, 246, 249, 252, 326, 372, 378, 379, 384, 385, 387, 389, 390, 392, 393, 396, 398, 416, 417, 420, 421, 423, 425, 427, 428, 430, 434, 438, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 465, 467, 469, 471, 472, 476, 477, 502, 505, 512, 517, 542, 544, 545, 547, 549, 560, 568, 569, 572, 576, 577, 578, 579, 586, 590, 591, 597, 598, 600, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 640, 648, 652, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 675, 677, 685, 686, 690, 693, 697, 701, 705, 707, 708, 709, 710, 711, 723, 728, 744, 751, 772, 788, 789, 815, 832, 834, 835, 836, 837, 838, 840, 841, 842, 845, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 870, 873, 877, 911, 917, 927, 937, 947, 952, 976, 978, 979, 993, 999, 1002, 1006, 1007, 1008, 1010, 1013, 1017, 1018, 1025, 1026, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "argv": 249, "ari": [72, 93, 359, 416, 714, 1046, 1052], "aria": [1049, 1050, 1056], "aric": 55, "arida": [1050, 1051, 1053, 1055, 1058], "ariel": [45, 379, 1041, 1047], "arif": 1059, "ariga": 1047, "arik": 1049, "arima": 1029, "aris": [2, 191, 279, 354, 372, 389, 392, 416, 724, 1006, 1007, 1053], "arisa": [1055, 1056], "arithmet": [251, 390, 392, 416, 560, 657, 678, 689, 713, 726, 745, 746, 766, 804, 860, 1010, 1049], "ari\u00f1o": 1044, "arjona": 1050, "arka204": [1054, 1056], "arm": [382, 384, 392, 999], "arm64": [382, 387], "arm64v8": 392, "armstrong": 1053, "arnaud": [0, 406, 1042, 1043, 1044, 1045, 1046, 1047, 1059], "arnaudov": [1053, 1055], "arnaudstiegl": 1051, "arnold": [1041, 1042], "arnoldi": [697, 698, 702], "aroma": 323, "arora": [1049, 1056], "around": [0, 43, 63, 72, 87, 117, 138, 141, 151, 181, 192, 196, 252, 255, 270, 279, 290, 315, 336, 338, 339, 347, 350, 351, 358, 359, 360, 366, 367, 379, 381, 384, 390, 396, 404, 415, 416, 420, 421, 424, 479, 480, 524, 553, 629, 649, 658, 677, 713, 751, 806, 815, 832, 859, 861, 863, 864, 865, 893, 1006, 1007, 1009, 1010, 1016, 1020, 1024, 1029, 1030, 1033, 1034, 1045, 1046], "arpack": [51, 57, 79, 81, 101, 104, 239, 333, 421, 459, 460, 461, 470, 544, 550, 553, 697, 698, 700, 702, 704, 1007, 1047, 1048, 1053, 1057, 1058, 1059], "arpanchowdhri": 1051, "arr": 334, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 81, 83, 88, 89, 96, 97, 99, 104, 106, 114, 117, 122, 125, 126, 150, 152, 154, 155, 158, 161, 170, 173, 176, 177, 178, 183, 191, 198, 200, 203, 211, 212, 215, 218, 219, 225, 235, 239, 240, 245, 249, 252, 255, 256, 259, 261, 262, 263, 265, 266, 270, 271, 272, 274, 276, 277, 280, 281, 285, 296, 310, 320, 326, 329, 330, 332, 333, 337, 343, 350, 351, 358, 365, 367, 371, 372, 377, 378, 379, 384, 385, 386, 387, 389, 390, 392, 394, 396, 397, 398, 410, 413, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 524, 528, 532, 533, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 590, 591, 592, 593, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 932, 935, 936, 937, 938, 939, 940, 941, 944, 945, 955, 956, 957, 958, 959, 961, 963, 964, 971, 972, 973, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 998, 1000, 1005, 1006, 1008, 1010, 1011, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1034, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "arrang": [2, 58, 296, 641, 844, 845, 846, 847, 1010], "array_api": [412, 1060], "array_api_compat": [412, 1060], "array_api_dispatch": [412, 476, 911], "array_api_support": [412, 932], "array_convert": 940, "array_equ": [578, 1048], "array_lik": 955, "array_paramet": 384, "array_sym": 995, "arrayfunc": [2, 393, 936], "arrow": [63, 404, 1055], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1055, "art": [328, 390, 658, 701, 1034], "artem": [1045, 1048, 1058], "arth": 1055, "arthur": [416, 455, 468, 1046, 1047, 1048, 1049, 1050, 1053, 1055], "arthurmello": 1055, "articl": [0, 55, 104, 358, 379, 383, 384, 392, 420, 429, 483, 714, 1006, 1010, 1054], "artiem": 1049, "artifact": [43, 53, 81, 82, 317, 373, 388, 1036], "artifici": [10, 145, 148, 156, 173, 187, 222, 238, 251, 270, 315, 358, 379, 380, 381, 389, 413, 416, 420, 421, 544, 705, 843, 870, 871, 1003, 1007, 1009, 1011, 1017, 1022, 1026, 1030, 1034, 1041], "artist": [246, 391, 446, 641, 707, 709, 710, 711, 815, 832, 927], "artsiom": 1048, "artsion": 1047, "artstein": 725, "artur": [1056, 1057], "arturo": [0, 395, 1055, 1056, 1057, 1058, 1059], "arturoamor": 1055, "aruku": [1049, 1050], "arunav": 1052, "arunava": 1049, "arxiv": [384, 470], "arya": 1049, "as_float_arrai": [2, 393, 1060], "as_fram": [43, 44, 105, 109, 144, 148, 154, 159, 180, 191, 192, 193, 194, 205, 207, 218, 226, 234, 236, 255, 259, 270, 290, 294, 297, 300, 314, 322, 323, 326, 328, 330, 331, 378, 379, 497, 498, 499, 501, 505, 509, 510, 511, 513, 514, 519, 1051, 1052, 1053, 1054, 1057], "asanyarrai": 386, "asarrai": [47, 55, 218, 236, 315, 338, 358, 359, 386, 398, 412, 735, 765, 861, 863, 864, 865, 1020, 1025, 1058], "ascend": [58, 105, 193, 323, 423, 458, 464, 603, 636, 644, 925, 926, 927, 1024, 1051, 1057], "ascent": [180, 426], "ascii": [50, 310, 424, 495, 597, 598, 600], "ascontiguousarrai": 550, "asctim": 124, "aseem": 1048, "asgd": [225, 1024], "ash": [48, 381, 1044, 1047], "ashah002": [1056, 1057, 1058], "ashim": 1051, "ashimb9": 1051, "ashimin": 1054, "ashish": [1054, 1057], "ashra": 653, "ashutosh": [1048, 1049, 1051, 1053], "ashvith": 1054, "ashwin": [1056, 1057], "asia": [276, 1020], "asian": 424, "asid": [149, 226, 410, 568, 569, 570, 571, 675, 676, 677, 685, 687, 870, 871], "asish": [1047, 1048], "ask": [0, 186, 187, 276, 383, 384, 388, 389, 392, 398, 399, 410, 425, 855, 856, 857, 859, 861, 863, 864, 865, 1033, 1057], "asnt": 1047, "aspect": [46, 93, 118, 124, 179, 192, 238, 245, 285, 290, 306, 371, 372, 373, 384, 398, 399, 416, 499, 667, 668, 999, 1026, 1034, 1058], "aspir": [173, 381, 384], "ass": [113, 114, 418, 482], "assembl": [296, 324, 360, 873], "assert": [47, 55, 83, 125, 249, 276, 285, 372, 387, 1030], "assert_all_finit": [2, 371, 393, 476, 1060], "assert_allclos": 386, "assert_array_equ": 424, "assert_warn": 1054, "assert_warns_messag": 1054, "assertionerror": 1048, "assess": [44, 52, 72, 95, 138, 149, 151, 191, 218, 236, 255, 272, 273, 275, 279, 414, 423, 710, 752, 1009, 1010, 1016, 1030, 1056], "assia": 1050, "assiaben": 1050, "assign": [47, 55, 58, 70, 72, 81, 84, 92, 93, 95, 138, 143, 155, 157, 169, 171, 177, 231, 236, 245, 250, 253, 270, 312, 319, 324, 334, 341, 354, 359, 379, 384, 386, 398, 413, 420, 421, 423, 424, 425, 426, 448, 449, 450, 451, 453, 454, 455, 456, 457, 460, 462, 464, 467, 468, 469, 470, 524, 545, 570, 571, 602, 603, 616, 617, 619, 667, 668, 675, 676, 677, 685, 686, 687, 713, 714, 724, 725, 726, 728, 729, 738, 739, 740, 747, 748, 752, 764, 766, 792, 793, 795, 796, 802, 803, 804, 809, 812, 813, 815, 818, 823, 832, 834, 835, 836, 837, 840, 857, 863, 865, 866, 867, 880, 908, 909, 913, 914, 915, 916, 917, 918, 919, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1020, 1023, 1034, 1041, 1046, 1048, 1049, 1058, 1059], "assign_label": [81, 416, 460, 470], "assist": [0, 384, 396, 415, 1020, 1033, 1034], "associ": [50, 61, 62, 113, 138, 175, 190, 191, 222, 264, 270, 323, 336, 338, 358, 392, 416, 418, 420, 421, 423, 424, 434, 454, 457, 477, 478, 479, 480, 481, 482, 483, 484, 502, 503, 504, 533, 566, 570, 573, 614, 615, 639, 654, 667, 668, 675, 677, 683, 684, 685, 698, 704, 708, 740, 748, 831, 836, 856, 864, 878, 890, 902, 910, 919, 921, 923, 945, 1009, 1010, 1013, 1020, 1023, 1034, 1041, 1053, 1057], "assum": [48, 70, 90, 92, 182, 187, 190, 191, 207, 218, 236, 245, 248, 255, 267, 276, 285, 317, 354, 360, 372, 383, 384, 386, 390, 396, 397, 398, 401, 410, 413, 414, 416, 418, 420, 421, 423, 424, 426, 427, 432, 437, 445, 447, 452, 454, 458, 465, 471, 477, 478, 479, 480, 481, 482, 483, 484, 512, 517, 518, 541, 551, 557, 558, 570, 571, 576, 577, 596, 597, 598, 600, 629, 641, 652, 653, 655, 656, 661, 667, 668, 669, 670, 671, 675, 676, 677, 680, 681, 685, 686, 687, 690, 694, 696, 697, 701, 718, 731, 735, 744, 750, 765, 773, 778, 783, 787, 790, 809, 812, 813, 823, 849, 855, 856, 859, 861, 863, 864, 869, 880, 893, 969, 985, 986, 987, 1000, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1020, 1024, 1026, 1047, 1053], "assume_cent": [69, 112, 418, 429, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488], "assume_finit": [371, 372, 476, 911], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 111, 112, 127, 180, 184, 188, 190, 218, 245, 272, 296, 317, 390, 396, 397, 401, 414, 416, 418, 420, 421, 424, 426, 455, 459, 461, 496, 512, 521, 541, 543, 550, 659, 663, 807, 809, 812, 813, 823, 850, 905, 906, 1004, 1006, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1023, 1026, 1031, 1048, 1054], "assur": [0, 398, 806, 807, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "astel": 1049, "astolfi": 1041, "astrai": 398, "astroml": 1029, "astronom": 1028, "astronomi": 1029, "astropi": 384, "astyp": [43, 53, 72, 76, 79, 80, 88, 95, 97, 101, 114, 130, 148, 150, 166, 190, 192, 208, 209, 236, 241, 251, 255, 270, 287, 297, 324, 410, 424, 1000, 1006, 1048], "asv": 384, "asv_benchmark": 384, "aswathavicki": 1059, "asymmetr": [151, 220, 398, 1046], "asymmetri": [220, 358], "asymptot": [111, 112, 207, 371, 418, 482, 545, 739, 1006, 1009, 1051], "atag": 183, "atanasoska": 1060, "atariah": 1050, "ateif": 1054, "atharva": 1055, "atheism": [57, 277, 340, 358, 359, 360, 379, 496], "atheist": 358, "athena": 1034, "ation": 424, "atla": [371, 382], "atleast_2d": [151, 386], "atmospher": 180, "atol": [386, 681, 683, 853, 854, 858], "atom": [127, 133, 421, 540, 546, 548, 551, 552, 554, 555, 662, 672, 693, 1006, 1041, 1054], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1053, 1054], "attach": [47, 358, 441, 858, 1042, 1052], "attack": [255, 379], "attalla": 1055, "attard": 1054, "attempt": [43, 89, 192, 214, 224, 271, 358, 371, 383, 398, 416, 428, 454, 458, 465, 472, 476, 640, 697, 698, 702, 827, 855, 856, 857, 859, 861, 863, 864, 865, 891, 893, 911, 939, 940, 1006, 1007, 1013, 1026, 1048, 1053, 1058], "attenberg": 424, "attent": [392, 616, 617, 1024], "attenu": 175, "attia": 806, "attr": [47, 91], "attract": [427, 452, 1004, 1013, 1029], "attractador": [1048, 1049], "attrgett": [602, 606], "attribut": [2, 47, 62, 68, 84, 105, 132, 136, 138, 145, 146, 149, 169, 173, 218, 226, 252, 266, 274, 275, 280, 288, 306, 310, 329, 351, 360, 366, 373, 377, 378, 379, 381, 384, 387, 391, 396, 410, 413, 414, 416, 417, 418, 419, 421, 423, 424, 425, 426, 431, 432, 433, 434, 435, 438, 439, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 626, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 706, 707, 709, 710, 711, 745, 804, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 928, 930, 970, 993, 998, 1002, 1004, 1006, 1011, 1013, 1014, 1016, 1020, 1023, 1024, 1025, 1026, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "attributeerror": [417, 568, 586, 970, 1050, 1051, 1053, 1057, 1058], "attrselect": 1041, "atukorala": 1056, "atuo": [1057, 1058], "aubert": 1048, "auc": [2, 50, 62, 173, 218, 236, 255, 273, 276, 280, 283, 285, 286, 333, 414, 711, 717, 797, 1010, 1046, 1049, 1053], "auc_scor": [1041, 1043], "audio": [378, 512], "audrei": 1059, "aufarkari": 1055, "aug": 1025, "augment": [2, 339, 639, 895, 1018, 1034], "augspurg": [1049, 1051], "august": [173, 381, 416, 520, 543, 1025, 1041, 1043, 1044, 1048, 1055], "aura": 1053, "auroc": 1010, "aur\u00e9lien": [1048, 1049, 1050, 1054, 1055], "austin": 1048, "australian": [154, 402], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 378, 384, 387, 392, 396, 398, 399, 420, 459, 543, 880, 1002, 1029, 1044], "authorit": 399, "authorship": 388, "auto": [57, 69, 92, 93, 122, 173, 179, 202, 238, 243, 257, 297, 300, 305, 326, 327, 328, 329, 330, 331, 334, 343, 344, 350, 353, 360, 378, 379, 386, 423, 426, 427, 449, 452, 453, 454, 455, 457, 458, 460, 463, 464, 465, 467, 470, 505, 517, 518, 544, 547, 549, 550, 553, 556, 558, 566, 567, 570, 571, 572, 573, 574, 576, 602, 603, 606, 611, 616, 617, 638, 640, 641, 642, 644, 655, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 681, 682, 683, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 711, 808, 812, 813, 831, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 870, 871, 886, 887, 894, 905, 906, 910, 913, 914, 915, 916, 917, 918, 919, 923, 924, 956, 957, 975, 978, 1001, 1004, 1006, 1007, 1013, 1020, 1029, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "auto_examples_jupyt": 188, "auto_examples_python": 188, "auto_viml": 1053, "auto_wrap_output_kei": 386, "autoclass": 381, "autocorrel": 420, "autolabel": 47, "autom": [277, 387, 388, 402, 701, 999, 1006, 1007, 1010, 1029, 1034], "automat": [2, 43, 47, 51, 52, 64, 81, 98, 100, 105, 131, 154, 164, 172, 198, 221, 261, 262, 270, 274, 277, 317, 324, 327, 331, 340, 349, 351, 372, 379, 382, 384, 386, 388, 392, 398, 402, 410, 412, 416, 417, 418, 421, 423, 424, 425, 440, 458, 460, 464, 470, 472, 473, 475, 505, 508, 524, 547, 549, 550, 556, 558, 560, 566, 570, 573, 592, 597, 600, 603, 611, 652, 654, 655, 656, 661, 662, 667, 668, 669, 670, 671, 672, 675, 676, 677, 681, 683, 684, 685, 687, 690, 693, 696, 697, 700, 704, 811, 826, 829, 839, 849, 870, 871, 874, 875, 877, 886, 887, 894, 905, 906, 913, 914, 915, 918, 921, 923, 927, 945, 980, 983, 998, 999, 1001, 1004, 1009, 1014, 1020, 1024, 1026, 1029, 1030, 1041, 1044, 1045, 1046, 1052, 1055, 1056, 1057, 1058, 1059, 1060], "automl": [1010, 1029], "automobil": 1034, "autoregress": 379, "autoviml": 1029, "autoviz": 1053, "auxiliari": [187, 334, 382, 1034, 1056], "av": 1049, "avail": [0, 2, 44, 50, 51, 53, 76, 91, 92, 127, 146, 150, 154, 173, 175, 180, 184, 190, 191, 192, 207, 218, 226, 236, 239, 252, 255, 270, 273, 274, 279, 280, 283, 290, 302, 303, 304, 310, 322, 326, 327, 328, 329, 331, 332, 339, 341, 367, 371, 378, 379, 381, 382, 383, 384, 385, 389, 393, 397, 398, 402, 410, 413, 416, 417, 420, 421, 422, 423, 424, 425, 427, 455, 458, 459, 460, 461, 477, 478, 479, 480, 481, 482, 483, 484, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 517, 544, 558, 564, 565, 566, 567, 568, 569, 573, 574, 576, 577, 578, 579, 602, 603, 611, 619, 620, 636, 641, 642, 656, 660, 662, 664, 666, 670, 672, 674, 677, 679, 680, 681, 682, 683, 684, 685, 698, 705, 708, 741, 742, 809, 812, 813, 823, 835, 836, 841, 842, 843, 844, 845, 846, 847, 859, 870, 871, 873, 880, 889, 892, 897, 901, 906, 910, 965, 970, 999, 1000, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1016, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1033, 1034, 1036, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1057, 1060], "available_if": [2, 91, 398, 1054, 1055, 1058], "avebedrm": [317, 379, 498], "aventi": 51, "aveoccup": [317, 328, 379, 498], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 87, 95, 97, 141, 142, 147, 151, 154, 155, 160, 161, 162, 173, 180, 192, 200, 207, 218, 225, 236, 255, 270, 279, 281, 284, 286, 290, 296, 317, 326, 332, 334, 340, 358, 367, 371, 379, 381, 386, 396, 413, 414, 418, 420, 424, 425, 427, 428, 445, 446, 449, 452, 453, 454, 455, 457, 498, 502, 503, 532, 540, 541, 542, 546, 547, 549, 550, 554, 555, 556, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 579, 596, 603, 641, 642, 657, 667, 668, 675, 676, 678, 681, 683, 685, 686, 687, 689, 696, 709, 712, 713, 715, 716, 717, 722, 729, 730, 732, 734, 735, 737, 738, 739, 743, 744, 745, 747, 748, 749, 752, 754, 755, 757, 759, 760, 762, 765, 773, 790, 791, 792, 793, 794, 796, 797, 799, 800, 804, 805, 806, 807, 837, 840, 859, 879, 894, 995, 1000, 1005, 1006, 1011, 1014, 1016, 1017, 1024, 1025, 1026, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1059, 1060], "average_bike_rent": 192, "average_coef_": 1052, "average_feature_effect": 358, "average_intercept_": 1052, "average_linkag": 79, "average_method": [416, 713, 766, 1049], "average_pr": 154, "average_precis": [283, 709, 716, 751, 1010], "average_precision_scor": [2, 283, 709, 715, 717, 791, 797, 1010, 1041, 1044, 1048, 1049, 1055, 1057], "average_week_demand": [43, 154], "averoom": [317, 328, 379, 498], "avg": [45, 68, 104, 170, 274, 315, 336, 337, 578, 713, 722, 831, 1010, 1057], "avg_dist": [75, 790], "avgclaim": 236, "avgclaimamount": 236, "avi": [1053, 1054], "avidar": 1057, "avinash": 1053, "avm19": [1055, 1056, 1058], "avoid": [43, 46, 51, 52, 79, 92, 97, 106, 143, 144, 149, 154, 191, 192, 222, 227, 236, 241, 252, 255, 270, 271, 277, 281, 305, 307, 308, 321, 322, 333, 343, 344, 359, 372, 382, 384, 385, 386, 388, 389, 390, 396, 398, 399, 402, 410, 414, 416, 418, 420, 423, 424, 427, 448, 450, 452, 460, 470, 476, 502, 503, 504, 508, 517, 518, 543, 548, 552, 643, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 698, 700, 702, 704, 721, 801, 809, 810, 814, 820, 823, 834, 835, 836, 873, 876, 882, 883, 885, 890, 891, 892, 893, 896, 898, 899, 900, 901, 902, 903, 904, 906, 911, 957, 1004, 1007, 1009, 1010, 1013, 1014, 1016, 1018, 1020, 1025, 1026, 1030, 1033, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "aw": 392, "awai": [62, 63, 64, 95, 111, 147, 175, 176, 180, 221, 270, 351, 352, 379, 414, 426, 637, 855, 856, 863, 864, 1009, 1010, 1025], "await": 327, "awalei": 1049, "awar": [48, 54, 170, 184, 270, 344, 358, 382, 384, 386, 396, 399, 415, 420, 424, 576, 577, 657, 663, 664, 665, 667, 668, 678, 689, 859, 888, 1016, 1020, 1026, 1038, 1041, 1042, 1055], "awesom": 1034, "awwwyan": 1059, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 80, 88, 90, 91, 92, 99, 101, 106, 109, 113, 115, 118, 120, 122, 124, 130, 134, 138, 140, 143, 145, 148, 149, 154, 156, 157, 159, 160, 161, 178, 179, 184, 186, 190, 191, 192, 193, 194, 196, 198, 199, 202, 203, 207, 209, 210, 213, 215, 216, 218, 219, 220, 222, 223, 226, 227, 229, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 246, 251, 255, 256, 258, 261, 263, 266, 270, 271, 272, 273, 276, 278, 279, 280, 282, 283, 285, 286, 287, 288, 290, 291, 294, 296, 297, 299, 300, 301, 302, 305, 307, 308, 312, 313, 314, 317, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 333, 343, 344, 345, 346, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 362, 363, 387, 421, 426, 446, 543, 550, 559, 640, 641, 706, 707, 709, 710, 711, 727, 815, 832, 927, 930, 1010, 1013, 1017, 1038, 1051, 1057], "ax0": [107, 109, 218, 248, 359], "ax1": [46, 49, 92, 95, 100, 102, 107, 109, 113, 122, 148, 187, 194, 218, 246, 248, 256, 261, 279, 287, 318, 322, 323, 339, 358, 359], "ax2": [46, 92, 95, 100, 102, 113, 122, 148, 187, 194, 218, 246, 256, 261, 279, 287, 307, 318, 322, 323, 339, 358], "ax3": [100, 339], "ax4": 100, "ax_": [155, 269, 279, 283, 285, 292, 300, 322, 326, 391, 446, 640, 706, 707, 709, 710, 711, 815, 832], "ax_bc": 321, "ax_bottom": 391, "ax_calibration_curv": [62, 64], "ax_colorbar": 317, "ax_det": 273, "ax_histi": 317, "ax_histx": 317, "ax_histx_zoom": 317, "ax_histy_zoom": 317, "ax_idx": 278, "ax_origin": 321, "ax_qt": 321, "ax_roc": 273, "ax_row": 70, "ax_scatt": 317, "ax_scatter_zoom": 317, "ax_top_left": 391, "ax_top_right": 391, "ax_yj": 321, "ax_zoom_in": 317, "ax_zoom_out": 317, "axarr": [160, 317], "axes_": [154, 156, 256, 327, 333, 391, 641], "axes_idx": 321, "axes_list": 321, "axes_row": 209, "axesimag": 706, "axhlin": [131, 164, 208, 275, 279], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 82, 83, 85, 87, 88, 89, 90, 96, 105, 106, 109, 115, 118, 121, 122, 124, 125, 126, 127, 128, 133, 140, 141, 145, 147, 155, 158, 162, 166, 169, 179, 184, 186, 190, 191, 200, 206, 207, 210, 211, 212, 218, 223, 227, 230, 232, 233, 235, 236, 239, 240, 243, 245, 249, 250, 254, 261, 263, 265, 266, 272, 273, 277, 278, 283, 285, 286, 296, 297, 302, 303, 304, 307, 308, 309, 315, 317, 321, 324, 333, 337, 339, 341, 343, 346, 347, 350, 352, 353, 354, 356, 358, 359, 363, 364, 365, 366, 379, 386, 393, 398, 414, 416, 424, 428, 446, 453, 472, 475, 540, 542, 545, 546, 548, 550, 552, 554, 555, 559, 594, 621, 640, 641, 694, 695, 710, 772, 788, 789, 790, 791, 815, 832, 841, 882, 883, 890, 891, 893, 898, 899, 900, 902, 903, 904, 927, 935, 939, 940, 959, 984, 990, 1000, 1010, 1017, 1020, 1025, 1049, 1051, 1053, 1058, 1059], "axis_idx": 43, "axis_list": 126, "axp": 51, "axvlin": [88, 95, 107, 115, 131, 150, 161, 191, 193, 194, 207, 282, 290, 354], "ayako": 1053, "ayan": 1055, "ayc\u0131": 1059, "aydor": [1048, 1049, 1052], "ayerdi": 1045, "aymer": 1042, "aymericbasset": 1057, "ayomid": 1051, "ayush": [1049, 1054], "ayzenshtat": [1034, 1049], "azaria": [1056, 1057], "azencott": 1055, "azim": [80, 102, 120, 130, 192, 215, 238, 242], "azur": [0, 384], "b": [0, 2, 47, 49, 61, 63, 94, 100, 113, 131, 140, 141, 147, 151, 152, 162, 164, 176, 177, 178, 183, 187, 201, 203, 206, 218, 219, 224, 236, 253, 255, 270, 275, 279, 281, 286, 291, 296, 329, 339, 367, 379, 381, 384, 388, 389, 390, 413, 414, 416, 419, 420, 421, 424, 445, 490, 507, 509, 550, 575, 597, 598, 599, 600, 616, 617, 619, 620, 637, 655, 656, 657, 658, 667, 678, 681, 683, 685, 689, 696, 697, 714, 728, 739, 740, 801, 802, 820, 821, 860, 886, 887, 888, 889, 892, 893, 901, 928, 941, 957, 958, 972, 974, 1000, 1002, 1006, 1007, 1008, 1010, 1013, 1015, 1020, 1024, 1025, 1041, 1049, 1052, 1054, 1055, 1056], "b0noi": 1047, "b0rxington": 1056, "b1": [232, 303, 346], "b12": [218, 236], "b1996": 423, "b1998": 423, "b1999": 423, "b2": [232, 303, 346], "b2001": 423, "b2011": 416, "b2c": 1034, "b30065": 319, "b5": 331, "b7a2ff": 321, "b_1": 1014, "b_2": 1014, "b_column": 728, "b_i": 1015, "b_iv_i": 1015, "b_j": 416, "b_k": 416, "b_mask": 285, "b_row": 728, "b_true": 285, "ba": [51, 870, 871, 1014], "baak": 1055, "baam": [1054, 1055], "babino": [1054, 1055], "bac": 51, "bach": [421, 540, 545, 546, 547, 667, 1006], "bachant": 1048, "back": [43, 129, 257, 372, 382, 384, 398, 399, 410, 417, 424, 441, 451, 454, 455, 467, 490, 491, 492, 517, 518, 542, 543, 544, 547, 549, 550, 553, 590, 639, 667, 668, 675, 676, 677, 685, 686, 687, 737, 878, 880, 881, 882, 886, 887, 888, 890, 891, 893, 905, 906, 913, 962, 1006, 1010, 1014, 1030, 1044, 1049, 1051, 1052, 1055, 1059], "backend": [2, 372, 387, 398, 476, 911, 975, 979, 1010, 1044, 1049, 1050, 1051, 1052], "background": [44, 50, 82, 101, 155, 315, 319, 379, 384, 392, 416, 502, 503, 1007, 1015, 1024, 1051], "background_point": 50, "backlink": 1046, "backport": [388, 393, 1048], "backprop": [1014, 1024], "backpropag": 1014, "backslash": 1056, "backtick": [384, 389], "backup": [517, 1041], "backward": [173, 252, 328, 387, 398, 425, 505, 586, 611, 623, 624, 627, 628, 629, 631, 632, 926, 935, 1014, 1030, 1041, 1044, 1049, 1050, 1051, 1053, 1055, 1057], "bad": [80, 95, 96, 176, 181, 191, 270, 334, 358, 367, 384, 416, 426, 701, 755, 999, 1006, 1007, 1012, 1018, 1041], "badaracco": 1054, "badli": [207, 218, 358, 373, 893, 1006, 1020], "badr": 1056, "baeza": [599, 739, 1044], "bag": [2, 14, 64, 104, 126, 137, 142, 144, 152, 153, 188, 193, 294, 359, 360, 380, 414, 525, 526, 527, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 750, 814, 839, 922, 1008, 1011, 1031, 1032, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1054, 1055, 1057], "bagai": 1054, "baggingclassifi": [2, 398, 407, 423, 565, 923, 949, 1000, 1044, 1047, 1048, 1049, 1052, 1056, 1057, 1059], "baggingregressor": [2, 141, 407, 423, 564, 924, 1000, 1044, 1047, 1049, 1052, 1056, 1057, 1059], "baggipont": 1059, "baharev": 1046, "bahavior": 358, "bahaviour": 358, "baibak": [1049, 1050], "bail": 1052, "bailei": [416, 713], "bajic": 1056, "baji\u0107": 1056, "bakir2003": 421, "bakiri": [843, 1011], "bak\u0131r": [44, 421, 544], "bala": [1041, 1044], "balakumaran": [1048, 1049], "balanc": [2, 43, 45, 52, 64, 88, 101, 106, 138, 144, 149, 172, 188, 222, 223, 268, 274, 277, 279, 280, 290, 317, 373, 396, 398, 414, 415, 420, 421, 423, 511, 524, 543, 549, 550, 556, 566, 570, 573, 649, 667, 668, 675, 677, 683, 684, 685, 712, 717, 738, 752, 791, 796, 809, 810, 827, 873, 913, 915, 918, 921, 923, 944, 945, 999, 1025, 1026, 1031, 1041, 1043, 1046, 1047, 1050, 1051, 1055], "balanced_accuraci": [290, 717, 831, 1010, 1049], "balanced_accuracy_scor": [2, 712, 796, 1010, 1049], "balanced_subsampl": [566, 573, 1049], "balaz": 1045, "baldi": 752, "ball": [104, 302, 310, 416, 422, 456, 701, 853, 854, 858, 861, 863, 864, 865, 1041, 1043, 1046, 1052], "ball_tre": [310, 427, 452, 454, 458, 465, 697, 698, 855, 856, 857, 858, 859, 861, 863, 864, 865, 1013, 1041, 1058], "balltre": [2, 427, 452, 454, 458, 465, 697, 698, 708, 855, 856, 857, 858, 859, 861, 863, 864, 865, 1007, 1041, 1043, 1045, 1049, 1054, 1057, 1058], "baloo": 1007, "baluyot": 1050, "bamidel": 1051, "banach": 1060, "banana": [48, 1010], "band": [52, 279, 319, 1020], "bandit": 999, "bandol": 323, "bandwidth": [2, 48, 79, 98, 251, 301, 302, 310, 396, 398, 416, 422, 456, 466, 469, 853, 854, 858, 1003, 1016, 1052, 1056], "bandwidth_": 858, "bangda": 1049, "banik": 1059, "banilo": [1045, 1046], "bank": [51, 57, 1034], "bannerje": [1057, 1058], "bansal": 1048, "bansod": [1046, 1047, 1048], "bao": [1047, 1055], "baod": 416, "baptbillard": 1054, "baptist": [1044, 1052], "bar": [47, 49, 54, 106, 144, 145, 148, 149, 152, 161, 169, 173, 183, 186, 192, 198, 261, 266, 275, 277, 281, 296, 322, 323, 330, 331, 359, 386, 419, 590, 641, 657, 678, 689, 1010, 1017, 1024, 1026, 1047, 1048, 1049, 1050], "bar_color": 47, "bar_kw": 641, "bar_siz": 358, "baran": 1051, "barang": 1057, "baraniuk": 425, "barankaraku": 1053, "barata": 1057, "barber": 541, "barberogaston": 1053, "bardiya": [1055, 1056], "bare": [379, 1007], "barh": [54, 152, 186, 187, 190, 191, 193, 194, 259, 324, 358, 359, 360], "barikbin": 1057, "barkhorn": 1049, "barklei": 1051, "barmalei": [1045, 1046], "barn": [701, 1007, 1046, 1048, 1051, 1059], "barnes_hut": [297, 701, 1048, 1049], "barnett": 1049, "barnhil": [602, 603], "barnowski": [1055, 1056], "barreca": [894, 1020], "barreto": 1055, "barri": [379, 1049], "barrier": 424, "barrycg": 1051, "bars_": 641, "bartelheim": 1052, "barth\u00e9lemi": [1057, 1058], "bartosz": 1050, "bart\u0142omiej": 1056, "barycent": [309, 1041], "basbug": 1048, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 84, 91, 92, 93, 102, 104, 105, 109, 113, 120, 124, 125, 136, 138, 139, 144, 149, 150, 151, 152, 154, 157, 159, 162, 167, 170, 171, 175, 180, 181, 183, 192, 193, 194, 197, 198, 204, 205, 206, 207, 212, 213, 218, 219, 226, 235, 236, 238, 245, 252, 253, 255, 273, 274, 279, 294, 296, 297, 310, 315, 317, 318, 320, 322, 328, 330, 334, 341, 345, 351, 359, 362, 371, 378, 379, 380, 381, 382, 385, 386, 387, 388, 392, 396, 398, 399, 401, 410, 412, 414, 415, 417, 421, 422, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 452, 454, 455, 456, 457, 458, 460, 464, 465, 469, 471, 472, 473, 474, 475, 495, 509, 510, 517, 518, 541, 542, 544, 545, 546, 547, 548, 550, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 587, 597, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 625, 626, 627, 630, 633, 641, 642, 644, 645, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 673, 678, 680, 681, 682, 683, 684, 689, 691, 692, 694, 695, 696, 699, 701, 713, 726, 735, 744, 745, 746, 748, 750, 764, 765, 766, 794, 797, 804, 808, 809, 811, 812, 813, 815, 816, 818, 823, 825, 827, 828, 829, 830, 837, 839, 843, 844, 847, 855, 856, 857, 859, 861, 863, 864, 865, 870, 871, 874, 875, 878, 885, 886, 888, 892, 893, 894, 902, 905, 906, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 929, 931, 933, 942, 951, 962, 978, 999, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1059], "base_classifi": [339, 341, 1023], "base_clf": 445, "base_estim": [414, 562, 563, 564, 565, 844, 847, 910, 999, 1052, 1054, 1055, 1056, 1057, 1060], "base_estimator_": [562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 619, 1056], "base_estimator__": 1056, "base_lr": [296, 844], "base_model": 415, "base_x_test": 111, "base_x_train": 111, "basebag": [1047, 1049], "basebal": [57, 379], "basedecisiontre": [1049, 1050, 1053], "basedictionarylearn": 1041, "baseensembl": [1048, 1051], "baseestim": [2, 91, 136, 252, 297, 384, 397, 398, 426, 431, 433, 434, 438, 439, 440, 610, 641, 642, 949, 962, 1041, 1048, 1051, 1053, 1055, 1056, 1060], "basegradientboost": 1042, "baselabelpropag": 1048, "baselibsvm": 1051, "baselin": [62, 138, 148, 151, 162, 173, 194, 198, 236, 270, 286, 296, 328, 359, 381, 416, 425, 560, 561, 643, 1010, 1013, 1057], "baseline_similar": 183, "baseline_similarity_bound": 183, "basemap": [50, 310], "basemixtur": [1049, 1050], "basemultilayerperceptron": [1049, 1051], "basenb": 1051, "baserandomproject": [905, 906], "basesearchcv": [1048, 1049], "basesgd": 1024, "basesgdclassifi": 1050, "baseshufflesplit": 1054, "bash": [372, 392], "bashrc": 392, "basi": [2, 43, 45, 53, 129, 175, 180, 182, 219, 270, 314, 329, 347, 351, 376, 382, 385, 416, 421, 423, 460, 543, 631, 641, 648, 700, 892, 1008, 1020, 1025, 1032, 1036, 1049, 1051, 1054], "basic": [151, 174, 175, 180, 181, 184, 187, 188, 216, 290, 324, 352, 371, 373, 384, 386, 388, 396, 398, 416, 420, 421, 423, 620, 631, 909, 921, 922, 923, 924, 999, 1000, 1013, 1024, 1028, 1029, 1030, 1031, 1034], "basicconfig": 124, "basil": 1048, "basilisk": 1029, "basis_1": 219, "basis_2": 219, "basri": 522, "bassett": 1006, "bastiaan": [1042, 1043], "bastian": 1049, "bat": 382, "batch": [2, 47, 50, 99, 124, 128, 310, 330, 373, 393, 398, 424, 448, 450, 455, 457, 459, 461, 540, 542, 543, 545, 546, 547, 548, 549, 551, 552, 554, 555, 673, 694, 695, 814, 827, 828, 848, 849, 850, 851, 852, 870, 871, 882, 883, 893, 906, 960, 975, 1014, 1015, 1024, 1041, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1056, 1057], "batch_dict_estim": 124, "batch_pca_estim": 124, "batch_siz": [2, 54, 57, 77, 99, 124, 127, 128, 359, 421, 457, 543, 545, 546, 547, 548, 555, 869, 870, 871, 960, 961, 975, 1042, 1049, 1052, 1054, 1055], "batch_size_": 543, "batchkarov": [1042, 1046], "batiss": 1052, "batista": [1049, 1050, 1054], "batistaki": 416, "batoul": 1054, "battista": 1052, "batula": 1048, "bauk": [1049, 1050], "baum": 454, "baumgartn": 1048, "baxlei": 1048, "bay": [2, 32, 64, 67, 141, 157, 175, 207, 266, 278, 358, 379, 414, 421, 423, 424, 545, 558, 559, 665, 848, 849, 850, 851, 852, 894, 1004, 1005, 1006, 1020, 1032, 1036, 1041, 1042, 1043, 1044, 1049, 1051, 1054, 1056], "bayer": [0, 1041, 1042, 1046, 1059], "bayesian": [2, 46, 64, 89, 100, 122, 187, 188, 197, 203, 205, 219, 224, 260, 262, 266, 267, 279, 287, 291, 302, 307, 318, 321, 322, 421, 445, 533, 537, 541, 620, 653, 654, 665, 666, 806, 807, 874, 876, 888, 893, 999, 1029, 1031, 1032, 1035, 1036, 1047, 1054], "bayesiangaussianmixtur": [2, 261, 262, 267, 807, 1009, 1047, 1049, 1050, 1054, 1055, 1059], "bayesianridg": [2, 89, 186, 198, 199, 203, 328, 636, 653, 1006, 1048, 1049, 1050, 1051, 1054, 1055, 1057, 1058], "baz": [386, 590], "baze": 1050, "bbbbbb": 99, "bbox": [48, 51, 70, 80, 130, 261, 262, 263, 266, 267, 319], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 184, 281, 353], "bc": 321, "bcde": 148, "bcross_val": 1041, "bde": 148, "bdegraaff": 1056, "bdt": 140, "beach": 1049, "beam": [141, 1041], "bear": [423, 1029], "bearer": 1049, "beatrizsmg": 1053, "beauchamp": [1042, 1045], "beaugnon": 1051, "becam": [159, 399, 1049], "becaus": [43, 44, 52, 57, 62, 64, 75, 82, 85, 105, 115, 118, 138, 143, 146, 151, 154, 173, 176, 179, 182, 191, 192, 194, 199, 204, 211, 218, 222, 224, 226, 236, 251, 252, 262, 270, 273, 276, 277, 282, 296, 297, 313, 314, 315, 317, 321, 322, 323, 324, 338, 347, 351, 358, 359, 360, 362, 366, 367, 371, 372, 379, 388, 389, 392, 396, 397, 398, 407, 410, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 426, 429, 439, 455, 456, 469, 473, 483, 490, 491, 492, 543, 545, 561, 563, 565, 567, 569, 571, 572, 574, 577, 579, 616, 617, 620, 641, 642, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 681, 682, 685, 686, 687, 688, 689, 698, 708, 718, 721, 722, 730, 731, 732, 733, 755, 772, 794, 797, 803, 809, 823, 837, 841, 846, 847, 856, 859, 861, 863, 864, 865, 871, 882, 883, 891, 893, 894, 898, 899, 901, 902, 903, 904, 914, 916, 919, 922, 924, 932, 973, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1015, 1017, 1020, 1025, 1026, 1034, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1057], "becker": [416, 1034, 1044, 1053], "becom": [85, 90, 92, 106, 113, 149, 191, 220, 222, 252, 255, 278, 297, 318, 322, 347, 351, 358, 367, 378, 384, 386, 388, 392, 398, 399, 416, 418, 423, 424, 426, 448, 458, 462, 463, 465, 562, 590, 597, 598, 600, 628, 636, 667, 668, 685, 687, 887, 913, 914, 920, 1005, 1006, 1007, 1009, 1013, 1020, 1025, 1042, 1049, 1050, 1053, 1054, 1055, 1056, 1058], "bednar": 1048, "bedroom": [317, 379], "been": [0, 43, 48, 63, 79, 88, 95, 114, 129, 136, 138, 152, 173, 175, 180, 182, 191, 194, 242, 245, 247, 252, 253, 274, 276, 282, 283, 326, 327, 328, 329, 330, 332, 333, 334, 338, 358, 367, 372, 378, 379, 381, 382, 383, 384, 386, 388, 390, 392, 393, 396, 397, 398, 399, 407, 410, 413, 414, 415, 416, 418, 420, 421, 423, 426, 441, 445, 477, 479, 480, 482, 486, 495, 532, 543, 545, 558, 559, 576, 577, 590, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 642, 643, 667, 668, 675, 676, 677, 682, 684, 685, 686, 687, 729, 787, 788, 789, 802, 809, 812, 813, 815, 823, 831, 832, 837, 838, 862, 910, 913, 1000, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1013, 1016, 1020, 1022, 1024, 1025, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "befor": [2, 47, 51, 62, 77, 104, 106, 109, 118, 149, 154, 159, 169, 182, 184, 185, 186, 188, 191, 192, 194, 200, 203, 205, 207, 211, 252, 270, 276, 283, 299, 300, 318, 321, 322, 324, 329, 350, 367, 371, 372, 379, 382, 384, 386, 388, 389, 390, 392, 393, 396, 398, 399, 401, 402, 410, 412, 414, 416, 417, 418, 420, 421, 423, 425, 428, 429, 451, 455, 456, 457, 467, 469, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 498, 510, 543, 546, 547, 548, 549, 550, 553, 555, 556, 570, 571, 574, 576, 578, 579, 586, 597, 598, 600, 620, 636, 637, 639, 654, 675, 676, 677, 680, 685, 687, 696, 701, 703, 806, 807, 814, 815, 827, 828, 830, 835, 837, 839, 853, 854, 861, 862, 863, 864, 865, 868, 873, 874, 877, 880, 887, 891, 892, 893, 894, 898, 899, 901, 902, 903, 904, 910, 921, 922, 932, 957, 993, 1000, 1006, 1007, 1010, 1016, 1020, 1024, 1025, 1026, 1030, 1031, 1041, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "beforehand": [259, 300, 1026], "begin": [57, 136, 173, 175, 271, 278, 296, 329, 358, 367, 384, 389, 390, 398, 413, 416, 423, 562, 563, 568, 570, 571, 675, 676, 685, 686, 687, 999, 1002, 1006, 1010, 1020, 1022, 1024, 1049, 1055, 1056], "beginn": 1030, "behav": [43, 51, 87, 92, 222, 270, 271, 317, 328, 347, 367, 384, 390, 397, 416, 417, 420, 893, 1006, 1020, 1025, 1027, 1030, 1041, 1048, 1050, 1054, 1055], "behavior": [62, 72, 74, 87, 186, 188, 191, 192, 206, 218, 236, 252, 259, 267, 268, 270, 279, 281, 314, 315, 317, 319, 324, 347, 367, 372, 378, 381, 384, 386, 388, 392, 393, 398, 412, 414, 415, 416, 420, 423, 424, 545, 560, 575, 675, 676, 677, 685, 686, 687, 708, 710, 738, 739, 792, 793, 796, 809, 810, 811, 814, 823, 826, 827, 828, 829, 830, 850, 886, 913, 914, 999, 1006, 1010, 1011, 1016, 1020, 1025, 1031, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "behaviour": [74, 129, 154, 219, 220, 236, 349, 384, 398, 410, 416, 423, 568, 569, 573, 574, 611, 751, 810, 811, 814, 826, 827, 828, 829, 830, 911, 921, 922, 982, 999, 1000, 1010, 1020, 1049, 1052, 1053, 1056, 1057], "behind": [37, 88, 113, 138, 294, 386, 388, 392, 418, 423, 1009, 1013, 1022, 1057], "behrend": 1051, "behrouz": 1055, "behzad": 1047, "beier": 1052, "beimportantfew": 404, "being": [61, 64, 70, 80, 87, 90, 115, 118, 120, 129, 138, 142, 154, 156, 175, 180, 193, 196, 212, 252, 255, 269, 276, 315, 321, 322, 347, 351, 358, 360, 382, 383, 384, 386, 389, 396, 398, 399, 415, 416, 418, 420, 423, 424, 425, 426, 427, 429, 449, 450, 452, 453, 458, 464, 477, 483, 502, 532, 578, 649, 658, 665, 681, 683, 696, 699, 703, 721, 727, 743, 745, 792, 798, 806, 853, 854, 859, 861, 863, 864, 865, 888, 906, 958, 999, 1000, 1006, 1009, 1010, 1013, 1016, 1017, 1020, 1022, 1024, 1025, 1026, 1041, 1042, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "beings": 358, "beirouti": 1048, "belatedli": 1048, "belief": [57, 276, 869, 1015], "believ": [358, 359, 392, 396, 1034], "belkin": 1007, "belkina": [701, 1007], "bell": [2, 530, 1049, 1051, 1053, 1054], "bella": 1010, "bella2012": 1010, "bellet": [1048, 1049, 1050], "belmont": [921, 922, 1026], "belong": [61, 64, 66, 90, 95, 255, 276, 326, 332, 338, 378, 379, 413, 414, 416, 417, 419, 420, 423, 431, 448, 451, 455, 456, 457, 459, 461, 532, 721, 740, 816, 822, 834, 880, 894, 965, 966, 1006, 1009, 1010, 1012, 1013, 1014, 1016, 1025, 1029], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 90, 95, 104, 109, 113, 120, 124, 136, 142, 145, 146, 151, 168, 190, 192, 202, 214, 215, 218, 220, 234, 235, 239, 243, 247, 252, 255, 257, 259, 271, 274, 279, 281, 282, 283, 317, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 352, 358, 366, 367, 372, 377, 378, 382, 384, 386, 388, 389, 393, 398, 399, 402, 404, 416, 418, 419, 420, 421, 423, 424, 425, 426, 452, 454, 456, 479, 480, 486, 499, 501, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 519, 540, 546, 551, 557, 591, 604, 605, 606, 607, 608, 609, 642, 655, 661, 667, 668, 676, 677, 682, 684, 701, 708, 714, 752, 772, 806, 807, 809, 820, 823, 842, 873, 876, 886, 887, 890, 896, 902, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1027, 1029, 1037, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1059], "beltran": 1059, "ben": [1043, 1044, 1045, 1048, 1049, 1050, 1053, 1058], "ben3940": 1055, "benavoli": 276, "benbihi": 1050, "bench_k_mean": 93, "benchmark": [297, 328, 359, 360, 371, 377, 379, 384, 396, 402, 409, 414, 476, 524, 911], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 351, "benedek": 1057, "benedikt": 1045, "benediktsson": [1041, 1042, 1043], "benefici": [106, 108, 111, 124, 157, 270, 317, 318, 334, 410, 415, 1007], "benefit": [43, 81, 91, 108, 109, 138, 139, 149, 154, 191, 232, 242, 248, 250, 270, 299, 330, 371, 384, 393, 398, 414, 416, 456, 469, 476, 517, 576, 577, 667, 668, 675, 676, 677, 685, 686, 687, 844, 911, 913, 999, 1005, 1013, 1020, 1030, 1034, 1041, 1044, 1045, 1046, 1053, 1054, 1055, 1056], "benfield": 1048, "bengio": [276, 870, 871, 999, 1023], "bengtsson": 1045, "benhel": 385, "benhur": 1054, "benign": [173, 381, 509], "benjamin": [650, 1043, 1044, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "benjamini": [604, 1047, 1048], "benjaminirv": 1046, "benjastudio": [1049, 1050], "benn": 1049, "bennett": [173, 381, 1010], "benni": 1055, "benoit": 1058, "beno\u00eet": 1054, "benson": 57, "bentlei": 1013, "bera": 1056, "berei": 1055, "beren": 701, "berenbaum": 1057, "bereng": 1054, "berg": [379, 1042, 1043, 1053, 1058], "bergman": [1058, 1059], "bergstra": [999, 1041, 1042], "berk": 1041, "berkecanrizai": 1056, "berkelei": [650, 921, 922], "berlin": [180, 416, 421, 544, 705, 735, 765, 1010], "bernardo": 1047, "bernd": 1056, "bernhard": [44, 421, 544, 844, 879, 909, 1011, 1016, 1025, 1047], "bernhardsson": 1034, "berni": 1052, "bernoulli": [2, 315, 424, 425, 848, 849, 850, 851, 852, 869, 870, 871, 876, 1006, 1020, 1032, 1036, 1041], "bernoullinb": [2, 157, 373, 849, 850, 851, 852, 1011, 1012, 1042, 1043, 1045, 1048, 1053, 1054, 1056], "bernoullirbm": [2, 315, 870, 871, 1015, 1020, 1043, 1044, 1053, 1055, 1058], "bertin": 1034, "bertoncelj": 1052, "bertrand": [0, 405, 1041, 1047, 1048, 1053, 1054], "bertrandhaut": [1049, 1050], "besid": [159, 248, 290, 384, 389, 598, 999, 1049], "bessel": [426, 628], "bessi": 331, "besson": [1046, 1047], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 81, 89, 90, 96, 104, 105, 106, 107, 111, 117, 124, 128, 131, 132, 133, 141, 144, 148, 150, 151, 152, 154, 159, 162, 173, 175, 176, 181, 186, 191, 198, 203, 205, 207, 214, 232, 233, 234, 238, 241, 245, 250, 251, 255, 262, 263, 267, 269, 270, 274, 275, 276, 277, 280, 283, 284, 287, 288, 291, 296, 301, 306, 318, 323, 328, 329, 334, 347, 350, 351, 358, 359, 360, 365, 371, 372, 378, 381, 383, 384, 387, 390, 397, 398, 402, 407, 410, 413, 414, 415, 416, 420, 421, 423, 424, 425, 426, 439, 451, 454, 455, 457, 459, 460, 461, 467, 470, 473, 480, 490, 491, 492, 547, 554, 555, 561, 563, 565, 566, 567, 568, 569, 571, 573, 574, 575, 577, 579, 602, 603, 606, 611, 619, 620, 644, 646, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 697, 698, 699, 702, 703, 712, 717, 728, 729, 730, 731, 732, 733, 737, 738, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 792, 793, 794, 796, 799, 800, 801, 802, 803, 805, 806, 807, 809, 812, 813, 823, 836, 838, 841, 846, 847, 856, 864, 870, 871, 914, 916, 919, 921, 922, 923, 924, 999, 1004, 1005, 1006, 1007, 1010, 1013, 1014, 1016, 1024, 1026, 1029, 1030, 1034, 1041, 1044, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1059], "best_alpha": 1041, "best_c": 354, "best_c_scal": 354, "best_clf": 107, "best_estim": [809, 812, 813, 823], "best_estimator_": [45, 89, 106, 107, 108, 111, 131, 251, 266, 270, 274, 276, 277, 280, 288, 301, 809, 812, 813, 823, 999, 1048], "best_idx": [57, 275], "best_index": [274, 280], "best_index_": [275, 280, 809, 812, 813, 823], "best_loss": [685, 687], "best_loss_": [870, 871, 1056], "best_low_complex": 275, "best_n_it": 467, "best_paramet": 277, "best_parameters_": 266, "best_params_": [105, 107, 151, 175, 251, 266, 274, 280, 328, 347, 397, 809, 812, 813, 823, 999], "best_recal": 274, "best_recall_std": 274, "best_recall_threshold": 274, "best_scor": 280, "best_score_": [105, 107, 251, 270, 277, 280, 281, 347, 415, 682, 684, 809, 812, 813, 823, 831, 1052], "best_score_idx": 275, "best_threshold_": [270, 290, 334, 831], "best_validation_score_": [870, 871, 1056], "beta": [2, 81, 117, 190, 222, 390, 414, 416, 419, 545, 547, 549, 556, 653, 738, 739, 745, 751, 792, 804, 806, 1010, 1043, 1046, 1048, 1050, 1051], "beta_": [222, 421], "beta_1": [870, 871], "beta_2": [870, 871], "beta_k": 421, "beta_loss": [54, 547, 549, 556, 1048], "betatim": 1056, "better": [43, 44, 48, 52, 57, 58, 61, 67, 85, 90, 108, 109, 111, 112, 113, 114, 118, 120, 124, 127, 141, 144, 149, 150, 151, 154, 159, 168, 179, 180, 181, 183, 186, 191, 193, 199, 203, 204, 207, 218, 219, 220, 226, 233, 235, 236, 242, 250, 251, 252, 255, 266, 269, 270, 276, 278, 279, 282, 285, 286, 294, 296, 315, 321, 322, 330, 331, 347, 354, 358, 359, 360, 362, 367, 371, 379, 383, 384, 385, 386, 389, 390, 392, 398, 401, 404, 412, 414, 416, 418, 420, 421, 422, 423, 424, 426, 457, 458, 547, 549, 556, 568, 569, 570, 571, 616, 617, 639, 680, 686, 701, 718, 734, 743, 748, 751, 772, 807, 838, 848, 849, 850, 851, 852, 853, 854, 859, 870, 871, 890, 891, 894, 902, 905, 906, 913, 914, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1018, 1020, 1023, 1024, 1026, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "better_prob": 276, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 88, 95, 96, 101, 117, 120, 127, 129, 132, 138, 141, 144, 148, 149, 151, 154, 168, 175, 180, 181, 183, 188, 190, 191, 192, 193, 198, 203, 204, 206, 209, 213, 214, 218, 219, 220, 222, 223, 226, 236, 238, 245, 250, 252, 255, 268, 270, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 288, 290, 294, 296, 299, 303, 304, 306, 307, 317, 322, 324, 329, 334, 339, 347, 351, 353, 354, 358, 359, 360, 366, 367, 371, 372, 379, 384, 386, 388, 392, 393, 396, 397, 398, 399, 407, 410, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 448, 449, 452, 453, 454, 455, 458, 460, 461, 462, 464, 465, 466, 471, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 523, 524, 530, 533, 536, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 558, 559, 562, 563, 568, 569, 571, 572, 573, 574, 593, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 620, 629, 636, 641, 642, 643, 648, 651, 654, 655, 656, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 685, 687, 688, 690, 693, 697, 699, 701, 703, 704, 705, 708, 710, 712, 713, 714, 716, 718, 719, 723, 724, 725, 726, 728, 733, 734, 735, 738, 739, 740, 743, 745, 746, 752, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 796, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 814, 818, 826, 827, 828, 829, 830, 838, 839, 841, 843, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 870, 871, 877, 880, 881, 883, 884, 886, 887, 890, 891, 892, 894, 899, 902, 903, 907, 913, 914, 918, 921, 922, 923, 924, 926, 954, 966, 967, 978, 999, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1030, 1031, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "bewar": 425, "beyond": [43, 64, 219, 220, 270, 371, 373, 383, 384, 396, 414, 423, 738, 739, 747, 792, 793, 796, 918, 1007, 1011, 1020, 1025, 1030, 1049], "beyst": 1055, "bezuidenhout": 1054, "bf5fff": 122, "bfg": [313, 619, 620, 657, 658, 667, 678, 681, 683, 689, 696, 1013, 1014, 1056], "bgm": 806, "bharat": [420, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "bharathi": 1052, "bhardwaj": [1048, 1049], "bhargav": 1047, "bhaskaran": [1048, 1049], "bhat": [1054, 1056, 1057, 1058], "bhattacharya": 1049, "bhattarai": 1051, "bhavika": 1053, "bhoomika": 1056, "bhsu": 1045, "bhtsne": [701, 1048], "bi": [90, 424], "bia": [43, 64, 111, 126, 137, 145, 146, 151, 154, 188, 191, 193, 198, 199, 201, 281, 312, 351, 354, 367, 379, 398, 414, 418, 422, 423, 426, 533, 565, 568, 569, 616, 617, 623, 651, 657, 658, 667, 668, 678, 679, 689, 870, 871, 886, 888, 892, 898, 899, 901, 902, 903, 904, 922, 931, 1005, 1006, 1009, 1010, 1014, 1015, 1018, 1024, 1031], "bianca": 64, "bianp": 390, "bias": [48, 115, 127, 151, 158, 190, 191, 193, 281, 379, 401, 414, 423, 533, 558, 869, 893, 904, 1005, 1009, 1018, 1024, 1026], "bibhash": [1051, 1052], "bibl": 359, "bibliograph": 384, "bibtex": 0, "bic": [2, 164, 188, 197, 203, 204, 205, 206, 212, 226, 425, 510, 660, 662, 663, 664, 665, 807, 874, 893, 999, 1009, 1031, 1041, 1048, 1054, 1055], "bic_criterion": 205, "bicker": 1051, "biclust": [2, 6, 59, 104, 338, 340, 358, 359, 360, 424, 431, 457, 459, 461, 496, 520, 522, 600, 728, 804, 1010, 1031, 1035, 1036, 1043, 1047], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 431, 459, 461], "bidu": [1054, 1055], "biernat": 1053, "big": [43, 79, 95, 97, 223, 239, 255, 267, 372, 384, 390, 399, 418, 424, 428, 547, 570, 571, 573, 574, 815, 837, 848, 849, 850, 851, 852, 1030, 1034, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "bigg": [426, 628], "bigger": [47, 75, 95, 231, 276, 315, 351, 356, 359, 370, 372, 424, 446, 447, 517, 547, 859, 1036], "biggest": [416, 419, 421, 451], "biggest_inertia": [416, 451], "biggio": 1052, "bigram": [277, 424, 597, 598, 600], "bigram_vector": 424, "bijil": 1055, "bike": 1017, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 192], "bilbro": 1048, "bill": [1051, 1052], "billaud": 1049, "billi": 1045, "billing": [1044, 1045, 1046], "billion": 1034, "bimod": [321, 422], "bin": [2, 43, 61, 62, 64, 88, 109, 140, 144, 218, 249, 255, 270, 282, 302, 317, 318, 319, 320, 321, 323, 324, 382, 392, 402, 414, 422, 423, 446, 447, 456, 469, 570, 571, 876, 878, 892, 959, 1049, 1050, 1051, 1055, 1059, 1060], "bin_cent": [88, 218], "bin_edg": 88, "bin_edges_": [88, 318, 878], "bin_seed": [79, 98, 456, 469, 1052], "binar": [2, 36, 283, 285, 286, 376, 378, 763, 848, 877, 878, 880, 884, 886, 894, 897, 1010, 1012, 1036, 1055, 1057], "binari": [2, 30, 47, 53, 62, 64, 142, 144, 155, 157, 170, 183, 191, 196, 209, 211, 218, 226, 239, 246, 255, 258, 270, 273, 274, 279, 285, 290, 292, 294, 301, 347, 351, 366, 367, 378, 379, 380, 388, 389, 398, 402, 410, 413, 414, 415, 416, 423, 424, 426, 445, 446, 447, 460, 495, 509, 517, 518, 529, 532, 558, 559, 562, 564, 568, 570, 575, 576, 577, 590, 597, 598, 600, 602, 603, 611, 619, 636, 637, 638, 639, 640, 641, 642, 667, 668, 675, 677, 682, 683, 684, 685, 709, 712, 716, 717, 718, 721, 722, 724, 727, 729, 731, 736, 738, 739, 743, 744, 747, 748, 749, 750, 751, 752, 791, 792, 793, 796, 797, 798, 803, 805, 808, 809, 810, 812, 813, 814, 815, 823, 827, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 859, 869, 880, 884, 886, 894, 897, 913, 915, 918, 929, 972, 1000, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1038, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1055, 1056, 1058, 1059], "binary_crossentropi": 1055, "binary_eros": 53, "binary_onli": [1051, 1052], "binarytre": [858, 1045, 1049, 1053], "bincount": [398, 420, 566, 570, 573, 667, 668, 675, 677, 683, 684, 685, 913, 915, 918, 921, 923, 944, 945, 1048], "bind": [402, 1029, 1041, 1048, 1049], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366], "binesh": [1057, 1058], "binet": [1051, 1056], "bing": [1047, 1048], "bingham": 1022, "binned_numer": [218, 236], "binom": 1006, "binomi": [150, 153, 423, 562, 568, 570, 1006, 1055, 1058], "bio": 279, "biocsklearn": 1029, "bioinformat": [637, 1000], "biola": 1059, "biologi": 50, "biometrika": [889, 901], "biostatist": [418, 486], "bipartit": [413, 461, 520, 1015], "biprateep": 1053, "birch": [2, 71, 75, 79, 99, 121, 188, 330, 373, 398, 454, 457, 521, 1031, 1035, 1036, 1045, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1060], "birch_model": 77, "bird": [591, 727, 763, 1010], "birodkar": [1046, 1047, 1049], "bischl": 378, "bisect": [2, 71, 92, 94, 95, 96, 184, 188, 272, 451, 455, 521, 1031, 1055], "bisect_km": 330, "bisect_mean": 451, "bisecting_strategi": [416, 451], "bisectingkmean": [2, 78, 416, 1055, 1056, 1057], "bisector": 70, "bishop": [541, 543, 550, 750, 806, 1006, 1011, 1025], "bistochast": [413, 459], "biswadip": 1051, "biswaroop": 1056, "bit": [43, 52, 64, 83, 88, 111, 127, 216, 220, 294, 317, 347, 359, 367, 371, 379, 382, 398, 402, 404, 423, 424, 591, 598, 667, 843, 939, 940, 1007, 1011, 1028, 1041, 1044, 1047, 1049, 1050, 1053, 1054, 1055, 1058, 1059], "bithash": 649, "bithash_": 649, "bitli": 1034, "bitmap": 381, "bittarello": 1054, "bjerr": 1049, "bla": [371, 372, 382, 385, 390, 392, 787, 1041, 1049, 1050, 1052, 1053, 1059], "black": [43, 48, 49, 50, 52, 63, 70, 79, 84, 90, 91, 113, 114, 122, 124, 126, 147, 168, 171, 175, 176, 180, 181, 184, 187, 191, 192, 198, 205, 207, 208, 210, 214, 218, 219, 220, 224, 227, 230, 231, 236, 245, 255, 261, 264, 302, 312, 313, 315, 341, 356, 363, 364, 365, 384, 402, 409, 416, 423, 426, 564, 565, 640, 1016, 1017, 1026], "blackberri": 323, "blackburn": [1044, 1047], "blackd0t": 1051, "blair": [45, 379], "blakeflei": 1047, "blame": 384, "blanc": 323, "blanchard": [1045, 1046], "blank": [95, 389, 1000, 1026], "bldgtype": 148, "bleed": 1034, "blei": [421, 545, 806], "bleich": [192, 1017], "bleki": 1053, "blend": [147, 159, 323, 398, 420], "bli": [372, 382, 396], "blind": [123, 126, 188, 217, 358, 421, 542, 550, 1031], "blink": 347, "blis_num_thread": 372, "blob": [2, 61, 69, 70, 77, 79, 92, 97, 99, 121, 416, 456, 521], "blobs_param": 245, "block": [2, 302, 317, 330, 379, 381, 384, 389, 392, 398, 413, 416, 419, 422, 460, 461, 470, 481, 487, 488, 496, 497, 520, 522, 704, 1013, 1015], "block_siz": [481, 487, 488, 1045], "blocker": [388, 1059], "blocknum": 47, "blockwis": [413, 1006], "blog": [330, 371, 384, 390, 392, 399, 1052], "blogpost": 389, "blondel": [0, 406, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1054], "blood": [173, 246, 381], "bloom": [393, 974], "blown": 350, "blue": [46, 48, 52, 58, 59, 63, 70, 113, 122, 124, 138, 141, 145, 153, 154, 156, 159, 161, 171, 180, 182, 196, 199, 205, 207, 214, 216, 241, 249, 269, 270, 271, 276, 313, 322, 327, 333, 338, 381, 416, 421, 1058], "blueviolet": [232, 303, 346], "blum": 1048, "blyston": [1051, 1052], "bmaisonn": 1053, "bmalezieux": 1054, "bmatrix": [413, 1002], "bmc": 1020, "bme": 1059, "bmi": [173, 205, 207, 256, 381, 1018], "bmreinig": 1055, "bmug": 57, "bmva": 680, "bmvc": [680, 1006], "bo": [63, 1053], "board": 0, "boat": 331, "bob": [1042, 1048], "bobyrev": 1048, "boca": 1006, "bodega": 323, "bodenhof": [413, 728], "bodi": [47, 104, 173, 256, 331, 381], "body_bow": 104, "body_stat": 104, "boe": 51, "boechat": 1048, "boenisch": 1052, "boerner": 1055, "boersma": 1047, "bogazici": 381, "bogdan": 1041, "boggavarapu": 1053, "bohl": [1053, 1055], "bohn\u00e9": 1054, "boil": [138, 387, 398, 418], "boilerpl": [252, 386, 1034], "boisberrang": [0, 405, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "bold": [95, 151, 207, 213, 384], "boll": 1006, "bolleddula": 1059, "bolmier": [1052, 1053, 1057], "boltzmann": [2, 107, 117, 188, 208, 311, 511, 667, 722, 839, 869, 870, 871, 873, 899, 1031, 1035, 1036, 1043], "bommarito": [1044, 1045], "bonald": 1056, "bone": [231, 356], "bonferroni": 276, "bonu": [236, 382, 384], "bonusmalu": [218, 236], "boo": [173, 381], "book": [83, 104, 451, 455, 457, 843, 848, 852, 1006, 1007, 1008, 1011, 1053], "booktitl": 0, "bool": [84, 101, 114, 187, 236, 366, 384, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 528, 531, 532, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 709, 711, 712, 716, 717, 718, 720, 721, 722, 723, 735, 736, 737, 738, 739, 740, 747, 750, 751, 759, 760, 763, 765, 770, 772, 776, 778, 783, 787, 791, 792, 793, 794, 796, 798, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 823, 827, 828, 831, 832, 833, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 951, 952, 957, 958, 971, 974, 980, 982, 990, 995, 996, 997, 998, 1000, 1050, 1053, 1054], "bool_": 220, "boolean": [2, 136, 252, 366, 379, 384, 386, 393, 417, 423, 424, 425, 472, 570, 571, 590, 591, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 638, 641, 642, 645, 658, 680, 708, 787, 842, 848, 869, 876, 896, 930, 935, 993, 1000, 1006, 1012, 1017, 1020, 1026, 1041, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1059], "boom": 1059, "boost": [2, 14, 46, 52, 105, 137, 138, 139, 142, 143, 145, 146, 156, 159, 162, 182, 188, 194, 199, 220, 226, 241, 275, 277, 313, 321, 323, 330, 333, 385, 390, 398, 415, 425, 456, 474, 475, 498, 505, 510, 529, 562, 563, 568, 569, 570, 571, 573, 574, 641, 642, 643, 644, 750, 751, 757, 759, 799, 809, 812, 813, 814, 830, 836, 839, 874, 886, 887, 1006, 1010, 1029, 1031, 1032, 1036, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1054], "booster": 1046, "boosting_error": 138, "boostingcolumntransform": 159, "boostingdecis": 423, "booth": 1048, "bootstrap": [141, 142, 150, 186, 279, 288, 328, 420, 423, 563, 564, 565, 566, 567, 572, 573, 574, 945, 980, 1006, 1041, 1042, 1044, 1046, 1049, 1051, 1054], "bootstrap_featur": [423, 564, 565], "bootstrap_indic": 279, "borchmann": 1056, "border": [454, 1051], "borderaxespad": 113, "borderpad": 363, "borderwidth": 144, "borg": [699, 703, 1007], "borgn": 1054, "bori": [1045, 1053, 1057], "borja": 1045, "born": 1047, "borovec": 1055, "borovikova": 1052, "bosch": 1054, "bossan": [1053, 1055, 1056, 1057, 1059], "bossch": [0, 405, 1048, 1049, 1050, 1054], "boston": 1034, "bot": [384, 388, 1015, 1055, 1058, 1059], "botelho": 1053, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 89, 90, 99, 105, 111, 113, 117, 118, 129, 131, 136, 141, 144, 145, 148, 149, 154, 158, 159, 162, 168, 169, 171, 173, 175, 182, 184, 190, 191, 192, 193, 198, 203, 204, 205, 207, 218, 219, 220, 222, 223, 224, 226, 236, 242, 251, 252, 253, 261, 262, 263, 264, 265, 266, 270, 276, 277, 278, 279, 283, 285, 287, 292, 297, 309, 317, 321, 322, 326, 328, 332, 338, 339, 344, 349, 351, 358, 359, 360, 366, 367, 371, 372, 373, 377, 378, 379, 380, 382, 384, 386, 390, 391, 393, 396, 397, 398, 399, 402, 407, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 426, 429, 445, 454, 460, 470, 476, 483, 490, 491, 492, 493, 496, 497, 505, 506, 509, 511, 514, 516, 517, 518, 543, 547, 549, 556, 560, 564, 565, 566, 572, 573, 574, 575, 576, 586, 597, 598, 600, 606, 616, 617, 636, 641, 642, 652, 666, 667, 668, 681, 683, 685, 687, 696, 708, 713, 721, 725, 738, 739, 740, 745, 747, 766, 770, 776, 783, 787, 792, 793, 796, 797, 798, 804, 812, 813, 815, 832, 842, 870, 871, 885, 887, 889, 901, 906, 911, 913, 914, 921, 923, 930, 943, 949, 958, 972, 984, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "botstein": [637, 1000], "bottleneck": [371, 390, 423, 456, 870, 871], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 80, 86, 88, 97, 99, 121, 122, 149, 157, 162, 218, 229, 245, 261, 263, 264, 267, 273, 276, 287, 302, 317, 337, 339, 347, 384, 414, 416, 422, 596, 925, 1004, 1006, 1010, 1018, 1030], "bottom_h": 317, "bottou": [685, 686, 687, 1014, 1024], "bou": [1056, 1057], "boucaud": 1049, "boucher": 1048, "bouckaert": 276, "boukhobza": 1059, "boulard": 1058, "bould": 416, "bouldin": [2, 734], "boulogn": 1044, "boun": 381, "bound": [2, 64, 90, 179, 181, 183, 188, 220, 236, 244, 275, 391, 416, 421, 424, 426, 427, 452, 497, 511, 521, 532, 545, 572, 604, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 641, 644, 646, 659, 663, 667, 686, 714, 744, 797, 806, 807, 853, 854, 890, 902, 905, 906, 907, 915, 916, 917, 920, 943, 1006, 1009, 1010, 1013, 1022, 1024, 1025, 1027, 1031, 1049, 1052, 1053, 1055], "bound_": 545, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 93, 95, 137, 140, 147, 157, 161, 166, 176, 177, 179, 188, 192, 202, 219, 227, 245, 250, 253, 279, 291, 292, 305, 307, 308, 310, 312, 317, 319, 322, 335, 340, 342, 344, 345, 346, 347, 349, 355, 356, 363, 380, 414, 423, 424, 426, 458, 464, 513, 545, 558, 559, 578, 597, 598, 600, 640, 744, 770, 809, 842, 855, 861, 863, 864, 865, 888, 892, 909, 910, 915, 917, 918, 921, 943, 1004, 1013, 1016, 1020, 1023, 1024, 1025, 1031, 1041, 1043, 1045, 1054, 1055, 1056, 1058], "bounding_ax_": [391, 641], "boundscheck": [372, 385], "bourassa": 423, "bourbeau": [1048, 1049, 1050], "bourboux": 1052, "bourguignat": 1046, "bournhonesqu": 1051, "bousquet": 909, "boutili": 1022, "boutsidi": 421, "bow": 417, "bown": 1047, "bowyer": 1059, "box": [43, 49, 66, 90, 192, 193, 239, 294, 317, 321, 391, 421, 423, 521, 564, 565, 889, 901, 925, 927, 1010, 1011, 1017, 1020, 1026, 1049, 1057], "boxcox": 1060, "boxplot": [49, 113, 152, 191, 194, 290, 326], "boxplot_runtim": 49, "boxstyl": [48, 319], "boy": 1055, "boyd": 1006, "boyl": [1058, 1059], "boyuan": [1045, 1046, 1047], "bp": [49, 152, 173, 205, 207, 381, 1018], "bpo": 887, "br": 140, "br_estim": 186, "bracket": [384, 1006], "bradi": 1048, "bradlei": [173, 381, 1006], "bradshaw": [1044, 1045, 1048], "bradypu": [50, 310, 379, 507], "bradypus_variegatus_0": 50, "brain": 378, "branch": [371, 382, 384, 387, 388, 416, 423, 450, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 921, 922, 923, 924, 926, 1013, 1017, 1026], "branching_factor": 450, "brand": [399, 402], "brandon": [1047, 1048, 1055, 1056], "brandt": 1052, "brandyn": 1041, "brault": 1048, "braun": 1049, "bravi": 1047, "braycurti": [458, 465, 708, 787, 788, 789, 1013], "braycurtisdist": 708, "brc": [416, 450], "brdav": 1059, "bre": [2, 643, 1026], "bread": 1034, "breadth": [853, 854, 858, 1034, 1043], "breadth_first": [853, 854, 858], "break": [2, 55, 74, 81, 104, 114, 188, 207, 210, 224, 252, 263, 294, 329, 337, 342, 358, 360, 384, 388, 390, 397, 416, 477, 521, 648, 783, 787, 790, 806, 886, 893, 898, 915, 918, 932, 1006, 1009, 1018, 1020, 1025, 1030, 1031, 1041, 1042, 1048, 1049, 1051, 1053, 1057], "break_ti": [355, 915, 918, 1025, 1051], "breakdown": [113, 114, 235, 688, 1006], "breakdown_": 688, "breast": [2, 173, 377, 509, 1018, 1036, 1046], "breast_canc": 339, "breast_cancer_data": 173, "brecht": 650, "bredin": 1045, "breiman": [193, 420, 423, 525, 526, 527, 564, 565, 573, 574, 643, 921, 922, 1018, 1026], "brekk": 1056, "brendan": [73, 448, 462, 1057, 1058, 1059], "brenden": 1055, "brenner": 1010, "breno": [1048, 1049], "brent": [1045, 1049, 1050], "brentfagan": 1050, "bresson": 1060, "brett": [1044, 1046, 1047, 1048, 1049, 1056], "brettingen": 1047, "breuer": 1052, "breunig": [416, 458, 465, 859, 1016], "breve": 1057, "brevin": [1057, 1058], "brew": [150, 382, 402], "brian": [0, 406, 717, 1010, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1054, 1055], "brice": [1053, 1054], "bridg": [396, 1007], "brief": [384, 1008], "briefli": [285, 383, 397, 423, 999, 1051], "brier": [2, 61, 62, 64, 414, 718], "brier1950": 1010, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 414, 1010, 1049, 1050, 1051, 1059], "brigata": 381, "bright": 347, "brighter": 183, "brigi": [1052, 1053], "brigitta": [1051, 1052, 1053, 1057, 1059], "bring": [191, 317, 421, 685, 687, 1007, 1034], "british": 424, "brittl": [74, 416], "broad": [384, 398, 1029], "broadcast": 636, "broader": [319, 1006, 1033], "broadli": [398, 416], "brocchini": 1053, "brochart": 1058, "brockherd": 1043, "brodersen": 717, "broke": 1048, "broken": [402, 420, 608, 609, 644, 729, 935, 1010, 1026, 1044, 1048, 1049, 1050, 1052, 1055], "brook": [1044, 1045, 1053], "brought": [190, 562, 563, 566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "brown": [50, 122, 310, 379, 507, 637, 1000, 1046, 1048, 1049, 1050, 1053], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 384, 392, 1020, 1058], "broyden": 1006, "brr": 198, "brr_poli": 198, "brr_score": 198, "bruce": [1051, 1052], "brucher": [0, 406, 1041], "brummitt": [1048, 1049], "brunak": 752, "brunner": 1045, "bruno": [1052, 1053, 1054, 1059], "brutal": 347, "brute": [297, 396, 411, 420, 427, 452, 454, 458, 465, 641, 642, 697, 698, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 1017, 1036, 1045, 1049, 1053, 1056, 1057, 1058, 1059], "bry": [210, 227], "bryan": [1041, 1044, 1050, 1051, 1054], "br\u00f6mmel": [1055, 1056], "br\u00fblade": 323, "bsa": 773, "bsas_in_radian": 773, "bscikit": 1041, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 390, 396], "bsh": 1056, "bsmtfinsf1": [148, 159], "bsmtfinsf2": 148, "bsmthalfbath": 148, "bsmtunfsf": 159, "bspline": 892, "bsplines_": [219, 892], "bsr": [939, 940, 1054], "bt": 424, "btol": [681, 683], "buck": 636, "budarz": 1054, "buddha": 1046, "budget": [0, 148, 848, 849, 850, 851, 852, 999], "bueno": 773, "buffer": [85, 1054, 1059], "buffer_mb": 1041, "bug": [252, 326, 327, 328, 329, 330, 331, 332, 333, 334, 382, 386, 387, 388, 389, 392, 396, 398, 1030, 1041, 1042, 1043, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "bugfix": [1041, 1055], "buguen": 1041, "buhmann": 717, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 90, 102, 108, 128, 138, 147, 149, 156, 162, 170, 172, 185, 186, 188, 191, 226, 281, 284, 294, 296, 297, 314, 315, 318, 323, 324, 360, 367, 371, 372, 373, 380, 386, 387, 388, 389, 390, 398, 402, 409, 416, 420, 423, 424, 450, 498, 510, 512, 533, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 594, 595, 597, 598, 600, 636, 637, 639, 700, 722, 723, 810, 814, 818, 827, 833, 835, 874, 891, 893, 921, 922, 923, 924, 926, 953, 999, 1000, 1007, 1010, 1014, 1016, 1020, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1041, 1044, 1046, 1047, 1048, 1050, 1053], "build_analyz": [424, 597, 598, 600, 1051], "build_preprocessor": [424, 597, 598, 600, 1051], "build_projection_oper": 53, "build_token": [57, 424, 597, 598, 600], "build_tool": [384, 388, 392], "builder": [47, 49, 354, 388], "buildtool": 382, "built": [2, 25, 66, 118, 136, 138, 139, 147, 149, 193, 226, 279, 294, 310, 326, 363, 366, 371, 379, 382, 384, 385, 386, 388, 390, 392, 393, 396, 397, 398, 402, 410, 416, 417, 420, 423, 425, 453, 512, 562, 563, 564, 565, 568, 569, 570, 571, 597, 598, 602, 606, 648, 649, 650, 651, 652, 655, 656, 661, 667, 669, 670, 671, 672, 681, 682, 683, 684, 690, 812, 813, 820, 844, 847, 853, 854, 923, 924, 962, 993, 1006, 1010, 1011, 1023, 1024, 1026, 1029, 1034, 1041, 1044, 1045, 1047, 1053, 1059], "builtin": 1025, "buitinck": [0, 406, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "bulk": [285, 427, 452], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1048, "buluttekin": 1051, "bumblebe": 1054, "bunch": [2, 50, 252, 377, 378, 379, 472, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 519, 576, 577, 578, 579, 641, 642, 643, 872, 873, 921, 922, 923, 924, 966, 969, 1034, 1046, 1048, 1051, 1053, 1057], "bundl": [1049, 1050], "bupu": 192, "burden": [384, 885, 1030], "bureau": 379, "buri": 384, "burjek": 1041, "burk": [0, 368, 1056], "burn": [1048, 1049], "burst": 1010, "busch": [1049, 1050, 1052], "bush": [45, 379], "busi": [43, 218, 276, 334, 392, 396, 415, 797, 1006, 1010, 1034], "business_metr": 270, "business_scor": 270, "bussonni": [1041, 1053], "butler": [482, 1044, 1052, 1053], "butlerdavi": 482, "butter": 1034, "button": [384, 392], "butyugina": 1057, "buuren": [636, 1000], "buzenet": [1056, 1057], "bv_bunch": 50, "bwignal": 1044, "bypass": [415, 417, 608, 655, 661, 831, 921, 922, 923, 924, 1057], "byproduct": 242, "byrd": 667, "byron": 1053, "byte": [83, 88, 424, 495, 512, 517, 518, 591, 597, 598, 600, 974, 1041, 1048, 1049, 1056, 1059], "bz2": [55, 517, 518], "bz2file": 55, "bzip2": 1041, "b\u00e9gude": 323, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 80, 87, 91, 92, 94, 95, 96, 100, 105, 106, 108, 118, 120, 121, 122, 129, 130, 138, 140, 141, 147, 148, 155, 157, 158, 160, 161, 166, 173, 176, 177, 178, 179, 183, 196, 202, 206, 208, 209, 210, 211, 213, 215, 216, 225, 227, 229, 230, 231, 232, 234, 235, 238, 240, 242, 243, 250, 251, 253, 257, 262, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 279, 281, 285, 287, 297, 300, 303, 305, 306, 307, 308, 310, 312, 313, 315, 317, 318, 319, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 358, 363, 364, 365, 371, 372, 378, 379, 381, 382, 384, 385, 386, 387, 389, 392, 393, 396, 402, 403, 407, 413, 414, 416, 417, 418, 419, 420, 421, 423, 425, 429, 445, 450, 451, 454, 455, 457, 467, 476, 483, 532, 537, 543, 547, 549, 550, 556, 558, 559, 599, 616, 617, 619, 640, 648, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 681, 682, 688, 694, 695, 697, 698, 701, 702, 717, 723, 724, 727, 740, 744, 750, 751, 767, 768, 809, 823, 832, 838, 840, 848, 849, 850, 851, 852, 853, 854, 860, 862, 869, 884, 886, 887, 888, 892, 894, 908, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 928, 939, 940, 972, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1020, 1022, 1024, 1025, 1026, 1029, 1034, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1057, 1059], "c0": [148, 248, 323], "c1": [100, 148, 183, 248, 323], "c2": [100, 148, 183, 248, 323], "c22": 331, "c26": 331, "c3": [100, 148, 323], "c4": [100, 323, 1032, 1036], "c5": [100, 1032, 1036], "c56poni": 1051, "c6": 100, "c99": 1029, "c_": [50, 62, 63, 64, 93, 113, 125, 147, 150, 156, 157, 166, 177, 216, 231, 234, 245, 303, 320, 322, 341, 347, 355, 356, 416, 668, 723, 724, 727, 1010], "c_0": [1002, 1008], "c_1": 1007, "c_2": [416, 1007], "c_2d_rang": 347, "c_e": 416, "c_i": [416, 1013], "c_j": [416, 1015], "c_jh_j": 1015, "c_k": 558, "c_option": 106, "c_p": 1006, "c_q": 416, "c_rang": 347, "c_scale": 354, "ca": [173, 381, 416, 450, 921, 922, 1022, 1026], "cabernet": 323, "cabin": 331, "cablevis": 51, "cabrera": 1051, "cach": [2, 52, 89, 101, 188, 277, 297, 298, 300, 305, 309, 371, 372, 379, 398, 449, 453, 458, 476, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 511, 517, 518, 809, 855, 857, 873, 874, 911, 915, 916, 917, 918, 919, 994, 1013, 1025, 1031, 1044, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057, 1059, 1060], "cache_path": 1013, "cache_s": [476, 911, 915, 916, 917, 918, 919, 1025], "cached_pip": [106, 417], "cachedir": [89, 106, 393, 417], "caching_dir": 994, "caherrera": 1054, "cai": 1054, "caicedo": 1041, "cailean": 1059, "cainei": 1059, "caio": [1047, 1049, 1051], "caj": 51, "caje": 1042, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 379, "cal_scor": 63, "calcot": 1054, "calcsiz": 382, "calcul": [2, 46, 61, 63, 69, 81, 94, 113, 136, 137, 138, 142, 160, 187, 188, 194, 214, 222, 223, 235, 250, 252, 275, 276, 282, 286, 291, 296, 345, 351, 352, 367, 371, 391, 398, 407, 413, 414, 416, 420, 421, 423, 427, 446, 451, 452, 454, 456, 458, 459, 461, 463, 464, 479, 480, 486, 489, 545, 556, 562, 572, 573, 578, 606, 620, 629, 641, 642, 643, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 688, 690, 693, 697, 699, 701, 703, 716, 725, 738, 739, 744, 745, 747, 753, 759, 760, 763, 773, 778, 780, 781, 782, 783, 787, 790, 792, 793, 796, 797, 798, 801, 802, 804, 816, 818, 834, 838, 851, 853, 854, 891, 892, 893, 899, 903, 913, 914, 945, 959, 1002, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1018, 1020, 1023, 1025, 1031, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "cald": 908, "caleb": 1053, "calibr": [2, 52, 66, 141, 154, 161, 236, 248, 270, 276, 278, 398, 407, 445, 446, 447, 521, 524, 573, 578, 667, 668, 685, 718, 738, 750, 793, 796, 797, 808, 831, 839, 851, 910, 913, 948, 999, 1006, 1010, 1023, 1025, 1031, 1032, 1036, 1038, 1045, 1047], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 414, 445], "calibrated_clf": 445, "calibrated_df": [62, 64], "calibrated_forest": 999, "calibratedclassifiercv": [2, 61, 62, 63, 367, 398, 407, 414, 685, 808, 831, 999, 1025, 1030, 1045, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 414, 445, 446, 1050, 1055, 1059], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 414, 948, 1054, 1055, 1059], "california": [2, 149, 183, 186, 187, 317, 323, 328, 377, 381, 498, 1036], "calinski": [2, 719, 1047], "calinski_harabasz_scor": [2, 416, 1049], "calinski_harabaz_scor": [1047, 1049], "cali\u0144ski": 416, "call": [52, 53, 55, 81, 83, 85, 89, 105, 122, 136, 143, 150, 170, 175, 179, 181, 183, 190, 192, 205, 218, 219, 222, 236, 246, 252, 256, 258, 259, 270, 276, 277, 285, 291, 292, 294, 297, 299, 322, 324, 328, 329, 358, 359, 360, 366, 371, 372, 373, 379, 384, 385, 386, 389, 390, 391, 392, 393, 396, 397, 398, 399, 402, 407, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 428, 439, 448, 451, 454, 455, 457, 458, 459, 460, 461, 462, 465, 468, 470, 472, 473, 476, 477, 482, 490, 491, 492, 496, 499, 501, 504, 506, 512, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 586, 591, 592, 597, 598, 600, 606, 611, 616, 617, 619, 620, 623, 629, 636, 637, 638, 639, 640, 641, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 713, 741, 751, 764, 780, 783, 787, 788, 789, 790, 802, 806, 807, 808, 809, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 859, 862, 864, 869, 870, 871, 872, 873, 876, 877, 878, 880, 882, 883, 885, 890, 893, 894, 897, 902, 903, 904, 905, 906, 910, 913, 914, 915, 916, 918, 919, 922, 924, 932, 934, 947, 951, 956, 957, 966, 967, 969, 975, 976, 980, 983, 993, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1022, 1023, 1025, 1026, 1029, 1034, 1036, 1038, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "callabl": [2, 266, 280, 334, 398, 420, 423, 424, 425, 427, 428, 449, 451, 452, 453, 454, 455, 457, 458, 460, 465, 467, 468, 472, 473, 474, 475, 540, 542, 544, 546, 548, 554, 555, 566, 567, 568, 569, 570, 571, 573, 574, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 619, 620, 629, 637, 639, 643, 648, 652, 668, 680, 682, 684, 697, 700, 701, 705, 720, 728, 741, 751, 780, 783, 787, 788, 789, 790, 801, 802, 809, 812, 813, 815, 823, 831, 832, 835, 836, 837, 838, 840, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 877, 886, 908, 909, 915, 916, 917, 918, 919, 970, 976, 979, 993, 999, 1010, 1020, 1041, 1045, 1048, 1049, 1050, 1051, 1053, 1055, 1057, 1060], "callback": [540, 546, 548, 554, 555, 862, 975, 1030, 1057], "callbl": 855, "calle": [2, 252, 967], "caller": [2, 252, 417, 655, 656, 661, 669, 670, 671, 690, 903, 904, 966, 967, 985, 986, 987, 1050], "callgrin": 390, "callgrind": 387, "calm": 51, "caltech": 358, "calvin": [1044, 1045], "calvo": [1049, 1050], "cambridg": [379, 421, 599, 848, 852, 1006, 1008, 1012], "came": 1009, "camera_ind": 53, "camil": [1049, 1057, 1058], "camila": 1051, "camilaagw": 1051, "camilo": 1047, "campello": [416, 454], "campustrampu": 1048, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 81, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 120, 125, 127, 128, 129, 131, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 169, 170, 171, 172, 173, 175, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 203, 205, 207, 209, 211, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 226, 234, 235, 236, 238, 239, 240, 245, 246, 247, 248, 249, 251, 252, 255, 256, 259, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 285, 287, 288, 290, 291, 292, 294, 296, 297, 299, 301, 302, 303, 304, 306, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 344, 345, 347, 350, 351, 354, 358, 359, 360, 364, 365, 366, 367, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 397, 398, 399, 401, 402, 403, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 439, 441, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 480, 490, 491, 492, 495, 505, 508, 512, 517, 518, 521, 530, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 588, 589, 590, 591, 592, 593, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 641, 643, 644, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 696, 698, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 713, 716, 718, 720, 721, 727, 729, 730, 731, 732, 733, 735, 736, 738, 739, 741, 742, 746, 747, 748, 749, 751, 752, 755, 761, 764, 765, 766, 767, 768, 772, 788, 789, 791, 792, 793, 794, 796, 797, 798, 803, 804, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 870, 871, 872, 873, 876, 877, 878, 880, 881, 882, 886, 887, 888, 891, 892, 893, 898, 905, 906, 910, 911, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 925, 926, 929, 930, 933, 935, 937, 939, 943, 945, 951, 954, 956, 957, 964, 966, 969, 972, 975, 979, 980, 983, 990, 993, 994, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1034, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "canberra": [458, 465, 708, 787, 788, 789, 1013], "canberradist": 708, "cancel": [423, 424, 772], "cancer": [2, 173, 377, 415, 509, 602, 603, 860, 1018, 1036, 1046], "candela": 381, "candid": [108, 266, 274, 277, 284, 328, 373, 384, 388, 416, 423, 456, 458, 809, 812, 813, 821, 823, 1006, 1013, 1026, 1047], "candidate_idx": 275, "cannon": 1056, "cannot": [43, 52, 75, 91, 109, 115, 124, 129, 146, 191, 192, 203, 218, 236, 252, 317, 347, 354, 373, 383, 385, 390, 396, 398, 399, 404, 410, 416, 417, 418, 420, 421, 423, 424, 426, 473, 530, 547, 548, 549, 552, 556, 619, 622, 623, 624, 626, 628, 629, 631, 632, 634, 660, 664, 691, 701, 720, 726, 787, 812, 813, 860, 861, 863, 864, 865, 873, 874, 878, 883, 884, 895, 937, 939, 940, 999, 1000, 1004, 1006, 1007, 1010, 1011, 1016, 1020, 1025, 1026, 1030, 1034, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "canon": [2, 51, 398, 414, 423, 490, 491, 493, 777, 1030, 1032, 1036], "canonic": 398, "cant": [1058, 1059], "cantor": [637, 1000], "canuma": 1054, "canva": 51, "cao": 416, "cap": [413, 416, 764, 1010, 1050], "capabl": [90, 91, 118, 154, 180, 222, 242, 386, 398, 402, 1011, 1014, 1025, 1026, 1034, 1041, 1050, 1058], "capac": [154, 175, 193], "capit": [49, 62, 333, 505, 815, 832], "capitain": 1059, "cappion": [701, 1007], "cappuzzo": 1058, "capsiz": 339, "caption": 104, "captur": [2, 43, 48, 51, 52, 72, 74, 118, 151, 156, 168, 180, 191, 198, 203, 218, 222, 267, 296, 327, 347, 351, 392, 416, 423, 424, 425, 580, 597, 598, 600, 859, 976, 1010, 1015, 1023, 1027, 1053], "car": 218, "carbal": 1058, "card": 1049, "cardin": [72, 145, 146, 152, 193, 194, 323, 324, 332, 416, 423, 471, 562, 563, 566, 567, 568, 569, 573, 574, 575, 688, 886, 887, 894, 921, 922, 923, 924, 1010, 1011, 1018, 1020, 1055, 1056], "cardiotocogram": 255, "care": [47, 90, 152, 191, 270, 294, 351, 371, 373, 388, 390, 396, 398, 399, 410, 415, 416, 418, 424, 445, 468, 477, 649, 667, 668, 675, 676, 677, 685, 686, 687, 704, 913, 1007, 1025, 1034, 1057], "carefulli": [290, 371, 414, 421, 1025], "carei": [1044, 1045, 1046, 1047, 1048], "carett": 1048, "cari": 1053, "carl": [180, 426, 619, 620, 623, 628, 631], "carla": 1057, "carlo": [0, 250, 374, 423, 426, 620, 650, 651, 1002, 1015, 1041, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "carlson": 1048, "carlsson": 1044, "carmen": 323, "carnegi": 908, "caro": 1046, "carodorum": 323, "carol": [1047, 1048], "carolin": 1014, "caro\u00e7o": 1060, "carrascosa": [1034, 1045], "carre\u00f1o": 1056, "carri": [51, 67, 138, 187, 270, 276, 279, 284, 313, 319, 360, 399, 424, 566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 1034], "carrillo": 1046, "carsten": 1054, "cart": [1032, 1036], "carter": [1047, 1048, 1056, 1059], "cartesian": [105, 413, 642, 1013, 1056], "cartman_nabana": 1051, "cartograph": 196, "cartographi": 1006, "caruana": [62, 64, 414, 445, 447], "carvaj": 1041, "casado": 1052, "casagrand": [1049, 1050], "casalegno": 1053, "cascad": 381, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 84, 87, 90, 92, 96, 101, 105, 106, 114, 118, 129, 131, 141, 143, 144, 151, 152, 159, 170, 172, 173, 175, 182, 191, 192, 194, 203, 204, 207, 209, 218, 219, 220, 222, 223, 226, 232, 234, 235, 236, 245, 249, 250, 251, 252, 255, 256, 266, 269, 270, 273, 275, 276, 277, 279, 282, 283, 285, 294, 297, 300, 304, 314, 317, 319, 322, 324, 326, 329, 334, 351, 358, 359, 360, 366, 367, 371, 372, 373, 378, 379, 384, 385, 386, 388, 389, 390, 391, 393, 396, 397, 398, 399, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 445, 448, 451, 452, 454, 455, 459, 461, 471, 472, 473, 475, 482, 505, 517, 518, 524, 548, 550, 551, 552, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 597, 600, 602, 603, 606, 611, 615, 618, 619, 620, 634, 636, 637, 639, 641, 656, 657, 662, 665, 666, 667, 668, 670, 672, 675, 677, 678, 681, 683, 684, 685, 689, 691, 692, 693, 694, 695, 696, 708, 712, 717, 718, 721, 725, 727, 729, 730, 732, 735, 737, 738, 739, 743, 744, 747, 751, 752, 754, 755, 757, 759, 762, 763, 765, 772, 787, 790, 792, 793, 794, 796, 797, 798, 799, 803, 805, 807, 809, 812, 813, 815, 823, 827, 832, 833, 834, 835, 836, 837, 838, 840, 842, 850, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 873, 880, 882, 883, 886, 887, 888, 891, 892, 893, 894, 897, 903, 904, 905, 906, 913, 915, 918, 921, 922, 928, 933, 935, 945, 957, 958, 998, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1024, 1025, 1026, 1029, 1030, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "caselli": [1049, 1050], "cash": 1006, "cashman": 1051, "casino": [1055, 1056], "cass": 1047, "cassi": 323, "cast": [50, 52, 88, 151, 218, 239, 319, 378, 399, 424, 505, 653, 654, 655, 661, 665, 666, 669, 670, 671, 672, 673, 674, 682, 684, 974, 1048, 1049, 1050, 1051, 1054, 1056, 1058], "castachick": 1052, "castello": 1045, "castor": 1052, "caswel": [1054, 1057], "cat": [51, 105, 192, 193, 255, 329, 330, 331, 332, 333, 334, 379, 424, 496, 591, 721, 727, 763, 792, 894, 1010, 1020, 1050, 1051, 1053], "cat_column": 255, "cat_linear_processor": 159, "cat_proc": [247, 327], "cat_selector": 159, "cat_str": 57, "cat_tree_processor": 159, "catajara": 1051, "catalfo": 1049, "catalin": 651, "catastroph": [270, 324, 772, 1030], "catch": [79, 97, 314, 372, 392, 393], "catch_warn": [79, 97, 252, 313, 314], "categor": [2, 43, 105, 137, 143, 154, 159, 188, 191, 192, 193, 218, 236, 255, 257, 259, 270, 324, 329, 331, 332, 373, 376, 378, 379, 389, 398, 417, 424, 474, 475, 497, 498, 505, 514, 570, 571, 590, 591, 616, 617, 641, 642, 657, 667, 668, 678, 689, 718, 836, 848, 849, 850, 851, 852, 874, 876, 880, 881, 884, 886, 887, 894, 908, 909, 930, 1000, 1006, 1017, 1018, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1041, 1042, 1045, 1046, 1049, 1051, 1053, 1056, 1057, 1058, 1059], "categori": [2, 25, 57, 79, 97, 104, 105, 148, 159, 191, 192, 218, 226, 233, 255, 270, 277, 313, 314, 319, 323, 324, 328, 331, 333, 340, 358, 359, 360, 378, 379, 393, 416, 417, 423, 424, 426, 496, 505, 506, 512, 570, 571, 657, 667, 668, 678, 689, 752, 767, 768, 849, 886, 887, 894, 951, 952, 1000, 1006, 1007, 1008, 1012, 1018, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "categorical_column": [43, 148, 191, 193, 255, 475], "categorical_columns_selector": 255, "categorical_columns_subset": 148, "categorical_crossentropi": [1051, 1055], "categorical_encod": 193, "categorical_featur": [43, 105, 148, 154, 192, 270, 323, 328, 329, 330, 331, 333, 389, 423, 570, 571, 641, 642, 1017, 1049, 1053, 1056, 1058], "categorical_preprocessor": [257, 323], "categorical_transform": 105, "categoricalnb": [2, 848, 850, 851, 852, 1012, 1051, 1052, 1053, 1054, 1056], "categories_": [886, 887, 894, 1020, 1049, 1056], "categoris": [951, 952], "category_1_fold": 512, "category_2_fold": 512, "category_count_": 849, "category_s": 359, "categr": 1018, "caterpillar": 51, "cathi": [1045, 1051], "catindex": 192, "catplot": 266, "caught": [384, 392, 410], "caus": [43, 62, 64, 151, 176, 191, 216, 218, 222, 223, 236, 296, 324, 351, 360, 367, 382, 389, 414, 416, 421, 422, 424, 426, 451, 455, 457, 467, 518, 541, 591, 598, 619, 620, 787, 848, 849, 850, 852, 877, 886, 888, 891, 892, 939, 940, 1000, 1006, 1010, 1018, 1020, 1023, 1030, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060], "causal": [188, 189, 213, 666, 794, 839, 1031], "causat": 191, "caution": [191, 270, 388, 448, 462, 1049], "cautiou": 1048, "caveat": [420, 426], "cawlei": [281, 1010], "cax": [66, 178, 287], "ca\u00f1ardo": 1044, "cb": [178, 249, 265], "cbar_ax": 287, "cbar_kw": [198, 203], "cc": 382, "cc18": 378, "cc_home": [921, 922], "cca": [2, 253, 419, 491, 493, 1011, 1045, 1049, 1050, 1051, 1053, 1055, 1059], "ccat": 379, "ccf2002": 1002, "cclauss": 1049, "cco": 358, "ccp_alpha": [326, 362, 566, 567, 568, 569, 573, 574, 921, 922, 923, 924, 1026, 1051], "ccp_path": [921, 922, 923, 924], "cd": [124, 173, 381, 382, 384, 388, 390, 421, 479, 480, 486, 540, 546, 548, 549, 552, 554, 555, 556, 1006, 1046, 1056], "cdef": 385, "cdf": 276, "cdist": 1054, "cdivis": 385, "cdot": [276, 351, 413, 416, 421, 422, 426, 623, 624, 628, 631, 632, 879, 1002, 1004, 1010, 1014, 1020], "cdrig": 1055, "cdt": 57, "cea": [848, 1012], "ceballo": 1055, "ceder": [797, 1010], "ceethinwa": [1053, 1054], "ceh": 1056, "ceil": [154, 255, 566, 567, 568, 569, 572, 573, 574, 575, 603, 680, 812, 813, 921, 922, 923, 924, 1024], "celelibi": 1050, "celeo": 1045, "celeux": 537, "cell": [50, 51, 58, 63, 68, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 173, 180, 191, 192, 193, 200, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 310, 315, 323, 327, 328, 330, 331, 333, 338, 366, 381, 389, 701, 1010, 1011, 1047, 1055], "cellular": 53, "celsiu": [192, 1017], "cemlyn": 1059, "cen": 752, "censor": 1029, "censu": 379, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 80, 83, 84, 85, 88, 90, 91, 94, 95, 96, 98, 99, 114, 121, 129, 130, 133, 149, 150, 151, 152, 171, 173, 187, 192, 200, 210, 212, 218, 219, 229, 230, 241, 242, 245, 246, 255, 261, 264, 265, 271, 277, 287, 302, 305, 307, 313, 317, 319, 320, 330, 338, 345, 347, 348, 349, 353, 359, 360, 379, 380, 381, 389, 416, 418, 419, 421, 422, 423, 429, 448, 450, 451, 454, 455, 456, 457, 460, 462, 467, 468, 469, 470, 471, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 510, 521, 533, 543, 544, 550, 553, 559, 615, 618, 619, 620, 641, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 687, 699, 703, 705, 806, 878, 879, 882, 891, 893, 903, 904, 913, 914, 1004, 1006, 1007, 1009, 1017, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1058], "center1": 101, "center2": 101, "center3": 101, "center4": 101, "center_": 891, "center_box": [95, 521], "centers_0": 320, "centers_1": 320, "centers_init": 94, "cento": 382, "centr": 158, "central": [0, 53, 220, 379, 385, 416, 1016, 1029], "centrality_scor": 55, "centroid": [2, 77, 80, 92, 93, 111, 188, 298, 305, 320, 330, 359, 380, 407, 416, 450, 451, 454, 455, 456, 457, 460, 467, 468, 470, 513, 558, 640, 860, 1031, 1032, 1036, 1041, 1045, 1048, 1053, 1057], "centroids_": [450, 454, 860], "ceo": 1034, "cerda": 1055, "certain": [52, 90, 149, 154, 191, 223, 235, 252, 276, 297, 321, 351, 367, 379, 380, 384, 388, 398, 401, 410, 412, 416, 421, 425, 647, 658, 662, 667, 672, 693, 873, 878, 913, 999, 1002, 1006, 1007, 1010, 1011, 1014, 1020, 1025, 1029, 1046, 1050, 1053, 1056], "certainli": [88, 104, 191, 359, 415], "certainti": [276, 386, 751, 1010], "ceshin": 1047, "cest": 1010, "cetina": 1053, "cf": [324, 415, 416, 419, 450, 709, 1006, 1020, 1030], "cflag": 382, "cft": 416, "cftree": 450, "cg": [315, 667, 668, 681, 683, 696, 1006, 1045, 1046, 1048, 1052, 1054, 1055, 1058, 1059], "cga": 183, "cgi": 906, "cgohlk": [1044, 1045], "cgroup": [1054, 1055], "cgsavard": [1051, 1052], "ch6": 539, "chacon": 714, "chac\u00f3n": [416, 714], "chad": 1058, "chadi": 1049, "chai": [1053, 1056, 1057], "chain": [2, 35, 103, 109, 138, 165, 188, 248, 284, 287, 294, 295, 297, 300, 315, 367, 376, 396, 398, 426, 505, 511, 550, 620, 636, 667, 747, 809, 839, 842, 844, 845, 846, 847, 873, 874, 893, 999, 1000, 1011, 1015, 1027, 1031, 1034, 1036], "chain_jaccard_scor": 296, "chain_method": [844, 1059], "chain_method_": 844, "chaitanya": 1052, "chaitanyamog": 1053, "chakhchoukh": 114, "chakravarti": [644, 646], "chalearn": 1010, "challeng": [51, 159, 175, 192, 198, 236, 245, 373, 379, 380, 410, 416, 418, 470, 480, 1010, 1016, 1034], "chalmer": 1055, "chalmerlow": 1044, "chalulu": 1056, "chan": [0, 851, 893, 1059, 1060], "chanc": [2, 71, 73, 84, 138, 168, 188, 194, 218, 226, 233, 236, 276, 282, 285, 286, 323, 354, 359, 367, 383, 415, 416, 420, 709, 711, 713, 714, 717, 725, 764, 766, 795, 804, 838, 1010, 1018, 1026, 1031, 1057], "chance_level_": [709, 711, 1057], "chance_level_kw": [255, 709, 711, 1057], "chandra": [1051, 1052, 1055], "chang": [2, 46, 62, 63, 64, 124, 128, 129, 141, 144, 152, 176, 186, 190, 191, 194, 206, 219, 220, 222, 223, 256, 257, 270, 271, 276, 283, 286, 290, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 347, 351, 360, 366, 367, 371, 372, 373, 379, 386, 387, 388, 389, 392, 396, 398, 407, 416, 420, 423, 424, 426, 428, 436, 441, 445, 448, 451, 452, 455, 457, 460, 462, 467, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 502, 503, 505, 513, 517, 518, 521, 522, 523, 531, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 597, 598, 599, 600, 602, 603, 606, 611, 619, 620, 622, 623, 624, 626, 628, 629, 631, 632, 634, 636, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 699, 701, 703, 709, 713, 716, 721, 725, 726, 738, 739, 745, 746, 764, 766, 787, 792, 793, 794, 796, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 823, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 863, 864, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 885, 886, 892, 893, 894, 901, 902, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 932, 937, 939, 940, 952, 957, 968, 975, 976, 979, 999, 1000, 1001, 1009, 1010, 1011, 1013, 1020, 1023, 1024, 1025, 1026, 1030, 1039, 1040], "changed_onli": 1052, "changedbehaviorwarn": 1053, "changedbehaviourwarn": 1050, "changelog": [331, 388, 398, 1039], "changing_param": 46, "changing_param_valu": 46, "changyao": [1056, 1057], "channel": [372, 379, 382, 402, 424, 502, 503, 592, 593, 595, 596, 1033], "channel_prior": 382, "chapman": 1006, "chapter": [124, 367, 386, 416, 421, 423, 426, 539, 541, 543, 623, 628, 631, 652, 1000, 1003, 1006, 1025, 1026], "char": [424, 597, 598, 600, 1041], "char_wb": [424, 597, 598, 600], "charact": [360, 384, 389, 398, 424, 512, 517, 518, 597, 598, 600, 925, 1015, 1041, 1054, 1056], "character": [75, 236, 362, 416, 420, 1007], "characteris": 1013, "characterist": [2, 79, 97, 173, 180, 188, 245, 246, 258, 268, 270, 271, 273, 317, 367, 379, 381, 389, 414, 415, 420, 423, 426, 512, 513, 632, 647, 667, 711, 715, 717, 736, 791, 797, 798, 828, 839, 842, 880, 918, 1006, 1031], "chardet": 424, "chardetect": 424, "charg": [0, 270, 384], "charikar": 1002, "charl": [64, 270, 773, 1041, 1044, 1047, 1051, 1053, 1056], "charli": [1048, 1049, 1057], "charlton": 1048, "charra": [1056, 1058, 1059], "charron": [1034, 1044, 1045, 1052, 1053, 1054], "charset": [1041, 1043], "charset_error": 1043, "chart": [72, 149, 281, 404, 1011, 1044], "chartbeat": 1034, "chase": [51, 1041], "chasnovski": 1052, "chat": 1034, "chatterje": 1052, "chaudhuri": 454, "chauhan": [1049, 1050, 1056, 1057], "chaumond": [1034, 1049], "chauvin": 752, "chavez": [45, 379], "chawla": 1051, "chayant": 1048, "chazalon": 1055, "cheaper": [192, 416, 426, 682, 1002, 1006], "cheat": [52, 347, 404, 1014, 1024, 1043], "chebee7i": 1045, "chebyshev": [458, 465, 708, 787, 788, 789, 1013], "chebyshevdist": 708, "check": [2, 41, 43, 44, 47, 55, 81, 88, 91, 128, 136, 144, 159, 175, 188, 190, 192, 193, 204, 205, 207, 218, 239, 252, 262, 268, 270, 285, 294, 329, 338, 366, 371, 372, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 397, 398, 402, 403, 407, 410, 417, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 499, 511, 517, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 696, 697, 698, 699, 700, 701, 702, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 837, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 939, 940, 941, 951, 952, 962, 964, 965, 966, 970, 971, 993, 994, 995, 997, 998, 1005, 1006, 1007, 1010, 1025, 1026, 1030, 1031, 1034, 1036, 1041, 1042, 1044, 1048, 1052, 1053, 1054, 1055, 1056, 1058, 1060], "check_arrai": [2, 386, 393, 476, 543, 911, 998, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "check_classifier_multioutput": 1051, "check_consistent_length": 2, "check_cv": [2, 398, 1046], "check_decision_proba_consist": 1048, "check_estim": [2, 326, 386, 398, 932, 952, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1060], "check_estimator_sparse_arrai": 1059, "check_estimator_sparse_data": 1059, "check_estimator_sparse_matrix": 1059, "check_estimators_fit_returns_self": 952, "check_estimators_pickl": 1058, "check_fit_idempot": 1050, "check_increas": 2, "check_input": [543, 557, 655, 656, 661, 669, 670, 671, 690, 696, 921, 922, 923, 924, 1049], "check_invers": [417, 473, 877, 1020, 1049, 1055, 1056], "check_is_fit": [2, 91, 136, 252, 387, 393, 398, 1051, 1054, 1055, 1060], "check_memori": [2, 393, 398, 1048], "check_metadata": 252, "check_methods_sample_order_invari": [1053, 1055], "check_methods_subset_invari": [1049, 1055], "check_nam": 932, "check_non_neg": 1060, "check_pairwise_arrai": [1050, 1060], "check_param": 998, "check_random_st": [2, 96, 234, 240, 248, 254, 386, 393, 398], "check_regressor_multioutput": 1051, "check_requires_y_non": 1055, "check_sample_weights_pandas_seri": 1049, "check_scalar": [2, 1055], "check_scor": [2, 398, 1059, 1060], "check_set_param": 1049, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1051, "check_transformers_unfitted_stateless": 1057, "check_x_i": [2, 386, 393, 998, 1045, 1049, 1050, 1055, 1060], "checkbox": 384, "checked_cv": 833, "checker": [2, 388, 833], "checkerboard": [2, 58, 413, 459, 461, 520, 522], "checking_statu": 270, "checkingclassifi": 1051, "checklist": [387, 388], "checkout": [382, 384, 388, 392], "checks_gener": 951, "checksum": [500, 1053], "cheeseman": 381, "chege": 1055, "chemic": 381, "chemometr": 381, "chen": [111, 112, 418, 423, 429, 483, 735, 765, 1002, 1010, 1044, 1047, 1048, 1049, 1051, 1054, 1055, 1056, 1057, 1060], "chenal": [1050, 1051, 1053], "cherkasski": 1006, "chernei": 1059, "chernyi": 1055, "cherri": 388, "cherti": 1045, "cherubin": 1047, "chestervil": 331, "cheuk": [1049, 1050], "cheung": 1042, "chevali": 1053, "chevalli": 1058, "chevron": 51, "chi": [2, 105, 113, 138, 321, 376, 425, 528, 601, 604, 605, 607, 608, 609, 613, 614, 615, 618, 647, 648, 649, 650, 651, 767, 768, 1036, 1041, 1046, 1047], "chi2": [2, 105, 424, 425, 460, 590, 601, 604, 605, 607, 608, 609, 614, 615, 618, 629, 647, 648, 649, 650, 651, 652, 768, 774, 783, 1041, 1048, 1055], "chi2_featur": 651, "chi2_kernel": [2, 412, 647, 651, 767, 774, 1008, 1042, 1060], "chi2_stat": 613, "chi2sampl": 647, "chiang": 1049, "chiara": [0, 375, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "chibuik": 1054, "chicco": 1059, "chief": 1034, "chieh": [1048, 1049], "chigurupati": 1053, "chih": [667, 1046], "chilamkurthi": 1047, "child": [154, 252, 358, 366, 372, 396, 398, 407, 416, 423, 450, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 921, 922, 923, 924, 966, 967, 969, 1026, 1048, 1060], "child_idx": 76, "children": [366, 416, 423, 449, 453, 471, 575, 1045, 1058], "children_": [76, 449, 453, 471], "children_left": 366, "children_right": 366, "chime": 383, "chin": [381, 1045], "china": [83, 416, 515, 516, 593, 596], "chines": 1029, "chinmaya": 1048, "chinthala": 1048, "chiotelli": 1050, "chip": [412, 1034], "chisquar": 321, "chitteti": 1055, "chkoar": 1048, "chloe": 1055, "cho": 1052, "choe": 1050, "choi": [1006, 1059], "choic": [2, 43, 46, 64, 75, 81, 90, 100, 104, 111, 131, 154, 175, 176, 182, 186, 207, 219, 255, 269, 270, 274, 276, 279, 290, 302, 324, 328, 358, 359, 367, 371, 382, 389, 398, 402, 416, 418, 420, 422, 423, 425, 426, 460, 470, 479, 480, 481, 482, 483, 484, 486, 547, 549, 550, 556, 568, 647, 656, 657, 665, 667, 668, 670, 678, 689, 701, 714, 751, 842, 855, 856, 861, 863, 864, 890, 893, 902, 904, 913, 914, 943, 999, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1018, 1023, 1024, 1025, 1026, 1048, 1051, 1052, 1056, 1057], "choleski": [112, 218, 236, 393, 479, 480, 486, 536, 620, 657, 659, 660, 663, 664, 665, 667, 668, 678, 681, 683, 689, 691, 692, 696, 806, 807, 1006, 1044, 1048, 1050, 1053, 1056, 1057], "cholesky_delet": 393, "cholesterol": [173, 381], "chong": 545, "choo": [1056, 1057], "choos": [43, 50, 51, 79, 81, 85, 88, 95, 97, 101, 111, 130, 147, 159, 173, 191, 194, 211, 253, 270, 271, 281, 288, 362, 367, 371, 372, 373, 386, 389, 392, 397, 398, 410, 414, 415, 416, 418, 420, 423, 424, 427, 451, 452, 455, 457, 467, 532, 541, 547, 568, 569, 591, 611, 667, 668, 681, 683, 688, 696, 697, 698, 702, 735, 765, 809, 812, 813, 823, 880, 913, 914, 921, 922, 923, 924, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1013, 1020, 1023, 1024, 1025, 1036, 1043, 1044, 1048, 1050, 1052], "choose_check_classifiers_label": 1051, "choose_random_sampl": 386, "choraria": 1053, "chose": [77, 191], "chosen": [47, 58, 81, 107, 159, 176, 191, 192, 207, 219, 235, 253, 269, 270, 271, 273, 279, 290, 359, 367, 371, 396, 415, 416, 418, 419, 423, 426, 448, 454, 457, 459, 461, 462, 468, 505, 532, 544, 566, 567, 568, 569, 570, 571, 573, 574, 656, 662, 665, 667, 668, 670, 672, 680, 685, 686, 687, 688, 689, 699, 703, 803, 806, 807, 809, 812, 813, 823, 843, 862, 913, 914, 921, 922, 923, 924, 957, 999, 1002, 1004, 1006, 1007, 1009, 1011, 1016, 1017, 1024, 1026, 1049, 1057, 1058], "chou": [1048, 1049], "choudhari": [1045, 1046, 1055, 1057], "choudhri": 1059, "chowdhuri": [1049, 1055], "choyal": [1048, 1049], "chri": [0, 406, 1041, 1044, 1049, 1050, 1051, 1052, 1055], "chrissobel": 1054, "christ": 57, "christian": [0, 57, 358, 359, 379, 405, 1034, 1041, 1042, 1045, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "christianwaldmann": 1056, "christin": [1056, 1057], "christo": [1050, 1051, 1053, 1055, 1058], "christof": [1045, 1046], "christoph": [192, 421, 426, 541, 619, 620, 623, 628, 631, 806, 1006, 1011, 1042, 1046, 1049, 1052, 1053, 1054, 1055, 1056], "christopherlim98": 1055, "chrome": 1020, "chronolog": [379, 506], "chu": [860, 1057], "chuan": 1014, "chugh": 1053, "chuliang": 1054, "chun": [1052, 1053, 1055, 1056, 1057], "chung": [1048, 1049], "chunk": [2, 47, 85, 371, 372, 416, 421, 427, 452, 457, 476, 547, 787, 790, 841, 842, 848, 849, 850, 851, 852, 911, 1012, 1048, 1049, 1050, 1051, 1052], "chunk_siz": 1042, "chunker": 424, "church": [906, 1022], "chyi": [1044, 1045, 1046, 1047, 1048], "ci": [90, 372, 387, 388, 1012, 1047, 1049], "ciccolella": [701, 1007], "cice": [1017, 1055], "cichocki": [421, 547, 549, 556], "cimport": [385, 393, 1049], "cindi": [1046, 1054, 1058, 1059], "cio": 378, "cipri\u00e1n": 1055, "circl": [2, 70, 95, 129, 157, 158, 166, 243, 253, 304, 307, 313, 317, 319, 338, 351, 365, 380, 388, 392, 416, 460, 470, 523, 531, 773, 1025], "circle1": 101, "circle2": 101, "circle3": 101, "circle4": 101, "circleci": [52, 151, 179, 181, 183, 184, 246, 262, 315, 319, 384], "circlecl": 0, "circuit": [57, 1007], "circular": 53, "circumst": [131, 236, 1013, 1029], "circumstanti": 218, "cirru": [0, 384], "cisco": 51, "citat": [0, 378, 381, 396], "cite": [378, 396, 416], "citi": [417, 424, 474], "citizen": 1020, "city_categori": 417, "city_london": 417, "city_pari": 417, "city_sallisaw": 417, "cityblock": [75, 79, 416, 458, 465, 771, 787, 788, 789, 1013], "cividi": 75, "ciyou": 667, "cj": [1012, 1044, 1045, 1046, 1047, 1048], "cjlin": [196, 378, 495, 517, 518, 667, 1044], "ckdtree": [427, 452, 1043], "cl": [0, 47, 51, 391, 398, 923], "cla": 130, "clabel": [178, 229], "clae": 1049, "clai": 1041, "claim": [188, 197, 384, 472, 505, 561, 657, 678, 689, 715, 754, 759, 761, 839, 874, 877, 878, 886, 893, 1006, 1031], "claimamount": 236, "claimnb": [218, 236], "clair": 1041, "clamp": [909, 1023], "clang": [382, 385], "clara": [378, 1053], "clare": 1051, "clarifi": [392, 399, 802], "clariti": [171, 384, 392], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 89, 90, 91, 93, 105, 106, 120, 121, 122, 129, 132, 134, 136, 137, 144, 146, 154, 155, 160, 173, 175, 176, 178, 179, 181, 183, 184, 186, 188, 191, 192, 196, 197, 208, 209, 210, 226, 230, 233, 234, 239, 245, 252, 253, 255, 261, 262, 263, 268, 269, 270, 271, 276, 278, 282, 286, 287, 290, 294, 296, 297, 300, 302, 303, 305, 306, 307, 308, 322, 326, 330, 332, 333, 334, 336, 338, 339, 342, 343, 344, 345, 347, 348, 351, 355, 358, 359, 360, 363, 366, 373, 376, 378, 379, 380, 381, 384, 385, 386, 388, 389, 390, 391, 393, 396, 397, 402, 407, 410, 411, 412, 414, 416, 417, 419, 421, 425, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 509, 511, 512, 513, 517, 518, 519, 521, 523, 524, 528, 531, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 586, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 729, 731, 736, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 763, 764, 766, 791, 792, 793, 795, 796, 797, 798, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 944, 945, 947, 948, 949, 951, 952, 962, 965, 966, 967, 970, 975, 977, 979, 980, 993, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1017, 1018, 1020, 1021, 1023, 1026, 1030, 1031, 1032, 1034, 1036, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "class1_1": 161, "class2_1": 161, "class_0": [226, 381, 519], "class_1": [226, 381, 519], "class_2": [381, 519], "class_count_": [848, 849, 850, 851, 852], "class_id": [285, 286], "class_index": 90, "class_label": [398, 566, 570, 573, 667, 668, 675, 677, 683, 684, 685, 808, 831, 921, 923, 945, 1025], "class_likelihood_ratio": [2, 279, 1010, 1056], "class_log_prior_": [848, 849, 850, 852], "class_memb": 73, "class_member_mask": 84, "class_nam": [140, 269, 894, 925, 926, 927, 1026, 1057], "class_name0": [432, 450, 451, 453, 455, 457, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 879, 905, 906], "class_name1": [432, 450, 451, 453, 455, 457, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 879, 905, 906], "class_name2": [432, 450, 451, 453, 455, 457, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 879, 905, 906], "class_of_interest": [66, 285, 640, 1058], "class_prior": [379, 848, 849, 850, 852, 1042, 1045], "class_prior_": [560, 851], "class_protein_loc": 294, "class_sep": [172, 307, 524, 808, 831], "class_weight": [2, 45, 349, 398, 566, 570, 573, 667, 668, 675, 677, 683, 684, 685, 686, 913, 915, 918, 920, 921, 923, 944, 945, 999, 1024, 1025, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1055, 1056], "class_weight_": [915, 918, 1056], "class_weight_vect": 944, "classes_": [136, 210, 227, 246, 252, 285, 336, 337, 384, 386, 398, 441, 445, 446, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 602, 603, 619, 640, 667, 668, 675, 677, 683, 684, 685, 706, 709, 711, 797, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 855, 860, 863, 870, 873, 880, 881, 884, 894, 908, 909, 910, 913, 915, 918, 921, 923, 926, 1010, 1021, 1024, 1042, 1045, 1046, 1048, 1051, 1053], "classic": [55, 213, 242, 261, 267, 351, 381, 388, 418, 420, 421, 451, 455, 457, 467, 501, 509, 513, 519, 550, 641, 642, 923, 924, 1004, 1006, 1009, 1012, 1020, 1029, 1041, 1042, 1046, 1055], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 80, 91, 105, 106, 107, 111, 112, 117, 119, 122, 127, 136, 138, 140, 142, 144, 145, 146, 147, 152, 154, 155, 157, 161, 163, 166, 168, 169, 170, 172, 173, 174, 180, 181, 191, 192, 196, 197, 208, 209, 210, 211, 218, 226, 228, 229, 230, 231, 233, 244, 246, 250, 251, 252, 255, 258, 264, 265, 268, 269, 273, 274, 275, 276, 277, 285, 290, 291, 292, 294, 295, 298, 299, 305, 306, 307, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 336, 341, 342, 343, 347, 350, 352, 353, 354, 355, 356, 357, 359, 360, 367, 371, 373, 377, 378, 379, 381, 386, 389, 393, 397, 398, 411, 414, 415, 416, 417, 420, 421, 423, 424, 425, 433, 445, 477, 483, 490, 495, 496, 497, 499, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 519, 521, 523, 524, 528, 529, 531, 532, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 575, 576, 578, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 615, 618, 619, 620, 622, 623, 631, 640, 641, 642, 652, 667, 668, 675, 677, 683, 684, 685, 706, 712, 714, 717, 721, 722, 724, 725, 727, 735, 736, 738, 739, 743, 744, 747, 750, 751, 752, 763, 765, 767, 768, 770, 791, 792, 793, 795, 796, 797, 798, 803, 805, 808, 809, 810, 812, 813, 814, 815, 823, 827, 828, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 855, 860, 862, 863, 869, 870, 871, 873, 877, 880, 885, 886, 887, 888, 893, 894, 897, 899, 908, 909, 910, 913, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 929, 942, 945, 954, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1012, 1015, 1017, 1018, 1020, 1021, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 91, 104, 105, 106, 107, 108, 120, 129, 134, 138, 139, 140, 141, 142, 145, 146, 147, 150, 157, 160, 161, 166, 169, 170, 171, 172, 177, 188, 193, 194, 196, 197, 208, 209, 210, 216, 218, 225, 227, 230, 233, 236, 245, 248, 250, 252, 258, 269, 270, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 292, 294, 295, 299, 305, 306, 308, 312, 315, 319, 328, 329, 333, 335, 336, 337, 339, 340, 342, 343, 345, 346, 348, 349, 350, 351, 355, 356, 360, 379, 381, 384, 386, 389, 396, 398, 407, 415, 416, 417, 420, 424, 425, 426, 433, 441, 442, 443, 444, 445, 446, 447, 496, 497, 505, 513, 521, 523, 524, 531, 540, 545, 546, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 575, 576, 577, 578, 579, 602, 603, 611, 615, 619, 631, 638, 640, 641, 642, 658, 667, 668, 675, 677, 680, 681, 682, 683, 684, 685, 706, 707, 709, 711, 712, 716, 717, 718, 720, 721, 722, 727, 729, 731, 735, 736, 738, 739, 741, 743, 744, 747, 748, 749, 750, 751, 752, 763, 765, 791, 792, 793, 796, 797, 798, 803, 805, 808, 809, 812, 813, 815, 823, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 860, 861, 863, 864, 869, 870, 871, 873, 874, 880, 893, 894, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 929, 932, 933, 946, 949, 951, 999, 1000, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1015, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059], "classification_data": 46, "classification_report": [2, 45, 68, 104, 170, 274, 315, 336, 337, 831, 1010, 1043, 1045, 1049, 1050, 1051, 1053, 1057, 1059, 1060], "classificationcriterion": 1049, "classifier_": [91, 252], "classifier_01": 334, "classifier_05": 334, "classifier__c": 105, "classifier__criterion": 257, "classifier__max_depth": 257, "classifier__max_featur": 257, "classifier__min_samples_leaf": 193, "classifier__n_estim": 257, "classifier__n_neighbor": 299, "classifier_idx": 66, "classifier_model": 299, "classifier_other_threshold": 808, "classifier_tag": [932, 946], "classifier_tun": 831, "classifierchain": [2, 296, 398, 407, 845, 847, 1048, 1053, 1056, 1058, 1059], "classifiermixin": [2, 136, 252, 384, 386, 398, 420, 933, 1052], "classifiertag": [2, 932, 946], "classify__c": 106, "classmethod": [391, 446, 640, 641, 706, 707, 708, 709, 710, 711, 815, 832], "classnameprefixfeaturesoutmixin": [2, 386, 440, 1056], "claudio": [381, 1055, 1056, 1058, 1059], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 396], "clauss": 1058, "clb": 192, "clean": [87, 105, 217, 367, 376, 382, 422, 1016, 1020, 1051], "cleaner": 101, "cleanli": [97, 1041], "cleanup": [384, 1041], "clear": [43, 90, 95, 106, 191, 192, 322, 379, 383, 384, 386, 396, 397, 398, 414, 417, 422, 927, 928, 999, 1004, 1052, 1053, 1054, 1059], "clear_data_hom": 2, "clearer": [243, 1025], "clearli": [43, 95, 127, 192, 250, 351, 383, 384, 396, 398, 421, 423, 1011, 1017], "clegg": 1044, "clemen": 1045, "clement": [1048, 1049, 1053], "clenaghan": [1046, 1047], "cleveland": 379, "cleverless": 1043, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 83, 86, 89, 93, 98, 105, 130, 142, 150, 153, 155, 160, 164, 166, 169, 170, 172, 177, 179, 194, 208, 210, 211, 215, 216, 222, 225, 227, 230, 231, 232, 233, 234, 241, 246, 247, 250, 253, 259, 265, 273, 277, 281, 282, 284, 287, 288, 300, 303, 304, 305, 308, 312, 319, 322, 326, 327, 328, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 358, 362, 363, 366, 371, 379, 397, 398, 410, 417, 420, 423, 425, 446, 558, 559, 562, 564, 566, 568, 570, 572, 573, 576, 602, 603, 606, 641, 643, 647, 648, 649, 650, 651, 653, 654, 657, 661, 667, 668, 669, 670, 671, 675, 677, 678, 681, 682, 683, 684, 685, 686, 689, 706, 707, 709, 711, 720, 797, 809, 812, 813, 823, 841, 842, 843, 845, 848, 849, 850, 851, 852, 859, 860, 870, 913, 915, 917, 918, 921, 925, 927, 1000, 1002, 1006, 1010, 1011, 1013, 1014, 1016, 1017, 1024, 1025, 1026], "clf1": [69, 160, 161, 423, 578], "clf2": [69, 160, 161, 386, 423, 578], "clf3": [69, 160, 161, 386, 423, 578], "clf__": 277, "clf__alpha": 277, "clf__c": 417, "clf_descr": 358, "clf_en_lr": 209, "clf_err": 142, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 209, "clf_l2_lr": 209, "clf_list": [62, 64], "clf_name": [49, 358], "clf_no_weight": 356, "clf_pf": 851, "clf_prob": 63, "clf_sample_weight": 252, "clf_score": 61, "clf_sel": 194, "clf_select": 169, "clf_sgd": 232, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 165, "clf_weight": 356, "click": [247, 257, 277, 327, 333, 384, 386, 392, 404, 1034], "clickabl": 1055, "client": 386, "clifford": 1054, "cliffordemmanuel": 1054, "clim": 178, "climatologi": 414, "climb": [416, 456, 469], "clinton": 57, "clip": [62, 64, 236, 248, 317, 347, 644, 685, 750, 883, 1020, 1045, 1052, 1053, 1060], "clmbst": 1053, "clock": 43, "clone": [2, 91, 151, 183, 192, 252, 315, 333, 367, 382, 384, 387, 388, 390, 392, 398, 414, 417, 426, 445, 473, 578, 579, 606, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 815, 832, 837, 840, 844, 847, 873, 874, 910, 1030, 1041, 1047, 1049, 1053, 1057, 1058], "clone_kernel": [619, 620, 1051], "clone_with_theta": [183, 426, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "cloned_classifi": 441, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 81, 89, 95, 101, 111, 112, 115, 129, 141, 148, 151, 155, 159, 175, 176, 179, 180, 181, 182, 183, 191, 193, 203, 222, 224, 239, 245, 251, 255, 261, 267, 276, 277, 290, 303, 304, 317, 326, 347, 351, 352, 359, 367, 379, 384, 386, 387, 388, 396, 398, 399, 414, 416, 419, 420, 423, 426, 458, 463, 480, 517, 518, 541, 572, 637, 652, 656, 670, 681, 683, 696, 714, 755, 806, 827, 828, 848, 849, 850, 852, 859, 940, 999, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1016, 1017, 1020, 1025, 1029, 1034, 1044, 1048, 1049, 1050], "close_pric": 51, "closer": [43, 72, 127, 129, 158, 173, 175, 192, 198, 222, 351, 360, 414, 416, 421, 457, 562, 637, 721, 855, 856, 861, 863, 864, 865, 1025, 1048], "closest": [64, 81, 99, 222, 386, 416, 448, 450, 451, 455, 456, 457, 467, 662, 788, 789, 843, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 1001, 1004, 1011, 1013], "closur": 55, "cloud": [78, 117, 123, 125, 188, 392, 421, 542, 550, 701, 1010, 1028, 1029, 1031], "cloudpickl": 1036, "clouldpickl": 410, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 381, "clue": [379, 392, 1007], "clump": 242, "clust": [100, 458, 465], "cluster": [2, 47, 48, 53, 54, 55, 56, 58, 61, 64, 77, 78, 81, 83, 85, 86, 88, 89, 92, 94, 96, 97, 104, 113, 120, 121, 130, 136, 140, 147, 155, 168, 183, 194, 215, 239, 241, 242, 243, 249, 252, 255, 261, 262, 263, 264, 277, 297, 303, 304, 306, 320, 327, 331, 336, 337, 338, 339, 340, 349, 357, 358, 360, 366, 373, 377, 379, 381, 384, 386, 389, 396, 398, 411, 412, 417, 422, 424, 427, 430, 431, 434, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 496, 511, 512, 513, 520, 521, 522, 523, 524, 531, 539, 550, 553, 562, 573, 575, 598, 599, 600, 640, 700, 701, 704, 713, 714, 719, 723, 724, 726, 728, 734, 740, 745, 746, 764, 766, 787, 788, 795, 801, 802, 804, 806, 807, 865, 866, 874, 878, 885, 893, 949, 951, 970, 993, 1000, 1007, 1009, 1013, 1016, 1018, 1020, 1023, 1027, 1029, 1030, 1031, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "cluster_1": 155, "cluster_2": 155, "cluster_al": [456, 469], "cluster_cent": [73, 96, 98, 99, 469], "cluster_center_indic": [448, 462], "cluster_centers_": [77, 78, 83, 85, 93, 95, 96, 98, 99, 124, 330, 359, 448, 451, 455, 456, 457], "cluster_centers_indic": [73, 462], "cluster_centers_indices_": [73, 448], "cluster_data": 94, "cluster_doc": 57, "cluster_hierarchy_": [416, 458], "cluster_id": [194, 359], "cluster_id_to_feature_id": 194, "cluster_label": [91, 95], "cluster_method": 458, "cluster_optics_dbscan": [2, 100, 416], "cluster_optics_xi": 2, "cluster_qr": [81, 416, 460, 470, 1055], "cluster_s": 359, "cluster_selection_epsilon": 454, "cluster_selection_method": 454, "cluster_std": [63, 73, 79, 84, 90, 91, 92, 94, 95, 97, 98, 99, 230, 245, 264, 320, 349, 521], "cluster_word": 57, "clusterer_": 91, "clustering_algorithm": [78, 79, 97], "clustering_metr": 93, "clustermixin": [2, 386, 1058], "clusters_std": 349, "clyde": 1046, "cl\u00e9ment": [1050, 1054, 1056], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 102, 113, 115, 124, 127, 130, 140, 146, 147, 166, 171, 178, 179, 192, 202, 210, 227, 230, 231, 234, 239, 240, 241, 246, 249, 250, 254, 259, 269, 270, 271, 297, 300, 301, 303, 307, 310, 312, 314, 315, 317, 319, 328, 331, 336, 337, 341, 343, 344, 345, 347, 348, 349, 355, 356, 363, 381, 417, 706, 926, 1010, 1020, 1026], "cm2013": 416, "cm_bright": [67, 312, 319], "cm_displai": 246, "cm_piyg": 319, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 81, 82, 85, 86, 88, 89, 93, 113, 115, 124, 127, 130, 134, 140, 146, 147, 166, 171, 178, 179, 192, 198, 202, 203, 209, 210, 227, 230, 231, 232, 234, 239, 240, 241, 249, 250, 254, 269, 271, 297, 301, 303, 305, 306, 308, 310, 312, 314, 315, 317, 319, 336, 337, 341, 343, 344, 345, 346, 347, 348, 349, 352, 355, 356, 363, 706], "cmap_bold": [305, 308], "cmap_cv": 271, "cmap_data": 271, "cmap_light": [305, 308], "cmcsa": 51, "cmd": 382, "cmu": 908, "cname": 77, "cnb": 1012, "cnp": 385, "cnx": 1049, "co": [2, 43, 51, 53, 56, 58, 74, 75, 104, 156, 158, 180, 188, 191, 219, 240, 276, 291, 330, 340, 358, 359, 360, 365, 388, 422, 424, 457, 459, 461, 496, 520, 600, 708, 728, 773, 804, 1005, 1020, 1031, 1034, 1035, 1036], "co2": [174, 182, 188, 426, 505, 620, 624, 631, 632, 634, 1031, 1048], "co2_data": 180, "co2_kernel": 180, "coars": [43, 147, 390, 456, 469], "coarser": [147, 151], "coast": [50, 310], "coastlin": [50, 173, 310, 381], "coca": 51, "cock": [159, 1050], "cockburn": 1043, "coclust": [57, 413, 459, 522], "cocoa": 1034, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 378, 382, 383, 385, 387, 388, 393, 396, 398, 399, 402, 407, 410, 412, 415, 416, 423, 424, 450, 451, 455, 457, 467, 505, 535, 539, 540, 546, 547, 551, 552, 554, 555, 557, 575, 581, 590, 591, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 691, 692, 694, 695, 720, 841, 842, 843, 880, 887, 999, 1007, 1011, 1020, 1022, 1024, 1025, 1029, 1030, 1031, 1033, 1034, 1041, 1043, 1044, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "code_book_": 843, "code_init": [540, 554], "code_s": [294, 843, 1011], "codebas": [332, 367, 384, 385, 386, 424, 1041, 1047], "codebook": [83, 294, 575, 843], "codebook_random": 83, "codecov": 392, "codeofconduct": 384, "coder": [133, 551, 725], "codevig": 1047, "coef": [49, 89, 133, 190, 191, 198, 203, 209, 210, 212, 217, 221, 222, 223, 227, 233, 234, 259, 289, 314, 332, 355, 533, 655, 656, 658, 661, 662, 668, 669, 670, 671, 672, 678, 681, 683, 689, 690, 691, 692, 693, 694, 695, 696, 1014], "coef0": [196, 351, 353, 460, 544, 648, 649, 652, 784, 786, 915, 916, 917, 918, 919, 1008, 1025], "coef_": [46, 49, 53, 89, 117, 169, 170, 173, 190, 191, 198, 201, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 217, 221, 222, 223, 227, 233, 234, 253, 259, 289, 290, 324, 330, 345, 352, 355, 358, 367, 379, 386, 398, 419, 425, 473, 490, 491, 492, 558, 602, 603, 606, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 913, 914, 915, 916, 917, 918, 919, 993, 1004, 1006, 1024, 1025, 1041, 1043, 1046, 1048, 1053, 1055, 1058, 1059], "coef_agglomeration_": 89, "coef_en_lr": 209, "coef_i": 191, "coef_init": [655, 656, 661, 662, 669, 670, 671, 672, 675, 676, 677, 685, 686, 687, 690, 693], "coef_l": 206, "coef_l1_lr": 209, "coef_l2_lr": 209, "coef_lar": 206, "coef_lasso": 206, "coef_lasso_": 212, "coef_multi_task_lasso_": 212, "coef_p": 206, "coef_path": [662, 672, 693], "coef_path_": [659, 660, 663, 664, 1006], "coef_path_continu": [662, 672, 693], "coef_path_lar": [662, 672, 693], "coef_pl": 206, "coef_positive_lar": 206, "coef_ridg": 201, "coef_selection_": 89, "coeff": 689, "coeff_diff": 204, "coeffeci": 1050, "coeffici": [2, 25, 46, 49, 73, 84, 93, 95, 111, 112, 115, 124, 127, 164, 170, 175, 188, 189, 190, 197, 201, 203, 204, 206, 209, 211, 212, 213, 214, 215, 216, 220, 221, 233, 236, 259, 276, 289, 290, 314, 324, 328, 329, 330, 351, 354, 358, 359, 360, 371, 380, 386, 398, 401, 418, 419, 421, 425, 426, 429, 439, 460, 473, 475, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 505, 533, 535, 536, 540, 544, 546, 548, 551, 552, 557, 561, 563, 565, 567, 569, 571, 574, 577, 579, 591, 598, 602, 606, 618, 620, 623, 636, 644, 645, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 710, 712, 725, 728, 738, 743, 747, 752, 759, 762, 784, 786, 794, 795, 797, 801, 802, 805, 824, 836, 839, 846, 847, 856, 864, 871, 874, 886, 893, 913, 914, 915, 916, 917, 918, 919, 922, 924, 1001, 1004, 1006, 1024, 1025, 1031, 1041, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1058], "coefs_": [211, 314, 870, 871, 1014, 1046], "coefs_cf": 324, "coefs_enet": 206, "coefs_lar": 206, "coefs_lasso": 206, "coefs_no_cf": 324, "coefs_path": 668, "coefs_paths_": [668, 1051], "coefs_positive_enet": 206, "coefs_positive_lar": 206, "coefs_positive_lasso": 206, "coelho": [1042, 1044, 1045, 1049], "coelhudo": 1053, "cognit": [173, 381], "cohen": [2, 725, 1049], "cohen_kappa_scor": [2, 1010, 1046, 1048, 1060], "coher": 416, "cohort": 162, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 83, 88, 89, 97, 101, 102, 188, 416, 424, 449, 470, 1022, 1031], "coincid": [179, 220, 426], "col": [52, 57, 62, 64, 73, 77, 84, 90, 94, 98, 99, 104, 107, 144, 160, 180, 238, 255, 355, 520, 522], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [431, 459, 461], "col_indic": 154, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 297, "cole": 1050, "coleman": [1042, 1043], "colgat": [51, 55], "colin": [45, 379, 1047], "collabor": 384, "collaps": [43, 192, 255, 317, 347, 396], "colleagu": 276, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 107, 142, 154, 155, 162, 173, 180, 187, 194, 205, 211, 241, 248, 279, 283, 359, 360, 371, 379, 381, 388, 402, 420, 421, 423, 424, 454, 472, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 578, 579, 590, 592, 593, 597, 598, 599, 600, 641, 738, 739, 747, 787, 792, 793, 796, 811, 815, 816, 818, 832, 980, 983, 999, 1005, 1006, 1010, 1016, 1021, 1030, 1034, 1043, 1053], "colleg": [0, 190], "college_degre": 190, "collid": 424, "collin": 1044, "collinear": [191, 194, 223, 236, 423, 576, 657, 678, 689, 886, 1006, 1041, 1060], "collis": [359, 360, 424, 591, 598], "collot": [1055, 1056], "colombia": [50, 310, 379, 507], "colon": 384, "coloni": 379, "color": [43, 45, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 71, 73, 75, 77, 79, 81, 82, 84, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 111, 112, 113, 114, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 138, 139, 144, 147, 148, 150, 153, 154, 155, 156, 157, 159, 161, 164, 166, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 191, 193, 194, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 232, 235, 236, 239, 240, 241, 243, 245, 249, 250, 251, 253, 256, 261, 262, 263, 264, 265, 266, 267, 270, 271, 275, 277, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 296, 299, 302, 303, 304, 305, 308, 309, 310, 312, 317, 318, 319, 321, 322, 323, 327, 333, 338, 339, 341, 345, 346, 347, 348, 349, 351, 353, 354, 355, 363, 364, 378, 379, 381, 392, 416, 423, 424, 455, 502, 503, 515, 592, 593, 788, 983, 1024, 1026, 1031, 1046, 1051, 1053, 1058], "color_continuous_scal": 277, "color_intens": 48, "color_it": [262, 266, 267], "color_map": 341, "color_palett": [72, 139, 154, 266], "colorbar": [43, 50, 66, 75, 124, 134, 146, 155, 171, 176, 178, 179, 181, 192, 238, 249, 265, 287, 317, 347, 706, 1053], "colorbarbas": 317, "colorblind": [72, 139, 154], "coloring_matrix": [111, 112], "colormap": [124, 183, 347, 706, 1054], "colors_": 77, "colors_list": 144, "colour": [264, 381, 424, 596, 1011], "colt": [735, 765, 1010], "colton": 1002, "columbia": 0, "column": [2, 43, 52, 58, 59, 95, 103, 106, 109, 120, 145, 147, 148, 151, 154, 156, 159, 173, 180, 186, 188, 190, 191, 192, 193, 194, 207, 218, 219, 222, 226, 236, 247, 254, 255, 256, 259, 266, 270, 276, 277, 287, 288, 290, 296, 314, 322, 323, 324, 328, 329, 330, 331, 333, 334, 358, 359, 360, 371, 378, 379, 381, 384, 386, 390, 393, 396, 397, 398, 413, 416, 417, 419, 421, 423, 424, 425, 428, 431, 459, 461, 472, 474, 475, 479, 480, 486, 495, 496, 497, 498, 499, 501, 503, 505, 509, 510, 511, 513, 514, 517, 518, 519, 520, 522, 524, 535, 540, 543, 546, 550, 551, 557, 564, 566, 567, 570, 571, 573, 574, 575, 576, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 619, 636, 639, 641, 642, 643, 655, 657, 661, 667, 669, 671, 673, 674, 678, 689, 694, 695, 706, 722, 727, 728, 738, 739, 747, 763, 772, 777, 778, 779, 782, 792, 793, 796, 797, 809, 812, 813, 823, 834, 839, 844, 847, 848, 849, 850, 851, 852, 853, 854, 873, 877, 878, 879, 880, 886, 887, 888, 892, 893, 894, 895, 897, 898, 899, 903, 904, 913, 915, 918, 921, 923, 930, 935, 939, 940, 945, 957, 972, 985, 986, 988, 996, 999, 1000, 1002, 1006, 1008, 1010, 1011, 1018, 1020, 1025, 1030, 1031, 1041, 1043, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "column_labels_": [58, 59, 413, 459, 461], "column_nam": 236, "column_or_1d": [2, 393, 1052, 1056], "column_result": 277, "column_stack": [76, 312, 319], "column_to_drop": 191, "column_tran": [236, 417], "column_transform": 334, "columnar": [378, 472, 1029], "columns_": [57, 413, 431, 459, 461], "columns_to_drop": 270, "columntransform": [2, 43, 104, 105, 159, 191, 192, 193, 218, 236, 247, 255, 257, 259, 323, 327, 329, 330, 331, 333, 376, 378, 396, 397, 407, 474, 475, 638, 878, 999, 1000, 1030, 1036, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "columntransformercolumntransform": [105, 159, 191, 193, 247, 257, 323, 327, 330], "columntransformerinot": [159, 192], "columnwis": 421, "com": [51, 104, 297, 358, 379, 382, 384, 388, 389, 390, 392, 396, 416, 450, 543, 550, 680, 714, 1048, 1051], "coma": 1034, "comaniciu": [98, 416, 456], "comapar": 416, "comb": 1055, "combat": [312, 421], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 96, 104, 105, 107, 108, 109, 120, 124, 132, 133, 137, 148, 149, 153, 154, 162, 175, 181, 186, 187, 188, 191, 203, 218, 222, 235, 236, 242, 245, 247, 250, 272, 276, 277, 285, 287, 288, 306, 313, 323, 328, 329, 331, 350, 351, 360, 363, 371, 376, 380, 381, 384, 389, 397, 398, 412, 413, 414, 416, 417, 420, 421, 422, 423, 424, 425, 426, 428, 429, 453, 472, 474, 475, 481, 483, 484, 487, 488, 489, 497, 505, 517, 518, 524, 530, 533, 535, 540, 546, 547, 549, 551, 556, 558, 569, 571, 574, 576, 577, 619, 623, 625, 630, 633, 639, 643, 652, 655, 656, 661, 662, 667, 668, 669, 670, 671, 672, 675, 677, 681, 682, 683, 684, 685, 687, 688, 690, 693, 701, 710, 739, 797, 809, 812, 813, 820, 821, 834, 836, 840, 857, 872, 873, 874, 878, 886, 887, 888, 893, 913, 983, 999, 1002, 1003, 1006, 1010, 1011, 1013, 1016, 1020, 1023, 1024, 1026, 1027, 1031, 1034, 1041, 1046, 1049, 1052, 1053, 1054, 1056, 1057], "combinator": 819, "combined_featur": 108, "combsccod": 1055, "comcast": 51, "come": [84, 102, 104, 113, 118, 129, 173, 175, 250, 290, 326, 358, 359, 371, 373, 377, 381, 384, 385, 388, 392, 396, 398, 402, 410, 415, 416, 420, 423, 424, 447, 458, 464, 480, 559, 714, 804, 830, 915, 918, 962, 999, 1000, 1004, 1007, 1009, 1013, 1016, 1025, 1041, 1052, 1055, 1057], "comedi": 884, "comfort": [90, 423], "command": [249, 371, 372, 382, 384, 388, 390, 392, 402, 424, 517, 1029, 1043], "comment": [81, 358, 382, 383, 384, 385, 387, 388, 392, 495, 588, 1010], "commerc": 1034, "commerci": [420, 1034], "commit": [387, 388, 392, 1033, 1041, 1042, 1043, 1044], "committ": [384, 1041], "commod": 1010, "common": [2, 52, 54, 55, 57, 127, 170, 173, 188, 189, 190, 214, 222, 223, 271, 276, 283, 294, 328, 351, 358, 360, 366, 371, 378, 384, 386, 392, 394, 396, 397, 401, 402, 407, 413, 414, 416, 417, 420, 422, 425, 426, 455, 473, 475, 505, 599, 641, 662, 681, 682, 710, 755, 762, 778, 810, 811, 814, 824, 826, 827, 828, 829, 830, 836, 839, 874, 876, 884, 885, 886, 891, 893, 898, 899, 901, 902, 903, 904, 930, 932, 959, 962, 999, 1000, 1006, 1013, 1016, 1020, 1025, 1026, 1029, 1030, 1031, 1034, 1036, 1041, 1049, 1051, 1052, 1056], "common_nod": 366, "common_node_id": 366, "common_param": [92, 151, 154, 192, 251, 278, 279, 351], "commonli": [218, 273, 351, 377, 398, 416, 417, 426, 623, 767, 768, 806, 842, 885, 1007, 1008, 1010, 1011, 1013, 1057], "commun": [252, 377, 383, 389, 392, 398, 399, 416, 423, 547, 549, 556, 701, 719, 885, 1000, 1007, 1013, 1020, 1024, 1029, 1033, 1034, 1049, 1050], "commut": [43, 52], "comp": [57, 117, 118, 127, 134, 315, 340, 358, 359, 360, 379], "comp_cov": [477, 478, 479, 480, 481, 482, 483, 484], "compact": [173, 196, 317, 371, 381, 853, 854, 1026, 1043], "compani": [218, 236, 415, 416, 1034], "companion": [384, 1020], "companioni": 1041, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 82, 84, 87, 89, 90, 92, 93, 99, 102, 105, 106, 107, 108, 113, 114, 116, 118, 121, 122, 127, 131, 133, 137, 138, 139, 141, 143, 147, 148, 149, 151, 153, 154, 155, 157, 159, 162, 165, 173, 179, 186, 187, 188, 191, 193, 194, 197, 199, 201, 203, 205, 206, 207, 213, 215, 218, 219, 221, 222, 224, 226, 228, 232, 235, 236, 238, 239, 242, 244, 247, 250, 253, 255, 256, 258, 263, 264, 268, 271, 273, 274, 275, 277, 279, 281, 283, 285, 287, 288, 291, 294, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 311, 314, 316, 318, 321, 322, 324, 328, 351, 358, 359, 360, 365, 366, 367, 373, 379, 381, 384, 386, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 425, 426, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 466, 471, 472, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 498, 505, 511, 513, 521, 523, 531, 533, 537, 540, 546, 548, 550, 554, 555, 560, 561, 570, 571, 572, 573, 574, 640, 648, 653, 654, 662, 664, 666, 667, 672, 675, 677, 685, 686, 693, 704, 714, 721, 724, 740, 747, 752, 795, 807, 809, 814, 823, 836, 839, 846, 855, 859, 862, 866, 870, 871, 873, 874, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 913, 914, 915, 917, 918, 999, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1031, 1041, 1043, 1048, 1049, 1054], "comparison": [51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 77, 83, 85, 92, 93, 94, 95, 96, 98, 104, 112, 120, 123, 125, 126, 128, 134, 138, 141, 144, 151, 154, 157, 161, 162, 167, 174, 180, 181, 182, 184, 188, 193, 201, 203, 204, 205, 206, 209, 216, 218, 222, 233, 236, 237, 240, 241, 242, 243, 244, 248, 249, 263, 268, 270, 271, 272, 273, 280, 288, 290, 296, 306, 312, 319, 321, 322, 326, 328, 341, 344, 353, 357, 358, 359, 367, 379, 381, 398, 414, 416, 418, 419, 421, 425, 426, 445, 446, 451, 454, 455, 457, 490, 491, 492, 496, 513, 521, 523, 524, 531, 534, 544, 550, 558, 559, 562, 573, 574, 590, 591, 597, 598, 599, 600, 615, 617, 619, 620, 624, 631, 634, 640, 648, 652, 668, 681, 697, 698, 699, 700, 701, 713, 747, 752, 788, 797, 809, 810, 811, 812, 814, 815, 823, 825, 826, 827, 828, 829, 830, 839, 848, 851, 855, 870, 871, 874, 886, 887, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 913, 915, 916, 918, 919, 921, 999, 1003, 1004, 1007, 1010, 1012, 1013, 1016, 1025, 1031, 1038], "compat": [252, 279, 297, 327, 378, 387, 393, 394, 396, 398, 402, 407, 410, 424, 471, 477, 517, 575, 586, 598, 612, 623, 624, 627, 628, 629, 631, 632, 641, 642, 643, 667, 668, 682, 684, 783, 787, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 857, 858, 873, 878, 886, 887, 925, 926, 932, 935, 951, 952, 972, 1007, 1013, 1015, 1029, 1030, 1034, 1036, 1041, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060], "compens": [114, 190, 192, 196, 218, 236, 277, 418, 421], "compet": [43, 191], "competit": [43, 151, 358, 423, 653, 1013], "compil": [159, 297, 360, 371, 372, 385, 386, 387, 392, 393, 396, 1029, 1041], "compl": 93, "complain": 1059, "complement": [2, 192, 286, 358, 641, 642, 811, 826, 829, 839, 848, 849, 850, 851, 852, 1017, 1032, 1036, 1049], "complementari": [43, 424], "complementnb": [2, 277, 358, 848, 849, 851, 852, 1012, 1049, 1053, 1054, 1056], "complementnbcomplementnb": 277, "complet": [0, 2, 43, 72, 73, 74, 79, 84, 87, 93, 97, 118, 154, 157, 168, 170, 173, 188, 193, 194, 224, 244, 245, 252, 255, 270, 274, 322, 324, 326, 359, 367, 379, 384, 388, 389, 392, 396, 417, 420, 421, 423, 424, 449, 453, 457, 460, 470, 471, 472, 475, 504, 545, 546, 547, 548, 553, 555, 567, 578, 579, 590, 596, 597, 598, 600, 636, 637, 638, 639, 654, 658, 666, 680, 682, 713, 714, 724, 725, 726, 738, 740, 745, 746, 766, 795, 804, 841, 844, 847, 856, 872, 873, 874, 875, 942, 994, 1004, 1006, 1010, 1011, 1013, 1025, 1026, 1029, 1031, 1041, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "completed_fac": 254, "completeness_scor": [2, 73, 84, 93, 327, 359, 416, 745, 746, 804, 1010], "complex": [42, 48, 49, 54, 58, 106, 144, 159, 172, 175, 180, 186, 188, 222, 232, 235, 244, 251, 252, 255, 268, 274, 277, 280, 285, 318, 326, 329, 330, 334, 335, 347, 351, 360, 361, 366, 380, 384, 389, 396, 416, 417, 421, 423, 427, 448, 452, 455, 456, 458, 475, 497, 509, 510, 511, 523, 543, 550, 560, 566, 567, 568, 569, 571, 573, 574, 613, 639, 647, 665, 667, 685, 686, 743, 759, 809, 839, 841, 869, 873, 874, 878, 886, 893, 909, 913, 916, 919, 921, 922, 923, 924, 999, 1000, 1002, 1003, 1005, 1007, 1009, 1011, 1016, 1020, 1023, 1030, 1031, 1032, 1034, 1036, 1042, 1044, 1050, 1051, 1054], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [384, 398, 951, 1030], "complianc": [0, 154], "compliant": [331, 384, 1059, 1060], "complic": [64, 252, 312, 390, 426, 703, 1013], "compon": [2, 11, 43, 44, 55, 79, 93, 97, 104, 107, 116, 117, 120, 125, 126, 128, 129, 130, 131, 132, 134, 157, 165, 180, 188, 190, 203, 238, 249, 250, 253, 261, 262, 265, 266, 267, 275, 277, 298, 299, 300, 308, 309, 315, 322, 328, 371, 376, 379, 384, 386, 390, 393, 410, 412, 416, 417, 419, 424, 426, 428, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 470, 471, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 511, 513, 524, 530, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 704, 806, 807, 808, 809, 812, 813, 823, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 956, 957, 1002, 1007, 1009, 1020, 1022, 1025, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1041, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "component_1": 266, "component_2": 266, "component_indices_": [648, 1054], "components_": [45, 54, 93, 118, 124, 126, 127, 134, 249, 250, 315, 322, 330, 398, 417, 421, 452, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 648, 862, 869, 905, 906, 1002, 1022, 1045, 1047, 1053, 1056, 1059], "components_col": 107, "compos": [2, 43, 44, 62, 103, 104, 105, 109, 118, 140, 148, 159, 188, 191, 192, 193, 218, 220, 236, 247, 255, 257, 259, 290, 294, 323, 327, 329, 330, 331, 333, 334, 397, 407, 416, 417, 420, 472, 473, 474, 475, 524, 562, 621, 1009, 1011, 1031, 1041], "composit": [7, 35, 247, 327, 376, 420, 667, 797, 1000, 1006, 1019, 1036, 1042], "compound": [43, 236, 424, 619, 621, 689, 733, 761, 1006], "compoundkernel": [2, 619, 1055], "comprehens": [351, 392, 424, 767, 768, 1008, 1034, 1049], "compress": [42, 50, 55, 83, 101, 188, 294, 317, 379, 410, 416, 421, 424, 425, 661, 681, 701, 843, 886, 980, 983, 995, 1006, 1011, 1020, 1031, 1041, 1050], "compressed_raccoon_kmean": 88, "compressed_raccoon_uniform": 88, "compris": [104, 151, 274, 358, 359, 360, 379, 396, 421, 423, 524, 816, 1007], "compromis": [48, 64, 192, 371, 384, 656, 688, 1013, 1044], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 81, 87, 89, 92, 93, 95, 96, 104, 106, 112, 113, 114, 115, 125, 133, 141, 145, 146, 149, 150, 151, 152, 153, 154, 172, 173, 175, 180, 182, 183, 186, 191, 192, 193, 194, 196, 199, 200, 203, 204, 205, 206, 207, 218, 220, 222, 226, 232, 235, 236, 239, 242, 246, 248, 249, 251, 255, 256, 258, 270, 272, 274, 276, 277, 278, 279, 283, 285, 287, 297, 299, 301, 303, 304, 306, 307, 310, 317, 326, 330, 331, 334, 337, 339, 347, 351, 354, 358, 359, 360, 366, 372, 373, 378, 379, 381, 384, 389, 390, 391, 393, 396, 397, 398, 401, 402, 410, 411, 412, 413, 414, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 465, 467, 469, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 525, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 591, 594, 595, 598, 599, 600, 602, 603, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 734, 735, 736, 738, 739, 740, 743, 745, 747, 748, 749, 751, 752, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 801, 802, 803, 805, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 878, 879, 882, 883, 888, 889, 890, 891, 892, 893, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 918, 920, 921, 922, 923, 924, 954, 955, 956, 957, 974, 975, 982, 984, 990, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "computation": [37, 53, 111, 124, 144, 150, 159, 175, 297, 351, 358, 370, 385, 396, 416, 417, 420, 421, 423, 426, 547, 641, 642, 680, 772, 809, 811, 812, 813, 823, 836, 1006, 1007, 1009, 1017, 1018, 1022, 1036, 1045], "compute_class_weight": [2, 398, 1044, 1055], "compute_corrected_ttest": 276, "compute_dist": [449, 453, 1053], "compute_full_tre": [449, 453, 1045], "compute_import": 1043, "compute_inverse_compon": [905, 906, 1022], "compute_inverse_transform": 1055, "compute_label": [450, 457], "compute_node_depth": 366, "compute_optics_graph": [2, 463, 464, 1058], "compute_sample_weight": [2, 1055], "compute_scor": [109, 131, 198, 199, 653, 654, 1050], "compute_sourc": 428, "computed_scor": 654, "con": [410, 598, 1009], "concat": [43, 186, 190, 207, 236, 886], "concaten": [2, 63, 70, 74, 85, 96, 103, 106, 114, 140, 155, 169, 183, 188, 198, 201, 210, 232, 233, 239, 245, 261, 265, 266, 272, 281, 283, 284, 285, 286, 302, 315, 321, 324, 337, 346, 350, 358, 417, 472, 475, 513, 518, 540, 546, 550, 551, 608, 790, 809, 872, 873, 875, 878, 886, 918, 1011, 1031, 1042], "concav": [173, 334, 381], "concentr": [46, 48, 100, 122, 129, 138, 157, 180, 187, 188, 243, 260, 262, 267, 287, 307, 319, 338, 380, 384, 423, 451, 528, 806, 1009, 1016, 1031], "concentrations_prior": 261, "concept": [2, 114, 144, 149, 252, 285, 396, 416, 422, 424, 1002, 1010, 1013, 1026, 1034], "conceptu": [381, 423, 1008], "concern": [37, 56, 71, 110, 116, 119, 123, 135, 137, 167, 174, 185, 188, 195, 197, 237, 260, 266, 270, 293, 295, 298, 311, 316, 335, 342, 357, 361, 371, 386, 410, 1007, 1022], "concis": [64, 218, 384, 389, 1052, 1054], "conclud": [138, 191, 199, 236, 276, 360, 367, 399, 873], "conclus": [43, 129, 191, 193, 218, 220, 276, 278, 367, 423], "concomit": [658, 1006], "concret": [222, 385, 399, 415, 425, 683, 684, 905, 906, 1006, 1024, 1029], "concurr": [398, 424, 975, 1053, 1055], "conda": [326, 327, 328, 329, 330, 331, 332, 333, 334, 372, 384, 385, 387, 388, 390, 392, 402, 403, 409, 410, 1026], "conda_prefix": 390, "condarc": 382, "condens": [196, 454], "condit": [2, 43, 51, 52, 62, 64, 115, 146, 151, 188, 189, 191, 207, 220, 223, 236, 252, 256, 279, 329, 366, 390, 396, 401, 412, 413, 414, 415, 416, 418, 421, 423, 425, 459, 472, 479, 480, 481, 486, 505, 522, 532, 533, 545, 548, 549, 550, 552, 554, 556, 558, 559, 571, 636, 641, 642, 652, 659, 660, 661, 663, 664, 665, 679, 681, 682, 683, 684, 691, 692, 696, 706, 721, 726, 727, 745, 746, 804, 848, 849, 850, 851, 852, 871, 874, 877, 886, 887, 890, 894, 957, 981, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1020, 1026, 1031, 1036, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1053, 1055, 1056, 1057, 1059], "condition": [51, 64, 218, 414, 418, 767, 1004], "condition2": 159, "conduct": [190, 276, 426, 1033, 1055], "conf": [46, 64, 388, 414, 420, 848, 1012, 1055], "confer": [270, 276, 379, 416, 421, 427, 447, 452, 458, 520, 544, 572, 705, 717, 735, 765, 869, 870, 871, 1010, 1016, 1022, 1026], "confid": [52, 61, 62, 63, 64, 154, 180, 182, 262, 276, 279, 339, 399, 414, 426, 645, 667, 668, 675, 677, 680, 683, 684, 685, 707, 711, 716, 729, 735, 736, 748, 749, 765, 798, 841, 880, 913, 915, 918, 1006, 1009, 1010, 1011, 1016, 1023, 1024, 1025, 1034, 1051], "config": [52, 372, 382, 384, 385, 392, 635, 1049], "config_context": [2, 259, 371, 372, 412, 635, 911, 1048, 1054, 1057], "configur": [2, 3, 46, 49, 64, 105, 106, 192, 252, 257, 259, 290, 324, 358, 370, 382, 384, 386, 390, 392, 396, 398, 402, 407, 412, 417, 424, 425, 440, 450, 451, 453, 455, 457, 460, 470, 472, 476, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 635, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 697, 698, 699, 700, 701, 703, 704, 797, 809, 823, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 911, 975, 976, 1007, 1010, 1020, 1025, 1029, 1036, 1045, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058], "confirm": [43, 52, 118, 141, 148, 151, 154, 193, 218, 220, 270, 279, 282, 285, 322, 360, 388, 999, 1020, 1049], "conflict": [382, 384, 388, 392, 402, 1048, 1049], "conform": [52, 384, 590, 637, 841, 842, 1010, 1029, 1030, 1048, 1054], "confound": [190, 191], "confus": [2, 68, 188, 246, 268, 270, 285, 336, 337, 358, 398, 476, 513, 640, 661, 706, 722, 724, 727, 738, 739, 747, 763, 793, 796, 839, 911, 918, 1031, 1041, 1042, 1046, 1050, 1051, 1053, 1054, 1055, 1056], "confusingli": 382, "confusion_matrix": [2, 68, 246, 269, 270, 334, 336, 337, 706, 722, 763, 808, 836, 1010, 1042, 1047, 1048, 1051, 1052, 1054, 1058], "confusion_matrix_scor": 1010, "confusionmatrixdisplai": [2, 45, 68, 269, 329, 334, 336, 358, 640, 727, 1010, 1051, 1052, 1054, 1055, 1056], "congruenc": [663, 664, 665, 691, 692], "conjug": [276, 460, 470, 681, 683, 696, 704, 1006], "conjunct": [407, 416, 603, 815, 831, 832, 834, 835, 836, 837, 840, 976, 1000, 1006, 1056], "connect": [2, 51, 74, 79, 82, 86, 89, 97, 101, 102, 382, 384, 393, 398, 418, 449, 453, 460, 470, 471, 594, 595, 704, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 1008, 1013, 1015, 1023, 1033, 1045, 1054, 1058], "connected_compon": 1048, "connectionist": [870, 871], "conner": 1054, "connor": [1049, 1054, 1058, 1059], "connossor": [1049, 1050], "conocophillip": 51, "conort": 1034, "conquer": 957, "conrad": [1041, 1042, 1056, 1059], "conroi": 1056, "consecut": [138, 149, 219, 396, 414, 420, 424, 451, 455, 457, 458, 460, 464, 467, 470, 546, 547, 548, 555, 611, 654, 675, 676, 677, 685, 686, 687, 806, 807, 814, 848, 849, 850, 851, 852, 870, 871, 999, 1020, 1049], "consensu": [2, 58, 59, 72, 383, 384, 399, 413, 416, 658, 680, 687, 688, 728, 1010], "consensus_scor": [2, 58, 59, 413, 1043], "consequ": [92, 131, 236, 276, 277, 317, 344, 367, 414, 415, 421, 423, 570, 571, 575, 664, 665, 1000, 1006, 1010, 1018, 1026, 1050, 1052, 1057, 1059], "conserv": [50, 398, 591, 598, 905, 906, 1009, 1022], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 90, 101, 105, 114, 120, 124, 128, 148, 151, 168, 172, 173, 187, 192, 218, 220, 252, 270, 276, 279, 283, 287, 290, 297, 300, 303, 304, 317, 328, 334, 344, 351, 352, 354, 358, 367, 371, 372, 373, 376, 383, 384, 386, 390, 392, 396, 398, 399, 407, 410, 412, 415, 416, 421, 422, 423, 424, 425, 426, 427, 428, 446, 452, 454, 458, 465, 482, 517, 518, 530, 542, 550, 558, 559, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 594, 595, 597, 598, 600, 602, 616, 617, 629, 640, 641, 642, 655, 661, 667, 668, 669, 671, 680, 688, 697, 698, 699, 701, 702, 703, 705, 709, 711, 714, 716, 718, 724, 735, 739, 743, 765, 795, 797, 803, 855, 856, 857, 859, 861, 863, 864, 865, 868, 870, 871, 876, 886, 887, 894, 908, 909, 918, 919, 921, 922, 923, 924, 934, 993, 999, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1030, 1044, 1045, 1049, 1053, 1054, 1056, 1057, 1058], "consider": [153, 154, 176, 179, 255, 271, 277, 283, 379, 384, 415, 426, 628, 809, 823, 831, 999, 1006, 1012, 1016, 1024, 1034, 1058], "consist": [2, 43, 46, 63, 68, 72, 91, 92, 104, 113, 120, 122, 124, 144, 148, 154, 155, 162, 173, 178, 180, 183, 187, 194, 218, 236, 251, 255, 282, 285, 314, 322, 326, 329, 354, 359, 367, 371, 377, 379, 381, 384, 390, 391, 392, 393, 397, 398, 399, 414, 416, 418, 422, 423, 424, 434, 435, 438, 439, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 498, 506, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 600, 620, 636, 637, 638, 639, 644, 647, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 683, 686, 687, 688, 696, 697, 698, 699, 700, 709, 744, 806, 807, 816, 841, 842, 843, 845, 846, 847, 848, 856, 857, 859, 861, 864, 865, 871, 876, 877, 878, 880, 884, 885, 888, 889, 891, 892, 894, 905, 906, 909, 913, 914, 916, 917, 919, 922, 924, 930, 939, 941, 964, 980, 983, 998, 999, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1020, 1023, 1025, 1026, 1028, 1030, 1034, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "consol": [147, 382], "consolid": [0, 398, 399, 1041], "consolidate_scor": 52, "consortium": [0, 1034], "constant": [2, 43, 133, 141, 154, 178, 181, 182, 187, 191, 205, 219, 220, 222, 236, 247, 252, 257, 279, 309, 313, 315, 318, 320, 327, 354, 356, 367, 376, 386, 393, 398, 413, 423, 426, 439, 454, 473, 490, 491, 492, 520, 522, 543, 547, 549, 556, 558, 559, 560, 561, 563, 565, 567, 569, 571, 574, 577, 579, 599, 615, 618, 620, 622, 636, 639, 641, 642, 644, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 696, 698, 702, 704, 730, 732, 733, 737, 741, 784, 786, 794, 808, 831, 846, 847, 856, 864, 870, 871, 878, 889, 892, 901, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 1002, 1004, 1006, 1007, 1010, 1012, 1013, 1020, 1024, 1026, 1036, 1044, 1049, 1051, 1053, 1054, 1055, 1057, 1059], "constant_": 561, "constant_valu": [426, 622, 626], "constant_value_bound": [426, 620, 622, 626], "constantini": 1057, "constantkernel": [2, 178, 184, 426, 620, 626, 630, 633], "constantli": [72, 218, 1034], "constitu": 381, "constitut": [85, 398, 420, 423, 458, 464, 597, 598, 600, 1014], "constrain": [25, 82, 124, 148, 154, 156, 192, 209, 312, 327, 333, 345, 347, 377, 398, 416, 421, 423, 518, 570, 571, 644, 667, 668, 699, 703, 831, 838, 1006, 1009, 1045], "constrained_layout": [124, 192, 238, 323, 324, 331], "constraint": [90, 92, 102, 124, 137, 188, 206, 213, 222, 255, 256, 271, 313, 314, 315, 327, 384, 396, 421, 424, 495, 517, 518, 566, 567, 568, 569, 570, 571, 573, 574, 641, 644, 827, 828, 921, 922, 923, 924, 978, 999, 1001, 1006, 1007, 1024, 1031, 1045, 1048, 1049, 1052, 1054, 1056, 1058], "constru": 424, "construct": [2, 43, 50, 104, 106, 138, 140, 142, 146, 159, 173, 236, 246, 252, 257, 259, 310, 318, 320, 327, 330, 378, 381, 386, 393, 398, 416, 417, 420, 421, 423, 424, 427, 441, 449, 450, 452, 453, 458, 460, 465, 471, 473, 475, 528, 544, 550, 553, 564, 565, 590, 596, 648, 697, 699, 700, 823, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 872, 873, 874, 875, 877, 918, 938, 940, 956, 957, 968, 972, 999, 1000, 1002, 1006, 1007, 1010, 1011, 1013, 1020, 1023, 1025, 1026, 1030, 1046, 1048, 1049, 1052, 1055], "construct_grid": [50, 310], "constructor": [30, 31, 106, 248, 372, 386, 398, 417, 424, 472, 475, 558, 559, 564, 576, 577, 578, 579, 590, 591, 597, 598, 606, 677, 685, 686, 808, 809, 823, 855, 856, 857, 859, 861, 863, 864, 865, 872, 873, 874, 875, 999, 1011, 1020, 1025, 1030, 1041, 1042, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "consult": 1010, "consum": [2, 124, 367, 378, 386, 398, 407, 416, 420, 423, 457, 812, 813, 873, 874, 965, 966, 975, 1006, 1034, 1046, 1058], "consumpt": [47, 371, 398, 416, 543, 566, 567, 573, 574, 809, 823, 834, 835, 836, 921, 922, 923, 924, 975, 1041, 1043, 1047, 1049, 1050, 1055], "contact": [396, 1029], "contain": [2, 49, 57, 61, 64, 69, 75, 84, 91, 93, 104, 105, 140, 142, 146, 154, 155, 181, 191, 192, 194, 196, 209, 222, 236, 245, 252, 255, 256, 259, 266, 270, 274, 276, 282, 285, 286, 296, 303, 304, 306, 317, 329, 337, 340, 358, 359, 377, 378, 379, 381, 384, 386, 388, 389, 390, 391, 392, 393, 396, 398, 410, 412, 414, 416, 417, 419, 420, 421, 423, 424, 425, 426, 428, 430, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 505, 509, 511, 512, 513, 517, 518, 519, 523, 524, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 718, 721, 725, 744, 745, 746, 781, 788, 789, 797, 803, 806, 807, 808, 809, 812, 813, 815, 823, 827, 828, 831, 832, 836, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 935, 938, 939, 940, 960, 961, 964, 965, 972, 975, 976, 978, 999, 1000, 1002, 1008, 1011, 1014, 1016, 1018, 1020, 1021, 1023, 1026, 1029, 1033, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "container": 410, "container_fold": 512, "container_path": 512, "contamin": [48, 113, 114, 245, 255, 303, 304, 477, 572, 859, 1016, 1049, 1057, 1058], "content": [2, 7, 55, 322, 358, 360, 379, 384, 388, 390, 410, 424, 494, 512, 517, 518, 597, 598, 600, 680, 927, 1019, 1034, 1042, 1051], "context": [2, 93, 259, 270, 297, 334, 371, 372, 378, 383, 385, 397, 398, 416, 417, 422, 423, 424, 426, 427, 445, 452, 454, 456, 458, 460, 465, 466, 469, 472, 475, 476, 480, 540, 544, 545, 546, 548, 551, 552, 553, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 603, 611, 616, 617, 619, 635, 636, 639, 641, 643, 648, 656, 660, 662, 664, 666, 667, 668, 670, 672, 674, 675, 677, 685, 688, 697, 698, 699, 700, 701, 702, 703, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 859, 861, 863, 864, 866, 867, 872, 875, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 1000, 1006, 1010, 1016, 1020, 1024, 1030, 1033, 1034, 1041, 1048, 1049, 1054, 1057], "contigu": [43, 59, 386, 396, 413, 420, 424, 451, 455, 457, 467, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 790, 828, 853, 854, 913, 915, 916, 917, 918, 919, 1025, 1044, 1051, 1055, 1059], "contin": [422, 723, 1020], "conting": [2, 723, 724, 740, 764, 1047], "contingency_matrix": [2, 416, 764, 1049], "continu": [0, 2, 52, 55, 57, 77, 122, 148, 175, 188, 192, 199, 219, 226, 236, 239, 242, 255, 256, 258, 262, 266, 267, 314, 316, 322, 323, 328, 329, 366, 372, 379, 382, 386, 387, 388, 389, 392, 396, 398, 399, 402, 416, 421, 423, 476, 501, 601, 604, 605, 608, 609, 616, 617, 618, 641, 655, 656, 661, 662, 666, 669, 670, 671, 672, 735, 751, 765, 821, 823, 876, 878, 880, 882, 883, 892, 893, 894, 910, 911, 922, 972, 999, 1006, 1007, 1010, 1011, 1013, 1014, 1020, 1026, 1030, 1031, 1034, 1038, 1041, 1043, 1044, 1049, 1054, 1055, 1056, 1058, 1060], "continuous_featur": 389, "contour": [48, 50, 70, 81, 82, 113, 147, 166, 173, 178, 179, 181, 229, 230, 231, 232, 245, 250, 265, 303, 310, 345, 346, 348, 349, 351, 352, 381, 391, 640, 641, 1016, 1024], "contour_kw": 641, "contourf": [50, 147, 232, 250, 303, 310, 312, 319, 320, 341, 346, 352, 356, 640, 641], "contours_": [391, 641], "contract": [218, 236, 351, 372, 398, 1030], "contradict": [194, 1030], "contrari": [43, 53, 191, 239, 243, 255, 261, 279, 317, 358, 378, 416, 505, 553, 615, 811, 826, 894, 1006, 1012, 1016], "contrast": [132, 192, 220, 251, 255, 276, 278, 306, 322, 359, 398, 414, 416, 419, 423, 426, 457, 460, 470, 628, 652, 823, 869, 1000, 1003, 1005, 1006, 1010, 1013, 1015, 1018, 1020, 1023, 1024, 1026, 1051], "contrib": [332, 384, 386, 392, 396, 398, 416, 454, 1029, 1030, 1057], "contribut": [0, 53, 58, 152, 180, 203, 222, 285, 322, 381, 382, 386, 387, 388, 392, 398, 399, 402, 421, 422, 423, 455, 457, 562, 563, 568, 569, 735, 738, 765, 1004, 1010, 1013, 1018, 1025, 1029, 1030, 1033, 1034, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "contributor": [372, 387, 388, 389, 392, 396, 398, 1010, 1030, 1042, 1043, 1044, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "control": [37, 51, 70, 96, 128, 129, 144, 164, 180, 182, 203, 219, 222, 226, 248, 249, 277, 279, 294, 299, 315, 327, 329, 351, 362, 364, 365, 371, 372, 377, 380, 384, 386, 389, 392, 396, 398, 402, 415, 416, 419, 420, 421, 422, 425, 426, 441, 448, 457, 462, 479, 480, 486, 540, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 602, 603, 605, 623, 628, 634, 636, 641, 643, 648, 650, 651, 655, 656, 658, 659, 660, 661, 663, 664, 665, 681, 683, 685, 686, 691, 692, 696, 701, 710, 718, 806, 807, 809, 811, 812, 813, 814, 815, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 839, 840, 843, 844, 847, 870, 871, 892, 894, 905, 906, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 927, 975, 996, 999, 1006, 1007, 1009, 1010, 1011, 1013, 1016, 1017, 1020, 1022, 1024, 1025, 1026, 1029, 1030, 1032, 1036, 1041, 1043, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1060], "convei": [67, 243, 319], "conveni": [52, 90, 222, 255, 376, 392, 396, 417, 420, 424, 426, 431, 451, 455, 457, 459, 461, 472, 497, 620, 685, 687, 708, 737, 794, 872, 873, 983, 1000, 1002, 1006, 1007, 1017, 1034, 1041], "convent": [2, 136, 154, 270, 276, 384, 386, 387, 388, 390, 398, 412, 434, 435, 438, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 477, 478, 479, 480, 481, 482, 483, 484, 517, 518, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 556, 572, 575, 578, 579, 590, 591, 592, 597, 598, 600, 636, 637, 638, 639, 686, 697, 698, 699, 700, 727, 806, 807, 841, 842, 857, 859, 861, 865, 877, 885, 888, 889, 891, 894, 905, 906, 917, 951, 952, 1010, 1041, 1048, 1049, 1052, 1054, 1055, 1057, 1058], "convention": [345, 398, 909], "converg": [2, 55, 92, 96, 111, 112, 149, 151, 154, 175, 181, 211, 220, 226, 234, 262, 264, 313, 314, 317, 322, 337, 373, 393, 398, 413, 416, 421, 424, 426, 428, 448, 451, 454, 455, 456, 457, 460, 462, 467, 468, 469, 470, 479, 480, 486, 490, 491, 492, 542, 544, 545, 546, 547, 548, 555, 562, 580, 619, 653, 654, 655, 656, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 677, 681, 683, 685, 687, 691, 692, 696, 697, 699, 700, 703, 704, 806, 807, 862, 870, 871, 908, 909, 915, 1000, 1005, 1006, 1007, 1009, 1014, 1024, 1041, 1044, 1045, 1046, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "converged_": [806, 807, 1059], "convergence_it": [448, 462], "convergencewarn": [2, 179, 181, 183, 226, 233, 262, 313, 314, 319, 393, 398, 806, 807, 1049, 1050, 1053], "convers": [2, 55, 151, 209, 358, 367, 373, 378, 384, 386, 392, 396, 398, 410, 424, 581, 868, 877, 885, 939, 940, 995, 1007, 1030, 1034, 1049, 1050, 1051, 1054, 1057], "convert": [2, 55, 70, 81, 83, 101, 105, 127, 180, 194, 218, 238, 255, 258, 262, 263, 266, 267, 290, 310, 334, 366, 371, 378, 379, 393, 396, 398, 410, 424, 448, 451, 452, 455, 457, 458, 459, 460, 467, 472, 473, 505, 543, 550, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 590, 591, 597, 598, 599, 600, 602, 603, 615, 636, 637, 638, 639, 655, 661, 667, 668, 669, 671, 675, 676, 677, 679, 683, 685, 686, 687, 701, 787, 808, 831, 868, 877, 878, 880, 884, 886, 887, 888, 890, 913, 921, 922, 923, 924, 937, 939, 940, 964, 994, 995, 999, 1006, 1007, 1008, 1010, 1020, 1021, 1025, 1026, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1056, 1057, 1058, 1059], "convex": [133, 150, 151, 188, 197, 225, 238, 355, 359, 416, 418, 421, 429, 454, 460, 470, 481, 483, 484, 487, 488, 489, 667, 685, 701, 1006, 1007, 1013, 1014, 1024, 1031, 1054], "convinc": 191, "convolut": [45, 183], "convolv": 315, "coo": [398, 562, 563, 701, 880, 935, 939, 940, 1013, 1042, 1058], "coo_matrix": [53, 204, 460, 594, 595, 980, 983], "cook": [381, 503, 1041, 1047], "cookbook": [426, 631, 632], "cool": [424, 1041], "coolwarm": [271, 344], "cooman": 381, "coord": [594, 1011], "coordin": [2, 50, 51, 53, 89, 129, 158, 179, 206, 238, 277, 310, 371, 379, 421, 426, 451, 455, 456, 457, 469, 479, 480, 486, 540, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 559, 594, 623, 655, 656, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 690, 691, 692, 693, 697, 698, 699, 702, 703, 715, 773, 778, 913, 1006, 1007, 1025, 1041, 1044, 1045, 1046, 1050, 1052, 1054, 1055, 1056], "cop": 51, "cope": [245, 373, 379, 1006], "copeland": [1049, 1050], "copi": [44, 51, 55, 79, 97, 109, 127, 141, 154, 173, 186, 187, 191, 192, 193, 204, 211, 224, 234, 236, 239, 252, 297, 336, 337, 339, 341, 359, 363, 372, 381, 384, 386, 388, 389, 390, 396, 398, 441, 445, 448, 450, 451, 452, 454, 455, 457, 462, 467, 490, 491, 492, 493, 509, 511, 519, 541, 542, 543, 544, 550, 557, 562, 563, 568, 570, 571, 581, 599, 606, 616, 617, 619, 620, 637, 639, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 680, 681, 683, 688, 690, 693, 694, 695, 741, 778, 801, 809, 823, 853, 854, 868, 876, 879, 882, 883, 884, 885, 889, 890, 891, 893, 896, 898, 899, 900, 901, 902, 903, 904, 908, 909, 913, 915, 916, 917, 918, 919, 928, 937, 939, 940, 968, 980, 982, 983, 1020, 1025, 1026, 1030, 1041, 1044, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "copy_": 1041, "copy_cov": 557, "copy_gram": [691, 692, 695], "copy_x": [451, 455, 467, 544, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 681, 683, 688, 690, 691, 692, 693, 694, 1043, 1049, 1050, 1060], "copy_x_train": [619, 620], "copy_xi": 695, "copybutton": [384, 402, 409], "copyright": [0, 55], "corani": 276, "cordier": 1048, "core": [42, 49, 84, 90, 91, 100, 105, 136, 138, 144, 146, 147, 151, 183, 188, 191, 192, 252, 270, 319, 331, 370, 372, 384, 387, 392, 398, 402, 410, 416, 421, 423, 424, 427, 452, 454, 457, 458, 463, 465, 505, 508, 547, 598, 603, 667, 668, 675, 677, 685, 848, 849, 850, 851, 852, 857, 865, 1006, 1013, 1016, 1025, 1030, 1031, 1032, 1034, 1036, 1043, 1045, 1046, 1048, 1051, 1055, 1056, 1057], "core_dist": [100, 463, 464, 465], "core_distances_": [100, 458, 463, 465], "core_sampl": 427, "core_sample_indices_": [84, 452], "core_samples_mask": 84, "corei": [1042, 1049, 1050], "corentin": 1055, "cori": 1046, "corneil": 1054, "corner": [50, 53, 63, 88, 190, 273, 277, 285, 286, 310, 333, 379, 384, 507, 925, 927, 1010, 1055], "cornerston": 1034, "cornflowerblu": [158, 212, 221, 228, 262, 264, 267, 283, 285, 302, 308, 364, 365], "corollari": 386, "corona": 1054, "corpora": 421, "corpu": [54, 359, 360, 379, 421, 597, 598, 599, 600, 1042], "corr": [117, 194, 276], "corrcoef": [117, 134], "correct": [2, 30, 52, 63, 64, 92, 114, 138, 149, 183, 191, 203, 207, 218, 236, 261, 269, 270, 276, 283, 285, 294, 296, 347, 349, 358, 367, 381, 384, 386, 388, 399, 412, 414, 416, 420, 421, 423, 424, 433, 439, 458, 464, 477, 482, 496, 510, 512, 644, 676, 685, 687, 712, 713, 717, 721, 722, 727, 730, 732, 733, 737, 738, 739, 743, 747, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 792, 793, 794, 796, 799, 800, 803, 805, 841, 842, 843, 850, 858, 884, 994, 1006, 1010, 1011, 1025, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "correct_covari": [477, 482], "corrected_std": 276, "corrected_var": 276, "correctli": [2, 168, 172, 218, 236, 252, 283, 285, 291, 307, 324, 338, 347, 384, 393, 421, 423, 433, 445, 477, 502, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 619, 667, 675, 677, 683, 684, 685, 712, 803, 805, 808, 831, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 860, 863, 870, 893, 908, 909, 913, 915, 916, 917, 918, 919, 921, 923, 958, 1007, 1010, 1013, 1014, 1020, 1025, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "correl": [2, 51, 64, 115, 117, 118, 134, 145, 146, 152, 154, 156, 169, 172, 180, 188, 189, 190, 192, 193, 203, 207, 213, 236, 276, 282, 296, 323, 327, 328, 339, 377, 380, 381, 389, 398, 401, 413, 418, 420, 425, 458, 465, 490, 491, 493, 502, 503, 509, 533, 573, 615, 618, 636, 643, 644, 645, 691, 692, 752, 766, 787, 788, 789, 839, 853, 854, 890, 891, 893, 902, 1001, 1006, 1011, 1017, 1020, 1024, 1026, 1030, 1031, 1032, 1036, 1041, 1042, 1043, 1054, 1055], "correlation_coeffici": 618, "correlation_model": 1048, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 88, 100, 111, 115, 126, 138, 141, 144, 145, 147, 155, 169, 172, 173, 176, 181, 184, 191, 207, 210, 218, 219, 222, 227, 236, 246, 251, 252, 259, 266, 270, 275, 277, 279, 280, 285, 286, 290, 310, 322, 328, 329, 330, 359, 362, 363, 366, 367, 372, 378, 379, 380, 383, 384, 386, 388, 391, 392, 397, 398, 399, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 431, 437, 445, 447, 449, 453, 456, 459, 461, 467, 469, 471, 472, 475, 480, 490, 491, 492, 498, 499, 501, 502, 503, 504, 505, 543, 550, 553, 554, 555, 558, 559, 561, 564, 566, 568, 569, 570, 573, 591, 593, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 626, 637, 639, 641, 642, 644, 652, 655, 656, 657, 661, 667, 668, 669, 670, 671, 677, 678, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 696, 699, 700, 701, 703, 712, 719, 722, 733, 734, 743, 747, 751, 761, 763, 783, 787, 791, 797, 798, 803, 805, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 834, 842, 844, 845, 848, 849, 850, 851, 852, 853, 854, 858, 859, 860, 862, 870, 871, 880, 883, 884, 886, 887, 890, 894, 902, 913, 914, 915, 918, 921, 922, 923, 924, 934, 944, 951, 966, 969, 984, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1024, 1025, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "correspondingli": 1058, "corri": 1052, "corrobor": 396, "corrupt": [44, 131, 203, 224, 235, 396, 869, 1006, 1018], "cort": [1052, 1053, 1056, 1057], "cortex": 421, "cos_transform": 43, "cosin": [2, 43, 75, 291, 297, 302, 376, 379, 398, 416, 421, 422, 449, 453, 458, 465, 544, 599, 600, 629, 705, 769, 770, 771, 774, 779, 780, 783, 787, 788, 789, 853, 854, 858, 885, 1013, 1026, 1036, 1051], "cosine_dist": [2, 412, 705, 771, 1013, 1047, 1060], "cosine_similar": [2, 351, 412, 769, 774, 1008, 1046, 1060], "cosinesimil": 297, "cosmo": 57, "cost": [0, 43, 74, 127, 144, 154, 175, 188, 196, 238, 246, 250, 268, 278, 280, 283, 285, 290, 326, 334, 347, 359, 360, 361, 366, 384, 390, 392, 396, 415, 416, 423, 486, 505, 509, 546, 547, 548, 555, 560, 566, 567, 568, 569, 570, 573, 574, 611, 619, 628, 636, 655, 656, 661, 662, 667, 669, 670, 671, 672, 677, 681, 683, 685, 687, 696, 697, 701, 709, 711, 727, 751, 793, 796, 808, 809, 831, 839, 874, 893, 911, 913, 914, 915, 918, 921, 922, 923, 924, 957, 1002, 1006, 1007, 1010, 1013, 1023, 1024, 1025, 1031, 1032, 1036, 1047, 1050, 1051], "cost_complexity_pruning_path": [362, 921, 922, 923, 924], "costa": [1049, 1054], "costin": 1041, "costli": [106, 111, 145, 186, 270, 277, 355, 372, 385, 390, 416, 451, 636, 817, 819, 905, 906, 957, 1010, 1013, 1022, 1030], "costlier": 680, "costs_": [479, 480, 1057], "could": [43, 48, 52, 53, 64, 72, 77, 88, 105, 106, 124, 127, 139, 140, 148, 151, 154, 170, 175, 180, 187, 190, 191, 192, 218, 219, 222, 227, 236, 242, 250, 251, 252, 269, 270, 276, 296, 305, 308, 329, 343, 344, 358, 362, 366, 373, 384, 390, 392, 398, 402, 410, 414, 420, 423, 424, 428, 482, 542, 547, 616, 617, 638, 680, 811, 816, 818, 1000, 1006, 1007, 1017, 1018, 1020, 1025, 1030, 1038, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "couldn": [1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "count": [2, 23, 43, 52, 54, 62, 64, 76, 84, 88, 104, 105, 122, 160, 161, 191, 192, 218, 220, 236, 249, 259, 270, 285, 290, 294, 297, 327, 328, 359, 360, 379, 381, 388, 393, 398, 399, 414, 416, 421, 423, 424, 454, 457, 497, 505, 545, 553, 590, 597, 598, 599, 600, 603, 613, 626, 649, 706, 714, 724, 727, 738, 739, 747, 763, 792, 793, 795, 796, 848, 852, 853, 854, 862, 865, 876, 925, 927, 959, 974, 998, 999, 1002, 1006, 1010, 1012, 1013, 1020, 1026, 1034, 1041, 1044, 1046, 1049, 1050, 1052, 1053, 1058], "count_nonzero": [46, 49, 371], "count_onli": [853, 854], "counter": [57, 138, 283, 416, 685, 686, 687, 1054], "counterpart": [999, 1007, 1025], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [323, 333, 505, 1007], "counts_": 1053, "countvector": [2, 54, 340, 360, 379, 389, 417, 421, 424, 472, 497, 545, 591, 598, 599, 600, 1041, 1043, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1059], "coupl": [54, 87, 88, 90, 239, 378, 379, 413, 414, 416, 425, 598, 919, 999, 1025], "cournapeau": [0, 406, 1041, 1044], "cours": [47, 48, 196, 290, 371, 384, 386, 415, 421, 424, 425, 1000, 1005, 1006, 1034], "coursecentr": [416, 450], "courtesi": 384, "couvreur": [1050, 1051], "cov": [70, 115, 118, 140, 266, 384, 398, 402, 409, 419, 429, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 528, 541, 543, 550, 557], "cov_": [50, 115], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1057, "cov_test": 50, "cov_train": 50, "cov_typ": [263, 499], "covar": [261, 262, 267], "covari": [2, 48, 51, 65, 69, 112, 117, 131, 134, 153, 155, 175, 182, 184, 221, 245, 260, 262, 264, 265, 266, 267, 283, 308, 333, 393, 398, 407, 416, 419, 421, 426, 429, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 513, 524, 528, 536, 541, 543, 550, 557, 558, 559, 572, 619, 620, 622, 631, 632, 640, 653, 654, 659, 663, 665, 691, 692, 695, 698, 702, 806, 807, 809, 828, 1009, 1016, 1020, 1031, 1032, 1035, 1036, 1041, 1043, 1044, 1045, 1046, 1048, 1050], "covariance_": [51, 70, 113, 115, 477, 478, 479, 480, 481, 482, 483, 484, 558, 559, 1004, 1048], "covariance_correct": [477, 482], "covariance_eigh": [334, 550, 1059], "covariance_estim": [69, 558, 1004, 1053], "covariance_prior": [267, 806], "covariance_prior_": 806, "covariance_reweight": [477, 482], "covariance_typ": [79, 262, 263, 265, 266, 267, 806, 807, 1057], "covariances_": [261, 262, 263, 266, 267, 806, 807, 1048], "cover": [0, 87, 196, 218, 236, 367, 376, 379, 384, 397, 644, 729, 803, 1010, 1011, 1028], "coverag": [2, 50, 52, 151, 154, 218, 236, 310, 379, 387, 412, 507, 636, 729], "coverage_error": [2, 1010, 1045, 1055], "coverage_fract": 151, "coverages_land": 50, "covertyp": [2, 377, 499, 1036], "covtyp": 196, "cow": 1042, "cowlei": 1051, "cowton": 1055, "cox": [317, 321, 889, 901, 1020, 1049, 1057], "cpo": [173, 381], "cppflag": 382, "cpu": [0, 96, 277, 297, 331, 371, 372, 390, 392, 398, 402, 412, 424, 505, 572, 641, 656, 660, 662, 664, 667, 668, 670, 672, 674, 675, 677, 685, 688, 809, 823, 834, 835, 836, 857, 865, 906, 1010, 1046, 1055, 1056, 1058, 1059], "cpu_count": [77, 144, 297], "cpuexecutionprovid": 410, "cpython": [384, 385, 390, 1056], "craeton": 1059, "craft": 387, "craig": [1022, 1044, 1049], "crall": [1048, 1054], "crammer": [675, 676, 744, 1006, 1010, 1025], "crammer06a": [675, 676], "crammer_sing": [913, 1011, 1025, 1041], "cranenburgh": 1045, "crash": [51, 384, 410, 476, 903, 904, 911, 1020, 1045, 1049, 1057, 1058], "crawl": [530, 949], "craze": 1048, "crc": 1006, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 81, 84, 87, 93, 95, 97, 105, 106, 113, 118, 120, 126, 129, 140, 143, 147, 148, 149, 151, 155, 158, 172, 175, 177, 180, 181, 182, 184, 187, 190, 192, 198, 200, 202, 204, 214, 219, 220, 230, 231, 240, 250, 252, 255, 256, 258, 266, 270, 271, 272, 274, 276, 286, 290, 305, 307, 308, 319, 321, 322, 326, 329, 330, 341, 343, 344, 348, 349, 352, 354, 355, 356, 360, 362, 364, 365, 367, 372, 379, 380, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 397, 398, 402, 403, 410, 414, 416, 417, 420, 422, 423, 424, 426, 446, 459, 461, 473, 474, 508, 524, 525, 526, 527, 555, 562, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 597, 598, 600, 606, 637, 639, 640, 641, 642, 706, 707, 709, 710, 711, 791, 798, 809, 811, 815, 819, 823, 827, 831, 832, 834, 835, 843, 874, 886, 915, 918, 921, 922, 923, 924, 928, 937, 960, 961, 968, 982, 994, 1000, 1006, 1009, 1010, 1011, 1013, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1030, 1034, 1038, 1041, 1042, 1044, 1047, 1051, 1054, 1055, 1056, 1057, 1058, 1059], "create_ax": 317, "create_species_bunch": 50, "createindex": 297, "creation": [386, 520, 521, 522, 524, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 665, 853, 854, 1034, 1048, 1049, 1050, 1054], "creativ": 378, "creator": [173, 378, 381], "cred_int_df": 276, "cred_interv": 276, "credibl": 276, "credit": [379, 392, 423, 1006, 1034], "credit_amount": 270, "credit_card": 270, "credit_gain": 270, "credit_gain_scor": 270, "credit_histori": 270, "creighton": 331, "crispinlogan": [1053, 1056, 1057, 1059], "cristian": 651, "cristina": 1053, "criteria": [92, 144, 188, 197, 207, 226, 266, 276, 392, 416, 425, 449, 474, 490, 491, 492, 510, 566, 567, 568, 569, 573, 574, 655, 661, 665, 667, 668, 680, 701, 874, 893, 913, 914, 921, 922, 923, 924, 1000, 1009, 1014, 1024, 1031, 1044, 1049, 1052], "criterion": [64, 111, 112, 194, 205, 226, 266, 288, 327, 386, 393, 398, 416, 421, 449, 453, 457, 460, 467, 470, 541, 546, 548, 555, 562, 563, 566, 567, 568, 569, 573, 574, 575, 615, 636, 653, 654, 657, 665, 675, 676, 677, 678, 680, 681, 683, 685, 686, 687, 689, 700, 704, 719, 807, 910, 915, 916, 917, 918, 919, 921, 922, 923, 924, 1006, 1009, 1010, 1018, 1023, 1026, 1032, 1036, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058], "criterion_": [205, 207, 665], "critic": [378, 384, 397, 423, 701, 1007, 1010, 1018, 1025, 1034, 1052], "crockett": 1056, "crombach": 1043, "crop": [392, 1056], "cross": [2, 9, 29, 52, 53, 64, 70, 89, 92, 93, 105, 106, 108, 109, 111, 115, 118, 122, 131, 144, 147, 148, 150, 151, 154, 163, 167, 170, 171, 173, 191, 192, 197, 203, 204, 205, 206, 212, 218, 220, 226, 236, 253, 258, 263, 264, 266, 268, 273, 276, 277, 278, 280, 282, 283, 284, 285, 288, 289, 290, 291, 294, 301, 315, 316, 318, 323, 326, 328, 333, 339, 347, 354, 379, 384, 386, 393, 396, 397, 398, 410, 411, 414, 417, 418, 421, 423, 424, 425, 426, 445, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 502, 510, 511, 513, 524, 550, 576, 577, 584, 602, 603, 606, 611, 615, 618, 651, 652, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 710, 711, 715, 722, 737, 750, 794, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 847, 873, 874, 878, 893, 894, 911, 913, 915, 918, 930, 964, 1009, 1010, 1013, 1014, 1018, 1020, 1025, 1026, 1030, 1031, 1032, 1034, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "cross_decomposit": [2, 116, 117, 118, 188, 253, 490, 491, 492, 493, 1011, 1031, 1045, 1046, 1048, 1049, 1050], "cross_val": 1041, "cross_val_predict": [2, 159, 272, 326, 407, 414, 420, 423, 445, 576, 577, 835, 836, 1045, 1046, 1047, 1048, 1050, 1052, 1054, 1058], "cross_val_scor": [2, 52, 131, 186, 187, 188, 268, 272, 281, 291, 332, 350, 367, 384, 386, 396, 407, 420, 423, 480, 529, 584, 712, 751, 809, 834, 836, 921, 922, 999, 1010, 1031, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1053, 1054, 1057, 1058, 1060], "cross_valid": [2, 43, 52, 148, 154, 159, 191, 220, 252, 272, 279, 290, 294, 323, 333, 384, 397, 407, 584, 834, 835, 1010, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057, 1058], "crossentropi": 570, "crossvalid": [276, 291], "crowd": [392, 399, 1007, 1030], "crucial": [51, 154, 190, 222, 271, 371, 383, 384, 398, 399, 416, 426, 1025], "crude": 1052, "crunch": 390, "cruz": 183, "crypt": [57, 379], "cryptograph": 393, "cs_": 668, "cs_note": 425, "cs_point": 147, "csail": [416, 675, 676, 685, 850], "csc": [2, 371, 396, 398, 424, 536, 560, 562, 563, 679, 701, 880, 882, 888, 893, 896, 898, 904, 935, 939, 940, 972, 984, 985, 987, 988, 989, 990, 1013, 1020, 1049, 1050, 1052, 1055], "csc_matrix": [460, 566, 567, 572, 573, 574, 575, 890, 921, 922, 923, 924, 1000, 1020, 1026, 1046], "csco": 51, "csgraph": [398, 1054], "csie": [196, 378, 495, 517, 518, 667], "csizsek": 1048, "csr": [2, 55, 334, 360, 371, 378, 379, 393, 396, 398, 424, 427, 451, 454, 455, 457, 458, 467, 506, 517, 532, 536, 562, 563, 566, 567, 573, 574, 575, 599, 639, 667, 701, 723, 777, 801, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 876, 880, 882, 884, 885, 886, 888, 891, 892, 893, 896, 897, 898, 900, 903, 906, 921, 922, 923, 924, 935, 939, 940, 964, 972, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1013, 1020, 1024, 1041, 1042, 1047, 1049, 1050, 1056, 1057, 1058], "csr_arrai": 991, "csr_matrix": [297, 327, 448, 452, 460, 505, 543, 553, 566, 567, 568, 569, 572, 573, 574, 575, 597, 602, 603, 723, 839, 868, 886, 888, 915, 916, 918, 919, 921, 922, 923, 924, 958, 964, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 1011, 1020, 1024, 1025, 1026, 1056], "css": 1053, "cst": 1004, "cstride": 192, "csv": [51, 378, 381, 389, 1049, 1054], "csytraci": 1044, "ct": [53, 183, 259, 417, 472, 474, 475], "ctc": 183, "cttt": 183, "cube": [428, 542], "cubic": [113, 426], "cuda": [396, 412], "cue": 1009, "culprit": 396, "cultiv": 381, "cultur": 379, "cum_claim": [218, 236], "cum_exposur": 218, "cumsum": [150, 218, 236, 1048], "cumtim": 390, "cumul": [2, 150, 218, 236, 416, 735, 744, 765, 890, 902, 1020, 1024, 1048, 1050, 1051], "cumulated_claim": 218, "cumulated_claim_amount": 236, "cumulated_exposur": 218, "cumulated_sampl": 236, "cunha": [1042, 1043], "cup": [379, 1010], "cupi": [331, 334, 396, 412, 1058, 1059, 1060], "cupy_to_ndarrai": 412, "curat": [384, 387, 388], "cure": 1006, "curic": [1049, 1050], "current": [0, 2, 7, 47, 81, 138, 180, 191, 236, 317, 326, 372, 373, 379, 382, 384, 385, 389, 393, 396, 398, 399, 412, 413, 416, 420, 423, 424, 425, 426, 448, 454, 458, 476, 477, 478, 479, 480, 481, 482, 483, 484, 541, 544, 550, 562, 563, 566, 567, 568, 569, 571, 573, 574, 575, 585, 600, 602, 619, 626, 635, 636, 655, 667, 676, 680, 684, 685, 686, 687, 797, 806, 807, 858, 862, 870, 871, 889, 901, 911, 921, 922, 923, 924, 927, 929, 930, 931, 976, 984, 999, 1004, 1006, 1010, 1013, 1014, 1020, 1030, 1033, 1049, 1053, 1055, 1056, 1057], "current_count": 76, "current_month": 180, "current_sklearn_vers": 585, "current_sz_mb": 47, "currentcontrolset": 402, "currentmodul": 384, "curs": [358, 359, 416, 422, 1012, 1013], "cursor": [144, 277], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 109, 111, 141, 143, 144, 150, 155, 188, 197, 198, 208, 218, 236, 238, 240, 243, 244, 246, 248, 255, 256, 260, 261, 262, 263, 265, 266, 268, 270, 276, 286, 313, 318, 321, 326, 334, 347, 351, 364, 391, 411, 415, 420, 422, 445, 446, 447, 511, 519, 524, 530, 534, 573, 641, 654, 667, 707, 709, 711, 715, 716, 717, 718, 736, 738, 750, 751, 791, 793, 796, 797, 798, 806, 807, 815, 826, 832, 837, 839, 840, 851, 874, 893, 913, 918, 1006, 1007, 1009, 1010, 1016, 1026, 1031, 1032, 1034, 1036, 1038, 1043, 1044, 1047, 1051, 1053, 1054, 1055, 1056, 1057], "curvatur": 312, "cusick": 1051, "custom": [2, 15, 30, 41, 135, 170, 172, 188, 202, 256, 268, 270, 275, 277, 280, 283, 284, 288, 299, 304, 308, 326, 342, 344, 345, 347, 348, 350, 358, 360, 376, 379, 382, 386, 391, 392, 393, 396, 397, 398, 407, 410, 416, 417, 420, 426, 476, 497, 502, 503, 511, 513, 547, 549, 556, 558, 566, 567, 573, 574, 580, 582, 611, 639, 640, 699, 708, 722, 787, 809, 839, 877, 911, 918, 993, 1004, 1010, 1013, 1029, 1030, 1031, 1034, 1036, 1041, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1060], "custom_combin": 886, "custom_cv": 420, "custom_cv_2fold": 420, "custom_fnames_enc": 886, "custom_nam": 358, "custom_scor": 334, "custom_scorer_modul": 1010, "custom_scoring_funct": 1010, "customestim": 136, "customkernel": 627, "customvector": 424, "cut": [57, 78, 81, 100, 101, 172, 173, 188, 240, 268, 279, 294, 334, 339, 388, 396, 413, 415, 416, 454, 460, 461, 470, 505, 597, 600, 667, 700, 704, 825, 831, 836, 874, 893, 1020, 1031], "cut_dist": [90, 454], "cutler": [921, 922], "cutoff": [198, 963, 1020, 1050], "cutoffs_x0": 317, "cutoffs_x1": 317, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 89, 105, 106, 107, 108, 111, 131, 144, 148, 150, 154, 164, 172, 186, 187, 191, 207, 217, 220, 252, 270, 272, 274, 275, 276, 277, 278, 279, 281, 282, 286, 290, 291, 294, 323, 331, 333, 334, 347, 354, 397, 398, 407, 414, 415, 420, 423, 425, 445, 480, 576, 577, 603, 611, 656, 660, 662, 664, 668, 670, 672, 674, 682, 684, 809, 811, 812, 813, 814, 815, 823, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 840, 844, 847, 894, 921, 922, 999, 1002, 1005, 1006, 1010, 1020, 1030, 1043, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1057, 1058, 1059, 1060], "cv_alpha": [660, 664], "cv_alphas_": [207, 660, 664, 1053], "cv_best_it": 150, "cv_clf": 150, "cv_color": 150, "cv_estim": 150, "cv_estimators_tut": 164, "cv_line": 150, "cv_mape_scor": 52, "cv_model": 191, "cv_result": [43, 52, 105, 144, 154, 172, 274, 275, 277, 279, 407, 823, 836, 1010], "cv_results_": [105, 106, 107, 115, 144, 164, 172, 266, 270, 274, 275, 276, 277, 280, 284, 287, 288, 299, 347, 480, 603, 682, 684, 809, 812, 813, 823, 831, 1047, 1051, 1053, 1054, 1059, 1060], "cv_results_ecoc": 294, "cv_results_lr": 220, "cv_results_ovo": 294, "cv_results_ovr": 294, "cv_results_qr": 220, "cv_results_tre": 294, "cv_results_tuned_model": 290, "cv_results_vanilla_model": 290, "cv_score": [150, 290], "cv_test_scor": 837, "cv_train_scor": 837, "cv_valu": 1049, "cv_values_": [682, 684, 1059], "cvc": 51, "cve": 1054, "cvx": 51, "cwitt": 1049, "cxx": 382, "cxxflag": 382, "cyan": [111, 141, 191, 308], "cybernet": 778, "cycl": [0, 16, 43, 77, 79, 85, 97, 124, 206, 262, 267, 283, 285, 329, 330, 384, 388, 407, 421, 588, 589, 636, 812, 813, 935, 999, 1000, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "cycler": 73, "cyclic": [43, 655, 656, 661, 662, 669, 670, 671, 672, 1053], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 310], "cynthias13w": 1058, "cyt": 294, "cython": [41, 330, 371, 372, 382, 384, 387, 393, 396, 402, 409, 412, 416, 423, 517, 1020, 1021, 1024, 1025, 1029, 1030, 1041, 1044, 1045, 1047, 1053, 1056, 1057, 1058, 1059], "cython3": 382, "cythonx": 385, "c\u00e8sar": 1010, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 67, 68, 72, 73, 77, 83, 84, 85, 95, 96, 98, 104, 105, 115, 122, 124, 127, 131, 133, 175, 183, 191, 218, 226, 234, 236, 243, 248, 249, 250, 251, 264, 275, 276, 284, 290, 296, 303, 304, 310, 314, 336, 337, 340, 347, 351, 352, 360, 378, 379, 381, 384, 386, 390, 396, 414, 416, 418, 419, 421, 423, 424, 426, 427, 452, 454, 455, 460, 468, 471, 496, 502, 512, 535, 543, 545, 566, 567, 574, 575, 590, 591, 599, 623, 624, 628, 631, 632, 637, 653, 654, 657, 678, 679, 680, 689, 697, 698, 701, 702, 706, 708, 714, 717, 730, 731, 732, 733, 735, 765, 773, 787, 790, 797, 821, 848, 850, 852, 853, 854, 869, 880, 884, 886, 887, 889, 901, 906, 923, 924, 928, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1018, 1020, 1022, 1025, 1026, 1044, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1057, 1059], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 423, "d2": [731, 732, 1010], "d2_absolute_error_scor": [2, 732, 1010, 1055], "d2_log_loss_scor": [2, 1010, 1059], "d2_pinball_scor": [2, 1010, 1055], "d2_pinball_score_08": 1010, "d2_tweedie_scor": [2, 412, 1010, 1054, 1060], "d2_tweedie_score_15": 1010, "d55e00": 261, "d81b60": 321, "d83": 381, "d_": [113, 416, 421, 657, 678, 689, 787, 1007, 1012], "d_c": 416, "d_chunk": 790, "d_fit": 697, "d_fix": 133, "d_m": 416, "d_multi": 133, "da": [379, 1056, 1057, 1059], "dae": 1006, "dagm": 1002, "dagstuhl": 1010, "dai": [0, 43, 51, 52, 154, 180, 192, 219, 381, 384, 892, 1034, 1047, 1048, 1055, 1056], "daiki": 1045, "daili": [51, 154, 1034], "dakota": 1051, "dale": 1054, "dalla": 1049, "dalmia": [1047, 1048, 1049], "damag": 424, "damicelli": 1056, "damink": 1058, "daml": [416, 460, 470], "damp": [79, 416, 448, 462], "dan": [55, 1041, 1045, 1046, 1047, 1049, 1050], "danfrankj": 1045, "dang": [688, 1006, 1059], "danger": [219, 420], "dangi": 1058, "dangl": 55, "dangonite57": [1056, 1057], "daniel": [331, 371, 894, 1020, 1034, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1053, 1055, 1058], "daniela": [1055, 1056], "danielgaerb": 1056, "danielsen": 1048, "danielweitzenfeld": 1044, "daniil": 1048, "danil": 1049, "dani\u00ebl": 1052, "danna": 1051, "danni": [1044, 1045, 1046], "dantzig": 354, "danylo": 1050, "dao": 1049, "daphn": 1052, "dare": 1051, "darioka": [1053, 1055, 1056], "dariu": [1048, 1049], "dark": [141, 191, 347, 379, 1058], "dark2": [62, 64, 239], "darkblu": 308, "darkorang": [112, 128, 132, 133, 219, 229, 241, 262, 263, 264, 267, 283, 285, 302, 308, 309, 338, 364], "darkorchid": 228, "darkr": [232, 303, 346], "darpa": 379, "darren": [1055, 1056], "darshan": 1053, "dart": 1029, "dartmouth": 0, "dasarathi": 381, "dasgupta": [424, 454, 907, 1022], "dash": [69, 113, 138, 150, 161, 175, 178, 180, 191, 210, 213, 219, 220, 227, 230, 231, 255, 270, 276, 286, 349, 1024], "dashdot": [150, 175, 178, 255], "dask": [1030, 1049], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 91, 94, 95, 96, 97, 100, 103, 105, 106, 108, 112, 114, 120, 122, 123, 124, 127, 128, 132, 134, 136, 138, 141, 143, 144, 147, 148, 150, 151, 156, 157, 158, 160, 162, 164, 166, 170, 174, 175, 176, 177, 179, 180, 182, 184, 186, 188, 191, 192, 197, 198, 201, 202, 203, 206, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 227, 231, 232, 234, 235, 236, 238, 239, 240, 241, 242, 245, 248, 249, 250, 252, 254, 255, 256, 259, 261, 262, 263, 264, 265, 267, 269, 270, 274, 276, 278, 279, 280, 281, 284, 290, 291, 294, 296, 297, 301, 303, 305, 306, 307, 308, 310, 313, 314, 316, 318, 319, 320, 324, 326, 328, 330, 331, 332, 334, 337, 338, 340, 341, 343, 344, 346, 351, 352, 358, 363, 364, 365, 366, 370, 372, 376, 377, 378, 379, 380, 381, 384, 386, 387, 390, 391, 392, 393, 397, 402, 404, 407, 410, 412, 413, 414, 415, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 522, 523, 524, 529, 530, 531, 532, 533, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 626, 627, 631, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 719, 720, 722, 726, 727, 729, 734, 736, 737, 738, 739, 740, 743, 745, 746, 747, 749, 750, 763, 764, 766, 770, 772, 773, 778, 787, 792, 793, 794, 796, 797, 798, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 930, 932, 933, 934, 935, 937, 938, 939, 940, 943, 944, 945, 954, 956, 957, 972, 975, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "data1010": 1046, "data_filenam": [510, 514], "data_hom": [494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 1048, 1057], "data_home_path": 508, "data_id": [44, 148, 180, 191, 218, 236, 246, 270, 290, 294, 323, 378, 505], "data_ind": 53, "data_max": 1046, "data_max_": [883, 1046], "data_min": 1046, "data_min_": [883, 1046], "data_nam": 402, "data_path": 47, "data_rang": 1046, "data_range_": [883, 1046], "data_sampl": 54, "data_set": 313, "data_size_mb": 360, "data_stream": 47, "data_test": [250, 270, 277, 358, 518], "data_test_size_mb": 358, "data_train": [250, 270, 277, 358, 518], "data_train_size_mb": 358, "data_transform": 648, "data_transpos": [1055, 1057], "data_unravel_indic": 53, "data_vers": 402, "databas": [47, 173, 322, 371, 373, 379, 381, 416, 421, 423, 424, 427, 450, 452, 519, 564, 565, 906, 1022], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 104, 105, 106, 138, 144, 148, 151, 156, 172, 180, 186, 190, 191, 192, 193, 198, 203, 207, 222, 226, 236, 256, 259, 266, 270, 274, 276, 277, 279, 287, 288, 290, 294, 322, 323, 324, 329, 330, 331, 354, 358, 359, 378, 379, 384, 386, 389, 398, 417, 423, 440, 450, 451, 453, 455, 457, 472, 474, 475, 476, 490, 491, 492, 493, 497, 498, 499, 501, 505, 509, 510, 511, 513, 514, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 570, 571, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 697, 698, 701, 809, 812, 813, 823, 839, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 911, 935, 964, 980, 983, 998, 999, 1000, 1030, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "datalim": 263, "datapoint": [43, 77, 87, 91, 179, 182, 202, 250, 251, 255, 271, 276, 296, 426, 454, 511, 566, 567, 568, 569, 573, 574, 575, 620, 921, 922, 923, 924, 1003], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 105, 106, 107, 108, 109, 113, 114, 115, 118, 123, 126, 127, 128, 129, 130, 131, 133, 134, 137, 139, 140, 141, 142, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 171, 172, 173, 174, 176, 178, 183, 186, 187, 193, 194, 196, 197, 200, 202, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 240, 242, 243, 244, 246, 249, 251, 253, 254, 258, 259, 261, 263, 264, 265, 267, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 292, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 347, 348, 349, 350, 352, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 367, 372, 373, 387, 388, 390, 397, 398, 401, 402, 410, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 428, 431, 436, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 467, 477, 478, 481, 482, 483, 484, 486, 489, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 592, 593, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 637, 640, 641, 642, 643, 644, 647, 648, 649, 652, 654, 655, 656, 658, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 717, 719, 720, 738, 764, 766, 796, 797, 801, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 869, 870, 871, 873, 874, 877, 878, 886, 887, 891, 893, 895, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 939, 940, 944, 945, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "dataset_44063": 52, "dataset_nam": [255, 297], "datasets_0004_44063": 52, "datasets_nam": 255, "datastructur": [412, 1049, 1053], "datastuctur": 1058, "datatyp": [472, 474, 1048, 1051], "date": [43, 104, 154, 173, 180, 192, 379, 381, 384, 388, 399, 417, 1030], "dateco2datef641958": 180, "daten": [458, 1049, 1050], "datenbergwerk": 1051, "datetim": [43, 55, 180, 192], "dauphin": 1043, "dave": [1041, 1048, 1049, 1055, 1057], "davi": [2, 482, 734, 1010, 1045], "david": [0, 114, 379, 406, 416, 423, 426, 470, 541, 545, 576, 577, 631, 632, 637, 734, 806, 910, 1000, 1006, 1014, 1023, 1034, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "davidblnc": [1056, 1057], "davidleon123": 1059, "davies_bouldin_scor": [2, 416, 1049], "davis2006": 1010, "daw": [0, 406, 1041, 1042, 1043, 1044, 1045], "dawson": [1045, 1059], "dayn": [1056, 1057], "db": [84, 90, 416], "dbauer9": 1052, "dberenbaum": 1057, "dbg": 390, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 90, 95, 98, 100, 188, 332, 338, 396, 398, 454, 458, 460, 463, 521, 713, 714, 726, 746, 802, 804, 865, 893, 1013, 1031, 1035, 1036, 1041, 1043, 1045, 1046, 1048, 1049, 1050, 1057, 1058], "dbscan_clust": 454, "dcc": 379, "dcg": [735, 765, 1010, 1048], "dcg_score": [2, 765, 1010, 1048, 1051], "dd": [50, 51, 157, 310, 507], "ddof": [276, 893, 904], "de": [51, 159, 323, 381, 644, 697, 773, 1006, 1007, 1030, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "dea": [1055, 1056, 1057], "deactiv": [257, 378, 385, 390, 402, 417, 812, 813, 1055], "dead": 1059, "deadlock": 399, "deal": [62, 92, 105, 154, 186, 191, 203, 242, 290, 294, 351, 360, 384, 389, 417, 424, 425, 426, 482, 505, 712, 717, 772, 796, 879, 957, 1006, 1034, 1044, 1056, 1057], "dealloc": 1058, "dean": [159, 1049, 1055, 1057, 1059], "death": 379, "debian": [0, 371, 382, 390], "debias": 133, "deborah": [1047, 1048, 1058], "debug": [2, 367, 372, 385, 387, 390, 398, 401, 636, 912, 1049, 1053], "debugg": [387, 392], "dec": [219, 294, 686, 892, 917, 1025], "decad": [191, 1030], "decai": [180, 553, 870, 871, 957, 1010, 1024, 1045], "decal": 1053, "decemb": [114, 154, 180, 379, 673, 694, 695, 1041, 1049, 1051, 1053, 1054, 1056], "decent": [245, 275, 379, 1012], "deci": 285, "decid": [43, 50, 92, 95, 105, 149, 154, 267, 273, 276, 283, 379, 384, 399, 410, 415, 424, 426, 458, 465, 568, 569, 620, 644, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 680, 690, 693, 806, 855, 856, 857, 859, 861, 863, 864, 865, 876, 1009, 1016, 1034, 1054, 1057], "decil": [641, 1052], "deciles_hlines_": 641, "deciles_vlines_": 641, "decim": [62, 181, 479, 480, 926, 1048, 1049], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 91, 93, 95, 128, 137, 140, 141, 142, 143, 149, 157, 158, 159, 161, 162, 166, 172, 173, 177, 179, 191, 201, 202, 210, 227, 228, 231, 245, 246, 248, 256, 268, 279, 280, 282, 283, 294, 305, 308, 312, 317, 318, 319, 322, 335, 339, 340, 343, 344, 345, 346, 347, 348, 349, 355, 356, 358, 371, 380, 381, 384, 398, 410, 411, 414, 416, 423, 445, 477, 505, 509, 513, 528, 545, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 602, 603, 640, 641, 642, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 707, 709, 711, 712, 716, 727, 729, 735, 736, 744, 748, 749, 751, 765, 791, 793, 796, 797, 798, 803, 808, 809, 812, 813, 823, 825, 831, 836, 839, 841, 842, 844, 855, 874, 893, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 1004, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1054, 1055, 1057, 1058, 1059], "decision_funct": [48, 50, 62, 64, 91, 140, 155, 166, 230, 231, 232, 246, 255, 270, 283, 290, 303, 304, 312, 319, 333, 345, 346, 347, 351, 352, 356, 386, 398, 414, 415, 423, 445, 477, 558, 559, 562, 564, 568, 570, 572, 576, 602, 603, 640, 641, 642, 667, 668, 675, 677, 683, 684, 685, 686, 707, 709, 711, 716, 729, 735, 736, 744, 748, 749, 751, 765, 791, 797, 798, 803, 808, 809, 812, 813, 823, 831, 834, 841, 842, 843, 844, 859, 873, 880, 910, 913, 915, 917, 918, 932, 1006, 1010, 1016, 1017, 1024, 1025, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1058, 1060], "decision_function_shap": [326, 355, 915, 918, 1025, 1046, 1047, 1050, 1051], "decision_path": [366, 566, 567, 573, 574, 575, 921, 922, 923, 924, 1047, 1052], "decision_threshold": [270, 290], "decision_tre": [925, 926, 927, 1026], "decision_tree_learn": [921, 922, 1026], "decisionboundarydisplai": [2, 48, 66, 67, 70, 91, 140, 155, 160, 202, 210, 227, 232, 279, 300, 305, 308, 322, 343, 344, 345, 346, 348, 349, 351, 363, 1055, 1056, 1058, 1059], "decisiontre": [147, 562, 1046], "decisiontreeclassifi": [2, 67, 138, 140, 147, 160, 280, 294, 332, 362, 363, 366, 398, 415, 423, 562, 564, 566, 568, 570, 573, 640, 720, 815, 837, 922, 923, 925, 926, 927, 1000, 1011, 1026, 1042, 1043, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "decisiontreeclassifierifitteddecisiontreeclassifi": 366, "decisiontreeregressor": [2, 139, 141, 256, 318, 326, 332, 364, 365, 389, 563, 565, 567, 568, 569, 571, 573, 574, 641, 642, 921, 924, 926, 952, 1000, 1011, 1026, 1042, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "decisiontreeregressorifitteddecisiontreeregressor": 328, "declan": 1053, "declar": [91, 239, 252, 367, 384, 385, 390, 398, 451, 454, 455, 467, 479, 480, 486, 699, 703, 1048, 1052], "decod": [47, 310, 379, 398, 512, 578, 597, 598, 600, 1041, 1042], "decode_error": [47, 424, 512, 597, 598, 600, 1043], "decompos": [11, 124, 128, 141, 319, 543, 547, 718, 834, 957, 1005, 1006, 1010, 1027, 1035, 1036], "decomposit": [2, 9, 44, 45, 54, 55, 85, 93, 104, 106, 107, 108, 118, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 157, 196, 238, 239, 241, 249, 250, 253, 254, 257, 275, 301, 306, 322, 330, 333, 334, 359, 373, 377, 390, 393, 398, 412, 413, 414, 417, 423, 428, 457, 459, 460, 461, 470, 490, 491, 492, 504, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 565, 620, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 681, 682, 683, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 806, 807, 862, 869, 872, 875, 891, 922, 956, 957, 1006, 1007, 1010, 1027, 1029, 1031, 1032, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "decompress": [410, 1041], "decor": [2, 192, 326, 384, 385, 386, 393, 815, 832, 947, 951, 952, 970, 976, 1051, 1054, 1057, 1059], "decoupl": [423, 1012], "decreas": [63, 74, 81, 90, 93, 101, 109, 154, 156, 172, 173, 183, 191, 192, 194, 226, 248, 249, 278, 283, 289, 312, 319, 322, 326, 362, 371, 373, 384, 414, 416, 423, 449, 453, 471, 530, 543, 544, 550, 566, 567, 568, 569, 570, 571, 573, 574, 575, 611, 644, 645, 646, 685, 686, 687, 715, 721, 736, 791, 798, 870, 871, 921, 922, 923, 924, 999, 1001, 1002, 1006, 1007, 1010, 1013, 1014, 1017, 1018, 1024, 1025, 1034, 1043, 1048, 1051, 1054], "dede00": [79, 97, 98], "dedic": [43, 274, 356, 382, 388, 390, 396, 399, 412, 416, 593, 681, 683, 696, 999, 1006, 1029, 1049, 1058], "deduc": 46, "deduct": 1014, "dedupl": 1045, "deeksha": 1053, "deem": [284, 285, 543, 1018, 1054], "deep": [218, 386, 398, 410, 423, 430, 441, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 778, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 1014, 1015, 1029, 1030, 1034, 1046, 1052, 1053, 1055], "deepcopi": 386, "deeper": [358, 1026], "deepest": [570, 571, 1052], "deeplook": 1051, "deeppink": 285, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 83, 87, 90, 91, 93, 96, 104, 109, 122, 124, 126, 127, 131, 133, 136, 138, 141, 143, 148, 150, 151, 154, 159, 178, 181, 183, 184, 187, 194, 199, 205, 207, 210, 215, 218, 219, 226, 227, 228, 236, 238, 239, 252, 253, 255, 261, 262, 263, 264, 266, 267, 270, 271, 274, 275, 276, 277, 279, 284, 287, 291, 297, 302, 304, 307, 310, 313, 315, 317, 319, 322, 323, 326, 334, 340, 343, 347, 351, 356, 358, 359, 360, 371, 379, 384, 386, 390, 391, 396, 417, 420, 424, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 517, 518, 542, 606, 610, 619, 620, 627, 790, 886, 947, 952, 970, 1010, 1017, 1025], "default": [2, 43, 52, 54, 62, 66, 77, 80, 81, 83, 90, 94, 124, 144, 169, 175, 186, 192, 198, 199, 207, 218, 219, 236, 247, 249, 255, 257, 259, 264, 270, 271, 279, 285, 290, 296, 297, 317, 321, 324, 326, 327, 331, 333, 334, 351, 354, 355, 358, 359, 360, 362, 366, 367, 371, 372, 378, 379, 382, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 402, 407, 410, 414, 415, 416, 417, 420, 421, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 743, 744, 745, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 943, 945, 946, 947, 949, 951, 952, 956, 957, 958, 959, 960, 961, 962, 963, 972, 974, 975, 978, 979, 980, 982, 983, 984, 990, 993, 995, 996, 998, 999, 1000, 1002, 1004, 1006, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1020, 1022, 1024, 1025, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "default_bas": [79, 97], "default_rng": 279, "default_scor": 389, "default_tag": 2, "default_target_attribut": 378, "default_tim": [233, 264], "defaultdict": [49, 52, 57, 62, 194, 279, 359, 360], "defazio": [667, 1006], "defens": 294, "defer": 384, "deffici": 1059, "defici": [559, 1007, 1024], "defin": [8, 27, 46, 51, 64, 70, 88, 90, 92, 101, 104, 105, 107, 118, 124, 129, 136, 138, 139, 159, 173, 175, 182, 183, 184, 192, 193, 194, 198, 219, 226, 235, 236, 245, 249, 252, 256, 258, 261, 266, 270, 276, 277, 279, 283, 285, 286, 287, 288, 290, 294, 297, 315, 317, 327, 333, 334, 347, 351, 354, 358, 359, 371, 380, 383, 384, 385, 386, 390, 391, 393, 396, 397, 398, 410, 411, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 431, 432, 433, 435, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 467, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 497, 528, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 636, 637, 638, 639, 641, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 705, 706, 708, 717, 719, 720, 725, 730, 731, 732, 733, 734, 737, 740, 747, 750, 754, 755, 757, 759, 760, 762, 763, 766, 769, 775, 790, 794, 799, 800, 801, 802, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 900, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 943, 945, 949, 955, 967, 969, 993, 999, 1000, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1030, 1036, 1038, 1043, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060], "definit": [2, 93, 114, 205, 218, 283, 297, 359, 384, 385, 386, 398, 401, 416, 418, 419, 421, 536, 538, 544, 620, 637, 701, 717, 727, 737, 767, 806, 807, 999, 1002, 1004, 1006, 1008, 1010, 1013, 1024, 1028, 1036, 1045, 1049, 1056], "definitelyuncertain": 1047, "deflat": [191, 419, 428, 542], "defoi": 1054, "deform": [155, 266, 356], "degener": [122, 262, 428, 448, 462, 542, 729, 1006, 1010, 1050, 1054, 1055], "degrad": [154, 192, 245, 317, 354, 359, 422, 787, 1018], "degre": [43, 70, 126, 140, 180, 186, 190, 191, 192, 196, 198, 203, 205, 207, 219, 222, 251, 257, 261, 262, 263, 266, 267, 276, 291, 315, 328, 329, 344, 351, 353, 421, 425, 454, 460, 507, 544, 550, 648, 649, 652, 665, 784, 806, 809, 859, 888, 892, 915, 916, 917, 918, 919, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1016, 1017, 1020, 1023, 1025, 1044, 1050, 1054, 1055, 1058], "degrees_of_freedom_": 806, "degrees_of_freedom_prior": 806, "degrees_of_freedom_prior_": 806, "dei": 1053, "deil": [1042, 1052, 1053], "dein": 424, "dekel": [675, 676, 1006], "del": [55, 390, 1053, 1054], "delai": [2, 384, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 809, 823, 834, 835, 1055, 1056, 1059], "delalleau": 1023, "delanou": 1052, "delattr": 1053, "delayed_funct": 975, "delbert": [73, 448, 462], "deleg": [91, 390, 440, 441, 926, 998, 1045, 1047, 1053], "delet": [2, 106, 337, 339, 388, 389, 477, 482, 494], "delete_index": 337, "delete_indic": 337, "deleteri": 1048, "deli": 410, "deliber": 1006, "delimit": [384, 1016, 1056], "deliv": [80, 371, 1034], "deliveri": 388, "dell": 51, "delong": [1053, 1054], "delta": [419, 460], "delta_": 1007, "delta_k": 419, "delteil": 1045, "delv": [870, 871], "demand": [150, 154, 398, 424, 809, 823, 834, 835], "demarc": 95, "demiraj": [1056, 1057], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 81, 83, 88, 89, 94, 95, 96, 97, 99, 102, 155, 188, 194, 203, 224, 249, 264, 266, 277, 285, 322, 338, 339, 358, 359, 386, 413, 416, 424, 448, 449, 452, 454, 455, 456, 458, 459, 461, 463, 466, 469, 511, 520, 521, 522, 550, 713, 714, 726, 728, 746, 802, 804, 874, 893, 894, 1031], "demo_param": 386, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 90, 96, 104, 106, 138, 142, 149, 152, 170, 171, 183, 184, 188, 194, 219, 252, 258, 259, 263, 267, 268, 272, 279, 282, 285, 291, 299, 302, 309, 316, 318, 319, 321, 324, 328, 335, 337, 338, 341, 345, 351, 358, 359, 360, 367, 373, 379, 380, 384, 389, 396, 407, 412, 416, 420, 423, 455, 511, 521, 529, 706, 712, 722, 751, 807, 809, 856, 878, 909, 921, 999, 1000, 1004, 1010, 1011, 1012, 1013, 1020, 1023, 1026, 1028, 1031], "dem\u0161ar": 276, "den": [0, 405, 1042, 1043, 1048, 1049, 1050, 1053, 1054], "dendrit": [416, 719], "dendro": 194, "dendro_idx": 194, "dendrogram": [71, 102, 188, 194, 366, 416, 449, 453, 513, 1031, 1053], "denero": 744, "deng": [1045, 1046, 1047], "dengemann": 1042, "dengyong": 909, "deni": [1043, 1044, 1048, 1049, 1050, 1056, 1057], "denni": 1055, "denois": [42, 68, 83, 85, 86, 88, 101, 123, 129, 188, 421, 505, 544, 546, 550, 593, 596, 839, 883, 1031], "denomin": [283, 423, 424, 429, 483, 599, 713, 766, 1004], "denot": [171, 393, 398, 402, 414, 416, 420, 423, 597, 598, 600, 809, 815, 823, 832, 886, 887, 994, 999, 1002, 1006, 1008, 1010, 1011, 1020, 1023, 1058], "dens": [51, 90, 188, 197, 203, 206, 212, 330, 331, 340, 371, 393, 398, 416, 421, 423, 425, 451, 454, 455, 457, 472, 475, 505, 532, 533, 536, 543, 544, 553, 575, 616, 617, 638, 639, 661, 666, 667, 668, 675, 676, 677, 681, 682, 685, 686, 687, 696, 697, 698, 701, 702, 769, 770, 776, 788, 801, 870, 871, 878, 885, 886, 888, 890, 891, 892, 893, 902, 903, 904, 905, 906, 913, 914, 915, 916, 918, 919, 958, 980, 983, 1000, 1003, 1006, 1007, 1010, 1011, 1013, 1016, 1020, 1022, 1023, 1024, 1025, 1026, 1031, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "dense_lasso": 204, "dense_output": [770, 776, 906, 958, 1049], "denser": 452, "densif": 1050, "densifi": [398, 667, 668, 675, 676, 677, 685, 686, 687, 913, 1000, 1043], "densiti": [2, 50, 84, 90, 95, 100, 109, 133, 171, 173, 188, 204, 218, 233, 236, 242, 245, 249, 260, 261, 267, 276, 282, 294, 298, 303, 304, 317, 347, 358, 379, 381, 393, 398, 416, 423, 427, 435, 452, 454, 456, 458, 460, 472, 475, 507, 511, 545, 550, 558, 559, 806, 807, 809, 853, 854, 858, 859, 906, 1004, 1006, 1009, 1013, 1015, 1016, 1022, 1029, 1031, 1032, 1035, 1036, 1043, 1045, 1049, 1050, 1056, 1057], "density_": 906, "densityestim": 435, "densitymixin": 2, "denton": 1043, "deodhar": 1053, "deoli": 1054, "depart": [183, 416], "depedend": 1058, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 88, 109, 128, 144, 148, 151, 152, 154, 156, 159, 168, 172, 181, 186, 188, 189, 191, 194, 196, 199, 203, 236, 239, 244, 245, 251, 255, 266, 270, 276, 277, 281, 282, 283, 290, 297, 313, 317, 322, 328, 331, 334, 344, 351, 354, 359, 360, 367, 371, 372, 373, 377, 384, 386, 387, 392, 393, 396, 397, 398, 399, 401, 402, 409, 410, 412, 416, 418, 420, 421, 423, 424, 425, 426, 427, 446, 447, 448, 452, 454, 455, 457, 458, 460, 462, 465, 467, 468, 470, 472, 477, 492, 497, 498, 499, 502, 505, 509, 510, 511, 513, 514, 519, 543, 544, 550, 553, 560, 568, 569, 571, 597, 598, 599, 600, 611, 613, 616, 617, 620, 636, 641, 642, 647, 649, 657, 667, 668, 678, 680, 682, 685, 686, 687, 689, 696, 699, 700, 703, 704, 720, 738, 739, 747, 787, 790, 792, 793, 796, 801, 802, 806, 807, 828, 838, 855, 856, 857, 859, 861, 862, 863, 864, 865, 871, 872, 874, 886, 887, 890, 893, 907, 914, 915, 918, 922, 937, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1022, 1024, 1025, 1026, 1031, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1056, 1057, 1058], "dependabot": 1059, "dependen": 354, "depict": [138, 278, 423, 1009], "deploi": [270, 334, 371, 401, 410, 415, 1030, 1034], "deploy": [392, 410, 1029, 1030, 1034], "depot": 51, "deprec": [2, 16, 152, 194, 326, 329, 372, 386, 387, 388, 393, 398, 407, 449, 450, 453, 454, 455, 458, 465, 467, 490, 491, 492, 493, 536, 545, 546, 547, 548, 549, 555, 562, 578, 579, 588, 589, 591, 636, 667, 668, 682, 684, 688, 701, 718, 751, 759, 760, 787, 788, 789, 791, 809, 812, 813, 823, 834, 835, 836, 837, 838, 840, 860, 872, 873, 878, 910, 915, 918, 935, 937, 939, 940, 951, 952, 999, 1000, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "deprecated_api_refer": 384, "deprecationwarn": 1051, "dept": 381, "depth": [43, 143, 148, 152, 155, 160, 294, 362, 364, 365, 366, 371, 382, 384, 388, 397, 423, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 853, 854, 858, 921, 922, 923, 924, 925, 927, 963, 1015, 1016, 1026, 1043, 1044, 1052], "der": [701, 705, 1007, 1044, 1045, 1049], "derek": 1049, "deriv": [43, 57, 133, 134, 150, 180, 183, 193, 205, 207, 211, 219, 372, 379, 386, 418, 420, 422, 423, 424, 426, 428, 449, 453, 454, 473, 500, 542, 615, 626, 631, 657, 678, 685, 689, 870, 871, 886, 892, 913, 914, 1004, 1006, 1007, 1010, 1014, 1016, 1025, 1041, 1042, 1043, 1048, 1049, 1050, 1056], "deros": 1052, "derouich": 1041, "derweh": 1059, "desai": [1048, 1050, 1053, 1054, 1056, 1057], "desalvo": 999, "descamp": 1049, "descend": [147, 636, 1051], "descent": [2, 46, 53, 149, 188, 197, 205, 206, 245, 250, 303, 329, 346, 421, 423, 479, 480, 486, 496, 505, 512, 540, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 640, 648, 655, 656, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 677, 681, 683, 685, 686, 687, 690, 691, 692, 693, 696, 703, 839, 870, 871, 874, 913, 917, 983, 1007, 1014, 1016, 1025, 1031, 1032, 1036, 1041, 1044, 1045, 1046, 1048, 1050, 1052, 1054, 1055, 1056], "descr": [173, 377, 378, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 516, 519, 1049], "describ": [2, 43, 52, 91, 159, 173, 191, 236, 250, 276, 285, 367, 371, 372, 377, 379, 381, 383, 384, 386, 389, 392, 398, 399, 413, 416, 418, 419, 420, 421, 423, 424, 470, 477, 481, 482, 499, 502, 504, 505, 506, 509, 510, 511, 512, 513, 514, 519, 525, 526, 527, 537, 616, 617, 654, 668, 677, 723, 806, 807, 848, 850, 888, 957, 999, 1002, 1005, 1006, 1009, 1010, 1012, 1016, 1024, 1025, 1026, 1033, 1049, 1051], "descript": [2, 52, 173, 191, 323, 377, 378, 383, 384, 388, 389, 392, 398, 416, 424, 460, 470, 472, 475, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 516, 519, 553, 639, 685, 771, 774, 787, 1010, 1024, 1025, 1030, 1033, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "descriptor": [398, 517, 518], "deseri": 410, "deserv": [384, 390], "deshmukh": 1054, "deshpand": [1046, 1047], "design": [0, 2, 53, 58, 113, 138, 159, 178, 190, 191, 200, 252, 266, 270, 317, 323, 366, 373, 378, 384, 389, 396, 397, 398, 399, 401, 402, 404, 409, 410, 416, 423, 425, 524, 537, 641, 642, 657, 674, 678, 685, 689, 694, 809, 827, 828, 848, 850, 1000, 1006, 1007, 1010, 1011, 1020, 1029, 1030, 1034, 1043, 1050, 1059], "desir": [50, 61, 140, 173, 187, 218, 220, 317, 321, 334, 377, 384, 392, 404, 410, 413, 416, 419, 420, 421, 425, 512, 547, 549, 553, 556, 576, 602, 611, 612, 673, 679, 694, 695, 708, 717, 745, 853, 854, 858, 873, 878, 880, 883, 884, 886, 887, 889, 890, 894, 897, 899, 901, 902, 943, 978, 1002, 1004, 1007, 1013, 1020, 1024, 1025, 1026, 1041, 1049, 1050, 1051, 1054], "desislava": 1055, "desktop": 382, "despit": [64, 118, 181, 216, 218, 236, 251, 306, 398, 407, 418, 636, 637, 639, 1006, 1013, 1034, 1049, 1050], "dessyvv": 1055, "dest": 331, "destin": 1034, "destroi": [282, 424, 804, 882, 1020], "det": [2, 188, 258, 268, 285, 286, 384, 418, 524, 573, 707, 711, 736, 798, 839, 874, 893, 913, 955, 1031, 1053], "det_curv": [2, 273, 707, 791, 798, 1010, 1053, 1054, 1059], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 92, 138, 139, 141, 145, 147, 152, 159, 188, 192, 205, 207, 222, 243, 247, 250, 251, 255, 257, 259, 267, 270, 274, 283, 290, 300, 303, 304, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 362, 364, 365, 367, 371, 372, 373, 376, 377, 378, 379, 382, 384, 386, 388, 389, 390, 392, 396, 397, 398, 399, 402, 410, 412, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 440, 441, 445, 451, 452, 454, 455, 456, 458, 459, 460, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 480, 505, 513, 533, 540, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 606, 611, 616, 617, 619, 623, 628, 631, 636, 637, 639, 640, 641, 643, 648, 649, 654, 655, 656, 660, 662, 664, 665, 666, 667, 668, 670, 672, 674, 675, 677, 680, 681, 682, 683, 684, 685, 687, 688, 696, 697, 698, 699, 700, 701, 702, 703, 704, 710, 720, 722, 783, 787, 788, 789, 790, 807, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 851, 855, 856, 858, 859, 860, 861, 863, 864, 866, 867, 869, 872, 873, 875, 877, 878, 890, 894, 902, 908, 909, 910, 911, 915, 918, 921, 922, 923, 924, 951, 975, 999, 1000, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1023, 1026, 1032, 1033, 1034, 1036, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "detcurvedisplai": [2, 273, 329, 736, 1053, 1054, 1058, 1059], "detect": [2, 14, 42, 47, 49, 58, 70, 98, 100, 113, 114, 115, 145, 148, 155, 188, 200, 222, 232, 244, 258, 268, 270, 276, 279, 285, 286, 298, 317, 323, 334, 346, 379, 382, 384, 388, 396, 398, 414, 415, 416, 418, 420, 424, 438, 454, 457, 472, 474, 477, 478, 481, 482, 483, 484, 496, 497, 499, 501, 505, 519, 521, 524, 531, 546, 547, 548, 555, 572, 573, 597, 600, 605, 640, 648, 686, 707, 711, 736, 798, 839, 859, 863, 874, 883, 886, 887, 891, 892, 893, 913, 917, 1002, 1006, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1041, 1044, 1047, 1048, 1049, 1051, 1053, 1054, 1056, 1057, 1060], "detection_error_tradeoff": 1010, "detector": [379, 398, 859], "determin": [2, 48, 50, 53, 57, 81, 90, 113, 138, 140, 144, 154, 171, 180, 191, 198, 199, 214, 221, 276, 317, 322, 351, 360, 366, 367, 383, 384, 386, 393, 397, 398, 413, 414, 416, 420, 421, 423, 424, 425, 426, 439, 445, 449, 450, 451, 453, 455, 457, 458, 464, 467, 468, 469, 473, 477, 478, 480, 481, 482, 483, 484, 490, 491, 492, 496, 499, 501, 504, 506, 512, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 546, 548, 551, 552, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 574, 576, 577, 579, 591, 592, 593, 597, 600, 603, 611, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 644, 645, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 696, 698, 699, 701, 702, 703, 716, 720, 732, 738, 739, 747, 792, 793, 794, 796, 797, 802, 809, 811, 812, 813, 815, 823, 831, 832, 833, 834, 835, 836, 837, 838, 840, 844, 846, 847, 849, 856, 858, 859, 864, 869, 870, 871, 877, 878, 886, 887, 888, 890, 894, 902, 913, 914, 916, 919, 922, 924, 927, 955, 972, 978, 980, 983, 999, 1002, 1004, 1009, 1013, 1015, 1016, 1018, 1020, 1023, 1024, 1026, 1041, 1046, 1049, 1050, 1052, 1053, 1054, 1060], "determinist": [93, 151, 372, 380, 398, 416, 451, 455, 457, 459, 460, 461, 466, 467, 470, 560, 568, 569, 573, 574, 592, 593, 700, 704, 820, 821, 869, 921, 922, 932, 1002, 1006, 1042, 1045, 1047, 1049, 1050, 1053, 1056, 1057], "detlefsen": 1055, "detomaso": 1048, "detriment": [46, 172, 290, 372, 425, 1006], "dev": [184, 191, 236, 281, 286, 382, 384, 388, 390, 392, 951, 952, 1010, 1034, 1037, 1048, 1053, 1056, 1057], "dev0": [382, 388, 1033, 1037], "dev514": 1055, "devansh": [1048, 1049], "devanshkyada27": 1058, "devashish": 1047, "devel": 382, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 332, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 371, 379, 383, 384, 388, 390, 396, 398, 399, 401, 407, 410, 413, 418, 419, 423, 424, 430, 433, 440, 502, 809, 951, 952, 993, 1006, 1010, 1013, 1026, 1029, 1030, 1031, 1033, 1034, 1041, 1049, 1050, 1051, 1056, 1059, 1060], "developing_estim": 1031, "devi": 1053, "devianc": [2, 150, 153, 218, 236, 332, 423, 562, 567, 568, 570, 571, 574, 657, 678, 689, 730, 732, 733, 756, 758, 761, 922, 924, 1006, 1026, 1042, 1051, 1052, 1054, 1055, 1057], "deviant": [224, 1016], "deviat": [52, 58, 70, 96, 113, 141, 144, 145, 146, 147, 149, 173, 175, 180, 182, 184, 191, 198, 224, 255, 273, 274, 275, 276, 277, 279, 303, 304, 317, 322, 376, 380, 381, 389, 393, 398, 420, 423, 426, 458, 480, 510, 520, 521, 522, 523, 525, 526, 527, 531, 533, 534, 539, 561, 603, 620, 643, 653, 654, 680, 733, 761, 815, 832, 859, 882, 883, 893, 902, 903, 904, 1006, 1010, 1016, 1020, 1047, 1048, 1049, 1052, 1053, 1054], "devic": [420, 591, 1029, 1059], "devnani": 1053, "deweight": 959, "dexter": 1051, "dezub": 1048, "df": [43, 52, 62, 64, 154, 159, 190, 192, 198, 203, 218, 236, 266, 276, 321, 323, 333, 359, 389, 424, 474, 599, 600, 999, 1000, 1058], "df_": 236, "df_freq": 236, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 333, "df_sev": 236, "df_std": 359, "df_test": [218, 236], "df_train": [218, 236], "dfrac": [1014, 1020], "dgemm": 371, "dgesdd": 390, "dhanshre": 1056, "dhillon": [2, 57, 413, 459, 461, 520], "dhingra": [1049, 1050, 1053, 1058], "di": [398, 416, 421, 540, 546, 673, 694, 695, 906, 1045, 1054], "dia": 1058, "diabet": [2, 46, 152, 162, 163, 173, 187, 188, 205, 207, 214, 215, 272, 289, 377, 423, 510, 661, 662, 809, 814, 834, 835, 836, 1018, 1031, 1036], "diabetes_i": 214, "diabetes_x": 214, "diabetes_x_test": 214, "diabetes_x_train": 214, "diabetes_y_pr": 214, "diabetes_y_test": 214, "diabetes_y_train": 214, "diadochokinet": 1056, "diag": [51, 115, 183, 263, 266, 421, 426, 541, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 806, 807, 1006, 1056], "diag_kind": [190, 191], "diagnos": [173, 279, 381, 392, 401, 417], "diagnosi": [173, 279, 381, 860], "diagnost": [173, 194, 279, 377, 398, 415, 509, 721, 835, 836, 1010, 1018, 1029, 1030, 1036], "diagon": [2, 43, 62, 64, 75, 115, 117, 236, 255, 263, 266, 267, 269, 347, 413, 416, 418, 426, 461, 479, 480, 486, 489, 520, 522, 536, 541, 559, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 659, 660, 663, 664, 665, 691, 692, 710, 724, 801, 806, 807, 857, 865, 1002, 1004, 1006, 1009, 1010, 1013, 1020, 1047, 1049, 1050, 1051], "diagram": [2, 62, 64, 105, 257, 327, 333, 386, 414, 416, 446, 447, 476, 911, 1020, 1052, 1053, 1058, 1059], "diamet": 416, "diamond": 264, "diaz": 1049, "dice": [458, 465, 708, 787, 788, 789, 1013], "dicedist": 708, "dichotomis": 1026, "dickerson": 1042, "dickson": 1048, "dico": 127, "dict": [48, 49, 50, 51, 55, 63, 74, 80, 104, 107, 108, 130, 144, 149, 151, 153, 216, 224, 245, 254, 263, 274, 275, 277, 280, 283, 285, 297, 301, 319, 323, 330, 340, 347, 351, 359, 360, 373, 376, 378, 386, 396, 398, 417, 420, 427, 428, 430, 434, 438, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 505, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 706, 707, 709, 710, 711, 720, 722, 771, 774, 780, 788, 789, 806, 807, 808, 809, 812, 813, 815, 820, 821, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 930, 932, 944, 945, 963, 966, 969, 998, 999, 1010, 1020, 1036, 1041, 1047, 1048, 1057, 1058, 1059], "dict_count_vector": 360, "dict_init": [540, 546, 554, 555], "dict_kei": 635, "dict_learn": [2, 393, 540, 546, 555, 1042, 1049, 1051, 1054, 1055, 1057], "dict_learning_onlin": [2, 554, 1042, 1051, 1054, 1055, 1058], "dict_pos_code_estim": 124, "dict_pos_dict_estim": 124, "dict_pos_estim": 124, "dict_typ": 590, "dictat": 416, "dictionari": [2, 44, 46, 47, 71, 83, 86, 88, 123, 125, 154, 156, 188, 217, 252, 254, 270, 359, 360, 377, 378, 379, 386, 396, 398, 416, 424, 457, 472, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 519, 535, 540, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 576, 577, 578, 579, 590, 591, 593, 596, 597, 598, 603, 641, 642, 643, 673, 694, 695, 710, 720, 722, 809, 812, 813, 820, 821, 823, 831, 836, 872, 877, 886, 921, 922, 923, 924, 928, 930, 932, 944, 966, 969, 999, 1006, 1010, 1025, 1031, 1035, 1036, 1041, 1049, 1052, 1053, 1054, 1055, 1056], "dictionarylearn": [2, 421, 546, 548, 549, 551, 552, 553, 554, 555, 1042, 1046, 1048, 1051, 1054, 1055, 1056, 1057], "dictlearn": 1046, "dictvector": [2, 57, 104, 188, 357, 358, 359, 379, 424, 496, 591, 597, 598, 599, 600, 886, 1031, 1041, 1042, 1045, 1051, 1053, 1054, 1057, 1058], "did": [151, 175, 191, 194, 218, 226, 236, 262, 270, 324, 379, 410, 636, 721, 828, 915, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056], "didact": [384, 1030], "didi": [1047, 1048, 1049, 1050], "didn": [252, 367, 398, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "die": 1007, "diebold": 276, "diederik": [870, 871, 1014, 1056], "diederikwp": 1056, "diego": [1042, 1043], "diegodlh": [1048, 1049], "diemert": [1034, 1043, 1044], "diesel": [218, 236], "dietterich": [276, 843, 1011], "diff": [387, 1010], "diff_embed": 307, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 55, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 84, 87, 88, 90, 92, 93, 95, 99, 100, 101, 102, 104, 105, 106, 108, 113, 117, 118, 120, 121, 122, 124, 126, 127, 129, 131, 132, 133, 138, 141, 143, 144, 147, 148, 149, 151, 153, 154, 159, 160, 161, 162, 164, 166, 168, 173, 174, 175, 176, 177, 180, 181, 182, 186, 187, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 206, 207, 209, 215, 218, 219, 220, 222, 223, 224, 225, 226, 235, 236, 238, 239, 240, 241, 243, 245, 247, 250, 251, 252, 255, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 290, 291, 292, 294, 296, 297, 300, 303, 304, 306, 312, 313, 316, 318, 319, 321, 322, 326, 334, 341, 342, 343, 345, 346, 347, 349, 350, 354, 355, 358, 359, 360, 367, 371, 372, 373, 378, 379, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 397, 398, 402, 404, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 441, 445, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 466, 467, 470, 472, 483, 486, 498, 502, 503, 505, 512, 513, 517, 518, 521, 523, 531, 546, 547, 548, 549, 555, 556, 558, 559, 564, 565, 572, 590, 591, 597, 598, 599, 600, 603, 620, 622, 623, 624, 628, 631, 632, 636, 640, 641, 642, 643, 647, 652, 653, 654, 656, 658, 660, 662, 664, 667, 670, 675, 676, 681, 683, 685, 686, 687, 689, 699, 701, 703, 707, 709, 710, 713, 714, 715, 716, 718, 724, 726, 727, 736, 737, 738, 739, 740, 743, 744, 746, 752, 766, 767, 768, 770, 787, 791, 792, 793, 795, 796, 798, 801, 802, 804, 807, 809, 811, 812, 813, 814, 815, 818, 823, 824, 825, 827, 828, 829, 831, 832, 834, 836, 837, 840, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 863, 866, 869, 873, 878, 882, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 913, 914, 915, 918, 921, 922, 923, 924, 966, 973, 999, 1000, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1034, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "difference_plot": 281, "differenti": [120, 283, 423, 426, 568, 569, 628, 631], "difficult": [90, 138, 191, 226, 255, 384, 392, 414, 421, 423, 562, 563, 568, 570, 571, 1005, 1007, 1009, 1013, 1015, 1017, 1026, 1034, 1041, 1055], "difficulti": [48, 64, 236, 317, 373, 384, 414, 870, 871, 1009, 1013], "diffus": 180, "digest": [384, 1056, 1060], "digg": [1034, 1048], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 83, 86, 88, 94, 96, 97, 106, 107, 117, 127, 143, 163, 171, 173, 188, 208, 209, 225, 234, 237, 238, 240, 242, 249, 250, 264, 269, 274, 275, 278, 301, 306, 307, 311, 313, 314, 332, 335, 338, 359, 377, 384, 390, 416, 422, 423, 425, 449, 453, 455, 511, 550, 553, 558, 575, 667, 697, 698, 699, 700, 701, 706, 713, 714, 722, 726, 727, 746, 802, 804, 839, 855, 862, 869, 873, 874, 883, 893, 899, 906, 909, 918, 925, 926, 927, 1005, 1007, 1010, 1013, 1015, 1023, 1031, 1036, 1045], "digraph": 925, "dijkstra": [393, 697, 1007], "dilemma": 1005, "dillon": [1049, 1050, 1051], "dilut": [194, 381], "dilutedsauc": 1049, "dim": [227, 249, 305, 306, 308, 343, 344, 536, 708, 1058], "dim_reduction_method": 306, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 88, 115, 117, 120, 124, 173, 177, 179, 181, 183, 192, 202, 203, 216, 240, 242, 245, 249, 250, 256, 262, 263, 301, 302, 306, 320, 351, 358, 359, 360, 379, 381, 385, 398, 416, 421, 422, 426, 428, 450, 451, 453, 455, 456, 457, 460, 472, 473, 490, 491, 492, 502, 503, 524, 533, 534, 538, 539, 542, 550, 558, 591, 592, 593, 594, 596, 598, 606, 620, 628, 631, 650, 653, 668, 699, 700, 701, 703, 704, 708, 773, 834, 853, 854, 858, 872, 905, 906, 907, 915, 916, 917, 918, 919, 939, 940, 941, 972, 980, 983, 1000, 1002, 1004, 1006, 1007, 1008, 1011, 1013, 1014, 1016, 1022, 1025, 1029, 1048, 1050, 1051, 1053], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 89, 90, 92, 93, 97, 103, 105, 107, 108, 117, 118, 122, 124, 131, 132, 138, 143, 157, 173, 175, 177, 178, 182, 188, 203, 214, 219, 235, 237, 239, 240, 242, 245, 249, 250, 253, 262, 263, 298, 301, 305, 307, 319, 344, 351, 358, 367, 371, 376, 379, 380, 381, 384, 393, 398, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 453, 455, 457, 473, 477, 481, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 506, 509, 510, 511, 513, 514, 519, 524, 528, 541, 543, 544, 547, 548, 549, 550, 553, 556, 558, 572, 575, 582, 608, 616, 640, 649, 650, 651, 661, 697, 698, 699, 700, 701, 702, 703, 705, 708, 719, 734, 806, 807, 809, 839, 853, 854, 855, 858, 861, 862, 869, 873, 874, 877, 883, 888, 893, 905, 906, 907, 913, 917, 957, 995, 1001, 1002, 1005, 1006, 1011, 1012, 1016, 1022, 1023, 1024, 1025, 1026, 1031, 1032, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1053, 1056, 1057], "dimensionalityreduct": 381, "dimensionalityreductiondimension": 404, "diminish": 424, "dimitri": [1054, 1055, 1056, 1057, 1058], "dimmick": 381, "dinga92": 1059, "dingwal": 1048, "dionisi": 1055, "diop": 1051, "dipan": 1059, "direct": [51, 117, 118, 124, 126, 132, 173, 224, 261, 267, 273, 306, 315, 322, 347, 352, 382, 384, 385, 388, 392, 399, 402, 416, 419, 421, 424, 425, 460, 470, 479, 480, 486, 543, 550, 558, 597, 598, 600, 611, 650, 697, 862, 1004, 1005, 1006, 1011, 1013, 1015, 1030, 1041, 1044], "direction": 1059, "direction_vector": 315, "directli": [0, 45, 57, 64, 80, 81, 91, 105, 143, 148, 173, 183, 203, 205, 218, 224, 236, 246, 281, 315, 317, 330, 333, 334, 360, 367, 371, 382, 384, 385, 386, 388, 390, 397, 398, 399, 412, 413, 414, 416, 417, 418, 419, 420, 424, 426, 450, 460, 470, 472, 473, 477, 482, 536, 576, 577, 578, 579, 602, 606, 620, 629, 641, 652, 655, 656, 661, 662, 669, 670, 671, 672, 673, 686, 690, 693, 699, 783, 787, 790, 801, 802, 808, 809, 812, 813, 823, 837, 838, 840, 856, 858, 872, 873, 874, 880, 890, 892, 895, 902, 999, 1006, 1008, 1013, 1015, 1017, 1020, 1025, 1026, 1030, 1041, 1049, 1050, 1052, 1053, 1054, 1057, 1058, 1060], "director": 1034, "directori": [0, 2, 47, 299, 378, 382, 384, 386, 388, 390, 392, 398, 402, 417, 449, 453, 458, 494, 500, 508, 873, 874, 1055], "direr": [1044, 1045, 1048, 1049], "dirichlet": [2, 42, 45, 188, 261, 262, 267, 271, 424, 496, 545, 547, 549, 597, 600, 806, 1029, 1031, 1035, 1036, 1041, 1046, 1047], "dirichlet_distribut": [261, 806, 1009, 1047], "dirichlet_process": [261, 267, 806, 1009, 1047], "disabl": [142, 252, 270, 324, 333, 358, 382, 384, 407, 424, 457, 468, 476, 546, 547, 548, 555, 568, 569, 570, 571, 872, 890, 902, 911, 939, 940, 1020, 1047, 1050, 1054, 1056, 1059], "disadvantag": [421, 426, 1006, 1007, 1014, 1024, 1025, 1026], "disagre": [744, 1017], "disambigu": [384, 841, 910, 1023, 1056], "disappear": [1006, 1041], "disappoint": 43, "discard": [47, 90, 200, 279, 371, 413, 418, 425, 517, 518, 558, 606, 636, 639, 653, 886, 890, 902, 1000, 1006, 1049, 1053, 1059], "disclaim": 1029, "disclos": 397, "disconnect": 1054, "discontinu": [43, 396], "discord": [714, 1033], "discount": [2, 379, 416, 735, 765, 1048, 1051], "discounted_cumulative_gain": 735, "discourag": [222, 396, 402, 698], "discov": [359, 416, 421, 424, 427, 452, 456, 1056, 1059], "discoveri": [2, 276, 379, 390, 393, 416, 423, 425, 427, 452, 520, 564, 565, 572, 601, 604, 605, 607, 608, 609, 615, 729, 749, 792, 948, 949, 950, 1010, 1022, 1034, 1055, 1056], "discrep": [424, 1045], "discret": [2, 43, 47, 67, 81, 91, 122, 133, 136, 138, 157, 174, 188, 192, 199, 218, 236, 252, 256, 294, 312, 316, 320, 373, 376, 379, 380, 384, 388, 397, 398, 416, 421, 424, 426, 446, 447, 456, 460, 468, 469, 470, 501, 523, 524, 531, 562, 568, 597, 598, 601, 604, 605, 608, 609, 616, 617, 619, 620, 621, 625, 626, 627, 666, 667, 751, 809, 820, 831, 839, 848, 849, 852, 874, 878, 886, 887, 890, 893, 902, 913, 918, 922, 972, 999, 1006, 1007, 1008, 1010, 1011, 1013, 1026, 1029, 1031, 1036, 1043, 1046, 1054, 1055, 1056], "discrete_featur": [616, 617], "discrim": 218, "discrimin": [2, 12, 48, 49, 65, 111, 112, 113, 114, 115, 132, 168, 170, 173, 188, 196, 233, 239, 253, 266, 306, 381, 414, 423, 483, 521, 558, 559, 575, 640, 792, 862, 999, 1007, 1010, 1013, 1024, 1026, 1031, 1032, 1036, 1044], "discriminant_analysi": [2, 67, 69, 70, 132, 239, 306, 367, 412, 545, 558, 559, 862, 1004, 1011, 1041, 1044, 1045, 1046, 1047, 1048], "discriminatori": 414, "discuss": [43, 88, 93, 173, 191, 207, 238, 243, 270, 279, 294, 358, 367, 373, 379, 381, 384, 389, 390, 392, 396, 398, 399, 415, 416, 418, 422, 423, 426, 507, 691, 692, 855, 856, 861, 863, 864, 1000, 1004, 1006, 1007, 1010, 1013, 1020, 1027, 1030, 1033, 1044], "diseas": [46, 162, 173, 187, 279, 381, 721, 1010], "disentangl": 1007, "disjoint": [414, 416, 417, 445, 713, 740, 764, 766, 1007], "disk": [45, 53, 379, 384, 389, 398, 410], "disp": [43, 66, 68, 140, 154, 155, 156, 269, 279, 292, 300, 322, 327, 333, 344, 349, 446, 640, 706, 709, 710, 862], "disp1": 641, "disp2": 641, "dispar": [699, 703, 1007], "dispatch": [105, 270, 398, 412, 476, 809, 823, 834, 835, 836, 911, 975, 976, 1036, 1056, 1059], "dispatch_next": 975, "dispatch_one_batch": 975, "dispers": [70, 290, 416, 719, 734, 1006], "displai": [2, 51, 62, 64, 70, 72, 81, 83, 95, 105, 114, 115, 117, 118, 124, 144, 155, 156, 159, 186, 188, 191, 192, 206, 236, 244, 245, 255, 259, 265, 273, 277, 278, 283, 285, 286, 291, 307, 323, 327, 328, 346, 363, 371, 384, 386, 387, 391, 393, 402, 404, 417, 421, 424, 425, 430, 446, 472, 475, 476, 505, 550, 573, 639, 640, 641, 667, 696, 706, 707, 709, 710, 711, 722, 727, 791, 798, 809, 815, 823, 832, 839, 873, 874, 886, 888, 893, 911, 918, 925, 926, 927, 948, 975, 996, 1010, 1014, 1029, 1031, 1036, 1050, 1052, 1053, 1055, 1056], "display_label": [45, 269, 706, 1053], "dispos": 999, "disproportion": 422, "disput": 144, "disregard": [358, 398, 424, 439, 473, 490, 491, 492, 561, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 730, 731, 732, 733, 794, 846, 847, 856, 864, 871, 882, 883, 889, 890, 893, 898, 901, 902, 904, 914, 916, 919, 922, 924, 1010, 1049], "disrupt": [372, 382], "dissemin": 1029, "dissimilar": [241, 351, 398, 413, 460, 699, 703, 1007, 1047, 1057], "dissimilarity_matrix_": 699, "dist": [113, 239, 249, 388, 477, 478, 479, 480, 481, 482, 483, 484, 708, 772, 778, 853, 854], "dist_": [477, 482], "dist_embed": 307, "dist_linkag": 194, "dist_matrix": 460, "dist_matrix_": 697, "distanc": [2, 37, 74, 75, 90, 92, 95, 96, 100, 102, 110, 114, 129, 173, 186, 188, 194, 204, 219, 221, 238, 240, 243, 249, 255, 297, 299, 300, 305, 307, 309, 310, 317, 322, 326, 330, 331, 351, 358, 359, 371, 381, 393, 396, 398, 413, 416, 418, 421, 422, 426, 427, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 463, 464, 465, 466, 467, 469, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 484, 547, 549, 556, 616, 617, 624, 628, 629, 631, 632, 637, 667, 668, 675, 677, 683, 684, 685, 686, 687, 697, 698, 699, 701, 702, 703, 704, 705, 708, 712, 734, 743, 767, 769, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 787, 788, 789, 790, 801, 802, 805, 809, 823, 842, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 892, 907, 911, 913, 915, 917, 918, 919, 921, 922, 923, 924, 1000, 1004, 1007, 1008, 1010, 1013, 1016, 1020, 1022, 1024, 1025, 1030, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "distance_matrix": 194, "distance_metr": [2, 787, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867], "distance_threshold": [76, 449, 453, 1050, 1053], "distancemetr": [2, 398, 422, 856, 1013, 1049, 1053, 1054, 1055, 1058], "distancemetric64": [853, 854], "distances_": [76, 449, 453, 1053], "distant": [416, 701, 718, 1013], "distil": 243, "distinct": [95, 276, 338, 358, 360, 379, 386, 389, 398, 399, 420, 423, 424, 598, 810, 819, 827, 887, 888, 908, 909, 999, 1006, 1013, 1016, 1049], "distinguish": [43, 58, 75, 113, 122, 129, 220, 273, 294, 379, 386, 398, 399, 426, 999, 1010, 1013, 1016], "distort": [37, 217, 249, 381, 414, 890, 902, 907, 1007, 1020, 1022], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 87, 88, 90, 92, 97, 109, 112, 113, 114, 118, 122, 138, 140, 151, 155, 168, 173, 175, 184, 188, 190, 191, 194, 196, 198, 218, 220, 222, 240, 242, 245, 249, 255, 261, 266, 267, 270, 272, 276, 282, 284, 290, 294, 298, 302, 316, 317, 319, 322, 332, 336, 337, 352, 354, 358, 371, 372, 377, 380, 381, 382, 384, 385, 389, 398, 414, 416, 418, 420, 421, 422, 428, 455, 457, 477, 478, 479, 480, 481, 482, 483, 484, 496, 507, 512, 524, 525, 526, 527, 528, 532, 541, 542, 545, 559, 560, 561, 572, 620, 634, 649, 651, 653, 654, 657, 667, 668, 678, 688, 689, 697, 698, 699, 701, 715, 717, 733, 761, 798, 806, 807, 813, 814, 821, 823, 827, 828, 839, 849, 852, 858, 862, 869, 876, 889, 890, 891, 892, 893, 901, 902, 903, 908, 909, 917, 928, 959, 999, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1022, 1023, 1029, 1030, 1031, 1035, 1036, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "district": [187, 379], "distutils_use_sdk": 382, "ditenberg": 1048, "div": [255, 953], "dive": [118, 384, 390, 999], "diverg": [54, 150, 238, 243, 302, 547, 549, 556, 701, 869, 1007, 1009, 1010, 1015, 1017, 1048, 1049, 1054], "divers": [0, 398, 423], "divid": [72, 78, 83, 121, 124, 170, 180, 218, 255, 261, 359, 367, 380, 381, 413, 415, 416, 420, 421, 423, 477, 478, 479, 480, 481, 482, 483, 484, 521, 528, 543, 550, 685, 686, 687, 728, 735, 743, 747, 765, 803, 805, 870, 871, 915, 918, 957, 960, 961, 999, 1007, 1009, 1010, 1013, 1020, 1024, 1026, 1041, 1048, 1049, 1052], "dividend": 1010, "divis": [330, 416, 424, 599, 600, 603, 721, 722, 725, 738, 739, 747, 755, 792, 793, 796, 1010, 1045, 1049, 1050, 1053, 1057, 1058, 1060], "divisor": 1010, "divo": 1051, "divyanshu": 1054, "divyaprabha": 1052, "diwakar": 1055, "dixon": [778, 1051, 1052], "dizietasahi": 1051, "di\u1ec5n": 1056, "djipei": [1046, 1047], "dl": 685, "dlabal": 1045, "dll": 1055, "dlovel": 1049, "dmallia17": 1054, "dmitri": [1046, 1048, 1049, 1050, 1054, 1057, 1058], "dmitrij": 1045, "dmytro": 1054, "dn": [0, 1013], "dna": [396, 637, 1000], "dnf": 402, "do": [0, 30, 43, 49, 52, 62, 64, 77, 90, 96, 102, 108, 120, 128, 130, 133, 142, 145, 147, 151, 152, 154, 159, 170, 180, 186, 191, 192, 193, 215, 218, 222, 236, 238, 240, 252, 253, 255, 267, 270, 271, 274, 277, 279, 296, 297, 299, 303, 329, 333, 341, 344, 347, 351, 352, 354, 358, 359, 360, 366, 367, 371, 372, 373, 379, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 398, 399, 410, 412, 414, 416, 417, 418, 419, 420, 423, 424, 425, 435, 458, 469, 472, 475, 512, 545, 547, 551, 553, 561, 564, 590, 591, 597, 598, 600, 611, 641, 642, 654, 655, 661, 664, 665, 667, 668, 675, 677, 685, 746, 772, 787, 791, 811, 826, 829, 845, 846, 850, 877, 878, 880, 887, 891, 893, 898, 899, 901, 902, 903, 904, 921, 922, 923, 924, 938, 983, 999, 1002, 1004, 1006, 1007, 1010, 1011, 1013, 1014, 1018, 1020, 1025, 1026, 1029, 1030, 1033, 1034, 1041, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "do_early_stopping_": [570, 571], "doc": [0, 43, 47, 52, 57, 358, 360, 372, 384, 388, 389, 392, 398, 402, 409, 424, 597, 598, 600, 787, 790, 801, 802, 836, 1041, 1045, 1055], "doc_environ": 392, "doc_it": 47, "doc_linux": 392, "doc_topic_distr": [545, 1048], "doc_topic_prior": [421, 545], "doc_topic_prior_": 545, "dock": 1060, "docker": [392, 410, 1054, 1055], "dock\u00e8": [1050, 1051, 1052, 1058, 1059], "docstr": [384, 386, 390, 398, 456, 469, 480, 708, 710, 947, 999, 1013, 1014, 1024, 1041, 1048, 1049, 1054, 1055, 1058], "doctest": [384, 398, 1041], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 91, 92, 93, 95, 96, 104, 105, 106, 122, 124, 136, 143, 145, 146, 155, 156, 159, 162, 170, 180, 183, 191, 192, 193, 200, 233, 246, 247, 248, 249, 252, 253, 255, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 314, 315, 323, 327, 330, 331, 333, 338, 340, 354, 360, 366, 371, 372, 373, 378, 379, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 396, 398, 399, 402, 404, 407, 410, 413, 416, 421, 424, 427, 452, 455, 456, 457, 458, 461, 465, 472, 496, 497, 508, 510, 520, 530, 532, 545, 553, 573, 597, 598, 599, 600, 613, 640, 648, 652, 667, 675, 677, 683, 685, 705, 706, 708, 712, 714, 726, 746, 767, 768, 778, 787, 788, 789, 802, 804, 809, 812, 813, 815, 823, 832, 843, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 874, 885, 913, 918, 935, 938, 940, 954, 975, 999, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1018, 1024, 1027, 1031, 1034, 1042, 1043, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "document_clust": 1047, "document_nam": 57, "doddington": 1010, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 81, 88, 90, 92, 104, 106, 107, 118, 134, 138, 143, 144, 147, 148, 149, 153, 154, 159, 173, 181, 191, 192, 203, 215, 218, 224, 236, 238, 239, 240, 243, 245, 248, 249, 250, 252, 253, 255, 263, 264, 270, 271, 276, 278, 279, 283, 285, 286, 296, 297, 310, 317, 319, 321, 323, 324, 329, 330, 339, 340, 345, 347, 354, 356, 358, 359, 360, 371, 372, 378, 382, 384, 385, 386, 388, 392, 397, 398, 404, 407, 410, 412, 414, 416, 417, 420, 421, 423, 424, 425, 426, 441, 448, 450, 454, 455, 457, 458, 462, 464, 475, 481, 487, 495, 508, 512, 517, 536, 544, 546, 547, 548, 553, 555, 558, 559, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 590, 591, 592, 597, 598, 600, 602, 603, 606, 611, 615, 619, 641, 647, 658, 659, 660, 663, 664, 665, 668, 680, 691, 692, 707, 709, 711, 716, 737, 738, 739, 743, 745, 747, 752, 755, 787, 792, 793, 796, 797, 803, 809, 812, 813, 823, 870, 874, 875, 876, 878, 880, 882, 885, 886, 887, 890, 893, 894, 902, 905, 906, 910, 913, 914, 921, 922, 923, 924, 928, 939, 943, 957, 960, 961, 962, 975, 993, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1024, 1025, 1026, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060], "doepk": 1048, "doesn": [47, 191, 218, 252, 262, 296, 314, 347, 392, 398, 402, 410, 416, 424, 425, 429, 441, 483, 641, 642, 675, 677, 685, 725, 837, 840, 845, 855, 856, 870, 882, 883, 1009, 1010, 1026, 1045, 1058], "dog": [329, 330, 332, 333, 334, 591, 792, 894, 1020], "dohmatob": [1046, 1047, 1048], "dohri": [1058, 1059], "doi": [196, 218, 236, 384, 416, 685], "dok": [562, 563, 880, 1054], "dokato": 1048, "dolan": 379, "dollar": [191, 379], "dolmatov": 1051, "dolphin": 358, "domain": [154, 218, 290, 323, 398, 401, 420, 644, 730, 732, 733, 810, 811, 816, 817, 818, 1006, 1030, 1060], "domin": [144, 187, 194, 218, 223, 255, 285, 322, 379, 390, 414, 893, 1012, 1020, 1026, 1057], "domingo": [64, 797, 1010], "dominik": [1048, 1057], "don": [51, 64, 89, 104, 154, 191, 239, 252, 253, 270, 276, 297, 339, 344, 348, 358, 359, 371, 378, 384, 386, 390, 392, 397, 402, 407, 415, 417, 424, 436, 655, 661, 841, 921, 922, 923, 924, 932, 973, 999, 1006, 1009, 1011, 1014, 1016, 1024, 1045, 1050, 1057, 1058, 1059], "don86": 1048, "donald": [45, 379, 416, 734, 1000], "donat": 246, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 87, 88, 127, 154, 170, 173, 180, 181, 191, 192, 196, 198, 203, 204, 222, 235, 251, 252, 266, 274, 277, 280, 285, 297, 320, 328, 358, 359, 360, 367, 372, 378, 382, 384, 386, 388, 391, 392, 393, 396, 398, 407, 416, 418, 420, 421, 423, 449, 450, 453, 458, 460, 480, 490, 491, 492, 493, 497, 544, 570, 571, 591, 615, 616, 617, 637, 639, 641, 643, 652, 653, 654, 668, 731, 750, 806, 807, 809, 823, 825, 828, 829, 831, 877, 891, 994, 999, 1000, 1003, 1006, 1007, 1010, 1012, 1013, 1014, 1020, 1023, 1024, 1025, 1026, 1030, 1041, 1043, 1048, 1051, 1053, 1057], "dong": 1051, "donn": 1046, "donoho": [698, 702, 1007], "donor": [173, 381], "donovan": 1047, "dor": 1049, "dorin": [98, 456], "dormagen": 1051, "dot": [2, 55, 69, 79, 84, 89, 92, 97, 111, 112, 113, 115, 117, 118, 125, 126, 127, 131, 133, 138, 141, 175, 176, 182, 183, 191, 200, 203, 210, 212, 213, 250, 262, 263, 265, 266, 270, 280, 343, 345, 351, 371, 386, 390, 393, 398, 413, 421, 424, 542, 547, 549, 556, 599, 600, 623, 655, 656, 659, 661, 662, 663, 666, 669, 670, 671, 672, 690, 693, 696, 770, 772, 885, 925, 958, 1008, 1012, 1020, 1024, 1025, 1050], "dot_data": [925, 1026], "dot_product": 958, "dotproduct": [2, 178, 179, 184, 426, 620, 634], "dotson": 1046, "doubl": [70, 144, 288, 384, 398, 421, 547, 549, 550, 556, 853, 854, 864, 993, 1000, 1025, 1026, 1041, 1051, 1052], "doubt": [384, 385, 388, 1006, 1016, 1029], "doucet": 1055, "douetteau": 1034, "doug": [1042, 1043, 1053], "dougal": [1043, 1045, 1046, 1048, 1049, 1050, 1051], "dougla": 1049, "douillard": 1048, "doumouro": 1050, "douriez": [1051, 1052], "dowl": 1047, "down": [81, 82, 114, 138, 233, 234, 240, 249, 250, 252, 279, 294, 315, 317, 351, 367, 378, 387, 392, 398, 418, 421, 451, 458, 464, 599, 602, 603, 648, 658, 783, 787, 790, 882, 883, 888, 891, 892, 903, 915, 918, 925, 1006, 1049], "downarrow": 1012, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 377, 379, 381, 382, 388, 389, 392, 404, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 519, 1026, 1036, 1045, 1046, 1049, 1053, 1054, 1055, 1060], "download_20newsgroup": 1045, "download_if_miss": [496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 1048], "download_url": 47, "downsampl": 127, "downsid": 360, "downstream": [43, 113, 324, 360, 424, 540, 543, 546, 550, 551, 615, 886, 1020, 1051], "downweight": [418, 545], "dowon": [1049, 1050], "dozen": [397, 426], "do\u0161ilovi\u0107": [1058, 1059], "dp": [262, 267], "dpgmm": [262, 267, 1041, 1045, 1047], "dpi": [229, 927, 1054], "dpy_debug": 390, "dqd": 390, "dr": [0, 173, 381, 416, 1055], "draft": [384, 399], "drag": 404, "dragon": 1020, "drama": 424, "dramat": 373, "dramsch": 1051, "drastic": [175, 249, 284, 416, 420, 1013, 1023], "draw": [43, 46, 95, 184, 191, 214, 256, 278, 283, 347, 391, 419, 421, 422, 423, 564, 565, 566, 567, 572, 573, 574, 575, 620, 643, 710, 815, 832, 925, 927, 1009, 1029, 1054, 1055], "drawback": [146, 235, 1002, 1005], "drawcoastlin": [50, 310], "drawcountri": [50, 310], "drawn": [46, 87, 113, 141, 172, 175, 184, 190, 256, 283, 301, 358, 372, 380, 416, 422, 423, 426, 428, 477, 478, 479, 480, 481, 482, 483, 484, 524, 532, 542, 564, 565, 566, 567, 572, 573, 574, 575, 620, 636, 641, 650, 849, 905, 906, 923, 924, 1006, 1020, 1022, 1044], "drawstyl": [362, 709], "draxu": 1041, "drew": [1050, 1059], "drewhogg": 1056, "drewmjohnston": 1050, "drgfreeman": 1051, "driessen": [418, 477, 482, 1016], "drift": 1030, "drivag": [218, 236], "drive": [373, 421, 422, 558, 1024, 1034], "driven": [0, 194, 1034], "driver": [218, 236, 1056], "drop": [43, 44, 52, 105, 109, 118, 154, 180, 190, 191, 192, 194, 218, 222, 236, 255, 259, 270, 286, 323, 328, 331, 333, 359, 388, 392, 417, 421, 423, 472, 475, 576, 577, 578, 579, 704, 709, 711, 791, 798, 872, 886, 892, 1000, 1006, 1010, 1020, 1029, 1041, 1042, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "drop_binary_enc": 886, "drop_dupl": 288, "drop_enc": [886, 1020], "drop_first": 704, "drop_idx": 886, "drop_idx_": [886, 1052, 1056], "drop_intermedi": [709, 711, 791, 798, 1057], "drop_nul": [52, 180], "dropdown": [173, 384, 999], "dropped_result": 148, "dropper": 148, "dror": 1050, "dross": 543, "dro\u017cd\u017c": 1044, "drskd": 1055, "druck": 1055, "drucker": [139, 423, 563], "drug": 1006, "dry": 192, "dryden": 104, "ds_ana": 1054, "ds_cnt": [67, 319, 320], "dschult": 55, "dscullei": 457, "dseg": 104, "dsouza": [1052, 1053, 1054, 1055], "dsquareindia": 1047, "dss": 1034, "dt": [85, 127, 160, 180, 423, 424, 1026], "dtreeviz": 1029, "dtype": [43, 47, 49, 50, 55, 83, 84, 88, 100, 104, 105, 148, 150, 152, 153, 155, 176, 177, 178, 187, 191, 192, 220, 236, 259, 261, 270, 274, 280, 284, 290, 294, 304, 310, 323, 329, 330, 332, 337, 366, 378, 379, 384, 386, 396, 398, 412, 417, 420, 423, 424, 431, 432, 434, 437, 450, 451, 455, 456, 457, 458, 459, 461, 467, 472, 474, 475, 477, 480, 482, 496, 497, 498, 499, 505, 506, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 523, 531, 551, 557, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 594, 595, 597, 598, 600, 602, 603, 610, 611, 615, 636, 637, 638, 639, 641, 642, 649, 650, 653, 654, 655, 661, 665, 666, 669, 670, 671, 672, 673, 674, 680, 682, 684, 706, 708, 714, 723, 724, 740, 747, 750, 764, 795, 815, 834, 836, 837, 849, 853, 854, 856, 864, 878, 884, 886, 887, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 907, 915, 916, 917, 918, 919, 921, 922, 923, 924, 934, 936, 937, 939, 940, 964, 974, 980, 983, 984, 985, 986, 987, 990, 995, 996, 1000, 1011, 1020, 1023, 1025, 1042, 1044, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "dtype_exclud": [105, 474], "dtype_includ": [105, 148, 159, 255, 417, 474], "du": [0, 405, 406, 1041, 1042, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "dua": 1050, "dual": [104, 106, 326, 354, 358, 424, 425, 479, 480, 486, 620, 655, 656, 661, 662, 667, 668, 669, 670, 671, 672, 690, 693, 853, 854, 913, 914, 915, 918, 1025, 1043, 1052, 1055, 1057], "dual_coef_": [544, 652, 915, 916, 917, 918, 919, 1025, 1045], "dual_gap": [479, 480, 486, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693], "dual_gap_": [655, 656, 661, 662, 669, 670, 671, 672, 1054], "dualiti": [480, 1006], "dualtre": [853, 854], "duan": [1050, 1052], "duart": [1046, 1054, 1056, 1059], "dubai": 424, "duboi": [1047, 1049], "dubou": 1051, "dubourg": [0, 406, 1034, 1041, 1045], "duchesnai": [0, 406, 1041], "duck": [386, 398, 1051], "ducktyp": [1045, 1058], "duckworth": 1041, "ducout": 1055, "duda": [381, 1004], "due": [48, 52, 63, 64, 88, 90, 95, 109, 138, 141, 175, 191, 192, 198, 203, 209, 216, 218, 220, 235, 236, 249, 255, 262, 284, 285, 290, 296, 297, 322, 323, 351, 354, 358, 359, 360, 384, 390, 396, 398, 402, 414, 415, 416, 420, 421, 423, 426, 451, 454, 455, 467, 544, 548, 552, 553, 583, 680, 809, 812, 813, 817, 819, 823, 834, 835, 838, 841, 845, 846, 878, 882, 883, 893, 1000, 1006, 1007, 1009, 1010, 1011, 1013, 1017, 1024, 1025, 1030, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "dueck": [73, 448, 462], "dugnat": 1055, "duhaim": 1049, "dummi": [2, 138, 139, 218, 236, 252, 270, 279, 389, 411, 560, 561, 741, 886, 895, 932, 1011, 1020, 1026, 1036, 1042, 1044, 1045, 1046, 1048], "dummy_classifiers_misclassification_error": 138, "dummy_clf": [138, 560], "dummy_leaf_": 450, "dummy_regr": 561, "dummy_sev": 236, "dummybiclust": 431, "dummyclassifi": [2, 138, 270, 279, 561, 741, 1010, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1059], "dummyestim": [568, 569], "dummyregressor": [2, 218, 236, 560, 1010, 1011, 1042, 1044, 1045, 1048, 1049, 1051, 1054, 1055, 1059], "dumont": 1026, "dump": [2, 55, 410, 495, 853, 854], "dump_svmlight_fil": [2, 1041, 1042, 1046, 1056, 1058], "duong": [1058, 1059], "duplic": [372, 383, 384, 385, 398, 416, 427, 452, 456, 457, 524, 644, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 837, 884, 995, 1013, 1041, 1044, 1053, 1055, 1057, 1058, 1060], "dupont": 51, "dupr": [1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "dupr\u00e9": [0, 405, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "duqu": 1054, "durat": [43, 47, 218, 236, 255, 270, 299, 360, 372, 975, 976, 1006], "duration_sec": 49, "duration_test": 358, "duration_train": 358, "dure": [0, 43, 44, 51, 52, 85, 90, 93, 106, 109, 118, 129, 142, 148, 149, 154, 156, 170, 175, 180, 191, 192, 194, 207, 219, 226, 270, 274, 278, 290, 297, 328, 329, 351, 371, 373, 382, 384, 386, 389, 398, 399, 416, 417, 421, 423, 424, 426, 427, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 622, 623, 624, 626, 628, 629, 631, 632, 634, 636, 637, 638, 639, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 709, 798, 806, 807, 808, 809, 812, 813, 823, 831, 834, 835, 836, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1000, 1002, 1006, 1007, 1013, 1020, 1022, 1026, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060], "duron": 1055, "duti": 399, "dutt": 1057, "dutta": [1058, 1059], "duv2014": 426, "duvenaud": [426, 631, 632], "dwight": 1056, "dx": [51, 53, 708], "dx_c": 1017, "dy": [51, 708], "dye": 1054, "dylan": [1048, 1051], "dynam": [51, 52, 192, 564, 565, 566, 567, 572, 573, 574, 575, 588, 589, 685, 686, 687, 1026, 1034, 1047, 1053, 1058], "dzi": 1059, "dziki": 1044, "d\u00b2": 236, "d\u00f6pfert": 1049, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 88, 90, 92, 96, 104, 111, 113, 114, 115, 117, 118, 120, 127, 129, 138, 141, 148, 150, 151, 154, 155, 164, 169, 172, 173, 183, 190, 191, 192, 196, 199, 203, 207, 208, 218, 219, 220, 222, 236, 238, 239, 251, 252, 270, 272, 276, 277, 279, 281, 282, 283, 291, 292, 294, 296, 303, 310, 319, 322, 326, 328, 334, 354, 360, 364, 365, 366, 367, 371, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 396, 397, 398, 402, 407, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 445, 447, 449, 451, 452, 453, 455, 457, 458, 462, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 505, 507, 509, 510, 511, 512, 533, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 590, 591, 597, 598, 599, 600, 602, 603, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 626, 631, 632, 637, 639, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 696, 697, 699, 701, 703, 706, 708, 710, 713, 714, 717, 718, 725, 737, 738, 739, 740, 747, 750, 751, 764, 772, 776, 787, 794, 797, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 822, 823, 827, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 869, 870, 871, 873, 876, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 908, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 928, 951, 956, 957, 959, 963, 964, 966, 969, 984, 995, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1030, 1033, 1034, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "e0129126": 378, "e11": 379, "e2": [907, 1006], "e41a1c": [79, 97], "e501": [173, 358], "e_": 421, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 82, 84, 88, 90, 93, 95, 96, 104, 105, 107, 108, 109, 117, 118, 120, 121, 122, 124, 125, 129, 131, 132, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 161, 162, 169, 173, 177, 179, 184, 186, 187, 190, 191, 192, 194, 196, 198, 204, 206, 207, 212, 216, 218, 219, 220, 222, 223, 226, 233, 236, 239, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 259, 261, 264, 266, 269, 270, 271, 272, 274, 276, 277, 279, 281, 282, 285, 286, 290, 294, 296, 297, 300, 302, 306, 308, 310, 312, 313, 315, 317, 318, 319, 320, 322, 323, 324, 326, 328, 329, 330, 332, 333, 334, 336, 337, 338, 341, 347, 351, 354, 359, 360, 362, 363, 366, 367, 371, 372, 373, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 392, 393, 396, 397, 398, 407, 410, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 433, 434, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 528, 531, 532, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 716, 717, 719, 722, 728, 734, 737, 738, 739, 747, 748, 754, 755, 757, 759, 760, 762, 763, 767, 768, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 785, 787, 788, 789, 790, 792, 793, 794, 796, 797, 799, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 930, 945, 951, 952, 957, 959, 960, 965, 966, 985, 986, 987, 990, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1034, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "eager": 270, "eargl": 1055, "earl": 1044, "earli": [43, 46, 54, 79, 97, 137, 138, 144, 147, 188, 197, 205, 321, 327, 398, 423, 449, 453, 457, 471, 498, 505, 545, 546, 547, 548, 555, 562, 563, 568, 569, 570, 571, 636, 654, 665, 675, 676, 677, 685, 687, 701, 759, 839, 870, 871, 983, 1007, 1013, 1020, 1028, 1030, 1031, 1034, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1058], "earlier": [144, 192, 222, 378, 384, 419, 844, 847, 1020, 1039, 1042, 1054, 1056], "earliest": [378, 1007], "early_exager": 1048, "early_exagger": 701, "early_stop": [144, 154, 192, 226, 312, 329, 358, 398, 423, 570, 571, 675, 676, 677, 685, 686, 687, 870, 871, 1024, 1049, 1052, 1055, 1056], "earn": [190, 191, 399], "earth": [240, 359, 773, 1029], "eas": [106, 194, 266, 322, 384, 387, 390, 1006, 1024, 1029, 1030, 1034, 1052, 1053, 1055], "easi": [121, 192, 226, 236, 264, 274, 276, 347, 358, 367, 379, 384, 390, 392, 396, 397, 410, 416, 423, 509, 513, 519, 880, 999, 1005, 1009, 1017, 1020, 1029, 1030, 1034, 1051, 1056, 1057], "easier": [79, 97, 101, 115, 148, 198, 206, 247, 255, 273, 274, 317, 347, 358, 367, 379, 384, 386, 389, 392, 396, 402, 418, 420, 476, 524, 911, 951, 1005, 1010, 1017, 1026, 1030, 1034, 1050, 1055], "easiest": [386, 392, 417, 1007], "easili": [43, 48, 67, 120, 170, 194, 221, 234, 250, 252, 256, 259, 276, 278, 285, 302, 319, 384, 386, 398, 399, 410, 417, 423, 424, 426, 457, 1004, 1006, 1007, 1020, 1024, 1025, 1026, 1033, 1047], "easlii": 246, "ec": [317, 539], "ecat": 379, "echo": [382, 388], "eckert": 1046, "eckhart": 503, "eclf": [160, 161, 423], "eclf1": 578, "eclf2": 578, "eclf3": 578, "ecml": 0, "ecoc": 294, "ecolog": [50, 310, 379, 507], "econom": [190, 191, 276], "econometr": 1006, "econometrica": 1006, "ecosystem": [384, 392, 1000, 1028, 1034], "ecuador": [50, 310, 379, 507], "ed": [142, 153, 416, 423, 529, 568, 569, 1022, 1041, 1048], "eddi": [1044, 1058, 1059], "eden": 1056, "edern": [1056, 1057], "edg": [51, 63, 81, 101, 127, 148, 171, 241, 283, 392, 398, 413, 416, 418, 461, 570, 571, 594, 595, 597, 598, 600, 806, 850, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 878, 926, 1020, 1023, 1034, 1047, 1049, 1052, 1055], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 80, 91, 95, 102, 121, 122, 130, 140, 147, 155, 157, 158, 160, 161, 166, 168, 176, 177, 179, 183, 192, 202, 210, 220, 227, 230, 231, 232, 249, 250, 251, 253, 255, 261, 264, 276, 279, 291, 300, 303, 304, 305, 308, 312, 319, 320, 322, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 363, 364, 365, 640], "edit": [77, 381, 382, 383, 384, 388, 392, 396, 402, 539, 543, 843, 1004, 1006, 1011, 1017], "editor": [384, 392, 396], "edm": 1006, "edoardo": [1056, 1058, 1059, 1060], "edouard": [0, 406, 1041], "edson": [1010, 1046], "edu": [45, 47, 55, 173, 196, 294, 358, 378, 379, 381, 416, 457, 495, 509, 511, 517, 518, 519, 543, 650, 653, 658, 667, 675, 676, 685, 688, 691, 692, 848, 850, 852, 862, 869, 906, 908, 921, 922, 1006, 1008], "eduardo": [1044, 1046, 1054, 1055], "educ": [190, 191, 333, 384, 505, 725, 1011], "edvardlindelof": 1051, "edward": [180, 623, 628, 631, 1044, 1049, 1050, 1051, 1052, 1056, 1059], "edwinensa": 1047, "edwinwenink": 1054, "eec": [457, 650], "ef": 1056, "eff": 1026, "effect": [43, 45, 64, 72, 74, 75, 80, 81, 88, 92, 97, 100, 103, 107, 118, 127, 129, 138, 149, 151, 153, 156, 172, 175, 176, 180, 182, 188, 189, 191, 192, 194, 203, 213, 218, 219, 220, 222, 223, 224, 235, 237, 240, 242, 248, 255, 259, 262, 266, 270, 272, 276, 277, 278, 281, 284, 285, 290, 297, 309, 315, 316, 318, 321, 327, 335, 347, 351, 352, 354, 355, 356, 358, 359, 360, 367, 372, 384, 386, 389, 396, 398, 414, 416, 417, 421, 422, 423, 424, 426, 427, 445, 450, 451, 452, 454, 455, 457, 458, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 498, 505, 509, 523, 533, 534, 542, 543, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 615, 618, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 699, 700, 701, 710, 712, 762, 794, 806, 808, 810, 811, 814, 816, 818, 820, 827, 828, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 863, 864, 870, 871, 873, 876, 877, 878, 879, 880, 882, 883, 885, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 903, 904, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 939, 940, 957, 975, 983, 999, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1017, 1018, 1020, 1023, 1025, 1026, 1031, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "effective_learning_r": [870, 871], "effective_metric_": [855, 856, 857, 859, 861, 863, 864, 865, 1013], "effective_metric_params_": [855, 856, 857, 859, 861, 863, 864, 865], "effective_rank": [530, 533], "efficaci": 207, "effici": [37, 43, 44, 51, 53, 77, 81, 88, 90, 124, 139, 144, 149, 157, 196, 207, 211, 220, 226, 302, 334, 358, 371, 376, 378, 384, 386, 387, 388, 389, 390, 396, 398, 410, 413, 416, 421, 422, 423, 426, 428, 450, 451, 454, 455, 457, 458, 460, 462, 465, 467, 469, 470, 505, 542, 543, 544, 547, 549, 550, 553, 572, 575, 583, 590, 591, 597, 598, 600, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 647, 649, 664, 667, 668, 673, 675, 676, 677, 682, 684, 685, 686, 687, 688, 694, 695, 697, 735, 765, 772, 788, 789, 806, 807, 809, 823, 842, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 878, 890, 902, 906, 913, 922, 924, 957, 999, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "efficiencywarn": [2, 868, 1056], "effort": [328, 384, 390, 1029, 1034, 1052, 1054], "efron": [173, 381, 691, 692, 1006], "eg": 993, "egashira": 1056, "egehan": 1059, "egg": 1049, "egger": 1059, "egin": 416, "egli": [1048, 1058], "egor": 1053, "ehrenheim": [1048, 1049], "eib": [844, 1011], "eickenberg": [1041, 1043, 1044, 1045, 1046], "eig": 1048, "eig_tol": 1042, "eig_val": 261, "eig_vec": 261, "eigen": [460, 558, 682, 700, 704, 1004, 1047, 1050], "eigen_solv": [51, 79, 81, 101, 238, 239, 421, 460, 470, 544, 697, 698, 700, 702, 704, 1007, 1042, 1051, 1054, 1055, 1056], "eigen_tol": [81, 460, 470, 700, 704, 1042, 1055, 1056], "eigendecompos": 421, "eigendecomposit": [470, 682, 700, 704, 879, 1002], "eigenfac": [42, 54, 188, 251, 254, 379, 421, 503, 550, 706, 722, 823, 839, 893, 918, 1027, 1031, 1041], "eigenface_titl": 45, "eigenmap": [238, 698, 700, 702, 704, 1035, 1036, 1042], "eigensolv": [421, 460, 470, 544, 553, 704, 1007], "eigenvalu": [120, 266, 333, 413, 416, 418, 460, 470, 477, 478, 479, 480, 481, 482, 483, 484, 544, 550, 558, 682, 697, 698, 700, 702, 704, 879, 1002, 1007, 1020, 1043, 1047, 1050, 1051, 1052, 1053], "eigenvalues_": [544, 1054], "eigenvector": [2, 42, 81, 118, 120, 188, 261, 416, 460, 470, 543, 544, 550, 559, 697, 698, 700, 704, 1007, 1031, 1041, 1045, 1055], "eigenvector_centr": 55, "eigenvectors_": [544, 1054], "eigh": [70, 261, 262, 263, 266, 267, 421, 428, 542, 544, 1056, 1059], "eighteenth": 416, "eighth": [572, 1016], "eigsh": [421, 544, 1047, 1048], "eiler": 1020, "einsum": 307, "eitan": 1058, "either": [43, 49, 64, 105, 144, 147, 148, 191, 205, 208, 246, 255, 270, 271, 280, 285, 290, 302, 354, 358, 366, 371, 372, 376, 379, 382, 384, 385, 386, 398, 407, 410, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 428, 450, 455, 460, 495, 505, 521, 533, 542, 543, 545, 553, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 591, 592, 593, 597, 598, 599, 600, 602, 603, 606, 611, 616, 617, 619, 620, 631, 636, 639, 641, 642, 659, 663, 665, 673, 685, 687, 691, 692, 699, 706, 707, 711, 715, 716, 721, 729, 733, 735, 736, 737, 738, 739, 744, 747, 748, 749, 751, 761, 765, 778, 783, 787, 791, 792, 793, 794, 796, 797, 798, 803, 809, 812, 813, 815, 823, 832, 833, 834, 835, 836, 837, 838, 840, 843, 873, 903, 904, 910, 913, 914, 921, 922, 923, 924, 928, 966, 970, 998, 999, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1024, 1025, 1041, 1044, 1050, 1051, 1052, 1055, 1059], "ekaterina": [1047, 1048, 1049, 1050, 1052, 1057], "ekman": [1043, 1047], "el": [537, 1054, 1056, 1057], "elabonga": [1057, 1058], "elabor": 1011, "elad": [673, 694, 695], "elaps": [50, 82, 102, 144, 145, 146, 371, 472, 475, 578, 579, 872, 873, 874, 875], "elapsed_tim": [46, 74, 102, 145, 146, 159, 235], "elast": [2, 25, 188, 197, 203, 204, 207, 209, 212, 229, 289, 479, 480, 486, 510, 533, 655, 656, 661, 666, 667, 668, 669, 670, 671, 672, 677, 685, 687, 690, 691, 693, 999, 1010, 1024, 1031, 1032, 1036, 1041, 1046, 1050, 1051], "elastic_net": 229, "elastic_net_color": 229, "elastic_net_contour": 229, "elasticnet": [2, 46, 49, 200, 209, 284, 289, 371, 390, 396, 421, 656, 661, 666, 667, 668, 669, 670, 671, 672, 677, 685, 687, 690, 1006, 1011, 1024, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1059], "elasticnetcv": [2, 203, 398, 407, 655, 661, 669, 670, 671, 672, 690, 1006, 1041, 1044, 1052, 1054, 1055, 1058, 1059, 1060], "elasticnetifittedelasticnet": 200, "elbo": 421, "eldar": [418, 429, 483], "eleanor": 1056, "elec2": 154, "electr": [51, 154, 381, 416], "electron": [57, 173, 379, 381, 547, 549, 556, 636], "element": [2, 89, 124, 141, 142, 153, 247, 269, 275, 283, 285, 327, 359, 362, 366, 381, 383, 384, 386, 393, 399, 413, 416, 420, 421, 423, 424, 427, 452, 454, 460, 472, 495, 517, 521, 523, 529, 531, 535, 536, 540, 546, 547, 549, 559, 566, 567, 568, 569, 573, 574, 575, 576, 577, 594, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 626, 641, 667, 668, 675, 676, 677, 685, 686, 687, 716, 726, 736, 743, 745, 755, 772, 778, 787, 791, 797, 798, 843, 853, 854, 855, 856, 857, 859, 861, 863, 864, 868, 870, 871, 876, 892, 893, 896, 900, 913, 918, 921, 922, 923, 924, 959, 960, 961, 980, 982, 983, 995, 1004, 1006, 1010, 1011, 1014, 1017, 1020, 1021, 1022, 1026, 1034, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1057], "elementari": [907, 1022], "elementwis": [421, 547, 549, 556], "elena": 1048, "eleni": 1054, "eleph": 591, "elev": [80, 102, 120, 130, 192, 215, 238, 242, 499], "eleven": 1030, "elfner": 1055, "elia": 1047, "eliaschiavon": 1056, "eliasi": [1056, 1057, 1058], "elicit": 1010, "elif": [46, 47, 199, 220, 253, 263, 302, 889], "elimin": [2, 18, 86, 164, 167, 170, 173, 188, 271, 274, 275, 281, 290, 301, 416, 420, 456, 511, 524, 602, 603, 606, 611, 667, 812, 813, 828, 873, 883, 995, 1010, 1031, 1032, 1034, 1036, 1041], "elisabeth": [331, 1058], "elizabeth": [1048, 1050, 1053], "elkan": [64, 270, 327, 414, 445, 451, 455, 467, 685, 1047, 1051, 1052, 1054, 1055], "ell": [70, 261, 262, 263, 267, 413], "ell_": 1006, "ell_0": [1006, 1010], "ell_1": [421, 1006], "ell_2": 1006, "ella": 1022, "ellen": 1048, "elli": [1047, 1050], "elliot": [1058, 1059], "elliott": 1048, "ellips": [70, 245, 261, 262, 263, 266, 267, 1016], "ellipsoid": [48, 65, 69, 113, 114, 115, 188, 260, 261, 263, 264, 265, 266, 267, 558, 559, 640, 806, 807, 1004, 1009, 1031], "ellipt": [92, 1006], "ellipticenvelop": [2, 48, 245, 478, 481, 482, 483, 484, 572, 1016, 1041, 1044, 1048, 1049, 1054], "eln": 1052, "elong": 416, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 84, 90, 91, 97, 115, 128, 141, 147, 148, 151, 152, 183, 191, 192, 194, 207, 210, 233, 236, 239, 245, 249, 251, 252, 253, 254, 255, 271, 276, 277, 280, 287, 297, 302, 310, 312, 313, 319, 326, 351, 358, 359, 366, 384, 388, 390, 423, 424, 426, 428, 436, 445, 457, 517, 529, 542, 578, 627, 634, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 681, 682, 683, 685, 688, 690, 691, 692, 693, 712, 718, 797, 803, 805, 812, 813, 839, 877, 889, 892, 900, 913, 914, 928, 971, 973, 975, 996, 998, 1026], "elsewher": [398, 470, 471, 479, 480, 486], "eltermann": 1044, "elucid": 1002, "elvezio": [658, 1006], "elvi": [1046, 1047, 1048], "em": [262, 263, 267, 451, 455, 467, 545, 806, 807, 1009, 1055], "emad": 1059, "email": [0, 358, 384, 396, 399, 424, 848, 1012, 1034], "emami": 1055, "emanuel": 1042, "emb": [175, 239, 249, 306, 377, 378, 470, 704, 1007], "embark": [105, 193, 259, 326, 330, 331], "embed": [2, 26, 37, 71, 74, 79, 81, 90, 97, 143, 175, 188, 237, 240, 242, 244, 297, 306, 336, 337, 398, 416, 449, 460, 470, 497, 511, 553, 558, 575, 591, 648, 697, 698, 699, 700, 701, 702, 703, 704, 705, 862, 874, 883, 905, 906, 907, 1002, 1013, 1016, 1022, 1027, 1029, 1031, 1035, 1036, 1041, 1042, 1052, 1053, 1055], "embedding_": [241, 398, 697, 698, 699, 700, 701], "emerg": [416, 1034], "emeritu": 399, "emiko": 1055, "emil": 1055, "emili": [1052, 1053, 1060], "emilyxinyi": 1059, "emipr": 806, "emir": [1056, 1057], "emit": [1052, 1059], "emlearn": 1029, "emma": 1058, "emmanouil": 1055, "emmanuel": [1041, 1048, 1049, 1050, 1058], "emoji": 404, "emp_cov": [111, 113, 115, 486, 489], "emp_cov_contour": 113, "emp_mah": 113, "emphas": [191, 356, 390, 421, 1010], "emphasi": [356, 415, 419, 915, 916, 917, 918, 919, 1017, 1029], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 99, 110, 112, 113, 115, 154, 188, 199, 236, 282, 317, 414, 420, 423, 426, 455, 457, 468, 477, 478, 479, 482, 485, 486, 541, 543, 548, 550, 552, 558, 560, 574, 599, 612, 648, 658, 676, 680, 687, 688, 725, 730, 732, 733, 838, 848, 849, 850, 852, 871, 894, 942, 983, 1002, 1004, 1010, 1012, 1014, 1020, 1022, 1024, 1031, 1035, 1036], "empirical_covari": [2, 111, 418, 486, 487, 489, 1057], "empiricalcovari": [2, 111, 113, 114, 418, 477, 481, 482, 483, 484, 1016], "emploi": [0, 51, 175, 251, 398, 418, 424, 458, 486, 591, 598, 1034, 1047], "employ": [191, 270], "empti": [96, 104, 133, 230, 339, 371, 379, 388, 416, 428, 436, 491, 542, 570, 571, 640, 725, 820, 878, 918, 920, 928, 934, 939, 940, 947, 968, 969, 1000, 1025, 1043, 1045, 1049, 1050, 1052, 1053, 1055, 1056, 1057], "emptyset": 1010, "emul": [191, 392], "en": [55, 61, 392, 540, 546, 604, 645, 673, 677, 680, 694, 695, 704, 714, 855, 856, 861, 862, 863, 864, 891, 907, 921, 922, 1006, 1010, 1025, 1026], "enabl": [2, 16, 52, 66, 85, 106, 154, 192, 226, 240, 252, 319, 327, 329, 330, 332, 333, 334, 355, 382, 384, 389, 392, 396, 398, 402, 407, 412, 416, 417, 421, 423, 424, 457, 472, 476, 543, 544, 550, 568, 569, 570, 571, 572, 588, 589, 599, 600, 611, 619, 806, 807, 809, 812, 834, 835, 836, 837, 838, 840, 873, 874, 886, 887, 910, 911, 913, 914, 915, 916, 917, 918, 919, 928, 969, 976, 1000, 1002, 1007, 1009, 1010, 1013, 1020, 1021, 1024, 1025, 1030, 1034, 1041, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "enable_cython_pairwise_dist": [476, 911], "enable_halving_search_cv": [2, 151, 287, 288, 328, 388, 812, 813, 999], "enable_hist_gradient_boost": [388, 1050], "enable_iterative_imput": [2, 186, 187, 388, 636, 1000, 1050], "enable_metadata_rout": [252, 270, 333, 407, 445, 451, 452, 455, 457, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 602, 603, 606, 611, 619, 620, 636, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 809, 810, 811, 812, 813, 816, 818, 823, 827, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 872, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 1057], "enable_my_experimental_featur": 388, "enblom": 1059, "enc": [318, 320, 330, 332, 886, 887, 1020], "enc_auto": 894, "enc_high_smooth": 894, "enc_low_smooth": 894, "encapsul": [391, 417, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924], "enclos": 999, "encod": [2, 43, 47, 50, 83, 90, 105, 124, 143, 154, 159, 188, 191, 192, 193, 217, 218, 255, 270, 285, 290, 316, 318, 319, 320, 328, 330, 331, 347, 358, 360, 376, 378, 380, 389, 396, 398, 417, 420, 421, 423, 424, 426, 472, 495, 505, 512, 535, 540, 546, 548, 549, 551, 553, 554, 555, 557, 560, 570, 571, 575, 576, 578, 590, 597, 598, 600, 639, 657, 667, 668, 678, 681, 689, 744, 811, 816, 818, 836, 839, 873, 874, 876, 878, 880, 881, 884, 886, 887, 894, 897, 911, 930, 999, 1000, 1006, 1007, 1010, 1012, 1013, 1015, 1024, 1029, 1030, 1031, 1036, 1042, 1043, 1049, 1053, 1055, 1056, 1057, 1058, 1059], "encoded_missing_valu": [159, 193, 887, 1020, 1055, 1056], "encodings_": [332, 894, 1020], "encompass": [398, 458, 464, 564, 565, 1007], "encount": [151, 319, 372, 382, 402, 410, 416, 423, 424, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 570, 571, 590, 848, 849, 850, 852, 886, 984, 1020, 1024, 1029, 1033, 1034, 1049, 1052], "encourag": [191, 206, 222, 312, 347, 383, 384, 396, 1025, 1029, 1059], "encrypt": 1029, "encyclopedia": 1010, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 382, 384, 386, 396, 398, 399, 402, 407, 413, 416, 417, 419, 423, 458, 464, 476, 496, 497, 517, 518, 546, 555, 566, 567, 568, 569, 573, 574, 575, 654, 655, 656, 659, 660, 661, 662, 663, 664, 669, 670, 671, 672, 690, 691, 692, 693, 809, 812, 813, 823, 830, 834, 871, 873, 911, 921, 922, 923, 924, 961, 963, 993, 999, 1002, 1006, 1007, 1009, 1010, 1020, 1022, 1024, 1029, 1034, 1046, 1048, 1051, 1054, 1055], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 241], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1053, "endo": 1054, "endpoint": [53, 318, 350, 644], "enemi": 384, "energi": [51, 154, 392, 869, 1015], "enet": [203, 289], "enet_path": [2, 206, 398, 655, 656, 661, 669, 670, 671, 1043, 1045, 1054], "enet_tol": [479, 480, 486, 1046], "enforc": [43, 51, 70, 88, 124, 154, 180, 212, 306, 371, 384, 418, 421, 423, 433, 439, 517, 536, 540, 546, 548, 551, 552, 554, 555, 557, 566, 567, 570, 571, 573, 574, 877, 892, 921, 922, 923, 924, 939, 940, 1000, 1007, 1043, 1049, 1051, 1053, 1057], "enforce_estimator_tags_i": 1051, "eng": 1049, "engag": [390, 399], "engemann": [1043, 1044, 1048], "engin": [42, 75, 143, 148, 154, 180, 188, 191, 192, 219, 371, 378, 381, 416, 422, 424, 472, 505, 571, 648, 682, 710, 830, 836, 871, 872, 874, 877, 878, 883, 886, 888, 892, 1000, 1002, 1010, 1020, 1031, 1047], "english": [54, 57, 104, 358, 359, 360, 389, 424, 597, 598, 600, 1029, 1030, 1054], "enh": 388, "enhanc": [124, 222, 383, 384, 388, 396, 398, 416, 1010, 1039, 1040, 1041, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "enjoi": [77, 270], "enough": [2, 43, 52, 64, 72, 79, 97, 144, 147, 154, 175, 186, 192, 193, 207, 218, 250, 253, 255, 270, 321, 358, 360, 367, 382, 384, 388, 399, 414, 416, 418, 420, 423, 576, 577, 598, 809, 812, 813, 815, 823, 837, 957, 999, 1004, 1007, 1009, 1016, 1020, 1025, 1029, 1034, 1047, 1057, 1058], "enrich": 351, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 91, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 186, 187, 192, 193, 194, 218, 239, 245, 254, 255, 257, 258, 270, 273, 288, 294, 296, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 358, 363, 364, 367, 371, 388, 389, 397, 398, 407, 410, 414, 416, 420, 425, 445, 513, 524, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 641, 642, 644, 667, 711, 812, 813, 831, 839, 843, 844, 874, 877, 886, 917, 921, 923, 924, 949, 999, 1010, 1011, 1016, 1017, 1026, 1029, 1030, 1031, 1032, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "ensemble_clf": 142, "ensemble_jaccard_scor": 296, "ensembleregressorsensembl": 404, "ensur": [0, 52, 58, 76, 92, 115, 122, 138, 144, 145, 154, 194, 218, 239, 270, 271, 279, 314, 366, 367, 371, 372, 384, 386, 388, 389, 390, 399, 402, 407, 412, 414, 416, 417, 420, 428, 477, 542, 543, 550, 620, 636, 705, 714, 791, 797, 798, 834, 906, 939, 940, 951, 952, 957, 964, 975, 1006, 1007, 1010, 1020, 1026, 1043, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "ensure_2d": [939, 940], "ensure_all_finit": [787, 937, 939, 940, 1060], "ensure_min_featur": [939, 940], "ensure_min_sampl": [939, 940], "ensure_non_neg": [940, 1060], "entail": [270, 397, 891, 893, 1024], "enter": [385, 388, 416, 450, 1017], "entertain": 1006, "entic": 191, "entir": [68, 186, 218, 226, 270, 315, 317, 327, 351, 366, 367, 378, 385, 398, 410, 416, 420, 422, 424, 480, 501, 543, 597, 598, 599, 600, 656, 660, 662, 664, 667, 668, 670, 672, 674, 675, 677, 685, 691, 692, 743, 805, 831, 841, 842, 845, 870, 872, 873, 886, 898, 899, 901, 902, 903, 904, 932, 978, 1000, 1010, 1020, 1024, 1026, 1050, 1051], "entireti": 398, "entiti": [399, 735, 765], "entitl": [290, 300, 415, 455, 620, 855, 1002], "entri": [0, 105, 109, 154, 159, 187, 191, 192, 270, 272, 326, 359, 367, 388, 390, 392, 397, 398, 413, 414, 416, 421, 423, 426, 471, 472, 475, 480, 505, 540, 541, 546, 554, 555, 570, 571, 597, 600, 603, 620, 629, 641, 647, 649, 656, 660, 662, 664, 665, 668, 670, 672, 673, 674, 682, 684, 691, 692, 694, 695, 708, 713, 716, 718, 721, 724, 725, 727, 735, 738, 739, 740, 743, 744, 747, 752, 765, 767, 768, 792, 794, 797, 798, 801, 802, 822, 837, 853, 854, 861, 862, 863, 864, 865, 884, 890, 902, 995, 999, 1000, 1006, 1010, 1013, 1020, 1025, 1030, 1048, 1051, 1052, 1054, 1058], "entropi": [2, 50, 64, 257, 288, 310, 328, 336, 337, 367, 379, 412, 416, 423, 428, 507, 542, 566, 573, 616, 617, 667, 726, 745, 746, 750, 804, 921, 923, 1006, 1007, 1010, 1014, 1026, 1043, 1045, 1049, 1050, 1055, 1057, 1058, 1060], "entrypoint_to_bug_reproduc": 385, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 85, 90, 94, 95, 96, 97, 100, 104, 112, 114, 115, 118, 125, 127, 133, 141, 144, 149, 150, 152, 153, 154, 164, 177, 179, 184, 194, 199, 201, 209, 218, 239, 240, 243, 245, 250, 254, 255, 261, 262, 263, 264, 266, 267, 270, 271, 278, 279, 285, 286, 302, 306, 307, 309, 315, 319, 320, 336, 337, 339, 341, 345, 347, 353, 354, 358, 363, 379, 568, 569, 573, 574, 790, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830], "env": [151, 319, 382, 392, 402, 403], "environ": [0, 3, 51, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 371, 379, 381, 382, 384, 386, 387, 390, 396, 402, 403, 412, 417, 508, 1030, 1034, 1036, 1048, 1049, 1058], "environment": [50, 203, 236], "environmenterror": 1057, "eom": 454, "eoss": 0, "ep": [67, 79, 81, 84, 90, 100, 202, 206, 241, 249, 396, 416, 427, 452, 458, 463, 479, 480, 486, 640, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 690, 691, 692, 693, 699, 703, 723, 750, 865, 905, 906, 907, 1022, 1056, 1057], "epanechnikov": [302, 422, 853, 854, 858], "ephemer": 392, "ephrem": 1056, "epimorph": 1058, "epistem": 52, "epoch": [233, 398, 545, 675, 676, 677, 685, 686, 687, 870, 871, 1024, 1048, 1049, 1054], "epp": [416, 713], "eps_": [669, 671], "eps_rang": 249, "epsilon": [2, 90, 100, 201, 241, 251, 332, 353, 421, 454, 463, 652, 658, 676, 685, 687, 755, 870, 871, 914, 916, 919, 1003, 1006, 1010, 1014, 1024, 1025, 1041], "epsilon_": 851, "epsilon_i": 1010, "epsilon_insensit": [676, 685, 687, 914, 1006, 1024], "epsilon_valu": 201, "eq": [270, 429, 483, 730, 732, 733], "equal": [43, 50, 51, 63, 70, 72, 74, 88, 95, 113, 118, 126, 138, 151, 178, 191, 219, 220, 229, 235, 256, 263, 266, 269, 274, 276, 285, 307, 319, 323, 347, 349, 355, 359, 379, 380, 384, 386, 398, 413, 414, 416, 420, 421, 423, 424, 429, 445, 448, 449, 450, 451, 453, 455, 457, 462, 467, 468, 471, 477, 482, 487, 488, 512, 521, 524, 528, 541, 542, 543, 548, 550, 552, 553, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 597, 602, 603, 606, 608, 609, 616, 617, 634, 637, 638, 641, 642, 643, 644, 646, 650, 651, 658, 667, 668, 680, 708, 727, 729, 738, 792, 796, 797, 803, 805, 809, 810, 812, 813, 822, 823, 827, 834, 841, 845, 846, 853, 854, 855, 856, 861, 862, 863, 864, 865, 870, 871, 876, 877, 878, 885, 888, 891, 892, 893, 894, 896, 903, 910, 913, 914, 920, 921, 922, 923, 924, 945, 957, 984, 990, 1004, 1006, 1010, 1011, 1013, 1014, 1016, 1020, 1024, 1025, 1026, 1042, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "equat": [2, 64, 354, 384, 416, 421, 423, 566, 567, 568, 569, 573, 574, 575, 599, 636, 667, 668, 691, 692, 696, 772, 893, 921, 922, 923, 924, 1000, 1007, 1010, 1015, 1049], "equi": 1009, "equiangular": 1006, "equidist": [148, 701], "equip": 1034, "equiv": [1002, 1025], "equival": [43, 54, 70, 90, 92, 148, 155, 172, 175, 180, 191, 203, 236, 266, 285, 297, 322, 351, 360, 367, 371, 390, 393, 397, 398, 410, 416, 417, 418, 419, 420, 421, 423, 425, 426, 449, 451, 452, 453, 454, 455, 457, 458, 465, 472, 477, 482, 518, 543, 550, 567, 570, 571, 572, 573, 574, 597, 600, 622, 625, 628, 630, 633, 655, 656, 657, 661, 663, 667, 668, 675, 676, 677, 678, 681, 685, 686, 689, 692, 696, 697, 702, 717, 718, 732, 743, 751, 756, 757, 758, 770, 779, 788, 789, 806, 807, 812, 813, 817, 819, 844, 847, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 870, 876, 882, 883, 885, 888, 889, 890, 891, 893, 901, 903, 904, 943, 955, 995, 999, 1004, 1006, 1007, 1008, 1010, 1016, 1020, 1024, 1025, 1026, 1049, 1050, 1051, 1052, 1054, 1055, 1058], "er": 579, "era": 1030, "eras": [568, 569, 655, 661, 667, 669, 671, 675, 676, 677, 685, 686, 687, 870, 871], "ereg": [162, 423], "eren": [0, 1043, 1044], "eric": [1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059], "ericellwang": [1054, 1055], "erich": [458, 1045, 1046, 1049, 1050, 1052, 1053, 1054, 1055, 1059], "erick": 1046, "erik": [379, 1034, 1044], "eriksson": 1048, "erin": [294, 1053], "erl": 294, "erlbaum": 270, "erling": 1046, "ermolaevpa": [1055, 1056], "ernst": [423, 566, 567, 574, 575, 923, 924], "err": [55, 117, 128, 138], "err_cov_emp_ful": 114, "err_cov_emp_pur": 114, "err_cov_mcd": 114, "err_loc_emp_ful": 114, "err_loc_emp_pur": 114, "err_loc_mcd": 114, "errno": 402, "erron": [113, 114, 421, 1006, 1042, 1049, 1053], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 89, 109, 111, 112, 114, 128, 133, 137, 141, 144, 145, 148, 150, 152, 154, 173, 175, 186, 188, 191, 203, 207, 214, 217, 218, 220, 224, 225, 232, 236, 248, 251, 252, 258, 267, 268, 270, 272, 276, 277, 281, 285, 286, 291, 294, 303, 304, 330, 333, 346, 354, 358, 359, 372, 381, 382, 384, 386, 387, 388, 389, 393, 396, 398, 407, 410, 414, 416, 417, 418, 420, 421, 423, 424, 425, 445, 451, 452, 455, 457, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 512, 524, 533, 540, 542, 543, 546, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 584, 590, 591, 597, 599, 600, 601, 604, 605, 607, 608, 609, 615, 619, 620, 638, 641, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 697, 698, 699, 701, 702, 705, 707, 710, 711, 718, 720, 721, 729, 730, 732, 736, 749, 752, 753, 754, 755, 756, 757, 759, 760, 762, 773, 787, 791, 797, 798, 799, 800, 808, 809, 810, 811, 812, 813, 815, 816, 818, 823, 827, 831, 832, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 863, 864, 865, 868, 870, 871, 872, 873, 874, 876, 878, 879, 880, 885, 886, 887, 892, 893, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 937, 938, 939, 940, 943, 972, 993, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1014, 1018, 1020, 1024, 1025, 1026, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "error_": [540, 552], "error_i": [144, 277], "error_norm": [112, 114, 477, 478, 479, 480, 481, 482, 483, 484], "error_on_new": 638, "error_r": 142, "error_scor": [809, 812, 813, 815, 823, 832, 835, 836, 837, 840, 999, 1045, 1049, 1053, 1056], "error_x": [144, 277], "errorbar": [72, 96, 107, 112, 114, 172, 181, 182, 299, 339, 350, 815, 832], "errorbar_": [815, 832], "errorbar_kw": [815, 832], "errorbarcontain": [815, 832], "errors_coef": 222, "errors_lines_": 710, "erwan": 1058, "erwin": 1044, "escal": 399, "escalant": 1010, "escalera": 1010, "escap": [1054, 1056], "eschibli": 1053, "eschlbeck": 1055, "esdi": 57, "esp": [416, 1041], "especi": [43, 47, 52, 90, 91, 148, 151, 154, 191, 218, 252, 323, 331, 359, 367, 372, 378, 384, 392, 396, 398, 414, 416, 424, 451, 457, 510, 547, 566, 567, 568, 569, 573, 574, 575, 655, 656, 657, 659, 661, 662, 663, 667, 668, 669, 670, 671, 672, 678, 689, 704, 714, 755, 848, 849, 850, 851, 852, 921, 922, 923, 924, 1006, 1012, 1013, 1020, 1034, 1044, 1049, 1053, 1054, 1055], "espinoza": [1042, 1043], "essenc": [616, 617, 752, 1007, 1010], "essenti": [0, 276, 331, 382, 386, 416, 420, 421, 518, 1010, 1013, 1030, 1034, 1049], "est": [80, 159, 191, 210, 233, 252, 254, 270, 290, 319, 328, 367, 410, 423, 571, 744, 878, 962, 999, 1010, 1020, 1024, 1052, 1053], "est1": [398, 641], "est2": [398, 641], "est_freq": 236, "est_idx": 319, "est_sev": 236, "establish": [392, 396, 399, 1000], "estefania": 1055, "ester": [416, 427, 452], "estev": [1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 80, 84, 89, 90, 91, 92, 93, 96, 98, 105, 106, 107, 108, 117, 118, 124, 125, 126, 131, 133, 137, 138, 142, 143, 144, 145, 147, 149, 151, 152, 153, 154, 156, 159, 160, 161, 162, 171, 172, 173, 174, 175, 176, 180, 182, 184, 185, 186, 190, 191, 197, 200, 203, 205, 207, 208, 213, 218, 220, 222, 223, 225, 226, 235, 236, 244, 245, 246, 251, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 304, 308, 317, 319, 329, 330, 332, 334, 350, 351, 354, 359, 360, 363, 365, 371, 372, 373, 376, 382, 384, 387, 388, 391, 392, 393, 394, 402, 407, 410, 411, 414, 415, 416, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 498, 499, 501, 504, 505, 507, 510, 511, 533, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 584, 585, 586, 588, 589, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 696, 697, 698, 699, 700, 701, 706, 707, 709, 710, 711, 716, 717, 720, 721, 722, 725, 727, 729, 730, 732, 733, 735, 736, 737, 738, 739, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 791, 792, 793, 794, 796, 797, 798, 799, 800, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 825, 827, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 901, 902, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 929, 930, 931, 932, 933, 938, 939, 940, 942, 944, 945, 946, 949, 951, 952, 953, 962, 965, 966, 967, 969, 993, 997, 998, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "estimate_bandwidth": [2, 79, 98, 416, 456, 469], "estimated_coef": [655, 656, 661, 669, 670, 671, 690, 691, 692], "estimator_": [221, 252, 290, 436, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 602, 603, 606, 680, 808, 831, 910, 993, 1056], "estimator__alpha": 151, "estimator__max_depth": [398, 999], "estimator_alpha": 147, "estimator_check": [2, 326, 386, 398, 951, 952, 1048, 1049, 1051, 1052, 1055, 1056, 1057, 1059, 1060], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 226, "estimator_errors_": [138, 562, 563], "estimator_html_repr": [2, 386, 417, 1052, 1053, 1054, 1055, 1058], "estimator_modul": 386, "estimator_nam": [49, 226, 386, 391, 446, 585, 707, 709, 711, 938], "estimator_samples_": 1052, "estimator_weights_": [138, 562, 563], "estimatorcv": [398, 1030], "estimators_": [145, 147, 210, 233, 253, 326, 398, 423, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 841, 842, 843, 844, 845, 846, 847, 1042, 1048, 1055], "estimators_early_stop": 149, "estimators_features_": [564, 565, 572], "estimators_samples_": [564, 565, 566, 567, 572, 573, 574, 575, 1047, 1049, 1052, 1058], "est\u00e8v": [0, 405, 1049, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "est\u00e8vc": 1059, "esuli": [1048, 1053], "esvhd": 1050, "et": [0, 2, 50, 111, 112, 138, 153, 205, 310, 379, 381, 413, 416, 418, 421, 423, 424, 425, 459, 507, 528, 529, 537, 544, 550, 553, 572, 691, 692, 728, 729, 848, 850, 870, 871, 906, 956, 957, 1006, 1007, 1010, 1016, 1020, 1022, 1025, 1026, 1049, 1057], "eta": [421, 545, 685, 686, 687, 1014, 1024, 1046], "eta0": [677, 685, 686, 687, 1024], "eta_0": 1024, "etc": [2, 148, 218, 236, 271, 280, 281, 334, 367, 371, 373, 384, 386, 389, 396, 397, 398, 407, 410, 413, 417, 420, 424, 497, 512, 536, 566, 567, 573, 574, 677, 685, 701, 727, 780, 809, 823, 844, 847, 877, 888, 921, 922, 923, 924, 925, 927, 939, 940, 951, 999, 1000, 1004, 1010, 1013, 1029, 1030, 1034, 1041, 1048, 1050, 1051], "eth": 1051, "ethan": [1044, 1047], "ethic": 154, "etiquett": 384, "etl": [1030, 1034], "euclidean": [2, 37, 75, 92, 93, 204, 249, 255, 297, 300, 305, 326, 331, 351, 359, 413, 416, 421, 422, 423, 424, 426, 448, 449, 452, 453, 454, 458, 460, 465, 468, 471, 540, 546, 554, 555, 598, 624, 628, 631, 632, 685, 687, 699, 701, 704, 705, 708, 771, 772, 778, 779, 780, 781, 787, 788, 789, 790, 801, 802, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 907, 1000, 1004, 1008, 1011, 1013, 1022, 1030, 1045, 1048, 1049, 1050, 1051, 1057, 1058], "euclidean_dist": [2, 241, 249, 386, 412, 458, 462, 465, 697, 703, 771, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 1041, 1046, 1049, 1050, 1058, 1060], "euclideandist": 708, "eugen": [381, 1042, 1047], "eunji": 1049, "eunseop": 1051, "euro": 334, "europ": [424, 1020], "european": [735, 765, 1010], "eustach": [1034, 1043, 1044], "eval_and_print_metr": 340, "eval_gradi": [183, 426, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "evalml": 1029, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 84, 90, 99, 105, 106, 127, 138, 144, 145, 146, 148, 149, 151, 154, 168, 169, 178, 188, 194, 196, 199, 207, 220, 225, 236, 244, 268, 269, 273, 274, 275, 276, 279, 281, 282, 283, 285, 287, 288, 290, 291, 296, 304, 306, 310, 317, 322, 324, 328, 332, 333, 340, 347, 351, 358, 367, 377, 379, 386, 390, 398, 401, 417, 424, 425, 426, 455, 457, 472, 474, 496, 499, 501, 502, 505, 518, 529, 545, 560, 570, 571, 572, 576, 577, 600, 603, 611, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 640, 641, 642, 643, 656, 662, 668, 682, 684, 706, 708, 710, 711, 712, 713, 714, 720, 722, 723, 724, 726, 727, 735, 736, 745, 746, 751, 763, 764, 765, 766, 795, 804, 806, 807, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 839, 840, 844, 850, 853, 854, 859, 871, 873, 874, 880, 883, 886, 887, 891, 892, 893, 898, 899, 901, 902, 903, 904, 915, 918, 921, 942, 951, 983, 1002, 1006, 1008, 1012, 1013, 1016, 1017, 1018, 1021, 1024, 1026, 1029, 1031, 1034, 1035, 1036, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "evaluate_everi": 545, "evaluate_model_and_stor": 323, "evaluation_std": 359, "evaluations_std": 359, "evelyn": 1059, "even": [37, 43, 52, 53, 64, 75, 77, 87, 109, 118, 127, 144, 151, 181, 191, 192, 193, 207, 218, 219, 226, 236, 242, 243, 251, 252, 262, 282, 294, 317, 319, 321, 322, 341, 354, 358, 359, 360, 367, 373, 379, 383, 384, 385, 386, 389, 392, 396, 398, 410, 414, 416, 417, 418, 420, 421, 423, 424, 426, 449, 451, 453, 454, 455, 456, 457, 467, 469, 541, 544, 566, 567, 568, 569, 573, 574, 591, 598, 603, 636, 637, 639, 648, 667, 668, 704, 709, 714, 721, 752, 770, 776, 783, 787, 790, 795, 797, 836, 873, 874, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 921, 922, 923, 924, 957, 978, 999, 1000, 1002, 1004, 1006, 1009, 1010, 1013, 1015, 1016, 1018, 1020, 1022, 1024, 1025, 1026, 1034, 1048, 1049, 1050, 1053, 1055, 1058], "evenli": [2, 47, 74, 87, 151, 194, 222, 271, 424, 961], "event": [0, 43, 218, 236, 279, 414, 416, 597, 598, 645, 848, 944, 1006, 1011, 1012, 1029, 1034, 1047], "eventu": [7, 264, 416, 425, 602, 1034], "ever": [144, 158, 393, 423, 1034], "everi": [43, 124, 154, 180, 186, 216, 219, 239, 251, 262, 267, 285, 329, 333, 367, 379, 384, 386, 388, 392, 398, 414, 416, 418, 420, 421, 424, 448, 462, 517, 540, 545, 548, 554, 566, 568, 569, 570, 571, 573, 599, 600, 612, 655, 656, 658, 661, 662, 668, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 683, 684, 685, 694, 695, 696, 701, 705, 763, 780, 788, 789, 822, 862, 921, 923, 925, 927, 945, 1003, 1005, 1010, 1011, 1012, 1020, 1026, 1034, 1041, 1045, 1047, 1050, 1054, 1058], "everingham": 1010, "everingham2010": 1010, "everybodi": [378, 384], "everyon": [384, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "everyth": [336, 367, 388, 390, 396, 410, 472, 964, 1029, 1030, 1041], "everywher": 398, "evgeni": 1052, "evid": [282, 358, 392, 416, 420, 421, 423, 653, 806, 1009], "evol": 1010, "evolut": [47, 49, 288, 371, 373], "evolv": [393, 1056], "ex": [104, 382, 385, 402, 1045, 1046], "exact": [44, 46, 115, 129, 144, 180, 222, 250, 270, 297, 333, 367, 371, 372, 378, 384, 386, 392, 393, 396, 397, 398, 416, 423, 425, 441, 490, 491, 492, 496, 505, 543, 544, 550, 570, 571, 647, 651, 655, 701, 809, 823, 834, 835, 836, 915, 918, 999, 1002, 1006, 1007, 1016, 1020, 1024, 1025, 1048, 1049, 1051], "exactli": [105, 138, 190, 198, 203, 211, 218, 222, 267, 270, 284, 318, 354, 358, 384, 386, 392, 413, 416, 420, 421, 424, 429, 454, 461, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 524, 535, 599, 600, 624, 685, 687, 712, 714, 772, 810, 827, 834, 1002, 1006, 1007, 1008, 1010, 1011, 1026, 1041, 1047, 1048, 1054], "exagger": [74, 191, 701, 1007], "examin": [169, 390, 392, 416, 862], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 372, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 397, 398, 401, 402, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 431, 432, 434, 435, 437, 438, 441, 442, 443, 444, 447, 464, 465, 467, 469, 471, 479, 486, 488, 489, 493, 494, 495, 502, 506, 512, 514, 516, 517, 518, 525, 526, 527, 537, 538, 540, 554, 555, 556, 557, 564, 581, 582, 586, 592, 594, 595, 601, 604, 605, 607, 610, 612, 618, 621, 625, 629, 630, 633, 635, 638, 645, 646, 647, 651, 659, 660, 663, 669, 670, 672, 676, 684, 692, 694, 695, 696, 703, 704, 705, 708, 717, 719, 720, 723, 724, 725, 729, 730, 732, 733, 734, 735, 737, 739, 740, 742, 745, 748, 749, 752, 753, 756, 760, 763, 765, 767, 768, 769, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 792, 800, 803, 805, 816, 817, 818, 819, 820, 821, 822, 833, 845, 847, 849, 853, 854, 863, 864, 865, 867, 868, 875, 876, 879, 881, 884, 895, 896, 898, 900, 901, 903, 904, 905, 908, 912, 914, 915, 923, 924, 925, 926, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 963, 964, 971, 972, 973, 974, 978, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1054, 1056, 1057, 1058], "example_funct": 384, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1041, "example_gaussian_process_plot_gp_regress": 1041, "exampleclassifi": 252, "exampleclassifierexampleclassifi": 252, "exampleestim": 384, "exampleregressor": 252, "examples_pattern": 384, "exampletransform": 252, "exc": [294, 993], "exce": [117, 296, 327, 426, 450, 524, 611, 658, 667, 1050, 1053, 1055], "exceed": [812, 813, 1047], "excel": [157, 378, 384, 423, 699, 703, 1006, 1034], "except": [2, 50, 79, 88, 127, 136, 144, 154, 226, 233, 245, 252, 284, 297, 310, 313, 314, 317, 319, 331, 377, 384, 386, 387, 389, 396, 398, 407, 410, 413, 417, 420, 421, 423, 424, 426, 439, 468, 473, 476, 490, 491, 492, 518, 563, 565, 566, 567, 569, 571, 573, 574, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 620, 636, 639, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 696, 720, 787, 816, 846, 847, 853, 854, 856, 859, 864, 870, 871, 877, 891, 893, 911, 914, 916, 919, 922, 924, 938, 961, 993, 995, 999, 1006, 1010, 1025, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1058, 1059, 1060], "exception": 236, "excerpt": [45, 1022], "excess": [222, 454, 1020, 1048], "exchang": [410, 1033], "excit": 1048, "exclud": [47, 57, 190, 317, 384, 388, 398, 454, 472, 474, 738, 739, 747, 792, 793, 796, 822, 830, 888, 984, 1010, 1013, 1050, 1057, 1060], "exclus": [372, 396, 398, 421, 423, 636, 637, 639, 725, 811, 826, 829, 999, 1006, 1010, 1011, 1034, 1048, 1052], "exec": 396, "execut": [64, 186, 203, 207, 251, 281, 372, 382, 384, 390, 410, 412, 416, 421, 427, 451, 469, 809, 815, 823, 832, 834, 835, 836, 837, 840, 858, 975, 976, 1020, 1023, 1031, 1043, 1046, 1049], "exemplar": [416, 448, 462], "exemplari": [160, 161], "exemplifi": 398, "exercis": [2, 107, 147, 157, 177, 179, 228, 231, 289, 312, 313, 341, 352, 355, 356, 373, 381, 384, 510, 511, 513, 514, 661, 662, 667, 809, 814, 855, 918, 1031, 1044], "exhaust": [2, 173, 277, 326, 327, 328, 329, 330, 331, 332, 333, 334, 371, 381, 389, 397, 411, 416, 423, 809, 812, 813, 823, 903, 904, 906, 1006, 1036], "exhibit": [176, 223, 351, 358, 401, 420, 421, 423, 426, 1018], "exist": [47, 48, 52, 55, 57, 88, 236, 276, 314, 317, 351, 378, 383, 386, 387, 390, 396, 398, 399, 402, 410, 416, 420, 421, 423, 424, 431, 436, 441, 445, 451, 452, 455, 457, 459, 461, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 500, 508, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 594, 597, 598, 599, 600, 606, 612, 619, 620, 641, 642, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 707, 709, 711, 771, 774, 778, 808, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 886, 887, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 993, 1002, 1007, 1009, 1010, 1014, 1016, 1017, 1020, 1034, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "exist_ok": 47, "existing_credit": 270, "exit": [106, 297, 388, 392, 476], "exp": [2, 81, 89, 101, 133, 141, 151, 176, 203, 228, 302, 307, 310, 327, 328, 332, 351, 414, 416, 417, 422, 428, 460, 473, 530, 542, 545, 624, 625, 631, 650, 768, 775, 785, 870, 871, 889, 1004, 1006, 1008, 1012, 1013, 1014, 1023, 1024, 1025], "exp10": 191, "exp_dirichlet_component_": 545, "exp_dist_embed": 307, "expand": [43, 84, 100, 247, 323, 327, 367, 376, 386, 423, 452, 458, 508, 566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 1010, 1042, 1049, 1050, 1057], "expand_frame_repr": 236, "expans": [43, 186, 328, 458, 888, 1050], "expect": [43, 44, 49, 52, 61, 72, 79, 88, 118, 122, 129, 138, 141, 143, 145, 148, 151, 154, 170, 171, 175, 181, 188, 189, 193, 204, 209, 218, 219, 220, 222, 226, 236, 249, 252, 255, 256, 262, 263, 266, 267, 270, 283, 297, 322, 354, 358, 359, 367, 371, 372, 384, 386, 389, 390, 391, 392, 393, 396, 397, 398, 399, 401, 407, 412, 414, 416, 417, 418, 420, 423, 424, 425, 439, 472, 473, 475, 476, 477, 490, 491, 492, 505, 532, 541, 545, 547, 550, 561, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 579, 581, 597, 598, 600, 604, 606, 615, 620, 636, 641, 642, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 683, 684, 687, 688, 704, 713, 714, 725, 744, 797, 803, 808, 809, 823, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 863, 864, 865, 866, 871, 874, 879, 886, 887, 890, 893, 894, 903, 904, 911, 913, 914, 915, 916, 917, 918, 919, 922, 924, 934, 972, 999, 1006, 1009, 1010, 1012, 1016, 1020, 1024, 1025, 1026, 1031, 1033, 1036, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "expected_anomaly_fract": 255, "expected_i": 151, "expected_n_anomali": 255, "expected_ri": 714, "expectedli": 358, "expens": [0, 91, 144, 159, 175, 190, 192, 246, 273, 285, 347, 351, 358, 359, 360, 373, 390, 398, 416, 417, 420, 423, 424, 457, 476, 517, 809, 812, 813, 823, 836, 911, 913, 1007, 1009, 1020, 1025, 1034, 1045], "experi": [30, 138, 178, 182, 190, 191, 192, 193, 196, 220, 270, 294, 322, 354, 359, 360, 372, 378, 384, 387, 399, 420, 524, 737, 794, 1006, 1011, 1022, 1028, 1029, 1034], "experienc": 384, "experiment": [2, 151, 186, 187, 218, 287, 288, 328, 329, 334, 386, 387, 394, 396, 398, 407, 420, 505, 558, 588, 589, 636, 705, 812, 813, 979, 999, 1000, 1006, 1009, 1010, 1029, 1030, 1036, 1049, 1050, 1053, 1054, 1055, 1056, 1058, 1059, 1060], "expert_r": 417, "expertis": [383, 384, 396], "expit": [150, 208, 423, 570, 1006, 1048], "explain": [2, 43, 44, 51, 64, 91, 107, 117, 118, 132, 151, 175, 180, 181, 192, 193, 218, 236, 245, 252, 267, 286, 289, 323, 334, 358, 359, 372, 384, 396, 410, 412, 419, 421, 426, 502, 530, 533, 543, 550, 553, 558, 634, 657, 665, 678, 689, 730, 731, 732, 733, 737, 794, 1006, 1013, 1026, 1028, 1052, 1054, 1055], "explained_vari": [359, 1010], "explained_variance_": [118, 543, 550, 553, 1048], "explained_variance_ratio": 1047, "explained_variance_ratio_": [107, 132, 334, 359, 421, 543, 550, 553, 558, 1044, 1047], "explained_variance_scor": [2, 1010, 1044, 1048, 1055], "explan": [64, 118, 252, 371, 383, 384, 414, 424, 999, 1009, 1011, 1026, 1029, 1034, 1044], "explic": 1022, "explicit": [43, 154, 188, 192, 196, 244, 252, 290, 351, 371, 372, 373, 383, 385, 396, 398, 399, 407, 417, 424, 430, 480, 508, 510, 511, 550, 560, 561, 640, 647, 648, 650, 685, 809, 810, 817, 857, 865, 873, 913, 918, 973, 1002, 1004, 1006, 1010, 1020, 1026, 1029, 1031, 1041, 1045, 1050, 1051, 1054, 1058], "explicitli": [43, 81, 145, 175, 182, 186, 187, 219, 248, 252, 333, 351, 360, 367, 372, 378, 380, 384, 385, 386, 388, 396, 398, 407, 410, 412, 420, 424, 426, 544, 558, 559, 588, 589, 606, 636, 657, 667, 668, 678, 689, 718, 736, 791, 797, 798, 812, 813, 844, 847, 853, 854, 879, 903, 904, 998, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1012, 1013, 1020, 1034, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1059, 1060], "explod": 323, "exploit": [62, 296, 410, 1011, 1030, 1044], "exploit_incremental_learn": [815, 837], "explor": [52, 72, 141, 142, 154, 194, 242, 243, 255, 270, 277, 278, 284, 285, 294, 324, 328, 347, 359, 367, 378, 381, 383, 390, 416, 423, 480, 809, 812, 820, 894, 999, 1006, 1007, 1009, 1015, 1017, 1020, 1034, 1047], "exploratori": [191, 1034], "explos": [809, 823, 834, 835, 836], "expm1": 109, "expon": [426, 625, 685, 686, 687, 821, 870, 871, 888, 999], "exponenti": [2, 81, 109, 175, 180, 302, 307, 422, 423, 426, 457, 545, 563, 568, 623, 628, 631, 648, 652, 767, 768, 853, 854, 858, 870, 871, 888, 1002, 1006, 1010, 1025, 1048, 1054], "export": [2, 382, 385, 386, 402, 925, 926, 1026, 1029, 1050], "export_graphviz": [2, 1026, 1046, 1048, 1054, 1056, 1057, 1059], "export_text": [2, 1026, 1050, 1057], "expos": [2, 173, 252, 294, 329, 331, 372, 377, 381, 386, 398, 407, 414, 417, 423, 425, 426, 445, 472, 562, 563, 570, 571, 576, 577, 578, 579, 602, 603, 611, 620, 808, 809, 812, 813, 823, 831, 842, 843, 844, 845, 846, 847, 928, 1006, 1010, 1012, 1029, 1038, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "exposur": [218, 236, 1006], "express": [43, 46, 51, 52, 138, 144, 175, 180, 191, 276, 277, 323, 328, 344, 351, 360, 378, 379, 384, 385, 390, 396, 410, 416, 421, 422, 423, 424, 458, 464, 465, 597, 598, 600, 725, 797, 809, 815, 823, 832, 834, 835, 836, 837, 840, 860, 1002, 1006, 1010, 1014, 1020, 1021, 1026, 1049], "expsinesquar": [2, 175, 180, 184, 426], "exstrac": 1010, "ext": 655, "extend": [31, 52, 90, 91, 102, 136, 219, 265, 270, 283, 347, 381, 382, 396, 398, 414, 416, 421, 423, 640, 729, 830, 842, 845, 846, 878, 880, 897, 913, 914, 928, 1002, 1010, 1011, 1025, 1030, 1032, 1036, 1046, 1047, 1048, 1049, 1051, 1056], "extens": [283, 285, 302, 371, 372, 378, 379, 382, 385, 387, 388, 392, 393, 396, 410, 416, 421, 505, 512, 543, 750, 951, 959, 1007, 1009, 1010, 1028, 1029, 1034, 1041, 1047, 1054, 1055, 1057, 1058], "extent": [2, 48, 93, 177, 178, 179, 249, 355, 448, 544, 705, 806, 1010], "extercond": 148, "extern": [164, 175, 270, 373, 377, 381, 384, 386, 389, 396, 398, 413, 416, 424, 425, 426, 602, 619, 620, 726, 746, 804, 1006, 1009, 1010, 1013, 1026, 1030, 1036, 1049, 1053], "exterqu": [148, 159], "extmath": [2, 264, 358, 393, 461, 954, 955, 956, 957, 958, 959, 1041, 1042, 1047, 1048, 1051, 1055, 1056, 1058], "extr": 47, "extra": [2, 81, 147, 154, 254, 297, 333, 360, 382, 383, 385, 398, 410, 423, 424, 446, 451, 455, 467, 472, 541, 566, 567, 575, 599, 600, 709, 710, 711, 834, 857, 923, 924, 947, 1009, 1010, 1013, 1041, 1044, 1046, 1047, 1049, 1054, 1056], "extra_cflag": 390, "extra_tre": [923, 924], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 85, 90, 103, 104, 105, 106, 117, 124, 144, 169, 173, 188, 233, 268, 275, 276, 281, 284, 315, 340, 350, 358, 360, 367, 376, 379, 381, 390, 393, 396, 416, 417, 420, 421, 458, 460, 463, 464, 470, 472, 496, 497, 502, 503, 512, 513, 540, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 592, 593, 597, 598, 600, 602, 603, 606, 608, 640, 727, 797, 809, 823, 850, 872, 873, 918, 930, 957, 966, 973, 999, 1007, 1011, 1015, 1020, 1024, 1029, 1031, 1034, 1036, 1041, 1042, 1050, 1053], "extract_dbscan": 416, "extract_patches_2d": [2, 85, 127, 424, 596, 1049], "extract_scor": 279, "extractal": 47, "extractor": [218, 315, 373, 379, 398, 424, 512, 590, 591, 597, 598, 600, 999, 1041], "extran": 384, "extrapol": [43, 175, 198, 219, 248, 279, 892, 1010, 1020, 1026, 1054, 1056], "extratre": [147, 157, 371, 1044], "extratreeclassifi": [2, 566, 575, 924, 1000, 1011, 1026, 1045, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1060], "extratreeregressor": [2, 567, 572, 575, 923, 1000, 1011, 1016, 1026, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1060], "extratreesclassifi": [2, 147, 157, 423, 425, 567, 573, 575, 923, 924, 1000, 1011, 1044, 1045, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058, 1060], "extratreesregressor": [2, 254, 423, 566, 574, 575, 923, 924, 1000, 1011, 1044, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058, 1060], "extrem": [2, 151, 218, 220, 254, 255, 317, 324, 339, 359, 384, 387, 415, 416, 421, 566, 567, 573, 574, 575, 641, 642, 688, 733, 761, 923, 924, 925, 927, 1010, 1012], "extrema": 1004, "exxon": 51, "ey": [113, 114, 263, 267, 347, 379, 543, 550, 559], "eyast": 1055, "ezebunandu": 1053, "ezeiza": 773, "ezri": 1054, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 58, 63, 66, 68, 72, 78, 82, 83, 84, 87, 88, 90, 93, 99, 102, 105, 109, 118, 127, 138, 141, 144, 145, 146, 148, 149, 151, 154, 159, 160, 165, 167, 169, 172, 173, 175, 181, 182, 184, 188, 190, 191, 192, 193, 194, 196, 203, 204, 207, 209, 218, 219, 220, 222, 228, 232, 236, 239, 249, 251, 252, 255, 259, 266, 270, 274, 276, 277, 278, 279, 282, 283, 285, 286, 288, 290, 297, 300, 312, 313, 314, 319, 322, 323, 326, 328, 330, 332, 333, 334, 336, 337, 346, 351, 354, 358, 359, 360, 367, 379, 384, 385, 386, 390, 392, 396, 410, 414, 417, 421, 423, 424, 425, 426, 495, 517, 518, 540, 541, 546, 547, 575, 590, 591, 592, 596, 601, 604, 605, 607, 608, 609, 613, 614, 615, 616, 617, 618, 626, 636, 641, 644, 667, 705, 722, 732, 735, 738, 739, 765, 792, 793, 796, 797, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 837, 838, 840, 870, 871, 875, 884, 887, 888, 892, 893, 894, 920, 928, 939, 940, 993, 1002, 1005, 1014, 1017, 1018, 1020, 1024, 1031, 1043, 1049, 1050, 1051, 1053, 1055], "f0_c0": 894, "f0_c1": 894, "f0_c2": 894, "f0e442": 261, "f1": [2, 45, 62, 68, 104, 170, 274, 315, 336, 337, 340, 420, 722, 738, 739, 747, 792, 831, 1010, 1011, 1045, 1057], "f1_c0": 894, "f1_c1": 894, "f1_c2": 894, "f1_macro": [420, 1010, 1045], "f1_micro": [1010, 1045], "f1_sampl": 1010, "f1_score": [2, 62, 283, 340, 379, 415, 747, 1010, 1041, 1043, 1044, 1045, 1046, 1050, 1051, 1057, 1058], "f1_weight": [1010, 1045], "f2": [388, 1011], "f2001": 1010, "f2006": 1010, "f3": 1011, "f4": 507, "f401": [80, 102, 120, 130, 192, 215, 238, 240], "f781bf": [75, 79, 97, 98], "f7bd01": 75, "f_": [423, 644, 739, 1010], "f_0": 156, "f_1": [156, 1010], "f_beta": 1010, "f_classif": [2, 169, 170, 350, 425, 601, 604, 605, 607, 608, 609, 613, 615, 618], "f_i": 414, "f_idx": 156, "f_j": [414, 1018], "f_m": 423, "f_n": 283, "f_p": 283, "f_regress": [2, 89, 168, 425, 601, 604, 605, 607, 608, 609, 613, 614, 618, 1044, 1048, 1055, 1058], "f_score": 283, "f_statist": [614, 615], "f_test": 168, "fa": [2, 123, 133, 134, 188, 390, 421, 481, 484, 541, 550, 809, 835, 1031], "fa_estim": 124, "fa_scor": 131, "fab": [1034, 1051, 1052], "fabia": [413, 728], "fabian": [0, 406, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1058], "fabiana": 1052, "fabio": 1047, "fabisch": [0, 406, 1043, 1044, 1045, 1047], "fabrizio": 1056, "face": [2, 42, 44, 54, 71, 86, 88, 123, 127, 131, 133, 146, 188, 196, 244, 249, 251, 377, 384, 388, 416, 421, 423, 425, 457, 480, 502, 503, 504, 530, 541, 542, 546, 548, 549, 550, 552, 567, 593, 666, 682, 706, 722, 823, 839, 856, 893, 918, 942, 1013, 1026, 1027, 1031, 1036, 1041, 1049], "face_id": 254, "facecolor": [51, 63, 70, 80, 95, 124, 130, 140, 166, 183, 238, 253, 276, 304, 319, 345, 348, 351, 352, 353], "faces_cent": 124, "facial": 379, "facil": [1009, 1029], "facilit": [371, 398, 410, 1029, 1030, 1047, 1050], "fact": [43, 50, 57, 62, 114, 118, 138, 149, 151, 193, 249, 259, 294, 296, 358, 378, 391, 396, 398, 412, 419, 421, 422, 423, 424, 658, 677, 679, 713, 1004, 1006, 1013, 1020, 1024, 1025, 1030, 1034, 1055], "facto": 1051, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 81, 88, 90, 97, 123, 129, 133, 157, 188, 191, 232, 243, 245, 255, 270, 287, 288, 297, 298, 312, 313, 317, 319, 328, 330, 346, 371, 372, 384, 390, 393, 398, 413, 416, 423, 424, 426, 448, 450, 462, 477, 479, 480, 481, 482, 484, 486, 496, 513, 523, 524, 536, 541, 544, 545, 547, 549, 550, 553, 554, 555, 556, 558, 559, 570, 571, 572, 597, 600, 606, 622, 658, 659, 660, 663, 664, 665, 691, 692, 701, 728, 792, 809, 812, 813, 835, 859, 893, 907, 909, 917, 956, 957, 999, 1006, 1007, 1013, 1020, 1023, 1027, 1031, 1035, 1036, 1041, 1042, 1044, 1045, 1047, 1055, 1057], "factoranalysi": [2, 124, 131, 134, 421, 553, 1042, 1044, 1053, 1055], "factori": [2, 96, 270, 276, 424, 932, 934, 979, 1010], "facundo": [1052, 1055], "fagan": 1050, "fail": [43, 89, 101, 125, 131, 183, 198, 203, 222, 252, 276, 326, 372, 382, 384, 387, 392, 399, 402, 419, 420, 448, 480, 482, 685, 686, 687, 720, 870, 871, 929, 931, 938, 951, 999, 1007, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060], "failur": [188, 189, 191, 213, 384, 392, 402, 666, 794, 839, 939, 940, 1031, 1033, 1034, 1054, 1055, 1059], "fair": [51, 64, 423, 699, 703, 842, 1011, 1034], "fairer": 367, "fairli": [115, 150, 240, 292, 313, 392, 416, 568, 569, 708, 1011], "faith": [57, 352], "fake": 424, "falak": 1050, "fall": [25, 30, 43, 52, 151, 154, 182, 275, 276, 384, 416, 424, 441, 454, 455, 517, 518, 736, 737, 803, 890, 902, 962, 1009, 1010, 1020, 1050], "fallback": [399, 402, 841, 842, 1010], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 81, 82, 89, 90, 99, 102, 104, 105, 106, 112, 114, 122, 128, 132, 133, 138, 144, 145, 148, 151, 152, 154, 162, 164, 175, 180, 181, 182, 183, 191, 192, 193, 194, 198, 199, 203, 204, 218, 219, 223, 224, 226, 234, 236, 238, 241, 252, 253, 255, 259, 261, 270, 273, 274, 276, 279, 280, 283, 284, 285, 286, 287, 288, 289, 291, 297, 301, 307, 310, 313, 314, 317, 318, 323, 324, 326, 328, 329, 330, 331, 333, 334, 338, 347, 349, 351, 354, 355, 358, 359, 378, 384, 385, 386, 389, 398, 407, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 428, 429, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 522, 524, 532, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 644, 646, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 703, 704, 706, 707, 708, 709, 710, 711, 712, 717, 718, 720, 721, 722, 723, 724, 727, 728, 735, 736, 737, 738, 739, 740, 747, 751, 752, 759, 760, 763, 765, 770, 772, 776, 778, 783, 787, 791, 792, 793, 794, 796, 798, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 823, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 937, 938, 939, 940, 946, 951, 958, 970, 971, 974, 975, 979, 980, 981, 983, 990, 995, 996, 998, 999, 1000, 1006, 1010, 1013, 1020, 1024, 1025, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "false_": 645, "false_discovery_r": 604, "famili": [2, 45, 270, 371, 373, 398, 416, 419, 421, 424, 425, 601, 604, 605, 607, 608, 609, 615, 870, 871, 889, 901, 1006, 1020, 1024, 1045, 1055], "familiar": [384, 422, 1049], "famou": [379, 381, 423, 1025], "famous": 1012, "fan": [0, 372, 399, 405, 1025, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "fanci": 424, "fancybox": 353, "fanelli": [1056, 1057], "fang": [667, 1048, 1049], "fanni": 1051, "fantasi": 1015, "fantast": 1034, "faouzi": [1051, 1052], "faq": [0, 392, 420, 701, 1007, 1020], "far": [62, 95, 115, 148, 176, 182, 191, 218, 236, 270, 347, 351, 358, 360, 384, 393, 426, 729, 893, 984, 1015, 1016, 1025, 1034], "farach": 1002, "farahsae": 1049, "farawai": 1013, "fare": [105, 193, 259, 330, 331, 1045, 1046], "fargo": 51, "farhan": 1057, "farid": 1060, "farlei": [0, 406, 1041], "farouk": [1049, 1050], "farther": 734, "farthest": 416, "fashion": [2, 46, 143, 149, 226, 285, 372, 398, 413, 414, 416, 421, 423, 562, 566, 567, 568, 569, 573, 574, 575, 611, 636, 839, 862, 877, 880, 886, 897, 921, 922, 923, 924, 980, 1000, 1006, 1010, 1020, 1026, 1050], "fast": [2, 52, 64, 97, 196, 203, 207, 233, 234, 250, 251, 318, 360, 371, 379, 384, 393, 410, 416, 418, 420, 421, 423, 424, 428, 454, 455, 477, 482, 517, 541, 542, 544, 547, 549, 553, 556, 573, 574, 575, 597, 598, 600, 641, 642, 649, 667, 668, 681, 683, 696, 708, 809, 823, 834, 835, 845, 846, 853, 854, 858, 869, 957, 978, 1002, 1006, 1009, 1012, 1013, 1015, 1016, 1026, 1029, 1034, 1041, 1042, 1047, 1048, 1051, 1052], "fast_dict": 1051, "fast_dot": 1048, "fast_logdet": [2, 393], "fast_svd": 1041, "faster": [37, 46, 57, 74, 99, 107, 124, 143, 144, 148, 149, 151, 154, 173, 192, 196, 204, 218, 220, 233, 234, 236, 251, 255, 270, 297, 299, 314, 327, 329, 330, 334, 358, 359, 360, 371, 378, 384, 392, 393, 398, 410, 416, 421, 425, 426, 428, 451, 455, 457, 459, 460, 461, 470, 517, 540, 541, 542, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 562, 568, 569, 570, 571, 572, 652, 655, 656, 661, 662, 667, 668, 669, 670, 671, 672, 681, 683, 693, 696, 700, 704, 735, 765, 787, 788, 789, 853, 854, 858, 870, 871, 888, 890, 892, 902, 906, 957, 978, 999, 1003, 1006, 1011, 1013, 1014, 1017, 1022, 1024, 1025, 1026, 1029, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "fastest": [92, 274, 360, 455, 679, 681, 683, 696, 956, 957, 1009], "fastest_top_recall_high_precision_index": 274, "fastica": [2, 123, 188, 217, 421, 541, 544, 550, 1031, 1041, 1043, 1049, 1055, 1056, 1059], "fastkmean": 457, "fastmcd": [418, 477, 482], "fastnc": 869, "fat": [530, 533], "fatima": [1055, 1058], "fato": 1054, "fauchereau": 1054, "fault": [392, 1049, 1051, 1053], "faulti": [221, 1041], "faust": 1059, "favor": [44, 115, 144, 261, 267, 396, 418, 423, 682, 684, 739, 817, 819, 872, 999, 1018, 1043, 1045, 1047, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "favorit": [384, 396, 1034], "favour": [801, 1007, 1009, 1050], "fawcett": [797, 798, 1010], "fazlul": 1043, "fbeta_scor": [2, 738, 751, 792, 1010, 1043, 1044, 1045, 1046, 1051, 1057], "fc": [48, 302, 379], "fc2009": 1010, "fcd116": 122, "fcharra": 1056, "fcluster": 194, "fcostin": 1041, "fd": 47, "fdr": 601, "feasibl": [384, 882, 883, 893], "feast": 417, "feat": [47, 49, 388, 424], "feat0": [247, 327], "feat1": [247, 327, 424], "feat2": [247, 327, 424], "feat3": [247, 327, 424], "feat_idx": 636, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 80, 85, 93, 95, 98, 103, 104, 105, 106, 107, 113, 114, 117, 118, 120, 121, 122, 124, 126, 128, 130, 131, 132, 134, 137, 139, 142, 144, 147, 151, 153, 158, 159, 160, 162, 164, 168, 170, 175, 176, 177, 180, 181, 183, 186, 187, 189, 190, 191, 192, 197, 199, 201, 202, 203, 204, 207, 208, 214, 217, 218, 219, 220, 222, 223, 226, 227, 233, 234, 235, 239, 244, 247, 249, 253, 254, 255, 258, 259, 268, 270, 271, 273, 274, 275, 276, 279, 281, 282, 283, 284, 285, 286, 289, 290, 291, 296, 300, 301, 302, 305, 306, 308, 311, 312, 314, 316, 317, 320, 324, 325, 327, 330, 331, 332, 333, 334, 336, 337, 339, 340, 342, 343, 344, 347, 351, 354, 357, 360, 363, 365, 366, 367, 376, 377, 378, 379, 380, 381, 382, 386, 387, 389, 391, 392, 393, 396, 397, 398, 399, 401, 402, 404, 410, 414, 416, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 432, 437, 439, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 588, 589, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 627, 628, 629, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 696, 697, 698, 699, 700, 701, 706, 710, 711, 712, 722, 730, 731, 732, 733, 750, 751, 754, 755, 757, 767, 768, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 790, 794, 797, 799, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 939, 940, 954, 974, 984, 985, 986, 990, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "feature_0": 926, "feature_1": [640, 926], "feature_2": 640, "feature_all_": 850, "feature_count_": [848, 850, 852], "feature_extract": [2, 47, 54, 57, 81, 82, 85, 86, 89, 101, 104, 127, 188, 277, 340, 357, 358, 359, 360, 373, 379, 416, 417, 424, 472, 553, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 886, 1008, 1041, 1042, 1043, 1044, 1047, 1048], "feature_import": 152, "feature_importances_": [145, 146, 152, 173, 193, 194, 398, 423, 425, 562, 563, 566, 567, 568, 569, 573, 574, 575, 602, 603, 606, 921, 922, 923, 924, 1043, 1046, 1050], "feature_index": 424, "feature_indices_": 1049, "feature_log_prob_": [848, 849, 850, 852], "feature_map": [250, 317], "feature_map__n_compon": 250, "feature_map_fouri": 250, "feature_map_nystroem": [250, 648], "feature_nam": [54, 57, 120, 134, 145, 152, 156, 173, 191, 193, 227, 256, 290, 300, 317, 326, 327, 328, 333, 344, 358, 363, 377, 379, 389, 417, 472, 498, 499, 501, 505, 509, 510, 511, 513, 514, 519, 591, 640, 641, 642, 894, 925, 926, 927, 1018, 1026, 1057], "feature_name_combin": [886, 1057], "feature_names_": 590, "feature_names_in": 1055, "feature_names_in_": [259, 324, 329, 398, 437, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 636, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 998, 1054, 1055, 1056, 1057, 1059], "feature_names_out": [432, 437, 450, 451, 453, 455, 457, 472, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 575, 576, 577, 578, 579, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 1055, 1058], "feature_rang": [315, 883, 899, 1020, 1043, 1053], "feature_select": [2, 89, 105, 106, 108, 167, 168, 169, 170, 171, 172, 173, 188, 259, 328, 330, 350, 367, 398, 407, 417, 425, 590, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 999, 1031, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1060], "feature_selector": 173, "feature_to_plot": 212, "feature_union": 1057, "featureagglomer": [2, 86, 89, 448, 449, 1027, 1044, 1050, 1051, 1054, 1055, 1057, 1058, 1059], "featureforg": 1034, "featurehash": [2, 57, 104, 188, 357, 358, 359, 373, 379, 424, 496, 590, 597, 598, 599, 600, 886, 1031, 1042, 1047, 1048, 1049, 1055, 1056], "featureheash": 360, "features_": [638, 1000], "features__pca__n_compon": 108, "features__univ_select__k": 108, "features_idx": 317, "features_info": 192, "features_nam": [190, 1048], "features_samples_ratio": 69, "featureselector": 610, "featuresshould": 404, "featuretool": 1029, "featureunion": [2, 7, 43, 108, 376, 398, 407, 472, 638, 875, 1000, 1030, 1034, 1036, 1042, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059], "featurewis": [2, 889], "feb": [73, 448, 462], "februari": [0, 418, 481, 1010, 1042, 1046, 1058], "fed": [47, 159, 367, 379, 424, 999, 1015, 1020, 1052], "feda": [1049, 1050], "feder": 1029, "federico": [1043, 1044, 1049, 1050, 1055], "federicopisanu": 1051, "feed": [47, 118, 219, 252, 360, 379, 382, 389, 396, 416, 424, 751, 886, 1011], "feedback": [273, 383, 384, 385, 399, 1029, 1033, 1049], "feedforward": [870, 871], "feedstock": 388, "feel": [64, 187, 317, 383, 384, 392, 416, 454, 1026], "feel_temp": [43, 192], "feghali": 1058, "fei": [572, 1016], "feld": [1045, 1057], "feldbauer": [1049, 1050, 1051, 1052, 1055], "feldman": [1043, 1048, 1049, 1050, 1051], "felip": [1054, 1055, 1056, 1057], "felix": [1043, 1048, 1049, 1051, 1053, 1054, 1055], "femal": [105, 191, 331, 389, 886, 887, 1020], "fenc": 389, "feng": [1051, 1053, 1054, 1055], "fenil": 1054, "fenx": 1049, "ferdman": 1058, "ferenc": 1034, "fernand": [1049, 1055, 1056], "fernandez": 1050, "fernando": [1046, 1053], "fern\u00e1ndez": 1055, "ferrando": 1051, "ferrari": 1049, "ferreira": [1049, 1054, 1055], "ferri": [425, 1010], "ferria": 1048, "ferrin": 1055, "ferriss": 1048, "ferr\u00e9": 1055, "ferr\u00edn": 1052, "fetal": 255, "fetch": [2, 51, 55, 159, 191, 236, 270, 290, 377, 378, 379, 384, 388, 389, 392, 421, 500, 505, 564, 565, 566, 567, 572, 573, 574, 575, 597, 598, 600, 1049, 1057], "fetch_": 1048, "fetch_20newsgroup": [2, 54, 57, 104, 277, 340, 358, 359, 360, 379, 497, 1046, 1051, 1059], "fetch_20newsgroups_vector": [2, 46, 233, 249, 379, 1041, 1051, 1053, 1058, 1059], "fetch_california_h": [2, 144, 149, 186, 187, 317, 328, 379, 397, 417, 1050, 1052, 1059], "fetch_covtyp": [2, 196, 255, 328, 379, 1050, 1053, 1055, 1059], "fetch_fil": [2, 52, 1060], "fetch_kddcup99": [2, 255, 379, 1048, 1049, 1050, 1053, 1054, 1059], "fetch_lfw_pair": [2, 379, 1046, 1056, 1059], "fetch_lfw_peopl": [2, 45, 379, 1056, 1059], "fetch_mldata": 1049, "fetch_olivetti_fac": [2, 85, 124, 146, 254, 379, 1049, 1050, 1051, 1059], "fetch_openml": [2, 43, 44, 52, 105, 109, 148, 154, 159, 180, 191, 192, 193, 218, 226, 234, 236, 246, 255, 259, 270, 290, 294, 296, 297, 314, 323, 326, 330, 333, 378, 388, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "fetch_rcv1": [2, 379, 1046, 1050, 1059], "fetch_species_distribut": [2, 50, 310, 1050, 1059], "fetcher": [377, 1046, 1048, 1057], "feth": 1041, "feurer": [1044, 1049], "fevott": [421, 547, 549, 556], "few": [0, 46, 54, 57, 74, 81, 87, 128, 148, 154, 178, 181, 182, 207, 216, 218, 220, 236, 251, 252, 261, 278, 279, 283, 309, 314, 317, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 354, 360, 371, 379, 380, 381, 384, 386, 397, 399, 407, 410, 413, 414, 416, 420, 421, 423, 425, 426, 445, 457, 570, 571, 664, 701, 704, 906, 957, 1006, 1007, 1009, 1010, 1013, 1014, 1023, 1025, 1026, 1034, 1047, 1057, 1059], "fewer": [43, 53, 63, 90, 138, 147, 149, 218, 371, 385, 416, 425, 426, 456, 469, 550, 562, 603, 705, 843, 961, 1006, 1011, 1013, 1046, 1047, 1048], "fewest": [275, 636], "ff": 392, "ff0000": [67, 305, 312], "ff3333": 122, "ff7216": 122, "ff7f00": [79, 97, 245], "ff9c34": [94, 99], "ffaaaa": 305, "ffc107": 321, "fft": 649, "fhaselbeck": 1053, "fhoang7": 1050, "fhr": 255, "fi": 884, "fibins": [1049, 1050], "fidel": 53, "fidor": 1057, "fiedler": 1047, "fiegel": [1053, 1054, 1056], "field": [173, 236, 381, 413, 416, 417, 424, 472, 507, 510, 626, 1006, 1008, 1017, 1025, 1033, 1042], "fifth": [251, 1003], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 80, 88, 90, 92, 95, 99, 101, 107, 111, 113, 118, 120, 124, 129, 130, 134, 138, 144, 145, 148, 149, 151, 152, 154, 156, 157, 159, 161, 178, 184, 186, 192, 194, 196, 199, 205, 209, 212, 213, 215, 216, 218, 219, 222, 226, 231, 233, 236, 238, 239, 240, 241, 242, 243, 246, 248, 255, 256, 266, 270, 271, 272, 273, 276, 277, 278, 279, 282, 285, 286, 287, 290, 296, 297, 299, 301, 302, 310, 313, 314, 317, 318, 319, 321, 322, 323, 326, 330, 331, 344, 351, 353, 354, 355, 356, 358, 359, 360, 362, 391], "fig1": 102, "fig2": 102, "fig_num": 215, "figaspect": 321, "fight": [74, 222, 1034], "fighter": 104, "fignum": 352, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 101, 107, 109, 113, 115, 117, 118, 120, 121, 122, 124, 127, 128, 129, 130, 133, 134, 138, 140, 141, 148, 149, 150, 151, 152, 154, 157, 159, 160, 168, 177, 179, 183, 184, 186, 187, 191, 192, 194, 196, 198, 199, 202, 203, 208, 212, 215, 216, 217, 218, 219, 220, 222, 224, 226, 229, 232, 234, 236, 238, 239, 240, 242, 243, 245, 246, 248, 250, 253, 254, 255, 256, 261, 263, 264, 267, 270, 271, 272, 273, 278, 279, 280, 283, 285, 286, 290, 291, 296, 297, 299, 300, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 330, 331, 336, 338, 345, 347, 351, 352, 353, 354, 355, 356, 358, 359, 360, 927], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 111, 115, 117, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 150, 151, 152, 153, 154, 157, 158, 162, 164, 166, 168, 169, 172, 176, 177, 178, 179, 182, 183, 187, 191, 192, 193, 194, 198, 203, 206, 208, 211, 212, 215, 217, 219, 220, 224, 229, 233, 234, 235, 240, 241, 242, 245, 249, 250, 251, 253, 254, 256, 261, 263, 264, 267, 269, 275, 280, 281, 291, 302, 306, 307, 310, 312, 315, 317, 319, 320, 324, 326, 328, 336, 337, 338, 345, 347, 352, 363, 364, 365, 384, 416, 422, 423, 424, 426, 446, 640, 641, 706, 707, 709, 710, 711, 815, 832, 927, 999, 1003, 1006, 1009, 1010, 1013, 1014, 1017, 1018, 1024, 1025, 1026, 1054], "figure_": [68, 192, 256, 326, 328, 391, 446, 640, 641, 706, 707, 709, 710, 711, 815, 832], "figure_titl": 148, "filali": 1049, "file": [2, 47, 51, 52, 68, 83, 358, 359, 371, 372, 373, 378, 379, 381, 382, 387, 388, 389, 390, 396, 410, 417, 421, 495, 500, 502, 503, 505, 512, 517, 518, 543, 588, 589, 597, 598, 600, 925, 1013, 1026, 1031, 1033, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1060], "file_1": 512, "file_2": 512, "file_42": 512, "file_43": 512, "file_44": 512, "file_id": 378, "file_path": 500, "filenam": [2, 47, 55, 340, 379, 384, 390, 410, 496, 500, 509, 512, 513, 516, 597, 598, 600, 1041, 1046, 1049, 1050], "filesystem": [392, 402, 1054], "filho": 414, "filip": [1058, 1059], "filipj8": [1048, 1049], "fill": [70, 147, 164, 193, 271, 302, 363, 398, 417, 421, 524, 536, 547, 549, 556, 596, 639, 925, 927, 1000, 1013, 1026], "fill_between": [52, 151, 154, 164, 175, 180, 182, 184, 198, 199, 236, 276, 278, 279, 280, 286, 815, 832], "fill_between_": [815, 832], "fill_between_kw": [815, 832], "fill_betweenx": 95, "fill_diagon": [194, 241], "fill_legend": 236, "fill_valu": [187, 247, 257, 327, 430, 433, 439, 440, 636, 639, 1020, 1049, 1057, 1058], "fillna": [236, 255], "filo": [1041, 1044], "filter": [2, 18, 47, 54, 81, 82, 107, 224, 236, 274, 276, 299, 358, 372, 379, 390, 393, 416, 424, 456, 496, 497, 512, 597, 600, 604, 605, 606, 607, 608, 609, 783, 848, 949, 974, 1012, 1013, 1051], "filter_param": 783, "filtered_cv_result": 274, "filterwarn": [79, 97, 233, 313, 314, 384, 1020], "final": [2, 43, 52, 63, 64, 70, 75, 77, 90, 104, 105, 113, 115, 118, 121, 129, 138, 139, 141, 143, 148, 149, 152, 159, 162, 170, 180, 187, 190, 192, 194, 196, 198, 203, 205, 207, 215, 218, 220, 235, 236, 239, 245, 259, 265, 270, 274, 282, 294, 297, 323, 324, 326, 327, 347, 351, 371, 373, 379, 382, 384, 385, 386, 388, 397, 398, 413, 414, 416, 417, 420, 423, 424, 425, 445, 450, 455, 456, 460, 467, 470, 472, 545, 564, 565, 576, 577, 579, 603, 636, 656, 662, 668, 688, 699, 703, 728, 809, 841, 842, 873, 874, 910, 913, 999, 1000, 1002, 1006, 1007, 1010, 1013, 1016, 1017, 1020, 1023, 1034, 1046, 1049, 1050, 1051, 1052, 1054], "final_estim": [159, 326, 423, 576, 577], "final_estimator_": [576, 577], "final_estimatorridgecv": 159, "final_lay": 423, "final_layer_gbr": 423, "final_layer_rfr": 423, "final_step": 77, "financ": [270, 1011], "financi": [0, 51, 416, 423, 1006], "find": [2, 43, 44, 45, 51, 55, 64, 75, 81, 82, 83, 84, 87, 88, 90, 92, 100, 107, 113, 114, 124, 126, 128, 129, 134, 149, 159, 175, 179, 181, 183, 192, 203, 205, 207, 220, 226, 238, 240, 242, 243, 248, 255, 266, 270, 275, 276, 277, 287, 300, 305, 306, 307, 322, 326, 332, 334, 349, 350, 351, 354, 358, 359, 362, 372, 381, 382, 384, 385, 386, 389, 390, 393, 396, 397, 398, 399, 404, 413, 415, 416, 418, 419, 421, 423, 424, 425, 427, 449, 452, 453, 454, 458, 459, 460, 461, 470, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 567, 574, 591, 598, 619, 620, 656, 659, 662, 663, 664, 665, 667, 668, 680, 697, 716, 738, 739, 747, 791, 792, 793, 796, 797, 803, 808, 809, 823, 831, 855, 856, 857, 859, 861, 863, 864, 865, 886, 887, 892, 905, 906, 907, 921, 922, 924, 936, 956, 957, 959, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1016, 1020, 1024, 1025, 1026, 1028, 1030, 1033, 1034, 1041, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1059], "findal": 360, "fine": [43, 72, 147, 173, 222, 234, 267, 274, 351, 364, 365, 381, 388, 398, 424, 454, 957, 1013, 1016, 1025, 1030, 1051], "finer": [43, 52, 72, 299, 347, 372, 416, 420, 999, 1013, 1051], "finfo": [241, 479, 480, 486, 615, 659, 660, 663, 664, 665, 691, 692, 1056], "finish": [173, 264, 1007], "finit": [64, 261, 267, 371, 379, 398, 476, 547, 560, 591, 615, 618, 619, 620, 667, 737, 787, 794, 806, 834, 911, 937, 938, 939, 940, 1006, 1009, 1010, 1034, 1048, 1049, 1053, 1055, 1056], "finn": [1049, 1050], "firefox": 1020, "fireplac": 148, "fireplacequ": 148, "firm": [51, 416], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 90, 91, 93, 96, 99, 100, 101, 102, 104, 105, 106, 109, 113, 117, 118, 120, 121, 129, 132, 138, 139, 143, 145, 146, 147, 148, 149, 150, 152, 154, 156, 159, 160, 161, 162, 169, 170, 173, 175, 176, 177, 180, 181, 182, 183, 187, 190, 191, 192, 194, 196, 198, 200, 202, 207, 214, 215, 216, 219, 220, 226, 227, 232, 239, 242, 249, 250, 252, 253, 254, 256, 258, 259, 263, 267, 270, 271, 276, 278, 279, 283, 285, 287, 288, 294, 296, 297, 299, 302, 306, 307, 308, 312, 314, 317, 319, 322, 323, 324, 327, 328, 337, 340, 343, 344, 347, 349, 358, 359, 360, 362, 363, 366, 367, 372, 373, 378, 379, 381, 382, 383, 384, 386, 388, 389, 390, 392, 396, 398, 410, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 428, 451, 454, 455, 458, 467, 468, 472, 480, 491, 495, 496, 498, 499, 501, 503, 506, 509, 511, 513, 517, 518, 519, 537, 542, 543, 547, 550, 562, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 591, 593, 597, 598, 599, 600, 602, 603, 610, 619, 620, 626, 630, 633, 640, 641, 642, 643, 655, 661, 668, 675, 677, 683, 685, 697, 704, 707, 708, 709, 711, 721, 725, 745, 751, 772, 773, 791, 803, 806, 807, 812, 813, 814, 815, 816, 821, 823, 830, 832, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 878, 886, 890, 891, 892, 894, 895, 902, 903, 915, 918, 921, 922, 923, 924, 926, 928, 934, 935, 939, 940, 941, 959, 961, 976, 980, 983, 995, 998, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1017, 1020, 1021, 1024, 1025, 1026, 1034, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "first_img_data": 516, "first_pca_compon": 322, "first_quart": 133, "first_week": 154, "firstli": [127, 371, 396, 666], "fisach": 1047, "fiscal": 0, "fischer": [1046, 1047], "fischler": 1006, "fischoff": 1053, "fish": 329, "fisher": [381, 423, 513, 645], "fisher1958": 423, "fisher_transform": 645, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 124, 126, 127, 128, 129, 130, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 196, 197, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 241, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 294, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 358, 359, 362, 363, 364, 365, 366, 371, 373, 376, 379, 381, 384, 387, 389, 390, 393, 396, 398, 410, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 510, 518, 519, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 584, 586, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 703, 706, 707, 709, 710, 711, 719, 720, 732, 741, 744, 759, 797, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 932, 933, 949, 966, 969, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "fit_": 1054, "fit_algorithm": [124, 540, 546, 1056, 1057], "fit_and_evalu": 359, "fit_and_plot_model": 322, "fit_and_scor": 226, "fit_data": 59, "fit_dur": 297, "fit_ecoc": 1045, "fit_grid_point": 1052, "fit_intercept": [46, 198, 199, 204, 223, 232, 245, 284, 324, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 913, 914, 920, 1006, 1024, 1045, 1049, 1050, 1051, 1053, 1054, 1055], "fit_inverse_transform": [44, 129, 544, 1050], "fit_ovo": 1045, "fit_ovr": 1045, "fit_param": [252, 398, 440, 445, 450, 453, 473, 541, 543, 545, 546, 548, 551, 552, 558, 564, 565, 576, 577, 578, 579, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 639, 644, 647, 648, 649, 650, 651, 674, 680, 815, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 857, 862, 865, 869, 872, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 905, 906, 969, 1048, 1051, 1052, 1053, 1055, 1057, 1058, 1059, 1060], "fit_path": [659, 663, 664, 665, 691, 692], "fit_predict": [57, 91, 92, 95, 245, 255, 304, 386, 398, 416, 434, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 477, 572, 686, 801, 802, 806, 807, 859, 865, 873, 917, 933, 1016, 1046, 1049, 1050, 1054, 1056, 1058], "fit_prior": [379, 848, 849, 850, 852], "fit_status_": [915, 916, 917, 918, 919], "fit_tim": [52, 93, 148, 207, 226, 278, 420, 836, 837], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 278, "fit_times_svm": 278, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 84, 87, 88, 93, 97, 120, 125, 128, 134, 157, 196, 209, 234, 236, 238, 239, 240, 241, 242, 243, 248, 249, 252, 253, 259, 297, 301, 313, 317, 318, 322, 323, 324, 326, 329, 331, 332, 333, 334, 347, 358, 359, 360, 367, 376, 379, 386, 389, 390, 398, 412, 417, 421, 424, 425, 432, 440, 450, 451, 453, 455, 457, 472, 474, 476, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 697, 698, 699, 700, 701, 705, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 911, 933, 946, 1000, 1002, 1006, 1011, 1013, 1020, 1021, 1022, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1055, 1057, 1058, 1059], "fitfailedwarn": [2, 809, 812, 813, 815, 823, 832, 835, 836, 837, 840], "fitted_transform": [386, 472], "fittedcolumntransform": [159, 192], "fittedgridsearchcv": 257, "fittedpipelin": [159, 247, 257, 277, 290, 323, 327], "fittedrandomforestclassifi": 333, "fittedrandomizedsearchcv": 105, "fittedstackingregressor": 159, "fitter": 1026, "fitting_weight": 407, "fitzgerald": 1049, "fitzk": 1034, "five": [146, 154, 262, 270, 337, 340, 379, 540, 548, 554, 1007, 1013, 1025, 1034, 1041], "five_imag": 424, "fix": [2, 43, 47, 58, 62, 70, 81, 105, 133, 143, 144, 147, 152, 154, 175, 176, 180, 183, 191, 194, 203, 220, 236, 255, 267, 279, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 359, 371, 372, 378, 380, 382, 383, 384, 388, 392, 396, 398, 399, 407, 416, 417, 420, 421, 423, 424, 426, 460, 470, 480, 513, 521, 540, 546, 549, 551, 557, 558, 568, 569, 573, 574, 597, 600, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 639, 662, 672, 677, 679, 693, 696, 700, 704, 716, 794, 806, 823, 830, 855, 856, 858, 861, 863, 864, 880, 883, 897, 921, 922, 932, 957, 976, 999, 1006, 1009, 1010, 1013, 1020, 1030, 1039, 1040, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [597, 600], "fixedthresholdclassifi": [2, 270, 415, 831, 1059, 1060], "fixm": [388, 398], "fixtur": [372, 384], "fkaren27": 1055, "flach": [414, 1010], "flach2008": 1010, "flach2015": 1010, "flag": [180, 252, 255, 333, 382, 384, 385, 387, 407, 412, 472, 619, 620, 636, 682, 684, 737, 794, 929, 930, 1025, 1047, 1051, 1052, 1054, 1055, 1056, 1057], "flair": 1012, "flak": 1056, "flake8": 588, "flanagan": [1050, 1051], "flander": 1059, "flat": [2, 78, 124, 192, 238, 239, 240, 274, 416, 423, 424, 448, 454, 456, 469, 518, 1017, 1041, 1042, 1057], "flat_grid": 250, "flatnonzero": [133, 205, 275, 284, 285, 790], "flatten": [54, 68, 241, 250, 274, 321, 344, 355, 390, 511, 578, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 862], "flatten_transform": [578, 1048], "flatter": [43, 62], "flavanoid": [48, 381], "flaviomorelli": 1051, "flavor": [384, 1013], "flavour": 423, "flaw": [398, 423], "flaxman": [1043, 1045], "fledg": [373, 424], "fleet": 43, "fleme": 1056, "flennerhag": 1049, "fletcher": [1006, 1041, 1045], "flexibl": [43, 62, 148, 186, 218, 318, 344, 360, 391, 396, 410, 420, 426, 683, 913, 914, 932, 999, 1004, 1006, 1010, 1014, 1020, 1029, 1030, 1034, 1050, 1054], "flier": 49, "flink": 104, "flip": [128, 591, 751, 957, 1012, 1045, 1054], "flip_i": 524, "flip_sign": 957, "float": [2, 46, 49, 51, 57, 76, 80, 81, 82, 83, 88, 95, 96, 100, 101, 102, 105, 127, 130, 166, 183, 191, 204, 208, 241, 270, 275, 276, 280, 284, 354, 360, 371, 378, 379, 384, 393, 398, 412, 415, 416, 417, 424, 425, 427, 428, 429, 433, 435, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 592, 593, 597, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 619, 620, 622, 623, 624, 625, 626, 628, 629, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 775, 778, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 823, 826, 829, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 873, 876, 879, 880, 886, 887, 889, 891, 893, 894, 895, 896, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 936, 937, 939, 940, 943, 954, 955, 972, 984, 990, 995, 1000, 1010, 1011, 1013, 1014, 1020, 1025, 1026, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "float16": 1050, "float32": [55, 150, 241, 315, 331, 372, 379, 384, 385, 386, 398, 410, 412, 566, 567, 568, 569, 572, 573, 574, 575, 602, 603, 649, 650, 667, 708, 772, 878, 921, 922, 923, 924, 937, 985, 986, 987, 1026, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "float64": [45, 50, 52, 53, 83, 88, 105, 107, 150, 151, 152, 153, 164, 175, 191, 192, 251, 270, 284, 287, 330, 331, 332, 347, 372, 378, 384, 385, 386, 398, 424, 429, 466, 479, 480, 483, 486, 487, 488, 505, 506, 517, 518, 525, 526, 527, 529, 540, 546, 548, 551, 552, 554, 555, 557, 590, 591, 598, 600, 606, 650, 657, 659, 660, 663, 664, 665, 666, 667, 672, 678, 679, 682, 684, 689, 691, 692, 696, 703, 708, 715, 716, 717, 718, 719, 721, 725, 726, 728, 729, 730, 732, 734, 735, 738, 739, 740, 744, 745, 746, 747, 748, 749, 752, 757, 762, 764, 765, 792, 793, 795, 796, 797, 802, 803, 804, 823, 878, 886, 887, 894, 906, 915, 916, 918, 919, 922, 924, 934, 937, 939, 955, 980, 983, 985, 986, 987, 1025, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "float_info": 57, "floch": 1058, "floor": 53, "floor_x": 53, "flore": 1054, "florian": [1034, 1041, 1045, 1047, 1051, 1058], "florin": 1059, "flow": 386, "flowchart": [404, 420], "flower": [120, 132, 285, 515, 516, 1010, 1029], "floyd": [379, 697, 1007], "floydsoft": 1045, "fluctuat": [51, 95, 154, 218, 283, 1049], "flush": 226, "fly": [150, 389, 392, 517, 518, 591, 1041, 1043, 1050], "flyingdutchman23": 1054, "flyingimmidev": 1041, "flynn": [1054, 1056], "fmax": 236, "fmi": [416, 740], "fmin_l_bfgs_b": [619, 620], "fmt": [96, 229], "fn": [334, 416, 721, 727, 738, 739, 740, 791, 792, 793, 796, 1010, 1011], "fn_c": 285, "fna": [173, 381], "fnlwgt": [333, 505], "fnr": [273, 707, 736], "fo": 424, "focu": [43, 48, 124, 138, 175, 267, 307, 371, 389, 414, 423, 562, 563, 568, 570, 571, 687, 1007, 1013, 1020, 1029, 1030, 1033], "focus": [62, 111, 207, 294, 379, 384, 396, 1007, 1020, 1029], "fokow": 1058, "fold": [2, 43, 102, 108, 111, 144, 147, 150, 164, 172, 191, 207, 263, 270, 271, 272, 274, 276, 277, 279, 286, 290, 324, 339, 354, 367, 379, 384, 387, 388, 397, 398, 407, 415, 416, 425, 445, 480, 502, 545, 576, 577, 603, 611, 656, 660, 662, 664, 668, 670, 672, 674, 682, 684, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 844, 847, 894, 915, 918, 999, 1006, 1010, 1020, 1025, 1041, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1058], "folder": [2, 106, 379, 382, 384, 388, 392, 402, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 1013], "folkman": 1048, "folloni": 1052, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 80, 89, 90, 92, 98, 102, 105, 106, 122, 124, 133, 138, 141, 151, 152, 156, 168, 180, 181, 186, 190, 191, 192, 193, 194, 198, 200, 203, 205, 207, 216, 218, 219, 233, 236, 246, 252, 253, 255, 267, 270, 276, 285, 286, 290, 294, 317, 323, 324, 326, 327, 329, 330, 331, 334, 344, 354, 358, 359, 360, 362, 366, 367, 371, 372, 378, 379, 381, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 402, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 431, 433, 435, 437, 438, 439, 440, 445, 449, 451, 453, 454, 455, 456, 457, 461, 469, 471, 472, 473, 476, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 524, 543, 547, 549, 550, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 640, 642, 643, 655, 661, 667, 668, 679, 680, 689, 701, 703, 708, 714, 718, 722, 727, 797, 828, 850, 855, 856, 857, 859, 861, 863, 864, 865, 872, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 911, 913, 914, 918, 921, 922, 923, 924, 928, 935, 951, 952, 956, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1038, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "folwarczn\u00fd": 1058, "fonari": [1053, 1054], "fond": 1034, "fondat": 1034, "font": [151, 207, 232, 250, 925, 927], "font_manag": [114, 303, 346], "font_prop": 114, "font_siz": 321, "fontdict": [54, 74], "fontnam": [925, 1054], "fontproperti": [114, 303, 346], "fontsiz": [44, 47, 49, 54, 70, 85, 95, 121, 127, 147, 168, 178, 179, 181, 184, 192, 199, 208, 217, 229, 239, 240, 264, 271, 280, 281, 282, 287, 288, 315, 321, 353, 927], "fontweight": [95, 213], "foo": [386, 590, 1014], "food": [0, 381], "foot": 1028, "footer": [54, 104, 277, 358, 359, 379, 496, 497], "footnot": [1017, 1029], "footprint": [328, 331, 371, 373, 416, 421, 550, 564, 565, 566, 567, 572, 573, 574, 575, 1043, 1046, 1047, 1052, 1053, 1056], "fopenmp": [382, 385], "foral": [416, 426, 622], "forbid": [416, 423], "forbidden": [192, 423], "forc": [138, 175, 222, 297, 321, 358, 378, 382, 411, 420, 423, 458, 465, 472, 475, 505, 615, 618, 655, 656, 661, 662, 666, 669, 670, 671, 672, 681, 682, 683, 690, 693, 696, 763, 787, 790, 831, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 915, 916, 917, 918, 919, 937, 939, 940, 1020, 1036, 1046, 1049, 1050, 1051, 1053, 1054, 1055, 1057], "force_all_finit": [787, 937, 939, 940, 1052, 1055, 1060], "force_alpha": [848, 849, 850, 852, 1056], "force_finit": [615, 618, 737, 794, 1010, 1055], "force_int_remainder_col": [472, 475], "force_writ": [939, 940, 1059], "ford": 51, "forecast": [42, 43, 151, 154, 174, 182, 188, 220, 276, 414, 415, 426, 500, 505, 571, 620, 624, 631, 632, 634, 710, 751, 754, 755, 757, 799, 830, 835, 836, 839, 1010, 1029, 1031], "foreground": [75, 101], "foreign_work": 270, "foreman": 1048, "forese": 396, "forest": [2, 14, 50, 64, 67, 137, 143, 147, 149, 150, 152, 153, 154, 155, 157, 159, 162, 186, 188, 189, 196, 245, 273, 275, 277, 310, 328, 358, 365, 367, 377, 397, 398, 414, 425, 471, 472, 498, 499, 504, 505, 507, 524, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 639, 643, 809, 814, 839, 846, 873, 887, 917, 921, 922, 923, 999, 1000, 1011, 1018, 1026, 1030, 1031, 1032, 1036, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1058], "forest_import": 145, "forestclassifi": 1046, "forestcolumntransform": 159, "forestcov": 255, "forg": [326, 327, 328, 329, 330, 331, 332, 333, 334, 372, 385, 387, 388, 392, 402, 403], "forget": [192, 367, 372, 378, 388, 396, 421, 1007], "forget_factor": [421, 547], "forgiv": 743, "forina": 381, "fork": [382, 384, 392, 396], "forkserv": 396, "form": [2, 43, 48, 57, 68, 77, 95, 102, 124, 162, 182, 183, 188, 191, 251, 252, 267, 276, 336, 367, 378, 381, 384, 386, 388, 398, 399, 413, 416, 419, 420, 421, 422, 423, 424, 426, 428, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 467, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 708, 806, 807, 808, 809, 812, 813, 814, 817, 819, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 945, 966, 969, 999, 1001, 1003, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1016, 1020, 1025, 1029, 1047, 1051, 1053], "formal": [398, 399, 416, 423, 853, 854, 1007, 1010, 1011, 1014], "format": [2, 47, 50, 51, 52, 57, 59, 83, 89, 93, 96, 104, 113, 124, 133, 141, 147, 150, 152, 164, 168, 169, 196, 199, 204, 218, 236, 259, 271, 281, 283, 284, 287, 291, 301, 302, 305, 306, 321, 326, 334, 353, 362, 366, 371, 377, 383, 384, 386, 387, 392, 393, 397, 398, 410, 417, 420, 423, 424, 440, 450, 451, 453, 455, 457, 458, 460, 467, 472, 476, 490, 491, 492, 493, 495, 497, 505, 506, 507, 517, 518, 519, 532, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 560, 566, 567, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 596, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 655, 661, 667, 668, 669, 671, 675, 676, 677, 685, 686, 687, 697, 698, 701, 706, 720, 722, 729, 748, 749, 760, 777, 800, 801, 842, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 900, 905, 906, 911, 913, 925, 939, 940, 963, 971, 975, 985, 986, 987, 988, 989, 990, 1000, 1010, 1013, 1018, 1020, 1021, 1024, 1026, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1056, 1058, 1059, 1060], "format_func": 302, "formatter_result": 93, "former": [51, 360, 415, 423, 424, 574, 811, 818, 827, 1012, 1041, 1047, 1050], "formerli": [222, 1042, 1045, 1047, 1048], "formul": [138, 175, 184, 222, 285, 384, 416, 418, 421, 424, 426, 429, 483, 558, 559, 566, 573, 659, 660, 663, 664, 665, 667, 668, 674, 679, 772, 778, 807, 915, 918, 921, 923, 1006, 1010, 1011, 1014, 1020, 1032, 1036, 1058], "formula": [111, 112, 413, 416, 418, 429, 481, 483, 525, 526, 527, 599, 652, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 685, 687, 713, 738, 739, 764, 773, 830, 999, 1004, 1006, 1010, 1015, 1016, 1020, 1024, 1046, 1048, 1050], "forrest": [1052, 1053], "forsal": [57, 360, 379], "forsyth": 1049, "forth": 392, "fortin": [1041, 1043, 1044, 1045], "fortran": [428, 550, 655, 656, 661, 662, 669, 670, 671, 672, 674, 690, 693, 694, 695, 939, 940, 1041, 1044, 1045, 1049], "fortun": [390, 423, 1054, 1055], "forward": [46, 138, 173, 252, 328, 371, 384, 407, 410, 425, 517, 518, 548, 552, 562, 568, 569, 611, 677, 694, 695, 873, 877, 1006, 1030, 1053], "foster": [0, 1049], "fouchet": 1047, "found": [0, 45, 52, 57, 58, 59, 134, 145, 172, 175, 179, 181, 183, 222, 246, 253, 270, 274, 277, 278, 279, 322, 326, 329, 331, 332, 347, 360, 371, 373, 378, 381, 383, 384, 386, 396, 398, 399, 410, 413, 415, 416, 419, 420, 421, 423, 424, 426, 441, 449, 452, 453, 467, 480, 566, 567, 568, 569, 573, 574, 597, 599, 619, 620, 637, 645, 656, 660, 662, 664, 670, 672, 674, 680, 681, 683, 685, 687, 696, 697, 721, 728, 809, 812, 813, 823, 831, 850, 855, 856, 862, 884, 886, 887, 921, 922, 923, 924, 928, 936, 993, 997, 999, 1002, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1020, 1024, 1025, 1026, 1030, 1041, 1044, 1045, 1048, 1049, 1051, 1055, 1058], "foundat": [0, 159, 270, 384, 414, 1013], "founder": 1034, "fouqu": 1041, "fouquet": [1057, 1058], "four": [64, 169, 183, 196, 201, 219, 263, 264, 270, 337, 344, 380, 384, 398, 566, 573, 728, 921, 923, 945, 1006, 1008, 1009, 1010, 1020, 1028], "fourier": [2, 23, 250, 647, 648, 649, 650, 651, 767, 768, 1002], "fourier_approx_svm": 250, "fourier_scor": 250, "fourier_tim": 250, "fournier": 1050, "fourth": 147, "fowkl": [416, 740], "fowlk": [740, 1047], "fowlkes_mallows_scor": [2, 416, 1010, 1047, 1049], "fox": [334, 424, 1057], "fp": [47, 270, 334, 416, 721, 727, 738, 739, 740, 791, 792, 793, 796, 1010], "fp_c": 285, "fpgawesom": 1055, "fpr": [2, 50, 246, 255, 270, 273, 285, 286, 391, 601, 605, 707, 711, 715, 736, 798, 1010, 1038, 1041, 1057], "fpr_a": 285, "fpr_b": 285, "fpr_grid": 285, "fpr_score": 270, "fr": [540, 546, 667, 673, 694, 695, 767, 768, 1008, 1010], "fraa\u00df": 1058, "frac": [63, 113, 114, 138, 276, 283, 285, 329, 413, 414, 416, 418, 421, 422, 423, 424, 426, 439, 471, 473, 490, 491, 492, 563, 565, 567, 569, 571, 574, 577, 579, 620, 624, 628, 631, 632, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 687, 688, 689, 705, 738, 739, 764, 778, 846, 847, 856, 864, 871, 914, 916, 919, 922, 924, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1024, 1025, 1026], "frac12": [423, 1002], "fractal": [173, 381], "fraction": [2, 43, 62, 64, 151, 154, 218, 226, 236, 270, 283, 354, 359, 414, 420, 423, 446, 447, 457, 458, 464, 465, 524, 536, 566, 567, 568, 569, 573, 574, 575, 599, 602, 611, 675, 676, 677, 680, 685, 686, 687, 712, 730, 731, 732, 733, 743, 803, 805, 811, 815, 837, 838, 852, 880, 915, 916, 917, 921, 922, 923, 924, 975, 1006, 1010, 1013, 1017, 1018, 1020, 1025, 1026, 1030, 1042, 1043, 1044, 1055, 1058], "fragil": 664, "fragment": [90, 127], "frame": [43, 105, 154, 180, 191, 192, 218, 270, 323, 333, 379, 384, 396, 399, 497, 498, 499, 501, 505, 509, 510, 511, 513, 514, 519, 1053], "frameon": [46, 224], "framework": [276, 371, 386, 396, 398, 410, 416, 646, 697, 806, 1006, 1007, 1014, 1030, 1034, 1041, 1047], "fran": [1053, 1054, 1055], "franc": [323, 773], "francesco": [1053, 1056], "franci": [545, 667, 1006, 1047], "francia": 1055, "francidona": 1051, "francisco": [424, 1022], "franck": [1056, 1058, 1059], "franco": 1051, "francoi": [1041, 1054], "francoisgoupil": 1055, "frank": [276, 844, 1011, 1046, 1050, 1051], "frankhui": 1049, "franki": 1054, "franz": 1049, "franziska": 1052, "fran\u00e7oi": [0, 368, 1044], "fraud": [270, 334, 1006, 1034], "fraudul": [270, 1006, 1034], "fraudulent_accept": 270, "fraudulent_refus": 270, "fred": [104, 1041, 1054], "freddi": 1060, "freder": 1051, "frederick": 1054, "fredrik": 1049, "free": [0, 44, 64, 90, 180, 181, 187, 217, 266, 317, 378, 383, 384, 385, 392, 396, 402, 424, 460, 618, 680, 869, 919, 999, 1002, 1006, 1010, 1030, 1049], "freebsd": 387, "freedom": [43, 126, 180, 205, 207, 209, 276, 550, 665, 806, 1006, 1044], "freeland": 1056, "freestand": 386, "freez": [388, 402, 410, 1030, 1034, 1049], "frei": [73, 448, 462, 1051], "freija": 1049, "freita": [1046, 1048, 1049], "frellwan": 1054, "fremtpl2": 236, "fremtpl2freq": 236, "fremtpl2sev": 236, "french": [236, 323], "freq": [191, 203, 360], "frequenc": [57, 64, 175, 192, 203, 212, 218, 249, 327, 328, 358, 359, 360, 379, 396, 414, 420, 421, 423, 424, 425, 560, 566, 568, 569, 570, 573, 597, 598, 599, 600, 613, 667, 668, 673, 675, 677, 683, 684, 685, 694, 695, 842, 877, 886, 887, 913, 915, 918, 921, 923, 945, 1006, 1007, 1012, 1020, 1024, 1026, 1043, 1045, 1046, 1052, 1059], "frequent": [72, 138, 187, 279, 285, 286, 290, 359, 381, 384, 424, 560, 599, 639, 863, 886, 887, 890, 902, 1000, 1002, 1010, 1024, 1030, 1059], "frequentist": 537, "fresh": [547, 1030, 1051], "fresh_restart": 547, "fresh_restarts_max_it": 547, "freund": [423, 562, 563], "fri": [43, 154, 192, 379], "frid": [1034, 1044], "friedman": [2, 141, 142, 153, 275, 418, 420, 423, 486, 525, 526, 527, 529, 567, 568, 569, 574, 602, 603, 843, 921, 922, 924, 1004, 1006, 1011, 1017, 1026], "friedman2001": 423, "friedman2002": 423, "friedman_ms": [567, 568, 569, 574, 922, 924, 1026, 1057, 1058], "friend": [430, 1045], "friendli": [124, 372, 384, 392, 421, 906, 1022, 1023, 1029, 1030], "fring": [87, 416], "fritsch": [0, 406, 1041, 1042, 1044], "fritzk": 1056, "fro": [421, 547, 549, 556, 702, 1006], "fro_2": [670, 672], "frobeniu": [54, 127, 451, 455, 467, 477, 478, 479, 480, 481, 482, 483, 484, 540, 546, 547, 549, 554, 555, 556, 1006, 1048], "frobenius_norm": 697, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 373, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 397, 398, 399, 401, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 968, 970, 971, 972, 973, 974, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "from_dtyp": [43, 148, 270, 333, 423, 570, 571, 1058], "from_estim": [45, 48, 62, 64, 66, 67, 70, 91, 140, 143, 154, 155, 156, 160, 192, 202, 210, 227, 232, 251, 256, 258, 269, 270, 273, 278, 279, 283, 286, 292, 300, 305, 308, 322, 326, 327, 328, 329, 331, 332, 333, 334, 343, 344, 345, 346, 348, 349, 351, 363, 391, 414, 446, 640, 641, 642, 706, 707, 709, 710, 711, 727, 736, 791, 793, 796, 797, 798, 815, 832, 1005, 1010, 1017, 1038, 1054, 1055, 1056, 1057, 1058, 1059], "from_predict": [43, 52, 68, 109, 159, 191, 255, 272, 283, 285, 329, 336, 358, 391, 446, 640, 706, 707, 709, 710, 711, 727, 736, 791, 793, 796, 797, 798, 1010, 1038, 1054, 1055, 1056, 1057, 1058, 1059], "frombuffer_empti": 1048, "fromkei": [277, 928], "fromnumer": 390, "front": 1048, "frontal": 379, "frontend": 390, "frontier": [48, 232, 303, 346, 1016], "frozen": 386, "frozentransform": 386, "frsi": 1049, "fruit": [384, 1011], "fr\u00e9minvil": [1058, 1059], "fs1995": 423, "ftfy": 424, "ftorres16": [1055, 1056], "ftp": [173, 381, 691, 692], "ftwo_scor": [751, 1010], "fu": [667, 1045], "fuck": [1053, 1054], "fuction": 993, "fuent": [1042, 1043], "fugled": 1058, "fujikawa": 1048, "fukatani": 1048, "fulfil": [384, 416, 423, 809, 812, 813, 823, 873, 877, 1006], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 371, 372, 373, 377, 379, 382, 384, 386, 389, 392, 396, 398, 399, 402, 412, 416, 418, 420, 421, 424, 430, 433, 439, 440, 449, 453, 455, 457, 467, 496, 497, 500, 501, 505, 506, 509, 510, 511, 512, 513, 514, 516, 519, 544, 546, 550, 559, 568, 569, 576, 577, 641, 657, 659, 663, 678, 689, 730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 799, 800, 806, 807, 820, 850, 945, 999, 1006, 1009, 1012, 1013, 1017, 1020, 1023, 1030, 1041, 1045, 1047, 1049, 1051, 1052, 1054, 1055, 1057, 1058, 1059, 1060], "full_data": 198, "full_lik": 100, "full_model": 299, "full_scor": 187, "fulli": [52, 79, 90, 145, 151, 371, 378, 379, 384, 398, 416, 422, 423, 425, 451, 455, 566, 567, 573, 574, 921, 922, 923, 924, 925, 927, 1000, 1006, 1015, 1023, 1029, 1054, 1055], "fullpap": 1023, "fultz": 1054, "fun": [428, 542, 1034], "fun_arg": [428, 542], "func": [50, 109, 143, 191, 199, 236, 310, 384, 417, 473, 708, 877, 1020, 1045, 1047, 1049, 1050, 1058, 1059], "func_metr": 637, "func_min": [619, 620], "funcformatt": 302, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 81, 88, 89, 90, 92, 94, 101, 104, 105, 106, 109, 124, 127, 129, 133, 136, 143, 144, 148, 149, 150, 151, 152, 153, 154, 164, 169, 172, 173, 175, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 197, 198, 201, 203, 211, 213, 214, 215, 216, 218, 219, 224, 225, 226, 231, 234, 235, 236, 238, 246, 248, 251, 252, 255, 256, 258, 259, 266, 268, 270, 274, 276, 277, 278, 279, 284, 285, 291, 294, 297, 312, 315, 317, 324, 326, 327, 329, 330, 332, 334, 339, 341, 344, 345, 346, 347, 348, 349, 351, 354, 356, 358, 359, 363, 367, 371, 372, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 396, 397, 398, 402, 407, 410, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 427, 428, 431, 433, 435, 438, 439, 440, 445, 448, 451, 452, 453, 455, 456, 458, 460, 462, 465, 466, 467, 468, 469, 472, 473, 476, 477, 479, 480, 482, 486, 496, 497, 499, 501, 504, 505, 506, 512, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 581, 584, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 620, 624, 628, 629, 631, 632, 636, 637, 640, 641, 642, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 715, 720, 721, 725, 728, 730, 731, 732, 733, 737, 741, 743, 744, 747, 749, 750, 751, 759, 764, 766, 770, 771, 772, 774, 777, 780, 783, 787, 788, 789, 790, 791, 792, 794, 798, 801, 802, 803, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 885, 889, 890, 891, 892, 893, 894, 897, 899, 902, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 937, 947, 949, 950, 951, 956, 957, 968, 969, 975, 976, 979, 980, 983, 984, 993, 998, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "functiontransform": [2, 43, 104, 143, 218, 236, 340, 410, 472, 473, 1020, 1046, 1047, 1049, 1054, 1055, 1056, 1058, 1060], "functiontransformerfunctiontransform": 143, "functool": 236, "fundament": [72, 84, 114, 359, 388, 396, 397, 419, 505, 547, 549, 556, 717, 1006, 1010], "funder": 0, "fung": 420, "funnel": [45, 502, 503], "funni": 104, "furlanello": 752, "furrer": 1058, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 105, 111, 118, 124, 141, 147, 149, 172, 175, 180, 191, 193, 198, 203, 238, 243, 252, 270, 273, 276, 277, 283, 331, 347, 359, 366, 371, 384, 396, 398, 410, 415, 416, 418, 421, 423, 424, 426, 452, 460, 470, 524, 541, 544, 591, 623, 631, 637, 667, 668, 675, 676, 677, 685, 686, 687, 700, 704, 746, 783, 787, 790, 801, 802, 849, 855, 856, 863, 864, 891, 893, 913, 915, 918, 957, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1020, 1024, 1025, 1050, 1054], "furthermor": [43, 52, 72, 144, 192, 193, 255, 256, 258, 297, 358, 359, 371, 373, 391, 416, 421, 423, 424, 571, 599, 615, 628, 713, 745, 755, 764, 766, 804, 913, 1006, 1018, 1044, 1048], "fuse": [385, 1047, 1057], "fusion": 396, "futur": [0, 52, 180, 219, 258, 329, 332, 384, 388, 398, 399, 410, 420, 424, 505, 543, 644, 932, 979, 1011, 1025, 1026, 1034, 1038, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "futurewarn": [384, 392, 1048, 1049, 1050, 1052, 1054, 1057, 1058], "fuxin": 651, "fw": 697, "fwe": 601, "f\u00e9lix": [1041, 1043, 1044, 1045, 1049], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 88, 90, 100, 104, 115, 118, 131, 138, 141, 150, 151, 176, 177, 178, 183, 187, 190, 191, 201, 206, 218, 219, 220, 222, 236, 243, 251, 252, 261, 270, 276, 280, 281, 287, 296, 303, 322, 334, 339, 353, 354, 360, 367, 371, 376, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 396, 398, 407, 410, 412, 414, 416, 418, 420, 421, 423, 424, 425, 426, 428, 445, 451, 452, 455, 457, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 512, 537, 540, 542, 543, 546, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 602, 603, 606, 613, 619, 620, 626, 631, 632, 639, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 699, 701, 706, 725, 729, 737, 747, 749, 772, 787, 794, 797, 808, 810, 811, 812, 813, 815, 816, 818, 827, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 860, 862, 863, 864, 865, 869, 870, 871, 873, 876, 878, 879, 880, 883, 885, 886, 889, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 956, 957, 969, 999, 1000, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1024, 1025, 1026, 1030, 1033, 1034, 1041, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "g0g0gadget": 1051, "g2015": 1017, "g_": 416, "g_i": [423, 658], "g_j": [657, 678, 689], "ga": 0, "gaaca": 183, "gaatattaggccga": 396, "gabor": 1055, "gabriel": [1049, 1050, 1051, 1054, 1055], "gael": [0, 405, 1028, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "gaido": 1050, "gaidon": 1041, "gain": [2, 88, 154, 240, 283, 297, 299, 333, 334, 337, 358, 359, 366, 383, 390, 392, 423, 505, 541, 566, 570, 571, 573, 735, 765, 806, 807, 842, 921, 923, 1011, 1015, 1023, 1026, 1044, 1048, 1051], "gain_matrix": 270, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 379, 384, 386, 398, 402, 409, 1031, 1041, 1045, 1048], "galli": 1053, "gallopoulo": 421, "galvez": 1046, "gambl": 51, "gameiro": 1055, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 129, 160, 166, 196, 232, 245, 250, 251, 274, 276, 278, 281, 287, 292, 328, 336, 337, 339, 341, 344, 346, 347, 350, 351, 353, 356, 419, 421, 423, 426, 460, 544, 571, 628, 629, 648, 649, 650, 652, 653, 654, 657, 689, 694, 700, 733, 756, 761, 768, 775, 784, 785, 786, 806, 820, 823, 908, 909, 910, 915, 916, 917, 918, 919, 999, 1002, 1005, 1006, 1008, 1023, 1025, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1055, 1056, 1057], "gamma_": [544, 1057], "gamma_0": [261, 267], "gamma_2d_rang": 347, "gamma_bound": 629, "gamma_k": 419, "gamma_rang": 347, "gammaregressor": [2, 236, 327, 330, 689, 1006, 1052, 1055, 1056], "gandenberg": 1050, "ganesh": [1046, 1058], "ganevgv": 1051, "gangesh": 1053, "gangwar": 1048, "ganiev": [1046, 1047, 1048], "ganssl": 1048, "gap": [43, 52, 154, 358, 379, 420, 479, 480, 486, 597, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 830, 921, 922, 923, 924, 1006, 1007, 1049, 1053, 1055], "garagecar": [148, 159], "garagefinish": 148, "garagetyp": 159, "garageyrblt": 109, "garbag": 1053, "garcia": 1054, "garc\u00eda": [1050, 1051, 1056], "gardin": 378, "gardner": [1049, 1050], "garg": [1051, 1052], "gargsya": 1051, "gari": [379, 1048], "garret": 1045, "garreta": [1043, 1044], "garrett": 1045, "garri": 381, "garriga": [282, 420, 838], "gasmi": 1055, "gasquez": 1048, "gate": [381, 1054], "gather": [330, 332, 392, 399, 416, 1020, 1034], "gatsbi": 1023, "gaug": 191, "gaull": 773, "gaurav": [1049, 1050, 1051, 1052, 1053, 1055], "gauravahlawat": [1049, 1050], "gaussian": [2, 8, 19, 28, 43, 44, 46, 47, 48, 64, 66, 67, 70, 79, 81, 82, 90, 91, 92, 96, 100, 111, 112, 113, 114, 115, 121, 122, 125, 126, 127, 133, 136, 139, 140, 147, 151, 155, 157, 166, 187, 198, 201, 203, 205, 208, 228, 229, 230, 231, 245, 249, 251, 252, 263, 264, 287, 302, 307, 310, 312, 319, 320, 321, 341, 344, 351, 352, 356, 376, 380, 386, 389, 398, 416, 418, 421, 422, 428, 460, 477, 478, 479, 480, 481, 482, 483, 484, 505, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 539, 541, 553, 558, 559, 562, 572, 619, 620, 622, 623, 624, 626, 627, 628, 631, 632, 634, 636, 652, 653, 681, 686, 689, 712, 733, 750, 761, 785, 806, 807, 809, 823, 848, 849, 850, 851, 852, 853, 854, 858, 889, 893, 901, 905, 906, 907, 1004, 1006, 1007, 1008, 1016, 1031, 1032, 1034, 1035, 1036, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1053, 1055], "gaussian_filt": [53, 81, 82, 89], "gaussian_process": [2, 66, 67, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 398, 426, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 652, 1011, 1031, 1044, 1047, 1048], "gaussianhmm": 1041, "gaussianmixtur": [2, 79, 92, 262, 263, 264, 265, 266, 267, 422, 806, 1009, 1047, 1049, 1050, 1054, 1055, 1057, 1059], "gaussianmixturegaussianmixtur": 266, "gaussiannb": [2, 61, 62, 64, 67, 161, 278, 367, 414, 423, 445, 578, 848, 849, 850, 852, 874, 1004, 1011, 1012, 1045, 1046, 1047, 1049, 1054, 1057], "gaussiannois": 386, "gaussianprocessclassifi": [2, 66, 67, 176, 177, 178, 179, 183, 398, 426, 620, 628, 629, 631, 632, 1011, 1047, 1049, 1051, 1055], "gaussianprocessregressor": [2, 175, 180, 181, 182, 183, 184, 426, 619, 622, 623, 624, 625, 626, 630, 633, 634, 652, 1011, 1044, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "gaussianprocessregressorifittedgaussianprocessregressor": 180, "gaussianrandomproject": [2, 906, 1022, 1042, 1055, 1057, 1058], "gauthier": 1055, "gauz": 1049, "gave": [64, 414, 809, 812, 813, 823, 880], "gavin": [637, 1000], "gaynor": 410, "ga\u00ebl": [399, 1034], "gb": [162, 423, 562, 642], "gbc": 367, "gbdt": [143, 192, 270, 326, 327, 332, 389, 423], "gbdt_appli": 143, "gbdt_applyfunctiontransform": 143, "gbdt_cst": 327, "gbdt_leaves_yield": 143, "gbdt_model": 143, "gbdt_no_cst": [156, 327], "gbdt_pipelin": 159, "gbdt_with_monotonic_cst": 156, "gbdt_with_monotonic_cst_df": 156, "gbgradientboostingregressor": 162, "gbm": [150, 423, 1044], "gbm_early_stop": 149, "gbm_full": 149, "gbp": 1034, "gbr": 151, "gbr_l": 151, "gbrt": [43, 52, 218, 423], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 371, "gc": 49, "gca": [47, 79, 97, 118, 126, 178, 223, 227, 229, 245, 258, 280, 305, 307, 318, 343, 345, 348, 349, 1017, 1038], "gcc": [382, 385, 390, 396], "gcf": [47, 1017], "gcv": [682, 684], "gcv_mode": [682, 1043], "gd": [51, 162], "gdb": [385, 387, 1033], "gdex1": 1051, "ge": [51, 1001, 1012, 1053], "ge0": 1026, "gear": 1028, "geb": 57, "gebremichael": [1056, 1057], "gedeck": 1048, "geevarghes": 1056, "gefel": 1010, "gegr": 424, "gei": 1043, "geiger": [1058, 1059], "geist": 381, "gelavizh": 1052, "gelder": 1052, "gemm": 1059, "gen": 790, "gen_batch": [2, 393, 961], "gen_cov": 113, "gen_even_slic": [2, 218, 393, 960], "gender": [257, 886, 1020], "gender_femal": 886, "gender_mal": 886, "gene": [183, 378, 413, 459, 522, 602, 603, 860, 893], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 112, 114, 117, 118, 119, 120, 124, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 173, 176, 177, 178, 179, 180, 183, 186, 187, 190, 191, 192, 193, 194, 196, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 371, 372, 376, 377, 379, 381, 385, 386, 387, 388, 389, 390, 392, 393, 396, 397, 410, 413, 414, 416, 420, 422, 424, 425, 426, 428, 432, 437, 439, 445, 448, 451, 454, 455, 457, 460, 462, 466, 467, 468, 470, 472, 473, 475, 477, 480, 482, 490, 491, 492, 496, 499, 501, 504, 505, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 547, 549, 550, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 620, 623, 624, 627, 628, 629, 631, 632, 636, 637, 638, 639, 641, 642, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 684, 686, 687, 688, 689, 694, 695, 698, 699, 700, 701, 702, 703, 704, 710, 713, 715, 726, 730, 732, 733, 746, 752, 766, 787, 790, 794, 802, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 845, 846, 847, 853, 854, 856, 858, 859, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 901, 902, 903, 904, 905, 906, 913, 914, 915, 916, 918, 919, 922, 924, 925, 926, 927, 951, 952, 956, 957, 960, 961, 974, 978, 980, 983, 998, 999, 1000, 1002, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1022, 1023, 1025, 1026, 1031, 1032, 1033, 1034, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060], "generalis": [797, 1010, 1030], "generaliz": [351, 423], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 154, "generate_onli": [951, 1051], "generate_synthetic_data": 53, "generickernelmixin": [183, 1051], "genericunivariateselect": [2, 425, 604, 605, 607, 608, 609, 611, 1055, 1057, 1058], "generos": 384, "genesi": [1055, 1057], "genet": 1029, "genoa": 381, "genom": [58, 522, 1029], "genotyp": 378, "gensim": 1029, "gentil": [381, 1053], "gentli": 421, "genvalen": [1053, 1054, 1055, 1056, 1057], "geodes": [238, 697, 1007], "geoff": [844, 1011], "geoffrei": [870, 871, 1014, 1052, 1053, 1054, 1055, 1057], "geograph": [43, 50, 310, 379, 507], "geometr": [126, 416, 697, 713, 740, 766, 1007, 1049], "geometri": [74, 416, 1007, 1013], "geomspac": 332, "georg": [45, 379, 416, 1047, 1053, 1054, 1055, 1056], "georgi": [1049, 1052], "georgiamaydai": 1056, "geospati": [310, 422], "geovan": [1054, 1055], "geq": [249, 414, 421, 423, 1006, 1010, 1020, 1024, 1025], "ger": 424, "gerhard": [45, 379], "german_credit": 270, "germer": [1056, 1057], "geroldcsend": 1054, "geron": [1049, 1054, 1055], "gerstein": 522, "gertrud": 1048, "gertz": 458, "gervai": [1043, 1044], "gesa": 1053, "gesdd": 957, "gesvd": 957, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 83, 87, 91, 125, 129, 151, 154, 161, 170, 173, 175, 180, 181, 186, 191, 192, 193, 194, 211, 220, 233, 236, 238, 252, 253, 274, 277, 278, 280, 284, 287, 294, 297, 302, 310, 318, 326, 333, 337, 340, 344, 347, 349, 352, 356, 358, 360, 362, 372, 377, 378, 379, 382, 384, 385, 386, 387, 389, 390, 391, 398, 402, 410, 412, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 430, 431, 432, 437, 439, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 470, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 704, 708, 730, 731, 732, 733, 735, 741, 742, 751, 765, 772, 773, 778, 794, 797, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 946, 948, 949, 950, 956, 957, 962, 968, 999, 1005, 1006, 1007, 1009, 1010, 1020, 1023, 1024, 1025, 1026, 1030, 1038, 1041, 1044, 1047, 1049, 1052, 1054, 1055, 1058], "get_adjacency_matrix": 55, "get_arrai": [853, 854], "get_bin_se": 456, "get_cmap": [62, 64, 352], "get_color": 46, "get_config": [2, 476, 790, 911, 976, 1056], "get_covari": [541, 543, 550], "get_data": [517, 518], "get_data_hom": [2, 47], "get_depth": [921, 922, 923, 924, 1050], "get_feature_nam": [329, 1049, 1050, 1052, 1053, 1054], "get_feature_names_out": [2, 54, 57, 191, 193, 329, 358, 359, 360, 379, 386, 398, 417, 424, 432, 437, 440, 450, 451, 453, 455, 457, 472, 475, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 575, 576, 577, 578, 579, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 1020, 1054, 1055, 1056, 1057, 1058, 1059], "get_figur": 138, "get_full_scor": 187, "get_height": [47, 149], "get_impute_it": 187, "get_impute_knn_scor": 187, "get_impute_mean": 187, "get_impute_zero_scor": 187, "get_indic": [57, 431, 459, 461], "get_initial_mean": 264, "get_legend_handles_label": [154, 251, 278, 283], "get_lin": 313, "get_metadata_rout": [252, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 965, 966, 967, 968, 969, 1010, 1058], "get_metr": 708, "get_minibatch": 47, "get_n_cal": [853, 854], "get_n_leav": [921, 922, 923, 924, 1050], "get_n_split": [398, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830], "get_nam": 319, "get_output_feature_nam": 1055, "get_param": [277, 387, 398, 426, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1051, 1052, 1053, 1055, 1056], "get_precis": [477, 478, 479, 480, 481, 482, 483, 484, 541, 543, 550], "get_redirect": 55, "get_routing_for_object": [2, 252, 966], "get_scor": [2, 333, 398, 742, 1048, 1057], "get_scorer_nam": [2, 415, 741, 1010, 1055, 1058], "get_scores_for_imput": 187, "get_shap": [57, 431, 459, 461], "get_stop_word": [597, 598, 600], "get_submatrix": [431, 459, 461], "get_subplotspec": 391, "get_support": [169, 173, 328, 590, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 1043], "get_tag": 2, "get_tree_stat": [853, 854], "get_untrusted_typ": 410, "get_width": [47, 149], "get_x": [47, 149], "get_xaxi": [261, 307, 317], "get_xlim": [113, 213, 223, 317], "get_xticklabel": 287, "get_yaxi": [307, 317], "get_ybound": 88, "get_ylim": [213, 317, 318], "getattr": [43, 47, 270, 317, 386, 398, 1057], "getgaurav2": 1051, "getmoredataget": 404, "gettempdir": 1013, "getter": [477, 478, 479, 480, 481, 482, 483, 484, 602, 603, 606], "geurt": [423, 564, 565, 566, 567, 574, 575, 923, 924], "gewili": [1056, 1057], "gh": 384, "ghahramani": 908, "gharibi": 1051, "ghg": 1047, "ghislain": 1053, "gholdman1": 1052, "ghorai": 1049, "ghosh": [0, 406, 416, 1041, 1042, 1058, 1059], "gia": 1052, "giancarlo": 1055, "gianr": 1056, "gibb": [869, 1015, 1029], "gideon": 1051, "giessel": 1047, "gif": 83, "gigant": [1049, 1051, 1056, 1057], "gijsber": 1055, "gil": [371, 372, 385, 1044, 1049, 1050, 1053, 1054, 1058], "gilad": 1034, "gilberto": 1049, "gilbertson": [1055, 1056], "gilch": 1048, "gile": [1044, 1045], "gill": [0, 406, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "gilliam": 1048, "gilmor": 1045, "gim": 1053, "gini": [64, 194, 218, 236, 257, 288, 328, 562, 563, 566, 567, 568, 569, 573, 574, 575, 797, 921, 922, 923, 924, 999, 1018, 1026, 1049, 1050, 1057, 1058], "gionanidi": 1055, "giorgio": [1046, 1047, 1048, 1060], "giorgiop": 1046, "giotto": 1029, "giovanni": [1047, 1049], "gist": [384, 392, 1033], "git": [382, 386, 388, 390, 392, 1033, 1037, 1041, 1057, 1059], "github": [0, 51, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 297, 315, 323, 327, 328, 330, 331, 333, 338, 366, 382, 383, 387, 388, 389, 390, 392, 396, 398, 399, 410, 412, 701, 1028, 1029, 1033, 1051], "githubusercont": 51, "gitter": [1048, 1049], "giudic": 1053, "giusepp": [1049, 1050], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 84, 95, 97, 99, 104, 105, 109, 126, 150, 175, 180, 184, 186, 191, 192, 207, 209, 215, 218, 219, 220, 245, 267, 270, 273, 278, 285, 299, 303, 306, 315, 329, 330, 334, 340, 371, 373, 379, 381, 383, 384, 386, 390, 392, 396, 397, 398, 399, 404, 410, 413, 414, 416, 417, 418, 421, 423, 424, 426, 428, 441, 454, 455, 457, 459, 467, 480, 505, 508, 512, 542, 547, 558, 559, 560, 561, 566, 567, 573, 574, 575, 602, 603, 606, 616, 617, 647, 656, 670, 674, 685, 729, 739, 745, 748, 803, 809, 812, 813, 823, 834, 835, 836, 838, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 890, 891, 893, 894, 902, 1006, 1010, 1013, 1014, 1015, 1017, 1018, 1020, 1024, 1025, 1026, 1029, 1034, 1041, 1045, 1048, 1049, 1051, 1052, 1053, 1055, 1057], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 84, 93, 95, 111, 117, 125, 129, 144, 154, 155, 157, 159, 175, 182, 191, 192, 203, 218, 219, 222, 236, 239, 245, 249, 250, 252, 254, 255, 256, 270, 272, 276, 277, 278, 279, 285, 290, 300, 303, 304, 305, 319, 323, 329, 334, 358, 359, 360, 365, 366, 371, 373, 379, 383, 384, 390, 392, 393, 396, 398, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 433, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 464, 466, 467, 468, 469, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 495, 505, 510, 512, 514, 532, 542, 543, 545, 547, 548, 549, 552, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 602, 603, 610, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 640, 641, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 696, 697, 699, 700, 706, 707, 708, 709, 710, 711, 713, 714, 715, 721, 723, 726, 727, 729, 733, 735, 736, 743, 745, 746, 749, 761, 764, 765, 767, 768, 773, 783, 787, 790, 791, 793, 796, 797, 798, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 821, 823, 827, 831, 832, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 899, 900, 902, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 932, 943, 944, 945, 965, 966, 968, 993, 997, 999, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060], "gkevinyen5418": 1049, "gkf": 420, "gkiasta": 1054, "gl": [173, 381], "glad": 384, "glanc": [294, 383], "glaser": [1049, 1050], "glass": 379, "glasso": [418, 486], "glaxosmithklin": 51, "gleb": [1054, 1056, 1057, 1058], "glemaitr": [1050, 1051, 1053], "glen": 1054, "glenn": 1047, "glennfrutiz": 1055, "glibc": 392, "glm": [218, 236, 327, 657, 678, 689, 1006, 1041, 1052], "glm_freq": 236, "glm_pure_premium": 236, "glm_sev": 236, "glmnet": [655, 656, 1041], "glob": 47, "global": [2, 3, 47, 49, 77, 92, 124, 218, 238, 239, 259, 285, 314, 327, 367, 371, 372, 390, 396, 398, 416, 426, 450, 460, 470, 476, 599, 635, 641, 697, 700, 701, 704, 716, 738, 739, 747, 792, 793, 796, 797, 827, 894, 909, 911, 979, 999, 1007, 1010, 1016, 1020, 1026, 1034, 1049, 1056], "global_dtyp": 372, "global_random_se": 372, "globular": [97, 416], "glorot": [870, 871], "glossari": [2, 367, 384, 386, 390, 427, 428, 445, 448, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 472, 475, 477, 480, 482, 496, 499, 501, 504, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 592, 593, 603, 611, 616, 617, 619, 620, 636, 641, 643, 648, 649, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 701, 702, 703, 704, 710, 783, 787, 790, 802, 806, 807, 809, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 856, 858, 859, 861, 862, 863, 864, 866, 867, 869, 870, 871, 872, 875, 878, 890, 894, 902, 905, 906, 908, 909, 913, 914, 915, 918, 921, 922, 923, 924, 956, 957, 980, 983, 999, 1000, 1006, 1049], "glu": [173, 381], "glushchenkov": 1055, "gl\u00f2ria": [1054, 1056], "gm": 807, "gmil": 379, "gmm": [79, 94, 188, 260, 262, 265, 266, 267, 513, 521, 807, 828, 1009, 1031, 1041, 1042, 1045, 1046, 1047], "gmm_": 1042, "gmm_bic_scor": 266, "gmmgmm": 404, "gmmhmm": [1041, 1042], "gnb": [61, 62, 64, 161, 423, 578, 1012], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 382, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 379, 384, 388, 389, 393, 399, 402, 417, 421, 423, 425, 451, 570, 571, 729, 892, 934, 960, 961, 1020, 1026, 1030, 1052], "goadrich": 1010, "goal": [49, 55, 58, 64, 87, 92, 118, 154, 186, 192, 196, 218, 233, 236, 254, 255, 270, 273, 274, 358, 372, 373, 379, 389, 390, 398, 399, 401, 407, 421, 425, 551, 557, 599, 602, 748, 1010, 1013, 1015, 1016, 1024, 1025, 1026, 1034, 1049], "god": [57, 358, 359], "godbol": 792, "goe": [43, 72, 143, 191, 366, 384, 423, 479, 480, 486, 566, 567, 573, 574, 575, 921, 922, 923, 924, 1020, 1024], "goetz": [1048, 1049], "goh": 1058, "gohlk": 1046, "goix": [0, 1045, 1047, 1048, 1049, 1050], "gold": [69, 212, 219, 221, 224, 228, 232, 235, 262, 267, 283, 303, 346, 390], "goldbaum": 1059, "goldberg": [862, 1013], "goldfarb": 1006, "goldman": 51, "goldstein": [192, 1017], "goldszmidt": 1022, "gollonet": [0, 406], "goltermann": 1053, "golub": [543, 851, 893], "golubin": 1048, "gome": [1054, 1055, 1059], "gomez": [1049, 1056, 1058], "gommer": [1044, 1047, 1048, 1056, 1057, 1059], "goncalo": [1048, 1049], "gone": [1041, 1042], "gonthier": 1052, "goo": [173, 381], "good": [43, 48, 58, 62, 64, 75, 79, 81, 84, 87, 88, 90, 93, 108, 114, 118, 133, 144, 147, 150, 151, 154, 176, 180, 186, 191, 203, 207, 218, 219, 224, 233, 243, 245, 249, 252, 255, 262, 264, 269, 270, 276, 282, 292, 315, 322, 323, 328, 334, 336, 341, 347, 358, 359, 367, 371, 372, 373, 383, 385, 386, 387, 390, 392, 396, 398, 413, 414, 416, 418, 420, 421, 423, 424, 425, 426, 445, 447, 452, 543, 568, 570, 571, 599, 639, 649, 656, 657, 665, 667, 668, 670, 678, 689, 699, 703, 732, 740, 751, 773, 838, 907, 932, 957, 999, 1005, 1006, 1007, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1024, 1025, 1026, 1030, 1034, 1047], "goodby": 384, "goodman": [1041, 1046], "googl": [0, 55, 396, 416, 450, 1028, 1041], "gool": 1010, "gorb": 1053, "gordon": [57, 1047, 1051, 1053, 1055], "gorelli": [1049, 1050, 1054, 1056, 1059], "gorgolewski": [0, 406, 1041, 1044], "gorilla": 358, "gorinevski": 1006, "gorodkin": 752, "gorro\u00f1o": [1052, 1054, 1055], "got": [181, 252, 283, 367, 389, 560, 658, 674, 1054, 1056, 1058, 1060], "gotten": [1006, 1020], "gou": 416, "gouillart": 1041, "goupil": [0, 368], "gov": [55, 381], "govern": [191, 367, 371, 384, 398, 1034], "govin": 1047, "go\u0144da": 1056, "gp": [178, 183, 426, 619, 620, 631, 1047], "gp_fix": 176, "gp_opt": 176, "gpapadok": [1051, 1055], "gpassino": 1045, "gpc": [2, 66, 121, 147, 157, 166, 174, 180, 181, 188, 228, 229, 230, 231, 251, 265, 312, 319, 320, 341, 352, 356, 513, 619, 620, 622, 623, 628, 629, 631, 632, 712, 750, 1031, 1032, 1036, 1051], "gpc_rbf_anisotrop": 177, "gpc_rbf_isotrop": 177, "gperftool": 387, "gplearn": 1029, "gpr": [2, 174, 175, 176, 182, 184, 188, 505, 619, 620, 622, 623, 624, 625, 630, 631, 632, 633, 634, 1031, 1032, 1036, 1051], "gpr_model": 184, "gprof": 387, "gpu": [331, 334, 412, 1014, 1030, 1058], "gr": 906, "grab": 384, "gracefulli": [1044, 1045], "grad": [390, 1034], "gradd": 390, "grade": 1010, "gradi": 1051, "gradient": [2, 14, 46, 52, 81, 101, 105, 137, 138, 139, 142, 143, 145, 146, 156, 159, 162, 180, 181, 182, 188, 194, 197, 199, 205, 220, 241, 245, 250, 275, 277, 303, 313, 317, 321, 323, 330, 333, 346, 398, 415, 416, 426, 460, 470, 474, 475, 496, 498, 505, 510, 512, 529, 562, 563, 568, 569, 570, 571, 573, 574, 595, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 640, 641, 643, 644, 648, 657, 658, 667, 668, 677, 678, 681, 683, 685, 686, 687, 689, 696, 701, 703, 704, 750, 751, 757, 759, 799, 809, 812, 813, 814, 830, 836, 839, 869, 870, 871, 874, 886, 887, 917, 983, 1007, 1010, 1013, 1014, 1015, 1016, 1029, 1031, 1032, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1054, 1056, 1058], "gradient_boost": [143, 1043, 1044, 1050], "gradientboost": 1046, "gradientboostingclassifi": [2, 143, 150, 153, 319, 367, 396, 562, 570, 641, 642, 1011, 1017, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "gradientboostingclassifier__learning_r": 319, "gradientboostingregressor": [2, 46, 149, 151, 152, 159, 162, 371, 389, 396, 563, 571, 641, 642, 1006, 1010, 1011, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "gradientboostingregressorgradientboostingregressor": 162, "gradual": [222, 870, 871, 951, 952, 1024], "graduat": 381, "graham": [1046, 1047], "grai": [45, 53, 81, 82, 85, 86, 88, 124, 127, 153, 173, 216, 218, 236, 249, 253, 254, 283, 314, 381, 421, 502, 503, 511, 530, 1052], "grain": [43, 67, 72, 250, 267, 319, 390, 424, 454, 1030], "gram": [2, 188, 197, 386, 421, 424, 497, 533, 557, 597, 598, 599, 600, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 690, 691, 692, 693, 694, 695, 776, 999, 1006, 1020, 1025, 1031, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1054, 1055], "gram_test": 1025, "gram_train": 1025, "gramfort": [0, 124, 399, 405, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "grammar": 384, "grant": [0, 255, 270, 384], "granular": 1060, "grape": 417, "graph": [2, 55, 62, 74, 79, 81, 101, 102, 183, 238, 273, 297, 299, 339, 371, 384, 387, 398, 413, 418, 427, 449, 452, 453, 460, 461, 465, 470, 471, 479, 480, 486, 520, 594, 595, 697, 700, 701, 704, 791, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 868, 909, 963, 1007, 1010, 1013, 1015, 1023, 1026, 1029, 1034, 1041, 1048, 1049, 1051, 1054, 1056], "graph_laplacian": 1048, "graph_lasso": [486, 1049], "graph_model": 299, "graph_shortest_path": [393, 1054], "graphic": [8, 57, 114, 192, 340, 358, 359, 360, 379, 390, 416, 418, 421, 801, 802, 806, 843, 925, 1010, 1011, 1017, 1029], "graphical_lasso": [2, 393, 479, 480, 1049, 1057], "graphicallasso": [2, 115, 418, 477, 478, 480, 481, 482, 483, 484, 486, 1049, 1057], "graphicallassocv": [2, 51, 115, 407, 418, 479, 481, 482, 483, 484, 486, 1049, 1053, 1055, 1057, 1059], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [479, 1046, 1049], "graphlassocv": [480, 1043, 1049], "graphviz": [925, 1026], "grasp": [290, 1025, 1030], "grassberg": [616, 617], "grate": 1034, "graviton": 392, "gray_r": [68, 127, 178, 239, 315, 336, 337], "grayscal": 68, "greasemonkei": 392, "great": [90, 190, 191, 216, 367, 384, 396, 421, 773, 1030, 1034, 1041, 1048], "greater": [62, 122, 138, 140, 191, 235, 250, 255, 264, 270, 282, 296, 303, 304, 362, 371, 380, 389, 398, 414, 415, 416, 419, 423, 449, 453, 454, 457, 460, 471, 480, 545, 550, 566, 567, 568, 569, 570, 571, 573, 574, 575, 602, 603, 606, 619, 620, 637, 649, 651, 673, 675, 676, 680, 685, 686, 687, 701, 718, 721, 729, 744, 745, 748, 751, 797, 804, 806, 807, 843, 855, 856, 863, 864, 870, 871, 876, 891, 903, 907, 910, 913, 914, 921, 922, 923, 924, 957, 978, 999, 1005, 1006, 1007, 1010, 1011, 1016, 1020, 1025, 1026, 1044, 1049, 1052, 1054, 1055, 1056, 1058], "greater_is_bett": [151, 334, 751, 1010], "greatest": [90, 402, 416, 880, 1049], "greatli": [216, 250, 331, 384, 392, 460, 1013, 1026, 1047, 1055], "greedi": [173, 423, 425, 455, 457, 468, 568, 569, 611, 1006, 1026], "greedili": [118, 173, 416, 420, 425, 468], "greek": [51, 55, 59, 71, 83, 101, 188, 416, 470, 1031], "green": [63, 114, 122, 141, 156, 161, 175, 196, 243, 313, 318, 322, 327, 333, 398, 1011, 1049, 1050, 1052, 1053], "greenhal": 1049, "greg": [1034, 1047, 1048, 1050, 1051], "gregori": [1047, 1051, 1052, 1053, 1054], "gregorystrubel": 1054, "gregov": 1049, "grei": [44, 286, 317, 354, 379], "grep": 384, "greyscal": 315, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 89, 96, 105, 106, 107, 108, 111, 115, 147, 157, 168, 170, 172, 179, 188, 190, 191, 192, 207, 236, 243, 250, 251, 252, 256, 261, 266, 268, 270, 273, 275, 277, 280, 281, 283, 288, 296, 299, 301, 302, 310, 315, 319, 320, 322, 344, 346, 347, 353, 358, 379, 386, 391, 396, 398, 411, 417, 420, 422, 423, 424, 456, 469, 472, 480, 507, 511, 524, 531, 640, 641, 642, 656, 659, 662, 663, 665, 668, 670, 672, 685, 722, 737, 751, 794, 797, 809, 812, 813, 820, 823, 825, 839, 840, 873, 918, 1003, 1005, 1010, 1013, 1017, 1030, 1031, 1036, 1041, 1044, 1045, 1046, 1048, 1049, 1055, 1057, 1058, 1059, 1060], "grid_encod": 320, "grid_model": 299, "grid_posit": [62, 64], "grid_resolut": [192, 328, 345, 640, 641, 642], "grid_scores_": [1047, 1053, 1054], "grid_search": [108, 144, 257, 266, 274, 284, 333, 417, 1043, 1044, 1045, 1046, 1047, 1048], "grid_siz": [50, 96, 310, 379, 507], "grid_to_graph": [2, 82, 86, 89, 416, 424, 1054], "grid_tograph": 1044, "grid_valu": [192, 642, 1017, 1057], "gridsearch": [89, 111, 287], "gridsearchcv": [2, 43, 89, 103, 105, 107, 108, 111, 131, 144, 188, 251, 257, 266, 268, 270, 274, 275, 276, 277, 281, 284, 287, 294, 299, 301, 315, 319, 328, 332, 333, 347, 351, 367, 372, 386, 396, 398, 407, 412, 417, 420, 423, 426, 430, 511, 529, 549, 550, 584, 608, 616, 662, 712, 751, 820, 823, 873, 883, 913, 921, 999, 1006, 1010, 1014, 1024, 1025, 1030, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1060], "gridsearchcvifittedgridsearchcv": [106, 266, 270, 274, 276], "gridsearchcvinot": 257, "gridsiz": 249, "gridspec": [62, 64, 100, 261, 391], "gridspecfromsubplotspec": 391, "griffith": [1049, 1050], "grigorev": 1046, "grigorio": 743, "grime": [698, 702, 1007], "grinsztajn": 1058, "grisel": [0, 399, 405, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "griva": [1055, 1056], "grlivarea": 148, "grobler": [0, 406, 1041, 1042, 1043, 1044], "groceryheist": 1054, "groenen": [699, 703, 1007], "grok": 495, "groothui": [636, 1000], "grother": 381, "ground": [2, 27, 58, 68, 75, 80, 84, 92, 93, 96, 111, 115, 118, 127, 155, 183, 203, 212, 218, 219, 255, 267, 279, 359, 398, 416, 712, 713, 714, 717, 721, 722, 723, 724, 726, 727, 730, 732, 733, 735, 737, 738, 739, 743, 745, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 792, 793, 794, 795, 796, 799, 800, 804, 805, 1010, 1023, 1049], "ground_truth": [90, 304], "group": [0, 2, 51, 72, 75, 90, 93, 95, 161, 192, 194, 218, 239, 252, 267, 271, 323, 333, 338, 359, 366, 379, 389, 398, 399, 407, 416, 422, 423, 424, 441, 454, 504, 597, 598, 600, 603, 727, 797, 809, 810, 811, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 840, 886, 887, 923, 924, 951, 952, 1006, 1007, 1009, 1010, 1011, 1020, 1026, 1027, 1029, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1058, 1059], "group_1": 886, "group_2": 886, "group_3": 886, "group_by_dynam": 180, "group_df": 226, "group_kfold": 810, "group_prior": 271, "groupbi": [43, 154, 192, 226, 236], "groupkfold": [2, 271, 281, 333, 407, 420, 603, 814, 815, 816, 817, 818, 827, 832, 834, 835, 836, 837, 840, 1047, 1054], "groupshufflesplit": [2, 271, 420, 1047], "grow": [43, 52, 74, 196, 203, 299, 354, 360, 371, 396, 412, 418, 423, 424, 566, 567, 568, 569, 573, 574, 575, 819, 853, 854, 921, 922, 923, 924, 999, 1010, 1013, 1026, 1034, 1044, 1045], "grower": [154, 423, 570, 571], "grown": [381, 423, 562, 563, 564, 565, 566, 567, 573, 574, 921, 922, 923, 924, 1026], "growth": [1010, 1046, 1047], "grumman": 51, "grusak": 1051, "gryllo": [1046, 1049], "gryze": [1043, 1046], "grzegorz": [1048, 1051], "gs_time": 287, "gsh": 287, "gsh_time": 287, "gsiisg": 1056, "gsk": 51, "gss": [420, 811], "gt": [68, 105, 106, 143, 159, 191, 266, 274, 288, 384, 388, 404], "gu": [1052, 1053, 1055], "guan": 1051, "guangguo": 1047, "guarante": [46, 47, 64, 113, 114, 154, 191, 226, 249, 296, 297, 317, 359, 367, 373, 378, 392, 393, 410, 416, 420, 421, 424, 454, 545, 654, 667, 668, 677, 681, 683, 685, 687, 696, 703, 811, 826, 829, 853, 854, 891, 893, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 920, 939, 940, 1002, 1006, 1007, 1009, 1013, 1018, 1022, 1026, 1051, 1059], "gubri": [1049, 1050], "gudmalwar": 1053, "gued": 1059, "guerin": [1047, 1048], "guess": [55, 138, 147, 420, 423, 424, 541, 547, 549, 550, 556, 797, 1010, 1024], "guestrin": 423, "guha": 1056, "gui": [1042, 1052], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 90, 103, 124, 144, 184, 188, 191, 192, 205, 238, 283, 303, 304, 307, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 382, 383, 384, 389, 390, 391, 392, 397, 398, 399, 404, 407, 417, 423, 427, 428, 429, 430, 433, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 953, 1010, 1011, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1058, 1059, 1060], "guidanc": [396, 426], "guidelin": [2, 25, 383, 387, 389, 390, 392, 416, 423], "guiel": 503, "guilherm": 1044, "guillaum": [0, 405, 1034, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "guillem": [1050, 1051, 1056], "guillemot": [0, 1047, 1048], "guillermo": 1055, "guiniol": 1048, "guitar": 1056, "guitton": 1053, "guiweb": 1054, "gulati": [1046, 1047, 1048], "gun": [57, 379], "gunduz": 1059, "gunesbayir": [1056, 1057], "gunnar": [544, 957], "guo": 1054, "guoci": 1048, "gupta": [907, 1022, 1048, 1049, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "gustafson": [1056, 1057], "gustav": 1047, "gustavo": [1049, 1050, 1055], "gutierrez": 1051, "guttman": 703, "guyon": [524, 602, 603, 1010], "guyon2015": 1010, "gwulf": [1045, 1046], "gyeongja": 1059, "gz": [47, 388, 402, 517, 518], "gzip": 1041, "g\u00e9ron": 1049, "g\u00f3rski": [1052, 1053], "g\u00f6khan": [44, 421, 544], "g\u00f6n\u00fcl": 1059, "g\u00fcnther": [1054, 1058], "h": [44, 45, 52, 83, 93, 124, 125, 138, 139, 157, 173, 177, 191, 263, 302, 305, 312, 319, 330, 341, 343, 360, 381, 390, 414, 416, 418, 421, 422, 423, 424, 427, 452, 528, 541, 544, 547, 549, 556, 562, 576, 577, 591, 599, 616, 617, 698, 702, 713, 717, 766, 848, 852, 853, 854, 859, 869, 884, 893, 1002, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1024, 1026, 1047, 1052, 1056, 1057, 1058], "h1998": 423, "h2009": 1017, "h4dr1en": 1051, "h5py": 378, "h_": 1006, "h_i": [421, 1015], "h_init": 390, "h_j": 1015, "h_l": 1004, "h_m": 423, "h_pad": [124, 147, 363], "h_samples_": 869, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 85, 90, 91, 92, 95, 108, 113, 114, 118, 124, 136, 143, 147, 149, 151, 152, 154, 156, 161, 171, 172, 175, 180, 181, 182, 187, 191, 192, 193, 194, 196, 211, 215, 218, 219, 220, 224, 235, 236, 238, 245, 249, 251, 252, 255, 256, 259, 261, 262, 264, 266, 267, 270, 271, 274, 275, 276, 279, 280, 282, 287, 288, 296, 300, 303, 304, 305, 307, 314, 317, 318, 320, 322, 326, 327, 328, 329, 330, 332, 334, 336, 339, 347, 351, 352, 353, 358, 366, 367, 371, 372, 373, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 396, 397, 398, 399, 402, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 428, 441, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 502, 503, 506, 507, 517, 518, 525, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 628, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 696, 697, 698, 699, 700, 701, 704, 720, 722, 729, 731, 750, 772, 783, 787, 788, 789, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 823, 827, 830, 831, 832, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 930, 938, 939, 940, 946, 959, 978, 994, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1030, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "haan": 1050, "haar": [53, 1058], "haas": 1051, "habchi": 1051, "haberland": [1056, 1057], "haberth\u00fcr": 1048, "hack": [47, 49], "had": [43, 48, 82, 151, 154, 180, 252, 317, 323, 329, 367, 384, 385, 392, 407, 424, 427, 452, 1000, 1010, 1034, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1056], "hadamard": 386, "haddad": 1048, "hadrien": [1048, 1051], "hadshirt": 1051, "haenel": 1044, "haesun": [1053, 1056, 1057], "hafner": 1054, "hagai": 806, "hagberg": 55, "hahn": [1048, 1049], "haiat": 1053, "haidar": [1054, 1055], "hail": 323, "hailei": [1051, 1052], "hain": 379, "haitz": [1052, 1054, 1055], "hakaa1": [1048, 1049], "hal": [556, 667, 767, 768, 1008], "halchenko": [0, 405, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1057], "hale": [1043, 1055], "half": [2, 43, 61, 127, 154, 250, 254, 274, 276, 288, 379, 380, 421, 423, 471, 531, 571, 602, 606, 611, 779, 872, 880, 922, 1010, 1013, 1026], "half_cal": 606, "half_selector": 606, "halfbath": 148, "halford": [1049, 1056, 1057], "halkidi": 416, "halko": [421, 544, 550, 553, 956, 957], "hall": [1006, 1048, 1052], "hallock": 1047, "halpert": [701, 1007], "halv": [2, 168, 188, 268, 280, 284, 353, 411, 524, 573, 588, 809, 812, 813, 918, 1031, 1036, 1053], "halvic": 1053, "halvinggridsearchcv": [2, 287, 288, 328, 407, 412, 588, 813, 999, 1053, 1055, 1056, 1058, 1059, 1060], "halvingrandomsearchcv": [2, 151, 288, 328, 407, 412, 588, 812, 999, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 288, "halwai": 1047, "ham": [2, 46, 458, 465, 590, 708, 712, 718, 743, 750, 787, 788, 789, 805, 1013], "hamada": 1053, "hamdi": [1058, 1059], "hammerbach": 1045, "hamming_loss": [2, 46, 712, 805, 1010, 1043, 1047, 1050], "hammingdist": 708, "hammoudeh": 1050, "hamoumi": 1054, "hampu": 1045, "hamzeh": [0, 1044, 1045], "han": [416, 450, 458, 465, 1041, 1049, 1050, 1054], "hancock": 1051, "hand": [44, 65, 86, 88, 118, 126, 127, 129, 144, 151, 168, 171, 180, 188, 191, 192, 211, 222, 225, 242, 248, 249, 251, 252, 255, 269, 270, 273, 278, 285, 290, 301, 336, 337, 347, 371, 378, 379, 381, 384, 386, 390, 392, 397, 421, 422, 423, 425, 433, 439, 511, 652, 706, 722, 797, 839, 894, 918, 999, 1003, 1006, 1010, 1012, 1014, 1018, 1023, 1025, 1031, 1034], "handbook": [729, 749, 1010], "handi": [84, 105, 359, 360, 385, 1057], "handk": 1057, "handl": [0, 2, 43, 48, 105, 144, 148, 152, 154, 155, 159, 196, 203, 251, 252, 270, 278, 283, 285, 294, 296, 297, 304, 323, 326, 333, 358, 360, 366, 371, 376, 378, 384, 385, 386, 393, 396, 398, 423, 424, 426, 505, 553, 586, 590, 591, 597, 598, 600, 619, 644, 655, 656, 661, 667, 668, 669, 670, 671, 677, 684, 685, 687, 690, 729, 797, 877, 886, 887, 913, 914, 918, 925, 929, 958, 966, 969, 1007, 1010, 1011, 1012, 1013, 1016, 1018, 1025, 1026, 1029, 1030, 1034, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 105, 143, 148, 159, 192, 193, 247, 255, 257, 259, 323, 327, 330, 886, 887, 1020, 1045, 1049, 1053, 1054], "handler": 1052, "handler_map": 304, "handlerpathcollect": 304, "handletextpad": 363, "handpick": 245, "handprint": 381, "handwritten": [51, 71, 80, 83, 87, 94, 96, 143, 171, 188, 237, 238, 240, 242, 249, 264, 274, 307, 314, 315, 336, 337, 359, 377, 416, 423, 455, 511, 550, 553, 558, 575, 697, 698, 699, 700, 701, 713, 714, 726, 746, 802, 804, 862, 874, 883, 893, 906, 1007, 1013, 1031, 1036], "hang": [384, 1051, 1052], "hank": 1044, "hanmin": [0, 405, 1048, 1049, 1050, 1051, 1052, 1060], "hann": 1041, "hanna": [1045, 1046, 1052], "hannah": [1051, 1053, 1055], "hannel": [1049, 1050], "hansen": 1049, "hansin": [1055, 1056], "hanu\u0161": 1058, "hanxiang": [688, 1006], "hao": [1052, 1053, 1055, 1056], "haoi": 1058, "haoran": 1049, "haoyin": [1052, 1054, 1055], "happen": [2, 44, 64, 143, 205, 270, 317, 323, 359, 367, 371, 372, 382, 383, 384, 388, 389, 390, 396, 398, 399, 402, 410, 416, 418, 420, 423, 445, 524, 581, 667, 794, 891, 893, 913, 1006, 1010, 1011, 1025, 1030, 1049, 1053, 1054, 1056, 1057, 1058, 1059], "happi": [191, 270, 358, 396, 399, 827, 828], "haqu": [1043, 1044, 1045], "harabasz": [2, 719], "harabaz": 1047, "hard": [48, 218, 245, 249, 276, 278, 373, 383, 396, 398, 415, 416, 421, 424, 543, 550, 578, 685, 915, 916, 917, 918, 919, 1006, 1023, 1025, 1026, 1030, 1050, 1051], "hardcod": [448, 462, 1049], "harder": [285, 286, 321, 379, 383, 386, 392, 396, 416, 524, 570, 571], "hardest": 404, "hardin": 114, "hardli": [90, 616, 617], "hardwar": [57, 340, 360, 371, 372, 379, 382, 396, 402, 410, 412, 1029, 1055, 1056], "hare": 1006, "harfouch": 1057, "harikrishnan": 1043, "harizo": [1047, 1048], "harm": [358, 386, 424, 804], "harmanan": [1058, 1059], "harmon": [43, 72, 359, 416, 544, 550, 738, 739, 745, 792, 804, 1010], "haroldfox": [1049, 1050], "harper": 1048, "harri": [1045, 1047, 1053, 1054], "harsanyi": 1057, "harsh": [433, 445, 477, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 619, 667, 675, 677, 683, 684, 685, 808, 831, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 860, 863, 870, 908, 909, 913, 915, 918, 921, 923, 1051, 1053, 1056], "harshit5674": 1056, "hart": [381, 1004, 1049], "hartong": 1052, "harutaka": 1054, "harvest": 323, "harwar": 396, "has_fit_paramet": [2, 393], "hasan": 1056, "hasattr": [79, 91, 97, 115, 136, 147, 236, 249, 312, 319, 358, 398, 431, 435, 441, 970, 1051], "haseeb": [1054, 1055], "hash": [2, 47, 52, 137, 188, 253, 359, 360, 371, 373, 376, 384, 387, 396, 423, 523, 553, 566, 575, 590, 591, 598, 649, 848, 974, 1002, 1031, 1036, 1042, 1045, 1048], "hashabl": [398, 881, 884, 1021], "hashcode55": 1047, "hasher": [157, 360, 424], "hashingvector": [2, 47, 360, 373, 424, 497, 597, 599, 600, 1042, 1048, 1049, 1050, 1051, 1054], "hashlib": 47, "hasil": 1045, "hasn": 407, "hassaan": [1049, 1050], "hassan": 1054, "hassen": 1041, "hassoun": 1056, "hasti": [2, 138, 141, 142, 153, 173, 205, 275, 381, 420, 423, 528, 529, 562, 568, 569, 637, 665, 730, 732, 733, 843, 860, 906, 921, 922, 1000, 1004, 1006, 1011, 1017, 1022, 1024, 1026], "hat": [114, 133, 272, 276, 302, 329, 382, 414, 418, 422, 423, 1001, 1006, 1007, 1010, 1012, 1014], "hathidara": 1053, "hatwar": [1049, 1050], "hauck": 1047, "hausamann": [1049, 1050], "haussler": 183, "hav": 404, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 81, 82, 85, 88, 90, 92, 95, 97, 99, 100, 104, 105, 111, 113, 118, 121, 122, 129, 130, 138, 145, 147, 148, 149, 151, 154, 169, 170, 173, 175, 176, 180, 181, 182, 187, 190, 191, 192, 193, 194, 196, 198, 203, 218, 219, 220, 222, 236, 242, 245, 247, 252, 253, 255, 256, 262, 263, 264, 266, 269, 270, 276, 277, 279, 282, 283, 290, 291, 294, 297, 299, 300, 303, 304, 317, 322, 323, 324, 326, 328, 329, 333, 337, 338, 339, 344, 350, 351, 352, 354, 358, 359, 366, 367, 371, 372, 373, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 501, 503, 504, 505, 517, 518, 523, 532, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 696, 697, 698, 699, 700, 701, 708, 713, 714, 720, 721, 724, 729, 735, 740, 745, 751, 765, 766, 767, 768, 791, 794, 795, 801, 804, 806, 807, 808, 809, 812, 813, 814, 815, 820, 823, 827, 831, 832, 834, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 939, 941, 943, 945, 946, 957, 984, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "havelabeleddatado": 404, "haversin": [2, 310, 422, 708, 771, 773, 1013, 1050, 1053], "haversine_dist": [2, 771, 1050], "haversinedist": 708, "hawaii": 180, "haxbi": 0, "haya": 1055, "hayashi": 1049, "hbgt": 154, "hd": 51, "hdb": [90, 454], "hdbscan": [2, 71, 79, 84, 100, 188, 249, 452, 521, 893, 1000, 1029, 1031, 1035, 1036, 1057, 1058, 1059], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 378, "hdl": [173, 381], "hdmetor": 1047, "he": [384, 735, 765, 870, 871, 903, 904, 1010, 1048, 1055, 1056], "head": [0, 52, 63, 105, 180, 191, 205, 207, 236, 259, 266, 323, 326, 331, 384, 392, 405, 421, 1034, 1046, 1047, 1056, 1057, 1058, 1059, 1060], "head_width": 63, "header": [54, 104, 277, 358, 359, 379, 382, 424, 496, 497, 809, 812, 813, 823], "heali": 416, "health": 334, "heap": 458, "heapq": 471, "heard": 384, "heart": 255, "heat": [159, 347, 416, 460, 470, 704], "heatingqc": 159, "heatmap": [192, 194, 198, 203, 287, 331, 347, 641, 1017], "heatmap_kw": 641, "heatmaps_": 641, "heavei": 1049, "heavi": [220, 396, 413, 1030], "heavier": [133, 418, 1006], "heavili": [207, 371, 372, 384, 392, 658, 664, 787, 1027], "heavy_rain": [43, 192], "hebei": 416, "hedlund": 1057, "hedyati": 1045, "hee": [1048, 1051], "heer": 1052, "hegd": 1058, "heidelberg": [180, 416, 421, 544, 705, 735, 765, 1010], "height": [47, 54, 88, 127, 148, 149, 173, 317, 323, 333, 358, 422, 454, 502, 503, 515, 595], "heightpet_catpet_dogf64f64f64": 333, "heikki": 1022, "heilman": [1045, 1046], "heitz": 323, "held": [43, 47, 105, 131, 152, 193, 226, 263, 279, 284, 296, 420, 423, 568, 569, 570, 571, 710, 809, 812, 813, 823, 870, 871, 883, 999, 1000, 1009, 1018], "helder": [1045, 1054, 1055], "heldout": 225, "heldout_scor": 150, "helen": 331, "heli": 1048, "hello": [384, 392, 970, 974], "helloifeven": 970, "helm": 1059, "helmu": 1045, "help": [0, 41, 43, 48, 50, 90, 104, 108, 129, 134, 192, 203, 236, 238, 270, 277, 279, 294, 315, 344, 347, 359, 360, 367, 371, 372, 384, 385, 386, 387, 388, 389, 390, 392, 393, 398, 399, 401, 410, 416, 417, 420, 424, 426, 440, 545, 586, 636, 659, 663, 674, 694, 695, 701, 723, 849, 921, 922, 923, 924, 1000, 1004, 1005, 1007, 1009, 1010, 1012, 1014, 1020, 1021, 1026, 1028, 1029, 1030, 1033, 1034, 1047, 1048, 1049, 1052, 1055, 1059], "helper": [44, 45, 127, 236, 287, 377, 386, 387, 397, 398, 420, 476, 584, 911, 998, 1041, 1048, 1049, 1050, 1054], "helvetica": [925, 927], "heme": 1058, "hempstalk": 1048, "henc": [72, 95, 106, 191, 222, 249, 270, 285, 347, 358, 359, 371, 379, 386, 388, 390, 398, 402, 416, 420, 423, 424, 495, 517, 548, 550, 551, 552, 572, 599, 652, 655, 661, 669, 671, 681, 696, 713, 714, 718, 724, 740, 766, 795, 804, 825, 828, 829, 848, 849, 850, 851, 852, 888, 966, 1007, 1009, 1010, 1011, 1016, 1017, 1020, 1030, 1048, 1049, 1052, 1053, 1055], "hendrik": [0, 405, 1041, 1044, 1045, 1046, 1047], "henri": [1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "henriqu": 1060, "henrymooresc": [1055, 1056], "hepe": [688, 1006], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 92, 93, 101, 111, 115, 120, 122, 126, 127, 129, 130, 131, 132, 134, 138, 141, 144, 148, 152, 154, 159, 170, 173, 175, 183, 184, 191, 192, 193, 196, 198, 203, 207, 211, 218, 222, 224, 233, 234, 236, 238, 240, 245, 250, 252, 255, 256, 262, 263, 264, 269, 270, 273, 274, 276, 278, 279, 281, 283, 285, 286, 288, 290, 294, 297, 299, 306, 309, 313, 314, 315, 319, 322, 328, 330, 333, 336, 338, 347, 351, 354, 356, 360, 362, 367, 371, 372, 373, 378, 379, 382, 383, 384, 385, 386, 389, 390, 392, 396, 397, 407, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 427, 429, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 472, 480, 483, 545, 547, 548, 552, 553, 572, 576, 577, 578, 579, 590, 591, 593, 597, 600, 603, 611, 637, 639, 656, 660, 662, 664, 670, 672, 674, 682, 684, 698, 700, 704, 708, 721, 735, 755, 765, 803, 808, 809, 812, 813, 815, 823, 831, 832, 833, 834, 835, 836, 837, 838, 840, 849, 853, 854, 877, 885, 888, 891, 894, 905, 906, 916, 975, 999, 1002, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1020, 1022, 1023, 1024, 1025, 1029, 1030, 1033, 1034, 1041, 1049, 1054], "hereaft": 399, "hereund": 1016, "herilalaina": [1048, 1049, 1051], "hermano": [1056, 1057], "hermida": [1050, 1054], "hernandez": 1010, "hern\u00e1ndez": 1010, "hero": [418, 429, 483], "herrou": 1055, "hershei": 1010, "hertel": 1058, "herv": 1045, "hervieu": 1041, "herv\u00e9": 1045, "heryanto": 1048, "hesit": 384, "hessian": [238, 239, 240, 423, 570, 571, 657, 667, 668, 678, 689, 698, 702, 1006, 1014, 1035, 1036, 1056, 1060], "hessian_tol": [698, 702], "heterogen": [43, 48, 61, 90, 103, 105, 188, 192, 218, 259, 322, 326, 376, 378, 396, 472, 496, 550, 590, 600, 722, 873, 877, 913, 1007, 1017, 1020, 1029, 1031, 1036, 1045, 1049, 1051, 1052, 1059], "heteroscedast": [124, 131, 151, 220, 421, 889, 901], "heteroschedast": 1010, "heuer": 1044, "heurist": [51, 54, 150, 255, 358, 372, 416, 425, 457, 460, 469, 470, 517, 518, 546, 548, 555, 685, 686, 687, 700, 704, 812, 813, 915, 916, 917, 918, 919, 944, 1007, 1008, 1013, 1024, 1026, 1034, 1041, 1042, 1046, 1050, 1053, 1054], "hexbin": 249, "hexdigest": 47, "hgbdt": 144, "hgbdt_model": 192, "hgbdt_model_without_interact": 192, "hgbdt_preprocessor": 192, "hgbt": [144, 154, 423], "hgbt_cst": 154, "hgbt_no_cst": 154, "hgbt_quantil": 154, "hhu": [658, 1050], "hi": [0, 417, 1010], "hibon": 1048, "hida": [1056, 1057], "hidden": [43, 192, 314, 315, 384, 392, 413, 421, 869, 870, 871, 1014, 1015, 1029, 1041, 1052], "hidden_layer_s": [192, 256, 312, 314, 870, 871, 1014], "hide": [52, 78, 384, 392, 848, 849, 850, 851, 852, 1044, 1049, 1057], "hideaki": 1055, "hierarch": [2, 53, 59, 71, 74, 75, 79, 81, 87, 88, 89, 92, 188, 194, 242, 330, 366, 398, 424, 449, 451, 453, 454, 513, 521, 523, 531, 539, 556, 740, 866, 893, 1027, 1030, 1031, 1035, 1036, 1041, 1044, 1045, 1057], "hierarchi": [76, 194, 384, 458, 464, 471, 1015], "higgin": [1058, 1059], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 84, 90, 92, 97, 100, 104, 108, 113, 114, 126, 127, 141, 143, 144, 145, 146, 151, 152, 154, 155, 157, 173, 175, 181, 187, 190, 192, 193, 194, 203, 213, 219, 220, 222, 232, 238, 239, 240, 245, 249, 261, 267, 274, 278, 282, 283, 292, 303, 304, 312, 314, 319, 321, 322, 323, 324, 332, 339, 344, 346, 347, 358, 359, 364, 365, 371, 379, 381, 384, 389, 392, 393, 396, 397, 413, 414, 415, 416, 420, 422, 423, 424, 425, 426, 452, 455, 457, 458, 460, 477, 490, 491, 492, 562, 563, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 653, 679, 680, 688, 698, 701, 702, 735, 740, 751, 755, 765, 798, 801, 817, 819, 853, 854, 858, 887, 888, 892, 894, 915, 917, 918, 921, 922, 923, 924, 978, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1016, 1018, 1020, 1022, 1025, 1026, 1027, 1029, 1030, 1041, 1042, 1044, 1045, 1049, 1052, 1053, 1054, 1055, 1056], "high_cardin": 323, "high_cardinality_featur": 323, "high_cardinalityindex": 323, "high_i": 213, "high_precision_cv_result": 274, "high_recall_cv_result": 274, "high_x": 213, "higher": [43, 52, 92, 113, 127, 131, 138, 141, 143, 144, 151, 155, 171, 175, 177, 182, 183, 191, 192, 193, 196, 218, 219, 222, 236, 242, 243, 267, 269, 270, 274, 276, 279, 291, 302, 322, 347, 351, 358, 359, 360, 367, 371, 379, 382, 386, 413, 415, 416, 418, 423, 425, 426, 427, 452, 456, 457, 479, 486, 518, 541, 548, 552, 557, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 582, 597, 600, 616, 617, 628, 636, 640, 644, 646, 655, 656, 661, 662, 669, 670, 671, 672, 685, 687, 688, 713, 733, 737, 761, 794, 806, 809, 812, 813, 815, 823, 830, 832, 837, 840, 859, 862, 888, 905, 906, 907, 913, 914, 915, 916, 917, 918, 919, 926, 1002, 1006, 1007, 1009, 1010, 1013, 1017, 1020, 1024, 1025, 1042, 1047, 1049, 1056, 1058], "highest": [2, 55, 57, 63, 115, 169, 173, 222, 274, 276, 287, 328, 358, 384, 396, 414, 416, 420, 423, 425, 445, 564, 566, 573, 601, 604, 605, 607, 608, 609, 612, 613, 615, 644, 646, 735, 765, 803, 806, 809, 812, 813, 823, 910, 921, 959, 999, 1006, 1010, 1011, 1014, 1024, 1026, 1053], "highest_protocol": 410, "highli": [43, 48, 64, 106, 113, 114, 126, 134, 155, 203, 213, 223, 270, 276, 279, 285, 313, 351, 359, 371, 372, 384, 390, 396, 414, 416, 420, 423, 424, 460, 470, 505, 572, 680, 701, 821, 823, 869, 932, 1006, 1010, 1013, 1014, 1016, 1024, 1025, 1028, 1029], "highlight": [43, 54, 90, 105, 113, 122, 142, 143, 156, 173, 175, 176, 181, 186, 187, 192, 193, 196, 218, 219, 220, 236, 247, 257, 258, 259, 270, 271, 288, 290, 299, 321, 323, 339, 358, 360, 366, 384, 388, 389, 392, 396, 426, 451, 454, 455, 472, 475, 498, 499, 505, 510, 511, 513, 521, 524, 530, 533, 547, 550, 570, 571, 573, 574, 576, 608, 611, 637, 639, 641, 643, 649, 655, 657, 661, 667, 678, 689, 697, 706, 710, 711, 726, 727, 741, 751, 757, 787, 797, 804, 808, 809, 810, 812, 813, 815, 823, 831, 832, 835, 836, 839, 855, 857, 874, 878, 883, 886, 887, 888, 892, 893, 894, 910, 911, 913, 918, 921, 922, 952, 1007, 1010, 1018, 1020, 1025, 1031, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "highlight_min": [151, 207], "higuera": 378, "hila": 416, "hilbert": [223, 879, 1002, 1020], "hilferti": 113, "hill": [416, 456, 469, 1051], "him": 424, "himanshu": [1052, 1055], "hind": 1055, "hinder": 1051, "hing": [2, 62, 225, 228, 230, 284, 344, 345, 349, 351, 398, 675, 685, 744, 913, 920, 1006, 1024, 1025], "hinge_loss": [2, 351, 1010, 1045, 1053, 1054], "hinrich": 421, "hint": [191, 371, 385, 389, 407, 456, 1010], "hinton": [701, 862, 869, 870, 871, 1007, 1013, 1014, 1015], "hintz": 1047, "hiramatsu": 1058, "hirofumi": [1052, 1053], "hirsch": 1049, "hirschberg": [416, 726, 746, 804], "hirzel": 1054, "hispan": 191, "hist": [43, 62, 64, 88, 109, 140, 144, 218, 220, 249, 255, 270, 282, 302, 317, 321, 323, 330, 333, 423], "hist_drop": 148, "hist_n": 148, "hist_nbin": 317, "hist_no_interact": 331, "hist_one_hot": 148, "hist_ordin": 148, "hist_quantil": 330, "hist_x0": 317, "hist_x1": 317, "histgradientboost": 1053, "histgradientboostingclassifi": [2, 143, 144, 270, 326, 327, 328, 329, 331, 333, 372, 410, 568, 573, 641, 642, 1000, 1029, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "histgradientboostingclassifierhistgradientboostingclassifi": 270, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 270, "histgradientboostingregressor": [2, 43, 46, 52, 139, 144, 148, 151, 152, 154, 156, 159, 186, 192, 218, 323, 326, 327, 328, 329, 331, 332, 333, 423, 569, 574, 641, 642, 644, 1000, 1017, 1029, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "histgradientboostingregressor__interaction_cst": 192, "histgradientboostingregressor__max_depth": 148, "histgradientboostingregressor__max_it": 148, "histgradientboostingregressorhistgradientboostingregressor": [159, 323], "histgradientboostingregressorifittedhistgradientboostingregressor": [156, 331], "histogram": [2, 52, 62, 64, 88, 137, 139, 143, 148, 149, 151, 152, 156, 188, 218, 226, 249, 275, 277, 282, 302, 317, 328, 330, 332, 333, 414, 498, 505, 568, 569, 570, 571, 573, 574, 641, 651, 751, 757, 767, 768, 799, 809, 814, 830, 836, 839, 1002, 1008, 1020, 1031, 1035, 1036, 1053, 1056, 1058], "histor": [51, 218, 270, 1030], "histori": [51, 388, 568, 569, 1041], "hit": [220, 390], "hitesh": 1053, "hjortkj\u00e6r": 1055, "hkey_local_machin": 402, "hline": 126, "hlle": 1007, "hmasdev": 1055, "hmc": 51, "hmm": [1041, 1042, 1043, 1044, 1046], "hmmlearn": 1029, "hn": 390, "hnyk": [1047, 1048], "ho": [423, 564, 565, 1010, 1046, 1049, 1050, 1055], "hoang": [1050, 1051], "hobson": 1047, "hoc": [172, 173, 188, 268, 270, 279, 294, 334, 339, 398, 415, 505, 667, 825, 831, 836, 874, 893, 1031], "hochberg": [604, 1047, 1048], "hochreit": [413, 728], "hockei": [57, 379], "hoctor": 1053, "hoda1394": 1053, "hoenig": 1041, "hoesli": 423, "hoffman": [421, 545, 1046, 1053], "hogan": 1049, "hoh": 1049, "hold": [0, 47, 52, 63, 64, 218, 222, 252, 270, 277, 366, 377, 384, 385, 386, 398, 414, 416, 420, 423, 424, 426, 512, 566, 570, 573, 598, 641, 642, 643, 745, 809, 812, 813, 823, 849, 880, 881, 886, 887, 894, 897, 921, 923, 1000, 1004, 1010, 1014, 1024, 1025, 1026, 1049, 1053, 1059], "holdgraf": 1049, "holdselig": 424, "hole": [188, 237, 238, 243, 539, 701, 702, 1031, 1055], "holger": 1048, "holidai": [43, 192], "holm": [844, 1011, 1058], "holman": 1056, "holmstr\u00f6m": 1043, "holohan": [1056, 1058], "holt": [0, 406, 1041], "holub": 543, "home": [0, 2, 7, 51, 52, 151, 159, 179, 181, 183, 184, 246, 262, 315, 319, 331, 379, 382, 392, 402, 494, 500, 508, 688, 1034], "homebrew": [387, 402], "homepag": [379, 539, 1026], "homm": 1056, "homo": 93, "homogen": [2, 72, 73, 74, 79, 81, 84, 90, 93, 359, 379, 396, 398, 418, 423, 426, 454, 623, 713, 726, 740, 745, 746, 766, 804, 1007, 1008, 1010, 1050], "homogeneity_completeness_v_measur": [2, 416, 1050], "homogeneity_scor": [2, 73, 84, 93, 359, 416, 726, 745, 804, 1010], "homomorph": 1029, "homoscedast": [131, 248, 321, 1010, 1049], "homoschedast": 1010, "honda": 51, "honei": 1004, "hong": [1047, 1049, 1053, 1054, 1055, 1057, 1059], "hongh": 1049, "hongkahjun": 1048, "honglu": 1051, "hongshaoyang": 1056, "honl": [1053, 1054], "honolulu": 1010, "honor": 323, "hood": [410, 1006, 1025], "hoover": [1046, 1047, 1048, 1050], "hope": [30, 44, 181, 236, 398, 1050], "hopefulli": [279, 392, 1041], "hopfensperg": [1058, 1059, 1060], "hopper": 1046, "horizont": [66, 124, 238, 250, 317, 320, 389, 398, 472, 524, 706, 710], "horizontal_distance_to_hydrologi": 499, "horizontalalign": [51, 63, 67, 75, 79, 80, 97, 130, 245, 261, 312, 319], "hornik": 644, "hornstein": 1056, "horrel": 1048, "hoshia": 1055, "hossein": [1049, 1050, 1051], "host": [0, 144, 332, 358, 379, 384, 388, 392, 393, 500, 906, 1057], "hot": [2, 43, 105, 143, 146, 159, 191, 218, 285, 318, 319, 323, 328, 347, 398, 423, 424, 560, 575, 590, 657, 667, 668, 678, 689, 876, 878, 880, 881, 884, 886, 887, 894, 1006, 1020, 1049, 1055, 1056], "hot_r": [51, 317], "hotel": 1034, "hotspot": 390, "hotter": 146, "hour": [43, 154, 191, 192, 333, 384, 390, 505, 1007, 1028], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 154, 191], "hourly_wag": 190, "hous": [2, 109, 149, 159, 186, 187, 270, 317, 328, 377, 498, 1036], "house_pric": [109, 159], "houseag": [317, 328, 379, 498], "household": 379, "housestyl": [148, 159], "hover": 333, "hover_data": [144, 277], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 85, 86, 87, 88, 92, 95, 103, 104, 105, 108, 111, 113, 118, 133, 138, 139, 142, 146, 147, 148, 149, 151, 152, 154, 157, 159, 170, 171, 182, 188, 191, 192, 193, 194, 196, 200, 206, 207, 208, 214, 219, 220, 221, 222, 225, 226, 232, 236, 242, 243, 247, 250, 252, 254, 255, 256, 258, 267, 270, 271, 272, 274, 276, 277, 278, 283, 285, 286, 288, 289, 290, 291, 296, 297, 299, 300, 301, 303, 304, 309, 314, 322, 324, 327, 328, 329, 332, 333, 344, 345, 347, 350, 351, 354, 358, 359, 362, 366, 371, 372, 373, 379, 382, 383, 385, 386, 387, 389, 392, 397, 398, 399, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 430, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 513, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 631, 632, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 713, 729, 766, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 836, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 993, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1016, 1017, 1018, 1020, 1022, 1023, 1025, 1026, 1028, 1030, 1034, 1036, 1041, 1043, 1046, 1052, 1055, 1056, 1057], "howel": 1048, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 82, 84, 88, 90, 95, 106, 109, 111, 115, 117, 129, 131, 141, 143, 144, 148, 151, 152, 159, 170, 173, 175, 180, 181, 192, 193, 200, 207, 218, 222, 239, 242, 243, 245, 251, 252, 255, 270, 276, 283, 290, 291, 294, 296, 297, 302, 313, 317, 328, 334, 351, 354, 358, 359, 367, 371, 372, 373, 378, 379, 381, 383, 384, 386, 390, 392, 396, 398, 407, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 448, 451, 455, 457, 459, 462, 467, 505, 517, 541, 550, 560, 576, 590, 591, 592, 598, 615, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 641, 642, 647, 652, 664, 665, 681, 696, 701, 704, 709, 772, 774, 809, 811, 812, 813, 823, 826, 829, 836, 840, 841, 852, 870, 871, 876, 885, 886, 891, 915, 916, 918, 935, 962, 978, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1024, 1025, 1026, 1050, 1051, 1053, 1054, 1057], "hoyer": [421, 1044], "hp": 51, "hpq": 51, "hrishikesh": [1042, 1043], "hristo": [1049, 1056], "hsiang": [667, 1045], "hsieh": 1047, "hspace": [45, 53, 54, 79, 80, 97, 124, 236, 245, 261, 263, 264, 267, 302, 328, 337, 344], "hstack": [53, 69, 77, 161, 169, 243, 254, 271, 350, 420, 872], "hsuan": 1046, "ht2001": 1010, "htf": 423, "htm": [921, 922], "html": [2, 43, 47, 51, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 173, 180, 191, 192, 193, 196, 200, 246, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 379, 381, 384, 385, 387, 388, 392, 417, 420, 424, 430, 495, 517, 518, 667, 848, 852, 951, 952, 953, 1008, 1029, 1030, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060], "htmledit": [848, 852, 1008], "htmlparser": 47, "htsedebenham": 1056, "http": [43, 45, 47, 51, 52, 55, 61, 105, 173, 196, 218, 226, 234, 236, 243, 290, 294, 296, 297, 314, 378, 379, 381, 382, 384, 388, 389, 390, 392, 396, 398, 402, 416, 420, 425, 450, 457, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 517, 518, 519, 539, 540, 543, 546, 550, 604, 645, 650, 653, 658, 667, 673, 675, 676, 677, 680, 685, 688, 691, 692, 694, 695, 701, 704, 714, 730, 732, 733, 767, 768, 778, 848, 850, 852, 855, 856, 861, 862, 863, 864, 869, 891, 906, 907, 908, 921, 922, 951, 952, 1006, 1008, 1010, 1023, 1026, 1051, 1060], "hu": [1046, 1049, 1051], "hua": [572, 1016], "huang": [379, 667, 1047, 1052], "huangk10": 1052, "huard": 1041, "huber": [25, 201, 228, 423, 569, 658, 685, 687, 1024, 1041, 1043, 1044, 1053], "huberlossfunct": 1054, "huberregressor": [2, 89, 175, 188, 197, 216, 222, 223, 224, 324, 533, 679, 680, 681, 687, 688, 1006, 1031, 1047, 1048, 1049, 1050], "hubert": [416, 714, 724, 795], "hubert1985": 714, "hudson": 331, "hue": [154, 266, 276, 322, 381], "huerta": 1051, "hug": [0, 173, 405, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "huge": [220, 223, 371, 390, 636, 1044], "hugh": [888, 1043, 1054], "hugo": [45, 379, 1047, 1052, 1053, 1054, 1055], "hugorichard": 1053, "hugu": 1045, "hui": [205, 547, 549, 556, 665, 1006], "huiginn": 1041, "huilgolkar": [1042, 1043], "hujiahong726": 1057, "hull": 1058, "humahn": 1056, "human": [124, 192, 358, 384, 416, 421, 870, 871, 1010, 1017, 1050], "humid": [43, 192, 1017], "hunan": 1049, "hundr": [77, 150, 239, 321, 379, 420, 423, 570, 571, 1007, 1052], "hunt": 1056, "hunter": 1050, "hurt": [371, 543, 1049], "husak": 1055, "huszar": 1034, "hut": [701, 1007, 1046, 1048, 1051], "huynh": [1051, 1053], "hv": 424, "hvassard": 1055, "hwan": 1052, "hwang": 1047, "hybrid": [454, 658, 1029], "hye": 1052, "hyper": [2, 43, 64, 105, 144, 269, 270, 276, 281, 315, 347, 367, 386, 396, 397, 398, 411, 420, 423, 425, 476, 653, 654, 813, 821, 823, 869, 911, 1005, 1006, 1010, 1013, 1024, 1025, 1029, 1036, 1041, 1055, 1060], "hyperband": 999, "hyperbol": [351, 651, 870, 871, 1008, 1014], "hypercub": [245, 524], "hyperlink": 1043, "hyperparamet": [2, 105, 107, 108, 154, 175, 176, 182, 183, 186, 188, 192, 198, 203, 207, 232, 236, 245, 255, 268, 270, 274, 279, 281, 287, 288, 299, 315, 358, 386, 398, 416, 420, 421, 423, 426, 511, 544, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 652, 662, 668, 674, 682, 685, 737, 794, 809, 823, 918, 999, 1004, 1005, 1006, 1009, 1010, 1012, 1014, 1016, 1024, 1030, 1031, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057], "hyperparameter_baseline_similar": 183, "hyperparameter_grid": 333, "hyperparameter_length_scal": 624, "hyperplan": [121, 140, 178, 188, 197, 210, 227, 253, 279, 342, 343, 344, 345, 346, 347, 351, 352, 521, 640, 667, 668, 675, 677, 683, 684, 685, 686, 913, 915, 917, 918, 1024, 1025, 1031], "hyperspher": 380, "hypothes": 1006, "hypothesi": [151, 276, 282, 420, 699, 703, 838, 1007], "hypothet": 64, "hyunjin": 1041, "hyvarinen": [428, 542], "h\u00e9lion": 1052, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 306, 307, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 345, 346, 347, 351, 352, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 367, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 397, 398, 399, 401, 402, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 955, 956, 957, 959, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 981, 983, 984, 990, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "i_alpha_optim": 289, "i_ax": 297, "i_dataset": [79, 97, 245], "i_j": 1018, "iain": [173, 381, 1006], "iampat": 1049, "ian": [1043, 1045, 1050, 1051, 1053, 1056, 1057, 1059], "iasoon": 1055, "ibay": 1041, "ibieta": 1054, "ibm": [51, 57, 340, 360, 379], "ibn": 1041, "ibnukhsein": 1058, "ibraheem": 1050, "ibrahima": 1051, "ibraim": [1046, 1047, 1048], "ib\u00e1\u00f1ez": [1049, 1050, 1053], "ic": [47, 294, 328, 378, 381, 401, 509, 511, 519, 641, 642, 1036, 1053, 1054], "ica": [11, 126, 428, 1026, 1035, 1036], "ica_estim": 124, "icann": 705, "icassp": 1010, "icdm": [572, 1016], "icdmw": 416, "ice_lines_kw": 641, "icml": [62, 64, 414, 416, 424, 445, 447, 848, 850, 869, 1010, 1012, 1024, 1028], "icml03": 850, "icml09": [540, 546], "icon": [333, 386], "icyblad": 1048, "id": [2, 45, 52, 57, 236, 310, 366, 378, 379, 384, 392, 418, 420, 424, 430, 503, 504, 505, 925, 927, 952, 1049, 1050, 1053], "id3": [1032, 1036], "idea": [44, 88, 113, 114, 144, 173, 180, 191, 219, 238, 270, 302, 347, 362, 371, 372, 384, 389, 390, 418, 419, 420, 421, 422, 423, 425, 616, 617, 1006, 1007, 1010, 1013, 1016, 1028, 1034], "ideal": [218, 220, 236, 270, 273, 276, 283, 285, 286, 367, 383, 384, 385, 388, 389, 392, 396, 398, 414, 415, 735, 765, 999, 1009, 1024, 1025, 1030, 1033], "idelberg": 1058, "ident": [52, 57, 99, 150, 213, 218, 236, 245, 249, 341, 358, 379, 386, 398, 413, 416, 417, 418, 420, 426, 429, 446, 447, 460, 472, 473, 481, 483, 484, 487, 488, 489, 496, 512, 560, 568, 569, 573, 574, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 652, 688, 689, 708, 713, 714, 745, 794, 804, 811, 814, 824, 825, 828, 829, 855, 856, 862, 870, 871, 877, 878, 890, 902, 921, 922, 1003, 1004, 1007, 1010, 1013, 1014, 1025, 1045, 1049, 1050, 1051, 1055, 1059], "identif": [379, 384, 416, 506, 999], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 378, 379, 383, 384, 389, 398, 415, 416, 417, 420, 423, 424, 454, 458, 465, 495, 505, 517, 518, 564, 565, 566, 567, 572, 573, 574, 575, 615, 652, 658, 708, 721, 783, 838, 859, 878, 908, 909, 999, 1006, 1010, 1016, 1023, 1034, 1048, 1050, 1055, 1056], "idf": [2, 54, 57, 249, 358, 359, 360, 379, 421, 530, 553, 597, 598, 599, 600, 852, 860, 885, 999, 1008, 1012, 1020, 1041], "idf_": [424, 599, 600, 1049], "idier": [421, 547, 549, 556], "idiom": 390, "idl": 1052, "ido": [1056, 1057], "idpol": [218, 236], "idx": [50, 57, 80, 90, 133, 140, 144, 147, 154, 160, 184, 192, 194, 203, 210, 217, 218, 227, 239, 270, 363, 417, 420], "idx_a": 285, "idx_b": 285, "idx_r": 217, "idx_sort": 218, "idxmax": 354, "idxmin": 274, "ie": [75, 101, 125, 448, 713, 1006, 1020], "ieee": [98, 112, 114, 381, 416, 418, 425, 429, 456, 483, 543, 572, 673, 694, 695, 734, 778, 1006, 1010, 1016], "ieeexplor": 778, "ieic": [547, 549, 556], "iem": 667, "if_binari": [191, 259, 886, 1020, 1052], "if_delegate_has_method": [1054, 1055], "iff": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 884], "iforest": 255, "iforest_kw": 255, "iglesi": 1056, "ignacio": 1044, "ignor": [2, 43, 45, 47, 55, 79, 84, 90, 97, 105, 138, 143, 148, 156, 159, 192, 205, 218, 233, 246, 247, 252, 257, 259, 267, 313, 314, 322, 323, 327, 330, 351, 359, 372, 384, 386, 388, 390, 398, 402, 407, 416, 417, 423, 424, 434, 435, 438, 441, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 468, 469, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 512, 517, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 590, 591, 592, 597, 598, 599, 600, 606, 611, 612, 619, 620, 636, 637, 638, 639, 641, 642, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 716, 720, 722, 723, 735, 738, 739, 747, 764, 765, 772, 778, 783, 787, 792, 793, 796, 797, 806, 807, 808, 810, 811, 812, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 871, 872, 873, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 905, 906, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 932, 946, 984, 993, 998, 1006, 1007, 1010, 1012, 1016, 1020, 1025, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059], "ignore_attribut": 378, "ignore_error": 89, "ignore_implicit_zero": [890, 902], "ignore_ti": [735, 765], "ignore_warn": [226, 319, 1047], "ignored_new_col": 417, "ignorerevsfil": 384, "igor": [1047, 1048, 1054], "ih": 302, "ii": [50, 125, 192, 225, 271, 381, 424, 591, 592, 598, 647, 675, 676, 876, 885, 1006, 1020, 1028, 1058], "iid": 1049, "iii": [1055, 1058], "iijima": 1050, "iinfo": 1056, "ij": [276, 307, 413, 416, 421, 547, 549, 556, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 1006, 1007, 1010, 1012, 1015, 1020, 1025], "ijcnn": 1010, "ijcv": 1010, "ijet": 416, "ik": [1006, 1010], "ikeda": 1053, "ikko": 1054, "il": [49, 673, 694, 695, 1006, 1010], "ilambharathi": [1044, 1045], "ili": [1057, 1058], "ilic": 1054, "ilion": 1055, "iliya": 1056, "iljin": [1056, 1057], "ill": [75, 115, 223, 315, 479, 480, 486, 659, 660, 663, 664, 665, 691, 692, 1006, 1009, 1051], "illustr": [48, 52, 60, 61, 63, 67, 69, 87, 91, 92, 104, 105, 108, 109, 111, 113, 118, 122, 126, 138, 141, 146, 153, 154, 156, 158, 159, 168, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 188, 190, 192, 193, 196, 207, 214, 215, 218, 220, 222, 226, 228, 229, 231, 232, 235, 236, 238, 239, 241, 243, 245, 247, 248, 250, 251, 252, 254, 265, 270, 276, 283, 288, 289, 290, 298, 306, 320, 322, 325, 326, 328, 334, 339, 347, 348, 352, 354, 355, 356, 359, 360, 365, 367, 371, 381, 384, 389, 392, 397, 415, 419, 421, 423, 424, 524, 619, 620, 622, 623, 624, 628, 631, 632, 862, 999, 1006, 1010, 1013, 1016, 1022, 1023, 1024, 1025, 1029, 1031, 1034], "iloc": [43, 154, 159, 191, 192, 236, 276, 300], "ilya": [1048, 1059], "im": [124, 134, 287, 301], "im_": 706, "im_kw": [706, 1055], "imacul": 1047, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 81, 83, 86, 89, 93, 97, 102, 104, 123, 124, 129, 146, 171, 173, 179, 188, 209, 239, 247, 250, 254, 274, 306, 314, 315, 327, 336, 337, 358, 359, 376, 377, 379, 381, 384, 389, 392, 398, 402, 409, 415, 416, 421, 449, 453, 460, 470, 502, 503, 504, 505, 511, 512, 515, 516, 543, 544, 546, 550, 592, 593, 594, 595, 596, 616, 617, 700, 706, 747, 839, 883, 1006, 1010, 1011, 1013, 1015, 1022, 1026, 1029, 1031, 1034, 1036, 1041, 1044, 1049, 1050, 1054, 1056, 1057], "image_arrai": 83, "image_array_sampl": 83, "image_height": [592, 593, 596], "image_index": [336, 337], "image_nam": 515, "image_patch": 596, "image_reconstruct": 596, "image_s": 596, "image_shap": [124, 254], "image_width": [592, 593, 596], "imagebox": 239, "imageio": 378, "imagenet": [870, 871], "images_restor": 86, "imagin": [125, 175, 252, 351, 420, 421, 424, 1006], "imamura": 1055, "imbal": [269, 279, 290, 420, 716, 738, 739, 747, 792, 793, 796, 797, 1010], "imbalanc": [218, 270, 279, 283, 285, 290, 359, 396, 414, 420, 712, 717, 796, 810, 814, 850, 1010, 1012, 1018, 1029], "imbert": [1048, 1050, 1053, 1055, 1058, 1059], "img": [44, 85, 101, 515, 595], "img_height": 592, "img_shap": 146, "img_to_graph": [2, 81, 101, 424, 1044, 1054], "img_width": 592, "imit": 358, "immanuel": [0, 1041, 1042, 1046], "immedi": [90, 384, 396, 809, 823, 834, 835, 1049], "immens": 1034, "immensu": 1049, "immers": [699, 703], "immobil": 43, "immut": 410, "imp": 1000, "imp_mean": [636, 639], "imp_reshap": 146, "impact": [51, 52, 62, 71, 72, 77, 78, 99, 109, 138, 169, 188, 190, 191, 192, 199, 220, 222, 236, 255, 269, 270, 294, 300, 322, 331, 354, 359, 367, 371, 372, 377, 396, 399, 414, 416, 421, 455, 457, 545, 549, 556, 599, 675, 676, 677, 681, 683, 685, 686, 687, 701, 803, 809, 812, 813, 823, 836, 853, 854, 855, 856, 890, 902, 913, 914, 942, 957, 980, 983, 999, 1009, 1017, 1025, 1031, 1048, 1051, 1054], "imped": 392, "imperfect": [737, 794, 1010, 1043], "imperfectli": [712, 743, 1010], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 81, 91, 114, 124, 144, 154, 187, 194, 196, 203, 207, 232, 236, 238, 245, 251, 252, 270, 274, 276, 285, 294, 296, 297, 299, 302, 320, 326, 327, 328, 329, 330, 332, 358, 360, 371, 372, 373, 378, 379, 381, 382, 384, 385, 386, 389, 390, 392, 393, 398, 402, 407, 412, 413, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 445, 450, 451, 452, 454, 455, 456, 457, 458, 483, 502, 505, 517, 541, 542, 543, 544, 545, 547, 550, 551, 552, 562, 563, 564, 566, 567, 570, 571, 572, 576, 581, 591, 597, 598, 600, 602, 606, 610, 619, 620, 641, 642, 649, 650, 654, 655, 662, 666, 667, 668, 672, 673, 677, 680, 681, 683, 684, 685, 686, 687, 693, 694, 695, 696, 697, 700, 701, 704, 716, 720, 729, 744, 747, 751, 787, 791, 797, 798, 806, 808, 809, 812, 813, 815, 823, 827, 828, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 858, 861, 863, 864, 869, 870, 871, 873, 895, 903, 904, 910, 913, 914, 915, 916, 917, 918, 919, 956, 957, 966, 969, 974, 978, 980, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1020, 1022, 1023, 1026, 1027, 1029, 1030, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "impli": [43, 175, 191, 358, 359, 360, 421, 423, 426, 482, 582, 591, 619, 620, 631, 744, 943, 1006, 1007, 1052], "implic": [367, 384], "implicit": [2, 218, 398, 423, 424, 581, 691, 692, 1004, 1009, 1029, 1050], "implicitli": [360, 393, 423, 606, 641, 642, 892, 1000, 1002, 1017, 1020, 1025, 1059], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 401, 402, 403, 407, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 970, 971, 972, 973, 974, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1031, 1034, 1036, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1059], "importance_gett": [425, 602, 603, 606, 1053], "importances_mean": [145, 152, 193, 194, 326, 643, 1018], "importances_std": [145, 643, 1018], "important_word": 57, "importantli": [43, 53, 125, 181, 192, 196, 317, 384, 416, 1059], "importerror": [50, 88, 127, 297, 310, 392], "importlib": 1054, "impos": [74, 92, 156, 206, 212, 222, 323, 396, 416, 421, 423, 424, 536, 666, 1006], "imposs": [151, 360, 1030], "impract": 918, "impress": 1034, "improp": [398, 1048], "improv": [0, 30, 43, 61, 62, 69, 111, 112, 115, 129, 134, 138, 139, 144, 147, 149, 150, 151, 153, 154, 159, 169, 187, 191, 196, 204, 218, 226, 236, 270, 277, 279, 294, 297, 300, 315, 322, 332, 350, 351, 359, 367, 372, 382, 387, 389, 390, 392, 393, 396, 398, 399, 410, 421, 423, 425, 457, 458, 540, 541, 543, 546, 547, 548, 550, 551, 552, 555, 563, 566, 567, 568, 569, 570, 571, 573, 574, 619, 620, 652, 661, 673, 675, 676, 677, 681, 682, 683, 684, 685, 687, 694, 696, 701, 738, 739, 792, 793, 796, 797, 862, 870, 871, 887, 889, 901, 921, 922, 924, 957, 999, 1004, 1006, 1007, 1010, 1013, 1014, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "improvis": [50, 310], "impur": [152, 194, 366, 401, 423, 425, 562, 563, 566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 925, 927, 1026, 1036, 1046, 1047, 1048, 1049], "imput": [2, 105, 154, 159, 193, 247, 257, 259, 327, 330, 376, 388, 397, 398, 407, 417, 423, 498, 510, 574, 589, 636, 637, 638, 639, 648, 654, 681, 835, 856, 874, 938, 940, 1029, 1030, 1031, 1036, 1043, 1044], "imputation_const": 257, "imputation_mean": 257, "imputation_ord": [636, 1051], "imputation_sequence_": 636, "impute_estim": 186, "impute_scor": 187, "imran": [1043, 1044, 1045], "imread": 68, "imshow": [44, 45, 53, 68, 75, 81, 82, 83, 85, 86, 88, 89, 93, 115, 124, 127, 134, 177, 178, 179, 183, 194, 209, 234, 239, 254, 287, 301, 315, 336, 337, 347, 355, 378, 641, 706, 1055], "in1d": 1048, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 90, "inaccur": 1060, "inact": [360, 378, 384], "inadvert": [190, 398], "inadvis": 410, "inappropri": [379, 420, 426, 718, 830], "inbuilt": 420, "inc": [0, 104, 275, 1000, 1022, 1034], "incap": 90, "incentiv": 388, "incept": 1030, "includ": [0, 11, 18, 43, 68, 70, 90, 113, 144, 148, 149, 150, 190, 191, 193, 203, 218, 222, 236, 252, 277, 294, 297, 313, 317, 329, 330, 332, 347, 352, 358, 360, 367, 371, 372, 378, 380, 382, 384, 385, 386, 388, 389, 390, 392, 393, 398, 399, 402, 410, 413, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 452, 454, 458, 464, 474, 477, 478, 479, 480, 481, 482, 483, 484, 497, 498, 499, 505, 509, 510, 511, 513, 514, 519, 543, 550, 566, 573, 583, 641, 647, 655, 656, 661, 669, 670, 671, 674, 690, 697, 698, 706, 722, 738, 739, 744, 746, 747, 780, 792, 793, 796, 804, 809, 811, 812, 813, 822, 823, 826, 829, 836, 839, 861, 863, 864, 865, 886, 887, 888, 892, 910, 913, 914, 921, 923, 925, 927, 939, 940, 943, 945, 949, 951, 952, 966, 999, 1006, 1009, 1010, 1011, 1013, 1014, 1020, 1024, 1025, 1026, 1029, 1030, 1033, 1034, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "include_bia": [43, 198, 291, 888, 892, 1055], "include_boundari": [943, 1055], "include_self": [74, 79, 102, 704, 866, 867, 1045], "include_valu": 706, "inclus": [0, 384, 386, 392, 458, 464, 763, 795, 1010, 1011, 1041, 1055], "incom": [317, 379, 448], "incoming_count": 55, "incompat": [505, 1000, 1049, 1050], "incomplet": [384, 402, 412, 416, 714, 804, 1000, 1007, 1045, 1047], "inconsist": [2, 398, 410, 424, 517, 518, 585, 915, 918, 943, 1016, 1025, 1036, 1041, 1046, 1047, 1048, 1049, 1051, 1054, 1056, 1057, 1058], "inconsistentversionwarn": [2, 410, 1057], "incorpor": [332, 384, 417, 423, 1009, 1029, 1034], "incorrect": [138, 190, 339, 367, 384, 416, 616, 617, 641, 642, 743, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1060], "incorrectli": [200, 283, 423, 424, 562, 568, 570, 743, 749, 1010, 1042, 1047, 1049, 1050, 1052, 1057], "incr_mean_variance_axi": [2, 1047, 1053], "increas": [2, 43, 46, 54, 63, 72, 78, 90, 92, 93, 96, 109, 127, 138, 139, 141, 144, 147, 149, 154, 156, 169, 173, 175, 179, 180, 181, 191, 192, 196, 199, 201, 209, 218, 219, 220, 222, 236, 243, 249, 262, 263, 270, 276, 277, 278, 283, 289, 290, 312, 318, 319, 322, 328, 334, 337, 347, 354, 359, 360, 362, 371, 372, 373, 383, 392, 393, 398, 414, 416, 418, 421, 423, 424, 427, 448, 452, 454, 460, 471, 479, 480, 486, 541, 545, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 636, 644, 645, 646, 654, 659, 660, 663, 664, 665, 667, 668, 675, 676, 677, 685, 686, 687, 691, 692, 694, 695, 701, 715, 716, 721, 787, 791, 798, 812, 813, 842, 861, 863, 864, 865, 868, 870, 871, 887, 913, 921, 922, 923, 924, 957, 999, 1001, 1005, 1006, 1007, 1009, 1010, 1013, 1020, 1024, 1025, 1026, 1034, 1041, 1043, 1046, 1050, 1052, 1053, 1056, 1059], "increasing_": 644, "increasing_bool": 645, "increment": [2, 106, 123, 129, 130, 131, 132, 188, 279, 388, 390, 450, 455, 471, 513, 542, 543, 544, 545, 548, 550, 553, 611, 655, 667, 675, 815, 837, 845, 846, 848, 849, 850, 851, 852, 882, 883, 893, 913, 914, 984, 1006, 1012, 1031, 1044, 1045], "incrementalpca": [2, 128, 373, 421, 542, 544, 548, 550, 553, 1045, 1048, 1049, 1051, 1052, 1055], "incur": [63, 628, 913, 1025, 1049], "ind": [53, 77, 150, 161, 359, 853, 854], "inde": [44, 46, 62, 64, 70, 74, 75, 88, 90, 93, 115, 118, 129, 138, 141, 172, 173, 175, 191, 193, 198, 203, 205, 207, 218, 220, 278, 279, 283, 285, 294, 297, 317, 322, 354, 359, 367, 371, 383, 389, 397, 398, 399, 416, 418, 423, 576, 577, 1006, 1020, 1024, 1055], "indecisiveus": [1052, 1053], "indefinit": 388, "indent": [386, 975], "independ": [2, 32, 52, 62, 64, 72, 81, 125, 126, 128, 143, 147, 182, 192, 254, 255, 276, 279, 281, 285, 296, 317, 324, 326, 359, 367, 371, 372, 380, 386, 397, 398, 402, 410, 413, 414, 416, 417, 418, 419, 420, 424, 428, 457, 472, 496, 512, 524, 525, 526, 527, 529, 541, 542, 544, 546, 548, 549, 555, 556, 560, 561, 613, 616, 617, 634, 649, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 681, 682, 683, 684, 713, 714, 726, 745, 746, 764, 766, 804, 811, 838, 842, 844, 846, 847, 885, 889, 890, 891, 893, 897, 898, 899, 900, 902, 903, 904, 907, 915, 916, 917, 918, 919, 951, 999, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1015, 1017, 1020, 1025, 1026, 1035, 1036, 1041, 1042, 1047, 1049, 1051, 1056], "inder128": 1051, "inderjeet": 1052, "inderjit": [413, 461], "indeterminaci": 553, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 84, 85, 93, 105, 106, 138, 143, 145, 154, 170, 173, 186, 190, 191, 192, 193, 194, 218, 222, 236, 256, 259, 262, 263, 267, 271, 274, 275, 276, 277, 279, 287, 288, 290, 297, 317, 322, 323, 324, 330, 334, 336, 337, 359, 360, 379, 381, 382, 384, 386, 388, 393, 396, 398, 413, 417, 420, 421, 423, 424, 431, 451, 455, 456, 457, 458, 459, 461, 462, 465, 467, 468, 472, 475, 512, 518, 566, 567, 568, 569, 573, 574, 575, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 626, 641, 642, 649, 706, 713, 714, 721, 725, 727, 740, 747, 766, 788, 789, 795, 797, 803, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 839, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 886, 921, 922, 923, 924, 930, 961, 980, 983, 988, 989, 1010, 1012, 1013, 1014, 1024, 1026, 1029, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "index_alpha_path_a": 205, "index_alpha_path_b": 205, "index_map": 55, "indexerror": [1049, 1050], "indexhash": 649, "indexhash_": 649, "indian": 379, "indic": [2, 51, 57, 58, 62, 63, 83, 94, 95, 101, 109, 118, 120, 124, 138, 143, 149, 180, 183, 187, 190, 192, 215, 240, 249, 252, 269, 270, 278, 279, 282, 283, 297, 310, 336, 337, 340, 358, 359, 360, 366, 372, 379, 384, 385, 386, 388, 392, 393, 396, 398, 412, 413, 414, 416, 418, 420, 421, 423, 424, 427, 431, 436, 445, 448, 452, 458, 459, 460, 461, 463, 464, 465, 468, 472, 475, 480, 495, 517, 518, 520, 521, 522, 532, 541, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 590, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 629, 636, 637, 638, 639, 641, 642, 648, 655, 656, 659, 660, 661, 662, 663, 664, 670, 672, 674, 682, 684, 691, 692, 699, 701, 703, 705, 712, 716, 721, 722, 727, 728, 729, 731, 734, 737, 738, 739, 740, 743, 747, 748, 749, 750, 763, 780, 787, 788, 789, 790, 792, 793, 794, 796, 797, 801, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 846, 847, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 877, 880, 884, 886, 894, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 929, 930, 935, 939, 940, 945, 961, 972, 973, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1000, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1021, 1024, 1025, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1051, 1052, 1054, 1056, 1057, 1058, 1059, 1060], "indicator_": [636, 637, 639], "indicator_matrix_": 1046, "indigo": 235, "indirect": [279, 385, 398], "indirectli": [236, 351], "indispens": 1034, "indistinguish": 317, "individu": [2, 43, 81, 95, 113, 137, 139, 141, 159, 168, 171, 184, 188, 189, 191, 194, 218, 236, 246, 255, 256, 270, 279, 281, 296, 326, 333, 334, 351, 354, 372, 385, 386, 388, 391, 393, 398, 401, 407, 413, 417, 420, 423, 424, 445, 460, 470, 472, 505, 510, 512, 518, 564, 565, 568, 569, 571, 572, 574, 576, 577, 578, 579, 612, 618, 619, 641, 642, 652, 654, 666, 667, 668, 677, 680, 681, 682, 683, 684, 685, 686, 687, 696, 721, 728, 737, 743, 759, 760, 794, 799, 800, 809, 823, 841, 845, 846, 848, 849, 850, 851, 852, 871, 874, 882, 883, 885, 886, 887, 890, 892, 893, 898, 899, 900, 913, 914, 1010, 1011, 1020, 1025, 1031, 1036, 1042, 1045, 1047, 1053, 1055, 1057], "indptr": [55, 297, 366, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1049, 1057], "induc": [25, 63, 91, 191, 203, 209, 211, 216, 219, 233, 251, 255, 354, 360, 413, 421, 423, 454, 457, 548, 552, 562, 566, 567, 568, 569, 573, 574, 575, 652, 735, 765, 886, 921, 922, 923, 924, 1003, 1010, 1024], "induct": [43, 47, 64, 71, 136, 151, 183, 188, 252, 297, 398, 416, 423, 430, 449, 521, 573, 636, 640, 908, 909, 970, 993, 1006, 1023, 1031, 1043], "inductive_learn": 91, "inductivecluster": 91, "industri": [416, 1029], "ineffect": [321, 414, 1020, 1049, 1050], "ineffici": [2, 423, 451, 583, 841, 842, 1013, 1015], "inequ": [366, 398, 416, 451, 455, 467, 708, 1007, 1008, 1013], "inertia": [92, 93, 96, 359, 416, 451, 455, 457, 460, 467, 468, 470, 471, 1052], "inertia_": [93, 96, 99, 451, 455, 457, 1052], "inf": [109, 178, 307, 393, 416, 426, 454, 458, 463, 464, 465, 469, 479, 480, 486, 562, 563, 568, 569, 602, 603, 606, 615, 616, 617, 628, 636, 644, 646, 657, 658, 659, 661, 678, 680, 681, 685, 686, 687, 689, 696, 737, 739, 755, 787, 794, 798, 869, 878, 885, 937, 938, 939, 940, 955, 1010, 1020, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059], "infant": 1020, "infeas": [1006, 1013, 1015], "infer": [25, 188, 189, 191, 213, 262, 266, 267, 276, 363, 378, 386, 396, 410, 420, 421, 500, 505, 517, 518, 524, 543, 545, 547, 549, 556, 558, 559, 562, 568, 569, 641, 644, 666, 718, 731, 732, 750, 794, 806, 807, 815, 832, 839, 849, 887, 894, 908, 909, 921, 922, 923, 924, 972, 1000, 1006, 1009, 1010, 1015, 1020, 1023, 1026, 1029, 1030, 1031, 1042, 1046, 1047, 1052, 1055, 1058], "inferencesess": 410, "inferenti": 91, "inferior": [449, 453, 1052], "infin": [2, 276, 354, 550, 691, 692, 721, 834, 920, 938, 1013], "infinit": [64, 219, 261, 279, 351, 371, 426, 454, 631, 632, 787, 806, 937, 939, 940, 1002, 1009, 1020, 1025, 1049, 1051, 1054, 1055, 1056, 1058, 1059], "inflammatori": 379, "inflat": [92, 190, 191, 193, 416, 420, 1010, 1020], "inflect": 278, "influenc": [42, 48, 52, 113, 114, 138, 188, 191, 201, 261, 284, 317, 324, 347, 351, 354, 367, 373, 418, 421, 423, 439, 448, 462, 473, 490, 491, 492, 497, 510, 563, 565, 567, 569, 571, 574, 577, 579, 620, 637, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 685, 687, 688, 743, 759, 839, 846, 847, 855, 856, 863, 864, 871, 890, 891, 902, 914, 916, 919, 922, 924, 939, 999, 1004, 1005, 1006, 1013, 1016, 1020, 1024, 1025, 1031, 1034, 1044, 1049, 1050], "influenti": [222, 359, 1034], "info": [2, 45, 77, 105, 124, 191, 192, 252, 270, 274, 381, 383, 388, 398, 424, 472, 505, 570, 571, 965], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 84, 88, 93, 101, 102, 104, 105, 118, 120, 121, 130, 144, 145, 146, 167, 169, 170, 172, 173, 175, 180, 188, 191, 192, 194, 196, 197, 198, 199, 203, 219, 222, 233, 235, 236, 252, 256, 263, 264, 266, 270, 271, 273, 276, 277, 278, 281, 283, 285, 300, 303, 304, 307, 324, 329, 333, 350, 354, 358, 359, 360, 363, 366, 367, 371, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 389, 390, 392, 396, 397, 398, 399, 407, 410, 413, 415, 420, 421, 423, 424, 425, 426, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 470, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 519, 524, 533, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 615, 616, 617, 618, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 704, 706, 710, 713, 714, 724, 735, 739, 752, 764, 765, 766, 795, 797, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 932, 966, 993, 998, 1000, 1002, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1024, 1026, 1030, 1031, 1033, 1034, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "informatik": 1010, "informed": 1010, "infrastructur": [314, 332, 1029, 1030], "infrequ": [886, 887, 894, 1010, 1041, 1055, 1056, 1057], "infrequent_categories_": [330, 332, 886, 887, 894, 1020], "infrequent_if_exist": [886, 1020], "infrequent_sklearn": [886, 1020], "infti": [236, 426, 628, 1006, 1020, 1048], "ing": 424, "ingela": 1055, "ingest": 424, "ingredi": 426, "ingrid": 1051, "inher": [134, 213, 367, 416, 421, 572, 1000, 1002, 1004, 1005, 1007, 1011], "inherit": [252, 384, 386, 397, 398, 430, 586, 685, 933, 949, 951, 962, 1006, 1041, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1056, 1057, 1058], "inhibit": [427, 452], "inhomogen": [426, 623], "ini": 264, "init": [2, 54, 77, 80, 93, 94, 96, 99, 192, 199, 238, 239, 241, 242, 243, 262, 264, 297, 359, 387, 392, 416, 421, 423, 451, 455, 457, 459, 461, 467, 468, 547, 549, 556, 557, 568, 569, 641, 642, 699, 701, 703, 862, 1007, 1041, 1050, 1053, 1055, 1056, 1057], "init_": [568, 569], "init_param": [261, 264, 267, 806, 807], "init_s": [96, 359, 457], "init_size_": 1053, "init_tim": 264, "initi": [0, 46, 51, 55, 71, 77, 78, 80, 92, 93, 95, 98, 99, 114, 152, 160, 161, 162, 176, 181, 188, 191, 199, 211, 233, 238, 239, 243, 260, 262, 263, 276, 297, 328, 338, 347, 359, 367, 372, 379, 384, 386, 392, 393, 396, 398, 416, 421, 423, 425, 426, 428, 450, 451, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 470, 521, 524, 540, 541, 542, 546, 547, 549, 552, 554, 555, 556, 557, 562, 563, 568, 569, 572, 602, 616, 617, 619, 620, 628, 629, 636, 649, 654, 655, 656, 657, 661, 662, 667, 669, 670, 671, 672, 675, 676, 677, 678, 680, 685, 686, 687, 689, 690, 693, 699, 700, 701, 703, 704, 806, 807, 843, 862, 869, 870, 871, 909, 942, 956, 957, 978, 983, 984, 1002, 1006, 1007, 1009, 1014, 1015, 1016, 1024, 1026, 1029, 1031, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "initial_imputer_": 636, "initial_strategi": 636, "initial_theta": [619, 620], "initialis": [124, 547, 549, 556, 1041, 1049, 1050], "initializedcheck": 385, "inject": [255, 379, 423], "inki": 1047, "inli": [245, 1006, 1016], "inlier": [113, 155, 221, 245, 255, 317, 398, 418, 438, 477, 572, 680, 686, 859, 890, 902, 916, 917, 919, 1006, 1016, 1048, 1049, 1054], "inlier_mask": 221, "inlier_mask_": [221, 680], "inlier_plot": 113, "inliers_mask": 114, "inlin": [229, 384, 385, 1026], "inner": [64, 129, 151, 154, 277, 281, 296, 338, 371, 424, 451, 523, 591, 598, 627, 657, 678, 689, 784, 786, 1002, 1010, 1020, 1025, 1042, 1045, 1055, 1058], "inner_clf": 1010, "inner_cv": [281, 333], "inner_it": 390, "inner_numb": 338, "inner_stat": 1055, "inner_stats_": 1055, "inpaint": 421, "inplac": [2, 236, 255, 288, 462, 490, 491, 492, 493, 868, 876, 879, 882, 883, 885, 889, 890, 891, 893, 982, 985, 986, 987, 991, 992, 1050], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 393], "inplace_csr_row_normalize_l1": [2, 393], "inplace_csr_row_normalize_l2": [2, 393], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 107, 124, 128, 147, 151, 152, 181, 182, 183, 191, 196, 198, 218, 221, 222, 226, 233, 236, 248, 249, 251, 252, 259, 271, 294, 301, 302, 314, 318, 319, 320, 321, 326, 329, 331, 334, 347, 351, 355, 360, 378, 381, 384, 387, 389, 393, 394, 396, 397, 398, 410, 413, 414, 417, 420, 421, 422, 423, 424, 425, 426, 428, 434, 437, 438, 439, 440, 441, 445, 446, 447, 448, 449, 450, 453, 456, 457, 458, 462, 465, 466, 469, 472, 473, 475, 476, 477, 479, 480, 490, 491, 492, 497, 512, 518, 525, 526, 527, 529, 533, 537, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 629, 631, 636, 637, 638, 639, 640, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 694, 695, 696, 697, 698, 699, 701, 702, 705, 706, 707, 708, 709, 710, 711, 730, 731, 732, 733, 737, 754, 755, 757, 759, 760, 762, 763, 770, 776, 780, 781, 783, 787, 788, 789, 790, 794, 799, 800, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 900, 901, 905, 906, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 945, 951, 954, 956, 966, 968, 969, 973, 982, 984, 990, 991, 992, 995, 996, 998, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "input_featur": [198, 386, 398, 432, 437, 450, 451, 453, 455, 457, 472, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 575, 576, 577, 578, 579, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 1057], "input_nam": [938, 940, 972, 1055], "input_tag": 932, "input_typ": [360, 424, 591], "inputtag": [2, 932], "inria": [0, 667, 1041], "insensit": [251, 652, 685, 687, 797, 914, 1003, 1024, 1025, 1041], "insepar": [173, 381], "insert": [95, 191, 218, 396, 416, 495, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 928], "insid": [2, 55, 57, 63, 192, 220, 252, 276, 338, 347, 373, 378, 379, 386, 390, 407, 416, 424, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 966, 969, 1017, 1034, 1058], "insight": [43, 46, 191, 192, 206, 219, 220, 236, 270, 314, 317, 358, 366, 414, 415, 809, 812, 813, 823, 836, 1017, 1026, 1034], "insist": 104, "inspect": [2, 43, 48, 66, 67, 70, 91, 96, 140, 145, 152, 154, 155, 156, 160, 170, 175, 180, 181, 191, 192, 193, 194, 202, 210, 227, 232, 256, 270, 276, 279, 288, 300, 305, 308, 322, 326, 327, 328, 329, 331, 333, 343, 344, 345, 346, 348, 349, 351, 358, 363, 372, 386, 398, 416, 417, 423, 424, 472, 562, 563, 566, 567, 568, 569, 573, 574, 575, 640, 641, 642, 643, 842, 873, 874, 921, 922, 923, 924, 997, 1010, 1011, 1014, 1017, 1018, 1025, 1029, 1031, 1036, 1044], "inspir": [112, 156, 192, 236, 384, 396, 423, 570, 571, 944, 1000, 1050], "instabl": [74, 191, 307, 426, 460, 544, 548, 552, 704, 1048, 1051, 1054], "instal": [88, 259, 297, 326, 327, 328, 329, 330, 331, 332, 333, 334, 371, 372, 384, 385, 387, 388, 390, 392, 396, 397, 403, 409, 410, 412, 416, 424, 460, 470, 505, 700, 704, 1026, 1048, 1049, 1050, 1054, 1055], "installment_commit": 270, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 88, 91, 93, 141, 154, 170, 173, 187, 192, 193, 202, 203, 247, 252, 255, 270, 272, 274, 285, 287, 288, 308, 326, 333, 341, 343, 344, 350, 351, 358, 359, 360, 370, 371, 372, 378, 379, 381, 382, 383, 384, 386, 389, 390, 392, 393, 396, 398, 402, 407, 410, 412, 413, 414, 415, 416, 417, 420, 421, 423, 424, 425, 426, 427, 428, 430, 440, 441, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 470, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 499, 501, 504, 505, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 620, 629, 636, 637, 638, 639, 641, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 716, 729, 738, 739, 747, 780, 783, 787, 788, 789, 790, 792, 793, 796, 797, 798, 801, 802, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 818, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 939, 940, 942, 951, 952, 956, 957, 965, 966, 967, 968, 978, 979, 980, 983, 993, 994, 998, 999, 1000, 1006, 1007, 1010, 1012, 1013, 1016, 1018, 1020, 1024, 1025, 1026, 1030, 1036, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "instanci": 1050, "instant": 212, "instantan": 517, "instanti": [106, 178, 329, 387, 407, 423, 458, 576, 577, 611, 639, 809, 812, 813, 815, 823, 832, 834, 835, 836, 837, 838, 840, 947, 1016, 1041, 1049, 1053, 1057], "instead": [0, 43, 44, 45, 52, 58, 83, 88, 90, 91, 92, 105, 129, 141, 146, 156, 170, 173, 175, 218, 220, 233, 236, 242, 255, 267, 272, 273, 277, 278, 296, 302, 317, 326, 327, 328, 329, 330, 347, 349, 351, 358, 360, 366, 367, 371, 372, 378, 379, 382, 383, 384, 385, 386, 388, 389, 392, 393, 396, 397, 398, 407, 410, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 439, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 464, 467, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 518, 519, 542, 543, 544, 546, 547, 548, 549, 550, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 616, 617, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 639, 641, 644, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 699, 701, 703, 716, 718, 751, 755, 759, 760, 783, 787, 788, 789, 791, 792, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 821, 823, 825, 827, 828, 829, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 874, 875, 876, 878, 879, 880, 885, 886, 891, 892, 893, 903, 904, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 926, 927, 945, 952, 957, 966, 984, 999, 1000, 1002, 1006, 1007, 1009, 1010, 1011, 1014, 1015, 1020, 1024, 1025, 1026, 1029, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "instinct": 358, "institut": [0, 270, 381, 1013], "instruct": [371, 384, 385, 386, 387, 388, 389, 392, 396, 397, 398, 512, 597, 598, 600, 1033, 1041], "instrument": [51, 104, 125, 190], "insuffici": [401, 1009], "insur": [188, 197, 218, 415, 472, 505, 561, 657, 678, 689, 715, 754, 759, 761, 839, 874, 877, 878, 886, 893, 1006, 1031], "int": [47, 49, 52, 53, 55, 57, 72, 79, 97, 114, 141, 150, 154, 155, 165, 166, 176, 177, 178, 184, 187, 190, 200, 209, 211, 218, 236, 243, 245, 251, 255, 261, 270, 271, 274, 275, 276, 297, 302, 304, 310, 324, 337, 360, 379, 384, 386, 396, 398, 414, 417, 420, 424, 427, 428, 431, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 512, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 616, 617, 619, 620, 626, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 718, 722, 735, 736, 738, 739, 740, 743, 747, 765, 766, 778, 783, 787, 788, 789, 790, 791, 792, 793, 796, 798, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 935, 939, 940, 942, 943, 956, 957, 959, 960, 961, 963, 974, 978, 980, 983, 988, 989, 1006, 1017, 1041, 1047, 1051, 1052], "int32": [255, 297, 324, 384, 398, 451, 455, 457, 459, 461, 467, 915, 916, 917, 918, 919, 974, 1025, 1050, 1056, 1057, 1058], "int64": [43, 53, 89, 105, 191, 192, 270, 285, 290, 294, 323, 333, 366, 398, 424, 434, 450, 456, 458, 505, 523, 524, 528, 594, 597, 649, 655, 656, 661, 662, 674, 723, 724, 727, 753, 803, 849, 878, 907, 937, 964, 995, 1011, 1049, 1052, 1054, 1056, 1057, 1058], "int64dtyp": 1058, "intact": 886, "integ": [2, 43, 55, 83, 88, 105, 191, 218, 236, 327, 328, 367, 371, 378, 379, 381, 386, 389, 393, 397, 398, 416, 417, 420, 421, 423, 424, 441, 445, 470, 472, 475, 480, 495, 505, 507, 510, 511, 512, 514, 517, 518, 521, 523, 524, 528, 531, 559, 568, 569, 570, 571, 572, 576, 577, 581, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 641, 642, 653, 660, 664, 668, 674, 682, 684, 685, 687, 708, 723, 744, 809, 811, 812, 813, 814, 816, 818, 823, 824, 825, 828, 829, 831, 833, 836, 844, 847, 849, 852, 853, 854, 878, 886, 887, 892, 893, 894, 897, 907, 909, 921, 922, 923, 924, 935, 972, 973, 974, 978, 1000, 1006, 1011, 1013, 1020, 1023, 1025, 1026, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "integr": [0, 52, 77, 105, 170, 183, 207, 314, 328, 372, 382, 386, 387, 388, 390, 392, 398, 402, 421, 426, 454, 724, 764, 795, 984, 1009, 1017, 1034, 1042, 1044, 1045, 1053, 1054, 1058, 1060], "intel": [1010, 1029], "intelex": [402, 1029], "intellectu": 190, "intellig": [98, 173, 270, 358, 381, 416, 423, 456, 564, 565, 647, 705, 734, 843, 870, 871, 1011, 1022, 1030, 1034], "intend": [92, 93, 128, 219, 259, 351, 358, 384, 385, 391, 396, 398, 416, 420, 476, 591, 682, 708, 882, 883, 893, 911, 930, 1005, 1006, 1010, 1014, 1021, 1029, 1060], "intens": [101, 127, 297, 381, 385, 396, 398, 421, 451, 455, 467, 616, 617, 641, 642, 811, 999, 1017, 1034, 1049], "intention": 64, "inter": [2, 75, 145, 367, 423, 725], "interact": [2, 42, 152, 154, 188, 218, 243, 247, 277, 327, 383, 385, 386, 388, 390, 396, 398, 399, 410, 417, 568, 569, 570, 571, 641, 642, 888, 892, 999, 1002, 1006, 1007, 1008, 1015, 1017, 1020, 1028, 1030, 1043, 1048, 1055, 1056], "interaction_cst": [192, 331, 423, 570, 571, 1056], "interaction_onli": [43, 888, 1006, 1020], "interactiveshellapp": 390, "intercept": [127, 210, 227, 235, 355, 398, 490, 491, 492, 558, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 888, 892, 895, 913, 914, 920, 1006, 1008, 1010, 1015, 1024, 1025, 1044, 1046, 1050, 1051], "intercept_": [201, 208, 210, 227, 253, 345, 352, 355, 386, 398, 490, 491, 492, 558, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 913, 914, 915, 916, 917, 918, 919, 1004, 1006, 1024, 1025, 1041, 1048, 1053, 1055, 1058], "intercept_hidden_": 869, "intercept_init": [675, 676, 677, 685, 687], "intercept_sc": [211, 667, 668, 913, 914, 920, 1006, 1025], "intercept_visible_": 869, "intercepts_": [870, 871, 1014], "interchang": [1029, 1058], "interclass": 75, "interdepend": 524, "interest": [0, 43, 45, 52, 77, 79, 85, 90, 97, 101, 106, 138, 146, 151, 159, 170, 173, 180, 186, 191, 192, 193, 207, 218, 219, 220, 236, 239, 250, 269, 270, 273, 276, 277, 279, 285, 290, 294, 334, 347, 354, 359, 366, 371, 379, 381, 384, 389, 390, 392, 396, 399, 415, 416, 418, 421, 424, 426, 502, 503, 509, 513, 519, 655, 656, 913, 1000, 1006, 1007, 1010, 1015, 1016, 1017, 1030, 1034, 1041, 1058], "interestingli": [111, 173, 1020], "interfac": [2, 42, 138, 188, 377, 378, 385, 386, 393, 396, 398, 420, 426, 427, 449, 453, 458, 505, 562, 708, 809, 812, 813, 823, 873, 874, 899, 994, 999, 1013, 1025, 1029, 1030, 1034, 1041, 1043, 1046, 1047, 1049, 1050, 1055, 1057], "interfer": [333, 1051], "interim": 1048, "interior": [679, 1006, 1056], "interleav": [2, 380, 396, 531], "intermedi": [43, 46, 87, 90, 143, 151, 255, 347, 396, 424, 568, 569, 628, 873, 1010, 1053, 1059], "intern": [0, 43, 63, 105, 115, 129, 144, 149, 152, 154, 164, 173, 176, 186, 188, 218, 252, 270, 290, 297, 299, 316, 323, 338, 360, 367, 372, 379, 381, 386, 390, 393, 396, 398, 407, 412, 413, 416, 420, 421, 423, 424, 425, 426, 427, 445, 447, 452, 473, 476, 520, 543, 544, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 602, 603, 619, 620, 649, 652, 655, 661, 677, 681, 685, 687, 705, 717, 740, 743, 767, 768, 792, 839, 853, 854, 869, 870, 871, 873, 874, 878, 892, 894, 908, 909, 911, 913, 914, 915, 918, 921, 922, 923, 924, 1006, 1007, 1008, 1010, 1013, 1016, 1020, 1022, 1025, 1026, 1031, 1034, 1041, 1044, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "internet": [379, 389, 1020], "interop": 1029, "interoper": [410, 426, 1030], "interp": [285, 286, 347], "interp1d": [662, 672, 693], "interp_tpr": 286, "interpol": [43, 53, 68, 75, 85, 86, 89, 93, 115, 124, 127, 179, 182, 188, 197, 198, 209, 234, 248, 254, 285, 291, 301, 302, 309, 315, 337, 347, 426, 644, 654, 662, 672, 681, 693, 709, 716, 856, 864, 874, 888, 892, 1001, 1006, 1010, 1020, 1031, 1048, 1053], "interpret": [43, 64, 154, 173, 182, 188, 189, 190, 192, 214, 218, 219, 223, 234, 236, 269, 276, 278, 279, 290, 315, 318, 321, 328, 358, 360, 371, 382, 384, 385, 390, 392, 393, 398, 401, 414, 416, 417, 422, 424, 460, 472, 473, 475, 505, 550, 581, 620, 648, 652, 662, 681, 682, 700, 701, 704, 710, 738, 762, 767, 768, 792, 801, 802, 815, 824, 836, 837, 839, 842, 874, 886, 893, 1004, 1006, 1010, 1011, 1017, 1018, 1020, 1026, 1029, 1031, 1041, 1042, 1046, 1049, 1054, 1055, 1056], "interquartil": [255, 891, 903], "interquartile_rang": 891, "interrog": 424, "interrupt": 1006, "intersect": [277, 344, 413, 416, 747], "interv": [2, 52, 64, 137, 154, 182, 188, 203, 218, 219, 220, 236, 276, 379, 398, 414, 420, 423, 426, 446, 447, 525, 526, 527, 566, 567, 569, 571, 573, 574, 644, 645, 647, 686, 751, 757, 759, 813, 830, 839, 876, 878, 892, 915, 916, 917, 943, 1002, 1006, 1010, 1020, 1026, 1031, 1048, 1052], "intervent": [90, 191], "intl": [64, 420], "intp": [431, 459, 461], "intra": [43, 597, 600, 801, 802], "intract": [91, 421, 1007, 1015], "intric": [222, 521], "intricaci": 384, "intrins": [198, 398, 421, 423, 1013, 1018, 1024, 1053], "introduc": [43, 111, 113, 114, 129, 154, 172, 188, 193, 198, 203, 222, 244, 249, 252, 255, 257, 283, 331, 332, 360, 380, 382, 384, 386, 388, 389, 392, 396, 398, 407, 414, 416, 418, 420, 421, 423, 424, 440, 449, 450, 451, 453, 455, 457, 467, 472, 476, 490, 491, 492, 493, 505, 513, 524, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 564, 565, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 667, 673, 694, 695, 697, 698, 701, 839, 857, 862, 865, 869, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 907, 911, 1004, 1006, 1009, 1012, 1013, 1016, 1020, 1022, 1024, 1025, 1031, 1041, 1042, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "introduct": [172, 236, 274, 384, 415, 420, 421, 424, 599, 797, 798, 848, 852, 1006, 1008, 1010, 1012, 1028, 1035, 1036], "introductori": [151, 174, 175, 180, 181, 184, 188, 244, 426, 620, 631, 1031, 1034], "introspect": [43, 45, 105, 390, 568, 569, 598, 1020], "intrus": 379, "intuit": [43, 52, 67, 79, 87, 97, 129, 138, 141, 148, 168, 175, 191, 192, 219, 220, 240, 245, 277, 294, 302, 319, 322, 344, 347, 351, 359, 384, 398, 414, 416, 418, 420, 422, 654, 791, 792, 793, 796, 884, 913, 915, 916, 918, 919, 1002, 1006, 1007, 1010, 1011, 1017, 1020, 1021, 1025, 1034, 1041], "inv": [111, 115, 313], "inv_boxcox": 1060, "inv_kw_arg": 877, "invalid": [2, 47, 151, 218, 319, 398, 454, 587, 680, 721, 783, 998, 1006, 1010, 1047, 1049, 1051, 1052, 1054, 1055, 1057, 1060], "invalidparametererror": 1010, "invalu": 1034, "invari": [75, 381, 398, 416, 426, 623, 698, 756, 827, 828, 1006, 1007, 1010, 1025, 1030, 1049, 1052, 1053, 1054], "invent": 1013, "inventor": 1012, "inventori": 1034, "invers": [2, 8, 51, 89, 110, 111, 112, 138, 188, 266, 283, 285, 292, 300, 347, 359, 360, 376, 398, 417, 419, 420, 421, 423, 424, 428, 453, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 536, 542, 543, 544, 548, 550, 552, 566, 570, 573, 598, 599, 600, 637, 653, 654, 667, 668, 675, 677, 683, 684, 685, 686, 687, 689, 733, 752, 761, 806, 807, 855, 856, 863, 864, 870, 871, 873, 877, 880, 886, 887, 889, 905, 906, 913, 914, 915, 918, 919, 921, 923, 945, 1004, 1006, 1010, 1013, 1014, 1020, 1024, 1025, 1031, 1035, 1036, 1041, 1044, 1049, 1052, 1053, 1055, 1059, 1060], "inverse_components_": [905, 906, 1022, 1055], "inverse_func": [109, 191, 417, 473, 877, 1020, 1049, 1059], "inverse_transform": [44, 86, 89, 129, 170, 301, 359, 407, 421, 424, 453, 473, 490, 491, 492, 542, 543, 544, 547, 548, 549, 550, 552, 553, 590, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 639, 809, 812, 813, 823, 873, 877, 878, 880, 881, 882, 883, 884, 886, 887, 889, 890, 891, 893, 905, 906, 1020, 1021, 1022, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "invert": [115, 129, 170, 239, 359, 360, 396, 418, 424, 639, 698, 702, 1020, 1050], "invert_yaxi": [187, 360], "invest": [390, 1034], "investig": [129, 134, 138, 187, 354, 384, 410, 1006], "invok": [386, 540, 546, 548, 554, 555, 576, 578, 579, 808, 831, 834, 910, 1053, 1058], "involv": [322, 324, 326, 334, 347, 351, 371, 373, 379, 384, 398, 399, 410, 419, 426, 708, 841, 842, 1007, 1011, 1013, 1017, 1018, 1025, 1029, 1034, 1049], "invscal": [313, 685, 686, 687, 870, 871, 1024], "io": [378, 381, 384, 388, 390, 392, 398, 701, 1029, 1036, 1039], "ioangatop": 1058, "ioanni": 743, "ioerror": 1057, "iofal": 1055, "ion": 1056, "ionescu": [651, 1002, 1051], "iowa": [148, 159, 255], "ipca": [2, 128, 542, 543], "ipdb": 392, "ipm": 679, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366], "ipython": [386, 389, 390, 392], "ipython_config": 390, "iq": 190, "iqbal": 1053, "iqr": [255, 891, 903], "ir": [248, 421, 599, 735, 765, 848, 852, 1008, 1010], "iren": [1056, 1057], "iri": [2, 50, 55, 66, 67, 69, 76, 80, 108, 119, 123, 126, 128, 129, 134, 137, 138, 139, 140, 142, 157, 160, 166, 169, 174, 176, 179, 180, 188, 196, 197, 202, 210, 211, 215, 250, 259, 263, 269, 281, 282, 285, 286, 292, 300, 306, 308, 312, 313, 319, 328, 335, 340, 342, 343, 345, 347, 349, 350, 351, 361, 362, 364, 365, 366, 377, 378, 397, 410, 416, 417, 420, 421, 423, 455, 505, 513, 550, 558, 562, 566, 573, 619, 631, 640, 685, 809, 823, 908, 909, 910, 913, 918, 921, 925, 926, 927, 999, 1000, 1004, 1009, 1010, 1013, 1017, 1020, 1023, 1024, 1025, 1026, 1031, 1036, 1054], "iris": [120, 282, 283], "iris_61": 378, "iris_969": 378, "iris_version_3": 378, "irreduc": [141, 1010], "irregular": [180, 351, 416, 1013], "irregularities_kernel": 180, "irrelev": [168, 203, 367, 390, 418, 423, 425, 613, 749, 1010], "irrespect": [218, 249, 270, 285, 297, 615], "irvin": 381, "is_categor": 641, "is_categorical_": [570, 571], "is_classifi": [2, 386, 398], "is_cluster": [2, 1060], "is_data_valid": [680, 1006], "is_fit": [2, 993], "is_fitted_": [430, 433, 435, 438, 439], "is_inli": [477, 572, 859], "is_leav": 366, "is_max_test_scor": 107, "is_model_valid": [680, 1006], "is_multilabel": [2, 393, 1058], "is_paramet": 997, "is_pypi": 1059, "is_regressor": [2, 398], "is_scalar_nan": 1054, "is_sh": 287, "is_split_nod": 366, "is_stationari": [183, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "isa": 57, "isaac": [1047, 1048, 1050, 1051, 1058], "isaack": 1054, "isaactrost": 1058, "isakov": 1053, "isbn": [381, 416, 1006], "isclos": 55, "isdigit": [57, 424], "ish": 69, "ishaan": 1054, "ishan": [1054, 1055], "ishank": [1046, 1047, 1048], "ishikawa": [1053, 1054], "isin": [292, 337], "isinst": [70, 147, 236, 398], "islic": [47, 79, 97], "ism": 1045, "isn": [173, 326, 358, 360, 367, 372, 384, 392, 524, 570, 571, 603, 803, 812, 813, 886, 1013, 1025, 1051, 1059], "iso": [121, 174, 188, 230, 240, 619, 622, 623, 1031], "iso_reg": 644, "isoformat": 55, "isol": [2, 148, 155, 245, 255, 359, 382, 390, 402, 572, 859, 917, 1050, 1051], "isolationforest": [2, 137, 188, 221, 245, 255, 292, 317, 640, 839, 917, 1016, 1031, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1060], "isolationforestifittedisolationforest": 155, "isomap": [2, 51, 87, 143, 188, 237, 240, 242, 249, 307, 326, 330, 423, 511, 553, 558, 575, 698, 699, 700, 701, 862, 874, 883, 906, 1013, 1031, 1035, 1036, 1049, 1051, 1054, 1055, 1056, 1057, 1058], "isomap__n_neighbor": 326, "isometr": [238, 697, 699, 700, 701, 1007], "isoton": [2, 61, 62, 109, 188, 244, 445, 644, 645, 646, 666, 942, 1031, 1032, 1036, 1042, 1043, 1044, 1045, 1047, 1054, 1057], "isotonic_regress": [2, 644, 1054], "isotonicregress": [2, 248, 1001, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1053, 1055, 1056, 1057], "isotonicregression0": 644, "isotrop": [2, 70, 90, 92, 96, 129, 177, 179, 238, 240, 416, 418, 426, 521, 528, 541, 624, 628, 629, 631, 632], "isotropi": 421, "isr": 425, "issam": [0, 1047], "issu": [0, 2, 43, 62, 112, 118, 218, 236, 281, 324, 372, 378, 387, 388, 389, 393, 396, 398, 399, 401, 402, 407, 410, 412, 416, 418, 419, 424, 457, 460, 470, 481, 490, 491, 492, 543, 548, 552, 582, 597, 598, 600, 620, 636, 700, 704, 778, 884, 889, 901, 947, 1000, 1007, 1018, 1020, 1025, 1029, 1030, 1033, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1058, 1059], "issuenumb": 392, "ist": 425, "isupp": 424, "isuru": 1053, "itakura": [421, 547, 549, 556, 1048], "itali": 381, "item": [2, 47, 48, 49, 50, 51, 52, 55, 57, 66, 78, 90, 109, 142, 144, 148, 151, 159, 191, 216, 220, 226, 239, 251, 252, 254, 263, 273, 279, 283, 330, 337, 359, 377, 384, 385, 386, 393, 417, 472, 535, 570, 571, 597, 598, 600, 641, 821, 886, 908, 909, 928, 935, 963, 1002, 1023, 1030], "item_idx": 317, "itemgett": 57, "iter": [2, 47, 54, 55, 67, 81, 106, 115, 124, 127, 138, 141, 144, 147, 149, 150, 152, 153, 154, 173, 186, 188, 198, 199, 226, 233, 263, 264, 268, 271, 284, 287, 312, 314, 315, 319, 328, 337, 339, 340, 347, 384, 386, 390, 392, 393, 397, 398, 411, 416, 419, 421, 423, 425, 428, 445, 448, 449, 451, 453, 455, 456, 457, 460, 462, 467, 469, 470, 471, 479, 480, 486, 490, 491, 492, 524, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 568, 569, 570, 571, 573, 576, 577, 590, 591, 597, 598, 600, 602, 603, 611, 619, 636, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 847, 862, 869, 870, 871, 872, 873, 877, 884, 886, 888, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 928, 956, 957, 964, 965, 966, 967, 975, 999, 1000, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1023, 1024, 1025, 1026, 1030, 1031, 1034, 1036, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "iter_minibatch": 47, "iter_offset": 1055, "iter_offset_": 1055, "iterated_pow": [106, 541, 544, 550, 1047], "iterative_impute_scor": 187, "iterativeimput": [2, 185, 187, 188, 388, 407, 498, 574, 589, 637, 638, 639, 648, 654, 681, 835, 856, 874, 1031, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "itergrid": 1043, "itertool": [47, 77, 79, 97, 160, 192, 206, 262, 267, 276, 283, 285, 423], "ith": [505, 783, 787, 849, 870, 871, 886, 887], "ith_cluster_silhouette_valu": 95, "itk": [1051, 1052, 1053], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 90, 100, 101, 111, 113, 115, 118, 120, 121, 122, 129, 136, 138, 144, 147, 149, 151, 154, 164, 173, 175, 180, 182, 191, 192, 194, 196, 198, 207, 231, 235, 236, 240, 245, 252, 254, 255, 257, 259, 261, 266, 267, 270, 275, 279, 281, 283, 285, 290, 297, 299, 303, 304, 319, 329, 339, 344, 351, 356, 358, 359, 362, 366, 367, 372, 373, 377, 378, 379, 380, 384, 385, 386, 388, 389, 392, 396, 397, 398, 399, 402, 404, 407, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 432, 448, 450, 452, 454, 458, 462, 464, 468, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 506, 512, 532, 540, 542, 543, 544, 546, 547, 549, 550, 551, 553, 559, 562, 564, 565, 566, 567, 568, 569, 573, 574, 575, 592, 596, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 653, 654, 680, 681, 683, 694, 695, 696, 697, 701, 705, 708, 717, 734, 738, 739, 745, 746, 750, 787, 790, 792, 806, 807, 809, 834, 841, 842, 844, 855, 856, 857, 859, 860, 861, 863, 864, 865, 872, 873, 877, 882, 885, 886, 888, 905, 906, 909, 913, 914, 921, 923, 939, 940, 945, 952, 979, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1023, 1024, 1025, 1026, 1029, 1034, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "itsaphel": 1059, "itself": [27, 61, 64, 84, 90, 138, 151, 155, 192, 203, 216, 252, 258, 270, 285, 297, 324, 347, 359, 371, 373, 383, 384, 386, 398, 407, 410, 414, 416, 427, 448, 449, 452, 453, 454, 477, 478, 479, 480, 481, 482, 483, 484, 536, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 560, 575, 578, 592, 601, 604, 605, 607, 608, 609, 611, 612, 648, 649, 650, 651, 652, 654, 664, 698, 700, 801, 802, 848, 849, 850, 851, 852, 853, 854, 858, 866, 867, 878, 879, 880, 908, 909, 966, 1002, 1006, 1007, 1009, 1013, 1014, 1018, 1029, 1045, 1056], "iv": [190, 1010], "ivan": [1049, 1050, 1053, 1056, 1059], "ivanllt": 1056, "iver": 1047, "iverson": 1006, "ivicajov": 1044, "ivl": 194, "ivt": 543, "iv\u00e1n": [1048, 1054], "iwhalv": 1054, "iwona": 1058, "ix": [50, 285, 353], "iy_j": 1020, "iyer": 1052, "izadifar": 1059, "j": [0, 50, 55, 72, 73, 75, 78, 96, 104, 112, 113, 114, 138, 141, 142, 153, 171, 176, 187, 192, 230, 241, 254, 261, 275, 276, 281, 287, 301, 307, 310, 321, 331, 366, 372, 378, 379, 381, 388, 390, 396, 405, 413, 414, 416, 418, 420, 421, 423, 424, 426, 427, 445, 448, 452, 454, 461, 462, 477, 482, 507, 522, 525, 526, 527, 529, 537, 540, 543, 545, 546, 547, 549, 550, 556, 562, 568, 569, 602, 603, 641, 642, 646, 653, 654, 657, 658, 675, 676, 678, 689, 697, 698, 699, 701, 702, 703, 705, 714, 717, 719, 723, 725, 727, 730, 732, 733, 735, 764, 765, 767, 768, 783, 787, 797, 798, 801, 802, 842, 843, 850, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 884, 893, 894, 921, 922, 999, 1000, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "j0rd1smit": 1053, "ja": [419, 1048], "jaccard": [2, 296, 413, 458, 465, 708, 712, 728, 738, 743, 747, 787, 788, 789, 805, 1013, 1049, 1050], "jaccard_scor": [2, 296, 712, 738, 743, 805, 1010, 1050, 1053], "jaccard_similarity_scor": [1043, 1045, 1050], "jaccarddist": 708, "jack": [1043, 1046, 1054, 1055, 1056, 1057, 1059], "jacklangerman": [1049, 1050], "jackman": 1042, "jackmartin": 1047, "jackson": [1047, 1048, 1050], "jacob": [0, 406, 1046, 1047, 1048], "jacobi": 1056, "jacobsen": 1044, "jacopo": [1049, 1050], "jacqu": [1042, 1044], "jaehong": 1051, "jaehyun": 1053, "jaewon": 1049, "jai": [1051, 1055], "jaidev": 1046, "jaim": 1051, "jain": [1047, 1048, 1049, 1053, 1055, 1056], "jair": 1048, "jake": [0, 406, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1055], "jakemick": 1043, "jakhar": 1053, "jakirkham": [1048, 1049, 1050, 1056, 1057], "jakub": 1058, "jakubek": [1054, 1055], "jalali": [0, 399, 405, 410, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "jalexand3r": 1055, "jamaoui": [1049, 1050, 1053], "jame": [0, 381, 420, 843, 1011, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1057, 1058], "jamestwebb": [1043, 1044], "jami": 1049, "jamieson": 999, "jan": [0, 219, 294, 405, 892, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1057], "jana": 1051, "janet": 381, "jane\u017e": [1042, 1043], "janfidor": [1056, 1057], "janhang": 1051, "janin": 1048, "janna": 1047, "jannik": 1054, "janso": 1041, "jansson": [1044, 1056], "januari": [382, 384, 1041, 1042, 1051, 1053, 1056, 1058], "janvanrijn": [1049, 1050], "jaqu": [0, 406, 1041, 1042, 1043, 1044], "jardim": 1054, "jare": 1056, "jarfa": 1047, "jarir": 1054, "jarkko": 705, "jarosch": 1043, "jaroslaw": 1048, "jarrod": [0, 406, 1050, 1057, 1058], "jarvelin": [735, 765, 1010], "jaskowiak": 454, "jason": [44, 421, 544, 909, 1047, 1049, 1053, 1056], "jatin": [1045, 1047], "jauhar": 1055, "jauvin": 1042, "java": [416, 450], "javier": [1045, 1059], "jawahar": 1002, "jax": 1058, "jay": 1048, "jaya": 1055, "jayaratn": [1052, 1053, 1056, 1057], "jayratn": 1053, "jayzed82": 1048, "jb": [1057, 1058], "jbdelafoss": 1048, "jbirch": [416, 450], "jblackburn": 1047, "jc": [1048, 1049], "jdcaballero": 1045, "jdethuren": [1049, 1050], "je": 1055, "jean": [1041, 1044, 1045, 1046, 1047, 1048, 1054], "jeann": 1055, "jeanselm": 1051, "jeb": 1049, "jeevan": 1053, "jeff": [1045, 1047, 1054, 1055], "jeffrei": [1044, 1047], "jeffrey04": [1046, 1047], "jelfner": 1055, "jell": 1044, "jen": [667, 1049], "jen09": 421, "jenatton": 421, "jenni": 1055, "jennif": 1054, "jensen": [1047, 1053], "jeong": 1051, "jeremi": [1034, 1046, 1047, 1048, 1049, 1052, 1053], "jeremiedbb": [1049, 1050, 1051], "jeremynixon": 1047, "jeroen": 1047, "jeroenpeterbo": 1053, "jeroko": 1048, "jeromedock": 1051, "jerphanion": [0, 405, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "jerryzhu": 908, "jesper": 1051, "jess": [844, 1011, 1054], "jess010": 1044, "jessica": 1047, "jessicakk0711": 1057, "jesu": [57, 358, 359], "jet": 102, "jevnik": 1046, "jewalikar": 1047, "jf": 1050, "jfraj": 1046, "jha": [1045, 1051, 1055], "jhay": 1053, "jhun": 482, "jia": 1047, "jiacheng": 1048, "jiali": 1046, "jian": 416, "jianbo": [416, 460, 470, 700], "jiang": [414, 1045, 1052], "jianzhu": 1054, "jiawei": [1057, 1058, 1059], "jiaxiang": 1053, "jie": [1049, 1050, 1053], "jiefangxuanyan": 1054, "jigna": 1053, "jihan": 1055, "jill": 1047, "jim": 1043, "jim0421": 1053, "jimenez": [1054, 1055], "jimmi": [870, 871, 1014, 1047, 1049], "jim\u00e9nez": [0, 374, 1049, 1052, 1053, 1054, 1055, 1056], "jin": [648, 1052, 1053], "jindal": 1053, "jinkun": 1049, "jiongyan": 1049, "jiquan": 1014, "jirka": 1055, "jiten": 1056, "jitendra": [416, 460, 470, 700], "jitter": [138, 659, 663, 1052], "jiyuan": 1047, "jjabl": 1049, "jjmistri": 1052, "jk": 1007, "jkarolczak": 1056, "jkleint": [1048, 1049], "jl": [249, 906], "jmlr": [0, 416, 675, 676, 685, 713, 1006, 1025], "jmlr_2014": 701, "jmontoyam": 1048, "jnboehm": 1054, "jnt": 420, "joaak": [1049, 1050], "joan": [1048, 1049, 1050, 1051], "joanna": 1051, "joaquin": 1053, "job": [146, 154, 191, 264, 270, 384, 388, 392, 404, 423, 427, 445, 452, 454, 456, 458, 460, 465, 466, 469, 472, 475, 476, 480, 540, 544, 545, 546, 548, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 611, 616, 617, 619, 643, 648, 666, 697, 698, 699, 700, 701, 702, 703, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 872, 875, 908, 909, 911, 975, 1034, 1060], "joblib": [2, 41, 77, 89, 106, 144, 297, 327, 379, 382, 384, 387, 393, 396, 398, 402, 409, 417, 427, 445, 449, 452, 453, 454, 456, 458, 460, 465, 466, 469, 472, 475, 480, 517, 518, 540, 544, 545, 546, 548, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 603, 611, 616, 617, 619, 641, 643, 648, 656, 660, 662, 664, 666, 667, 668, 670, 672, 674, 675, 677, 685, 688, 697, 698, 699, 700, 701, 702, 703, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 859, 861, 863, 864, 866, 867, 872, 873, 874, 875, 908, 909, 975, 976, 979, 994, 1010, 1030, 1036, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1052, 1053, 1056, 1058, 1059, 1060], "joblib_start_method": 396, "jochen": 1043, "jock": 104, "joe": [1046, 1059], "joei": 1057, "joel": [0, 399, 405, 424, 544, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "johann": [1043, 1044, 1049, 1051, 1052, 1055], "johanna": [114, 1059], "johannah": 1047, "johanwork": 1054, "john": [381, 424, 545, 717, 744, 778, 888, 915, 916, 918, 919, 1000, 1006, 1010, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1054, 1056, 1057, 1058, 1059, 1060], "johnathanpi": [1056, 1057], "johnson": [37, 90, 188, 244, 317, 321, 376, 497, 511, 889, 901, 905, 906, 907, 1020, 1027, 1031, 1036, 1049, 1055, 1057], "johnson_lindenstrauss_min_dim": [2, 249, 1022, 1042], "johnston": [173, 381, 1006, 1050], "johnstott": 1049, "johnthagen": 1056, "johnwon": 321, "join": [50, 51, 57, 90, 186, 236, 276, 319, 379, 399, 471, 1033, 1041, 1049], "joint": [151, 188, 192, 197, 203, 204, 207, 217, 238, 270, 417, 620, 661, 671, 701, 848, 849, 850, 851, 852, 913, 1006, 1007, 1011, 1015, 1017, 1021, 1031, 1041], "jointli": [25, 212, 283, 416, 421, 1006], "joli": [0, 406, 1042, 1043, 1044, 1045, 1046, 1047], "jon": [358, 1048, 1051, 1052, 1054, 1055, 1058], "jona": [1053, 1058], "jonatan": 1049, "jonathan": [379, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1057], "joncral": 1047, "jone": [0, 379, 406, 1041], "jong": 1048, "jonker": [413, 728], "joona": 1041, "jordal": 1047, "jordan": [416, 421, 700, 806, 1051, 1052, 1055, 1056], "jordi": 1047, "jorg": [667, 1044, 1053, 1055], "jori": [0, 405, 1048, 1049, 1050, 1053, 1054], "jose": [173, 381, 667, 1010, 1049, 1051], "joseph": [1044, 1045, 1046, 1047, 1053, 1055, 1056], "josephsalmon": [1048, 1049, 1050], "josh": [424, 1048], "joshi": [1047, 1049, 1055, 1058, 1059], "joshua": [331, 379, 1043, 1044, 1046, 1047, 1053, 1056, 1057], "joshuakennethjon": 1050, "jos\u00e9": [732, 1044, 1054, 1059], "jotasi": 1049, "joudet": [1048, 1049], "journal": [0, 114, 192, 276, 282, 294, 378, 379, 381, 414, 416, 418, 423, 460, 470, 481, 543, 550, 636, 644, 654, 698, 701, 702, 714, 724, 740, 743, 744, 767, 768, 795, 838, 843, 889, 901, 999, 1000, 1004, 1006, 1007, 1008, 1011, 1017, 1022, 1024, 1025], "jovan": [1055, 1056], "joydeep": 416, "jo\u00e3o": [1056, 1059], "jo\u00ebl": 1049, "jpcar": 1059, "jpeg": [378, 379, 502, 503], "jpfrancoia": [1047, 1048], "jpg": [83, 515, 593, 596], "jpienaar": 1059, "jpm": 51, "jpmml": 1029, "jpmorgan": [51, 1034], "jr": 1006, "jrenni": 850, "jrfiedler": 1047, "jschendel": [1048, 1049], "jschuerz": 1055, "json": [52, 378, 384, 402], "jth": [783, 787], "juan": [0, 374, 1041, 1052, 1053, 1054, 1055, 1056], "juanfe88": 1056, "judg": [93, 224, 416], "judgment": [267, 1010], "judithabk6": 1052, "juergen": [1051, 1056], "jul": 285, "juli": [173, 381, 425, 743, 894, 1020, 1044, 1048, 1049, 1050, 1059], "julia": [416, 726, 746, 804], "julian": [1048, 1049, 1059], "juliankahnert": 1047, "juliaschoepp": [1056, 1057], "juliathebrav": 1047, "julien": [0, 405, 667, 1006, 1034, 1041, 1044, 1048, 1049, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "juliet": 1049, "julietcl": 1049, "julio": 1054, "julyrashchenko": 1054, "jumon": 1052, "jump": [43, 219, 317, 381, 384, 424, 892], "jumpi": 424, "june": [416, 1007, 1047, 1057], "juneja": 1059, "jung": [1048, 1052, 1056], "jungkook": 1046, "jungl": 1007, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 385, 386, 417, 476, 911, 1026, 1029, 1030, 1052, 1055], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366], "jurgen": 1034, "juri": 575, "jurman": 752, "just": [43, 52, 67, 104, 118, 124, 144, 148, 154, 173, 208, 215, 239, 250, 270, 276, 283, 287, 297, 312, 347, 358, 359, 366, 367, 379, 383, 384, 385, 386, 388, 389, 392, 396, 397, 398, 413, 415, 416, 417, 420, 423, 425, 428, 476, 542, 544, 551, 555, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 588, 593, 619, 620, 655, 661, 666, 667, 669, 671, 675, 676, 677, 685, 686, 687, 815, 832, 862, 870, 871, 999, 1006, 1009, 1010, 1011, 1014, 1018, 1020, 1024, 1030, 1041, 1045, 1047, 1049, 1053, 1057], "justglow": 1050, "justif": 685, "justifi": [384, 390, 414, 574], "justin": [1043, 1049, 1053], "jvm": 1054, "jygerardi": [1056, 1057], "j\u00e9r\u00e9mie": [0, 405, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "j\u00e9r\u00f4me": [1050, 1051, 1052, 1058, 1059, 1060], "j\u00eann": 1047, "j\u00f6rg": [416, 458, 465, 1049], "j\u00f6rn": 1048, "j\u00f8rgensen": [1006, 1058], "k": [2, 33, 45, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 77, 81, 84, 85, 88, 90, 91, 95, 98, 100, 108, 109, 113, 120, 121, 122, 124, 127, 130, 131, 138, 140, 147, 151, 155, 157, 158, 160, 161, 164, 166, 169, 170, 173, 176, 178, 179, 183, 184, 187, 188, 191, 192, 193, 194, 199, 201, 202, 206, 212, 215, 230, 232, 249, 251, 253, 254, 255, 261, 264, 272, 276, 279, 280, 285, 286, 289, 290, 297, 299, 302, 303, 304, 305, 306, 308, 309, 310, 318, 319, 320, 321, 324, 326, 330, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 357, 358, 360, 366, 367, 372, 378, 379, 381, 384, 392, 393, 396, 398, 407, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 426, 428, 448, 451, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 470, 477, 480, 496, 511, 513, 515, 521, 532, 540, 546, 550, 553, 554, 555, 558, 559, 562, 564, 566, 567, 568, 590, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 640, 648, 649, 657, 659, 660, 662, 663, 664, 665, 667, 668, 672, 673, 674, 675, 676, 678, 688, 689, 691, 692, 693, 694, 695, 697, 700, 704, 705, 713, 714, 717, 726, 735, 746, 752, 765, 767, 768, 770, 775, 778, 783, 784, 785, 786, 788, 802, 803, 804, 806, 807, 810, 814, 816, 817, 818, 821, 824, 825, 827, 828, 830, 831, 837, 848, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 874, 878, 879, 880, 884, 885, 886, 888, 889, 893, 901, 906, 920, 928, 942, 952, 957, 983, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1018, 1023, 1024, 1025, 1026, 1029, 1031, 1035, 1036, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059], "k0": 1004, "k1": [426, 630, 633], "k1__": 426, "k1__constant_valu": 179, "k1__k1": 426, "k1__k1__constant_valu": 426, "k1__k1__constant_value_bound": 426, "k1__k2": 426, "k1__k2__length_scal": [181, 426], "k1__k2__length_scale_bound": 426, "k2": [426, 630, 633], "k2__": 426, "k2__length_scal": 426, "k2__length_scale_bound": 426, "k_": [413, 426, 625, 628, 630, 633, 783, 1002, 1020], "k_1": [2, 426, 630, 633], "k_2": [2, 426, 630, 633], "k_best": [601, 910, 1023, 1058], "k_diag": [621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "k_fit_all_": 879, "k_fit_rows_": 879, "k_fold": 164, "k_gradient": [621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634], "k_init": [451, 467], "k_mean": [2, 99, 393, 398, 1049, 1057], "k_means_cluster_cent": 99, "k_means_elkan": 1049, "k_means_iris_3": 80, "k_means_iris_8": 80, "k_means_iris_bad_init": 80, "k_means_label": 99, "k_new": 879, "k_ret": [853, 854], "k_true": [853, 854], "ka00ri": [1056, 1057], "kachaiev": 1058, "kaczmarzyk": 1058, "kadatatlu": 1054, "kadota": 1055, "kaggl": [159, 397], "kahni": 1053, "kai": [381, 572, 1016, 1048], "kaicheng": 1045, "kaichogami": 1047, "kailasa": [1055, 1056], "kaim": [870, 871], "kaiser": [421, 541], "kakati": 1056, "kalli": [1049, 1050], "kalyan": 1047, "kamalakerdadi": [1046, 1047], "kamar": 1049, "kamchyev": 1058, "kamel": 1041, "kamishima": [1047, 1048], "kamm": 1010, "kanai": [1047, 1048, 1049], "kanazu": [1056, 1057], "kanchimo": 1059, "kang": [1049, 1051], "kania": [1056, 1057], "kanika": 1051, "kanishk": 1056, "kanissh": 1056, "kanji": 1054, "kanniah": [1044, 1045], "kansal": 1047, "kapadni": 1056, "kapeln": [192, 1017], "kapoor": [1049, 1050], "kappa": [2, 545, 725], "kapur": 1048, "kar": 1047, "karan": [1048, 1049, 1050], "karayev": 1043, "karbownik": 1054, "karen": 1054, "karger": [850, 1012], "karhunen": 543, "karin": [636, 1000], "karl": 1049, "karlo": [1058, 1059], "karnofski": 1048, "karnowski": 1053, "karol": 1044, "kartik": 1053, "karypi": 416, "kaseorg": 1051, "kashif": 1046, "kasim": 1045, "kaski": 705, "kasper": 1049, "kassa": [1056, 1057], "kastner": [0, 406, 1043, 1044, 1045, 1052, 1053], "kat": 1048, "kataev": [1049, 1050], "kataki": [729, 743, 749, 1010], "katarina": [1051, 1053], "katheleen": 378, "kathi": [1048, 1051], "kathleen": 1048, "kathryn": 1052, "kati": 1048, "katotten": 1055, "katrin": [1049, 1050], "katrina": 1052, "katriopla": 1049, "katyal": 1051, "katz": [1046, 1053, 1054], "kaufmann": [1022, 1026, 1053], "kaushik": [1048, 1055, 1056, 1057, 1059], "kaushik94": 1044, "kawamura": 1054, "kawwa": 1054, "kayawari": 1054, "kaylani2": 1053, "kaynak": 381, "kazmar": 1045, "kb": [105, 191, 192, 270], "kbest": [106, 601], "kbin": [324, 331], "kbinsdiscret": [2, 43, 88, 122, 188, 199, 218, 236, 256, 316, 319, 324, 331, 521, 666, 876, 892, 922, 1020, 1031, 1049, 1053, 1054, 1055, 1057, 1059], "kbinsdiscretizer__n_bin": 319, "kcachegrind": 387, "kd": [302, 416, 422, 1013, 1049, 1050, 1051], "kd_tree": [427, 452, 454, 458, 465, 697, 698, 855, 856, 857, 858, 859, 861, 863, 864, 865, 1013, 1054, 1058], "kdd": [196, 379, 414, 445, 1022], "kdd06_rp": 906, "kddcup": [255, 377, 501, 1036], "kddcup99": [2, 379, 501], "kde": [190, 191, 290, 294, 301, 302, 310, 422, 858], "kdt": 1013, "kdtree": [2, 454, 458, 465, 697, 698, 853, 855, 856, 857, 858, 859, 861, 863, 864, 865, 1043, 1045, 1049, 1053, 1054, 1057, 1058], "ke": [423, 1052, 1053], "kearn": 1044, "keat": [1056, 1057], "keep": [0, 45, 52, 64, 77, 109, 127, 129, 144, 154, 172, 181, 186, 190, 191, 192, 193, 194, 203, 218, 219, 220, 226, 236, 259, 266, 271, 274, 321, 322, 329, 337, 347, 358, 359, 362, 367, 371, 372, 376, 384, 388, 397, 398, 414, 416, 417, 418, 419, 420, 421, 439, 458, 473, 490, 491, 492, 493, 502, 503, 543, 549, 550, 553, 556, 563, 565, 567, 569, 571, 574, 577, 579, 604, 607, 609, 612, 620, 643, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 685, 686, 687, 688, 717, 827, 846, 847, 856, 864, 870, 871, 909, 914, 916, 919, 922, 924, 1006, 1011, 1015, 1018, 1020, 1030, 1033, 1034, 1036, 1041, 1046, 1049, 1050, 1054, 1055, 1057, 1059], "keep_empty_featur": [636, 637, 639, 1000, 1056], "keerti": 1056, "kegl": 1045, "kei": [2, 47, 49, 52, 55, 57, 77, 144, 148, 159, 186, 190, 236, 252, 255, 258, 277, 279, 280, 327, 328, 329, 330, 331, 332, 333, 334, 373, 377, 386, 389, 390, 391, 396, 398, 399, 402, 407, 416, 417, 420, 426, 472, 480, 570, 571, 576, 577, 578, 579, 597, 600, 603, 626, 635, 641, 643, 668, 720, 809, 812, 813, 821, 823, 831, 836, 872, 873, 928, 944, 974, 1018, 1030, 1036, 1038, 1047, 1053, 1054, 1056, 1057, 1059], "keith": [358, 1041, 1046], "kekalainen": [735, 765, 1010], "kelkar": [1048, 1049, 1051], "kelleh": [717, 1010], "kelleher2015": 1010, "kellei": [379, 1043, 1044], "keller": 1053, "kellogg": 51, "kellycarmodi": 1051, "kemal": [0, 1043, 1044], "kemenad": 1052, "kemk": 1052, "ken": [381, 1043, 1050], "ken4git": 1055, "kendal": 1056, "kendrick": 1053, "kennedi": [1048, 1051, 1058], "kennel": 1052, "kenneth": [1022, 1041, 1042, 1047, 1048, 1055, 1056], "kenni": 1053, "kensuk": 1051, "kent": 57, "kenta": 1044, "kento": [1056, 1057], "kept": [64, 266, 297, 354, 378, 410, 426, 505, 544, 547, 549, 550, 556, 606, 619, 620, 628, 629, 653, 704, 806, 807, 940, 1020, 1049, 1050], "kera": [396, 1029], "kerimov": [1048, 1049], "kernal": 129, "kernc": [1041, 1055, 1056], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 86, 92, 101, 108, 118, 123, 125, 133, 160, 166, 171, 174, 176, 177, 178, 179, 182, 186, 201, 202, 219, 232, 244, 245, 253, 257, 269, 274, 276, 278, 281, 282, 286, 291, 292, 298, 303, 308, 322, 329, 338, 341, 342, 344, 345, 347, 348, 349, 350, 352, 355, 367, 371, 376, 386, 396, 398, 404, 414, 416, 417, 420, 423, 424, 439, 448, 456, 460, 469, 470, 473, 490, 491, 492, 499, 505, 507, 511, 513, 523, 542, 543, 544, 550, 553, 563, 565, 567, 569, 571, 574, 577, 579, 602, 603, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 640, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 685, 686, 687, 688, 697, 699, 700, 701, 704, 744, 767, 768, 770, 775, 776, 783, 784, 785, 786, 809, 815, 820, 823, 839, 841, 846, 847, 853, 854, 856, 858, 864, 871, 873, 874, 879, 883, 885, 886, 888, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 922, 924, 930, 999, 1005, 1006, 1007, 1010, 1011, 1013, 1016, 1023, 1024, 1031, 1032, 1035, 1036, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "kernel_": [175, 176, 177, 178, 179, 180, 181, 182, 184, 619, 620], "kernel__length_scal": 175, "kernel__period": 175, "kernel_approxim": [2, 43, 186, 188, 195, 196, 232, 245, 250, 328, 647, 648, 649, 650, 651, 686, 767, 768, 879, 1002, 1031, 1042, 1048, 1058], "kernel_dens": [853, 854], "kernel_label": 353, "kernel_metr": [2, 648, 649, 650, 651], "kernel_param": [460, 544, 648, 652], "kernel_pca": [44, 129, 417], "kernel_pca_": 697, "kernel_pca_back_proj_ax": 129, "kernel_pca_proj_ax": 129, "kernel_ridg": [2, 175, 251, 652, 1011, 1045], "kernel_ridge_tun": 175, "kernel_svm": 250, "kernel_svm_scor": 250, "kernel_svm_tim": 250, "kernelapproximationkernel": 404, "kernelcenter": [2, 412, 1020, 1051, 1055, 1057, 1058], "kerneldens": [2, 301, 302, 310, 422, 1043, 1049, 1050, 1054, 1055, 1056], "kernelpca": [2, 44, 417, 421, 542, 543, 550, 553, 697, 699, 701, 879, 1020, 1042, 1043, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "kernelridg": [2, 129, 175, 251, 681, 1003, 1011, 1045, 1058], "kertesz": 1055, "keshat": [675, 676, 1006], "keshavan": 1051, "kesshi": [1051, 1052], "kevad": 1051, "kevin": [652, 1043, 1045, 1047, 1048, 1051, 1052, 1053, 1055, 1056, 1058], "kevlani": 1049, "keyber": 1059, "keyerror": [928, 1051], "keyword": [358, 378, 384, 386, 389, 391, 398, 416, 427, 430, 446, 452, 453, 458, 460, 465, 472, 475, 505, 512, 544, 547, 549, 568, 569, 576, 577, 578, 579, 629, 640, 641, 648, 652, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 697, 701, 706, 707, 708, 709, 710, 711, 783, 787, 788, 789, 790, 801, 802, 815, 832, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 873, 877, 952, 976, 999, 1007, 1010, 1013, 1023, 1041, 1045, 1047, 1048, 1049, 1051, 1053, 1055, 1056, 1057, 1058, 1059], "kf": [420, 814], "kfold": [2, 89, 144, 150, 164, 271, 281, 367, 420, 445, 480, 576, 577, 603, 611, 656, 660, 662, 664, 670, 672, 674, 682, 809, 812, 813, 815, 817, 819, 823, 828, 830, 832, 833, 834, 835, 836, 837, 838, 840, 844, 847, 894, 1042, 1043, 1044, 1046, 1047, 1049, 1051, 1059], "khaja": 1056, "khan": [1056, 1057], "khandelw": 1053, "khanduja": 1044, "khant": 1056, "kharsa": 1055, "khedkar": 1055, "khine": 1055, "kho": 1056, "khoo": 1053, "khosasi": 1054, "khosrow": 1010, "khoual": 1054, "khwaja": 1056, "ki": 1010, "kian": [1046, 1056, 1057, 1058], "kid": 1020, "kieker": [1049, 1050], "kielczewski": 1047, "kie\u00dfl": 1052, "kilian": [424, 1056, 1057], "kill": [358, 396], "killer": [384, 1034], "kilobyt": 88, "kilomet": 773, "kim": [1006, 1049, 1050, 1051, 1055], "kimayoung": 1055, "kimberli": 51, "kimbinyi": 1053, "kind": [43, 48, 51, 52, 61, 62, 109, 132, 144, 159, 168, 191, 192, 266, 269, 270, 272, 285, 324, 328, 331, 344, 347, 358, 372, 373, 377, 379, 384, 386, 390, 396, 397, 414, 416, 419, 420, 421, 423, 424, 425, 496, 497, 512, 517, 518, 530, 533, 597, 641, 642, 710, 949, 1006, 1012, 1017, 1026, 1044, 1053, 1055, 1056, 1057], "king": 944, "kingjr": 1047, "kingma": [870, 871, 1014], "kink": 207, "kiragu": 1053, "kiran": 1053, "kirandevraj": 1056, "kiril": [1048, 1049, 1051, 1053], "kirkbi": [1048, 1049], "kirkham": [1046, 1047, 1049], "kirthi": 1051, "kishan": 1058, "kishimoto": 1053, "kishor": 1054, "kislovskii": 1058, "kit": 396, "kitchen": [650, 1002], "kj": [378, 1012], "kjell": 1047, "kk": 1010, "kl": [421, 1007, 1049], "kl_divergence_": [701, 1048], "klarup": 1048, "klass": 100, "klau": [421, 544, 879], "kleczewski": [1048, 1049], "kleiber": 1055, "klevebr": 1049, "klima": 1056, "klopfer": 1050, "kluge": [1056, 1057], "kluger": [2, 413, 459, 522], "klusacek": 1010, "km": [96, 330, 359], "kmatt10": 1054, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 81, 83, 85, 88, 92, 93, 96, 188, 264, 267, 320, 330, 359, 393, 407, 416, 442, 443, 444, 448, 451, 456, 457, 460, 470, 521, 719, 801, 802, 806, 807, 878, 1013, 1020, 1030, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "kmeans_estim": 124, "kmeans_model": 416, "kmeans_plusplu": [2, 94, 416, 1053, 1058], "kmode": 1029, "kms15": [1049, 1050], "knee": 416, "kneighbor": [322, 330, 855, 856, 857, 859, 861, 1013, 1045, 1050, 1054, 1055, 1056, 1057], "kneighbors_graph": [2, 74, 79, 97, 102, 297, 398, 416, 449, 453, 704, 855, 856, 857, 859, 861, 863, 864, 865, 867, 1013, 1041, 1045, 1050], "kneighborsclassifi": [2, 67, 160, 165, 299, 300, 305, 306, 322, 328, 330, 358, 423, 611, 856, 860, 861, 862, 863, 864, 1011, 1013, 1041, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "kneighborsclassifierkneighbor": 404, "kneighborsregressor": [2, 186, 254, 309, 330, 423, 579, 855, 861, 863, 864, 1011, 1013, 1041, 1043, 1045, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "kneighborstransform": [2, 297, 299, 326, 701, 865, 1013, 1051, 1055, 1056], "knight": 323, "knn": [141, 160, 165, 186, 300, 305, 306, 309, 322, 328, 338, 358, 423, 611, 862, 908, 909, 1013, 1023, 1047], "knn__weight": 300, "knn_graph": 74, "knn_impute_scor": 187, "knnimput": [2, 187, 326, 636, 639, 1000, 1051, 1052, 1055, 1056, 1057, 1058, 1060], "knnquerybatch": 297, "knot": [43, 219, 329, 892, 1020, 1054], "know": [88, 101, 170, 173, 175, 184, 191, 236, 252, 253, 270, 276, 294, 296, 330, 336, 354, 359, 371, 384, 396, 407, 410, 416, 419, 420, 421, 424, 509, 513, 519, 655, 661, 667, 668, 735, 765, 809, 823, 898, 899, 901, 902, 903, 904, 921, 922, 923, 924, 999, 1009, 1010, 1011, 1013, 1022, 1047, 1048, 1051, 1053], "knowledg": [92, 146, 154, 191, 235, 255, 270, 276, 290, 379, 384, 387, 390, 397, 398, 416, 420, 423, 427, 452, 520, 564, 565, 572, 729, 745, 749, 792, 842, 1010, 1011, 1022, 1059], "known": [2, 50, 55, 62, 64, 74, 84, 92, 93, 114, 132, 133, 159, 180, 182, 187, 203, 218, 219, 236, 245, 270, 276, 278, 285, 306, 310, 318, 329, 334, 336, 344, 351, 359, 373, 379, 381, 382, 384, 392, 396, 398, 412, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 426, 446, 471, 490, 492, 507, 517, 518, 553, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 597, 598, 600, 603, 618, 631, 642, 667, 668, 681, 691, 692, 703, 713, 719, 722, 727, 738, 752, 764, 766, 804, 842, 848, 849, 850, 851, 852, 855, 860, 863, 869, 897, 921, 922, 923, 924, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1025, 1026], "known_val": 636, "knox": 1053, "knp": 636, "knr": 423, "knyazev": [416, 460, 470, 704, 1051, 1054, 1055], "ko": [51, 63, 176], "kobak": [701, 1054], "kobaski": 1054, "kobayashi": [1053, 1054], "kober": 1049, "kobi": 744, "koch": [1043, 1049, 1050, 1052, 1053], "kocot": 1052, "koehler": 1045, "koen": [1049, 1050], "koenker": [732, 1006], "koh": [1006, 1034], "kohavi": 420, "kohli": [1058, 1059], "koi8": 424, "koivunen": 114, "kokhlikyan": [1048, 1049], "koki": 1053, "koko": [1049, 1055, 1056], "kolawol": 1054, "kolganov": 1046, "kolh": 1043, "kolstad": 57, "komarov": 1059, "komey": [1055, 1056], "kommireddi": 1055, "kondratyev": 1055, "kong": 1054, "konstantin": [1046, 1047, 1048], "konstantino": [1049, 1058], "konwar": 1052, "koonc": 1049, "korba": 379, "korean": 1029, "kornel": 1047, "kornev": 1056, "korobko": [1058, 1059, 1060], "korobov": [1042, 1043, 1044, 1047, 1048], "korolev": 1051, "kosic": 1053, "kosobrodov": 1049, "kossaifi": [1041, 1045, 1046], "kossen": [1056, 1057], "kossori": [1049, 1050], "kostelac": [1056, 1057], "kot271828": 1054, "kothari": 1052, "kotwalia": [1049, 1050], "koumenti": 1056, "koushik": 1055, "koustav": [1058, 1059], "kovalevskyi": 1047, "kowalski87": 1044, "koyama": 1055, "kozachenko": [616, 617], "kozynet": [1053, 1055], "kpca": [2, 542, 543, 544, 1035, 1036, 1041], "kr": [251, 276, 1055], "kr_fit": 251, "kr_predict": 251, "kraig": 1056, "kraktu": 1059, "kranthi": 1055, "kranz": 1034, "kraskov": [616, 617], "krasouli": [1048, 1049, 1050, 1051, 1053, 1054], "kratzwald": 1047, "krawczyk": 1055, "krawutschk": [1056, 1057], "krell": [1045, 1047], "kriegel": [416, 427, 452, 458, 465, 859, 1016], "krinitsyn": 1049, "krishna": [1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056], "krishnachaitanya9": 1052, "krishnakalyan3": 1047, "krishnan": 1051, "krivich": [1047, 1048, 1050], "kronovet": 1046, "krr": [251, 652, 1003], "krsto": 1059, "krum": [1053, 1055], "krumetoft": 1055, "krump": 1046, "kruskal": [644, 699, 703, 1007], "krzeminski": 1048, "krzysztof": 378, "ksemb": 1049, "kshitij": [1056, 1057, 1059], "ksvd": [673, 694, 695, 1006], "ksvm": 196, "ksvm_score": 196, "ksvm_time": 196, "kth": [57, 830], "ku": [1045, 1046], "kuai": [1049, 1050], "kubin": 1052, "kuhlmann": [1048, 1049], "kulbear": 1050, "kulkarni": 1049, "kull": [414, 1010], "kullback": [54, 238, 421, 547, 549, 556, 701, 1007, 1048], "kulsinski": [458, 465, 708, 787, 788, 789], "kulsinskidist": [708, 1057], "kumar": [0, 173, 379, 406, 416, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "kumaresshan": [1049, 1050, 1053], "kumawat": 1055, "kund": [1057, 1058], "kunj": 1054, "kuno": 1059, "kuo": 1045, "kurumeyuta": 1054, "kurz": [1055, 1056], "kusanagi": [1052, 1054], "kusanagi2": 1053, "kushal": [1049, 1050], "kushan": 1058, "kushwah": [1057, 1058], "kushwaha": 1053, "kusterl": 1051, "kuth": 1047, "kvam": [1042, 1044], "kvle": 1047, "kw_arg": [143, 877, 1020, 1047], "kwarg": [76, 127, 252, 386, 391, 430, 434, 438, 446, 450, 456, 458, 472, 477, 544, 547, 549, 572, 640, 655, 656, 661, 662, 669, 670, 671, 672, 686, 690, 693, 707, 708, 709, 711, 751, 872, 873, 877, 917, 928, 969, 975, 977, 998, 1048, 1052, 1054, 1058], "kwd": [780, 783, 787, 790, 801, 802], "kwei": [1044, 1045, 1046, 1047, 1048], "kxytim": 1054, "kybernetika": 381, "kye": 1049, "kyeongpil": 1049, "kyle": [0, 406, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "kyledrogo": 1049, "kyler": 1046, "k\u00e4rkk\u00e4inen": 1006, "l": [0, 46, 53, 55, 75, 81, 82, 101, 102, 114, 141, 173, 193, 210, 213, 222, 227, 228, 281, 282, 283, 294, 313, 321, 354, 381, 382, 390, 392, 413, 414, 416, 420, 421, 423, 426, 482, 525, 526, 527, 547, 549, 556, 564, 565, 566, 567, 574, 575, 599, 616, 617, 619, 620, 624, 628, 631, 632, 643, 657, 658, 667, 678, 681, 683, 689, 696, 698, 701, 702, 714, 724, 734, 735, 740, 765, 795, 850, 884, 921, 922, 923, 924, 999, 1004, 1006, 1007, 1010, 1012, 1013, 1014, 1018, 1022, 1024, 1026, 1044, 1049, 1053, 1054, 1055, 1056, 1058], "l1": [2, 25, 42, 46, 55, 66, 75, 101, 115, 117, 188, 197, 198, 204, 205, 206, 207, 212, 213, 222, 229, 233, 247, 277, 297, 314, 329, 393, 396, 416, 418, 421, 449, 453, 458, 465, 472, 477, 478, 479, 480, 481, 482, 483, 484, 486, 505, 511, 513, 540, 546, 547, 548, 549, 551, 552, 556, 557, 567, 574, 598, 599, 600, 606, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 681, 685, 686, 687, 688, 690, 697, 744, 771, 777, 782, 787, 788, 789, 794, 823, 830, 839, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 885, 893, 900, 913, 914, 920, 922, 924, 942, 991, 1006, 1008, 1010, 1013, 1020, 1024, 1025, 1026, 1031, 1046, 1048, 1054, 1057], "l1_color": 229, "l1_contour": 229, "l1_distanc": 1041, "l1_min_c": [2, 211, 1006, 1025, 1041], "l1_plot": 234, "l1_ratio": [46, 49, 54, 203, 206, 209, 284, 289, 371, 396, 421, 547, 549, 556, 655, 656, 661, 667, 668, 669, 670, 671, 672, 677, 685, 687, 690, 1006, 1024, 1042, 1044, 1046, 1053, 1055], "l1_ratio_": [656, 668, 670], "l1_ratios_": 668, "l2": [2, 53, 66, 75, 115, 117, 188, 190, 191, 197, 198, 203, 206, 209, 211, 214, 218, 223, 229, 233, 234, 236, 277, 289, 297, 317, 324, 340, 358, 359, 386, 393, 396, 416, 418, 421, 423, 424, 449, 453, 458, 465, 533, 547, 549, 556, 567, 570, 571, 574, 598, 599, 600, 652, 655, 656, 657, 658, 661, 666, 667, 668, 669, 670, 671, 672, 677, 678, 681, 685, 687, 689, 690, 695, 696, 697, 744, 759, 770, 771, 787, 788, 789, 823, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 870, 871, 885, 893, 900, 913, 914, 918, 919, 920, 922, 924, 992, 999, 1003, 1006, 1008, 1013, 1014, 1020, 1024, 1026, 1031, 1043, 1045, 1046, 1048, 1050], "l2014": 423, "l2_color": 229, "l2_contour": 229, "l2_regular": [329, 423, 570, 571], "l_": [413, 620, 661, 750, 1010], "l_i": 1020, "l_inf": 55, "l_m": 423, "l_p": [458, 465, 697, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867], "l_x": 53, "la": [0, 323, 381, 405, 1034, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "lab": [0, 379, 476, 545, 911, 1034, 1052], "labb\u00e9": 1059, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 90, 91, 93, 95, 98, 99, 100, 101, 102, 107, 109, 111, 112, 113, 114, 117, 118, 121, 122, 126, 128, 130, 131, 132, 133, 138, 139, 140, 141, 142, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 162, 169, 171, 175, 176, 180, 181, 182, 183, 184, 186, 188, 191, 194, 196, 198, 199, 201, 202, 203, 205, 207, 208, 212, 218, 219, 220, 221, 224, 225, 226, 227, 228, 232, 233, 235, 236, 239, 240, 241, 245, 246, 250, 251, 253, 255, 256, 263, 269, 270, 271, 274, 275, 277, 278, 279, 280, 282, 285, 286, 287, 288, 289, 290, 291, 296, 302, 304, 306, 309, 313, 315, 317, 318, 322, 326, 327, 330, 333, 335, 339, 340, 341, 349, 351, 353, 354, 358, 359, 362, 363, 364, 365, 373, 376, 377, 378, 383, 384, 386, 388, 389, 393, 398, 399, 413, 414, 415, 426, 427, 433, 434, 438, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 469, 470, 473, 477, 495, 496, 497, 502, 503, 504, 505, 511, 512, 517, 518, 521, 523, 524, 528, 531, 532, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603, 604, 605, 607, 608, 609, 613, 614, 615, 618, 619, 640, 667, 668, 675, 676, 677, 682, 683, 684, 685, 686, 687, 706, 707, 709, 711, 712, 713, 714, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 731, 734, 735, 736, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 752, 763, 764, 765, 766, 791, 792, 793, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 823, 824, 825, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 859, 860, 862, 863, 870, 871, 873, 877, 880, 881, 884, 886, 887, 894, 897, 908, 909, 910, 913, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 929, 933, 939, 944, 945, 972, 973, 980, 999, 1006, 1007, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1024, 1025, 1026, 1029, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "label1": 398, "label2": 398, "label_a": 285, "label_b": 285, "label_binar": [2, 283, 285, 880, 1045], "label_binarizer_": 842, "label_distributions_": [336, 337, 908, 909, 1052], "label_im": 101, "label_out": 78, "label_pr": [726, 745, 746, 764, 766, 804], "label_prop_model": [908, 909], "label_propag": 1042, "label_ranking_average_precision_scor": [2, 1010, 1045, 1049, 1050, 1056], "label_ranking_loss": [2, 1010, 1046], "label_spread": 338, "label_tru": [713, 726, 746, 764, 766, 804], "labelbinar": [2, 285, 398, 731, 750, 842, 877, 886, 894, 897, 1011, 1044, 1045, 1046, 1050, 1055], "labelbottom": [162, 276], "labeled_iter_": [339, 910], "labelencod": [2, 398, 578, 887, 1021, 1041, 1049, 1056, 1057, 1060], "labeling1": 1010, "labeling2": 1010, "labelkfold": [1046, 1047], "labelleft": 261, "labelpad": 276, "labelpropag": [2, 330, 338, 909, 910, 1011, 1023, 1042, 1047, 1048, 1051, 1052, 1053, 1055, 1056, 1057], "labels": [54, 321], "labels_": [73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 87, 90, 93, 96, 97, 98, 100, 102, 330, 332, 359, 384, 398, 416, 434, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 719, 1046], "labels_050": 100, "labels_200": 100, "labels_a": 72, "labels_b": 72, "labels_pr": [416, 713, 714, 723, 724, 726, 740, 745, 746, 764, 766, 795, 804], "labels_random": 83, "labels_tru": [73, 84, 90, 99, 416, 713, 714, 723, 724, 726, 740, 745, 746, 764, 766, 795, 804], "labels_uniqu": 98, "labelshufflesplit": [1046, 1047], "labelspread": [2, 330, 336, 337, 338, 340, 341, 908, 910, 1011, 1023, 1042, 1047, 1048, 1051, 1052, 1055, 1056, 1057], "labelspreadingifittedlabelspread": 338, "labex": 0, "labl": 154, "laboratori": [379, 1029], "lacchia": 1048, "lack": [43, 64, 351, 384, 396, 420, 838, 928, 1025, 1055], "lacost": [667, 1006], "lacouth": 1054, "lacrosse91": 1054, "lad": 1054, "lag": [42, 43, 151, 154, 188, 220, 500, 571, 710, 751, 754, 755, 757, 799, 830, 835, 836, 839, 1031], "lagacheri": 1045, "lagard": 1044, "lagat": 1051, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 322, 351, 1016], "laid": [0, 190, 384], "lakhotia": [1051, 1052], "lakshmi": 1051, "lakshmikanth": 1048, "lakshya": [1049, 1050, 1051], "lal": 909, "lalliacqua": [1051, 1054], "lam": [327, 328, 1052, 1059], "lama": 503, "lamb": [1046, 1054], "lambda": [43, 46, 47, 49, 57, 91, 150, 199, 236, 276, 277, 321, 340, 410, 412, 416, 421, 423, 424, 653, 654, 655, 656, 877, 889, 1002, 1006, 1020, 1049, 1055], "lambda_": [199, 653, 654, 889, 1006, 1048], "lambda_1": [653, 654, 1006], "lambda_2": [653, 654, 1006], "lambda_i": [1006, 1020], "lambda_init": [198, 199, 654, 1006, 1051], "lambdas_": [321, 889, 1054, 1057], "lami": 1049, "lamond": 1045, "lamp": 1034, "lamu": 1047, "lan": [667, 1056, 1057], "land": [50, 310, 388, 399, 423], "land_mask": 310, "land_refer": [50, 310], "landeau": 1058, "landmark": [890, 902, 1020], "landscap": 176, "lane": 1047, "langford": [424, 697, 1007], "langl": [1002, 1010, 1024, 1025], "languag": [0, 360, 389, 421, 424, 1024, 1029, 1030, 1034], "language_level": 385, "lanigan": 1048, "lanl": 55, "lannuzel": 1053, "lanterni": 1055, "lanzani": 1047, "lapack": [371, 372, 382, 541, 544, 550, 697, 1056], "lapack_lit": 390, "lapack_svd_driv": 1056, "laplac": [2, 176, 426, 619, 620, 848, 849, 850, 852, 1012], "laplacian": [2, 238, 376, 413, 448, 460, 470, 629, 648, 652, 700, 704, 774, 775, 783, 909, 1006, 1007, 1023, 1036, 1042, 1047], "laplacian_kernel": [2, 774, 1008, 1046], "laptop": [52, 392, 476, 911, 1055, 1056, 1057], "lar": [0, 2, 127, 173, 188, 197, 203, 204, 207, 209, 212, 381, 406, 479, 480, 486, 510, 540, 546, 548, 551, 552, 554, 555, 557, 660, 661, 662, 663, 664, 665, 672, 673, 674, 687, 690, 691, 692, 693, 694, 695, 1011, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1059], "laradji": [0, 1047], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 82, 84, 85, 87, 88, 90, 107, 109, 124, 128, 141, 143, 144, 151, 154, 155, 157, 169, 180, 181, 193, 194, 198, 199, 207, 209, 218, 220, 222, 223, 224, 236, 250, 255, 270, 273, 279, 282, 285, 299, 306, 314, 317, 319, 329, 330, 333, 347, 352, 354, 359, 360, 371, 379, 384, 390, 393, 396, 397, 398, 402, 410, 416, 418, 420, 421, 422, 423, 425, 427, 429, 450, 452, 454, 455, 458, 459, 460, 461, 466, 470, 481, 483, 508, 523, 543, 545, 547, 549, 550, 553, 556, 558, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 591, 598, 643, 650, 652, 655, 656, 659, 661, 662, 663, 666, 667, 668, 673, 680, 681, 683, 686, 688, 694, 696, 698, 700, 701, 702, 704, 755, 788, 789, 809, 817, 819, 823, 827, 838, 848, 849, 850, 851, 852, 853, 854, 859, 870, 871, 878, 882, 883, 891, 893, 905, 906, 913, 914, 918, 919, 921, 922, 923, 924, 956, 957, 999, 1002, 1004, 1006, 1007, 1009, 1012, 1013, 1014, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "larger": [43, 46, 64, 72, 74, 77, 82, 90, 113, 115, 122, 133, 141, 152, 154, 176, 181, 182, 187, 191, 192, 196, 199, 203, 233, 234, 235, 243, 249, 251, 261, 267, 270, 277, 279, 285, 286, 294, 297, 299, 312, 313, 315, 317, 347, 351, 359, 360, 377, 379, 384, 390, 398, 413, 414, 416, 417, 418, 420, 421, 423, 424, 426, 448, 451, 457, 458, 460, 462, 464, 524, 536, 550, 553, 570, 571, 572, 576, 577, 591, 598, 652, 661, 681, 682, 683, 684, 688, 696, 701, 713, 728, 745, 806, 858, 859, 890, 892, 893, 894, 902, 907, 956, 957, 980, 983, 1002, 1003, 1006, 1007, 1009, 1010, 1013, 1014, 1018, 1020, 1024, 1025, 1045, 1046, 1049, 1050, 1051, 1054, 1055, 1058, 1059, 1060], "largest": [115, 126, 144, 173, 220, 381, 416, 418, 421, 451, 536, 550, 566, 567, 568, 569, 573, 574, 597, 718, 806, 807, 828, 851, 883, 921, 922, 923, 924, 957, 1007, 1010, 1020, 1025, 1026], "largest_clust": [416, 451], "largest_coef": [115, 536], "larrald": 1058, "lars_path": [2, 206, 393, 540, 546, 548, 551, 552, 554, 555, 557, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 692, 693, 694, 695, 1006, 1041, 1043, 1046, 1050, 1052], "lars_path_gram": [2, 691, 1006, 1050], "larscv": [2, 407, 659, 674, 691, 692, 1048, 1054, 1058], "larson": [1046, 1050, 1051, 1053, 1055], "larsson": [1053, 1054, 1055], "lasagna": 1047, "laska": 1047, "lasso": [2, 42, 55, 101, 133, 159, 164, 188, 191, 197, 209, 217, 226, 266, 329, 333, 354, 371, 396, 418, 419, 421, 423, 424, 425, 479, 480, 486, 510, 533, 540, 546, 548, 551, 552, 554, 555, 557, 606, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 679, 681, 687, 690, 691, 692, 693, 694, 695, 730, 732, 733, 834, 835, 836, 874, 893, 999, 1010, 1011, 1024, 1031, 1032, 1036, 1041, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1055, 1059], "lasso_cd": [540, 546, 551, 557], "lasso_cv": 164, "lasso_lar": [133, 540, 546, 551, 557, 1051], "lasso_lars_": [205, 207], "lasso_path": [2, 206, 660, 661, 662, 663, 664, 665, 672, 691, 692, 1006, 1041, 1043, 1045, 1054], "lasso_pipelin": 159, "lassocolumntransform": 159, "lassocv": [2, 53, 159, 164, 191, 203, 207, 407, 423, 425, 660, 661, 663, 664, 665, 672, 693, 1006, 1041, 1044, 1048, 1051, 1052, 1054, 1055, 1058, 1059, 1060], "lassocvlassocv": 159, "lassolar": [2, 660, 661, 662, 664, 665, 672, 673, 674, 691, 692, 693, 1006, 1011, 1041, 1042, 1044, 1048, 1051, 1052, 1054], "lassolars": [2, 205, 207, 425, 660, 663, 664, 1006, 1041, 1048, 1050, 1054, 1055], "lassolarscv": [2, 207, 407, 425, 661, 662, 663, 665, 672, 674, 691, 692, 693, 1006, 1041, 1048, 1054, 1058], "lassolarsic__criterion": [205, 207], "last": [43, 58, 79, 93, 151, 191, 198, 218, 219, 226, 231, 245, 267, 279, 287, 288, 322, 328, 330, 339, 362, 371, 379, 382, 386, 388, 389, 392, 398, 402, 410, 416, 417, 424, 428, 446, 450, 455, 467, 472, 475, 476, 524, 542, 568, 569, 570, 571, 592, 593, 596, 602, 603, 606, 619, 691, 692, 694, 695, 706, 707, 709, 710, 711, 716, 791, 806, 807, 812, 813, 828, 853, 854, 858, 873, 874, 878, 886, 892, 928, 960, 984, 998, 999, 1005, 1006, 1007, 1009, 1011, 1014, 1024, 1030, 1041, 1047, 1048, 1049, 1050, 1055, 1057, 1058], "last_hour": [43, 52], "last_mean": 984, "last_n": 984, "last_var": 984, "lat": [50, 310, 507, 773], "late": [323, 373], "latenc": [42, 46, 188, 370, 533, 574, 681, 687, 839, 893, 919, 974, 983, 1029, 1031, 1036, 1044], "latent": [2, 42, 45, 55, 134, 188, 315, 359, 419, 424, 426, 496, 541, 545, 547, 548, 549, 552, 553, 597, 600, 869, 1009, 1029, 1031, 1035, 1036, 1043, 1046], "latentdirichletalloc": [2, 54, 373, 389, 421, 1029, 1046, 1048, 1055, 1056], "later": [0, 50, 88, 138, 143, 152, 175, 192, 196, 198, 255, 270, 294, 310, 360, 367, 382, 390, 396, 397, 410, 423, 859, 882, 883, 891, 893, 1002, 1020, 1044, 1047, 1049, 1053], "latest": [326, 327, 328, 329, 330, 331, 332, 333, 334, 382, 384, 388, 390, 392, 1026, 1055], "latestst": 388, "latex": 1041, "latexpdf": 384, "latin": [47, 424], "latitud": [310, 317, 379, 507, 708, 773], "lattarini": 1043, "latter": [43, 54, 266, 276, 285, 286, 305, 322, 354, 373, 381, 398, 415, 420, 423, 424, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 751, 806, 807, 808, 809, 812, 813, 818, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 976, 1013, 1018, 1050], "laughlin": 1048, "launch": [358, 359, 402, 1034], "laur": 1041, "lauren": [0, 368, 701, 705, 1007, 1053, 1056], "laurent": [1044, 1045, 1048, 1049, 1056, 1057], "laurenz": 1053, "lauritzen": 1049, "laveen": 1054, "law": 1034, "lawrenc": 270, "lawson": [1048, 1049, 1050], "lawton": 1049, "layer": [2, 43, 67, 147, 157, 166, 177, 179, 188, 225, 234, 256, 311, 314, 315, 319, 320, 341, 352, 371, 392, 423, 523, 524, 531, 576, 839, 869, 870, 871, 874, 893, 1015, 1031, 1032, 1036, 1047], "layout": [138, 317, 396, 913, 914, 915, 918, 940, 1025, 1044, 1046, 1058], "layton": [0, 406, 1041, 1042, 1043, 1044, 1046], "lazaru": 1059, "lazebnik": [767, 768, 1008], "lazi": [52, 399, 424, 1024, 1045], "lazyfram": 107, "lazz": 1056, "lb": [880, 1021], "lbfg": [312, 386, 657, 658, 667, 668, 678, 681, 683, 689, 696, 844, 847, 870, 871, 1006, 1014, 1045, 1046, 1048, 1049, 1054, 1055, 1056, 1058], "lbfgsb": 667, "lbfin": 1051, "lc": [51, 241, 248], "lceil": [413, 1016], "lda": [54, 69, 120, 123, 126, 128, 134, 188, 306, 367, 381, 412, 513, 545, 550, 558, 559, 862, 1029, 1031, 1032, 1035, 1036, 1046], "lda_featur": 389, "lda_model": 389, "lda_np": 412, "ldavid": 1047, "ldflag": 382, "ldirer": 1048, "ldl": [173, 381], "ldot": [1006, 1010, 1012, 1014, 1024], "ldwy4": [1058, 1059], "le": [667, 881, 1001, 1006, 1013, 1021, 1023, 1049, 1053, 1054, 1058], "le_": 578, "lead": [0, 46, 62, 64, 67, 72, 87, 90, 96, 106, 144, 148, 149, 151, 172, 173, 191, 192, 193, 198, 203, 207, 209, 218, 222, 250, 252, 255, 270, 276, 277, 279, 283, 302, 303, 314, 317, 319, 322, 323, 328, 347, 354, 359, 362, 367, 371, 372, 378, 383, 392, 393, 397, 398, 413, 414, 415, 416, 418, 420, 421, 422, 423, 425, 460, 470, 473, 476, 505, 524, 536, 544, 547, 548, 549, 552, 556, 560, 566, 567, 568, 569, 572, 573, 574, 575, 615, 639, 655, 656, 659, 661, 662, 663, 669, 670, 671, 672, 688, 700, 704, 755, 806, 812, 813, 841, 853, 854, 858, 877, 884, 894, 905, 906, 911, 913, 921, 922, 923, 924, 999, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1020, 1023, 1024, 1026, 1034, 1044, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057, 1058, 1059, 1060], "leader": [384, 1034], "leadership": 0, "leaf": [76, 143, 155, 157, 362, 366, 416, 423, 427, 449, 450, 451, 452, 453, 454, 458, 465, 471, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 921, 922, 923, 924, 925, 926, 1013, 1026, 1044, 1046, 1048, 1052, 1055], "leaf_id": 366, "leaf_rot": 194, "leaf_siz": [427, 452, 454, 458, 463, 464, 465, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 1013], "leagu": 379, "leak": [143, 281, 358, 367, 417, 420, 873, 898, 899, 901, 902, 903, 904, 1020, 1041, 1048, 1051, 1057, 1058, 1059], "leakag": [397, 398, 417, 1036], "lean": 410, "leandro": [1050, 1054], "lear": 1034, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 335, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 372, 376, 377, 378, 379, 381, 383, 387, 390, 391, 392, 393, 397, 398, 401, 403, 404, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 424, 425, 426, 430, 431, 433, 434, 435, 436, 438, 439, 440, 445, 446, 447, 450, 451, 454, 455, 457, 458, 465, 472, 473, 475, 476, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 517, 518, 519, 521, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 585, 590, 591, 592, 593, 596, 597, 598, 599, 600, 602, 603, 608, 611, 612, 619, 620, 623, 628, 631, 635, 637, 639, 641, 643, 647, 649, 650, 652, 653, 654, 655, 657, 661, 666, 667, 677, 678, 685, 686, 687, 689, 697, 698, 699, 700, 701, 705, 706, 709, 710, 711, 717, 722, 726, 727, 730, 732, 733, 735, 741, 744, 750, 751, 752, 757, 765, 787, 788, 789, 793, 794, 796, 797, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 847, 848, 849, 850, 851, 852, 855, 857, 862, 869, 870, 871, 872, 873, 874, 876, 878, 880, 883, 885, 886, 887, 888, 891, 892, 893, 894, 897, 905, 906, 908, 909, 910, 911, 913, 914, 915, 918, 921, 922, 923, 924, 929, 931, 942, 951, 952, 962, 975, 976, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1031, 1033, 1036, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "learn_rat": 1042, "learnalgorithm": 404, "learner": [2, 47, 139, 149, 159, 373, 563, 568, 569, 570, 571, 591, 598, 639, 855, 856, 861, 863, 864, 1012, 1015, 1026, 1029, 1030, 1057], "learning_curv": [2, 278, 331, 407, 815, 1005, 1044, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1058, 1060], "learning_decai": 545, "learning_method": [54, 389, 545], "learning_offset": [54, 545], "learning_r": [46, 138, 149, 150, 151, 152, 153, 154, 243, 297, 313, 315, 327, 329, 423, 562, 563, 568, 569, 570, 571, 677, 685, 686, 687, 701, 869, 870, 871, 1007, 1017, 1024, 1042, 1050, 1054], "learning_rate_": [701, 871], "learning_rate_init": [192, 313, 314, 870, 871], "learningcurvedisplai": [2, 251, 278, 331, 1005, 1056, 1057], "learnt": [154, 191, 324, 367, 398, 420, 894, 999, 1020], "least": [2, 37, 44, 52, 54, 113, 114, 116, 117, 126, 127, 141, 152, 171, 173, 183, 188, 190, 197, 198, 201, 203, 208, 211, 214, 218, 220, 222, 223, 226, 235, 236, 249, 255, 276, 294, 296, 322, 328, 329, 347, 359, 360, 371, 377, 379, 381, 383, 384, 388, 390, 392, 396, 398, 399, 407, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 452, 456, 458, 464, 465, 466, 469, 482, 489, 490, 491, 492, 493, 503, 525, 540, 546, 548, 550, 551, 552, 554, 555, 556, 557, 558, 566, 567, 568, 569, 571, 573, 574, 575, 602, 603, 611, 644, 652, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 685, 687, 688, 689, 691, 692, 693, 694, 695, 696, 701, 706, 721, 725, 727, 794, 810, 814, 815, 821, 823, 824, 825, 827, 828, 830, 834, 837, 838, 839, 870, 871, 874, 885, 893, 918, 921, 922, 923, 924, 949, 972, 1000, 1003, 1007, 1010, 1013, 1022, 1024, 1025, 1026, 1030, 1031, 1032, 1034, 1036, 1041, 1043, 1044, 1047, 1048, 1052], "least_absolute_devi": [1051, 1053, 1054], "least_angl": 393, "least_squar": 1054, "leastangle_2002": [173, 381], "leastsquareserror": 1050, "leav": [2, 88, 138, 143, 152, 192, 194, 236, 283, 322, 366, 367, 371, 381, 383, 389, 398, 416, 423, 449, 450, 453, 454, 471, 512, 566, 567, 568, 569, 570, 571, 573, 574, 575, 682, 684, 811, 816, 817, 818, 819, 827, 828, 853, 854, 921, 922, 923, 924, 999, 1007, 1013, 1017, 1026, 1041, 1048, 1050, 1052, 1053, 1057], "leaveonegroupout": [2, 281, 420, 810, 817, 818, 1047], "leaveonelabelout": 1047, "leaveoneout": [2, 281, 420, 1059], "leavepgroupsout": [2, 420, 811, 1047], "leaveplabelout": 1047, "leaveplabelsout": 1047, "leavepout": [2, 420, 817], "leaves_parallel": 925, "lebedev": [1047, 1048], "lebel": 1056, "lebourgeoi": 1034, "lectur": [416, 653, 1002, 1028], "lecture2": 653, "lecun": [1014, 1024], "led": 1041, "ledoit": [2, 49, 65, 70, 110, 111, 114, 115, 188, 306, 481, 483, 487, 488, 521, 558, 1004, 1031], "ledoit_wolf": [2, 115, 418, 1054], "ledoit_wolf_shrinkag": [2, 1054], "ledoitwolf": [2, 69, 110, 112, 115, 131, 153, 188, 308, 418, 477, 478, 482, 483, 484, 485, 809, 1031, 1045], "lee": [421, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1060], "leepei": 1045, "leereev": 1048, "leeuw": 644, "lefebvr": [1054, 1055], "lefevr": [421, 547], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 80, 86, 90, 97, 99, 106, 109, 114, 115, 121, 122, 126, 127, 138, 141, 143, 144, 145, 148, 151, 154, 159, 161, 178, 184, 187, 191, 194, 211, 218, 219, 220, 222, 229, 231, 232, 235, 236, 245, 249, 253, 255, 256, 261, 263, 264, 267, 272, 273, 274, 275, 277, 285, 286, 288, 300, 302, 303, 310, 312, 315, 317, 330, 332, 333, 337, 346, 347, 351, 366, 379, 384, 386, 388, 413, 416, 419, 420, 422, 423, 424, 426, 433, 439, 454, 480, 490, 491, 492, 493, 502, 507, 558, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 596, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 644, 648, 652, 660, 664, 806, 807, 809, 812, 813, 816, 823, 830, 886, 893, 921, 922, 923, 924, 925, 943, 957, 980, 983, 999, 1002, 1004, 1006, 1008, 1010, 1012, 1017, 1022, 1024, 1026, 1048, 1050, 1055, 1060], "left_h": 317, "left_impur": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "leftarrow": [416, 1014, 1024], "leftmost": 1014, "legaci": [378, 388, 398, 951, 952, 1041, 1048, 1053], "legarreta": [1052, 1054, 1055], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 96, 106, 107, 109, 111, 112, 113, 114, 117, 118, 120, 126, 128, 131, 132, 133, 138, 139, 140, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 169, 175, 176, 180, 181, 182, 183, 184, 191, 192, 196, 198, 199, 201, 205, 206, 207, 208, 212, 218, 219, 220, 221, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 241, 246, 248, 249, 250, 251, 253, 256, 263, 270, 271, 273, 275, 276, 278, 279, 280, 281, 283, 286, 288, 289, 290, 291, 294, 300, 302, 303, 304, 309, 313, 318, 322, 327, 330, 333, 338, 346, 349, 351, 353, 358, 362, 363, 364, 365, 709, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "legend_el": [120, 155, 231, 279, 300, 351], "legend_handl": 304, "legend_lin": 48, "legend_titl": 224, "legitim": [270, 1007], "legitimate_accept": 270, "legitimate_refus": 270, "lego": 1029, "lehoucq": 421, "leibler": [54, 238, 421, 547, 549, 556, 701, 1007, 1048], "leibniz": 1010, "leig": 1047, "leightonzhang": 1047, "leinweb": [1049, 1050], "leisur": 43, "lejeun": 1048, "lekhwani": 1050, "leland": [1047, 1048, 1049, 1051, 1052, 1057], "lemaitr": [0, 405, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "lemir": 1052, "lemma": [37, 249, 376, 543, 550, 558, 905, 906, 907, 1004, 1036, 1044], "lemmat": 424, "lemmatoken": 424, "lemo": [1057, 1058], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 84, 85, 86, 90, 95, 96, 97, 98, 99, 100, 104, 106, 127, 133, 134, 136, 141, 144, 147, 148, 154, 165, 166, 171, 175, 183, 187, 192, 194, 217, 218, 236, 241, 245, 248, 249, 250, 252, 254, 255, 261, 263, 264, 271, 274, 276, 277, 284, 285, 287, 291, 296, 297, 304, 306, 307, 312, 318, 319, 320, 323, 332, 334, 336, 337, 340, 347, 353, 356, 358, 359, 360, 366, 396, 398, 423, 426, 434, 438, 440, 445, 453, 458, 464, 472, 516, 524, 559, 578, 579, 591, 606, 641, 642, 791, 809, 823, 835, 839, 841, 843, 844, 894, 908, 909, 1050, 1053], "lenail": [1049, 1053], "lend": 1034, "lene": 1057, "length": [2, 80, 104, 120, 122, 132, 134, 147, 173, 175, 176, 177, 180, 181, 183, 196, 202, 252, 253, 256, 259, 300, 328, 331, 344, 360, 377, 381, 384, 392, 393, 398, 417, 421, 423, 424, 426, 453, 498, 517, 518, 521, 524, 532, 560, 572, 590, 591, 598, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 641, 655, 656, 659, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 690, 693, 790, 809, 812, 813, 823, 839, 841, 844, 845, 847, 855, 856, 857, 859, 861, 900, 926, 939, 941, 945, 963, 964, 980, 983, 1009, 1016, 1020, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1057], "length_scal": [175, 176, 179, 180, 181, 182, 184, 426, 621, 624, 627, 628, 630, 631, 632, 633], "length_scale_bound": [175, 181, 182, 184, 426, 620, 624, 628, 631, 632], "length_scale_grid": 181, "lengthi": [384, 396], "lenient": [887, 1030, 1058], "lenz": [1052, 1056], "leo": 1058, "leogrin": 1059, "leon": [685, 686, 687, 1041, 1059], "leonardo": 1054, "leonenko": [616, 617], "leonieborn": 1047, "leopoldo": 1054, "leq": [178, 421, 423, 1006, 1010, 1013, 1024, 1025, 1026], "lera": 1048, "leriqu": [1047, 1049], "lernen": 458, "lesne": 1055, "less": [43, 44, 47, 64, 87, 88, 95, 122, 124, 127, 134, 138, 145, 151, 152, 154, 175, 182, 191, 201, 203, 218, 220, 222, 251, 255, 262, 264, 270, 276, 277, 285, 287, 290, 291, 318, 321, 322, 323, 328, 330, 334, 351, 358, 359, 367, 371, 373, 379, 384, 386, 396, 398, 410, 416, 420, 421, 423, 424, 428, 447, 449, 451, 453, 456, 458, 460, 465, 468, 470, 471, 490, 491, 492, 505, 524, 540, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 599, 605, 628, 636, 643, 656, 670, 685, 687, 701, 710, 730, 731, 732, 733, 734, 745, 761, 773, 788, 789, 794, 804, 806, 807, 811, 812, 813, 819, 837, 848, 849, 850, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 876, 888, 890, 891, 893, 896, 902, 903, 913, 914, 921, 922, 923, 924, 945, 960, 999, 1000, 1002, 1003, 1004, 1007, 1009, 1010, 1013, 1015, 1020, 1024, 1025, 1026, 1029, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1055, 1056, 1058], "lessen": [224, 667, 668], "lesser": [312, 398, 450, 550, 1006], "let": [43, 44, 52, 88, 90, 99, 105, 109, 120, 124, 129, 145, 148, 151, 152, 154, 156, 175, 181, 182, 187, 191, 192, 193, 200, 207, 218, 220, 236, 238, 242, 252, 259, 270, 271, 276, 279, 283, 290, 334, 358, 360, 366, 367, 379, 384, 386, 390, 396, 410, 413, 415, 416, 420, 423, 424, 449, 453, 499, 509, 513, 519, 543, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 690, 693, 879, 886, 887, 1006, 1007, 1008, 1009, 1010, 1017, 1018, 1020, 1025, 1026, 1034, 1051, 1060], "letelli": 1047, "letter": [173, 183, 379, 381, 388, 424, 797, 798, 815, 832, 1010], "leu": 1055, "leung": 1052, "lev_metr": 396, "levarag": 333, "level": [43, 48, 50, 51, 64, 70, 76, 88, 124, 143, 147, 166, 173, 174, 175, 176, 179, 182, 184, 188, 191, 192, 229, 230, 231, 232, 233, 236, 245, 249, 250, 265, 270, 276, 279, 285, 286, 303, 310, 345, 346, 348, 349, 351, 354, 359, 366, 371, 379, 381, 384, 386, 390, 396, 398, 401, 402, 407, 414, 421, 424, 426, 430, 462, 476, 502, 503, 505, 512, 530, 540, 545, 546, 554, 555, 556, 570, 571, 576, 577, 620, 624, 631, 632, 634, 675, 676, 677, 685, 686, 687, 696, 699, 701, 703, 709, 711, 725, 732, 737, 794, 834, 835, 836, 838, 841, 842, 869, 870, 871, 911, 926, 999, 1006, 1010, 1011, 1013, 1018, 1024, 1026, 1029, 1030, 1031, 1044, 1052, 1055, 1056, 1057, 1060], "levelnam": 124, "leven": 396, "levenshtein": [334, 396], "levenshtein_dist": 334, "levequ": [851, 893], "leverag": [43, 47, 72, 84, 118, 236, 334, 358, 359, 371, 372, 382, 398, 420, 423, 888, 999, 1006, 1044, 1056, 1059], "levesqu": 1047, "levi": [543, 1048], "levinson": [1049, 1050], "levitski": [1056, 1057, 1058], "levitskii": 1054, "lewi": [379, 1048, 1052], "lex": [416, 460, 470], "lexicograph": [398, 576, 797, 803, 855, 863], "lexicon": 1020, "lexsort": 61, "lf": 392, "lfw": [2, 45, 379, 502, 503, 1041], "lfw_home": 379, "lfw_pairs_train": [379, 502], "lfw_peopl": [45, 379, 503], "lg2012": 423, "lgtm": 1048, "li": [0, 339, 379, 406, 648, 651, 705, 735, 765, 906, 999, 1002, 1010, 1013, 1020, 1022, 1025, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "liabil": 236, "liac": [331, 378, 384, 505, 1056, 1057], "liam": [1049, 1050], "liang": [1047, 1052, 1053, 1058, 1059], "liau": 1044, "lib": [151, 319, 372, 382, 402, 1029], "liberti": 267, "libisel": 1059, "liblinear": [211, 345, 390, 667, 668, 797, 913, 914, 915, 918, 919, 1006, 1010, 1025, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1057], "libomp": [382, 1053], "librari": [45, 270, 276, 329, 331, 364, 367, 376, 378, 379, 382, 383, 384, 385, 390, 392, 396, 397, 398, 402, 410, 412, 472, 667, 913, 914, 915, 916, 918, 919, 1006, 1010, 1025, 1026, 1029, 1030, 1034, 1039, 1044, 1048, 1049, 1050, 1051, 1052, 1054, 1058], "libsvm": [2, 196, 345, 377, 390, 495, 517, 572, 913, 914, 915, 916, 917, 918, 919, 1025, 1036, 1041, 1043, 1049, 1052, 1055], "libsvmtool": [196, 378, 495, 517, 518], "licenc": 378, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 378, 396, 398, 1026, 1034], "lichman": 381, "liddel": 1049, "lidston": [848, 849, 850, 852, 1012], "lie": [52, 95, 117, 172, 191, 250, 317, 338, 345, 347, 421, 423, 615, 861, 863, 864, 865, 913, 914, 1004, 1007, 1010, 1020, 1025], "lieg": 423, "lieret": 1056, "lieu": [1047, 1048], "life": [52, 154, 269, 334, 392, 1007], "lifecycl": [1029, 1030], "lifo": 928, "lift": 402, "light": [141, 379], "lighter": [371, 709, 711, 791, 798, 1057], "lightfm": 1029, "lightgbm": [154, 423, 570, 571, 1029, 1050, 1057], "lightgreen": [161, 224, 235], "lightgrei": 49, "lightweight": [385, 809, 823, 834, 835], "ligo": 1048, "lihaitao": 1059, "lik_max": 111, "lik_min": 111, "like": [0, 2, 43, 51, 52, 57, 87, 90, 93, 95, 104, 122, 127, 131, 133, 136, 138, 140, 145, 151, 154, 155, 175, 181, 191, 199, 218, 252, 267, 270, 276, 279, 280, 283, 284, 291, 306, 315, 317, 322, 323, 326, 339, 347, 351, 358, 359, 367, 371, 373, 376, 378, 379, 383, 384, 386, 388, 391, 392, 393, 396, 397, 398, 407, 410, 412, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 524, 528, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 590, 591, 592, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 935, 937, 944, 945, 959, 963, 972, 973, 980, 981, 982, 994, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1016, 1017, 1020, 1025, 1026, 1030, 1034, 1038, 1041, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "likelihood": [2, 69, 92, 110, 112, 113, 114, 115, 131, 153, 175, 176, 177, 179, 180, 181, 182, 184, 188, 205, 236, 265, 268, 276, 282, 308, 315, 317, 386, 398, 414, 418, 421, 423, 426, 445, 477, 478, 479, 480, 481, 482, 483, 484, 485, 524, 541, 545, 550, 558, 559, 560, 619, 620, 640, 654, 667, 721, 750, 806, 807, 809, 836, 839, 858, 869, 889, 901, 915, 916, 918, 919, 1006, 1009, 1012, 1020, 1025, 1031, 1044, 1045, 1050, 1056], "likewis": [253, 416, 532], "lil": [398, 562, 563, 880, 935, 963, 1013], "lil_matrix": 55, "lili": [1049, 1050], "lilian": [1046, 1047, 1058], "lim": [178, 543], "lima": [1054, 1055], "limit": [43, 47, 55, 64, 72, 77, 92, 101, 115, 138, 145, 146, 152, 159, 186, 191, 192, 193, 198, 218, 219, 235, 249, 283, 319, 323, 329, 354, 360, 367, 372, 385, 386, 389, 396, 398, 399, 414, 415, 416, 419, 421, 425, 454, 471, 476, 568, 569, 570, 571, 641, 659, 688, 691, 692, 697, 787, 830, 861, 863, 864, 865, 886, 887, 911, 915, 916, 917, 918, 919, 999, 1006, 1007, 1009, 1010, 1017, 1018, 1020, 1030, 1036, 1049, 1051, 1054, 1055, 1058, 1060], "limits_": 1013, "lin": [0, 543, 667, 1025, 1046, 1047, 1048, 1049], "lin_clf": 1025, "linalg": [70, 89, 111, 112, 115, 131, 133, 204, 261, 262, 263, 266, 267, 333, 384, 390, 421, 459, 460, 461, 470, 530, 541, 544, 550, 553, 666, 681, 683, 696, 700, 704, 955], "linalgerror": 1051, "linalgwarn": 1060, "lincoln": 379, "lindenbaum": 543, "lindenstrauss": [37, 90, 188, 244, 376, 497, 511, 905, 906, 907, 1027, 1031, 1036], "lindgren": 1059, "lindquist": 1056, "line": [48, 50, 52, 55, 75, 78, 95, 104, 113, 121, 124, 129, 138, 144, 150, 174, 186, 187, 188, 191, 192, 205, 207, 208, 210, 213, 214, 216, 219, 221, 226, 227, 229, 230, 232, 245, 249, 250, 253, 255, 273, 280, 282, 283, 303, 307, 310, 318, 328, 346, 349, 351, 352, 355, 356, 358, 378, 379, 382, 384, 385, 386, 388, 389, 390, 391, 392, 396, 421, 422, 423, 446, 495, 496, 497, 517, 518, 551, 562, 563, 564, 565, 619, 622, 623, 641, 679, 695, 709, 710, 711, 815, 832, 1004, 1010, 1014, 1017, 1024, 1029, 1031, 1033, 1043, 1052, 1054, 1057, 1058], "line0": [51, 241], "line1": [46, 51, 241], "line2": [46, 51, 241, 355], "line2d": [48, 113, 232, 303, 346, 349, 815, 832], "line_": [391, 446, 707, 709, 710, 711, 815, 832], "line_bin": 318, "line_fig": 144, "line_i": 221, "line_kw": [154, 156, 256, 278, 327, 333, 641, 815, 832], "line_kwarg": [159, 710], "line_profil": 390, "line_trac": 144, "line_x": [221, 235], "line_y_ransac": 221, "linea": 404, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 87, 92, 108, 109, 111, 112, 113, 114, 115, 118, 120, 124, 129, 132, 141, 143, 157, 159, 162, 164, 166, 168, 173, 179, 181, 186, 187, 189, 190, 192, 196, 199, 201, 203, 204, 205, 207, 208, 213, 215, 216, 219, 220, 222, 223, 226, 230, 232, 234, 235, 236, 237, 240, 242, 248, 249, 251, 253, 254, 257, 266, 269, 272, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 291, 302, 303, 305, 306, 307, 315, 317, 318, 319, 322, 324, 328, 329, 342, 344, 347, 348, 349, 352, 354, 355, 358, 364, 365, 372, 376, 380, 381, 382, 386, 387, 389, 398, 401, 404, 414, 416, 419, 420, 421, 422, 423, 424, 425, 426, 428, 450, 452, 463, 473, 475, 483, 490, 491, 492, 505, 510, 511, 521, 524, 530, 533, 541, 542, 543, 544, 545, 548, 550, 552, 553, 557, 558, 559, 563, 575, 591, 598, 602, 603, 615, 618, 623, 629, 640, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 697, 698, 699, 700, 701, 702, 710, 716, 725, 728, 759, 762, 774, 776, 783, 794, 809, 820, 824, 836, 839, 853, 854, 858, 862, 869, 870, 871, 874, 878, 879, 880, 883, 886, 888, 890, 891, 892, 893, 902, 906, 913, 914, 915, 916, 917, 918, 919, 999, 1001, 1002, 1003, 1005, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1024, 1025, 1031, 1032, 1034, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055], "linear_baselin": 328, "linear_kernel": [2, 412, 770, 774, 1008, 1049, 1060], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 89, 105, 107, 109, 118, 143, 159, 161, 162, 164, 165, 171, 172, 173, 175, 186, 188, 190, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 245, 246, 247, 248, 252, 254, 257, 259, 270, 272, 279, 284, 285, 289, 290, 291, 296, 315, 318, 319, 322, 324, 326, 327, 328, 329, 330, 332, 333, 334, 340, 358, 367, 371, 373, 383, 384, 386, 390, 392, 393, 397, 398, 407, 412, 415, 417, 423, 436, 441, 446, 473, 546, 548, 551, 552, 554, 555, 557, 576, 577, 578, 579, 606, 640, 641, 643, 644, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 709, 710, 797, 808, 823, 832, 834, 835, 836, 838, 840, 844, 845, 846, 847, 871, 888, 892, 913, 914, 917, 920, 949, 951, 952, 953, 993, 1002, 1006, 1010, 1011, 1016, 1018, 1020, 1024, 1031, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "linear_model_preprocessor": 218, "linear_pca": 417, "linear_preprocessor": 159, "linear_regress": [220, 291], "linear_sum_assign": [413, 728], "linear_svc": 1025, "linear_svm": 250, "linear_svm_scor": 250, "linear_svm_tim": 250, "lineardiscriminantanalysi": [2, 69, 70, 132, 239, 306, 367, 412, 545, 559, 862, 1004, 1011, 1013, 1041, 1044, 1045, 1046, 1047, 1048, 1050, 1053, 1055, 1056, 1057], "linearli": [67, 129, 140, 173, 191, 198, 232, 239, 245, 285, 286, 319, 322, 351, 358, 371, 381, 396, 421, 423, 524, 562, 651, 716, 882, 883, 1010, 1013, 1016, 1025, 1048, 1057], "linearly_separ": [67, 312], "linearmodel": 1054, "linearoper": [333, 696], "linearregress": [2, 118, 162, 190, 198, 208, 213, 214, 215, 216, 221, 224, 235, 248, 252, 254, 272, 291, 318, 367, 384, 396, 397, 417, 423, 473, 579, 641, 644, 655, 658, 661, 663, 680, 681, 696, 1006, 1010, 1011, 1020, 1045, 1046, 1050, 1053, 1054, 1055, 1057], "linearregressionifittedlinearregress": 248, "linearregressionlinearregress": 162, "linearsvc": [2, 62, 64, 104, 106, 169, 170, 188, 196, 250, 273, 275, 283, 319, 326, 342, 343, 344, 348, 349, 354, 358, 371, 386, 390, 414, 424, 425, 445, 521, 576, 586, 640, 648, 652, 661, 681, 682, 683, 684, 685, 696, 744, 751, 836, 841, 914, 915, 918, 920, 1006, 1010, 1011, 1025, 1031, 1041, 1042, 1043, 1047, 1049, 1052, 1057], "linearsvc__c": 319, "linearsvclinearsvc": [106, 170, 283], "linearsvr": [2, 577, 919, 1025, 1045, 1047, 1052, 1057], "linecollect": [51, 241, 248, 641], "linen": [51, 241], "lineno": 390, "lineplot": [154, 276], "liner": [386, 839], "lines_": [391, 641, 815, 832], "linestyl": [49, 50, 69, 95, 107, 113, 131, 133, 138, 150, 161, 164, 166, 175, 178, 180, 182, 184, 193, 194, 205, 206, 207, 218, 219, 220, 224, 228, 230, 231, 236, 253, 255, 270, 273, 275, 279, 280, 285, 290, 302, 310, 313, 318, 345, 348, 349, 351, 352, 354], "linewidth": [61, 69, 70, 72, 75, 93, 107, 111, 118, 122, 126, 139, 151, 154, 156, 175, 179, 183, 207, 208, 212, 213, 214, 216, 219, 221, 224, 232, 235, 245, 253, 255, 285, 289, 303, 307, 318, 327, 333, 345, 346, 348, 364], "linger": 220, "linguist": [725, 910, 1023], "lingyi1110": 1056, "link": [51, 55, 138, 191, 192, 198, 218, 222, 236, 261, 270, 279, 307, 362, 372, 378, 383, 384, 385, 386, 388, 392, 398, 414, 416, 418, 421, 423, 426, 570, 571, 619, 657, 678, 689, 697, 714, 938, 940, 1006, 1013, 1026, 1027, 1029, 1033, 1039, 1041, 1044, 1045, 1048, 1049, 1052, 1058], "link_thickness_i": 307, "linkag": [71, 74, 75, 76, 79, 82, 87, 90, 91, 92, 102, 188, 194, 448, 449, 453, 454, 471, 521, 523, 531, 893, 1029, 1031, 1044, 1049, 1052], "linkage_matrix": 76, "linkage_tre": 1045, "linkedin": 388, "linker": 385, "linnerrud": [377, 1036], "linnerud": [2, 381, 514], "linprog": [679, 1006], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 84, 90, 113, 114, 125, 133, 139, 151, 175, 176, 178, 179, 180, 181, 182, 184, 192, 198, 199, 201, 203, 208, 212, 218, 219, 220, 224, 228, 229, 230, 231, 232, 236, 243, 245, 248, 249, 251, 253, 265, 276, 278, 279, 283, 284, 285, 286, 291, 302, 303, 309, 310, 318, 320, 330, 331, 346, 347, 350, 351, 352, 354, 355, 356, 640, 641, 815, 837, 853, 854], "lint": [384, 392], "linter": 588, "linthresh": [198, 203], "linu": [1057, 1058, 1059], "linux": [384, 386, 387, 392, 1029, 1041], "lipoprotein": [173, 381], "lippert": 1006, "lippmann": 379, "lipschitz": [37, 1022], "lisa": [1049, 1050, 1052, 1053, 1055, 1056], "lise": 1055, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 84, 97, 104, 133, 134, 142, 144, 150, 159, 194, 222, 255, 256, 271, 274, 276, 277, 279, 280, 285, 289, 306, 319, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 350, 359, 360, 373, 378, 379, 382, 383, 384, 386, 387, 389, 390, 391, 392, 393, 396, 397, 398, 399, 402, 403, 407, 414, 416, 417, 420, 422, 423, 424, 439, 441, 445, 458, 464, 465, 472, 473, 474, 475, 479, 480, 486, 490, 491, 492, 496, 497, 498, 499, 501, 502, 505, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 532, 541, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 600, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 641, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 690, 693, 695, 696, 701, 705, 706, 708, 719, 720, 721, 722, 725, 727, 734, 742, 751, 755, 763, 787, 790, 792, 797, 803, 806, 807, 809, 812, 813, 815, 820, 821, 823, 832, 834, 835, 836, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 877, 881, 884, 886, 887, 892, 894, 910, 914, 916, 919, 921, 922, 923, 924, 927, 934, 935, 939, 940, 941, 945, 948, 949, 950, 952, 960, 961, 964, 975, 980, 983, 993, 999, 1000, 1006, 1010, 1012, 1013, 1014, 1017, 1018, 1021, 1026, 1029, 1030, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "list_param": 384, "listedcolormap": [67, 70, 147, 305, 308, 312, 319], "listen": 358, "listinfo": 392, "lite": 1041, "liter": [384, 1034], "literatur": [83, 180, 276, 294, 359, 381, 384, 390, 392, 396, 397, 416, 419, 421, 423, 451, 455, 457, 510, 545, 547, 549, 556, 564, 565, 597, 600, 717, 806, 999, 1002, 1006, 1010, 1051], "litsidi": [1056, 1057], "littl": [191, 192, 193, 194, 245, 379, 424, 470, 653, 809, 823, 957, 1000, 1007, 1009, 1025, 1026, 1042, 1053, 1058], "lituiev": 1054, "liu": [0, 374, 395, 572, 735, 765, 1010, 1016, 1044, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "liutong": 1049, "live": [50, 104, 191, 270, 310, 379, 384, 416, 507, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 1033], "livesei": 358, "livni": [416, 450], "lizao": 1049, "lizsz": 1047, "lj2017": 416, "lk": 1044, "lkjcalc": 1049, "lkubin": 1052, "ll": [50, 90, 146, 271, 310, 384, 396, 541, 550, 1002, 1013, 1026], "llcrnrlat": [50, 310], "llcrnrlon": [50, 310], "lle": [238, 239, 240, 242, 539, 698, 702, 1007, 1053], "lle_hessian": 238, "lle_ltsa": 238, "lle_method": 238, "lle_mod": 238, "lle_standard": 238, "lloyd": [416, 451, 455, 457, 467, 1055, 1056], "llvm": 382, "lm": 200, "lmbda": 321, "lmbda_bc": 321, "lmbda_yj": 321, "lml": [176, 177, 181, 426], "ln": [388, 1006, 1014, 1020], "loa": [174, 182, 188, 426, 505, 620, 624, 631, 632, 634, 1031], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 81, 83, 88, 105, 106, 124, 134, 143, 145, 147, 149, 155, 156, 159, 160, 162, 170, 171, 180, 191, 192, 196, 200, 214, 215, 218, 226, 234, 247, 248, 252, 254, 255, 256, 257, 259, 266, 270, 272, 274, 276, 281, 283, 288, 290, 294, 297, 301, 306, 313, 314, 315, 327, 328, 330, 331, 333, 338, 339, 340, 363, 366, 371, 376, 379, 381, 387, 390, 397, 410, 419, 420, 421, 423, 490, 491, 492, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 541, 543, 552, 853, 854, 957, 1020, 1030, 1036, 1041, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "load_ames_h": 159, "load_boston": [1047, 1049, 1054], "load_breast_canc": [2, 173, 194, 339, 362, 389, 601, 604, 605, 607, 683, 684, 797, 1010, 1046, 1047, 1052], "load_cont": 512, "load_dataset": 358, "load_diabet": [2, 46, 152, 162, 164, 173, 187, 205, 206, 207, 214, 215, 256, 272, 331, 423, 567, 571, 577, 682, 710, 834, 835, 836, 922, 924, 1018, 1047, 1052, 1055], "load_digit": [2, 68, 86, 87, 93, 106, 107, 165, 171, 209, 225, 239, 249, 250, 274, 275, 278, 284, 292, 299, 301, 306, 313, 315, 332, 336, 337, 390, 417, 428, 453, 454, 541, 542, 543, 544, 608, 609, 647, 648, 677, 697, 698, 699, 700, 702, 704, 1047, 1052], "load_fil": [2, 378, 379, 1043, 1055], "load_iri": [2, 66, 76, 80, 108, 120, 128, 130, 132, 134, 147, 160, 166, 169, 177, 202, 211, 227, 259, 263, 269, 281, 282, 283, 285, 286, 300, 305, 308, 313, 326, 328, 331, 341, 343, 344, 347, 350, 363, 366, 397, 410, 416, 417, 420, 423, 425, 436, 570, 576, 610, 611, 619, 628, 629, 631, 632, 640, 667, 668, 720, 797, 809, 812, 813, 815, 823, 841, 862, 908, 909, 910, 921, 923, 925, 926, 927, 1000, 1005, 1010, 1011, 1012, 1013, 1017, 1020, 1026, 1047, 1049, 1052], "load_lfw_pair": 1046, "load_linnerud": [2, 846, 1047, 1052], "load_mnist": [226, 297], "load_mtpl2": 236, "load_sample_imag": [2, 83, 592, 593, 596, 1050], "load_svmlight_fil": [2, 378, 1041, 1042, 1047, 1048, 1049, 1056], "load_win": [2, 48, 258, 322, 857, 865, 1038, 1052], "loader": [2, 277, 340, 358, 377, 378, 379, 507, 508, 517, 1030, 1041, 1046, 1048, 1049, 1052], "loan": [423, 543, 1006, 1034], "loayza": 1055, "lobpcg": [81, 460, 470, 697, 700, 704, 1051, 1054, 1055, 1056], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 106, 109, 112, 113, 114, 117, 120, 126, 128, 131, 132, 133, 138, 140, 141, 142, 150, 151, 152, 153, 154, 156, 159, 161, 162, 169, 175, 176, 182, 184, 191, 192, 201, 206, 208, 212, 218, 219, 220, 221, 224, 225, 228, 231, 232, 235, 236, 241, 248, 249, 250, 251, 253, 255, 263, 264, 271, 274, 275, 276, 279, 280, 283, 286, 289, 290, 291, 300, 302, 303, 313, 318, 321, 322, 327, 330, 333, 338, 346, 349, 351, 353, 354, 358, 363, 365, 823, 890, 902], "loc_a": 321, "loc_b": 321, "local": [2, 43, 48, 51, 58, 74, 87, 92, 96, 124, 127, 143, 144, 156, 173, 180, 181, 188, 192, 219, 232, 237, 240, 242, 245, 249, 255, 298, 307, 346, 364, 365, 372, 381, 382, 384, 388, 390, 392, 402, 416, 421, 423, 424, 426, 455, 460, 470, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 511, 547, 549, 553, 556, 558, 568, 569, 572, 575, 619, 620, 697, 698, 699, 700, 701, 702, 704, 705, 767, 768, 856, 859, 862, 864, 874, 883, 906, 909, 917, 975, 1008, 1009, 1013, 1014, 1026, 1031, 1033, 1035, 1036, 1045, 1049, 1053, 1056, 1059, 1060], "local_filenam": 500, "localcach": 402, "locally_linear_embed": [2, 242, 1007, 1060], "locallylinearembed": [2, 51, 238, 239, 240, 330, 697, 699, 701, 1007, 1013, 1046, 1047, 1055, 1056, 1057, 1060], "localoutlierfactor": [2, 245, 255, 303, 304, 330, 398, 572, 917, 1016, 1048, 1049, 1051, 1055, 1056, 1057, 1058, 1060], "localoutlierfactor__n_neighbor": 255, "locat": [48, 62, 88, 89, 106, 113, 114, 212, 310, 328, 347, 377, 379, 382, 384, 388, 389, 392, 393, 402, 403, 416, 418, 422, 456, 468, 469, 477, 478, 479, 480, 481, 482, 483, 484, 496, 509, 510, 513, 514, 521, 524, 994, 1000, 1006, 1011, 1016, 1020, 1026, 1049], "location_": [113, 114, 477, 478, 479, 480, 481, 482, 483, 484], "location_reweight": [477, 482], "lock": [387, 402, 409, 410, 975, 1059], "loev": 543, "lof": [2, 48, 188, 232, 245, 255, 298, 346, 572, 859, 917, 1016, 1031], "lof_kw": 255, "lofti": [1051, 1052], "log": [2, 43, 58, 62, 63, 64, 111, 124, 138, 149, 151, 159, 169, 173, 176, 177, 179, 180, 181, 184, 205, 207, 211, 218, 223, 228, 236, 249, 251, 265, 270, 307, 322, 358, 379, 381, 382, 384, 392, 393, 398, 413, 414, 416, 417, 418, 421, 423, 424, 426, 456, 459, 468, 473, 478, 479, 480, 481, 482, 483, 484, 541, 545, 550, 558, 559, 560, 562, 564, 566, 568, 571, 573, 599, 600, 602, 603, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 651, 654, 657, 667, 668, 678, 680, 685, 689, 731, 750, 760, 764, 806, 807, 809, 812, 813, 823, 848, 849, 850, 851, 852, 853, 854, 858, 869, 870, 877, 878, 907, 910, 915, 918, 920, 921, 923, 955, 999, 1002, 1004, 1006, 1007, 1012, 1013, 1015, 1018, 1020, 1024, 1026, 1029, 1030, 1043, 1044, 1045, 1050, 1051, 1052, 1055, 1058, 1059, 1060], "log10": [169, 181, 191, 211, 277, 347], "log1p": [109, 248, 877, 1010, 1020], "log2": [142, 228, 257, 566, 567, 568, 569, 573, 574, 921, 922, 923, 924, 1011], "log_": 1010, "log_2": [413, 572, 1016], "log_bas": 735, "log_den": 302, "log_dens": 858, "log_likelihood": [111, 619, 620, 806, 807], "log_likelihood_gradi": [619, 620], "log_logist": 1058, "log_loss": [2, 62, 63, 150, 153, 176, 322, 340, 358, 398, 414, 423, 566, 568, 570, 573, 655, 667, 685, 921, 923, 999, 1006, 1010, 1024, 1026, 1043, 1045, 1047, 1055, 1056, 1057, 1058], "log_marginal_likelihood": [176, 177, 179, 181, 184, 426, 619, 620, 1051], "log_marginal_likelihood_value_": [619, 620], "log_prob": [806, 807, 808, 831], "log_reg": [259, 330], "log_reg_input_featur": 330, "log_scal": 1057, "log_scale_transform": [218, 236], "log_scaled_numer": [218, 236], "log_y_prob": 870, "logaddexp": 1058, "logan": [1055, 1056, 1057], "logarithm": [2, 109, 159, 191, 222, 249, 277, 347, 398, 425, 468, 599, 667, 668, 685, 713, 735, 750, 760, 764, 765, 766, 800, 808, 831, 844, 853, 854, 955, 1026, 1048], "logcosh": [428, 542], "logdet": 955, "logged_in": 379, "logger": 1052, "logic": [136, 372, 385, 386, 391, 412, 423, 1026, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "logical_and": [53, 151], "logical_not": [57, 99, 133, 221], "logical_or": [220, 226, 285, 390], "logical_xor": [53, 179, 351], "loginov": 1047, "logist": [2, 62, 64, 66, 103, 105, 109, 120, 134, 143, 165, 171, 188, 197, 206, 213, 215, 216, 222, 224, 227, 229, 235, 246, 248, 259, 270, 284, 287, 290, 296, 314, 315, 322, 330, 343, 344, 354, 355, 358, 398, 399, 414, 417, 423, 425, 426, 445, 497, 505, 511, 513, 521, 550, 568, 570, 619, 640, 655, 666, 667, 668, 675, 677, 685, 750, 809, 823, 839, 842, 869, 870, 871, 873, 893, 920, 942, 944, 1010, 1014, 1015, 1024, 1025, 1031, 1032, 1034, 1036, 1045, 1048, 1049, 1051, 1052], "logistic__c": 107, "logistic_regress": [270, 832, 840], "logistic_regression_path": [1049, 1050], "logisticregress": [2, 62, 66, 105, 107, 143, 161, 165, 171, 172, 173, 202, 208, 209, 210, 211, 225, 233, 234, 246, 247, 257, 259, 270, 279, 285, 290, 315, 319, 326, 327, 328, 329, 330, 332, 334, 358, 371, 384, 386, 390, 392, 397, 407, 414, 415, 417, 423, 425, 436, 441, 446, 576, 578, 606, 640, 643, 652, 661, 668, 681, 682, 683, 684, 685, 696, 709, 797, 808, 823, 832, 838, 840, 844, 845, 847, 898, 899, 901, 902, 903, 904, 920, 951, 952, 953, 993, 1006, 1010, 1011, 1020, 1024, 1025, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "logisticregression__c": [270, 319], "logisticregressioncv": [2, 64, 322, 398, 407, 667, 1006, 1011, 1045, 1046, 1047, 1049, 1050, 1051, 1055, 1056, 1058, 1059, 1060], "logisticregressionifittedlogisticregress": 315, "logisticregressionlogisticregress": [105, 143, 246, 247, 257, 259, 270, 290, 327, 330], "logit": [2, 414, 426, 667, 668, 1006], "loglik_lw": 111, "loglik_oa": 111, "loglik_r": 111, "loglike_": 541, "loglog": [111, 249], "logloss": 1052, "lognorm": [151, 181, 200, 265, 321, 1020], "logo": [0, 420, 816], "logprob": 858, "logreg": [202, 847], "logspac": [43, 51, 64, 107, 111, 131, 164, 173, 176, 181, 191, 211, 222, 223, 249, 251, 265, 270, 277, 289, 292, 301, 312, 319, 322, 347, 354, 832, 840, 1005, 1006], "logsumexp": [307, 1048], "loguniform": [45, 175, 284, 999, 1051], "logx": [222, 354], "lohit": 1058, "loic": [1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "loki": [372, 1010, 1049, 1052], "lomp": 382, "lon": 773, "london": [417, 424, 474], "londschien": [1054, 1058], "lone": [1056, 1057], "long": [0, 30, 43, 50, 51, 79, 97, 151, 180, 187, 191, 193, 218, 252, 253, 255, 279, 310, 317, 327, 358, 359, 367, 372, 382, 384, 392, 396, 398, 399, 410, 416, 461, 507, 547, 685, 686, 687, 812, 813, 848, 849, 850, 851, 852, 870, 871, 881, 1010, 1016, 1020, 1021, 1023, 1024, 1028, 1043, 1047, 1053, 1055], "long_term_trend_kernel": 180, "long_titl": 351, "longer": [0, 43, 70, 88, 141, 191, 192, 206, 314, 329, 384, 386, 416, 420, 423, 424, 457, 545, 572, 1005, 1009, 1010, 1012, 1015, 1025, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "longest": 297, "longitud": [310, 317, 379, 507, 708, 773], "longpathsen": 402, "longstand": [1042, 1048], "loo": [398, 817, 1052], "look": [43, 44, 64, 88, 90, 124, 127, 129, 151, 152, 175, 180, 181, 187, 191, 192, 220, 238, 242, 245, 252, 267, 270, 271, 276, 278, 290, 314, 333, 358, 359, 367, 372, 373, 378, 379, 384, 385, 386, 388, 390, 392, 396, 397, 416, 419, 421, 422, 423, 424, 456, 496, 497, 566, 567, 568, 569, 573, 574, 611, 612, 640, 668, 701, 893, 921, 922, 923, 924, 1006, 1007, 1020, 1024, 1025, 1027, 1041, 1049, 1051], "lookup": [393, 974, 1050], "loop": [46, 47, 141, 151, 191, 271, 281, 358, 366, 371, 384, 385, 390, 416, 420, 425, 655, 656, 661, 662, 668, 669, 670, 671, 672, 999, 1023, 1024, 1044, 1045, 1048, 1053, 1054, 1057, 1058], "loopym": 1051, "loos": [267, 273, 1025, 1049], "looser": 211, "lopusz": 1052, "lorain": 331, "lorek": 1048, "lorentzen": [0, 405, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "lorenz": [218, 236, 1046, 1058], "lorenz_curv": [218, 236], "lose": [222, 235, 360, 379, 398, 419, 424, 426, 956, 957, 1000, 1006], "losi": [0, 406, 1041], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 133, 144, 150, 151, 152, 153, 175, 176, 188, 197, 201, 208, 211, 220, 222, 223, 225, 226, 230, 236, 251, 270, 284, 313, 314, 322, 329, 333, 334, 340, 344, 345, 349, 351, 354, 358, 396, 398, 414, 421, 426, 472, 473, 505, 517, 518, 541, 547, 548, 549, 552, 556, 561, 562, 563, 567, 568, 569, 570, 571, 574, 652, 655, 658, 667, 668, 675, 676, 677, 678, 679, 680, 681, 685, 686, 687, 688, 712, 715, 718, 731, 732, 743, 744, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 799, 800, 805, 809, 812, 813, 823, 835, 836, 839, 870, 871, 873, 874, 877, 878, 886, 887, 888, 893, 913, 914, 919, 920, 922, 924, 957, 961, 1003, 1006, 1014, 1018, 1023, 1024, 1025, 1026, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "loss_": [313, 870, 871, 1014, 1055], "loss_curve_": [313, 870, 871], "loss_func": 52, "loss_funct": 52, "loss_function_": 1058, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1050, "lossi": 416, "lossili": 398, "lost": [58, 92, 115, 379, 385, 396, 410, 1007, 1010], "lostanlen": 1051, "lostcoast": 1051, "lot": [43, 115, 154, 191, 222, 379, 384, 385, 386, 392, 421, 423, 812, 813, 905, 906, 999, 1022, 1024, 1025, 1029, 1030, 1034, 1041, 1046, 1048, 1049, 1050, 1051, 1053], "lot_area": 255, "lotan": 1034, "lotconfig": 148, "lotfrontag": 109, "loui": [331, 1046, 1047, 1051, 1053, 1055, 1057, 1058], "louib": [1049, 1050], "loupp": [0, 406, 423, 564, 565, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "lourida": 1047, "low": [2, 37, 43, 50, 51, 72, 85, 114, 118, 126, 128, 131, 138, 141, 155, 173, 193, 211, 213, 218, 220, 222, 232, 238, 240, 245, 249, 255, 261, 262, 264, 267, 269, 270, 276, 278, 282, 283, 292, 303, 304, 314, 321, 323, 324, 332, 339, 346, 347, 358, 366, 380, 381, 384, 389, 392, 396, 398, 402, 413, 414, 415, 420, 421, 424, 450, 452, 457, 476, 530, 533, 544, 591, 598, 612, 688, 701, 705, 714, 735, 751, 798, 858, 887, 894, 911, 957, 974, 999, 1005, 1006, 1007, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1020, 1022, 1025, 1026, 1032, 1036, 1042, 1045, 1046, 1047, 1049, 1050, 1055, 1056], "low_cardin": 323, "low_cardinality_featur": 323, "low_cardinalityindex": 323, "low_i": 213, "low_x": 213, "lower": [37, 44, 52, 63, 64, 67, 69, 93, 112, 118, 120, 124, 126, 131, 138, 141, 144, 147, 151, 154, 155, 171, 175, 177, 179, 181, 183, 191, 192, 193, 203, 204, 206, 208, 218, 219, 220, 221, 231, 238, 242, 248, 249, 254, 263, 267, 270, 275, 276, 278, 279, 283, 284, 286, 289, 290, 300, 301, 303, 304, 319, 322, 330, 334, 339, 347, 358, 359, 360, 363, 379, 384, 398, 414, 415, 416, 419, 420, 421, 422, 423, 424, 427, 452, 456, 472, 475, 507, 518, 541, 543, 550, 553, 562, 568, 569, 570, 571, 572, 597, 598, 600, 612, 620, 622, 623, 624, 626, 628, 629, 631, 632, 634, 641, 642, 644, 646, 686, 688, 721, 725, 734, 737, 743, 748, 806, 807, 859, 861, 863, 864, 865, 867, 894, 913, 914, 915, 916, 917, 920, 943, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1024, 1025, 1026, 1043, 1044, 1049, 1056, 1058], "lower_bound": 275, "lower_bound_": [806, 807, 1049], "lowercas": [424, 432, 450, 451, 453, 455, 457, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 597, 598, 600, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 874, 879, 905, 906, 1054], "lowest": [2, 109, 118, 192, 203, 266, 378, 416, 420, 644, 646, 812, 813, 816, 920, 921, 1007, 1010, 1026, 1056], "loyal": 1046, "loyola": [0, 374, 1054, 1055], "lo\u00efc": [0, 405, 1049, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "lp_model": [336, 337], "lpgo": [420, 818], "lpo": 819, "lprun": 390, "lr": [62, 64, 143, 161, 162, 221, 247, 248, 272, 279, 397, 407, 423, 577, 578, 579, 721, 993], "lr_": 1010, "lr__c": 423, "lr_base": 279, "lrap": [748, 1010], "lrjball": [1051, 1052], "lrlinearregress": 162, "ls100": 341, "ls2010": 1002, "ls30": 341, "ls50": 341, "ls_pipelin": 340, "lsa": [2, 421, 553, 1043], "lsa_vector": 359, "lshforest": [1045, 1048], "lsi": 421, "lsqr": [69, 324, 558, 681, 683, 696, 1004, 1042, 1048, 1055], "lstrip": [67, 79, 97, 245, 312, 319], "lstsq": [133, 384, 666, 679], "lsturtew": 1054, "lsvc": 425, "lsvm": 196, "lsvm_score": 196, "lsvm_time": 196, "lt": [105, 106, 143, 159, 191, 266, 274, 288, 384, 404], "ltd": [270, 379], "ltg": [173, 381, 510], "ltorgo": 379, "ltsa": [238, 239, 240, 698, 702, 1007, 1060], "lu": [550, 553, 956, 957, 1047, 1048, 1049, 1050, 1057, 1058, 1059], "luangkot": 1048, "luca": [1041, 1051, 1052, 1053, 1054], "lucca": 1054, "luce": 1044, "lucen": 424, "lucgiffon": 1052, "luci": [0, 374, 395, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "luciano": [1049, 1056], "lucieclair": 1055, "lucija": 1049, "lucio": 1050, "lucki": 367, "lucyleeow": 1052, "ludwig": 1041, "luessi": 1043, "lui": [667, 1042, 1044, 1045, 1049, 1058], "luiz": 1055, "luk": 1050, "luka": [1045, 1052, 1058, 1059], "luke": 1049, "lukowski": 1056, "luk\u00e1\u0161": 1058, "luna": 1055, "lunt": 1044, "luo": 1045, "lupo": 1053, "luqi": 1050, "luqu": 1051, "lurk": 1041, "lustig": 1006, "lutz": [1047, 1051, 1054, 1058], "luxburg": [416, 460, 470, 700], "luzgin": 1051, "lv_ep": 250, "lvdmaaten": [701, 1048], "lw": [95, 111, 112, 114, 128, 132, 133, 212, 219, 221, 224, 228, 235, 241, 264, 271, 286, 302, 317, 338, 353], "lw_cov_": 115, "lw_mse": 112, "lw_prec_": 115, "lw_score": 131, "lw_shrinkag": 112, "lwda": 458, "lx": 1013, "ly": [250, 861, 863, 864, 865, 1045], "ly648499246": 1054, "lynch": [1042, 1048], "lyon": [1047, 1048], "lyra": [1042, 1045, 1046], "lyrl2004": [379, 506], "l\u00e9o": 1049, "l\u00e9on": [1024, 1055, 1056, 1057], "l\u00e9onard": [1051, 1056], "l\u00e9one": 1047, "l\u00e9oni": 1047, "l\u00f3pez": [1045, 1049, 1050, 1053], "l\u00f6fstedt": 1048, "l\u00f6ning": 1053, "m": [0, 43, 47, 50, 57, 63, 64, 79, 93, 94, 98, 99, 100, 113, 114, 124, 138, 162, 201, 218, 236, 276, 280, 310, 333, 340, 343, 353, 358, 371, 372, 378, 379, 381, 382, 384, 388, 390, 398, 402, 413, 414, 416, 418, 421, 423, 425, 427, 452, 453, 454, 458, 465, 481, 482, 509, 522, 537, 541, 543, 545, 550, 648, 654, 658, 673, 680, 694, 695, 698, 702, 717, 725, 735, 750, 765, 767, 768, 806, 807, 859, 884, 957, 988, 989, 1000, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1024, 1026, 1034, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1059], "m1": [382, 412], "m11": 379, "m2": 412, "m2012": 1003, "m2019": 1017, "m_max": 177, "ma": [115, 151, 319, 323, 347, 1006, 1047, 1052], "maascha": 1056, "maaten": [701, 705, 1007], "mabel": [1049, 1053], "mabu": 1054, "mac": [57, 323, 340, 379, 384, 717, 1010], "macaulei": 323, "macbook": 1049, "macdonald": [1051, 1052], "mach": [281, 414, 420, 602, 603], "machado": [414, 732], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 98, 107, 117, 144, 169, 170, 173, 175, 180, 189, 193, 208, 213, 230, 258, 270, 276, 279, 282, 294, 311, 317, 322, 324, 328, 331, 334, 343, 348, 351, 354, 358, 360, 371, 372, 377, 378, 379, 381, 384, 387, 391, 396, 397, 398, 401, 404, 410, 414, 416, 420, 421, 423, 424, 426, 445, 447, 456, 479, 480, 486, 511, 513, 519, 525, 526, 527, 539, 541, 543, 550, 553, 564, 565, 566, 567, 568, 569, 573, 574, 575, 602, 603, 619, 620, 623, 628, 631, 643, 647, 648, 650, 652, 653, 654, 659, 660, 663, 664, 665, 666, 667, 668, 685, 691, 692, 701, 717, 722, 734, 744, 750, 752, 794, 797, 806, 838, 839, 853, 854, 859, 862, 869, 870, 871, 873, 891, 893, 899, 913, 914, 915, 916, 918, 919, 923, 924, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1013, 1016, 1017, 1018, 1020, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1041, 1043, 1053, 1054, 1055, 1056, 1058], "machineri": 962, "maciej": 1052, "maci\u00e0": [1010, 1054, 1056], "mackai": [653, 654, 1006], "mackenbach": 1052, "maco": [385, 387, 402, 412, 1049, 1053, 1055], "macosx": 1041, "macro": [45, 68, 104, 170, 274, 315, 326, 336, 337, 379, 420, 716, 722, 738, 739, 747, 792, 793, 796, 797, 831, 1010, 1041, 1049, 1057], "macro_roc_auc_ovo": 285, "macro_roc_auc_ovr": 285, "macroscop": 416, "macsween": [1050, 1051], "mad": [680, 1047], "madan": 1053, "made": [0, 52, 64, 104, 114, 129, 138, 144, 162, 182, 191, 192, 218, 236, 255, 267, 280, 323, 327, 347, 363, 371, 379, 381, 384, 388, 398, 399, 407, 416, 423, 424, 428, 451, 454, 455, 457, 467, 505, 512, 597, 598, 600, 639, 640, 665, 674, 688, 694, 695, 744, 792, 809, 812, 813, 823, 827, 828, 829, 850, 853, 854, 1011, 1016, 1026, 1029, 1034, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1054, 1055, 1059], "madelon": 524, "madhura": [1050, 1052, 1053, 1056, 1057], "madinak": 1056, "madsen": [1047, 1049], "mae": [43, 52, 159, 218, 220, 567, 574, 754, 922, 924, 1010, 1026, 1048, 1049, 1053, 1054], "mae_test": 191, "mae_train": 191, "maennel": 1056, "magali": 1055, "magazin": [114, 425], "magda": 1052, "magenta": [111, 153], "maggi": [1055, 1059], "maggiecheg": [1051, 1055], "maggio": [1052, 1053, 1054], "magic": [252, 385, 390, 426, 625, 630, 633], "magnesium": 381, "magnitud": [43, 133, 140, 176, 187, 191, 235, 255, 281, 317, 322, 329, 334, 371, 379, 390, 416, 423, 426, 622, 661, 713, 893, 1006, 1010, 1014, 1020, 1024, 1026, 1043, 1050, 1059], "mahajan": [1049, 1051, 1058], "mahal": 113, "mahal_emp_cov": 113, "mahal_robust_cov": 113, "mahalanobi": [110, 114, 188, 221, 416, 418, 458, 465, 477, 478, 479, 480, 481, 482, 483, 484, 708, 787, 788, 789, 1004, 1013, 1016, 1031, 1049, 1052, 1053], "mahalanobisdist": 708, "mahapatra": 1048, "mahdavi": 648, "maheshakya": [0, 1044, 1045, 1046], "mahieux": 1034, "mahimkar": 1059, "mahmood": 1059, "mahout": 850, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 81, 91, 105, 118, 124, 148, 149, 154, 173, 179, 181, 183, 191, 194, 196, 199, 203, 207, 222, 224, 243, 252, 255, 279, 281, 283, 284, 290, 312, 322, 337, 347, 351, 354, 358, 359, 360, 367, 371, 372, 373, 376, 378, 379, 380, 381, 383, 384, 386, 388, 389, 392, 396, 398, 399, 402, 407, 410, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 439, 447, 448, 449, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 467, 470, 473, 477, 480, 490, 491, 492, 495, 496, 497, 505, 517, 518, 524, 543, 544, 547, 549, 550, 553, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 581, 583, 590, 603, 606, 611, 619, 620, 626, 629, 643, 644, 646, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 685, 686, 687, 688, 690, 693, 695, 697, 698, 700, 701, 702, 704, 706, 714, 720, 721, 724, 725, 727, 728, 730, 731, 732, 733, 735, 747, 765, 772, 794, 795, 809, 811, 812, 813, 814, 823, 824, 825, 828, 829, 834, 838, 841, 846, 847, 848, 849, 850, 852, 855, 856, 857, 859, 861, 863, 864, 865, 871, 872, 873, 876, 878, 888, 890, 891, 892, 893, 894, 896, 902, 905, 906, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 926, 937, 939, 940, 946, 960, 961, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "maikia": [1049, 1050, 1052, 1053], "mail": [379, 384, 388, 392, 396, 399, 1049, 1050], "mailhot": 1041, "mailman": 392, "main": [2, 37, 48, 68, 97, 118, 128, 148, 188, 245, 285, 296, 325, 354, 358, 371, 372, 373, 377, 382, 384, 386, 388, 390, 392, 396, 397, 398, 401, 402, 414, 416, 421, 423, 424, 426, 512, 534, 539, 558, 559, 634, 722, 843, 913, 914, 999, 1007, 1009, 1010, 1017, 1022, 1030, 1033, 1041, 1044, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "mainak": 1048, "maingret": 1052, "mainli": [64, 88, 138, 141, 175, 285, 294, 371, 386, 414, 620, 1012, 1017], "maint": 388, "maintain": [90, 223, 236, 238, 252, 276, 372, 383, 387, 390, 391, 392, 396, 398, 399, 402, 416, 423, 448, 450, 882, 883, 889, 890, 893, 898, 901, 902, 904, 1006, 1007, 1020, 1029, 1030, 1036, 1056, 1060], "mainten": [0, 384, 392, 396, 402, 409, 1006, 1030, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "mainy": 1053, "mair": 644, "mairal": [421, 540, 546], "maisonneuv": 1053, "maithreyi": 1051, "maj": 578, "major": [2, 49, 54, 70, 144, 270, 283, 317, 321, 326, 327, 328, 329, 330, 331, 332, 333, 351, 360, 371, 379, 383, 384, 388, 390, 396, 399, 410, 416, 420, 422, 424, 560, 578, 579, 703, 925, 927, 1010, 1013, 1024, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "majorfeatur": 388, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 91, 96, 97, 102, 107, 129, 138, 144, 148, 151, 154, 157, 170, 173, 175, 180, 183, 190, 191, 192, 193, 198, 203, 204, 207, 210, 211, 212, 214, 218, 219, 220, 222, 224, 236, 239, 247, 249, 251, 252, 253, 255, 261, 263, 266, 267, 270, 271, 276, 278, 279, 285, 286, 287, 290, 296, 306, 314, 317, 318, 323, 330, 332, 334, 347, 356, 358, 359, 360, 367, 371, 372, 373, 378, 379, 382, 383, 385, 386, 387, 388, 389, 390, 392, 396, 398, 402, 407, 410, 413, 414, 416, 417, 418, 420, 421, 423, 424, 425, 428, 448, 449, 450, 451, 453, 455, 457, 459, 460, 461, 466, 467, 468, 470, 496, 512, 523, 524, 531, 532, 536, 541, 543, 550, 560, 561, 564, 565, 570, 571, 592, 593, 616, 617, 640, 658, 664, 665, 680, 700, 704, 739, 746, 751, 777, 778, 790, 806, 807, 809, 811, 814, 820, 824, 825, 828, 829, 835, 836, 843, 844, 847, 880, 889, 892, 893, 897, 901, 903, 904, 905, 906, 919, 927, 932, 939, 940, 951, 957, 964, 970, 995, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "make_": 1050, "make_biclust": [2, 59, 522, 1043], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 84, 90, 91, 92, 94, 95, 97, 98, 99, 121, 210, 230, 245, 264, 320, 327, 330, 345, 348, 349, 355, 380, 387, 423, 524, 705, 719, 801, 802, 929, 1049, 1052, 1055], "make_cbar": 287, "make_checkerboard": [2, 58, 520, 1043], "make_circl": [2, 67, 79, 97, 129, 157, 243, 312, 313, 319, 338, 380, 1042, 1049, 1052], "make_classif": [2, 62, 64, 67, 121, 142, 143, 145, 170, 172, 273, 279, 287, 288, 307, 312, 319, 326, 328, 332, 334, 354, 367, 380, 387, 412, 415, 423, 445, 446, 495, 521, 562, 564, 566, 573, 614, 616, 675, 706, 707, 709, 711, 808, 831, 832, 837, 838, 840, 843, 870, 873, 913, 920, 999, 1010, 1011, 1020, 1025, 1047, 1048, 1049, 1051], "make_column_selector": [2, 105, 148, 159, 255, 417, 472, 475, 1051], "make_column_transform": [2, 148, 159, 191, 247, 327, 417, 472, 474, 1049], "make_data": [70, 96], "make_dataset": 1050, "make_default": 979, "make_ellips": 263, "make_estim": 255, "make_friedman1": [2, 380, 423, 548, 552, 602, 603, 641], "make_friedman2": [2, 380, 620, 622, 623, 624, 625, 626, 630, 633, 634], "make_friedman3": [2, 380], "make_gaussian_quantil": [2, 121, 138, 140, 380, 478, 482, 483, 484, 489, 529], "make_hastie_10_2": [2, 153, 280, 380, 423, 568, 1017], "make_heatmap": 287, "make_low_rank_matrix": [2, 332, 334, 533], "make_ml_clf": 122, "make_moon": [2, 67, 79, 97, 245, 276, 312, 313, 319, 380, 999, 1048, 1052], "make_multilabel_classif": [2, 122, 253, 380, 524, 545, 797, 844, 845, 1010, 1043, 1044, 1046, 1052], "make_pipelin": [2, 43, 67, 93, 118, 143, 148, 159, 169, 170, 173, 186, 187, 191, 192, 196, 198, 205, 207, 218, 219, 224, 232, 236, 239, 245, 246, 247, 255, 256, 257, 259, 270, 273, 283, 290, 297, 306, 312, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 359, 367, 397, 407, 417, 420, 576, 685, 687, 865, 873, 898, 899, 901, 902, 903, 904, 913, 914, 915, 916, 918, 919, 1000, 1013, 1020, 1024, 1025, 1044, 1051, 1054], "make_plot": 317, "make_regress": [2, 49, 109, 198, 200, 201, 204, 221, 222, 289, 327, 333, 367, 380, 387, 397, 563, 565, 569, 574, 615, 617, 618, 644, 655, 656, 658, 660, 661, 662, 664, 669, 670, 671, 672, 673, 674, 676, 680, 688, 690, 691, 692, 694, 695, 696, 871, 914, 931, 1010, 1011, 1013], "make_s_curv": [2, 238, 243], "make_scor": [2, 52, 151, 154, 270, 280, 334, 407, 415, 420, 720, 809, 831, 835, 836, 1010, 1050, 1058], "make_sparse_coded_sign": [2, 217, 540, 546, 554, 555, 1055, 1057], "make_sparse_spd_matrix": [2, 115, 486, 538, 1058], "make_sparse_uncorrel": [2, 380], "make_spd_matrix": [2, 536], "make_subplot": 144, "make_swiss_rol": [2, 102, 242, 1055], "make_union": [2, 417, 872, 1044, 1048], "makedir": 1048, "maker": [190, 191], "makhija": 1056, "makoeppel": 1054, "maksym": 1056, "maladier": 1056, "maladi\u00e8r": [1056, 1057], "malcolm": 1049, "maldonado": [1051, 1054], "male": [105, 191, 331, 389, 886, 887, 1020], "malem": 1058, "malet": 1041, "malform": [55, 1045], "malic": [322, 381], "malic_acid": 48, "malici": 410, "malign": [173, 381, 509], "malik": [416, 460, 470, 700], "mallat": [673, 694, 695, 1006], "mallatpursuit93": [673, 694, 695], "mallow": [740, 1047], "maloo": [1049, 1050], "malt": [1054, 1055, 1056, 1058], "maltimor": 1051, "malu": 236, "malzer": 454, "mal\u00e9zieux": 1054, "mamba": 410, "mame": 1058, "mammal": 50, "mammalian": 421, "man": [421, 599, 778, 848, 852, 1008, 1010, 1012], "manag": [0, 2, 118, 259, 370, 378, 382, 385, 386, 388, 392, 396, 398, 399, 410, 423, 458, 476, 635, 911, 1004, 1026, 1029, 1030, 1034, 1036, 1054, 1057, 1060], "manaileng": 1054, "manasimj": 1059, "mandal": 1051, "mandatori": [384, 424], "mandatorili": 1048, "mandera": 1044, "mandi": [1052, 1055], "mandjev": 1055, "mandyam": 1051, "mangasarian": [173, 381], "mangipudi": 1047, "manh": 1049, "manhattan": [416, 449, 453, 458, 465, 708, 771, 780, 787, 788, 789, 860, 1008, 1013, 1045, 1050, 1057], "manhattan_dist": [2, 458, 465, 697, 771, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 1041, 1051, 1056, 1057], "manhattandist": 708, "mani": [43, 46, 49, 57, 90, 91, 108, 111, 115, 138, 144, 145, 146, 147, 152, 169, 173, 193, 218, 238, 249, 262, 269, 270, 276, 284, 288, 297, 317, 322, 323, 326, 327, 328, 329, 330, 332, 333, 334, 358, 367, 371, 373, 379, 381, 383, 384, 386, 397, 398, 399, 402, 410, 413, 414, 416, 417, 418, 421, 423, 424, 425, 426, 428, 512, 550, 562, 563, 566, 567, 568, 569, 573, 574, 575, 615, 618, 636, 648, 659, 663, 667, 668, 675, 676, 677, 685, 686, 687, 701, 704, 783, 787, 809, 813, 823, 870, 871, 886, 891, 893, 913, 921, 922, 923, 924, 999, 1000, 1002, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1023, 1025, 1027, 1028, 1029, 1030, 1034, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1056, 1057], "manideep": 1059, "manifest": [392, 1007, 1013], "manifold": [2, 51, 74, 87, 102, 143, 241, 242, 243, 249, 297, 307, 326, 330, 331, 338, 377, 398, 416, 421, 423, 511, 534, 539, 553, 558, 575, 697, 698, 699, 700, 701, 702, 703, 704, 705, 862, 874, 883, 906, 942, 1013, 1031, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1058], "manimaran": [1050, 1052, 1053, 1054, 1055], "manipul": [2, 378, 412, 516, 1029, 1047], "manish": 1052, "maniteja": [1047, 1048, 1049], "mankoo": 1056, "mann": 1051, "mannbi": 1049, "manner": [43, 109, 124, 170, 192, 196, 263, 330, 331, 372, 384, 390, 416, 421, 423, 424, 718, 853, 854, 999, 1010, 1026, 1044, 1051], "mannila": 1022, "manning2008": 1010, "manoharan": [1048, 1049], "manoj": [0, 173, 406, 1044, 1045, 1046, 1047, 1048], "manraj": 1048, "mansi": 1056, "mansingh": 1055, "mansouri": 1057, "mantovani": 1056, "manu": 379, "manual": [2, 43, 81, 90, 191, 192, 194, 219, 229, 278, 297, 339, 345, 358, 360, 371, 372, 379, 384, 388, 389, 396, 397, 402, 410, 416, 420, 421, 422, 445, 457, 576, 808, 831, 863, 886, 892, 999, 1004, 1005, 1006, 1009, 1010, 1013, 1020, 1030, 1049, 1051, 1057, 1059], "manuel": [1041, 1045, 1049, 1050, 1053, 1054, 1059], "manufactur": [191, 423], "manvendra": [1047, 1048], "maocx": 1051, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 88, 118, 129, 142, 150, 153, 157, 175, 188, 196, 218, 236, 238, 240, 244, 252, 255, 277, 280, 285, 305, 308, 310, 316, 317, 340, 347, 351, 359, 360, 378, 379, 385, 396, 398, 407, 410, 414, 416, 417, 420, 421, 423, 424, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 505, 507, 511, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 771, 774, 806, 807, 808, 809, 812, 813, 820, 821, 823, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 963, 966, 967, 999, 1002, 1007, 1010, 1012, 1022, 1025, 1026, 1031, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058], "mapd": 1010, "mape": [2, 52, 755, 1010], "mape_cv_mean": 148, "mape_cv_std": 148, "mapi": 52, "mar": 51, "marc": [1048, 1050, 1051, 1057, 1060], "march": [180, 735, 765, 1010, 1041, 1045, 1049, 1051, 1056], "marchand": 1055, "marchman": [1042, 1043], "marco": [1047, 1049, 1050, 1054, 1055, 1056, 1059], "marcofalk": 1048, "marcogorelli": [1049, 1050], "marcolini": 1054, "marcom": 1055, "marcu": [1049, 1058], "mare": 1058, "marek": [1041, 1058], "maren": [0, 374, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "margeta": 1049, "margin": [30, 43, 51, 62, 64, 121, 140, 166, 176, 177, 178, 179, 180, 181, 188, 191, 192, 197, 228, 229, 231, 253, 255, 276, 294, 317, 320, 323, 342, 343, 345, 346, 347, 349, 351, 355, 356, 381, 414, 421, 423, 426, 521, 619, 620, 640, 654, 685, 744, 842, 890, 902, 915, 918, 1006, 1010, 1012, 1016, 1017, 1020, 1024, 1025, 1031, 1048, 1050], "marguli": 1051, "mari": [104, 1049, 1050, 1051, 1052, 1055], "maria": [173, 416, 1052, 1053, 1054, 1055, 1056], "mariam": 1053, "mariana": 1052, "mariangela": 1054, "mariano": 276, "mariel": 1052, "marielaraj": 1054, "marija": [1052, 1053, 1059], "marijn": 1053, "marin": [537, 1059], "marina": 416, "marinelm": 1050, "mario": [414, 1045, 1047, 1055, 1056, 1057], "marit": [333, 505], "mari\u00e9": [0, 374, 1050, 1051, 1052, 1053, 1054, 1055], "mark": [2, 70, 93, 122, 168, 187, 280, 287, 376, 384, 388, 392, 393, 398, 416, 544, 616, 617, 620, 641, 667, 866, 867, 908, 909, 926, 932, 947, 952, 957, 1006, 1034, 1036, 1041, 1042, 1047, 1049, 1050, 1057, 1058, 1059], "markdown": 387, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 87, 90, 93, 94, 95, 98, 99, 117, 121, 122, 126, 144, 158, 182, 183, 196, 205, 211, 213, 215, 216, 218, 220, 221, 233, 235, 239, 261, 263, 264, 270, 271, 276, 278, 279, 280, 304, 317, 322, 338, 362, 387, 388, 424, 1049, 1051, 1052, 1057], "markeredgecolor": [84, 90, 96, 98, 99], "markeredgewidth": [113, 280], "markerfacecolor": [84, 90, 96, 98, 99], "markers": [84, 90, 93, 96, 98, 99, 151, 178, 182, 248, 270, 330], "markerstyl": 270, "market": [42, 81, 87, 154, 188, 238, 239, 416, 418, 462, 479, 480, 698, 1031, 1034], "marketplac": 1034, "markham": [1045, 1052, 1053], "markiwanchyshyn": 1049, "marko": [1041, 1050, 1051, 1057], "markou": 1054, "markov": [426, 620, 1015, 1029, 1041], "markovtsev": 1049, "marktab": 1046, "marku": [416, 458, 465, 1049, 1051, 1052, 1053], "marmo": [0, 375, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "maron": [416, 450], "marr": 191, "marr_unmarri": 191, "marreddi": 1055, "marri": 191, "marriott": 51, "marsgui": 1049, "marsh": 1052, "marshal": 381, "marsi": 1044, "marsland": 539, "marslast": 539, "marszalek": [767, 768, 1008], "mart": [51, 1051], "martel": 1055, "martha": 323, "martian": 1051, "martin": [0, 374, 730, 732, 733, 1006, 1010, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059], "martin1997": 1010, "martina": [1051, 1053], "martinbpr": [1046, 1047], "martinez": 1048, "martino": 1046, "martinosorb": 1046, "martinsson": [55, 544, 550, 957], "martynov": 1054, "mart\u00edn": [1054, 1055], "marufo": 1056, "marufur": 1048, "marvin": [1056, 1057], "marwaha": 1049, "marx": 1020, "maryanmorel": [1046, 1047], "marzinotto": [1049, 1050], "mar\u00eda": [1055, 1056, 1057], "mas_vnr_typ": 255, "masafumi": 1046, "masanori": [1056, 1057], "masashi": [1051, 1053], "masecchia": 1041, "mash": 424, "mask": [2, 53, 77, 101, 146, 218, 226, 255, 274, 275, 340, 393, 398, 417, 423, 472, 477, 482, 570, 571, 590, 594, 595, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 638, 639, 641, 642, 658, 680, 809, 812, 813, 823, 981, 1000, 1017, 1041, 1044, 1046, 1047, 1049, 1051, 1059], "mask_al": 1000, "mask_false_neg": 270, "mask_false_posit": 270, "mask_missing_values_onli": 1000, "mask_out": 53, "mask_test": 236, "mask_train": [192, 236], "mask_true_neg": 270, "mask_true_posit": 270, "mask_y_pr": 66, "maskani": [1049, 1051, 1052, 1053], "masked_arrai": [347, 809, 823], "masked_equ": 115, "maskedarrai": [280, 1047], "mason": 1045, "mass": [173, 256, 381, 454, 806, 1006, 1017], "massachusett": 379, "massia": [0, 1052, 1054, 1055], "massich": [1048, 1049, 1050, 1051], "massil": 1047, "masstran": 1050, "master": [51, 297, 331, 384, 1034], "masurel": 1042, "masvnrarea": [109, 159], "masvnrtyp": [148, 159], "mat": [378, 424], "match": [2, 43, 58, 72, 124, 125, 127, 130, 133, 144, 188, 196, 197, 218, 240, 248, 255, 289, 351, 360, 379, 382, 386, 416, 421, 423, 424, 437, 457, 472, 474, 500, 517, 518, 524, 535, 540, 546, 551, 557, 560, 576, 577, 581, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 667, 673, 674, 694, 695, 708, 712, 713, 714, 722, 724, 728, 743, 787, 788, 789, 795, 853, 854, 858, 862, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 913, 920, 926, 943, 1007, 1009, 1010, 1012, 1013, 1031, 1032, 1036, 1041, 1047, 1048, 1049, 1051, 1053, 1054, 1057, 1059], "matchingdist": 708, "matchmak": 1034, "matcovici": 1051, "mate": 358, "matem\u00e1tica": 1006, "mateo": 1054, "materi": [53, 191, 333, 399, 550, 590, 903, 904], "matern": [2, 184, 426, 1052, 1056], "mateusz": [1045, 1052, 1053, 1058, 1059], "math": [84, 104, 154, 173, 255, 276, 277, 381, 402, 773], "mathbb": [124, 141, 178, 419, 1010, 1017, 1025], "mathbf": [178, 351, 421, 1006, 1010, 1014, 1015, 1024], "mathcal": [222, 354, 421, 423, 636, 705, 1002, 1004, 1006, 1010, 1024, 1054], "mathemat": [37, 138, 191, 205, 235, 279, 376, 381, 384, 398, 401, 416, 418, 421, 422, 426, 558, 559, 566, 573, 644, 655, 665, 801, 802, 807, 871, 915, 918, 921, 923, 1006, 1010, 1014, 1020, 1022, 1032, 1034, 1036, 1055], "matheu": 1047, "mathew": 1056, "mathi": 1054, "mathia": 1055, "mathieu": [0, 406, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1054], "mathrm": [416, 418, 421, 425, 1006, 1026], "mathschi": 1053, "mathur": [1048, 1050, 1051, 1056, 1057, 1059], "mathurin": [0, 1052, 1054, 1055], "mathurinm": [1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "matjansen": 1055, "mato": 1053, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 333, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 378, 384, 391, 402, 409, 446, 511, 640, 641, 706, 707, 709, 710, 711, 815, 832, 927, 1005, 1029, 1038, 1050, 1053, 1054, 1055, 1056, 1059], "matric": [2, 37, 70, 74, 75, 113, 115, 124, 223, 262, 263, 265, 266, 267, 297, 310, 327, 333, 340, 358, 359, 376, 378, 386, 387, 396, 397, 398, 416, 417, 418, 419, 421, 424, 425, 431, 458, 459, 461, 472, 481, 489, 490, 491, 492, 535, 543, 544, 547, 549, 550, 553, 556, 558, 559, 564, 565, 572, 575, 590, 591, 598, 652, 655, 656, 661, 662, 667, 673, 681, 683, 696, 763, 769, 777, 783, 787, 788, 789, 790, 801, 806, 807, 839, 857, 860, 865, 876, 880, 882, 885, 888, 890, 891, 893, 896, 898, 900, 902, 903, 904, 905, 906, 915, 916, 918, 919, 935, 957, 964, 973, 980, 982, 983, 1000, 1002, 1004, 1007, 1008, 1009, 1011, 1013, 1014, 1022, 1024, 1025, 1029, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 89, 97, 104, 112, 113, 114, 115, 117, 124, 125, 126, 134, 182, 188, 194, 197, 204, 219, 223, 246, 249, 250, 266, 268, 270, 283, 314, 330, 333, 336, 337, 351, 358, 359, 360, 366, 371, 379, 380, 381, 384, 386, 390, 393, 396, 397, 398, 413, 417, 418, 419, 424, 425, 426, 427, 428, 438, 439, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 462, 465, 467, 468, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 501, 505, 506, 509, 510, 511, 512, 513, 514, 517, 518, 519, 528, 530, 532, 533, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 595, 597, 598, 599, 600, 602, 603, 612, 613, 614, 615, 616, 617, 618, 620, 629, 638, 639, 640, 642, 644, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 721, 722, 723, 724, 725, 727, 731, 738, 739, 740, 743, 747, 748, 749, 750, 763, 764, 767, 768, 769, 770, 772, 773, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 796, 797, 801, 802, 805, 806, 807, 808, 809, 812, 813, 823, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 877, 878, 879, 880, 882, 884, 885, 886, 888, 890, 891, 892, 893, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 935, 937, 938, 939, 940, 945, 954, 955, 956, 957, 958, 961, 963, 964, 972, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 998, 1000, 1002, 1004, 1006, 1007, 1011, 1012, 1013, 1014, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "matrixorz": 1044, "matshow": [58, 59, 101, 146, 171, 314, 511], "matsubara": 1010, "matt": [1044, 1045, 1046, 1051, 1052, 1056, 1057], "matteo": [1045, 1047, 1055], "matter": [133, 267, 351, 367, 416, 417, 423, 576, 677, 685, 687, 1006, 1045], "matthew": [2, 383, 389, 545, 752, 1041, 1044, 1048, 1050, 1054, 1055, 1059], "matthews_corrcoef": [2, 1010, 1041, 1047, 1048, 1055], "matthia": [1041, 1043, 1044, 1047, 1048, 1049, 1053, 1056], "matthieu": [0, 406, 1041, 1045, 1056], "matti": [1042, 1045, 1046], "matur": [384, 1029, 1030], "mat\u00e9rn": 628, "mat\u00eda": 1055, "maud": 1044, "mauna": 180, "maura": 1052, "mauroantonioserrano": 1056, "mav": 1059, "mavani": 1049, "mavroforaki": [1045, 1047], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 87, 93, 97, 102, 106, 107, 110, 112, 115, 124, 127, 131, 134, 138, 140, 147, 153, 157, 164, 165, 166, 168, 169, 173, 177, 179, 180, 187, 188, 191, 201, 205, 207, 211, 213, 220, 221, 224, 232, 234, 236, 241, 249, 253, 274, 275, 276, 287, 289, 296, 297, 299, 303, 304, 308, 310, 312, 314, 317, 319, 320, 322, 329, 334, 339, 341, 355, 371, 416, 418, 421, 477, 478, 479, 480, 481, 482, 483, 484, 485, 521, 545, 564, 565, 566, 567, 568, 569, 572, 573, 574, 615, 636, 640, 641, 657, 658, 678, 681, 683, 689, 700, 701, 705, 708, 713, 714, 766, 801, 802, 809, 870, 871, 882, 883, 885, 892, 899, 900, 921, 922, 923, 924, 1006, 1008, 1013, 1020, 1024, 1025, 1031, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "max_": [416, 1010], "max_abs_": 882, "max_abs_scal": 1020, "max_bin": [329, 330, 423, 570, 571, 1058], "max_categori": [323, 330, 332, 886, 887, 1020, 1055, 1057], "max_cluster_s": 454, "max_column": 236, "max_degre": [888, 1054], "max_depth": [46, 67, 139, 140, 143, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 186, 239, 273, 288, 294, 328, 329, 362, 364, 365, 366, 397, 398, 415, 423, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 720, 812, 813, 837, 921, 922, 923, 924, 925, 926, 927, 999, 1017, 1026, 1050, 1052], "max_df": [54, 277, 340, 358, 359, 597, 600, 1052, 1059], "max_dist": 249, "max_doc_update_it": 545, "max_ep": [416, 458, 463, 464, 465], "max_error": [2, 412, 1010, 1050, 1060], "max_estim": 142, "max_featur": [54, 67, 142, 153, 254, 273, 288, 328, 423, 425, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 597, 600, 606, 921, 922, 923, 924, 999, 1006, 1041, 1043, 1044, 1048, 1049, 1052, 1055, 1058], "max_features_": [568, 569, 606, 921, 922, 923, 924, 1055], "max_fpr": [797, 1010, 1049], "max_fun": [870, 871, 1051], "max_i": [253, 1012], "max_idf": 1054, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 106, 107, 124, 127, 143, 144, 148, 154, 161, 164, 165, 186, 187, 191, 192, 198, 204, 210, 211, 225, 226, 227, 230, 231, 233, 238, 239, 240, 241, 243, 256, 257, 261, 262, 263, 264, 267, 289, 307, 312, 313, 314, 323, 328, 329, 330, 336, 337, 344, 358, 359, 390, 398, 423, 428, 448, 451, 455, 456, 457, 462, 467, 469, 479, 480, 486, 490, 491, 492, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 570, 571, 636, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 681, 683, 685, 686, 687, 688, 689, 691, 692, 696, 697, 698, 699, 701, 702, 703, 806, 807, 823, 862, 870, 871, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 1000, 1002, 1006, 1013, 1014, 1023, 1024, 1042, 1045, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059], "max_iter": 337, "max_iter_list": 154, "max_iter_predict": 619, "max_j": [655, 661], "max_leaf_nod": [138, 144, 153, 218, 329, 366, 423, 566, 567, 568, 569, 570, 571, 573, 574, 575, 921, 922, 923, 924, 1044, 1050, 1052], "max_n": [597, 598, 600, 1041], "max_n_alpha": [660, 664], "max_nbyt": 975, "max_no_improv": [77, 96, 99, 457, 546, 547, 548, 555, 1055, 1056], "max_patch": [85, 424, 592, 593, 1049], "max_resourc": [151, 812, 813, 999], "max_resources_": [812, 813], "max_sampl": [155, 186, 423, 564, 565, 566, 567, 572, 573, 574, 643, 1051, 1054, 1057], "max_samples_": 572, "max_skip": 680, "max_subpopul": [235, 688, 1055], "max_thread": [372, 385], "max_train_s": [43, 52, 420, 830, 1048], "max_trial": [680, 1006], "max_val": 943, "max_valu": [636, 1052, 1053], "max_x": 253, "maxabs_scal": [2, 398, 882, 1049], "maxabsscal": [2, 373, 412, 877, 898, 1000, 1020, 1046, 1049, 1050, 1051, 1052, 1057, 1058], "maxent": [2, 667, 668, 1006], "maxent_du": 667, "maxi": 1056, "maxim": [117, 118, 120, 124, 134, 151, 198, 266, 267, 270, 277, 281, 285, 286, 290, 307, 322, 328, 347, 351, 362, 366, 381, 398, 413, 415, 416, 419, 421, 423, 425, 426, 558, 603, 619, 620, 653, 654, 657, 678, 688, 689, 729, 809, 812, 813, 823, 882, 888, 898, 1004, 1006, 1009, 1010, 1013, 1015, 1025, 1044, 1046, 1051, 1054, 1056, 1059], "maxima": 416, "maximesaur": [1056, 1057], "maximis": [164, 262, 305, 1004, 1013], "maximum": [2, 43, 47, 50, 64, 69, 72, 92, 111, 112, 113, 114, 115, 121, 126, 138, 140, 143, 144, 147, 154, 176, 178, 181, 182, 188, 197, 205, 255, 270, 286, 299, 303, 304, 310, 317, 342, 343, 345, 346, 349, 351, 359, 362, 364, 365, 371, 379, 389, 390, 397, 398, 413, 414, 416, 418, 419, 421, 423, 424, 426, 427, 428, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 462, 465, 467, 469, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 490, 491, 492, 507, 518, 520, 521, 522, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 592, 593, 606, 619, 636, 640, 641, 644, 646, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 685, 686, 687, 688, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 725, 753, 790, 806, 809, 812, 813, 815, 823, 830, 837, 862, 869, 870, 871, 877, 878, 882, 883, 885, 888, 889, 890, 892, 901, 902, 907, 908, 909, 910, 913, 914, 918, 921, 922, 923, 924, 925, 927, 936, 943, 999, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1020, 1024, 1025, 1026, 1031, 1048, 1049, 1051, 1052, 1055, 1056, 1058], "maxin": [1051, 1052], "maxsiz": 626, "maxval": [520, 522], "maxwel": [0, 374, 1051, 1054, 1055, 1056, 1057], "maxwelllzh": 1056, "may_share_memori": 1058, "mayb": [108, 314, 398, 424, 1025, 1030], "mayer": [423, 1053, 1055, 1058, 1059], "mayer2022": 423, "mayilvahanan": 416, "mayorov": [1044, 1045, 1046, 1047], "mayur": 1049, "mazari": 1049, "mb": [47, 249, 270, 358, 360, 379, 390, 505, 915, 916, 917, 918, 919, 1025, 1031, 1037], "mbilling": 1046, "mbillingr": 1051, "mbk": [77, 99], "mbk_means_cluster_cent": 99, "mbk_means_label": 99, "mbk_means_labels_uniqu": 77, "mblondel": [378, 517], "mbnmf": 54, "mc4229": 1052, "mc_clf": 1017, "mcar": 154, "mcc": [2, 752, 1010, 1055], "mccall": 104, "mccallum": [848, 1012], "mccarthi": [1041, 1049], "mcclish": [285, 797], "mcconaghi": 1034, "mccullagh": 1006, "mcculloh": [1046, 1047], "mcd": [2, 51, 113, 114, 418, 477, 482], "mcdermott": [1043, 1058], "mcdonald": 51, "mcdowel": 1049, "mcfadden": 1010, "mcfee": [1046, 1047], "mcgibbon": [1043, 1044, 1047], "mcgushion": 1050, "mcinn": [416, 1047, 1048, 1049, 1051, 1052, 1057], "mcivor": [1056, 1057], "mcm": [763, 1010], "mcm_": 763, "mcmahon": 1058, "mcsherri": [735, 765, 1010], "mctiernan": [1055, 1056], "mcve": [389, 396], "md": [2, 238, 239, 240, 241, 388, 697, 701, 703, 1035, 1036, 1041, 1053, 1056], "md5": 1053, "md5_checksum": 378, "md_scale": 238, "mdarii": 1057, "mdbecker": 1034, "mdi": [145, 152, 188, 189, 194, 423, 472, 505, 573, 639, 643, 839, 873, 887, 1018, 1031], "mdi_import": [193, 194], "mds_result": 703, "me": 358, "me1": 294, "me2": 294, "me3": 294, "mea": 93, "mean": [2, 43, 44, 45, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 81, 84, 85, 88, 89, 90, 95, 105, 112, 113, 114, 115, 118, 120, 122, 124, 127, 128, 129, 130, 131, 138, 140, 141, 144, 147, 148, 151, 152, 154, 159, 160, 161, 172, 173, 175, 180, 181, 182, 184, 186, 188, 191, 192, 199, 201, 207, 209, 211, 214, 215, 218, 220, 224, 225, 227, 233, 234, 235, 236, 241, 243, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 259, 261, 262, 263, 264, 266, 267, 270, 272, 273, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 296, 297, 308, 317, 320, 322, 323, 324, 326, 329, 332, 334, 339, 347, 350, 351, 354, 356, 357, 358, 360, 367, 371, 376, 378, 379, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 396, 397, 398, 407, 413, 414, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 439, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 496, 510, 511, 513, 515, 521, 528, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 592, 597, 598, 599, 600, 603, 606, 611, 615, 616, 617, 618, 619, 620, 622, 631, 636, 637, 639, 641, 642, 643, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 693, 697, 698, 699, 700, 701, 702, 703, 704, 713, 714, 716, 718, 721, 722, 725, 726, 733, 735, 738, 739, 740, 745, 746, 747, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 783, 787, 788, 790, 792, 793, 794, 796, 797, 799, 800, 801, 802, 804, 806, 807, 808, 809, 812, 813, 815, 823, 827, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 863, 864, 866, 867, 869, 870, 871, 872, 874, 875, 877, 878, 882, 883, 885, 889, 891, 893, 894, 899, 901, 902, 904, 906, 908, 909, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 935, 939, 940, 942, 983, 984, 990, 994, 999, 1000, 1001, 1004, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1023, 1024, 1025, 1026, 1031, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "mean_": [125, 280, 541, 542, 543, 548, 550, 552, 893, 1020, 1049], "mean_absolute_error": [2, 52, 218, 220, 236, 412, 1010, 1042, 1044, 1060], "mean_absolute_percentage_error": [2, 52, 148, 412, 1010, 1053, 1055, 1060], "mean_auc": 286, "mean_change_tol": 545, "mean_fit_tim": [144, 299, 809, 823], "mean_fpr": 286, "mean_gamma_devi": [2, 412, 1010, 1051, 1060], "mean_impute_scor": 187, "mean_l1_ratio": 1044, "mean_pinball_loss": [2, 52, 151, 154, 329, 1006, 1010, 1054], "mean_pinball_loss_95p": 1010, "mean_poisson_devi": [2, 218, 412, 1010, 1051, 1060], "mean_precis": 274, "mean_precision_": 806, "mean_precision_prior": [261, 267, 806], "mean_precision_prior_": 806, "mean_predict": [52, 182], "mean_predictions_gpr": 175, "mean_prior": 806, "mean_prior_": 806, "mean_recal": 274, "mean_scor": [106, 285, 288, 359, 1054], "mean_score_tim": [144, 274, 277, 809, 823], "mean_shift": [2, 1046, 1049], "mean_square_error": 1042, "mean_squared_error": [2, 46, 149, 151, 152, 214, 218, 220, 222, 224, 236, 367, 412, 423, 761, 1010, 1042, 1044, 1051, 1052, 1058, 1060], "mean_squared_log_error": [2, 412, 720, 1010, 1048, 1054, 1058, 1060], "mean_test_": 280, "mean_test_precis": [274, 280], "mean_test_recal": 274, "mean_test_scor": [105, 106, 107, 115, 144, 164, 172, 266, 275, 276, 277, 284, 287, 288, 299, 347, 480, 603, 809, 823, 999, 1047, 1054], "mean_tim": 1047, "mean_tpr": [285, 286], "mean_train_precis": [809, 823], "mean_train_scor": [809, 823, 1047], "mean_tweedie_devi": [2, 236, 412, 1010, 1051, 1060], "mean_variance_axi": [2, 393, 1047, 1054], "mean_y_pr": 180, "meaning": [72, 194, 243, 306, 334, 360, 413, 415, 420, 424, 425, 557, 738, 739, 747, 792, 793, 796, 862, 1014, 1024, 1025, 1041, 1057], "meaningfulli": [218, 1010], "meaningless": [192, 424, 915, 918, 1044], "means_": [70, 261, 262, 263, 264, 266, 267, 558, 559, 806, 807], "means_init": [263, 264, 807], "meanshift": [2, 79, 330, 416, 448, 1044, 1045, 1046, 1049, 1051, 1052, 1055, 1056, 1057, 1059], "meant": [92, 154, 173, 255, 334, 379, 393, 482, 502, 686, 859, 932, 975, 976, 998, 1000, 1014, 1016, 1020, 1042], "meanwhil": [396, 1025], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 84, 93, 95, 96, 125, 141, 142, 151, 155, 162, 173, 175, 180, 188, 190, 191, 192, 196, 207, 212, 217, 218, 222, 224, 236, 268, 274, 276, 282, 283, 289, 322, 351, 358, 359, 371, 379, 381, 386, 390, 398, 413, 418, 420, 421, 422, 423, 424, 457, 460, 470, 507, 524, 547, 549, 556, 560, 566, 567, 568, 569, 572, 573, 574, 613, 616, 617, 620, 636, 640, 667, 699, 701, 707, 711, 713, 714, 716, 718, 721, 722, 725, 726, 729, 734, 735, 736, 738, 740, 745, 746, 748, 749, 752, 756, 764, 765, 766, 791, 792, 793, 795, 796, 797, 798, 801, 804, 834, 836, 839, 859, 890, 902, 921, 922, 923, 924, 930, 1000, 1006, 1008, 1013, 1015, 1016, 1018, 1024, 1026, 1031, 1041, 1044, 1046, 1047, 1049, 1051], "mechan": [74, 252, 355, 358, 372, 384, 386, 410, 414, 416, 424, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 1008, 1026, 1034], "mecopur": 1058, "med": [57, 104, 285, 379, 1020], "meda": [109, 191, 1010], "media": [416, 1034], "median": [2, 43, 52, 72, 105, 109, 113, 114, 151, 186, 187, 191, 220, 224, 235, 247, 255, 317, 327, 329, 330, 379, 418, 423, 425, 448, 462, 466, 469, 482, 561, 563, 567, 574, 606, 636, 639, 644, 679, 680, 688, 730, 762, 860, 891, 903, 922, 924, 1000, 1020, 1026, 1044, 1045], "median_absolute_error": [2, 109, 191, 1010, 1045, 1051, 1053], "median_predict": 52, "medic": [279, 420, 721, 1006, 1034], "medicin": [279, 721, 1010], "medina": [1041, 1043], "medinc": [317, 328, 379, 498], "medium": [42, 188, 251, 292, 324, 347, 416, 652, 887, 1003, 1006], "medoid": 454, "medoids_": 454, "medri": 1044, "meekail": [0, 405, 1055, 1056, 1057, 1058], "meer": [98, 416, 456], "meet": [384, 396, 399, 425, 581, 612, 870, 871, 910, 1010, 1023, 1034, 1049, 1050, 1051], "megabyt": 1055, "megasari": 1053, "meghann": [1049, 1051], "mehak": 1048, "mehdi": [1045, 1054], "mehgarg": 1056, "mehmet": [1048, 1054], "mehmetcanakbai": 1056, "mehrdad": 1055, "mehta": [1045, 1046, 1047, 1049, 1050, 1051, 1052, 1056, 1057], "mehul": 1048, "mei": [1046, 1051], "meier": 1048, "meila": 416, "mein": 424, "meinshausen": 203, "meirel": 1052, "meketon": 1048, "melani": [1034, 1048, 1049], "melderi": 1049, "melemo2": 1055, "meli": [1054, 1055, 1056], "melissa": 1049, "mellon": 908, "melnik": 1056, "melsyt": [1049, 1050], "mem": [89, 390, 517, 518, 1031], "member": [0, 358, 359, 379, 384, 387, 399, 416, 431, 450, 454, 456, 459, 461, 501, 564, 565, 566, 567, 572, 573, 574, 575, 590, 667, 668, 675, 676, 677, 685, 686, 687, 713, 714, 724, 726, 740, 745, 746, 766, 795, 804, 809, 913, 1006, 1013, 1041, 1053, 1056], "membership": [30, 91, 399, 413, 416, 520, 521, 522, 523, 524, 528, 531, 1025], "memit": 390, "memmap": [372, 379, 398, 421, 517, 543, 1049, 1058], "memoiz": [106, 379, 398], "memor": 193, "memori": [2, 47, 89, 105, 106, 128, 191, 192, 270, 299, 323, 326, 328, 330, 331, 334, 358, 359, 360, 372, 373, 378, 384, 387, 393, 396, 398, 410, 416, 417, 420, 421, 424, 427, 428, 449, 450, 451, 452, 453, 454, 455, 457, 458, 462, 465, 467, 476, 481, 487, 505, 512, 517, 518, 542, 543, 544, 547, 550, 564, 565, 566, 567, 572, 573, 574, 575, 590, 591, 597, 598, 600, 655, 656, 657, 661, 662, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 693, 787, 788, 789, 790, 809, 815, 823, 832, 834, 835, 836, 837, 840, 841, 842, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 873, 874, 891, 893, 903, 904, 906, 911, 913, 914, 921, 922, 923, 924, 940, 978, 994, 1006, 1012, 1013, 1020, 1022, 1023, 1025, 1026, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "memory_profil": [390, 402, 409], "memoryerror": [1049, 1053], "memoryview": 385, "memorywis": 410, "men": 381, "menes": 1056, "meng": [1041, 1042, 1045, 1047, 1048], "menoci": 1059, "menon": 414, "mensch": [1046, 1047, 1048, 1049], "mention": [90, 118, 138, 236, 290, 327, 367, 371, 384, 388, 389, 396, 416, 705, 905, 906, 999, 1004, 1006, 1030, 1033, 1034, 1048, 1049, 1050], "menu": 402, "menuet": 1050, "mercer": 1002, "mere": [43, 276, 398, 840, 1024], "merg": [74, 76, 81, 86, 329, 382, 384, 387, 392, 396, 399, 416, 448, 449, 450, 453, 454, 471, 829, 1041, 1048], "merit": [384, 388, 399], "meritocrat": 399, "merritt": 1047, "mersenn": 1052, "merz": 414, "mesfer": 1054, "mesh": [93, 147, 157, 177, 250, 305, 312, 319, 341, 343], "meshgrid": [50, 63, 77, 93, 113, 147, 157, 176, 177, 178, 179, 181, 192, 229, 230, 231, 232, 243, 245, 265, 303, 310, 312, 319, 320, 341, 346, 347, 351, 352, 355, 356, 640], "meshulam": 1044, "meson": [382, 387, 402, 409, 1060], "mess": 1055, "messag": [73, 79, 97, 104, 124, 252, 358, 359, 379, 382, 383, 387, 388, 389, 392, 393, 416, 448, 462, 476, 548, 552, 557, 583, 636, 721, 809, 812, 813, 815, 823, 832, 837, 840, 842, 862, 870, 871, 911, 938, 939, 940, 943, 947, 972, 993, 998, 1010, 1020, 1041, 1045, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "met": [146, 252, 386, 425, 543, 550, 636, 680, 1006, 1010, 1049], "meta": [2, 7, 30, 31, 91, 104, 137, 162, 188, 218, 281, 285, 290, 293, 296, 332, 333, 365, 367, 378, 382, 386, 388, 396, 398, 407, 414, 425, 426, 436, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 505, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 584, 590, 591, 597, 599, 600, 606, 612, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 809, 810, 811, 816, 818, 825, 827, 831, 836, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 930, 962, 969, 998, 999, 1011, 1030, 1031, 1032, 1036, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056, 1058], "meta_clf_sample_weight": 252, "meta_est": 252, "meta_meta_est": 252, "metaclassifi": [252, 253], "metaclassifierifittedmetaclassifi": 252, "metadata": [2, 47, 91, 136, 183, 188, 200, 244, 270, 334, 359, 378, 379, 410, 430, 433, 436, 439, 440, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 497, 505, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 965, 966, 967, 968, 969, 993, 1010, 1029, 1030, 1031, 1036, 1057], "metadata_rout": [2, 252, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 965, 966, 967, 968, 969], "metadatarequest": [2, 252, 430, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 477, 478, 479, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 601, 604, 605, 607, 608, 609, 612, 619, 620, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 663, 665, 666, 667, 669, 671, 673, 675, 676, 677, 678, 679, 681, 683, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 966, 968, 1058], "metadatarout": [2, 252, 445, 472, 473, 480, 564, 565, 572, 576, 577, 578, 579, 602, 603, 606, 611, 636, 656, 660, 662, 664, 668, 670, 672, 674, 680, 682, 684, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 872, 873, 910, 968, 1058], "metaestim": [2, 91, 398, 910, 930, 970, 1045, 1054, 1055, 1058], "metaestimatormixin": [2, 252], "metaireau": [1041, 1044], "metal": 412, "metaregressor": 252, "metatransfom": 1046, "meteorologi": 414, "meth_nam": 321, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 100, 103, 106, 112, 113, 116, 118, 122, 124, 127, 129, 132, 133, 134, 136, 138, 143, 145, 146, 152, 159, 168, 169, 173, 186, 196, 206, 207, 219, 226, 235, 237, 239, 241, 242, 243, 245, 249, 251, 252, 253, 255, 259, 260, 263, 270, 278, 281, 283, 284, 285, 290, 294, 297, 303, 304, 306, 317, 321, 324, 326, 328, 329, 350, 358, 359, 360, 366, 367, 371, 372, 373, 376, 381, 382, 384, 385, 386, 390, 391, 393, 396, 397, 401, 407, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 431, 433, 434, 435, 438, 439, 440, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 467, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 513, 521, 523, 531, 534, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 714, 719, 720, 731, 740, 741, 744, 745, 750, 751, 772, 777, 778, 783, 787, 792, 797, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 928, 930, 933, 942, 946, 947, 957, 965, 966, 967, 968, 969, 970, 975, 978, 993, 994, 997, 998, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "method_map": [252, 966], "method_max_it": [554, 555, 1051], "method_nam": [252, 966, 969], "methodmap": [2, 252, 966], "methodmetadatarequest": 965, "methodol": 1020, "methodolog": [420, 1033], "methodologi": [550, 886, 1000, 1010, 1034], "methodpair": 967, "metric": [2, 13, 43, 45, 46, 50, 52, 55, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 82, 83, 84, 87, 93, 95, 99, 104, 109, 115, 138, 143, 149, 150, 152, 153, 154, 159, 170, 173, 176, 186, 188, 190, 191, 193, 203, 207, 213, 214, 218, 220, 222, 224, 236, 241, 246, 249, 250, 255, 258, 268, 269, 272, 273, 274, 276, 277, 279, 283, 285, 286, 290, 296, 297, 299, 307, 310, 315, 317, 322, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 358, 359, 367, 371, 376, 379, 384, 386, 396, 397, 398, 401, 407, 411, 414, 415, 421, 422, 423, 426, 427, 433, 445, 449, 452, 453, 454, 458, 462, 463, 464, 465, 470, 477, 529, 544, 558, 559, 560, 562, 564, 566, 567, 568, 570, 571, 573, 574, 576, 578, 587, 611, 619, 629, 637, 640, 643, 647, 648, 649, 650, 651, 652, 667, 668, 672, 675, 677, 683, 684, 685, 697, 699, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 838, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 879, 885, 908, 909, 913, 915, 918, 921, 923, 930, 1000, 1002, 1005, 1007, 1011, 1013, 1016, 1018, 1029, 1030, 1031, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "metric_kwarg": [788, 789], "metric_obj": 708, "metric_param": [427, 452, 454, 458, 463, 464, 465, 697, 701, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 1045, 1048, 1055], "metsi": [848, 1012], "metzen": [0, 405, 1041, 1044, 1045, 1046, 1047], "mexican": 133, "meyer89": 1052, "mferrari3": [1049, 1050], "mgrid": [53, 166], "mhg": 1046, "mi": [64, 72, 168, 416, 616, 617, 713, 764, 766, 1000, 1010, 1024], "mia": 1056, "miao": 1054, "mib": [371, 476, 911], "mic": [894, 1020], "micah": 1051, "micci": [894, 1020], "mice": [378, 636, 1000], "miceprotein": 378, "michael": [381, 414, 416, 458, 637, 646, 700, 806, 1000, 1006, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056, 1058, 1059], "michal": [1045, 1048, 1054, 1055], "michali": 416, "michalkrawczyk": [1054, 1055], "micha\u0142": 1052, "micha\u0142owski": 1050, "michel": [0, 406, 1041, 1043, 1044, 1046, 1048, 1055, 1056], "michelbach": 1045, "michiaki": 1047, "micka\u00ebl": [1049, 1050], "micky774": [1055, 1056], "micro": [49, 310, 340, 371, 388, 716, 722, 738, 739, 747, 792, 793, 796, 797, 1010, 1041, 1049, 1050, 1056, 1059], "micro_roc_auc_ovr": 285, "microarrai": [413, 459, 522, 637, 1000], "microcontrol": 1029, "microphon": 125, "microryzomi": [50, 310, 379, 507], "microryzomys_minutu": 507, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 382, 385, 402], "mid": [63, 347, 1010, 1012], "middl": [43, 61, 70, 95, 129, 203, 355, 381, 1017, 1020], "mideast": [57, 379], "midina": 1048, "midnight": 43, "midpoint": 347, "midpointnorm": 347, "midvidi": 1054, "midwest": [173, 381], "might": [0, 43, 44, 52, 67, 77, 79, 95, 97, 104, 147, 154, 157, 170, 181, 187, 191, 192, 193, 196, 218, 236, 245, 270, 276, 278, 290, 300, 313, 328, 334, 351, 356, 367, 371, 372, 378, 382, 384, 385, 386, 388, 389, 390, 392, 396, 398, 399, 402, 410, 414, 415, 417, 420, 421, 422, 423, 424, 426, 441, 451, 496, 505, 510, 512, 517, 524, 532, 545, 564, 565, 566, 570, 571, 573, 588, 589, 591, 619, 620, 636, 659, 663, 664, 665, 667, 668, 685, 687, 701, 766, 803, 811, 812, 813, 826, 829, 837, 862, 878, 893, 906, 925, 927, 929, 931, 935, 939, 940, 957, 978, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1017, 1018, 1020, 1025, 1026, 1042, 1044, 1049, 1050, 1052, 1055, 1056, 1057, 1058], "mignon": [1041, 1044, 1045, 1048], "migrat": [384, 1041], "miguel": [1051, 1059], "miguelbarao": 1051, "miguelcsilva": 1059, "mihael": [416, 458, 465], "mihevc": 1051, "mike": 1048, "mikebenfield": 1048, "miketip": [543, 550], "mikhail": [1042, 1043, 1044, 1047, 1048, 1056, 1057], "miki": [1058, 1059], "mikulski": 1052, "milajev": 1045, "milan": 1053, "milana2": 1055, "mileag": 371, "milen": 1048, "mileston": 388, "militari": 104, "mill": 1051, "millawel": 1055, "miller": [379, 1049, 1050, 1054], "million": [77, 91, 180, 196, 424, 701, 1007, 1025, 1034, 1055, 1056], "millman": [0, 406, 1050, 1057, 1058], "milman": 1049, "miln": 379, "miltenberg": 1056, "milton": 1058, "milutinov": 1050, "mimic": [186, 218, 358, 827], "mimicri": 358, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 87, 93, 109, 124, 127, 138, 140, 147, 150, 151, 157, 166, 173, 177, 179, 180, 181, 187, 191, 201, 205, 207, 213, 220, 221, 224, 239, 249, 250, 253, 296, 303, 304, 310, 312, 314, 317, 319, 320, 322, 334, 341, 355, 393, 416, 419, 421, 490, 491, 493, 521, 543, 544, 547, 549, 550, 558, 559, 572, 636, 640, 641, 663, 664, 665, 666, 691, 692, 713, 766, 789, 812, 813, 862, 870, 871, 883, 892, 899, 957, 974, 1001, 1006, 1010, 1013, 1020, 1047, 1050, 1052, 1053, 1056], "min_": [329, 416, 423, 883, 1006, 1020, 1024, 1025, 1026], "min_arg": 52, "min_batch_s": 960, "min_bin_freq": [456, 469], "min_c": 1012, "min_categori": [849, 1053], "min_cluster_s": [79, 100, 332, 416, 454, 458, 464, 1050], "min_degre": [888, 1054], "min_df": [54, 57, 104, 277, 340, 358, 359, 424, 597, 600, 1041, 1043, 1052, 1059], "min_dist": 249, "min_estim": 142, "min_faces_per_person": [45, 379, 503], "min_features_to_select": [172, 603, 1049], "min_frequ": [330, 332, 886, 887, 1020, 1055, 1057], "min_grad_norm": [701, 1047], "min_i": 253, "min_idf": 1054, "min_impurity_decreas": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 1026, 1048], "min_impurity_split": 1048, "min_max_axi": 1050, "min_max_scal": 1020, "min_n": [597, 598, 600, 1041], "min_n_compon": 249, "min_po": [2, 393], "min_resourc": [151, 812, 813, 999], "min_resources_": [812, 813], "min_sampl": [79, 84, 100, 396, 398, 416, 427, 452, 454, 458, 463, 464, 465, 680, 1006, 1050, 1054], "min_sample_split": 1056, "min_samples_leaf": [144, 150, 151, 193, 326, 329, 362, 423, 566, 567, 568, 569, 570, 571, 573, 574, 575, 921, 922, 923, 924, 1026, 1047], "min_samples_split": [151, 152, 153, 280, 288, 318, 328, 423, 566, 567, 568, 569, 573, 574, 575, 812, 813, 921, 922, 923, 924, 999, 1026, 1047], "min_val": [936, 943], "min_valu": [636, 1052, 1053], "min_w": 1006, "min_weight_fraction_leaf": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 1026, 1044, 1047, 1048], "min_x": 253, "mina": [1051, 1052], "mincovdet": [2, 113, 114, 418, 477, 478, 481, 483, 484, 1016, 1041, 1048, 1060], "mind": [129, 154, 190, 191, 192, 236, 321, 322, 358, 359, 367, 384, 410, 418, 420, 423, 655, 656, 713, 1006, 1025, 1029], "minden": [416, 460, 470], "mine": [0, 276, 359, 379, 416, 427, 452, 520, 572, 729, 743, 749, 792, 1006, 1010, 1016, 1022], "ming": [572, 1016, 1045, 1049, 1050, 1051, 1055], "minghui": [1048, 1049], "mingw": 1044, "minh": 1049, "mini": [2, 47, 99, 124, 330, 373, 398, 424, 448, 450, 455, 457, 459, 461, 540, 542, 545, 546, 547, 548, 549, 551, 552, 554, 555, 1014, 1015, 1041, 1052, 1054], "mini_batch": [459, 461], "minibatch": [47, 79, 416, 421, 457, 543, 685, 869, 870, 871, 1041], "minibatch_iter": 47, "minibatch_kmean": 359, "minibatch_s": [47, 373], "minibatchdictionarylearn": [2, 124, 127, 373, 421, 540, 547, 551, 554, 555, 1042, 1044, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "minibatchkmean": [2, 57, 71, 73, 75, 78, 79, 85, 93, 94, 96, 98, 121, 188, 359, 373, 416, 421, 448, 450, 455, 521, 788, 1031, 1042, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "minibatchnmf": [2, 54, 373, 421, 1055, 1057, 1058, 1059], "minibatchsparsepca": [2, 540, 542, 546, 549, 551, 552, 554, 555, 1041, 1042, 1052, 1054, 1055, 1056, 1057, 1058], "miniforg": [382, 392, 402, 403], "miniforge3": [151, 319, 382, 392], "minim": [2, 43, 51, 52, 64, 92, 101, 111, 112, 151, 175, 183, 198, 214, 216, 218, 220, 222, 226, 236, 238, 248, 249, 261, 266, 270, 277, 285, 286, 317, 326, 329, 344, 351, 354, 362, 383, 384, 387, 392, 396, 398, 410, 414, 416, 418, 421, 423, 448, 449, 453, 454, 458, 471, 547, 549, 556, 566, 567, 568, 569, 573, 574, 618, 619, 620, 650, 655, 658, 666, 667, 676, 680, 681, 683, 687, 688, 696, 701, 703, 704, 757, 789, 860, 862, 871, 889, 901, 907, 921, 922, 923, 924, 1006, 1007, 1010, 1013, 1014, 1020, 1022, 1023, 1024, 1025, 1029, 1032, 1036, 1045, 1050, 1051], "minima": [181, 205, 421, 455, 701, 1007, 1049], "minimal_reproduc": 392, "minimalist": [389, 424, 1033], "minimis": [52, 275, 416, 420, 667, 668, 1026], "minimum": [2, 48, 90, 92, 113, 151, 152, 154, 172, 207, 228, 249, 255, 286, 303, 304, 386, 393, 402, 409, 413, 416, 423, 424, 449, 453, 454, 458, 462, 464, 477, 478, 481, 482, 483, 484, 520, 522, 550, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 603, 636, 640, 641, 644, 646, 677, 680, 685, 687, 688, 691, 692, 701, 714, 734, 788, 789, 812, 813, 834, 849, 870, 871, 882, 883, 886, 887, 888, 892, 906, 907, 920, 921, 922, 923, 924, 936, 939, 940, 943, 960, 1007, 1010, 1014, 1016, 1020, 1022, 1026, 1041, 1044, 1048, 1049, 1053, 1054, 1058], "minimum_cluster_s": 416, "minka": [131, 550, 1006], "minknowski": 1054, "minkowski": [427, 452, 458, 463, 464, 465, 697, 708, 787, 788, 789, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 1013, 1041, 1044, 1055, 1056, 1057], "minkowski_dist": [458, 465, 697, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867], "minkowskidist": [708, 1054], "minmax_scal": [2, 315, 317, 883, 1046, 1049], "minmaxscal": [2, 43, 44, 106, 169, 171, 196, 239, 255, 313, 328, 373, 412, 417, 472, 899, 1000, 1020, 1043, 1046, 1049, 1051, 1052, 1053, 1057, 1058, 1060], "minmaxscalerminmaxscal": 106, "minnesota": 416, "minor": [255, 270, 279, 283, 379, 388, 399, 505, 1010, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "minu": [276, 769, 1010], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 379, 384, 1007, 1028], "minutu": [50, 310, 379, 507], "minval": [520, 522], "minwoo": 1041, "minyushkin": 1047, "miola": 1056, "miott": [1041, 1044], "miotto": 1052, "mir": 424, "miroslav": [1042, 1043, 1046], "mirror": [850, 999], "mirza": 1054, "misa": 1056, "misc": [57, 88, 127, 277, 340, 358, 359, 360, 379], "misc_featur": 255, "miscalibr": 64, "miscellan": [377, 378, 1031, 1047, 1048, 1055, 1056, 1058, 1059, 1060], "miscfeatur": 159, "misclassif": [46, 138, 270, 351, 805, 1024, 1025, 1026, 1042], "misclassifi": [70, 138, 269, 270, 351, 358, 1025], "misclassification_error": 138, "misdetect": 1058, "mish": 424, "mishra": [1053, 1054], "mislabel": [269, 423, 1012], "mislead": [72, 145, 146, 152, 191, 385, 401, 423, 562, 563, 566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 1036, 1054], "mismatch": [79, 1009, 1050], "misread": 243, "miss": [2, 20, 105, 159, 173, 193, 247, 257, 270, 276, 297, 327, 331, 334, 367, 371, 376, 379, 381, 383, 384, 389, 398, 412, 415, 416, 417, 418, 454, 480, 498, 505, 507, 510, 566, 567, 570, 571, 573, 574, 575, 636, 637, 638, 639, 648, 654, 681, 699, 703, 736, 778, 835, 856, 874, 882, 883, 887, 889, 890, 893, 894, 898, 901, 902, 904, 921, 922, 923, 924, 930, 1006, 1007, 1010, 1029, 1030, 1031, 1032, 1034, 1036, 1043, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "missclassif": 138, "missforest": [186, 1000], "missing": [154, 423, 636, 637, 639, 1050], "missing_featur": [186, 187], "missing_fract": 154, "missing_fraction_list": 154, "missing_r": 187, "missing_sampl": [186, 187], "missing_valu": [186, 187, 257, 398, 636, 637, 638, 639, 778, 1000, 1049, 1050], "missingind": [2, 636, 637, 639, 1000, 1049, 1050, 1051, 1055, 1057], "mission": [0, 359, 1034], "misspecifi": 64, "misspel": 424, "mistak": [138, 170, 290, 337, 367, 416, 420, 744, 884, 898, 899, 901, 902, 903, 904, 1006, 1011], "misti": [43, 192], "mit": [294, 379, 390, 416, 426, 619, 620, 623, 628, 631, 652, 675, 676, 685, 850, 1003], "mitar": 1050, "mitig": [64, 90, 154, 193, 324, 372, 373, 1007, 1026, 1053], "mitra": [1051, 1052, 1056], "mitrov": 1050, "mitzi": [1054, 1055], "miwojc": 1055, "mix": [2, 43, 97, 103, 104, 125, 126, 148, 188, 191, 218, 247, 257, 259, 277, 317, 323, 378, 386, 396, 398, 417, 421, 428, 472, 474, 475, 505, 542, 547, 549, 556, 609, 613, 639, 655, 656, 661, 667, 668, 669, 670, 671, 672, 677, 685, 687, 690, 809, 823, 839, 873, 886, 887, 893, 894, 973, 980, 983, 1006, 1015, 1031, 1053, 1055, 1056], "mixed_encoded_preprocessor": 323, "mixed_pip": 323, "mixed_target": 323, "mixin": [2, 384, 398, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 610, 951, 1043, 1052, 1056], "mixing_": [125, 126, 542], "mixtur": [2, 46, 48, 70, 79, 90, 92, 100, 122, 187, 205, 263, 264, 287, 307, 333, 379, 380, 398, 416, 421, 422, 426, 632, 806, 807, 809, 1030, 1031, 1035, 1036, 1041, 1045, 1046, 1047, 1048], "mizil": [62, 64, 414, 445, 447], "mizuki": 1055, "mk": 1026, "mkdir": [47, 390, 392], "mkdtemp": [89, 417], "mkl": [371, 372, 382, 392, 396, 1041], "mkl_num_thread": 372, "mksol": 104, "ml": [47, 173, 294, 378, 381, 389, 509, 511, 519, 1006, 1008, 1029, 1030, 1034], "ml_map": 404, "mlant": 1055, "mlb": [379, 884], "mlc": 381, "mlcomp": 1041, "mld": 47, "mldata": [1041, 1049], "mle": [113, 131, 550, 1049, 1052], "mlewis1729": 1048, "mlflow": 1029, "mlg": 1045, "mlinari\u0107": 1056, "mline": [48, 113, 232, 303, 346, 349], "mljar": 1029, "mlle": [698, 702, 1007], "mlliou112": 1048, "mlo": 180, "mlondschien": 1054, "mlop": 1029, "mlp": [188, 192, 256, 311, 313, 505, 839, 870, 871, 1014, 1031], "mlp_disp": 256, "mlp_model": 192, "mlp_preprocessor": 192, "mlpclassifi": [2, 67, 153, 165, 188, 311, 312, 314, 373, 511, 513, 523, 531, 869, 871, 883, 1011, 1014, 1031, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "mlpregressor": [2, 43, 192, 256, 373, 869, 870, 1014, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "mlpregressormlpregressor": 256, "mlxtend": 1029, "mm": 196, "mm_bunch": 50, "mmap_mod": [410, 975], "mmm": 51, "mmse": [112, 418, 429, 483], "mn193": 1058, "mnb": 1012, "mnist": [66, 188, 197, 209, 211, 226, 233, 297, 311, 313, 505, 667, 839, 870, 893, 942, 1006, 1014, 1031], "mnist_10000": 297, "mnist_20000": 297, "mnist_784": [226, 234, 297, 314], "mo": [331, 1052], "mobil": 392, "mock": 1051, "mockdatafram": 1051, "modal": [2, 245, 482, 959], "mode": [2, 48, 49, 81, 82, 113, 218, 245, 297, 299, 315, 326, 382, 384, 388, 392, 393, 396, 413, 419, 423, 427, 451, 452, 455, 457, 460, 467, 470, 479, 480, 486, 490, 495, 517, 518, 566, 570, 573, 601, 604, 605, 607, 608, 609, 619, 636, 653, 654, 667, 668, 675, 677, 682, 683, 684, 685, 688, 691, 692, 698, 702, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 869, 913, 915, 918, 921, 923, 945, 956, 957, 959, 1013, 1016, 1029, 1042, 1050, 1055, 1058], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 83, 84, 89, 90, 91, 93, 96, 103, 105, 106, 107, 111, 115, 118, 123, 124, 133, 134, 137, 138, 139, 141, 143, 147, 150, 151, 153, 154, 156, 158, 159, 162, 164, 166, 167, 169, 170, 178, 179, 181, 182, 183, 184, 187, 189, 190, 194, 199, 201, 204, 206, 208, 209, 211, 213, 214, 215, 219, 220, 222, 223, 224, 226, 230, 231, 233, 234, 235, 245, 248, 253, 261, 263, 264, 265, 269, 271, 272, 274, 277, 279, 280, 281, 282, 284, 285, 289, 290, 291, 294, 297, 299, 300, 301, 303, 306, 310, 318, 321, 323, 324, 326, 328, 330, 331, 332, 334, 336, 337, 344, 346, 347, 348, 349, 350, 352, 354, 356, 359, 360, 363, 364, 365, 367, 376, 378, 379, 387, 390, 398, 401, 407, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 426, 435, 439, 441, 445, 450, 457, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 497, 498, 505, 507, 509, 510, 511, 512, 518, 531, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 597, 598, 602, 603, 606, 611, 615, 618, 619, 620, 624, 636, 641, 642, 643, 644, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 710, 715, 720, 730, 731, 732, 733, 743, 744, 750, 759, 762, 794, 797, 798, 801, 806, 807, 808, 809, 812, 813, 814, 815, 823, 824, 825, 826, 830, 831, 832, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 856, 858, 859, 860, 862, 864, 869, 870, 871, 873, 874, 876, 878, 880, 885, 886, 888, 889, 890, 892, 893, 894, 898, 899, 901, 902, 903, 904, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 928, 993, 1000, 1002, 1003, 1004, 1007, 1008, 1011, 1013, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1060], "model_1": 276, "model_1_scor": 276, "model_2": 276, "model_2_scor": 276, "model__estimator__max_depth": 999, "model_coef": 190, "model_color": 353, "model_detail": 147, "model_displai": 143, "model_fixed_threshold": 270, "model_from_prevision_vers": 410, "model_i": 276, "model_i_scor": 276, "model_idx": 255, "model_k": 276, "model_k_scor": 276, "model_l1": 354, "model_l2": 354, "model_nam": [144, 255, 296], "model_no_cf": 324, "model_param": 233, "model_prop": 43, "model_scor": [276, 296], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 89, 105, 106, 107, 108, 109, 111, 118, 129, 131, 138, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 164, 169, 170, 172, 175, 186, 187, 188, 190, 191, 193, 194, 196, 203, 213, 218, 220, 225, 226, 233, 234, 236, 246, 251, 252, 255, 257, 258, 259, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 300, 301, 305, 306, 312, 314, 315, 319, 321, 322, 323, 324, 326, 327, 328, 331, 332, 333, 334, 339, 340, 347, 350, 354, 362, 366, 367, 384, 386, 389, 397, 398, 407, 412, 415, 417, 420, 423, 445, 446, 567, 569, 576, 577, 588, 668, 706, 707, 709, 711, 751, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 862, 870, 871, 873, 921, 922, 923, 924, 999, 1000, 1005, 1010, 1012, 1013, 1018, 1020, 1025, 1030, 1031, 1038, 1045, 1047, 1048], "model_selection_tut": 164, "model_step": 43, "model_titl": 147, "model_with_cf": 324, "moder": [276, 384, 426, 462, 1016], "modern": [43, 154, 424, 476, 512, 599, 699, 703, 739, 911, 1007, 1029, 1030, 1057], "modif": [384, 419, 423, 424, 454, 1023, 1058, 1059], "modifi": [109, 203, 228, 238, 239, 240, 252, 255, 332, 356, 384, 386, 398, 413, 416, 423, 426, 451, 455, 462, 467, 476, 490, 491, 492, 493, 504, 519, 590, 619, 620, 622, 628, 685, 687, 698, 702, 728, 738, 739, 777, 792, 793, 796, 937, 991, 992, 1006, 1023, 1024, 1030, 1035, 1036, 1041, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1060], "modified_fil": 384, "modified_hub": [46, 685, 1024], "modified_huber_loss": 228, "modified_tol": [698, 702], "modrak": [1056, 1057], "modroiu": 1010, "modul": [7, 11, 16, 30, 31, 71, 72, 84, 88, 110, 116, 119, 123, 124, 137, 167, 174, 185, 188, 189, 195, 197, 233, 237, 238, 260, 268, 293, 294, 295, 298, 311, 313, 314, 316, 335, 342, 357, 361, 364, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 396, 398, 401, 402, 410, 414, 416, 419, 423, 424, 425, 427, 452, 512, 544, 588, 589, 668, 949, 999, 1004, 1006, 1008, 1010, 1011, 1014, 1016, 1017, 1020, 1022, 1024, 1026, 1027, 1034, 1042, 1043, 1044, 1046, 1047, 1051, 1055], "modulo": [424, 1052], "moeller": 1047, "mogavero": 1051, "moham": [1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "mohamedbsh": 1056, "mohammad": [1049, 1050], "mohit": [1055, 1058], "mohn": [1049, 1053], "mohr": 1047, "moin": 1053, "mois\u00e9": 1022, "moitra": [1041, 1042, 1043], "mojca": 1052, "mojdeh": 1058, "mola": [1052, 1058], "molden": 1043, "molecul": 1007, "molin": 1056, "molla": [1042, 1043], "molnar": [192, 1017], "moment": [371, 421, 426, 448, 624, 632, 870, 871, 973, 1014, 1015], "momentum": [313, 870, 871, 1014], "mon": [43, 154, 192], "mona": [174, 182, 188, 426, 505, 620, 624, 631, 632, 634, 1031], "monaf": 1056, "monei": [0, 236, 1034], "monitor": [149, 203, 226, 387, 398, 562, 563, 568, 569, 570, 571, 1014, 1033, 1044, 1049, 1051, 1053], "mono": [655, 656, 661, 662, 669, 670, 671, 672, 690, 693], "monografia": 1006, "monomi": 219, "monotoinc": 327, "monoton": [2, 22, 43, 62, 137, 188, 192, 236, 248, 256, 327, 414, 566, 567, 568, 569, 570, 571, 573, 574, 641, 644, 645, 703, 715, 889, 901, 915, 918, 921, 922, 923, 924, 1007, 1011, 1020, 1025, 1031, 1048, 1052, 1056, 1058], "monotonic_cst": [154, 156, 327, 329, 333, 423, 566, 567, 570, 571, 573, 574, 921, 922, 923, 924, 1056, 1059], "mont": [250, 426, 620, 650, 651, 1002, 1015], "montecchio": 1045, "montesel": 1059, "month": [0, 43, 180, 192, 323, 379, 384, 388, 399, 1041], "month_co": 43, "month_sin": 43, "monthli": [180, 399, 1010], "montoya": 1048, "montreal": 331, "moodi": 1046, "moon": [276, 313, 319, 358, 359, 531], "moonkyung94": 1055, "moor": [0, 744, 1010, 1034, 1058], "moosmann": 575, "moradizadeh": 1055, "morai": 1059, "moral": [57, 358, 667, 1049, 1053, 1054, 1059], "morawiec": [1048, 1049], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 81, 84, 87, 88, 90, 92, 95, 102, 109, 113, 120, 122, 124, 127, 130, 131, 138, 139, 141, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 159, 171, 173, 175, 181, 184, 187, 188, 191, 192, 194, 196, 198, 199, 203, 204, 207, 209, 212, 216, 218, 219, 220, 222, 233, 234, 235, 236, 238, 242, 245, 250, 251, 252, 253, 255, 257, 261, 263, 264, 266, 267, 269, 270, 274, 276, 277, 278, 279, 283, 285, 290, 294, 296, 297, 299, 300, 307, 312, 313, 315, 317, 318, 319, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 337, 344, 347, 351, 352, 354, 356, 358, 359, 360, 362, 363, 366, 367, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 397, 398, 399, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 439, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 929, 931, 932, 953, 955, 957, 959, 972, 975, 993, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "moreau": [1047, 1048, 1049, 1050, 1051], "moreov": [164, 181, 319, 330, 367, 416, 420, 426, 906, 979, 1010, 1018, 1034, 1049, 1055, 1056], "moreyra": 1054, "morgan": [1022, 1026], "mori": 1056, "morikko": 1048, "morina": 1054, "moritz": [1054, 1056], "morn": 43, "moroz": 1047, "morril": 1041, "mors": 1052, "moslei": 1010, "mosley2013": 1010, "mosold": 159, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 87, 88, 90, 97, 111, 117, 118, 132, 138, 144, 145, 152, 154, 159, 168, 169, 170, 172, 173, 180, 187, 190, 191, 192, 193, 194, 196, 203, 218, 219, 236, 252, 256, 261, 267, 270, 273, 274, 279, 283, 284, 286, 290, 294, 296, 306, 317, 323, 324, 326, 329, 332, 334, 337, 347, 351, 358, 359, 360, 367, 371, 372, 373, 379, 380, 382, 384, 385, 386, 388, 389, 390, 392, 396, 398, 399, 402, 407, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 451, 452, 454, 458, 464, 465, 468, 476, 505, 512, 530, 533, 541, 543, 548, 552, 558, 560, 570, 571, 575, 576, 597, 598, 600, 602, 613, 620, 636, 639, 658, 667, 681, 683, 685, 687, 696, 697, 701, 704, 734, 737, 755, 767, 768, 772, 794, 803, 806, 807, 812, 813, 828, 841, 842, 855, 856, 857, 859, 861, 862, 863, 864, 865, 888, 890, 898, 899, 901, 902, 903, 904, 911, 930, 956, 957, 959, 972, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1016, 1017, 1018, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1056, 1058, 1060], "most_common": 57, "most_frequ": [279, 560, 636, 639, 863, 1000, 1010, 1049, 1051, 1053], "mostli": [0, 2, 81, 104, 218, 236, 322, 386, 392, 396, 398, 421, 423, 424, 530, 788, 789, 1025, 1029, 1034, 1049, 1050, 1051, 1057], "mother": 1007, "motiv": [133, 384, 386, 398, 1002, 1010, 1020, 1034, 1054], "motmoti": 1051, "motoda": 416, "motor": 236, "motorcycl": [57, 379], "mottl": [1049, 1050], "moudgalya": [1057, 1058], "moufad": 1056, "moulavi": [416, 454], "mount": 392, "mountain": 1049, "mountford": [1057, 1058], "mous": 378, "mouseid": 378, "moussa": 1047, "move": [64, 147, 277, 315, 347, 383, 384, 390, 414, 416, 558, 559, 580, 581, 582, 584, 586, 587, 951, 952, 976, 1041, 1042, 1046, 1049, 1051, 1054, 1055, 1060], "moveabl": 417, "movelikeriv": 1050, "movement": 379, "movi": 424, "movie_entri": 424, "moya": 1053, "mp": 1006, "mpce": 57, "mpl": [70, 261, 262, 263, 267, 317], "mpl_toolkit": [50, 80, 102, 120, 130, 192, 215, 238, 240, 310], "mplot3d": [80, 102, 120, 130, 192, 215, 238, 240], "mpoemsl": 1055, "mppca": [543, 550], "mprun": 390, "mpy": 424, "mr": [331, 1042, 1045, 1055], "mrandrewandrad": 1047, "mrastgoo": [1056, 1058], "mrg": 392, "mridul": 1047, "mrinal": 1055, "mrinaltyagi": 1055, "mrl09": 421, "mrmjauh": 1048, "mro": [386, 433, 439, 1051, 1052], "mrs2008": 599, "msabati": 1055, "msc": 381, "mschaffenroth": 1051, "mse": [44, 46, 111, 112, 149, 151, 152, 186, 187, 218, 220, 222, 224, 291, 333, 656, 662, 759, 1010, 1026, 1052, 1054], "mse_path_": [207, 656, 660, 662, 664, 670, 672], "mse_valu": 46, "mses_california": 187, "mses_diabet": 187, "msft": 51, "msg": [297, 993], "msle": [760, 1010], "msm": [173, 381], "mssubclass": 159, "mst": 416, "msvc": 1044, "msvcp140": 1055, "mt19937": [283, 288, 942, 1052], "mthorrel": [1048, 1051], "mtrand": 367, "mtse": 688, "mu": [54, 113, 114, 276, 421, 429, 481, 483, 484, 487, 488, 489, 549, 556, 1004, 1006, 1048, 1051], "mu_i": 1012, "mu_j": 416, "mu_k": 1004, "muayyad": 1049, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 90, 113, 115, 122, 127, 133, 143, 151, 152, 159, 160, 161, 175, 186, 187, 191, 192, 193, 194, 196, 215, 216, 220, 249, 252, 255, 270, 276, 278, 279, 282, 287, 314, 318, 322, 323, 324, 328, 329, 331, 347, 352, 358, 359, 367, 371, 372, 373, 379, 384, 385, 386, 389, 392, 396, 397, 402, 410, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 455, 456, 505, 543, 544, 545, 547, 568, 569, 570, 571, 667, 668, 675, 676, 677, 685, 686, 687, 701, 788, 789, 812, 813, 827, 888, 906, 913, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1022, 1023, 1025, 1026, 1030, 1034, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "mudd": 1054, "mueller": [0, 405, 1034, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "muhammad": [1049, 1050, 1054], "mukherje": 1052, "mula": 1053, "multi": [2, 50, 67, 121, 137, 139, 147, 157, 160, 162, 166, 177, 179, 188, 197, 203, 204, 207, 210, 217, 225, 234, 237, 240, 244, 245, 253, 256, 268, 273, 285, 296, 311, 318, 319, 320, 326, 331, 341, 352, 358, 361, 362, 363, 364, 366, 372, 379, 381, 387, 393, 398, 402, 416, 423, 424, 426, 433, 445, 460, 470, 477, 482, 504, 505, 513, 514, 519, 523, 524, 528, 529, 531, 550, 558, 559, 560, 562, 564, 566, 567, 568, 570, 573, 574, 576, 578, 619, 640, 642, 652, 655, 656, 661, 662, 666, 667, 669, 670, 671, 672, 675, 677, 681, 682, 683, 684, 685, 690, 693, 699, 712, 722, 729, 743, 749, 751, 792, 808, 809, 823, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 860, 861, 863, 869, 870, 871, 874, 880, 893, 897, 908, 909, 913, 915, 918, 921, 922, 923, 925, 926, 927, 929, 933, 939, 942, 945, 999, 1011, 1013, 1017, 1020, 1024, 1029, 1030, 1031, 1032, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1057, 1058, 1059], "multi_class": [210, 285, 326, 619, 667, 668, 797, 913, 929, 1006, 1011, 1025, 1041, 1045, 1049, 1054, 1056, 1059], "multi_confus": 763, "multi_label": [929, 931], "multi_layer_regressor": 423, "multi_output": [393, 933, 939, 998], "multi_target_forest": 1011, "multialign": 288, "multiarch": 392, "multiclass": [2, 31, 63, 66, 144, 197, 210, 234, 246, 253, 255, 258, 268, 273, 281, 283, 286, 296, 315, 344, 355, 379, 380, 386, 387, 389, 398, 407, 416, 423, 445, 460, 470, 497, 505, 513, 566, 568, 570, 573, 576, 577, 603, 611, 619, 640, 641, 642, 667, 668, 675, 677, 682, 683, 684, 685, 711, 715, 717, 738, 739, 743, 744, 747, 752, 763, 792, 793, 796, 797, 798, 803, 809, 810, 812, 813, 814, 815, 823, 825, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 880, 894, 913, 915, 918, 921, 923, 971, 972, 973, 1004, 1006, 1020, 1021, 1025, 1026, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1056, 1057, 1058], "multicollinear": [145, 146, 152, 188, 189, 193, 282, 339, 419, 509, 573, 643, 664, 839, 1006, 1018, 1031], "multicor": [1053, 1054], "multidimension": [2, 419, 697, 699, 701, 703, 1007, 1013], "multigrid": 470, "multiindex": 1055, "multilabel": [2, 30, 31, 117, 119, 188, 244, 283, 294, 295, 379, 386, 387, 398, 411, 490, 495, 505, 506, 517, 518, 524, 532, 550, 566, 573, 576, 667, 683, 684, 712, 716, 722, 735, 738, 739, 743, 744, 747, 748, 763, 765, 792, 793, 796, 797, 803, 805, 839, 842, 844, 846, 870, 877, 880, 884, 886, 897, 918, 921, 923, 931, 945, 971, 972, 973, 1021, 1031, 1032, 1036, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058, 1059], "multilabel_": [842, 1046], "multilabel_confusion_matrix": [2, 722, 738, 739, 747, 793, 796, 1010, 1050], "multilabelbinar": [2, 398, 842, 877, 886, 1011, 1044, 1046, 1047, 1049, 1050], "multilay": [396, 1008], "multilearn": 1029, "multimetr": [720, 999, 1051, 1056, 1060], "multimetric_": [809, 812, 813, 823], "multimod": 245, "multinomi": [2, 47, 66, 188, 197, 209, 211, 227, 233, 253, 271, 285, 314, 355, 379, 380, 384, 421, 423, 505, 521, 532, 560, 562, 568, 570, 640, 667, 668, 750, 839, 842, 848, 849, 850, 851, 852, 893, 942, 1010, 1026, 1031, 1032, 1036, 1041, 1045, 1047, 1048, 1049, 1054, 1055, 1059], "multinomialdevi": 1052, "multinomialhmm": 1041, "multinomialnb": [2, 47, 373, 379, 424, 848, 849, 850, 851, 1012, 1043, 1045, 1048, 1049, 1053, 1054, 1056], "multiouput": 1051, "multioutput": [2, 41, 158, 285, 296, 398, 407, 439, 473, 490, 491, 492, 560, 563, 565, 566, 567, 569, 571, 573, 574, 577, 579, 620, 641, 642, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 797, 799, 800, 834, 842, 844, 845, 846, 847, 856, 864, 871, 880, 914, 916, 919, 921, 922, 923, 924, 945, 972, 973, 1010, 1031, 1032, 1036, 1041, 1042, 1043, 1047, 1048, 1054, 1055, 1060], "multioutput_arrai": 384, "multioutputclassifi": [2, 407, 797, 842, 844, 846, 1010, 1048, 1050, 1051, 1052, 1053, 1057, 1058], "multioutputregressor": [2, 158, 407, 439, 473, 490, 491, 492, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 845, 847, 856, 864, 871, 914, 916, 919, 922, 924, 1047, 1048, 1050, 1052, 1053, 1057, 1058], "multipl": [2, 25, 52, 81, 103, 106, 122, 133, 138, 144, 146, 147, 149, 169, 188, 191, 212, 250, 270, 276, 281, 284, 288, 294, 296, 299, 326, 332, 350, 371, 372, 373, 378, 380, 381, 384, 386, 387, 388, 389, 396, 398, 410, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 452, 468, 472, 474, 475, 477, 482, 496, 499, 501, 504, 505, 506, 512, 513, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 562, 563, 564, 565, 568, 569, 570, 571, 572, 590, 608, 616, 617, 619, 620, 636, 641, 643, 648, 649, 650, 651, 655, 656, 659, 661, 662, 663, 666, 669, 670, 671, 672, 675, 676, 677, 680, 682, 685, 687, 688, 698, 699, 701, 702, 703, 720, 730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 797, 799, 800, 802, 806, 807, 809, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 835, 836, 837, 839, 843, 844, 845, 846, 847, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 875, 878, 890, 894, 902, 905, 906, 913, 914, 915, 918, 935, 951, 956, 957, 980, 983, 1002, 1005, 1006, 1007, 1011, 1012, 1013, 1017, 1018, 1023, 1024, 1026, 1029, 1030, 1031, 1041, 1042, 1044, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "multipleloc": [238, 302], "multiplex": 1026, "multipli": [191, 222, 236, 276, 366, 371, 393, 398, 421, 423, 424, 429, 472, 483, 524, 547, 549, 550, 556, 566, 570, 573, 655, 657, 661, 663, 667, 668, 669, 671, 677, 678, 679, 681, 685, 686, 687, 689, 695, 696, 698, 702, 773, 915, 918, 921, 923, 945, 985, 986, 987, 999, 1002, 1006, 1010, 1024, 1052], "multiprocess": [396, 398, 975, 1013, 1041, 1049, 1055], "multirespons": 1006, "multiscal": 470, "multisurfac": [173, 381], "multitarget": 393, "multitask": [296, 424, 1011], "multitaskelasticnet": [2, 655, 656, 661, 670, 671, 672, 690, 1006, 1011, 1041, 1048, 1049, 1052, 1054], "multitaskelasticnetcv": [2, 407, 655, 656, 661, 669, 671, 672, 690, 1006, 1011, 1044, 1051, 1052, 1054, 1058], "multitasklasso": [2, 212, 661, 669, 672, 1006, 1011, 1041, 1049, 1052, 1054], "multitasklassocv": [2, 407, 670, 671, 1011, 1044, 1051, 1052, 1054, 1058], "multithread": [371, 416, 783, 787, 913, 914, 915, 916, 917, 918, 919], "multivari": [2, 124, 191, 376, 418, 421, 424, 481, 525, 526, 527, 636, 637, 638, 639, 658, 680, 687, 688, 848, 849, 850, 851, 852, 1004, 1006, 1009, 1012, 1029, 1036], "multivariate_norm": [115, 118, 261, 429, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489], "multiwai": 1026, "muma": 114, "mungui": 1054, "munoz": [1047, 1053], "muoki": 1053, "murad": 1044, "murashkin": 1045, "murata": [1054, 1055], "murder": 358, "murezzda": 1057, "murmurhash": 393, "murmurhash3": [2, 424, 591, 598, 974], "murmurhash3_32": [2, 393], "murmurhash3_x86_32": [393, 974], "murphi": [414, 652, 1003], "murrai": [1047, 1048], "music": 1034, "must": [90, 191, 192, 194, 200, 203, 235, 236, 245, 256, 271, 303, 318, 323, 358, 367, 379, 383, 384, 385, 386, 388, 390, 392, 398, 399, 407, 412, 414, 416, 417, 420, 421, 423, 424, 425, 426, 427, 437, 446, 449, 452, 453, 454, 455, 457, 458, 459, 463, 465, 467, 469, 470, 472, 474, 475, 477, 482, 495, 517, 518, 521, 532, 540, 546, 547, 548, 549, 550, 552, 553, 556, 562, 563, 568, 569, 570, 571, 576, 577, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 619, 620, 626, 629, 636, 637, 638, 639, 640, 641, 642, 647, 651, 652, 657, 658, 661, 667, 668, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 708, 712, 715, 718, 744, 755, 773, 780, 783, 787, 790, 797, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 816, 818, 819, 821, 823, 824, 825, 827, 828, 830, 834, 837, 839, 840, 848, 849, 850, 851, 852, 855, 856, 857, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 873, 876, 877, 878, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 913, 914, 915, 916, 917, 918, 919, 920, 926, 984, 993, 995, 998, 999, 1000, 1006, 1007, 1008, 1010, 1013, 1014, 1016, 1017, 1024, 1025, 1026, 1041, 1044, 1048, 1052, 1054, 1055, 1058], "mutat": [367, 998, 1049], "mutual": [2, 72, 73, 84, 90, 93, 167, 188, 398, 423, 425, 454, 601, 604, 605, 608, 609, 615, 616, 617, 618, 713, 714, 724, 764, 766, 795, 804, 811, 826, 829, 999, 1006, 1010, 1011, 1031, 1041, 1047, 1057], "mutual_info_classif": [2, 106, 425, 601, 604, 605, 608, 609, 1047, 1053, 1056, 1059], "mutual_info_regress": [2, 168, 330, 425, 601, 604, 605, 608, 609, 618, 1047, 1048, 1053, 1055, 1056, 1057, 1059], "mutual_info_scor": [2, 72, 416, 713, 1010, 1049, 1052, 1053], "mu\u00f1oz": [1054, 1056], "mwestt": 1050, "my": [378, 384, 389, 392, 505], "my_custom_loss_func": 1010, "my_data": 389, "my_dataset": 495, "my_estim": [386, 417], "my_extra_param": 386, "my_featur": 384, "my_fil": 390, "my_func": [385, 390], "my_g": [428, 542], "my_group": [252, 407], "my_kernel": [343, 1025], "my_memb": [96, 98, 99], "my_other_weight": [252, 407], "my_pipelin": 1050, "my_script": 372, "my_test_script": 392, "my_token": 424, "my_weight": [252, 407], "myatt": [1050, 1051], "mycach": [517, 518], "mycluster": 434, "myenugula": 1059, "myer": [1044, 1048], "myestim": [386, 430, 432, 433, 435, 436, 437, 438, 439], "myestimator0": 432, "myestimator1": 432, "mymultioutputestim": 386, "mypi": [384, 388, 402, 409, 1052], "myself": 384, "mysvmlightfil": 517, "mytransform": [386, 440], "m\u00e9hault": [1049, 1050], "m\u00f6rtberg": 1047, "m\u00fcller": [0, 399, 421, 544, 879, 1014, 1020, 1024, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 93, 104, 109, 113, 117, 122, 124, 127, 129, 131, 133, 134, 138, 140, 141, 145, 161, 168, 171, 173, 175, 179, 184, 192, 194, 199, 203, 214, 218, 219, 222, 233, 235, 236, 238, 248, 249, 250, 253, 261, 263, 264, 274, 276, 279, 281, 282, 283, 285, 286, 297, 300, 302, 315, 319, 321, 322, 328, 331, 333, 337, 351, 354, 366, 371, 378, 381, 382, 384, 388, 390, 392, 393, 398, 402, 403, 407, 413, 414, 416, 419, 420, 421, 422, 423, 424, 426, 427, 452, 453, 455, 456, 458, 477, 479, 482, 486, 497, 524, 525, 526, 527, 532, 537, 547, 549, 550, 556, 566, 567, 568, 569, 572, 573, 574, 575, 597, 598, 599, 600, 616, 617, 623, 636, 658, 680, 688, 701, 705, 708, 715, 716, 764, 814, 817, 819, 824, 825, 828, 849, 853, 854, 858, 878, 905, 907, 921, 922, 923, 924, 936, 955, 960, 961, 984, 988, 989, 999, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1022, 1024, 1025, 1026, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "n1": 127, "n2": 127, "n4": 127, "n_": [113, 114, 194, 276, 329, 416, 421, 423, 655, 661, 694, 705, 1002, 1006, 1010, 1012, 1013, 1017, 1020, 1022, 1025, 1026], "n_alpha": [223, 480, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 682, 684, 690, 691, 692, 693, 1044], "n_atom": 1042, "n_averag": 69, "n_bar": 187, "n_batch_iter_": 545, "n_best": 459, "n_bin": [61, 62, 64, 88, 218, 236, 318, 320, 324, 446, 447, 878, 1020], "n_bins_": 878, "n_bootstrap": [279, 1042], "n_bulk_repeat": 49, "n_byte": 249, "n_c": [416, 668], "n_call": [853, 854], "n_candid": [812, 813, 999], "n_candidates_": [288, 812, 813, 999], "n_candidates_0": 999, "n_candidates_i": 999, "n_categori": [324, 849, 887, 1020], "n_categorical_featur": [148, 570, 571, 641, 642], "n_categories_": 849, "n_center": [77, 521], "n_channel": [592, 593, 596], "n_class": [2, 45, 72, 121, 122, 138, 140, 145, 147, 170, 172, 233, 239, 250, 253, 263, 283, 284, 285, 306, 307, 326, 363, 366, 367, 384, 386, 398, 423, 445, 496, 497, 511, 524, 528, 532, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 602, 603, 613, 619, 643, 648, 667, 668, 675, 676, 677, 683, 684, 685, 686, 706, 716, 725, 727, 731, 744, 747, 750, 763, 797, 803, 808, 809, 812, 813, 823, 831, 834, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 855, 860, 862, 863, 870, 873, 880, 881, 884, 887, 894, 897, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 923, 925, 926, 944, 945, 1006, 1010, 1011, 1014, 1021, 1024, 1025, 1046, 1047, 1048, 1050, 1051, 1052, 1058], "n_classes_": [560, 562, 564, 566, 568, 573, 619, 841, 842, 921, 923, 1042, 1051, 1053], "n_classes_pr": [723, 764], "n_classes_tru": [723, 764], "n_classifi": [66, 578, 579], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 124, 330, 359, 384, 398, 416, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 468, 469, 470, 471, 520, 522, 719, 801, 802, 1041, 1045, 1047, 1049, 1050, 1052, 1055], "n_clusters_": [73, 84, 90, 98, 449, 453], "n_clusters_list": 78, "n_clusters_per_class": [67, 121, 142, 170, 172, 273, 307, 312, 319, 389, 524, 614, 616], "n_clusters_rang": 72, "n_clusters_tru": 96, "n_col": [45, 57, 124, 254, 431, 459, 461, 520, 522, 641], "n_color": 83, "n_column": [413, 459, 461], "n_column_clust": [459, 461, 522], "n_comp": [134, 196], "n_comparison": 276, "n_compon": [43, 44, 45, 51, 54, 79, 87, 92, 93, 94, 104, 106, 107, 108, 117, 118, 120, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 157, 196, 217, 238, 239, 240, 241, 242, 243, 245, 249, 250, 253, 257, 261, 262, 263, 264, 265, 266, 267, 275, 301, 306, 315, 322, 328, 330, 333, 334, 359, 386, 389, 390, 398, 417, 419, 421, 428, 459, 460, 470, 472, 490, 491, 492, 493, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 648, 649, 650, 651, 697, 698, 699, 700, 701, 702, 703, 704, 705, 806, 807, 862, 869, 872, 905, 906, 907, 957, 1002, 1004, 1007, 1009, 1013, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060], "n_components_": [107, 131, 398, 449, 453, 543, 547, 548, 549, 550, 551, 552, 905, 906, 1050, 1052], "n_components_fa": 131, "n_components_pca": 131, "n_components_pca_ml": 131, "n_components_rang": 249, "n_connected_compon": 471, "n_connected_components_": [449, 453, 1050], "n_core": 144, "n_core_sampl": [427, 452], "n_cpu": [372, 398], "n_cv": [420, 445], "n_cv_alpha": [660, 664], "n_cv_fold": [148, 323, 815, 832, 837, 840], "n_digit": 93, "n_dim": [486, 536, 538, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 1058], "n_dimens": [806, 807], "n_dimensions_of_x": [915, 916, 917, 918, 919], "n_dir": 53, "n_e": 416, "n_element": [426, 626], "n_encoded_featur": [886, 887], "n_error": 304, "n_error_outli": [232, 303, 346], "n_error_outliers_sgd": 232, "n_error_test": [232, 303, 346], "n_error_test_sgd": 232, "n_error_train": [232, 346], "n_error_train_sgd": 232, "n_estim": [46, 49, 63, 67, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 157, 158, 161, 186, 194, 239, 254, 258, 263, 273, 288, 319, 326, 328, 371, 397, 398, 423, 425, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 641, 812, 813, 999, 1016, 1017, 1038, 1049, 1057], "n_estimators_": [149, 568, 569], "n_estimators_ful": 149, "n_exampl": 47, "n_face": 254, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 87, 93, 95, 96, 111, 112, 113, 114, 115, 121, 122, 124, 131, 138, 140, 142, 144, 145, 170, 172, 173, 186, 187, 196, 198, 201, 203, 204, 212, 213, 217, 221, 222, 233, 235, 239, 245, 249, 250, 252, 261, 266, 273, 279, 283, 285, 286, 288, 289, 307, 312, 319, 326, 327, 328, 330, 332, 333, 334, 354, 358, 359, 360, 367, 371, 377, 378, 384, 386, 389, 396, 397, 398, 407, 416, 418, 419, 421, 423, 424, 427, 428, 429, 431, 433, 434, 435, 438, 439, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 501, 503, 510, 513, 517, 518, 521, 524, 525, 528, 530, 532, 533, 535, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 709, 710, 711, 719, 734, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 931, 957, 984, 985, 986, 987, 988, 989, 990, 991, 992, 998, 1002, 1006, 1011, 1013, 1014, 1020, 1024, 1025, 1026, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "n_feature_influ": 49, "n_features_": [172, 602, 603, 1054, 1056], "n_features_a": 862, "n_features_b": 862, "n_features_in_": [386, 398, 437, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 636, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 998, 1052, 1054, 1056, 1059], "n_features_max": 69, "n_features_missing_ind": 639, "n_features_new": [440, 450, 453, 541, 543, 545, 546, 548, 551, 552, 558, 576, 578, 579, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 637, 639, 644, 647, 648, 649, 650, 651, 862, 869, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 905, 906], "n_features_opt": 106, "n_features_out": 639, "n_features_out_": 892, "n_features_rang": 69, "n_features_to_comput": 1049, "n_features_to_select": [171, 173, 328, 425, 602, 611, 1053, 1055], "n_features_to_select_": 611, "n_features_with_miss": 638, "n_features_with_missing_": 636, "n_fold": [164, 656, 660, 662, 664, 668, 670, 672, 1042, 1043, 1047], "n_gram_rang": 1041, "n_group": [420, 818, 1047], "n_i": [1012, 1020], "n_imag": 274, "n_index": [855, 856, 857, 859, 861, 863, 864], "n_inform": [62, 64, 67, 121, 142, 145, 170, 172, 198, 203, 221, 222, 273, 279, 289, 307, 312, 319, 326, 354, 389, 524, 533, 562, 563, 564, 565, 573, 574, 614, 615, 616, 617, 618, 655, 656, 661, 669, 670, 671, 674, 690, 691, 692, 843, 931, 1011, 1049], "n_init": [57, 77, 78, 80, 85, 92, 93, 96, 99, 238, 239, 240, 241, 327, 330, 359, 416, 451, 455, 457, 459, 460, 461, 467, 470, 699, 703, 806, 807, 1041, 1049, 1055, 1056, 1057], "n_init_rang": 96, "n_inlier": 245, "n_input_features_": 1054, "n_instanc": [49, 642], "n_iter": [45, 55, 105, 154, 175, 226, 277, 284, 297, 315, 349, 386, 390, 397, 428, 462, 486, 541, 542, 553, 554, 555, 556, 655, 656, 661, 662, 669, 670, 671, 672, 690, 691, 692, 693, 694, 695, 696, 701, 703, 812, 813, 821, 823, 869, 871, 956, 957, 999, 1024, 1042, 1047, 1048, 1049, 1053, 1055, 1056, 1057, 1059], "n_iter_": [43, 127, 154, 226, 264, 398, 448, 455, 456, 457, 479, 480, 490, 491, 492, 540, 541, 542, 545, 546, 547, 548, 549, 552, 570, 571, 636, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 687, 688, 689, 699, 701, 806, 807, 862, 870, 871, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 1045, 1048, 1049, 1051, 1054, 1055, 1057], "n_iter_no_chang": [46, 144, 149, 154, 226, 329, 358, 389, 398, 423, 568, 569, 570, 571, 675, 676, 677, 685, 686, 687, 870, 871, 1024, 1049, 1052], "n_iter_search": 284, "n_iter_without_progress": [239, 701, 1046, 1047], "n_iterations_": [288, 812, 813], "n_iters_": 1047, "n_job": [52, 89, 106, 107, 144, 145, 146, 151, 152, 159, 172, 173, 186, 191, 192, 193, 194, 239, 241, 257, 270, 275, 277, 278, 280, 292, 294, 297, 326, 327, 328, 331, 354, 372, 384, 398, 423, 427, 445, 452, 454, 456, 458, 460, 463, 464, 465, 466, 469, 472, 475, 480, 540, 544, 545, 546, 548, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 603, 611, 616, 617, 619, 641, 643, 648, 656, 660, 662, 664, 666, 667, 668, 670, 672, 674, 675, 677, 685, 688, 697, 698, 699, 700, 701, 702, 703, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 872, 875, 908, 909, 975, 999, 1010, 1011, 1013, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1059], "n_k": [416, 559], "n_kernel": 621, "n_kernel_param": [619, 620], "n_knot": [43, 219, 329, 892, 1020, 1054], "n_l1_ratio": [656, 668, 670, 1044], "n_l1_ratios_": 668, "n_label": [51, 122, 253, 398, 495, 532, 722, 729, 735, 748, 749, 763, 765, 801, 802, 829, 1010, 1047, 1049], "n_labeled_point": [336, 337], "n_layer": [870, 871], "n_layers_": [870, 871], "n_leav": [471, 921, 922, 923, 924], "n_leaves_": [449, 453], "n_left": 572, "n_local_tri": 468, "n_m": 1026, "n_mask": 218, "n_missing_featur": 638, "n_missing_sampl": 187, "n_nearest_featur": [187, 636], "n_neighbor": [51, 79, 97, 102, 160, 186, 238, 239, 240, 242, 245, 255, 297, 299, 300, 303, 304, 305, 306, 309, 322, 326, 328, 358, 423, 460, 611, 616, 617, 637, 697, 698, 700, 702, 704, 705, 855, 856, 857, 859, 861, 862, 866, 908, 909, 1000, 1007, 1013, 1016, 1023, 1048, 1055, 1057, 1058], "n_neighbors_": [700, 859], "n_neighbors_list": [255, 299], "n_neighbour": 1055, "n_node": [366, 449, 453, 471, 566, 567, 573, 574, 575, 921, 922, 923, 924, 963], "n_node_sampl": 366, "n_nodes_ptr": [566, 567, 573, 574, 575], "n_noise_": 84, "n_nonzero": 133, "n_nonzero_coef": [217, 535, 540, 546, 551, 554, 555, 557, 659, 673, 694, 695, 1059], "n_nonzero_coefs_": [673, 674, 1059], "n_nonzero_column": 360, "n_numerical_featur": 148, "n_order": 199, "n_original_featur": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], "n_out": 575, "n_outlier": [113, 114, 155, 221, 245, 304], "n_output": [366, 398, 423, 433, 439, 440, 445, 450, 453, 473, 477, 490, 491, 492, 541, 543, 545, 546, 548, 551, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 637, 639, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 687, 688, 730, 732, 737, 754, 755, 757, 759, 760, 762, 763, 794, 797, 799, 800, 808, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 860, 862, 863, 864, 869, 870, 871, 872, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 905, 906, 908, 909, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 945, 980, 1010, 1011, 1026, 1048, 1051], "n_output_featur": 637, "n_output_features_": 888, "n_outputs_": [560, 561, 566, 567, 573, 574, 575, 870, 871, 921, 922, 923, 924], "n_oversampl": [459, 461, 550, 553, 957, 1055], "n_pack": [2, 960, 961], "n_patch": [592, 593, 596], "n_permut": [282, 420, 838], "n_pixel": [254, 274], "n_point": [271, 853, 854], "n_points_per_clust": 100, "n_popul": [393, 978], "n_possible_iterations_": [812, 813], "n_predict": 49, "n_pt": 53, "n_q": 416, "n_quantil": [109, 192, 321, 890, 902, 1050], "n_quantiles_": 890, "n_queri": [697, 855, 856, 857, 859, 861, 863, 864, 865], "n_random_featur": 207, "n_redund": [62, 64, 67, 121, 145, 170, 172, 273, 279, 307, 312, 319, 389, 445, 524, 562, 564, 573, 843], "n_refin": 480, "n_region": 81, "n_regions_plu": 81, "n_regressor": 579, "n_relevant_featur": 212, "n_remaining_candidates_": [812, 813], "n_repeat": [141, 145, 152, 172, 191, 193, 194, 276, 290, 294, 326, 420, 524, 643, 824, 825, 1018], "n_required_iterations_": [812, 813], "n_resourc": 999, "n_resources_": [288, 812, 813, 999], "n_resources_0": 999, "n_resources_i": 999, "n_restarts_optim": [181, 182, 426, 619, 620], "n_retri": [496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 1055, 1059], "n_row": [45, 57, 124, 413, 431, 459, 461, 520, 522], "n_row_clust": [459, 461, 522], "n_run": [72, 96, 196, 359], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 104, 109, 111, 112, 113, 114, 115, 118, 122, 124, 125, 129, 131, 138, 140, 141, 142, 143, 144, 145, 150, 151, 152, 153, 155, 156, 165, 166, 172, 173, 184, 186, 187, 190, 198, 200, 201, 203, 204, 205, 208, 210, 212, 213, 217, 218, 219, 221, 222, 226, 230, 233, 235, 236, 238, 239, 240, 241, 242, 243, 245, 249, 250, 252, 255, 262, 264, 265, 266, 267, 273, 274, 276, 279, 280, 283, 285, 286, 287, 288, 289, 291, 297, 307, 319, 320, 321, 324, 327, 328, 330, 332, 333, 334, 338, 345, 348, 349, 354, 358, 359, 367, 377, 381, 384, 386, 389, 393, 396, 397, 398, 407, 415, 416, 418, 419, 420, 421, 423, 427, 428, 429, 431, 433, 434, 435, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 503, 510, 513, 517, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 779, 780, 781, 782, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 929, 931, 944, 945, 957, 959, 961, 971, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 998, 999, 1002, 1006, 1010, 1011, 1013, 1014, 1020, 1021, 1022, 1024, 1025, 1026, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "n_samples1": 879, "n_samples2": 879, "n_samples_": 550, "n_samples_1": [349, 1025], "n_samples_2": [349, 1025], "n_samples_a": [801, 802], "n_samples_fit": [439, 473, 490, 491, 492, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 697, 846, 847, 855, 856, 857, 859, 861, 863, 864, 865, 871, 914, 916, 919, 922, 924], "n_samples_fit_": [297, 855, 856, 857, 859, 861, 863, 864, 865], "n_samples_i": [621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790], "n_samples_per_cent": 96, "n_samples_rang": [112, 249], "n_samples_seen": 893, "n_samples_seen_": [543, 882, 883, 893, 1049], "n_samples_test": [289, 915, 916, 917, 918, 919, 1013, 1020], "n_samples_train": [289, 915, 916, 917, 918, 919], "n_samples_transform": [297, 857, 865], "n_samples_x": [620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790], "n_seed": 469, "n_selected_featur": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], "n_skips_": 1048, "n_skips_invalid_data_": 680, "n_skips_invalid_model_": 680, "n_skips_no_inliers_": 680, "n_spline": [43, 892], "n_split": [43, 52, 144, 150, 154, 186, 187, 191, 263, 271, 276, 278, 281, 286, 290, 294, 333, 339, 347, 354, 367, 420, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 836, 1047, 1049, 1059], "n_splits_": [809, 812, 813, 823], "n_steps_": [127, 457, 546, 547, 1054], "n_subpopulation_": 688, "n_subsampl": [688, 945], "n_subsets_of_featur": 603, "n_support_": [915, 916, 917, 918, 919, 1025, 1051], "n_support_vector": 46, "n_sv": [915, 916, 917, 918, 919, 1025, 1051], "n_svd_vec": [459, 461], "n_t": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "n_t_l": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "n_t_r": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "n_target": [398, 419, 490, 491, 492, 493, 533, 565, 620, 652, 655, 656, 659, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 674, 680, 681, 682, 683, 684, 690, 693, 694, 695, 696, 1011, 1053, 1055, 1057], "n_task": [212, 1006], "n_test": [47, 49, 69, 141, 276, 1041, 1044], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [644, 736, 791, 798], "n_tick": [815, 832, 837, 840], "n_top": 284, "n_top_word": 54, "n_topic": [389, 545, 1048], "n_tot": 708, "n_total_sampl": [336, 337], "n_train": [47, 49, 69, 141, 276, 1041, 1044], "n_train_po": 47, "n_transformed_featur": 873, "n_tree": 46, "n_trees_per_iter": 570, "n_trees_per_iteration_": [568, 569, 570, 571], "n_trials_": 680, "n_uncorrelated_featur": 282, "n_unequ": 708, "n_unique_categori": 323, "n_unique_label": [738, 739, 747, 792, 793, 796, 973], "n_unique_tick": [815, 837], "n_valu": [832, 840, 1049], "n_values_": 1049, "n_values_feature_j": 642, "n_x": [89, 594], "n_y": [89, 594, 1012, 1020], "n_z": 594, "na": [636, 637, 638, 639, 778, 787, 937, 939, 940, 1051, 1052, 1055, 1056, 1057, 1058], "nabarun": 1049, "nabla": 1014, "nabsolut": 224, "nacross": 290, "nada": 57, "nadeau": [276, 1049], "nadia": 1053, "nadim": 1054, "nadirhan": 1055, "nadya": 1047, "nagarajan": [654, 1006], "nagarjuna": [1048, 1049], "nagasaka": 1054, "naghshhnejad": [1051, 1052], "naipawat": [1055, 1056], "naiv": [2, 32, 64, 67, 157, 276, 278, 296, 358, 360, 379, 414, 423, 424, 445, 553, 848, 849, 850, 851, 852, 1004, 1005, 1013, 1018, 1032, 1036, 1041, 1042, 1043, 1044, 1049, 1051, 1054, 1056], "naive_bay": [2, 47, 61, 62, 64, 67, 157, 161, 277, 278, 358, 367, 373, 379, 423, 445, 578, 848, 849, 850, 851, 852, 874, 1004, 1011, 1012, 1042, 1043, 1045, 1046, 1047, 1048], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 373, "naivebayesna": 404, "naivelycalibratedlinearsvc": [62, 64], "najera": 1048, "najork": [735, 765, 1010], "naka": 1054, "nakamura": 1055, "nakano": [1048, 1049], "nalepa": 1048, "naman": 1058, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 80, 93, 97, 105, 107, 109, 115, 125, 130, 141, 142, 143, 144, 148, 151, 154, 159, 191, 192, 193, 207, 216, 218, 220, 222, 224, 225, 233, 235, 236, 238, 239, 245, 251, 252, 254, 255, 259, 263, 270, 271, 273, 274, 277, 279, 280, 283, 285, 286, 290, 294, 297, 305, 306, 312, 313, 319, 321, 323, 330, 331, 334, 340, 352, 358, 359, 360, 372, 373, 378, 379, 382, 384, 386, 388, 389, 391, 392, 398, 402, 407, 413, 416, 420, 423, 424, 426, 430, 432, 437, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 706, 707, 708, 709, 711, 717, 718, 720, 722, 741, 742, 751, 788, 789, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 821, 823, 827, 831, 832, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 938, 939, 940, 943, 948, 949, 950, 952, 965, 966, 967, 969, 972, 979, 993, 997, 998, 999, 1004, 1006, 1010, 1011, 1017, 1018, 1020, 1026, 1030, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "name_to_color": 323, "named_estim": [576, 577, 578, 579], "named_estimators_": [576, 577, 578, 579, 1049, 1051], "named_step": [107, 118, 171, 417, 602, 603, 606, 873, 874, 913, 914, 1006, 1048, 1050], "named_transform": [872, 1056], "named_transformers_": 472, "namedtupl": [2, 626, 1057], "namespac": 412, "namiya": 1048, "nan": [2, 109, 148, 154, 186, 187, 191, 236, 255, 257, 259, 271, 279, 323, 326, 331, 332, 333, 334, 371, 376, 393, 398, 423, 454, 476, 505, 564, 565, 566, 570, 571, 573, 602, 603, 606, 612, 615, 618, 636, 637, 638, 639, 644, 721, 722, 723, 725, 730, 731, 732, 733, 737, 738, 739, 778, 787, 792, 793, 794, 796, 809, 812, 813, 815, 823, 832, 835, 836, 837, 840, 882, 883, 887, 889, 890, 893, 894, 898, 901, 902, 904, 930, 937, 938, 939, 940, 984, 999, 1010, 1020, 1026, 1036, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060], "nan_euclidean": [637, 771, 787], "nan_euclidean_dist": [2, 326, 771, 1000, 1051], "nandana": [1047, 1048, 1049], "nandiyawar": 1060, "nanshan": 1054, "nanta": 1044, "nanxin": 1049, "nanyang": 381, "naois": [1056, 1058], "naoki": [1043, 1053], "naoya": [1047, 1048, 1049, 1050], "naozin555": 1054, "napa": 323, "narasimhan": 860, "nardelli": 1044, "narendra": [1052, 1058], "narendramukherje": 1052, "narendran": 1049, "narin": [1048, 1049], "narinek": [1048, 1049], "narr": [384, 398, 667, 913, 918, 1041, 1042], "narrai": 603, "narrow": [52, 141, 151, 317, 319, 389, 853, 854], "nartayxd": 1055, "nasa": [104, 358, 359, 381], "nasdaq": 51, "naser": 1051, "nasir": 1049, "nass": 1056, "nastegiano": 1055, "nat": [616, 617, 713, 764, 766, 1055], "natasha": 1051, "natchiappan": [1054, 1055], "nate": [1047, 1048, 1054], "nath": [1049, 1060], "nathan": [544, 1049, 1053, 1056, 1059], "nathaniel": [1048, 1049, 1051], "nathansquan": 1055, "nati": 1056, "nation": [50, 113, 310, 379, 860], "nativ": [43, 154, 158, 180, 186, 270, 372, 379, 398, 410, 423, 505, 570, 571, 845, 846, 1006, 1010, 1011, 1029, 1051, 1053], "native_result": 148, "natl": [698, 702, 1007], "natur": [43, 64, 67, 144, 151, 182, 191, 192, 196, 203, 218, 219, 235, 236, 242, 255, 261, 267, 285, 296, 358, 384, 386, 398, 421, 423, 424, 427, 452, 458, 465, 560, 599, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 701, 713, 750, 764, 766, 855, 856, 857, 859, 861, 863, 864, 865, 892, 955, 1006, 1007, 1009, 1010, 1013, 1015, 1020, 1024, 1029, 1041, 1049], "naul": [1046, 1047], "nav": 51, "navarret": [1049, 1050, 1051], "navarro": 1056, "navi": [69, 104, 112, 128, 132, 133, 158, 198, 221, 229, 241, 262, 263, 264, 267, 283, 285, 302, 309, 338, 365], "navig": [392, 1043], "navin": 909, "navistar": 51, "navkal": 1049, "navractil": 1010, "navratil2007": 1010, "nawazish": [1056, 1057], "naziya": 1059, "nb": [47, 131, 157, 367, 850, 1012], "nbclaim": 236, "nber": 49, "nbr": [861, 1013], "nbrown": 1059, "nbrs_": [697, 698], "nbsp": [151, 207], "nbviewer": [51, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366], "nbyte": [88, 249], "nca": [239, 305, 306, 307, 862, 1013], "nca_pip": 1013, "ncall": 390, "ncanip": 862, "nclass": 271, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 88, 92, 101, 124, 129, 134, 149, 192, 218, 219, 220, 226, 236, 238, 239, 248, 255, 270, 272, 278, 279, 287, 290, 297, 300, 313, 318, 319, 321, 322, 331, 353, 354, 359], "ncorrect": 276, "ncsu": [173, 381], "ncv": [459, 461], "nd": [1054, 1058], "ndarrai": [88, 93, 120, 218, 259, 274, 275, 276, 384, 385, 386, 390, 391, 412, 424, 427, 428, 431, 432, 434, 437, 438, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 506, 509, 510, 511, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 710, 711, 724, 727, 730, 731, 732, 733, 736, 737, 747, 754, 755, 757, 760, 762, 763, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 798, 799, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 936, 937, 938, 939, 944, 945, 954, 956, 957, 958, 959, 964, 971, 973, 974, 978, 981, 982, 984, 985, 986, 987, 990, 995, 996, 998, 1010, 1025, 1030, 1044, 1048, 1051, 1052, 1055, 1056, 1057, 1058], "ndata": 282, "ndataset": [233, 319], "ndbscan": 100, "ndcg": [735, 765, 1010, 1048], "ndcg_score": [2, 735, 1010, 1048, 1051, 1056, 1057], "ndenumer": 230, "ndepend": 192, "ndim": [655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 939, 940], "ndimag": [53, 81, 82, 89, 315], "ndingwal": 1048, "ndirangu": [1051, 1055], "ne": [1010, 1013], "neal": [1006, 1054], "near_uniqu": 324, "nearbi": [416, 1013], "nearer": [2, 857, 865, 1013], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 85, 86, 89, 93, 96, 101, 106, 111, 115, 124, 127, 155, 165, 179, 187, 200, 209, 230, 234, 240, 243, 254, 255, 269, 279, 301, 303, 306, 307, 314, 315, 322, 347, 352, 356, 376, 381, 393, 396, 398, 416, 422, 423, 427, 430, 440, 452, 454, 456, 458, 460, 465, 469, 470, 505, 511, 513, 616, 617, 636, 637, 639, 640, 644, 697, 698, 700, 701, 705, 801, 802, 809, 839, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 873, 874, 878, 893, 983, 1007, 1016, 1025, 1030, 1031, 1032, 1036, 1041, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1053], "nearest_neighbor": [79, 460, 700], "nearest_neighbor_algorithm": [855, 863, 864], "nearest_neighbors_algorithm": [856, 861], "nearestcentroid": [2, 308, 358, 1011, 1013, 1041, 1045, 1048, 1053, 1056], "nearestneighbor": [2, 297, 330, 402, 416, 427, 452, 454, 456, 469, 697, 698, 702, 855, 856, 857, 859, 863, 864, 865, 1013, 1041, 1045, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "nearli": [37, 62, 279, 379, 398, 773, 1010, 1013, 1022], "neat": 1041, "necess": [1007, 1013], "necessari": [46, 53, 142, 203, 218, 223, 261, 270, 276, 277, 283, 299, 351, 364, 371, 379, 382, 383, 384, 385, 386, 387, 388, 392, 396, 416, 418, 423, 460, 470, 496, 497, 499, 501, 502, 503, 504, 506, 543, 653, 654, 655, 661, 665, 666, 669, 670, 671, 672, 673, 674, 680, 682, 684, 685, 700, 704, 804, 876, 885, 896, 900, 906, 999, 1002, 1006, 1009, 1012, 1020, 1026, 1041, 1049], "necessarili": [43, 67, 106, 127, 191, 218, 226, 236, 250, 251, 262, 283, 319, 358, 359, 378, 410, 412, 414, 416, 423, 636, 861, 863, 864, 865, 1004, 1007, 1009, 1010], "need": [0, 30, 43, 48, 51, 68, 81, 83, 88, 90, 92, 115, 126, 136, 144, 148, 150, 151, 152, 154, 159, 173, 175, 180, 186, 187, 191, 205, 220, 235, 236, 239, 245, 248, 250, 252, 255, 256, 261, 262, 266, 267, 270, 274, 276, 278, 279, 281, 294, 296, 297, 299, 322, 326, 333, 339, 347, 358, 359, 367, 371, 372, 373, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 397, 398, 399, 401, 402, 407, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 432, 445, 449, 453, 457, 472, 473, 475, 512, 550, 560, 581, 591, 592, 597, 598, 599, 600, 636, 644, 647, 648, 649, 651, 658, 675, 677, 680, 685, 688, 701, 720, 729, 730, 731, 732, 733, 790, 794, 806, 807, 809, 812, 813, 823, 824, 825, 834, 842, 845, 853, 854, 870, 873, 876, 880, 885, 886, 890, 908, 915, 918, 930, 966, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1024, 1025, 1026, 1030, 1034, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "needl": [173, 381], "needs_proba": [751, 1050, 1058], "needs_threshold": [751, 1058], "neeraj": 1048, "neg": [2, 42, 43, 45, 61, 95, 109, 111, 118, 144, 150, 151, 156, 188, 190, 191, 197, 208, 214, 216, 218, 236, 265, 266, 270, 273, 276, 279, 283, 285, 286, 290, 297, 317, 321, 330, 334, 358, 390, 398, 399, 416, 420, 423, 424, 425, 427, 428, 439, 448, 452, 460, 473, 477, 490, 491, 492, 496, 540, 542, 544, 545, 546, 547, 549, 551, 553, 556, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 597, 600, 601, 604, 605, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 686, 687, 688, 689, 696, 707, 708, 713, 714, 721, 722, 724, 725, 727, 728, 730, 731, 732, 733, 736, 738, 739, 740, 744, 747, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 791, 792, 793, 794, 796, 799, 800, 802, 806, 807, 815, 832, 834, 839, 846, 847, 856, 859, 864, 871, 880, 889, 891, 892, 897, 901, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 940, 955, 957, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1024, 1025, 1031, 1035, 1036, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1060], "neg_": [815, 832, 1047], "neg_brier_scor": [1010, 1051], "neg_label": [270, 290, 880, 897], "neg_log_loss": [64, 270, 1010], "neg_lr": 279, "neg_lr_bas": 279, "neg_lr_base_std": 279, "neg_max_error": [1010, 1060], "neg_mean_absolute_error": [43, 159, 220, 1010], "neg_mean_absolute_percentage_error": [52, 148, 1010, 1018], "neg_mean_gamma_devi": 1010, "neg_mean_pinball_loss_05p_scor": 151, "neg_mean_pinball_loss_95p_scor": 151, "neg_mean_poisson_devi": 1010, "neg_mean_squared_error": [186, 187, 220, 251, 291, 333, 836, 1010, 1018, 1047], "neg_mean_squared_log_error": 1010, "neg_median_absolute_error": 1010, "neg_root_mean_squared_error": [43, 154, 323, 1010], "neg_root_mean_squared_log_error": 1010, "neg_root_mean_squared_log_error_scor": 1058, "negat": [398, 815, 832, 1010], "negate_scor": [251, 815, 832], "negative_class": 721, "negative_likelihood_ratio": [279, 721], "negative_linestyl": 245, "negative_loglik": 111, "negative_mahal_dist": 477, "negative_outlier_factor": 859, "negative_outlier_factor_": [255, 304, 859, 1016], "neglig": [191, 1013, 1044, 1058], "neigh": [790, 855, 856, 857, 859, 861, 863, 864, 865], "neigh_dist": [855, 856, 857, 859, 861, 863, 864, 865], "neigh_ind": [855, 856, 857, 859, 861, 863, 864, 865], "neighbor": [2, 51, 67, 74, 79, 82, 95, 101, 106, 154, 155, 157, 160, 165, 186, 187, 200, 239, 240, 242, 243, 245, 254, 255, 269, 279, 301, 302, 303, 304, 306, 307, 308, 310, 314, 328, 330, 331, 358, 376, 381, 393, 396, 398, 402, 416, 422, 423, 424, 427, 430, 440, 449, 452, 453, 454, 456, 458, 460, 465, 466, 469, 471, 505, 511, 513, 572, 579, 611, 616, 617, 636, 637, 640, 697, 698, 699, 700, 701, 702, 704, 705, 790, 809, 839, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 873, 874, 893, 909, 917, 983, 1011, 1016, 1030, 1031, 1032, 1035, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "neighbor_feat_idx": 636, "neighborhood": [2, 90, 115, 132, 165, 188, 238, 298, 299, 300, 308, 309, 381, 398, 416, 421, 427, 452, 458, 465, 511, 513, 524, 550, 558, 637, 640, 705, 839, 855, 856, 859, 861, 862, 863, 864, 865, 867, 873, 874, 893, 1007, 1016, 1031, 1032, 1036, 1050], "neighborhoodcomponentanalysi": 306, "neighborhoodcomponentsanalysi": [2, 239, 305, 306, 307, 1013, 1050, 1055, 1059], "neighbors_algorithm": [697, 698], "neighborsbas": [1053, 1056], "neighborsclassifi": [861, 863, 864, 865, 1041], "neighborsregressor": 1041, "neighbour": [454, 470, 701, 1015], "neighbourhood": [862, 1013], "neighbourhood_components_analysi": 862, "neil": 1053, "neill": 1053, "neither": [187, 191, 326, 358, 367, 396, 414, 445, 603, 637, 943, 1013, 1026], "nelder": 1006, "nell": [0, 405, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1053], "nelson": [0, 1047, 1048, 1053, 1059], "nemour": 51, "neo": 1049, "nep": 1051, "neptun": 1029, "neq": [416, 1010, 1012, 1020], "ness": [187, 236], "nest": [129, 138, 188, 207, 252, 268, 270, 271, 294, 333, 372, 390, 398, 402, 416, 420, 426, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 470, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 513, 528, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 814, 823, 831, 835, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1010, 1013, 1031, 1041, 1042, 1045, 1047, 1048, 1049, 1055], "nested_lin": 281, "nested_scor": 281, "nesterov": [313, 870, 871, 1014, 1057, 1058], "nesterovs_momentum": [313, 870, 871], "nestor": 1056, "net": [2, 25, 67, 188, 197, 203, 204, 207, 209, 212, 229, 289, 390, 420, 479, 480, 486, 510, 533, 566, 567, 568, 569, 573, 574, 575, 655, 656, 661, 666, 667, 668, 669, 670, 671, 672, 677, 685, 687, 690, 691, 693, 869, 921, 922, 923, 924, 999, 1010, 1015, 1024, 1031, 1032, 1034, 1036, 1041, 1046, 1050, 1051, 1053], "netbsd": 1041, "neto": [599, 739, 1059], "nettei": 1054, "network": [34, 45, 255, 314, 371, 372, 373, 378, 379, 398, 399, 410, 416, 421, 423, 428, 505, 542, 544, 576, 577, 705, 750, 870, 871, 1006, 1008, 1010, 1024, 1026, 1029, 1032, 1035, 1036, 1041, 1055, 1059], "networkx": [55, 393], "neural": [34, 44, 45, 67, 276, 314, 398, 410, 420, 421, 423, 428, 542, 544, 547, 549, 556, 576, 577, 648, 654, 705, 750, 806, 862, 869, 870, 871, 879, 1002, 1006, 1007, 1008, 1010, 1013, 1016, 1020, 1024, 1026, 1029, 1032, 1034, 1035, 1036, 1041, 1053], "neural_network": [2, 67, 188, 192, 256, 311, 312, 313, 314, 315, 373, 396, 869, 870, 871, 1011, 1014, 1031, 1043, 1058], "neuro": 1029, "neurodebian": 0, "neuroimag": [1028, 1034], "neuron": [870, 871, 1008, 1014], "neutral": 725, "nevalu": 159, "never": [144, 253, 334, 367, 384, 393, 396, 410, 415, 416, 417, 419, 420, 458, 465, 532, 564, 565, 566, 573, 873, 874, 998, 1002, 1020, 1051, 1054], "nevertheless": [43, 194, 423], "new": [2, 43, 46, 47, 49, 85, 91, 93, 95, 104, 105, 120, 131, 138, 140, 142, 143, 144, 149, 151, 154, 158, 159, 170, 173, 175, 181, 187, 193, 194, 218, 224, 232, 245, 252, 259, 270, 275, 278, 283, 296, 301, 303, 323, 327, 330, 333, 334, 337, 340, 346, 351, 367, 372, 373, 378, 379, 381, 382, 383, 386, 387, 388, 390, 392, 393, 397, 398, 399, 402, 410, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 441, 445, 446, 448, 450, 451, 453, 455, 456, 457, 460, 470, 471, 472, 480, 490, 491, 492, 513, 517, 518, 543, 550, 553, 564, 565, 566, 567, 572, 573, 574, 575, 590, 611, 639, 640, 644, 649, 650, 651, 654, 655, 661, 697, 698, 699, 706, 707, 709, 710, 711, 797, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 843, 859, 882, 883, 888, 889, 890, 892, 893, 894, 901, 902, 910, 928, 937, 942, 979, 984, 999, 1000, 1002, 1006, 1010, 1011, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1025, 1030, 1034, 1036, 1039, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "new_data": [301, 386], "new_valu": [576, 577, 578, 579], "newaxi": [51, 53, 57, 61, 77, 115, 133, 139, 176, 200, 208, 214, 219, 220, 221, 223, 224, 235, 248, 250, 291, 302, 309, 364, 365, 413, 545, 1006], "newei": 1049, "newer": [175, 383, 402, 421], "newgroups20": 233, "newli": [382, 397, 423, 471, 1017, 1047, 1048, 1056], "newsgroup": [2, 46, 54, 57, 249, 277, 340, 359, 360, 377, 413, 424, 496, 497, 1036], "newsgroups_test": 379, "newsgroups_train": [379, 496], "newsgroups_vector": 497, "newsl": [894, 1020], "newslett": 378, "newswir": 379, "newton": [218, 236, 315, 619, 657, 667, 668, 678, 689, 870, 871, 1006, 1045, 1046, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "newton_cg": 1051, "next": [46, 62, 95, 113, 147, 148, 152, 162, 182, 190, 194, 211, 215, 218, 246, 252, 254, 258, 259, 263, 271, 282, 296, 322, 323, 324, 328, 337, 358, 362, 366, 367, 382, 384, 386, 388, 404, 410, 413, 416, 417, 420, 423, 517, 518, 619, 643, 701, 707, 709, 711, 790, 806, 807, 839, 975, 999, 1003, 1009, 1010, 1020, 1034, 1038, 1041, 1054, 1055], "nezar": 1051, "nff": 708, "nfit": 337, "nfkd": [597, 598, 600, 1051], "nfor": 253, "nfrom": 180, "nft": 708, "ng": [416, 421, 700, 859, 1014, 1016, 1052], "ngiam": 1014, "ngo": 1053, "ngram_rang": [277, 340, 424, 597, 598, 600], "ngram_vector": 424, "ngroup": 271, "ngshya": 1052, "nguyen": [1051, 1052, 1055, 1056], "nguy\u1ec5n": 1056, "ni": [1047, 1052], "nic": 1054, "nice": [43, 102, 219, 252, 317, 371, 421], "nicer": 640, "nichol": 1045, "nichola": [1049, 1050, 1052], "nicholson": [1047, 1048, 1049], "nick": [173, 381, 1041, 1047, 1048, 1049, 1050], "nicki": 1055, "nickledav": 1047, "nicknam": 379, "nico": [1047, 1054], "nicol": 1048, "nicola": [0, 173, 405, 667, 1006, 1023, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "nicolashug": 1050, "nicolasservel": 1052, "nicolau": 1049, "nicula": [0, 124, 405, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "niculescu": [62, 64, 414, 445, 447], "nidhin": 1051, "niederb\u00fchl": 1049, "niederhut": [1049, 1051], "nielsen": [752, 1049], "nielsenmarkus11": [1048, 1049], "nigam": [848, 1012], "nigel": 1054, "night": 52, "nightli": [0, 372, 387, 388], "nightwalkx": 1057, "nihal": 1056, "nihar": 1049, "niket": 1055, "nikhil": 1055, "nikita": [1048, 1049, 1051, 1054, 1055, 1056], "nikla": [1051, 1052], "nikolai": [1044, 1045, 1046, 1047, 1049, 1050, 1055, 1057], "nil": 1053, "nilearn": 1029, "nilesh": 1049, "nilotp": [644, 646], "nima": 1056, "nima10khodaveisi": 1056, "ninertia": 99, "ningchi": 1047, "ninh": 196, "ninja": [382, 1034], "nip": [131, 381, 524, 550, 575, 650, 1010], "nipal": [419, 491, 492], "nipy_spectr": [51, 74, 81, 82, 86, 87, 95, 96, 130], "nirvan": [1049, 1053], "nishan": 1051, "nishihara": 1053, "nishu": 1057, "nist": [381, 1010], "nistir": 381, "nit": 384, "nithish": 1059, "nitinramvelraj": 1056, "nitish": 1048, "nitya": 1051, "niuk": 1057, "niyogi": 1007, "nizam": 1049, "nizhibitski": 1042, "nk": 705, "nkish": 1052, "nkmean": 79, "nl": [52, 390], "nl1_ratio": 209, "nlasso": 203, "nlathia": 1047, "nlearn": 313, "nlog": 181, "nlogn": 701, "nlp": [379, 421, 424, 848, 852, 1008, 1034], "nls_max_it": 1046, "nltk": [424, 1028, 1029], "nm": 371, "nmcd": 113, "nmd": 241, "nmean": 128, "nmf": [2, 11, 54, 106, 390, 424, 544, 547, 553, 556, 1035, 1036, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "nmf_estim": 124, "nmi": [72, 416, 726, 745, 746, 766], "nmixtur": 79, "nmle": 113, "nmse": [44, 291], "nmslib": 297, "nmslib_": 297, "nmslibtransform": 297, "nn": [254, 424, 704], "nn_candid": 288, "nn_compon": [249, 250], "nn_sampl": [249, 288], "nndsvd": [421, 547, 549, 556, 1050, 1053], "nndsvda": [54, 421, 547, 549, 556, 1050, 1053], "nndsvdar": [421, 547, 549, 556, 1050], "nneq": 708, "nnl": [213, 666], "nnlnr": [1056, 1057], "nnmf": [424, 1035, 1036, 1041], "nntp": [358, 379], "nnz": [204, 359, 379, 708], "no_chang": 910, "no_interact": [570, 571, 1056], "no_mathjax": 384, "no_structur": [79, 97], "no_valid": [932, 998], "no_weight": 231, "no_weights_handl": 231, "noa": [1052, 1058], "noah": 1006, "noc": 51, "noced": 667, "nodar": 1054, "node": [2, 51, 76, 148, 152, 203, 326, 332, 333, 362, 366, 392, 393, 416, 418, 421, 423, 449, 450, 453, 471, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 659, 663, 665, 691, 692, 701, 853, 854, 921, 922, 923, 924, 925, 927, 963, 1013, 1015, 1016, 1017, 1026, 1044, 1045, 1046, 1047, 1048, 1050, 1053, 1054, 1055, 1056, 1058, 1060], "node_count": [326, 362, 366, 921, 922, 923, 924], "node_depth": 366, "node_id": [366, 925, 927], "node_idx": 366, "node_ind": 366, "node_index": 366, "node_position_model": 51, "noel": [0, 406, 1041, 1042, 1043, 1044, 1045, 1053], "noelano": 1053, "nof": 155, "nogil": 385, "noinfo": 255, "noir": 323, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 84, 87, 89, 90, 96, 97, 102, 109, 118, 124, 125, 127, 129, 131, 139, 141, 151, 156, 157, 174, 175, 176, 180, 184, 188, 198, 200, 201, 203, 207, 208, 213, 216, 217, 220, 221, 222, 223, 235, 241, 243, 245, 247, 248, 251, 276, 284, 289, 291, 309, 312, 313, 319, 324, 327, 333, 353, 364, 365, 367, 380, 386, 389, 414, 416, 421, 423, 425, 426, 427, 452, 454, 460, 520, 522, 523, 524, 525, 526, 527, 531, 533, 534, 539, 541, 543, 550, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 630, 631, 633, 634, 653, 654, 658, 659, 660, 662, 663, 664, 665, 672, 673, 674, 680, 688, 694, 695, 701, 890, 902, 908, 931, 1003, 1005, 1006, 1007, 1010, 1013, 1023, 1031, 1042, 1047, 1052, 1054, 1055], "noise_coef": 89, "noise_kernel": 180, "noise_level": [175, 180, 181, 621, 634], "noise_level_bound": [180, 181, 634], "noise_level_grid": 181, "noise_std": 182, "noise_vari": [205, 541, 665, 1006, 1055], "noise_variance_": [124, 205, 541, 543, 550, 665, 1048, 1055], "noise_variance_init": 541, "noiseless": [127, 1008], "noisi": [44, 69, 84, 90, 97, 125, 138, 169, 175, 181, 203, 217, 220, 241, 248, 267, 277, 283, 285, 286, 322, 364, 365, 367, 416, 424, 426, 427, 452, 454, 458, 530, 533, 957, 1005, 1007, 1013, 1025], "noisier": 1007, "noisili": 192, "noisy_circl": [79, 97], "noisy_moon": [79, 97], "noiz": 117, "nolan": 1058, "noll": [218, 236], "nomenclatur": [1006, 1047], "nomin": [192, 378, 398, 399, 423, 424, 590, 591, 725, 1020, 1030], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 84, 92, 97, 105, 109, 113, 115, 125, 126, 127, 129, 140, 148, 156, 157, 159, 169, 170, 172, 179, 181, 187, 188, 190, 191, 192, 193, 194, 197, 198, 203, 204, 206, 208, 211, 212, 214, 216, 217, 219, 220, 224, 232, 233, 234, 236, 241, 242, 246, 247, 248, 249, 251, 255, 261, 263, 267, 268, 269, 270, 271, 276, 285, 294, 297, 301, 303, 315, 317, 319, 321, 322, 327, 328, 329, 330, 332, 333, 340, 342, 344, 349, 350, 351, 354, 355, 358, 359, 360, 366, 367, 371, 372, 376, 379, 380, 384, 385, 386, 389, 390, 392, 393, 396, 398, 399, 410, 414, 416, 417, 420, 422, 423, 424, 425, 426, 428, 445, 449, 453, 454, 458, 460, 464, 470, 471, 472, 473, 475, 476, 496, 505, 506, 512, 513, 517, 535, 541, 544, 545, 547, 549, 553, 556, 558, 560, 561, 562, 566, 567, 568, 569, 570, 571, 573, 574, 575, 581, 597, 598, 600, 601, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 640, 644, 647, 652, 659, 661, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 681, 685, 686, 687, 694, 695, 696, 697, 698, 699, 700, 701, 703, 707, 708, 711, 715, 716, 721, 724, 726, 728, 729, 735, 736, 737, 744, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 787, 791, 794, 797, 798, 799, 800, 803, 806, 807, 809, 810, 814, 816, 817, 818, 819, 821, 827, 835, 839, 842, 861, 863, 864, 865, 868, 873, 874, 876, 877, 878, 881, 885, 886, 887, 888, 889, 890, 892, 893, 900, 901, 902, 903, 904, 906, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 938, 939, 940, 955, 957, 961, 964, 972, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1031, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "non_determinist": [386, 932, 1055], "non_neg": [591, 1048], "non_negative_factor": [2, 1050, 1052, 1053, 1054, 1058], "non_nest": 281, "non_nested_scor": 281, "non_nested_scores_lin": 281, "non_noisy_label": 332, "non_outliers_mask": 317, "non_zero": [46, 51], "nonblasdotwarn": 1053, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 87, 89, 90, 91, 97, 126, 129, 133, 142, 147, 148, 150, 153, 154, 166, 173, 176, 182, 183, 194, 198, 218, 219, 226, 229, 236, 238, 251, 252, 253, 255, 269, 271, 276, 277, 288, 302, 304, 308, 321, 324, 328, 329, 337, 340, 345, 347, 348, 351, 352, 353, 358, 359, 379, 381, 384, 386, 391, 393, 398, 407, 410, 416, 420, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 716, 717, 718, 720, 721, 722, 723, 725, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 743, 744, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 932, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 949, 951, 956, 957, 960, 961, 963, 964, 968, 969, 972, 975, 978, 980, 983, 984, 990, 993, 994, 996, 998, 999, 1006, 1010, 1020, 1023, 1026, 1036, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "nonecheck": 385, "nonetheless": [398, 1010], "nonexist": 641, "nonflavanoid": 381, "nonlinear": [291, 329, 653, 697, 698, 702, 705, 879, 1006, 1007, 1015, 1020], "nonmetr": [699, 703, 1007], "nonneg": [416, 421, 461, 547, 549, 556, 890], "nonner": 1052, "nono": 404, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 404, "nonoisomapisomapspectralembeddingspectr": 404, "nonojustlookingjust": 404, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 404, "nonolinearsvclinear": 404, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 404, "nonopredict": 404, "nonopredictingstructurepredict": 404, "nonosvcsvcensembleclassifiersensembl": 404, "nonosvr": 404, "nonotoughlucktough": 404, "nonoverlap": 381, "nonparametr": [425, 426, 616, 617], "nonzero": [55, 57, 133, 217, 249, 280, 360, 413, 427, 452, 532, 533, 540, 546, 551, 557, 597, 600, 694, 695, 708, 855, 856, 859, 861, 863, 864, 1010], "nonzero_coef": 1006, "noptic": 100, "noptimum": 181, "noqa": [80, 102, 120, 130, 151, 173, 186, 187, 192, 215, 238, 240, 287, 288, 328, 358, 388, 588, 589, 636, 812, 813, 999, 1050], "nor": [151, 279, 358, 367, 371, 389, 396, 414, 424, 445, 454, 603, 943, 1014, 1026, 1052], "norbert": [0, 374, 1043, 1053, 1054, 1055], "nordbi": 1058, "nore\u00f1a": 1054, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 89, 127, 178, 181, 198, 203, 204, 209, 241, 261, 262, 263, 265, 267, 273, 277, 302, 317, 347, 359, 390, 393, 398, 416, 424, 425, 450, 451, 455, 467, 468, 472, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 497, 540, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 598, 599, 600, 606, 652, 655, 656, 661, 662, 666, 667, 668, 669, 670, 671, 672, 673, 681, 683, 685, 687, 690, 693, 694, 695, 699, 701, 702, 703, 779, 850, 885, 900, 913, 915, 918, 991, 992, 1003, 1006, 1008, 1010, 1020, 1024, 1044, 1046, 1048, 1052], "norm1": 472, "norm2": 472, "norm_diag": 536, "norm_laplacian": 704, "norm_ord": [606, 1048], "norm_y_weight": 1053, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 81, 92, 96, 97, 101, 107, 109, 111, 112, 113, 117, 118, 125, 138, 139, 141, 144, 150, 151, 154, 155, 156, 168, 178, 181, 182, 187, 188, 190, 191, 197, 198, 199, 200, 201, 203, 208, 211, 213, 216, 220, 221, 222, 224, 232, 236, 241, 255, 261, 266, 267, 269, 270, 273, 276, 282, 302, 303, 306, 316, 318, 322, 327, 330, 333, 334, 339, 347, 359, 360, 367, 376, 379, 380, 381, 384, 389, 393, 397, 398, 412, 413, 414, 416, 417, 419, 422, 423, 424, 428, 448, 457, 459, 460, 461, 470, 472, 473, 483, 490, 491, 492, 497, 505, 521, 524, 528, 535, 536, 542, 545, 550, 551, 553, 557, 558, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 588, 589, 591, 597, 598, 599, 600, 620, 634, 636, 648, 667, 668, 678, 681, 685, 689, 696, 700, 704, 706, 712, 713, 715, 727, 733, 735, 743, 745, 750, 754, 758, 759, 761, 764, 765, 766, 770, 779, 803, 804, 805, 812, 813, 839, 841, 850, 852, 858, 859, 862, 873, 874, 877, 878, 881, 883, 886, 887, 888, 889, 890, 891, 893, 898, 899, 901, 902, 903, 904, 908, 909, 921, 922, 923, 924, 956, 957, 961, 985, 986, 991, 992, 1002, 1004, 1006, 1007, 1008, 1009, 1012, 1016, 1021, 1023, 1025, 1026, 1031, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "normalis": [191, 620, 797], "normalization_": [648, 1002], "normalize_compon": [1049, 1051], "normalize_i": [180, 184, 426, 620, 1055], "normalized_discounted_cumulative_gain": 765, "normalized_mutual_info_scor": [2, 72, 416, 745, 764, 804, 1010, 1049, 1055], "normalized_stress": [238, 699, 703, 1007, 1056], "normalized_weight": 200, "norms_squar": 695, "north": [381, 416], "northern": 323, "northrop": 51, "northwestern": 667, "norvan": 1051, "nose": [381, 1044, 1048], "nosetest": 1043, "not_memb": 191, "notabl": [252, 317, 378, 398, 415, 505, 737, 886, 1007, 1009, 1013, 1045, 1048, 1055], "notarstefano": [1049, 1050], "notat": [155, 398, 417, 421, 424, 599, 721, 1006, 1010, 1050, 1057], "notch": 1034, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 88, 101, 105, 106, 113, 115, 117, 118, 122, 127, 141, 142, 144, 147, 151, 152, 156, 173, 175, 182, 186, 190, 191, 192, 193, 194, 196, 205, 207, 211, 218, 219, 220, 222, 226, 232, 234, 236, 238, 239, 240, 242, 245, 246, 248, 250, 251, 252, 253, 255, 262, 270, 271, 272, 276, 279, 282, 284, 290, 296, 297, 299, 303, 304, 313, 317, 318, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 341, 347, 351, 358, 366, 371, 372, 378, 381, 382, 384, 385, 386, 388, 390, 391, 396, 397, 398, 402, 407, 410, 411, 414, 416, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 441, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 495, 498, 505, 507, 518, 524, 528, 536, 539, 542, 543, 547, 548, 549, 550, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 606, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 641, 642, 644, 645, 647, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 708, 709, 716, 717, 722, 724, 729, 730, 731, 732, 733, 737, 738, 739, 741, 743, 747, 750, 755, 763, 764, 767, 772, 773, 777, 779, 783, 787, 791, 792, 793, 794, 796, 797, 798, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 926, 929, 930, 932, 935, 945, 947, 956, 957, 969, 972, 984, 993, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1036, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 385, 386, 390, 417, 476, 911, 1026, 1028, 1029, 1030, 1052, 1055], "notes_neighbor": 1041, "notfittederror": [2, 136, 398, 862, 993, 1045, 1047, 1050, 1051, 1057, 1058], "noth": [57, 104, 334, 358, 359, 389, 551, 723, 876, 885, 940, 1020], "nothman": [0, 399, 405, 424, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "notic": [46, 52, 62, 63, 70, 88, 92, 113, 141, 143, 144, 151, 154, 172, 198, 203, 245, 258, 273, 274, 276, 277, 279, 285, 286, 297, 322, 351, 358, 359, 360, 367, 386, 389, 399, 415, 420, 423, 505, 550, 572, 999, 1009, 1010, 1016, 1038, 1054], "notifi": [2, 581, 582, 583, 1039, 1051], "notimplementederror": [562, 563, 900, 1048, 1058], "notin": 416, "notion": [285, 351, 359, 373, 396, 416, 421, 423, 1006, 1010], "notmatthancock": [1049, 1051], "noto": 1054, "notplancha": 1059, "noun": 398, "nouri": [371, 1042, 1044], "novak": 1044, "novarti": 51, "novaya": [1051, 1054], "novel": [232, 303, 346, 367, 414, 999], "novelti": [188, 232, 245, 255, 298, 304, 346, 859, 1031, 1032, 1035, 1036, 1041, 1049], "novemb": [173, 218, 236, 381, 388, 1046, 1047, 1049], "novic": 1043, "now": [43, 44, 46, 52, 55, 58, 88, 92, 105, 118, 129, 138, 139, 143, 145, 147, 148, 151, 152, 159, 162, 173, 175, 180, 181, 182, 187, 190, 191, 192, 193, 196, 198, 200, 204, 205, 207, 219, 220, 222, 242, 250, 252, 270, 272, 276, 279, 287, 288, 290, 294, 300, 322, 327, 328, 330, 331, 332, 333, 334, 338, 347, 358, 359, 360, 367, 371, 373, 379, 384, 385, 386, 390, 396, 397, 398, 402, 413, 416, 420, 421, 423, 424, 428, 436, 502, 517, 518, 521, 545, 558, 588, 589, 591, 636, 639, 658, 662, 667, 672, 693, 735, 765, 806, 807, 812, 813, 845, 860, 872, 873, 984, 1000, 1006, 1010, 1016, 1019, 1020, 1025, 1026, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "nowadai": 384, "nozawa": [1056, 1057], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 122, 125, 126, 127, 128, 130, 131, 133, 134, 139, 140, 141, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 166, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 296, 297, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 315, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 366, 367, 371, 378, 379, 384, 386, 389, 390, 393, 396, 398, 407, 413, 416, 417, 420, 421, 422, 423, 424, 426, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 493, 502, 505, 506, 509, 513, 517, 518, 519, 523, 524, 525, 526, 527, 528, 529, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 570, 572, 573, 574, 575, 578, 579, 590, 591, 594, 595, 597, 598, 602, 603, 606, 610, 613, 615, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 645, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 696, 700, 701, 703, 704, 708, 711, 712, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 752, 753, 757, 762, 763, 764, 765, 772, 778, 782, 787, 790, 791, 792, 793, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 858, 859, 860, 861, 863, 864, 865, 869, 870, 877, 878, 880, 881, 886, 887, 888, 889, 890, 892, 893, 894, 901, 902, 905, 906, 907, 908, 909, 910, 913, 915, 916, 918, 919, 921, 922, 923, 924, 930, 935, 936, 937, 938, 939, 940, 942, 944, 945, 955, 956, 957, 963, 964, 971, 972, 974, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 999, 1000, 1005, 1006, 1008, 1010, 1011, 1013, 1014, 1016, 1020, 1021, 1022, 1024, 1025, 1026, 1042, 1044, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "npach": [1056, 1057], "npo": 241, "npolynomi": 43, "nprior": 261, "npropag": 79, "nqy18": 424, "nreceiv": 285, "nrow": [43, 44, 66, 68, 70, 92, 101, 107, 124, 154, 184, 192, 218, 220, 226, 236, 238, 239, 242, 255, 270, 278, 279, 297, 319, 321, 322, 331, 337, 353, 354], "nsampl": [386, 806, 807], "nswdemand": 154, "nswprice": 154, "nt": 55, "nt_uri": 55, "ntest": 306, "ntf": 708, "nth": [283, 716, 1010], "nthe": [192, 274, 366], "ntime": [50, 287], "nto": [224, 285], "ntol": 173, "ntrain": 85, "ntree": 43, "ntrue": [45, 336, 337], "ntt": 708, "ntu": [196, 378, 495, 517, 518, 667], "nu": [2, 46, 48, 50, 184, 232, 245, 346, 371, 423, 426, 628, 686, 915, 916, 917, 1016, 1024, 1025, 1052, 1056], "nuanc": 398, "nuc": 294, "nuclear": [173, 381], "nuclei": [173, 381], "nudge_dataset": 315, "nuff": 1048, "nugmanov": [1049, 1050], "nuisanc": 426, "nukariya": [1053, 1054], "null": [79, 105, 191, 192, 193, 270, 276, 282, 416, 420, 505, 657, 678, 689, 713, 740, 766, 804, 838, 1006, 1007, 1010, 1025, 1051], "null_count": 52, "nullabl": [636, 637, 638, 639, 1052, 1056], "nullformatt": [238, 240, 243, 297], "nullloc": 302, "num": [43, 51, 105, 173, 175, 180, 181, 182, 192, 193, 220, 283, 284, 330, 332, 333, 423, 505, 641], "num_col": 259, "num_cor": 390, "num_depend": 270, "num_featur": [1008, 1056], "num_linear_processor": 159, "num_missing_cel": 154, "num_pip": 259, "num_preprocess": 472, "num_proc": [247, 327], "num_sampl": [809, 823, 1056], "num_selector": 159, "num_sent": 104, "num_thread": 297, "num_tree_processor": 159, "num_trial": 281, "numba": [297, 1030], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 92, 96, 97, 98, 102, 104, 105, 106, 107, 109, 115, 117, 118, 121, 122, 124, 126, 128, 129, 131, 138, 139, 141, 144, 146, 147, 149, 150, 151, 152, 155, 159, 161, 169, 170, 171, 173, 183, 184, 187, 188, 191, 192, 196, 203, 207, 217, 218, 219, 220, 225, 226, 232, 233, 234, 235, 236, 238, 245, 249, 253, 255, 256, 261, 262, 264, 266, 267, 269, 270, 271, 274, 275, 276, 277, 278, 281, 282, 283, 284, 285, 294, 297, 299, 303, 304, 317, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 334, 340, 347, 352, 354, 359, 360, 362, 366, 367, 372, 373, 376, 378, 379, 380, 381, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 590, 591, 592, 593, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 714, 716, 721, 722, 723, 725, 727, 729, 733, 737, 738, 739, 740, 743, 744, 747, 749, 761, 764, 783, 787, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 939, 940, 943, 956, 957, 960, 961, 978, 980, 983, 984, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 101, 105, 109, 146, 148, 159, 173, 180, 183, 192, 193, 207, 218, 236, 255, 257, 259, 283, 307, 323, 329, 333, 360, 378, 379, 381, 387, 389, 390, 396, 397, 398, 412, 416, 418, 423, 424, 425, 426, 428, 429, 448, 451, 455, 467, 479, 480, 483, 486, 497, 498, 499, 505, 509, 510, 511, 513, 514, 519, 540, 542, 544, 549, 550, 556, 570, 571, 576, 590, 599, 620, 626, 629, 636, 639, 641, 642, 655, 661, 663, 681, 696, 699, 703, 723, 787, 797, 803, 809, 812, 813, 815, 823, 832, 835, 836, 837, 840, 848, 849, 850, 851, 852, 870, 871, 876, 881, 886, 887, 894, 925, 926, 927, 939, 940, 956, 957, 999, 1000, 1006, 1007, 1011, 1018, 1020, 1021, 1026, 1033, 1034, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "numeric_featur": [105, 330], "numeric_onli": 192, "numeric_preprocessor": 257, "numeric_transform": [105, 330], "numerical_column": [191, 193, 475], "numerical_columns_subset": 148, "numerical_featur": [192, 323], "numerical_pip": 193, "numerical_transform": 105, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 139, 140, 141, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 166, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 243, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 296, 297, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 315, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 366, 367, 371, 377, 378, 379, 382, 384, 385, 386, 387, 390, 392, 393, 396, 397, 398, 402, 407, 409, 410, 412, 413, 416, 417, 420, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 493, 498, 502, 503, 505, 512, 515, 517, 518, 530, 536, 540, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 578, 579, 590, 591, 594, 595, 597, 598, 600, 610, 613, 627, 636, 637, 638, 639, 640, 641, 642, 652, 655, 656, 658, 661, 662, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 681, 685, 686, 687, 693, 696, 697, 700, 701, 702, 703, 704, 708, 711, 712, 715, 716, 718, 721, 723, 735, 736, 738, 739, 741, 743, 744, 747, 748, 763, 765, 782, 788, 790, 791, 792, 793, 796, 797, 798, 803, 805, 806, 807, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 915, 916, 918, 919, 921, 935, 936, 937, 938, 942, 944, 954, 955, 956, 957, 961, 963, 964, 971, 972, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 996, 999, 1000, 1005, 1006, 1008, 1010, 1011, 1013, 1016, 1020, 1022, 1025, 1026, 1028, 1030, 1041, 1044, 1045, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "numpydoc": [384, 398, 402, 409], "nune": 1042, "nuniformli": 155, "nuniqu": 323, "nurseit": 1058, "nusvc": [2, 371, 445, 916, 1011, 1025, 1041, 1042, 1043, 1046, 1049, 1051, 1052, 1053, 1055], "nusvr": [2, 46, 371, 919, 1025, 1043, 1049, 1051, 1052, 1053, 1055, 1056], "nutshel": 1008, "nv": 51, "nvidia": [0, 396], "nvirginica": 285, "nwanna": 1056, "nweight": 161, "nwith": [72, 92, 96, 172, 359], "nx": [50, 310, 379, 507], "nxorabl": 1051, "ny": [50, 52, 275, 310, 379, 381, 507, 1000, 1022], "nyc": [1028, 1034], "nymark": 1056, "nystroem": [2, 43, 186, 232, 245, 250, 376, 649, 650, 651, 686, 879, 918, 919, 1036, 1042, 1048, 1051, 1053, 1054, 1055], "nystroem_approx_svm": 250, "nystroem_scor": 250, "nystroem_tim": 250, "nystrom": [888, 1050, 1051], "nystr\u00f6m": [43, 1002], "nyu": [0, 862], "nz": 539, "nzw": 1049, "n\u00e1jera": [1045, 1046, 1047, 1048], "n\u00e1pole": 1054, "o": [0, 55, 57, 64, 66, 73, 84, 90, 95, 96, 98, 99, 115, 117, 121, 126, 156, 173, 183, 205, 211, 216, 218, 233, 251, 261, 270, 276, 278, 285, 317, 318, 322, 327, 330, 333, 340, 351, 362, 371, 379, 381, 384, 392, 402, 416, 418, 421, 423, 427, 429, 452, 455, 456, 458, 481, 483, 508, 543, 613, 636, 675, 676, 701, 841, 869, 884, 925, 978, 1002, 1004, 1006, 1007, 1010, 1011, 1013, 1014, 1024, 1025, 1026, 1041, 1044, 1047, 1049, 1050, 1053, 1054, 1056, 1057, 1058], "oa": [2, 49, 65, 70, 110, 114, 115, 131, 153, 188, 306, 308, 418, 477, 478, 481, 482, 484, 485, 521, 558, 809, 1004, 1031], "oa_ms": 112, "oa_shrinkag": 112, "oak": 323, "oarc": 1006, "ob2019": 1010, "obaja": 1045, "obatin": 322, "obei": [398, 1008], "obj": [252, 410, 576, 577, 947, 966, 968, 969, 970, 975], "obj_func": [619, 620], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 85, 97, 101, 104, 105, 127, 136, 154, 159, 164, 172, 180, 188, 192, 203, 214, 218, 234, 236, 244, 252, 256, 258, 259, 270, 274, 283, 285, 286, 288, 310, 323, 329, 330, 332, 333, 336, 359, 360, 367, 377, 378, 379, 384, 385, 387, 389, 390, 391, 393, 397, 398, 399, 407, 410, 416, 417, 418, 421, 424, 425, 426, 430, 432, 437, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 711, 720, 727, 741, 742, 751, 767, 768, 790, 791, 798, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 928, 939, 940, 941, 942, 943, 946, 947, 951, 953, 962, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 994, 995, 997, 1006, 1007, 1008, 1009, 1013, 1016, 1017, 1020, 1023, 1024, 1025, 1029, 1030, 1031, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "object_nam": [252, 966, 969], "obozinski": 421, "obscur": [1017, 1057], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 88, 97, 105, 111, 113, 114, 115, 125, 126, 129, 131, 138, 141, 142, 144, 145, 151, 154, 155, 158, 173, 175, 178, 180, 181, 182, 184, 191, 192, 193, 198, 199, 213, 214, 216, 218, 219, 220, 222, 232, 236, 242, 243, 248, 249, 255, 270, 272, 276, 278, 279, 283, 290, 297, 300, 303, 310, 322, 332, 334, 339, 346, 347, 351, 352, 358, 359, 360, 364, 365, 379, 381, 398, 402, 414, 416, 418, 419, 420, 421, 422, 425, 426, 449, 451, 453, 454, 455, 457, 467, 468, 477, 478, 479, 480, 481, 482, 483, 484, 533, 541, 560, 561, 572, 619, 620, 655, 661, 666, 710, 725, 727, 767, 830, 851, 859, 892, 894, 1006, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1033, 1042, 1054, 1055, 1056, 1057], "observatori": 180, "obsolet": [1041, 1057], "obstruct": 1048, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 83, 90, 92, 93, 105, 108, 109, 129, 131, 138, 148, 151, 152, 157, 164, 173, 177, 179, 191, 192, 203, 218, 220, 222, 232, 242, 255, 261, 262, 263, 270, 272, 276, 277, 278, 282, 285, 300, 322, 329, 345, 351, 359, 360, 366, 367, 379, 381, 386, 398, 410, 414, 415, 416, 418, 419, 421, 423, 424, 425, 426, 445, 450, 477, 505, 541, 542, 564, 565, 566, 567, 568, 569, 572, 573, 574, 602, 615, 623, 654, 668, 670, 675, 677, 681, 683, 685, 686, 696, 717, 721, 735, 748, 765, 802, 815, 832, 838, 841, 842, 845, 859, 870, 890, 902, 915, 918, 921, 922, 957, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1020, 1024, 1025, 1047, 1049, 1052, 1054, 1055, 1056, 1057, 1058], "obviat": 1002, "obviou": [191, 351, 367, 371, 384, 413, 421], "obvious": [187, 371], "oc": 1056, "occas": 384, "occasion": [399, 736, 1050], "occup": [191, 317, 333, 505], "occupation_cler": 191, "occupation_manag": 191, "occupation_oth": 191, "occupation_profession": 191, "occupation_sal": 191, "occupation_servic": 191, "occupi": [416, 1010], "occur": [54, 104, 149, 218, 222, 236, 354, 367, 384, 392, 399, 413, 416, 418, 420, 424, 452, 517, 518, 581, 590, 599, 636, 680, 807, 809, 812, 813, 815, 823, 832, 835, 836, 837, 840, 883, 944, 1010, 1012, 1020, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "occurr": [2, 218, 323, 359, 360, 379, 384, 388, 416, 424, 578, 579, 590, 598, 599, 626, 636, 637, 638, 639, 792, 848, 876, 1012, 1042, 1047], "ocean": 310, "ocsvm": [48, 232], "oct": [701, 778, 1007, 1013], "octob": [112, 379, 1041, 1048, 1054, 1055, 1057], "od280": 381, "od315": 381, "odd": [279, 423, 523, 721, 1010, 1048, 1049], "ofcategoriesknownnumb": 404, "off": [44, 51, 53, 72, 74, 75, 82, 83, 87, 88, 111, 115, 117, 124, 144, 154, 172, 173, 188, 222, 239, 250, 254, 268, 269, 275, 277, 278, 279, 294, 317, 334, 337, 339, 341, 347, 356, 358, 379, 384, 386, 398, 415, 416, 418, 425, 450, 505, 562, 563, 568, 569, 597, 600, 643, 665, 667, 701, 724, 806, 807, 809, 812, 813, 823, 825, 831, 836, 874, 893, 961, 1009, 1015, 1025, 1030, 1031, 1041, 1045, 1046, 1048], "offer": [43, 144, 206, 386, 392, 396, 397, 398, 402, 410, 420, 421, 423, 424, 999, 1000, 1011, 1014, 1026, 1029, 1030, 1034, 1047, 1059, 1060], "offic": 1034, "offici": [379, 386, 396, 398, 402, 502, 506, 1029, 1049, 1050, 1053], "offlin": [270, 371, 384], "offset": [141, 196, 396, 418, 421, 477, 517, 518, 572, 641, 642, 650, 651, 653, 654, 686, 737, 784, 786, 859, 917, 1010, 1024, 1049, 1060], "offset_": [477, 572, 686, 859, 917, 1049], "offset_init": 686, "offsetbox": 239, "offsetimag": 239, "ofmulticlass": 1025, "often": [43, 57, 61, 62, 64, 69, 104, 108, 144, 154, 157, 179, 186, 191, 192, 219, 236, 239, 255, 263, 278, 281, 317, 322, 347, 356, 358, 359, 360, 371, 372, 378, 379, 381, 384, 386, 389, 392, 396, 397, 398, 401, 404, 410, 414, 416, 417, 418, 420, 421, 423, 424, 426, 428, 476, 530, 533, 542, 545, 641, 655, 656, 661, 662, 669, 670, 671, 672, 681, 683, 696, 737, 883, 891, 899, 911, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1020, 1023, 1024, 1026, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "og": 424, "ogbonna": 1054, "ogordon100": 1054, "ogrid": 53, "ogu": 424, "ogura": 1056, "oh": [886, 1051], "ohad": 1055, "ohayon": [1049, 1050, 1057], "ohio": 379, "ohno": 414, "oj_lappi": 1053, "oja": [428, 542], "ojala": [282, 420, 838], "ojeda": 1055, "ok": [49, 384, 1016], "okal": 1045, "okbalefthand": 1047, "okhlopkov": [1047, 1048], "okon": 1055, "okroshiashvili": 1054, "ol": [198, 208, 213, 215, 216, 224, 235, 329, 665, 1006], "ol2001": 1000, "olatunji": 1056, "old": [236, 384, 388, 390, 416, 476, 545, 655, 661, 911, 1007, 1030, 1041, 1046, 1047, 1049, 1054, 1055, 1056], "olden": 1049, "older": [252, 383, 388, 410, 472, 1033, 1039, 1044, 1051, 1053], "oldest": 505, "oldid": 1010, "oldja": 1053, "oleg": 1051, "oleggio": 1045, "olegovich": 1048, "oleh": [1053, 1055], "oleksandr": [1049, 1050, 1051, 1052, 1055], "oleksii": 1058, "olemiss": 688, "olga": [637, 1000], "oli": 1048, "oliblum90": [1048, 1049], "olicairn": 1052, "olimpio": 1049, "oliph": 1041, "oliv": [1049, 1050, 1052, 1053, 1054], "oliveira": [1047, 1049, 1051, 1055], "olivetti": [2, 124, 146, 377, 421, 504, 1036, 1041, 1049], "olivetti_fac": 504, "olivi": [0, 399, 405, 909, 1023, 1028, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "oll": 1056, "olr": 198, "olsen": 1048, "olshen": [921, 922, 1026], "olson": 1047, "olszewski": 1054, "olvi": [173, 381], "om": 1048, "omar": [0, 405, 1051, 1056, 1057, 1058, 1059, 1060], "omarmanzoor": 1057, "omega": [354, 419, 1004], "omega_": 1004, "omega_k": [419, 1004], "omer": 1046, "omit": [145, 190, 191, 341, 389, 429, 483, 543, 675, 677, 685, 816, 818, 841, 842, 845, 848, 849, 850, 851, 852, 870, 1008, 1015], "omohundro": 1013, "omp": [2, 127, 133, 217, 421, 540, 546, 551, 557, 673, 674, 694, 695, 1032, 1036, 1041, 1049], "omp_cv": 217, "omp_get_max_thread": 385, "omp_num_thread": 372, "omtcyfz": 1048, "onc": [2, 43, 47, 85, 170, 173, 175, 180, 239, 252, 255, 270, 274, 277, 290, 294, 297, 323, 326, 330, 358, 360, 366, 367, 371, 373, 378, 379, 382, 384, 388, 389, 390, 391, 392, 397, 398, 399, 410, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 457, 459, 461, 480, 517, 518, 547, 553, 560, 568, 569, 599, 600, 606, 620, 628, 636, 656, 660, 662, 664, 670, 672, 674, 675, 676, 677, 685, 686, 687, 706, 721, 725, 727, 745, 790, 810, 814, 817, 827, 831, 848, 849, 850, 851, 852, 925, 1006, 1007, 1013, 1020, 1024, 1025, 1026, 1038, 1041, 1049, 1051, 1052, 1053, 1054, 1058], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 82, 88, 90, 92, 93, 95, 96, 99, 101, 105, 114, 120, 121, 124, 127, 129, 133, 143, 144, 149, 151, 154, 155, 159, 162, 172, 173, 175, 182, 183, 186, 190, 191, 192, 193, 194, 196, 198, 199, 203, 207, 208, 210, 211, 212, 214, 218, 220, 227, 228, 233, 236, 240, 245, 252, 253, 255, 259, 263, 266, 270, 272, 273, 274, 276, 277, 279, 280, 283, 284, 285, 286, 294, 296, 297, 302, 315, 318, 319, 322, 323, 326, 328, 329, 330, 334, 339, 346, 347, 355, 358, 359, 360, 362, 366, 367, 371, 372, 373, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 398, 399, 401, 402, 404, 407, 410, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 468, 470, 472, 477, 482, 495, 496, 498, 499, 501, 502, 503, 504, 505, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 523, 543, 548, 549, 550, 552, 556, 560, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 590, 592, 593, 597, 598, 599, 600, 619, 620, 624, 625, 629, 636, 639, 641, 642, 643, 644, 652, 656, 657, 658, 659, 663, 666, 667, 668, 670, 675, 677, 678, 680, 682, 683, 684, 685, 687, 689, 697, 701, 704, 708, 712, 718, 720, 729, 738, 739, 743, 747, 759, 760, 763, 772, 780, 783, 787, 788, 789, 790, 792, 793, 796, 797, 799, 800, 801, 802, 805, 806, 807, 808, 809, 812, 813, 815, 816, 817, 819, 821, 823, 827, 828, 831, 832, 834, 836, 837, 839, 840, 841, 842, 843, 845, 846, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 869, 873, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 892, 893, 894, 897, 899, 913, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 935, 945, 949, 959, 980, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1027, 1028, 1029, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "one_class": 253, "one_d_arrai": 930, "one_d_label": 933, "one_hot": [323, 334], "one_hot_encod": [43, 148], "one_hot_encoder_": 575, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 148, "one_hot_tim": 43, "one_imag": [424, 593, 596], "one_vs_on": [426, 619, 1011], "one_vs_rest": [619, 1011], "oneclasssvm": [2, 48, 50, 232, 245, 329, 346, 572, 686, 859, 1016, 1024, 1025, 1043, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "oned": 402, "onehot": [257, 318, 319, 417, 878, 1020], "onehot_categor": [218, 236], "onehotencod": [2, 43, 105, 143, 148, 159, 191, 192, 218, 236, 247, 255, 257, 259, 323, 327, 329, 332, 333, 334, 378, 398, 417, 423, 474, 475, 575, 590, 591, 876, 880, 881, 884, 887, 894, 1000, 1020, 1042, 1045, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "onehotencoderonehotencod": [105, 143, 159, 191, 192, 247, 257, 327, 330], "ones": [43, 50, 70, 78, 90, 105, 114, 149, 155, 175, 196, 203, 222, 223, 245, 248, 252, 276, 284, 287, 304, 321, 337, 356, 371, 372, 384, 392, 398, 416, 418, 420, 423, 431, 434, 438, 458, 541, 575, 590, 619, 620, 627, 653, 654, 667, 668, 679, 685, 712, 805, 811, 816, 827, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 888, 892, 963, 1006, 1010, 1015, 1016, 1020, 1025, 1041, 1049, 1050, 1051], "onetoonefeaturemixin": [2, 386, 440], "onevsoneclassifi": [2, 294, 407, 842, 843, 1042, 1044, 1045, 1047, 1048, 1050, 1053, 1055, 1058], "onevsrestclassifi": [2, 66, 210, 233, 253, 283, 285, 294, 407, 414, 667, 668, 841, 843, 913, 1042, 1043, 1045, 1047, 1048, 1054, 1055, 1058, 1059], "ong": 717, "ongari": 1058, "onggo": 1057, "ongo": [332, 385, 399], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 80, 84, 88, 90, 93, 101, 104, 105, 106, 108, 109, 114, 120, 127, 128, 130, 134, 138, 140, 145, 146, 147, 148, 150, 158, 159, 168, 169, 170, 173, 175, 177, 182, 184, 187, 188, 190, 191, 192, 196, 197, 202, 203, 207, 214, 218, 219, 221, 224, 226, 227, 236, 238, 239, 245, 247, 249, 251, 252, 256, 259, 261, 262, 263, 266, 267, 270, 272, 274, 276, 278, 279, 282, 283, 284, 285, 287, 288, 290, 294, 296, 297, 303, 305, 308, 310, 314, 317, 318, 322, 323, 328, 329, 336, 337, 339, 343, 344, 347, 351, 352, 354, 355, 358, 359, 360, 362, 363, 366, 367, 371, 372, 373, 377, 378, 379, 381, 382, 384, 386, 388, 389, 390, 391, 392, 393, 396, 398, 399, 402, 407, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 436, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 497, 498, 499, 501, 503, 505, 506, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 525, 528, 532, 533, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 716, 718, 722, 735, 738, 739, 743, 745, 746, 747, 750, 751, 752, 765, 767, 769, 783, 787, 788, 789, 790, 792, 793, 796, 797, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 823, 827, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 934, 935, 937, 938, 939, 940, 943, 945, 949, 957, 959, 963, 965, 970, 975, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "onlin": [2, 44, 47, 54, 71, 86, 124, 127, 188, 197, 226, 232, 254, 270, 313, 373, 379, 383, 389, 398, 416, 421, 424, 426, 450, 454, 455, 457, 504, 511, 540, 545, 546, 547, 548, 554, 555, 591, 593, 667, 675, 676, 677, 685, 687, 839, 848, 849, 850, 851, 852, 855, 856, 861, 863, 864, 882, 883, 893, 913, 914, 1002, 1006, 1014, 1016, 1028, 1031, 1032, 1034, 1036, 1041, 1045, 1046, 1048, 1056], "onlineldavb": 545, "only_non_neg": 1054, "only_physical_cor": 144, "onnx": [1029, 1030, 1036], "onnxruntim": 410, "onto": [118, 239, 240, 250, 317, 396, 421, 424, 428, 454, 456, 469, 542, 548, 552, 636, 637, 639, 697, 1004, 1008, 1013], "onward": [887, 1045, 1059, 1060], "onx": 410, "oob": [137, 150, 188, 423, 524, 573, 1030, 1031, 1043, 1054, 1058], "oob_best_it": 150, "oob_color": 150, "oob_decision_function_": [564, 566, 573], "oob_error": 142, "oob_improvement_": [150, 423, 568, 569, 1043], "oob_lin": 150, "oob_prediction_": [565, 567, 574], "oob_scor": [142, 423, 564, 565, 566, 567, 573, 574, 1046, 1048], "oob_score_": [142, 564, 565, 566, 567, 568, 569, 573, 574, 1043, 1057], "oob_scores_": [568, 569, 1057], "op": [388, 435, 667, 668, 675, 676, 677, 685, 686, 687, 870, 871, 913, 1020], "opaqu": 1018, "open": [0, 47, 51, 55, 240, 378, 379, 382, 383, 384, 388, 390, 396, 397, 399, 410, 417, 424, 495, 505, 517, 518, 1000, 1029, 1034, 1044, 1048, 1049, 1051, 1057], "open_pric": 51, "openbla": [371, 372, 382, 392, 396, 1054, 1058, 1059], "openblas_num_thread": 372, "opencv": 379, "opengraph": [384, 402, 409], "openml": [2, 43, 52, 105, 159, 180, 191, 218, 226, 234, 236, 246, 270, 290, 294, 296, 314, 377, 402, 505, 1036, 1049, 1051, 1054], "openml1": 52, "openml100": 378, "openmp": [327, 382, 387, 396, 398, 416, 423, 1052, 1054, 1057, 1059], "opentsn": 701, "oper": [2, 19, 53, 57, 173, 183, 188, 246, 251, 258, 268, 270, 271, 273, 283, 360, 371, 372, 381, 382, 384, 387, 390, 396, 398, 399, 402, 410, 412, 415, 420, 421, 423, 424, 425, 429, 450, 456, 469, 476, 483, 490, 491, 492, 493, 513, 542, 543, 550, 560, 561, 575, 581, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 625, 630, 633, 639, 644, 652, 667, 698, 702, 711, 715, 716, 717, 736, 783, 790, 791, 797, 798, 828, 839, 842, 853, 854, 876, 880, 885, 896, 897, 911, 918, 921, 959, 982, 1006, 1013, 1020, 1025, 1029, 1031, 1034, 1045, 1047, 1048, 1049, 1051, 1052, 1057, 1060], "operand": 426, "operation": [236, 1034], "operatornam": [421, 750, 1006, 1010, 1026], "opinion": 399, "opitz": 1010, "opportun": [543, 1024], "oppos": [102, 252, 412, 416, 909, 1013, 1025, 1041, 1059], "opposit": [62, 88, 102, 129, 191, 192, 207, 270, 283, 398, 414, 418, 420, 425, 451, 455, 457, 477, 547, 549, 556, 572, 721, 739, 859, 917, 1041], "opposite_lof_scor": 859, "opt": [382, 386], "opta": 906, "optic": [2, 71, 79, 188, 330, 339, 377, 427, 452, 454, 463, 464, 465, 511, 1031, 1035, 1036, 1050, 1054, 1055, 1056, 1057, 1058, 1059], "optim": [46, 52, 53, 64, 88, 89, 92, 95, 106, 111, 112, 124, 149, 150, 152, 154, 172, 173, 175, 176, 179, 180, 181, 182, 183, 203, 205, 207, 211, 226, 234, 251, 255, 270, 274, 281, 284, 289, 290, 294, 296, 301, 315, 317, 322, 330, 334, 339, 349, 354, 358, 359, 360, 367, 371, 378, 381, 384, 386, 387, 396, 398, 402, 411, 413, 415, 416, 418, 420, 421, 423, 425, 426, 427, 452, 455, 456, 457, 458, 460, 465, 469, 470, 480, 481, 487, 540, 543, 544, 546, 548, 552, 566, 567, 568, 569, 583, 619, 620, 628, 629, 644, 647, 649, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 696, 699, 701, 703, 704, 710, 728, 732, 739, 808, 809, 823, 831, 855, 856, 857, 859, 861, 862, 863, 864, 865, 870, 871, 889, 901, 905, 906, 913, 914, 915, 916, 917, 918, 919, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1024, 1025, 1026, 1029, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1057], "optima": 426, "optimis": [386, 416, 1013, 1044, 1054, 1056], "optimist": [52, 207, 281, 358, 367, 716, 1006, 1010], "optimum": [96, 181, 191, 196, 270, 289, 415, 421, 480, 1006, 1009], "option": [2, 43, 66, 81, 87, 131, 144, 152, 181, 187, 200, 203, 219, 255, 270, 279, 285, 327, 334, 358, 362, 367, 373, 378, 379, 380, 382, 384, 385, 387, 389, 390, 392, 393, 396, 398, 399, 402, 410, 416, 417, 419, 420, 421, 423, 424, 427, 440, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 696, 697, 698, 699, 701, 703, 704, 720, 722, 726, 738, 739, 744, 745, 746, 766, 767, 768, 773, 775, 776, 780, 783, 784, 785, 786, 787, 790, 792, 793, 796, 801, 802, 804, 808, 810, 811, 812, 813, 815, 816, 818, 827, 831, 832, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 905, 906, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 947, 995, 999, 1000, 1006, 1009, 1010, 1013, 1020, 1023, 1025, 1026, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "option_context": 236, "ora": 1054, "oracl": [2, 69, 218, 236, 429, 477, 478, 481, 482, 483, 484, 1004, 1041], "orallo": 1010, "orang": [46, 48, 88, 113, 122, 125, 126, 131, 138, 153, 154, 156, 182, 187, 205, 207, 228, 253, 264, 270, 308, 327, 333, 365, 1011, 1058], "orazbayev": 1055, "orbit": [358, 359], "order": [2, 43, 53, 58, 61, 64, 82, 90, 99, 100, 106, 111, 133, 146, 147, 148, 152, 154, 166, 180, 190, 191, 194, 196, 207, 211, 214, 218, 219, 224, 232, 236, 240, 249, 252, 255, 259, 263, 271, 274, 276, 283, 296, 315, 317, 322, 323, 324, 328, 329, 334, 354, 358, 360, 367, 371, 372, 379, 384, 385, 386, 388, 389, 390, 393, 398, 402, 403, 407, 410, 416, 417, 418, 420, 421, 422, 423, 424, 426, 428, 445, 448, 451, 454, 455, 457, 458, 463, 464, 465, 467, 472, 496, 497, 498, 504, 506, 524, 543, 544, 548, 549, 550, 552, 556, 560, 562, 564, 565, 566, 567, 568, 572, 573, 574, 575, 576, 590, 597, 600, 602, 603, 606, 615, 616, 617, 619, 631, 636, 640, 649, 667, 668, 674, 685, 694, 695, 697, 698, 702, 706, 708, 709, 711, 713, 721, 722, 727, 731, 735, 738, 739, 747, 749, 750, 751, 763, 765, 787, 791, 792, 793, 796, 797, 798, 803, 808, 809, 810, 812, 813, 814, 816, 820, 823, 827, 828, 831, 834, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 870, 873, 884, 886, 887, 888, 892, 893, 894, 897, 898, 899, 901, 902, 903, 904, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 939, 940, 945, 957, 973, 978, 1000, 1006, 1007, 1010, 1011, 1013, 1014, 1020, 1023, 1024, 1025, 1026, 1030, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "order_": [844, 847], "order_centroid": 359, "ordered_sampl": 236, "ordereddict": 142, "ordering_": [100, 416, 458, 463, 464, 465], "ordin": [43, 88, 105, 159, 255, 320, 323, 324, 328, 331, 378, 398, 423, 505, 576, 718, 878, 881, 886, 887, 894, 1006, 1007, 1020, 1030, 1049, 1055], "ordinal_encod": [148, 255], "ordinal_result": 148, "ordinalencod": [2, 148, 159, 192, 193, 218, 255, 323, 331, 378, 398, 590, 849, 881, 886, 894, 1000, 1012, 1020, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058], "ordinalencoderordinalencod": [159, 192, 193, 323], "ordinari": [2, 126, 141, 188, 197, 198, 201, 203, 208, 214, 220, 221, 223, 235, 329, 644, 655, 661, 663, 664, 665, 666, 681, 687, 691, 692, 696, 1024, 1031, 1032, 1036], "ordinarili": [396, 398], "ordowski": 1010, "oregon": 323, "oren": 1049, "oresti": 1050, "orfano": [1054, 1055, 1056, 1057, 1058], "org": [43, 51, 52, 55, 61, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 196, 200, 218, 226, 234, 236, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 296, 314, 315, 323, 327, 328, 330, 331, 333, 338, 366, 372, 377, 382, 384, 387, 390, 392, 399, 420, 604, 645, 677, 680, 685, 704, 714, 778, 855, 856, 861, 862, 863, 864, 891, 907, 921, 922, 951, 952, 1006, 1010, 1026, 1036, 1049, 1053], "organ": [0, 50, 52, 104, 113, 358, 378, 383, 384, 399, 861, 1029], "ori": 1047, "orient": [66, 124, 191, 238, 317, 398, 925, 1007], "orig": [53, 304], "orig_coin": [81, 82], "orig_data_ax": 129, "origin": [43, 44, 53, 58, 59, 81, 82, 83, 86, 91, 93, 108, 109, 120, 124, 126, 127, 133, 154, 157, 169, 170, 173, 175, 177, 179, 180, 186, 187, 192, 196, 205, 207, 222, 238, 239, 240, 242, 243, 249, 250, 251, 255, 267, 270, 273, 279, 300, 305, 315, 318, 322, 332, 337, 351, 358, 360, 367, 372, 379, 381, 383, 384, 386, 388, 389, 396, 398, 410, 413, 416, 417, 420, 421, 423, 424, 426, 427, 428, 429, 441, 445, 449, 451, 452, 453, 454, 455, 457, 458, 467, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 502, 503, 504, 510, 528, 540, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 585, 590, 591, 593, 597, 599, 600, 603, 616, 617, 619, 620, 623, 639, 641, 644, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 701, 705, 710, 737, 772, 778, 808, 810, 811, 816, 818, 827, 831, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 863, 864, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 889, 890, 891, 892, 893, 902, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 937, 939, 940, 944, 945, 968, 980, 983, 1003, 1004, 1006, 1007, 1009, 1010, 1013, 1016, 1021, 1022, 1023, 1024, 1027, 1029, 1034, 1044, 1045, 1047, 1049, 1051, 1053, 1055, 1057], "original_param": 153, "original_shap": 83, "original_sklearn_vers": [410, 585], "original_space_centroid": 359, "orii": 1043, "orphan": [456, 469, 1041], "orr": [1014, 1024], "orr\u00f9": 1044, "orthogon": [2, 37, 125, 126, 127, 133, 188, 197, 289, 421, 535, 540, 546, 548, 551, 552, 557, 673, 674, 694, 695, 1022, 1031, 1032, 1036, 1041], "orthogonal_mp": [2, 557, 673, 674, 695, 1006], "orthogonal_mp_gram": [2, 673, 674, 694, 1055], "orthogonalmatchingpursuit": [2, 217, 674, 694, 695, 1006, 1011, 1041, 1043, 1046, 1049, 1054, 1059], "orthogonalmatchingpursuitcv": [2, 217, 407, 673, 1043, 1054, 1058], "orthonorm": [2, 45, 393, 956, 1002], "orthotrop": 1013, "ortiz": [1051, 1057], "os": 1059, "osa": 1049, "osaid": 1049, "osborn": [1044, 1045], "oscar": [1044, 1048], "oscil": [156, 192, 223, 416, 448], "oscillatori": [219, 1020], "osei": 1055, "osendorf": [1041, 1042], "oserror": [402, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507], "osindero": [869, 1015], "osman": [1050, 1056], "osx": 371, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 87, 92, 101, 103, 105, 106, 118, 126, 127, 129, 131, 141, 143, 144, 147, 148, 151, 152, 154, 155, 161, 168, 186, 187, 188, 190, 191, 192, 193, 196, 198, 206, 211, 218, 222, 236, 238, 239, 240, 242, 245, 246, 247, 249, 251, 252, 255, 256, 263, 266, 270, 271, 273, 276, 277, 278, 285, 286, 290, 294, 302, 303, 304, 316, 317, 321, 322, 324, 326, 327, 329, 333, 334, 336, 347, 351, 353, 356, 358, 359, 362, 366, 367, 371, 376, 377, 379, 380, 381, 382, 384, 386, 388, 389, 390, 392, 393, 397, 398, 399, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 445, 451, 452, 454, 455, 456, 457, 458, 460, 465, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 505, 506, 512, 542, 543, 544, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 606, 611, 619, 620, 621, 622, 629, 636, 637, 639, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 699, 701, 705, 708, 713, 727, 772, 783, 787, 794, 801, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 823, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 868, 870, 871, 873, 874, 876, 878, 879, 880, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 901, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 951, 952, 966, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1030, 1031, 1032, 1033, 1034, 1036, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1054, 1055, 1056, 1057, 1058, 1060], "other_parti": 270, "other_payment_plan": 270, "other_scor": 389, "otherwis": [50, 91, 97, 140, 184, 187, 200, 220, 226, 270, 310, 351, 354, 367, 373, 386, 388, 390, 398, 407, 416, 418, 420, 424, 426, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 462, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 505, 536, 542, 543, 544, 545, 547, 549, 550, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 606, 611, 619, 620, 623, 640, 641, 642, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 699, 701, 705, 706, 707, 709, 711, 712, 716, 718, 722, 723, 733, 735, 736, 737, 738, 739, 747, 750, 761, 763, 764, 765, 775, 783, 787, 790, 791, 792, 793, 794, 796, 797, 798, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 823, 827, 828, 831, 832, 837, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 870, 871, 873, 876, 877, 878, 879, 880, 884, 885, 892, 893, 894, 895, 898, 899, 900, 902, 903, 904, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 926, 928, 939, 940, 942, 946, 956, 957, 968, 970, 993, 995, 998, 1005, 1006, 1007, 1010, 1013, 1014, 1016, 1017, 1020, 1022, 1024, 1025, 1029, 1034, 1043, 1049, 1050, 1051, 1054, 1057], "ott": 1045, "oudshoorn": [636, 1000], "ought": 371, "our": [0, 43, 44, 46, 50, 51, 52, 77, 88, 91, 104, 105, 113, 114, 118, 124, 125, 138, 139, 145, 148, 149, 151, 152, 168, 173, 175, 180, 181, 182, 188, 190, 191, 192, 193, 194, 218, 222, 236, 240, 242, 252, 269, 270, 276, 279, 282, 283, 300, 314, 317, 323, 327, 329, 334, 341, 344, 350, 352, 354, 358, 359, 360, 367, 372, 383, 388, 389, 392, 396, 397, 398, 399, 407, 416, 420, 423, 424, 426, 427, 452, 458, 572, 653, 701, 717, 729, 735, 747, 765, 855, 856, 857, 859, 861, 863, 864, 865, 999, 1000, 1006, 1007, 1010, 1016, 1020, 1023, 1024, 1025, 1030, 1033, 1034, 1048, 1049, 1051, 1052, 1055, 1056, 1058], "our_rand_r": 1050, "oura": [1054, 1055, 1056], "ourselv": 1034, "ouss1508": [1056, 1057], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 85, 90, 91, 104, 105, 131, 136, 137, 142, 144, 145, 152, 153, 166, 183, 188, 190, 191, 193, 203, 218, 220, 222, 226, 236, 252, 255, 261, 263, 270, 274, 276, 279, 284, 288, 294, 296, 322, 323, 329, 339, 341, 343, 344, 347, 354, 358, 370, 379, 381, 382, 384, 386, 387, 388, 390, 396, 398, 404, 410, 416, 419, 421, 423, 424, 426, 432, 442, 443, 444, 450, 451, 453, 454, 455, 457, 480, 490, 491, 492, 493, 508, 524, 525, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 597, 598, 600, 613, 616, 617, 643, 648, 649, 650, 651, 660, 664, 675, 677, 682, 684, 685, 697, 698, 701, 710, 736, 750, 751, 809, 811, 812, 813, 814, 816, 817, 818, 819, 823, 839, 848, 849, 850, 851, 852, 857, 862, 865, 869, 870, 871, 879, 883, 890, 902, 905, 906, 928, 971, 973, 978, 998, 1000, 1004, 1005, 1009, 1010, 1011, 1013, 1018, 1020, 1030, 1031, 1032, 1034, 1036, 1041, 1043, 1045, 1047, 1049, 1050, 1053, 1054, 1057, 1059], "out_activation_": [870, 871], "out_bounds_predict": 220, "out_fil": [925, 1026], "out_of_bound": [248, 644], "out_of_cluster_doc": 57, "outcom": [43, 144, 191, 398, 404, 423, 578, 667, 718, 751, 803, 841, 908, 909, 910, 915, 918, 1006, 1010, 1026, 1033, 1045, 1049, 1051], "outdat": 387, "outer": [58, 129, 281, 338, 459, 523, 649, 659, 660, 663, 1002, 1042], "outer_cv": [281, 333], "outer_numb": 338, "outermost": 351, "outli": [48, 113, 398, 477, 482, 1006, 1016], "outlier": [2, 42, 70, 79, 89, 113, 114, 151, 155, 175, 188, 197, 216, 220, 221, 222, 223, 224, 232, 244, 298, 316, 321, 324, 346, 356, 379, 398, 416, 418, 423, 438, 454, 472, 474, 477, 478, 481, 482, 483, 484, 498, 499, 501, 505, 519, 521, 531, 533, 572, 640, 648, 658, 679, 680, 681, 685, 686, 687, 688, 701, 711, 839, 859, 863, 874, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 898, 899, 900, 901, 902, 903, 904, 916, 917, 919, 1010, 1024, 1025, 1029, 1031, 1032, 1035, 1036, 1041, 1046, 1047, 1049, 1060], "outlier_detector": [255, 438], "outlier_label": [863, 1051], "outlier_label_": 863, "outlier_mask": 221, "outlier_plot": 113, "outliermixin": [2, 1058], "outliers_": 658, "outliers_cov": 113, "outliers_fract": 245, "outliers_index": 114, "outliers_offset": 114, "outlin": [101, 147, 384, 386, 398, 399, 401, 416, 999, 1036], "outlying": 1016, "outperform": [111, 118, 154, 159, 294, 322, 396, 420, 423, 460, 470, 1012, 1020], "output": [2, 30, 31, 51, 54, 62, 64, 72, 88, 94, 127, 137, 138, 139, 141, 147, 159, 162, 175, 183, 186, 187, 188, 191, 214, 244, 252, 256, 259, 264, 269, 270, 274, 276, 279, 283, 285, 286, 290, 294, 297, 318, 321, 323, 324, 326, 329, 330, 332, 334, 359, 360, 361, 362, 364, 366, 377, 378, 379, 381, 384, 386, 390, 392, 396, 397, 398, 414, 415, 416, 417, 419, 420, 423, 424, 425, 426, 432, 437, 440, 445, 449, 450, 451, 453, 454, 455, 457, 458, 460, 467, 468, 470, 471, 472, 473, 474, 475, 476, 490, 491, 492, 493, 496, 499, 501, 502, 503, 504, 505, 506, 512, 514, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 649, 650, 651, 655, 656, 659, 661, 662, 663, 666, 667, 669, 670, 671, 672, 675, 676, 677, 680, 682, 683, 685, 687, 688, 690, 691, 692, 693, 697, 698, 699, 701, 703, 705, 708, 709, 722, 723, 730, 732, 733, 735, 737, 744, 754, 755, 757, 759, 760, 761, 762, 763, 765, 770, 776, 781, 794, 797, 799, 800, 806, 807, 808, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 831, 834, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 856, 857, 858, 862, 863, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 901, 902, 905, 906, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 933, 934, 939, 940, 942, 945, 957, 958, 965, 966, 968, 976, 996, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1025, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "output_dict": [722, 1049, 1053], "output_distribut": [109, 317, 321, 417, 889, 890, 901, 902, 1020], "output_fil": 495, "output_indices_": [472, 1054], "output_label": 338, "output_label_arrai": 338, "outputcodeclassifi": [2, 294, 407, 841, 842, 1048, 1053, 1057, 1058], "outputs_2d_": [855, 863, 1051], "outreach": 399, "outsid": [45, 48, 57, 147, 219, 220, 248, 259, 410, 424, 454, 644, 892, 1016, 1049], "outward": 317, "outweigh": 1045, "ouvert": [767, 768, 1008], "ova": [227, 675, 677, 685, 1024], "ovb": [190, 191], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 85, 90, 91, 106, 107, 108, 124, 141, 144, 149, 154, 155, 168, 172, 175, 183, 186, 190, 192, 201, 212, 218, 226, 236, 245, 255, 270, 276, 277, 279, 281, 283, 284, 285, 288, 302, 310, 312, 313, 319, 329, 330, 332, 336, 358, 359, 371, 372, 373, 379, 380, 383, 384, 385, 386, 390, 397, 398, 412, 414, 416, 417, 420, 421, 422, 423, 424, 428, 454, 457, 472, 480, 518, 542, 543, 545, 546, 547, 548, 555, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 597, 598, 600, 603, 611, 639, 641, 642, 643, 653, 654, 655, 656, 661, 662, 667, 669, 670, 671, 672, 674, 675, 676, 677, 685, 686, 687, 694, 695, 706, 725, 727, 748, 772, 797, 802, 806, 809, 812, 813, 815, 820, 821, 823, 832, 834, 835, 836, 837, 838, 840, 869, 870, 871, 872, 888, 892, 913, 921, 923, 930, 936, 945, 951, 952, 999, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1034, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1054], "overal": [43, 78, 83, 138, 141, 144, 149, 159, 180, 236, 270, 273, 297, 322, 323, 359, 371, 383, 384, 390, 413, 414, 423, 455, 457, 472, 479, 480, 486, 558, 894, 1007, 1010, 1026, 1034, 1051], "overallqu": 159, "overcom": [145, 222, 371, 424], "overcomplet": 421, "overconstrain": 154, "overestim": [131, 367, 420], "overfit": [43, 64, 143, 149, 151, 154, 188, 192, 193, 194, 198, 219, 222, 245, 263, 268, 270, 271, 277, 281, 290, 292, 312, 318, 319, 321, 322, 323, 324, 347, 354, 362, 364, 365, 379, 398, 414, 415, 420, 423, 445, 496, 497, 570, 571, 576, 577, 666, 809, 812, 813, 823, 831, 835, 836, 870, 871, 873, 888, 892, 1005, 1014, 1016, 1018, 1020, 1026, 1031, 1034, 1044], "overflow": [383, 392, 396, 412, 1033, 1044, 1048, 1049, 1050, 1051, 1052, 1054], "overflowerror": 1051, "overhead": [47, 297, 372, 373, 384, 390, 393, 396, 398, 423, 449, 453, 457, 543, 708, 845, 846, 848, 849, 850, 851, 852, 853, 854, 1012, 1013, 1044, 1049, 1050, 1053], "overlai": [392, 641], "overlaid": 1017, "overlap": [2, 51, 52, 72, 90, 120, 152, 172, 241, 263, 359, 413, 416, 420, 423, 424, 596, 801, 802, 810, 811, 814, 816, 817, 818, 819, 826, 827, 829, 1007, 1020, 1047], "overli": [52, 62, 63, 207, 281, 367, 421, 1010], "overlin": [276, 413], "overparameter": 1006, "overrid": [386, 424, 454, 458, 465, 551, 557, 597, 598, 600, 602, 603, 606, 665, 673, 694, 695, 815, 832, 855, 856, 857, 859, 861, 863, 864, 865, 1041, 1049, 1051, 1055, 1057], "overridden": [386, 398, 426, 551, 557, 625, 630, 633, 703, 1049, 1050, 1057], "oversampl": [553, 1041], "oversc": 1056, "overset": [421, 1017], "overst": 191, "oversubscript": [787, 1055], "overview": [109, 188, 281, 293, 296, 385, 387, 397, 398, 505, 743, 752, 809, 825, 836, 841, 842, 843, 921, 1012, 1024, 1031, 1035, 1036], "overwhelm": 384, "overwrit": [154, 454, 505, 640, 1041, 1052, 1057, 1058], "overwrite_": 1041, "overwritten": [450, 541, 542, 543, 545, 550, 557, 616, 617, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 681, 683, 688, 690, 691, 692, 693, 695, 979, 1054], "ovo": [294, 326, 797, 841, 915, 918, 1010, 1011, 1025], "ovo_tpr": 285, "ovo_tre": 294, "ovr": [2, 66, 210, 233, 294, 296, 326, 355, 667, 668, 797, 842, 913, 915, 918, 1010, 1011, 1025, 1041, 1046, 1047, 1049, 1050, 1051, 1055, 1056], "ovr_jaccard_scor": 296, "ovr_tre": 294, "ow": 95, "owen": [658, 1050, 1051], "own": [2, 16, 52, 70, 144, 236, 252, 266, 297, 299, 338, 359, 372, 378, 387, 389, 392, 393, 402, 415, 416, 428, 432, 448, 462, 542, 566, 573, 655, 806, 807, 855, 856, 857, 859, 861, 863, 864, 865, 887, 921, 923, 945, 951, 1006, 1012, 1013, 1016, 1020, 1025, 1029, 1034, 1048, 1049, 1051, 1058], "own_telephon": 270, "owner": [252, 379, 381, 965, 966], "ownership": 386, "oyamada": 1046, "oyindamola": 1056, "oywa": 1051, "ozga": 1049, "ozsvald": 1043, "p": [0, 2, 50, 53, 61, 63, 64, 76, 96, 113, 114, 117, 122, 131, 150, 169, 173, 178, 196, 230, 235, 236, 238, 240, 249, 276, 282, 283, 310, 378, 379, 381, 382, 389, 392, 413, 414, 415, 416, 418, 419, 421, 423, 425, 426, 427, 429, 450, 452, 454, 455, 458, 463, 464, 465, 477, 479, 482, 483, 486, 507, 537, 543, 547, 549, 550, 556, 558, 559, 560, 562, 564, 565, 566, 567, 568, 570, 573, 574, 575, 599, 601, 602, 603, 604, 605, 607, 608, 609, 613, 614, 615, 616, 617, 618, 624, 625, 636, 649, 652, 697, 699, 701, 703, 708, 714, 724, 733, 750, 761, 795, 797, 811, 817, 818, 819, 822, 838, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 869, 873, 874, 889, 901, 907, 923, 924, 925, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1024, 1025, 1041, 1042, 1044, 1047, 1049, 1056, 1057, 1058], "p0": 63, "p1": [63, 161], "p1d": 63, "p2": [63, 161, 236], "p3": 161, "p4": 161, "p5": 957, "p592": 142, "p_": [169, 1010, 1013, 1026], "p_c": [122, 532], "p_e": 725, "p_grid": 281, "p_i": [1010, 1013], "p_k": [283, 1010], "p_n": [283, 716, 1010], "p_o": 725, "p_val": 276, "p_val_uncorrect": 276, "p_valu": [613, 614, 615], "p_w": 122, "p_w_c": [122, 532], "pa": [675, 676, 910, 1006, 1010, 1023], "pab": [1056, 1057], "pablo": [1051, 1054, 1055], "pabloduque0": 1054, "pace": 379, "pacha": 1049, "pacif": 276, "pack": [393, 1049], "packag": [0, 81, 88, 151, 186, 252, 297, 319, 372, 377, 378, 381, 382, 384, 385, 386, 388, 392, 393, 396, 398, 402, 403, 410, 418, 423, 424, 460, 486, 655, 656, 1000, 1006, 1009, 1013, 1020, 1026, 1034, 1041, 1047, 1049, 1050, 1051], "packet": 371, "packg": 402, "pacman": 402, "paczuski": [1049, 1050], "pad": [124, 147, 186, 192, 238, 255, 358, 363, 424, 597, 598, 600], "page": [0, 51, 55, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 173, 180, 191, 192, 193, 200, 238, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 371, 379, 381, 384, 386, 388, 390, 392, 399, 416, 418, 481, 525, 526, 527, 637, 653, 843, 908, 957, 1000, 1006, 1010, 1011, 1039, 1041, 1045, 1046], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": 55, "pagh": [196, 1002], "pai": [0, 191, 236, 270, 384], "paid": 1006, "pain": 396, "paint": [925, 927], "pair": [2, 49, 52, 72, 79, 93, 99, 129, 140, 142, 147, 151, 166, 179, 183, 199, 202, 210, 227, 230, 236, 249, 271, 276, 283, 285, 341, 343, 345, 347, 348, 349, 351, 359, 363, 379, 396, 398, 413, 414, 417, 420, 424, 426, 445, 448, 449, 453, 458, 465, 471, 479, 480, 486, 502, 517, 518, 591, 601, 604, 605, 607, 608, 609, 619, 622, 623, 624, 626, 628, 629, 631, 632, 634, 636, 641, 642, 652, 654, 701, 708, 709, 714, 715, 716, 724, 740, 749, 767, 768, 772, 775, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 795, 841, 853, 854, 928, 1010, 1011, 1012, 1013, 1020, 1026, 1041, 1053, 1054, 1056, 1057, 1058], "pair_confusion_matrix": [2, 416, 1053], "pair_list": 285, "pair_scor": 285, "paired_cosine_dist": [2, 412, 1060], "paired_dist": [2, 772, 778, 787, 1045], "paired_euclidean_dist": [2, 412, 1060], "paired_manhattan_dist": 2, "pairidx": 363, "pairplot": [190, 191], "pairwis": [2, 37, 99, 190, 191, 249, 255, 285, 326, 330, 331, 358, 371, 376, 398, 412, 416, 421, 426, 454, 462, 466, 469, 470, 476, 495, 517, 518, 544, 570, 571, 629, 647, 648, 649, 650, 651, 652, 697, 699, 701, 703, 705, 708, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 797, 801, 802, 841, 857, 861, 865, 879, 911, 930, 1002, 1010, 1013, 1022, 1025, 1036, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1056, 1057, 1058, 1059, 1060], "pairwise_bayesian": 276, "pairwise_bayesian_df": 276, "pairwise_comp_df": 276, "pairwise_dist": [2, 75, 334, 398, 416, 427, 452, 454, 458, 465, 697, 705, 771, 780, 788, 789, 801, 802, 857, 859, 861, 865, 1008, 1041, 1045, 1047, 1049, 1050, 1052, 1053, 1058, 1059, 1060], "pairwise_dist_chunk_s": [476, 911], "pairwise_distance_funct": [701, 705, 787, 790, 1013], "pairwise_distances_argmin": [2, 83, 99, 330, 789, 1049, 1055, 1056, 1057, 1058], "pairwise_distances_argmin_min": [2, 330, 788, 1044, 1049, 1055, 1056, 1057, 1058], "pairwise_distances_chunk": [2, 371, 787, 1049, 1052, 1058], "pairwise_indices_": 841, "pairwise_kernel": [2, 398, 426, 460, 470, 652, 774, 879, 1008, 1041, 1048, 1058], "pairwise_kernel_funct": [629, 652, 783], "pairwise_kernels_kwarg": 629, "pairwise_t_test": 276, "pairwisedistancesreduct": 372, "pairwisekernel": [2, 426], "paislei": [421, 545], "pakdd": 416, "pal": [1049, 1055], "palac": 83, "palacio": 1054, "palafox": 1041, "palett": [83, 191, 276], "palevioletr": [232, 303, 346], "palioura": [848, 1012], "paliw": 1049, "palladium": 1034, "palmol": 51, "pami": [381, 416, 734], "pamnani": 1049, "pan": 404, "panchal": 1053, "pancholi": 1048, "panda": [2, 43, 51, 62, 104, 105, 106, 138, 144, 145, 148, 151, 154, 156, 172, 180, 186, 190, 191, 192, 193, 194, 198, 203, 207, 218, 222, 226, 236, 255, 256, 259, 266, 270, 274, 276, 277, 279, 287, 288, 290, 294, 322, 323, 324, 326, 329, 330, 354, 358, 359, 378, 379, 382, 383, 384, 386, 387, 392, 398, 402, 409, 417, 440, 450, 451, 453, 455, 457, 472, 474, 476, 490, 491, 492, 493, 497, 498, 499, 501, 505, 509, 510, 511, 513, 514, 519, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 570, 571, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 641, 642, 644, 647, 648, 649, 650, 651, 697, 698, 701, 809, 812, 813, 823, 839, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 911, 935, 999, 1000, 1020, 1029, 1030, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "pandata": [1056, 1057], "pandei": [1048, 1053], "panel": [267, 302, 317, 422, 1029], "panga": [1056, 1057], "panico": [1049, 1053], "pankaj": 1053, "pano": 1047, "panpiort8": [1051, 1053], "paolo": [0, 406, 1041, 1045, 1051, 1059], "papadopoulo": [1054, 1055, 1056, 1057, 1058], "papapanagiot": 1048, "paper": [0, 173, 196, 270, 276, 381, 390, 396, 416, 418, 423, 450, 457, 486, 513, 543, 550, 572, 650, 667, 675, 676, 680, 685, 688, 701, 797, 850, 859, 862, 905, 906, 1006, 1010, 1013, 1016, 1025, 1041, 1048, 1049], "paper355": 680, "papier": [673, 694, 695], "par": 1020, "paraboloid": 1006, "paradi": 1056, "paradigm": 1006, "paragraph": [424, 512], "paralel": 1057, "parallel": [2, 53, 137, 142, 144, 145, 147, 188, 192, 193, 194, 220, 277, 327, 328, 330, 352, 366, 370, 376, 382, 384, 385, 387, 388, 396, 398, 417, 425, 427, 428, 445, 452, 454, 456, 457, 458, 460, 465, 466, 469, 472, 475, 480, 504, 540, 542, 543, 544, 546, 548, 550, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 598, 603, 611, 616, 617, 619, 641, 643, 648, 667, 697, 698, 699, 700, 701, 702, 703, 790, 809, 812, 813, 815, 820, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 872, 875, 908, 909, 976, 979, 1030, 1031, 1036, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1060], "parallel_backend": [2, 372, 427, 445, 452, 454, 456, 458, 460, 465, 466, 469, 472, 475, 480, 540, 544, 545, 546, 548, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 603, 611, 616, 617, 619, 641, 643, 648, 656, 660, 662, 664, 666, 667, 668, 670, 672, 674, 675, 677, 685, 688, 697, 698, 699, 700, 701, 702, 703, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 859, 861, 863, 864, 866, 867, 872, 875, 908, 909, 1049, 1059], "parallel_batch_queri": 297, "parallel_coordin": 277, "parallel_help": 1051, "parallelbackendbas": 979, "parallelis": [277, 476, 911, 1048], "param": [79, 90, 96, 97, 105, 149, 150, 152, 153, 238, 251, 252, 274, 276, 284, 288, 301, 313, 333, 384, 386, 398, 407, 423, 426, 430, 433, 439, 440, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 821, 823, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 965, 966, 969, 998, 999, 1047, 1051, 1052, 1054, 1055, 1058, 1059, 1060], "param1": 386, "param2": 386, "param3": 386, "param_": 144, "param_c": [287, 809], "param_classifier__c": 105, "param_covariance_typ": 266, "param_degre": 809, "param_dist": [284, 288, 328], "param_distribut": [105, 175, 277, 284, 288, 328, 397, 813, 821, 823, 1057], "param_gamma": [287, 809, 823], "param_grid": [43, 45, 105, 106, 107, 108, 144, 151, 251, 257, 266, 270, 274, 275, 276, 280, 281, 284, 287, 294, 299, 319, 333, 347, 398, 407, 417, 423, 751, 809, 812, 820, 821, 999, 1010], "param_kernel": [809, 823], "param_list": 821, "param_min_samples_split": 280, "param_n_compon": 266, "param_nam": [144, 277, 292, 332, 354, 407, 832, 840, 1005], "param_pca__n_compon": 107, "param_preprocessor__cat__selector__percentil": 105, "param_preprocessor__num__imputer__strategi": 105, "param_rang": [292, 332, 354, 832, 840, 1005, 1057], "param_reduce_dim__n_compon": 275, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 89, 90, 93, 95, 96, 97, 105, 106, 107, 112, 114, 115, 122, 124, 136, 138, 142, 144, 147, 148, 149, 152, 153, 154, 164, 170, 173, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 198, 199, 200, 201, 203, 205, 206, 207, 209, 218, 220, 222, 223, 226, 235, 236, 242, 243, 245, 247, 250, 251, 252, 261, 262, 263, 264, 266, 267, 269, 270, 275, 276, 277, 278, 280, 281, 284, 287, 288, 289, 292, 294, 297, 299, 300, 303, 304, 310, 312, 313, 315, 317, 318, 319, 322, 326, 327, 329, 330, 331, 332, 340, 342, 344, 349, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 367, 371, 372, 373, 376, 377, 379, 387, 389, 391, 392, 393, 396, 407, 411, 414, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "parameter": [362, 426, 623, 624, 631, 632, 806, 807, 1006, 1007, 1015, 1020, 1026], "parameter_grid": 277, "parameter_nam": [576, 577, 578, 579], "parametergrid": [2, 809, 1043, 1049], "parameters_str": 90, "parametersampl": [2, 823, 1043, 1049, 1053], "parametr": [2, 48, 61, 62, 115, 248, 301, 321, 329, 414, 417, 422, 423, 445, 560, 562, 644, 694, 705, 889, 901, 951, 952, 1006, 1009, 1012, 1013, 1020, 1023, 1026, 1049, 1051, 1054], "parametrize_with_check": [2, 326, 386, 932, 951, 1051, 1052, 1060], "params_str": 288, "parcel": [89, 102, 416], "parch": [193, 331], "pardeep": 1053, "parel": 1045, "parent": [47, 190, 252, 366, 384, 388, 398, 416, 450, 471, 966, 967, 1041, 1058], "parent_hourly_wag": 190, "parenthes": 947, "parenthesi": [76, 384], "paresh": [1050, 1051], "pareto": 220, "pargent": 1020, "pari": [0, 381, 417, 474, 773, 881, 1021, 1055], "pariet": [1034, 1041], "parikh": [1050, 1055, 1056, 1057, 1058, 1059], "parimi": 1059, "paris_in_radian": 773, "paristech": 0, "pariti": 1026, "parizi": 1056, "park": [1046, 1051, 1053, 1056, 1057], "parmet": 1058, "parmind": 1048, "parquet": 52, "parra": 1049, "parri": [1046, 1047, 1048], "parrot": 358, "pars": [47, 55, 371, 378, 379, 385, 517], "parse_vers": [152, 194, 326, 679], "parser": [47, 154, 270, 290, 326, 330, 505, 1056, 1057], "parsifalxu": 1059, "parsimoni": [421, 1020], "parsing_tim": 47, "parson": [1052, 1054], "part": [0, 44, 67, 71, 86, 96, 105, 115, 124, 127, 141, 144, 147, 151, 157, 164, 165, 166, 170, 180, 188, 198, 252, 254, 264, 270, 271, 273, 291, 312, 319, 322, 324, 360, 373, 379, 381, 384, 386, 390, 392, 397, 398, 402, 404, 412, 414, 415, 416, 420, 421, 423, 424, 426, 454, 457, 502, 503, 504, 530, 540, 546, 551, 583, 593, 594, 595, 622, 634, 802, 878, 896, 898, 899, 900, 901, 902, 903, 904, 999, 1000, 1002, 1007, 1011, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1041, 1049, 1050, 1052, 1054, 1056, 1060], "part3": 420, "part_of_speech": 424, "partev": [1055, 1056, 1057, 1058], "parthiv": 1053, "parti": [236, 294, 332, 372, 383, 386, 396, 410, 811, 818, 1041, 1052, 1057, 1058, 1060], "partial": [2, 43, 47, 51, 85, 116, 117, 156, 188, 189, 236, 244, 328, 331, 381, 384, 398, 401, 418, 419, 421, 423, 426, 472, 490, 491, 492, 493, 505, 510, 543, 545, 550, 571, 598, 641, 642, 666, 797, 839, 841, 842, 869, 870, 871, 874, 886, 887, 890, 893, 922, 1007, 1014, 1024, 1031, 1036, 1038, 1042, 1049, 1050, 1054, 1058], "partial_correl": 51, "partial_depend": [2, 192, 641, 1017, 1042, 1050, 1051, 1052, 1053, 1056, 1057], "partial_fit": [47, 85, 124, 330, 373, 386, 398, 416, 421, 450, 457, 543, 545, 546, 547, 598, 606, 667, 668, 675, 676, 677, 685, 686, 687, 841, 842, 845, 846, 848, 849, 850, 851, 852, 869, 870, 871, 882, 883, 893, 913, 998, 1006, 1012, 1014, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1058], "partial_fit_": 1054, "partial_fit_classifi": 47, "partial_fit_param": [606, 841, 842, 845, 846], "partialdependencedisplai": [2, 154, 156, 192, 256, 327, 328, 329, 331, 333, 391, 642, 1017, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "particip": [383, 384, 399, 1034], "particl": 1015, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 95, 105, 111, 122, 129, 132, 148, 151, 154, 155, 179, 186, 191, 192, 218, 220, 226, 250, 270, 273, 277, 279, 285, 297, 306, 310, 317, 326, 327, 330, 359, 360, 367, 371, 372, 378, 379, 382, 383, 384, 386, 388, 389, 390, 392, 393, 397, 398, 402, 416, 417, 420, 421, 423, 424, 425, 426, 454, 477, 481, 505, 553, 572, 618, 662, 667, 672, 681, 683, 693, 696, 721, 737, 794, 845, 938, 940, 1000, 1002, 1004, 1006, 1010, 1013, 1014, 1015, 1016, 1018, 1020, 1030, 1034, 1041, 1044, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1058], "particularli": [58, 67, 104, 105, 108, 133, 157, 191, 219, 247, 276, 290, 319, 327, 334, 356, 367, 371, 384, 386, 393, 398, 416, 417, 419, 422, 424, 505, 815, 832, 850, 957, 978, 1006, 1007, 1010, 1012, 1018, 1030, 1034, 1041, 1046, 1048, 1049, 1055], "partit": [81, 101, 104, 155, 157, 276, 314, 398, 413, 414, 416, 420, 423, 457, 459, 461, 470, 520, 566, 567, 568, 569, 572, 573, 574, 713, 714, 724, 795, 861, 921, 922, 923, 924, 1009, 1013, 1016, 1020, 1026], "partli": [81, 410, 778], "partnership": 1034, "parvu": 381, "pasbi": [1048, 1049], "pascal": 1010, "pascual": 1044, "paskov": 1048, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 144, 154, 156, 170, 200, 203, 219, 246, 248, 249, 252, 255, 256, 258, 266, 270, 274, 277, 324, 326, 329, 334, 352, 360, 367, 371, 372, 373, 379, 384, 385, 386, 389, 390, 391, 392, 393, 396, 398, 407, 410, 412, 415, 416, 417, 420, 421, 423, 424, 426, 427, 428, 433, 434, 438, 439, 445, 446, 448, 450, 451, 452, 454, 455, 456, 457, 458, 460, 462, 465, 467, 468, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 499, 501, 504, 505, 506, 512, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 590, 591, 597, 598, 599, 600, 602, 603, 606, 611, 616, 617, 619, 620, 626, 629, 635, 640, 641, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 720, 741, 742, 751, 772, 783, 787, 788, 789, 790, 797, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 890, 892, 893, 894, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 933, 938, 939, 940, 947, 951, 952, 956, 957, 959, 961, 964, 966, 969, 970, 979, 980, 983, 993, 998, 999, 1000, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1023, 1024, 1025, 1030, 1034, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "passiv": [2, 47, 225, 675, 676, 1032, 1036, 1042], "passiveaggress": [373, 424], "passiveaggressiveclassifi": [2, 47, 225, 371, 373, 1006, 1011, 1042, 1045, 1046, 1048, 1049, 1052, 1054, 1059], "passiveaggressiveregressor": [2, 373, 1006, 1042, 1045, 1048, 1049, 1052, 1054, 1059], "passo": [0, 406, 1041, 1042], "passthrough": [43, 106, 148, 191, 192, 218, 236, 255, 323, 331, 417, 472, 475, 576, 577, 872, 873, 1020, 1050, 1052, 1055, 1056, 1058], "passthrough_numer": [218, 236], "passthroughpassthrough": [192, 323], "past": [50, 52, 388, 389, 392, 396, 399, 420, 421, 423, 547, 564, 565, 687, 1034, 1057], "pat": [637, 1000], "patch": [2, 70, 85, 255, 261, 262, 263, 266, 267, 271, 379, 396, 421, 423, 564, 565, 592, 593, 596, 1041, 1049], "patch_height": [592, 593, 596], "patch_siz": [85, 127, 424, 592, 593, 596], "patch_width": [592, 593, 596], "patchextractor": [2, 424, 1057], "patel": [1049, 1051, 1052, 1053, 1055], "path": [2, 47, 55, 188, 197, 203, 204, 207, 209, 212, 222, 234, 354, 362, 378, 382, 384, 388, 392, 393, 398, 410, 449, 453, 458, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 517, 518, 557, 566, 567, 572, 573, 574, 575, 602, 603, 606, 655, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 690, 691, 692, 693, 694, 695, 697, 873, 874, 920, 921, 922, 923, 924, 963, 999, 1006, 1007, 1016, 1030, 1031, 1041, 1042, 1045, 1047, 1048, 1050, 1051, 1053, 1054, 1056, 1057], "path_length": 963, "path_method": [697, 1007], "pathak": [1056, 1057], "patheffect": 75, "pathlib": [47, 1056, 1057], "pathlik": [505, 1057], "patholog": [87, 1009, 1047], "pathwai": 385, "pati": 1043, "patienc": [392, 398], "patient": [46, 162, 173, 187, 381, 392, 415, 420, 1006], "patil": [1055, 1058], "paton": 1054, "patric": [1053, 1054], "patricio": 1055, "patrick": [1048, 1049, 1054, 1055, 1058, 1059], "patrini": [1046, 1047, 1048], "pattaniyil": 1051, "pattern": [43, 52, 58, 98, 115, 120, 123, 131, 175, 186, 188, 192, 203, 222, 252, 255, 329, 351, 358, 359, 360, 367, 381, 384, 386, 399, 413, 416, 417, 421, 423, 424, 456, 472, 474, 513, 541, 543, 550, 564, 565, 647, 717, 734, 750, 778, 797, 798, 806, 893, 1002, 1004, 1006, 1010, 1011, 1017, 1025, 1027, 1030, 1031, 1034, 1053], "patterson": [503, 1046], "paul": [379, 1044, 1047, 1048, 1049, 1050, 1054, 1055], "paula": [1051, 1052, 1059], "pauli": 1046, "paulo": [1048, 1054, 1056], "paus": 81, "pava": 644, "pavel": [1042, 1050], "pavlo": [1049, 1050], "pavlyk": [1049, 1050, 1051, 1052], "pawel": 1050, "pawe\u0142": [1044, 1048, 1053, 1054], "payn": 1051, "pazzani": 64, "pb_q": [329, 1006], "pbl": 151, "pc": [57, 340, 360, 379], "pca": [2, 11, 42, 45, 68, 69, 80, 86, 101, 103, 104, 106, 108, 109, 118, 123, 126, 133, 134, 165, 188, 215, 239, 241, 248, 250, 253, 257, 275, 284, 287, 297, 301, 306, 315, 329, 367, 376, 386, 398, 412, 416, 417, 422, 432, 481, 484, 492, 505, 511, 513, 523, 541, 542, 543, 544, 548, 549, 552, 553, 558, 652, 667, 697, 699, 701, 705, 809, 835, 839, 862, 869, 872, 873, 875, 883, 891, 893, 1002, 1004, 1007, 1013, 1020, 1024, 1026, 1031, 1035, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1058, 1059], "pca0": 432, "pca1": [417, 432], "pca2": [417, 432], "pca_2": 118, "pca__n_compon": 107, "pca_back_proj_ax": 129, "pca_estim": 124, "pca_proj_ax": 129, "pca_scor": 131, "pcapca": [106, 257], "pcd": [869, 1015], "pchelintsev": 1053, "pclass": [105, 193, 259, 326, 330, 331], "pcolor": 176, "pcolormesh": [70, 157, 166, 202, 300, 305, 343, 347, 351, 640], "pcr": [118, 419], "pd": [43, 51, 62, 105, 106, 138, 144, 145, 151, 156, 172, 186, 190, 191, 192, 193, 194, 198, 203, 207, 218, 222, 226, 236, 256, 259, 266, 274, 276, 277, 279, 287, 288, 290, 294, 322, 323, 324, 329, 330, 354, 358, 359, 389, 398, 417, 472, 474, 636, 637, 638, 639, 641, 787, 937, 939, 940, 999, 1000, 1017, 1020, 1052, 1054, 1055, 1056, 1058], "pd2000": 1010, "pd_": 1017, "pd_line_kw": 641, "pd_result": 641, "pdb": 392, "pdbcl": 392, "pdf": [173, 276, 302, 317, 381, 384, 416, 425, 450, 457, 540, 543, 546, 550, 650, 653, 658, 667, 673, 675, 676, 680, 685, 688, 691, 692, 694, 695, 701, 850, 862, 869, 906, 908, 1006, 1023, 1026, 1033, 1037, 1041], "pdist": [701, 787, 790], "pdp": [2, 641, 1017, 1055], "pdp_lim": 641, "pdp_line_kw": 641, "pe": 592, "pe_tran": 592, "peai": 1050, "peak": [43, 52, 64, 192, 414, 420, 1055], "pear": 1011, "pearson": [2, 615, 618, 1054], "pearu": 1041, "pedersen": [1045, 1057], "pedigo": [1053, 1054], "pedregosa": [0, 406, 1041, 1042, 1043, 1044, 1045, 1047], "pedro": [1042, 1044, 1045, 1049], "peek": [192, 384, 1017], "peer": 1034, "peev": [1049, 1052], "pegaso": 1024, "pei": [416, 1048], "peixinho": 1055, "pelennor": 1055, "penal": [2, 53, 66, 115, 159, 203, 207, 211, 218, 222, 234, 236, 322, 354, 416, 418, 421, 423, 425, 477, 478, 479, 480, 481, 482, 483, 484, 486, 570, 571, 656, 661, 662, 670, 672, 685, 714, 724, 743, 795, 804, 886, 913, 914, 920, 1006, 1010, 1012, 1014, 1024, 1025], "penalis": [216, 233, 705], "penalti": [2, 25, 46, 49, 66, 115, 188, 197, 198, 203, 206, 207, 211, 218, 222, 225, 233, 234, 247, 284, 312, 329, 340, 352, 358, 371, 392, 396, 418, 421, 425, 479, 480, 481, 482, 483, 484, 486, 511, 540, 546, 547, 548, 549, 551, 552, 556, 557, 606, 652, 655, 656, 657, 658, 661, 662, 663, 666, 667, 668, 669, 670, 671, 677, 678, 679, 681, 685, 687, 689, 690, 696, 823, 893, 913, 914, 916, 918, 919, 920, 999, 1006, 1009, 1014, 1020, 1024, 1025, 1031, 1043, 1046, 1048, 1050, 1051, 1053, 1054, 1056, 1057], "peng": [688, 1006, 1047, 1048, 1049, 1051, 1053], "peopl": [2, 45, 104, 191, 254, 279, 358, 359, 372, 373, 379, 381, 383, 384, 388, 399, 422, 502, 503, 650, 850, 1029], "pep": [51, 392, 1041], "pep073": 385, "pep257": 398, "pep440": 388, "pep8": [386, 388, 392], "pepsi": 51, "per": [43, 49, 58, 70, 83, 88, 99, 121, 143, 144, 148, 180, 182, 191, 192, 218, 233, 236, 255, 259, 262, 270, 272, 283, 285, 317, 323, 328, 333, 334, 354, 358, 360, 371, 379, 380, 384, 389, 390, 393, 396, 398, 414, 416, 420, 421, 422, 423, 424, 426, 454, 456, 458, 465, 469, 472, 476, 495, 505, 509, 511, 512, 513, 517, 519, 521, 524, 532, 541, 543, 544, 545, 548, 550, 552, 558, 559, 570, 571, 578, 592, 597, 600, 619, 620, 641, 642, 650, 651, 667, 668, 675, 676, 677, 680, 682, 683, 684, 685, 687, 701, 705, 722, 725, 729, 731, 750, 763, 767, 768, 790, 792, 806, 807, 834, 841, 842, 843, 845, 846, 849, 851, 869, 872, 878, 880, 882, 883, 886, 887, 893, 894, 911, 913, 914, 915, 916, 917, 918, 919, 944, 945, 957, 984, 999, 1002, 1006, 1009, 1010, 1011, 1014, 1017, 1024, 1025, 1026, 1030, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1057, 1058], "perc": 271, "percal": 390, "percent": [138, 501, 609, 1023], "percent10": [255, 501], "percentag": [2, 52, 89, 132, 148, 209, 236, 271, 279, 282, 420, 425, 543, 550, 553, 558, 602, 603, 657, 678, 689, 712, 743, 755, 827, 828, 829, 843, 925, 927, 1011, 1026, 1043, 1047, 1053, 1054], "percentil": [2, 49, 52, 105, 151, 154, 255, 259, 317, 371, 601, 604, 605, 607, 608, 609, 612, 615, 641, 642, 757, 1020, 1046, 1054], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 271, "percept": [168, 192, 1017], "perceptron": [2, 47, 67, 147, 157, 166, 177, 179, 188, 225, 228, 234, 256, 311, 319, 320, 341, 352, 373, 396, 424, 523, 524, 531, 675, 685, 839, 869, 870, 871, 874, 893, 1008, 1011, 1015, 1024, 1031, 1032, 1036, 1045, 1047, 1048, 1049, 1053], "percol": 74, "perdisci": [416, 450], "perdok": 1056, "pere": 1058, "peredachi": [616, 617], "pereira": [1046, 1049, 1050, 1060], "peretti": 1056, "perez": [1049, 1056], "perf_count": 255, "perfect": [58, 63, 72, 104, 114, 127, 129, 214, 218, 358, 359, 384, 416, 420, 562, 563, 699, 703, 713, 714, 717, 726, 735, 737, 740, 746, 752, 765, 766, 794, 795, 804, 1006, 1010, 1013, 1025, 1034, 1055], "perfectli": [63, 64, 72, 279, 291, 351, 401, 416, 423, 446, 576, 615, 713, 714, 724, 726, 745, 746, 766, 795, 804, 886, 1005, 1007, 1010, 1025, 1054, 1055], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 83, 84, 88, 92, 93, 94, 95, 96, 97, 99, 101, 102, 104, 105, 108, 111, 118, 127, 133, 136, 138, 144, 146, 148, 149, 150, 152, 153, 154, 158, 159, 164, 168, 171, 172, 173, 176, 184, 186, 187, 188, 191, 192, 193, 194, 196, 203, 207, 218, 220, 222, 224, 225, 226, 235, 236, 239, 240, 242, 245, 250, 253, 255, 262, 263, 266, 268, 270, 271, 272, 273, 274, 276, 277, 278, 281, 282, 284, 285, 287, 289, 290, 292, 294, 296, 297, 310, 315, 317, 319, 321, 323, 324, 326, 332, 333, 335, 337, 338, 347, 350, 351, 354, 358, 360, 367, 370, 372, 373, 379, 381, 386, 387, 388, 390, 392, 393, 396, 397, 398, 401, 407, 410, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 434, 438, 448, 450, 451, 452, 454, 455, 456, 458, 460, 462, 463, 467, 469, 476, 477, 490, 491, 492, 493, 503, 511, 521, 524, 540, 541, 542, 544, 546, 551, 552, 553, 554, 555, 557, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 603, 610, 611, 612, 619, 620, 636, 639, 640, 647, 649, 654, 660, 663, 664, 665, 667, 673, 674, 675, 676, 677, 679, 682, 684, 685, 686, 687, 691, 692, 694, 696, 698, 699, 702, 703, 706, 712, 713, 714, 716, 717, 721, 722, 735, 738, 739, 747, 749, 751, 764, 765, 766, 787, 792, 793, 795, 796, 797, 803, 804, 805, 806, 807, 809, 812, 813, 820, 821, 823, 827, 834, 835, 836, 838, 839, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 860, 862, 868, 869, 870, 871, 873, 874, 876, 879, 880, 882, 883, 885, 886, 887, 889, 890, 893, 894, 896, 898, 899, 900, 902, 903, 904, 908, 909, 911, 915, 916, 917, 918, 919, 921, 922, 923, 924, 939, 940, 982, 993, 998, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "performancetip": 390, "perhap": [104, 147, 381, 383, 392, 398, 422, 1030], "perimet": [173, 381], "period": [2, 52, 154, 175, 180, 184, 388, 398, 399, 414, 426, 624, 830, 892, 1049, 1054, 1056], "periodic_spline_transform": 43, "periodicity_bound": [175, 180, 184, 624], "peripheri": 416, "perla": 1044, "perm_scores_iri": 282, "perm_scores_rand": 282, "perm_sorted_idx": 194, "permalink": 388, "perman": 392, "permiss": [383, 388, 399, 402, 403, 1034, 1056], "permit": [417, 475, 597, 598, 600, 809, 812, 813, 823, 835, 874, 875, 1010, 1011, 1012, 1047], "permut": [2, 58, 59, 72, 114, 146, 152, 166, 168, 188, 189, 234, 268, 276, 321, 324, 339, 401, 411, 416, 423, 472, 505, 509, 513, 568, 569, 573, 574, 636, 639, 643, 688, 713, 714, 726, 745, 746, 764, 766, 804, 826, 828, 838, 839, 873, 887, 918, 921, 922, 957, 978, 980, 983, 1010, 1024, 1031, 1036, 1041, 1047, 1054, 1056], "permutation_import": [2, 145, 146, 152, 193, 194, 326, 423, 562, 563, 566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924, 1018, 1051, 1053, 1054, 1058], "permutation_scor": 838, "permutation_test_scor": [2, 282, 407, 420, 1041, 1048, 1053, 1060], "permuted_categori": 324, "perp_tol": 545, "perpendicular": [70, 352], "perperogl": 1020, "perplex": [188, 237, 238, 240, 242, 297, 523, 534, 545, 701, 1007, 1031, 1046, 1048, 1055], "perri": 1051, "perrin": 1047, "perrot": [0, 1041], "persian": 1029, "persist": [392, 396, 421, 454, 619, 620, 869, 1015, 1029, 1036, 1047, 1050], "persola": 1049, "person": [45, 191, 270, 279, 379, 383, 420, 424, 502, 503, 504, 1020, 1049], "personal_statu": 270, "perspect": [90, 95, 218, 290, 371, 379, 396, 399, 539, 652, 913, 1003], "pertin": 218, "perturb": [191, 235, 315, 421, 423, 1009], "peru": [50, 310, 379, 507], "pervas": [367, 384], "pessimist": [150, 423], "pessoa": 1054, "pestrickland": 1047, "pet": [329, 333, 797, 1010], "pet_cat": 329, "pet_dog": 329, "pet_fish": 329, "petal": [80, 120, 132, 134, 147, 259, 328, 331, 381, 417, 926, 1026], "petal_col": 331, "petar": 1056, "pete": [1048, 1052, 1053], "peter": [0, 98, 406, 416, 456, 458, 465, 658, 801, 802, 1006, 1010, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1056, 1057, 1058], "peterlongo": 1058, "peterson": [1041, 1043], "petfood": 1034, "petrov": [1048, 1049, 1057], "petrushev": 1050, "pe\u00f1a": 1045, "pfaffel": 1054, "pfahring": [844, 1011], "pfe": 51, "pfister": 1020, "pfizer": 51, "pft": 219, "pg": [51, 390, 658, 1006, 1046], "pg_i": 658, "pgithub": 1053, "ph": 1053, "pham": [196, 1002, 1048], "phan": 421, "pharmaceut": 381, "phase": [43, 203, 212, 371, 636, 1002, 1007, 1013, 1034, 1049, 1051], "phase_nois": 75, "phd": [0, 416, 423, 1030, 1034], "phenol": 381, "phenomena": 180, "phenomenon": [359, 1020], "phi": [75, 421, 423, 752, 879, 1002, 1010, 1020, 1025], "phi_coeffici": 1010, "phil": [1046, 1057], "philipp": [1043, 1044, 1047, 1056], "phillip": [2, 50, 310, 379, 507], "phlypo": 1044, "phongpanagnam": 1054, "phongpanangam": 1054, "photo": 83, "photogrammetr": 1006, "php": 1010, "phrase": 424, "phy": [616, 617], "phyo": 1055, "physic": [2, 104, 144, 372, 514, 974, 1006, 1057], "physician": 415, "physiolog": [279, 381], "pi": [43, 53, 70, 74, 75, 125, 133, 156, 158, 168, 175, 199, 203, 205, 212, 219, 240, 261, 262, 263, 266, 267, 291, 310, 327, 333, 365, 402, 422, 426, 525, 526, 527, 624, 651, 1004, 1005, 1006, 1012], "pianomania": 1046, "pick": [83, 90, 95, 194, 253, 284, 330, 336, 379, 384, 388, 416, 423, 451, 468, 532, 682, 923, 924, 999, 1006, 1007, 1009, 1024, 1052], "pickl": [388, 398, 424, 598, 853, 854, 1029, 1030, 1036, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058], "pickleabl": [877, 1047], "pickup": 1049, "pico": [1044, 1045], "pict": [843, 1011], "pictur": [51, 55, 59, 71, 83, 101, 188, 249, 267, 379, 399, 416, 421, 424, 470, 502, 503, 530, 1030, 1031], "piec": [70, 82, 219, 372, 1009], "piecewis": [133, 329, 413, 1001, 1006, 1020, 1026], "pierr": [1041, 1049, 1050, 1052, 1054, 1056, 1058, 1059], "pierreablin": 1049, "pierreattard": [1054, 1055], "pierretallott": [1049, 1050, 1051], "pierron": 1044, "piet": [1055, 1056], "pieter": [55, 1047, 1048, 1055], "pietro": [1041, 1044, 1058], "pietruh": 1049, "pig": 792, "pillow": [384, 402, 409], "pim": 1050, "pin": [390, 410], "pinaki": 1049, "pinbal": [2, 52, 151, 154, 329, 423, 571, 679, 732, 757, 1006, 1054, 1055], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [906, 1022, 1047, 1048], "pink": 199, "pinki": 1055, "pinot": 323, "pinto": 1041, "pintor": 1052, "pinvh": [1048, 1050], "piontek": 1057, "piotr": [1049, 1050, 1059], "pip": [297, 326, 327, 328, 329, 330, 331, 332, 333, 334, 372, 382, 384, 388, 390, 392, 402, 410, 412, 1026], "pip3": [382, 402], "pipe": [106, 107, 148, 171, 252, 257, 275, 323, 328, 329, 397, 407, 417, 424, 599, 873, 898, 899, 901, 902, 903, 904, 999, 1020], "pipe_sgd": 232, "pipegraph": 396, "pipelin": [2, 7, 43, 67, 89, 93, 105, 108, 109, 118, 143, 144, 148, 165, 167, 169, 171, 172, 173, 186, 187, 192, 193, 196, 198, 205, 207, 218, 219, 224, 232, 236, 239, 244, 245, 246, 248, 250, 255, 256, 259, 268, 270, 273, 275, 276, 283, 284, 287, 290, 291, 297, 299, 300, 305, 306, 312, 315, 319, 322, 324, 326, 327, 328, 329, 330, 331, 332, 340, 358, 359, 367, 371, 376, 378, 379, 384, 387, 398, 407, 410, 420, 424, 426, 430, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 496, 511, 524, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 616, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 706, 707, 709, 710, 711, 722, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 823, 827, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1000, 1002, 1006, 1013, 1014, 1019, 1020, 1024, 1025, 1029, 1030, 1031, 1032, 1034, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1058], "pipelineifittedpipelin": [105, 143, 170, 191, 193, 246, 256, 259, 283, 330], "pipelineinot": [159, 247, 257, 277, 290, 323, 327], "pipelinepipelin": [105, 106, 257, 270], "pita": 1058, "pitfal": [173, 188, 189, 190, 193, 214, 222, 223, 276, 328, 397, 398, 401, 420, 473, 475, 505, 662, 681, 682, 710, 762, 824, 836, 839, 874, 886, 893, 1006, 1031, 1036], "pitkin": [192, 1017], "pitt": 57, "pitter": 1056, "pivot": [81, 287, 288], "pivot_t": 287, "pixel": [2, 44, 45, 53, 58, 68, 82, 83, 88, 124, 137, 145, 171, 188, 193, 194, 196, 249, 274, 314, 315, 381, 416, 421, 423, 424, 425, 502, 503, 504, 573, 594, 595, 616, 617, 643, 1013, 1015, 1026, 1031], "pixelwis": 124, "pixi": 410, "piyg": 319, "pkdd": 0, "pkg": 382, "pkgsrc": 402, "pkl": 410, "pl": [2, 52, 107, 118, 180, 333, 381, 419, 490, 491, 492, 493, 1046], "place": [2, 43, 95, 246, 256, 301, 371, 384, 385, 386, 389, 391, 399, 414, 424, 426, 449, 450, 453, 454, 490, 491, 492, 524, 590, 599, 637, 639, 640, 777, 790, 806, 896, 898, 899, 900, 901, 902, 903, 904, 988, 989, 1029, 1041, 1048, 1051, 1052, 1054, 1058, 1059, 1060], "placehold": [57, 388, 636, 637, 638, 639, 824, 825, 828, 829, 998, 1000], "plagre": 1048, "plai": [125, 152, 177, 202, 227, 269, 308, 343, 344, 371], "plain": [349, 426, 666, 1024], "plan": [51, 378, 382, 384, 385, 399, 410, 1020, 1044], "planar": 416, "plane": [51, 173, 230, 250, 303, 349, 351, 352, 356, 381, 460, 470, 1004, 1006, 1025], "plant": [282, 285, 286, 377, 1010, 1036], "plasma": 317, "plasma_r": 317, "plateau": [144, 149, 172, 270, 274, 278], "platform": [387, 398, 399, 1029, 1033, 1034, 1046, 1049, 1050, 1052, 1054, 1055, 1058, 1059], "platt": [414, 445, 915, 916, 918, 919, 1025], "platypu": 358, "pldtc325": 1048, "pleas": [0, 2, 51, 55, 63, 105, 106, 143, 145, 146, 152, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 222, 246, 247, 248, 250, 252, 255, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 297, 307, 315, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 351, 366, 372, 378, 379, 382, 384, 385, 386, 388, 392, 396, 397, 398, 402, 407, 410, 412, 416, 423, 424, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 505, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 836, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1010, 1014, 1020, 1024, 1025, 1029, 1030, 1033, 1041, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "pleasant": [383, 1034], "plenti": 62, "plgreenliru": 1052, "plo": [378, 616, 617], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 80, 89, 90, 91, 93, 94, 95, 96, 97, 100, 106, 107, 108, 109, 112, 113, 114, 118, 119, 124, 127, 128, 131, 132, 133, 134, 137, 138, 140, 141, 142, 143, 145, 149, 150, 151, 153, 154, 156, 157, 158, 166, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 193, 194, 196, 197, 201, 202, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 230, 231, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 248, 249, 251, 253, 254, 259, 261, 262, 263, 265, 267, 268, 269, 270, 271, 276, 277, 279, 281, 282, 286, 287, 288, 290, 291, 294, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 318, 319, 320, 321, 322, 324, 327, 330, 331, 332, 333, 337, 338, 341, 342, 343, 347, 348, 349, 352, 353, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 384, 387, 393, 396, 401, 402, 411, 414, 416, 418, 420, 422, 423, 446, 449, 454, 458, 464, 472, 479, 505, 510, 511, 513, 521, 524, 528, 532, 562, 566, 569, 571, 573, 574, 578, 579, 619, 631, 640, 641, 642, 666, 667, 681, 685, 706, 707, 709, 710, 711, 712, 727, 736, 744, 770, 791, 793, 796, 797, 798, 809, 815, 826, 832, 834, 835, 836, 837, 840, 842, 851, 855, 871, 874, 886, 887, 888, 890, 893, 913, 915, 918, 921, 922, 927, 1003, 1004, 1006, 1007, 1009, 1010, 1013, 1014, 1016, 1024, 1025, 1026, 1029, 1030, 1031, 1036, 1042, 1044, 1045, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "plot_": [329, 402], "plot_2d": [122, 238], "plot_3d": 238, "plot_accuraci": 47, "plot_adaboost_multiclass": [138, 1031], "plot_adaboost_regress": [139, 1031], "plot_adaboost_twoclass": [140, 1031], "plot_adjusted_for_chance_measur": [72, 1031], "plot_affinity_propag": [73, 448, 462, 1031], "plot_agglomerative_clust": [74, 1031], "plot_agglomerative_clustering_metr": [75, 1031], "plot_agglomerative_dendrogram": [76, 1031], "plot_all_sc": [317, 1031], "plot_anomaly_comparison": [245, 1031], "plot_ard": [198, 653, 1031], "plot_arg": 313, "plot_bayesian_ridge_curvefit": [199, 1031], "plot_benchmark_throughput": 49, "plot_bias_vari": [141, 1031], "plot_bicluster_newsgroup": [57, 1031], "plot_birch_vs_minibatchkmean": [77, 1031], "plot_bisect_kmean": [78, 1031], "plot_caching_nearest_neighbor": [299, 1031], "plot_calibr": [61, 384, 1031], "plot_calibration_curv": [62, 1031], "plot_calibration_multiclass": [63, 1031], "plot_causal_interpret": [190, 1031], "plot_chance_level": [255, 270, 283, 285, 286, 709, 711, 1057], "plot_classif": [300, 1031], "plot_classification_prob": [66, 1031], "plot_classifier_chain_yeast": [296, 1031], "plot_classifier_comparison": [67, 1031], "plot_clust": 87, "plot_cluster_comparison": [79, 1031], "plot_cluster_iri": [80, 1031], "plot_coin_segment": [81, 1031], "plot_coin_ward_segment": [82, 1031], "plot_color": [140, 363], "plot_color_quant": [83, 1031], "plot_column_transform": [104, 1031], "plot_column_transformer_mixed_typ": [105, 1031], "plot_compare_calibr": [64, 1031], "plot_compare_cross_decomposit": [117, 1031], "plot_compare_gpr_krr": [175, 1031], "plot_compare_method": [238, 1031], "plot_compare_reduct": [106, 1031], "plot_concentration_prior": [261, 1031], "plot_confusion_matrix": [269, 326, 1031, 1051, 1052, 1053, 1054], "plot_cost_complexity_prun": [362, 1031], "plot_cost_sensitive_learn": [270, 1031], "plot_covariance_estim": [111, 1031], "plot_custom_kernel": [343, 1031], "plot_cv_diabet": [164, 1031], "plot_cv_indic": [271, 1031], "plot_cv_predict": [272, 1031], "plot_cyclical_feature_engin": [43, 1031], "plot_dbscan": [84, 427, 452, 1031], "plot_decision_funct": 356, "plot_dendrogram": 76, "plot_det": [273, 1031], "plot_det_curv": [1053, 1054], "plot_dict_face_patch": [85, 1031], "plot_digit": 44, "plot_digits_agglomer": [86, 1031], "plot_digits_classif": [68, 1031], "plot_digits_classification_exercis": [165, 1031], "plot_digits_denois": [44, 1031], "plot_digits_kde_sampl": [301, 1031], "plot_digits_linkag": [87, 1031], "plot_digits_pip": [107, 1031], "plot_discret": [318, 1031], "plot_discretization_classif": [319, 1031], "plot_discretization_strategi": [320, 1031], "plot_display_object_visu": [246, 1031], "plot_distribut": 317, "plot_document_classification_20newsgroup": [358, 1031], "plot_document_clust": [359, 1031], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [200, 1031], "plot_ellips": [70, 261], "plot_embed": 239, "plot_ensemble_oob": [142, 1031], "plot_estimator_represent": [247, 1031], "plot_f_test_vs_mi": [168, 1031], "plot_face_compress": [88, 1031], "plot_face_recognit": [45, 1031], "plot_faces_decomposit": [124, 1031], "plot_feature_agglomeration_vs_univariate_select": [89, 1031], "plot_feature_effect": 358, "plot_feature_select": [169, 1031], "plot_feature_selection_pipelin": [170, 1031], "plot_feature_transform": [143, 1031], "plot_feature_union": [108, 1031], "plot_fig": 215, "plot_forest_hist_grad_boosting_comparison": [144, 1031], "plot_forest_import": [145, 1031], "plot_forest_importances_fac": [146, 1031], "plot_forest_iri": [147, 1031], "plot_galleri": [45, 124], "plot_gmm": [262, 1031], "plot_gmm_covari": [263, 1031], "plot_gmm_init": [264, 1031], "plot_gmm_pdf": [265, 1031], "plot_gmm_select": [266, 1031], "plot_gmm_sin": [267, 1031], "plot_gpc": [176, 1031], "plot_gpc_iri": [177, 1031], "plot_gpc_isoprob": [178, 1031], "plot_gpc_xor": [179, 1031], "plot_gpr_co2": [180, 1031], "plot_gpr_noisi": [181, 1031], "plot_gpr_noisy_target": [182, 1031], "plot_gpr_on_structured_data": [183, 1031], "plot_gpr_prior_posterior": [184, 1031], "plot_gpr_sampl": 184, "plot_gradient_boosting_categor": [148, 1031], "plot_gradient_boosting_early_stop": [149, 1031], "plot_gradient_boosting_oob": [150, 1031], "plot_gradient_boosting_quantil": [151, 1031], "plot_gradient_boosting_regress": [152, 1031], "plot_gradient_boosting_regular": [153, 1031], "plot_grid_search_digit": [274, 1031], "plot_grid_search_refit_cal": [275, 1031], "plot_grid_search_stat": [276, 1031], "plot_grid_search_text_feature_extract": [277, 1031], "plot_hashing_vs_dict_vector": [360, 1031], "plot_hdbscan": [90, 1031], "plot_hgbt_regress": [154, 1031], "plot_huber_vs_ridg": [201, 1031], "plot_hyperplan": [210, 227, 253], "plot_ica_blind_source_separ": [125, 1031], "plot_ica_vs_pca": [126, 1031], "plot_idx": 147, "plot_image_denois": [127, 1031], "plot_incremental_pca": [128, 1031], "plot_indic": 279, "plot_inductive_clust": [91, 1031], "plot_influ": 46, "plot_info": 148, "plot_iris_dataset": [120, 1031], "plot_iris_dtc": [363, 1031], "plot_iris_exercis": [166, 1031], "plot_iris_logist": [202, 1031], "plot_iris_svc": [344, 1031], "plot_isolation_forest": [155, 1031], "plot_isotonic_regress": [248, 1031], "plot_iterative_imputer_variants_comparison": [186, 1031], "plot_johnson_lindenstrauss_bound": [249, 1031], "plot_kde_1d": [302, 1031], "plot_kernel_approxim": [250, 1031], "plot_kernel_pca": [129, 1031], "plot_kernel_ridge_regress": [251, 1031], "plot_kind": 43, "plot_kmeans_assumpt": [92, 1031], "plot_kmeans_digit": [93, 1031], "plot_kmeans_plusplu": [94, 1031], "plot_kmeans_silhouette_analysi": [95, 1031], "plot_kmeans_stability_low_dim_dens": [96, 1031], "plot_label_propagation_digit": [336, 1031], "plot_label_propagation_digits_active_learn": [337, 1031], "plot_label_propagation_structur": [338, 1031], "plot_lasso_and_elasticnet": [203, 1031], "plot_lasso_dense_vs_sparse_data": [204, 1031], "plot_lasso_lars_": [205, 1031], "plot_lasso_lasso_lars_elasticnet_path": [206, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 1031], "plot_lasso_model_select": [207, 656, 662, 1031], "plot_lda": [69, 1031], "plot_lda_qda": [70, 1031], "plot_learning_curv": [278, 1031], "plot_likelihood_ratio": [279, 1031], "plot_linear_model_coefficient_interpret": [191, 1031], "plot_linearsvc_support_vector": [345, 1031], "plot_linkage_comparison": [97, 1031], "plot_lle_digit": [239, 1031], "plot_lof_novelty_detect": [303, 1031], "plot_lof_outlier_detect": [304, 1031], "plot_logist": [208, 1031], "plot_logistic_l1_l2_spars": [209, 1031], "plot_logistic_multinomi": [210, 1031], "plot_logistic_path": [211, 1031], "plot_lw_vs_oa": [112, 1031], "plot_mahalanobis_dist": [113, 1031], "plot_manifold_spher": [240, 1031], "plot_map_data_to_norm": [321, 1031], "plot_md": [241, 1031], "plot_mean_shift": [98, 1031], "plot_metadata_rout": [252, 1031], "plot_method": [48, 70, 202, 232, 300, 305, 343, 345, 346, 348, 349, 351, 640], "plot_mini_batch_kmean": [99, 1031], "plot_missing_valu": [187, 1031], "plot_mlp_alpha": [312, 1031], "plot_mlp_training_curv": [313, 1031], "plot_mnist_filt": [314, 1031], "plot_model_complexity_influ": [46, 1031], "plot_monotonic_constraint": [156, 1031], "plot_multi_metric_evalu": [280, 1031], "plot_multi_task_lasso_support": [212, 1031], "plot_multiclass_overview": [294, 1031], "plot_multilabel": [253, 1031], "plot_multioutput_face_complet": [254, 1031], "plot_n_features_influ": 49, "plot_nca_classif": [305, 1031], "plot_nca_dim_reduct": [306, 1031], "plot_nca_illustr": [307, 1031], "plot_nearest_centroid": [308, 1031], "plot_nested_cross_validation_iri": [281, 1031], "plot_nnl": [213, 1031], "plot_num": [79, 97, 245], "plot_obs_pr": 236, "plot_ol": [214, 1031], "plot_ols_3d": [215, 1031], "plot_ols_ridge_vari": [216, 1031], "plot_omp": [217, 1031], "plot_on_dataset": 313, "plot_oneclass": [346, 1031], "plot_opt": [100, 1031], "plot_out_of_core_classif": [47, 1031], "plot_outlier_detection_bench": [255, 1031], "plot_outlier_detection_win": [48, 1031], "plot_partial_depend": [192, 326, 327, 328, 1031, 1046, 1050, 1051, 1052, 1053, 1054, 1055], "plot_partial_dependence_visualization_api": [256, 1031], "plot_pca_iri": [130, 1031], "plot_pca_vs_fa_model_select": [131, 1031], "plot_pca_vs_lda": [132, 1031], "plot_pcr_vs_pl": [118, 1031], "plot_permutation_import": [193, 194, 1031], "plot_permutation_importance_multicollinear": [194, 1031], "plot_permutation_tests_for_classif": [282, 1031], "plot_pipeline_displai": [257, 1031], "plot_poisson_regression_non_normal_loss": [218, 1031], "plot_polynomial_interpol": [219, 888, 892, 1031], "plot_precision_recal": [283, 1031], "plot_precision_recall_curv": [326, 1051, 1053, 1054], "plot_prediction_lat": [49, 1031], "plot_quantile_regress": [220, 1031], "plot_random_dataset": [121, 1031], "plot_random_forest_embed": [157, 1031], "plot_random_forest_regression_multioutput": [158, 1031], "plot_random_multilabel_dataset": [122, 1031], "plot_randomized_search": [284, 1031], "plot_rang": 140, "plot_ransac": [221, 1031], "plot_rbf_paramet": [347, 1031], "plot_rbm_logistic_classif": [315, 1031], "plot_regress": [309, 1031], "plot_release_highlights_0_22_0": [326, 1031], "plot_release_highlights_0_23_0": [327, 1031], "plot_release_highlights_0_24_0": [328, 1031], "plot_release_highlights_1_0_0": [329, 1031], "plot_release_highlights_1_1_0": [330, 1031], "plot_release_highlights_1_2_0": [331, 1031], "plot_release_highlights_1_3_0": [332, 1031], "plot_release_highlights_1_4_0": [333, 1031], "plot_release_highlights_1_5_0": [334, 1031], "plot_result": [70, 148, 261, 262, 267], "plot_rfe_digit": [171, 1031], "plot_rfe_with_cross_valid": [172, 1031], "plot_ridge_coeff": [222, 1031], "plot_ridge_path": [223, 1031], "plot_robust_fit": [224, 1031], "plot_robust_vs_empirical_covari": [114, 1031], "plot_roc": [285, 1031], "plot_roc_crossv": [286, 1031], "plot_roc_curv": [326, 1051, 1053], "plot_roc_curve_visualization_api": [258, 1031], "plot_roc_pr_curv": 270, "plot_sampl": [126, 267], "plot_scalable_poly_kernel": [196, 1031], "plot_scaling_import": [322, 1031], "plot_scatt": 91, "plot_segmentation_toi": [101, 1031], "plot_select_from_model_diabet": [173, 1031], "plot_self_training_varying_threshold": [339, 1031], "plot_semi_supervised_newsgroup": [340, 1031], "plot_semi_supervised_versus_svm_iri": [341, 1031], "plot_separating_hyperplan": [348, 1031], "plot_separating_hyperplane_unbalanc": [349, 1031], "plot_set_output": [259, 1031], "plot_sgd_comparison": [225, 1031], "plot_sgd_early_stop": [226, 1031], "plot_sgd_iri": [227, 1031], "plot_sgd_loss_funct": [228, 1031], "plot_sgd_penalti": [229, 1031], "plot_sgd_separating_hyperplan": [230, 1031], "plot_sgd_weighted_sampl": [231, 1031], "plot_sgdocsvm_vs_ocsvm": [232, 1031], "plot_sparse_cod": [133, 1031], "plot_sparse_cov": [115, 1031], "plot_sparse_logistic_regression_20newsgroup": [233, 1031], "plot_sparse_logistic_regression_mnist": [234, 1031], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 507, 1031], "plot_species_kd": [310, 1031], "plot_spectral_biclust": [58, 1031], "plot_spectral_coclust": [59, 1031], "plot_stack_predictor": [159, 1031], "plot_step": [140, 147, 363], "plot_step_coars": 147, "plot_stock_market": [51, 1031], "plot_subfigur": 253, "plot_successive_halving_heatmap": [287, 1031], "plot_successive_halving_iter": [288, 1031], "plot_surfac": [192, 215], "plot_svm_anova": [350, 1031], "plot_svm_kernel": [351, 1031], "plot_svm_margin": [352, 1031], "plot_svm_regress": [353, 1031], "plot_svm_scale_c": [354, 1031], "plot_svm_tie_break": [355, 1031], "plot_swissrol": [242, 1031], "plot_t_sne_perplex": [243, 1031], "plot_target_encod": [323, 1031], "plot_target_encoder_cross_v": [324, 1031], "plot_theilsen": [235, 1031], "plot_time_series_lagged_featur": [52, 1031], "plot_titl": 261, "plot_tomography_l1_reconstruct": [53, 1031], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1031], "plot_train_error_vs_test_error": [289, 1031], "plot_training_data_with_decision_boundari": 351, "plot_transformed_target": [109, 1031], "plot_tre": [2, 363, 366, 1026, 1050, 1052, 1053, 1054, 1056, 1057, 1059], "plot_tree_regress": [364, 1031], "plot_tree_regression_multioutput": [365, 1031], "plot_tuned_decision_threshold": [290, 1031], "plot_tweedie_regression_insurance_claim": [236, 1031], "plot_underfitting_overfit": [291, 1031], "plot_unveil_tree_structur": [366, 1031], "plot_validation_curv": [292, 1031], "plot_varimax_fa": [134, 1031], "plot_voting_decision_region": [160, 1031], "plot_voting_proba": [161, 1031], "plot_voting_regressor": [162, 1031], "plot_ward_structured_vs_unstructur": [102, 1031], "plot_weighted_sampl": [356, 1031], "plotli": [144, 277, 384, 402, 409], "pls1": [419, 492], "pls2": [419, 492], "plsca": [117, 491], "plscanon": [2, 117, 490, 492, 493, 1011, 1032, 1036, 1045, 1049, 1051, 1053, 1055, 1059], "plsregress": [2, 117, 118, 1011, 1032, 1036, 1048, 1051, 1053, 1055, 1057, 1059, 1060], "plssvd": [2, 490, 491, 1032, 1036, 1053, 1055, 1059], "plsw2a": 419, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 333, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 391, 446, 511, 640, 641, 706, 707, 709, 710, 711, 815, 832, 927, 1017, 1038], "plu": [283, 381, 389, 688, 844, 847, 1011, 1024], "plug": [421, 1006, 1034], "plugin": 402, "plural": 1047, "pm": [184, 192, 286, 423, 1010], "pmlr": 705, "pmml": 1029, "png": [0, 68, 925], "pnucci": 1057, "po": [152, 241, 424], "podshumok": [1047, 1048], "poesio": 725, "poetri": 410, "poh": [1049, 1050], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 83, 84, 87, 90, 93, 95, 99, 102, 113, 114, 117, 120, 121, 122, 123, 125, 127, 129, 138, 140, 144, 147, 148, 149, 154, 157, 172, 173, 177, 182, 183, 188, 191, 192, 193, 198, 202, 207, 210, 212, 214, 216, 218, 219, 220, 222, 224, 227, 230, 231, 235, 236, 238, 239, 240, 241, 242, 245, 248, 250, 263, 267, 268, 269, 273, 277, 278, 279, 283, 285, 286, 294, 296, 297, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 318, 319, 321, 323, 334, 336, 337, 339, 341, 343, 347, 348, 349, 351, 352, 355, 356, 358, 359, 360, 363, 367, 371, 372, 373, 378, 379, 380, 381, 382, 383, 384, 386, 388, 389, 390, 392, 396, 398, 399, 412, 415, 416, 421, 422, 423, 424, 427, 428, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 468, 469, 477, 480, 482, 505, 507, 513, 521, 523, 524, 528, 531, 534, 539, 542, 544, 550, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 619, 620, 637, 640, 641, 642, 646, 647, 648, 653, 654, 660, 664, 666, 667, 679, 680, 682, 684, 685, 687, 688, 691, 692, 697, 698, 699, 700, 701, 702, 703, 710, 715, 716, 719, 722, 726, 732, 734, 740, 745, 746, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 773, 788, 789, 799, 800, 806, 807, 809, 823, 825, 831, 834, 836, 843, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 870, 871, 874, 878, 883, 892, 893, 907, 908, 909, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 937, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1022, 1023, 1025, 1026, 1029, 1030, 1031, 1036, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "pointer": [384, 392, 450, 1050], "pointplot": 154, "points_color": 238, "pointwis": [141, 182, 427, 452], "poisson": [2, 43, 52, 188, 197, 253, 380, 423, 472, 473, 505, 532, 561, 567, 571, 574, 657, 678, 681, 689, 715, 733, 754, 758, 759, 761, 839, 873, 874, 877, 878, 886, 887, 888, 893, 922, 924, 961, 1006, 1026, 1031, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "poisson_gbrt": 218, "poisson_glm": 218, "poissonregressor": [2, 218, 236, 327, 330, 657, 689, 1006, 1052, 1055, 1056], "pokorni": 1056, "pola": 52, "polar": [107, 180, 384, 402, 409, 440, 450, 451, 453, 455, 457, 472, 476, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 570, 571, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 697, 698, 701, 857, 862, 865, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 911, 1058, 1059], "pole": 240, "poli": [43, 166, 196, 276, 344, 351, 353, 460, 544, 629, 774, 783, 809, 888, 915, 916, 917, 918, 919, 1006, 1020], "polici": [154, 190, 191, 218, 236, 270, 387, 398, 544, 550, 1006, 1056], "policyhold": [218, 236, 1006], "polit": [57, 358, 379, 383, 1006, 1011], "pollak": 1059, "polli": 358, "pollut": [358, 737, 794, 1010, 1016], "polmauri": 1048, "poloso": 1055, "polycollect": [815, 832], "polynomi": [2, 54, 186, 188, 195, 197, 218, 224, 250, 257, 276, 291, 302, 328, 329, 344, 353, 376, 380, 460, 499, 629, 648, 649, 650, 652, 654, 681, 774, 783, 784, 839, 874, 883, 885, 888, 892, 913, 915, 916, 917, 918, 919, 1005, 1025, 1031, 1032, 1036, 1053, 1054], "polynomial_featur": 291, "polynomial_kernel": [2, 412, 774, 1008, 1058, 1060], "polynomialcountsketch": [2, 196, 648, 650, 1002, 1053, 1055, 1058], "polynomialfeatur": [2, 43, 198, 218, 219, 224, 257, 291, 328, 351, 892, 1006, 1020, 1045, 1049, 1050, 1051, 1054, 1055, 1057, 1058], "polynomialfeaturespolynomialfeatur": 257, "polysemi": 421, "polytop": 524, "pomegran": 1029, "ponc": [421, 540, 546], "poncho": 1034, "pone": 378, "ponnuthurai": 381, "ponzi": 323, "pooch": [88, 384, 402, 409], "pooja": [1056, 1057, 1058], "pool": [285, 396, 453, 644, 978, 1030, 1052], "pooling_func": [453, 1049], "poolqc": 148, "poolsawat": [1055, 1056], "poor": [192, 196, 282, 292, 339, 414, 420, 421, 699, 703, 747, 850, 853, 854, 1004, 1005, 1007, 1012, 1030, 1048, 1049, 1050, 1052, 1054], "poor_scor": [929, 931], "poorer": [148, 367, 421], "poorest": 1012, "poorli": [62, 64, 97, 111, 118, 141, 153, 242, 372, 416, 423, 537, 639, 1006, 1007, 1047], "poorna": [1051, 1053], "pop": [366, 396, 928, 1049], "popa": [1051, 1052], "popitem": 928, "popo": 1044, "popul": [106, 111, 113, 154, 191, 218, 255, 279, 317, 379, 393, 398, 418, 448, 498, 721, 727, 855, 856, 857, 859, 861, 863, 864, 865, 978, 1010, 1016, 1020, 1026], "popular": [6, 10, 186, 242, 379, 382, 389, 392, 396, 398, 422, 423, 424, 426, 460, 470, 1000, 1002, 1006, 1008, 1015, 1024, 1030], "port": [382, 402, 1051], "portabl": [410, 1029], "portfolio": [218, 236, 1004], "portion": [45, 47, 114, 149, 173, 285, 371, 379, 381, 384, 390, 398, 797, 834, 851, 999, 1009, 1013], "portland": [416, 427, 452], "portnoi": [1006, 1058], "portrait": [45, 421], "pos_class": 47, "pos_label": [246, 255, 270, 290, 398, 415, 446, 447, 707, 709, 711, 715, 716, 718, 736, 738, 739, 747, 791, 792, 793, 796, 798, 808, 880, 897, 1010, 1049, 1053, 1055, 1059], "pos_lr": 279, "pos_lr_bas": 279, "pos_lr_base_std": 279, "pos_tagg": 424, "pos_vector": 424, "pos_window": 424, "pose": [222, 284, 1006], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 102, 134, 154, 156, 161, 171, 184, 190, 191, 203, 206, 213, 218, 219, 220, 222, 236, 241, 249, 255, 270, 273, 276, 279, 283, 285, 286, 290, 317, 327, 328, 332, 334, 358, 366, 371, 379, 383, 384, 386, 391, 393, 398, 399, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 428, 446, 447, 450, 454, 455, 457, 472, 475, 503, 507, 509, 513, 517, 518, 519, 534, 536, 538, 539, 540, 542, 544, 545, 546, 551, 554, 555, 557, 558, 559, 566, 570, 571, 572, 573, 601, 602, 603, 604, 605, 607, 608, 609, 611, 615, 619, 620, 629, 640, 641, 652, 655, 656, 657, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 681, 682, 683, 684, 686, 689, 690, 691, 692, 693, 696, 699, 707, 709, 711, 716, 718, 721, 722, 724, 725, 727, 729, 731, 733, 736, 738, 739, 740, 744, 745, 747, 748, 749, 750, 751, 752, 753, 761, 763, 767, 775, 791, 792, 793, 796, 797, 798, 806, 807, 808, 812, 813, 836, 853, 854, 855, 857, 859, 861, 863, 865, 866, 876, 877, 880, 886, 889, 892, 897, 901, 905, 906, 908, 909, 913, 914, 917, 918, 919, 921, 923, 930, 933, 936, 955, 957, 974, 976, 1001, 1002, 1006, 1008, 1010, 1011, 1013, 1014, 1015, 1017, 1020, 1025, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "position": 398, "positive_class": [47, 721], "positive_cod": [124, 540, 546, 551, 554, 555], "positive_dict": [124, 540, 546, 554, 555], "positive_featur": 389, "positive_likelihood_ratio": [279, 721], "positive_onli": [930, 933], "posix": [372, 396], "posixpath": 52, "possa": 1048, "possibl": [30, 43, 52, 55, 63, 64, 72, 84, 90, 105, 111, 124, 141, 144, 154, 156, 175, 191, 192, 193, 194, 218, 235, 236, 250, 252, 270, 276, 277, 278, 279, 281, 282, 283, 285, 286, 296, 326, 347, 354, 358, 359, 367, 371, 372, 373, 377, 378, 379, 384, 385, 386, 387, 388, 390, 392, 396, 397, 398, 402, 407, 410, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 426, 428, 430, 439, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 470, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 505, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 718, 730, 731, 732, 733, 737, 751, 765, 787, 792, 794, 797, 806, 807, 808, 809, 811, 812, 813, 815, 821, 822, 823, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 937, 939, 940, 943, 949, 980, 983, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1018, 1020, 1025, 1026, 1030, 1034, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057], "possibli": [92, 118, 173, 218, 233, 351, 359, 381, 383, 392, 410, 416, 423, 424, 459, 461, 598, 848, 849, 850, 851, 852, 918, 919, 921, 922, 923, 924, 999, 1002, 1007, 1013, 1020, 1056, 1060], "post": [2, 46, 54, 57, 104, 172, 173, 188, 246, 268, 280, 283, 294, 330, 334, 339, 358, 359, 360, 361, 366, 371, 379, 383, 384, 389, 397, 411, 416, 456, 496, 497, 505, 509, 560, 566, 567, 568, 569, 570, 573, 574, 667, 709, 711, 721, 727, 751, 793, 796, 808, 809, 825, 831, 836, 839, 874, 893, 911, 921, 922, 923, 924, 1010, 1026, 1031, 1033, 1034, 1036, 1052], "post1": [382, 402, 408, 409, 1039], "poster": [358, 383, 384], "posterior": [92, 174, 175, 176, 181, 188, 198, 270, 276, 290, 421, 426, 558, 559, 561, 619, 620, 622, 623, 624, 628, 631, 632, 636, 653, 654, 717, 806, 808, 831, 1004, 1029, 1031, 1047, 1050], "posteriori": [1006, 1012], "postfit_hook": 46, "postiv": 283, "postpon": [386, 388], "postprocess": [61, 414, 544, 550], "postprocessor": 1052, "postscript": 925, "potenti": [2, 43, 64, 90, 111, 154, 187, 190, 192, 198, 270, 303, 304, 312, 332, 333, 351, 360, 371, 372, 382, 398, 402, 407, 415, 416, 420, 423, 424, 476, 490, 491, 492, 493, 505, 533, 558, 566, 567, 570, 571, 573, 574, 582, 615, 620, 643, 772, 831, 903, 904, 911, 921, 922, 923, 924, 1016, 1024, 1026, 1029, 1044, 1051, 1052, 1055, 1058, 1059], "poughon": 1048, "poundal": 104, "pour": 1010, "pourbozorg": [1049, 1050, 1051], "pow": [685, 686, 687, 870, 871], "powel": [45, 379], "power": [2, 43, 46, 55, 144, 149, 190, 219, 236, 267, 279, 284, 301, 317, 318, 321, 336, 344, 371, 372, 397, 414, 416, 419, 422, 423, 424, 427, 452, 490, 491, 492, 541, 544, 550, 553, 639, 689, 703, 733, 756, 758, 761, 855, 856, 863, 864, 866, 867, 888, 889, 890, 901, 902, 956, 957, 1006, 1007, 1010, 1018, 1020, 1024, 1025, 1034, 1044, 1047, 1049, 1051, 1052, 1054, 1058], "power_iteration_norm": [412, 550, 553, 956, 957, 1055], "power_t": [685, 686, 687, 870, 871, 1024], "power_transform": [2, 889, 902, 1049], "powers_": 888, "powershel": 382, "powertransform": [2, 321, 890, 901, 1000, 1020, 1049, 1052, 1055, 1057, 1060], "pox": 294, "poznik": [1054, 1055, 1056], "pp": [0, 98, 173, 275, 381, 416, 418, 424, 427, 428, 452, 456, 460, 470, 520, 542, 543, 550, 599, 644, 652, 673, 694, 695, 729, 735, 739, 749, 765, 778, 792, 848, 850, 852, 869, 889, 901, 1003, 1010, 1012, 1013, 1023], "pp2013": 1002, "pp84": 426, "ppc64le": 392, "ppf": 276, "ppm": 180, "pprint": [55, 151, 252, 277, 379, 952], "pq": [52, 331], "pr": [0, 161, 372, 384, 387, 388, 392, 424, 750, 1010, 1033, 1051, 1053], "pr_displai": 246, "pr_number": 392, "prabakaran": [1049, 1050, 1053, 1055, 1056], "prabhakar": 421, "practic": [64, 88, 105, 113, 118, 127, 144, 148, 149, 154, 175, 190, 191, 196, 203, 220, 245, 251, 277, 284, 303, 304, 328, 334, 347, 351, 372, 384, 386, 387, 388, 390, 392, 397, 398, 416, 418, 420, 421, 422, 423, 424, 426, 455, 460, 470, 530, 533, 598, 641, 642, 679, 806, 852, 906, 913, 999, 1000, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1029, 1030, 1032, 1034, 1035, 1036, 1043, 1047, 1049, 1051, 1053], "practicalswift": 1047, "practis": 223, "practition": [142, 222], "pradeep": [1049, 1050], "pragmat": 384, "prakash": [1046, 1048, 1054], "pramod": 1055, "pranayanchuri": 1054, "prang": 385, "prasanth": 1056, "pratama": 1052, "pratap": [1045, 1048, 1055], "prathmesh": 1050, "pratik": 1048, "pratiqu": 381, "pravar": 1049, "pravarmahajan": [1048, 1049], "pre": [44, 105, 191, 207, 317, 360, 382, 384, 398, 402, 415, 418, 420, 421, 423, 424, 425, 427, 428, 451, 452, 455, 467, 542, 544, 699, 721, 772, 808, 876, 918, 1010, 1015, 1020, 1025, 1026, 1029, 1030, 1036, 1044, 1049, 1055, 1059, 1060], "pre_dispatch": [809, 815, 823, 832, 834, 835, 836, 837, 840, 975, 1044], "preambl": 90, "prec": [115, 246, 536, 1010], "prec_": 115, "prec_macro": 420, "preced": [372, 384, 388, 495, 1010, 1041], "precipit": 414, "precis": [2, 8, 45, 52, 62, 68, 104, 109, 115, 124, 170, 181, 182, 188, 196, 246, 268, 269, 270, 274, 315, 317, 336, 337, 384, 386, 398, 412, 413, 414, 415, 416, 418, 421, 423, 451, 477, 478, 479, 480, 481, 482, 483, 484, 486, 513, 532, 541, 543, 550, 553, 653, 654, 655, 657, 659, 660, 661, 663, 664, 665, 678, 681, 683, 689, 691, 692, 696, 708, 709, 715, 716, 717, 722, 736, 738, 739, 740, 748, 750, 772, 791, 792, 793, 796, 797, 806, 807, 831, 839, 842, 853, 854, 859, 874, 893, 897, 913, 918, 925, 927, 957, 1004, 1006, 1013, 1014, 1025, 1031, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "precision_": [51, 115, 477, 478, 479, 480, 481, 482, 483, 484], "precision_macro": 420, "precision_recall_curv": [2, 246, 283, 709, 715, 716, 736, 1010, 1042, 1043, 1047, 1054, 1055, 1057, 1059], "precision_recall_fscore_support": [2, 722, 738, 739, 793, 796, 1010, 1045, 1049, 1051, 1057], "precision_scor": [2, 62, 270, 283, 717, 796, 1010, 1041, 1043, 1044, 1045, 1046, 1051, 1057], "precision_threshold": 274, "precisionrecalldisplai": [2, 270, 283, 329, 791, 793, 796, 1010, 1051, 1054, 1057, 1058, 1059], "precisions_": [806, 807], "precisions_cholesky_": [806, 807, 1055], "precisions_init": [807, 1055, 1057], "precompil": 382, "precomput": [123, 124, 125, 188, 197, 241, 297, 299, 386, 393, 396, 398, 416, 424, 427, 439, 448, 449, 452, 453, 454, 458, 460, 465, 473, 479, 490, 491, 492, 533, 540, 544, 546, 549, 550, 551, 557, 563, 565, 567, 569, 571, 574, 577, 579, 619, 620, 629, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 690, 691, 693, 694, 697, 699, 700, 701, 705, 783, 787, 790, 801, 802, 809, 823, 846, 847, 855, 856, 857, 859, 860, 861, 863, 864, 865, 871, 914, 915, 916, 917, 918, 919, 922, 924, 930, 985, 986, 987, 1002, 1006, 1008, 1013, 1025, 1030, 1031, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "precompute_dist": [1045, 1052], "precompute_gram": 1043, "precomputed_nearest_neighbor": [460, 700], "precondit": [416, 460, 470, 704, 1026, 1057], "pred": [43, 46, 50, 52, 68, 355, 358, 379, 657, 678, 689, 706, 711, 715, 727, 738, 739, 747, 792, 793, 796, 797, 1010], "pred1": 162, "pred2": 162, "pred3": 162, "pred4": 162, "pred_background": 50, "pred_decis": [744, 1010, 1054], "pred_entropi": [336, 337], "pred_nam": 45, "pred_ort": 410, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [138, 458, 463, 464, 465, 1058], "predecessor_": [458, 465], "predecessor_correct": [458, 464], "predefin": [2, 280, 822, 999, 1013, 1056, 1058], "predefinedsplit": [2, 420, 1045], "predetermin": [416, 1007], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 83, 91, 92, 93, 97, 104, 105, 106, 107, 109, 117, 134, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 170, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 198, 201, 202, 203, 210, 213, 214, 215, 216, 219, 220, 221, 222, 224, 225, 226, 227, 232, 233, 235, 236, 245, 246, 248, 250, 252, 254, 262, 263, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 282, 285, 286, 290, 291, 294, 296, 300, 303, 304, 305, 308, 309, 315, 317, 318, 322, 323, 326, 327, 328, 329, 330, 332, 333, 334, 337, 339, 340, 341, 343, 344, 346, 347, 351, 353, 354, 355, 358, 359, 363, 364, 365, 366, 367, 370, 372, 376, 379, 381, 384, 386, 391, 393, 398, 401, 407, 410, 411, 412, 414, 416, 417, 419, 421, 423, 424, 425, 430, 433, 438, 439, 445, 446, 447, 448, 450, 451, 452, 455, 456, 457, 473, 477, 490, 491, 492, 495, 510, 517, 533, 543, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 591, 602, 603, 611, 615, 619, 620, 622, 623, 624, 625, 631, 634, 636, 637, 639, 640, 641, 642, 643, 644, 646, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 706, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 721, 723, 724, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 743, 744, 747, 750, 751, 752, 755, 757, 759, 761, 765, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 805, 806, 807, 808, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 859, 860, 863, 864, 870, 871, 873, 880, 893, 894, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 983, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1034, 1036, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "predict_ecoc": 1045, "predict_joint_log_proba": [848, 849, 850, 851, 852, 1056], "predict_log_proba": [386, 398, 558, 559, 560, 562, 564, 566, 568, 573, 602, 603, 667, 668, 685, 808, 809, 812, 813, 823, 831, 834, 844, 848, 849, 850, 851, 852, 870, 873, 910, 915, 918, 921, 923, 1025, 1041, 1054, 1058, 1060], "predict_ovo": 1045, "predict_ovr": 1045, "predict_param": [252, 473, 576, 577, 602, 603, 1054], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 157, 161, 173, 176, 177, 178, 179, 270, 285, 290, 296, 312, 319, 322, 326, 328, 334, 358, 386, 391, 398, 414, 415, 423, 445, 446, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 602, 603, 619, 628, 629, 631, 632, 640, 641, 642, 667, 668, 685, 707, 709, 711, 731, 750, 751, 797, 806, 807, 808, 809, 812, 813, 823, 831, 834, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 855, 863, 870, 873, 880, 908, 909, 910, 915, 918, 921, 923, 932, 1006, 1010, 1012, 1014, 1017, 1023, 1024, 1025, 1026, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060], "predict_proba_ovr": 1045, "predicted_label": [336, 337], "prediction_df": 154, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 109, 159, 191, 272, 331, 1010, 1056, 1058], "predictions_kr": 175, "predictive_analyt": 1026, "predictive_word": 358, "predictor": [2, 109, 137, 148, 162, 186, 188, 218, 236, 247, 272, 386, 397, 398, 417, 419, 420, 423, 426, 474, 475, 490, 491, 492, 505, 525, 526, 527, 564, 565, 571, 574, 577, 611, 619, 639, 641, 642, 657, 662, 666, 678, 682, 689, 710, 834, 836, 845, 846, 873, 874, 886, 887, 893, 983, 1006, 1011, 1031, 1042, 1048, 1051], "predispatch": [815, 832, 837, 840], "predit": 118, "predomin": [386, 1042], "prefer": [73, 79, 90, 154, 267, 285, 317, 367, 371, 372, 373, 384, 385, 386, 398, 416, 420, 421, 423, 424, 448, 462, 479, 480, 486, 495, 517, 518, 636, 641, 642, 663, 667, 668, 710, 735, 737, 751, 766, 767, 844, 862, 888, 913, 914, 963, 975, 999, 1002, 1004, 1006, 1010, 1015, 1025, 1026, 1029, 1033, 1042, 1048, 1050, 1054, 1055, 1058], "prefetch": 975, "prefit": [63, 270, 398, 414, 415, 425, 445, 576, 577, 606, 808, 831, 1030, 1053, 1054, 1055, 1060], "prefix": [2, 55, 104, 277, 299, 326, 384, 388, 390, 392, 426, 432, 450, 451, 453, 455, 457, 472, 475, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 648, 649, 650, 651, 697, 698, 701, 815, 837, 857, 862, 865, 869, 872, 873, 879, 905, 906, 1047, 1048, 1054, 1056, 1059], "prein": [0, 374, 1053, 1054, 1055], "preiss": 1054, "preliminari": 470, "prematur": 1054, "prepar": [219, 252, 358, 371, 388, 390, 392, 932, 1026, 1034, 1049, 1057], "prepend": [191, 1041], "preprint": 381, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 84, 88, 90, 93, 97, 104, 105, 106, 107, 109, 118, 124, 134, 143, 148, 169, 171, 173, 180, 193, 196, 198, 200, 205, 207, 209, 218, 219, 224, 234, 236, 239, 246, 247, 256, 259, 270, 273, 283, 285, 290, 291, 300, 305, 306, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 347, 350, 359, 373, 376, 378, 381, 384, 389, 397, 398, 410, 412, 413, 416, 417, 420, 423, 424, 425, 472, 473, 474, 475, 497, 576, 590, 591, 597, 598, 600, 639, 667, 668, 681, 683, 685, 687, 696, 842, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 914, 915, 916, 918, 919, 1000, 1006, 1011, 1014, 1021, 1024, 1025, 1027, 1029, 1031, 1033, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "preprocessor": [105, 159, 191, 218, 247, 255, 257, 323, 327, 329, 330, 331, 333, 417, 424, 597, 598, 600, 1029, 1041, 1044, 1049, 1051], "preprocessor__cat__selector__percentil": 105, "preprocessor__num__imputer__strategi": 105, "preprocessor_list": 255, "prescrib": 398, "presenc": [2, 48, 95, 97, 113, 114, 136, 190, 194, 203, 222, 255, 317, 382, 385, 398, 418, 421, 721, 735, 765, 778, 842, 876, 884, 886, 893, 993, 1000, 1006, 1010, 1011, 1024, 1033, 1044, 1045, 1047, 1051, 1053, 1055], "present": [0, 2, 43, 44, 52, 78, 84, 122, 124, 131, 143, 144, 151, 154, 155, 172, 173, 181, 184, 198, 201, 203, 207, 218, 245, 248, 252, 266, 270, 274, 279, 282, 285, 286, 297, 317, 320, 322, 359, 381, 382, 386, 389, 396, 398, 407, 414, 416, 418, 421, 423, 424, 434, 435, 438, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 497, 498, 499, 500, 501, 505, 509, 510, 511, 512, 513, 514, 519, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 558, 559, 570, 571, 572, 575, 578, 579, 590, 591, 592, 597, 598, 600, 626, 636, 637, 638, 639, 659, 663, 686, 697, 698, 699, 700, 721, 738, 739, 747, 778, 792, 793, 796, 806, 807, 809, 812, 813, 821, 823, 837, 855, 856, 857, 859, 861, 863, 864, 865, 872, 877, 885, 886, 887, 888, 889, 891, 894, 905, 906, 917, 925, 927, 928, 957, 993, 1009, 1010, 1011, 1012, 1017, 1020, 1028, 1030, 1044, 1049, 1051, 1052, 1053, 1055, 1056, 1058], "preserv": [37, 43, 83, 129, 242, 249, 271, 387, 420, 421, 423, 424, 590, 597, 598, 600, 655, 661, 705, 751, 783, 787, 827, 828, 829, 897, 934, 939, 940, 1000, 1006, 1007, 1020, 1022, 1029, 1041, 1044, 1045, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059], "preserves_dtyp": 934, "preservs": 1055, "preset": [675, 677, 685, 1014], "presort": [1046, 1051], "press": [379, 416, 421, 426, 427, 452, 599, 619, 620, 623, 628, 631, 652, 848, 852, 1003, 1006, 1008, 1012], "pressur": [173, 381], "preston": [1046, 1047, 1048], "presum": [191, 296, 416, 424, 848], "prettenhof": [0, 406, 1041, 1042, 1043, 1044, 1045, 1046], "pretti": [192, 242, 274, 358, 371, 384, 396, 870, 871, 1014, 1050], "preuss": 1057, "prev_scor": 55, "preval": [138, 326, 398, 709, 721, 1010], "prevalence_pos_label": [283, 709], "prevent": [43, 90, 149, 151, 170, 190, 219, 222, 317, 323, 324, 347, 358, 362, 367, 384, 386, 388, 396, 397, 410, 412, 416, 421, 424, 450, 457, 496, 497, 570, 571, 599, 600, 620, 737, 794, 870, 871, 898, 899, 901, 902, 903, 904, 1010, 1012, 1015, 1016, 1020, 1026, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059], "previou": [43, 78, 88, 105, 124, 141, 148, 149, 151, 159, 175, 180, 181, 190, 191, 192, 203, 204, 219, 249, 251, 252, 270, 276, 279, 283, 317, 322, 330, 358, 359, 360, 367, 371, 379, 384, 386, 388, 389, 390, 392, 396, 398, 399, 402, 415, 416, 423, 424, 476, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 639, 655, 657, 661, 662, 667, 669, 671, 675, 676, 677, 678, 685, 686, 687, 689, 716, 828, 844, 847, 862, 870, 871, 910, 927, 1006, 1010, 1014, 1020, 1030, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "previous": [46, 88, 92, 105, 138, 181, 191, 270, 274, 283, 290, 330, 379, 392, 396, 402, 416, 421, 424, 448, 451, 462, 533, 543, 550, 658, 667, 668, 675, 676, 677, 685, 686, 687, 913, 1006, 1020, 1029, 1038, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "previous_loss": [675, 676, 677, 686], "previs": 246, "price": [51, 109, 148, 149, 154, 159, 255, 323, 1000, 1006, 1034], "priceless": 384, "prieur": 1054, "primal": [667, 668, 686, 913, 914, 1024, 1025], "primari": [398, 421, 524, 930, 1017, 1033, 1034], "primarili": [267, 281, 384, 398, 412, 416, 967, 1034, 1050, 1051], "primat": 358, "primdal": 1049, "primit": 1056, "princ": 1054, "princip": [2, 42, 116, 117, 120, 126, 128, 129, 130, 132, 157, 188, 238, 250, 253, 306, 322, 328, 376, 416, 419, 428, 492, 540, 541, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 559, 666, 697, 698, 699, 701, 702, 839, 862, 874, 893, 956, 957, 1007, 1013, 1031, 1035, 1036, 1041], "principl": [138, 182, 302, 360, 384, 396, 398, 399, 420, 423, 957, 999, 1009, 1013, 1024, 1048], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 81, 82, 83, 84, 85, 87, 88, 93, 95, 96, 98, 102, 104, 105, 107, 108, 109, 113, 117, 118, 122, 124, 127, 131, 132, 134, 138, 141, 144, 145, 146, 147, 148, 150, 152, 154, 164, 165, 169, 170, 172, 173, 175, 176, 178, 180, 184, 190, 192, 193, 194, 196, 203, 204, 206, 209, 210, 213, 214, 218, 220, 221, 222, 225, 226, 233, 234, 236, 239, 240, 243, 247, 249, 251, 252, 255, 259, 264, 269, 270, 274, 275, 276, 277, 279, 281, 284, 285, 289, 297, 301, 308, 310, 313, 314, 315, 319, 322, 324, 326, 327, 328, 330, 332, 333, 334, 336, 337, 340, 347, 358, 359, 360, 362, 366, 367, 371, 378, 379, 382, 385, 386, 392, 398, 407, 410, 417, 420, 423, 424, 426, 472, 475, 476, 480, 486, 498, 503, 511, 521, 522, 550, 553, 558, 559, 568, 569, 570, 571, 573, 574, 578, 579, 586, 592, 593, 594, 596, 597, 598, 600, 621, 626, 627, 639, 655, 656, 658, 659, 661, 662, 663, 665, 669, 670, 671, 672, 675, 676, 685, 686, 693, 705, 722, 726, 746, 804, 806, 807, 808, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 838, 840, 842, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 870, 871, 872, 873, 874, 875, 883, 889, 893, 901, 911, 912, 913, 914, 915, 918, 920, 926, 938, 943, 970, 993, 1000, 1010, 1011, 1012, 1013, 1018, 1026, 1041, 1043, 1049, 1050, 1052, 1056, 1060], "print_changed_onli": [476, 911, 1050, 1052, 1053], "print_datafram": 274, "print_progress": 975, "print_rout": 252, "printabl": 1033, "prior": [2, 42, 46, 55, 81, 82, 92, 100, 101, 102, 122, 174, 175, 181, 187, 188, 193, 198, 200, 203, 260, 262, 266, 267, 270, 276, 287, 307, 384, 386, 398, 402, 407, 416, 419, 421, 423, 426, 473, 532, 545, 557, 558, 559, 560, 568, 620, 622, 623, 624, 628, 631, 632, 639, 653, 654, 655, 656, 660, 661, 663, 664, 665, 669, 670, 671, 681, 687, 690, 725, 806, 848, 849, 850, 851, 852, 873, 874, 888, 915, 918, 976, 999, 1002, 1004, 1006, 1009, 1010, 1012, 1018, 1026, 1027, 1031, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1057], "prior_k": 558, "priori": [218, 235, 285, 296, 317, 398, 416, 423, 597, 603, 1009, 1057], "priorit": [415, 1030, 1048], "prioriti": [383, 641, 841, 842, 1030, 1044], "priors_": [558, 559], "privaci": 1029, "privat": [0, 386, 388, 398, 399, 935, 1034, 1041, 1049, 1051, 1052, 1054, 1055, 1060], "privileg": [255, 392], "priyam": 1056, "priyank": 1059, "priyansh": 1059, "priyash": 1059, "prng": 115, "pro": [410, 1009], "proanthocyanin": 381, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [446, 447], "prob_tru": [446, 447], "proba": [62, 64, 161, 445, 921, 923], "proba_": [915, 918, 1052], "proba_map": 90, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 115, 123, 124, 133, 134, 174, 175, 178, 181, 182, 188, 251, 270, 358, 398, 414, 422, 423, 445, 481, 484, 541, 543, 544, 550, 568, 597, 598, 619, 631, 652, 654, 685, 712, 750, 809, 835, 880, 915, 916, 918, 919, 1003, 1004, 1006, 1009, 1010, 1015, 1020, 1025, 1026, 1029, 1031, 1034, 1041, 1044, 1048], "probabilisticpca": [1041, 1044], "probabilities_": [90, 454], "probabilities_or_label": 578, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 90, 109, 121, 122, 137, 152, 154, 160, 168, 174, 175, 176, 177, 188, 191, 194, 210, 230, 233, 234, 238, 242, 246, 248, 249, 270, 276, 278, 279, 282, 283, 286, 290, 294, 296, 315, 317, 321, 326, 328, 334, 339, 341, 353, 354, 371, 379, 380, 386, 390, 396, 398, 415, 416, 420, 421, 424, 425, 426, 442, 443, 444, 445, 446, 447, 454, 455, 457, 513, 521, 524, 532, 536, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 579, 602, 603, 619, 622, 623, 631, 636, 640, 641, 642, 667, 668, 680, 685, 701, 707, 709, 711, 712, 715, 716, 718, 721, 725, 729, 731, 735, 736, 738, 748, 749, 750, 751, 765, 791, 793, 796, 797, 798, 803, 806, 807, 808, 809, 812, 813, 823, 831, 838, 839, 842, 844, 845, 848, 849, 850, 851, 852, 855, 858, 863, 869, 870, 894, 906, 907, 908, 909, 910, 913, 915, 918, 921, 923, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1022, 1023, 1024, 1026, 1030, 1031, 1032, 1036, 1041, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1055], "probable_clust": 91, "probas_pr": [791, 1059], "probb_": [915, 918, 1052], "probe": 1018, "probinette4": 1053, "probl": [616, 617], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 89, 90, 92, 101, 124, 138, 141, 144, 146, 151, 152, 175, 188, 193, 196, 198, 203, 204, 207, 211, 212, 218, 220, 222, 235, 236, 240, 245, 246, 253, 255, 258, 274, 276, 281, 285, 286, 290, 291, 294, 296, 297, 302, 309, 321, 329, 333, 334, 344, 347, 351, 354, 355, 358, 359, 366, 367, 371, 379, 380, 381, 382, 383, 385, 386, 389, 390, 392, 393, 396, 398, 404, 414, 415, 416, 418, 420, 422, 423, 424, 425, 426, 427, 428, 452, 455, 457, 458, 460, 465, 470, 473, 486, 512, 517, 518, 524, 525, 526, 527, 532, 533, 537, 540, 542, 546, 548, 551, 552, 553, 554, 555, 556, 557, 560, 561, 566, 570, 573, 576, 580, 582, 598, 619, 640, 652, 657, 659, 661, 663, 664, 665, 666, 667, 668, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 694, 695, 696, 697, 698, 700, 702, 704, 717, 725, 728, 738, 739, 744, 747, 748, 792, 793, 796, 797, 806, 807, 810, 811, 812, 813, 814, 816, 817, 818, 819, 824, 825, 826, 827, 828, 829, 833, 841, 842, 843, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 879, 880, 886, 894, 897, 903, 904, 913, 914, 921, 923, 945, 957, 1000, 1001, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1024, 1027, 1030, 1032, 1034, 1035, 1036, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "problemat": [43, 191, 270, 272, 417, 1000, 1049], "proc": [64, 112, 414, 424, 458, 698, 702, 848, 999, 1007, 1012, 1016], "proce": [85, 170, 200, 382, 388, 419, 420, 423, 448, 1006], "procedur": [25, 81, 91, 144, 151, 173, 199, 205, 266, 278, 320, 324, 347, 358, 367, 384, 396, 397, 398, 399, 414, 418, 420, 421, 423, 425, 540, 546, 547, 549, 554, 555, 556, 562, 563, 564, 565, 568, 569, 602, 604, 611, 618, 653, 681, 683, 696, 737, 794, 870, 871, 890, 902, 930, 980, 999, 1006, 1012, 1020, 1023, 1024, 1025, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "proceed": [113, 173, 379, 381, 416, 427, 447, 452, 520, 705, 717, 735, 765, 860, 910, 1010, 1022, 1023, 1024], "process": [0, 2, 19, 37, 43, 44, 47, 57, 63, 66, 67, 70, 80, 81, 82, 83, 85, 91, 92, 101, 104, 106, 108, 112, 114, 121, 125, 126, 128, 136, 138, 147, 149, 151, 156, 157, 166, 190, 198, 201, 220, 222, 228, 229, 230, 231, 251, 252, 253, 255, 261, 262, 265, 267, 270, 276, 278, 279, 288, 294, 312, 317, 319, 320, 328, 332, 337, 341, 351, 352, 356, 359, 360, 362, 371, 372, 373, 379, 383, 384, 386, 388, 390, 393, 396, 397, 398, 410, 416, 417, 418, 420, 421, 422, 423, 424, 425, 429, 456, 457, 483, 505, 513, 532, 543, 544, 545, 546, 547, 570, 571, 572, 597, 598, 600, 619, 620, 622, 623, 624, 626, 627, 628, 631, 632, 634, 636, 641, 642, 648, 652, 673, 681, 694, 695, 712, 732, 750, 790, 806, 808, 809, 812, 813, 823, 831, 834, 835, 836, 845, 846, 862, 876, 880, 882, 883, 884, 893, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 975, 999, 1002, 1006, 1010, 1013, 1020, 1022, 1024, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058], "process_rout": [2, 252, 1058], "processor": [105, 159, 191, 427, 445, 452, 454, 456, 458, 460, 465, 466, 469, 472, 475, 480, 540, 544, 545, 546, 548, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 603, 611, 616, 617, 619, 641, 643, 648, 656, 660, 662, 664, 666, 667, 668, 670, 672, 674, 675, 677, 685, 688, 697, 698, 699, 700, 701, 702, 703, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 855, 856, 859, 861, 863, 864, 866, 867, 872, 875, 908, 909], "procter": 51, "prod": [359, 630], "prod_": 1012, "prod_i": 1002, "proding": 1057, "produc": [52, 53, 62, 63, 79, 92, 104, 127, 151, 152, 153, 155, 203, 282, 315, 339, 367, 372, 379, 380, 384, 386, 389, 398, 399, 416, 417, 420, 421, 423, 448, 451, 454, 460, 528, 545, 568, 572, 590, 597, 602, 603, 641, 642, 811, 812, 813, 821, 826, 829, 834, 878, 888, 915, 918, 1001, 1002, 1006, 1008, 1009, 1010, 1013, 1016, 1017, 1021, 1023, 1024, 1025, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "product": [2, 58, 105, 124, 160, 175, 180, 192, 351, 367, 371, 386, 387, 390, 393, 413, 421, 423, 459, 547, 549, 556, 591, 598, 599, 600, 622, 623, 642, 649, 673, 674, 694, 695, 770, 772, 784, 786, 885, 888, 905, 906, 958, 999, 1002, 1006, 1008, 1020, 1022, 1024, 1025, 1029, 1034, 1036, 1049], "production": 1034, "prof": 390, "profession": 191, "professor": 1034, "profil": [218, 371, 384, 387, 530, 533, 1006, 1034], "profile_default": 390, "profit": [0, 270, 334, 1058], "prog": [173, 381], "prognosi": [173, 381], "program": [0, 85, 173, 359, 367, 372, 373, 381, 382, 384, 386, 390, 396, 517, 644, 679, 903, 904, 1006, 1025, 1026, 1029, 1030, 1033, 1041, 1043], "programmat": [386, 508, 1050], "progress": [43, 46, 47, 124, 162, 173, 187, 211, 302, 330, 381, 388, 389, 399, 407, 412, 416, 568, 569, 701, 842, 844, 847, 862, 870, 871, 1034, 1041, 1043, 1050, 1055], "prohibit": [190, 255, 420, 423, 636, 1015, 1023, 1048], "proj": [53, 658], "proj_gradi": 390, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 80, 90, 93, 102, 120, 123, 124, 126, 128, 130, 134, 179, 181, 183, 184, 188, 192, 215, 238, 239, 240, 242, 244, 246, 250, 253, 262, 301, 306, 310, 315, 344, 359, 371, 376, 378, 382, 383, 384, 389, 390, 393, 398, 399, 402, 413, 419, 421, 422, 428, 448, 454, 459, 460, 470, 482, 490, 491, 492, 493, 497, 511, 513, 540, 542, 543, 544, 546, 548, 550, 551, 552, 553, 557, 558, 582, 591, 598, 650, 651, 658, 681, 683, 697, 700, 704, 705, 843, 862, 890, 905, 906, 907, 956, 957, 1004, 1006, 1007, 1008, 1011, 1013, 1014, 1016, 1023, 1026, 1031, 1034, 1036, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "projected_data": 249, "projected_dist": 249, "projectedgradientnmf": 1046, "prokopi": [1046, 1049], "prolifer": 386, "prolin": [57, 322, 381], "promin": [127, 398], "promis": [398, 1030], "promot": [191, 450, 717, 1029, 1052, 1054, 1058], "prompt": [382, 384, 388, 402, 409, 424], "prone": [64, 218, 263, 321, 396, 414], "pronounc": [74, 75, 87, 180], "proof": [396, 423, 907, 1022], "prop": [107, 114, 224, 263, 303, 346, 366], "propag": [2, 58, 68, 71, 72, 84, 98, 99, 171, 188, 335, 379, 448, 462, 511, 521, 523, 706, 713, 714, 722, 723, 726, 727, 746, 802, 804, 873, 887, 908, 909, 910, 975, 976, 1014, 1031, 1032, 1035, 1036, 1041, 1053, 1056], "proper": [64, 90, 207, 236, 270, 373, 386, 390, 414, 423, 457, 550, 562, 685, 957, 984, 1005, 1006, 1007, 1010, 1025, 1041, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "properli": [43, 52, 62, 90, 156, 180, 271, 326, 373, 382, 384, 388, 392, 422, 913, 914, 915, 916, 917, 918, 919, 999, 1044, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "properti": [51, 62, 182, 183, 220, 235, 262, 299, 322, 366, 371, 377, 384, 386, 402, 413, 414, 416, 418, 421, 423, 425, 426, 431, 450, 453, 459, 460, 461, 472, 473, 551, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 600, 602, 603, 606, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 641, 655, 661, 664, 669, 671, 683, 684, 708, 713, 714, 717, 808, 809, 812, 813, 823, 831, 841, 842, 872, 873, 886, 887, 888, 894, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1013, 1016, 1020, 1023, 1025, 1026, 1027, 1030, 1046, 1050, 1051, 1054, 1055, 1058, 1059], "property_magnitud": 270, "propon": 104, "proport": [54, 63, 75, 154, 172, 204, 218, 225, 231, 245, 255, 270, 279, 283, 300, 304, 307, 354, 356, 366, 371, 379, 414, 416, 418, 420, 421, 423, 424, 446, 447, 454, 477, 482, 524, 558, 559, 564, 566, 568, 569, 570, 571, 572, 573, 592, 593, 597, 600, 636, 641, 667, 668, 675, 676, 677, 683, 684, 685, 687, 705, 710, 721, 731, 810, 811, 812, 813, 826, 829, 839, 859, 870, 871, 887, 913, 914, 915, 918, 919, 921, 923, 925, 927, 945, 999, 1009, 1010, 1013, 1016, 1024, 1025, 1026, 1046, 1058], "propos": [92, 111, 112, 297, 379, 384, 386, 396, 398, 416, 418, 423, 428, 458, 544, 616, 617, 685, 686, 687, 870, 871, 1006, 1009, 1013, 1024, 1048], "proprietari": 1026, "propto": [422, 1012], "prorokovi\u0107": 1059, "protect": [385, 388, 975], "protein": 378, "protocol": [410, 1010, 1029, 1044, 1057, 1058], "protocol_typ": 255, "prototyp": 1034, "prove": [125, 1034], "proven": [276, 1004, 1008, 1034], "provenc": 323, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 90, 95, 114, 124, 145, 146, 154, 157, 159, 175, 181, 191, 192, 198, 204, 205, 207, 219, 222, 239, 243, 246, 247, 252, 266, 270, 276, 277, 278, 282, 307, 310, 314, 317, 321, 326, 327, 329, 331, 345, 351, 354, 358, 359, 362, 366, 367, 371, 373, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 390, 392, 393, 396, 397, 398, 401, 402, 407, 410, 412, 413, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 430, 437, 445, 448, 450, 451, 452, 454, 455, 457, 458, 460, 467, 468, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 500, 502, 503, 505, 507, 510, 541, 542, 543, 544, 547, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 602, 603, 610, 614, 619, 620, 636, 641, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 699, 703, 708, 720, 731, 744, 750, 751, 773, 783, 787, 797, 801, 803, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 825, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 870, 871, 873, 876, 878, 879, 880, 883, 884, 885, 888, 890, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 929, 931, 945, 951, 962, 966, 968, 985, 986, 987, 998, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1033, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "provinc": 323, "provost": [797, 1010], "proxi": [190, 191, 421, 869, 1046], "prun": 390, "prune": [188, 361, 366, 425, 509, 566, 567, 568, 569, 573, 574, 602, 653, 839, 921, 922, 923, 924, 1013, 1031, 1032, 1036, 1041, 1044, 1051, 1052], "przybocki": 1010, "ps_lsvm_score": 196, "ps_lsvm_time": 196, "pseudo": [219, 315, 386, 420, 428, 448, 460, 462, 470, 477, 478, 479, 481, 482, 483, 484, 542, 570, 571, 572, 636, 643, 648, 650, 651, 655, 656, 661, 662, 669, 670, 671, 672, 686, 700, 704, 812, 813, 821, 823, 862, 869, 905, 906, 910, 913, 914, 915, 918, 956, 957, 1006, 1022, 1046, 1055], "pseudo_likelihood": 869, "pseudocount": [545, 1049], "psf": 384, "psi": 421, "psi_1": 421, "psi_2": 421, "psi_n": 421, "pspachtholz": [1051, 1052, 1053], "psycholog": [416, 714, 725], "psychometrica": 644, "psychometrika": [699, 703, 1007], "pt": [50, 379, 425, 889, 1020], "pt_i": 307, "pt_j": 307, "ptocca": 1051, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [243, 908], "public": [0, 112, 378, 384, 386, 388, 389, 396, 397, 398, 399, 420, 423, 476, 673, 680, 694, 695, 701, 911, 1006, 1014, 1041, 1046, 1047, 1052, 1053, 1054, 1057], "publicli": [384, 1051], "publish": [378, 379, 386, 388, 392, 398, 1022, 1030, 1053], "pubu": [232, 249, 303, 346], "pubu_r": 113, "puerta": 1056, "puggioni": 1045, "puhuk": [1055, 1056], "pujalt": 1055, "pulapakura": [1058, 1059], "pulchritud": 358, "pulido": 1054, "pulkit": [1049, 1050, 1052], "pull": [104, 329, 372, 382, 387, 398, 399, 1033, 1051], "puls": 381, "punctuat": [424, 597, 598, 600], "puneet": 1048, "puneeth": [1058, 1059], "puor": 127, "puor_r": 179, "pure": [113, 114, 118, 203, 218, 398, 416, 481, 487, 505, 566, 567, 568, 569, 573, 574, 575, 714, 724, 795, 804, 921, 922, 923, 924, 1020], "pure_emp_cov": 114, "pure_loc": 114, "pure_x": 114, "purepremium": 236, "puriti": [140, 925, 927], "purna": 1055, "purpl": [111, 122, 242], "purport": 1048, "purpos": [48, 51, 72, 118, 149, 154, 186, 232, 233, 234, 238, 240, 253, 264, 266, 270, 272, 273, 347, 348, 354, 358, 359, 367, 379, 384, 397, 398, 399, 402, 409, 413, 416, 417, 421, 423, 424, 425, 426, 835, 836, 873, 930, 1007, 1010, 1011, 1013, 1016, 1029, 1053, 1055, 1059], "pursu": 191, "pursuit": [2, 125, 127, 133, 188, 197, 289, 421, 482, 535, 540, 546, 551, 557, 673, 674, 694, 695, 1031, 1032, 1036, 1041], "push": [64, 384, 388, 414, 1033], "pushd": 392, "put": [75, 93, 166, 175, 177, 246, 250, 257, 261, 290, 312, 319, 330, 341, 352, 356, 373, 386, 388, 389, 392, 410, 426, 451, 455, 467, 524, 623, 656, 670, 806, 890, 894, 902, 915, 916, 917, 918, 919, 947, 1000, 1007, 1009, 1010, 1011, 1017, 1020], "putnam": 1047, "putschblo": 1054, "pvalu": [2, 601, 604, 605, 607, 608, 609, 838], "pvalue_iri": 282, "pvalue_rand": 282, "pvalues_": [169, 601, 604, 605, 607, 608, 609, 1041], "pvnguyen": 1045, "pwalchessen": 1053, "pwd": 392, "px": [144, 277], "pxd": 384, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 372, 384, 385, 388, 390, 392, 398, 402, 424, 427, 448, 452, 462, 507, 539, 653, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 888, 892, 952, 1010, 1029, 1031, 1041, 1043, 1047, 1051, 1055], "py3": 402, "py39": 402, "pyamg": [81, 402, 409, 416, 460, 470, 700, 704], "pyarrow": [402, 409], "pybrain": 1041, "pycon": [410, 1028], "pyd": 385, "pydata": [43, 384, 392, 402, 409, 410, 1028, 1034], "pydata_2013": 1034, "pydebug": 390, "pyflak": 386, "pyfunc": [708, 1013], "pyfuncdist": 708, "pymc": 1029, "pynndesc": 297, "pynndescenttransform": 297, "pyodid": 384, "pyoxid": 1054, "pypi": [372, 382, 386, 388, 390, 402, 1026, 1049, 1053, 1055, 1056, 1058], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 333, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 384, 391, 446, 511, 640, 641, 706, 707, 709, 710, 711, 815, 832, 1038, 1055], "pyplpt": 378, "pypy3": 1049, "pysniak": 1044, "pystruct": 396, "pytabl": 378, "pytb": 392, "pytest": [2, 326, 372, 382, 384, 386, 387, 402, 409, 412, 932, 951, 952, 1051, 1054], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 371, 373, 378, 382, 384, 385, 386, 387, 388, 389, 392, 393, 396, 398, 402, 403, 409, 410, 412, 417, 424, 505, 517, 518, 590, 708, 820, 887, 1010, 1020, 1025, 1026, 1030, 1033, 1034, 1036, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058], "python2": 1049, "python3": [151, 319, 382, 402], "python37": 402, "pythonsoftwarefound": 402, "pythonx": 382, "pytorch": [45, 334, 396, 1029, 1030, 1057, 1058], "pytorch_enable_mps_fallback": 412, "pyx": [384, 385, 390, 392], "p\u00e9rez": 1049, "p\u00f6lsterl": [1048, 1051, 1054], "q": [51, 105, 117, 151, 218, 329, 413, 416, 421, 956, 1006, 1025], "q1": 518, "q327": 381, "q_": 1025, "q_m": 1026, "q_max": [891, 903], "q_min": [891, 903], "qaiser": 1058, "qda": [67, 381, 558, 559, 1032, 1036, 1046], "qdeffens": [1051, 1054], "qemu": 392, "qi": [518, 1053], "qian": [1047, 1052], "qiang": 1045, "qianm": 1053, "qid": [495, 517, 518, 1042, 1047], "qimu": 1047, "qin": [0, 381, 405, 424, 1048, 1049, 1050, 1051, 1052, 1060], "qingi": 1049, "qizhi": 1052, "qmarcou": 1058, "qn": 518, "qodari": 1059, "qp": 1025, "qr": [81, 220, 412, 543, 550, 553, 956, 957, 1007, 1047, 1058], "qt": [321, 890], "qtconsol": 390, "quad": [426, 1013, 1024], "quadcontourset": 640, "quadmesh": 640, "quadrant": 317, "quadrat": [2, 12, 43, 48, 65, 69, 113, 114, 115, 180, 188, 232, 255, 266, 278, 329, 448, 466, 469, 558, 559, 632, 640, 657, 667, 668, 678, 685, 689, 725, 918, 919, 1006, 1007, 1010, 1013, 1016, 1020, 1024, 1025, 1031, 1032, 1036, 1042], "quadraticdiscriminantanalysi": [2, 67, 70, 558, 1004, 1011, 1013, 1041, 1046, 1048, 1056, 1060], "quadro": 1054, "quadv": 1055, "qualifi": 389, "qualit": [44, 45, 88, 90, 96, 144, 151, 218, 331, 379, 416, 447, 710, 1056], "qualiti": [0, 13, 27, 45, 58, 61, 72, 81, 83, 84, 93, 127, 147, 154, 191, 224, 269, 274, 283, 284, 285, 351, 384, 392, 396, 398, 411, 416, 418, 421, 460, 470, 477, 482, 566, 567, 568, 569, 573, 574, 752, 823, 905, 906, 921, 922, 923, 924, 957, 1005, 1007, 1015, 1022, 1026, 1029, 1030, 1034, 1036], "quang": 1052, "quansight": 0, "quantifi": [13, 27, 43, 72, 84, 111, 180, 236, 270, 283, 334, 386, 398, 411, 582, 876, 1005, 1018, 1020, 1036], "quantil": [2, 79, 88, 98, 121, 138, 140, 188, 197, 317, 320, 321, 396, 423, 446, 447, 466, 528, 561, 562, 569, 571, 666, 679, 732, 754, 757, 759, 836, 878, 890, 891, 892, 902, 903, 1010, 1020, 1031, 1032, 1036, 1041, 1045, 1048, 1050, 1054, 1055, 1057, 1059], "quantile_list": 52, "quantile_rang": [317, 891, 903, 1047], "quantile_regress": 220, "quantile_transform": [2, 109, 890, 901, 1020, 1048, 1049, 1050, 1059], "quantileregressor": [2, 329, 1006, 1010, 1054, 1055, 1056], "quantiles_": [890, 1020, 1051], "quantiletransform": [2, 109, 192, 321, 417, 473, 889, 902, 1000, 1020, 1048, 1049, 1050, 1051, 1052, 1057, 1059], "quantiletransformerquantiletransform": 192, "quantit": [43, 44, 45, 52, 62, 96, 151, 154, 162, 173, 272, 291, 381], "quantiti": [51, 148, 276, 328, 371, 398, 416, 423, 730, 731, 732, 733, 794, 869, 999, 1001, 1004, 1006, 1046], "quantiz": [45, 71, 81, 93, 127, 188, 378, 379, 416, 451, 455, 457, 515, 788, 878, 983, 1020, 1031], "quantum": 1008, "quartil": 891, "quartimax": [541, 1053], "quasi": [386, 870, 871, 1006], "quazi": [1048, 1049], "queensland": 381, "quentin": [1048, 1049, 1050, 1057, 1058], "queqichao": 1045, "queri": [198, 300, 310, 371, 422, 427, 452, 454, 458, 465, 561, 619, 620, 637, 653, 654, 735, 765, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 1010, 1013, 1026, 1029, 1033, 1043, 1045, 1046, 1049], "query_id": [495, 517, 518], "query_radiu": [853, 854], "question": [0, 164, 190, 270, 276, 354, 383, 384, 389, 392, 410, 420, 423, 842, 915, 918, 1006, 1009, 1010, 1016, 1034], "queue": [47, 1013, 1044], "quick": [43, 129, 258, 384, 386, 390, 402, 615, 839, 1010, 1011, 1020, 1034, 1038], "quicker": 1009, "quickest": 382, "quickli": [74, 256, 313, 326, 381, 384, 385, 420, 423, 701, 787, 1006, 1013, 1014, 1034, 1052], "quinlan": 1026, "quinonez": 1049, "quintana": 1010, "quit": [43, 52, 64, 88, 92, 118, 141, 164, 173, 191, 192, 216, 236, 270, 284, 294, 329, 358, 371, 389, 397, 416, 424, 1005, 1007, 1012, 1034, 1049], "quiver": 126, "quot": [37, 51, 52, 54, 104, 277, 358, 359, 372, 378, 379, 382, 384, 388, 402, 403, 412, 496, 497, 505, 1010, 1022, 1025, 1056], "quota": [1054, 1055], "quotat": 379, "quotient": 1010, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 100, 109, 111, 112, 113, 114, 118, 124, 131, 134, 138, 141, 142, 147, 151, 152, 153, 162, 169, 176, 177, 178, 182, 183, 184, 186, 187, 191, 201, 203, 206, 207, 218, 225, 228, 236, 243, 248, 251, 261, 264, 267, 275, 276, 279, 281, 282, 283, 286, 289, 292, 296, 299, 300, 304, 308, 310, 323, 330, 349, 351, 360, 367, 379, 381, 385, 388, 396, 398, 410, 413, 414, 416, 418, 419, 420, 421, 423, 424, 433, 439, 445, 454, 459, 461, 473, 477, 482, 486, 490, 491, 492, 507, 513, 522, 529, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 597, 598, 599, 600, 603, 615, 618, 619, 620, 636, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 694, 695, 701, 705, 725, 730, 731, 732, 733, 737, 739, 790, 794, 797, 808, 809, 823, 826, 831, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 862, 863, 864, 870, 871, 884, 889, 901, 908, 909, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 926, 975, 1000, 1002, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1020, 1024, 1025, 1026, 1029, 1041, 1045, 1048, 1051, 1052, 1053, 1054, 1056, 1058], "r0": [812, 813], "r1": 579, "r11": [218, 236], "r2": [109, 139, 144, 159, 190, 192, 213, 251, 417, 423, 563, 579, 682, 836, 871, 931, 1010, 1018, 1050], "r2007": 423, "r22": 218, "r25": 236, "r26": 218, "r2_score": [2, 109, 190, 203, 213, 214, 412, 423, 439, 473, 490, 491, 492, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 733, 737, 846, 847, 856, 864, 871, 914, 916, 919, 922, 924, 999, 1010, 1042, 1044, 1050, 1054, 1055, 1059], "r2_score_ard": 203, "r2_score_enet": 203, "r2_score_lasso": 203, "r2_score_nnl": 213, "r2_score_ol": 213, "r2_with_abl": 190, "r2_without_": 190, "r3": 579, "r72": 218, "r73": 236, "r82": 218, "r93": 218, "r_": [50, 133, 231, 232, 262, 283, 303, 304, 346, 352, 356, 416, 716, 1010, 1026], "r_0": 999, "r_k": 283, "r_multi": 1018, "r_n": [283, 716, 1010], "r_regress": [2, 425, 615, 1054, 1055, 1058], "r_squar": 397, "raamana": [1049, 1050], "rabbit": [330, 332, 1020], "raccoon": [88, 127, 421], "raccoon_fac": [88, 127], "race": [191, 333, 379, 505, 1044], "race_hispan": 191, "race_oth": 191, "race_whit": 191, "rachel": [1053, 1056], "rachelcjordan": 1052, "rachez": [1046, 1047], "rachit": [1047, 1053, 1056], "rachum": 1053, "radar": 1034, "radford": 1006, "radhakrishnan": 1049, "radial": [2, 44, 129, 175, 180, 182, 347, 351, 376, 460, 631, 700, 1008, 1025, 1036], "radian": [310, 708, 773], "radii": [853, 854], "radiu": [2, 173, 292, 304, 347, 381, 416, 450, 458, 697, 773, 790, 853, 854, 855, 856, 857, 861, 863, 864, 865, 867, 1013, 1043, 1045, 1055, 1058], "radius1": 101, "radius2": 101, "radius3": 101, "radius4": 101, "radius_neighbor": [330, 861, 863, 864, 865, 1045, 1050, 1051, 1053, 1054, 1055, 1056], "radius_neighbors_graph": [2, 416, 427, 452, 855, 856, 857, 859, 861, 863, 864, 865, 866, 1013, 1045, 1050, 1053], "radiusneighborsclassifi": [2, 330, 855, 856, 861, 864, 1011, 1013, 1041, 1043, 1047, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "radiusneighborsregressor": [2, 330, 855, 856, 861, 863, 1011, 1013, 1041, 1043, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "radiusneighborstransform": [2, 326, 857, 1013, 1051, 1053, 1055, 1056], "radostin": [1049, 1050], "raduspaimoc": 1052, "raf": 1050, "rafael": [1034, 1042, 1043, 1045, 1048], "rafal": [1056, 1057], "rafei": 1053, "raff": 1044, "raffaello": 1050, "rafiqu": [1049, 1050], "raghav": [0, 406, 1045, 1046, 1047, 1048, 1049, 1053], "raghavan": [421, 599, 848, 852, 1008, 1010, 1012], "raghu": [416, 450], "raghunathan": [1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "raghuv": [1056, 1057], "raghuwanshi": 1055, "rah": 650, "rahiel": 1045, "rahil": [1055, 1056, 1057, 1058, 1059], "rahimi": [650, 1002], "rahmaan": 1051, "rahman": [1048, 1049, 1053], "rahn": [1048, 1051], "rahul": [1053, 1058], "rai": [0, 406, 1010, 1041, 1051, 1053, 1054], "raimundo": 1049, "rain": [43, 52, 192, 415, 1006], "rainbow": [61, 240], "rainfal": 1006, "rais": [2, 136, 219, 252, 253, 270, 279, 321, 329, 384, 386, 388, 389, 390, 393, 396, 398, 407, 410, 417, 420, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 518, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 585, 586, 590, 591, 597, 598, 599, 600, 612, 619, 620, 626, 638, 641, 644, 645, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 705, 707, 711, 718, 720, 721, 722, 723, 725, 736, 738, 739, 747, 787, 791, 792, 793, 796, 797, 798, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 823, 827, 831, 832, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 862, 863, 864, 868, 870, 871, 872, 873, 876, 877, 878, 879, 880, 885, 886, 887, 891, 892, 893, 900, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 932, 937, 939, 940, 942, 943, 961, 966, 970, 993, 994, 995, 996, 998, 999, 1010, 1020, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "raisadz": 1059, "raise_exc": [720, 1060], "raise_except": 995, "raise_warn": [279, 721, 995], "raj": [1058, 1059], "rajagopalan": [0, 406, 1049, 1053], "rajaona": [1047, 1048], "rajat": [1044, 1051], "rajdeep": 1050, "rajendra": 1049, "raji": [1056, 1057], "rakotoarison": [1048, 1049, 1051], "ralf": [1044, 1047, 1048, 1056, 1057, 1059], "ralph": 1059, "ram": [55, 88, 373, 410, 423, 905, 906, 1012, 1025, 1047, 1053, 1056, 1057], "ramakrishnan": [416, 450], "ramana": [1047, 1048], "ramanath": 1046, "ramesh": [379, 1034, 1044, 1047, 1051], "rameshwar": [1048, 1049], "ramil": [1049, 1050], "rammig": [1034, 1047], "ramo": 1056, "rampin": 1048, "ramyanp": [1053, 1054], "ramzi": 1053, "ram\u00edrez": 1010, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 84, 93, 97, 131, 141, 156, 158, 168, 198, 203, 240, 241, 245, 251, 252, 291, 309, 327, 328, 333, 340, 341, 353, 359, 364, 365, 393, 407, 553, 713, 714, 724, 766, 790, 795, 905, 906, 908, 909, 910, 1022, 1041, 1052, 1053], "rand_index": 714, "rand_scor": [2, 72, 416, 724, 1010, 1053], "randal": [893, 1045, 1055], "randi": 1047, "randint": [50, 72, 114, 122, 150, 187, 193, 241, 248, 252, 254, 288, 328, 333, 386, 389, 397, 407, 813, 830, 848, 849, 850, 852, 999, 1000], "randn": [53, 69, 70, 74, 89, 100, 101, 113, 114, 127, 131, 155, 168, 175, 179, 190, 193, 207, 212, 213, 217, 231, 232, 235, 262, 265, 266, 271, 283, 285, 286, 291, 303, 304, 324, 327, 328, 333, 346, 351, 352, 356, 386, 389, 652, 679, 681, 687, 696, 830, 916, 919], "randolf": 1059, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 80, 83, 85, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 105, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 122, 125, 126, 127, 130, 131, 137, 139, 141, 143, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 159, 162, 166, 168, 169, 172, 175, 176, 179, 181, 182, 184, 186, 187, 188, 189, 190, 198, 199, 200, 201, 203, 207, 208, 212, 213, 216, 217, 218, 219, 220, 221, 224, 225, 227, 231, 232, 235, 236, 238, 239, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 261, 262, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 279, 281, 283, 285, 286, 287, 288, 291, 296, 297, 302, 303, 304, 309, 312, 318, 320, 321, 324, 327, 328, 330, 332, 334, 336, 337, 340, 341, 346, 347, 349, 350, 351, 352, 353, 356, 358, 359, 364, 365, 371, 372, 376, 380, 387, 389, 396, 397, 398, 407, 411, 412, 414, 416, 424, 425, 429, 441, 448, 451, 455, 457, 459, 460, 461, 462, 466, 467, 468, 470, 472, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 496, 497, 498, 499, 501, 504, 505, 506, 511, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 545, 547, 548, 549, 550, 553, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 591, 592, 593, 598, 616, 617, 619, 620, 636, 639, 641, 643, 648, 649, 650, 651, 652, 655, 656, 658, 659, 661, 662, 663, 667, 669, 670, 671, 672, 679, 680, 681, 685, 686, 687, 688, 696, 698, 699, 700, 701, 702, 703, 704, 710, 713, 714, 717, 740, 752, 790, 797, 802, 806, 807, 809, 811, 812, 813, 814, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 838, 839, 844, 846, 847, 848, 849, 850, 852, 853, 854, 858, 862, 869, 870, 871, 873, 876, 878, 887, 890, 894, 902, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 942, 954, 956, 957, 978, 980, 983, 1000, 1002, 1005, 1007, 1009, 1010, 1014, 1015, 1016, 1018, 1020, 1025, 1026, 1030, 1031, 1032, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "random_": 207, "random_02": 207, "random_05": 207, "random_08": 207, "random_11": 207, "random_cat": [193, 1018], "random_choice_csc": 1051, "random_forest": 143, "random_from_data": [264, 806, 807, 1009], "random_label": 72, "random_num": [193, 1018], "random_offset_": [650, 651], "random_project": [2, 239, 249, 905, 906, 907, 1022, 1027, 1042, 1047, 1057, 1058], "random_sampl": [203, 853, 854, 858], "random_se": [49, 122, 147], "random_search": [277, 284], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 81, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 109, 115, 118, 122, 124, 126, 129, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 164, 169, 170, 172, 175, 181, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 200, 201, 204, 210, 217, 218, 221, 222, 224, 225, 226, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 250, 253, 254, 255, 256, 258, 259, 261, 263, 264, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 294, 296, 297, 300, 301, 305, 306, 307, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 339, 345, 347, 348, 349, 354, 355, 358, 359, 362, 366, 367, 386, 389, 393, 397, 398, 412, 415, 416, 417, 420, 421, 423, 424, 428, 441, 445, 446, 448, 451, 455, 457, 459, 460, 461, 462, 466, 467, 468, 470, 477, 482, 486, 495, 496, 499, 501, 504, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 592, 593, 602, 603, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 641, 642, 643, 644, 647, 648, 649, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 719, 744, 797, 801, 802, 806, 807, 808, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 858, 862, 869, 870, 871, 873, 878, 890, 894, 902, 905, 906, 913, 914, 915, 918, 920, 921, 922, 923, 924, 926, 927, 929, 931, 932, 954, 956, 957, 978, 980, 983, 999, 1000, 1002, 1005, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1020, 1025, 1026, 1038, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "random_state_": [386, 545, 636, 862, 1055], "random_tre": 575, "random_tree_embed": 143, "random_unlabeled_point": [328, 908, 909, 910], "random_weights_": [650, 651], "randomforest": [49, 147, 371, 423, 921, 922, 1046], "randomforestclassifi": [2, 63, 64, 67, 91, 142, 143, 144, 145, 146, 147, 161, 193, 194, 257, 258, 273, 288, 326, 328, 333, 358, 367, 397, 398, 414, 423, 425, 566, 567, 568, 570, 575, 576, 578, 812, 813, 831, 843, 923, 999, 1000, 1011, 1018, 1034, 1038, 1045, 1046, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058], "randomforestclassifierifittedrandomforestclassifi": [63, 145, 146, 333], "randomforestclassifierinot": 333, "randomforestclassifierrandomforestclassifi": [63, 193, 257, 288], "randomforestregressor": [2, 49, 144, 158, 159, 162, 186, 187, 328, 333, 397, 423, 566, 567, 569, 571, 575, 577, 579, 641, 642, 923, 1000, 1011, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "randomforestregressorrandomforestregressor": [159, 162], "randomgeek78": 1055, "randomized_range_find": [2, 393, 1042, 1047], "randomized_svd": [2, 55, 393, 459, 461, 541, 550, 553, 555, 1041, 1042, 1047, 1054, 1055, 1056], "randomized_svd_low_rank": 1048, "randomizedlasso": 1048, "randomizedlogisticregress": 1048, "randomizedpca": [1034, 1041, 1043, 1044, 1046, 1047, 1048], "randomizedsearchcv": [2, 45, 105, 175, 277, 284, 328, 367, 397, 407, 412, 584, 999, 1010, 1024, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1058, 1059, 1060], "randomizedsearchcvinot": 105, "randomli": [2, 52, 72, 83, 85, 96, 105, 117, 119, 140, 141, 154, 155, 178, 186, 188, 192, 230, 235, 249, 253, 266, 271, 282, 294, 296, 336, 367, 372, 393, 396, 397, 416, 420, 423, 426, 457, 466, 521, 524, 528, 532, 540, 546, 554, 555, 560, 568, 569, 570, 571, 572, 573, 574, 619, 620, 680, 688, 699, 703, 725, 806, 807, 869, 907, 921, 922, 923, 924, 1009, 1011, 1013, 1016, 1018, 1022, 1026, 1031, 1052, 1056, 1058, 1060], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 85, 96, 97, 114, 115, 118, 124, 126, 131, 139, 150, 151, 154, 155, 156, 158, 169, 175, 176, 179, 181, 182, 184, 186, 187, 190, 193, 198, 199, 200, 201, 203, 207, 212, 219, 220, 225, 232, 241, 245, 251, 252, 261, 264, 271, 279, 282, 283, 285, 286, 287, 288, 309, 312, 318, 320, 321, 324, 327, 328, 330, 332, 333, 336, 337, 341, 350, 364, 365, 386, 389, 393, 398, 407, 421, 428, 429, 448, 451, 455, 457, 459, 460, 461, 462, 466, 467, 468, 470, 477, 478, 482, 483, 484, 486, 487, 488, 489, 496, 499, 501, 504, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 592, 593, 616, 617, 619, 620, 636, 641, 643, 648, 649, 650, 651, 652, 655, 656, 658, 659, 661, 662, 663, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 681, 683, 685, 686, 687, 688, 696, 698, 699, 700, 701, 702, 703, 704, 710, 790, 802, 806, 807, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 831, 837, 838, 839, 843, 844, 847, 848, 849, 850, 852, 853, 854, 858, 862, 869, 870, 871, 878, 890, 894, 902, 905, 906, 908, 909, 910, 913, 914, 915, 918, 919, 921, 922, 923, 924, 942, 956, 957, 978, 980, 983, 1020, 1036], "randomtreesembed": [2, 143, 157, 239, 423, 923, 1000, 1042, 1049, 1050, 1054, 1055, 1056], "randomtreesembedding_": 575, "randomtreesembeddingrandomtreesembed": 143, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 81, 82, 83, 85, 86, 90, 95, 96, 98, 99, 111, 112, 114, 115, 138, 140, 141, 142, 145, 151, 154, 158, 168, 171, 172, 176, 191, 192, 196, 203, 207, 208, 212, 216, 218, 219, 222, 225, 226, 234, 236, 239, 241, 248, 249, 254, 255, 261, 263, 266, 267, 270, 271, 275, 276, 277, 279, 280, 281, 283, 284, 285, 287, 288, 289, 291, 296, 301, 307, 309, 310, 315, 317, 322, 323, 326, 330, 331, 337, 347, 354, 358, 359, 363, 366, 372, 378, 379, 381, 384, 386, 390, 393, 398, 410, 416, 420, 423, 426, 448, 469, 477, 479, 480, 481, 482, 483, 484, 486, 489, 499, 503, 504, 523, 536, 550, 562, 563, 568, 569, 572, 597, 598, 600, 638, 641, 647, 649, 657, 658, 678, 680, 685, 686, 687, 689, 701, 721, 740, 755, 797, 839, 845, 859, 861, 863, 864, 869, 883, 890, 891, 892, 898, 899, 902, 903, 906, 907, 956, 957, 999, 1006, 1010, 1014, 1024, 1030, 1034, 1046, 1047, 1048, 1049, 1051, 1054, 1057], "range_n_clust": 95, "range_n_outli": 114, "rangeindex": [191, 270, 505], "rangl": [1002, 1010, 1024, 1025], "ranjanikrishnan": 1054, "rank": [2, 43, 55, 62, 113, 128, 131, 145, 171, 193, 194, 236, 274, 276, 284, 380, 411, 413, 414, 418, 419, 421, 423, 424, 517, 518, 530, 533, 558, 559, 602, 603, 615, 657, 666, 678, 689, 705, 729, 735, 736, 748, 749, 765, 797, 803, 812, 813, 957, 999, 1001, 1002, 1007, 1018, 1020, 1034, 1036, 1042, 1047, 1050, 1051, 1055, 1056, 1059], "rank_": 666, "rank_t": 809, "rank_test_": 280, "rank_test_precis": [274, 280], "rank_test_recal": 274, "rank_test_scor": [276, 284, 809, 823, 1047], "rankdata": 1048, "ranked_exposur": [218, 236], "ranked_frequ": 218, "ranked_pure_premium": 236, "ranking_": [171, 602, 603], "rankylau": 1049, "ransac": [2, 188, 197, 224, 235, 533, 658, 666, 680, 687, 688, 1031], "ransacregressor": [2, 221, 224, 235, 407, 658, 687, 688, 1006, 1011, 1044, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1059], "rao": [420, 1053, 1056], "raphael": 1058, "rapha\u00ebl": 1051, "raphson": [657, 678, 689], "rapid": 1034, "rapidli": [222, 278, 1025, 1034], "rare": [64, 192, 323, 367, 388, 396, 398, 401, 414, 416, 420, 598, 657, 667, 668, 678, 689, 913, 944, 1006, 1020, 1034, 1048, 1049, 1050, 1054, 1056, 1059], "rarer": [358, 360, 424], "raschka": [1046, 1047, 1048, 1049, 1050, 1053], "rashchedrin": 1048, "rasmu": [196, 1048], "rasmussen": [180, 426, 619, 620, 623, 628, 631], "raspberri": 402, "raster": 104, "rastgoo": 1058, "rastogi": 1049, "rastrojo": [416, 714], "rasul": [1046, 1048, 1049], "rat": [50, 310, 379, 507], "rate": [2, 43, 138, 142, 148, 154, 168, 192, 218, 225, 236, 249, 255, 270, 273, 276, 285, 286, 313, 314, 315, 373, 384, 415, 416, 417, 421, 425, 454, 474, 545, 562, 563, 568, 569, 570, 571, 601, 604, 605, 607, 608, 609, 615, 653, 654, 677, 685, 686, 687, 701, 707, 711, 736, 791, 798, 869, 870, 871, 907, 999, 1006, 1007, 1010, 1013, 1014, 1024, 1026, 1034, 1045, 1049, 1050], "rather": [51, 64, 88, 115, 138, 141, 154, 186, 191, 218, 219, 232, 255, 290, 321, 322, 358, 359, 367, 372, 380, 382, 384, 386, 389, 390, 392, 396, 397, 398, 399, 416, 420, 421, 423, 424, 426, 456, 469, 471, 472, 475, 574, 590, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 638, 655, 656, 661, 662, 669, 670, 671, 672, 790, 823, 844, 846, 847, 876, 913, 914, 925, 930, 957, 1004, 1006, 1007, 1010, 1012, 1013, 1017, 1030, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1056, 1057, 1059, 1060], "ratio": [2, 46, 88, 101, 107, 132, 188, 249, 251, 264, 268, 371, 384, 416, 418, 420, 423, 458, 464, 502, 503, 524, 550, 558, 559, 560, 640, 667, 719, 721, 725, 734, 739, 745, 748, 791, 792, 793, 796, 804, 836, 839, 859, 906, 978, 1004, 1016, 1026, 1031, 1056, 1058], "ration": [2, 180, 270, 632, 1008], "rationalquadrat": [2, 180, 184, 426, 625], "raton": 1006, "raul": [1043, 1044], "rausch": [1049, 1050, 1053], "rauwuckl": 1053, "ravel": [2, 44, 53, 55, 57, 63, 77, 88, 89, 93, 113, 133, 139, 141, 147, 151, 157, 158, 159, 166, 175, 177, 179, 180, 181, 182, 191, 198, 208, 209, 211, 218, 231, 232, 239, 243, 245, 249, 251, 255, 259, 263, 265, 270, 279, 283, 285, 290, 297, 302, 303, 309, 310, 312, 313, 314, 315, 319, 320, 330, 334, 341, 347, 352, 353, 355, 356, 358, 364, 365, 473, 502, 503, 504, 640, 727, 996, 1010, 1057], "ravi": [1053, 1056], "raw": [2, 17, 43, 51, 52, 54, 72, 114, 126, 159, 180, 191, 196, 315, 324, 338, 360, 371, 379, 386, 392, 398, 414, 416, 418, 421, 424, 477, 482, 510, 511, 512, 568, 569, 570, 572, 591, 597, 598, 599, 600, 643, 686, 699, 703, 714, 795, 859, 917, 1007, 1010, 1014, 1016, 1017, 1020, 1023, 1042, 1046, 1049, 1052, 1058], "raw_coef_": [913, 914], "raw_covariance_": [418, 477, 482], "raw_data": 360, "raw_docu": [597, 600], "raw_location_": [418, 477, 482], "raw_model": 324, "raw_pixel_classifi": 315, "raw_support_": [477, 482], "raw_target_regr": 417, "raw_valu": [730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 799, 800, 1010, 1049, 1052], "raw_x": [424, 591], "raytheon": 51, "raz": 1055, "ra\u00fal": 1050, "rb": [47, 410], "rbf": [2, 44, 45, 49, 50, 66, 67, 129, 160, 166, 175, 176, 177, 179, 180, 181, 182, 184, 188, 196, 232, 244, 245, 251, 274, 276, 278, 281, 292, 303, 341, 342, 344, 353, 376, 404, 417, 421, 423, 460, 470, 511, 513, 544, 550, 619, 620, 621, 622, 625, 627, 628, 629, 630, 632, 633, 640, 648, 649, 650, 651, 652, 685, 700, 774, 783, 785, 809, 820, 823, 829, 873, 893, 908, 909, 913, 915, 916, 917, 918, 919, 999, 1002, 1003, 1005, 1007, 1010, 1016, 1020, 1023, 1031, 1036, 1047, 1052], "rbf_featur": [650, 1002], "rbf_kernel": [2, 412, 774, 1008, 1045, 1060], "rbf_svc": [341, 1025], "rbfsampler": [2, 250, 648, 649, 651, 1002, 1045, 1055, 1056], "rbm": [2, 315, 869, 870, 871, 1015], "rbm_features_classifi": 315, "rc": [232, 388], "rceil": [413, 1016], "rcond": 133, "rcparam": [47, 245, 250, 324], "rcv1": [2, 377, 506, 1036, 1046], "rcwoolston": 1052, "rd": 424, "rd9e56ef97513": 2, "rda": 381, "rdbu": [67, 70, 124, 234, 312, 347, 352], "rdbu_r": [89, 115, 134, 347], "rdownload": 47, "rdylbu": [147, 363], "re": [43, 47, 53, 63, 64, 91, 104, 105, 138, 148, 178, 190, 191, 236, 252, 262, 266, 279, 281, 285, 327, 358, 360, 372, 384, 385, 392, 397, 399, 407, 414, 420, 424, 477, 478, 479, 480, 481, 482, 483, 484, 500, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 655, 661, 669, 671, 811, 826, 829, 921, 922, 923, 924, 1006, 1011, 1013, 1020, 1025, 1030, 1034, 1041, 1045, 1046, 1048, 1050, 1060], "reach": [96, 144, 149, 173, 181, 218, 220, 234, 236, 270, 278, 330, 347, 366, 389, 399, 402, 416, 421, 425, 458, 465, 517, 518, 602, 603, 636, 653, 654, 655, 656, 661, 662, 663, 664, 665, 669, 670, 671, 672, 675, 676, 677, 685, 686, 687, 688, 690, 691, 692, 693, 738, 739, 792, 806, 807, 870, 871, 910, 999, 1010, 1014, 1024, 1026, 1034, 1052, 1056, 1057, 1058], "reachability_": [100, 416, 458, 463, 464, 465], "reachabl": [2, 90, 100, 454, 458, 463, 464, 465, 859, 963], "react": 309, "reactiv": 390, "read": [47, 52, 55, 124, 238, 283, 326, 327, 328, 330, 332, 371, 378, 385, 386, 387, 388, 389, 391, 392, 396, 397, 398, 404, 410, 416, 427, 428, 429, 430, 433, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 953, 999, 1006, 1010, 1011, 1029, 1034, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1058, 1059], "read_byt": 47, "read_csv": [51, 389, 505, 1056], "read_csv_kwarg": [505, 1057], "read_parquet": 52, "readabl": [115, 277, 329, 389, 390, 392, 543, 1050, 1053, 1054, 1055, 1056], "reader": [45, 77, 329, 373, 384], "readi": [43, 46, 180, 219, 270, 379, 384, 388, 392, 472], "readili": [330, 421, 1026, 1034], "readm": [392, 424, 502], "readonli": [913, 914, 1054, 1056, 1057], "readonly_memmap": 1058, "readthedoc": 398, "real": [52, 67, 70, 90, 92, 104, 108, 111, 113, 114, 138, 154, 178, 191, 222, 242, 245, 255, 269, 270, 282, 291, 301, 304, 318, 319, 346, 351, 360, 371, 377, 378, 381, 388, 390, 393, 396, 397, 398, 413, 414, 416, 418, 420, 421, 423, 424, 477, 497, 498, 502, 503, 504, 505, 506, 509, 510, 513, 519, 560, 561, 562, 564, 565, 566, 567, 568, 569, 573, 574, 601, 603, 604, 605, 606, 607, 608, 609, 640, 708, 713, 733, 737, 761, 764, 766, 794, 804, 838, 870, 871, 915, 916, 917, 918, 919, 922, 924, 1000, 1001, 1002, 1007, 1010, 1012, 1014, 1015, 1016, 1026, 1028, 1031, 1036, 1041, 1054, 1058], "real_cov": [111, 112, 429, 478, 481, 482, 483, 484, 487, 488, 489], "real_data": 301, "realist": [43, 47, 278, 285, 286, 344, 379, 1010], "realiti": 380, "realiz": [218, 1034], "realli": [111, 193, 207, 388, 389, 390, 1010, 1016, 1034, 1055], "reappli": 423, "rearrang": [58, 59, 413], "reason": [43, 47, 51, 64, 77, 88, 104, 151, 154, 173, 191, 192, 196, 218, 219, 226, 236, 245, 249, 250, 252, 255, 270, 273, 276, 277, 282, 294, 297, 318, 322, 351, 359, 360, 367, 371, 372, 373, 379, 383, 384, 385, 386, 388, 392, 396, 397, 398, 399, 415, 416, 417, 418, 421, 423, 424, 517, 541, 583, 647, 655, 661, 663, 681, 696, 701, 772, 809, 823, 857, 862, 869, 888, 910, 929, 931, 932, 999, 1000, 1005, 1006, 1007, 1010, 1012, 1013, 1014, 1016, 1020, 1024, 1025, 1026, 1034, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "reassign": [85, 384, 455, 457, 1042, 1046], "reassignment_ratio": 457, "rebalanc": 398, "rebas": 388, "rebecca": 1048, "rebekah": [1049, 1050, 1051], "reboul": 1051, "rebuild": [371, 382, 410, 424, 450], "rebuilt": [68, 382, 853, 854], "rec": [57, 360, 379, 650], "rec_l1": 53, "rec_l2": 53, "rec_macro": 420, "recal": [2, 45, 62, 68, 104, 115, 129, 170, 188, 246, 255, 268, 270, 274, 294, 315, 336, 337, 384, 398, 415, 416, 513, 613, 709, 715, 716, 717, 721, 722, 736, 738, 739, 740, 791, 792, 793, 796, 797, 831, 839, 842, 874, 893, 897, 913, 1006, 1026, 1031, 1044, 1045, 1048, 1050, 1051, 1053, 1054, 1055, 1057, 1058], "recalcul": [256, 258, 416, 1038, 1041], "recall_macro": [420, 1010], "recall_scor": [2, 62, 270, 283, 420, 717, 793, 1010, 1041, 1043, 1044, 1045, 1046, 1051, 1057], "recant": 399, "receiv": [0, 2, 57, 164, 188, 246, 252, 258, 268, 270, 271, 273, 360, 367, 384, 386, 392, 398, 415, 420, 423, 513, 667, 711, 715, 717, 736, 791, 797, 798, 828, 839, 841, 842, 880, 918, 1011, 1014, 1015, 1024, 1031, 1051, 1052], "recent": [52, 252, 382, 389, 392, 398, 416, 476, 547, 574, 1024, 1034, 1044, 1053], "recht": [650, 1002], "recip": [388, 410, 1007, 1034], "reciproc": [380, 1010], "reckon": 379, "recogn": [43, 44, 65, 86, 88, 118, 127, 146, 171, 188, 219, 269, 301, 329, 336, 337, 390, 407, 416, 424, 511, 706, 722, 839, 918, 1010, 1031, 1058], "recognit": [42, 48, 54, 124, 188, 251, 254, 315, 322, 377, 389, 421, 423, 425, 503, 511, 541, 543, 550, 706, 717, 722, 750, 778, 797, 798, 806, 823, 839, 893, 918, 1002, 1006, 1010, 1011, 1015, 1025, 1027, 1031, 1036, 1041], "recommend": [118, 146, 186, 235, 246, 252, 272, 285, 321, 328, 351, 371, 372, 378, 379, 382, 384, 386, 390, 392, 396, 402, 410, 419, 420, 421, 423, 425, 446, 455, 457, 459, 468, 505, 517, 544, 547, 553, 558, 570, 571, 578, 591, 592, 598, 615, 620, 640, 641, 647, 667, 668, 679, 685, 701, 706, 707, 709, 711, 815, 821, 823, 832, 869, 876, 878, 885, 892, 893, 898, 899, 901, 902, 903, 904, 906, 915, 918, 957, 998, 999, 1007, 1010, 1012, 1014, 1017, 1020, 1022, 1024, 1025, 1026, 1028, 1034, 1036, 1043, 1044, 1050, 1051, 1052, 1053, 1055, 1057], "recompil": [385, 390, 402], "recomput": [90, 91, 256, 258, 299, 326, 477, 482, 1006, 1022, 1046, 1057], "reconstruct": [2, 42, 55, 58, 101, 124, 125, 129, 188, 217, 241, 242, 330, 410, 421, 424, 490, 491, 492, 540, 542, 544, 546, 547, 548, 549, 551, 552, 554, 555, 557, 592, 596, 661, 681, 697, 698, 702, 905, 906, 1006, 1007, 1031, 1055], "reconstruct_from_patches_2d": [2, 127, 424, 592], "reconstruction_err_": [547, 549], "reconstruction_error": 697, "reconstruction_error_": 698, "record": [2, 50, 125, 142, 154, 193, 252, 270, 323, 360, 371, 384, 410, 416, 418, 458, 465, 507, 629, 652, 701, 780, 783, 787, 788, 789, 790, 836, 859, 1054, 1055], "recov": [75, 100, 115, 125, 126, 131, 148, 175, 190, 203, 217, 218, 222, 238, 360, 418, 422, 425, 428, 468, 542, 568, 1006, 1007, 1009, 1030, 1047], "recoveri": [51, 115, 203, 217, 418, 425], "recreat": [83, 256], "recreate_imag": 83, "rect": [47, 87, 198], "rect_colorbar": 317, "rect_histi": 317, "rect_histx": 317, "rect_scatt": 317, "rectangl": 47, "rectangular": [379, 398, 957, 1030], "rectifi": [870, 871], "recurs": [2, 18, 52, 86, 155, 164, 167, 170, 173, 188, 271, 274, 275, 281, 290, 301, 362, 386, 416, 420, 448, 449, 450, 453, 471, 511, 524, 572, 602, 603, 606, 611, 641, 642, 667, 828, 873, 883, 1010, 1013, 1016, 1017, 1026, 1031, 1032, 1036, 1041, 1051, 1052], "recursionerror": 1059, "red": [48, 49, 50, 63, 69, 70, 95, 113, 122, 124, 125, 126, 141, 159, 162, 184, 196, 198, 199, 208, 216, 243, 256, 271, 282, 310, 313, 318, 322, 323, 338, 347, 365, 382, 398, 416, 421, 1011], "reda": 1047, "redden": 1052, "reddi": [1048, 1049, 1050, 1055, 1058], "redefin": [58, 151, 191], "redesign": [396, 1041], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 450, "redo": 359, "reduc": [2, 37, 43, 46, 77, 80, 81, 82, 83, 88, 105, 106, 111, 141, 151, 153, 154, 157, 170, 191, 198, 199, 203, 216, 222, 223, 226, 247, 249, 252, 255, 277, 283, 294, 306, 319, 322, 323, 331, 359, 360, 367, 376, 378, 381, 384, 390, 396, 398, 410, 414, 415, 416, 418, 420, 421, 423, 424, 425, 427, 452, 453, 458, 465, 468, 502, 543, 553, 558, 564, 565, 566, 567, 572, 573, 574, 575, 582, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 619, 636, 652, 661, 681, 682, 683, 684, 696, 701, 704, 790, 809, 812, 813, 815, 823, 832, 834, 835, 836, 837, 840, 882, 883, 890, 902, 905, 906, 913, 914, 921, 922, 923, 924, 999, 1002, 1004, 1005, 1006, 1007, 1010, 1013, 1022, 1023, 1025, 1027, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1057, 1059], "reduce_dim": [106, 257, 275, 417], "reduce_dim__k": 106, "reduce_dim__n_compon": [106, 275, 417], "reduce_func": [790, 1052], "reduced_data": 93, "reducer_label": 106, "reduct": [2, 11, 45, 57, 89, 92, 103, 107, 118, 124, 132, 141, 157, 188, 237, 239, 240, 243, 249, 253, 298, 305, 307, 330, 344, 367, 371, 376, 416, 417, 419, 421, 423, 425, 476, 490, 491, 492, 493, 511, 539, 541, 543, 544, 547, 548, 549, 550, 553, 556, 558, 562, 563, 566, 567, 568, 569, 573, 574, 575, 608, 616, 697, 698, 699, 700, 701, 702, 790, 809, 839, 855, 862, 869, 873, 874, 883, 893, 911, 913, 921, 922, 923, 924, 1002, 1007, 1022, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1042, 1043, 1044, 1047, 1055, 1056, 1057], "redund": [62, 64, 134, 172, 262, 267, 333, 367, 380, 383, 384, 389, 398, 414, 524, 643, 1030, 1053], "redundantli": 398, "ref": [384, 392, 1000, 1047], "ref_lin": 446, "refactor": [330, 436, 1041, 1043, 1044, 1045, 1051, 1054, 1055, 1056], "refer": [43, 44, 72, 73, 95, 98, 105, 113, 120, 138, 152, 154, 159, 173, 180, 184, 193, 205, 236, 252, 255, 270, 276, 281, 282, 283, 290, 300, 307, 317, 326, 327, 328, 329, 330, 331, 332, 333, 334, 359, 372, 378, 379, 381, 382, 384, 385, 386, 387, 389, 390, 391, 392, 396, 397, 398, 399, 402, 407, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 445, 446, 447, 448, 450, 452, 454, 455, 456, 458, 459, 460, 461, 462, 465, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 507, 512, 520, 522, 524, 525, 526, 527, 528, 529, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 553, 556, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 599, 602, 603, 604, 611, 616, 617, 619, 620, 623, 628, 631, 632, 636, 637, 640, 641, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 656, 658, 660, 662, 664, 665, 667, 670, 672, 674, 675, 676, 677, 680, 682, 684, 685, 687, 688, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 713, 714, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 740, 743, 744, 745, 746, 747, 749, 750, 752, 765, 767, 768, 778, 792, 794, 795, 797, 798, 801, 802, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 848, 849, 850, 852, 855, 858, 859, 860, 862, 869, 870, 871, 873, 878, 879, 880, 882, 883, 885, 886, 887, 889, 890, 891, 893, 894, 901, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 921, 922, 923, 924, 944, 951, 952, 957, 975, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1033, 1041, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "referenc": [381, 384, 386, 392, 398, 905, 906, 1013, 1048, 1054], "references_": 890, "refin": [62, 115, 480, 718, 1010], "refit": [145, 164, 170, 172, 188, 268, 275, 277, 280, 283, 284, 288, 398, 415, 420, 426, 511, 576, 577, 636, 668, 674, 722, 809, 812, 813, 823, 831, 839, 918, 999, 1006, 1010, 1031, 1048, 1049, 1050, 1059], "refit_strategi": 274, "refit_time_": [809, 812, 813, 823, 1049], "reflect": [51, 75, 81, 82, 113, 122, 125, 148, 192, 193, 218, 236, 285, 301, 359, 380, 383, 384, 388, 398, 401, 413, 458, 464, 1007, 1010, 1016, 1018, 1042, 1050, 1059], "reformul": 383, "refrain": [219, 384], "refurbish": 7, "refus": [270, 396, 903, 904], "reg": [152, 191, 199, 252, 318, 327, 352, 423, 567, 569, 577, 659, 660, 662, 663, 664, 665, 666, 672, 673, 674, 679, 680, 687, 688, 698, 702, 924, 1006, 1046], "reg1": [162, 423], "reg2": [162, 423], "reg3": [162, 423], "reg_covar": [261, 806, 807], "reg_nnl": 213, "reg_ol": 213, "reg_param": [559, 1060], "regard": [0, 11, 44, 46, 50, 52, 88, 90, 105, 120, 129, 165, 175, 180, 192, 193, 207, 215, 220, 240, 251, 255, 278, 285, 286, 300, 359, 379, 380, 384, 385, 389, 396, 398, 404, 410, 416, 421, 423, 424, 426, 451, 455, 460, 467, 470, 510, 623, 628, 665, 667, 710, 752, 807, 815, 831, 832, 837, 855, 856, 1003, 1006, 1010, 1012, 1013, 1015, 1017, 1024, 1025, 1026, 1048, 1051], "regardless": [236, 277, 278, 279, 372, 384, 416, 544, 641, 642, 667, 713, 724, 1010, 1022, 1049, 1056, 1057], "regedit": 402, "regener": 878, "regex": [276, 360, 472, 474], "regexp": [597, 598, 600], "regim": [43, 398, 913, 914, 1009], "region": [51, 55, 59, 62, 71, 82, 83, 84, 88, 91, 101, 160, 182, 188, 191, 218, 236, 245, 249, 250, 267, 309, 320, 347, 354, 381, 391, 398, 416, 423, 426, 456, 458, 464, 470, 596, 1007, 1010, 1013, 1016, 1020, 1024, 1026, 1031], "region_1": 323, "region_2": 323, "regist": [2, 203, 358, 390, 979], "register_parallel_backend": [2, 1049, 1059], "registri": [382, 402, 1029], "regr": [214, 417, 563, 565, 574, 655, 656, 676, 846, 871, 914, 916, 919, 1025], "regr_1": [139, 364, 365], "regr_2": [139, 364, 365], "regr_3": 365, "regr_multirf": 158, "regr_rf": 158, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 89, 103, 105, 113, 114, 116, 120, 125, 126, 127, 134, 137, 138, 141, 143, 144, 145, 146, 149, 150, 153, 154, 158, 159, 165, 171, 173, 174, 176, 184, 186, 187, 188, 190, 191, 192, 194, 197, 200, 201, 203, 204, 206, 208, 212, 213, 215, 219, 221, 222, 223, 224, 227, 229, 234, 241, 244, 246, 254, 255, 256, 259, 270, 272, 284, 287, 289, 290, 291, 296, 298, 300, 314, 315, 317, 318, 321, 322, 328, 329, 330, 331, 333, 342, 343, 344, 354, 355, 358, 361, 362, 366, 372, 373, 376, 377, 379, 381, 384, 386, 389, 392, 393, 396, 397, 398, 411, 414, 418, 419, 420, 421, 423, 425, 439, 445, 472, 473, 482, 492, 497, 498, 501, 505, 510, 511, 513, 514, 521, 525, 526, 527, 533, 537, 540, 544, 546, 548, 550, 551, 552, 554, 555, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 579, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 614, 615, 618, 619, 620, 623, 624, 631, 632, 634, 640, 641, 642, 643, 644, 646, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 703, 710, 715, 730, 732, 733, 737, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 794, 799, 800, 809, 812, 813, 815, 823, 832, 836, 837, 839, 840, 842, 844, 846, 847, 855, 856, 861, 863, 864, 870, 871, 873, 874, 877, 878, 880, 886, 887, 888, 890, 893, 894, 897, 902, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 927, 931, 933, 939, 942, 944, 961, 999, 1000, 1002, 1005, 1007, 1017, 1018, 1020, 1021, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "regression_data": 46, "regression_model": 1048, "regression_test": 392, "regressioncriterion": 1049, "regressionregressionramdomizedpcaramdom": 404, "regressor": [2, 30, 43, 109, 118, 152, 158, 159, 162, 175, 180, 187, 188, 191, 197, 199, 201, 203, 218, 219, 221, 224, 235, 236, 252, 279, 291, 302, 322, 327, 328, 371, 384, 386, 396, 398, 414, 417, 426, 439, 442, 443, 444, 473, 490, 491, 492, 493, 533, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 574, 575, 576, 577, 578, 579, 614, 615, 618, 620, 641, 642, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 687, 688, 710, 841, 842, 845, 846, 847, 856, 864, 869, 870, 871, 874, 880, 888, 893, 894, 914, 916, 919, 921, 922, 923, 924, 927, 931, 932, 933, 946, 949, 951, 999, 1000, 1006, 1010, 1011, 1013, 1018, 1024, 1029, 1031, 1032, 1036, 1041, 1042, 1046, 1047, 1048, 1050, 1051, 1054, 1055, 1056, 1058, 1060], "regressor_": [191, 473, 602, 603, 606], "regressor__sample_weight": 218, "regressor_tag": [932, 946], "regressor_with_": 190, "regressor_without_": 190, "regressorchain": [2, 407, 844, 846, 1049, 1052, 1056], "regressormixin": [2, 252, 386, 398, 473, 933, 1052], "regressortag": [2, 932, 946], "regul": 0, "regular": [2, 62, 64, 67, 71, 92, 94, 95, 96, 105, 107, 112, 129, 137, 147, 149, 150, 152, 157, 164, 166, 175, 176, 177, 179, 182, 184, 186, 188, 190, 197, 198, 199, 201, 203, 205, 206, 207, 209, 214, 216, 218, 225, 232, 234, 236, 251, 262, 269, 272, 277, 278, 280, 289, 302, 303, 311, 313, 314, 315, 319, 320, 322, 323, 324, 341, 342, 344, 346, 347, 348, 351, 352, 358, 360, 362, 371, 384, 396, 397, 414, 416, 418, 419, 421, 422, 423, 426, 445, 451, 455, 479, 480, 484, 486, 487, 488, 489, 513, 521, 523, 524, 529, 531, 533, 537, 547, 548, 549, 552, 556, 557, 559, 568, 570, 571, 597, 598, 600, 647, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 702, 744, 750, 759, 806, 807, 826, 839, 840, 870, 871, 874, 893, 913, 914, 915, 916, 918, 919, 920, 999, 1000, 1002, 1003, 1004, 1007, 1009, 1015, 1016, 1020, 1023, 1024, 1025, 1031, 1032, 1034, 1036, 1041, 1042, 1043, 1045, 1046, 1050, 1051, 1053, 1054, 1059], "regularis": [222, 429, 481, 483], "regularli": [147, 294, 396, 1012], "regulatori": 154, "rehan": 1056, "rehman": 1049, "reiichiro": [1048, 1049], "reilli": 1058, "reimburs": 270, "reimplement": [390, 396, 398, 1047, 1051], "reinforc": 1030, "reinit": 392, "reiniti": 396, "reinstal": 402, "reintroduc": 1057, "reitsam": 1053, "reject": [253, 270, 398, 399, 532, 680, 736, 939, 940, 1006, 1010, 1049], "rel": [43, 45, 47, 55, 58, 64, 90, 96, 129, 145, 180, 194, 196, 199, 218, 236, 264, 303, 304, 318, 327, 330, 347, 351, 358, 359, 379, 383, 386, 392, 398, 414, 416, 420, 423, 424, 426, 448, 451, 455, 457, 467, 530, 533, 540, 543, 546, 550, 554, 555, 566, 567, 568, 569, 573, 574, 575, 613, 658, 667, 668, 680, 681, 683, 699, 703, 738, 756, 809, 812, 813, 815, 823, 832, 837, 840, 853, 854, 858, 870, 871, 882, 883, 893, 909, 913, 914, 915, 918, 920, 921, 922, 923, 924, 1006, 1007, 1010, 1012, 1013, 1014, 1016], "relabel": [383, 827, 828, 910], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 378, 379, 380, 383, 384, 388, 389, 391, 392, 393, 396, 398, 399, 401, 407, 410, 415, 416, 417, 418, 419, 420, 421, 423, 426, 458, 472, 477, 505, 558, 559, 571, 572, 648, 682, 686, 701, 710, 732, 752, 830, 836, 871, 872, 874, 877, 878, 883, 886, 888, 889, 892, 901, 917, 999, 1002, 1004, 1010, 1011, 1013, 1014, 1017, 1020, 1025, 1026, 1027, 1030, 1031, 1033, 1036, 1041, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1057], "relate_point": 307, "relationship": [2, 43, 52, 58, 138, 139, 154, 181, 190, 191, 198, 203, 206, 218, 220, 221, 283, 290, 296, 318, 324, 333, 398, 416, 418, 420, 470, 505, 645, 723, 1007, 1010, 1012, 1013, 1017, 1018, 1046], "relative_tim": 264, "relax": [46, 416, 424, 461, 1023, 1048], "releas": [0, 54, 90, 105, 142, 143, 156, 173, 186, 187, 192, 193, 196, 218, 219, 220, 247, 252, 257, 258, 259, 270, 271, 288, 290, 299, 323, 339, 366, 372, 382, 384, 385, 387, 392, 396, 398, 424, 451, 454, 455, 472, 475, 498, 499, 505, 510, 511, 513, 521, 524, 530, 533, 547, 550, 570, 571, 573, 574, 576, 608, 611, 637, 639, 641, 643, 649, 655, 657, 661, 667, 678, 689, 697, 706, 710, 711, 726, 727, 741, 751, 757, 787, 797, 804, 808, 809, 810, 812, 813, 815, 823, 831, 832, 835, 836, 839, 855, 857, 874, 878, 883, 886, 887, 888, 892, 893, 894, 910, 911, 913, 918, 921, 922, 952, 1026, 1031, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "release_highlight": 1031, "relev": [46, 48, 57, 110, 114, 173, 188, 198, 212, 221, 276, 277, 283, 367, 371, 373, 379, 381, 383, 384, 386, 389, 390, 398, 399, 407, 418, 419, 425, 426, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 735, 749, 765, 808, 810, 811, 812, 813, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 891, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 1010, 1011, 1016, 1027, 1030, 1031, 1044, 1049, 1055], "reli": [129, 144, 148, 173, 194, 205, 207, 294, 297, 327, 331, 358, 371, 372, 386, 389, 392, 393, 396, 398, 412, 413, 416, 421, 423, 424, 558, 602, 606, 616, 617, 787, 837, 840, 878, 962, 975, 999, 1002, 1004, 1006, 1010, 1013, 1018, 1020, 1025, 1034, 1049, 1050, 1051, 1055, 1057, 1058], "reliabl": [2, 62, 64, 414, 420, 446, 447, 655, 1026, 1034], "relianc": [129, 222], "religion": [57, 277, 358, 359, 360, 379, 1011], "reloc": 1050, "relova": 1054, "relu": [870, 871], "remain": [47, 62, 64, 105, 138, 145, 150, 152, 172, 191, 218, 222, 234, 261, 274, 278, 282, 285, 413, 416, 417, 418, 420, 424, 454, 472, 475, 524, 525, 530, 537, 543, 579, 619, 620, 772, 778, 812, 813, 814, 817, 819, 848, 849, 850, 852, 961, 999, 1000, 1002, 1009, 1010, 1014, 1020, 1026, 1030, 1043, 1049, 1055, 1058], "remaind": [43, 148, 191, 207, 218, 220, 236, 255, 331, 362, 417, 472, 475, 1041, 1048, 1049, 1050, 1053, 1054, 1057, 1059], "remaining_column": 472, "remark": [90, 118, 173, 270, 373, 384, 1020], "remedi": 235, "rememb": [90, 386, 388, 389, 402, 424, 1013, 1017, 1026], "remi": 1048, "remind": [252, 399], "reminisc": 127, "remot": [196, 337, 384, 387], "remov": [1, 2, 44, 54, 55, 89, 90, 104, 109, 171, 173, 186, 187, 191, 194, 277, 317, 324, 326, 327, 328, 333, 358, 359, 362, 367, 376, 379, 383, 384, 385, 386, 388, 389, 393, 398, 402, 409, 416, 417, 420, 423, 424, 426, 427, 436, 449, 450, 452, 453, 458, 465, 490, 491, 492, 493, 496, 497, 536, 543, 544, 546, 547, 548, 549, 550, 555, 562, 576, 577, 578, 579, 588, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 620, 639, 653, 663, 664, 665, 667, 668, 682, 684, 688, 701, 718, 751, 759, 760, 787, 788, 789, 791, 809, 812, 813, 815, 823, 832, 834, 835, 836, 837, 838, 840, 860, 872, 873, 877, 878, 890, 891, 893, 902, 910, 928, 937, 939, 940, 951, 952, 1000, 1007, 1013, 1026, 1032, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "remove_zero_eig": [544, 1043, 1050], "rempfler": 1052, "renaissance0n": 1059, "renam": [152, 194, 266, 277, 326, 384, 388, 416, 454, 455, 467, 472, 479, 480, 486, 536, 545, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 787, 886, 937, 939, 940, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "rename_axi": 276, "render": [51, 63, 88, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 213, 222, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 384, 386, 388, 389, 390, 398, 560, 598, 640, 709, 711, 890, 902, 925, 927, 1009, 1026, 1054, 1058], "rene": 1054, "renni": [2, 848, 850, 1012, 1049], "renorm": 63, "rent": 43, "rental": [43, 52, 192, 1017], "reorder": [58, 130, 398, 706, 727, 1030, 1049], "reordered_data": 58, "reordered_row": 58, "reorgan": 1047, "rep": 381, "reparameter": 1025, "reparametr": 354, "repartit": 43, "repeat": [2, 49, 69, 101, 112, 114, 150, 173, 175, 181, 182, 192, 196, 220, 270, 271, 276, 277, 288, 294, 337, 359, 360, 386, 393, 398, 399, 413, 414, 416, 421, 424, 425, 597, 602, 616, 617, 624, 636, 643, 668, 814, 824, 825, 828, 945, 1000, 1009, 1026, 1036, 1049, 1051], "repeatedkfold": [2, 191, 420, 814, 825, 1048], "repeatedli": [138, 330, 367, 398, 416, 423, 426, 517, 555, 675, 676, 685, 686, 687, 790, 1000, 1014], "repeatedstratifiedkfold": [2, 276, 290, 294, 420, 824, 828, 1048, 1060], "repercuss": 322, "repetit": [276, 290, 294, 389, 420, 824, 825, 1018, 1055], "replac": [2, 43, 62, 113, 128, 138, 154, 175, 180, 182, 186, 192, 204, 219, 259, 279, 297, 319, 324, 328, 349, 382, 384, 388, 390, 393, 398, 410, 417, 420, 423, 424, 449, 453, 472, 512, 524, 564, 565, 572, 591, 597, 598, 599, 600, 616, 617, 636, 639, 643, 648, 650, 737, 794, 815, 821, 823, 832, 872, 873, 876, 896, 909, 910, 916, 929, 931, 978, 980, 983, 999, 1000, 1002, 1006, 1010, 1020, 1025, 1026, 1029, 1030, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1060], "replai": [812, 813], "repli": [54, 358, 383, 384, 387], "replic": [276, 383, 386, 1036], "repo": [384, 388, 1030, 1033], "report": [0, 2, 43, 47, 52, 68, 104, 109, 170, 183, 205, 270, 274, 284, 290, 294, 326, 336, 367, 379, 383, 385, 386, 387, 390, 392, 396, 398, 402, 410, 416, 420, 620, 658, 667, 673, 694, 695, 709, 722, 738, 739, 747, 792, 793, 796, 842, 851, 870, 871, 908, 926, 951, 1006, 1013, 1018, 1029, 1030, 1033, 1042, 1045, 1048, 1049, 1051, 1052, 1054, 1056, 1057], "reporthook": 47, "repositori": [43, 47, 52, 196, 270, 332, 377, 379, 381, 382, 384, 386, 388, 392, 396, 399, 402, 513, 1029, 1033, 1036], "repr": [586, 1052, 1053, 1055], "repreat": 276, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 83, 84, 85, 88, 121, 124, 126, 132, 133, 145, 146, 155, 191, 198, 210, 220, 222, 223, 227, 240, 242, 250, 255, 264, 269, 270, 273, 276, 279, 283, 302, 319, 351, 358, 360, 366, 373, 376, 379, 381, 386, 396, 397, 398, 399, 410, 414, 416, 420, 421, 422, 423, 424, 425, 446, 450, 454, 460, 471, 472, 478, 479, 480, 481, 482, 483, 484, 496, 498, 499, 501, 503, 505, 507, 509, 510, 511, 513, 514, 519, 536, 543, 545, 547, 549, 550, 556, 559, 564, 572, 590, 597, 600, 603, 638, 641, 643, 649, 685, 687, 706, 708, 710, 720, 739, 752, 798, 809, 811, 822, 823, 826, 829, 831, 836, 838, 839, 842, 843, 849, 855, 856, 857, 859, 860, 861, 863, 864, 865, 870, 871, 880, 886, 887, 910, 913, 914, 939, 940, 961, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1021, 1023, 1024, 1026, 1047, 1049, 1052, 1053, 1056, 1059], "represent": [2, 43, 51, 55, 58, 63, 88, 105, 106, 124, 127, 143, 145, 146, 155, 156, 157, 159, 162, 170, 180, 191, 193, 196, 200, 203, 238, 239, 240, 246, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 294, 307, 315, 323, 328, 330, 331, 333, 338, 359, 360, 366, 367, 376, 378, 387, 398, 410, 416, 417, 421, 422, 423, 430, 471, 540, 544, 546, 549, 551, 557, 575, 597, 599, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 639, 652, 655, 661, 667, 668, 669, 671, 675, 676, 677, 685, 686, 687, 778, 806, 807, 815, 832, 869, 882, 886, 887, 891, 893, 906, 913, 925, 927, 930, 936, 953, 975, 1002, 1007, 1009, 1011, 1013, 1014, 1015, 1017, 1020, 1025, 1030, 1041, 1042, 1045, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "reproduc": [44, 51, 95, 138, 191, 196, 205, 285, 294, 315, 372, 383, 384, 386, 387, 392, 396, 398, 416, 420, 421, 424, 428, 448, 462, 468, 477, 482, 496, 499, 501, 504, 506, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 560, 562, 563, 564, 565, 568, 569, 570, 571, 572, 616, 617, 619, 620, 643, 648, 649, 650, 651, 655, 656, 659, 661, 662, 663, 669, 670, 671, 672, 675, 676, 677, 680, 685, 687, 688, 698, 699, 701, 702, 703, 802, 806, 807, 811, 812, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 837, 838, 839, 843, 844, 847, 858, 862, 869, 870, 871, 878, 890, 894, 902, 905, 906, 913, 914, 915, 918, 956, 957, 980, 983, 1002, 1029, 1033, 1041, 1049, 1054, 1055], "reproduct": [396, 1006], "request": [2, 47, 55, 81, 218, 236, 252, 329, 372, 378, 382, 383, 387, 398, 399, 407, 410, 421, 424, 425, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 590, 591, 597, 599, 600, 608, 609, 619, 620, 641, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 708, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 965, 966, 968, 1010, 1013, 1033, 1047, 1048, 1049, 1058, 1059], "request_rout": 252, "requir": [30, 31, 43, 46, 53, 62, 80, 81, 83, 88, 90, 92, 93, 102, 104, 120, 128, 130, 143, 144, 148, 149, 152, 154, 155, 159, 173, 192, 203, 207, 215, 218, 238, 240, 246, 249, 252, 255, 259, 270, 277, 285, 287, 290, 297, 299, 317, 322, 328, 329, 358, 359, 360, 378, 381, 382, 384, 385, 386, 390, 392, 396, 398, 399, 402, 403, 407, 410, 412, 416, 417, 418, 420, 421, 423, 424, 425, 427, 433, 439, 445, 446, 447, 452, 454, 458, 460, 465, 470, 472, 475, 477, 490, 491, 492, 505, 517, 530, 533, 544, 550, 558, 559, 560, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 581, 588, 589, 590, 611, 619, 620, 628, 636, 641, 642, 643, 652, 655, 656, 661, 662, 667, 668, 675, 676, 677, 680, 683, 684, 685, 686, 687, 695, 698, 700, 701, 702, 704, 708, 733, 738, 739, 751, 756, 758, 761, 772, 792, 793, 796, 808, 809, 812, 813, 816, 818, 823, 831, 836, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 870, 873, 874, 875, 877, 887, 888, 889, 893, 901, 905, 906, 908, 909, 913, 914, 915, 918, 921, 922, 923, 924, 930, 932, 933, 939, 940, 946, 951, 952, 966, 969, 975, 995, 998, 999, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1024, 1025, 1026, 1030, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "requires_fit": [932, 993, 1060], "requires_i": [433, 439, 998, 1052], "requires_positive_x": [1051, 1056], "requires_vector_input": [621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "requisit": 386, "rerais": 1058, "rerun": [51, 63, 77, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 200, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 392], "resampl": [2, 87, 151, 191, 236, 301, 393, 396, 398, 564, 565, 983, 1030, 1050, 1054], "resampled_arrai": 980, "rescal": [43, 81, 82, 90, 129, 200, 205, 241, 255, 317, 356, 418, 423, 428, 477, 478, 479, 480, 481, 482, 483, 484, 542, 547, 655, 658, 661, 885, 891, 915, 916, 917, 918, 919, 1010, 1020, 1045, 1046, 1060], "rescaled_coin": [81, 82], "rescu": [410, 424], "research": [0, 173, 190, 270, 276, 282, 294, 379, 381, 396, 416, 510, 522, 644, 654, 701, 744, 838, 843, 999, 1007, 1011, 1013, 1025, 1030, 1034], "resembl": [74, 222, 252], "reserv": [270, 323, 384, 570, 571, 1034], "reserva": 323, "reservoir": 978, "reservoir_sampl": 978, "reset": [259, 367, 392, 543, 685, 686, 687, 853, 854, 882, 883, 893, 998, 1043], "reset_n_cal": [853, 854], "reshama": [0, 369, 374, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1059], "reshap": [2, 43, 44, 45, 53, 61, 68, 81, 82, 83, 85, 86, 88, 89, 93, 106, 113, 117, 124, 127, 133, 141, 146, 147, 157, 166, 171, 175, 177, 178, 179, 180, 181, 182, 184, 198, 209, 215, 231, 232, 234, 235, 239, 241, 243, 245, 250, 254, 265, 274, 301, 303, 310, 312, 314, 315, 318, 319, 320, 324, 326, 329, 330, 332, 333, 341, 346, 347, 352, 355, 356, 396, 413, 421, 423, 424, 453, 473, 593, 640, 741, 839, 888, 892, 1006, 1020, 1026, 1046], "resid": 379, "residence_sinc": 270, "residenti": 159, "residu": [2, 109, 214, 220, 272, 439, 473, 490, 491, 492, 561, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 680, 681, 682, 683, 687, 688, 694, 695, 710, 753, 794, 846, 847, 856, 864, 871, 914, 916, 919, 922, 924, 1006, 1010, 1053, 1054, 1056], "residual_metr": 1047, "residual_threshold": [235, 680, 1006, 1054], "residual_vs_predict": [43, 52, 109, 272, 331, 710], "residues_": 1046, "resign": 399, "resili": 424, "resist": [113, 114, 384], "resiz": [45, 81, 82, 256, 379, 502, 503], "resolut": [43, 50, 55, 133, 192, 309, 310, 347, 399, 414, 1051], "resolv": [55, 383, 384, 388, 392, 399, 424, 454, 460, 470, 700, 704, 957, 1000, 1010, 1048, 1050, 1051, 1054, 1059], "resort": [278, 379, 410, 564, 1051], "resourc": [55, 77, 151, 154, 186, 218, 314, 328, 370, 387, 396, 398, 415, 423, 812, 813, 999, 1011, 1030, 1034, 1036, 1049, 1054, 1055, 1060], "resourcewarn": 1044, "resp": [379, 423, 606, 806, 807, 1024, 1049], "respect": [64, 90, 102, 120, 129, 138, 142, 144, 147, 156, 183, 196, 198, 203, 207, 220, 232, 235, 238, 240, 246, 249, 251, 255, 266, 270, 285, 303, 304, 315, 322, 330, 344, 351, 366, 371, 372, 379, 380, 384, 414, 416, 419, 421, 423, 424, 426, 454, 472, 475, 478, 479, 480, 481, 482, 483, 484, 543, 549, 550, 556, 562, 570, 571, 606, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 637, 645, 652, 680, 699, 703, 721, 737, 791, 794, 806, 807, 849, 859, 870, 871, 925, 927, 998, 999, 1003, 1004, 1006, 1007, 1010, 1013, 1014, 1015, 1016, 1020, 1025, 1029, 1033, 1034, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "respond": [191, 384, 416], "respons": [0, 25, 173, 192, 214, 218, 221, 252, 286, 358, 381, 384, 398, 416, 417, 423, 454, 472, 490, 491, 492, 576, 577, 640, 641, 642, 683, 684, 707, 709, 711, 751, 806, 807, 1011, 1017, 1058], "response_method": [48, 66, 70, 91, 140, 155, 160, 202, 210, 227, 232, 270, 279, 300, 305, 308, 322, 334, 343, 344, 346, 351, 363, 640, 641, 642, 707, 709, 711, 751, 808, 831, 1010, 1058], "rest": [2, 30, 62, 66, 148, 152, 188, 197, 203, 227, 233, 252, 255, 264, 294, 326, 340, 344, 355, 390, 398, 426, 521, 619, 640, 653, 667, 668, 685, 763, 797, 841, 842, 843, 862, 913, 915, 918, 1006, 1010, 1011, 1014, 1017, 1025, 1031, 1034, 1045, 1046, 1055, 1056, 1057, 1059], "restart": [92, 181, 387, 392, 455, 540, 546, 547, 552, 554, 555, 619, 620, 1007, 1054], "restor": [1044, 1049, 1050, 1051, 1052, 1056], "restrict": [2, 64, 101, 102, 107, 117, 186, 188, 208, 235, 311, 386, 390, 396, 414, 416, 423, 424, 473, 502, 511, 541, 590, 619, 662, 663, 664, 665, 667, 691, 692, 722, 791, 797, 798, 839, 861, 863, 864, 865, 867, 869, 870, 871, 873, 899, 1010, 1026, 1031, 1035, 1036, 1041, 1043, 1051, 1053, 1058], "restructuredtext": 384, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 81, 83, 88, 89, 90, 95, 97, 101, 105, 107, 109, 114, 118, 124, 127, 129, 130, 134, 141, 142, 143, 145, 148, 149, 151, 152, 155, 157, 158, 166, 172, 173, 175, 177, 179, 181, 183, 186, 191, 192, 193, 194, 199, 204, 206, 207, 208, 213, 219, 220, 222, 226, 232, 233, 236, 238, 239, 242, 245, 248, 250, 256, 261, 266, 267, 269, 270, 271, 274, 276, 277, 279, 282, 283, 284, 285, 287, 288, 290, 292, 294, 297, 299, 303, 312, 313, 314, 317, 318, 319, 322, 326, 328, 330, 331, 332, 333, 334, 336, 339, 341, 347, 351, 352, 354, 358, 360, 364, 365, 366, 371, 372, 373, 378, 379, 381, 384, 386, 388, 389, 390, 392, 396, 397, 398, 399, 410, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 441, 448, 449, 451, 453, 454, 455, 458, 459, 460, 461, 462, 463, 465, 467, 470, 472, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 497, 517, 518, 520, 522, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 588, 589, 590, 591, 593, 597, 598, 600, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 639, 640, 641, 643, 645, 649, 652, 661, 662, 667, 673, 674, 675, 676, 684, 685, 686, 687, 695, 698, 699, 700, 701, 702, 703, 704, 717, 719, 720, 721, 726, 734, 735, 737, 738, 739, 740, 741, 745, 746, 747, 763, 765, 766, 773, 780, 783, 787, 788, 789, 790, 792, 793, 794, 796, 802, 803, 806, 807, 809, 811, 812, 813, 814, 819, 823, 824, 825, 828, 829, 834, 840, 841, 842, 844, 845, 846, 847, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 877, 878, 886, 887, 890, 891, 894, 902, 906, 910, 913, 915, 918, 921, 922, 923, 924, 925, 926, 939, 940, 956, 957, 959, 964, 974, 975, 980, 983, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1029, 1030, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "results_df": [226, 276, 323], "results_for_preval": 279, "results_sc": 354, "retail": 1034, "retain": [2, 198, 398, 416, 419, 420, 424, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 503, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 704, 705, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 886, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1023, 1041], "retbin": 1020, "retent": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], "retrac": 252, "retract": 384, "retrain": [410, 1030, 1057, 1059], "retri": [193, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 1049, 1055, 1059, 1060], "retriev": [2, 118, 191, 222, 283, 359, 366, 388, 398, 421, 424, 425, 476, 505, 599, 602, 603, 635, 662, 672, 693, 708, 735, 739, 741, 742, 765, 790, 848, 852, 885, 911, 1006, 1008, 1010, 1012, 1029, 1030, 1046, 1051, 1053, 1055, 1058], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 83, 88, 91, 96, 104, 109, 122, 131, 133, 136, 138, 141, 143, 150, 151, 154, 155, 159, 173, 178, 181, 183, 187, 194, 198, 199, 205, 207, 210, 218, 219, 226, 227, 228, 236, 252, 255, 258, 259, 264, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 283, 291, 297, 302, 307, 310, 315, 317, 319, 322, 326, 334, 343, 347, 358, 360, 362, 366, 371, 377, 378, 379, 384, 385, 386, 390, 391, 393, 396, 398, 414, 415, 416, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 978, 979, 980, 981, 982, 983, 984, 990, 993, 994, 995, 996, 997, 998, 1000, 1010, 1013, 1017, 1018, 1025, 1026, 1030, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "return_a": [594, 595, 975, 1044], "return_cent": [521, 1052], "return_cod": 555, "return_cost": [479, 480, 486], "return_count": [339, 359, 865], "return_cov": [398, 576, 577, 620, 873], "return_dist": [89, 471, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 1013, 1045], "return_distribut": [122, 532], "return_estim": [43, 191, 290, 333, 420, 836, 1049], "return_ind": 532, "return_indic": [420, 836, 1057], "return_inner_stat": 1055, "return_intercept": [696, 1050], "return_invers": [153, 386], "return_log": [853, 854], "return_model": [1043, 1045], "return_n_it": [428, 462, 467, 486, 554, 555, 655, 656, 661, 662, 669, 670, 671, 672, 690, 691, 692, 693, 694, 695, 696, 703, 1055], "return_norm": [900, 1048], "return_path": [691, 692, 694, 695], "return_std": [175, 180, 181, 182, 184, 198, 199, 398, 561, 576, 577, 620, 622, 623, 624, 625, 634, 636, 653, 654, 873, 1048, 1049, 1053, 1058], "return_sum_weight": 990, "return_tim": [278, 837, 1051], "return_train_scor": [144, 280, 290, 323, 420, 809, 812, 813, 823, 836, 1047, 1048, 1050], "return_x_i": [44, 46, 54, 93, 104, 105, 106, 107, 124, 144, 148, 162, 164, 165, 169, 186, 187, 193, 194, 196, 205, 206, 207, 209, 214, 215, 225, 233, 234, 246, 254, 255, 258, 259, 272, 275, 278, 283, 284, 292, 294, 296, 299, 306, 313, 314, 315, 322, 326, 328, 330, 331, 332, 333, 339, 350, 360, 362, 377, 389, 390, 397, 410, 416, 417, 420, 423, 425, 428, 436, 454, 496, 497, 498, 499, 501, 503, 504, 505, 506, 509, 510, 511, 513, 514, 519, 541, 542, 543, 544, 567, 570, 571, 576, 577, 601, 604, 605, 607, 608, 609, 610, 611, 619, 628, 629, 631, 632, 647, 648, 667, 668, 677, 682, 683, 684, 697, 698, 699, 700, 702, 704, 710, 720, 797, 812, 813, 815, 841, 846, 857, 862, 865, 922, 923, 924, 1000, 1005, 1010, 1011, 1012, 1013, 1020, 1038, 1047, 1049, 1051, 1054], "return_x_mean": 428, "reuben": 1041, "reus": [52, 175, 211, 270, 277, 326, 360, 386, 398, 416, 417, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 643, 655, 657, 658, 661, 667, 669, 671, 675, 676, 677, 678, 685, 686, 687, 689, 870, 871, 1018, 1022, 1034, 1048, 1058], "reuter": [371, 379], "reuters21578": 47, "reuterspars": 47, "rev": [384, 616, 617], "revamp": [386, 1051], "reveal": [43, 52, 191, 193, 358, 390, 413, 1007, 1057], "revers": [57, 109, 173, 223, 276, 543, 550, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 798, 873, 1010, 1041, 1042, 1051, 1053, 1057], "revert": [125, 412, 639, 641, 642, 1048, 1053, 1058], "review": [294, 323, 371, 379, 386, 387, 389, 390, 396, 399, 420, 421, 544, 550, 1010, 1020], "revillet": 1041, "revis": [399, 679], "revisit": [416, 427, 452], "revolv": 1007, "reward": 384, "reweight": [138, 359, 398, 418, 423, 599, 600, 657, 678, 689], "reweight_covari": [477, 482], "rewrit": [390, 396, 1026, 1041], "rewritten": [384, 658, 1043, 1045], "rey": 1056, "reza": 1051, "rezazadeh": 1054, "rf": [143, 144, 158, 161, 162, 193, 326, 367, 423, 576, 578, 579], "rf_123": 367, "rf__n_estim": 423, "rf_appli": 143, "rf_applyfunctiontransform": 143, "rf_cst": 333, "rf_inst": 367, "rf_leaves_yield": 143, "rf_model": 143, "rf_no_cst": 333, "rf_pipelin": 159, "rfc": [64, 258, 326, 1038], "rfc_disp": [258, 326, 1038], "rfe": [2, 171, 172, 407, 425, 603, 606, 611, 1041, 1045, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060], "rfecv": [2, 172, 407, 425, 602, 606, 611, 1045, 1047, 1049, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060], "rfrandomforestregressor": 162, "rgb": [83, 379, 424, 502, 503, 592, 593, 596], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1048, "rho": [229, 421, 686, 1006, 1024, 1042], "rho_k": 422, "ri": [416, 714, 795], "ribeiro": [599, 739, 1054], "ricardo": [1044, 1054, 1055, 1058], "ricardojnf": 1054, "riccadonna": 752, "riccardo": [1052, 1058], "rice": [50, 310, 379, 507, 1054], "rich": [87, 154, 392, 396, 416, 447, 1034, 1052, 1055], "richard": [379, 425, 667, 1042, 1051, 1053, 1055, 1056, 1059], "richardscottoz": 1054, "richer": [87, 133, 416], "richi": 1049, "rick": 1052, "ricker": 133, "ricker_funct": 133, "ricker_matrix": 133, "rickiepark": 1048, "rid": [48, 1024], "riddel": [1044, 1046, 1048], "ridg": [2, 24, 44, 49, 53, 89, 109, 125, 126, 141, 159, 164, 173, 174, 180, 181, 182, 186, 188, 190, 191, 192, 197, 198, 203, 208, 211, 214, 218, 219, 244, 254, 289, 318, 321, 353, 354, 358, 371, 396, 412, 421, 423, 426, 533, 544, 548, 552, 620, 624, 631, 634, 652, 653, 654, 656, 658, 666, 670, 682, 683, 684, 687, 696, 710, 759, 809, 815, 823, 846, 919, 1010, 1011, 1018, 1020, 1024, 1025, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1054, 1055, 1056, 1057, 1059], "ridge_alpha": [548, 552, 1048], "ridge_cv": 109, "ridge_cv_with_trans_target": 109, "ridge_glm": 218, "ridge_regress": [2, 1049, 1050, 1056], "ridgeclassifi": [2, 358, 371, 681, 682, 684, 1006, 1011, 1046, 1050, 1054, 1055, 1056, 1059], "ridgeclassifiercv": [2, 407, 682, 683, 797, 1006, 1010, 1011, 1049, 1051, 1052, 1054, 1055, 1059], "ridgecv": [2, 43, 109, 159, 173, 191, 254, 398, 407, 423, 577, 652, 681, 684, 1006, 1011, 1041, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1060], "ridgecvridgecv": [159, 191], "ridgeridg": 191, "ridgewai": [150, 423], "riedmann": 1053, "ries": 1055, "rifkin": 1006, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 80, 86, 88, 95, 97, 99, 112, 113, 115, 120, 121, 122, 126, 127, 129, 131, 133, 138, 140, 141, 142, 151, 152, 153, 154, 161, 169, 175, 178, 187, 194, 206, 208, 219, 220, 221, 222, 224, 225, 228, 229, 245, 248, 249, 261, 263, 264, 266, 267, 270, 271, 272, 276, 279, 283, 286, 287, 289, 290, 302, 310, 312, 315, 317, 319, 322, 332, 333, 337, 347, 349, 351, 354, 356, 358, 363, 366, 367, 384, 386, 392, 396, 397, 399, 413, 415, 416, 419, 421, 422, 423, 426, 472, 490, 491, 492, 493, 543, 550, 553, 566, 567, 568, 569, 570, 571, 573, 574, 575, 596, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 644, 685, 687, 878, 921, 922, 923, 924, 925, 943, 957, 999, 1002, 1004, 1006, 1008, 1010, 1012, 1013, 1017, 1022, 1024, 1025, 1026, 1030, 1034, 1036, 1043, 1049, 1055, 1057, 1058, 1060], "right_impur": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "rightarrow": [426, 628, 1014], "rijn": [378, 1049], "rileran": 1055, "rio": [1051, 1053, 1054, 1055], "ripe": 323, "rise": 180, "rishabh": 1055, "rishi": 1053, "rishikesh": 1048, "risk": [16, 48, 90, 154, 218, 222, 236, 318, 354, 367, 383, 384, 398, 410, 415, 420, 423, 576, 577, 898, 899, 901, 902, 903, 904, 1006, 1010, 1034, 1048], "riski": 236, "riskiest": [218, 236], "ritchi": 1052, "rithvik": 1053, "ritter": [1055, 1056], "ritual": 358, "rival": [43, 910, 1023], "rk": 100, "rkf": [420, 824], "rl2007": 1006, "rlm": 1051, "rm": [113, 178, 388, 392, 418], "rmse": [43, 52, 114, 154, 323, 759, 1010, 1052], "rmse_": 323, "rmse_test_mean": 323, "rmse_test_scor": 323, "rmse_test_std": 323, "rmse_train_mean": 323, "rmse_train_scor": 323, "rmse_train_std": 323, "rmsle": [760, 1010], "rmtree": [89, 106, 417], "rna": 396, "rnd": 318, "rng": [44, 58, 59, 67, 70, 72, 79, 85, 97, 114, 118, 124, 126, 131, 139, 151, 154, 155, 156, 158, 175, 176, 179, 181, 182, 184, 186, 187, 190, 193, 198, 199, 200, 201, 203, 207, 212, 219, 220, 225, 232, 245, 251, 252, 254, 261, 271, 279, 282, 287, 288, 309, 312, 321, 324, 327, 328, 330, 332, 333, 336, 337, 341, 350, 364, 365, 367, 372, 386, 389, 407, 429, 478, 482, 483, 484, 486, 487, 488, 489, 652, 658, 679, 681, 687, 696, 821, 848, 849, 850, 852, 853, 854, 858, 861, 863, 864, 865, 890, 902, 905, 906, 908, 909, 910, 919], "ro": 63, "road": 396, "rob": [1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1053, 1056], "robert": [0, 173, 205, 294, 381, 406, 421, 537, 544, 637, 665, 730, 732, 733, 744, 879, 1000, 1006, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1056, 1059], "roberto": [416, 450, 1059], "robertson": 1054, "robin": [186, 187, 636, 1000, 1047, 1050, 1055, 1056], "robinson": 1054, "robl": 1048, "robson": 1051, "robust": [2, 48, 70, 96, 98, 110, 112, 149, 151, 173, 187, 188, 191, 192, 197, 208, 220, 222, 235, 245, 255, 291, 317, 332, 373, 381, 392, 416, 423, 424, 454, 456, 477, 478, 481, 482, 483, 484, 533, 543, 568, 569, 658, 666, 679, 680, 687, 688, 759, 843, 874, 888, 890, 891, 902, 908, 955, 1010, 1014, 1016, 1020, 1023, 1024, 1029, 1031, 1032, 1034, 1035, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1057], "robust_contour": 113, "robust_cov": 113, "robust_mah": 113, "robust_scal": [2, 891, 902, 1049], "robustli": [8, 221], "robustscal": [2, 255, 890, 903, 1000, 1020, 1046, 1047, 1049, 1051, 1052, 1053, 1057], "roc": [2, 50, 62, 143, 173, 188, 244, 246, 255, 256, 268, 270, 271, 278, 333, 334, 391, 414, 415, 420, 513, 519, 573, 667, 711, 715, 716, 717, 736, 751, 791, 797, 798, 828, 839, 842, 880, 918, 1016, 1031, 1038, 1043, 1044, 1046, 1047, 1051, 1053, 1057], "roc_auc": [50, 173, 276, 280, 285, 286, 391, 643, 711, 742, 1010, 1038], "roc_auc_ovo": [1010, 1051], "roc_auc_ovo_weight": [1010, 1051], "roc_auc_ovr": [1010, 1051], "roc_auc_ovr_weight": [1010, 1051], "roc_auc_scor": [2, 62, 173, 276, 285, 326, 333, 711, 715, 716, 717, 798, 1010, 1043, 1044, 1049, 1051, 1055, 1056], "roc_curv": [2, 50, 246, 273, 285, 711, 715, 736, 791, 797, 1010, 1041, 1042, 1043, 1046, 1047, 1049, 1054, 1057, 1059], "roc_displai": 246, "rocchio": [358, 860], "rocco": [1054, 1055, 1056], "roccurvedisplai": [2, 143, 255, 258, 270, 273, 285, 286, 326, 391, 797, 798, 1016, 1038, 1051, 1057, 1058, 1059], "rock": 114, "rocklin": [383, 389], "roddi": [1050, 1051], "rodent": [50, 310, 379, 507], "roderick": 1000, "rodion": 1054, "rodrigo": [1049, 1059], "rodrigu": [1048, 1049, 1054], "rodr\u00edguez": 323, "roeder": 1051, "roehr": [1057, 1058], "roei": 1053, "roeschk": 1050, "roger": [732, 1048, 1049, 1053], "rogerstanimoto": [458, 465, 708, 787, 788, 789, 1013], "rogerstanimotodist": 708, "rohan": [1046, 1047, 1049, 1050, 1054], "rohit": [1044, 1045, 1049, 1050], "roi": [1041, 1055], "roi_siz": 89, "roic": 1056, "rok": 1051, "rokem": [1041, 1047], "rokhlin": [544, 550, 957], "roland": [1043, 1044], "rolando": [1042, 1043], "role": [0, 285, 371, 383, 421], "roll": [2, 102, 188, 237, 238, 243, 387, 416, 539, 701, 702, 951, 1031, 1034, 1051, 1056], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1048, 1053], "roman": [0, 405, 636, 927, 1043, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "roman4oo": 1056, "romaniuk": 1045, "romero": 1059, "romijnd": 1053, "romuald": 1050, "ron": [0, 406, 1041], "ronald": [379, 1014, 1044, 1054], "ronan": [1041, 1044, 1049], "ronchetti": [658, 1006], "rong": 1025, "ronrubin": [673, 694, 695, 1006], "ronsin": [1049, 1050, 1058], "room": [317, 379, 389, 416, 1033], "roopam": [1049, 1050], "root": [2, 43, 113, 154, 173, 200, 366, 381, 384, 392, 416, 450, 510, 550, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 648, 759, 760, 799, 800, 921, 922, 923, 924, 925, 927, 1010, 1016, 1026, 1043, 1049, 1050, 1051, 1052, 1055, 1056, 1060], "root_": 450, "root_mean_squared_error": [2, 52, 154, 412, 759, 1010, 1058, 1060], "root_mean_squared_log_error": [2, 412, 760, 1010, 1058, 1060], "rope": 276, "rope_interv": 276, "rope_prob": 276, "rori": 1052, "rosa": 1056, "rosal": 420, "rosati": 1059, "rose": 379, "rosenberg": [416, 726, 746, 804], "rosenfeld": 1049, "ross": [543, 616, 617, 1026, 1055, 1056], "rosset": [138, 423, 528, 562], "rossi": 1044, "rosslimlinyang_ijcv": 543, "rostamizadeh": 999, "rostomyan": 1049, "rotat": [47, 75, 123, 126, 129, 131, 150, 161, 188, 194, 241, 287, 288, 296, 347, 353, 419, 421, 426, 428, 513, 541, 550, 559, 623, 706, 893, 925, 1006, 1031, 1052, 1053], "rotation_mod": 287, "rotations_": 559, "roth": [1046, 1049, 1056], "rough": [25, 404, 1016], "roughli": [138, 151, 207, 267, 286, 297, 322, 371, 398, 421, 424, 528, 1007, 1041], "rouli": 1044, "round": [46, 48, 62, 117, 144, 154, 186, 187, 225, 236, 276, 282, 319, 321, 358, 398, 458, 464, 465, 573, 574, 602, 603, 606, 636, 701, 722, 811, 821, 878, 910, 925, 927, 1000, 1014, 1026, 1043, 1045, 1047, 1049, 1050, 1052, 1054, 1055, 1057, 1058], "rounded_list": 821, "rouseeuw1984": 482, "rousseeuw": [113, 114, 416, 418, 477, 482, 801, 802, 1016], "rousseuw": [113, 114], "rout": [2, 47, 91, 136, 183, 188, 200, 244, 270, 334, 430, 433, 436, 439, 440, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 966, 967, 968, 969, 993, 1031, 1036, 1055, 1057], "route_param": [252, 966], "routed_param": [252, 969], "routemappingpair": 966, "router": [2, 252, 398, 407, 966, 967, 968, 969], "routerconsumerclassifi": 252, "routerconsumerclassifierifittedrouterconsumerclassifi": 252, "routin": [333, 373, 378, 381, 384, 385, 386, 387, 392, 396, 398, 425, 681, 683, 696, 856, 915, 916, 917, 918, 919, 1007, 1013, 1020, 1021, 1024, 1034, 1041, 1055, 1056, 1057], "routing_info": 966, "routlei": 1047, "rouvinen": 1046, "roux": [667, 1006, 1023], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 95, 109, 120, 122, 144, 147, 157, 160, 186, 218, 219, 220, 246, 249, 255, 256, 270, 319, 366, 371, 379, 386, 393, 397, 398, 413, 416, 419, 424, 431, 450, 451, 455, 457, 458, 459, 461, 464, 465, 467, 472, 476, 496, 498, 499, 501, 502, 503, 504, 509, 510, 511, 513, 514, 519, 520, 522, 535, 543, 551, 557, 560, 599, 600, 629, 637, 641, 652, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 701, 705, 706, 719, 727, 728, 734, 767, 768, 772, 775, 777, 778, 779, 780, 782, 783, 785, 787, 788, 789, 790, 806, 807, 842, 848, 849, 850, 851, 852, 858, 861, 862, 863, 864, 865, 868, 879, 883, 885, 886, 888, 898, 899, 900, 903, 904, 907, 911, 930, 935, 939, 940, 957, 980, 983, 987, 989, 991, 992, 995, 996, 999, 1000, 1002, 1004, 1006, 1008, 1010, 1011, 1013, 1020, 1021, 1024, 1025, 1030, 1048, 1049, 1050, 1051, 1056], "row_compl": 57, "row_id_attribut": 378, "row_idx": [59, 218], "row_idx_shuffl": 58, "row_ind": [431, 459, 461], "row_indic": 154, "row_labels_": [57, 58, 59, 413, 459, 461], "row_norm": 264, "rowan": 1056, "rowei": [698, 702, 862, 1007, 1013], "rows_": [57, 413, 431, 459, 461], "royal": [550, 636, 889, 901, 1024], "rp": 249, "rpath": 382, "rr2007": 1002, "rragundez": 1049, "rsalakhu": 653, "rsh": [288, 328], "rskf": 825, "rsme": 1010, "rsnegrin": 1055, "rsplit": [45, 55, 277], "rst": [372, 384, 392, 1041], "rstride": 192, "rt": 143, "rt_model": 143, "rtn": 51, "rtol": [386, 853, 854, 858], "ruben": 1056, "rubi": 1053, "rubia": 1044, "rubial": 1054, "rubin": 1000, "rubinstein": [673, 694, 695], "rubric": 1007, "ruchitagard": 1051, "rudi": 1047, "rudresh": 1056, "ruff": [384, 402, 409], "ruifeng": [1047, 1048, 1053], "ruin": 384, "ruiter": 1056, "rule": [2, 13, 27, 43, 64, 144, 196, 270, 363, 366, 367, 371, 381, 384, 385, 386, 396, 398, 399, 411, 414, 415, 416, 420, 421, 423, 425, 545, 558, 559, 560, 561, 562, 570, 571, 578, 579, 603, 611, 643, 654, 667, 668, 675, 676, 677, 682, 684, 685, 686, 687, 715, 716, 720, 809, 812, 813, 815, 823, 831, 832, 835, 836, 837, 838, 840, 862, 913, 926, 999, 1004, 1012, 1013, 1024, 1026, 1030, 1036, 1043, 1046, 1053, 1058], "ruleset": 1026, "rumelhart": 1014, "rumsfeld": [45, 379], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 382, 384, 385, 386, 388, 389, 390, 391, 392, 396, 398, 399, 402, 403, 410, 412, 416, 418, 420, 423, 426, 427, 428, 445, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 472, 475, 476, 479, 480, 540, 541, 542, 543, 544, 546, 548, 550, 551, 552, 554, 555, 557, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 591, 601, 603, 604, 605, 607, 608, 609, 611, 619, 620, 639, 643, 649, 655, 656, 658, 660, 661, 662, 664, 665, 669, 670, 671, 672, 691, 692, 697, 698, 699, 700, 701, 702, 703, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 845, 846, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 870, 871, 872, 875, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 930, 932, 951, 952, 980, 983, 999, 1009, 1011, 1014, 1023, 1025, 1026, 1029, 1030, 1034, 1041, 1044, 1046, 1048, 1049, 1050, 1051, 1055, 1056, 1057, 1060], "run_histori": 47, "run_id": 96, "run_tim": [233, 234], "rung": 1020, "runnabl": [54, 388, 389], "runtim": [30, 47, 49, 93, 138, 204, 233, 235, 250, 315, 319, 372, 386, 387, 396, 398, 410, 416, 423, 458, 572, 688, 823, 913, 914, 915, 916, 917, 918, 919, 1024, 1025, 1044, 1048, 1049, 1055, 1056, 1058, 1059, 1060], "runtime_histori": 47, "runtimewarn": [151, 184, 319], "runxfail": 392, "rupesh": 1044, "rush": [43, 52, 384], "rushabh": 1052, "rushil": [1056, 1057], "russ": [637, 1000], "russel": [1047, 1048], "russellrao": [458, 465, 708, 787, 788, 789, 1013], "russellraodist": 708, "russian": 424, "ruth": 1051, "rutter": 1054, "ruusmann": 1047, "rv": [0, 813, 821, 823, 999, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "rv_discrete_frozen": 288, "rvd": [477, 482], "rvdriessen": [477, 482], "rw2006": [426, 619, 620], "rwelsch427": 1059, "ryad": 1047, "ryan": [1044, 1047, 1049, 1050], "ryb": 363, "ryder": 51, "ryotaro": 1053, "r\u00e9my": 1047, "r\u00fcdiger": [1049, 1050, 1052], "s1": [125, 173, 183, 205, 207, 381], "s2": [125, 173, 183, 205, 207, 381, 559], "s22": 507, "s3": [57, 125, 173, 205, 207, 381], "s4": [173, 205, 207, 381], "s5": [173, 205, 207, 381, 1018], "s6": [173, 205, 207, 381], "s_": [125, 280, 1006, 1007, 1018, 1020], "s__p": 873, "s_color": 238, "s_hessian": 238, "s_i": [416, 1006, 1020], "s_ica_": 126, "s_isomap": 238, "s_j": 416, "s_ltsa": 238, "s_mod": 238, "s_pca_": 126, "s_point": 238, "s_scale": 238, "s_spectral": 238, "s_standard": 238, "s_t_sne": 238, "sa": [379, 501], "saaba": 1046, "saad": 1059, "sabharw": 1051, "sabri": 1056, "sach": 51, "sachdev": 1056, "sachdeva": 1048, "sachin": [1048, 1049, 1055], "sackei": 1051, "saclai": 0, "sacr": 1029, "sad": [827, 828], "sadak": 1053, "sadhana": 1049, "sadli": 151, "sadra": 1057, "sad\u0142ocha": 1054, "saeed": 1010, "saeger": [1046, 1047, 1048], "safari": 1020, "safe": [2, 72, 191, 207, 270, 359, 384, 386, 416, 417, 441, 473, 517, 518, 576, 577, 602, 606, 783, 787, 837, 838, 840, 872, 907, 975, 981, 1013, 1047, 1048, 1049, 1054, 1055], "safe_copi": 1048, "safe_index": [393, 1051], "safe_mask": [2, 393], "safe_realloc": 1044, "safe_sparse_dot": [2, 393, 1051], "safe_sqr": [2, 393], "safeguard": 410, "safer": [359, 367, 382, 416, 420, 1041], "safest": [218, 236, 367, 378], "safeti": [104, 396, 417, 975, 1030, 1051], "safikh": 1056, "safiuddin": 1056, "sag": [210, 225, 667, 668, 681, 683, 696, 1006, 1024, 1046, 1047, 1048, 1050, 1051], "sag_solv": 1050, "saga": [66, 209, 233, 234, 667, 668, 681, 683, 696, 823, 1006, 1048, 1050], "sagar": 1051, "sagnik": 1049, "saha": 1055, "sahil": 1057, "sahin": 1051, "sahu": 1053, "sai": [204, 245, 354, 358, 359, 384, 414, 416, 417, 421, 423, 424, 454, 455, 509, 513, 519, 686, 999, 1016, 1023, 1034, 1058, 1059], "said": [154, 191, 245, 277, 379, 384, 801, 1008, 1016], "saihttam": 1047, "sailesh": [1048, 1049], "saint": 1047, "saito": [421, 547, 549, 556, 1048], "saiw": 1047, "sake": [43, 64, 151, 154, 187, 191, 218, 322, 351, 358, 360, 392, 396, 679], "saket": [1045, 1046, 1053], "sakinaouisrani": 1055, "salahuddin": 1056, "salakhutdinov": [653, 862, 1013], "salamin": 1045, "sale": [148, 255, 276, 1010, 1034], "saleem": 1051, "salerno": 381, "salim": [1058, 1059], "sallisaw": [417, 474], "salman": [0, 405, 1056, 1057, 1058, 1059, 1060], "salt": [67, 250, 319, 1055], "salvator": [1041, 1055, 1056, 1058, 1059], "salz": 1048, "salzmann": [218, 236], "sam": [1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056], "sambhav": 1052, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 88, 90, 92, 93, 99, 104, 105, 106, 122, 124, 126, 129, 131, 133, 139, 141, 145, 148, 151, 152, 154, 157, 173, 175, 191, 192, 194, 204, 205, 207, 212, 218, 219, 220, 226, 236, 252, 256, 266, 270, 271, 272, 273, 274, 276, 277, 279, 281, 282, 284, 289, 290, 297, 300, 302, 314, 317, 318, 320, 322, 323, 326, 328, 339, 347, 358, 359, 360, 366, 367, 371, 372, 373, 378, 379, 381, 383, 384, 386, 388, 390, 392, 393, 396, 397, 398, 399, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 437, 441, 446, 447, 454, 458, 464, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 502, 504, 505, 507, 513, 517, 518, 540, 541, 544, 545, 546, 547, 548, 549, 552, 556, 558, 560, 561, 562, 563, 566, 568, 569, 570, 571, 573, 574, 576, 577, 598, 599, 611, 612, 615, 619, 620, 622, 631, 636, 637, 638, 641, 642, 655, 658, 661, 662, 664, 667, 668, 672, 675, 676, 677, 681, 682, 683, 684, 685, 686, 687, 693, 696, 708, 713, 714, 721, 722, 724, 726, 735, 740, 741, 745, 751, 764, 765, 766, 787, 788, 789, 795, 797, 801, 803, 804, 806, 807, 809, 810, 812, 813, 815, 817, 818, 823, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 855, 856, 857, 861, 863, 864, 865, 876, 877, 878, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 895, 902, 913, 914, 921, 923, 934, 941, 945, 957, 975, 980, 983, 984, 994, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1029, 1030, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "same_kind": 1058, "samesh": [1051, 1052], "samm": [67, 138, 140, 147, 423, 562, 1057, 1058], "samoocha": 1049, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 81, 83, 84, 88, 91, 92, 93, 94, 95, 100, 113, 114, 115, 118, 120, 122, 124, 128, 129, 132, 133, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 152, 154, 155, 160, 161, 162, 170, 172, 173, 175, 179, 180, 181, 182, 184, 186, 188, 191, 192, 196, 197, 203, 204, 205, 207, 218, 220, 222, 225, 226, 228, 229, 230, 232, 234, 235, 236, 238, 245, 249, 250, 252, 253, 255, 261, 262, 264, 265, 266, 267, 268, 270, 271, 275, 276, 278, 279, 280, 282, 284, 288, 290, 291, 296, 297, 301, 302, 303, 304, 306, 307, 308, 310, 314, 315, 317, 319, 320, 321, 322, 324, 326, 328, 329, 331, 333, 334, 336, 338, 339, 340, 341, 342, 343, 345, 347, 349, 351, 352, 354, 355, 358, 359, 363, 366, 371, 377, 379, 380, 383, 384, 386, 387, 396, 397, 407, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 433, 434, 435, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 464, 465, 466, 469, 470, 471, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 696, 697, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 743, 744, 745, 746, 747, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 772, 773, 777, 778, 779, 780, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 935, 939, 940, 944, 945, 957, 961, 978, 980, 983, 984, 987, 990, 998, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "sample_i": [184, 426, 620, 1055], "sample_id": [366, 379, 506], "sample_interv": 647, "sample_interval_": 1057, "sample_posterior": [187, 636, 1000], "sample_s": [93, 250, 359, 802], "sample_score_mean": 280, "sample_score_std": 280, "sample_silhouette_valu": 95, "sample_step": 647, "sample_weight": [61, 200, 218, 231, 236, 252, 327, 332, 333, 356, 384, 398, 407, 416, 423, 427, 433, 439, 445, 451, 452, 455, 457, 467, 468, 473, 477, 490, 491, 492, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 619, 620, 641, 642, 643, 644, 646, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 706, 707, 709, 711, 712, 716, 717, 718, 721, 722, 725, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 743, 744, 747, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 791, 792, 793, 794, 796, 797, 798, 799, 800, 803, 805, 808, 809, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 878, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 969, 997, 1010, 1024, 1025, 1026, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "sample_weight1": 252, "sample_weight2": 252, "sample_weight_const": 356, "sample_weight_last_ten": 356, "sample_weight_vect": 945, "sample_without_replac": [2, 393, 1047], "samples_weight": 231, "samplewis": [763, 1010], "samson": 1048, "samuel": [705, 1034, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "samuela": 1044, "samu\u00ebl": 1048, "san": [173, 381, 424, 1022], "sanchez": [1049, 1050], "sandbox": 410, "sandeep": 1053, "sander": [416, 427, 452, 454, 458, 465, 859, 1016, 1050, 1051], "sandi": 1054, "sandip": [1058, 1059], "sandra": [1050, 1056], "sandro": [1049, 1056], "sandrocasagrand": [1049, 1050], "sandrovskii": 1048, "sangam": 1056, "sangamswadik": 1056, "sangeeth": 1050, "saniti": [387, 877, 1010, 1041, 1042], "sanjabi": 1051, "sanjai": 1055, "sanjai_3": [1056, 1057], "sanjoi": [907, 1022], "sano": 1055, "sanofi": 51, "santa": [183, 1056], "santana": [1052, 1055], "santhanam": 1049, "santhosh": 1052, "santhoshbala18": 1052, "santi": [1046, 1048, 1049], "santiago": 1052, "sap": 51, "sapiro": [421, 540, 546], "saqib": 1049, "sara": 1054, "sarah": [1048, 1050, 1053], "sarahremu": [1056, 1059], "sarajpoor": 1056, "sarat": 1052, "sarawagi": 792, "sarra": 1051, "sartaj": 1047, "sasank": 1047, "sashka": [1056, 1057], "sass": [384, 402, 409], "sassenhagen": [1053, 1058], "sat": [43, 154, 192, 424], "satellit": 1013, "satisfi": [416, 659, 663, 708, 726, 745, 746, 853, 854], "satish": 1049, "sato": 1044, "satrajit": [0, 406, 1041, 1042], "satur": [72, 191, 317], "sauerbrei": 1020, "sauerkraut": 424, "saul": [698, 702, 1007, 1048, 1049, 1051], "saurabh": [1045, 1046, 1047, 1048, 1049, 1053], "sauvignon": 323, "saval": 1050, "savard": 1041, "save": [88, 104, 106, 255, 315, 383, 384, 388, 390, 391, 392, 398, 410, 420, 428, 476, 500, 543, 544, 636, 853, 854, 911, 1006, 1010, 1020, 1026, 1034, 1041, 1044, 1048, 1051, 1059], "savings_statu": 270, "savkomax": 1056, "saw": [125, 219, 222], "sawtooth": 125, "say_hello": 970, "sc": [378, 416], "scaja": 1058, "scala": 1030, "scalabl": [77, 79, 97, 188, 195, 250, 268, 331, 359, 384, 416, 423, 424, 456, 499, 511, 598, 649, 815, 826, 837, 839, 851, 874, 883, 885, 913, 915, 918, 919, 1002, 1005, 1007, 1010, 1023, 1025, 1031, 1034, 1041, 1044, 1045, 1051, 1052, 1055, 1056], "scalar": [2, 124, 329, 334, 390, 398, 412, 417, 426, 428, 472, 475, 533, 542, 624, 625, 626, 631, 632, 636, 637, 639, 747, 751, 935, 943, 1002, 1014, 1016, 1020, 1024, 1029, 1051, 1052, 1055, 1057, 1060], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 81, 82, 91, 93, 96, 105, 106, 112, 115, 118, 126, 129, 149, 156, 173, 175, 176, 177, 180, 181, 182, 188, 192, 196, 199, 200, 205, 209, 218, 220, 222, 232, 233, 234, 236, 237, 240, 245, 251, 255, 266, 273, 276, 277, 278, 279, 283, 300, 302, 313, 314, 315, 316, 317, 327, 330, 332, 333, 341, 342, 344, 347, 351, 367, 370, 371, 376, 377, 378, 381, 384, 389, 393, 396, 397, 398, 416, 417, 421, 423, 424, 425, 426, 454, 455, 458, 459, 465, 472, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 510, 519, 523, 524, 533, 543, 547, 549, 550, 556, 558, 559, 570, 571, 591, 599, 600, 606, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 640, 641, 650, 653, 654, 655, 656, 658, 661, 667, 668, 669, 670, 671, 681, 683, 685, 686, 687, 690, 696, 697, 698, 699, 701, 703, 708, 712, 725, 750, 756, 766, 768, 778, 784, 786, 823, 826, 839, 840, 841, 853, 854, 855, 870, 871, 874, 877, 882, 883, 885, 888, 890, 891, 893, 898, 899, 900, 902, 903, 905, 906, 913, 914, 915, 916, 917, 918, 919, 984, 985, 986, 987, 990, 999, 1002, 1003, 1006, 1010, 1011, 1012, 1013, 1014, 1018, 1024, 1025, 1030, 1031, 1034, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "scale_": [658, 882, 883, 891, 893, 903, 1020, 1046], "scaled_clf": 322, "scaled_pca": 322, "scaled_x_train": 322, "scaler": [45, 105, 107, 171, 188, 234, 235, 250, 255, 257, 259, 290, 300, 305, 316, 321, 322, 331, 347, 350, 367, 389, 417, 420, 498, 667, 668, 681, 683, 696, 873, 882, 883, 885, 889, 890, 891, 893, 898, 899, 900, 901, 902, 903, 904, 1014, 1020, 1024, 1031, 1041, 1046, 1049, 1054], "scaler2": 259, "scalewai": 392, "scaling_": 559, "scalings_": [558, 559], "scanpi": 1058, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 80, 84, 87, 91, 92, 93, 94, 95, 97, 102, 113, 118, 121, 122, 126, 128, 129, 130, 132, 139, 140, 144, 147, 155, 157, 158, 160, 166, 168, 175, 176, 177, 179, 181, 182, 183, 184, 190, 191, 196, 199, 202, 208, 210, 214, 215, 216, 219, 220, 221, 227, 230, 231, 232, 235, 238, 239, 240, 241, 242, 243, 245, 250, 251, 253, 261, 262, 263, 264, 265, 266, 267, 271, 277, 279, 291, 297, 300, 303, 304, 305, 306, 307, 308, 309, 312, 317, 319, 320, 322, 330, 338, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 358, 363, 364, 365, 418, 640, 710, 1004, 1006], "scatter_": 710, "scatter_fig": 144, "scatter_kwarg": [43, 52, 109, 159, 191, 710], "scatter_trac": 144, "scatterplot": [117, 198, 276], "scatterpoint": [128, 132, 241, 263, 338], "scenario": [92, 104, 154, 175, 196, 222, 279, 367, 391, 402, 415, 420, 423, 546, 552, 554, 555, 1004, 1010, 1020, 1051], "scene": [381, 392, 1013, 1015, 1054], "schapir": [50, 294, 310, 379, 423, 507, 562, 563], "schedul": [154, 313, 372, 388, 685, 686, 687, 870, 871, 1024, 1034, 1048], "scheidegg": 1041, "scheme": [285, 302, 323, 324, 379, 388, 398, 416, 420, 422, 424, 575, 599, 667, 668, 714, 822, 856, 880, 881, 884, 886, 890, 894, 897, 902, 913, 918, 999, 1006, 1020, 1024, 1041, 1049, 1052, 1053, 1058, 1059], "scherer": 1047, "scheubrein": 1053, "schloss": 1010, "schl\u00fcter": [1041, 1049], "schmerler": 1056, "schmid": [767, 768, 1008], "schmidt": [667, 1006, 1044], "schmitt": [1051, 1052], "schmitz": 1058, "schneider": [358, 1054, 1059], "schoelkopf": 909, "schoentgen": [1049, 1050], "schofield": 1041, "schole": 1053, "scholkopf1997": 421, "scholkopf1998": 1020, "scholz": 1059, "school": [104, 180, 191, 381, 416, 797, 1010], "schreiber": [0, 406, 1046, 1047, 1048], "schroeder": [45, 379], "schubert": [416, 427, 452, 458, 1045, 1046, 1049, 1050, 1052, 1053, 1054, 1055, 1059], "schucker": 1047, "schuder": [1049, 1050, 1051], "schuetz": [848, 852], "schuldt": 1045, "schult": 55, "schulz": 1041, "schumach": [1044, 1045, 1046], "schut": 1041, "schwardt": 1041, "schwartz": [1041, 1043, 1055], "schwetlick": [1052, 1053], "sch\u00f6lkopf": [44, 421, 544, 879, 1016, 1020, 1025], "sch\u00f6nberger": [1043, 1044], "sch\u00fctze": [421, 599, 1008, 1010, 1012], "sci": [57, 104, 358, 359, 360, 379, 396, 496, 698, 702, 884, 1007, 1020], "scibol": 1052, "scienc": [0, 73, 113, 173, 183, 191, 294, 378, 381, 396, 416, 448, 462, 547, 549, 556, 697, 698, 702, 860, 1000, 1002, 1006, 1007, 1010, 1013, 1022, 1030, 1034, 1049], "scientif": [0, 68, 250, 378, 382, 396, 402, 416, 460, 470, 510, 1034, 1036], "scientist": [1000, 1034], "scikera": 1029, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 372, 373, 376, 378, 379, 380, 381, 383, 384, 387, 390, 391, 392, 393, 397, 398, 403, 404, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 430, 431, 433, 434, 435, 436, 438, 439, 440, 446, 451, 454, 455, 458, 465, 472, 473, 475, 476, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 521, 524, 530, 533, 547, 550, 570, 571, 573, 574, 576, 585, 590, 591, 592, 598, 608, 611, 620, 635, 637, 639, 641, 643, 647, 649, 655, 657, 661, 667, 678, 689, 697, 706, 709, 710, 711, 726, 727, 741, 751, 757, 787, 788, 789, 797, 804, 808, 809, 810, 811, 812, 813, 814, 815, 823, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 841, 842, 855, 857, 873, 874, 876, 878, 880, 883, 885, 886, 887, 888, 892, 893, 894, 897, 910, 911, 913, 918, 921, 922, 929, 931, 951, 952, 962, 975, 976, 999, 1000, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1023, 1024, 1025, 1026, 1028, 1031, 1033, 1036, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "scikit_learn": 1029, "scikit_learn_data": [52, 379, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508], "scipi": [0, 2, 45, 53, 55, 57, 76, 81, 82, 88, 89, 111, 112, 115, 125, 127, 131, 150, 175, 191, 194, 204, 208, 262, 266, 267, 273, 276, 284, 288, 297, 302, 307, 315, 327, 328, 333, 334, 336, 337, 371, 378, 379, 382, 384, 386, 390, 392, 393, 396, 397, 398, 402, 409, 410, 412, 413, 416, 421, 424, 458, 459, 460, 461, 465, 470, 471, 505, 512, 517, 541, 543, 544, 550, 553, 590, 591, 594, 595, 597, 598, 619, 620, 657, 658, 662, 666, 667, 668, 672, 675, 676, 677, 678, 679, 681, 683, 685, 686, 687, 689, 693, 696, 700, 701, 704, 728, 769, 772, 787, 788, 789, 790, 801, 802, 813, 821, 823, 839, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 876, 885, 886, 891, 892, 893, 896, 900, 903, 904, 913, 915, 916, 918, 919, 954, 958, 959, 964, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 999, 1000, 1006, 1008, 1011, 1013, 1014, 1020, 1024, 1025, 1028, 1030, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1060], "sckit": 1057, "scls19fr": 1046, "scognamiglio": 423, "scope": [45, 57, 270, 371, 373, 384, 396, 424, 1029, 1030], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 93, 95, 104, 105, 106, 107, 108, 109, 111, 115, 118, 131, 136, 138, 140, 147, 148, 149, 150, 151, 154, 155, 158, 159, 165, 168, 169, 170, 173, 186, 188, 190, 191, 192, 193, 194, 196, 203, 209, 210, 213, 218, 220, 224, 226, 234, 236, 245, 250, 251, 252, 255, 259, 265, 268, 270, 274, 276, 277, 278, 279, 280, 281, 284, 285, 287, 288, 289, 290, 291, 292, 294, 296, 304, 305, 306, 312, 313, 314, 315, 319, 321, 322, 323, 324, 326, 327, 328, 329, 333, 334, 336, 337, 339, 340, 347, 354, 358, 359, 362, 367, 379, 384, 386, 389, 397, 398, 410, 411, 412, 413, 414, 415, 417, 419, 421, 423, 425, 433, 435, 439, 445, 451, 455, 457, 460, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 511, 513, 541, 545, 550, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 618, 619, 620, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 707, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 747, 748, 749, 751, 764, 765, 766, 791, 792, 793, 794, 795, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 812, 813, 815, 823, 828, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 862, 863, 864, 869, 870, 871, 873, 893, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 929, 931, 959, 999, 1002, 1006, 1008, 1013, 1016, 1018, 1020, 1024, 1030, 1031, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 281, "score_estim": [218, 236], "score_full_data": 186, "score_func": [72, 105, 106, 425, 601, 604, 605, 607, 608, 609, 751, 1041, 1043, 1058], "score_iri": 282, "score_iterative_imput": 186, "score_label": [236, 282], "score_mean": 350, "score_nam": [62, 72, 251, 278, 292, 332, 359, 815, 832], "score_param": [602, 603, 668, 1058], "score_rand": 282, "score_sampl": [265, 302, 303, 304, 310, 398, 422, 477, 541, 550, 572, 686, 806, 807, 809, 812, 813, 823, 858, 859, 869, 873, 917, 1016, 1044, 1049, 1051, 1053], "score_simple_imput": 186, "score_std": 350, "score_tim": [278, 420, 836, 837], "score_times_nb": 278, "score_times_svm": 278, "score_typ": [251, 278, 292, 332, 815, 832, 1057], "score_valu": 359, "scorer": [2, 154, 159, 236, 252, 270, 280, 333, 386, 398, 407, 415, 420, 423, 425, 570, 571, 603, 611, 643, 668, 682, 684, 720, 741, 742, 751, 809, 812, 813, 815, 823, 831, 832, 835, 836, 837, 838, 840, 967, 999, 1006, 1010, 1018, 1030, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "scorer1_nam": 420, "scorer2_nam": 420, "scorer_": [809, 812, 813, 823], "scorer_nam": [280, 809, 823], "scores_": [198, 199, 601, 604, 605, 607, 608, 609, 653, 654, 668, 1041, 1051], "scores_df": 52, "scores_glm_pure_premium": 236, "scores_matrix": 287, "scores_max": 55, "scores_product_model": 236, "scores_std": 164, "scoring_cal": 720, "scoring_inner_cv": 333, "scoring_on_bootstrap": 279, "scoring_weight": 407, "scott": [422, 858, 1041, 1042, 1047, 1049, 1050, 1051, 1056, 1057], "scottlog": 1059, "scratch": [385, 450, 1010, 1043], "screen": [48, 1054], "screenporch": 148, "screenshot": 382, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 372, 384, 385, 386, 387, 388, 390, 396, 398, 402, 410, 424, 1030, 1033], "scroll": 404, "scrollbar": 389, "scrutin": 285, "scsi": 57, "scullei": 416, "sdenton4": 1044, "sdg_param": 340, "se": [173, 240, 381, 402], "seabold": [1044, 1046, 1047], "seaborn": [72, 139, 154, 190, 191, 198, 203, 266, 276, 384, 402, 409, 1029], "seagreen": 212, "seal": 1047, "seamu": 1043, "sean": [1053, 1054, 1056], "seanpwilliam": 1048, "sear": 1047, "search": [2, 45, 52, 64, 81, 89, 105, 106, 107, 108, 151, 168, 170, 172, 173, 175, 188, 236, 251, 252, 266, 268, 270, 275, 277, 280, 281, 283, 288, 296, 297, 299, 301, 315, 319, 331, 347, 353, 358, 367, 381, 382, 384, 386, 396, 398, 411, 416, 417, 420, 423, 424, 425, 427, 451, 456, 458, 460, 465, 466, 469, 472, 479, 480, 486, 511, 524, 531, 566, 567, 568, 569, 573, 574, 575, 588, 608, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 637, 662, 685, 697, 698, 701, 702, 722, 737, 794, 797, 809, 812, 813, 820, 821, 823, 825, 839, 840, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 873, 918, 921, 922, 923, 924, 963, 997, 1003, 1005, 1007, 1010, 1013, 1014, 1024, 1026, 1030, 1031, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1055, 1056, 1058, 1060], "search_05p": 151, "search_95p": 151, "search_cv": 105, "searchcv": [397, 1056], "searchforpass": 1057, "searchgrid": 1030, "searchsort": 50, "season": [43, 52, 180, 192, 219, 383], "seasonal_kernel": 180, "seasoncountcatu32": 52, "sebastian": [1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "sebastien": 1049, "sebastin": [1048, 1049], "sebasti\u00e1n": 1047, "seberg": 1042, "sec": [49, 226, 240, 243, 297], "sec65": 1056, "secant": 651, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 379, 386, 390, 398, 413, 415, 416, 420, 421, 423, 424, 426, 472, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 513, 519, 562, 592, 597, 598, 599, 600, 630, 633, 640, 641, 708, 721, 725, 767, 768, 772, 773, 775, 776, 783, 784, 785, 786, 787, 790, 809, 812, 813, 823, 837, 843, 844, 847, 850, 861, 863, 864, 865, 870, 871, 999, 1000, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1021, 1026, 1056], "secondari": [644, 1045], "secondli": [382, 396, 416, 423, 666, 1006], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 124, 129, 141, 149, 154, 159, 164, 165, 166, 180, 184, 190, 191, 192, 194, 198, 203, 205, 207, 220, 242, 246, 252, 255, 257, 270, 274, 276, 279, 285, 322, 323, 324, 328, 358, 359, 360, 367, 377, 379, 382, 384, 385, 386, 388, 389, 390, 391, 392, 399, 407, 414, 415, 417, 419, 420, 421, 423, 424, 425, 426, 447, 451, 467, 543, 623, 628, 631, 646, 654, 797, 807, 915, 918, 999, 1004, 1006, 1010, 1011, 1013, 1014, 1016, 1017, 1024, 1025, 1026, 1027, 1041, 1043, 1044, 1045, 1048], "sector": 191, "sector_construct": 191, "sector_manufactur": 191, "sector_oth": 191, "secur": [388, 398, 1029, 1030, 1034, 1036], "sed": [388, 1041], "sedamaki": 1055, "sedykh": 1056, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 84, 85, 88, 90, 92, 93, 97, 99, 100, 102, 103, 113, 118, 120, 124, 129, 130, 134, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 159, 164, 169, 170, 171, 173, 175, 180, 181, 182, 186, 188, 191, 192, 194, 196, 198, 199, 200, 203, 209, 219, 220, 221, 222, 224, 235, 236, 238, 240, 247, 249, 252, 255, 256, 257, 259, 262, 263, 264, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 290, 291, 292, 294, 297, 303, 304, 306, 310, 317, 323, 324, 326, 327, 328, 329, 330, 331, 332, 338, 347, 351, 354, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 376, 377, 378, 379, 381, 382, 383, 384, 386, 388, 390, 391, 392, 396, 397, 398, 404, 410, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 499, 501, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 623, 628, 631, 632, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 710, 715, 717, 720, 722, 752, 772, 783, 787, 788, 789, 790, 797, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 956, 957, 978, 980, 983, 993, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 80, 87, 89, 92, 94, 95, 99, 100, 105, 111, 112, 113, 122, 125, 130, 141, 147, 166, 168, 193, 208, 213, 216, 221, 224, 227, 231, 235, 241, 262, 264, 265, 266, 267, 279, 282, 291, 302, 303, 304, 351, 352, 356, 359, 367, 372, 386, 393, 396, 398, 416, 420, 421, 451, 455, 456, 458, 460, 465, 467, 468, 469, 470, 479, 480, 481, 545, 553, 562, 563, 564, 565, 568, 569, 636, 655, 656, 661, 662, 669, 670, 671, 672, 686, 698, 700, 702, 704, 806, 807, 813, 844, 847, 862, 916, 942, 956, 957, 974, 978, 999, 1000, 1005, 1007, 1045, 1046, 1050, 1051, 1057], "seeger": [648, 1002], "seek": [238, 240, 242, 383, 384, 396, 399, 517, 518, 1007], "seel": 1055, "seem": [43, 48, 52, 81, 90, 151, 154, 181, 192, 218, 242, 245, 277, 294, 313, 321, 354, 358, 359, 383, 384, 389, 415, 420, 510, 1006, 1010], "seemingli": [236, 367, 396], "seen": [55, 62, 75, 90, 101, 115, 127, 133, 145, 151, 154, 191, 192, 214, 242, 248, 252, 313, 317, 347, 358, 379, 386, 388, 397, 398, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 432, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 530, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 632, 636, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 984, 990, 999, 1005, 1010, 1013, 1014, 1020, 1026, 1034, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "segfault": [372, 385, 1041, 1049, 1054], "segment": [51, 53, 55, 59, 71, 82, 83, 188, 241, 248, 379, 392, 416, 424, 460, 470, 517, 518, 700, 869, 1010, 1031, 1034, 1049, 1051, 1053], "seguin": 1046, "sei": 424, "seismic_r": [198, 203], "sejourn": 1050, "sel": [407, 425], "seladu": 1057, "seldom": 913, "sele": [1055, 1056], "selecci\u00f3n": 323, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 90, 92, 97, 103, 105, 108, 115, 122, 123, 124, 133, 134, 138, 140, 146, 148, 151, 154, 159, 168, 170, 180, 182, 191, 192, 194, 196, 197, 199, 201, 203, 204, 206, 217, 222, 226, 233, 236, 239, 245, 249, 251, 255, 260, 261, 262, 263, 270, 274, 275, 276, 277, 281, 289, 290, 301, 317, 322, 323, 328, 332, 334, 336, 337, 340, 342, 347, 354, 358, 359, 360, 367, 371, 379, 381, 382, 384, 386, 392, 397, 398, 413, 416, 417, 418, 421, 423, 424, 426, 451, 453, 454, 455, 457, 459, 461, 466, 467, 468, 472, 474, 475, 480, 481, 484, 496, 497, 501, 502, 505, 506, 509, 510, 511, 513, 521, 524, 541, 543, 544, 549, 550, 553, 558, 560, 567, 568, 569, 572, 574, 590, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 636, 640, 641, 654, 655, 656, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 680, 682, 685, 687, 691, 692, 700, 701, 706, 721, 725, 727, 763, 797, 801, 802, 806, 807, 809, 812, 813, 814, 815, 823, 835, 836, 837, 839, 841, 855, 856, 857, 859, 861, 863, 864, 865, 873, 874, 878, 883, 889, 893, 910, 913, 914, 918, 921, 922, 923, 924, 935, 978, 979, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1020, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "select__k": 999, "select_dtyp": [109, 148, 331, 474], "selected_featur": 194, "selected_features_nam": 194, "selectfdr": [2, 425, 601, 605, 607, 608, 609, 615, 1045, 1047, 1048, 1057], "selectfpr": [2, 384, 425, 601, 604, 607, 608, 609, 615, 1057], "selectfrommodel": [2, 173, 398, 407, 602, 611, 612, 1032, 1036, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1057, 1058], "selectfw": [2, 425, 601, 604, 605, 608, 609, 615, 1057], "selectkbest": [2, 106, 108, 169, 170, 330, 367, 384, 407, 417, 425, 590, 601, 604, 605, 607, 609, 615, 999, 1042, 1047, 1057, 1058], "selectkbestselectkbest": [170, 330], "selector": [2, 52, 105, 169, 170, 255, 354, 392, 424, 425, 474, 590, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 1043, 1051, 1053, 1057], "selectormixin": [2, 1052], "selectpercentil": [2, 89, 105, 259, 350, 425, 601, 604, 605, 607, 608, 612, 615, 1042, 1047, 1057, 1058], "selectpercentileselectpercentil": [105, 259], "self": [2, 47, 57, 62, 64, 91, 100, 136, 183, 188, 252, 290, 297, 335, 341, 347, 358, 378, 384, 385, 386, 389, 390, 391, 392, 416, 424, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 509, 517, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 712, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 823, 827, 828, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 962, 966, 967, 969, 970, 975, 983, 998, 1013, 1030, 1031, 1032, 1034, 1036, 1043, 1048, 1055], "self_request": 252, "self_training_clf": 339, "self_training_model": [328, 910], "selftrain": 340, "selftrainingclassifi": [2, 328, 339, 340, 341, 407, 1023, 1053, 1058, 1060], "selftrainingclassifierifittedselftrainingclassifi": 328, "seljak": 1056, "sell": 109, "selvan": 1053, "semant": [54, 358, 359, 398, 553, 1035, 1036, 1043], "semi": [2, 38, 57, 67, 166, 177, 250, 253, 319, 328, 344, 347, 351, 360, 379, 398, 496, 513, 544, 597, 599, 685, 738, 839, 873, 877, 908, 909, 910, 918, 1008, 1013, 1016, 1031, 1032, 1036, 1041, 1053, 1056], "semi_supervis": [2, 188, 328, 330, 335, 336, 337, 338, 339, 340, 341, 407, 908, 909, 910, 1011, 1023, 1031, 1042, 1047, 1048, 1055, 1056], "semiconductor": 1034, "semidefinit": [184, 1020, 1025], "semilogi": [206, 249], "semilogx": [164, 206, 207, 289], "semin": 423, "seminar": 1010, "semisupervis": [336, 398], "sen": [2, 188, 197, 221, 224, 317, 658, 666, 680, 687, 688, 1031], "send": [384, 399, 416, 428, 542], "sender": [358, 379], "sendyk": 1050, "seng": 1053, "senger": [0, 1057, 1058, 1059, 1060], "senior": [1020, 1034], "sens": [42, 43, 52, 55, 62, 90, 101, 181, 188, 191, 196, 249, 317, 323, 337, 347, 358, 367, 371, 384, 385, 398, 416, 418, 420, 425, 470, 477, 478, 479, 480, 481, 482, 483, 484, 661, 664, 665, 681, 810, 820, 910, 1004, 1006, 1013, 1014, 1016, 1020, 1023, 1031], "sensibl": [87, 186, 294, 359, 386, 1006, 1020], "sensit": [43, 79, 90, 113, 114, 141, 151, 188, 192, 220, 221, 222, 245, 246, 255, 268, 280, 283, 290, 317, 334, 347, 372, 373, 399, 415, 418, 423, 460, 470, 505, 560, 570, 667, 701, 709, 711, 721, 722, 727, 751, 793, 796, 797, 808, 809, 831, 839, 874, 893, 911, 1005, 1006, 1007, 1009, 1010, 1014, 1016, 1024, 1025, 1031, 1045, 1059], "sensor": 203, "sent": [154, 416, 842, 1026], "sentenc": [104, 358, 360, 379, 399, 424], "seoeun": 1057, "sep": [122, 285], "sepal": [80, 120, 132, 134, 147, 177, 202, 259, 300, 328, 331, 344, 381, 1020], "sepal_col": 331, "separ": [52, 53, 61, 62, 66, 67, 75, 90, 95, 97, 101, 107, 113, 121, 123, 124, 126, 129, 138, 140, 143, 146, 157, 173, 178, 187, 188, 192, 193, 196, 197, 217, 219, 239, 253, 263, 276, 279, 285, 286, 317, 319, 322, 328, 339, 342, 343, 345, 346, 347, 351, 352, 358, 367, 371, 380, 381, 386, 389, 392, 396, 398, 410, 414, 416, 417, 418, 421, 423, 424, 426, 472, 521, 528, 542, 547, 549, 550, 556, 558, 590, 597, 598, 600, 619, 640, 647, 655, 656, 682, 685, 686, 699, 703, 734, 741, 754, 755, 757, 762, 801, 828, 845, 846, 872, 873, 915, 917, 918, 923, 924, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1016, 1017, 1020, 1024, 1025, 1031, 1041, 1044, 1046, 1047, 1051, 1053, 1054, 1057, 1058], "seper": 562, "septemb": [743, 1010, 1041, 1044, 1047, 1049, 1054, 1057, 1059], "seq": 642, "seq_dataset": [1041, 1051], "seqlearn": 396, "sequenc": [2, 51, 138, 147, 205, 241, 386, 398, 417, 420, 421, 423, 424, 512, 521, 562, 563, 570, 571, 578, 579, 590, 591, 597, 598, 600, 655, 809, 812, 820, 839, 873, 897, 960, 961, 972, 980, 983, 1041, 1044, 1046, 1047], "sequencekernel": 183, "sequenti": [2, 52, 147, 167, 170, 188, 212, 277, 328, 382, 421, 423, 424, 509, 510, 543, 602, 606, 611, 612, 614, 615, 655, 656, 661, 662, 667, 669, 670, 671, 672, 682, 797, 873, 874, 893, 1000, 1018, 1024, 1031, 1032, 1036, 1041, 1050, 1053], "sequentialfeatureselector": [2, 173, 407, 425, 602, 606, 612, 1053, 1054, 1055, 1056, 1057, 1060], "sergei": [416, 1043, 1047, 1048, 1049, 1050, 1051], "sergeyf": 1043, "sergio": [1041, 1043, 1044, 1053, 1056], "sergiodsr": 1052, "sergul": [1048, 1049, 1052], "seri": [2, 42, 43, 51, 58, 115, 145, 151, 154, 188, 190, 193, 194, 201, 218, 220, 222, 238, 259, 281, 290, 324, 330, 336, 376, 379, 389, 398, 416, 497, 498, 499, 500, 501, 505, 509, 510, 511, 513, 514, 519, 550, 571, 699, 703, 710, 751, 754, 755, 757, 799, 830, 835, 836, 839, 935, 1001, 1006, 1007, 1011, 1013, 1024, 1029, 1031, 1044, 1047, 1048, 1049, 1053, 1056, 1058, 1059], "serial": [398, 410, 430, 965, 1029, 1030, 1041, 1049, 1053, 1058], "serializetostr": 410, "serious": 1012, "serum": [173, 381], "serv": [104, 128, 138, 181, 270, 279, 351, 417, 560, 1002, 1036, 1055], "server": [0, 173, 371, 381, 382, 384, 505, 1033, 1049], "servic": [0, 43, 246, 255, 384, 388, 410, 1034, 1049], "sess": 410, "session": [386, 390, 396, 402, 1028, 1034], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 92, 93, 95, 97, 99, 100, 101, 104, 105, 107, 113, 114, 115, 118, 120, 123, 124, 128, 129, 132, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 161, 164, 169, 170, 173, 175, 181, 182, 183, 188, 190, 191, 192, 193, 194, 198, 203, 205, 206, 207, 209, 211, 213, 214, 215, 217, 218, 219, 220, 223, 226, 231, 232, 236, 238, 239, 240, 245, 246, 247, 248, 250, 251, 252, 255, 259, 261, 263, 265, 266, 269, 271, 274, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 291, 294, 296, 299, 303, 304, 305, 306, 307, 310, 313, 314, 315, 317, 319, 321, 322, 323, 324, 326, 328, 329, 333, 336, 337, 340, 341, 344, 346, 349, 351, 354, 358, 359, 360, 364, 365, 366, 367, 371, 372, 373, 376, 377, 379, 381, 382, 384, 386, 388, 389, 391, 392, 397, 398, 399, 402, 407, 410, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 433, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 496, 497, 502, 504, 505, 506, 508, 511, 512, 513, 517, 518, 519, 524, 532, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 708, 709, 710, 711, 712, 720, 722, 723, 725, 728, 730, 732, 735, 736, 737, 738, 739, 740, 743, 747, 749, 754, 755, 757, 759, 760, 762, 765, 788, 789, 791, 792, 793, 794, 796, 798, 799, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 939, 940, 946, 951, 952, 957, 961, 965, 966, 978, 979, 980, 983, 984, 990, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "set1": [276, 306, 307], "set_": [252, 407, 1059], "set_alpha": [70, 261, 262, 263, 266, 267], "set_arrai": [51, 241, 248], "set_aspect": [43, 126, 178, 229, 263, 355], "set_autoscaley_on": 77, "set_axis_bgcolor": 115, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 301, "set_clip_box": [70, 261, 262, 263, 266, 267], "set_color": [46, 229], "set_config": [2, 252, 257, 259, 270, 324, 327, 333, 371, 372, 407, 417, 445, 451, 452, 455, 457, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 602, 603, 606, 611, 619, 620, 635, 636, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 810, 811, 816, 818, 827, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 1050, 1052, 1055, 1057], "set_constrained_layout_pad": 124, "set_edgecolor": 124, "set_facecolor": [115, 261], "set_fit_request": [252, 333, 407, 445, 451, 452, 455, 457, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 597, 600, 644, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 699, 845, 846, 848, 849, 850, 851, 852, 858, 878, 879, 892, 893, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924], "set_fmt_str_length": 52, "set_i": 92, "set_index": [62, 138, 151, 207, 236, 276, 323, 359], "set_inverse_transform_request": [542, 590, 880, 893], "set_label": [75, 178, 249], "set_label_posit": 46, "set_linewidth": [51, 241, 248], "set_major_formatt": [238, 240, 243, 297, 302], "set_major_loc": [238, 302], "set_output": [188, 192, 244, 257, 322, 323, 387, 440, 450, 451, 453, 455, 457, 472, 476, 490, 491, 492, 493, 505, 513, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 667, 697, 698, 701, 839, 857, 862, 865, 869, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 911, 1031, 1056, 1057, 1058, 1060], "set_param": [127, 134, 142, 148, 151, 192, 193, 199, 205, 207, 211, 222, 226, 250, 255, 259, 270, 289, 300, 326, 350, 359, 387, 398, 416, 417, 423, 426, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 1000, 1016, 1041, 1047, 1048, 1049, 1054, 1055], "set_partial_fit_request": [457, 543, 675, 676, 677, 685, 686, 687, 841, 842, 845, 846, 848, 849, 850, 851, 852, 870, 893], "set_path_effect": 75, "set_posit": [102, 130, 229, 317], "set_predict_proba_request": [921, 923], "set_predict_request": [252, 490, 491, 492, 561, 620, 644, 653, 654, 921, 922, 923, 924], "set_printopt": 269, "set_prop_cycl": 219, "set_score_request": [252, 270, 333, 407, 445, 451, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 808, 831, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 855, 856, 860, 863, 864, 870, 871, 873, 908, 909, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 1010], "set_siz": 304, "set_size_inch": [95, 164, 256], "set_split_request": [810, 811, 816, 818, 827], "set_start_method": 396, "set_stat": 999, "set_tick_param": 261, "set_ticklabel": [80, 120, 130, 215, 358], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 80, 88, 90, 92, 95, 99, 100, 106, 109, 113, 120, 122, 129, 134, 138, 143, 145, 149, 155, 157, 159, 160, 184, 186, 187, 190, 191, 192, 193, 194, 198, 199, 207, 209, 216, 218, 219, 220, 226, 238, 239, 242, 243, 248, 250, 251, 255, 256, 261, 269, 270, 271, 272, 273, 276, 278, 279, 283, 287, 288, 290, 292, 294, 296, 297, 300, 301, 302, 307, 312, 313, 317, 318, 319, 320, 321, 322, 326, 330, 336, 337, 344, 351, 354, 355, 356, 358, 362], "set_transform_request": [252, 490, 491, 492, 542, 591, 597, 599, 600, 644, 876, 879, 885, 893], "set_vis": [54, 70, 301, 307, 317], "set_xlabel": [46, 49, 80, 88, 95, 106, 107, 109, 120, 122, 129, 149, 184, 186, 187, 190, 192, 193, 194, 196, 207, 213, 215, 216, 218, 220, 233, 234, 250, 270, 276, 278, 282, 287, 288, 290, 292, 294, 302, 317, 318, 322, 339, 359, 360, 362], "set_xlim": [67, 77, 95, 109, 113, 122, 143, 157, 187, 192, 216, 218, 223, 250, 261, 280, 282, 294, 302, 312, 317, 319, 320, 321, 322, 327, 333, 355], "set_xscal": [207, 223], "set_xtick": [43, 47, 49, 67, 78, 95, 99, 134, 157, 161, 192, 194, 209, 234, 250, 261, 287, 288, 296, 312, 314, 319, 320, 344], "set_xticklabel": [47, 49, 113, 134, 161, 178, 192, 194, 287, 288, 296], "set_ylabel": [46, 47, 49, 66, 70, 80, 88, 95, 100, 106, 107, 109, 113, 120, 122, 129, 134, 138, 145, 149, 184, 192, 196, 207, 209, 213, 215, 216, 218, 220, 222, 233, 250, 261, 270, 276, 278, 282, 287, 288, 290, 296, 302, 317, 318, 322, 326, 339, 354, 359, 362], "set_ylim": [47, 49, 67, 77, 95, 106, 122, 143, 156, 157, 184, 192, 199, 216, 218, 219, 250, 261, 280, 292, 296, 302, 312, 317, 319, 320, 322, 327, 333, 339, 355], "set_yscal": [149, 218], "set_ytick": [43, 67, 78, 95, 99, 134, 157, 186, 187, 194, 209, 234, 261, 287, 312, 314, 319, 320, 344, 360], "set_yticklabel": [134, 178, 186, 187, 194, 287, 360], "set_zlabel": [80, 120, 215], "set_zord": 126, "setattr": 386, "setdefault": [55, 928], "setdiff1d": 353, "seth": 1047, "sethdandridg": 1045, "setminu": 1026, "setosa": [80, 120, 130, 132, 285, 286, 381, 513], "setp": [47, 49, 287, 291], "settabl": 1010, "settingwithcopywarn": 192, "setup": [283, 285, 371, 382, 386, 390, 392, 1013], "setuptool": 1059, "seuclidean": [458, 465, 708, 787, 788, 789, 1013, 1049, 1052, 1053], "seuclideandist": 708, "seung": 421, "seven": [379, 1003], "seventh": [520, 1022], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 90, 91, 92, 96, 108, 121, 141, 154, 157, 159, 162, 170, 173, 175, 180, 181, 188, 191, 196, 203, 207, 218, 222, 237, 238, 241, 242, 243, 249, 263, 271, 276, 281, 290, 299, 313, 317, 329, 354, 358, 359, 371, 378, 379, 381, 384, 386, 389, 392, 396, 398, 413, 416, 417, 420, 422, 423, 424, 426, 455, 457, 472, 495, 508, 517, 518, 547, 564, 565, 568, 569, 572, 573, 574, 579, 597, 598, 600, 619, 654, 655, 661, 697, 698, 699, 700, 701, 702, 806, 807, 809, 812, 813, 823, 841, 842, 848, 849, 850, 851, 852, 872, 873, 880, 897, 921, 922, 923, 924, 942, 999, 1002, 1007, 1010, 1011, 1013, 1018, 1020, 1024, 1026, 1027, 1028, 1029, 1031, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1054, 1057, 1058], "sevin": 1049, "sewook": 1051, "sex": [105, 173, 191, 193, 205, 207, 259, 331, 333, 381, 505, 1018], "sex_mal": 191, "seyedsaman": 1055, "sf": [173, 276, 328, 379, 425, 501, 611], "sfm": 173, "sfs_backward": 173, "sfs_forward": 173, "sfu": [416, 450], "sgd": [2, 46, 47, 50, 121, 133, 140, 150, 151, 160, 178, 179, 188, 197, 200, 209, 210, 225, 232, 245, 265, 284, 310, 313, 314, 329, 348, 349, 352, 356, 358, 363, 367, 373, 513, 521, 640, 658, 675, 676, 677, 680, 685, 686, 687, 688, 870, 871, 999, 1014, 1031, 1032, 1036, 1041, 1044, 1045, 1046, 1048, 1052, 1054], "sgdclassifi": [2, 25, 46, 47, 225, 226, 227, 228, 229, 230, 231, 250, 284, 340, 349, 358, 367, 371, 373, 390, 398, 414, 424, 647, 649, 650, 651, 655, 667, 675, 677, 913, 918, 1002, 1006, 1011, 1024, 1025, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "sgdoneclasssvm": [2, 232, 245, 329, 917, 1016, 1024, 1054, 1056, 1057, 1058, 1059], "sgdregressor": [2, 25, 49, 229, 371, 373, 396, 655, 658, 676, 680, 685, 688, 871, 914, 919, 1006, 1024, 1043, 1045, 1047, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1059], "sgi": 358, "sgkf": [420, 827], "sgm": 47, "sgml": [47, 371], "sh": [287, 392, 999], "sh_color": 242, "sh_err": 242, "sh_lle": 242, "sh_point": 242, "sh_tsne": 242, "sha256": [47, 52, 500, 1056, 1060], "shack": [1051, 1052, 1053], "shade": [58, 88, 171, 202, 300, 305, 343, 421], "shader": 412, "shadi": [1056, 1057], "shadow": [128, 132, 133, 241, 338, 353, 360, 424], "shafer": 104, "shagun": 1047, "shah": [1045, 1046, 1047, 1053, 1059], "shaharyar": 1059, "shahebaz": 1049, "shahriar": 1043, "shaikh": [0, 369, 374, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1059], "shail": 1053, "shakerimoff": 1055, "shalev": [675, 676, 1006, 1024], "shalil": 1049, "shall": 180, "shallow": [390, 423, 570, 571, 928], "shamsi": 1049, "shandeng123": 1055, "shane": [1050, 1053, 1056], "shanghai": [698, 702, 1007], "shangwu": [1049, 1050], "shankar": 1051, "shanmuga": 1047, "shanno": 1006, "shannon": [566, 573, 921, 923, 1007, 1026], "shantanu": 792, "shao": [1053, 1054, 1055], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 81, 82, 83, 86, 87, 88, 89, 90, 93, 95, 96, 101, 104, 108, 109, 113, 124, 125, 127, 139, 144, 145, 146, 147, 148, 151, 152, 153, 154, 157, 158, 166, 169, 171, 176, 177, 179, 180, 181, 182, 186, 187, 188, 192, 193, 205, 207, 218, 220, 225, 227, 230, 231, 232, 233, 234, 237, 239, 240, 241, 245, 248, 249, 250, 251, 252, 254, 255, 261, 263, 265, 266, 267, 274, 276, 278, 279, 282, 283, 285, 286, 297, 302, 303, 307, 310, 312, 314, 319, 320, 326, 328, 331, 332, 333, 338, 339, 341, 344, 347, 350, 351, 352, 355, 356, 358, 359, 366, 371, 377, 378, 379, 384, 386, 398, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 936, 941, 944, 945, 951, 955, 957, 959, 963, 964, 971, 973, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 998, 1000, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1031, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1057, 1058], "shape_fit_": [915, 916, 917, 918, 919], "shape_img": 594, "sharad": 1049, "sharan": [1048, 1049], "share": [70, 117, 157, 191, 266, 358, 366, 367, 371, 372, 386, 392, 410, 416, 421, 424, 558, 677, 713, 717, 806, 807, 812, 813, 1004, 1017, 1033, 1041, 1043, 1049, 1051, 1053, 1056], "shared_yax": 144, "sharedmem": 1049, "sharei": [43, 52, 70, 109, 122, 129, 134, 160, 184, 192, 218, 220, 226, 278, 287, 290, 302, 318, 323, 353, 354, 359], "sharex": [43, 46, 54, 70, 107, 122, 129, 160, 184, 192, 220, 278, 290, 302, 339], "sharma": [1045, 1047, 1049, 1050, 1052, 1053, 1055, 1058, 1059], "sharmadharmp": 1055, "sharon": [45, 379], "sharova": 1048, "sharp": [43, 192, 1017, 1020], "sharper": 735, "shashank": [1047, 1053], "shaun": 1042, "shawpan": 1047, "shaymernaturalint": 1055, "she": [384, 903, 904, 1051], "shea": [1049, 1050], "shebanov": [1049, 1050], "sheep": 1034, "sheer": [384, 1034], "sheerman": 1041, "sheet": 1043, "sheetscikit": 404, "shekhar": 1047, "shell": [385, 392, 396], "shellyfung": 1056, "shen": 1054, "sheng": 1051, "shengxiduan": 1047, "shenhanc78": 1049, "sheni": 1053, "shenk": 1049, "shenoi": 1048, "sherlock": [637, 1000], "sheth": 1049, "shetti": 1054, "shi": [416, 460, 470, 700], "shibata": 1051, "shiebler": 1047, "shield": 398, "shift": [2, 52, 71, 73, 79, 84, 99, 188, 198, 241, 266, 302, 315, 317, 351, 418, 422, 448, 456, 466, 469, 477, 521, 524, 698, 702, 859, 882, 1020, 1031, 1035, 1036, 1041, 1045, 1049], "shifted_gaussian": 265, "shifted_opposite_lof_scor": 859, "shih": [850, 1012], "shiki": 1052, "shilt": 1044, "shinehid": 1054, "shinitski": 1058, "shinnar": 1054, "shinsuk": 1056, "ship": [57, 159, 187, 363, 372, 382, 402, 424, 1006, 1041, 1050], "shiqiao": [0, 406, 1041, 1042], "shirsat": 1056, "shiva": [1056, 1057], "shivam": [1049, 1050, 1051], "shivamgargsya": [1048, 1052, 1054], "shivan": 1046, "shivram": 1049, "shiyu": 1050, "shleifer": [1047, 1048], "shmelkov": 1046, "shoaib": 1056, "shoemak": 1052, "shogo": [1056, 1057], "shooter23": [1053, 1054], "shop": 1034, "short": [44, 120, 148, 155, 209, 274, 314, 358, 384, 392, 420, 424, 428, 1006, 1007, 1013, 1033, 1046, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "short_nam": 55, "shortcom": 1006, "shortcut": [392, 410, 426], "shorten": [384, 1025, 1054], "shorten_param": 277, "shorter": [43, 181, 264, 396, 416, 421, 458, 465, 572, 706, 1012, 1016, 1052], "shortest": [2, 74, 389, 393, 697, 963, 1007, 1054], "shortest_path": 1054, "shorthand": [93, 398, 417, 475, 570, 571, 874, 875, 1044], "shortlog": 388, "shortname_slic": 55, "shota": 1047, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 88, 136, 138, 141, 144, 148, 151, 154, 173, 186, 191, 196, 198, 199, 203, 218, 236, 245, 250, 251, 252, 255, 270, 276, 279, 282, 283, 285, 290, 294, 297, 318, 319, 324, 338, 347, 354, 359, 367, 371, 372, 373, 379, 382, 383, 384, 386, 388, 389, 391, 392, 393, 397, 398, 402, 407, 410, 412, 414, 415, 416, 418, 420, 421, 423, 424, 425, 426, 427, 428, 430, 433, 439, 445, 448, 450, 451, 452, 453, 455, 457, 458, 460, 462, 465, 466, 467, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 505, 512, 517, 518, 525, 530, 532, 533, 536, 541, 542, 543, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 602, 603, 606, 611, 616, 617, 619, 620, 629, 636, 637, 638, 640, 641, 642, 644, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 718, 736, 737, 751, 775, 780, 783, 787, 788, 789, 790, 791, 794, 797, 798, 801, 808, 810, 811, 816, 817, 818, 819, 826, 827, 828, 829, 831, 835, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 892, 893, 894, 896, 900, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 939, 943, 945, 949, 957, 962, 966, 970, 975, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 998, 999, 1000, 1004, 1005, 1006, 1007, 1010, 1011, 1013, 1015, 1016, 1017, 1020, 1023, 1024, 1025, 1026, 1030, 1033, 1034, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "shouldn": [262, 267, 384], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 362, 363, 364, 365, 366, 372, 373, 384, 390, 396, 397, 402, 403, 407, 413, 414, 415, 418, 420, 421, 422, 423, 425, 426, 446, 511, 568, 602, 603, 640, 641, 706, 707, 709, 710, 711, 722, 815, 832, 855, 873, 925, 926, 927, 999, 1002, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1024, 1025, 1030, 1043, 1045, 1046, 1048, 1050, 1051, 1052, 1053, 1055, 1057, 1058, 1059, 1060], "show_top10": 379, "show_vers": [2, 371, 382, 384, 392, 402, 403, 1049], "show_weight": 926, "show_with_diff": 127, "showcas": [136, 139, 144, 148, 151, 152, 154, 188, 386], "shown": [62, 83, 92, 136, 140, 144, 151, 184, 190, 192, 203, 208, 216, 236, 243, 245, 250, 255, 263, 276, 279, 282, 285, 294, 302, 313, 314, 317, 318, 319, 336, 354, 358, 359, 384, 389, 399, 414, 416, 417, 420, 421, 422, 424, 426, 446, 468, 641, 707, 709, 710, 711, 722, 809, 823, 925, 927, 1005, 1006, 1007, 1010, 1013, 1020, 1024, 1025, 1026, 1045, 1050, 1051, 1052, 1055], "shown_imag": 239, "shrankhla": 1056, "shreekant": 1060, "shreesha": [1057, 1058], "shreya": 1051, "shrink": [63, 115, 124, 152, 192, 203, 213, 216, 222, 238, 265, 317, 354, 421, 568, 569, 685, 687, 860, 870, 871, 915, 916, 917, 918, 919, 1013, 1025], "shrink_threshold": [308, 860, 1013, 1041, 1053], "shrinkag": [2, 69, 110, 112, 115, 131, 153, 188, 308, 429, 477, 478, 481, 482, 483, 484, 485, 487, 488, 489, 548, 552, 558, 570, 571, 809, 1006, 1020, 1031, 1032, 1036, 1041, 1045, 1046, 1048], "shrinkage_": [111, 112, 481, 483], "shrinkage_coeffici": 488, "shroff": 1059, "shrunk": [2, 111, 131, 317, 324, 332, 429, 481, 483, 484, 487, 488, 489, 558, 894, 1004, 1024, 1035, 1036], "shrunk_cov": [429, 487, 489], "shrunk_cov_scor": 131, "shrunk_covari": [2, 418, 1058], "shrunkcovari": [2, 111, 131, 418, 477, 478, 481, 482, 483], "shrunken": [860, 1041], "shruti": 1060, "shu": [1042, 1045, 1049], "shuangchi": [1055, 1056], "shubernetskii": 1043, "shubh": 1052, "shubhal": 1058, "shubham": [1048, 1051, 1059], "shubhanshu": 1053, "shubhraneel": 1055, "shuckle16": 1047, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 83, 95, 96, 124, 144, 145, 147, 154, 159, 187, 203, 226, 227, 232, 245, 277, 281, 282, 289, 297, 324, 336, 337, 338, 339, 349, 358, 359, 367, 379, 393, 398, 411, 477, 482, 496, 497, 499, 501, 504, 506, 512, 520, 521, 522, 523, 524, 528, 531, 533, 540, 546, 548, 549, 555, 556, 562, 563, 564, 565, 573, 574, 576, 577, 611, 614, 616, 667, 668, 675, 676, 677, 681, 683, 685, 686, 687, 696, 809, 811, 812, 813, 814, 815, 823, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 843, 870, 871, 894, 913, 914, 915, 918, 956, 957, 978, 980, 1005, 1006, 1011, 1018, 1024, 1025, 1036, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "shuffle_param": 354, "shuffled_arrai": 983, "shufflesplit": [2, 271, 278, 354, 420, 811, 817, 819, 829, 839, 1041, 1042, 1044, 1046, 1047], "shuhei": 1054, "shuhua": 1053, "shutil": [89, 106, 417], "shuttl": 359, "shuzh": 1051, "shwartz": [675, 676, 1006, 1024], "shwed": 1049, "shyam": 1054, "si": 104, "siam": [416, 420, 460, 468, 470, 544, 550], "siang": 1044, "siavash": 1054, "siavrez": 1055, "sibsp": [193, 331], "sid": 1048, "siddharth": [1048, 1052], "siddiqui": 1059, "side": [43, 64, 94, 151, 211, 222, 236, 240, 248, 270, 317, 351, 358, 367, 379, 396, 414, 417, 420, 421, 424, 433, 439, 524, 809, 823, 1006, 1007, 1010, 1012, 1025, 1050], "sidebar": 384, "sidhpura": 1056, "siebert": 1049, "sierra": [540, 546], "sievert": 1051, "siftikha": 1049, "sig": 125, "sigh": 358, "sigkdd": [378, 379, 520, 685, 894, 1020, 1022], "sigma": [53, 81, 82, 89, 113, 131, 151, 274, 276, 413, 418, 421, 423, 623, 658, 1004, 1006, 1008, 1012, 1015], "sigma2": [543, 550], "sigma_": [418, 653, 654, 1054, 1058], "sigma_0": [178, 179, 184, 426, 623], "sigma_0_bound": [184, 623], "sigma_i": [1012, 1020], "sigma_k": [421, 1004], "sigmod": [416, 458, 465, 859, 1016], "sigmoid": [2, 61, 62, 63, 64, 376, 423, 445, 460, 544, 570, 629, 648, 652, 774, 783, 786, 870, 871, 915, 916, 917, 918, 919, 1015, 1025, 1036, 1054, 1058], "sigmoid_kernel": [2, 412, 774, 1008, 1060], "sign": [75, 112, 118, 125, 128, 140, 203, 266, 312, 354, 384, 416, 421, 424, 553, 591, 598, 615, 644, 645, 667, 668, 675, 677, 683, 684, 685, 686, 744, 751, 913, 917, 955, 957, 974, 1006, 1010, 1015, 1020, 1024, 1025, 1041, 1045, 1050, 1054, 1056, 1059], "signal": [2, 11, 53, 114, 124, 125, 126, 133, 149, 151, 175, 180, 181, 188, 197, 198, 204, 205, 206, 207, 212, 213, 217, 219, 267, 329, 416, 418, 424, 425, 426, 429, 483, 512, 530, 535, 540, 543, 546, 550, 554, 555, 634, 653, 654, 655, 656, 661, 662, 672, 673, 681, 693, 694, 695, 794, 830, 839, 887, 1006, 1010, 1027, 1031, 1034, 1035, 1036], "signatur": [252, 358, 359, 379, 496, 497, 566, 567, 573, 574, 603, 619, 620, 668, 682, 684, 720, 751, 815, 832, 835, 837, 840, 886, 969, 999, 1048, 1054, 1058], "signif": [45, 1002], "signifi": [416, 590, 820, 1015], "signific": [2, 43, 90, 144, 151, 168, 169, 171, 188, 222, 236, 268, 276, 296, 297, 321, 358, 367, 378, 379, 396, 416, 419, 420, 423, 513, 541, 543, 558, 636, 667, 668, 675, 676, 677, 685, 686, 687, 828, 838, 913, 915, 916, 917, 918, 919, 999, 1009, 1010, 1013, 1031, 1041, 1043, 1044, 1045, 1049], "significantli": [43, 61, 62, 64, 72, 111, 112, 138, 144, 149, 151, 154, 173, 191, 192, 193, 218, 222, 226, 234, 236, 270, 276, 297, 327, 328, 359, 360, 367, 372, 388, 416, 421, 423, 424, 429, 477, 482, 487, 488, 547, 549, 556, 567, 574, 655, 656, 661, 662, 669, 670, 671, 672, 693, 701, 853, 854, 1002, 1006, 1007, 1013, 1018, 1025, 1041, 1043, 1044, 1048, 1049, 1054, 1055, 1056], "sijaranamu": 1047, "silenc": [252, 1060], "silent": [252, 424, 590, 869, 1020, 1046, 1047, 1049, 1050, 1054, 1055], "silhouett": [2, 58, 71, 73, 84, 92, 93, 188, 359, 455, 521, 801, 802, 1031, 1041, 1045], "silhouette_avg": 95, "silhouette_sampl": [2, 95, 802, 1045, 1047, 1049, 1057], "silhouette_scor": [2, 73, 84, 93, 95, 359, 384, 416, 1041, 1045, 1047, 1049, 1051, 1055], "silicon": 382, "silk": 1055, "sillanp\u00e4\u00e4": 1041, "silva": [414, 697, 1007, 1052, 1054, 1059], "silverman": [422, 858, 1056], "silverthorn": 1041, "silvestrin": 1058, "sim": 421, "sim4n6": 1056, "simd": [398, 1056], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 84, 86, 92, 95, 109, 118, 124, 128, 138, 151, 172, 175, 182, 190, 191, 192, 193, 203, 218, 220, 232, 238, 240, 241, 242, 245, 251, 252, 267, 270, 273, 276, 279, 282, 283, 284, 294, 296, 297, 317, 329, 346, 351, 354, 359, 360, 367, 371, 376, 378, 380, 383, 384, 386, 389, 390, 392, 393, 396, 398, 410, 413, 414, 416, 419, 420, 421, 423, 424, 425, 426, 427, 448, 451, 452, 458, 460, 462, 463, 512, 517, 518, 545, 591, 598, 599, 600, 619, 686, 701, 704, 712, 714, 724, 728, 734, 737, 738, 740, 743, 747, 749, 764, 769, 770, 795, 801, 802, 805, 806, 807, 835, 840, 885, 906, 909, 913, 914, 915, 916, 930, 940, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1016, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1036, 1041, 1045, 1046, 1047, 1049, 1053, 1054], "similarli": [43, 51, 72, 90, 122, 155, 192, 194, 203, 207, 218, 246, 255, 270, 276, 312, 317, 332, 334, 347, 367, 372, 380, 382, 386, 389, 398, 410, 412, 413, 419, 420, 424, 738, 739, 747, 792, 793, 796, 831, 1005, 1007, 1008, 1010, 1017, 1024, 1025, 1027, 1049, 1055, 1057], "simmon": 1034, "simon": [1006, 1034, 1044, 1045, 1054, 1055, 1056, 1057], "simona": [1052, 1053, 1054], "simonamaggio": [1052, 1053, 1054], "simoncw": 1051, "simonpl": 1046, "simpl": [2, 13, 37, 43, 64, 90, 105, 109, 111, 117, 118, 124, 144, 149, 182, 188, 192, 203, 219, 235, 258, 277, 294, 298, 301, 310, 330, 343, 358, 360, 363, 367, 382, 384, 386, 387, 388, 389, 391, 396, 397, 398, 399, 407, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 430, 437, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 470, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 523, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 795, 797, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 965, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1020, 1022, 1024, 1026, 1030, 1031, 1034, 1038, 1041], "simplefilt": 410, "simpleimput": [2, 105, 159, 186, 187, 193, 247, 257, 259, 327, 330, 367, 398, 636, 637, 638, 1000, 1020, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "simpleimputersimpleimput": [105, 159, 193, 247, 257, 327, 330], "simplepipelin": 252, "simpler": [152, 194, 236, 326, 347, 371, 383, 416, 421, 1006, 1011, 1046], "simplest": [88, 420, 1007], "simplex": [63, 679, 806, 888], "simpli": [74, 118, 157, 175, 183, 242, 253, 255, 285, 310, 328, 329, 371, 379, 384, 386, 389, 396, 398, 418, 419, 420, 421, 423, 424, 493, 704, 771, 774, 880, 932, 959, 1002, 1010, 1011, 1012, 1013, 1024, 1048, 1049, 1050], "simplic": [43, 53, 67, 203, 351, 358, 360, 398, 422, 1013, 1014, 1015, 1025], "simplif": [380, 383, 389, 1041, 1047], "simplifi": [43, 105, 205, 252, 347, 383, 385, 389, 416, 419, 524, 571, 872, 873, 1010, 1012, 1020], "simplist": [218, 424], "simul": [112, 126, 154, 191, 212, 253, 276, 1034], "simultan": [58, 90, 125, 280, 284, 332, 354, 365, 376, 413, 416, 999, 1010, 1011, 1026, 1034, 1048], "sin": [43, 53, 57, 74, 125, 139, 150, 151, 156, 158, 168, 175, 181, 182, 184, 198, 199, 203, 212, 219, 224, 240, 251, 267, 309, 318, 327, 333, 353, 364, 365, 426, 525, 624, 708, 773], "sin_transform": 43, "sina": 1054, "sinayev": 1043, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 84, 88, 90, 101, 104, 105, 106, 125, 148, 164, 170, 173, 175, 180, 191, 192, 194, 196, 201, 218, 220, 222, 235, 246, 250, 251, 252, 263, 266, 270, 272, 276, 278, 279, 285, 286, 290, 294, 296, 297, 299, 300, 323, 329, 330, 341, 344, 347, 354, 358, 359, 360, 367, 372, 379, 382, 384, 385, 386, 388, 389, 392, 396, 397, 398, 402, 407, 410, 414, 416, 417, 418, 419, 420, 421, 423, 424, 426, 433, 436, 445, 449, 450, 453, 454, 458, 461, 464, 477, 490, 491, 492, 493, 505, 536, 545, 546, 547, 548, 549, 555, 556, 558, 559, 560, 561, 562, 564, 566, 568, 570, 571, 572, 573, 576, 578, 597, 598, 600, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 641, 642, 647, 660, 664, 667, 668, 675, 677, 682, 683, 684, 685, 688, 701, 716, 718, 744, 751, 759, 760, 787, 791, 798, 808, 809, 812, 813, 823, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 860, 863, 870, 871, 873, 878, 903, 904, 908, 909, 910, 913, 915, 918, 921, 923, 937, 939, 940, 957, 966, 999, 1002, 1003, 1004, 1006, 1007, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1024, 1025, 1026, 1034, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "sinclert": 1049, "sind": 424, "sine": [2, 43, 175, 180, 181, 188, 212, 224, 260, 261, 262, 263, 265, 266, 364, 380, 624, 806, 807, 1009, 1026, 1031], "singer": [294, 675, 676, 744, 1006, 1010, 1024, 1025], "singh": [1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "singl": [2, 30, 31, 70, 74, 83, 87, 88, 90, 93, 96, 97, 106, 126, 137, 138, 139, 147, 148, 158, 173, 175, 181, 186, 188, 192, 194, 196, 203, 218, 220, 222, 256, 258, 266, 270, 272, 285, 294, 314, 330, 332, 347, 358, 359, 360, 363, 365, 367, 371, 372, 378, 379, 384, 389, 391, 392, 393, 396, 397, 398, 407, 414, 415, 417, 419, 420, 421, 423, 424, 425, 441, 445, 448, 449, 453, 454, 455, 457, 462, 472, 474, 475, 502, 503, 505, 515, 518, 543, 562, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 591, 601, 608, 609, 611, 615, 636, 641, 643, 652, 675, 676, 682, 685, 686, 687, 699, 701, 703, 719, 720, 730, 731, 732, 733, 734, 745, 746, 747, 750, 783, 794, 806, 807, 809, 812, 813, 823, 830, 831, 835, 836, 838, 839, 842, 850, 853, 854, 858, 870, 871, 872, 882, 883, 886, 887, 888, 893, 894, 908, 909, 921, 922, 923, 924, 933, 935, 973, 996, 999, 1005, 1006, 1007, 1010, 1011, 1013, 1015, 1017, 1018, 1020, 1024, 1025, 1026, 1029, 1031, 1034, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "single_output": [386, 933], "single_prior": 184, "single_source_shortest_path_length": [2, 393], "singleton": [372, 817, 942, 1054, 1057], "singular": [2, 124, 393, 413, 416, 419, 459, 461, 490, 491, 492, 493, 530, 533, 543, 547, 549, 550, 553, 556, 558, 559, 666, 681, 682, 683, 696, 957, 1006, 1007, 1009, 1035, 1036, 1047, 1048, 1059], "singular_": 666, "singular_values_": [543, 550, 553, 1048], "sinha": [1049, 1058, 1059], "sinhrk": [1045, 1046], "sink": [650, 1002], "sinoisoid": 151, "sinusoid": [125, 139, 151, 203, 251, 654, 1003], "sio": 410, "siola": [1056, 1057], "sip\u0151cz": [1051, 1052, 1053, 1057, 1059], "siqi": 1055, "siqueira": 1051, "sir": 381, "sister": 1029, "site": [151, 319, 382, 384, 392, 402, 423, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 1034, 1049], "situat": [62, 79, 92, 106, 190, 191, 224, 245, 279, 384, 392, 410, 418, 420, 421, 423, 476, 537, 543, 591, 886, 889, 901, 911, 1004, 1006, 1012, 1013, 1023, 1026, 1049], "situp": 381, "sivamani": 1051, "sivaprasad": [1044, 1045], "six": [173, 219, 239, 321, 381, 1050], "sixteenth": 1022, "sixth": 379, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 81, 82, 87, 89, 90, 92, 93, 95, 96, 97, 101, 102, 107, 111, 112, 113, 114, 115, 117, 118, 122, 124, 125, 126, 127, 128, 131, 133, 141, 150, 151, 154, 155, 156, 169, 175, 177, 178, 181, 182, 188, 190, 192, 193, 198, 199, 200, 201, 204, 208, 213, 216, 219, 220, 221, 224, 231, 232, 238, 243, 245, 248, 249, 250, 251, 252, 254, 255, 263, 269, 272, 274, 276, 278, 279, 281, 282, 283, 294, 303, 304, 305, 312, 315, 318, 319, 320, 321, 324, 327, 330, 332, 333, 337, 341, 343, 345, 346, 347, 354, 356, 358, 359, 360, 362, 371, 372, 373, 379, 380, 384, 389, 393, 396, 397, 398, 402, 407, 413, 414, 416, 418, 420, 421, 424, 426, 427, 429, 452, 453, 454, 456, 457, 458, 465, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 502, 503, 504, 524, 536, 543, 545, 547, 549, 556, 566, 567, 568, 569, 570, 571, 573, 574, 592, 596, 597, 603, 641, 642, 652, 666, 675, 676, 688, 692, 701, 704, 714, 728, 747, 749, 752, 790, 802, 811, 814, 815, 819, 826, 829, 830, 831, 834, 837, 839, 848, 849, 850, 852, 855, 856, 857, 858, 859, 861, 863, 864, 865, 870, 871, 888, 890, 902, 907, 911, 915, 916, 917, 918, 919, 921, 922, 923, 924, 927, 956, 960, 961, 972, 973, 975, 978, 984, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1020, 1022, 1024, 1025, 1026, 1033, 1034, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1056, 1057, 1059, 1060], "size_cluster_i": 95, "size_mb": 358, "sizeabl": [811, 826, 829], "sk": 559, "skaft": 1055, "skeleton": 1044, "sketch": [2, 23, 196, 373, 376, 393, 648, 649, 650, 974, 1036, 1053], "skew": [2, 48, 151, 221, 249, 255, 317, 332, 376, 414, 420, 648, 649, 650, 651, 889, 901, 1006, 1020, 1036, 1044, 1048, 1057], "skewed": [651, 1048], "skewedchi2sampl": [2, 647, 648, 649, 650, 1002, 1048, 1055, 1056], "skf": [263, 420, 828], "skfold": 339, "skforecast": 1029, "skill": 1010, "skimag": [81, 82, 378], "skip": [372, 384, 393, 412, 424, 476, 655, 656, 661, 669, 670, 671, 680, 690, 911, 932, 1045, 1048, 1051, 1053, 1055, 1057], "skip_check_arrai": 998, "skip_complet": 636, "skip_comput": 1051, "skip_parameter_valid": [476, 911, 1057], "skipper": [1044, 1046, 1047], "skiptestwarn": 932, "skl2onnx": 410, "sklear": 385, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 371, 372, 373, 377, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 396, 397, 398, 401, 402, 403, 407, 410, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "sklearn2pmml": 1029, "sklearn_api": 0, "sklearn_assume_finit": 371, "sklearn_cache_": 326, "sklearn_enable_debug_cython_direct": 385, "sklearn_fail_no_openmp": 382, "sklearn_graph_cache_": 299, "sklearn_is_fit": [136, 1031], "sklearn_run_float32_test": 384, "sklearn_site_joblib": 1049, "sklearn_warning_as_error": 372, "sklearnex": 402, "skop": [1029, 1036], "skorch": 1029, "sktime": [52, 1029], "sl": 218, "slack": 1024, "slai": 358, "slama": [1051, 1053], "slep": [384, 398], "slep000": 399, "slep009": [1052, 1054, 1055], "slep010": [386, 1052], "slep011": 1030, "slep018": [259, 386, 1056], "slep020": 399, "slice": [2, 43, 52, 55, 147, 154, 227, 240, 250, 305, 308, 329, 330, 343, 379, 385, 393, 417, 472, 475, 502, 503, 517, 555, 648, 783, 787, 790, 930, 935, 960, 961, 980, 1053, 1055, 1059], "slice_": [502, 503, 1056], "sliceabl": 964, "slide": [277, 653, 1006, 1028], "slight": [148, 223, 328, 410, 423, 457, 1051], "slightli": [43, 62, 64, 99, 115, 141, 144, 148, 151, 155, 159, 173, 175, 176, 177, 193, 198, 218, 236, 241, 243, 252, 255, 284, 290, 297, 326, 344, 360, 383, 384, 414, 416, 423, 424, 426, 428, 454, 597, 598, 600, 647, 667, 812, 813, 913, 915, 918, 956, 957, 999, 1006, 1020, 1024, 1025, 1026, 1050, 1054, 1055, 1057, 1059, 1060], "slishak": 1055, "sloan": 0, "slogdet": 955, "slope": [192, 216, 220, 235, 416, 499, 732, 757, 1008, 1010], "sloppili": 424, "sloth": [50, 310, 379, 507], "slow": [299, 317, 358, 371, 378, 382, 384, 421, 424, 455, 708, 887, 888, 892, 915, 918, 957, 1007, 1013, 1030, 1048], "slower": [106, 127, 144, 148, 186, 251, 285, 360, 398, 423, 424, 425, 454, 459, 461, 547, 549, 556, 564, 565, 566, 567, 572, 573, 574, 575, 597, 598, 600, 640, 641, 642, 652, 668, 681, 683, 696, 701, 713, 841, 845, 846, 1003, 1007, 1008, 1009, 1011, 1013, 1026, 1045, 1052], "slowest": [148, 956, 957], "slowli": [396, 398, 553, 957], "slug": 104, "smacof": [2, 699, 1056], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 83, 84, 88, 90, 104, 111, 115, 118, 121, 129, 139, 141, 148, 150, 151, 180, 182, 191, 192, 199, 204, 208, 209, 219, 222, 224, 233, 235, 236, 263, 270, 276, 283, 288, 290, 299, 310, 313, 315, 317, 319, 321, 328, 336, 341, 347, 352, 354, 358, 359, 373, 377, 379, 381, 384, 387, 393, 396, 398, 410, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 429, 449, 451, 453, 454, 455, 457, 466, 467, 471, 483, 505, 507, 547, 549, 550, 556, 564, 565, 566, 570, 571, 572, 573, 591, 598, 599, 611, 616, 617, 659, 663, 664, 665, 667, 668, 688, 691, 692, 755, 812, 813, 827, 838, 841, 870, 871, 878, 906, 915, 918, 957, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1026, 1029, 1030, 1034, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "smaller": [2, 37, 47, 61, 75, 81, 90, 115, 138, 154, 173, 180, 181, 186, 206, 207, 209, 222, 249, 294, 303, 304, 312, 317, 334, 347, 354, 359, 384, 413, 416, 418, 420, 421, 423, 425, 447, 448, 454, 458, 462, 464, 523, 543, 544, 566, 567, 568, 569, 570, 571, 573, 574, 602, 619, 628, 642, 655, 656, 658, 659, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 681, 683, 691, 692, 701, 718, 806, 812, 813, 859, 862, 886, 887, 905, 906, 913, 921, 922, 923, 924, 957, 1004, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1020, 1022, 1024, 1025, 1026, 1030, 1049, 1054, 1058], "smallest": [113, 114, 218, 297, 334, 362, 379, 416, 418, 425, 536, 550, 639, 663, 664, 665, 691, 692, 699, 703, 704, 809, 812, 813, 823, 828, 883, 936, 1026, 1054], "smallest_ab": 334, "smallest_coef": [115, 536], "smari": [1050, 1051, 1052], "smart": [252, 451, 467, 468, 599], "smartphon": 1034, "smedbergm": 1047, "smedemark": 1051, "smile": [109, 379, 1055], "sminchisescu": [651, 1002], "smirnov": 1053, "smith": [1047, 1048, 1049, 1050, 1051, 1053], "sml": [869, 1015], "smo": [913, 914], "smola": [421, 424, 544, 879, 1020, 1025], "smolskii": 1056, "smooth": [43, 81, 82, 89, 173, 180, 211, 219, 234, 323, 347, 381, 399, 416, 422, 423, 426, 456, 457, 546, 547, 548, 555, 566, 567, 568, 569, 573, 574, 575, 599, 600, 628, 631, 685, 848, 849, 850, 852, 890, 894, 902, 921, 922, 923, 924, 1006, 1012, 1020, 1024, 1025, 1026], "smooth_idf": [424, 599, 600], "smoothened_coin": [81, 82], "smoother": [43, 44, 151, 192, 314, 422], "smoothli": 378, "smt": 1057, "smtp": [379, 501], "smujjiga": 1051, "sn": [72, 139, 154, 190, 191, 198, 203, 266, 276], "snake": [330, 332, 591, 894, 1020], "snapshot": [410, 568, 569, 1030], "sne": [51, 188, 237, 238, 239, 240, 242, 297, 523, 534, 701, 1031, 1035, 1036], "snippet": [136, 367, 384, 389, 392, 396, 412, 423, 424, 425, 1000, 1020, 1033, 1054], "snowhit": 1052, "snr": 89, "snuderl": 1045, "sny": 51, "snyder": [701, 1007], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 83, 90, 91, 96, 100, 114, 144, 147, 148, 149, 150, 154, 158, 175, 180, 191, 193, 196, 199, 218, 219, 245, 252, 255, 270, 276, 294, 297, 303, 304, 307, 313, 314, 318, 323, 324, 327, 339, 347, 358, 360, 366, 367, 371, 372, 373, 378, 379, 382, 383, 384, 386, 388, 389, 390, 392, 393, 398, 407, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 429, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 505, 517, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 704, 714, 717, 725, 735, 765, 787, 797, 806, 807, 808, 809, 812, 813, 815, 816, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 903, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 957, 975, 984, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1022, 1023, 1024, 1025, 1029, 1030, 1034, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1058], "soar": 1056, "sobkevich": 1053, "sobolev": 1045, "soc": [57, 379], "socastro": [1051, 1057, 1060], "socg2006": 455, "social": [191, 399, 416, 1034], "societi": [173, 381, 416, 418, 477, 482, 550, 636, 889, 901, 1006, 1024], "sodhani": 1047, "soft": [2, 133, 160, 161, 384, 398, 578, 579, 909, 917, 1024, 1034, 1046], "softmax": [423, 570, 667, 668, 1006, 1013, 1014], "softw": 1006, "softwar": [0, 173, 371, 381, 384, 392, 396, 398, 410, 424, 636, 644, 667, 1000, 1034], "soil_typ": 255, "sokalmichen": [458, 465, 708, 787, 788, 789, 1013], "sokalmichenerdist": 708, "sokalsneath": [458, 465, 708, 787, 788, 789, 1013], "sokalsneathdist": 708, "sok\u00f3\u0142": [1058, 1059], "sole": [102, 384, 396, 416], "soledad": 1053, "soler": [0, 406], "solid": [50, 67, 69, 150, 178, 230, 231, 245, 255, 310, 319, 1034], "solntz": 358, "solosil": 1054, "solut": [81, 198, 203, 207, 209, 223, 232, 245, 251, 329, 347, 382, 398, 410, 413, 415, 416, 418, 420, 421, 424, 425, 457, 459, 461, 540, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 619, 655, 657, 659, 661, 663, 664, 665, 667, 669, 671, 673, 674, 675, 676, 677, 678, 681, 683, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 806, 807, 823, 862, 870, 871, 1003, 1004, 1006, 1007, 1009, 1014, 1016, 1024, 1025, 1028, 1034, 1041, 1044, 1054, 1055, 1056], "solutu": 1049, "solutusimmensu": 1049, "solv": [2, 44, 45, 101, 175, 207, 250, 276, 296, 383, 384, 385, 386, 389, 396, 404, 416, 418, 420, 421, 426, 455, 461, 470, 486, 540, 546, 547, 548, 552, 554, 555, 556, 557, 644, 646, 655, 661, 663, 664, 673, 674, 679, 681, 683, 686, 694, 695, 696, 728, 843, 913, 914, 917, 957, 1001, 1004, 1006, 1007, 1010, 1011, 1024, 1025, 1026, 1028, 1029, 1034, 1047, 1051, 1054], "solvabl": 416, "solver": [54, 66, 69, 70, 81, 101, 188, 197, 207, 209, 210, 211, 218, 226, 233, 234, 236, 312, 313, 314, 315, 324, 333, 334, 358, 390, 396, 398, 402, 412, 416, 428, 460, 470, 479, 480, 486, 511, 542, 544, 549, 550, 553, 556, 558, 655, 656, 657, 661, 662, 667, 668, 669, 670, 671, 672, 675, 677, 678, 679, 681, 683, 685, 689, 690, 693, 696, 697, 698, 700, 702, 704, 797, 823, 839, 844, 847, 870, 871, 915, 916, 917, 918, 919, 1004, 1007, 1010, 1011, 1014, 1024, 1025, 1031, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "solver_": [681, 683], "solver_opt": 679, "somani": 1053, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 85, 88, 90, 91, 93, 97, 102, 105, 108, 111, 113, 114, 118, 124, 139, 140, 144, 148, 151, 152, 154, 155, 156, 159, 160, 169, 175, 177, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 198, 200, 202, 203, 205, 206, 207, 208, 212, 213, 218, 219, 222, 226, 227, 232, 235, 236, 238, 240, 245, 249, 252, 255, 262, 263, 264, 269, 270, 271, 276, 277, 278, 279, 282, 284, 290, 294, 296, 300, 303, 308, 313, 314, 317, 322, 327, 328, 329, 330, 331, 332, 333, 334, 343, 344, 346, 347, 354, 356, 358, 359, 360, 366, 367, 371, 372, 373, 377, 378, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 402, 407, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 445, 451, 452, 455, 457, 459, 461, 467, 471, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 505, 508, 517, 518, 524, 532, 533, 542, 543, 545, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 590, 591, 597, 599, 600, 615, 618, 619, 620, 641, 642, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 698, 699, 701, 702, 706, 707, 709, 710, 711, 716, 717, 724, 729, 735, 736, 747, 748, 749, 755, 763, 765, 766, 772, 791, 793, 796, 797, 798, 803, 806, 808, 810, 811, 816, 818, 827, 828, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 939, 940, 966, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1034, 1038, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "some_funct": [384, 947], "some_integ": 420, "some_iter": 384, "some_param": 384, "somebodi": 399, "someestim": 383, "somehow": 192, "someon": [384, 388, 398, 1041], "someth": [191, 239, 294, 358, 384, 387, 388, 392, 424, 929, 931, 1010, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "sometim": [106, 159, 190, 270, 276, 314, 359, 367, 372, 373, 384, 386, 390, 397, 398, 416, 418, 421, 423, 424, 457, 543, 544, 547, 549, 550, 878, 879, 880, 928, 1005, 1006, 1007, 1010, 1015, 1020, 1021, 1025, 1038, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057], "somewhat": [354, 367, 373, 384, 421, 423, 915, 918, 1006, 1025, 1026], "somewher": [390, 1010], "sommer": 1059, "somya": 1049, "son": [381, 1000], "song": 1007, "soni": [51, 1051, 1053], "sonni": 1046, "sonniv": [1056, 1057], "sonoiya": 1051, "sonoma": 323, "soon": [114, 398, 1060], "sooner": 1058, "sophist": [1000, 1012], "sorbaro": 1046, "sorensen": 421, "soriano": 1050, "sornarajah": 1046, "sorri": 1049, "sorro": 1050, "sorski": [1055, 1056], "sort": [2, 43, 47, 49, 51, 57, 58, 61, 95, 104, 107, 136, 141, 148, 151, 158, 173, 180, 198, 203, 218, 219, 236, 254, 276, 277, 280, 291, 309, 353, 358, 364, 365, 384, 388, 392, 393, 398, 420, 423, 424, 426, 543, 550, 564, 575, 590, 603, 619, 626, 706, 721, 727, 738, 739, 747, 763, 792, 793, 796, 798, 809, 836, 848, 849, 850, 851, 852, 853, 854, 861, 863, 864, 865, 868, 878, 884, 886, 887, 890, 892, 894, 902, 915, 918, 957, 963, 1006, 1013, 1016, 1020, 1034, 1041, 1045, 1051, 1052, 1053, 1055, 1056, 1059], "sort_graph_by_row_valu": [2, 393, 1056], "sort_index": 294, "sort_result": [853, 854, 861, 863, 864, 865, 1053], "sort_valu": [105, 193, 194, 259, 266, 276, 287, 323, 324], "sorted_idx": [152, 326], "sorted_importances_idx": 193, "sortofamudkip": [1056, 1057], "sought": 790, "soumirai": 1051, "sound": [173, 367], "sounder": 1047, "sourav": [1048, 1051], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 378, 381, 383, 384, 385, 387, 388, 390, 392, 393, 396, 397, 402, 410, 413, 417, 421, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 1007, 1020, 1026, 1029, 1031, 1034, 1051, 1055, 1059, 1060], "south": [50, 154, 191, 310, 379, 422], "south_y": 191, "sp": [43, 191, 333, 1000], "sp_version": 679, "space": [2, 37, 43, 47, 49, 57, 67, 81, 83, 88, 92, 93, 95, 96, 98, 100, 104, 105, 108, 118, 124, 126, 132, 134, 143, 147, 151, 157, 170, 173, 175, 181, 196, 203, 219, 238, 239, 240, 242, 249, 250, 251, 255, 256, 262, 267, 284, 287, 288, 297, 306, 307, 319, 328, 351, 358, 359, 360, 366, 367, 371, 376, 379, 380, 381, 384, 391, 396, 397, 398, 413, 416, 419, 421, 422, 423, 424, 426, 451, 455, 456, 457, 460, 470, 472, 473, 474, 475, 490, 491, 492, 496, 507, 541, 543, 544, 547, 548, 549, 550, 552, 553, 558, 582, 591, 597, 598, 600, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 641, 642, 647, 649, 650, 651, 652, 697, 698, 699, 701, 702, 703, 705, 708, 809, 812, 813, 815, 823, 832, 843, 853, 854, 861, 862, 863, 864, 873, 878, 879, 885, 890, 905, 906, 907, 926, 961, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1035, 1036, 1041, 1042, 1044, 1049, 1050, 1051, 1055, 1056, 1057], "spacek": 1046, "spain": 323, "spam": [590, 718, 750, 848, 1010, 1012, 1034], "span": [52, 90, 111, 151, 250, 270, 273, 379, 416, 424, 558, 645, 809, 812, 1010], "spanish": 1029, "spannbauer": 1053, "sparciti": 359, "spare": [378, 683, 684], "spark": [379, 1030], "sparrai": 1058, "spars": [2, 25, 45, 46, 51, 53, 55, 57, 66, 74, 75, 89, 90, 92, 104, 110, 111, 112, 123, 125, 143, 157, 188, 197, 198, 205, 206, 207, 210, 212, 213, 217, 234, 249, 251, 277, 283, 297, 315, 327, 331, 334, 340, 357, 360, 366, 371, 376, 378, 379, 380, 384, 386, 387, 388, 389, 396, 397, 398, 410, 416, 417, 423, 424, 426, 427, 431, 438, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 465, 467, 468, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 495, 496, 497, 505, 506, 512, 517, 532, 533, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 594, 595, 597, 598, 599, 600, 602, 603, 612, 613, 614, 615, 616, 617, 618, 638, 639, 640, 642, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 721, 722, 723, 738, 739, 740, 743, 747, 748, 749, 763, 764, 769, 770, 772, 773, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 801, 802, 805, 808, 809, 812, 813, 823, 830, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 877, 878, 880, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 935, 937, 938, 939, 940, 945, 954, 957, 958, 961, 963, 964, 972, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 995, 998, 1000, 1003, 1006, 1007, 1008, 1010, 1011, 1013, 1023, 1025, 1026, 1030, 1031, 1032, 1035, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "sparse_cg": [358, 681, 683, 696, 1006, 1042, 1048, 1050, 1051, 1055, 1057], "sparse_coef_": [655, 661, 669, 671, 1041], "sparse_encod": [2, 551, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 691, 692, 693, 694, 695, 1041, 1048, 1049, 1051, 1055], "sparse_encode_parallel": 1041, "sparse_format": [536, 1058], "sparse_func": [1047, 1053], "sparse_input_": 880, "sparse_lasso": 204, "sparse_output": [43, 148, 259, 323, 330, 333, 575, 880, 884, 886, 892, 897, 1020, 1056, 1057], "sparse_output_": [472, 560], "sparse_symmetric_arrai": 995, "sparse_threshold": [192, 472, 475, 1049], "sparsearrai": 1052, "sparsecod": [2, 133, 421, 540, 546, 549, 557, 1048, 1049, 1051, 1053, 1055], "sparsecodingmixin": 1041, "sparsefunc": [2, 393, 984, 985, 986, 987, 988, 989, 990, 1054], "sparsefuncs_fast": [2, 393, 991, 992], "sparsepca": [2, 124, 540, 542, 543, 544, 546, 548, 549, 550, 551, 554, 555, 1041, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1059], "sparser": [90, 198, 209, 421, 479, 486, 548, 552, 1006, 1013, 1024], "sparserandomproject": [2, 239, 249, 905, 1022, 1042, 1047, 1055, 1057, 1058], "sparsetool": 1048, "sparsifi": [46, 203, 371, 667, 668, 675, 676, 677, 685, 686, 687, 913, 993, 1043], "sparsiti": [2, 53, 66, 80, 115, 130, 188, 197, 203, 206, 211, 229, 233, 234, 251, 354, 359, 371, 398, 418, 421, 423, 425, 510, 511, 536, 540, 546, 547, 548, 549, 552, 554, 555, 556, 655, 661, 666, 667, 685, 687, 730, 732, 733, 882, 888, 893, 898, 1003, 1006, 1013, 1020, 1031, 1043], "sparsity_en_lr": 209, "sparsity_l1_lr": 209, "sparsity_l2_lr": 209, "sparsity_ratio": 371, "spatial": [82, 84, 90, 194, 203, 235, 314, 379, 398, 416, 427, 452, 454, 458, 460, 465, 688, 701, 769, 772, 787, 788, 789, 790, 801, 802, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 866, 867, 1006, 1013, 1020, 1043, 1047, 1054, 1057], "spawn": [371, 396, 809, 823, 834, 835, 836, 1052], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366], "speak": [359, 371, 384, 1024], "spearman": [194, 644, 645, 1001], "spearmanr": 194, "spec": [1056, 1057], "speci": [2, 42, 120, 188, 255, 298, 358, 377, 422, 507, 715, 798, 858, 917, 928, 1010, 1016, 1031, 1036, 1041], "special": [150, 191, 208, 236, 294, 307, 323, 347, 378, 380, 386, 390, 396, 398, 416, 419, 421, 472, 475, 562, 564, 568, 834, 925, 999, 1004, 1006, 1008, 1009, 1010, 1011, 1013, 1026, 1048, 1051, 1053, 1055, 1060], "special_charact": [925, 1026], "species_nam": [50, 310], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 90, 97, 100, 104, 106, 144, 154, 159, 180, 183, 188, 191, 192, 196, 222, 236, 270, 271, 276, 294, 317, 326, 327, 331, 334, 351, 358, 359, 360, 367, 371, 372, 379, 384, 387, 389, 390, 392, 396, 398, 402, 410, 412, 416, 417, 420, 421, 423, 424, 425, 426, 440, 505, 512, 543, 560, 566, 573, 576, 577, 578, 579, 583, 597, 600, 602, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 634, 649, 652, 655, 656, 661, 667, 681, 696, 706, 708, 721, 722, 755, 809, 810, 811, 816, 817, 818, 823, 836, 849, 930, 949, 951, 952, 972, 985, 986, 987, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1015, 1017, 1018, 1020, 1024, 1026, 1027, 1028, 1033, 1041, 1045, 1049, 1050, 1051, 1052, 1055, 1056, 1058], "specifi": [2, 43, 58, 64, 90, 124, 148, 149, 154, 176, 179, 181, 182, 183, 207, 219, 226, 261, 270, 284, 371, 372, 378, 384, 386, 392, 393, 397, 398, 407, 410, 414, 416, 417, 420, 421, 423, 425, 426, 428, 430, 445, 449, 453, 458, 460, 471, 472, 475, 477, 478, 480, 481, 482, 483, 484, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 512, 524, 536, 540, 542, 546, 547, 549, 550, 555, 556, 561, 566, 568, 569, 570, 571, 573, 576, 577, 592, 593, 602, 603, 606, 611, 619, 620, 629, 640, 641, 642, 647, 652, 655, 656, 657, 660, 661, 662, 664, 665, 667, 668, 669, 670, 671, 672, 674, 677, 678, 681, 682, 683, 684, 685, 686, 689, 690, 691, 692, 693, 696, 700, 707, 709, 711, 718, 720, 738, 739, 747, 751, 763, 780, 788, 789, 792, 793, 796, 809, 812, 813, 815, 816, 818, 822, 823, 826, 831, 832, 833, 834, 835, 836, 837, 838, 840, 844, 847, 848, 849, 851, 852, 853, 854, 858, 863, 886, 887, 888, 891, 892, 894, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 952, 959, 993, 1000, 1006, 1007, 1009, 1010, 1013, 1017, 1018, 1020, 1023, 1024, 1025, 1041, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "spector": 420, "spectral": [2, 53, 56, 71, 79, 81, 84, 90, 104, 188, 239, 240, 338, 340, 358, 359, 360, 384, 424, 457, 459, 460, 461, 470, 477, 478, 479, 480, 481, 482, 483, 484, 496, 520, 522, 600, 697, 698, 699, 700, 701, 704, 728, 804, 1013, 1023, 1031, 1035, 1036, 1041, 1042], "spectral_clust": [2, 81, 101, 1049, 1051, 1053, 1054, 1055, 1056, 1058], "spectral_embed": [2, 398, 1007, 1042, 1045, 1047, 1049, 1051, 1054, 1055, 1056, 1058], "spectralbiclust": [2, 413, 461, 1043, 1047, 1048, 1052], "spectralclust": [2, 79, 330, 416, 448, 1013, 1041, 1042, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "spectralcoclust": [2, 57, 59, 413, 459, 1043, 1048, 1052], "spectralembed": [2, 87, 238, 239, 240, 697, 698, 699, 701, 1007, 1042, 1047, 1051, 1055, 1056, 1058], "spectrum": [107, 533, 553, 704, 957, 1034, 1049], "speech": [424, 1010], "speed": [81, 82, 92, 104, 127, 136, 144, 187, 192, 204, 207, 211, 255, 297, 328, 337, 358, 360, 373, 384, 387, 393, 396, 398, 412, 414, 416, 421, 423, 424, 427, 451, 452, 455, 456, 457, 458, 460, 465, 467, 468, 469, 470, 540, 541, 619, 636, 641, 642, 643, 648, 655, 656, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 690, 693, 701, 806, 807, 815, 837, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 888, 957, 999, 1002, 1007, 1009, 1011, 1024, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "speedi": 371, "speedup": [333, 371, 421, 423, 659, 663, 666, 1041, 1042, 1043, 1044, 1056, 1060], "speer": 1043, "spell": 424, "spend": 424, "spent": [297, 323, 385, 390, 837, 1056], "sperret6": 1059, "sphere": [138, 188, 237, 238, 241, 242, 243, 359, 422, 528, 598, 697, 698, 699, 700, 701, 773, 942, 1004, 1008, 1013, 1031], "sphere_data": 240, "spheric": [70, 92, 117, 155, 240, 263, 265, 266, 310, 380, 773, 806, 807, 1006, 1009, 1013], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 372, 388, 398, 402, 409, 1041, 1048], "sphinxcontrib": [384, 402, 409], "sphinxext": [384, 402, 409], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1041, "spidlen": [701, 1007], "spie": [173, 381], "spielman": 1051, "spike": 192, "spikebh": 1055, "spikhalskii": 1046, "spiki": 43, "spin": 392, "spine": [46, 54, 70, 229, 317], "spirit": 421, "spite": 1012, "spline": [2, 188, 197, 198, 291, 302, 525, 526, 527, 681, 874, 888, 892, 1029, 1031, 1054], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 219, 255, 329, 888, 1020, 1054, 1056, 1057], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 104, 129, 138, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 164, 169, 190, 191, 194, 203, 213, 214, 218, 221, 226, 236, 246, 255, 262, 263, 269, 270, 271, 274, 276, 281, 283, 286, 290, 294, 300, 306, 312, 314, 318, 319, 324, 330, 332, 339, 347, 358, 360, 366, 379, 391, 397, 398, 402, 407, 414, 415, 416, 421, 423, 424, 425, 445, 450, 451, 480, 481, 487, 488, 506, 540, 546, 548, 551, 555, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 597, 598, 600, 603, 611, 656, 660, 662, 664, 670, 672, 674, 682, 684, 704, 713, 714, 726, 740, 746, 766, 804, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 847, 853, 854, 870, 871, 894, 898, 899, 901, 902, 903, 904, 921, 922, 923, 924, 980, 999, 1002, 1006, 1007, 1013, 1016, 1017, 1018, 1020, 1024, 1026, 1030, 1036, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "split0_test_precis": [809, 823], "split0_test_scor": [809, 823, 1047], "split0_train_scor": [809, 823, 1047], "split1_test_scor": [809, 823], "split1_train_scor": [809, 823], "split2_test_scor": 809, "split_cod": 421, "split_sign": [540, 546, 551], "splitter": [43, 252, 332, 333, 398, 407, 420, 445, 480, 573, 574, 576, 577, 603, 611, 656, 660, 662, 664, 668, 670, 672, 674, 682, 684, 809, 811, 812, 813, 814, 815, 823, 824, 825, 828, 829, 832, 833, 834, 835, 836, 837, 838, 840, 844, 847, 921, 922, 923, 924, 1026, 1030, 1047, 1048, 1049, 1050, 1057, 1058, 1059, 1060], "splot": [262, 267], "splt": 219, "sply88": 1055, "spmatrix": 1058, "spolski": 424, "sport": [57, 379], "spot": [88, 247, 416], "spottabl": 390, "spread": [43, 75, 240, 277, 317, 336, 337, 338, 341, 354, 371, 384, 416, 460, 470, 524, 890, 902, 910, 1010], "spring": [43, 52, 192], "springboard": 1029, "springer": [141, 142, 153, 180, 275, 414, 416, 420, 421, 423, 529, 544, 568, 569, 699, 703, 705, 714, 729, 735, 749, 750, 765, 806, 921, 922, 1007, 1010, 1011, 1017, 1026], "sprint": [383, 384, 1041], "spuriou": [347, 392, 1020, 1054, 1055, 1056], "spy": 212, "sq": 778, "sqeuclidean": [73, 458, 465, 787, 788, 789], "sqft": 255, "sql": 378, "sqr": 75, "sqrt": [51, 113, 114, 115, 127, 133, 142, 164, 194, 198, 200, 241, 243, 257, 261, 262, 263, 266, 267, 276, 352, 354, 416, 423, 424, 426, 471, 477, 478, 479, 480, 481, 482, 483, 484, 547, 549, 556, 566, 567, 568, 569, 573, 574, 628, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 708, 740, 772, 773, 778, 893, 906, 921, 922, 923, 924, 1002, 1006, 1007, 1010, 1012, 1022, 1055], "squar": [2, 43, 44, 52, 96, 105, 112, 113, 114, 116, 117, 125, 126, 134, 141, 152, 154, 155, 173, 175, 180, 188, 190, 191, 197, 198, 200, 201, 203, 207, 208, 214, 218, 220, 223, 228, 235, 236, 248, 249, 251, 264, 291, 321, 328, 329, 331, 344, 358, 376, 381, 384, 390, 393, 398, 416, 418, 419, 421, 422, 423, 427, 428, 439, 448, 450, 451, 452, 454, 455, 457, 458, 462, 465, 467, 468, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 510, 540, 546, 548, 550, 552, 554, 555, 556, 558, 561, 563, 565, 567, 568, 569, 571, 574, 577, 579, 599, 600, 601, 604, 605, 607, 608, 609, 613, 614, 615, 618, 620, 624, 631, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 691, 692, 694, 695, 696, 697, 699, 701, 703, 705, 718, 730, 731, 732, 733, 759, 760, 767, 768, 772, 778, 779, 794, 799, 800, 839, 846, 847, 855, 856, 859, 860, 861, 863, 864, 871, 874, 893, 913, 914, 916, 918, 919, 920, 922, 924, 955, 982, 995, 1001, 1003, 1004, 1013, 1014, 1018, 1024, 1026, 1031, 1032, 1036, 1041, 1044, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1060], "square_dist": 1053, "squared_epsilon_insensit": [676, 685, 687, 914, 1006, 1047], "squared_error": [46, 52, 133, 151, 152, 329, 423, 567, 568, 569, 571, 574, 680, 685, 687, 702, 922, 924, 1024, 1026, 1054, 1057, 1058], "squared_hing": [225, 354, 675, 685, 913, 920, 1006, 1025], "squared_loss": [396, 1054], "squareform": 194, "squash": [255, 388, 426, 540, 546, 551, 557], "squeez": [109, 181, 182, 255, 297, 317, 1060], "sr": 1034, "sr_color": 242, "sr_err": 242, "sr_lle": 242, "sr_point": 242, "sr_tsne": 242, "srajan": 1049, "sre": 1056, "srebro": 1024, "srep30750": 416, "sri": [680, 1006, 1048, 1049], "sridharan": 1046, "sriharsha": [1049, 1050], "srikantan": 1006, "srimukh": 1053, "srinath": [1055, 1056], "srinivasan": [1049, 1052], "sripada": 1053, "srivastava": [1044, 1056, 1059], "srivatsan": [1047, 1048, 1051], "srvanrel": 1047, "sr\u0161e\u0148": 1059, "ss": 420, "sse": 451, "sseg": 1046, "ssrn": [218, 236], "sss": 829, "ssvm": 396, "st": [82, 102, 276, 331, 1044, 1047, 1049], "st30": 341, "st50": 341, "st_pipelin": 340, "sta4273": 653, "stabil": [72, 142, 149, 191, 239, 281, 317, 354, 359, 398, 413, 454, 659, 663, 679, 851, 870, 871, 889, 901, 956, 1000, 1006, 1009, 1020, 1030, 1041, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "stabilis": 198, "stabl": [43, 64, 191, 212, 216, 220, 297, 327, 354, 359, 382, 384, 388, 393, 398, 402, 420, 424, 428, 479, 480, 486, 542, 550, 664, 681, 683, 696, 701, 733, 761, 956, 957, 1006, 1012, 1013, 1020, 1030, 1037, 1041, 1042, 1047, 1052, 1054, 1058], "stack": [2, 14, 109, 137, 148, 162, 186, 188, 218, 247, 272, 302, 366, 383, 392, 396, 398, 422, 472, 474, 475, 505, 524, 571, 574, 576, 577, 621, 636, 637, 639, 662, 682, 710, 834, 836, 874, 878, 886, 887, 893, 983, 1000, 1030, 1031, 1032, 1033, 1036, 1041, 1044, 1048, 1049, 1050, 1051, 1052], "stack_method": [423, 576], "stack_method_": [423, 576, 577], "stacking_regressor": 159, "stackingclassifi": [2, 326, 367, 398, 407, 423, 577, 1000, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1060], "stackingregressor": [2, 159, 326, 398, 407, 423, 576, 1000, 1051, 1052, 1053, 1054, 1055, 1058, 1060], "stackingregressorinot": 159, "stackoverflow": [389, 392, 396], "stade": 1045, "stage": [0, 46, 63, 106, 138, 143, 149, 152, 270, 388, 398, 412, 416, 423, 456, 562, 563, 568, 569, 570, 571, 597, 598, 600, 611, 1007, 1020, 1028, 1049, 1053], "staged_decision_funct": [562, 568, 570], "staged_predict": [138, 149, 152, 423, 562, 563, 568, 569, 570, 571, 1041, 1053], "staged_predict_proba": [150, 153, 562, 568, 570, 1041], "staged_scor": [562, 563], "stagewis": 138, "stagg": 1054, "stai": [43, 52, 63, 72, 133, 191, 359, 383, 384, 388, 398, 399, 1015, 1033, 1047], "stairstep": 283, "stalei": [1050, 1051], "stall": [383, 387], "stallei": 1053, "stan": [851, 1058], "stand": [279, 360, 388, 396, 421, 540, 546, 554, 555, 605, 618, 687, 714, 726, 745, 746, 766, 795, 797, 804, 1009, 1010, 1016], "standalon": [390, 667, 913], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 90, 96, 104, 105, 107, 113, 114, 118, 125, 138, 141, 143, 144, 145, 146, 147, 155, 159, 173, 175, 180, 182, 184, 191, 198, 206, 207, 216, 218, 227, 238, 239, 240, 250, 255, 266, 270, 271, 274, 275, 276, 277, 279, 317, 322, 345, 358, 371, 372, 376, 377, 378, 380, 381, 382, 384, 386, 387, 389, 390, 393, 396, 398, 402, 410, 412, 416, 418, 419, 420, 424, 426, 454, 472, 476, 480, 496, 505, 510, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 533, 534, 539, 541, 544, 550, 561, 599, 603, 620, 643, 653, 654, 681, 682, 683, 684, 685, 687, 696, 698, 702, 797, 815, 830, 832, 850, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 877, 882, 883, 886, 889, 890, 891, 893, 901, 902, 903, 904, 911, 913, 914, 939, 999, 1002, 1006, 1007, 1010, 1012, 1013, 1014, 1016, 1024, 1025, 1030, 1034, 1036, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1059], "standard_coef_": 1052, "standard_intercept_": 1052, "standard_norm": [367, 696], "standard_scal": 257, "standard_t": 126, "standardscal": [2, 45, 49, 67, 79, 84, 90, 93, 97, 105, 107, 118, 134, 159, 173, 191, 198, 205, 207, 209, 218, 234, 236, 246, 247, 255, 256, 257, 259, 270, 273, 283, 290, 300, 305, 306, 312, 319, 322, 326, 327, 329, 330, 331, 333, 334, 347, 350, 367, 373, 384, 386, 389, 393, 397, 417, 420, 437, 474, 475, 576, 685, 687, 873, 874, 877, 890, 904, 913, 914, 915, 916, 918, 919, 1000, 1007, 1014, 1020, 1024, 1025, 1027, 1043, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "standardscalerifittedstandardscal": 259, "standardscalerstandardscal": [105, 159, 191, 246, 247, 256, 257, 259, 270, 283, 290, 327, 330], "standpoint": 85, "stanford": [173, 381, 658, 691, 692, 848, 851, 852, 906, 1008], "stanislav": [1056, 1057], "stanlei": [1055, 1056, 1057], "stap": 1049, "stapl": 1045, "star": [70, 122, 162, 384], "stareh": 1052, "start": [0, 43, 46, 49, 51, 52, 58, 63, 88, 93, 99, 102, 108, 118, 127, 143, 149, 151, 170, 173, 180, 182, 192, 196, 199, 200, 207, 218, 219, 220, 226, 236, 238, 242, 246, 250, 252, 264, 270, 276, 284, 297, 330, 332, 337, 358, 366, 367, 371, 372, 373, 384, 385, 386, 388, 389, 390, 396, 398, 402, 413, 416, 420, 421, 425, 426, 448, 450, 458, 462, 464, 547, 619, 626, 641, 654, 662, 668, 675, 676, 677, 685, 686, 687, 699, 703, 790, 791, 798, 806, 807, 809, 812, 813, 823, 855, 856, 857, 859, 861, 869, 963, 993, 999, 1006, 1009, 1014, 1015, 1024, 1030, 1034, 1044, 1046, 1049, 1051, 1053, 1054, 1055, 1056, 1057], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 241], "start_reut": 47, "start_tim": [46, 49, 57, 145, 146, 149, 159, 175, 207, 239], "start_titl": 47, "start_top": 47, "startstart": 404, "startswith": [52, 104, 239, 310], "startup": 1034, "stat": [2, 45, 47, 49, 104, 113, 173, 175, 194, 273, 276, 284, 288, 302, 328, 336, 337, 381, 393, 397, 418, 482, 601, 604, 605, 607, 608, 609, 613, 614, 615, 618, 691, 692, 813, 821, 823, 921, 922, 959, 999, 1006, 1020, 1048, 1050, 1054], "stat_learn_tut_index": [164, 165, 166], "state": [37, 88, 92, 104, 106, 113, 154, 220, 249, 257, 262, 270, 282, 328, 367, 372, 373, 384, 386, 390, 392, 396, 398, 399, 415, 423, 424, 429, 448, 451, 455, 457, 462, 467, 483, 553, 598, 688, 812, 813, 821, 823, 825, 853, 854, 860, 908, 909, 942, 999, 1000, 1006, 1012, 1015, 1022, 1030, 1034, 1043, 1045, 1047, 1049, 1051, 1054, 1057], "state_to_print": 385, "stateless": [104, 359, 373, 398, 424, 591, 592, 598, 647, 876, 877, 885, 932, 993, 1020, 1057, 1060], "statement": [191, 386, 389, 392, 396, 398, 421], "static": [384, 386, 390, 392, 655, 656, 661, 662, 669, 670, 671, 672], "station": 180, "stationari": [179, 426, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634], "statist": [2, 47, 52, 114, 138, 141, 142, 153, 168, 172, 173, 188, 190, 191, 192, 193, 203, 205, 222, 268, 270, 273, 275, 278, 285, 294, 296, 317, 323, 328, 367, 377, 379, 381, 390, 398, 414, 415, 416, 417, 418, 420, 421, 423, 425, 441, 477, 482, 502, 503, 525, 526, 527, 529, 531, 550, 562, 568, 569, 571, 613, 614, 615, 618, 636, 639, 643, 644, 653, 658, 665, 699, 703, 705, 719, 725, 730, 732, 733, 740, 752, 797, 809, 825, 843, 870, 871, 889, 890, 891, 893, 898, 901, 902, 904, 918, 921, 922, 984, 999, 1000, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1017, 1018, 1020, 1024, 1025, 1026, 1027, 1028, 1031, 1046, 1049, 1052, 1053, 1055, 1056, 1059], "statistician": [398, 893], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 639, "statlearnspars": [730, 732, 733], "statlib": 379, "statnikov": 1010, "statsmodel": [1006, 1029], "statu": [52, 136, 333, 378, 402, 505, 853, 854, 1059], "statweb": [658, 691, 692], "staub": 1047, "staubda": 1044, "std": [43, 50, 51, 52, 72, 81, 85, 89, 96, 101, 112, 114, 115, 125, 126, 127, 145, 147, 148, 154, 159, 181, 184, 186, 187, 191, 199, 206, 227, 249, 274, 275, 276, 278, 279, 281, 284, 286, 290, 291, 323, 339, 350, 359, 367, 398, 416, 420, 423, 524, 615, 618, 838, 893, 904, 1020, 1049, 1053], "std_": [280, 1046], "std_auc": 286, "std_display_styl": [251, 278, 815, 832], "std_error": 164, "std_fit_tim": [144, 299, 809, 823], "std_i": 191, "std_precis": 274, "std_predict": 182, "std_predictions_gpr": 175, "std_recal": 274, "std_scaler": 334, "std_score": [359, 1054], "std_score_tim": [144, 277, 809, 823], "std_test_precis": 274, "std_test_recal": 274, "std_test_scor": [105, 107, 144, 164, 172, 275, 276, 277, 284, 299, 480, 603, 809, 823, 1047, 1054], "std_time": 1047, "std_tpr": 286, "std_train_scor": [809, 823, 1047], "std_y_pr": 180, "stderr": [51, 842], "stdin": 392, "stdout": [47, 124, 226, 842, 862, 870, 871], "stds_california": 187, "stds_diabet": 187, "steadi": [908, 909], "steelblu": [125, 126, 161], "steep": [2, 176, 192, 285, 286, 416, 420, 426, 458, 464], "stef": [636, 1000], "stefan": [1044, 1045, 1049, 1051], "stefani": [0, 1054, 1056, 1057, 1058, 1059, 1060], "stefanini": 1055, "stefano": 1043, "steffen": 1059, "stehl": [1055, 1056], "stein": 1047, "steinbach": [416, 1056, 1058], "steinfurt": [1051, 1053], "steingold": [1048, 1049], "steinlei": [416, 714], "steinley2004": 714, "stella": [416, 460, 470], "stellalin7": 1056, "stem": [141, 149, 193, 217, 267, 420, 424, 1002, 1012], "step": [52, 58, 63, 69, 77, 89, 90, 93, 102, 104, 105, 106, 107, 108, 114, 118, 127, 131, 138, 143, 147, 148, 149, 159, 170, 171, 172, 177, 180, 191, 193, 218, 226, 236, 246, 247, 250, 256, 259, 267, 270, 274, 277, 283, 285, 290, 297, 299, 300, 305, 312, 315, 319, 322, 323, 327, 330, 341, 343, 347, 359, 360, 362, 367, 371, 379, 382, 383, 384, 386, 387, 389, 392, 396, 398, 410, 413, 414, 416, 418, 419, 421, 423, 424, 425, 450, 455, 457, 545, 546, 547, 548, 555, 572, 597, 598, 600, 602, 603, 606, 615, 636, 653, 657, 675, 676, 678, 685, 687, 688, 689, 703, 709, 806, 807, 809, 812, 813, 823, 844, 845, 846, 847, 869, 870, 871, 873, 874, 876, 913, 914, 915, 916, 918, 919, 956, 957, 980, 984, 1000, 1006, 1009, 1014, 1015, 1020, 1024, 1026, 1027, 1029, 1033, 1041, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1057, 1059], "stephan": [717, 1044, 1050, 1051, 1053], "stephani": 1052, "stephen": [1034, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054], "stepwis": [154, 644, 663, 664, 665, 691, 692, 1006], "stern": [797, 1010], "steve": [1043, 1045, 1049, 1054, 1056], "steven": [1043, 1044, 1046, 1048, 1049, 1054, 1056, 1057, 1059], "steward": 1048, "stewart": [1046, 1051, 1054, 1056, 1059], "stick": [48, 806, 1009], "stijn": 1048, "stikhin": 1051, "still": [43, 52, 64, 68, 79, 88, 90, 92, 97, 115, 120, 128, 146, 151, 154, 159, 175, 181, 190, 191, 193, 194, 198, 203, 206, 218, 220, 236, 250, 279, 285, 317, 328, 329, 332, 358, 359, 367, 373, 378, 383, 384, 388, 389, 390, 392, 398, 416, 420, 423, 424, 427, 448, 452, 462, 482, 505, 636, 641, 644, 646, 667, 668, 726, 765, 787, 790, 801, 802, 811, 812, 813, 826, 829, 891, 893, 913, 937, 962, 999, 1000, 1004, 1006, 1009, 1010, 1013, 1016, 1018, 1025, 1026, 1028, 1030, 1033, 1034, 1041, 1043, 1046, 1047, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1059, 1060], "stine": [1049, 1050], "stochast": [2, 46, 93, 149, 150, 153, 165, 188, 196, 197, 205, 240, 242, 245, 250, 303, 305, 306, 311, 314, 329, 346, 416, 421, 423, 470, 496, 505, 511, 512, 513, 523, 531, 545, 553, 568, 569, 613, 636, 640, 648, 667, 668, 677, 681, 683, 685, 686, 687, 688, 696, 697, 698, 699, 701, 839, 862, 869, 870, 871, 874, 883, 917, 956, 957, 983, 999, 1013, 1014, 1016, 1031, 1032, 1035, 1036, 1041, 1042, 1045, 1046, 1048, 1050, 1052], "stochastic_gradi": [1043, 1044, 1050], "stock": [42, 81, 87, 188, 238, 239, 416, 418, 462, 479, 480, 698, 1031], "stogbauer": [616, 617], "stojanov": [1055, 1056], "stolbunov": 1046, "stone": [384, 921, 922, 1026], "stop": [43, 46, 51, 55, 79, 97, 137, 138, 144, 180, 182, 188, 192, 197, 205, 220, 321, 327, 384, 386, 392, 393, 398, 416, 421, 423, 425, 448, 449, 451, 453, 455, 457, 460, 462, 470, 471, 479, 480, 486, 490, 491, 492, 498, 505, 517, 518, 541, 545, 546, 547, 548, 549, 552, 554, 555, 556, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 597, 598, 600, 611, 626, 636, 653, 654, 655, 657, 658, 661, 665, 667, 668, 675, 676, 677, 678, 680, 685, 686, 687, 689, 700, 701, 704, 723, 759, 806, 807, 839, 870, 871, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 963, 983, 999, 1006, 1014, 1015, 1025, 1026, 1030, 1031, 1032, 1034, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058], "stop_n_inli": [680, 1006], "stop_prob": 680, "stop_scor": [680, 1006], "stop_word": [54, 57, 358, 359, 424, 597, 598, 600], "stop_words_": 1059, "stopiter": 1053, "stopword": 497, "storag": [0, 360, 398, 667, 668, 675, 676, 677, 685, 686, 687, 913, 1013, 1025, 1044, 1049], "storch": 1050, "store": [2, 68, 88, 89, 104, 106, 114, 120, 170, 183, 196, 204, 207, 222, 239, 246, 256, 266, 270, 281, 285, 336, 360, 366, 371, 378, 379, 384, 386, 391, 392, 393, 396, 398, 410, 412, 417, 419, 421, 423, 424, 426, 427, 446, 448, 452, 454, 458, 465, 472, 475, 477, 478, 481, 482, 483, 484, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 512, 517, 543, 544, 550, 558, 559, 564, 565, 566, 567, 572, 573, 574, 575, 578, 579, 594, 598, 619, 620, 636, 640, 641, 644, 658, 659, 663, 669, 670, 671, 672, 675, 676, 682, 684, 685, 686, 687, 697, 698, 699, 701, 706, 707, 709, 710, 711, 790, 806, 807, 809, 815, 823, 831, 832, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 868, 884, 891, 893, 894, 908, 909, 910, 939, 940, 966, 967, 980, 983, 995, 1000, 1002, 1006, 1011, 1013, 1022, 1025, 1026, 1029, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "store_cent": [454, 1058], "store_covari": [70, 558, 559, 1046, 1048], "store_cv_result": [270, 682, 684, 831, 1059], "store_cv_valu": [682, 684, 1049, 1052, 1059], "store_precis": [69, 112, 477, 478, 481, 482, 483, 484], "stori": [190, 276, 294, 379, 1009], "stork": 1004, "stott": 1049, "stoyanov": [1049, 1050], "str": [47, 49, 52, 93, 95, 132, 134, 147, 171, 236, 255, 276, 288, 297, 307, 345, 358, 378, 379, 393, 424, 427, 428, 432, 437, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 465, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 626, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 701, 705, 706, 707, 708, 709, 711, 716, 718, 720, 722, 736, 738, 739, 741, 742, 747, 751, 780, 783, 787, 788, 789, 790, 791, 792, 793, 796, 798, 801, 802, 808, 809, 810, 811, 812, 813, 815, 816, 818, 820, 821, 823, 827, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 932, 934, 935, 938, 939, 940, 943, 947, 949, 953, 965, 966, 967, 969, 972, 993, 994, 997, 1056], "str_": [51, 285, 502, 509, 513, 519, 881], "strai": 1015, "straight": [129, 208, 214, 216, 273, 351, 371], "straightforward": [318, 383, 415, 421, 1034], "straka": 1053, "strateg": 399, "strategi": [2, 30, 43, 52, 87, 89, 93, 96, 105, 148, 153, 154, 159, 165, 170, 172, 186, 187, 188, 193, 203, 207, 218, 226, 236, 247, 255, 257, 268, 270, 275, 277, 279, 280, 281, 283, 284, 285, 286, 288, 290, 296, 311, 314, 316, 318, 319, 323, 324, 326, 327, 330, 360, 370, 386, 390, 397, 398, 410, 415, 420, 423, 424, 425, 428, 445, 446, 447, 455, 460, 470, 480, 511, 513, 521, 523, 531, 542, 547, 560, 561, 570, 571, 573, 574, 576, 577, 597, 598, 600, 601, 603, 611, 636, 637, 639, 643, 654, 656, 660, 662, 664, 670, 672, 674, 682, 684, 700, 704, 713, 720, 722, 741, 764, 766, 804, 809, 811, 812, 813, 815, 823, 826, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 870, 871, 878, 883, 894, 908, 913, 915, 918, 921, 922, 923, 924, 980, 999, 1000, 1009, 1011, 1012, 1013, 1014, 1016, 1018, 1020, 1024, 1025, 1026, 1031, 1036, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059], "stratif": [810, 811, 817, 818, 825, 827, 828, 829, 980, 1050], "stratifi": [2, 44, 129, 145, 155, 169, 193, 233, 246, 255, 259, 270, 271, 276, 279, 285, 300, 305, 306, 326, 386, 398, 415, 560, 568, 576, 577, 611, 668, 675, 677, 685, 808, 809, 812, 813, 815, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 847, 862, 870, 980, 1010, 1013, 1046, 1047, 1048, 1050, 1051, 1054], "stratifiedgroupkfold": [2, 271, 1054], "stratifiedkfold": [2, 172, 263, 271, 282, 286, 339, 420, 445, 576, 577, 603, 611, 668, 682, 809, 810, 812, 813, 814, 815, 817, 819, 823, 827, 829, 832, 833, 834, 835, 836, 837, 838, 840, 894, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1054], "stratifiedshufflesplit": [2, 271, 347, 420, 1041, 1042, 1047, 1048, 1054], "stream": [47, 416, 421, 424, 470, 598, 882, 883, 893, 1002, 1049, 1052], "stream_reuters_docu": 47, "streamhandl": 1052, "streamlin": 1006, "street": [159, 173, 381], "strehl": 416, "strength": [51, 159, 182, 206, 218, 222, 277, 326, 371, 419, 423, 454, 576, 577, 652, 657, 658, 661, 667, 668, 678, 681, 682, 683, 684, 685, 687, 689, 696, 792, 870, 871, 913, 914, 918, 919, 999, 1006, 1013, 1016, 1024, 1025], "stress": [699, 703, 1007, 1056], "stress_": 699, "stretch": [242, 265], "stretched_gaussian": 265, "strickland": 1047, "strict": [367, 382, 398, 412, 421, 512, 544, 597, 598, 600, 1006, 1041, 1050, 1053, 1059], "stricter": 186, "strictli": [64, 218, 236, 252, 317, 332, 359, 389, 398, 414, 419, 421, 423, 424, 517, 518, 544, 550, 553, 570, 571, 597, 600, 611, 651, 679, 680, 682, 684, 704, 709, 748, 775, 809, 812, 813, 819, 823, 836, 862, 889, 901, 905, 906, 908, 909, 913, 914, 918, 919, 955, 999, 1001, 1006, 1010, 1020, 1024, 1042, 1052, 1057], "striebel": [1047, 1048], "strife": 1007, "strike": [149, 192, 222], "string": [2, 47, 105, 147, 183, 236, 247, 270, 280, 329, 334, 360, 371, 378, 379, 384, 385, 386, 390, 398, 417, 420, 423, 424, 425, 427, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 497, 498, 505, 514, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 626, 629, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 708, 718, 720, 728, 741, 771, 774, 780, 783, 787, 788, 789, 790, 801, 802, 806, 807, 809, 812, 813, 815, 823, 831, 832, 836, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 930, 937, 939, 940, 948, 949, 950, 973, 993, 994, 999, 1000, 1010, 1023, 1025, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "strip": [54, 236, 359, 371, 378, 379, 505], "strip_acc": [597, 598, 600], "strip_accents_unicod": 1051, "stripe": 320, "stripplot": 191, "strive": [383, 399, 1034], "strong": [32, 43, 52, 89, 175, 188, 190, 191, 197, 211, 215, 216, 222, 223, 224, 251, 296, 324, 354, 414, 421, 423, 533, 658, 681, 1003, 1004, 1006, 1007, 1009, 1017, 1025, 1031], "stronger": [277, 652, 661, 667, 668, 681, 682, 683, 684, 685, 687, 696], "strongest": [55, 211], "strongli": [62, 64, 115, 118, 127, 148, 152, 191, 201, 233, 252, 282, 358, 384, 401, 402, 414, 423, 667, 745, 804, 1006, 1007, 1036, 1050, 1057], "stroudsburg": [910, 1023], "strubel": 1054, "struct": [382, 398, 1044], "structur": [0, 2, 42, 47, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 81, 87, 88, 89, 90, 91, 97, 115, 134, 136, 155, 174, 188, 238, 239, 242, 247, 252, 267, 271, 282, 302, 322, 327, 330, 335, 347, 351, 361, 362, 363, 371, 379, 381, 384, 386, 389, 396, 398, 399, 402, 413, 416, 418, 419, 420, 421, 423, 424, 425, 426, 449, 450, 453, 454, 458, 459, 460, 461, 462, 465, 470, 471, 479, 480, 505, 512, 513, 517, 520, 522, 523, 530, 539, 544, 550, 553, 572, 619, 620, 621, 625, 626, 627, 698, 705, 718, 722, 839, 861, 866, 893, 905, 906, 909, 921, 922, 923, 924, 927, 956, 957, 980, 983, 1007, 1009, 1010, 1013, 1015, 1016, 1020, 1023, 1026, 1029, 1030, 1031, 1041, 1042, 1044, 1045, 1047, 1051], "struggl": [383, 399, 416], "stuck": [96, 701, 1007], "student": [0, 126, 276, 1007, 1030, 1034], "studi": [43, 64, 95, 151, 218, 236, 279, 282, 283, 290, 358, 379, 381, 420, 425, 705, 717, 767, 768, 838, 1008, 1010, 1024], "studio": [382, 1034], "study_135": 378, "study_14": 378, "study_34": 378, "study_98": 378, "study_99": 378, "stuff": 1034, "stump": [140, 423, 568, 1052], "stupp": [1047, 1048], "stupperich": 1053, "sturla": 1043, "style": [114, 151, 207, 226, 236, 280, 384, 391, 416, 424, 451, 455, 467, 709, 815, 832, 939, 940, 953, 1041, 1044, 1055], "st\u00e9fan": 385, "st\u00e9phan": 1051, "st\u00e9phane": [1050, 1051, 1055, 1056], "su": [730, 732, 733], "sub": [47, 72, 83, 88, 90, 92, 95, 104, 133, 252, 254, 261, 328, 336, 337, 344, 347, 355, 379, 384, 386, 390, 398, 417, 423, 424, 445, 451, 452, 455, 457, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 597, 599, 600, 606, 619, 620, 636, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 872, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 930, 967, 1006, 1010, 1024, 1051, 1055, 1057, 1058], "sub_sampl": 545, "subclass": [136, 386, 426, 583, 975, 1046, 1049, 1054, 1058], "subclust": [416, 450], "subcluster_centers_": [77, 450], "subcluster_labels_": 450, "subcompon": [124, 421], "subdirectori": 384, "subdivid": [379, 426], "subestim": 386, "subestimator__c": 386, "subestimator__class_weight": 386, "subestimator__du": 386, "subestimator__fit_intercept": 386, "subestimator__intercept_sc": 386, "subestimator__l1_ratio": 386, "subestimator__max_it": 386, "subestimator__multi_class": 386, "subestimator__n_job": 386, "subestimator__penalti": 386, "subestimator__random_st": 386, "subestimator__solv": 386, "subestimator__tol": 386, "subestimator__verbos": 386, "subestimator__warm_start": 386, "subexpress": 52, "subfold": [2, 382, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 512, 1054], "subgraph": 413, "subhash": 1055, "subhodeep": [1041, 1042, 1043], "subi": [1050, 1051, 1056], "subject": [16, 104, 156, 267, 279, 358, 379, 384, 386, 388, 396, 398, 399, 414, 418, 420, 421, 504, 667, 668, 694, 831, 876, 932, 979, 1001, 1006, 1025, 1028, 1050, 1051, 1054, 1056], "subject_body_extractor": 104, "subject_body_transform": 104, "subjectbodi": 104, "subjectbodyextractor": 104, "sublinear": [421, 599, 600], "sublinear_tf": [358, 421, 424, 599, 600], "submatric": 413, "submatrix": [413, 431, 459, 461], "submiss": 384, "submit": [381, 382, 383, 386, 387, 388, 389, 392, 398, 399, 402], "submitt": 383, "submodel": 420, "submodul": [388, 1002, 1008, 1041], "subobject": [430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 812, 813, 823, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924], "suboptim": [420, 709, 711, 791, 798, 1013, 1049, 1057], "subpackag": [384, 388, 1045, 1050], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 85, 86, 88, 89, 90, 91, 92, 95, 97, 100, 101, 107, 109, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 129, 133, 134, 138, 140, 141, 143, 144, 145, 147, 148, 149, 152, 154, 156, 157, 159, 160, 161, 168, 177, 179, 184, 186, 187, 191, 192, 194, 196, 199, 202, 209, 210, 212, 213, 216, 217, 218, 219, 220, 222, 226, 231, 232, 234, 236, 238, 239, 242, 243, 245, 246, 248, 250, 251, 253, 254, 255, 256, 261, 262, 263, 264, 266, 267, 270, 271, 272, 273, 276, 278, 279, 281, 282, 283, 285, 286, 287, 289, 290, 291, 296, 297, 299, 300, 301, 302, 305, 306, 308, 309, 310, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 330, 331, 339, 341, 344, 345, 346, 347, 351, 353, 354, 355, 356, 358, 359, 360, 362, 363, 391], "subplot_kw": [238, 301], "subplot_spec": 391, "subplot_titl": 144, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 80, 85, 86, 89, 97, 99, 113, 115, 121, 122, 126, 127, 133, 140, 141, 159, 191, 217, 218, 233, 236, 245, 253, 261, 263, 264, 267, 271, 287, 289, 302, 310, 312, 315, 319, 328, 337, 344, 347], "subpopul": [235, 688, 1006], "subproblem": 1046, "subrahmanyam": [1041, 1044], "subramaniam": [1056, 1057, 1058], "subramaniyan": 1053, "subramanyam": 1048, "subrat": 1053, "subrat93": 1053, "subsampl": [133, 150, 153, 192, 235, 272, 324, 328, 466, 568, 569, 570, 571, 572, 641, 688, 710, 812, 813, 839, 878, 890, 902, 935, 945, 1002, 1006, 1030, 1041, 1051, 1055, 1057, 1058, 1059], "subscrib": 1039, "subscript": [372, 1054], "subsect": [25, 372, 384], "subsequ": [46, 68, 93, 109, 127, 138, 170, 205, 220, 278, 281, 297, 299, 347, 367, 384, 386, 388, 390, 398, 412, 416, 417, 423, 426, 445, 505, 517, 562, 563, 568, 570, 571, 675, 677, 685, 812, 813, 841, 842, 845, 848, 849, 850, 851, 852, 870, 888, 892, 1000, 1009, 1011, 1050, 1051, 1055, 1057, 1059], "subset": [2, 46, 57, 58, 63, 64, 68, 104, 105, 113, 114, 145, 147, 148, 149, 164, 170, 173, 192, 194, 207, 219, 233, 234, 235, 236, 248, 250, 254, 255, 270, 274, 277, 279, 285, 286, 288, 294, 322, 323, 328, 336, 340, 358, 359, 360, 367, 379, 384, 392, 396, 398, 413, 414, 416, 417, 420, 423, 424, 426, 433, 445, 457, 472, 474, 475, 477, 496, 497, 501, 502, 506, 517, 558, 559, 560, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 611, 619, 638, 648, 649, 650, 651, 660, 664, 667, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 706, 712, 713, 720, 722, 725, 727, 740, 743, 764, 766, 802, 805, 808, 811, 831, 837, 839, 841, 842, 843, 844, 848, 849, 850, 851, 852, 855, 860, 863, 870, 879, 908, 909, 913, 915, 918, 921, 923, 935, 978, 999, 1006, 1010, 1011, 1021, 1023, 1025, 1026, 1044, 1049, 1050, 1052, 1054, 1059, 1060], "subset_featur": 105, "subset_label": 236, "subset_mask": 292, "subsidi": 191, "subspac": [131, 419, 423, 460, 524, 564, 565, 700, 704, 957, 1004, 1013, 1016, 1022, 1034], "substanti": [164, 299, 303, 304, 318, 384, 859, 1016, 1045, 1048], "substitut": [407, 993, 1030, 1047], "subtl": [356, 367, 1009, 1030], "subtleti": 1036, "subtract": [180, 191, 255, 419, 421, 451, 455, 467, 543, 653, 654, 1048, 1058], "subtre": [566, 567, 568, 569, 573, 574, 921, 922, 923, 924, 1026], "subwindow": 1026, "succe": [131, 154, 203, 290], "succeed": 384, "success": [2, 85, 168, 188, 268, 280, 283, 284, 353, 367, 411, 416, 420, 421, 423, 524, 573, 588, 809, 812, 813, 830, 918, 1013, 1031, 1034, 1036, 1053], "successfulli": [43, 53, 321, 383, 388, 410, 416, 424, 1024], "successor": [458, 464, 1026, 1029], "suchak": 1054, "sudo": [382, 402], "suen": 1014, "suffer": [118, 146, 193, 297, 317, 359, 371, 416, 423, 553, 772, 1005, 1006, 1010, 1013, 1050], "suffic": [92, 93, 386], "suffici": [2, 64, 90, 159, 226, 291, 347, 371, 398, 416, 425, 541, 666, 691, 692, 825, 828, 829, 1011, 1013, 1030, 1050, 1056, 1057], "suffix": [402, 836, 1010, 1051], "suganthan": 381, "sugar": [173, 381], "suggest": [113, 127, 141, 145, 191, 194, 276, 347, 371, 383, 384, 391, 398, 420, 421, 423, 477, 482, 574, 654, 838, 1004, 1006, 1007, 1015, 1018, 1025, 1045, 1052, 1055, 1058], "suh": 1049, "suha": 1059, "suit": [58, 124, 157, 191, 218, 219, 245, 266, 329, 330, 332, 358, 372, 384, 386, 389, 390, 392, 402, 404, 410, 419, 421, 423, 458, 460, 512, 686, 850, 894, 951, 999, 1002, 1007, 1010, 1012, 1013, 1024, 1029, 1030, 1034, 1048, 1055], "suitabl": [142, 151, 203, 204, 222, 313, 360, 378, 379, 390, 393, 410, 416, 421, 424, 460, 470, 476, 495, 514, 517, 636, 644, 848, 849, 852, 887, 888, 911, 974, 978, 1004, 1006, 1009, 1020, 1022, 1024, 1029, 1055, 1056], "sullivan": [1044, 1045, 1046], "sultan": 1055, "sum": [2, 30, 47, 55, 57, 63, 96, 114, 122, 127, 133, 150, 151, 169, 173, 183, 191, 200, 214, 218, 222, 233, 236, 239, 241, 255, 270, 285, 297, 304, 307, 330, 334, 340, 351, 352, 354, 358, 359, 360, 366, 381, 390, 398, 413, 414, 416, 418, 419, 421, 422, 423, 424, 426, 439, 450, 451, 455, 457, 467, 472, 473, 490, 491, 492, 524, 529, 532, 540, 543, 545, 546, 550, 553, 554, 555, 558, 559, 561, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 599, 600, 620, 622, 632, 634, 644, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 685, 686, 687, 688, 690, 693, 699, 703, 705, 708, 718, 719, 728, 735, 750, 765, 767, 768, 772, 797, 841, 842, 846, 847, 856, 860, 864, 871, 872, 892, 893, 913, 914, 916, 919, 921, 922, 923, 924, 959, 984, 990, 995, 1006, 1010, 1011, 1012, 1013, 1025, 1026, 1044, 1045, 1047, 1049, 1050, 1052, 1057, 1058], "sum_": [276, 285, 354, 413, 414, 416, 421, 422, 423, 547, 549, 556, 705, 764, 1004, 1006, 1007, 1010, 1012, 1014, 1015, 1017, 1018, 1020, 1024, 1025, 1026], "sum_gradi": 423, "sum_h": 1015, "sum_hessian": 423, "sum_i": [329, 423, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 1001, 1002, 1006, 1008, 1010, 1015], "sum_j": [655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 1006, 1010, 1015], "sum_k": [423, 558, 1026], "sum_m": 423, "sum_n": [283, 716, 1010], "sum_n_compon": [472, 872], "sum_over_featur": [1041, 1056], "sum_weight": 990, "sumit": 1055, "summar": [218, 267, 283, 285, 360, 384, 386, 401, 423, 530, 667, 703, 715, 716, 1006, 1007, 1010, 1016, 1036], "summari": [52, 173, 330, 366, 367, 381, 396, 570, 571, 701, 722, 797, 926, 1008, 1011, 1029, 1060], "summaris": [247, 327], "summat": [1012, 1014], "summer": [0, 43, 52, 83, 180, 1041], "sun": [43, 154, 192, 1049, 1054, 1055], "sundai": 43, "sundaramahalingam": 1058, "sung": 1052, "sunglok": 1006, "sunita": 792, "sunitha": 1053, "sunmi": 1052, "super": [57, 62, 64, 386, 424, 1049], "superflu": 421, "superimpos": 421, "superior": 423, "superposit": 203, "supersed": [383, 1046], "superset": [420, 830, 1010], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 84, 89, 93, 118, 132, 143, 154, 166, 177, 239, 250, 253, 263, 276, 306, 328, 339, 344, 347, 351, 359, 360, 371, 379, 386, 397, 398, 414, 416, 419, 420, 421, 423, 424, 426, 445, 447, 472, 496, 512, 513, 562, 597, 599, 602, 603, 643, 685, 738, 810, 811, 814, 816, 817, 818, 819, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 838, 839, 862, 872, 873, 877, 887, 894, 908, 909, 910, 918, 1004, 1007, 1010, 1012, 1013, 1016, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1036, 1041, 1047, 1053], "supervised_learning_tut": [165, 166], "supp": 392, "suppli": [154, 396, 416, 655, 939, 940, 1013, 1034, 1045, 1047, 1049, 1054], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 81, 104, 105, 106, 137, 142, 158, 159, 169, 170, 180, 192, 219, 228, 229, 230, 236, 250, 251, 252, 258, 269, 274, 281, 283, 294, 297, 315, 317, 321, 330, 334, 336, 337, 340, 341, 343, 344, 347, 348, 349, 350, 351, 352, 354, 371, 372, 373, 378, 382, 384, 386, 388, 389, 390, 391, 393, 394, 397, 398, 399, 410, 416, 420, 421, 424, 425, 426, 445, 448, 458, 460, 461, 472, 474, 475, 477, 482, 495, 505, 521, 547, 549, 550, 553, 556, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 622, 623, 624, 626, 628, 629, 631, 632, 634, 636, 640, 641, 642, 652, 654, 666, 667, 668, 679, 680, 681, 683, 684, 685, 686, 687, 696, 699, 703, 708, 716, 722, 738, 739, 747, 752, 787, 788, 789, 792, 793, 796, 797, 809, 812, 813, 815, 823, 831, 836, 837, 845, 846, 851, 853, 854, 857, 859, 865, 873, 874, 878, 884, 886, 887, 889, 893, 901, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 945, 951, 952, 997, 999, 1000, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1024, 1029, 1030, 1031, 1032, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "support_": [251, 353, 477, 482, 602, 603, 611, 915, 916, 917, 918, 919, 1025], "support_fract": [48, 477, 482], "support_reweight": [477, 482], "support_vector": [345, 351], "support_vector_indic": 345, "support_vectors_": [46, 49, 348, 351, 352, 915, 916, 917, 918, 919, 1025], "suppos": [252, 279, 336, 371, 372, 384, 386, 388, 390, 418, 423, 424, 425, 566, 570, 573, 667, 668, 675, 677, 683, 684, 685, 751, 859, 913, 915, 918, 921, 923, 945, 1014, 1050, 1052, 1058], "suppress": [191, 371, 392, 701, 1013, 1048], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 85, 88, 92, 95, 102, 109, 124, 127, 134, 138, 147, 148, 156, 159, 184, 191, 192, 194, 212, 217, 233, 234, 238, 239, 240, 254, 264, 270, 272, 290, 315, 317, 319, 326, 328, 336, 337, 341, 353, 354, 363], "surac": 1051, "sure": [2, 63, 91, 211, 224, 252, 253, 270, 367, 371, 372, 378, 382, 383, 384, 385, 386, 388, 389, 392, 396, 402, 414, 417, 424, 502, 532, 658, 939, 940, 951, 962, 995, 1000, 1007, 1024, 1029, 1030, 1048, 1049, 1051, 1056], "suresh": 1055, "surf": 192, "surfac": [67, 128, 137, 138, 139, 140, 142, 160, 188, 202, 210, 227, 282, 300, 343, 344, 361, 362, 364, 365, 366, 423, 513, 562, 566, 573, 640, 773, 921, 927, 1004, 1009, 1024, 1025, 1026, 1031], "surface_": 640, "surgan12": 1050, "surpass": [138, 351, 870, 871], "surplu": 420, "surpris": [88, 192, 382, 1006, 1029, 1043], "surprisingli": [236, 379, 424], "surrend": 57, "surrog": 1034, "surround": [253, 384, 859, 1016], "survei": [191, 419], "surviv": [105, 193, 999, 1029], "surya": [1054, 1055], "suscept": 410, "susik": 1045, "suspect": 43, "suspici": 379, "sustain": 0, "sutherland": [1043, 1045, 1046, 1048, 1049, 1050, 1051], "sutiono": 1052, "suzuki": [1052, 1053], "sv": 1025, "sv_ind": 251, "sv_ratio": 251, "svc": [2, 45, 62, 64, 66, 67, 68, 104, 108, 149, 160, 166, 176, 188, 196, 209, 222, 250, 253, 257, 269, 274, 276, 278, 281, 282, 283, 286, 287, 292, 319, 322, 326, 328, 339, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 355, 356, 358, 371, 386, 390, 398, 414, 417, 420, 423, 442, 443, 444, 445, 476, 524, 564, 706, 707, 709, 711, 809, 826, 840, 842, 873, 910, 911, 913, 915, 916, 919, 997, 999, 1005, 1008, 1010, 1011, 1020, 1031, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059], "svc__c": [319, 873], "svc_disp": [258, 326, 1038], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 258, "svcsvc": [257, 274, 276, 328], "svd": [2, 70, 131, 157, 239, 359, 393, 412, 419, 428, 459, 461, 490, 491, 493, 530, 541, 542, 543, 544, 548, 549, 550, 553, 555, 558, 559, 673, 681, 682, 683, 694, 695, 696, 872, 957, 1004, 1043, 1047, 1048, 1054, 1056, 1059], "svd__n_compon": 872, "svd_lapack_driv": 957, "svd_method": [57, 459, 461, 541, 1044], "svd_solver": [45, 104, 124, 131, 333, 334, 412, 421, 544, 550, 1047, 1059], "sven": [1055, 1056], "svg": [0, 404], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 104, 106, 108, 124, 147, 157, 160, 163, 165, 167, 172, 173, 177, 179, 188, 197, 200, 202, 210, 211, 228, 229, 230, 231, 245, 251, 253, 254, 257, 258, 269, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 286, 287, 291, 292, 303, 308, 309, 312, 314, 319, 320, 326, 328, 335, 339, 340, 342, 345, 353, 354, 358, 371, 379, 386, 390, 398, 417, 420, 421, 423, 425, 442, 443, 444, 445, 503, 513, 521, 524, 550, 564, 565, 572, 576, 577, 586, 602, 603, 608, 609, 614, 640, 648, 652, 677, 685, 686, 687, 698, 706, 707, 709, 711, 722, 744, 751, 770, 809, 823, 829, 835, 836, 839, 841, 842, 859, 873, 874, 886, 888, 893, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 997, 999, 1002, 1005, 1007, 1008, 1010, 1011, 1015, 1023, 1025, 1027, 1031, 1032, 1036, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "svm1": 417, "svm2": 417, "svm__c": 108, "svm_weight": 169, "svm_weights_select": 169, "svmlight": [2, 377, 495, 517, 518, 1036, 1041, 1042, 1048, 1050], "svmlight_file_test": 518, "svmlight_file_train": 518, "svmsgd": 1024, "svr": [2, 46, 49, 188, 244, 326, 342, 371, 404, 442, 443, 444, 565, 576, 577, 602, 603, 652, 687, 809, 815, 914, 916, 918, 1003, 1031, 1041, 1043, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1059], "svr_fit": 251, "svr_lin": 353, "svr_poli": 353, "svr_predict": 251, "svr_rbf": 353, "sw": 297, "sw_test": [61, 327], "sw_train": [61, 327], "swap": [2, 416, 421, 725, 745, 988, 989, 1041], "swapnil": 1055, "swart": 55, "sweep": 869, "swier": [1052, 1053], "swiss": [2, 102, 188, 237, 238, 243, 416, 539, 701, 702, 1031, 1055], "switch": [370, 687, 713, 726, 746, 764, 766, 804, 853, 854, 956, 957, 1010, 1013, 1036, 1041], "swpeas": 1054, "swu": 1045, "sy": [47, 51, 57, 226, 249, 297, 340, 360, 379, 396, 626], "syd": 1056, "sydnei": 0, "syhw": [1042, 1043], "sylvain": [0, 374, 1045, 1050, 1051, 1052, 1053, 1054, 1055], "sylvainlan": [1049, 1050, 1051, 1052, 1053], "symbol": [51, 360, 372, 386, 390, 418, 424, 508, 591, 597, 598, 600, 925, 927, 1029], "symbol_dict": 51, "symlink": 388, "symlognorm": [198, 203], "symmetr": [2, 79, 151, 184, 194, 220, 398, 414, 416, 460, 470, 471, 482, 528, 536, 538, 699, 703, 704, 713, 714, 724, 725, 726, 731, 733, 737, 745, 746, 764, 766, 772, 794, 804, 806, 807, 995, 999, 1006, 1010, 1013, 1057], "symmetri": [173, 381, 708, 886, 889, 901, 1008], "symmetric_arrai": 995, "symposium": [173, 381, 416, 468], "symptomat": 270, "synchron": [384, 424], "syndrom": 378, "synonym": [398, 855, 856, 857, 863, 864, 865], "synonymi": 421, "syntax": [372, 384, 389, 392, 417, 476, 872, 873, 911, 999, 1052, 1054], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 84, 145, 151, 157, 175, 180, 182, 192, 208, 220, 235, 312, 319, 354, 367, 371, 377, 387, 399, 416, 418, 425, 667, 668, 913, 914, 920, 1004, 1047], "synthetic_feature_weight": [667, 668], "syonekura": 1049, "system": [44, 129, 203, 276, 283, 334, 367, 371, 372, 373, 379, 381, 384, 385, 386, 387, 392, 396, 402, 410, 416, 421, 423, 427, 452, 479, 480, 486, 544, 548, 552, 559, 648, 654, 659, 660, 663, 664, 665, 691, 692, 735, 765, 778, 806, 862, 908, 909, 1006, 1010, 1013, 1022, 1029, 1030, 1034, 1041, 1049, 1050], "systemat": [43, 154, 276, 721, 737, 929, 931, 1010, 1056], "sysuresh": 1055, "szabo": [1043, 1044], "szepieniec": 1047, "szlam": [421, 956, 957], "szpak": [1048, 1051], "szyma\u0144ski": [1049, 1050], "s\u00e1nchez": 1053, "s\u00e3o": 1059, "s\u00e4ger": [1044, 1047], "s\u00e9bastien": [1034, 1047, 1049], "s\u00e9rgio": 1060, "s\u00f6nke": 1051, "s\u00f8ren": 1058, "s\u0142apek": 1052, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 87, 89, 93, 104, 106, 111, 112, 113, 115, 117, 122, 125, 126, 131, 133, 134, 138, 141, 142, 150, 151, 152, 153, 154, 158, 159, 173, 176, 178, 179, 180, 183, 184, 188, 191, 192, 193, 194, 198, 200, 203, 212, 215, 216, 217, 218, 219, 236, 237, 239, 240, 241, 242, 252, 253, 262, 265, 267, 270, 275, 276, 290, 296, 297, 310, 314, 326, 329, 330, 332, 336, 337, 339, 343, 344, 347, 348, 352, 358, 359, 360, 365, 366, 367, 371, 372, 378, 379, 381, 384, 386, 388, 390, 392, 397, 398, 402, 407, 410, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 429, 433, 436, 439, 441, 445, 455, 456, 458, 464, 471, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 504, 505, 522, 523, 524, 528, 529, 534, 539, 541, 543, 550, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 599, 600, 603, 616, 617, 619, 620, 636, 637, 639, 640, 641, 642, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 704, 705, 713, 719, 725, 726, 735, 745, 746, 764, 765, 766, 776, 797, 798, 803, 804, 808, 809, 812, 813, 823, 831, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 859, 860, 863, 864, 869, 870, 871, 879, 882, 883, 884, 886, 887, 893, 894, 906, 908, 909, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 932, 957, 958, 973, 999, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1024, 1025, 1026, 1031, 1035, 1036, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 81, 83, 85, 87, 93, 97, 99, 127, 203, 204, 233, 234, 235, 240, 243, 245, 249, 251, 277, 333, 358, 359, 360, 685, 686, 687], "t1": [79, 81, 97, 233, 240, 243, 245], "t15h": 1048, "t_": [675, 676, 677, 685, 686, 687, 870, 871, 1024], "t_0": 1024, "t_batch": 99, "t_i": 1012, "t_k": [423, 1010, 1026], "t_m": 1026, "t_mini_batch": [77, 99], "t_p": 283, "t_post": 276, "t_sne": [238, 1049], "t_stat": 276, "t_stat_uncorrect": 276, "t_t": 1026, "taa": 183, "taac": 183, "tab": [46, 48, 70, 88, 113, 138, 154, 156, 159, 175, 180, 182, 205, 207, 270, 327, 333, 417, 1048], "tab10": [250, 266], "tab20b": 43, "taba": 1060, "tabea": [1056, 1057], "tabibian": 1047, "tabl": [93, 236, 276, 384, 385, 393, 416, 424, 591, 667, 689, 809, 823, 850, 974, 1006, 1010, 1011, 1016, 1029, 1042], "tabular": [43, 52, 192, 386, 423, 1018, 1029], "tacit": 398, "tacitli": 1043, "tackl": [152, 276, 372, 384, 416, 850, 1012, 1034], "tadej": [1042, 1043], "tae": 1053, "taehoon": [1048, 1049], "taemin": 1006, "tag": [2, 47, 84, 105, 245, 338, 378, 383, 387, 388, 392, 396, 398, 412, 424, 433, 439, 505, 841, 929, 930, 931, 933, 934, 946, 962, 993, 998, 1030, 1033, 1046, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1060], "tahar": 1048, "tahiri": 1053, "taifi": 1047, "tail": [52, 151, 187, 191, 218, 220, 276, 317, 530, 533, 1006], "tail_strength": [334, 530, 533], "takanori": 1049, "take": [2, 44, 47, 52, 58, 66, 81, 88, 90, 92, 101, 109, 113, 122, 124, 138, 147, 175, 177, 180, 184, 191, 196, 202, 222, 226, 227, 242, 252, 263, 264, 270, 271, 277, 281, 285, 286, 296, 297, 300, 303, 304, 305, 307, 308, 317, 330, 334, 339, 343, 344, 347, 356, 359, 360, 363, 371, 372, 373, 378, 379, 382, 384, 386, 389, 390, 391, 392, 396, 398, 399, 407, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 428, 445, 451, 454, 455, 457, 458, 460, 465, 466, 467, 469, 471, 477, 528, 542, 547, 548, 549, 555, 556, 590, 601, 604, 605, 607, 608, 609, 619, 620, 625, 629, 630, 633, 641, 652, 658, 680, 682, 683, 684, 685, 688, 700, 701, 708, 714, 716, 718, 728, 738, 739, 747, 751, 752, 765, 780, 783, 787, 788, 789, 790, 792, 793, 796, 797, 809, 810, 814, 815, 823, 827, 837, 855, 856, 857, 859, 861, 862, 863, 864, 865, 877, 887, 908, 909, 913, 914, 915, 916, 917, 918, 919, 943, 979, 999, 1002, 1006, 1007, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1020, 1025, 1026, 1034, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060], "takeawai": 296, "taken": [37, 43, 46, 67, 77, 88, 90, 153, 173, 180, 191, 249, 250, 264, 282, 294, 319, 379, 381, 383, 384, 388, 398, 416, 420, 424, 428, 448, 542, 570, 571, 592, 593, 655, 656, 659, 661, 662, 663, 667, 668, 669, 670, 671, 672, 686, 688, 690, 693, 704, 886, 887, 907, 910, 916, 917, 968, 1010, 1012, 1020, 1022, 1047, 1050, 1053, 1054], "takeshi": [1049, 1054, 1055, 1056], "takeuchi": 379, "takingitcasu": [1049, 1050], "talbot": 281, "talgatomarov": 1052, "talk": [57, 104, 277, 358, 359, 360, 379, 398, 410, 1034, 1036], "talli": 422, "tallott": 1049, "talwalkar": 999, "tamara": [379, 1058, 1060], "tamer": 1056, "tami": 93, "tamir": [1052, 1055], "tamirlan1": 1052, "tamper": 47, "tampermonkei": 392, "tan": [870, 871, 1014, 1048], "tandfonlin": 416, "tang": [381, 1051, 1052, 1053], "tangent": [238, 351, 698, 702, 1008, 1035, 1036], "tanh": [351, 786, 870, 871, 1008, 1025], "tanjina": 1058, "tann": [1049, 1054], "tao": [1057, 1058], "tar": [47, 388], "taranjeet": 1047, "tarashanski": 1058, "tarbal": [388, 1056], "tarcusx": 1049, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 80, 87, 103, 105, 107, 108, 118, 120, 128, 130, 132, 139, 146, 147, 148, 149, 151, 152, 154, 156, 158, 159, 160, 162, 166, 168, 171, 173, 175, 177, 180, 181, 187, 188, 190, 191, 192, 193, 198, 202, 203, 211, 214, 218, 220, 222, 223, 226, 227, 239, 246, 248, 249, 250, 251, 254, 255, 256, 263, 269, 270, 272, 274, 277, 279, 281, 282, 285, 286, 290, 294, 296, 297, 300, 305, 308, 309, 313, 316, 317, 327, 328, 330, 332, 336, 337, 340, 341, 343, 344, 347, 351, 353, 358, 359, 363, 364, 365, 366, 367, 371, 373, 376, 377, 378, 379, 380, 381, 384, 386, 388, 389, 392, 393, 397, 401, 410, 416, 419, 420, 423, 426, 440, 445, 446, 447, 450, 453, 472, 473, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 517, 519, 529, 533, 540, 541, 543, 545, 546, 548, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 582, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 636, 637, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 706, 707, 709, 710, 711, 716, 717, 718, 721, 722, 727, 729, 730, 732, 733, 735, 736, 737, 738, 739, 744, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 791, 792, 793, 794, 796, 797, 798, 799, 800, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 860, 862, 863, 864, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 897, 902, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 939, 971, 972, 973, 998, 1001, 1002, 1003, 1006, 1007, 1010, 1014, 1017, 1018, 1024, 1025, 1026, 1030, 1031, 1033, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "target_class": 322, "target_column": [497, 498, 505], "target_encod": 324, "target_filenam": [510, 514], "target_gener": 181, "target_idx": 641, "target_mean_": [894, 1020], "target_nam": [45, 57, 66, 87, 120, 128, 132, 190, 227, 239, 263, 269, 277, 285, 286, 300, 323, 340, 358, 363, 377, 379, 496, 497, 499, 501, 502, 503, 505, 506, 509, 511, 512, 513, 514, 519, 722, 1010, 1026, 1051], "target_opset": 410, "target_tag": [386, 932, 946], "target_test": [270, 518], "target_train": [270, 518], "target_typ": [323, 894, 943, 972, 1058], "target_type_": 894, "targetencod": [2, 323, 324, 398, 886, 887, 1000, 1020, 1029, 1057, 1058], "targetencodertargetencod": 323, "targets_test": 250, "targets_train": 250, "targettag": [2, 932], "tari": 93, "tashai": [1049, 1050], "task": [2, 38, 43, 46, 127, 145, 146, 152, 154, 172, 183, 188, 197, 203, 204, 207, 217, 218, 234, 238, 255, 270, 273, 290, 296, 351, 360, 371, 373, 379, 381, 383, 384, 389, 390, 393, 396, 397, 398, 421, 423, 424, 425, 426, 456, 469, 502, 514, 524, 601, 604, 605, 607, 608, 609, 613, 614, 615, 618, 641, 642, 655, 656, 661, 662, 669, 670, 671, 672, 683, 690, 693, 736, 738, 739, 763, 791, 793, 796, 798, 810, 814, 827, 833, 975, 976, 1007, 1010, 1011, 1012, 1013, 1021, 1023, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1041, 1046, 1050, 1056], "tast": 1041, "tata": 1058, "tau": 1020, "tau_0": 545, "tavenard": 1053, "tax": 0, "taxonom": 381, "taylor": [423, 1049, 1051, 1052, 1055], "tb": 392, "tc": [173, 381, 399], "tcg": 183, "tch": [173, 381], "tcompl": 93, "tcpdump": 379, "tda": 1029, "teach": 384, "teacher": 104, "teal": [219, 228, 283], "team": [379, 387, 396, 398, 399, 1029, 1034, 1041], "teas": 191, "tech": [51, 381, 851], "technic": [183, 191, 219, 239, 330, 379, 381, 384, 398, 423, 661, 673, 694, 695, 908, 999, 1006, 1007, 1013], "technion": [673, 694, 695, 1006], "techniqu": [11, 26, 51, 56, 104, 106, 126, 134, 139, 149, 165, 172, 173, 187, 188, 190, 226, 240, 242, 281, 294, 301, 329, 337, 351, 362, 373, 381, 396, 398, 410, 414, 416, 420, 421, 422, 423, 424, 425, 455, 456, 457, 458, 543, 563, 686, 698, 699, 702, 703, 735, 765, 1002, 1006, 1007, 1009, 1010, 1013, 1016, 1018, 1022, 1024, 1026, 1030, 1034, 1054], "technolog": 381, "technologi": [173, 381, 416, 1029, 1034], "technometr": [381, 418, 477, 482, 1016], "tediou": [159, 270], "teen": 1020, "teevan": [850, 1012], "teh": [869, 1015], "tejesh95": 1045, "telecom": 1034, "telenczuk": [173, 1050, 1053, 1054, 1056], "tell": [175, 191, 192, 252, 276, 347, 352, 372, 379, 416, 424, 572, 588, 999, 1004, 1017], "temp": [43, 192], "temp_fold": 975, "temperatur": [192, 424, 1017], "tempfil": [89, 299, 326, 417, 1013], "templat": [384, 388, 389, 398, 399, 566, 567, 572, 573, 574, 575, 1029], "templateclassifi": 386, "tempor": [52, 154, 203, 1029, 1030], "temporari": [89, 104, 106, 371, 476, 696, 790, 911, 1013, 1044, 1045, 1048, 1054, 1055], "temporarili": [416, 1046], "temporarydirectori": [299, 326], "tempt": 191, "temptat": [367, 384], "ten": [54, 57, 138, 144, 154, 173, 239, 267, 379, 381, 423, 529, 918, 1050], "tenavi": 1055, "tend": [43, 51, 64, 72, 74, 78, 87, 90, 92, 171, 173, 191, 192, 207, 218, 223, 236, 255, 261, 264, 273, 277, 296, 315, 351, 360, 371, 373, 384, 386, 398, 414, 416, 418, 421, 423, 425, 445, 456, 662, 859, 890, 902, 957, 1006, 1007, 1013, 1026], "tendenc": [154, 243, 1006, 1007, 1009, 1012, 1015], "tenenbaum": [697, 1007], "tenenhau": 381, "tensor": [2, 196, 376, 412, 421, 547, 549, 556, 648, 649, 650, 1036, 1053, 1059], "tensorflow": [45, 396], "tensorsketch": 1002, "tent": 390, "tenur": 1034, "teon": 1053, "terenc": [1053, 1054], "term": [2, 43, 53, 54, 62, 68, 93, 129, 141, 144, 148, 151, 180, 190, 203, 205, 206, 207, 218, 220, 222, 232, 235, 236, 255, 270, 274, 278, 297, 312, 329, 351, 354, 358, 360, 373, 384, 386, 396, 414, 416, 418, 420, 421, 423, 451, 455, 457, 460, 467, 470, 533, 544, 547, 549, 553, 556, 558, 597, 598, 599, 600, 613, 616, 617, 641, 642, 649, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 683, 684, 685, 687, 689, 696, 704, 739, 747, 792, 793, 796, 870, 871, 888, 892, 895, 913, 914, 915, 916, 917, 918, 919, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1014, 1015, 1020, 1024, 1025, 1049, 1055, 1056, 1057], "term1": 424, "term2": 424, "term3": 424, "termin": [372, 389, 390, 392, 402, 416, 430, 456, 469, 562, 563, 567, 568, 569, 572, 574, 675, 676, 677, 685, 687, 870, 871, 922, 924, 1016, 1026], "terminalipythonapp": 390, "terminalpdb": 392, "termination_condition_": 910, "terminologi": [398, 1049], "terraza": 1053, "terri": 1045, "terrycojon": 1045, "tesson": 416, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 89, 104, 105, 117, 129, 138, 141, 143, 144, 145, 146, 150, 151, 152, 153, 154, 164, 166, 167, 169, 172, 175, 176, 188, 190, 191, 192, 193, 194, 196, 203, 207, 213, 214, 217, 218, 219, 220, 222, 225, 226, 233, 234, 236, 242, 246, 251, 252, 254, 263, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 281, 283, 284, 286, 287, 288, 290, 296, 300, 305, 306, 312, 314, 319, 321, 322, 323, 324, 333, 340, 347, 354, 360, 367, 371, 372, 378, 379, 381, 387, 388, 389, 390, 396, 397, 398, 401, 402, 409, 411, 412, 414, 415, 417, 418, 421, 423, 424, 425, 426, 433, 435, 436, 439, 442, 443, 444, 445, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 496, 497, 502, 506, 507, 511, 513, 533, 540, 546, 548, 552, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 601, 603, 604, 605, 607, 608, 609, 611, 613, 614, 615, 617, 618, 619, 620, 636, 637, 639, 644, 645, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 721, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 860, 863, 864, 870, 871, 873, 898, 899, 901, 902, 903, 904, 908, 909, 911, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 929, 930, 931, 932, 938, 949, 951, 952, 1005, 1006, 1009, 1010, 1013, 1014, 1018, 1020, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1036, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1060], "test_": [52, 159, 420], "test_0": 43, "test_4": 43, "test_accuraci": [263, 277, 290], "test_auc": 836, "test_ax": 129, "test_balanced_accuraci": 290, "test_best_it": 150, "test_check_estim": 952, "test_color": 150, "test_common": [384, 392], "test_dataset": 378, "test_devi": 153, "test_enable_hist_gradient_boost": 388, "test_error": 289, "test_fn": 1010, "test_fold": [420, 822], "test_fract": 1041, "test_idx": [52, 398], "test_import": 193, "test_index": [263, 339, 420, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830], "test_indx": 420, "test_lin": 150, "test_logist": [384, 392], "test_ms": 333, "test_neg_mean_absolute_error": [43, 220], "test_neg_mean_squared_error": [220, 836], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 279, "test_positive_likelihood_ratio": 279, "test_prec_macro": 420, "test_precision_macro": 420, "test_r2": 836, "test_rec_macro": 420, "test_recall_macro": 420, "test_requiring_mpl_fixtur": 384, "test_result": 193, "test_scor": [148, 150, 152, 154, 226, 275, 278, 294, 323, 354, 362, 397, 420, 815, 832, 836, 837, 840], "test_scores_nb": 278, "test_scores_svm": 278, "test_set": 414, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 105, 143, 149, 150, 152, 153, 154, 158, 190, 196, 203, 213, 218, 225, 226, 233, 234, 270, 273, 274, 278, 283, 285, 289, 296, 305, 306, 312, 314, 315, 319, 321, 322, 328, 347, 354, 367, 389, 420, 707, 811, 826, 829, 830, 839, 841, 862, 1000, 1012, 1013, 1041, 1042, 1047, 1048, 1053], "test_sklearn_compatible_estim": [326, 952], "test_sparsifi": 392, "test_stat": 47, "test_tim": [251, 358], "test_tp": 1010, "test_val": 385, "test_your_test_nam": 372, "tested_neg": 290, "tested_posit": 290, "testenv": [151, 319], "testpypi": 388, "teunp": 1055, "texa": [51, 104], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 88, 91, 92, 93, 95, 96, 97, 99, 104, 113, 114, 136, 144, 149, 171, 183, 194, 199, 212, 213, 245, 249, 252, 256, 257, 261, 263, 268, 275, 276, 282, 283, 287, 302, 305, 307, 312, 319, 329, 335, 337, 353, 362, 371, 373, 376, 377, 378, 384, 389, 396, 398, 404, 414, 416, 417, 419, 420, 421, 423, 426, 455, 457, 472, 476, 495, 496, 497, 508, 512, 517, 530, 545, 553, 573, 597, 598, 599, 600, 624, 634, 661, 667, 675, 677, 683, 685, 706, 712, 714, 716, 722, 726, 738, 739, 746, 802, 804, 809, 823, 839, 848, 850, 852, 855, 860, 873, 874, 876, 877, 885, 909, 910, 911, 913, 925, 926, 927, 954, 999, 1002, 1006, 1008, 1010, 1011, 1012, 1014, 1017, 1020, 1022, 1024, 1025, 1028, 1030, 1031, 1034, 1036, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "text1": 424, "text2": 424, "text2d": 242, "text3": 424, "text3d": [80, 130], "text_": 706, "text_kw": [706, 1056], "text_preprocess": 472, "text_stat": 104, "text_stats_transform": 104, "textbook": [424, 599], "textcoord": [48, 196], "textrm": 1025, "texttt": 1010, "textual": [421, 430, 1026, 1050], "textur": [173, 381, 767, 768, 1008], "tf": [2, 54, 57, 249, 358, 359, 360, 379, 421, 530, 553, 597, 598, 599, 600, 852, 860, 885, 999, 1008, 1012, 1020, 1029], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 599, "tfidf": [54, 104, 340, 424, 600], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 340, 359, 360, 424, 497, 600, 1048, 1049, 1055, 1057, 1058, 1059], "tfidfvector": [2, 54, 57, 104, 277, 358, 379, 421, 424, 497, 597, 598, 599, 1041, 1043, 1049, 1050, 1051, 1054, 1055, 1059], "tfidfvectorizertfidfvector": 277, "tfifi": 1054, "tfrac": 426, "tgct": 183, "tgz": 45, "th": [138, 329, 366, 397, 416, 420, 423, 431, 449, 453, 454, 459, 461, 467, 471, 480, 559, 566, 567, 568, 569, 570, 571, 573, 574, 575, 602, 603, 641, 657, 658, 678, 680, 689, 705, 727, 789, 830, 894, 944, 1000, 1006, 1010, 1014, 1017, 1024, 1025, 1056], "th0rwa": [1051, 1052], "thakur": [1044, 1045], "thaler": 1047, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 82, 88, 90, 106, 109, 113, 115, 118, 122, 124, 127, 129, 131, 138, 140, 141, 143, 144, 145, 147, 148, 151, 154, 171, 173, 175, 181, 186, 191, 192, 193, 196, 198, 203, 204, 207, 218, 220, 224, 234, 235, 236, 242, 245, 251, 252, 253, 255, 262, 270, 273, 274, 276, 277, 278, 279, 282, 285, 290, 294, 296, 297, 303, 304, 315, 317, 321, 322, 323, 324, 328, 330, 332, 334, 337, 351, 358, 359, 360, 367, 371, 372, 373, 378, 379, 380, 382, 383, 384, 386, 389, 390, 392, 398, 399, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 462, 465, 468, 471, 472, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 502, 503, 505, 518, 523, 524, 532, 540, 543, 544, 545, 546, 547, 549, 550, 551, 553, 556, 557, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 582, 590, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 636, 637, 639, 643, 649, 651, 652, 653, 655, 656, 661, 662, 664, 667, 668, 669, 670, 671, 672, 675, 676, 677, 680, 681, 683, 685, 686, 687, 688, 691, 696, 701, 703, 705, 713, 714, 721, 729, 730, 731, 732, 733, 744, 745, 748, 773, 788, 789, 790, 792, 794, 804, 806, 807, 809, 812, 813, 819, 823, 828, 830, 831, 834, 835, 836, 837, 838, 841, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 867, 870, 871, 876, 886, 887, 888, 890, 891, 893, 896, 902, 903, 907, 910, 913, 914, 915, 918, 919, 921, 922, 923, 924, 925, 930, 945, 957, 959, 960, 966, 972, 978, 980, 983, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1029, 1030, 1033, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "thanh": 1059, "thank": [0, 43, 55, 62, 90, 118, 193, 196, 218, 285, 358, 359, 383, 392, 1029, 1034, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "tharak": 1058, "thebabush": [1058, 1059], "thedevpanda": 1056, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 85, 92, 115, 126, 136, 139, 145, 146, 148, 150, 152, 154, 155, 169, 172, 173, 175, 176, 180, 191, 192, 203, 204, 207, 213, 218, 219, 236, 239, 242, 245, 251, 252, 255, 269, 273, 276, 277, 279, 285, 290, 294, 297, 299, 313, 317, 322, 328, 330, 351, 358, 359, 364, 365, 367, 371, 372, 373, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 392, 393, 396, 397, 398, 399, 407, 410, 413, 415, 416, 417, 418, 419, 421, 423, 425, 426, 428, 448, 450, 454, 461, 462, 475, 505, 517, 518, 542, 544, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 606, 619, 628, 638, 652, 655, 656, 661, 667, 668, 669, 670, 671, 679, 681, 685, 687, 690, 696, 771, 772, 774, 777, 783, 798, 809, 823, 842, 848, 849, 850, 851, 852, 870, 873, 875, 881, 892, 893, 915, 918, 921, 922, 923, 924, 928, 999, 1000, 1002, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1034, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "theil": [2, 188, 197, 221, 224, 317, 658, 666, 680, 687, 688, 1031], "theilsen": 224, "theilsenregressor": [2, 224, 235, 658, 680, 687, 1006, 1045, 1053, 1055, 1060], "theirs": 358, "them": [16, 43, 44, 47, 68, 74, 75, 84, 88, 90, 91, 95, 100, 101, 104, 105, 118, 124, 126, 129, 139, 155, 168, 173, 175, 186, 187, 191, 192, 193, 196, 198, 203, 206, 213, 219, 220, 222, 236, 249, 252, 255, 256, 270, 274, 276, 277, 279, 285, 294, 299, 317, 322, 324, 329, 340, 347, 360, 366, 371, 373, 379, 384, 385, 386, 387, 388, 392, 396, 398, 399, 401, 407, 410, 414, 415, 416, 417, 420, 421, 423, 424, 426, 452, 455, 457, 458, 465, 472, 475, 502, 503, 517, 576, 577, 578, 579, 616, 617, 625, 629, 630, 633, 641, 648, 673, 701, 777, 780, 783, 787, 788, 789, 790, 798, 809, 823, 830, 838, 873, 877, 882, 883, 887, 891, 893, 894, 903, 904, 910, 921, 922, 951, 952, 966, 975, 999, 1000, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1020, 1025, 1026, 1028, 1029, 1033, 1034, 1041, 1042, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "themat": 398, "theme": [379, 384, 402, 409, 1041], "themrmax": [1047, 1048], "themselv": [64, 191, 317, 380, 386, 392, 398, 407, 413, 416, 423, 424, 426, 454, 624, 801, 1026, 1051], "theodor": 1046, "theofilo": 1048, "theoptip": [1051, 1052], "theorem": [32, 175, 354, 1012], "theoret": [37, 72, 92, 175, 270, 416, 423, 562, 563, 648, 713, 735, 765, 913, 999, 1006, 1007, 1009, 1010, 1012, 1022, 1024, 1025, 1034], "theori": [8, 148, 251, 266, 354, 381, 416, 420, 423, 699, 703, 735, 765, 905, 906, 957, 999, 1006, 1007, 1009, 1010, 1011, 1025, 1026], "theotheo": 1051, "thereaft": [191, 198], "therebi": [43, 191, 420, 423, 1002, 1051], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 87, 88, 105, 106, 109, 113, 118, 129, 133, 138, 141, 143, 151, 154, 157, 159, 172, 190, 193, 218, 222, 234, 235, 261, 266, 267, 270, 277, 279, 290, 294, 296, 300, 314, 317, 322, 336, 347, 354, 355, 358, 359, 366, 371, 378, 382, 386, 389, 396, 407, 410, 412, 416, 417, 418, 420, 421, 423, 424, 445, 544, 550, 558, 560, 562, 563, 568, 569, 573, 574, 613, 615, 667, 668, 674, 677, 680, 685, 687, 688, 710, 721, 744, 766, 806, 873, 874, 886, 890, 894, 902, 929, 1000, 1004, 1006, 1007, 1010, 1012, 1013, 1014, 1015, 1018, 1020, 1025, 1026, 1030, 1050, 1051, 1054, 1055, 1056, 1057, 1058], "therein": 677, "thereof": 398, "theriley106": 1049, "thesi": [0, 381, 416, 423], "theta": [176, 177, 179, 181, 183, 184, 253, 421, 426, 532, 545, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 701, 1012, 1026], "theta0": 176, "theta1": 176, "theta_": [851, 1012], "theta_c": [253, 532], "theta_d": 421, "theta_i": 1012, "theta_l": 426, "theta_opt": [619, 620], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 401, 402, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 490, 491, 492, 493, 495, 497, 498, 502, 503, 505, 506, 507, 508, 510, 511, 512, 514, 517, 518, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 715, 716, 718, 720, 721, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 745, 746, 747, 748, 749, 750, 751, 752, 757, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 777, 778, 783, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 932, 933, 934, 935, 939, 940, 945, 946, 947, 949, 951, 952, 957, 959, 962, 965, 966, 967, 968, 969, 970, 972, 975, 976, 979, 980, 983, 984, 993, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "thibault": 1050, "thibaut": 1055, "thibsej": 1050, "thick": [95, 307, 1013], "thierno": 1051, "thierri": [0, 1034, 1047, 1048, 1055], "thij": [1053, 1056, 1057], "thin": [240, 629], "thing": [48, 70, 239, 271, 358, 372, 373, 379, 383, 384, 386, 396, 399, 416, 418, 424, 568, 569, 1006, 1020, 1034, 1047], "think": [44, 72, 191, 192, 358, 359, 384, 392, 422, 1009, 1030, 1034], "thinner": 102, "third": [70, 147, 152, 168, 173, 183, 236, 245, 267, 294, 302, 319, 332, 372, 379, 383, 386, 396, 399, 410, 424, 543, 597, 598, 599, 600, 811, 812, 813, 818, 855, 856, 857, 859, 861, 891, 903, 999, 1021, 1041, 1052, 1057, 1058, 1060], "thirion": [0, 405, 1041, 1047, 1048, 1054], "thirteen": 381, "thirti": 1028, "thiruvenkadam": 1055, "this_centroid": 77, "this_cov": 115, "this_cv": 271, "this_di": 51, "this_dx": 51, "this_i": [61, 224], "this_max_it": 233, "this_p": 63, "this_prec": 115, "this_scor": 350, "this_sw": 61, "this_x": [61, 216, 224], "thoma": [0, 131, 372, 374, 399, 405, 909, 1006, 1020, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "thomas9292": 1053, "thomaz": 1052, "thomo": 93, "thompson": [1044, 1056, 1057], "thorben": 1053, "thorough": 1034, "thoroughli": 1015, "thorsten": 1034, "those": [43, 46, 51, 55, 57, 90, 95, 105, 139, 151, 154, 171, 173, 190, 191, 192, 193, 194, 218, 220, 222, 236, 243, 249, 252, 254, 255, 267, 269, 270, 276, 279, 282, 294, 313, 317, 322, 334, 344, 347, 358, 359, 360, 371, 372, 378, 384, 386, 388, 389, 390, 391, 396, 398, 399, 402, 413, 414, 415, 416, 420, 421, 423, 424, 426, 456, 458, 469, 472, 476, 503, 504, 505, 512, 566, 567, 573, 574, 578, 579, 590, 701, 706, 721, 727, 745, 809, 812, 813, 821, 823, 830, 855, 856, 857, 859, 861, 862, 863, 864, 865, 913, 914, 915, 918, 921, 922, 923, 924, 969, 999, 1002, 1006, 1009, 1010, 1012, 1013, 1014, 1017, 1020, 1026, 1028, 1029, 1034, 1041, 1044, 1047, 1048, 1049, 1054, 1055, 1056, 1057, 1058, 1059], "though": [80, 90, 144, 173, 196, 198, 255, 282, 302, 319, 321, 359, 360, 367, 371, 378, 381, 384, 397, 398, 416, 421, 422, 423, 424, 425, 708, 816, 818, 913, 999, 1000, 1002, 1007, 1010, 1013, 1018, 1020, 1024, 1049], "thought": [238, 302, 398, 416, 454, 1007, 1011], "thoui": [0, 406, 1041], "thousand": [77, 144, 154, 249, 251, 321, 359, 379, 416, 423, 870, 871, 918, 1007, 1050, 1052], "thread": [297, 327, 330, 382, 384, 396, 398, 416, 423, 572, 845, 846, 975, 976, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1056, 1057, 1058], "threadpoolctl": [41, 372, 382, 402, 409], "threadsaf": 1054, "three": [43, 46, 63, 70, 75, 76, 80, 81, 90, 93, 111, 120, 121, 138, 143, 145, 148, 149, 150, 160, 161, 162, 170, 173, 183, 191, 203, 210, 215, 218, 220, 227, 229, 251, 252, 261, 264, 296, 323, 324, 327, 372, 377, 381, 388, 402, 410, 413, 416, 420, 421, 422, 424, 459, 470, 507, 718, 959, 1003, 1005, 1006, 1007, 1010, 1013, 1020, 1024, 1025, 1028, 1041], "three_d_arrai": 930, "thresh": 1045, "threshold": [2, 50, 62, 77, 100, 127, 133, 173, 188, 192, 194, 213, 246, 248, 268, 273, 274, 275, 280, 283, 296, 332, 333, 335, 363, 366, 398, 411, 416, 421, 423, 425, 449, 450, 453, 454, 477, 505, 509, 517, 518, 540, 546, 551, 557, 558, 559, 560, 570, 572, 597, 600, 602, 606, 611, 612, 653, 667, 676, 680, 685, 687, 701, 707, 709, 711, 712, 715, 716, 727, 729, 735, 736, 748, 749, 751, 765, 791, 793, 796, 797, 798, 803, 806, 807, 808, 809, 828, 831, 839, 848, 859, 860, 874, 876, 878, 880, 893, 896, 908, 909, 910, 911, 918, 925, 927, 983, 1006, 1010, 1013, 1014, 1016, 1020, 1023, 1025, 1026, 1030, 1031, 1036, 1041, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1060], "threshold_": [606, 1048], "threshold_lambda": 653, "threshold_sign": 366, "thriller": [424, 884], "thrive": [0, 384], "throat": [50, 310, 379, 507], "through": [0, 2, 46, 52, 70, 143, 173, 183, 191, 222, 238, 250, 271, 276, 279, 302, 321, 322, 345, 352, 360, 366, 381, 384, 386, 391, 393, 398, 399, 402, 407, 415, 416, 419, 421, 423, 425, 426, 433, 439, 454, 472, 475, 480, 544, 550, 566, 567, 570, 573, 574, 575, 590, 602, 603, 606, 656, 660, 662, 664, 667, 668, 670, 672, 674, 677, 685, 686, 697, 700, 729, 815, 832, 889, 901, 905, 906, 921, 922, 923, 924, 964, 967, 999, 1000, 1007, 1010, 1012, 1013, 1014, 1016, 1018, 1020, 1024, 1025, 1026, 1034, 1041, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060], "throughout": [332, 367, 398, 636, 810, 870, 871, 1044, 1049], "throughput": [370, 1029, 1036, 1044], "throw": [2, 314, 393, 938, 1045, 1048, 1049, 1050, 1051, 1055], "thrown": [720, 1050, 1051], "thu": [43, 44, 61, 62, 63, 64, 75, 88, 90, 95, 111, 115, 127, 129, 141, 143, 144, 146, 148, 154, 169, 175, 180, 181, 192, 203, 205, 207, 218, 220, 236, 245, 251, 256, 263, 270, 274, 276, 281, 282, 283, 290, 300, 324, 326, 329, 362, 367, 371, 372, 379, 386, 390, 396, 398, 407, 414, 415, 416, 420, 421, 423, 424, 426, 427, 445, 447, 471, 524, 536, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 612, 615, 619, 631, 636, 641, 642, 652, 654, 667, 686, 714, 727, 734, 797, 804, 809, 811, 816, 818, 823, 830, 844, 847, 882, 913, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1016, 1017, 1020, 1022, 1023, 1024, 1025, 1030, 1034, 1041, 1043, 1047, 1049, 1050, 1051, 1053, 1057], "thuan": 1052, "thukarama": 1056, "thumb": [13, 144, 196, 371, 384, 385, 396, 416, 667, 668, 675, 676, 677, 685, 686, 687, 913, 1010], "thumbnail": 1041, "th\u00e9ophil": 1057, "ti": [104, 218, 263, 266, 274, 355, 371, 392, 414, 416, 608, 609, 644, 729, 735, 765, 806, 807, 915, 918, 921, 1009, 1010, 1025, 1042, 1044, 1045, 1049, 1051, 1055, 1056, 1057], "tiago": [1042, 1046], "tialo": [1058, 1059, 1060], "tian": [416, 450, 1046, 1047, 1048], "tianqi": 423, "tiao": [1046, 1047], "tib": [691, 692], "tibshirani": [141, 142, 153, 173, 205, 275, 381, 420, 423, 529, 568, 569, 637, 665, 730, 732, 733, 843, 860, 921, 922, 1000, 1004, 1006, 1011, 1017, 1026], "tic": [173, 192, 255, 287, 1012], "tic_bwd": 173, "tic_fwd": 173, "ticconi": 1047, "tick": [47, 78, 95, 178, 256, 287, 384, 641, 837], "tick_bottom": 317, "tick_label": [152, 194, 326], "tick_labels_dict": [152, 194, 326], "tick_labels_parameter_nam": [152, 194, 326], "tick_left": 317, "tick_param": [46, 54, 162, 261, 276, 321, 339], "tick_right": 46, "ticker": [238, 240, 243, 297], "ticket": [331, 384], "tidelift": 0, "tie": [188, 210, 342, 396, 423, 521, 841, 918, 1011, 1025, 1026, 1031, 1042, 1057], "tieleman": [869, 1015], "tien": 1046, "tiernei": [1049, 1050, 1051], "tight": [75, 133, 140, 147, 166, 169, 206, 210, 211, 212, 223, 227, 230, 235, 240, 243, 265, 297, 303, 304, 308, 309, 343, 347, 350, 352, 363, 591, 701, 1053], "tight_layout": [45, 47, 62, 64, 67, 75, 87, 90, 100, 107, 109, 118, 124, 125, 126, 134, 138, 140, 145, 147, 149, 152, 157, 159, 161, 177, 179, 184, 186, 190, 191, 193, 194, 198, 199, 203, 208, 216, 218, 226, 229, 233, 236, 238, 250, 255, 271, 272, 288, 296, 297, 299, 309, 318, 319, 320, 321, 322, 326, 330, 345, 359, 362, 363], "tijanajovanov": 1053, "tikhonov": [182, 426, 681], "tild": [879, 1018, 1020], "tilen": 1051, "till": [416, 450, 797, 1010], "tim": [0, 405, 1041, 1046, 1047, 1050, 1051, 1052, 1054, 1056, 1057, 1058, 1059, 1060], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 396, 398, 399, 407, 410, 412, 413, 414, 416, 418, 419, 421, 423, 424, 427, 445, 449, 451, 452, 453, 454, 455, 458, 460, 463, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 480, 500, 505, 508, 510, 528, 532, 543, 545, 547, 549, 550, 556, 571, 576, 577, 578, 579, 599, 619, 628, 636, 637, 638, 639, 643, 648, 649, 652, 655, 659, 661, 663, 669, 671, 673, 675, 676, 681, 682, 683, 685, 686, 687, 694, 695, 699, 701, 703, 710, 751, 754, 755, 757, 799, 803, 806, 807, 809, 811, 812, 813, 814, 816, 818, 823, 824, 825, 828, 830, 834, 835, 836, 837, 838, 839, 841, 843, 848, 849, 850, 851, 852, 853, 854, 861, 863, 864, 865, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 883, 886, 888, 892, 897, 905, 906, 910, 911, 915, 918, 919, 927, 951, 952, 959, 975, 999, 1000, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1034, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "time_dens": 333, "time_spars": 333, "time_step": [203, 871], "timeit": [233, 264, 390], "timeout": [505, 975, 1055], "timer": [264, 390], "times_init": 264, "timescal": 250, "timeseri": 43, "timeseriessplit": [2, 43, 52, 154, 203, 271, 420, 1047, 1048, 1053], "timo": 1053, "timofei": 1056, "timotheemathieu": 1054, "timothi": [1046, 1054], "timsaur": 1051, "tinertia": 93, "ting": [572, 1016, 1049, 1050], "tingshan": 1054, "tini": [1043, 1056, 1059], "tinoco": 1058, "tinta": 323, "tip": [367, 370, 384, 387, 390, 411, 424, 543, 550, 654, 701, 1006, 1032, 1033, 1035, 1036, 1044], "tiphain": 1052, "tirth": [1051, 1052], "titan": [105, 193, 259, 326, 330, 331, 1018], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 111, 112, 114, 115, 117, 118, 120, 121, 124, 125, 126, 127, 128, 131, 132, 133, 139, 140, 141, 144, 146, 147, 148, 151, 152, 154, 155, 158, 161, 162, 166, 168, 169, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 191, 198, 199, 201, 203, 205, 206, 207, 210, 211, 217, 218, 220, 222, 223, 224, 226, 227, 232, 235, 236, 238, 239, 240, 245, 249, 250, 251, 253, 254, 255, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 275, 276, 277, 279, 280, 281, 285, 286, 291, 299, 300, 303, 304, 305, 306, 308, 309, 310, 317, 321, 322, 323, 324, 338, 341, 343, 344, 345, 346, 347, 350, 351, 355, 356, 358, 363, 364, 365, 383, 384, 388, 392, 417, 1010, 1033], "title_bow": 417, "titles_opt": 269, "titov": [1049, 1051, 1054, 1055], "titu": 1052, "tiwari": 1053, "tiziano": 1041, "tjoa": 1045, "tkammi": 1047, "tkdd": 572, "tliu68": 1054, "tm": [51, 1013], "tmp": 388, "tmpdir": [299, 326], "tn": [270, 334, 721, 727, 1010], "tn_c": 285, "tnr": 270, "tnwei": 1053, "to_british": 424, "to_fram": 109, "to_list": 194, "to_numpi": [180, 270], "to_onnx": 410, "to_replac": [43, 192], "toarrai": [46, 333, 340, 366, 417, 424, 575, 591, 597, 599, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 886, 903, 904, 958, 980, 981, 983, 991, 992, 1000, 1013, 1020, 1058], "toastedcornflak": [1047, 1048], "toastedyeast": [1055, 1056], "tobia": [1049, 1054, 1056], "tobychees": [1048, 1049], "toc": [173, 255], "toc_bwd": 173, "toc_fwd": 173, "toccac": 1051, "tocsc": 204, "tocsr": 55, "toctre": [384, 402, 409], "tod": [416, 427, 452], "todai": 180, "todens": [984, 985, 986, 987, 988, 989, 990], "todo": [81, 249, 388, 392, 416, 1060], "toeplitz": 112, "togeth": [43, 51, 86, 95, 105, 147, 159, 175, 181, 191, 200, 239, 242, 255, 272, 323, 330, 350, 363, 367, 386, 396, 397, 398, 416, 423, 424, 425, 431, 459, 461, 576, 577, 603, 698, 724, 809, 823, 873, 874, 887, 1006, 1007, 1010, 1011, 1017, 1020, 1026, 1027, 1034, 1047, 1058], "toi": [48, 58, 71, 74, 75, 76, 77, 82, 84, 87, 88, 90, 92, 102, 113, 118, 128, 141, 155, 160, 161, 188, 201, 208, 222, 232, 244, 255, 261, 303, 304, 313, 344, 353, 377, 390, 396, 416, 423, 424, 448, 449, 450, 452, 454, 456, 457, 458, 460, 466, 477, 521, 523, 531, 572, 648, 686, 735, 765, 807, 859, 866, 874, 893, 917, 1007, 1009, 1010, 1016, 1020, 1031, 1036], "tok": [360, 424], "token": [2, 57, 360, 371, 379, 388, 424, 545, 597, 598, 599, 600, 1041, 1049, 1053, 1059], "token_featur": 424, "token_freq": 360, "token_pattern": [360, 424, 597, 598, 600], "tokoroten": 1046, "tokyo": [881, 1021], "tol": [46, 49, 55, 107, 124, 149, 154, 173, 186, 199, 209, 211, 225, 226, 232, 234, 245, 256, 262, 264, 315, 329, 354, 358, 386, 390, 423, 428, 451, 455, 457, 460, 467, 470, 479, 480, 486, 490, 491, 492, 540, 541, 542, 544, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 568, 569, 570, 571, 611, 636, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 681, 683, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 700, 702, 704, 806, 807, 823, 862, 870, 871, 908, 909, 913, 914, 915, 916, 917, 918, 919, 995, 1006, 1024, 1025, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059], "tola": 1051, "told": 424, "toledano": 1049, "toler": [81, 107, 154, 186, 209, 211, 234, 235, 351, 360, 379, 386, 393, 416, 428, 451, 455, 460, 467, 470, 479, 480, 486, 490, 491, 492, 540, 541, 542, 544, 545, 549, 550, 551, 552, 553, 554, 556, 557, 568, 569, 570, 571, 636, 655, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 685, 687, 688, 690, 691, 692, 693, 697, 698, 699, 700, 702, 703, 704, 853, 854, 858, 862, 870, 871, 908, 909, 913, 914, 915, 916, 917, 918, 919, 995, 1006, 1010, 1024, 1025, 1053, 1054, 1055, 1056], "toleranbc": 1050, "tolist": [43, 150, 186, 275, 328, 379], "tom": [0, 405, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "tom1092": 1054, "toma": 1045, "tomasz": 1054, "tomato": 219, "tomatti": 1056, "tomdlt": 1047, "tomiock": [1056, 1057], "tommaso": 1054, "tommi": [1048, 1049, 1050], "tomographi": [42, 55, 101, 188, 661, 681, 1006, 1031], "tomohiro": 1054, "tomorrow": 415, "tom\u00e1": [1054, 1055], "tongyu": 1058, "toni": [45, 379, 572, 893, 1016, 1054, 1055], "tonk": 1048, "too": [43, 46, 51, 52, 55, 64, 79, 85, 90, 92, 97, 104, 108, 115, 128, 151, 154, 186, 191, 193, 203, 219, 222, 239, 249, 255, 262, 269, 270, 274, 283, 292, 314, 323, 347, 358, 364, 365, 371, 381, 384, 390, 392, 396, 398, 414, 416, 418, 420, 423, 424, 425, 428, 445, 457, 547, 688, 701, 716, 848, 849, 850, 851, 852, 878, 891, 893, 1005, 1007, 1009, 1010, 1012, 1013, 1017, 1042, 1045, 1048, 1049, 1050, 1051, 1053, 1059], "took": [0, 43, 77, 284], "tool": [21, 29, 41, 48, 50, 52, 149, 191, 252, 270, 274, 279, 367, 377, 378, 379, 382, 384, 386, 387, 389, 390, 391, 392, 397, 398, 399, 401, 402, 407, 410, 416, 417, 418, 495, 701, 710, 999, 1005, 1006, 1010, 1016, 1020, 1025, 1027, 1029, 1030, 1034, 1048, 1051, 1054, 1055, 1056], "toolbox": [396, 1029, 1034], "toolchain": 382, "toolkit": [371, 1029, 1034], "toolset": 1034, "tooth": 125, "tootoonian": 1054, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 80, 86, 97, 99, 105, 121, 126, 136, 143, 144, 147, 154, 159, 162, 191, 218, 220, 229, 233, 245, 255, 256, 261, 263, 264, 267, 273, 277, 285, 286, 302, 317, 319, 323, 327, 333, 336, 337, 347, 351, 358, 367, 384, 386, 390, 396, 413, 414, 416, 421, 422, 423, 495, 596, 597, 600, 608, 735, 765, 803, 925, 927, 999, 1002, 1006, 1008, 1018, 1029, 1034, 1055, 1060], "top10": 379, "top5": 358, "top_featur": 54, "top_features_ind": 54, "top_indic": 358, "top_k_accuraci": 1010, "top_k_accuracy_scor": [2, 1010, 1053, 1055], "tophat": [302, 422, 853, 854, 858], "topic": [42, 45, 46, 47, 104, 188, 358, 359, 360, 379, 380, 420, 421, 424, 496, 506, 545, 547, 549, 556, 597, 600, 1006, 1011, 1029, 1030, 1031, 1046, 1048], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [421, 545], "topic_word_prior_": 545, "topisan": 1051, "toplak": 1057, "topolog": [471, 1029], "topologi": [242, 243], "torch": [412, 1059], "torgo": 378, "toro": 323, "toronto": [543, 653, 869], "torr": [1050, 1059], "torrella": [1050, 1051, 1057, 1060], "tortois": 1006, "tosequ": 1059, "toshihiro": [1047, 1048, 1054], "toshniw": 1053, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 366, 372, 378, 379, 381, 390, 398, 413, 416, 422, 424, 427, 439, 452, 473, 490, 491, 492, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 519, 521, 523, 524, 528, 531, 532, 545, 553, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 579, 592, 593, 599, 603, 605, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 685, 686, 687, 688, 706, 713, 714, 722, 738, 739, 740, 743, 747, 748, 766, 778, 792, 793, 796, 803, 804, 805, 809, 823, 834, 835, 836, 846, 847, 848, 849, 856, 858, 864, 871, 888, 892, 914, 916, 919, 921, 922, 923, 924, 957, 999, 1006, 1007, 1010, 1011, 1012, 1013, 1020, 1024, 1025, 1026, 1031, 1042, 1047, 1049, 1057, 1058], "total_cel": 154, "total_fit_tim": 47, "total_sampl": [339, 545], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 159, "totrmsabvgrd": 148, "tottim": 390, "tour": [0, 405, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "tournament": 999, "toward": [0, 63, 64, 98, 115, 145, 151, 158, 175, 193, 198, 222, 223, 243, 255, 354, 384, 398, 416, 456, 460, 470, 685, 687, 704, 887, 1009, 1024, 1026, 1028, 1030], "toyota": 51, "tp": [334, 416, 721, 727, 738, 739, 740, 791, 792, 793, 796, 925, 1010], "tp_c": 285, "tpng": 925, "tpot": 1029, "tpr": [50, 246, 255, 270, 273, 285, 286, 391, 711, 715, 798, 1010, 1038, 1041, 1057], "tpr_a": 285, "tpr_b": 285, "tpr_score": 270, "tprs_lower": 286, "tprs_upper": 286, "tr": [271, 381, 388, 416, 418, 477, 478, 479, 480, 481, 482, 483, 484], "trace": [392, 416, 429, 481, 483, 484, 487, 488, 489, 698, 702, 1007, 1052], "traceback": [384, 389, 392, 396, 476, 720, 1033, 1058], "traceord": 144, "tracer0tong": 1047, "trach": 1041, "track": [136, 142, 150, 337, 384, 387, 388, 412, 543, 978, 1011, 1029, 1030, 1048, 1051], "tracker": [383, 387, 392, 396, 399, 402, 410, 1030], "tracking_select": 978, "tractabl": [43, 420, 550, 643, 1029, 1054], "trade": [37, 96, 111, 144, 154, 193, 222, 275, 277, 278, 347, 358, 398, 415, 416, 418, 562, 563, 568, 569, 643, 665, 701, 809, 812, 813, 823, 836, 1007, 1014, 1022, 1024, 1025, 1030], "tradeoff": [90, 141, 188, 250, 258, 268, 283, 284, 285, 286, 358, 371, 384, 392, 422, 524, 573, 707, 711, 736, 798, 839, 874, 893, 913, 1007, 1031, 1050, 1053], "tradit": [55, 90, 218, 233, 359, 373, 414, 423, 424, 641, 703, 1006, 1009, 1020, 1029, 1034], "tradition": 1026, "traffic": 1034, "trail": [386, 993], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 93, 99, 100, 104, 105, 109, 117, 118, 124, 127, 128, 129, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 154, 156, 159, 160, 161, 164, 170, 175, 176, 177, 180, 181, 182, 183, 184, 188, 190, 191, 192, 193, 194, 196, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 217, 218, 219, 220, 225, 226, 227, 230, 232, 233, 236, 245, 248, 250, 254, 263, 265, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 296, 297, 300, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 317, 319, 321, 322, 326, 329, 333, 335, 336, 337, 340, 341, 343, 346, 353, 354, 360, 361, 364, 365, 367, 371, 372, 373, 376, 379, 381, 386, 389, 396, 397, 398, 412, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 428, 445, 448, 449, 451, 452, 455, 457, 459, 460, 461, 462, 467, 473, 477, 478, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 496, 497, 502, 505, 506, 507, 509, 513, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 636, 637, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 696, 697, 698, 700, 701, 705, 712, 750, 797, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 878, 879, 882, 883, 886, 887, 891, 892, 893, 894, 898, 899, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 983, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1036, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "train_0": 43, "train_4": 43, "train_accuraci": [263, 290], "train_auc": 836, "train_ax": 129, "train_balanced_accuraci": 290, "train_cover_std": 50, "train_dataset": [191, 378], "train_error": 289, "train_errors_with": 149, "train_errors_without": 149, "train_fract": 1041, "train_idx": [52, 191, 398], "train_import": 193, "train_index": [263, 339, 420, 810, 811, 814, 816, 817, 818, 819, 822, 824, 825, 826, 827, 828, 829, 830], "train_indx": 420, "train_pr": 149, "train_prec_macro": 420, "train_r2": 836, "train_rec_macro": 420, "train_result": 193, "train_sampl": [64, 233, 234], "train_scor": [226, 323, 354, 362, 815, 832, 836, 837, 840, 1005], "train_score_": [152, 423, 568, 569, 570, 571], "train_set": 414, "train_siz": [44, 46, 49, 138, 158, 176, 196, 234, 251, 255, 278, 289, 328, 331, 354, 811, 815, 826, 829, 837, 839, 1005, 1041, 1042, 1047, 1048], "train_size_ab": 837, "train_size_idx": 354, "train_sizes_ab": 837, "train_test_s": 251, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 105, 109, 118, 129, 138, 143, 145, 149, 150, 151, 152, 153, 154, 155, 158, 169, 170, 190, 191, 193, 194, 196, 203, 213, 218, 225, 226, 233, 234, 236, 246, 255, 258, 259, 269, 270, 273, 274, 279, 283, 285, 289, 296, 300, 305, 306, 312, 314, 315, 319, 321, 322, 324, 326, 327, 328, 333, 334, 340, 362, 366, 367, 389, 397, 412, 417, 420, 423, 445, 446, 567, 569, 576, 577, 706, 707, 709, 711, 808, 809, 831, 841, 844, 862, 870, 871, 873, 923, 924, 999, 1000, 1010, 1012, 1013, 1018, 1020, 1025, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1054, 1058, 1059], "train_tim": [233, 251, 358, 359], "trainabl": 386, "traine": 1034, "training_data": 175, "training_data_": 1051, "training_idx": 183, "training_indic": 182, "training_noisy_target": 175, "training_sample_indic": 175, "training_tim": [149, 358], "training_time_early_stop": 149, "training_time_ful": 149, "trajectori": 142, "tran": 112, "trans_data": 240, "transact": [98, 270, 334, 381, 416, 418, 427, 429, 452, 456, 483, 543, 547, 549, 556, 572, 653, 673, 694, 695, 734, 735, 765, 778, 1006, 1010], "transax": [79, 97, 242, 245, 263, 305, 319], "transcript": 384, "transcriptom": 701, "transduc": 337, "transduct": [398, 416, 908, 909, 1030], "transduction_": [336, 337, 338, 908, 909, 910], "transfer": [154, 407, 412, 1006, 1030], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 81, 82, 83, 86, 89, 92, 97, 103, 107, 108, 118, 120, 126, 127, 129, 130, 132, 133, 137, 142, 144, 148, 158, 159, 170, 181, 187, 188, 191, 192, 193, 196, 210, 218, 219, 226, 232, 234, 236, 239, 242, 245, 247, 248, 250, 252, 253, 255, 259, 263, 272, 273, 274, 277, 285, 296, 297, 299, 305, 306, 307, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 331, 333, 334, 347, 350, 351, 358, 360, 367, 378, 379, 380, 381, 384, 386, 389, 393, 398, 407, 410, 412, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 432, 437, 440, 445, 449, 450, 451, 453, 455, 457, 460, 472, 473, 474, 475, 476, 490, 491, 492, 493, 496, 497, 505, 512, 517, 518, 523, 524, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 566, 568, 570, 573, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 645, 647, 648, 649, 650, 651, 662, 667, 672, 682, 685, 693, 697, 698, 699, 700, 701, 703, 710, 711, 722, 762, 763, 794, 809, 812, 813, 823, 839, 842, 848, 857, 862, 865, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 911, 913, 915, 918, 919, 932, 934, 946, 949, 951, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1011, 1014, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "transform_algorithm": [127, 133, 540, 546, 551, 1057], "transform_alpha": [127, 133, 540, 546, 551, 1054], "transform_dur": 297, "transform_func": 277, "transform_list": 872, "transform_max_it": [540, 546, 547, 551, 1051], "transform_method": 421, "transform_n_nonzero_coef": [127, 133, 540, 546, 551], "transform_n_nozero_coef": 133, "transform_output": [259, 270, 324, 476, 911, 1056, 1057], "transformed_grid": 157, "transformedtargetregressor": [2, 109, 191, 218, 396, 407, 417, 602, 603, 606, 1011, 1049, 1051, 1054, 1059, 1060], "transformedtargetregressortransformedtargetregressor": 191, "transformer_": [252, 473], "transformer_list": [108, 417, 872, 875, 1000, 1052, 1053], "transformer_nam": [297, 472], "transformer_tag": [932, 946], "transformer_weight": [104, 472, 475, 872, 1046, 1053], "transformermixin": [2, 252, 297, 386, 398, 473, 1049, 1056, 1057, 1058], "transformers_": [472, 475, 1058, 1059], "transformertag": [2, 932, 946], "transfus": 246, "transit": [55, 354, 388, 410, 1052], "transitive_target": 55, "translat": [109, 386, 426, 536, 623, 882, 883, 899, 1007, 1010, 1034], "transluc": 164, "transpar": [67, 319, 994, 1034], "transpos": [62, 276, 428, 547, 549, 556, 669, 670, 671, 672, 797, 957, 995, 1002, 1010, 1022, 1041, 1055], "transposit": 957, "trapezoid": [2, 283, 715, 716, 1010], "travel": 0, "travers": [366, 1013, 1017, 1059, 1060], "travi": [1041, 1049], "treat": [43, 45, 105, 148, 159, 186, 191, 218, 285, 323, 328, 333, 339, 367, 384, 396, 398, 413, 423, 424, 450, 570, 571, 597, 598, 600, 616, 617, 641, 647, 654, 680, 683, 738, 739, 747, 763, 792, 793, 796, 797, 882, 883, 889, 890, 893, 894, 898, 901, 902, 904, 913, 914, 966, 1000, 1002, 1006, 1010, 1011, 1017, 1020, 1024, 1026, 1045, 1053, 1057, 1058], "treatment": [114, 190, 378, 415, 421, 477, 482, 1026], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 90, 97, 128, 137, 140, 141, 142, 144, 148, 149, 150, 151, 152, 155, 156, 158, 159, 160, 162, 173, 183, 186, 192, 194, 202, 226, 227, 239, 252, 253, 254, 255, 256, 273, 280, 282, 294, 296, 297, 300, 302, 310, 317, 318, 322, 327, 328, 330, 367, 371, 379, 381, 390, 397, 398, 401, 414, 415, 416, 422, 427, 445, 449, 450, 451, 452, 453, 454, 456, 458, 465, 471, 504, 505, 509, 513, 523, 524, 528, 553, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 640, 641, 642, 643, 667, 697, 701, 711, 712, 720, 751, 757, 797, 799, 815, 830, 836, 837, 839, 848, 853, 854, 855, 856, 857, 858, 859, 861, 863, 864, 865, 874, 877, 886, 921, 922, 923, 924, 925, 926, 927, 952, 1000, 1007, 1010, 1011, 1016, 1017, 1029, 1030, 1031, 1032, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "tree_": [326, 362, 366, 858, 921, 922, 923, 924, 1058], "tree_copi": [853, 854], "tree_disp": 256, "tree_importance_sorted_idx": 194, "tree_optim": 294, "tree_preprocessor": [159, 218], "tree_stat": [853, 854], "treelit": 1029, "trein": 1044, "tremend": [323, 423], "trend": [156, 180, 192, 248, 313, 1034, 1048], "trent": [1034, 1047], "trevor": [173, 205, 331, 381, 637, 665, 730, 732, 733, 1000, 1006, 1022, 1045, 1046, 1049, 1050, 1051, 1053], "trevorstephen": [1045, 1047], "tri": [101, 132, 238, 306, 351, 372, 386, 389, 396, 399, 414, 457, 459, 461, 640, 641, 642, 679, 701, 707, 709, 711, 823, 1015, 1043, 1049, 1053, 1059], "triag": [0, 384, 387, 399], "trial": [43, 281, 455, 457, 468, 680, 806, 807, 1006, 1047], "triangl": [398, 421, 451, 455, 467, 708, 1008, 1013], "triangular": [416, 471, 620, 1007], "tribe": 379, "trick": [2, 175, 251, 307, 351, 360, 370, 373, 387, 396, 417, 591, 598, 652, 681, 1002, 1003, 1014, 1024, 1025, 1036, 1042, 1050, 1058], "tricki": [414, 1007], "trickiest": 384, "trigg": 575, "trigger": [105, 106, 384, 388, 398, 410, 417, 870, 871, 873, 874, 939, 940, 957, 1006, 1049, 1055, 1056], "triglycerid": [173, 381], "trim": [233, 416, 853, 854], "trimeta": 1052, "trinh": 1056, "tripl": 389, "triplet": 518, "tripramudya": 1057, "trishnendu": 1049, "tristan": 1006, "triu": 51, "trivial": [48, 220, 270, 362, 384, 416, 827, 915, 918, 1007, 1030, 1041], "troillard": [1057, 1058], "tropp": [544, 550], "troubl": [66, 424], "troubleshoot": 424, "troyanskaya": [637, 1000], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 57, 63, 64, 66, 68, 70, 72, 79, 84, 85, 88, 89, 90, 92, 93, 95, 98, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 122, 124, 125, 126, 127, 129, 134, 136, 138, 142, 144, 148, 150, 151, 153, 154, 155, 156, 159, 160, 162, 164, 165, 169, 172, 175, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 203, 205, 206, 207, 209, 211, 213, 214, 215, 218, 220, 221, 222, 225, 226, 232, 233, 234, 236, 238, 241, 242, 245, 246, 249, 251, 252, 253, 254, 255, 258, 259, 261, 264, 266, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 302, 303, 306, 310, 312, 313, 314, 315, 318, 322, 323, 324, 326, 328, 330, 331, 332, 333, 334, 337, 339, 340, 341, 350, 351, 353, 354, 355, 358, 359, 360, 362, 363, 366, 367, 371, 372, 377, 379, 380, 382, 384, 385, 386, 389, 390, 391, 393, 397, 398, 401, 407, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 433, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 467, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 528, 531, 532, 533, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 720, 721, 722, 723, 724, 727, 728, 729, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 747, 748, 749, 750, 751, 752, 759, 760, 761, 763, 765, 770, 776, 778, 787, 791, 792, 793, 794, 795, 796, 797, 798, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 827, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 932, 933, 937, 938, 939, 940, 946, 951, 952, 957, 958, 970, 971, 974, 975, 979, 980, 981, 982, 990, 995, 997, 998, 999, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1029, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "true_": [205, 546, 645], "true_coef": [190, 203, 213, 655, 656, 661, 669, 670, 671, 690, 691, 692], "true_cov": [477, 479, 480, 486], "true_den": 302, "true_fac": 254, "true_fun": 291, "true_h": 330, "true_k": 359, "true_label": [332, 336, 337], "true_nam": 45, "true_relev": [735, 765], "true_w": 330, "true_weight": 198, "trujillo": [1055, 1056], "truli": [279, 373, 721, 1010], "truncat": [2, 107, 157, 239, 393, 543, 544, 548, 549, 550, 553, 685, 687, 735, 765, 806, 862, 926, 957, 999, 1009, 1010, 1024, 1035, 1036, 1047, 1049], "truncate_mod": 76, "truncatedsvd": [2, 157, 239, 359, 421, 543, 544, 548, 549, 550, 701, 872, 875, 1043, 1048, 1052, 1053, 1055, 1059], "truong": 1047, "trust": [0, 51, 63, 105, 106, 114, 138, 143, 145, 146, 155, 156, 159, 162, 170, 180, 191, 192, 193, 194, 200, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 399, 410, 414, 1055], "trustworthi": [2, 330, 1049, 1050, 1055, 1056, 1057, 1058], "truth": [2, 27, 58, 68, 75, 80, 84, 92, 93, 96, 111, 115, 118, 127, 131, 155, 183, 203, 212, 218, 219, 255, 267, 279, 359, 398, 416, 712, 713, 714, 717, 721, 722, 723, 724, 726, 727, 730, 732, 733, 735, 737, 738, 739, 743, 745, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 792, 793, 794, 795, 796, 799, 800, 804, 805, 1010, 1049, 1055], "truthi": [2, 970], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 88, 105, 106, 127, 138, 143, 144, 145, 146, 147, 154, 155, 156, 159, 162, 170, 175, 180, 181, 187, 190, 191, 192, 193, 196, 198, 200, 207, 246, 247, 248, 252, 256, 257, 258, 259, 262, 263, 266, 270, 274, 276, 277, 283, 288, 290, 294, 297, 310, 315, 323, 327, 328, 330, 331, 333, 338, 349, 354, 358, 359, 366, 379, 382, 383, 384, 386, 389, 390, 392, 396, 398, 402, 404, 407, 410, 416, 419, 420, 423, 424, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 512, 576, 586, 598, 667, 682, 684, 698, 702, 808, 809, 812, 813, 821, 823, 831, 834, 835, 836, 838, 891, 893, 896, 898, 899, 900, 901, 902, 903, 904, 913, 932, 938, 993, 999, 1006, 1007, 1016, 1025, 1026, 1030, 1033, 1034, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "tr\u00e9segni": [0, 1043], "ts_cv": [43, 52, 154], "tscv": [420, 830], "tseng": 416, "tsetogl": 1056, "tsilhouett": 93, "tslearn": 1029, "tsne": [2, 188, 238, 239, 240, 242, 243, 298, 299, 330, 398, 430, 440, 505, 697, 698, 699, 857, 861, 874, 983, 1007, 1013, 1031, 1044, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "tsne_param": 297, "tsoumaka": [729, 743, 749, 1010], "tspeng": [1056, 1057], "tsuga": 1054, "tsujii": 1024, "tsukada": 1053, "tsuruoka": 1024, "tsutomu": 1052, "tt": [160, 271, 473], "ttang131": 1051, "ttime": 93, "tttthomasssss": 1045, "tube": [919, 1025], "tue": [43, 52, 154, 192, 1047], "tuft": 457, "tuhin": 1059, "tuk": 1059, "tulio": [1049, 1050], "tulken": 1051, "tulloch": [1044, 1045], "tumor": [173, 381, 415], "tune": [2, 43, 64, 79, 90, 105, 129, 138, 144, 154, 172, 173, 175, 186, 188, 192, 207, 222, 223, 235, 242, 246, 255, 268, 269, 279, 280, 281, 283, 294, 299, 318, 339, 347, 351, 354, 358, 367, 371, 372, 373, 397, 398, 411, 414, 416, 420, 423, 425, 426, 460, 470, 505, 560, 568, 569, 570, 603, 622, 623, 624, 626, 628, 629, 631, 632, 634, 652, 667, 668, 699, 703, 709, 711, 727, 751, 793, 796, 808, 809, 825, 831, 836, 839, 869, 874, 893, 911, 918, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1016, 1024, 1025, 1029, 1031, 1036, 1041, 1055, 1057, 1059, 1060], "tuned_classifi": 334, "tuned_model": [270, 290], "tuned_model_coef": 290, "tuned_param": 46, "tuned_paramet": [111, 164, 274], "tunedthresholdclassifiercv": [2, 270, 290, 415, 808, 1059], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 270, "tupl": [47, 83, 84, 90, 133, 192, 236, 377, 378, 379, 398, 420, 428, 441, 459, 461, 472, 475, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 517, 519, 520, 521, 522, 523, 531, 542, 570, 571, 576, 577, 578, 579, 591, 592, 593, 596, 597, 598, 600, 636, 641, 642, 643, 720, 721, 728, 751, 790, 792, 806, 809, 823, 836, 853, 854, 872, 873, 883, 884, 888, 891, 899, 903, 915, 916, 917, 918, 919, 928, 940, 941, 943, 948, 949, 950, 951, 975, 976, 993, 998, 1017, 1047, 1048, 1052, 1053, 1054, 1059], "tur": 1059, "turn": [2, 30, 43, 68, 111, 186, 187, 191, 203, 233, 234, 250, 276, 301, 334, 360, 371, 372, 373, 379, 396, 398, 399, 416, 417, 419, 421, 424, 425, 426, 590, 591, 598, 616, 617, 842, 846, 915, 918, 942, 1000, 1004, 1012, 1015, 1020, 1034, 1046, 1048, 1049, 1054], "turquois": [128, 132, 133, 153, 224, 235, 241, 263, 264, 283], "tushar": 1059, "tutori": [114, 164, 165, 166, 207, 220, 236, 276, 384, 385, 390, 392, 410, 416, 460, 470, 700, 1025, 1036, 1044], "tuveri": 1056, "tuzova": 1049, "tv": 93, "tw": [196, 378, 495, 517, 518, 667, 1025], "tweak": [2, 115, 252, 420, 975, 1009, 1052], "tweedi": [2, 188, 197, 218, 472, 505, 561, 657, 678, 689, 715, 733, 754, 756, 758, 759, 761, 839, 874, 877, 878, 886, 893, 1006, 1031, 1051, 1052, 1054], "tweedie_pow": 236, "tweedieregressor": [2, 43, 327, 330, 657, 678, 1006, 1052, 1055, 1056], "tweet": 1034, "twelfth": 705, "twenti": [57, 249, 381, 413, 416], "twice": [64, 270, 288, 290, 358, 360, 386, 426, 628, 739, 741, 959, 1050, 1058], "twine": 388, "twinx": 339, "twister": 1052, "twitter": 388, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 90, 95, 99, 104, 105, 109, 113, 117, 118, 120, 121, 122, 124, 126, 127, 129, 132, 137, 138, 139, 146, 147, 148, 149, 151, 154, 155, 156, 157, 160, 170, 173, 175, 176, 177, 178, 181, 182, 186, 187, 188, 191, 192, 193, 198, 202, 203, 205, 207, 208, 209, 214, 218, 219, 220, 226, 227, 230, 235, 236, 240, 242, 243, 245, 250, 252, 253, 255, 261, 262, 263, 265, 266, 267, 270, 271, 273, 277, 283, 294, 300, 302, 305, 306, 308, 310, 317, 319, 322, 326, 327, 329, 330, 334, 338, 343, 344, 347, 348, 349, 351, 355, 358, 359, 360, 363, 367, 377, 378, 379, 380, 381, 382, 384, 386, 388, 390, 391, 392, 396, 398, 399, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 465, 467, 472, 477, 478, 479, 480, 481, 482, 483, 484, 496, 498, 499, 501, 502, 503, 505, 507, 509, 510, 511, 512, 513, 514, 516, 519, 523, 528, 531, 545, 547, 549, 553, 556, 558, 559, 562, 569, 579, 590, 593, 599, 600, 601, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 619, 620, 629, 630, 633, 637, 640, 641, 648, 652, 654, 679, 680, 682, 701, 708, 712, 713, 714, 721, 724, 725, 728, 730, 731, 732, 733, 740, 741, 744, 745, 747, 750, 752, 763, 764, 766, 772, 773, 780, 783, 786, 787, 788, 789, 790, 794, 795, 803, 804, 805, 806, 842, 853, 854, 855, 856, 857, 859, 861, 863, 864, 865, 870, 871, 877, 878, 885, 886, 887, 888, 907, 908, 909, 913, 914, 921, 923, 924, 972, 988, 989, 995, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "two_d_arrai": 930, "two_d_label": 933, "two_mean": 79, "two_point_correl": [853, 854], "twoclass_output": 140, "twosigmajab": 1049, "twx": 51, "tx": 419, "tx_k": [419, 1004], "txn": 51, "txt": [358, 378, 502, 512], "ty": 419, "ty_k": 419, "tyagi": 1055, "tygert": [544, 550, 957], "tyler": [1048, 1054, 1055, 1056], "type": [2, 46, 52, 88, 89, 100, 103, 104, 114, 120, 122, 133, 147, 148, 150, 180, 187, 188, 190, 191, 192, 196, 203, 218, 220, 247, 252, 257, 259, 260, 262, 263, 266, 267, 270, 271, 277, 282, 283, 285, 286, 287, 290, 294, 307, 323, 333, 351, 358, 360, 366, 367, 372, 377, 378, 379, 381, 384, 387, 388, 389, 390, 396, 397, 402, 404, 410, 413, 417, 424, 440, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 505, 517, 518, 524, 576, 581, 590, 591, 597, 598, 600, 609, 613, 626, 636, 638, 639, 647, 665, 667, 681, 683, 688, 696, 698, 701, 702, 708, 710, 716, 723, 725, 738, 739, 742, 747, 792, 793, 796, 797, 806, 807, 809, 815, 823, 832, 837, 839, 840, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 873, 874, 875, 878, 880, 886, 887, 893, 894, 911, 915, 916, 917, 918, 919, 934, 935, 937, 939, 940, 943, 948, 949, 972, 973, 996, 1000, 1002, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1020, 1022, 1026, 1031, 1033, 1034, 1041, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "type_check": 388, "type_filt": 949, "type_of_target": [2, 398, 880, 894, 1011, 1055, 1056, 1058, 1059], "type_of_target_": 894, "typed_ndarrai": 384, "typeerror": [252, 329, 389, 720, 943, 966, 993, 1048, 1049, 1052, 1054, 1058], "typic": [25, 62, 64, 128, 136, 149, 196, 203, 218, 222, 236, 251, 278, 279, 283, 285, 286, 303, 304, 328, 347, 359, 371, 377, 378, 379, 382, 386, 387, 393, 397, 398, 410, 412, 414, 416, 417, 420, 421, 423, 424, 426, 451, 455, 457, 505, 550, 560, 562, 564, 565, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 638, 647, 649, 652, 663, 664, 665, 680, 691, 692, 721, 880, 887, 891, 894, 956, 957, 962, 966, 969, 994, 999, 1003, 1006, 1007, 1009, 1010, 1011, 1012, 1016, 1018, 1034, 1050, 1054, 1057, 1058], "typo": [384, 399, 407, 1041], "tzu": 1045, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 85, 87, 91, 120, 124, 131, 148, 149, 154, 175, 184, 190, 191, 192, 215, 219, 222, 226, 236, 239, 242, 249, 252, 258, 259, 262, 263, 267, 270, 271, 276, 279, 283, 290, 323, 351, 358, 366, 372, 379, 384, 388, 390, 392, 396, 402, 407, 413, 416, 419, 421, 423, 424, 439, 471, 473, 490, 491, 492, 540, 546, 554, 555, 559, 561, 563, 565, 567, 569, 571, 574, 577, 579, 597, 598, 600, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 690, 693, 698, 702, 713, 729, 749, 764, 846, 847, 856, 864, 871, 893, 907, 914, 916, 919, 922, 924, 957, 1002, 1004, 1009, 1010, 1017, 1020, 1034, 1038, 1051], "u2uwz2": [173, 381], "u_": [413, 490, 491, 492], "u_1": [413, 1002], "u_2": [413, 1002], "u_i": [416, 490, 491, 492, 764], "u_init": 552, "u_k": [419, 421], "uai": 1022, "ubuntu": [371, 382, 390, 392], "uchida": 1051, "uci": [47, 173, 270, 322, 378, 381, 509, 511, 513, 519], "ucl": 1023, "ucla": 1006, "udi": 1041, "udit": 1055, "ufmay": 1053, "ufunc": [191, 1058], "ugli": [227, 305, 308, 343], "ugo": 1055, "ugurcaliskan": 1045, "ugurthemast": [1044, 1045], "uhmann": 1054, "uieda": 1054, "uint": 1052, "uint32": [379, 506], "uint8": [88, 127, 378, 506, 515, 516, 1053], "uk": 1023, "ulloa": 1047, "ulrik": [416, 460, 470, 700], "ulterior": 52, "ultim": [90, 242, 385], "umar": [1049, 1050], "umass": [45, 57, 379], "umberto": 1053, "umbrella": 415, "umpi": 424, "un": [51, 384, 414, 424, 428, 542, 598, 804, 876, 885, 896, 900, 1050], "unabl": [51, 63, 105, 106, 143, 145, 146, 155, 156, 159, 162, 170, 180, 190, 191, 192, 193, 200, 203, 218, 246, 247, 248, 252, 256, 257, 258, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 331, 333, 338, 366, 373, 893, 1020, 1050], "unadjust": [416, 1010, 1053], "unaffect": 1013, "unalt": 1010, "unambigu": [285, 1011, 1047], "unanim": 399, "unavail": [398, 667, 668, 970, 1048, 1054], "unbalanc": [2, 188, 279, 342, 345, 348, 420, 521, 640, 918, 944, 945, 999, 1024, 1031], "unbias": [111, 414, 418, 421, 445, 559, 665, 681, 683, 696, 1006], "unbound": [72, 1009, 1055, 1059], "uncalibr": [61, 62, 63, 445], "uncent": 200, "uncertain": [276, 337, 383], "uncertainti": [62, 154, 175, 182, 198, 278, 414, 416, 576, 577, 652, 873, 1000, 1022], "uncertainty_index": [336, 337], "unchang": [181, 191, 236, 283, 423, 440, 445, 450, 451, 452, 453, 454, 455, 457, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 619, 620, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 701, 772, 808, 810, 811, 816, 818, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 860, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 998, 1013, 1049, 1055, 1057], "unclaim": 387, "unclear": [383, 384, 510], "unclust": 454, "uncommon": [418, 667, 913, 1025], "uncompress": [47, 517, 518], "unconstrain": [154, 156, 192, 327, 333, 379, 1024], "uncorrect": [276, 604, 607], "uncorrel": [2, 282, 380, 537, 543, 550, 1010], "uncorrupt": 44, "uncov": [134, 704], "undefin": [52, 279, 398, 721, 738, 747, 792, 978, 1010, 1049, 1053, 1057, 1060], "undefinedmetricwarn": [2, 315, 738, 739, 792, 793, 796, 1050], "under": [2, 43, 46, 50, 61, 62, 64, 76, 102, 111, 112, 131, 148, 151, 192, 206, 218, 245, 255, 276, 283, 285, 286, 318, 332, 378, 384, 386, 388, 390, 392, 398, 402, 410, 414, 416, 418, 420, 421, 424, 425, 454, 459, 461, 478, 479, 480, 481, 482, 483, 484, 500, 541, 548, 550, 552, 663, 664, 665, 711, 715, 716, 717, 724, 751, 763, 797, 798, 806, 807, 858, 965, 1006, 1007, 1008, 1010, 1013, 1020, 1024, 1025, 1026, 1029, 1030, 1041, 1043, 1044, 1046, 1049, 1053], "underdetermin": 203, "underestim": [52, 151, 192, 218, 236, 276, 384], "underfit": [43, 70, 151, 175, 188, 193, 219, 222, 268, 292, 312, 323, 354, 423, 666, 809, 812, 813, 823, 835, 836, 873, 888, 1005, 1006, 1031], "underflow": [1049, 1054], "undergo": 282, "undergrad": 1034, "underli": [64, 91, 113, 158, 173, 191, 194, 219, 221, 222, 252, 270, 281, 301, 302, 351, 365, 372, 384, 396, 398, 401, 407, 412, 414, 416, 418, 420, 421, 422, 423, 425, 426, 445, 459, 460, 461, 470, 472, 473, 479, 480, 486, 533, 564, 565, 573, 574, 576, 577, 578, 579, 602, 603, 606, 611, 667, 668, 674, 677, 682, 684, 689, 700, 704, 808, 809, 812, 813, 823, 831, 834, 835, 836, 841, 842, 843, 844, 845, 846, 847, 856, 858, 910, 913, 921, 922, 923, 924, 974, 998, 1006, 1007, 1011, 1016, 1023, 1025, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1057, 1058, 1059, 1060], "underrepres": 384, "underscor": [246, 360, 386, 398, 993, 1041, 1051, 1054], "underset": [421, 1006, 1013, 1026], "understand": [43, 48, 52, 76, 138, 180, 188, 192, 252, 270, 271, 274, 290, 328, 329, 344, 351, 358, 361, 362, 367, 383, 384, 385, 390, 396, 401, 416, 423, 424, 513, 839, 870, 871, 921, 922, 923, 924, 927, 999, 1000, 1007, 1009, 1026, 1028, 1029, 1031, 1034, 1041, 1055], "understood": [277, 384, 416, 966], "undertak": 396, "undesir": [92, 176, 426, 831], "undistinguish": 420, "undistort": 127, "undo": [277, 883, 1045], "undocu": 1048, "unequ": [92, 1049], "uneth": 190, "uneven": [87, 271, 416, 420], "unevenli": [92, 218, 271], "unexpect": [92, 252, 367, 384, 389, 392, 402, 410, 544, 705, 1010, 1025, 1043, 1049, 1050, 1053, 1055, 1057, 1059], "unexpectedli": [398, 1049], "unfair": 367, "unfinish": [383, 384], "unfit": [2, 91, 417, 441, 472, 578, 579, 611, 620, 1049, 1051, 1058], "unfold": [129, 387, 1007], "unfortun": [151, 190, 191, 236, 392, 396, 423, 517, 518], "unhandl": 1050, "unhelp": 384, "unicod": [360, 424, 495, 512, 591, 597, 598, 600, 974, 1041, 1049, 1053], "unicodedata": [597, 598, 600], "unicodedecodeerror": [424, 597, 598, 600], "unifi": [294, 385, 393, 396, 397, 423, 646, 1029, 1041], "unifom": 300, "uniform": [2, 58, 67, 72, 88, 150, 151, 155, 169, 176, 181, 184, 198, 199, 232, 243, 245, 248, 284, 300, 303, 304, 309, 312, 318, 320, 321, 324, 330, 332, 346, 386, 389, 410, 416, 446, 447, 560, 578, 579, 619, 620, 637, 648, 658, 659, 663, 677, 685, 686, 687, 708, 730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 799, 800, 813, 821, 823, 848, 849, 852, 855, 856, 863, 864, 878, 890, 892, 902, 944, 959, 999, 1000, 1009, 1010, 1013, 1047, 1049, 1051, 1055, 1057, 1060], "uniform_averag": [439, 473, 490, 491, 492, 563, 565, 567, 569, 571, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 730, 732, 737, 754, 755, 757, 759, 760, 762, 794, 799, 800, 846, 847, 856, 864, 871, 914, 916, 919, 922, 924, 1010, 1050, 1060], "uniform_labelings_scor": 72, "uniformli": [72, 144, 151, 168, 245, 261, 326, 386, 525, 526, 527, 560, 651, 813, 821, 823, 892, 999, 1000, 1010, 1013, 1020, 1045, 1050], "unigram": [277, 379, 424, 597, 598, 600, 1048], "unilev": 51, "unimod": [245, 482], "unimport": [425, 1018], "uninform": [62, 64, 324, 380, 389, 424, 999, 1006, 1049], "uniniti": 392, "uninstal": 382, "unintention": 1020, "unintuit": 92, "union": [104, 191, 417, 747, 763, 872, 1048], "union_not_memb": 191, "uniqu": [2, 43, 61, 66, 77, 82, 83, 92, 93, 98, 102, 107, 145, 146, 152, 153, 154, 191, 193, 203, 233, 236, 263, 285, 306, 323, 324, 332, 339, 358, 359, 360, 378, 386, 393, 398, 416, 417, 420, 423, 424, 448, 458, 462, 464, 472, 475, 505, 558, 559, 560, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 619, 642, 643, 644, 675, 677, 685, 706, 718, 720, 763, 791, 809, 811, 823, 836, 841, 842, 845, 851, 860, 863, 865, 870, 872, 884, 886, 887, 894, 897, 913, 915, 921, 922, 923, 924, 944, 957, 972, 973, 1006, 1011, 1020, 1034, 1049, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "unique_label": [2, 84, 90, 359, 386, 393], "unit": [2, 63, 104, 113, 191, 196, 218, 236, 302, 314, 317, 334, 359, 379, 384, 386, 390, 392, 393, 421, 424, 428, 472, 497, 498, 528, 533, 541, 542, 543, 550, 551, 598, 599, 600, 616, 617, 620, 667, 668, 685, 694, 708, 779, 860, 869, 870, 871, 877, 883, 885, 889, 891, 893, 899, 900, 901, 903, 904, 913, 914, 1006, 1008, 1009, 1010, 1015, 1020, 1026, 1045, 1049, 1055, 1056], "unit_eig_vec": 261, "unit_vari": [891, 903, 1053], "unitari": 957, "uniti": 30, "univ": [698, 702, 1007], "univ_select": 108, "univari": [2, 18, 48, 49, 71, 106, 108, 167, 168, 170, 188, 201, 217, 233, 289, 342, 376, 416, 417, 424, 453, 513, 534, 539, 601, 604, 605, 607, 608, 609, 611, 614, 615, 616, 617, 618, 636, 637, 638, 639, 654, 809, 814, 835, 839, 873, 874, 883, 888, 892, 893, 913, 918, 1006, 1025, 1027, 1031, 1032, 1036, 1041, 1047], "univers": [0, 183, 191, 358, 379, 381, 387, 416, 421, 424, 599, 797, 848, 852, 908, 1006, 1008, 1010, 1012], "unix": 424, "unknown": [52, 91, 191, 252, 276, 336, 338, 373, 379, 398, 410, 413, 424, 880, 886, 887, 972, 1009, 1020, 1045, 1049, 1053, 1054], "unknown_typ": 410, "unknown_v": 159, "unknown_valu": [148, 159, 193, 255, 323, 887, 1020, 1053, 1055, 1056], "unlabel": [38, 45, 253, 328, 336, 337, 338, 340, 341, 398, 416, 908, 909, 910, 1009, 1053], "unlabeled_indic": 337, "unlabeled_set": 336, "unless": [190, 252, 262, 267, 384, 387, 396, 398, 410, 414, 416, 419, 427, 445, 452, 454, 456, 458, 460, 465, 466, 469, 472, 475, 480, 497, 505, 517, 518, 540, 544, 545, 546, 548, 551, 552, 554, 555, 556, 557, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 579, 603, 611, 616, 617, 619, 620, 641, 643, 648, 655, 656, 660, 661, 662, 664, 666, 667, 668, 670, 672, 674, 675, 677, 685, 688, 697, 698, 699, 700, 701, 702, 703, 718, 723, 783, 787, 790, 809, 812, 813, 815, 823, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 855, 856, 859, 861, 863, 864, 866, 867, 870, 871, 872, 875, 894, 898, 899, 901, 902, 903, 904, 908, 909, 921, 922, 923, 924, 932, 935, 939, 940, 957, 1006, 1009, 1011, 1041, 1043, 1047, 1049, 1052, 1053, 1058, 1059], "unlik": [90, 91, 144, 191, 192, 238, 240, 266, 317, 345, 384, 386, 390, 396, 398, 407, 410, 418, 420, 421, 424, 454, 458, 544, 659, 660, 663, 664, 665, 691, 692, 794, 830, 853, 854, 893, 904, 916, 1006, 1009, 1010, 1017, 1025, 1041, 1047], "unlimit": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "unlucki": 367, "unmaintain": 1041, "unmarri": 191, "unmeaning": 1048, "unmix": [125, 428, 542], "unmixing_matrix": 542, "unmodifi": [386, 398], "unnecessari": [144, 261, 389, 436, 451, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 714, 1013, 1020, 1030, 1034, 1044, 1046, 1051, 1052, 1054, 1057], "unnecessarili": [242, 1048, 1051], "unnorm": [398, 545, 1007, 1047, 1048], "unobserv": [154, 190, 191, 421], "unord": [416, 423, 1020], "unpack": 386, "unpen": [414, 657, 678, 689, 1006], "unpickl": [2, 398, 585, 853, 854, 1047, 1053, 1057], "unpleas": 1043, "unpract": 1009, "unprefix": 1047, "unprocess": [458, 597, 598, 600], "unprotect": 975, "unprun": [566, 567, 573, 574, 921, 922, 923, 924], "unquot": 236, "unrealist": 379, "unreason": [236, 420], "unreg": 352, "unregular": [886, 909, 1050], "unrel": [323, 372, 384, 389, 392, 424, 524], "unreli": [270, 417], "unrepresent": 928, "unrestrict": 502, "unrol": 242, "unrot": 134, "unsaf": 543, "unsampl": 1002, "unscal": [317, 322, 1006, 1010, 1049, 1055], "unscaled_clf": 322, "unseen": [111, 149, 170, 207, 222, 226, 289, 303, 351, 373, 376, 386, 397, 398, 416, 420, 859, 890, 902, 1001, 1010, 1016, 1018, 1020, 1026, 1044, 1049, 1053], "unseen_featur": [424, 590], "unset": [372, 398, 1049], "unsetmetadatapassederror": 407, "unshad": 421, "unshifft": 686, "unshift": 917, "unsign": [88, 128, 379, 591, 974], "unsmooth": 422, "unsort": [1013, 1042, 1045, 1049], "unspecifi": [608, 609, 1007], "unstabl": [74, 101, 191, 412, 416, 418, 419, 698, 702, 956, 957, 1026, 1045, 1046, 1048, 1053, 1055, 1057], "unstack": [236, 279], "unstructur": [53, 71, 74, 75, 76, 82, 188, 242, 314, 416, 449, 453, 471, 512, 539, 866, 1022, 1031, 1034, 1045], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 84, 106, 107, 118, 124, 143, 157, 245, 253, 303, 304, 346, 358, 359, 367, 376, 379, 386, 397, 398, 416, 419, 421, 422, 423, 424, 425, 440, 450, 453, 541, 543, 545, 546, 548, 551, 552, 558, 572, 575, 576, 578, 579, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 637, 639, 643, 644, 647, 648, 649, 650, 651, 686, 809, 812, 813, 815, 823, 832, 837, 840, 855, 856, 859, 861, 862, 863, 864, 869, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 905, 906, 910, 917, 1007, 1010, 1016, 1023, 1032, 1036, 1041, 1044, 1054, 1058], "unsupport": [407, 410, 502, 1049, 1054], "unsur": 914, "untangl": 129, "untar": 47, "unterthin": [1044, 1045, 1046], "until": [90, 173, 226, 288, 328, 330, 389, 398, 399, 413, 416, 420, 425, 517, 518, 566, 567, 568, 569, 573, 574, 575, 602, 655, 656, 661, 662, 667, 668, 669, 670, 671, 672, 675, 676, 677, 680, 685, 686, 687, 703, 806, 807, 812, 813, 870, 871, 910, 913, 921, 922, 923, 924, 984, 999, 1006, 1007, 1015, 1023, 1026, 1044, 1048, 1049, 1055, 1060], "untransform": [351, 472, 475, 1021], "untru": 1010, "untrust": 410, "untun": [151, 334], "unus": [120, 130, 192, 215, 238, 240, 471, 588, 772, 780, 999, 1007, 1041, 1049, 1051, 1052, 1054, 1056], "unusu": [64, 413, 1016, 1020, 1049], "unveil": 1047, "unvendor": 1049, "unwant": [219, 358], "unweight": [187, 231, 471, 656, 662, 687, 716, 722, 738, 739, 747, 792, 793, 796, 797, 848, 849, 850, 851, 852, 1000], "unwieldi": 884, "uoa": 906, "up": [2, 47, 50, 72, 79, 81, 82, 83, 87, 90, 92, 97, 104, 113, 114, 122, 136, 143, 154, 187, 191, 192, 198, 203, 211, 219, 234, 235, 263, 270, 278, 281, 297, 310, 315, 318, 323, 330, 334, 337, 344, 351, 354, 358, 360, 373, 378, 379, 384, 390, 391, 392, 393, 396, 398, 399, 414, 416, 421, 423, 424, 451, 455, 456, 457, 458, 460, 464, 467, 468, 469, 517, 518, 545, 558, 559, 566, 567, 568, 569, 570, 571, 573, 574, 575, 619, 636, 641, 642, 648, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 669, 670, 671, 672, 673, 690, 691, 692, 693, 701, 714, 778, 806, 807, 811, 812, 813, 815, 837, 887, 888, 891, 903, 921, 922, 923, 924, 927, 957, 960, 961, 999, 1002, 1006, 1007, 1010, 1013, 1020, 1024, 1025, 1030, 1033, 1034, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "upadhyai": [1047, 1048, 1049, 1050], "upcast": [1051, 1055], "upcom": [180, 382], "updat": [47, 79, 97, 138, 144, 153, 250, 326, 360, 383, 384, 387, 392, 398, 410, 416, 421, 423, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 471, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 823, 827, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 984, 1006, 1013, 1014, 1015, 1024, 1033, 1034, 1042, 1048, 1049, 1050, 1052, 1054, 1056, 1057, 1059, 1060], "update_environments_and_lock_fil": 384, "update_from": 304, "update_func": 304, "update_h": 556, "update_layout": [144, 277], "update_legend_marker_s": 304, "update_terminal_region": 1050, "upgrad": [326, 327, 328, 329, 330, 331, 332, 333, 334, 402, 1030, 1041, 1046, 1049], "upload": [378, 382, 388, 396, 680], "upload_d": 378, "upon": [236, 243, 252, 310, 379, 384, 396, 398, 410, 570, 571, 636, 639, 680, 798, 806, 807, 853, 854, 999, 1006, 1026, 1055], "upper": [43, 46, 48, 61, 106, 109, 112, 113, 114, 126, 140, 141, 142, 150, 151, 152, 153, 159, 161, 169, 179, 181, 184, 191, 212, 218, 224, 225, 228, 232, 235, 236, 249, 253, 254, 275, 276, 277, 290, 302, 303, 313, 322, 339, 346, 349, 351, 353, 416, 422, 471, 597, 598, 600, 604, 622, 623, 624, 626, 628, 629, 631, 632, 634, 641, 642, 644, 646, 659, 663, 686, 744, 797, 886, 887, 915, 916, 917, 943, 1009, 1010, 1013, 1020, 1024, 1025, 1026, 1049], "upperbound": 743, "uppercas": [398, 1054], "uppercase_initi": 424, "upperlimit": 713, "upright": 379, "upstream": [371, 384, 388, 392, 396, 1020, 1050], "upward": [458, 464], "ur": 1052, "urbanowicz": 1010, "urbanowicz2015": 1010, "urcrnrlat": [50, 310], "urcrnrlon": [50, 310], "uri": 55, "url": [51, 52, 55, 173, 378, 381, 386, 388, 500], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1059, "urvang": [1049, 1051], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 126, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 214, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 230, 233, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 357, 360, 362, 364, 365, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 391, 393, 397, 398, 399, 401, 402, 403, 404, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 502, 503, 505, 507, 508, 512, 515, 517, 518, 520, 523, 524, 525, 528, 529, 531, 532, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 735, 736, 737, 738, 739, 741, 744, 745, 746, 747, 748, 750, 751, 752, 754, 755, 757, 759, 760, 762, 764, 765, 766, 767, 768, 772, 773, 775, 776, 777, 778, 780, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 935, 938, 939, 940, 942, 945, 947, 952, 954, 956, 957, 961, 962, 965, 966, 967, 969, 972, 976, 978, 980, 981, 983, 985, 986, 987, 993, 998, 999, 1000, 1002, 1003, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "usa": [275, 379, 910, 1000, 1007, 1022, 1023], "usabl": [154, 378, 384, 386, 398, 410, 424, 809, 1041, 1048, 1055, 1056], "usag": [41, 77, 88, 105, 108, 117, 128, 136, 170, 191, 192, 246, 250, 252, 269, 270, 306, 308, 314, 343, 360, 371, 379, 383, 384, 387, 391, 392, 394, 398, 399, 402, 410, 416, 420, 421, 426, 427, 452, 454, 458, 469, 472, 479, 497, 503, 505, 521, 524, 528, 532, 543, 544, 550, 558, 570, 571, 600, 618, 649, 657, 667, 668, 669, 675, 676, 677, 678, 685, 686, 687, 688, 689, 699, 787, 790, 801, 802, 869, 870, 872, 913, 921, 922, 923, 924, 932, 957, 999, 1000, 1002, 1009, 1010, 1011, 1013, 1025, 1032, 1033, 1036, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "usd": 255, "use_encoded_valu": [148, 159, 193, 255, 323, 887, 1020, 1053], "use_group": 271, "use_idf": [421, 424, 599, 600], "usecas": [327, 330, 332, 416, 571], "useless": [54, 147, 279, 390, 425, 524, 537, 667, 721, 1006, 1020, 1050], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 90, 103, 124, 144, 152, 184, 188, 191, 194, 205, 238, 252, 266, 273, 283, 285, 294, 297, 303, 304, 307, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 367, 371, 372, 378, 382, 383, 384, 386, 388, 390, 391, 392, 396, 397, 398, 402, 404, 407, 410, 414, 416, 417, 418, 420, 421, 423, 424, 425, 427, 428, 429, 430, 433, 439, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 953, 957, 999, 1000, 1006, 1007, 1009, 1010, 1011, 1013, 1020, 1024, 1029, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "user_guid": 43, "user_r": 417, "userguid": 1048, "usernam": 402, "userscript": 392, "userwarn": [79, 97, 246, 389, 721, 1020, 1047, 1049, 1054, 1059], "ushtanit": [1053, 1054], "using_kernels_tut": 166, "usp": 44, "usr": 382, "usual": [43, 52, 75, 111, 112, 114, 150, 151, 153, 159, 190, 192, 204, 218, 219, 269, 270, 273, 276, 285, 286, 290, 318, 329, 347, 367, 371, 372, 382, 384, 386, 388, 392, 396, 397, 398, 402, 407, 413, 416, 417, 420, 421, 423, 424, 425, 458, 464, 547, 549, 551, 556, 568, 569, 616, 617, 639, 649, 667, 668, 675, 676, 677, 685, 686, 687, 701, 735, 767, 815, 837, 841, 913, 930, 957, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1020, 1024, 1025, 1026, 1056], "utc": 1010, "utf": [358, 360, 424, 495, 512, 591, 597, 598, 600], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 83, 90, 91, 96, 136, 138, 152, 159, 194, 218, 226, 234, 240, 248, 252, 254, 264, 282, 284, 297, 319, 326, 339, 347, 351, 358, 372, 378, 379, 384, 385, 386, 387, 396, 397, 398, 412, 415, 416, 417, 420, 421, 424, 445, 451, 452, 455, 457, 461, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 542, 543, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 586, 590, 591, 597, 599, 600, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 699, 808, 809, 810, 811, 816, 818, 827, 831, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 858, 860, 863, 864, 870, 871, 873, 876, 878, 879, 880, 885, 892, 893, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1005, 1008, 1010, 1011, 1020, 1021, 1029, 1034, 1036, 1041, 1042, 1044, 1045, 1047, 1048], "utilis": 1047, "utkarsh": [1047, 1048, 1049, 1050], "utl": 425, "utstat": 653, "uttam": 1054, "uv": [124, 421], "uw": [173, 381, 1053], "uwha": [1054, 1055], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 82, 84, 90, 93, 104, 109, 110, 113, 115, 116, 117, 124, 126, 127, 131, 142, 144, 145, 146, 151, 153, 164, 169, 175, 188, 189, 194, 197, 207, 216, 217, 218, 219, 222, 223, 227, 233, 242, 249, 262, 263, 266, 267, 268, 272, 292, 294, 308, 324, 326, 344, 355, 359, 367, 372, 376, 381, 384, 390, 392, 398, 412, 413, 414, 418, 419, 421, 424, 439, 449, 453, 460, 470, 471, 472, 473, 478, 481, 482, 483, 484, 485, 490, 491, 492, 505, 521, 533, 539, 540, 546, 550, 554, 555, 559, 561, 563, 565, 567, 569, 571, 573, 574, 577, 579, 590, 598, 602, 603, 609, 615, 620, 639, 640, 643, 644, 648, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 685, 687, 688, 697, 704, 708, 710, 713, 726, 745, 746, 748, 763, 764, 766, 797, 804, 809, 814, 821, 823, 835, 839, 841, 842, 843, 846, 847, 848, 856, 864, 866, 869, 871, 873, 874, 877, 880, 886, 887, 888, 893, 894, 897, 907, 913, 914, 915, 916, 918, 919, 922, 924, 928, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1015, 1018, 1020, 1024, 1025, 1027, 1031, 1036, 1041, 1044, 1045, 1046, 1049, 1051, 1052, 1055, 1056, 1059], "v0": [479, 480, 486, 521, 597, 598, 600, 809, 823, 872, 875, 1042, 1049, 1050, 1051], "v1": [270, 331, 378, 402, 570, 571, 806, 807, 1053, 1056, 1057, 1058, 1059], "v10": 270, "v11": 270, "v12": 270, "v13": 270, "v14": 270, "v15": 270, "v16": 270, "v17": 270, "v18": 270, "v19": 270, "v2": [270, 379, 506, 673, 694, 695, 1006], "v20": 270, "v21": 270, "v22": 270, "v23": 270, "v24": 270, "v25": 270, "v26": 270, "v27": 270, "v28": 270, "v3": 270, "v4": 270, "v5": [270, 1049], "v6": 270, "v7": 270, "v8": 270, "v9": 270, "v_": [413, 424], "v_1": 413, "v_2": 413, "v_i": 1015, "v_ih_j": 1015, "v_init": 552, "v_j": [416, 764, 1015], "v_k": [419, 421, 540, 546, 554, 555], "v_measur": [745, 804], "v_measure_scor": [2, 57, 72, 73, 84, 93, 332, 359, 416, 726, 745, 746, 766, 1010, 1050], "v_new": 869, "va": [47, 149, 171, 287, 305, 307, 353], "vac": 294, "vacaliuc": [1049, 1050], "vacat": 379, "vachan": 1052, "vadim": [1049, 1053, 1054], "vaerenbergh": [1056, 1057], "vaggi": [1043, 1044], "vaillant": 1053, "val": [107, 230, 276, 959], "val_errors_with": 149, "val_errors_without": 149, "val_pr": 149, "val_scor": 150, "vale": 1051, "valencia": [1055, 1057], "valentin": [1044, 1046, 1056, 1057], "valero": 51, "valgrind": 387, "valid": [2, 47, 52, 53, 63, 64, 89, 90, 91, 92, 105, 106, 108, 109, 111, 115, 131, 136, 142, 144, 147, 148, 149, 150, 151, 154, 155, 163, 167, 170, 171, 173, 183, 188, 191, 193, 197, 203, 204, 205, 206, 212, 218, 220, 226, 236, 252, 254, 258, 263, 266, 268, 273, 276, 277, 278, 280, 282, 283, 284, 285, 288, 289, 290, 291, 294, 301, 315, 318, 323, 326, 328, 333, 339, 347, 354, 362, 372, 379, 384, 387, 396, 397, 398, 410, 411, 414, 416, 417, 418, 421, 422, 423, 424, 425, 430, 432, 445, 450, 451, 453, 454, 455, 457, 458, 465, 471, 472, 476, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 502, 510, 511, 513, 524, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 584, 586, 591, 592, 598, 602, 603, 606, 611, 641, 643, 647, 648, 649, 650, 651, 652, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 701, 708, 710, 711, 715, 722, 737, 771, 774, 783, 787, 788, 789, 794, 801, 802, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 847, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 879, 885, 893, 905, 906, 908, 909, 911, 913, 915, 918, 920, 921, 922, 923, 924, 930, 932, 939, 940, 941, 942, 943, 951, 964, 966, 969, 993, 994, 995, 996, 997, 998, 1000, 1009, 1010, 1011, 1013, 1014, 1018, 1020, 1022, 1024, 1025, 1026, 1030, 1031, 1034, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "valid_metr": [853, 854, 1013, 1057], "valid_scor": 1005, "validate_data": [2, 1060], "validate_metadata": [252, 966], "validate_separ": 998, "validation_curv": [2, 332, 354, 407, 832, 1005, 1048, 1049, 1050, 1053, 1057, 1060], "validation_fract": [149, 154, 226, 329, 423, 568, 569, 570, 571, 675, 676, 677, 685, 687, 870, 871, 1024, 1049, 1055], "validation_score_": [154, 570, 571], "validation_scores_": [870, 871, 1056], "validationcurvedisplai": [2, 292, 1005, 1057], "validationerror": 1055, "vallei": 323, "vall\u00e9": 1048, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 57, 58, 59, 63, 64, 68, 72, 75, 77, 79, 81, 88, 90, 95, 96, 97, 101, 105, 107, 109, 111, 113, 115, 124, 127, 134, 136, 138, 140, 142, 143, 144, 145, 146, 148, 151, 152, 155, 156, 158, 159, 168, 169, 171, 172, 175, 178, 179, 181, 183, 190, 191, 192, 193, 194, 196, 198, 199, 201, 203, 204, 205, 207, 208, 209, 211, 216, 218, 219, 220, 222, 224, 233, 236, 237, 240, 241, 245, 246, 247, 248, 249, 250, 251, 255, 258, 259, 261, 267, 269, 270, 272, 274, 276, 277, 279, 281, 282, 283, 285, 287, 288, 289, 290, 292, 297, 300, 309, 310, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 328, 334, 339, 347, 351, 352, 354, 358, 359, 360, 362, 367, 371, 372, 373, 376, 377, 378, 379, 381, 385, 386, 387, 389, 390, 391, 393, 396, 397, 398, 401, 402, 407, 413, 414, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 429, 430, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 498, 499, 502, 505, 506, 507, 510, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 778, 780, 783, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 820, 821, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 934, 936, 937, 938, 939, 940, 943, 944, 945, 947, 949, 957, 959, 966, 969, 970, 971, 972, 973, 985, 986, 987, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1023, 1024, 1025, 1031, 1032, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "valuabl": [149, 270, 384, 1000, 1034], "valuat": 423, "value_count": [43, 52, 192, 270, 290, 294], "value_kei": [396, 928], "value_typ": [426, 626], "valueerror": [2, 252, 253, 386, 390, 407, 476, 586, 612, 626, 644, 680, 723, 845, 863, 872, 878, 892, 938, 940, 942, 943, 994, 995, 996, 1020, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "values_format": [706, 1051], "vamsi": 1056, "van": [0, 378, 405, 418, 477, 482, 543, 636, 701, 705, 1000, 1007, 1010, 1016, 1034, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "vandana": 1052, "vander": 199, "vandermond": [219, 1020], "vanderpla": [0, 406, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "vang": 1054, "vanilla": [218, 412, 415, 416, 455, 457, 468, 638], "vanilla_model": 270, "vanilla_model_coef": 290, "vanrel": 1047, "vanschoren": [378, 1053], "vapnik": [602, 603], "var": [117, 118, 141, 173, 199, 276, 381, 385, 425, 650, 654, 915, 916, 917, 918, 919, 1010, 1049], "var_": [543, 851, 893, 1054], "var_smooth": [851, 1049], "varanasi": [1041, 1044], "vardhan": 1045, "varepsilon": [416, 1024, 1025], "vari": [46, 52, 64, 67, 70, 79, 81, 90, 97, 100, 109, 144, 145, 147, 157, 166, 172, 177, 179, 188, 191, 192, 206, 207, 209, 212, 216, 225, 243, 250, 255, 266, 272, 276, 279, 290, 311, 317, 319, 320, 322, 332, 335, 341, 347, 350, 352, 367, 371, 373, 379, 398, 410, 449, 453, 454, 509, 517, 523, 524, 531, 568, 569, 573, 574, 655, 656, 659, 660, 661, 662, 663, 664, 669, 670, 671, 672, 690, 693, 712, 772, 828, 832, 837, 839, 840, 870, 874, 878, 893, 910, 918, 921, 922, 983, 1002, 1005, 1006, 1010, 1013, 1014, 1023, 1026, 1031, 1034, 1048, 1049, 1057], "variabl": [2, 43, 48, 50, 51, 52, 72, 104, 141, 145, 148, 151, 152, 154, 168, 173, 182, 183, 186, 187, 192, 193, 196, 203, 207, 218, 222, 223, 236, 240, 252, 255, 267, 270, 276, 279, 286, 294, 296, 322, 323, 324, 367, 371, 373, 379, 381, 382, 384, 386, 388, 389, 392, 398, 407, 412, 416, 417, 418, 419, 421, 423, 424, 425, 458, 490, 491, 492, 495, 508, 510, 517, 524, 541, 543, 545, 550, 553, 562, 568, 569, 613, 615, 616, 617, 649, 659, 660, 663, 664, 670, 691, 692, 704, 718, 756, 810, 811, 814, 816, 817, 818, 819, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 838, 841, 845, 846, 876, 887, 890, 894, 902, 914, 999, 1000, 1002, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1024, 1026, 1029, 1030, 1041, 1046, 1049, 1051, 1054, 1056, 1060], "varianc": [2, 37, 43, 44, 52, 64, 79, 90, 92, 97, 107, 111, 113, 117, 118, 120, 124, 125, 126, 129, 131, 132, 134, 137, 153, 154, 182, 188, 191, 197, 199, 201, 203, 207, 208, 214, 218, 220, 223, 236, 266, 270, 273, 276, 279, 285, 286, 289, 290, 306, 312, 317, 322, 334, 359, 367, 376, 380, 393, 413, 414, 416, 418, 419, 420, 421, 422, 423, 428, 449, 453, 457, 471, 530, 533, 541, 542, 543, 550, 553, 558, 559, 564, 565, 567, 568, 569, 574, 612, 616, 617, 620, 634, 652, 653, 654, 661, 665, 666, 669, 671, 681, 682, 683, 684, 685, 696, 719, 737, 794, 806, 807, 851, 862, 877, 883, 889, 891, 893, 899, 901, 903, 904, 922, 924, 984, 985, 986, 990, 1004, 1005, 1006, 1008, 1013, 1014, 1015, 1018, 1022, 1024, 1025, 1026, 1027, 1031, 1032, 1036, 1041, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "variance_weight": [737, 794, 1010], "variances_": 612, "variancethreshold": [2, 425, 878, 1000, 1044, 1051, 1054, 1057], "variant": [2, 64, 78, 124, 185, 187, 188, 276, 329, 330, 359, 360, 390, 416, 419, 421, 424, 426, 457, 468, 498, 502, 503, 521, 524, 552, 568, 569, 574, 624, 628, 631, 632, 636, 639, 647, 648, 650, 654, 681, 713, 810, 814, 816, 817, 818, 827, 835, 856, 874, 910, 1000, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1024, 1030, 1031, 1041, 1049], "variat": [2, 43, 46, 51, 72, 100, 122, 156, 173, 180, 181, 187, 188, 191, 223, 260, 262, 267, 273, 287, 296, 307, 327, 347, 381, 410, 420, 421, 451, 455, 467, 545, 652, 681, 683, 684, 806, 807, 827, 828, 830, 999, 1010, 1020, 1023, 1026, 1029, 1031, 1035, 1036, 1044, 1046, 1047], "variegatu": [50, 310, 379, 507], "variet": 323, "varieti": [25, 62, 186, 263, 323, 347, 392, 416, 418, 424, 652, 1013, 1026, 1029, 1034, 1043, 1056, 1057], "varimax": [134, 421, 541, 1053], "variou": [4, 41, 43, 51, 71, 72, 74, 90, 93, 95, 96, 97, 114, 117, 127, 188, 191, 197, 226, 228, 237, 238, 239, 240, 249, 294, 297, 313, 321, 327, 336, 337, 358, 360, 366, 367, 371, 378, 379, 380, 381, 384, 386, 389, 397, 399, 414, 416, 418, 445, 449, 480, 511, 523, 524, 534, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 603, 611, 656, 660, 662, 664, 667, 670, 672, 674, 675, 677, 682, 684, 685, 700, 701, 708, 809, 812, 813, 815, 823, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 873, 913, 914, 999, 1000, 1007, 1010, 1013, 1017, 1020, 1024, 1026, 1029, 1031, 1033, 1034, 1041, 1044, 1045, 1058], "varma": [1050, 1060], "varoquaux": [0, 399, 405, 1028, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "varun": [1047, 1048, 1049, 1055, 1056], "varunchaduvula": 1059, "vasani": 1052, "vasilei": [1034, 1048], "vasileva": 1055, "vasiloudi": 1046, "vassard": 1055, "vassilvitskii": [416, 455, 468], "vast": [270, 384], "vastli": 322, "vathsala": [1048, 1049, 1050, 1051], "vatsan": 1047, "vavrova": 1048, "vazelh": [1049, 1050, 1051], "vazirgianni": 416, "vb": 545, "vbgmm": [1041, 1045, 1047], "vc": 382, "vcvarsal": 382, "vd": 1059, "ve": [359, 384, 424, 1034, 1048], "veal": 57, "veb2009": 416, "veb2010": 416, "vec": [124, 424, 547, 549, 556], "veclib": [371, 396], "vect": [47, 104, 277, 340, 424], "vect__": 277, "vect__max_df": 277, "vect__min_df": 277, "vect__ngram_rang": 277, "vect__norm": 277, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 83, 106, 124, 126, 127, 169, 175, 183, 200, 222, 223, 230, 234, 250, 251, 258, 274, 276, 277, 281, 303, 315, 317, 334, 341, 343, 344, 347, 348, 349, 350, 351, 352, 354, 356, 359, 371, 373, 379, 389, 390, 393, 396, 398, 413, 414, 416, 418, 419, 420, 421, 423, 426, 427, 428, 445, 451, 452, 453, 455, 457, 458, 459, 461, 472, 473, 475, 476, 490, 491, 492, 493, 495, 497, 506, 518, 521, 530, 533, 540, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 576, 577, 578, 579, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 629, 631, 632, 634, 640, 647, 649, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 700, 701, 702, 704, 708, 728, 744, 772, 777, 778, 779, 780, 782, 783, 784, 786, 787, 808, 809, 812, 813, 823, 831, 837, 840, 841, 842, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 863, 864, 865, 870, 871, 878, 880, 885, 893, 897, 900, 911, 913, 914, 915, 916, 917, 918, 919, 920, 939, 954, 956, 957, 972, 978, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1020, 1024, 1026, 1031, 1032, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1052, 1054, 1059], "vectori": [398, 1051], "vectorizer2": 597, "vectorizer_param": 340, "vectorizermixin": 1051, "vectorizing_tim": 47, "vectors_test": 379, "ved": 1058, "vedaldi": [647, 1002], "veenhui": [1056, 1057, 1058, 1059, 1060], "veerkhar": 1056, "veerlosar": 1051, "veghit": 1057, "vehag": [218, 236], "vehbrand": [218, 236], "vehga": [218, 236], "vehicl": [218, 236], "vehpow": [218, 236], "vel": 381, "velkov": 1043, "veloc": 384, "vembu": 414, "vempati": 1002, "vendor": [252, 1046, 1049, 1050], "venezuela": [50, 310, 379, 507], "venkat": [0, 406], "venkatachalam": [1051, 1052, 1053, 1054, 1055, 1058, 1059], "venkatesh": 1051, "venna": 705, "venthur": 1049, "venu": [0, 398], "venv": [382, 402], "vera": [1055, 1056], "verbos": [49, 77, 85, 89, 99, 104, 106, 108, 159, 277, 314, 315, 317, 329, 340, 358, 382, 388, 398, 448, 451, 455, 457, 460, 462, 467, 470, 472, 475, 479, 480, 486, 540, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 636, 641, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 699, 701, 703, 774, 787, 806, 807, 809, 812, 813, 815, 823, 832, 834, 835, 836, 837, 838, 840, 842, 844, 847, 862, 869, 870, 871, 872, 873, 874, 875, 910, 913, 914, 915, 916, 917, 918, 919, 975, 1030, 1043, 1044, 1046, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1059, 1060], "verbose_feature_names_out": [148, 191, 192, 193, 259, 323, 329, 330, 331, 333, 417, 472, 475, 872, 1054, 1058, 1059, 1060], "verbose_interv": [806, 807], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 85, 87, 95, 97, 113, 114, 115, 117, 122, 127, 151, 157, 164, 180, 186, 191, 192, 193, 207, 218, 219, 220, 223, 226, 236, 242, 245, 251, 252, 255, 261, 270, 278, 279, 282, 283, 285, 286, 292, 297, 314, 317, 329, 336, 339, 347, 351, 356, 358, 360, 367, 371, 379, 383, 384, 389, 390, 392, 396, 397, 398, 410, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 450, 455, 460, 470, 479, 480, 486, 509, 513, 519, 550, 566, 567, 570, 571, 573, 574, 576, 577, 598, 599, 631, 659, 660, 663, 664, 665, 673, 691, 692, 694, 700, 701, 704, 714, 752, 755, 801, 806, 809, 811, 817, 819, 823, 826, 829, 853, 854, 878, 882, 883, 884, 893, 905, 906, 915, 918, 921, 922, 923, 924, 932, 957, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1041, 1046, 1047, 1049, 1052, 1054, 1056, 1057, 1058], "verif": [379, 1010, 1034], "verifi": [88, 95, 136, 154, 191, 218, 384, 389, 410, 412, 500, 993, 1013], "verlag": 705, "vermeil": 1049, "veronda": 1042, "verrier": 1056, "versa": [191, 273, 358, 416, 426, 450, 616, 617, 842, 1045], "versatil": [426, 1025, 1034], "versicolor": [120, 285, 286, 513], "versicolour": [80, 120, 130, 132, 381], "version": [2, 7, 43, 66, 81, 88, 90, 105, 124, 129, 138, 154, 177, 187, 192, 193, 196, 203, 216, 219, 226, 232, 234, 252, 255, 259, 296, 314, 322, 326, 327, 328, 329, 331, 332, 333, 334, 347, 358, 371, 379, 383, 385, 386, 387, 388, 390, 392, 393, 396, 398, 399, 402, 403, 407, 409, 410, 416, 417, 419, 421, 423, 424, 426, 427, 428, 434, 436, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 517, 518, 519, 521, 523, 531, 532, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 713, 716, 717, 718, 720, 722, 723, 725, 727, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 743, 748, 749, 750, 751, 752, 755, 759, 760, 762, 763, 766, 767, 768, 770, 775, 776, 778, 787, 791, 792, 793, 794, 796, 798, 799, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 822, 823, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 901, 902, 903, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 937, 939, 940, 951, 952, 956, 957, 965, 966, 967, 968, 969, 972, 975, 976, 979, 984, 990, 995, 996, 998, 999, 1002, 1004, 1007, 1010, 1012, 1014, 1016, 1018, 1023, 1024, 1026, 1029, 1030, 1033, 1037, 1039], "versionchang": 384, "versionwarn": 388, "versu": [67, 126, 137, 159, 166, 177, 188, 191, 197, 227, 233, 245, 250, 251, 264, 268, 271, 294, 303, 305, 335, 340, 344, 346, 347, 351, 416, 420, 423, 426, 513, 543, 565, 619, 640, 648, 667, 668, 675, 677, 683, 684, 685, 686, 792, 809, 814, 835, 845, 874, 909, 910, 917, 918, 922, 999, 1006, 1010, 1011, 1016, 1023, 1024, 1025, 1031, 1049], "vert": [152, 193, 194, 326, 1024], "vertex": [55, 63, 416, 461, 1054], "vertic": [45, 55, 95, 150, 194, 207, 249, 250, 280, 296, 317, 320, 352, 353, 398, 413, 416, 421, 524, 706, 790], "verticalalign": [51, 63, 74, 75], "vese": 1053, "vesteghem": 1051, "veto": 399, "vettigli": 1050, "vga": 57, "vh": 957, "vi": [45, 47, 379, 708, 1049, 1052], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 376, 381, 382, 385, 386, 388, 392, 396, 397, 398, 399, 402, 407, 413, 414, 416, 417, 419, 420, 421, 425, 426, 445, 510, 544, 548, 550, 552, 555, 568, 569, 576, 577, 606, 620, 625, 630, 633, 636, 647, 648, 649, 650, 665, 675, 677, 680, 682, 685, 696, 698, 701, 702, 718, 809, 823, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 851, 859, 870, 872, 873, 874, 893, 894, 999, 1004, 1006, 1007, 1009, 1010, 1011, 1017, 1018, 1024, 1025, 1030, 1031, 1034, 1036, 1041, 1045, 1046, 1049, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "viacheslav": 1047, "viard": 1052, "vibrantabhi19": 1048, "vicdemand": 154, "vice": [191, 273, 358, 416, 426, 450, 616, 617, 842, 1045], "vicent": [1054, 1055, 1056], "vicpric": 154, "victoireloui": 1055, "victor": [416, 460, 470, 1048, 1051], "victoria": 154, "video": [331, 378, 387, 512, 1011, 1034, 1036], "vie": 1047, "viega": 1010, "view": [43, 77, 81, 111, 126, 154, 192, 215, 257, 371, 373, 384, 416, 424, 545, 654, 666, 853, 854, 928, 1006, 1007], "view_init": [192, 238, 240, 242], "viewabl": 384, "vighnesh": [1046, 1047, 1049], "vignesh": 1057, "vigni": 1058, "vijai": [1034, 1044], "vijalapuram": 1049, "vijeth": [1057, 1058], "vijitbenjaronk": [1048, 1049], "vika": [1053, 1055], "vikram": [1047, 1056, 1057], "vikrant": 1055, "vila": [1051, 1053], "vilhelm": [1048, 1049], "villalba": [1046, 1049, 1053], "villanova": [1053, 1054], "villaz\u00f3n": 1053, "villu": 1047, "vil\u00e9m": 1054, "vinayak": [1045, 1046, 1047, 1049, 1050, 1056, 1057], "vincent": [0, 406, 1034, 1041, 1043, 1045, 1046, 1048, 1051, 1056, 1057, 1058], "vineet": 1059, "vineyard": 323, "vinh": [416, 713], "vinh10a": 416, "viniciu": [1053, 1054], "vinit": 1049, "vink": [1052, 1054], "vinod": 1049, "vin\u00edciu": 1049, "viola": [379, 1049], "violat": [62, 347, 392, 396, 398, 644, 943, 1017, 1024, 1026], "violet": [131, 1057], "violeta": 1053, "vipin": 416, "viraj": 1049, "virchan": 1059, "virgil": [0, 406, 1041, 1042, 1044, 1060], "virgilefritsch": 1041, "virginica": [80, 120, 130, 132, 285, 286, 381, 513, 1010], "viridi": [66, 73, 297, 706], "viridis_r": 277, "virshup": 1058, "virtanen": 1046, "virtual": [385, 402, 420, 1034], "virtualenv": [382, 384], "visag": 1034, "visconti": 1045, "vishaal": [1049, 1050], "vishal": 1056, "vishwakarma": 1055, "visibl": [52, 191, 192, 220, 356, 378, 384, 416, 869, 1015, 1046, 1056], "vision": [543, 767, 768, 1002, 1006, 1008, 1026, 1029, 1034, 1042], "visit": [366, 384, 1017, 1033], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 81, 84, 87, 92, 95, 96, 113, 121, 123, 126, 128, 131, 133, 143, 144, 152, 154, 155, 157, 161, 162, 171, 183, 187, 188, 192, 194, 203, 209, 218, 220, 236, 238, 239, 243, 244, 247, 250, 256, 257, 266, 268, 269, 272, 273, 277, 278, 281, 283, 285, 286, 302, 306, 307, 309, 311, 313, 317, 321, 322, 326, 328, 337, 351, 376, 380, 382, 390, 391, 413, 418, 420, 421, 422, 423, 446, 449, 453, 454, 462, 479, 480, 505, 511, 513, 516, 519, 523, 531, 541, 543, 550, 573, 575, 640, 642, 654, 667, 698, 701, 706, 707, 709, 710, 711, 727, 736, 791, 798, 810, 811, 814, 815, 826, 827, 828, 829, 830, 832, 839, 870, 874, 878, 882, 883, 885, 889, 890, 891, 893, 913, 915, 916, 918, 919, 927, 953, 1005, 1007, 1008, 1013, 1014, 1016, 1017, 1020, 1026, 1029, 1031, 1036, 1044, 1051, 1052, 1053, 1055], "visualis": [124, 127, 134, 253, 553, 810, 811, 814, 826, 827, 828, 829, 830, 1013, 1030], "visualize_group": 271, "vitor": 1056, "vivek": [1048, 1049, 1050, 1058], "viz": [286, 391], "vjacheslav": 1045, "vlad": [0, 124, 405, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "vladimir": [544, 957, 1006, 1051, 1055, 1058], "vlahava": [729, 749, 1010], "vlajic": [1052, 1053, 1059], "vlasio": [1034, 1048], "vlasovet": 1054, "vlb": 57, "vliet": 1053, "vline": [111, 126, 205, 207, 219, 276, 289, 318], "vlines_": 641, "vlo": 51, "vmax": [66, 86, 115, 124, 127, 134, 178, 181, 198, 203, 209, 234, 250, 265, 271, 314, 347], "vmin": [66, 75, 115, 124, 127, 134, 178, 181, 198, 203, 209, 234, 250, 265, 271, 314, 347], "vnherdeiro": 1051, "vo": [1047, 1055], "voc": 1010, "vocabulari": [122, 233, 358, 359, 396, 424, 597, 598, 599, 600, 1012, 1041, 1043, 1046, 1049, 1052, 1054], "vocabulary_": [360, 424, 590, 597, 600, 1041], "void": 385, "vol": [64, 183, 203, 270, 282, 381, 416, 482, 568, 569, 637, 644, 654, 673, 694, 695, 806, 838, 850, 1000, 1012, 1013], "volgen": [413, 728], "voltag": 57, "volum": [0, 101, 112, 173, 180, 379, 381, 416, 418, 481, 543, 778, 1006, 1025, 1034], "volume11": 416, "volume2": 685, "volume7": [675, 676], "volunt": 392, "voluntari": 358, "von": [416, 460, 470, 700, 1048, 1049], "voronoi": [81, 101, 416], "voss": 1049, "vote": [2, 14, 137, 139, 144, 159, 160, 161, 188, 296, 351, 398, 399, 510, 564, 565, 566, 569, 573, 574, 578, 579, 666, 841, 855, 856, 861, 863, 1011, 1013, 1031, 1032, 1036, 1041, 1044, 1046, 1051], "votingclassifi": [2, 61, 63, 137, 188, 227, 363, 407, 423, 513, 573, 579, 640, 667, 851, 855, 918, 921, 999, 1000, 1031, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1058, 1059], "votingregressor": [2, 162, 407, 423, 578, 1000, 1050, 1051, 1052, 1055, 1058, 1059], "votingregressorifittedvotingregressor": 162, "voxel": [81, 101, 594], "vp": 1034, "vq": [83, 93], "vqean3": [1049, 1050], "vredevoogd": [1043, 1044], "vrigazov": 1056, "vrishank": [1048, 1049], "vs_buildtool": 382, "vstack": [51, 63, 92, 100, 178, 179, 201, 261, 265, 297, 310, 352, 640, 1011, 1049], "vstolbunov": 1046, "vt": 559, "vufg": 1049, "vukolov": [1049, 1050], "vulner": 410, "vuw": 539, "vvz2010": 1002, "vx": 72, "vya": [1049, 1050, 1051], "vyom": [1056, 1057], "vz2010": 1002, "v\u00e1zquez": 1044, "v\u0103n": 1056, "w": [2, 45, 51, 53, 66, 70, 75, 77, 80, 83, 93, 99, 130, 133, 173, 186, 217, 222, 235, 252, 253, 261, 262, 263, 266, 267, 287, 315, 329, 330, 351, 352, 354, 360, 367, 372, 379, 381, 390, 410, 416, 417, 421, 423, 424, 428, 433, 439, 445, 473, 477, 480, 482, 490, 491, 492, 532, 547, 549, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 597, 598, 600, 603, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 702, 708, 734, 735, 765, 808, 809, 823, 831, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 855, 856, 859, 860, 863, 864, 870, 871, 906, 908, 909, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 954, 959, 1006, 1010, 1014, 1015, 1020, 1022, 1024, 1025, 1051, 1055, 1056, 1057, 1058], "w0": 122, "w1": [122, 423, 666], "w1992": 423, "w2": 423, "w3": 423, "w_": [421, 655, 656, 661, 662, 669, 670, 671, 672, 690, 693, 1006, 1010, 1012, 1015], "w_0": 1006, "w_1": [423, 1006, 1014], "w_1x_1": 1014, "w_2": [423, 1006, 1014], "w_2x_2": 1014, "w_3": 1006, "w_4": 1006, "w_5": 1006, "w_i": [423, 1001, 1010], "w_ij": 669, "w_init": [428, 542], "w_intercept": [913, 914], "w_j": [655, 661, 1010, 1024], "w_k": [416, 423, 1006], "w_l": 1006, "w_mx_m": 1014, "w_n": 423, "w_new": 421, "w_p": 1006, "w_pad": [124, 147, 363], "w_x_1": [913, 914], "w_x_n": [913, 914], "wa": [0, 43, 47, 53, 64, 75, 104, 105, 113, 118, 122, 156, 159, 173, 184, 191, 196, 222, 242, 252, 255, 267, 269, 270, 272, 274, 276, 282, 283, 290, 294, 314, 322, 326, 327, 331, 338, 339, 358, 360, 366, 367, 371, 379, 381, 382, 384, 388, 389, 398, 402, 407, 410, 412, 413, 415, 416, 419, 420, 424, 428, 440, 448, 449, 450, 451, 453, 454, 455, 457, 458, 462, 465, 468, 472, 476, 477, 482, 490, 491, 492, 493, 524, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 667, 668, 673, 681, 683, 688, 694, 695, 697, 698, 701, 722, 738, 739, 787, 792, 793, 796, 806, 807, 809, 812, 813, 823, 836, 838, 850, 857, 860, 862, 865, 869, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 902, 905, 906, 910, 911, 937, 939, 940, 951, 952, 976, 997, 998, 999, 1000, 1009, 1010, 1013, 1016, 1020, 1023, 1026, 1029, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "wadawson": 1045, "wadsworth": [921, 922, 1026], "waelbenamara": 1052, "wagner": 1055, "wai": [0, 2, 37, 43, 55, 64, 85, 95, 105, 108, 143, 150, 155, 157, 173, 182, 191, 193, 194, 219, 222, 223, 233, 236, 247, 248, 251, 252, 255, 256, 271, 276, 283, 285, 317, 318, 329, 331, 332, 367, 371, 372, 373, 378, 380, 382, 383, 386, 387, 392, 393, 398, 399, 402, 407, 410, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 431, 451, 452, 459, 460, 461, 467, 468, 470, 471, 477, 505, 564, 565, 572, 581, 598, 608, 609, 620, 641, 675, 676, 685, 686, 687, 708, 713, 715, 726, 745, 746, 763, 764, 766, 772, 783, 787, 797, 804, 834, 842, 859, 880, 886, 891, 897, 923, 924, 980, 983, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1029, 1030, 1033, 1034, 1041, 1043, 1049, 1054, 1055, 1059, 1060], "waijean": 1054, "wainwright": [730, 732, 733], "waist": 381, "wait": [55, 382, 384, 388, 398, 675, 676, 677, 685, 687, 1053], "waithera": 1051, "wal": 51, "waldo": 331, "wale": 154, "walk": [416, 422, 1044], "walker": 1045, "wall": 416, "wallach": [1045, 1046], "walli": 1049, "wallygauz": 1049, "walsh": [1053, 1055], "walt": [1044, 1045, 1049], "walter": 1047, "walton": 331, "wan": 1049, "wang": [421, 545, 688, 698, 702, 735, 765, 1006, 1007, 1010, 1044, 1046, 1047, 1048, 1049, 1053, 1056, 1057, 1059], "wangz10": 1046, "want": [0, 30, 43, 51, 58, 61, 62, 63, 90, 99, 105, 173, 187, 191, 218, 219, 220, 252, 255, 267, 270, 276, 291, 294, 300, 314, 341, 344, 358, 367, 371, 372, 373, 382, 383, 384, 385, 386, 388, 389, 390, 396, 397, 398, 399, 402, 407, 410, 414, 415, 416, 417, 418, 423, 424, 425, 509, 512, 513, 519, 544, 558, 663, 664, 665, 667, 668, 675, 677, 683, 684, 685, 773, 808, 831, 859, 862, 878, 885, 906, 913, 999, 1006, 1009, 1010, 1011, 1014, 1016, 1020, 1021, 1025, 1029, 1030, 1041, 1055, 1059], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 81, 87, 88, 89, 91, 97, 188, 194, 242, 406, 424, 449, 453, 471, 539, 866, 1031, 1041, 1044, 1046], "ward__n_clust": 89, "ward_tre": [2, 89, 449, 453, 1041, 1045], "wardagglom": 1046, "wardagglomer": 1044, "wardclust": 1044, "wareh": 743, "warm": [387, 398, 540, 546, 552, 554, 555, 619, 662, 668, 675, 676, 677, 685, 686, 687, 1006, 1030, 1051, 1053, 1055], "warm_start": [142, 179, 211, 329, 386, 390, 398, 423, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 619, 655, 657, 658, 661, 667, 669, 671, 675, 676, 677, 678, 685, 686, 687, 689, 806, 807, 862, 870, 871, 1016, 1032, 1036, 1041, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1055, 1057], "warn": [2, 15, 79, 97, 106, 181, 218, 233, 252, 279, 297, 313, 314, 321, 371, 372, 384, 387, 388, 389, 398, 410, 424, 505, 547, 549, 556, 559, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 580, 581, 582, 583, 584, 585, 587, 611, 645, 702, 721, 722, 725, 738, 739, 747, 792, 793, 796, 863, 877, 878, 916, 917, 918, 919, 921, 922, 923, 924, 939, 940, 947, 957, 966, 979, 995, 996, 1010, 1020, 1041, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "warn_for": 792, "warn_on_dtyp": 1050, "warn_when_not_sort": 868, "warner": [51, 1056, 1057], "warshal": [697, 1007], "warshaw": 1047, "warut": [1048, 1049], "wase": [1058, 1059], "wasn": [104, 252, 1050], "waspa": 547, "wast": [144, 390, 420, 421, 999], "watanab": [1058, 1059], "watch": [52, 372], "watchtheblur": 1053, "water": 50, "waterburi": [1049, 1050], "waterland": 1044, "waterponei": [1047, 1048], "watson": [323, 417], "wattai": 1056, "wav": 378, "wave": [212, 384, 1009], "waveform": 75, "wavelet": [53, 133, 421], "wavfil": 378, "waweru": 1058, "wa\u00ebl": 1059, "wb": [55, 410], "wchathura": 1056, "wclf": 349, "wconnel": 1052, "wdbc": [173, 381], "wderos": 1052, "wdevazelh": 1049, "wdisp": 349, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 82, 84, 85, 88, 90, 91, 92, 93, 97, 99, 100, 101, 104, 105, 106, 107, 109, 111, 113, 114, 115, 118, 120, 122, 124, 125, 126, 127, 129, 131, 132, 134, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 161, 162, 164, 168, 169, 170, 172, 173, 175, 177, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 205, 207, 209, 211, 213, 215, 218, 219, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 236, 238, 239, 242, 243, 245, 246, 248, 249, 250, 252, 253, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 290, 291, 294, 296, 297, 299, 300, 302, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 396, 397, 398, 399, 407, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 458, 477, 478, 479, 480, 481, 482, 483, 484, 510, 532, 540, 541, 543, 546, 554, 555, 558, 570, 571, 572, 578, 579, 591, 592, 598, 620, 626, 636, 641, 642, 647, 649, 660, 664, 667, 668, 675, 677, 682, 683, 684, 685, 686, 701, 727, 729, 735, 755, 765, 773, 790, 808, 815, 831, 832, 834, 855, 856, 857, 859, 861, 862, 863, 864, 865, 876, 885, 886, 887, 893, 898, 899, 901, 902, 903, 904, 906, 909, 913, 917, 932, 951, 952, 962, 973, 975, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1034, 1038, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1059], "wea": 414, "weak": [117, 149, 152, 222, 236, 282, 420, 563, 568, 569, 639, 1013, 1034, 1057], "weak_learn": 138, "weak_learners_info": 138, "weak_learners_misclassification_error": 138, "weaker": [109, 570, 571], "weakest": [362, 1026], "weaklearn": 562, "weakli": 101, "weather": [43, 52, 180, 192, 415, 1006, 1010], "web": [2, 173, 378, 379, 381, 384, 392, 410, 416, 424, 500, 530, 906, 1010, 1020, 1037, 1041, 1060], "weber": 1048, "weblog": 416, "webpag": [55, 196, 384], "websit": [378, 379, 381, 384, 387, 399, 402, 1014, 1024, 1033, 1034, 1042, 1043, 1044], "wed": [43, 154, 192], "weed": 613, "week": [43, 52, 154, 333, 383, 384, 399, 505, 1034, 1055], "weekdai": [43, 192], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 154], "weezel": [1056, 1057], "wegelin": 419, "wehenkel": [423, 566, 567, 574, 575, 923, 924], "wei": [0, 406, 1024, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1054, 1057], "weibul": 321, "weidemann": 1055, "weigh": [420, 1048], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 89, 104, 134, 151, 160, 161, 169, 170, 179, 180, 187, 188, 191, 197, 203, 207, 209, 218, 222, 223, 225, 228, 229, 230, 232, 233, 234, 236, 252, 257, 261, 265, 270, 274, 279, 283, 285, 300, 309, 310, 311, 312, 313, 315, 322, 324, 326, 329, 333, 334, 336, 337, 342, 347, 349, 351, 352, 354, 355, 358, 359, 360, 366, 367, 380, 381, 393, 396, 398, 415, 416, 418, 419, 421, 422, 425, 427, 433, 439, 445, 448, 451, 452, 454, 455, 457, 461, 467, 468, 471, 472, 473, 475, 477, 482, 490, 491, 492, 505, 524, 533, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 595, 598, 599, 600, 602, 606, 611, 612, 619, 620, 637, 641, 642, 643, 644, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 698, 702, 706, 707, 709, 711, 712, 716, 717, 718, 721, 722, 725, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 743, 744, 745, 747, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 767, 768, 778, 791, 792, 793, 794, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 831, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 875, 878, 892, 893, 894, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 944, 945, 959, 984, 990, 1000, 1001, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1020, 1023, 1024, 1025, 1026, 1030, 1031, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "weight_concentration_": 806, "weight_concentration_prior": [261, 267, 806, 1009], "weight_concentration_prior_": 806, "weight_concentration_prior_typ": [261, 267, 806, 1009, 1047], "weight_vector": [1041, 1051], "weighted_acc": 407, "weighted_mod": [2, 393], "weighted_n_node_sampl": 366, "weightedmetaregressor": 252, "weights_": [261, 806, 807, 1055], "weights_handl": 231, "weights_init": 807, "weijiadu": 1055, "weinberg": 424, "weinsberg": 1041, "weinstein": 1042, "weisberg": 1006, "weiss": [0, 406, 416, 700, 1041], "weitzenfeld": 1034, "weka": 850, "welch": 1047, "welcom": [383, 384, 392, 399, 1030], "welind": 1041, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 83, 88, 92, 93, 97, 104, 111, 118, 138, 139, 141, 144, 149, 151, 157, 159, 173, 180, 182, 190, 191, 192, 193, 196, 203, 205, 216, 218, 219, 220, 222, 226, 238, 239, 240, 243, 245, 249, 252, 255, 263, 270, 276, 283, 285, 287, 292, 294, 297, 300, 302, 303, 304, 324, 327, 328, 329, 330, 331, 332, 333, 334, 351, 354, 358, 359, 360, 367, 379, 381, 383, 384, 388, 390, 392, 393, 396, 397, 398, 399, 410, 414, 416, 418, 420, 421, 423, 425, 427, 430, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 467, 468, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 709, 730, 731, 732, 733, 794, 797, 801, 804, 806, 807, 808, 809, 812, 813, 823, 831, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 955, 956, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1023, 1024, 1026, 1027, 1029, 1030, 1034, 1041, 1042, 1045, 1047, 1048, 1049, 1052, 1059], "wellcom": 0, "wen": 1056, "wenbo": [1051, 1053], "wendi": 1051, "wendling": 1048, "weng": 1025, "wenhao": [1049, 1050], "wenhua": 1047, "wenjian": 1047, "wenliwyan": 1052, "went": [388, 1010], "were": [0, 43, 68, 104, 105, 108, 113, 114, 144, 148, 151, 154, 170, 173, 180, 187, 218, 219, 222, 246, 255, 283, 285, 287, 314, 315, 322, 327, 328, 330, 331, 332, 333, 334, 339, 351, 358, 360, 366, 367, 378, 379, 381, 384, 385, 386, 388, 392, 396, 398, 407, 413, 417, 423, 424, 472, 475, 476, 505, 570, 571, 611, 812, 813, 828, 837, 860, 910, 911, 999, 1002, 1010, 1011, 1026, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060], "weren": [358, 887, 1050], "werman": 1053, "werneck": 1049, "werner": [1048, 1053], "werror": 392, "wersd\u00f6rfer": 1043, "weslei": [599, 739], "westermann": [0, 374, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "western": 424, "weston": [44, 421, 544, 602, 603, 909], "westov": 1049, "wetter": 192, "weyb": 1059, "wfc": 51, "wget": 392, "wh": [421, 547, 549, 556], "wh_i": 421, "what": [0, 2, 43, 48, 51, 52, 75, 80, 87, 88, 118, 125, 129, 147, 190, 191, 207, 224, 226, 234, 247, 252, 259, 314, 358, 360, 362, 367, 372, 379, 382, 384, 385, 386, 388, 390, 392, 397, 398, 399, 401, 415, 416, 422, 423, 424, 512, 545, 597, 598, 600, 655, 661, 705, 898, 899, 901, 902, 903, 904, 921, 922, 923, 924, 1009, 1010, 1011, 1013, 1026, 1030, 1041, 1048, 1059], "whatnot": 358, "whats_new": [388, 392], "wheel": [382, 384, 388, 402, 404, 1051, 1053, 1055], "wheeler": [1052, 1053], "wheelhouse_upload": 388, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 91, 95, 102, 104, 105, 106, 111, 113, 114, 118, 124, 127, 128, 129, 131, 141, 144, 147, 148, 149, 151, 154, 155, 159, 160, 161, 170, 175, 186, 190, 191, 192, 193, 194, 198, 199, 203, 207, 209, 211, 215, 218, 220, 222, 223, 234, 245, 246, 247, 251, 252, 259, 262, 264, 272, 275, 276, 277, 278, 279, 283, 285, 286, 290, 294, 297, 299, 300, 303, 304, 305, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 333, 334, 338, 339, 341, 347, 350, 351, 354, 358, 359, 360, 362, 366, 367, 371, 372, 373, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 402, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 432, 439, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 524, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 584, 585, 587, 590, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 615, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 710, 711, 713, 714, 716, 717, 721, 722, 725, 736, 737, 738, 739, 741, 743, 744, 747, 755, 757, 760, 763, 764, 766, 770, 772, 776, 777, 778, 780, 783, 787, 790, 791, 792, 793, 794, 796, 797, 798, 800, 801, 802, 804, 806, 807, 808, 809, 812, 813, 814, 815, 823, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 899, 900, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 932, 934, 935, 938, 939, 940, 947, 951, 955, 956, 957, 958, 960, 961, 962, 967, 970, 978, 998, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1030, 1033, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "whenev": [182, 190, 270, 367, 378, 392, 398, 402, 414, 490, 491, 492, 505, 637, 639, 1001, 1009, 1030, 1051], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 88, 90, 92, 113, 118, 122, 124, 127, 133, 134, 138, 140, 142, 144, 148, 149, 151, 154, 156, 170, 171, 173, 175, 181, 184, 187, 191, 198, 203, 210, 219, 222, 227, 228, 229, 231, 235, 236, 238, 240, 241, 245, 246, 249, 252, 253, 255, 257, 267, 270, 272, 273, 276, 278, 282, 283, 285, 287, 288, 290, 294, 296, 315, 317, 319, 320, 321, 322, 323, 324, 326, 328, 329, 334, 337, 338, 345, 351, 354, 355, 356, 358, 362, 363, 367, 371, 372, 373, 378, 380, 381, 383, 384, 386, 388, 390, 391, 392, 396, 397, 398, 399, 402, 407, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 439, 445, 452, 455, 456, 460, 469, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 495, 505, 535, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 591, 592, 593, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 618, 619, 620, 622, 624, 628, 631, 632, 634, 636, 637, 638, 639, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 697, 700, 701, 702, 705, 716, 720, 721, 725, 734, 738, 739, 740, 748, 750, 764, 772, 777, 778, 779, 782, 790, 791, 792, 793, 796, 797, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 856, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 876, 883, 886, 888, 889, 892, 893, 899, 901, 907, 908, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 930, 948, 949, 950, 951, 957, 962, 966, 969, 994, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1030, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "wherea": [52, 70, 83, 88, 102, 113, 155, 232, 255, 277, 278, 279, 285, 300, 322, 351, 354, 355, 373, 399, 420, 423, 452, 454, 574, 667, 668, 811, 827, 841, 1002, 1009, 1011, 1013, 1020, 1026, 1054, 1059], "wherein": 398, "whether": [2, 47, 49, 52, 105, 136, 155, 178, 183, 191, 192, 218, 222, 236, 239, 246, 252, 270, 274, 317, 366, 367, 372, 379, 382, 383, 384, 386, 388, 389, 390, 398, 407, 415, 416, 417, 418, 420, 421, 423, 425, 428, 448, 450, 459, 461, 462, 467, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 486, 490, 491, 492, 493, 495, 496, 499, 501, 505, 506, 512, 517, 518, 523, 531, 536, 540, 541, 546, 547, 548, 549, 551, 554, 555, 557, 561, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 590, 597, 598, 599, 600, 606, 611, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 644, 645, 646, 647, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 699, 703, 704, 706, 707, 709, 711, 713, 720, 721, 751, 770, 776, 783, 787, 791, 798, 808, 809, 812, 813, 814, 815, 823, 827, 828, 831, 832, 833, 836, 837, 839, 842, 844, 847, 848, 849, 850, 852, 855, 856, 857, 859, 861, 863, 864, 865, 866, 867, 870, 871, 877, 894, 900, 913, 914, 915, 916, 917, 918, 919, 925, 927, 929, 930, 931, 932, 933, 937, 939, 940, 941, 943, 951, 952, 956, 957, 965, 966, 982, 993, 997, 998, 999, 1000, 1005, 1006, 1010, 1015, 1016, 1022, 1024, 1025, 1034, 1048, 1049, 1050, 1058, 1060], "whi": [191, 193], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 81, 84, 88, 90, 91, 92, 93, 100, 102, 104, 105, 106, 109, 111, 113, 114, 118, 120, 122, 126, 128, 129, 134, 138, 141, 142, 143, 144, 148, 150, 151, 154, 155, 157, 158, 159, 160, 161, 162, 164, 168, 170, 172, 173, 175, 176, 180, 181, 182, 186, 187, 190, 191, 192, 194, 196, 198, 199, 203, 207, 211, 218, 219, 220, 222, 224, 226, 232, 234, 235, 236, 238, 239, 240, 242, 245, 246, 249, 250, 251, 252, 253, 255, 256, 261, 262, 266, 267, 269, 270, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 294, 296, 297, 302, 303, 304, 313, 317, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 347, 351, 354, 356, 358, 359, 360, 362, 366, 367, 371, 372, 373, 376, 378, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 401, 402, 404, 407, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 470, 471, 472, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 495, 532, 540, 541, 542, 543, 546, 547, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 588, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 619, 620, 621, 622, 623, 624, 626, 628, 631, 636, 637, 638, 639, 641, 642, 643, 649, 651, 652, 653, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 718, 725, 726, 728, 729, 732, 734, 735, 743, 744, 745, 746, 751, 752, 755, 765, 767, 787, 788, 789, 790, 791, 792, 798, 806, 807, 808, 809, 812, 813, 814, 815, 817, 819, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 870, 873, 877, 880, 884, 886, 887, 888, 891, 892, 893, 894, 895, 897, 905, 906, 908, 909, 910, 913, 915, 918, 919, 921, 922, 923, 924, 925, 929, 931, 934, 935, 939, 940, 946, 949, 951, 952, 956, 957, 959, 962, 965, 966, 967, 969, 978, 981, 984, 990, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "whichev": [416, 423, 454, 553, 570, 571, 642, 659, 663, 665, 673, 691, 692, 706], "whidou": 1054, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 83, 90, 97, 101, 104, 107, 109, 122, 128, 129, 138, 141, 144, 145, 149, 154, 156, 159, 173, 176, 181, 183, 184, 186, 190, 191, 192, 193, 196, 198, 200, 203, 206, 207, 212, 218, 220, 222, 234, 245, 248, 249, 252, 253, 262, 263, 267, 269, 270, 271, 275, 276, 277, 279, 283, 284, 285, 286, 287, 289, 299, 317, 318, 319, 322, 323, 324, 326, 329, 332, 333, 344, 347, 358, 360, 366, 367, 372, 376, 377, 378, 379, 380, 383, 384, 386, 388, 389, 390, 392, 393, 396, 398, 399, 410, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 428, 452, 472, 475, 476, 491, 493, 505, 530, 541, 561, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 584, 591, 597, 598, 599, 600, 603, 606, 611, 615, 643, 652, 655, 656, 658, 665, 666, 667, 668, 685, 686, 687, 688, 717, 739, 763, 783, 787, 797, 803, 806, 809, 810, 811, 814, 815, 816, 817, 818, 819, 823, 824, 825, 827, 832, 834, 835, 836, 837, 838, 840, 848, 859, 861, 863, 864, 865, 872, 873, 874, 875, 876, 889, 901, 906, 911, 913, 914, 921, 922, 923, 924, 935, 961, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1020, 1022, 1025, 1026, 1029, 1030, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "whilst": [142, 240], "whisker": 49, "white": [2, 93, 95, 124, 180, 191, 232, 238, 303, 315, 319, 341, 346, 421, 424, 634, 1026, 1041, 1044, 1047, 1051, 1055], "whitekernel": [2, 175, 180, 181, 426, 620, 621, 623, 1052], "whiten": [45, 124, 125, 126, 301, 421, 428, 542, 543, 550, 891, 893, 1020, 1045, 1047, 1055, 1056, 1059], "whiten_solv": [428, 542, 1056, 1059], "whitening_": 542, "whitespac": 424, "whl": 388, "who": [0, 104, 191, 372, 379, 384, 391, 399, 402, 855, 856, 857, 859, 861, 863, 864, 865, 1029, 1043, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "whole": [49, 85, 108, 154, 162, 187, 219, 255, 273, 280, 309, 347, 351, 362, 371, 384, 396, 397, 417, 419, 423, 426, 457, 491, 547, 564, 565, 566, 567, 572, 573, 574, 575, 579, 694, 695, 809, 812, 813, 823, 837, 848, 849, 850, 851, 852, 999, 1010, 1020, 1049, 1051], "whose": [2, 90, 112, 113, 114, 173, 180, 218, 246, 345, 379, 392, 393, 398, 414, 416, 418, 423, 425, 426, 429, 445, 446, 447, 456, 469, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 524, 543, 547, 549, 550, 553, 556, 558, 581, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 649, 680, 704, 727, 809, 816, 823, 838, 859, 878, 905, 906, 956, 988, 989, 1004, 1011, 1015, 1016, 1017, 1025, 1044, 1049, 1050, 1052, 1055], "why": [64, 72, 87, 124, 138, 144, 154, 191, 193, 196, 207, 270, 273, 276, 294, 358, 359, 384, 392, 398, 416, 418, 421, 427, 452, 455, 459, 1010, 1012, 1025, 1044], "wick": 1053, "wide": [64, 95, 96, 120, 141, 249, 318, 396, 416, 421, 424, 999, 1006, 1029, 1034, 1041, 1043, 1057], "widehat": 178, "wider": [52, 220, 424, 926, 1006], "widetild": 1026, "width": [47, 49, 52, 80, 88, 113, 120, 126, 127, 132, 133, 134, 141, 147, 148, 151, 161, 169, 177, 183, 202, 259, 261, 275, 300, 317, 319, 320, 323, 328, 331, 344, 381, 417, 446, 447, 460, 472, 502, 503, 515, 530, 595, 878, 926, 1020, 1024, 1026, 1049], "wiesel": [418, 429, 483], "wignal": [1044, 1045, 1051, 1052], "wijewardena": [0, 1044, 1045, 1046], "wiki": [55, 61, 390, 392, 604, 645, 677, 680, 704, 714, 855, 856, 861, 862, 863, 864, 891, 907, 921, 922, 1006, 1010, 1026], "wikic": 1002, "wikipedia": [37, 42, 61, 188, 392, 416, 604, 616, 617, 645, 665, 677, 680, 691, 692, 704, 713, 714, 716, 718, 721, 725, 727, 735, 738, 739, 740, 743, 744, 747, 752, 765, 792, 794, 795, 797, 798, 801, 802, 855, 856, 861, 862, 863, 864, 891, 907, 921, 922, 1002, 1006, 1010, 1013, 1022, 1026, 1031, 1041, 1048], "wikipedia_principal_eigenvector": [55, 1031], "wikipediadet2017": 1010, "wikipediamcc2021": 1010, "wil": 1053, "wild": [2, 45, 377, 502, 503, 517, 518, 1036, 1041], "wilderness_area": 255, "wildli": [302, 1009], "wilei": [381, 1000], "wilhelm": [1045, 1047, 1051], "wilk": 414, "wilksch": 1056, "willamett": 323, "willard": 1053, "willdarnel": 1051, "willduan": 1048, "william": [173, 379, 381, 426, 619, 620, 623, 628, 631, 648, 1002, 1010, 1014, 1048, 1049, 1050, 1051, 1056, 1057], "williamson": 1051, "willing": [190, 273, 415], "willocx": 1051, "willpeppo": 1053, "wilson": [113, 381, 1041, 1044], "wiman": 1041, "wimld": 1055, "win": [52, 270], "winata": [1051, 1053], "wind": [192, 1011], "windber": 1052, "windiana42": 1057, "window": [57, 340, 379, 384, 386, 387, 392, 424, 1041, 1044, 1048, 1052, 1054, 1055, 1059], "windowsapp": 402, "windowserror": 1057, "windspe": [43, 192], "wine": [2, 48, 258, 322, 323, 377, 519, 1036], "wine_review": 323, "wineri": 323, "winn": 1010, "winter": [43, 52], "winterman": 1042, "wip": [392, 402], "wipf": [654, 1006], "wire": [390, 543, 550], "wiryadi": [1053, 1059], "wisc": [173, 381, 908], "wisconsin": [2, 173, 194, 377, 509, 1018, 1036, 1046], "wise": [2, 46, 63, 83, 183, 219, 245, 286, 317, 359, 371, 398, 414, 416, 420, 421, 425, 466, 540, 543, 546, 550, 554, 555, 558, 559, 562, 564, 565, 568, 569, 601, 604, 605, 607, 608, 609, 615, 649, 661, 709, 763, 841, 860, 890, 903, 904, 907, 982, 984, 985, 986, 987, 990, 1002, 1004, 1006, 1010, 1011, 1024, 1030, 1041, 1046, 1049, 1050, 1051], "wish": [378, 384, 386, 391, 393, 402, 416, 957, 1048], "wishart": 806, "wissen": 458, "with_cent": [891, 903], "with_error": 710, "with_mean": [389, 893, 904, 1020, 1049, 1054], "with_scal": [891, 903], "with_std": [893, 904, 1020, 1049], "withheld": 420, "within": [2, 41, 43, 58, 95, 143, 145, 146, 149, 154, 158, 170, 172, 173, 214, 219, 220, 230, 236, 252, 256, 274, 275, 279, 289, 317, 318, 328, 345, 348, 351, 354, 360, 367, 371, 379, 384, 388, 393, 396, 398, 399, 407, 412, 413, 414, 416, 417, 420, 422, 423, 427, 452, 456, 469, 471, 472, 474, 477, 482, 524, 558, 576, 577, 578, 579, 602, 603, 641, 701, 705, 708, 719, 734, 790, 806, 807, 814, 815, 827, 828, 837, 838, 853, 854, 855, 856, 861, 863, 864, 865, 872, 873, 874, 886, 894, 898, 899, 901, 902, 903, 904, 915, 916, 917, 918, 919, 921, 922, 923, 924, 999, 1004, 1006, 1007, 1013, 1016, 1020, 1023, 1025, 1026, 1030, 1034, 1043, 1044, 1048, 1049, 1054, 1055, 1057, 1058, 1059, 1060], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 82, 87, 90, 91, 97, 102, 109, 129, 144, 149, 150, 153, 154, 156, 159, 165, 169, 173, 182, 188, 190, 191, 192, 203, 207, 226, 245, 249, 252, 253, 255, 256, 258, 269, 270, 277, 281, 283, 294, 298, 299, 300, 306, 307, 308, 309, 317, 318, 322, 324, 326, 351, 354, 359, 373, 379, 380, 382, 384, 385, 386, 388, 389, 390, 393, 396, 397, 398, 407, 410, 416, 417, 421, 423, 424, 425, 426, 441, 447, 449, 454, 466, 477, 482, 500, 505, 513, 524, 541, 543, 564, 565, 572, 588, 589, 620, 636, 640, 643, 648, 668, 701, 709, 790, 812, 813, 814, 821, 823, 838, 839, 855, 862, 866, 872, 873, 876, 879, 882, 883, 885, 889, 890, 891, 893, 898, 913, 935, 978, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1013, 1016, 1020, 1024, 1025, 1026, 1029, 1030, 1031, 1038, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1059, 1060], "withstrok": 75, "witten": 420, "wittenau": 1046, "wk": 714, "wl": 382, "wminkowski": [1053, 1055], "wmt": 51, "wnl": 424, "wo": 424, "wojdyla": [1056, 1057], "wolberg": [173, 381], "wolf": [2, 49, 65, 70, 110, 111, 114, 115, 188, 306, 481, 483, 487, 488, 521, 558, 1004, 1031, 1048], "wolframalpha": 1051, "wolodzko": 1054, "wolosonovich": 1049, "wolpert": [423, 576, 577], "wolsza": 1059, "wompner": 1049, "won": [159, 314, 359, 388, 392, 416, 476, 505, 636, 637, 639, 696, 713, 726, 745, 746, 764, 766, 804, 1009, 1020, 1046, 1047, 1052], "wonder": [358, 382], "wonpil": 1006, "wood": 1050, "woolam": 1041, "word": [47, 54, 57, 104, 175, 206, 249, 253, 347, 359, 360, 371, 379, 380, 384, 386, 389, 398, 413, 415, 416, 418, 419, 420, 421, 461, 520, 532, 543, 545, 550, 597, 598, 600, 705, 842, 852, 910, 1004, 1008, 1012, 1015, 1020, 1023, 1024, 1034, 1041, 1049], "word_col": 57, "word_scor": 57, "word_token": 424, "wordnetlemmat": 424, "work": [0, 3, 43, 48, 52, 55, 68, 79, 80, 83, 87, 102, 111, 141, 148, 162, 173, 181, 182, 190, 191, 192, 207, 222, 235, 252, 274, 294, 303, 304, 323, 327, 329, 330, 332, 349, 351, 359, 360, 367, 372, 373, 378, 379, 382, 384, 385, 386, 387, 388, 389, 390, 392, 397, 398, 399, 410, 412, 413, 414, 416, 417, 418, 421, 423, 424, 425, 428, 429, 430, 431, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 468, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 513, 517, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 704, 717, 751, 783, 787, 788, 789, 790, 797, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 957, 961, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1017, 1020, 1023, 1024, 1029, 1030, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "workabl": 389, "workaround": [323, 384, 809, 823], "workclass": [333, 505], "worker": [372, 398, 424, 975, 976, 1056], "workflow": [384, 387, 388, 397, 420, 1033, 1036], "working_memori": [371, 372, 476, 790, 911, 1049], "workingdai": [43, 192], "workload": 1029, "workshop": [0, 416, 424, 848, 1012, 1028], "workstat": 392, "world": [0, 90, 104, 108, 191, 222, 242, 255, 270, 358, 371, 377, 381, 416, 421, 424, 974, 1000, 1010, 1012, 1028, 1030, 1034, 1036, 1041], "worldwid": 1034, "wornbb": 1052, "worri": [89, 1007], "wors": [43, 118, 138, 176, 192, 224, 276, 284, 296, 322, 367, 414, 416, 426, 439, 473, 490, 491, 492, 561, 563, 565, 567, 569, 571, 574, 577, 579, 619, 620, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 678, 679, 681, 682, 687, 688, 689, 714, 730, 731, 732, 733, 737, 794, 846, 847, 856, 864, 871, 914, 916, 919, 922, 924, 1010, 1020, 1050], "worse_prob": 276, "worsen": 149, "worst": [173, 218, 323, 381, 416, 452, 455, 717, 738, 739, 792, 793, 796, 801, 802, 838, 1010, 1034, 1041, 1054], "worth": [90, 147, 192, 218, 384, 392, 1034], "worthwhil": [106, 398], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 80, 88, 90, 93, 104, 111, 113, 114, 118, 122, 129, 138, 151, 173, 175, 180, 181, 191, 192, 193, 194, 196, 203, 208, 218, 219, 220, 233, 236, 245, 252, 255, 263, 270, 272, 276, 277, 282, 284, 286, 290, 294, 297, 303, 309, 314, 317, 318, 322, 323, 329, 332, 339, 347, 351, 354, 355, 358, 360, 366, 367, 371, 379, 380, 384, 385, 386, 390, 392, 393, 396, 397, 398, 399, 407, 410, 413, 414, 416, 417, 418, 419, 420, 421, 423, 424, 425, 439, 454, 473, 476, 490, 491, 492, 497, 536, 541, 543, 545, 550, 553, 561, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 579, 592, 593, 596, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 687, 688, 709, 711, 717, 721, 722, 729, 765, 787, 791, 794, 798, 809, 811, 823, 838, 846, 847, 856, 864, 871, 898, 899, 901, 902, 903, 904, 905, 906, 911, 913, 914, 916, 919, 921, 922, 923, 924, 966, 969, 999, 1000, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1025, 1029, 1030, 1034, 1038, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "wp": [424, 666, 680], "wpd": 358, "wprd": 424, "wrap": [124, 143, 151, 297, 334, 378, 386, 398, 410, 440, 517, 666, 685, 839, 897, 1000, 1010, 1013, 1025, 1029, 1041, 1046, 1049, 1051, 1052, 1054, 1056], "wraparound": 385, "wrapper": [2, 64, 297, 390, 393, 420, 426, 553, 629, 677, 680, 751, 913, 1006, 1026, 1029, 1045, 1053, 1060], "wrapt": [667, 668], "wrath": 417, "write": [47, 55, 152, 187, 194, 252, 326, 358, 371, 372, 378, 382, 383, 384, 388, 389, 390, 392, 393, 396, 398, 410, 412, 417, 421, 424, 1021, 1030, 1042, 1054, 1058], "writeabl": [939, 940, 1059], "writer": 358, "written": [41, 44, 46, 65, 86, 88, 127, 171, 188, 225, 269, 301, 329, 336, 337, 372, 381, 384, 385, 386, 390, 392, 396, 398, 417, 422, 495, 511, 517, 706, 722, 839, 918, 925, 1004, 1006, 1010, 1014, 1015, 1024, 1031, 1050], "wrong": [95, 218, 270, 303, 358, 367, 381, 384, 386, 424, 513, 735, 765, 802, 1010, 1016, 1025, 1044, 1046, 1048, 1049, 1050, 1051, 1054, 1058, 1059], "wrongli": [218, 347, 1059], "wrote": [159, 379], "ws2001": 1002, "wspace": [53, 54, 74, 79, 80, 97, 113, 124, 140, 218, 236, 245, 261, 263, 264, 267, 302, 310, 337, 344], "wstate": 1054, "wtv": 390, "wtw": 390, "wu": [1025, 1045, 1053], "wurp": [1055, 1056], "wuthrich": [218, 236], "ww": 421, "www": [45, 105, 196, 218, 234, 236, 290, 296, 314, 378, 379, 384, 392, 416, 420, 450, 457, 495, 517, 518, 540, 543, 546, 550, 653, 667, 673, 680, 694, 695, 862, 869, 921, 922, 1006, 1023], "www4": [173, 381], "wyseguy7": 1047, "w\u00fcthrich": 414, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 238, 239, 240, 243, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 296, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 377, 378, 379, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 398, 407, 410, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 502, 503, 504, 507, 509, 510, 511, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 719, 720, 734, 741, 744, 751, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 797, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 932, 934, 935, 936, 937, 938, 939, 940, 943, 954, 956, 957, 958, 959, 969, 970, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1022, 1023, 1024, 1025, 1026, 1030, 1038, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060], "x0": [51, 210, 227, 241, 259, 317, 344, 398, 437, 472, 576, 577, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894], "x00": 424, "x006": 1042, "x00a": 424, "x00b": 424, "x00c": 424, "x00d": 424, "x00e": 424, "x00f": 424, "x00g": 424, "x00h": 424, "x00i": 424, "x00l": 424, "x00n": 424, "x00o": 424, "x00r": 424, "x00t": 424, "x00u": 424, "x00z": 424, "x0_cat": [330, 1020], "x0_infrequent_sklearn": [330, 1020], "x0_label": 317, "x0_rabbit": [330, 1020], "x0_str_femal": 886, "x0_str_male": 886, "x0l": 1045, "x1": [51, 117, 121, 140, 150, 178, 230, 241, 317, 344, 386, 398, 437, 472, 518, 576, 577, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 636, 637, 638, 639, 708, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894], "x110": 1056, "x1_int_1": 886, "x1_int_2": 886, "x1_int_3": 886, "x1_label": 317, "x2": [117, 121, 140, 150, 178, 230, 259, 386, 417, 597, 638, 708], "x27": [63, 105, 106, 143, 159, 162, 170, 191, 192, 193, 246, 247, 256, 257, 259, 266, 270, 274, 276, 277, 283, 288, 290, 315, 323, 327, 328, 330, 338], "x2_tr": 638, "x3": [150, 259, 417], "x64": 382, "x8": 88, "x86": 382, "x86_64": [387, 402], "x9ft": 424, "x_": [168, 176, 267, 276, 326, 386, 416, 419, 421, 636, 644, 773, 868, 908, 909, 1006, 1012, 1017, 1047], "x_0": [219, 666], "x_1": [124, 168, 178, 215, 219, 419, 421, 423, 426, 622, 634, 666, 886, 913, 914, 1006, 1012, 1014, 1020, 1024], "x_1d": 330, "x_1x_2": 1020, "x_1x_2x_3": 1020, "x_1x_3": 1020, "x_2": [168, 178, 215, 421, 423, 424, 426, 622, 634, 1006, 1014, 1020], "x_20": 340, "x_2d": 347, "x_2x_3": 1020, "x_3": [168, 1020], "x_6": 886, "x_7": 886, "x_a": 321, "x_adult": 333, "x_aniso": [79, 92, 97], "x_axi": [126, 226, 280], "x_b": 321, "x_bimod": 321, "x_bin": 318, "x_bound": [426, 626], "x_c": [490, 491, 493, 1017], "x_calib": 445, "x_california": 187, "x_cardiotocographi": 255, "x_center": 200, "x_check": 940, "x_chisq": 321, "x_cluster": 865, "x_convert": 939, "x_copi": 1052, "x_cu": 412, "x_d": [426, 623], "x_dens": [333, 553], "x_df": 156, "x_diabet": 187, "x_different_covari": 70, "x_digit": [107, 165, 313, 417], "x_dist_graph": 857, "x_embed": [306, 307, 701, 705, 862, 1013], "x_error": 224, "x_errors_larg": 224, "x_featur": [108, 649, 650, 651, 1002], "x_filter": 92, "x_fit": 697, "x_fit_": [544, 652], "x_forestcov": 255, "x_full": [186, 187, 317], "x_full_train": 143, "x_gaussian": 321, "x_hashed_lsa": 359, "x_hat": [540, 546, 554, 555], "x_hetero": 131, "x_homo": 131, "x_i": [52, 113, 142, 168, 191, 219, 329, 354, 416, 421, 422, 423, 426, 623, 624, 628, 631, 632, 634, 848, 849, 852, 1001, 1002, 1006, 1012, 1013, 1014, 1020, 1024, 1025, 1026], "x_idx_sort": 1053, "x_imput": 639, "x_indic": 169, "x_inform": 324, "x_inlier": 304, "x_inv": [597, 600], "x_ipca": 128, "x_iri": 281, "x_isotropic_covari": 70, "x_j": [416, 426, 623, 624, 628, 631, 632, 634, 1001, 1002, 1006, 1013, 1025, 1026], "x_k": [419, 421, 1004, 1013], "x_label": 187, "x_leav": [566, 567, 568, 569, 573, 574, 575, 921, 922, 923, 924], "x_left_lower_corn": [50, 310, 379, 507], "x_legend": 47, "x_list": 320, "x_loadings_": [490, 491, 492], "x_lognorm": [321, 1020], "x_lsa": 359, "x_m": 1014, "x_max": [67, 87, 93, 140, 147, 157, 166, 177, 250, 312, 319, 341, 351, 352], "x_max_": 644, "x_mean": 428, "x_mean_": 1053, "x_min": [67, 87, 93, 140, 147, 151, 157, 166, 177, 207, 250, 312, 319, 341, 351, 352], "x_min_": 644, "x_miss": [154, 186, 187], "x_miss_california": 187, "x_miss_diabet": 187, "x_n": [124, 421, 913, 914, 1012, 1014, 1024], "x_near_unique_categori": 324, "x_new": [91, 417, 421, 425, 440, 450, 451, 453, 455, 457, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 558, 576, 578, 579, 591, 592, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 637, 639, 644, 647, 648, 649, 650, 651, 697, 698, 699, 700, 701, 862, 869, 876, 877, 878, 879, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 905, 906, 1022], "x_new_again": 1022, "x_new_invers": 1022, "x_norm_squar": [772, 1046, 1058], "x_normal": 1020, "x_np": 412, "x_offset": 200, "x_offset_": [653, 654, 1053], "x_origin": [543, 548, 550, 552, 553, 639, 905, 906], "x_out": [331, 877, 886, 887], "x_outlier": [201, 232, 303, 304, 346], "x_p": [416, 454, 1006], "x_pca": 128, "x_plot": [198, 219, 224, 251, 279, 302, 322], "x_plot_ext": 219, "x_plot_scal": 322, "x_po": 296, "x_q": 416, "x_r": [132, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612], "x_r2": 132, "x_rand": 282, "x_random": 207, "x_reconstruct": [330, 490, 491, 492, 592], "x_reconstructed_kernel_pca": [44, 129], "x_reconstructed_pca": [44, 129], "x_red": 87, "x_reduc": [86, 120, 157, 453], "x_restor": 86, "x_right": 70, "x_rope": 276, "x_rotations_": [419, 490, 491, 492], "x_scale": [200, 883, 899, 1020], "x_scale_": [653, 654, 1053], "x_scaler": 49, "x_score": [304, 490, 491, 492, 493], "x_scores_": [492, 1053], "x_select": 367, "x_shared_covari": 70, "x_shuffl": 324, "x_size": 114, "x_sp": 204, "x_spars": [333, 543, 980, 983], "x_sparse_embed": 575, "x_squared_norm": [264, 468], "x_src": 302, "x_std": [883, 899, 1020], "x_std_": 1053, "x_t": [472, 636, 872], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 111, 117, 118, 129, 138, 141, 143, 145, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 180, 183, 190, 191, 192, 193, 194, 196, 199, 203, 208, 213, 215, 216, 224, 225, 226, 232, 233, 234, 236, 246, 248, 254, 258, 259, 263, 269, 270, 273, 274, 279, 283, 285, 289, 291, 296, 300, 303, 305, 306, 309, 312, 314, 315, 319, 321, 322, 324, 326, 327, 328, 333, 334, 339, 340, 346, 358, 362, 364, 365, 366, 367, 371, 378, 386, 389, 397, 410, 417, 420, 423, 446, 478, 479, 480, 481, 482, 483, 484, 518, 567, 568, 569, 576, 577, 706, 707, 709, 711, 808, 831, 839, 841, 844, 862, 870, 871, 873, 887, 923, 924, 1000, 1010, 1012, 1013, 1014, 1016, 1020, 1024, 1025, 1026, 1038, 1041], "x_test_df": 259, "x_test_kernel_pca": 129, "x_test_maxab": 1020, "x_test_minmax": 1020, "x_test_miss": 154, "x_test_no_cf_encod": 324, "x_test_noisi": 44, "x_test_np": 259, "x_test_pca": [45, 129], "x_test_r": 117, "x_test_scal": 259, "x_test_sel": 194, "x_test_select": 367, "x_test_text": 47, "x_test_tran": 1020, "x_test_transform": [367, 420], "x_text": 47, "x_tfidf": 359, "x_thresholds_": [248, 644, 1053], "x_torch": 412, "x_tr": [876, 882, 885, 886, 887, 891, 893, 896, 898, 899, 903, 904], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 111, 117, 118, 129, 138, 141, 145, 149, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 199, 203, 213, 215, 216, 219, 225, 226, 232, 233, 234, 236, 246, 254, 258, 259, 263, 265, 269, 270, 273, 274, 279, 283, 285, 289, 296, 300, 303, 305, 306, 309, 312, 314, 315, 319, 321, 322, 324, 326, 327, 328, 333, 334, 339, 340, 346, 358, 362, 366, 367, 371, 378, 386, 389, 397, 417, 420, 423, 445, 446, 518, 567, 568, 569, 576, 577, 706, 707, 709, 711, 808, 831, 839, 841, 844, 862, 870, 871, 873, 887, 923, 924, 1000, 1010, 1012, 1013, 1014, 1016, 1018, 1020, 1024, 1025, 1038], "x_train_": 620, "x_train_ensembl": 143, "x_train_linear": 143, "x_train_maxab": 1020, "x_train_minmax": 1020, "x_train_miss": 154, "x_train_no_cf_encod": 324, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 191, "x_train_r": 117, "x_train_sel": 194, "x_train_select": 367, "x_train_std_transform": 322, "x_train_text": 47, "x_train_tran": 1020, "x_train_transform": [322, 367, 420], "x_train_valid": 63, "x_tran": [321, 332, 412, 450, 472, 889, 894, 901, 934, 1020], "x_trans_bc": 321, "x_trans_qt": 321, "x_trans_yj": 321, "x_transform": [128, 157, 252, 493, 540, 541, 542, 543, 544, 546, 548, 552, 575, 647, 648, 697, 698, 699, 700], "x_transformed_fit_": 544, "x_true": 241, "x_uniform": 321, "x_val": [149, 1018], "x_valid": 63, "x_valu": 339, "x_vari": 92, "x_weibul": 321, "x_weights_": [419, 490, 491, 492, 493], "x_wrong": 70, "xa": 590, "xanchor": 277, "xarg": 1041, "xavier": [870, 871, 1049, 1050, 1051, 1053, 1054, 1059], "xaxi": [80, 120, 130, 144, 215, 238, 240, 243, 297, 302, 358], "xaxis2": 144, "xb": [117, 892], "xbar_": 558, "xbc": 424, "xc3": 424, "xcjason": 1051, "xcode": 382, "xd": 535, "xdang": 688, "xerox": 51, "xerr": [186, 187, 359], "xethan": 1053, "xfail": [392, 932], "xfc": 424, "xfcche": 424, "xfea": 424, "xff": 424, "xgamma": 694, "xgboost": [154, 156, 423, 1029], "xgrid": [50, 310], "xhan": 1050, "xhy": 1048, "xi": [2, 79, 100, 381, 416, 419, 424, 458, 464, 518, 1024, 1052], "xi_i": 1024, "xi_k": 419, "xiang": 1059, "xiangyin": 1054, "xiao": [0, 395, 405, 1049, 1051, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "xiaojin": 908, "xiaoyu": 1053, "xiaoyuchai": 1054, "xin": [688, 1006, 1049], "xinfan": [1041, 1042, 1045], "xing": [1049, 1050], "xinv": 878, "xinyu": 416, "xinyuliu12": 1050, "xiong": [1049, 1050, 1055], "xj": 414, "xk": [100, 559], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 96, 111, 112, 114, 115, 117, 118, 120, 126, 131, 139, 140, 142, 148, 150, 151, 152, 153, 154, 158, 162, 164, 168, 169, 172, 175, 176, 177, 178, 180, 181, 182, 191, 198, 201, 202, 203, 205, 206, 207, 208, 211, 212, 218, 220, 221, 223, 225, 227, 228, 232, 236, 249, 251, 253, 255, 271, 275, 276, 280, 281, 285, 286, 289, 291, 299, 300, 303, 304, 323, 324, 344, 346, 347, 350, 358, 363, 364, 365, 640], "xlim": [51, 63, 79, 93, 97, 107, 111, 112, 113, 126, 140, 141, 142, 158, 164, 176, 177, 191, 198, 208, 210, 217, 224, 227, 232, 245, 253, 262, 267, 271, 285, 291, 303, 304, 346, 351, 352, 355, 365], "xm": [51, 241], "xmax": [50, 111, 208, 210, 227, 228, 310], "xmin": [50, 111, 208, 210, 227, 228, 310], "xn": 518, "xom": 51, "xor": [174, 176, 177, 178, 188, 228, 229, 231, 265, 320, 352, 356, 619, 623, 631, 1006, 1026, 1031, 1048], "xp": [419, 888], "xpreprocessor": 382, "xrang": 1047, "xred": [453, 1057], "xrot": 53, "xrx": 51, "xs_sp": 204, "xsat": 1051, "xscale": [176, 181, 251], "xt": [162, 297, 398, 453, 547, 549, 636, 638, 809, 812, 813, 823, 857, 865, 873, 878, 883, 890, 902, 937, 1057, 1059], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 81, 85, 86, 87, 93, 94, 97, 115, 117, 127, 148, 150, 154, 177, 178, 179, 183, 202, 208, 214, 231, 245, 253, 262, 263, 264, 267, 275, 276, 291, 301, 310, 315, 323, 336, 347, 350, 352, 706], "xtick_period": 192, "xtick_start": 192, "xticklabel": [43, 49, 148, 154, 192, 323], "xticks_label": 150, "xticks_po": 150, "xticks_rot": [45, 706], "xtrain": 310, "xu": [416, 419, 427, 452, 1024, 1054, 1055, 1058, 1059, 1060], "xue": [0, 1045, 1046, 1047, 1049, 1050, 1053], "xuefeng": [1058, 1059, 1060], "xueqin": [688, 1006], "xun": [1051, 1053], "xuniu": 1056, "xval": 187, "xw": [217, 329, 655, 656, 658, 661, 662, 663, 664, 665, 669, 670, 671, 672, 681, 690, 691, 692, 693, 1006], "xx": [77, 93, 113, 147, 151, 157, 166, 177, 178, 179, 192, 225, 228, 229, 230, 231, 232, 243, 245, 253, 265, 303, 312, 319, 320, 341, 346, 347, 351, 352, 355, 356], "xx0": [140, 640], "xx1": [140, 640], "xx_coarser": 147, "xxx": 398, "xy": [48, 63, 84, 283, 310, 352, 402, 655, 656, 659, 660, 661, 662, 663, 664, 669, 670, 671, 672, 673, 690, 691, 692, 693, 695], "xycoord": [48, 63], "xyguo": [1047, 1049], "xytext": [48, 63, 196], "xyz": 383, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 80, 87, 89, 91, 92, 95, 96, 97, 100, 101, 105, 106, 108, 109, 114, 117, 118, 121, 122, 126, 128, 129, 130, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 236, 238, 239, 240, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 261, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 296, 297, 299, 300, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 376, 377, 378, 379, 382, 384, 386, 388, 389, 391, 392, 393, 397, 398, 407, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 493, 495, 507, 509, 511, 514, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 708, 709, 710, 711, 715, 720, 735, 741, 744, 750, 751, 765, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 797, 798, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 932, 933, 939, 944, 945, 969, 971, 972, 973, 980, 983, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1024, 1025, 1026, 1030, 1036, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "y0": [51, 241], "y1": [51, 121, 140, 241, 518, 725, 1011, 1012], "y1_label": 46, "y2": [121, 140, 725, 1011], "y2_label": 46, "y3": 1011, "y_": [248, 262, 266, 267, 309, 386, 419, 421, 646, 657, 678, 689, 738, 739, 747, 773, 792, 793, 796, 1006, 1010, 1047], "y_1": [139, 364, 365, 419, 1010, 1014, 1024], "y_2": [139, 364, 365, 1014], "y_20": 340, "y_2d": 347, "y_3": 365, "y_30": 341, "y_50": 341, "y_adult": 333, "y_all": [675, 677, 685, 841, 842, 870], "y_ard": 198, "y_ard_std": 198, "y_axi": [126, 226], "y_bia": 141, "y_brr": 198, "y_brr_std": 198, "y_c": [490, 491, 493], "y_calib": 445, "y_california": 187, "y_coclust": 57, "y_convert": 939, "y_cov": 620, "y_cu": 412, "y_decis": [333, 844], "y_dens": 1011, "y_diabet": 187, "y_different_covari": 70, "y_digit": [107, 165, 313, 417], "y_error": [141, 224], "y_errors_larg": 224, "y_filter": 92, "y_full": [186, 187, 317], "y_full_train": 143, "y_grid_pr": 157, "y_hat": 473, "y_high": 151, "y_i": [142, 329, 354, 414, 423, 1001, 1002, 1006, 1010, 1014, 1024, 1025, 1026], "y_indic": 884, "y_iri": 281, "y_isotropic_covari": 70, "y_j": [1002, 1010, 1012, 1020, 1025], "y_k": [419, 1020], "y_kmean": 57, "y_kr": 251, "y_l": 1010, "y_label": 236, "y_left_lower_corn": [50, 310, 379, 507], "y_limit": 148, "y_loadings_": [490, 491, 492], "y_loc": 358, "y_log_prob": 844, "y_log_proba": 873, "y_low": 151, "y_lower": [95, 151], "y_mask": 340, "y_max": [67, 93, 140, 147, 157, 166, 177, 236, 250, 312, 319, 341, 351, 352, 644, 646], "y_mean": [180, 181, 184, 620, 653, 654], "y_mean_": 1053, "y_med": 151, "y_min": [67, 93, 140, 147, 157, 166, 177, 250, 312, 319, 341, 351, 352, 644, 646], "y_miss": [186, 187], "y_miss_california": 187, "y_miss_diabet": 187, "y_multirf": 158, "y_n": [1010, 1014, 1024], "y_new": 91, "y_nois": 141, "y_noisi": 217, "y_norm_squar": 772, "y_normal": 220, "y_np": 412, "y_numer": [939, 998], "y_observ": 334, "y_onehot_test": 285, "y_org": 944, "y_outlier": 201, "y_pareto": 220, "y_plot": [198, 219, 224, 279], "y_plot_ext": 219, "y_po": 360, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 92, 97, 104, 109, 138, 151, 152, 154, 159, 170, 191, 218, 220, 225, 228, 233, 235, 236, 245, 246, 255, 270, 272, 274, 279, 304, 308, 315, 322, 334, 339, 340, 367, 384, 391, 398, 423, 439, 447, 473, 490, 491, 492, 558, 561, 563, 565, 566, 567, 569, 571, 573, 574, 576, 577, 579, 620, 640, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 706, 707, 709, 710, 711, 712, 717, 721, 722, 727, 730, 731, 732, 733, 737, 738, 739, 743, 745, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 792, 793, 794, 796, 797, 799, 800, 805, 809, 812, 813, 823, 834, 844, 846, 847, 856, 864, 871, 873, 913, 914, 915, 916, 917, 918, 919, 922, 924, 1010, 1012, 1047, 1048, 1050, 1052, 1056, 1057, 1058], "y_pred_ard": 203, "y_pred_bin": 218, "y_pred_chain": 296, "y_pred_empti": [738, 739], "y_pred_enet": 203, "y_pred_ensembl": 296, "y_pred_lasso": 203, "y_pred_lr": 220, "y_pred_nnl": 213, "y_pred_ol": 213, "y_pred_outli": [232, 303, 346], "y_pred_outliers_sgd": 232, "y_pred_ovr": 296, "y_pred_product": 236, "y_pred_qr": 220, "y_pred_ridg": 109, "y_pred_ridge_with_trans_target": 109, "y_pred_scal": 322, "y_pred_seg": 218, "y_pred_test": [232, 303, 346], "y_pred_test_sgd": 232, "y_pred_tot": 236, "y_pred_train": [232, 346], "y_pred_train_sgd": 232, "y_pred_with_": 190, "y_pred_without_": 190, "y_predict": [141, 386, 1041], "y_prob": [62, 64, 178, 446, 447, 718, 844, 870, 1010, 1055, 1059], "y_proba": [150, 153, 322, 398, 718, 873, 1059], "y_proba_sc": 322, "y_rand": 341, "y_reconstruct": [490, 491, 492], "y_rf": 158, "y_right": 70, "y_rotations_": [419, 490, 491, 492], "y_sampl": [184, 620], "y_scaler": 49, "y_score": [246, 283, 285, 398, 490, 491, 492, 716, 729, 735, 736, 748, 749, 765, 791, 797, 798, 803, 809, 812, 813, 823, 873, 1010, 1047, 1055, 1057, 1059], "y_scores_": [492, 1053], "y_shared_covari": 70, "y_spars": 1011, "y_std": [181, 184, 561, 620, 653, 654, 1054], "y_std_": 1053, "y_svr": 251, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 117, 118, 129, 138, 141, 143, 145, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 183, 190, 191, 192, 193, 194, 196, 203, 213, 215, 218, 224, 225, 226, 233, 234, 236, 246, 254, 258, 259, 263, 269, 270, 273, 274, 279, 283, 285, 289, 296, 300, 305, 306, 312, 314, 315, 319, 322, 324, 326, 327, 328, 333, 334, 339, 340, 358, 362, 366, 367, 378, 389, 397, 417, 420, 423, 446, 518, 567, 568, 569, 576, 577, 706, 707, 709, 711, 808, 831, 839, 841, 844, 862, 870, 871, 873, 923, 924, 1010, 1012, 1013, 1020, 1025, 1038, 1041], "y_test_pr": 263, "y_test_predict": 254, "y_test_r": 117, "y_test_tru": 339, "y_thresholds_": [248, 644, 1053], "y_torch": 412, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 117, 118, 129, 138, 141, 145, 149, 150, 151, 152, 153, 154, 155, 158, 165, 166, 169, 170, 181, 182, 183, 184, 190, 191, 192, 193, 194, 196, 199, 203, 213, 215, 216, 219, 225, 226, 233, 234, 246, 254, 258, 259, 263, 269, 270, 273, 274, 279, 283, 285, 289, 296, 300, 305, 306, 312, 314, 315, 319, 322, 324, 326, 327, 328, 333, 334, 336, 337, 339, 340, 341, 358, 362, 366, 367, 371, 378, 386, 389, 397, 417, 420, 423, 445, 446, 518, 567, 568, 569, 576, 577, 706, 707, 709, 711, 808, 831, 839, 841, 844, 862, 870, 871, 873, 923, 924, 1000, 1010, 1012, 1013, 1018, 1020, 1025, 1038], "y_train_": 620, "y_train_ensembl": 143, "y_train_linear": 143, "y_train_noisi": 182, "y_train_pr": 263, "y_train_r": 117, "y_train_valid": 63, "y_tran": 109, "y_transform": 493, "y_true": [43, 52, 57, 68, 94, 109, 138, 159, 178, 218, 228, 236, 255, 264, 270, 339, 384, 439, 446, 447, 473, 490, 491, 492, 561, 563, 565, 566, 567, 569, 571, 573, 574, 577, 579, 620, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 679, 681, 682, 687, 688, 706, 707, 709, 710, 711, 712, 716, 717, 718, 721, 722, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 791, 792, 793, 794, 796, 797, 798, 799, 800, 803, 805, 808, 846, 847, 856, 864, 871, 914, 916, 919, 922, 924, 1010, 1042, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1058], "y_true_bin": 218, "y_true_categor": [718, 1010], "y_true_empti": 738, "y_true_mean": 220, "y_true_seg": 218, "y_type_": 880, "y_uniqu": 61, "y_upper": [95, 151], "y_val": [149, 1018], "y_valid": 63, "y_var": 141, "y_vari": 92, "y_weights_": [419, 490, 491, 492, 493], "y_wrong": 70, "yacin": 1049, "yadav": 1055, "yagi": 1053, "yahoo": 51, "yair": [416, 700], "yakov": 1053, "yalburgi": [1048, 1049], "yaman": 1056, "yamanishi": 379, "yamin": 1041, "yaml": [388, 392], "yan": [1045, 1053], "yanchor": 277, "yang": [379, 416, 421, 543, 648, 1047, 1048, 1051, 1053, 1054, 1055, 1057, 1058], "yangarbit": 1048, "yanhong": 1056, "yanlend": 1047, "yann": [1041, 1043], "yanni": 416, "yannick": [1041, 1043], "yao": [0, 381, 395, 405, 1047, 1048, 1049, 1050, 1057, 1058, 1059, 1060], "yap": 1048, "yar": 1055, "yareyaredesuyo": 1059, "yaroslav": [0, 405, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1057, 1058, 1059, 1060], "yarowski": [328, 910, 1023], "yashika": 1053, "yasmeen": 1054, "yat2016": 416, "yate": [599, 739], "yates2011": 599, "yau": [1044, 1045, 1046, 1047, 1048], "yaxi": [46, 49, 80, 95, 120, 130, 144, 215, 238, 240, 243, 261, 297, 302, 358], "ye": [358, 392, 398, 410, 667, 668, 880, 897, 1006], "year": [0, 43, 162, 173, 180, 190, 191, 192, 218, 219, 236, 334, 381, 383, 388, 396, 420, 424, 811, 816, 818, 892, 1006, 1010, 1030, 1034], "yearli": [43, 399], "yearremodadd": 159, "yeast": [296, 844], "yee": [1048, 1049], "yegelwel": 1053, "yeh": 1054, "yelit": 1047, "yellow": [70, 122, 347, 1011], "yellowbrick": 1029, "yellowgreen": [219, 221, 228, 364], "yen": [1047, 1048], "yenchen": [0, 1047], "yenchenlin": 1047, "yenugula": 1059, "yeo": [317, 321, 889, 901, 1020, 1049, 1055, 1057], "yep": 387, "yerr": [107, 112, 114, 145, 148, 172, 299, 323, 339], "yesy": 404, "yesyesclassificationclassificationnumb": 404, "yesyesdo": 404, "yesyesfew": 404, "yesyesllel": 404, "yesyespredict": 404, "yesyessgdclassifiersgd": 404, "yesyessgdregressorsgd": 404, "yesyestextdatatext": 404, "yet": [48, 92, 203, 236, 266, 277, 360, 373, 379, 383, 396, 401, 402, 407, 420, 421, 423, 424, 426, 456, 460, 469, 470, 562, 563, 586, 787, 993, 999, 1006, 1010, 1016, 1024, 1030, 1050, 1058], "yeung": 1047, "ygrid": [50, 310], "yhoo": 51, "yi": [518, 1012, 1045, 1049, 1050, 1053], "yichuan": [1047, 1048], "yield": [47, 48, 62, 80, 90, 111, 112, 113, 114, 151, 203, 213, 218, 233, 236, 281, 296, 312, 317, 344, 349, 358, 359, 367, 371, 373, 378, 389, 398, 413, 416, 418, 420, 421, 423, 424, 425, 445, 457, 476, 480, 517, 518, 546, 547, 548, 550, 555, 562, 563, 568, 569, 570, 571, 576, 577, 603, 611, 656, 660, 661, 662, 664, 670, 672, 674, 682, 684, 695, 735, 790, 797, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 837, 838, 840, 844, 847, 905, 906, 951, 958, 960, 961, 967, 1002, 1004, 1006, 1007, 1010, 1025, 1026, 1046, 1047, 1049, 1052, 1054], "yifan": 1014, "yime": 1049, "ying": [416, 460, 470, 1055], "yinglr": 1051, "yisheng": 1058, "yiyangq": 1055, "yj": [117, 321], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 96, 111, 112, 114, 115, 117, 118, 120, 126, 131, 139, 140, 142, 150, 151, 152, 153, 154, 158, 162, 164, 168, 169, 172, 175, 176, 177, 178, 180, 181, 182, 191, 198, 201, 202, 203, 205, 206, 207, 208, 211, 212, 218, 220, 221, 223, 225, 227, 228, 236, 249, 251, 253, 271, 275, 276, 279, 280, 281, 285, 286, 289, 291, 300, 324, 344, 347, 350, 358, 363, 364, 365, 640], "ylim": [51, 61, 63, 69, 72, 79, 93, 97, 111, 112, 113, 126, 140, 141, 148, 151, 158, 161, 176, 177, 191, 207, 208, 210, 211, 212, 224, 227, 228, 232, 245, 253, 262, 267, 271, 275, 279, 285, 289, 291, 303, 304, 346, 351, 352, 355, 358, 365], "ylorbr_r": 113, "ym": [51, 241], "ymax": [47, 49, 50, 111, 207, 210, 211, 219, 227, 276, 310], "ymazari": 1049, "ymean": 199, "ymin": [50, 111, 207, 210, 211, 219, 227, 276, 310], "yml": 392, "yn": [518, 1011, 1012], "yoav": 1047, "yoch": 1054, "yogendrasingh": 1056, "yojana": 1056, "yokasr": 1051, "yoni": 1044, "yoon": 1052, "yoram": [294, 744], "york": [275, 797, 806, 1000, 1010, 1022], "yoshihiro": 1051, "yoshiki": [1044, 1047], "yoshizawa": 1049, "yoshua": [870, 871, 1023], "yosshi999": 1055, "yosuk": [1053, 1054], "yotam": 1057, "you": [0, 30, 54, 58, 61, 105, 120, 146, 147, 150, 152, 170, 173, 187, 192, 194, 205, 219, 222, 247, 252, 259, 264, 271, 276, 277, 283, 292, 303, 326, 327, 330, 332, 333, 337, 340, 351, 358, 367, 371, 372, 373, 378, 379, 382, 383, 384, 385, 386, 388, 389, 390, 392, 393, 397, 398, 402, 403, 404, 407, 410, 412, 414, 415, 416, 417, 418, 420, 423, 424, 425, 427, 428, 433, 445, 451, 452, 454, 455, 457, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 490, 491, 492, 509, 512, 513, 518, 519, 541, 542, 543, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 589, 590, 591, 597, 598, 599, 600, 616, 617, 619, 620, 636, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 699, 708, 709, 794, 807, 808, 810, 811, 812, 813, 814, 816, 818, 824, 825, 827, 828, 829, 831, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 870, 871, 872, 873, 876, 877, 878, 879, 880, 885, 886, 887, 892, 893, 898, 899, 901, 902, 903, 904, 906, 908, 909, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 932, 957, 975, 999, 1000, 1005, 1006, 1010, 1011, 1014, 1016, 1017, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1033, 1034, 1041, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "youden": 1010, "younger": 236, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 371, 372, 373, 378, 382, 383, 384, 385, 387, 388, 390, 392, 393, 396, 397, 398, 402, 403, 404, 410, 412, 415, 416, 417, 418, 423, 424, 427, 428, 452, 454, 512, 542, 570, 571, 611, 643, 655, 696, 720, 809, 812, 813, 815, 823, 832, 836, 838, 932, 951, 1007, 1014, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1034, 1042, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "yourlogin": 384, "yourself": [105, 383, 384, 385, 389, 392, 1014], "ypred": 1048, "yrsold": 159, "yscale": [176, 181, 218, 251, 358], "ystd": 199, "yt": 884, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 81, 85, 86, 87, 93, 94, 97, 115, 117, 127, 152, 169, 177, 178, 179, 183, 202, 208, 214, 231, 245, 253, 262, 263, 264, 267, 271, 291, 301, 310, 315, 336, 347, 352, 358], "yticklabel": [271, 358], "ytrain": 310, "ytrue": 1048, "yu": [203, 416, 460, 470, 667, 1006, 1014, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "yuan": [1055, 1056, 1057, 1058, 1059], "yuchen": [1057, 1058], "yucheng": 1046, "yue": [1053, 1059], "yufeng": 1049, "yuichi": 1048, "yuki": 1055, "yule": [458, 465, 787, 788, 789], "yulia": 1051, "yum": 382, "yun": [1056, 1057], "yung": [1044, 1047], "yunqian": 1006, "yurchak": [0, 405, 424, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "yuri": [1044, 1046], "yusuf": [1056, 1057], "yusuk": 1054, "yusukenagasaka": 1054, "yutaro": 1053, "yuusuk": 1058, "yuval": [413, 459], "yv": 419, "yve": 1054, "yy": [77, 93, 113, 147, 157, 166, 177, 179, 192, 225, 229, 230, 231, 232, 243, 245, 253, 303, 312, 319, 320, 341, 346, 347, 351, 352, 355, 356], "yy_": 225, "yy_coars": 147, "yy_down": 352, "yy_up": 352, "yzhenman": 1054, "z": [50, 93, 147, 166, 177, 179, 192, 228, 230, 231, 238, 240, 245, 250, 265, 303, 310, 312, 319, 322, 341, 347, 352, 356, 381, 388, 413, 421, 423, 562, 563, 594, 648, 673, 680, 694, 695, 698, 702, 708, 733, 794, 893, 1006, 1007, 1014, 1015, 1056], "z_": 421, "z_1": 1006, "z_2": 1006, "z_3": 1006, "z_4": 1006, "z_5": 1006, "z_i": [142, 1014], "z_l": 1014, "z_points_coars": 147, "zablit": 1056, "zac": 1046, "zacchari": 1053, "zach": [1049, 1050, 1055], "zachariah": 1049, "zadrozni": [64, 414, 445, 685], "zaffalon": 276, "zahlii": 1054, "zain": [0, 405, 1055, 1056, 1057, 1058], "zalkow": 1046, "zambelli": 1044, "zamrii": 1051, "zanouda": 1048, "zaxi": [80, 120, 130, 215, 238], "zayd": 1050, "zaytsev": 1044, "zdzieblo": 1058, "zebra": 721, "zedan": 1057, "zeel": 1055, "zeeshan": [1056, 1057], "zempleni": 1055, "zen": 944, "zenin": 1047, "zentrum": 1010, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 87, 89, 112, 114, 115, 124, 127, 129, 140, 141, 150, 152, 153, 158, 170, 173, 187, 198, 203, 204, 206, 209, 211, 212, 217, 218, 219, 222, 223, 224, 228, 233, 236, 249, 252, 253, 255, 261, 265, 267, 273, 276, 281, 285, 286, 302, 317, 327, 328, 351, 354, 359, 360, 362, 366, 371, 372, 379, 386, 390, 398, 414, 416, 418, 421, 423, 424, 425, 426, 429, 454, 460, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 495, 506, 517, 518, 532, 535, 536, 540, 541, 544, 546, 547, 548, 549, 551, 552, 556, 557, 561, 566, 567, 568, 569, 570, 571, 573, 574, 575, 590, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 620, 645, 648, 652, 653, 654, 659, 667, 668, 673, 674, 675, 676, 677, 680, 685, 686, 687, 694, 695, 712, 718, 721, 722, 724, 725, 734, 738, 739, 743, 747, 749, 755, 792, 793, 794, 796, 805, 806, 824, 825, 828, 829, 842, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 876, 883, 885, 886, 888, 889, 890, 892, 893, 899, 900, 901, 902, 906, 913, 921, 922, 923, 924, 955, 984, 995, 1000, 1006, 1008, 1009, 1012, 1013, 1014, 1020, 1021, 1022, 1024, 1025, 1026, 1041, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "zero_bas": [495, 517, 518], "zero_class": 253, "zero_divis": [315, 722, 725, 738, 739, 747, 792, 793, 796, 1010, 1051, 1053, 1057, 1060], "zero_impute_scor": 187, "zero_on": [384, 1042], "zero_one_loss": [2, 384, 412, 712, 743, 1010, 1042, 1043, 1044, 1058, 1059], "zero_one_scor": 1042, "zerodivisionerror": [1048, 1051, 1057], "zeros_lik": [84, 220, 285], "zeta": 1025, "zeta_i": 1025, "zev": [1047, 1048, 1049, 1050], "zeyusun": 1054, "zha": [698, 702, 1007], "zhai_pro": 1046, "zhan": 1056, "zhang": [416, 450, 673, 688, 694, 695, 698, 702, 767, 768, 1006, 1007, 1008, 1012, 1024, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1057, 1058, 1059], "zhang02c": 685, "zhang96": [416, 450], "zhao": [1051, 1053, 1054, 1055, 1056], "zhaowei": 1053, "zhaoweiwang": 1054, "zhauniarovich": 1046, "zhdanovich": 1049, "zhechev": 1056, "zhehao": [1054, 1055, 1056, 1057, 1059], "zhenfish": 1055, "zheng": [1047, 1048, 1053], "zhenq": 1049, "zhi": [572, 1016], "zhiqe": 1049, "zhou": [572, 648, 909, 1016, 1049, 1057, 1058], "zht2007": 205, "zhu": [138, 423, 528, 562, 667, 908], "zhuyi": [1049, 1050], "zhuzhunashvili": [416, 470], "ziad": 1059, "zibulevski": [673, 694, 695], "zichen": 1046, "zielinska": 1052, "zihna": [1054, 1060], "ziji": [1049, 1050], "zijlstra": 1044, "zike": 1047, "zimek": 454, "zimmer": [1045, 1055], "zinkov": [1041, 1042, 1043, 1045, 1046], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 382, 423, 837, 1020, 1037], "zisserman": [647, 1002, 1010], "zito": [1041, 1054], "ziv": 1047, "zivori": 1047, "zj": [1049, 1050], "zoj613": 1053, "zolisa": 1053, "zoom": [43, 143, 317, 404], "zoom_in_percentile_rang": 317, "zorder": [51, 93, 126, 156, 166, 176, 184, 208, 216, 239, 241, 248, 251, 261, 327, 333, 352], "zou": [138, 205, 423, 528, 562, 665, 1006, 1024], "zou_et_al_criterion_resc": 205, "zoubin": 908, "zoubir": 114, "zouhar": 1054, "zsh": 372, "zuckerberg": 0, "zwinck": 1043, "zxcvbniu": 1048, "zz": 113, "zzrh2009": 423, "z\u00e9": 1049, "\u00e4yr\u00e4m\u00f6": 1006, "\u00f3scar": [1045, 1046, 1047, 1048], "\u00f6zer": 1054, "\u0142ukasz": 1056, "\u015fahin": 1055, "\u0161t\u011bp\u00e1n": 1059, "\u675c\u4e16\u6a4b": [0, 406], "\u8d75\u4e30": 1055}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [193, 322, 324, 387, 396, 423, 1010], "0": [187, 326, 327, 328, 329, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "1": [192, 215, 329, 330, 331, 332, 333, 334, 396, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "10": [102, 1041], "11": 1041, "12": 1041, "13": 1042, "14": 1043, "15": 1044, "16": 1045, "17": 1046, "18": 1047, "19": 1048, "1d": 302, "2": [215, 331, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "20": [104, 358, 379, 1049], "2018": 1030, "20newgroup": 233, "21": 1050, "22": [326, 1051], "23": [327, 1052], "24": [328, 1053], "2d": [51, 87, 126, 132, 192], "3": [63, 202, 332, 1049, 1050, 1055, 1057], "3d": 192, "4": [333, 1041, 1049, 1058], "5": [334, 1026, 1041, 1059], "6": [1041, 1060], "7": 1041, "8": 1041, "9": 1041, "99": 379, "A": [52, 58, 59, 82, 93, 98, 218, 329, 383, 390, 420], "And": [242, 399], "In": 283, "NOT": 389, "One": [210, 232, 285, 329, 346, 420, 1016, 1024], "The": [0, 118, 120, 190, 191, 218, 243, 249, 270, 274, 283, 290, 294, 379, 388, 392, 420, 424, 1009, 1010, 1022], "Will": 396, "With": 256, "__sklearn_is_fitted__": 136, "_safe_index": 935, "abil": 181, "ablat": 255, "about": [0, 191, 396], "absolut": 1010, "access": 417, "accuraci": [193, 250, 358, 362, 1010], "accuracy_scor": 712, "across": 367, "action": 384, "activ": [0, 337], "ad": 416, "adaboost": [138, 139, 140, 423], "adaboostclassifi": [138, 562], "adaboostregressor": 563, "add": [333, 396], "add_dummy_featur": 895, "addit": [423, 1002], "additive_chi2_kernel": 767, "additivechi2sampl": 647, "address": 270, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 713, "adjusted_rand_scor": 714, "advanc": 256, "advantag": 416, "affin": [51, 73, 416, 1008], "affinity_propag": 462, "affinitypropag": 448, "agglom": [74, 75, 87], "agglomer": [86, 89, 1027], "agglomerativeclust": 449, "aggress": [999, 1006], "aic": [207, 1006], "algebra": [371, 393], "algorithm": [57, 58, 59, 73, 79, 84, 90, 98, 99, 100, 238, 245, 390, 396, 1004, 1006, 1011, 1013, 1014, 1018, 1026], "alias": 392, "align": 1007, "all": [276, 285, 330, 402, 1056, 1057, 1058], "all_displai": 948, "all_estim": 949, "all_funct": 950, "alloc": [54, 421], "alpha": [164, 362], "alpin": 402, "alreadi": 55, "altern": 999, "am": [148, 255], "amount": 288, "an": [82, 94, 136, 187, 200, 207, 307, 326, 330, 392, 396, 424, 999, 1016], "anaconda": 402, "analysi": [43, 64, 69, 70, 95, 124, 131, 134, 138, 151, 192, 203, 261, 278, 279, 286, 305, 306, 307, 358, 419, 421, 1004, 1013, 1027], "analyz": [52, 999], "angl": [207, 1006], "ani": 396, "anomali": 245, "anova": [170, 350], "api": [2, 41, 136, 258, 259, 326, 329, 331, 372, 386, 391, 398, 407, 412, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1058, 1059, 1060], "appli": 164, "applic": 424, "approach": [111, 207, 276], "approxim": [188, 195, 196, 250, 297, 328, 418, 1002], "ar": [102, 270, 329, 396], "arch": 402, "architectur": 1030, "ard": [203, 1006], "ardregress": 653, "arff": 378, "argument": [329, 386, 1052, 1054], "arm64": 392, "arrai": [41, 331, 334, 366, 393, 412, 1058, 1059, 1060], "artifact": 410, "artwork": 0, "as_float_arrai": 937, "ask": 396, "assert": 386, "assert_all_finit": 938, "assign": 416, "assumpt": 92, "atom": [49, 371], "attent": 396, "attribut": [386, 398, 412, 999], "auc": [326, 715], "author": [388, 1041], "autom": 384, "automat": [203, 397, 1006], "auxiliari": 41, "avail": [330, 1037, 1038], "available_if": 970, "averag": [283, 285, 416, 423, 1010], "average_precision_scor": 716, "avoid": [367, 417], "aweb": 1034, "ax": 391, "b": 117, "backend": 392, "backward": 384, "bag": [141, 150, 358, 423, 424, 999], "baggingclassifi": 564, "baggingregressor": 565, "balanc": [275, 1010], "balanced_accuracy_scor": 717, "ball": 1013, "balltre": [853, 1013], "base": [4, 41, 42, 43, 117, 145, 146, 173, 188, 203, 251, 326, 327, 329, 331, 332, 333, 384, 416, 420, 423, 425, 1006, 1018, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1060], "baseestim": [386, 430], "baselin": [196, 218], "basi": [44, 184, 426, 1002, 1006], "basic": [182, 236, 397, 418, 426], "batch": [416, 421], "bay": [61, 62, 1012], "bayesian": [25, 198, 199, 261, 276, 1006, 1009], "bayesiangaussianmixtur": 806, "bayesianridg": 654, "befor": 187, "behavior": 271, "behind": 0, "being": 191, "benchmark": [46, 49, 93, 358], "bernoulli": [1012, 1015], "bernoullinb": 848, "bernoullirbm": 869, "best": [266, 385, 396], "bestofmedia": 1034, "beta": 421, "betawork": 1034, "between": [99, 287, 1006], "bia": 141, "bic": [207, 266, 1006], "biclust": [27, 56, 57, 58, 188, 380, 413], "biclustermixin": 431, "bigger": 373, "bike": [43, 52, 192], "bin": 1020, "binar": [876, 896, 1020, 1021], "binari": [283, 296, 334, 1006, 1010], "birch": [77, 416, 450], "birchbox": 1034, "bisect": [78, 416], "bisectingkmean": [330, 451], "blind": 125, "bnp": 1034, "boil": 389, "boltzmann": [315, 1015], "bonu": 164, "book": 1034, "boost": [43, 144, 148, 149, 150, 151, 152, 153, 154, 192, 218, 326, 327, 329, 331, 332, 423], "bouldin": 416, "bound": 249, "boundari": [155, 160, 300, 341, 351], "branch": 392, "break": 355, "breast": [194, 381], "brier": 1010, "brier_score_loss": 718, "brute": [999, 1013], "bug": [383, 384, 1033, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "build": [180, 187, 382, 384, 392, 417, 1059, 1060], "bulk": [49, 371], "bunch": [396, 928], "busi": 270, "c": 390, "c4": 1026, "c5": 1026, "cach": [106, 299, 417], "calcul": [149, 161], "calibr": [5, 60, 61, 62, 63, 64, 151, 188, 218, 414, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "calibratedclassifiercv": 445, "calibration_curv": 447, "calibrationdisplai": 446, "california": 379, "calinski": 416, "calinski_harabasz_scor": 719, "call": [367, 383], "callgrind": 390, "can": [164, 396], "cancer": [194, 381], "candid": [288, 999], "canon": [117, 419], "card": 270, "cardif": 1034, "cardiotocographi": 255, "cart": 1026, "case": [354, 1006, 1010], "categor": [148, 323, 328, 333, 396, 423, 1012, 1020], "categori": [43, 330, 332, 1020], "categoricalnb": 849, "caus": 402, "causal": [190, 191], "cautiou": 191, "cca": [117, 490], "center": [124, 1020], "central": 55, "centroid": [308, 1013], "chain": [107, 257, 296, 397, 417], "chanc": 72, "chang": [252, 384, 399, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "changelog": [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "characterist": [285, 286, 1010], "check": [191, 278, 326, 392, 412, 1049, 1050, 1051], "check_arrai": 940, "check_consistent_length": 941, "check_cv": 833, "check_estim": 951, "check_increas": 645, "check_is_fit": [386, 993], "check_memori": 994, "check_random_st": 942, "check_scalar": 943, "check_scor": 720, "check_symmetr": 995, "check_x_i": 939, "checker": 41, "checklist": 384, "chi": [1002, 1008], "chi2": 613, "chi2_kernel": 768, "choic": 421, "choos": [46, 404], "ci": [384, 392], "circl": 101, "cite": 0, "claim": [218, 236], "class": [41, 63, 72, 138, 140, 161, 202, 227, 232, 279, 283, 285, 329, 346, 349, 398, 415, 420, 423, 424, 1010, 1013, 1016, 1024, 1025, 1041, 1042], "class_likelihood_ratio": 721, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 104, 121, 165, 176, 177, 178, 179, 183, 188, 234, 253, 279, 282, 283, 286, 296, 300, 308, 315, 326, 335, 340, 351, 358, 380, 426, 1006, 1010, 1011, 1013, 1014, 1024, 1025, 1026], "classifi": [25, 41, 61, 62, 64, 67, 136, 162, 202, 257, 273, 290, 296, 300, 326, 334, 341, 344, 347, 358, 366, 414, 423, 1004, 1013], "classification_report": 722, "classifierchain": [844, 1011], "classifiermixin": 433, "classifiertag": 929, "classnameprefixfeaturesoutmixin": 432, "clear": 1051, "clear_data_hom": 494, "clone": [386, 441], "close": [383, 392], "cloud": 126, "cloudpickl": 410, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 80, 82, 84, 87, 90, 91, 93, 95, 98, 99, 100, 101, 102, 124, 188, 330, 332, 359, 380, 413, 416, 421, 1010, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "cluster_optics_dbscan": 463, "cluster_optics_xi": 464, "clustermixin": 434, "co": [57, 59, 413], "co2": 180, "code": [0, 46, 124, 133, 384, 386, 389, 390, 392, 421, 1045, 1046, 1047, 1048, 1049], "coeffici": [173, 191, 198, 222, 223, 416, 1010], "cohen": 1010, "cohen_kappa_scor": 725, "coin": [81, 82], "color": 83, "column": [104, 105, 257], "column_or_1d": 996, "columntransform": [334, 417, 472], "com": 1034, "combin": [159, 246], "comment": 389, "commit": 384, "committe": 399, "common": [191, 367, 398, 412, 424, 1010], "commun": [0, 384], "compact": 247, "compar": [63, 77, 79, 97, 111, 117, 144, 158, 169, 196, 198, 204, 220, 225, 245, 251, 276, 284, 305, 313, 317, 323, 396], "comparison": [64, 67, 70, 78, 99, 113, 132, 148, 149, 168, 175, 238, 239, 251, 276, 287, 294, 360, 1006], "compat": [41, 326, 384, 386, 412], "compil": [382, 390], "complement": 1012, "complementnb": 850, "complet": [254, 416], "completeness_scor": 726, "complex": [46, 247, 257, 275, 278, 338, 362, 371, 1006, 1013, 1014, 1024, 1025, 1026], "compon": [118, 124, 305, 306, 307, 421, 1013, 1027], "compos": [7, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "composit": [103, 188, 417, 999], "compoundkernel": 621, "compress": [53, 88, 371], "comput": [41, 55, 73, 82, 84, 98, 99, 102, 111, 144, 211, 223, 289, 370, 371, 417, 420, 1017, 1031], "computation": 373, "compute_class_weight": 944, "compute_optics_graph": 465, "compute_sample_weight": 945, "concaten": 108, "concentr": 261, "concept": [398, 1006], "conclud": [43, 242], "conclus": [46, 52, 175, 203, 207, 294, 300, 324, 351], "conda": 382, "condit": [192, 328, 1017], "confid": 151, "config_context": 476, "configur": [371, 372], "confus": [269, 416, 1010], "confusion_matrix": 727, "confusionmatrixdisplai": [246, 706], "connect": [416, 424], "consensu": 1006, "consensus_scor": 728, "consider": 270, "constant": [218, 270, 1000], "constantkernel": 622, "constraint": [154, 156, 331, 333, 416, 423], "construct": 251, "consum": 252, "content": 396, "conting": 416, "contingency_matrix": 723, "continu": [318, 384], "contribut": [384, 396], "contributor": [0, 383, 384, 399, 1045, 1046, 1047, 1048, 1049], "control": [367, 423, 1014], "convent": 385, "converg": 138, "convergencewarn": 580, "convex": 228, "cookbook": 184, "coordin": 207, "core": [0, 47, 373, 383, 390, 396, 399, 1012], "corpu": 424, "correl": [191, 194, 419, 1010, 1018], "cosin": 1008, "cosine_dist": 769, "cosine_similar": 770, "cost": [270, 362, 1026], "countvector": 597, "covari": [8, 70, 110, 111, 113, 114, 115, 188, 263, 418, 1004, 1049, 1053, 1054, 1055, 1057, 1058, 1060], "coverag": [384, 392, 1010], "coverage_error": 729, "covertyp": [255, 379], "craft": 389, "crash": 396, "creat": [104, 131, 138, 222, 246, 283, 324, 350, 351, 396], "credit": 270, "criteria": [205, 396, 1006, 1026], "criterion": [207, 328, 999, 1024], "cross": [43, 116, 117, 164, 172, 188, 207, 270, 271, 272, 274, 275, 279, 281, 286, 324, 350, 367, 415, 419, 420, 999, 1006], "cross_decomposit": [9, 1051, 1053, 1055, 1057, 1059, 1060], "cross_val_predict": 834, "cross_val_scor": [280, 835], "cross_valid": [420, 836], "cubic": 199, "cumul": 1010, "curat": 383, "curv": [62, 64, 199, 251, 258, 267, 273, 278, 283, 285, 292, 414, 1005], "custom": [136, 274, 334, 343, 424, 1020, 1025], "cut": [270, 290], "cv": [271, 367], "cv_results_": 999, "cython": [385, 390, 392], "d": [420, 1013], "d2_absolute_error_scor": 730, "d2_log_loss_scor": 731, "d2_pinball_scor": 732, "d2_tweedie_scor": 733, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 82, 84, 85, 90, 92, 93, 98, 99, 101, 102, 104, 109, 111, 113, 115, 117, 118, 125, 126, 129, 130, 131, 139, 145, 146, 149, 152, 154, 155, 159, 169, 172, 173, 181, 183, 187, 190, 193, 194, 196, 199, 204, 211, 212, 222, 246, 251, 258, 266, 271, 273, 277, 282, 283, 285, 286, 289, 300, 304, 309, 315, 317, 321, 322, 323, 333, 336, 347, 350, 353, 354, 359, 360, 367, 371, 373, 389, 396, 398, 416, 417, 420, 425, 1020, 1024, 1034], "dataconversionwarn": 581, "datadimensionalitywarn": 582, "datafram": [326, 333, 396, 1058], "dataiku": 1034, "datarobot": 1034, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 93, 97, 104, 117, 119, 120, 121, 122, 124, 132, 138, 144, 147, 148, 159, 164, 175, 177, 179, 180, 182, 184, 188, 190, 191, 192, 198, 201, 203, 207, 218, 220, 227, 236, 238, 239, 245, 250, 255, 256, 270, 274, 282, 283, 290, 294, 296, 324, 340, 341, 344, 351, 358, 363, 376, 377, 378, 379, 380, 381, 389, 396, 426, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "davi": 416, "davies_bouldin_scor": 734, "dbscan": [84, 416, 427, 452], "dbscan_clust": 90, "dcg_score": 735, "deal": [41, 396], "debian": 402, "debug": 392, "debugg": 390, "decis": [138, 139, 147, 155, 160, 188, 250, 270, 290, 300, 332, 334, 341, 351, 361, 362, 363, 364, 365, 366, 396, 399, 415, 1026], "decisionboundarydisplai": 640, "decisiontre": 139, "decisiontreeclassifi": 921, "decisiontreeregressor": [328, 922], "decod": 424, "decompos": 421, "decomposit": [11, 116, 117, 123, 124, 141, 188, 380, 419, 421, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "decreas": [145, 146, 193], "deep": 396, "default": [252, 304, 384], "default_tag": 946, "defin": [72, 82, 93, 102, 238, 271, 273, 274, 360, 1010], "definit": [236, 315, 1017, 1051], "deflat": 117, "delai": 976, "demand": [43, 52], "demo": [58, 59, 73, 82, 84, 90, 93, 98, 100], "demonstr": [92, 280, 320, 336], "dendrogram": 76, "denois": [44, 127], "dens": 204, "densiti": [265, 301, 302, 310, 332, 422, 954, 1025], "densitymixin": 435, "depend": [192, 252, 256, 382, 1017, 1041, 1054, 1055], "deploi": 396, "deploy": 402, "deprec": [1, 252, 384, 947, 1051], "descent": [207, 226, 232, 1006, 1024], "descript": 190, "design": 180, "det": [273, 1010], "det_curv": 736, "detail": [1002, 1024, 1025], "detcurvedisplai": 707, "detect": [48, 245, 255, 273, 303, 304, 1010, 1016, 1025], "determin": [114, 203, 418, 1006, 1010], "develop": [135, 136, 188, 252, 382, 385, 386, 387, 391, 392, 393, 999, 1036, 1057], "devianc": [152, 1010], "devic": 412, "diabet": [164, 256, 290, 381], "diagnost": 381, "dict": 424, "dict_learn": 554, "dict_learning_onlin": 555, "dictionari": [85, 124, 127, 133, 421], "dictionarylearn": 540, "dictvector": [360, 590], "did": 396, "diff": 392, "differ": [75, 79, 97, 111, 184, 192, 317, 320, 323, 344, 351, 386, 396, 407, 416, 1006], "digit": [68, 87, 93, 165, 239, 315, 336, 337, 381], "dimension": [106, 238, 241, 257, 306, 322, 359, 1004, 1007, 1013, 1027], "direct": 235, "directli": 396, "dirichlet": [54, 421, 1009], "discount": 1010, "discov": 41, "discret": [155, 183, 318, 319, 1020], "discrimin": [69, 70, 1004], "discriminant_analysi": [12, 1049, 1050, 1053, 1055, 1056, 1057, 1060], "discuss": 383, "disk": 55, "dispatch": 394, "displai": [127, 223, 246, 247, 257, 331, 332, 333, 392, 1038, 1057], "distanc": [27, 113, 334], "distance_metr": 771, "distancemetr": 708, "distort": 127, "distribut": [50, 236, 238, 310, 321, 379, 402, 1007, 1020], "diverg": 421, "divid": 330, "do": [389, 396], "document": [0, 47, 57, 188, 328, 329, 357, 358, 359, 384, 1029, 1030, 1033, 1037, 1041, 1044, 1045, 1048, 1049], "doe": 396, "domain": 1029, "donat": 0, "dot": [184, 426], "dotproduct": 623, "down": 389, "download": [55, 159, 187, 378], "drawback": 416, "drop": [148, 1060], "dtype": 333, "dummi": [13, 1010, 1049, 1050, 1051, 1054, 1055, 1059], "dummyclassifi": 560, "dummyregressor": 561, "dump_svmlight_fil": 495, "dure": 367, "d\u00b2": 1010, "each": [283, 288, 358], "earli": [149, 154, 226], "earlier": 1041, "eas": 385, "effect": [109, 154, 190, 243, 317, 322, 339, 362], "effici": [331, 333, 393], "efficiencywarn": 583, "eigenfac": [45, 124], "eigenmap": 1007, "eigenvector": 55, "elast": [200, 206, 1006], "elasticnet": [203, 327, 655], "elasticnetcv": 656, "element": 398, "elimin": [171, 172, 425, 999], "ellipsoid": [70, 262], "ellipt": 1016, "ellipticenvelop": 477, "embed": [51, 87, 238, 239, 249, 307, 423, 1007], "emeritu": 0, "empir": [96, 114, 249, 418], "empirical_covari": 485, "empiricalcovari": 478, "enable_halving_search_cv": 588, "enable_iterative_imput": 589, "encod": [88, 148, 323, 324, 332, 1020, 1021], "enet_path": 690, "enforc": [1052, 1054], "engin": [43, 52, 193, 1029, 1034], "enhanc": [331, 399, 1029, 1044, 1045, 1046, 1047, 1048], "enrich": 333, "ensembl": [14, 137, 143, 147, 188, 423, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "enthought": 402, "entir": 396, "entri": 1023, "envelop": 1016, "environ": [372, 392, 410], "equival": 276, "error": [138, 142, 149, 151, 164, 198, 222, 273, 289, 392, 402, 1006, 1010], "establish": [99, 196], "estim": [41, 103, 110, 111, 112, 113, 114, 115, 135, 136, 141, 148, 150, 158, 181, 187, 188, 198, 221, 224, 247, 252, 254, 255, 265, 284, 294, 301, 302, 310, 326, 327, 328, 331, 333, 367, 386, 396, 397, 398, 404, 412, 417, 418, 420, 422, 423, 999, 1000, 1004, 1006, 1010, 1025, 1029, 1042, 1049, 1050, 1051], "estimate_bandwidth": 466, "estimator_html_repr": 953, "euclidean_dist": 772, "evalu": [52, 72, 93, 96, 114, 218, 255, 270, 277, 280, 315, 323, 359, 397, 411, 413, 416, 420, 423, 999, 1005, 1010], "evernot": 1034, "exact": 421, "exampl": [42, 45, 48, 88, 94, 109, 119, 130, 136, 155, 182, 188, 214, 215, 222, 352, 355, 373, 389, 396, 407, 412, 415, 424, 426, 430, 433, 436, 439, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 490, 491, 492, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 513, 515, 519, 520, 521, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 593, 596, 597, 598, 599, 600, 602, 603, 606, 608, 609, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 626, 627, 628, 631, 632, 634, 636, 637, 639, 640, 641, 642, 643, 644, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 664, 665, 666, 667, 668, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 699, 700, 701, 702, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 721, 722, 726, 727, 728, 736, 738, 741, 743, 744, 746, 747, 750, 751, 754, 755, 757, 758, 759, 761, 762, 764, 766, 770, 787, 788, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 866, 869, 870, 871, 872, 873, 874, 877, 878, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 899, 902, 906, 907, 909, 910, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 928, 942, 952, 954, 961, 966, 967, 968, 969, 970, 983, 993, 1041], "except": [15, 393, 1053, 1057], "execut": [367, 396], "exercis": [163, 164, 165, 166, 188], "exhaust": 999, "exist": 384, "exp": [184, 426], "expans": 198, "expect": [192, 328, 1017], "experi": [0, 72, 383], "experiment": [16, 331, 388, 412, 1057], "explain": 1010, "explained_variance_scor": 737, "explicit": 250, "explor": 43, "exponenti": 625, "export": [40, 396], "export_graphviz": 925, "export_text": 926, "expsinesquar": 624, "extend": 1006, "extens": [390, 402], "extern": [378, 1028, 1041, 1050], "extract": [54, 108, 127, 236, 277, 359, 371, 373, 424], "extract_patches_2d": 593, "extrapol": 180, "extratreeclassifi": 923, "extratreeregressor": 924, "extratreesclassifi": 566, "extratreesregressor": 567, "extrem": [389, 423], "f": [168, 1010], "f1": 283, "f1_score": 738, "f_classif": 614, "f_regress": 615, "fa": [124, 131], "face": [45, 85, 124, 254, 379, 1034], "factor": [54, 124, 131, 134, 303, 304, 421, 1016], "factoranalysi": 541, "fail": 389, "failur": [190, 999], "fast_logdet": 955, "faster": [331, 423], "fastica": [124, 125, 126, 428, 542], "fbeta_scor": 739, "featur": [43, 52, 86, 89, 108, 129, 143, 145, 146, 148, 152, 154, 156, 157, 167, 169, 171, 172, 173, 188, 193, 194, 196, 198, 212, 215, 236, 250, 256, 277, 315, 318, 319, 322, 323, 326, 328, 329, 350, 358, 359, 371, 373, 384, 388, 407, 417, 423, 424, 425, 1000, 1018, 1020, 1027, 1044, 1045, 1046, 1047, 1048], "feature_extract": [17, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "feature_select": [18, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "featureagglomer": [416, 453], "featurehash": [360, 591], "featureunion": [417, 872], "fedora": 402, "fetch_20newsgroup": 496, "fetch_20newsgroups_vector": 497, "fetch_california_h": 498, "fetch_covtyp": 499, "fetch_fil": 500, "fetch_kddcup99": 501, "fetch_lfw_pair": 502, "fetch_lfw_peopl": 503, "fetch_olivetti_fac": 504, "fetch_openml": [331, 505], "fetch_rcv1": 506, "fetch_species_distribut": 507, "file": [55, 384, 392, 402, 424], "final": [92, 175], "find": 1013, "first": [48, 72], "fit": [29, 58, 63, 92, 125, 131, 145, 146, 151, 152, 180, 198, 199, 200, 212, 215, 220, 224, 283, 296, 304, 309, 324, 353, 367, 386, 397, 407, 412, 423, 1012, 1016], "fitfailedwarn": 584, "fix": [72, 1041, 1044, 1045, 1046, 1047, 1048, 1054], "fixedthresholdclassifi": [334, 808], "flag": 392, "flexibl": [329, 1000], "float64": 412, "fold": [392, 420], "footprint": 88, "forc": [999, 1013], "forecast": [52, 180], "forest": [142, 144, 145, 146, 158, 193, 194, 255, 258, 333, 379, 423, 1016], "forg": 382, "format": [378, 389, 396, 1011], "formul": [413, 423, 1004, 1013, 1024, 1025, 1026], "four": 101, "fowlk": 416, "fowlkes_mallows_scor": 740, "framework": 1029, "free": 182, "freebsd": 382, "freez": 396, "french": 218, "frequenc": 236, "frequent": 396, "frequentist": 276, "frobeniu": 421, "from": [17, 51, 127, 173, 193, 323, 326, 372, 378, 382, 396, 424, 1010, 1051], "fruit": 383, "fulli": 190, "function": [41, 49, 70, 184, 208, 222, 223, 228, 239, 271, 289, 290, 328, 350, 360, 393, 420, 423, 426, 1002, 1006, 1010, 1025, 1058], "functiontransform": 877, "fund": 0, "futur": 396, "futurewarn": 1051, "gain": [270, 1010], "galleri": [430, 433, 436, 439, 440, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 490, 491, 492, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 513, 515, 519, 520, 521, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 590, 591, 593, 596, 597, 598, 599, 600, 602, 603, 606, 608, 609, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 626, 627, 628, 631, 632, 634, 636, 637, 639, 640, 641, 642, 643, 644, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 664, 665, 666, 667, 668, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 697, 698, 699, 700, 701, 702, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 721, 722, 726, 727, 728, 736, 738, 741, 743, 744, 746, 747, 750, 751, 754, 755, 757, 758, 759, 761, 762, 764, 766, 770, 787, 788, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 866, 869, 870, 871, 872, 873, 874, 877, 878, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 899, 902, 906, 907, 909, 910, 911, 913, 916, 917, 918, 919, 920, 921, 922, 927, 928, 942, 952, 954, 961, 966, 967, 968, 969, 970, 983, 993], "gamma": [236, 332, 1010], "gammaregressor": 657, "gaussian": [61, 62, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 260, 261, 262, 265, 266, 267, 317, 426, 1009, 1012, 1020, 1022], "gaussian_process": [19, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "gaussianmixtur": 807, "gaussiannb": 851, "gaussianprocessclassifi": 619, "gaussianprocessregressor": 620, "gaussianrandomproject": 905, "gdb": 390, "gen_batch": 960, "gen_even_slic": 961, "gener": [10, 25, 52, 58, 61, 70, 73, 82, 84, 90, 92, 98, 99, 101, 102, 111, 113, 115, 121, 122, 125, 126, 127, 145, 155, 169, 172, 175, 181, 182, 184, 188, 197, 198, 199, 203, 212, 218, 220, 251, 266, 273, 289, 304, 309, 315, 327, 336, 353, 354, 367, 380, 384, 398, 421, 423, 1006, 1020, 1030], "genericunivariateselect": 601, "german": 270, "get": [367, 392, 396, 397], "get_config": 635, "get_data_hom": 508, "get_feature_names_out": 330, "get_param": 386, "get_routing_for_object": 968, "get_scor": 741, "get_scorer_nam": 742, "get_tag": 962, "git": 384, "github": 384, "gitter": 1033, "glm": 25, "glossari": 398, "gmm": [263, 264], "goal": 1030, "good": [384, 389], "govern": [0, 399], "gpc": [176, 177, 178, 179, 426], "gperftool": 390, "gpr": [180, 181, 426], "gprof": 390, "gpu": 396, "gradient": [43, 144, 148, 149, 150, 151, 152, 153, 154, 192, 218, 226, 232, 326, 327, 329, 331, 332, 423, 1006, 1024], "gradientboostingclassifi": [423, 568], "gradientboostingregressor": [423, 569], "gram": 200, "graph": [41, 51, 326, 393, 396, 416, 424], "graphic": [396, 1015], "graphical_lasso": 486, "graphicallasso": 479, "graphicallassocv": 480, "greek": 81, "grid": [257, 274, 276, 284, 287, 999], "grid_to_graph": 594, "gridsearchcv": [106, 164, 280, 809], "ground": [72, 198], "group": [330, 332, 420, 1034], "groupkfold": 810, "groupshufflesplit": 811, "grow": 72, "guid": [387, 1036], "guidelin": [384, 386], "halv": [287, 288, 328, 999], "halvinggridsearchcv": 812, "halvingrandomsearchcv": 813, "ham": 1010, "hamming_loss": 743, "hand": 68, "handl": [41, 194, 1000], "handwritten": [93, 239, 381], "harabasz": 416, "hard": 423, "has_fit_paramet": 997, "hash": [157, 393, 424], "hashingvector": [359, 598], "haversine_dist": 773, "hdbscan": [90, 332, 416, 454], "help": [383, 396], "helper": [49, 184, 239, 393], "here": 366, "hessian": 1007, "heterogen": [104, 417], "hierarch": [76, 82, 97, 102, 332, 416], "hierarchi": 416, "higher": 372, "highlight": [188, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 1041, 1044, 1045, 1048, 1049], "hing": 1010, "hinge_loss": 744, "histgradientboost": [328, 333], "histgradientboostingclassifi": [423, 570], "histgradientboostingregressor": [330, 571], "histogram": [144, 154, 327, 329, 331, 422, 423], "histori": [0, 1039], "hmm": 396, "hoc": 290, "hole": 242, "home": 276, "homebrew": 382, "homogen": 416, "homogeneity_completeness_v_measur": 745, "homogeneity_scor": 746, "hot": 148, "hour": 52, "hourli": 190, "hous": [148, 255, 379], "how": [164, 367, 384, 390, 396], "howaboutw": 1034, "html": [247, 386], "huber": 1006, "huberregressor": [201, 658], "hug": 1034, "hyper": [29, 151, 274, 328, 999], "hyperparamet": [90, 180, 181, 277, 284, 294, 626], "hyperplan": [230, 348, 349], "i": [334, 366, 389, 396, 420, 1034], "ic": [192, 1017], "ica": [125, 421], "id3": 1026, "idf": 424, "illustr": [106, 179, 184, 307, 426], "imag": [17, 44, 82, 85, 88, 101, 127, 378, 396, 424], "img_to_graph": 595, "impact": [43, 96, 1056, 1057, 1058, 1059, 1060], "implement": [136, 204, 396, 1010, 1013, 1024, 1025], "import": [145, 146, 152, 173, 193, 194, 250, 294, 322, 326, 415, 423, 1018], "improv": [327, 328, 329, 330, 331, 333, 334, 383, 384, 1044, 1045], "impur": [145, 146, 193, 362, 1018], "imput": [20, 185, 186, 187, 188, 326, 334, 1000, 1020, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "includ": 396, "inclus": 396, "incom": 190, "inconsist": 367, "inconsistentversionwarn": 585, "incr_mean_variance_axi": 984, "increment": [128, 373, 421], "incrementalpca": 543, "independ": [124, 421], "index": [416, 964], "indic": 271, "individu": [162, 192, 328, 1017], "induct": 91, "infer": 190, "influenc": [46, 49, 371], "infonea": 1034, "inform": [168, 187, 205, 207, 388, 416, 999, 1006], "infrastructur": 0, "infrequ": [330, 332, 1020], "init": 386, "initi": [94, 96, 264], "inplace_column_scal": 985, "inplace_csr_column_scal": 986, "inplace_csr_row_normalize_l1": 991, "inplace_csr_row_normalize_l2": 992, "inplace_row_scal": 987, "inplace_swap_column": 988, "inplace_swap_row": 989, "input": [41, 371, 386, 412, 416, 1020], "inputtag": 930, "inria": 1034, "inspect": [21, 188, 189, 401, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "instal": [382, 402], "instanc": [367, 373], "instanti": 386, "instead": 270, "instruct": 382, "insur": 236, "integr": 384, "intel": 402, "interact": [43, 192, 331, 423], "interfac": [27, 407], "intern": [324, 415], "internet": 51, "interoper": 1029, "interpol": 219, "interpret": [180, 191, 222, 255, 296, 421, 423], "interv": 151, "introduc": 259, "introduct": 1007, "introductori": 182, "invari": [90, 279], "invers": [115, 418, 1022], "io": 410, "iri": [120, 130, 132, 147, 177, 227, 341, 344, 363, 381, 426], "is_classifi": 442, "is_cluster": 443, "is_multilabel": 971, "is_regressor": 444, "iso": [178, 283], "isol": 1016, "isolationforest": [155, 572], "isomap": [238, 239, 697, 1007], "isoton": [22, 248, 414, 1001, 1049, 1050, 1051, 1053, 1055, 1056], "isotonic_regress": 646, "isotonicregress": 644, "issu": [383, 384, 392], "iter": [187, 288, 420], "iterativeimput": [186, 636, 1000], "j": 1034, "jaccard": 1010, "jaccard_scor": 747, "job": 396, "joblib": [372, 390, 410], "johnson": [249, 1022], "johnson_lindenstrauss_min_dim": 907, "joint": 212, "k": [78, 80, 83, 92, 93, 94, 96, 99, 102, 117, 300, 322, 359, 416, 420, 1010, 1013, 1020], "k_mean": 467, "kappa": 1010, "kbinsdiscret": [318, 320, 878], "kcachegrind": 390, "kddcup": 379, "kddcup99": 255, "kdtree": [854, 1013], "keep": 1000, "kei": 410, "kernel": [19, 43, 44, 129, 175, 180, 181, 183, 184, 188, 195, 196, 250, 251, 301, 302, 310, 328, 343, 346, 351, 353, 421, 422, 426, 627, 1002, 1003, 1008, 1020, 1025], "kernel_approxim": [23, 1051, 1053, 1054, 1055, 1056, 1057], "kernel_metr": 774, "kernel_ridg": [24, 1058], "kernelcenter": 879, "kerneldens": 858, "kernelpca": [129, 544], "kernelridg": 652, "keyword": [329, 1052, 1054], "kfold": 814, "kmean": [95, 99, 327, 455], "kmeans_plusplu": 468, "kneighbors_graph": 866, "kneighborsclassifi": 855, "kneighborsregressor": 856, "kneighborstransform": 857, "knn": [187, 326], "knnimput": 637, "knowledg": 385, "known": [1049, 1050], "kpca": 421, "l": 199, "l1": [53, 203, 209, 211, 234, 354, 425], "l1_min_c": 920, "l2": [222, 354], "label": [41, 72, 283, 336, 337, 338, 379, 380, 416, 420, 423, 1010, 1021, 1023], "label_binar": 897, "label_ranking_average_precision_scor": 748, "label_ranking_loss": 749, "labelbinar": [880, 1021], "labelencod": 881, "labelpropag": 908, "labelspread": 909, "lag": 52, "laplacian": 1008, "laplacian_kernel": 775, "lar": [206, 659, 1006], "larg": 424, "lars_path": 691, "lars_path_gram": 692, "larscv": 660, "lasso": [53, 203, 204, 205, 206, 207, 212, 327, 661, 1006], "lasso_path": 693, "lassocv": 662, "lassolar": 663, "lassolars": 665, "lassolarscv": 664, "latenc": [49, 371], "latent": [54, 117, 421], "latentdirichletalloc": 545, "latest": 402, "layer": [192, 312, 1014], "lda": [70, 132, 421, 1004], "leakag": 367, "learn": [0, 41, 44, 51, 85, 124, 127, 174, 188, 190, 191, 192, 196, 237, 238, 239, 240, 251, 252, 270, 271, 278, 307, 313, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 370, 371, 373, 380, 382, 384, 385, 386, 388, 389, 396, 399, 402, 421, 423, 1005, 1007, 1015, 1023, 1029, 1030, 1032, 1034, 1035, 1037], "learner": [138, 423], "learning_curv": 837, "learningcurvedisplai": 815, "least": [118, 151, 207, 213, 216, 1006], "leav": [362, 420, 1006], "leaveonegroupout": 816, "leaveoneout": 817, "leavepgroupsout": 818, "leavepout": 819, "ledoit": [69, 112, 418], "ledoit_wolf": 487, "ledoit_wolf_shrinkag": 488, "ledoitwolf": [111, 481], "lemma": 1022, "length": [155, 402], "lesson": [190, 191], "level": [180, 181, 372, 416, 423], "liabil": 218, "librari": [371, 372], "libsvm": 378, "likelihood": [111, 198, 199, 279, 1010, 1015], "limit": [148, 175, 371, 402, 410, 424], "lindenstrauss": [249, 1022], "line": [164, 178], "linear": [25, 43, 62, 69, 70, 151, 175, 188, 191, 197, 198, 214, 218, 221, 224, 238, 239, 250, 327, 346, 351, 353, 371, 393, 396, 1004, 1006, 1007, 1008, 1020], "linear_kernel": 776, "linear_model": [25, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "lineardiscriminantanalysi": [331, 558], "linearregress": [220, 666], "linearsvc": [345, 913], "linearsvr": 914, "link": [371, 1010], "linkag": [97, 416], "linnerrud": 381, "linux": [382, 396, 402], "list": [72, 388, 1033], "loa": 180, "load": [44, 46, 55, 85, 93, 120, 144, 146, 148, 152, 164, 173, 193, 211, 236, 239, 246, 250, 258, 277, 285, 286, 296, 300, 322, 323, 347, 350, 358, 359, 360, 377, 378, 389, 396, 424], "load_breast_canc": 509, "load_diabet": 510, "load_digit": 511, "load_fil": 512, "load_iri": 513, "load_linnerud": 514, "load_sample_imag": [515, 516], "load_svmlight_fil": [517, 518], "load_win": 519, "loader": 10, "local": [238, 239, 303, 304, 1007, 1016], "locally_linear_embed": 702, "locallylinearembed": 698, "localoutlierfactor": 859, "lock": [384, 392], "lof": [303, 304], "log": [198, 199, 1010], "log_loss": 750, "logarithm": 1010, "logist": [107, 202, 208, 209, 210, 211, 233, 234, 1006], "logisticregress": [296, 667], "logisticregressioncv": 668, "loo": 420, "look": [52, 251, 353], "loss": [154, 218, 228, 327, 330, 332, 423, 1010, 1058], "lot": 396, "love": 1034, "low": [416, 423, 425], "lower": 372, "lpo": 420, "lsa": 359, "mac": 402, "machin": [174, 188, 190, 191, 192, 315, 342, 392, 1015, 1025], "machinali": 1034, "maco": 382, "macport": 402, "macro": 285, "mahalanobi": 113, "mail": 1033, "main": [47, 218], "maintain": [0, 384, 388, 410], "major": [423, 1049, 1050], "make": [159, 162, 187, 384, 399], "make_biclust": 520, "make_blob": [389, 521], "make_checkerboard": 522, "make_circl": 523, "make_classif": [389, 524], "make_column_selector": 474, "make_column_transform": 475, "make_friedman1": 525, "make_friedman2": 526, "make_friedman3": 527, "make_gaussian_quantil": 528, "make_hastie_10_2": 529, "make_low_rank_matrix": 530, "make_moon": 531, "make_multilabel_classif": 532, "make_pipelin": 874, "make_regress": [389, 533], "make_s_curv": 534, "make_scor": 751, "make_sparse_coded_sign": 535, "make_sparse_spd_matrix": 536, "make_sparse_uncorrel": 537, "make_spd_matrix": 538, "make_swiss_rol": 539, "make_union": 875, "mallow": 416, "manag": [372, 402], "manhattan_dist": 777, "mani": [271, 331, 372, 396, 1058, 1059, 1060], "manifold": [26, 188, 237, 238, 239, 240, 380, 1007, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060], "manual": [270, 415], "map": [250, 321, 1020], "mar": 1034, "margin": [198, 199, 230, 348, 352], "mark": 1000, "markdown": 389, "marker": 384, "market": 51, "match": [217, 1006], "matern": 628, "mathemat": [41, 413, 423, 1002, 1004, 1013, 1017, 1024, 1025, 1026], "matric": [41, 393, 1020], "matrix": [54, 55, 183, 200, 269, 416, 421, 1010], "matter": 191, "matthew": 1010, "matthews_corrcoef": 752, "mat\u00e9rn": [184, 426], "max": [111, 1010], "max_error": 753, "maxabs_scal": 898, "maxabsscal": [317, 882], "maximum": [230, 348, 1015], "md": [699, 1007], "mdi": [146, 193], "mean": [78, 80, 83, 92, 93, 94, 96, 98, 99, 145, 146, 187, 193, 222, 359, 416, 1010, 1020], "mean_absolute_error": 754, "mean_absolute_percentage_error": 755, "mean_gamma_devi": 756, "mean_pinball_loss": 757, "mean_poisson_devi": 758, "mean_shift": 469, "mean_squared_error": 759, "mean_squared_log_error": 760, "mean_tweedie_devi": 761, "mean_variance_axi": 990, "meanshift": [98, 456], "measur": [159, 279, 416, 1010], "media": 1033, "median": [1006, 1010], "median_absolute_error": 762, "member": 383, "memori": [88, 333, 371, 390, 392], "merg": 388, "meson": [392, 1059], "messag": [276, 384], "meta": [41, 158, 252, 294, 328, 412, 423], "metadata": [41, 252, 332, 333, 358, 398, 407, 1058, 1059, 1060], "metadatarequest": 965, "metadatarout": 966, "metaestimatormixin": 436, "method": [97, 108, 117, 137, 175, 188, 238, 240, 264, 293, 295, 398, 410, 416, 1002, 1016, 1017], "methodmap": 967, "metric": [27, 72, 75, 151, 270, 280, 412, 416, 420, 999, 1008, 1010, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "micro": [283, 285], "min_cluster_s": 90, "min_po": 936, "min_sampl": 90, "mincovdet": 482, "mini": [416, 421], "minibatchdictionarylearn": 546, "minibatchkmean": [77, 99, 124, 457], "minibatchnmf": [330, 547], "minibatchsparsepca": [124, 421, 548], "minim": [389, 1026, 1054, 1055], "minimum": [114, 418], "minmax_scal": 899, "minmaxscal": [317, 883], "misc": 1041, "miscellan": [25, 188, 244, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "mislead": 1018, "miss": [154, 185, 186, 187, 188, 326, 332, 333, 423, 1000, 1020, 1026], "missingind": 638, "mix": 105, "mixin": 386, "mixtur": [28, 188, 260, 261, 262, 265, 266, 267, 1009, 1049, 1050, 1054, 1055, 1057, 1059], "mlp": 314, "mlpclassifi": [313, 870], "mlpregressor": 871, "mnist": [234, 314], "mode": [117, 371], "model": [25, 27, 29, 43, 46, 50, 52, 92, 109, 117, 125, 131, 144, 145, 146, 148, 149, 152, 155, 172, 173, 175, 180, 188, 191, 192, 193, 196, 197, 198, 203, 205, 207, 212, 218, 221, 236, 246, 251, 255, 256, 260, 262, 266, 267, 268, 270, 275, 276, 278, 283, 296, 304, 309, 315, 322, 327, 329, 333, 351, 353, 358, 371, 386, 396, 397, 399, 410, 411, 420, 999, 1005, 1006, 1009, 1010, 1012, 1014, 1015, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "model_select": [29, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "modifi": 1007, "modul": [1041, 1049, 1050, 1056, 1057, 1058, 1059, 1060], "mona": 180, "monitor": 384, "monoton": [154, 156, 333, 423], "more": [329, 396, 1014], "morgan": 1034, "most": 336, "motor": 218, "mp": 412, "much": 164, "multi": [25, 90, 138, 158, 192, 212, 227, 241, 254, 280, 283, 312, 365, 390, 1006, 1007, 1010, 1014, 1025, 1026], "multiclass": [30, 41, 188, 233, 285, 293, 294, 326, 393, 414, 1010, 1011, 1050, 1053, 1054, 1055], "multicollinear": 194, "multidimension": 238, "multilabel": [27, 122, 253, 296, 380, 393, 1010, 1011], "multilabel_confusion_matrix": 763, "multilabelbinar": [884, 1021], "multinomi": [210, 234, 1006, 1012], "multinomialnb": 852, "multioutput": [31, 188, 295, 1011, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1059], "multioutputclassifi": [845, 1011], "multioutputregressor": [846, 1011], "multipl": [108, 257, 280, 367, 391, 420, 999, 1000, 1010, 1049, 1050], "multitaskelasticnet": 669, "multitaskelasticnetcv": 670, "multitasklasso": 671, "multitasklassocv": 672, "multivari": [117, 1000], "murmurhash3_32": 974, "mutual": [168, 416], "mutual_info_classif": 616, "mutual_info_regress": 617, "mutual_info_scor": 764, "my": 396, "n_featur": 49, "n_job": 396, "naiv": [43, 52, 61, 62, 1012], "naive_bay": [32, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "name": [156, 329, 396, 417], "nan": 1000, "nan_euclidean_dist": 778, "nativ": [148, 323, 326, 328, 333], "ndcg_score": 765, "nearest": [102, 188, 297, 298, 299, 300, 305, 308, 309, 326, 1000, 1013], "nearestcentroid": 860, "nearestneighbor": 861, "necessari": 389, "need": 396, "neg": [54, 124, 173, 213, 421, 1006], "neighbor": [33, 102, 188, 238, 297, 298, 299, 300, 305, 309, 322, 326, 1000, 1007, 1013, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "neighborhood": [305, 306, 307, 1013], "neighborhoodcomponentsanalysi": 862, "nest": [281, 417], "net": [200, 206, 1006], "netbsd": 402, "network": [188, 192, 311, 1014, 1015], "neural": [188, 192, 311, 1014, 1015], "neural_network": [34, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "new": [326, 328, 329, 331, 332, 384, 396, 1028, 1041, 1042, 1044, 1045, 1046, 1047, 1048], "newsgroup": [104, 358, 379], "next": [52, 397], "nightli": 382, "nmf": [124, 330, 421, 549], "nnmf": 421, "nois": [181, 182, 199], "noisi": [127, 182, 222], "non": [43, 54, 124, 151, 213, 218, 222, 238, 281, 334, 346, 353, 421, 1006, 1020], "non_negative_factor": 556, "none": 367, "norm": 421, "normal": [69, 196, 218, 317, 321, 885, 900, 1010, 1020], "normalized_mutual_info_scor": 766, "note": [373, 412, 415, 420], "notfittederror": 586, "novelti": [303, 1016, 1025], "now": [326, 329, 1051], "number": [72, 95, 148, 154, 172, 288, 371, 386, 1000], "numer": [191, 334, 372, 386], "numpi": [372, 389], "nusvc": 915, "nusvr": 916, "nystroem": [648, 1002], "oa": [69, 111, 112, 429, 483], "object": [41, 246, 271, 386, 396, 999, 1010, 1038], "observ": 190, "obtain": [396, 420], "off": [270, 290, 1006], "offici": 1060, "okcupid": 1034, "older": 1041, "olivetti": 379, "omp": 1006, "one": [118, 148, 256, 1006, 1010], "oneclasssvm": 917, "onehotencod": [330, 886], "onetoonefeaturemixin": 437, "onevsoneclassifi": [841, 1011], "onevsrestclassifi": [296, 842, 1011], "onli": [215, 235, 1052, 1054], "onlin": [85, 225, 329, 330, 1024], "onnx": 410, "oob": 142, "openml": [44, 323, 326, 378], "openmp": [372, 385], "oper": [41, 285, 286, 383, 393, 426, 1010], "optic": [100, 381, 416, 458], "optim": [29, 41, 390, 999], "optimis": 181, "option": [386, 415], "oracl": 418, "ordin": 148, "ordinalencod": [332, 887], "ordinari": [216, 1006], "org": [378, 388, 1034], "origin": [88, 129, 282, 307, 317], "orthogon": [217, 1006], "orthogonal_mp": 694, "orthogonal_mp_gram": 695, "orthogonalmatchingpursuit": 673, "orthogonalmatchingpursuitcv": 674, "osx": [396, 402], "other": [323, 378, 396, 423, 1029, 1041], "otto": 1034, "our": [93, 271, 274, 290, 384], "out": [47, 150, 373, 392, 420, 999, 1006, 1012], "outdat": 392, "outlier": [25, 48, 201, 235, 245, 255, 303, 304, 317, 1006, 1016, 1020], "outliermixin": 438, "outlin": 1018, "output": [158, 254, 317, 331, 333, 365, 1026], "outputcodeclassifi": [843, 1011], "over": 257, "overfit": 291, "overhead": 371, "oversubscript": 372, "overview": [294, 391, 410, 416, 1016], "ovo": 285, "ovr": 285, "own": [386, 396, 1010], "p": [420, 1034], "packag": [250, 1029, 1053], "pair": 416, "pair_confusion_matrix": 724, "paired_cosine_dist": 779, "paired_dist": 780, "paired_euclidean_dist": 781, "paired_manhattan_dist": 782, "pairwis": [27, 43, 276, 334, 1008], "pairwise_dist": 787, "pairwise_distances_argmin": 788, "pairwise_distances_argmin_min": 789, "pairwise_distances_chunk": 790, "pairwise_kernel": 783, "pairwisekernel": 629, "panda": [331, 389, 396], "parallel": [41, 146, 372, 390, 416, 423, 975, 999], "parallel_backend": 977, "paramet": [29, 41, 46, 111, 151, 274, 328, 347, 354, 384, 386, 397, 398, 417, 423, 999, 1006, 1010, 1025], "parametergrid": 820, "parametersampl": 821, "parametr": 1015, "parametrize_with_check": 952, "pariba": 1034, "paristech": 1034, "pariti": 99, "parser": [331, 378], "part": [85, 425], "parti": [218, 252, 402], "partial": [118, 190, 192, 256, 1017], "partial_depend": 642, "partialdependencedisplai": 641, "partit": 196, "passiv": 1006, "passiveaggressiveclassifi": 675, "passiveaggressiveregressor": 676, "past": 0, "patch": [127, 424], "patchextractor": 592, "path": [155, 206, 211, 223, 366, 402], "pattern": 134, "pca": [44, 93, 107, 120, 124, 125, 128, 129, 130, 131, 132, 322, 333, 334, 421, 550, 1027], "pdp": 192, "peerindex": 1034, "penalti": [209, 229, 354], "peopl": [0, 396, 1041, 1042, 1043, 1044], "per": 359, "percentag": 1010, "percentil": 350, "perceptron": [192, 312, 677, 1006, 1014], "perform": [72, 78, 279, 322, 328, 330, 334, 336, 359, 371, 384, 385, 416, 420], "period": [43, 219], "permiss": 396, "permut": [145, 193, 194, 282, 326, 420, 1018], "permutation_import": 643, "permutation_test_scor": 838, "perplex": 243, "persist": 410, "phimeca": 1034, "pickl": 410, "pictur": 81, "pinbal": 1010, "pipelin": [35, 103, 104, 106, 107, 159, 170, 188, 191, 247, 252, 257, 277, 323, 350, 386, 396, 397, 417, 425, 873, 1027, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "pitfal": [191, 367], "pixel": 146, "pl": 117, "plai": 350, "plan": 396, "plant": 381, "platform": [382, 392, 402], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 82, 84, 85, 92, 98, 99, 101, 102, 111, 115, 117, 120, 121, 122, 125, 126, 139, 144, 147, 152, 155, 159, 160, 161, 162, 164, 172, 187, 192, 198, 199, 203, 210, 211, 212, 222, 223, 227, 239, 246, 250, 255, 256, 258, 266, 272, 273, 278, 280, 283, 285, 289, 292, 296, 304, 315, 323, 326, 328, 329, 336, 344, 345, 350, 351, 358, 363, 391, 1005, 1017, 1038], "plot_tre": 927, "pls1": 117, "pls2": 117, "plscanon": [419, 491], "plsregress": [419, 492], "plssvd": [419, 493], "point": [126, 270, 290, 307, 410], "poisson": [218, 236, 327, 328, 1010], "poissonregressor": 678, "polar": [52, 333], "polici": 384, "polynomi": [43, 196, 198, 199, 219, 351, 1002, 1006, 1008, 1020], "polynomial_kernel": 784, "polynomialcountsketch": [328, 649], "polynomialfeatur": 888, "posit": [124, 329], "possibl": [92, 389], "post": [29, 270, 279, 290, 362, 415], "post1": 1051, "posterior": 184, "power": [118, 218], "power_transform": 901, "powertransform": [317, 889], "pr": 383, "practic": [276, 367, 385, 389, 1007, 1014, 1024, 1025, 1026], "pre": [279, 367, 397], "precis": [283, 1010], "precision_recall_curv": 791, "precision_recall_fscore_support": 792, "precision_scor": 793, "precisionrecalldisplai": [246, 709], "precomput": [133, 200, 326, 421], "predefin": [420, 1010], "predefinedsplit": 822, "predict": [43, 49, 52, 61, 118, 139, 151, 162, 176, 190, 199, 218, 251, 270, 272, 283, 336, 371, 396, 397, 415, 420, 426, 1010, 1021], "predictionerrordisplai": 710, "predictor": 159, "premium": 236, "prepar": [124, 139, 149, 154, 196, 238, 285, 286, 322, 347], "preprocess": [36, 152, 159, 188, 191, 192, 255, 257, 316, 360, 367, 396, 1020, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "preprocessor": 192, "preserv": 392, "preval": 279, "princip": [55, 118, 421, 1027], "prior": [53, 184, 261], "privat": 1058, "probabilist": [131, 176, 421, 426], "probabl": [61, 62, 63, 66, 161, 178, 414, 423, 1025], "problem": [191, 270, 421, 1025, 1026], "process": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 367, 399, 426, 1009], "process_rout": 969, "processor": 397, "product": [184, 236, 392, 396, 410, 426, 630], "profil": 390, "project": [0, 118, 129, 132, 249, 386, 396, 1022, 1027, 1029], "pronounc": 396, "propag": [51, 73, 336, 337, 338, 416, 1023], "proper": [52, 180], "properti": 398, "propos": 399, "provid": 389, "prune": [326, 362, 1026], "public": 1051, "publica": 1034, "pull": [384, 388, 392, 396], "pure": 236, "purpos": [222, 360, 1030], "pursuit": [217, 1006], "pypi": [396, 1060], "pytest": 392, "python": [250, 372, 390, 1028, 1029], "pytorch": 412, "qda": [70, 1004], "quadrat": [70, 184, 426, 1004], "quadraticdiscriminantanalysi": 559, "qualit": [43, 52], "qualiti": [359, 1010], "quantifi": [359, 1010], "quantil": [52, 151, 154, 220, 329, 330, 1006], "quantile_transform": 902, "quantileregressor": [220, 679], "quantiletransform": [317, 890], "quantiz": [83, 88], "question": [396, 1033], "r2_score": 794, "r_regress": 618, "radial": [184, 426, 1002], "radius_neighbors_graph": 867, "radiusneighborsclassifi": 863, "radiusneighborsregressor": 864, "radiusneighborstransform": 865, "rand": 416, "rand_scor": 795, "random": [41, 55, 124, 142, 144, 157, 158, 193, 194, 249, 258, 282, 284, 333, 367, 386, 393, 420, 421, 423, 999, 1006, 1022, 1027], "random_project": [37, 1055], "random_st": 396, "randomforestclassifi": 573, "randomforestregressor": 574, "randomized_range_find": 956, "randomized_svd": 957, "randomizedsearchcv": 823, "randomli": [121, 122], "randomst": 367, "randomtreesembed": 575, "rang": 1020, "rangespan": 1034, "rank": [27, 218, 1010], "ransac": [221, 1006], "ransacregressor": 680, "rate": 423, "ratio": [279, 1010], "ration": [184, 426], "rationalquadrat": 632, "rbf": [250, 346, 347, 351, 426, 631, 1008, 1025], "rbf_kernel": 785, "rbfsampler": 650, "rcv1": 379, "reachabl": 416, "read": 384, "real": [42, 48, 109, 188, 379], "recal": [283, 1010], "recall_scor": 796, "receiv": [285, 286, 1010], "recent": 1, "recogn": 68, "recognit": [45, 379, 381], "recommend": [367, 1029], "reconstruct": [44, 53, 127], "reconstruct_from_patches_2d": 596, "recov": 198, "recurs": [171, 172, 425], "redirect": 55, "reduc": [93, 371], "reduct": [106, 238, 242, 257, 306, 322, 359, 1004, 1013, 1027], "refer": [2, 50, 62, 64, 114, 127, 141, 196, 203, 294, 310, 388, 426, 1000], "refit": [270, 274], "regard": [270, 415], "region": [81, 276], "register_parallel_backend": 979, "regress": [25, 27, 43, 52, 107, 109, 117, 118, 139, 151, 152, 162, 175, 180, 181, 182, 183, 198, 199, 202, 207, 209, 210, 211, 214, 216, 218, 220, 233, 235, 236, 248, 251, 309, 353, 364, 365, 380, 417, 426, 1001, 1003, 1006, 1010, 1011, 1013, 1014, 1024, 1025, 1026], "regressor": [25, 49, 139, 151, 198, 222, 324, 326, 329, 423], "regressorchain": [847, 1011], "regressormixin": 439, "regressortag": 931, "regular": [78, 111, 153, 191, 211, 222, 223, 312, 354, 1006, 1014], "reinforc": 396, "relat": [43, 47, 1018, 1029, 1048], "releas": [188, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 388, 402, 1039], "relev": [113, 203, 1006], "remark": [43, 92, 242, 249], "remot": 392, "remov": [396, 425, 1020, 1041], "repeat": [367, 417, 420], "repeatedkfold": 824, "repeatedstratifiedkfold": 825, "replac": 187, "repli": 392, "replic": 410, "report": [384, 389, 1010], "repositori": 378, "represent": [120, 192, 247, 327, 371, 386, 424], "reproduc": [367, 389], "request": [384, 388, 392, 396], "resampl": 980, "rescal": 322, "reshap": 371, "resourc": [288, 372, 384, 1028, 1033], "respect": 279, "respons": [117, 399], "rest": [210, 285], "restart": 390, "restrict": [315, 1015], "result": [46, 47, 58, 64, 73, 82, 84, 85, 92, 93, 98, 99, 102, 111, 113, 115, 125, 126, 139, 144, 159, 162, 187, 196, 203, 223, 251, 255, 280, 289, 296, 304, 323, 353, 359, 367, 999], "retriev": [51, 326], "return": 412, "reuter": 47, "review": [383, 384, 392], "rfe": 602, "rfecv": 603, "rich": [247, 327], "ridg": [175, 199, 201, 216, 222, 223, 251, 324, 681, 1003, 1006], "ridge_regress": 696, "ridgeclassifi": 683, "ridgeclassifiercv": 684, "ridgecv": 682, "right": 404, "roadmap": 1030, "robust": [25, 90, 113, 114, 198, 221, 224, 367, 418, 999, 1006], "robust_scal": 903, "robustscal": [317, 891], "roc": [258, 273, 285, 286, 326, 1010], "roc_auc_scor": 797, "roc_curv": 798, "roccurvedisplai": [246, 711], "role": 399, "roll": [242, 386], "root_mean_squared_error": 799, "root_mean_squared_log_error": 800, "rotat": 134, "rout": [41, 252, 332, 333, 398, 407, 1058, 1059, 1060], "routin": [47, 372, 393], "rule": 1010, "run": [46, 93, 280], "runtim": [333, 382], "r\u00b2": 1010, "sa": 255, "safe_mask": 981, "safe_sparse_dot": 958, "safe_sqr": 982, "sampl": [10, 41, 58, 73, 90, 98, 111, 125, 126, 169, 200, 231, 251, 277, 289, 309, 327, 353, 356, 378, 393, 398, 423, 1006], "sample_without_replac": 978, "saniti": 392, "save": 396, "scalabl": [196, 278, 327], "scale": [90, 191, 238, 241, 322, 354, 373, 904, 1007, 1016, 1020, 1027], "scaler": 317, "scatter": [117, 120], "scenario": 1006, "scientif": 1028, "scikit": [0, 41, 252, 271, 326, 327, 328, 329, 330, 331, 332, 333, 334, 370, 371, 382, 385, 386, 388, 389, 396, 399, 402, 1029, 1030, 1034, 1037], "scipi": [372, 1058], "score": [55, 117, 144, 164, 172, 187, 198, 266, 275, 282, 283, 350, 407, 416, 420, 1005, 1010, 1025], "script": 389, "search": [257, 274, 276, 284, 287, 294, 397, 999], "second": [48, 72], "secur": [410, 1059], "segment": [81, 101], "select": [25, 27, 89, 95, 106, 131, 164, 167, 169, 172, 173, 188, 205, 207, 212, 266, 268, 350, 396, 407, 411, 420, 425, 999, 1006, 1047], "selectfdr": 604, "selectfpr": 605, "selectfrommodel": [425, 606], "selectfw": 607, "selectkbest": 608, "selectormixin": 610, "selectpercentil": 609, "self": [328, 339, 1023], "selftrainingclassifi": 910, "semant": 421, "semi": [188, 335, 336, 340, 341, 1023], "semi_supervis": [38, 1051, 1052, 1053, 1057, 1060], "sen": [235, 1006], "sens": 53, "sensit": 270, "separ": [125, 230, 348, 349], "sequenc": [183, 396], "sequenti": [173, 425], "sequentialfeatureselector": [328, 611], "seri": [52, 212, 420], "serv": 410, "set": [48, 109, 111, 130, 159, 187, 222, 270, 283, 334, 347, 362, 396, 415, 420, 1006], "set_config": 911, "set_output": [259, 331, 333, 386], "set_param": 386, "setuptool": 1060, "sever": [236, 240], "sgd": [227, 228, 229, 230, 231, 1006, 1024], "sgdclassifi": 685, "sgdoneclasssvm": 686, "sgdregressor": 687, "shape": 243, "share": [43, 52, 192], "shift": [98, 416], "should": 396, "show": [164, 285], "show_vers": 912, "shrinkag": [111, 418, 423, 1004], "shrunk": 418, "shrunk_covari": 489, "shrunkcovari": 484, "shrunken": 1013, "shuffl": [420, 983], "shufflesplit": 826, "sigmoid": [351, 414, 1008], "sigmoid_kernel": 786, "signal": [203, 421], "signific": 282, "silhouett": [95, 416], "silhouette_sampl": 801, "silhouette_scor": 802, "similar": [183, 1008, 1010], "simpl": [136, 175, 252, 302, 390], "simpleimput": [334, 639], "simul": 190, "sine": [184, 267, 426], "singl": [141, 159, 236, 246, 380, 416, 1000], "single_source_shortest_path_length": 963, "singular": [55, 421], "sinusoid": 199, "size": 423, "sketch": 1002, "skew": 1002, "skewedchi2sampl": 651, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "sklearn_assume_finit": 372, "sklearn_build_enable_debug_symbol": 372, "sklearn_enable_debug_cython_direct": 372, "sklearn_pairwise_dist_chunk_s": 372, "sklearn_run_float32_test": 372, "sklearn_se": 372, "sklearn_skip_network_test": 372, "sklearn_tests_global_random_se": 372, "sklearn_warnings_as_error": 372, "sklearn_working_memori": 372, "skop": 410, "slep": 399, "smacof": 703, "small": 389, "sne": [243, 1007], "so": 396, "social": 1033, "soft": 423, "solido": 1034, "solut": 92, "solver": [225, 421, 1006], "some": 350, "someth": 389, "sometim": 396, "sort_graph_by_row_valu": 868, "sourc": [104, 125, 382], "space": [51, 129, 417, 999, 1007], "spars": [41, 115, 124, 133, 191, 203, 204, 233, 326, 333, 358, 359, 393, 418, 421, 425, 1020, 1022, 1024, 1058], "sparse_encod": 557, "sparsecod": 551, "sparsefunc": 1050, "sparsepca": [421, 552], "sparserandomproject": 906, "sparsiti": [209, 215, 424], "spawn": 372, "speci": [50, 310, 379], "special": 360, "specif": [285, 382, 386, 999, 1029, 1030], "specifi": [156, 396, 999], "spectral": [57, 58, 59, 101, 238, 413, 416, 1007], "spectral_clust": 470, "spectral_embed": 704, "spectralbiclust": [58, 459], "spectralclust": 460, "spectralcoclust": 461, "spectralembed": 700, "speed": [49, 390], "sphere": 240, "sphinx": 384, "spline": [43, 219, 329, 1020], "splinetransform": 892, "split": [148, 328, 367, 420], "splitter": [29, 367], "sponsor": 0, "spotifi": 1034, "sprint": 0, "squar": [118, 151, 184, 213, 216, 222, 426, 1002, 1006, 1008, 1010], "stabil": 327, "stabl": 329, "stack": [159, 326, 423], "stackingclassifi": 576, "stackingregressor": 577, "stall": 384, "standard": [392, 1020], "standardscal": [317, 893], "start": 397, "statement": 1030, "statist": [276, 1029], "statlog": 270, "statu": 407, "std": [164, 198], "step": [43, 257, 388, 397, 417], "stochast": [226, 232, 238, 313, 1006, 1007, 1015, 1024], "stock": 51, "stop": [149, 154, 226, 424, 1024], "strategi": [88, 274, 294, 313, 320, 332, 334, 373, 416, 1010], "stratif": 420, "stratifi": 420, "stratifiedgroupkfold": [420, 827], "stratifiedkfold": 828, "stratifiedshufflesplit": 829, "stream": 373, "string": 396, "strip": 358, "strong": 201, "strongli": 1018, "structur": [51, 74, 82, 102, 183, 338, 366], "studi": 255, "submit": 384, "subpackag": 1030, "subsampl": 423, "subscript": 334, "subtleti": 367, "success": [287, 288, 328, 999], "sum": 633, "summar": 410, "summari": [62, 149, 207, 359, 360, 410, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "supervis": [188, 335, 336, 340, 341, 1014, 1023, 1032], "support": [0, 62, 148, 154, 188, 212, 323, 326, 327, 328, 329, 331, 332, 333, 342, 345, 353, 396, 402, 407, 412, 414, 423, 1025, 1026, 1033, 1058, 1059, 1060], "surfac": [147, 250, 363], "svc": [258, 351, 354, 918, 1025], "svd": [55, 124, 421], "svm": [39, 45, 166, 169, 170, 196, 232, 250, 329, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 355, 356, 1006, 1016, 1024, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "svmlight": 378, "svr": [251, 353, 919, 1025], "swiss": 242, "switch": 372, "symmetr": 117, "synthet": [61, 109, 198, 203, 273, 324, 389], "system": 382, "t": [238, 243, 1007], "tabl": 396, "tag": [382, 384, 386, 932], "take": 276, "takeawai": 218, "talk": 1028, "tangent": 1007, "target": [41, 109, 182, 236, 323, 324, 396, 398, 417, 1011, 1020, 1021], "targetencod": [332, 894], "targettag": 933, "task": [25, 212, 1006, 1029], "team": [0, 383], "technic": 399, "techniqu": 239, "templat": 386, "tensor": 1002, "term": [359, 398, 424], "test": [44, 111, 168, 279, 282, 289, 358, 362, 382, 384, 386, 392, 393, 420], "text": [17, 47, 188, 247, 277, 340, 357, 358, 359, 360, 379, 424], "tf": 424, "tfidftransform": 599, "tfidfvector": [359, 360, 600], "than": 396, "theil": [235, 1006], "theilsenregressor": 688, "them": [127, 383], "theoret": 249, "thi": [222, 1030], "third": [218, 252, 402], "thread": 372, "threshold": [270, 290, 334, 339, 415], "throughput": [49, 371], "tie": 355, "time": [43, 52, 144, 212, 250, 251, 358, 420, 1031], "timeseriessplit": 830, "tip": [371, 385, 392, 999, 1007, 1014, 1024, 1025, 1026], "togeth": [256, 285], "toi": [79, 97, 245, 381], "toler": 173, "tomographi": 53, "too": 372, "tool": [393, 396, 412], "top": [359, 1010], "top_k_accuracy_scor": 803, "topic": 54, "total": [157, 362, 423], "tough": 383, "track": [392, 417], "tracker": [384, 1033], "trade": 1006, "tradeoff": [273, 1010], "train": [138, 139, 149, 152, 155, 162, 172, 222, 246, 251, 255, 256, 258, 266, 289, 294, 315, 323, 324, 328, 339, 347, 351, 358, 362, 363, 366, 410, 420, 1013, 1023], "train_test_split": 839, "transform": [104, 105, 106, 109, 117, 143, 157, 257, 328, 329, 330, 376, 396, 397, 417, 1013, 1020, 1021, 1022], "transformedtargetregressor": 473, "transformermixin": 440, "transformertag": 934, "translat": 1029, "tree": [40, 138, 139, 143, 145, 146, 147, 154, 157, 188, 193, 218, 326, 331, 332, 333, 361, 362, 363, 364, 365, 366, 396, 423, 425, 1013, 1018, 1026, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "triag": 383, "trick": [371, 390, 392, 424], "trigonometr": 43, "troubleshoot": 402, "true": [198, 199], "truncat": 421, "truncatedsvd": 553, "trust": 164, "trustworthi": 705, "truth": [72, 198], "tsne": [297, 701], "tune": [29, 151, 270, 274, 277, 290, 328, 334, 415, 999], "tunedthresholdclassifiercv": [334, 831], "tutori": [163, 188, 1028], "tweedi": [236, 1010], "tweedieregressor": [236, 689], "two": [101, 140, 204, 256, 276], "type": [105, 261, 385, 386, 398, 412, 416], "type_of_target": 972, "typic": 383, "t\u00e9l\u00e9com": 1034, "u": 0, "ubuntu": 402, "uci": 294, "unbalanc": [349, 1025], "uncertain": 336, "uncertainti": 52, "unclaim": 384, "undefinedmetricwarn": 587, "under": [183, 396, 1036, 1057], "underfit": 291, "understand": 366, "unfold": 392, "uniform": [317, 1020], "unique_label": 973, "univari": [89, 117, 169, 350, 425, 1000], "univers": 386, "unlabel": 1023, "unless": 389, "unstructur": 102, "unsupervis": [1013, 1015, 1027, 1035], "unweight": 407, "up": 1016, "updat": [388, 1051], "us": [44, 45, 51, 55, 83, 124, 125, 127, 156, 157, 159, 173, 180, 221, 232, 234, 276, 280, 285, 296, 318, 353, 358, 359, 366, 367, 373, 385, 389, 390, 392, 396, 420, 421, 424, 425, 1004, 1006, 1007, 1010, 1014, 1024, 1025, 1026, 1034, 1051], "usabl": 396, "usag": [390, 396, 407, 412, 414, 417, 423, 424, 1006], "user": [1033, 1036], "util": [41, 377, 389, 393, 1038, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "v": [89, 102, 111, 112, 114, 118, 129, 172, 192, 193, 201, 210, 236, 279, 285, 289, 291, 362, 416, 423, 1000], "v_measure_scor": 804, "valgrind": [390, 392], "valid": [29, 41, 43, 164, 172, 207, 249, 270, 271, 272, 274, 275, 279, 281, 286, 292, 350, 367, 371, 386, 393, 415, 420, 999, 1005, 1006], "validate_data": 998, "validation_curv": 840, "validationcurvedisplai": [332, 832], "valu": [154, 173, 185, 186, 187, 188, 243, 252, 326, 332, 333, 366, 384, 412, 421, 423, 1000, 1010, 1018, 1020, 1026], "vanilla": [270, 290], "vari": [72, 312, 339, 416], "variabl": [25, 117, 190, 191, 372, 396], "varianc": [141, 216, 425, 1010, 1020], "variancethreshold": 612, "variant": 186, "variat": [261, 1009], "variou": [49, 87, 225, 243], "vector": [55, 62, 88, 188, 342, 345, 353, 358, 360, 424, 1025], "version": [330, 378, 382, 384, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "versu": [141, 232, 281, 341, 371], "via": [44, 52, 88, 205, 207, 236, 423, 1002], "video": [384, 1028], "visual": [5, 29, 51, 93, 134, 149, 246, 251, 258, 271, 314, 327, 347, 416, 417, 1010, 1038], "vote": [162, 423], "votingclassifi": [160, 161, 578], "votingregressor": 579, "wage": [190, 191], "wai": [192, 384, 396], "ward": [82, 102, 416], "ward_tre": 471, "warm": 390, "warm_start": 1014, "warn": 393, "we": 102, "weak": [138, 423], "websit": [388, 1051], "weight": [41, 138, 198, 200, 231, 314, 327, 356, 407, 423, 424], "weighted_mod": 959, "what": [366, 396], "when": 270, "which": 1006, "whitekernel": 634, "who": 1034, "why": [396, 423], "wikipedia": 55, "wild": 379, "window": [382, 402], "wine": 381, "winpython": 402, "wisconsin": 381, "within": 106, "without": [74, 305, 358], "wolf": [69, 112, 418], "word": [358, 424], "work": [41, 188, 357, 371, 383, 396], "workflow": [383, 410], "world": [42, 109, 188, 379], "wrap": 296, "written": 68, "wrong": [191, 396], "x": 235, "x86_64": 392, "xor": [179, 351, 426], "y": [235, 396, 1021, 1023], "yeast": 294, "yep": 390, "yhat": 1034, "you": [164, 396], "your": [386, 389, 1010], "zero": 1010, "zero_one_loss": 805, "zopa": 1034}})